{
  "cve_id": "CVE-2014-6422",
  "cve_desc": "The SDP dissector in Wireshark 1.10.x before 1.10.10 creates duplicate hashtables for a media channel, which allows remote attackers to cause a denial of service (application crash) via a crafted packet to the RTP dissector.",
  "repo": "wireshark/wireshark",
  "patch_hash": "04c05a21e34cec326f1aff2f5f8a6e74e1ced984",
  "patch_info": {
    "commit_hash": "04c05a21e34cec326f1aff2f5f8a6e74e1ced984",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/04c05a21e34cec326f1aff2f5f8a6e74e1ced984",
    "files": [
      "asn1/h245/packet-h245-template.c",
      "epan/dissectors/packet-ansi_a.c",
      "epan/dissectors/packet-applemidi.c",
      "epan/dissectors/packet-h245.c",
      "epan/dissectors/packet-rtp.c",
      "epan/dissectors/packet-rtp.h",
      "epan/dissectors/packet-sdp.c",
      "ui/gtk/voip_calls.c"
    ],
    "message": "Fix Bug 9920 Buildbot crash due to SDP/RTP mismatch\n\nFor details see comments in Bug 9920.\n\nThe executive summary:\nBug 9920 is a crash caused by a couple of issues:\n\n1) The memory ownership model for the rtp_dyn_payload hashtable is split: SDP\ncreates the rtp_dyn_payload hashtable, but RTP can free it. Since there isn't\n*one* pointer to the hashtable, RTP freeing it means SDP has a dangling\npointer.\n\n2) Either the SDP dissector shouldn't be creating two separate, unique\nhashtables for multiple media channels of the same addr:port, or RTP shouldn't\nbe free'ing the previous one.\n\nChange-Id: I436e67de6882f84aa82dcbdfe60bf313fe4fd99c\nReviewed-on: https://code.wireshark.org/review/918\nReviewed-by: Hadriel Kaplan <hadrielk@yahoo.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
      "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c",
      "epan/dissectors/packet-applemidi.c||epan/dissectors/packet-applemidi.c",
      "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c",
      "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
      "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h",
      "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c",
      "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c"
    ]
  },
  "patch_diff": {
    "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c": [
      "File: asn1/h245/packet-h245-template.c -> asn1/h245/packet-h245-template.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "342: static void h245_setup_channels(packet_info *pinfo, channel_info_t *upcoming_channel_lcl)",
      "343: {",
      "346:  struct srtp_info *dummy_srtp_info = NULL;",
      "348:  if (!upcoming_channel_lcl) return;",
      "",
      "[Removed Lines]",
      "344:  gint *key;",
      "345:  GHashTable *rtp_dyn_payload = NULL;",
      "",
      "[Added Lines]",
      "344:  rtp_dyn_payload_t *rtp_dyn_payload = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:  if (upcoming_channel_lcl->rfc2198 > 0) {",
      "369:  }",
      "371:  if (upcoming_channel_lcl->srtp_flag) {",
      "",
      "[Removed Lines]",
      "362:   encoding_name_and_rate_t *encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "363:   rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "364:   encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"red\");",
      "365:   encoding_name_and_rate->sample_rate = 8000;",
      "366:   key = wmem_new(wmem_file_scope(), gint);",
      "368:   g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "361:   rtp_dyn_payload = rtp_dyn_payload_new();",
      "362:   rtp_dyn_payload_insert(rtp_dyn_payload, upcoming_channel_lcl->rfc2198, \"red\", 8000);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c": [
      "File: epan/dissectors/packet-ansi_a.c -> epan/dissectors/packet-ansi_a.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6905:     gboolean                            first_assigned_found;",
      "6906:     gboolean                            rtp_dyn_payload_used;",
      "6907:     guint8                              rtp_payload_type;",
      "6913:     rtp_dyn_payload_used = FALSE;",
      "6915:     first_assigned_found = FALSE;",
      "",
      "[Removed Lines]",
      "6908:     GHashTable                          *rtp_dyn_payload;",
      "6909:     gint                                *key;",
      "6910:     encoding_name_and_rate_t            *encoding_name_and_rate;",
      "6912:     rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "6908:     rtp_dyn_payload_t                  *rtp_dyn_payload;",
      "6910:     rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7066:         if (format_assigned &&",
      "7067:             (first_assigned_found == FALSE))",
      "7068:         {",
      "7077:             rtp_dyn_payload_used = TRUE;",
      "7079:             first_assigned_found = TRUE;",
      "",
      "[Removed Lines]",
      "7069:             key  = wmem_new(wmem_file_scope(), gint);",
      "7072:             encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "7073:             encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), mime_type);",
      "7074:             encoding_name_and_rate->sample_rate = sample_rate;",
      "7076:             g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "7067:             rtp_dyn_payload_insert(rtp_dyn_payload, rtp_payload_type, mime_type, sample_rate);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7084:         if (in_band_format_assigned)",
      "7085:         {",
      "7094:             rtp_dyn_payload_used = TRUE;",
      "7095:         }",
      "",
      "[Removed Lines]",
      "7086:             key  = (gint *) wmem_alloc(wmem_file_scope(), sizeof(gint));",
      "7089:             encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "7090:             encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"telephone-event\");",
      "7091:             encoding_name_and_rate->sample_rate = sample_rate;",
      "7093:             g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "7077:             rtp_dyn_payload_insert(rtp_dyn_payload, rtp_payload_type, \"telephone-event\", sample_rate);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7100:     if (rtp_dyn_payload_used == FALSE)",
      "7101:     {",
      "7103:     }",
      "7105:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
      "",
      "[Removed Lines]",
      "7102:         rtp_free_hash_dyn_payload(rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "7086:         rtp_dyn_payload_free(rtp_dyn_payload);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-applemidi.c||epan/dissectors/packet-applemidi.c": [
      "File: epan/dissectors/packet-applemidi.c -> epan/dissectors/packet-applemidi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:  guint16   command;",
      "286:  conversation_t *p_conv;",
      "292:  if ( tvb_length( tvb ) < 4)",
      "",
      "[Removed Lines]",
      "288:  encoding_name_and_rate_t *encoding_name_and_rate = NULL;",
      "289:  GHashTable *rtp_dyn_payload = NULL;",
      "290:  gint *key;",
      "",
      "[Added Lines]",
      "288:  rtp_dyn_payload_t *rtp_dyn_payload = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:         rtp_add_address( pinfo, &pinfo->src, pinfo->srcport, 0, APPLEMIDI_DISSECTOR_SHORTNAME,",
      "310:     pinfo->fd->num, FALSE, rtp_dyn_payload);",
      "",
      "[Removed Lines]",
      "302:  encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "303:  rtp_dyn_payload = g_hash_table_new( g_int_hash, g_int_equal );",
      "304:  encoding_name_and_rate->encoding_name = wmem_strdup( wmem_file_scope(), \"rtp-midi\" );",
      "305:  encoding_name_and_rate->sample_rate = 10000;",
      "306:  key = wmem_new(wmem_file_scope(), gint);",
      "308:  g_hash_table_insert( rtp_dyn_payload, key, encoding_name_and_rate );",
      "",
      "[Added Lines]",
      "300:  rtp_dyn_payload = rtp_dyn_payload_new();",
      "301:  rtp_dyn_payload_insert(rtp_dyn_payload, 97, \"rtp-midi\", 10000);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c": [
      "File: epan/dissectors/packet-h245.c -> epan/dissectors/packet-h245.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "473: static void h245_setup_channels(packet_info *pinfo, channel_info_t *upcoming_channel_lcl)",
      "474: {",
      "477:  struct srtp_info *dummy_srtp_info = NULL;",
      "479:  if (!upcoming_channel_lcl) return;",
      "",
      "[Removed Lines]",
      "475:  gint *key;",
      "476:  GHashTable *rtp_dyn_payload = NULL;",
      "",
      "[Added Lines]",
      "475:  rtp_dyn_payload_t *rtp_dyn_payload = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "492:  if (upcoming_channel_lcl->rfc2198 > 0) {",
      "500:  }",
      "502:  if (upcoming_channel_lcl->srtp_flag) {",
      "",
      "[Removed Lines]",
      "493:   encoding_name_and_rate_t *encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "494:   rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "495:   encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"red\");",
      "496:   encoding_name_and_rate->sample_rate = 8000;",
      "497:   key = wmem_new(wmem_file_scope(), gint);",
      "499:   g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "492:   rtp_dyn_payload = rtp_dyn_payload_new();",
      "493:   rtp_dyn_payload_insert(rtp_dyn_payload, upcoming_channel_lcl->rfc2198, \"red\", 8000);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1932: static int ett_h245 = -1;",
      "",
      "[Removed Lines]",
      "1929: #line 392 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "1923: #line 386 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2427: static gint ett_h245_MobileMultilinkReconfigurationIndication = -1;",
      "2433: static int dissect_h245_MultimediaSystemControlMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
      "",
      "[Removed Lines]",
      "2430: #line 397 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "2424: #line 391 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "14499: static void",
      "14500: dissect_h245(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree)",
      "",
      "[Removed Lines]",
      "14497: #line 406 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "14491: #line 400 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "20188:         NULL, HFILL }},",
      "20192:   };",
      "",
      "[Removed Lines]",
      "20191: #line 487 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "20185: #line 481 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "20691:     &ett_h245_MobileMultilinkReconfigurationIndication,",
      "20695:   };",
      "20696:   module_t *h245_module;",
      "",
      "[Removed Lines]",
      "20694: #line 494 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "20688: #line 488 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c": [
      "File: epan/dissectors/packet-rtp.c -> epan/dissectors/packet-rtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102:     wmem_tree_t *multisegment_pdus;",
      "103: } rtp_private_conv_info;",
      "105: static reassembly_table rtp_reassembly_table;",
      "107: static int hf_rtp_fragments = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105: typedef struct {",
      "106:     char *encoding_name;",
      "107:     int   sample_rate;",
      "108: } encoding_name_and_rate_t;",
      "110: struct _rtp_dyn_payload_t",
      "111: {",
      "112:     GHashTable *table;",
      "113:     size_t ref_count;",
      "114: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "809: #ifdef DEBUG_CONVERSATION",
      "811: static void",
      "814:     encoding_name_and_rate_t *encoding = (encoding_name_and_rate_t*) value;",
      "817:     if (encoding) {",
      "818:         DPRINT2((\"encoding_name=%s\",",
      "819:                 encoding->encoding_name ? encoding->encoding_name : \"NULL\"));",
      "",
      "[Removed Lines]",
      "812: rtp_dyn_payload_table_foreach_func (gpointer key, gpointer value, gpointer user_data _U_) {",
      "813:     gint* pt = (gint*) key;",
      "816:     DPRINT2((\"pt=%d\",*pt));",
      "",
      "[Added Lines]",
      "823: rtp_dyn_payload_table_foreach_func(gpointer key, gpointer value, gpointer user_data _U_) {",
      "824:     guint pt = GPOINTER_TO_UINT(key);",
      "827:     DPRINT2((\"pt=%d\",pt));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "822:         DPRINT2((\"encoding=NULL\"));",
      "823:     }",
      "824: }",
      "826:     DPRINT2((\"rtp_dyn_payload hash table contents:\"));",
      "827:     DINDENT();",
      "838:     DENDENT();",
      "839: }",
      "",
      "[Removed Lines]",
      "825: static void rtp_dump_dyn_payload(GHashTable *rtp_dyn_payload) {",
      "828:     if (!rtp_dyn_payload) {",
      "829:         DPRINT2((\"null rtp_dyn_payload\"));",
      "830:         DENDENT();",
      "831:         return;",
      "832:     }",
      "833:     if (g_hash_table_size(rtp_dyn_payload) == 0) {",
      "834:         DPRINT2((\"rtp_dyn_payload is empty\"));",
      "835:     } else {",
      "836:         g_hash_table_foreach(rtp_dyn_payload, rtp_dyn_payload_table_foreach_func, NULL);",
      "837:     }",
      "",
      "[Added Lines]",
      "837: void",
      "838: rtp_dump_dyn_payload(rtp_dyn_payload_t *rtp_dyn_payload) {",
      "841:         if (!rtp_dyn_payload) {",
      "842:             DPRINT2((\"null pointer to rtp_dyn_payload\"));",
      "843:             DENDENT();",
      "844:             return;",
      "845:         }",
      "846:         DPRINT2((\"ref_count=%\" G_GSIZE_FORMAT, rtp_dyn_payload->ref_count));",
      "847:         if (!rtp_dyn_payload->table) {",
      "848:             DPRINT2((\"null rtp_dyn_payload table\"));",
      "849:             DENDENT();",
      "850:             return;",
      "851:         }",
      "852:         if (g_hash_table_size(rtp_dyn_payload->table) == 0) {",
      "853:             DPRINT2((\"rtp_dyn_payload has no entries\"));",
      "854:         } else {",
      "855:             g_hash_table_foreach(rtp_dyn_payload->table, rtp_dyn_payload_table_foreach_func, NULL);",
      "856:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "847:                   &addresses_reassembly_table_functions);",
      "848: }",
      "850: void",
      "852: {",
      "856: }",
      "859: void",
      "860: bluetooth_add_address(packet_info *pinfo, address *addr,",
      "",
      "[Removed Lines]",
      "851: rtp_free_hash_dyn_payload(GHashTable *rtp_dyn_payload)",
      "853:     if (rtp_dyn_payload == NULL) return;",
      "854:     g_hash_table_destroy(rtp_dyn_payload);",
      "855:     rtp_dyn_payload = NULL;",
      "",
      "[Added Lines]",
      "870:    This is necessary because we need to g_hash_table_destroy() them, either individually or",
      "871:    all at once at the end of the wmem file scope. Since rtp_dyn_payload_free() removes them",
      "872:    individually, we need to remove those then; and when the file scope is over, we have a",
      "873:    single registered callback walk this GHashTable and destroy each member as well as this",
      "874:    GHashTable.",
      "876: static GHashTable *rtp_dyn_payloads = NULL;",
      "880: static void",
      "881: rtp_dyn_payload_value_destroy(gpointer data)",
      "882: {",
      "883:     encoding_name_and_rate_t *encoding_name_and_rate_pt = (encoding_name_and_rate_t*) data;",
      "884:     wmem_free(wmem_file_scope(), encoding_name_and_rate_pt->encoding_name);",
      "885:     wmem_free(wmem_file_scope(), encoding_name_and_rate_pt);",
      "886: }",
      "889: static gboolean",
      "890: rtp_dyn_payloads_table_steal_func(gpointer key _U_, gpointer value, gpointer user_data _U_)",
      "891: {",
      "892:     rtp_dyn_payload_t *rtp_dyn_payload = (rtp_dyn_payload_t *)value;",
      "894: #ifdef DEBUG_CONVERSATION",
      "895:     DPRINT((\"about to steal_all and destroy the following:\"));",
      "896:     DINDENT();",
      "897:     rtp_dump_dyn_payload(rtp_dyn_payload);",
      "898:     DENDENT();",
      "899: #endif",
      "901:     if (rtp_dyn_payload->ref_count == 0) {",
      "903:         g_error(\"rtp_dyn_payload cannot be free'd because it should already have been!\\n\");",
      "904:     }",
      "905:     else if (rtp_dyn_payload->table) {",
      "908:         g_hash_table_steal_all(rtp_dyn_payload->table);",
      "909:         g_hash_table_destroy(rtp_dyn_payload->table);",
      "910:     }",
      "912:     return TRUE;",
      "913: }",
      "916:    which are pointed to by the single rtp_dyn_payloads GHashTable above.",
      "918: static gboolean",
      "919: wmem_rtp_dyn_payload_destroy_cb(wmem_allocator_t *allocator _U_, wmem_cb_event_t event _U_,",
      "920:         void *user_data _U_)",
      "921: {",
      "922:     g_assert(rtp_dyn_payloads);",
      "924:     DPRINT((\"destroying %u remaining rtp_dyn_payload_t's\", g_hash_table_size(rtp_dyn_payloads)));",
      "928:     g_hash_table_foreach_steal(rtp_dyn_payloads, rtp_dyn_payloads_table_steal_func, NULL);",
      "929:     g_hash_table_destroy(rtp_dyn_payloads);",
      "930:     rtp_dyn_payloads = NULL;",
      "933:     return FALSE;",
      "934: }",
      "937:    but those are called both at init and cleanup times, and the cleanup time is before",
      "938:    wmem scope is exited, so we ignore this if rtp_dyn_payloads is not NULL.",
      "940: static void",
      "941: rtp_dyn_payloads_init(void)",
      "942: {",
      "943:     if (rtp_dyn_payloads == NULL) {",
      "944:         rtp_dyn_payloads = g_hash_table_new(NULL, NULL);",
      "945:         wmem_register_callback(wmem_file_scope(), wmem_rtp_dyn_payload_destroy_cb, NULL);",
      "946:     }",
      "947: }",
      "950: rtp_dyn_payload_t* rtp_dyn_payload_new(void)",
      "951: {",
      "953:     rtp_dyn_payload_t * rtp_dyn_payload = wmem_new(wmem_file_scope(), rtp_dyn_payload_t);",
      "954:     rtp_dyn_payload->table = g_hash_table_new_full(NULL, NULL, NULL, rtp_dyn_payload_value_destroy);",
      "955:     rtp_dyn_payload->ref_count = 1;",
      "958:     g_hash_table_insert(rtp_dyn_payloads, rtp_dyn_payload, rtp_dyn_payload);",
      "960:     return rtp_dyn_payload;",
      "961: }",
      "963: static rtp_dyn_payload_t*",
      "964: rtp_dyn_payload_ref(rtp_dyn_payload_t *rtp_dyn_payload)",
      "965: {",
      "966:     if (rtp_dyn_payload) {",
      "967:         rtp_dyn_payload->ref_count++;",
      "968:     }",
      "969:     return rtp_dyn_payload;",
      "970: }",
      "973:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "976: rtp_dyn_payload_insert(rtp_dyn_payload_t *rtp_dyn_payload,",
      "977:                        const guint8 pt,",
      "978:                        const gchar* encoding_name,",
      "979:                        const int sample_rate)",
      "980: {",
      "981:     if (rtp_dyn_payload && rtp_dyn_payload->table) {",
      "982:         encoding_name_and_rate_t *encoding_name_and_rate_pt =",
      "983:                     wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "984:         encoding_name_and_rate_pt->encoding_name = wmem_strdup(wmem_file_scope(), encoding_name);",
      "985:         encoding_name_and_rate_pt->sample_rate = sample_rate;",
      "986:         g_hash_table_insert(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);",
      "987:     }",
      "988: }",
      "991:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "993: void",
      "994: rtp_dyn_payload_replace(rtp_dyn_payload_t *rtp_dyn_payload,",
      "995:                         const guint8 pt,",
      "996:                         const gchar* encoding_name,",
      "997:                         const int sample_rate)",
      "998: {",
      "999:     if (rtp_dyn_payload && rtp_dyn_payload->table) {",
      "1000:         encoding_name_and_rate_t *encoding_name_and_rate_pt =",
      "1001:                     wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "1002:         encoding_name_and_rate_pt->encoding_name = wmem_strdup(wmem_file_scope(), encoding_name);",
      "1003:         encoding_name_and_rate_pt->sample_rate = sample_rate;",
      "1004:         g_hash_table_replace(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);",
      "1005:     }",
      "1006: }",
      "1009: gboolean",
      "1010: rtp_dyn_payload_remove(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt)",
      "1012:     return (rtp_dyn_payload && rtp_dyn_payload->table &&",
      "1013:             g_hash_table_remove(rtp_dyn_payload->table, GUINT_TO_POINTER(pt)));",
      "1014: }",
      "1017: const gchar*",
      "1018: rtp_dyn_payload_get_name(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt)",
      "1019: {",
      "1020:     encoding_name_and_rate_t *encoding_name_and_rate_pt;",
      "1022:     if (!rtp_dyn_payload || !rtp_dyn_payload->table) return NULL;",
      "1024:     encoding_name_and_rate_pt = (encoding_name_and_rate_t*)g_hash_table_lookup(rtp_dyn_payload->table,",
      "1025:                                                                                GUINT_TO_POINTER(pt));",
      "1027:     return (encoding_name_and_rate_pt ? encoding_name_and_rate_pt->encoding_name : NULL);",
      "1028: }",
      "1031:    successful, else FALSE. The encoding string pointed to is only valid until the entry is",
      "1033: gboolean",
      "1034: rtp_dyn_payload_get_full(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt,",
      "1035:                          const gchar **encoding_name, int *sample_rate)",
      "1036: {",
      "1037:     encoding_name_and_rate_t *encoding_name_and_rate_pt;",
      "1041:     if (!rtp_dyn_payload || !rtp_dyn_payload->table) return FALSE;",
      "1043:     encoding_name_and_rate_pt = (encoding_name_and_rate_t*)g_hash_table_lookup(rtp_dyn_payload->table,",
      "1044:                                                                                GUINT_TO_POINTER(pt));",
      "1046:     if (encoding_name_and_rate_pt) {",
      "1049:     }",
      "1051:     return (encoding_name_and_rate_pt != NULL);",
      "1056: void",
      "1057: rtp_dyn_payload_free(rtp_dyn_payload_t *rtp_dyn_payload)",
      "1058: {",
      "1059:     if (!rtp_dyn_payload) return;",
      "1061:     if (rtp_dyn_payload->ref_count > 0)",
      "1062:         --(rtp_dyn_payload->ref_count);",
      "1064:     if (rtp_dyn_payload->ref_count == 0) {",
      "1066: #ifdef DEBUG_CONVERSATION",
      "1067:         DPRINT((\"free'ing the following rtp_dyn_payload:\"));",
      "1068:         DINDENT();",
      "1069:         rtp_dump_dyn_payload(rtp_dyn_payload);",
      "1070:         DENDENT();",
      "1071: #endif",
      "1074:         g_assert(rtp_dyn_payloads);",
      "1075:         if (!g_hash_table_remove(rtp_dyn_payloads, rtp_dyn_payload)) {",
      "1076:             g_error(\"rtp_dyn_payload not found in rtp_dyn_payloads table to remove!\");",
      "1077:         }",
      "1081:         if (rtp_dyn_payload->table)",
      "1082:             g_hash_table_destroy(rtp_dyn_payload->table);",
      "1085:         wmem_free(wmem_file_scope(), rtp_dyn_payload);",
      "1086:     }",
      "1087: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "933:     g_strlcpy(p_conv_data->method, setup_method, MAX_RTP_SETUP_METHOD_SIZE+1);",
      "934:     p_conv_data->frame_number = setup_frame_number;",
      "",
      "[Removed Lines]",
      "931:     rtp_free_hash_dyn_payload(p_conv_data->rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "1161:     rtp_dyn_payload_free(p_conv_data->rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "941: void",
      "942: srtp_add_address(packet_info *pinfo, address *addr, int port, int other_port,",
      "943:          const gchar *setup_method, guint32 setup_frame_number,",
      "945:          struct srtp_info *srtp_info)",
      "946: {",
      "947:     address null_addr;",
      "",
      "[Removed Lines]",
      "944:          gboolean is_video _U_, GHashTable *rtp_dyn_payload,",
      "",
      "[Added Lines]",
      "1174:          gboolean is_video _U_, rtp_dyn_payload_t *rtp_dyn_payload,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1028:     g_strlcpy(p_conv_data->method, setup_method, MAX_RTP_SETUP_METHOD_SIZE+1);",
      "1029:     p_conv_data->frame_number = setup_frame_number;",
      "1030:     p_conv_data->is_video = is_video;",
      "1032:     p_conv_data->srtp_info = srtp_info;",
      "1033:     p_conv_data->bta2dp_info = NULL;",
      "1034:     p_conv_data->btvdp_info = NULL;",
      "",
      "[Removed Lines]",
      "1025:     if (p_conv_data->rtp_dyn_payload != rtp_dyn_payload)",
      "1026:         rtp_free_hash_dyn_payload(p_conv_data->rtp_dyn_payload);",
      "1031:     p_conv_data->rtp_dyn_payload = rtp_dyn_payload;",
      "",
      "[Added Lines]",
      "1255:     if (p_conv_data->rtp_dyn_payload != rtp_dyn_payload) {",
      "1256:         rtp_dyn_payload_free(p_conv_data->rtp_dyn_payload);",
      "1257:         p_conv_data->rtp_dyn_payload = rtp_dyn_payload_ref(rtp_dyn_payload);",
      "1258:     } else {",
      "1259:         DPRINT((\"passed-in rtp_dyn_payload is the same as in the conversation\"));",
      "1260:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1038: void",
      "1039: rtp_add_address(packet_info *pinfo, address *addr, int port, int other_port,",
      "1040:         const gchar *setup_method, guint32 setup_frame_number,",
      "1042: {",
      "1043:     srtp_add_address(pinfo, addr, port, other_port, setup_method, setup_frame_number, is_video, rtp_dyn_payload, NULL);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:         gboolean is_video , GHashTable *rtp_dyn_payload)",
      "",
      "[Added Lines]",
      "1274:         gboolean is_video , rtp_dyn_payload_t *rtp_dyn_payload)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1163:             payload_type >= PT_UNDF_96 && payload_type <= PT_UNDF_127) {",
      "1165:         if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
      "1173:                 found_match = dissector_try_string(rtp_dyn_pt_dissector_table,",
      "1174:                                    payload_type_str, newtvb, pinfo, tree, NULL);",
      "",
      "[Removed Lines]",
      "1166:             gchar *payload_type_str = NULL;",
      "1167:             encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "1168:             encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &payload_type);",
      "1169:             if (encoding_name_and_rate_pt) {",
      "1170:                 payload_type_str = encoding_name_and_rate_pt->encoding_name;",
      "1171:             }",
      "1172:             if (payload_type_str){",
      "",
      "[Added Lines]",
      "1399:             const gchar *payload_type_str = rtp_dyn_payload_get_name(p_conv_data->rtp_dyn_payload, payload_type);",
      "1400:             if (payload_type_str) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1452:     rfc2198_hdr *hdr_last, *hdr_new;",
      "1453:     rfc2198_hdr *hdr_chain = NULL;",
      "1454:     struct _rtp_conversation_info *p_conv_data= NULL;",
      "1458:     p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0);",
      "",
      "[Removed Lines]",
      "1455:     gchar *payload_type_str;",
      "",
      "[Added Lines]",
      "1683:     const gchar *payload_type_str;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1478:         if ((hdr_new->pt > 95) && (hdr_new->pt < 128)) {",
      "1479:             if (p_conv_data && p_conv_data->rtp_dyn_payload){",
      "1485:             }",
      "1486:         }",
      "",
      "[Removed Lines]",
      "1480:                 encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "1481:                 encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &hdr_new->pt);",
      "1482:                 if (encoding_name_and_rate_pt) {",
      "1483:                     payload_type_str = encoding_name_and_rate_pt->encoding_name;",
      "1484:                 }",
      "",
      "[Added Lines]",
      "1708:                 payload_type_str = rtp_dyn_payload_get_name(p_conv_data->rtp_dyn_payload, hdr_new->pt);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1645:     unsigned int csrc_count;",
      "1646:     gboolean    marker_set;",
      "1647:     unsigned int payload_type;",
      "1649:     gboolean    is_srtp = FALSE;",
      "1650:     unsigned int i            = 0;",
      "1651:     unsigned int hdr_extension_len= 0;",
      "",
      "[Removed Lines]",
      "1648:     gchar *payload_type_str = NULL;",
      "",
      "[Added Lines]",
      "1872:     const gchar *payload_type_str = NULL;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1828:     if ( (payload_type>95) && (payload_type<128) ) {",
      "1832: #ifdef DEBUG_CONVERSATION",
      "1833:             rtp_dump_dyn_payload(p_conv_data->rtp_dyn_payload);",
      "1834: #endif",
      "1835:             DPRINT((\"looking up conversation data for dyn_pt=%d\", payload_type));",
      "1843:                 DPRINT((\"found conversation data for dyn_pt=%d, enc_name=%s\",",
      "1847:             }",
      "1848:         }",
      "1849:     }",
      "",
      "[Removed Lines]",
      "1829:         if (p_conv_data && p_conv_data->rtp_dyn_payload){",
      "1830:             encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "1837:             encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &payload_type);",
      "1839:             DPRINT((\"did %sfind conversation data for dyn_pt=%d\",",
      "1840:                     encoding_name_and_rate_pt?\"\":\"not \", payload_type));",
      "1842:             if (encoding_name_and_rate_pt) {",
      "1844:                         payload_type,encoding_name_and_rate_pt->encoding_name));",
      "1845:                 rtp_info->info_payload_type_str = payload_type_str = encoding_name_and_rate_pt->encoding_name;",
      "1846:                 rtp_info->info_payload_rate = encoding_name_and_rate_pt->sample_rate;",
      "",
      "[Added Lines]",
      "2053:         if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
      "2054:             int sample_rate = 0;",
      "2061:             if (rtp_dyn_payload_get_full(p_conv_data->rtp_dyn_payload, payload_type,",
      "2062:                                         &payload_type_str, &sample_rate)) {",
      "2064:                         payload_type, payload_type_str));",
      "2065:                 rtp_info->info_payload_type_str = payload_type_str;",
      "2066:                 rtp_info->info_payload_rate     = sample_rate;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3338:                                     &rtp_rfc2198_pt);",
      "3340:     register_init_routine(rtp_fragment_init);",
      "3341: }",
      "3343: void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3564:     register_init_routine(rtp_dyn_payloads_init);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h": [
      "File: epan/dissectors/packet-rtp.h -> epan/dissectors/packet-rtp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "100: #endif",
      "101: };",
      "104: #define MAX_RTP_SETUP_METHOD_SIZE 7",
      "105: struct _rtp_conversation_info",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104: typedef struct _rtp_dyn_payload_t rtp_dyn_payload_t;",
      "107:    dynamic payload information. Internally, RTP creates the GHashTable with a wmem file scope",
      "108:    and increments the ref_count when it saves the info to conversations later. The calling",
      "109:    dissector (SDP, H.245, etc.) uses these functions as an interface. If the calling dissector",
      "110:    is done with the rtp_dyn_payload_t* for good, it should call rtp_dyn_payload_free() which",
      "111:    will decrement the ref_count and free's it if the ref_count is 0. In the worst case, it",
      "112:    will get free'd when the wmem file scope is over.",
      "114:    This was changed because there were too many bugs with SDP's handling of memory ownership",
      "115:    of the GHashTable, with RTP freeing things SDP didn't think were free'ed. And also because",
      "116:    the GHashTables never got free'd in many cases by several dissectors.",
      "120: WS_DLL_PUBLIC",
      "121: rtp_dyn_payload_t* rtp_dyn_payload_new(void);",
      "124:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "126: WS_DLL_PUBLIC",
      "127: void rtp_dyn_payload_insert(rtp_dyn_payload_t *rtp_dyn_payload,",
      "128:        const guint8 pt,",
      "129:        const gchar* encoding_name,",
      "130:        const int sample_rate);",
      "133:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "135: WS_DLL_PUBLIC",
      "136: void rtp_dyn_payload_replace(rtp_dyn_payload_t *rtp_dyn_payload,",
      "137:        const guint8 pt,",
      "138:        const gchar* encoding_name,",
      "139:        const int sample_rate);",
      "142: WS_DLL_PUBLIC",
      "143: gboolean rtp_dyn_payload_remove(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt);",
      "146:    until the entry is replaced, removed, or the hash table is destroyed, so duplicate it if",
      "148: WS_DLL_PUBLIC",
      "149: const gchar* rtp_dyn_payload_get_name(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt);",
      "152:    successful, else FALSE. The encoding string pointed to is only valid until the entry is",
      "154: WS_DLL_PUBLIC",
      "155: gboolean rtp_dyn_payload_get_full(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt,",
      "156:           const gchar **encoding_name, int *sample_rate);",
      "160: WS_DLL_PUBLIC",
      "161: void rtp_dyn_payload_free(rtp_dyn_payload_t *rtp_dyn_payload);",
      "164: #ifdef DEBUG_CONVERSATION",
      "166: void rtp_dump_dyn_payload(rtp_dyn_payload_t *rtp_dyn_payload);",
      "167: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121:  btvdp_codec_info_t *btvdp_info;",
      "122: };",
      "130: WS_DLL_PUBLIC",
      "131: void rtp_add_address(packet_info *pinfo,",
      "",
      "[Removed Lines]",
      "124: typedef struct {",
      "125:  char *encoding_name;",
      "126:  int   sample_rate;",
      "127: } encoding_name_and_rate_t;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:                      const gchar *setup_method,",
      "135:                      guint32 setup_frame_number,",
      "136:       gboolean is_video,",
      "140: WS_DLL_PUBLIC",
      "",
      "[Removed Lines]",
      "137:                      GHashTable *rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "198:                      rtp_dyn_payload_t *rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "144:                      const gchar *setup_method,",
      "145:                      guint32 setup_frame_number,",
      "146:       gboolean is_video,",
      "148:                      struct srtp_info *srtp_info);",
      "",
      "[Removed Lines]",
      "147:                      GHashTable *rtp_dyn_payload,",
      "",
      "[Added Lines]",
      "208:                      rtp_dyn_payload_t *rtp_dyn_payload,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "152: bluetooth_add_address(packet_info *pinfo, address *addr,",
      "153:          const gchar *setup_method, guint32 setup_frame_number,",
      "154:          gboolean is_video, void *data);",
      "",
      "[Removed Lines]",
      "157: WS_DLL_PUBLIC",
      "158: void rtp_free_hash_dyn_payload(GHashTable *rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c": [
      "File: epan/dissectors/packet-sdp.c -> epan/dissectors/packet-sdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #include <epan/addr_resolv.h>",
      "43: #include \"packet-sdp.h\"",
      "44: #include \"packet-rtp.h\"",
      "46: #include \"packet-rtcp.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: #include \"conversation_debug.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52: #include \"packet-h264.h\"",
      "53: #include \"packet-mp4ves.h\"",
      "59: void proto_register_sdp(void);",
      "60: void proto_reg_handoff_sdp(void);",
      "",
      "[Removed Lines]",
      "57: #include \"conversation_debug.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208: typedef struct {",
      "209:     gint32 pt[SDP_MAX_RTP_PAYLOAD_TYPES];",
      "210:     gint8 pt_count;",
      "212:     gboolean set_rtp;",
      "213: } transport_media_pt_t;",
      "",
      "[Removed Lines]",
      "211:     GHashTable *rtp_dyn_payload;",
      "",
      "[Added Lines]",
      "212:     rtp_dyn_payload_t *rtp_dyn_payload;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "256: #ifdef DEBUG_CONVERSATION",
      "275: static void sdp_dump_transport_media(const transport_media_pt_t* media) {",
      "276:     int i;",
      "277:     int count;",
      "",
      "[Removed Lines]",
      "258: static void",
      "259: rtp_dyn_payload_table_foreach_func (gpointer key, gpointer value, gpointer user_data _U_) {",
      "260:     gint* pt = (gint*) key;",
      "261:     encoding_name_and_rate_t *encoding = (encoding_name_and_rate_t*) value;",
      "263:     DPRINT2((\"pt=%d\",*pt));",
      "264:     DINDENT();",
      "265:         if (encoding) {",
      "266:             DPRINT2((\"encoding_name=%s\",",
      "267:                     encoding->encoding_name ? encoding->encoding_name : \"NULL\"));",
      "268:             DPRINT2((\"sample_rate=%d\", encoding->sample_rate));",
      "269:         } else {",
      "270:             DPRINT2((\"encoding=NULL\"));",
      "271:         }",
      "272:     DENDENT();",
      "273: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "291:         DENDENT();",
      "292:         DPRINT2((\"rtp_dyn_payload hashtable=%s\", media->rtp_dyn_payload ? \"YES\" : \"NO\"));",
      "293:         if (media->rtp_dyn_payload) {",
      "302:         }",
      "303:         DPRINT2((\"set_rtp=%s\", media->set_rtp ? \"TRUE\" : \"FALSE\"));",
      "304:     DENDENT();",
      "",
      "[Removed Lines]",
      "294:             DPRINT2((\"rtp_dyn_payload hash table contents:\"));",
      "295:             DINDENT();",
      "296:                 if (g_hash_table_size(media->rtp_dyn_payload) == 0) {",
      "297:                     DPRINT2((\"rtp_dyn_payload is empty\"));",
      "298:                 } else {",
      "299:                     g_hash_table_foreach(media->rtp_dyn_payload, rtp_dyn_payload_table_foreach_func, NULL);",
      "300:                 }",
      "301:             DENDENT();",
      "",
      "[Added Lines]",
      "277:             rtp_dump_dyn_payload(media->rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1290:     guint8     *payload_type;",
      "1291:     guint8     *attribute_value;",
      "1293:     guint8      pt;",
      "1294:     gint        sdp_media_attrbute_code;",
      "1295:     const char *msrp_res           = \"msrp://\";",
      "",
      "[Removed Lines]",
      "1292:     gint       *key;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1297:     gboolean    has_more_pars      = TRUE;",
      "1298:     tvbuff_t   *h245_tvb;",
      "1299:     guint8      master_key_length  = 0, master_salt_length = 0;",
      "1302:     offset = 0;",
      "",
      "[Removed Lines]",
      "1300:     encoding_name_and_rate_t *encoding_name_and_rate;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1365:             }",
      "1370:             transport_info->encoding_name[pt] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
      "1372:             next_offset =  next_offset + 1;",
      "",
      "[Removed Lines]",
      "1367:             key  = wmem_new(wmem_file_scope(), gint);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1400:             if (transport_info->media_count < 0) {",
      "1401:                 for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "1415:                 }",
      "1416:                 return;",
      "1426:             break;",
      "1427:         case SDP_FMTP:",
      "1428:             if (sdp_media_attribute_tree) {",
      "",
      "[Removed Lines]",
      "1402:                     encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "1403:                     encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), transport_info->encoding_name[pt]);",
      "1404:                     encoding_name_and_rate->sample_rate = transport_info->sample_rate[pt];",
      "1405:                     if (n == 0) {",
      "1406:                         g_hash_table_insert(transport_info->media[n].rtp_dyn_payload,",
      "1407:                                             key, encoding_name_and_rate);",
      "1409:                         gint *key2;",
      "1410:                         key2  = wmem_new(wmem_file_scope(), gint);",
      "1412:                         g_hash_table_insert(transport_info->media[n].rtp_dyn_payload,",
      "1413:                                             key2, encoding_name_and_rate);",
      "1414:                     }",
      "1418:             } else",
      "1420:                 encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "1422:             encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), transport_info->encoding_name[pt]);",
      "1423:             encoding_name_and_rate->sample_rate   = transport_info->sample_rate[pt];",
      "1424:             g_hash_table_insert(transport_info->media[ transport_info->media_count ].rtp_dyn_payload,",
      "1425:                                   key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "1373:                     rtp_dyn_payload_insert(transport_info->media[n].rtp_dyn_payload,",
      "1374:                                            pt,",
      "1375:                                            transport_info->encoding_name[pt],",
      "1376:                                            transport_info->sample_rate[pt]);",
      "1380:             }",
      "1382:             rtp_dyn_payload_insert(transport_info->media[ transport_info->media_count ].rtp_dyn_payload,",
      "1383:                                   pt, transport_info->encoding_name[pt], transport_info->sample_rate[pt]);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1917:             transport_info->encoding_name[n] = (char*)UNKNOWN_ENCODING;",
      "1918:         }",
      "1919:         for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "1922:             transport_info->media[n].set_rtp = FALSE;",
      "1923:         }",
      "",
      "[Removed Lines]",
      "1920:             transport_info->media[n].rtp_dyn_payload =",
      "1921:                 g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "1878:             transport_info->media[n].rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1955:         (transport_info->sdp_status == SDP_EXCHANGE_OFFER)) {",
      "1956:         for (n = start_transport_info_count; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "1957:             if (!transport_info->media[n].rtp_dyn_payload)",
      "1959:         }",
      "1960:     }",
      "",
      "[Removed Lines]",
      "1958:                 transport_info->media[n].rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "1915:                 transport_info->media[n].rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2161:             if (!transport_info->media[n].set_rtp)",
      "2162:             {",
      "2164:                         \"channel=%d, media_port=%d\",",
      "2165:                         n, transport_info->media_port[n]));",
      "2167:                 transport_info->media[n].rtp_dyn_payload = NULL;",
      "2168:             }",
      "",
      "[Removed Lines]",
      "2163:                 DPRINT((\"set_rtp is not set, calling rtp_free_hash_dyn_payload, \"",
      "2166:                 rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2120:                 DPRINT((\"set_rtp is not set, calling rtp_dyn_payload_free, \"",
      "2123:                 rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2176:             {",
      "2177:                 if (!transport_info->media[n].set_rtp)",
      "2178:                 {",
      "2180:                             \"channel=%d, media_port=%d\",",
      "2181:                             n, transport_info->media_port[n]));",
      "2183:                     transport_info->media[n].rtp_dyn_payload = NULL;",
      "2184:                 }",
      "2185:             }",
      "",
      "[Removed Lines]",
      "2179:                     DPRINT((\"media_count == -1, calling rtp_free_hash_dyn_payload, \"",
      "2182:                     rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2136:                     DPRINT((\"media_count == -1, calling rtp_dyn_payload_free, \"",
      "2139:                     rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2190:             {",
      "2191:                 if (!transport_info->media[n].set_rtp)",
      "2192:                 {",
      "2194:                             \"channel=%d, media_port=%d\",",
      "2195:                             n, transport_info->media_port[n]));",
      "2197:                     transport_info->media[n].rtp_dyn_payload = NULL;",
      "2198:                 }",
      "2199:             }",
      "",
      "[Removed Lines]",
      "2193:                     DPRINT((\"media_count != -1, calling rtp_free_hash_dyn_payload, \"",
      "2196:                     rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2150:                     DPRINT((\"media_count != -1, calling rtp_dyn_payload_free, \"",
      "2153:                     rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2208:         {",
      "2209:             if (!transport_info->media[n].set_rtp)",
      "2210:             {",
      "2212:                 transport_info->media[n].rtp_dyn_payload = NULL;",
      "2213:             }",
      "2214:         }",
      "",
      "[Removed Lines]",
      "2211:                 rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2168:                 rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2281:         local_transport_info.encoding_name[n] = (char*)UNKNOWN_ENCODING;",
      "2282:     }",
      "2283:     for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "2286:         local_transport_info.media[n].set_rtp = FALSE;",
      "2287:     }",
      "",
      "[Removed Lines]",
      "2284:         local_transport_info.media[n].rtp_dyn_payload =",
      "2285:             g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "2241:         local_transport_info.media[n].rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2559:                         i, local_transport_info.media[n].pt[i]));",
      "2561:                 if ((local_transport_info.media[n].pt[i] >= 96) && (local_transport_info.media[n].pt[i] <= 127)) {",
      "2564:                         local_transport_info.media[n].rtp_dyn_payload,",
      "2567:                         if (strlen(sdp_pi->summary_str))",
      "2568:                             g_strlcat(sdp_pi->summary_str, \" \", 50);",
      "2570:                     } else {",
      "2571:                         char num_pt[10];",
      "2572:                         g_snprintf(num_pt, 10, \"%u\", local_transport_info.media[n].pt[i]);",
      "",
      "[Removed Lines]",
      "2562:                     encoding_name_and_rate_t *encoding_name_and_rate_pt =",
      "2563:                         (encoding_name_and_rate_t *)g_hash_table_lookup(",
      "2565:                         &local_transport_info.media[n].pt[i]);",
      "2566:                     if (encoding_name_and_rate_pt) {",
      "2569:                         g_strlcat(sdp_pi->summary_str, encoding_name_and_rate_pt->encoding_name, 50);",
      "",
      "[Added Lines]",
      "2518:                     const gchar *payload_type_str = rtp_dyn_payload_get_name(",
      "2520:                         local_transport_info.media[n].pt[i]);",
      "2521:                     if (payload_type_str) {",
      "2524:                         g_strlcat(sdp_pi->summary_str, payload_type_str, 50);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2589:         if ((transport_info == &local_transport_info) &&",
      "2590:             !transport_info->media[n].set_rtp)",
      "2591:         {",
      "2593:             transport_info->media[n].rtp_dyn_payload = NULL;",
      "2594:         }",
      "",
      "[Removed Lines]",
      "2592:             rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2547:             rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2611:         {",
      "2612:             if (!transport_info->media[n].set_rtp)",
      "2613:             {",
      "2615:                 transport_info->media[n].rtp_dyn_payload = NULL;",
      "2616:             }",
      "2617:         }",
      "",
      "[Removed Lines]",
      "2614:                 rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2569:                 rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------"
    ],
    "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c": [
      "File: ui/gtk/voip_calls.c -> ui/gtk/voip_calls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:    p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_get_id_by_filter_name(\"rtp\"), 0);",
      "565:    if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
      "570:     }",
      "571:    }",
      "572:   }",
      "",
      "[Removed Lines]",
      "566:     encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "567:     encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &strinfo->pt);",
      "568:     if (encoding_name_and_rate_pt) {",
      "569:      strinfo->pt_str = g_strdup(encoding_name_and_rate_pt->encoding_name);",
      "",
      "[Added Lines]",
      "566:     const gchar *encoding_name = rtp_dyn_payload_get_name(p_conv_data->rtp_dyn_payload, strinfo->pt);",
      "567:     if (encoding_name) {",
      "568:      strinfo->pt_str = g_strdup(encoding_name);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a07f0817d7db615d035892e496b93c1debe33ca4",
      "candidate_info": {
        "commit_hash": "a07f0817d7db615d035892e496b93c1debe33ca4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a07f0817d7db615d035892e496b93c1debe33ca4",
        "files": [
          "ui/gtk/rtp_analysis.c",
          "ui/gtk/voip_calls.c",
          "ui/gtk/voip_calls.h",
          "ui/gtk/voip_calls_dlg.c"
        ],
        "message": "voip_calls: Get rid of global variables.\n\nMove the members of voip_rtp_tapinfo_t to voip_calls_tapinfo_t. Move a\nbunch of formerly static variables there as well. Note that we might\nwant to make them private again at some point. Remove launch_count. It\nappeared to be unused.\n\nWrap the individual registration routines in voip_calls_init_all_taps.\nWrap the removal routines in voip_calls_remove_all_tap_listeners.\n\nMove voip_calls_get_info() to voip_calls_dlg.c. Make it static.\n\nChange-Id: I58f9d91f55cfb5e4b0c048a5a1d5d4b947f4641b\nReviewed-on: https://code.wireshark.org/review/5372\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "ui/gtk/rtp_analysis.c||ui/gtk/rtp_analysis.c",
          "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c",
          "ui/gtk/voip_calls.h||ui/gtk/voip_calls.h",
          "ui/gtk/voip_calls_dlg.c||ui/gtk/voip_calls_dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c"
          ],
          "candidate": [
            "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/gtk/rtp_analysis.c||ui/gtk/rtp_analysis.c": [
          "File: ui/gtk/rtp_analysis.c -> ui/gtk/rtp_analysis.c"
        ],
        "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c": [
          "File: ui/gtk/voip_calls.c -> ui/gtk/voip_calls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: #define H245_MAX 6",
          "156:     guint32 frame_num;",
          "157:     gint8 labels_count;",
          "158:     graph_str labels[H245_MAX];",
          "159: } h245_labels_t;",
          "164: typedef struct _voip_rtp_stream_info {",
          "165:     address src_addr;",
          "",
          "[Removed Lines]",
          "155: typedef struct {",
          "161: static h245_labels_t h245_labels;",
          "",
          "[Added Lines]",
          "155: typedef struct _h245_labels {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     gint32 rtp_event;",
          "183: } voip_rtp_stream_info_t;",
          "194: {",
          "195:     voip_calls_info_t *callsinfo;",
          "197:     voip_rtp_stream_info_t *strinfo;",
          "198:     seq_analysis_item_t *graph_item;",
          "199:     GList *list;",
          "207:     list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "208:     while (list)",
          "",
          "[Removed Lines]",
          "188: static voip_rtp_tapinfo_t the_tapinfo_rtp_struct =",
          "189:  {0, NULL};",
          "193: void voip_calls_reset(voip_calls_tapinfo_t *tapinfo)",
          "196:     voip_rtp_tapinfo_t *rtp_tapinfo = &the_tapinfo_rtp_struct;",
          "201: #ifdef HAVE_LIBPORTAUDIO",
          "203:     reset_rtp_player();",
          "204: #endif",
          "",
          "[Added Lines]",
          "183: static void actrace_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "184: static void h225_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "185: static void h245dg_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "186: static void h248_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "187: static void iax2_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "188: static void isup_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "189: static void mgcp_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "190: static void mtp3_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "191: static void q931_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "192: static void rtp_event_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "193: static void rtp_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "194: static void sccp_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "195: static void sdp_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "196: static void sip_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "197: static void skinny_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "198: static void t38_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "199: static void unistim_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "200: static void voip_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "202: void",
          "203: voip_calls_init_all_taps(voip_calls_tapinfo_t *tap_id_base)",
          "204: {",
          "205:     actrace_calls_init_tap(tap_id_base);",
          "206:     h225_calls_init_tap(tap_id_base);",
          "207:     h245dg_calls_init_tap(tap_id_base);",
          "208:     h248_calls_init_tap(tap_id_base);",
          "209:     iax2_calls_init_tap(tap_id_base);",
          "210:     isup_calls_init_tap(tap_id_base);",
          "211:     mgcp_calls_init_tap(tap_id_base);",
          "212:     mtp3_calls_init_tap(tap_id_base);",
          "213:     q931_calls_init_tap(tap_id_base);",
          "214:     rtp_event_init_tap(tap_id_base);",
          "215:     rtp_init_tap(tap_id_base);",
          "216:     sccp_calls_init_tap(tap_id_base);",
          "217:     sdp_calls_init_tap(tap_id_base);",
          "218:     sip_calls_init_tap(tap_id_base);",
          "219:     skinny_calls_init_tap(tap_id_base);",
          "220:     t38_init_tap(tap_id_base);",
          "222:     if (find_tap_id(\"unistim\")) {",
          "223:         unistim_calls_init_tap(tap_id_base);",
          "224:     }",
          "225:     if (find_tap_id(\"voip\")) {",
          "226:         voip_calls_init_tap(tap_id_base);",
          "227:     }",
          "228: }",
          "230: static void remove_tap_listener_actrace_calls(voip_calls_tapinfo_t *tap_id_base);",
          "231: static void remove_tap_listener_h225_calls(voip_calls_tapinfo_t *tap_id_base);",
          "232: static void remove_tap_listener_h245dg_calls(voip_calls_tapinfo_t *tap_id_base);",
          "233: static void remove_tap_listener_h248_calls(voip_calls_tapinfo_t *tap_id_base);",
          "234: static void remove_tap_listener_iax2_calls(voip_calls_tapinfo_t *tap_id_base);",
          "235: static void remove_tap_listener_isup_calls(voip_calls_tapinfo_t *tap_id_base);",
          "236: static void remove_tap_listener_mgcp_calls(voip_calls_tapinfo_t *tap_id_base);",
          "237: static void remove_tap_listener_mtp3_calls(voip_calls_tapinfo_t *tap_id_base);",
          "238: static void remove_tap_listener_q931_calls(voip_calls_tapinfo_t *tap_id_base);",
          "239: static void remove_tap_listener_rtp(voip_calls_tapinfo_t *tap_id_base);",
          "240: static void remove_tap_listener_rtp_event(voip_calls_tapinfo_t *tap_id_base);",
          "241: static void remove_tap_listener_sccp_calls(voip_calls_tapinfo_t *tap_id_base);",
          "242: static void remove_tap_listener_sdp_calls(voip_calls_tapinfo_t *tap_id_base);",
          "243: static void remove_tap_listener_sip_calls(voip_calls_tapinfo_t *tap_id_base);",
          "244: static void remove_tap_listener_skinny_calls(voip_calls_tapinfo_t *tap_id_base);",
          "245: static void remove_tap_listener_t38(voip_calls_tapinfo_t *tap_id_base);",
          "246: static void remove_tap_listener_unistim_calls(voip_calls_tapinfo_t *tap_id_base);",
          "247: static void remove_tap_listener_voip_calls(voip_calls_tapinfo_t *tap_id_base);",
          "249: void voip_calls_remove_all_tap_listeners(voip_calls_tapinfo_t *tap_id_base)",
          "250: {",
          "252:     remove_tap_listener_actrace_calls(tap_id_base);",
          "253:     remove_tap_listener_h225_calls(tap_id_base);",
          "254:     remove_tap_listener_h245dg_calls(tap_id_base);",
          "255:     remove_tap_listener_h248_calls(tap_id_base);",
          "256:     remove_tap_listener_iax2_calls(tap_id_base);",
          "257:     remove_tap_listener_isup_calls(tap_id_base);",
          "258:     remove_tap_listener_mgcp_calls(tap_id_base);",
          "259:     remove_tap_listener_mtp3_calls(tap_id_base);",
          "260:     remove_tap_listener_q931_calls(tap_id_base);",
          "261:     remove_tap_listener_rtp(tap_id_base);",
          "262:     remove_tap_listener_rtp_event(tap_id_base);",
          "263:     remove_tap_listener_sccp_calls(tap_id_base);",
          "264:     remove_tap_listener_sdp_calls(tap_id_base);",
          "265:     remove_tap_listener_sip_calls(tap_id_base);",
          "266:     remove_tap_listener_skinny_calls(tap_id_base);",
          "267:     remove_tap_listener_t38(tap_id_base);",
          "269:         remove_tap_listener_unistim_calls(tap_id_base);",
          "270:     }",
          "271:     if (find_tap_id(\"voip\")) {",
          "272:         remove_tap_listener_voip_calls(tap_id_base);",
          "273:     }",
          "274: }",
          "278: void",
          "279: voip_calls_reset(voip_calls_tapinfo_t *tapinfo)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:     if(NULL!=tapinfo->callsinfo_hashtable[SIP_HASH])",
          "227:         g_hash_table_remove_all (tapinfo->callsinfo_hashtable[SIP_HASH]);",
          "235:     if(NULL!=tapinfo->graph_analysis->ht)",
          "",
          "[Removed Lines]",
          "228:     tapinfo->ncalls = 0;",
          "229:     tapinfo->npackets = 0;",
          "230:     tapinfo->start_packets = 0;",
          "231:     tapinfo->completed_calls = 0;",
          "232:     tapinfo->rejected_calls = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:         list = g_list_next(list);",
          "248:     }",
          "249:     g_queue_clear(tapinfo->graph_analysis->items);",
          "256:     while(list)",
          "257:     {",
          "258:         strinfo = (voip_rtp_stream_info_t *)list->data;",
          "259:         g_free(strinfo->pt_str);",
          "260:         list = g_list_next(list);",
          "261:     }",
          "265:     return;",
          "266: }",
          "275: }",
          "",
          "[Removed Lines]",
          "250:     tapinfo->graph_analysis->nconv = 0;",
          "252:     ++(tapinfo->launch_count);",
          "255:     list = g_list_first(rtp_tapinfo->list);",
          "262:     g_list_free(rtp_tapinfo->list);",
          "263:     rtp_tapinfo->list = NULL;",
          "269: void graph_analysis_data_init(void) {",
          "270:     voip_calls_tapinfo_t *voip_tapinfo = voip_calls_get_info();",
          "271:     voip_tapinfo->graph_analysis = (seq_analysis_info_t *)g_malloc(sizeof(seq_analysis_info_t));",
          "272:     voip_tapinfo->graph_analysis->nconv = 0;",
          "273:     voip_tapinfo->graph_analysis->items = g_queue_new();;",
          "274:     voip_tapinfo->graph_analysis->ht= g_hash_table_new(g_int_hash, g_int_equal);",
          "",
          "[Added Lines]",
          "327:     list = g_list_first(tapinfo->rtp_stream_list);",
          "334:     g_list_free(tapinfo->rtp_stream_list);",
          "335:     tapinfo->rtp_stream_list = NULL;",
          "337:     if (!tapinfo->h245_labels) {",
          "338:         tapinfo->h245_labels = g_new0(h245_labels_t, 1);",
          "339:     } else {",
          "340:         memset(tapinfo->h245_labels, 0, sizeof(h245_labels_t));",
          "341:     }",
          "343:     memset(tapinfo, 0, sizeof(voip_calls_tapinfo_t));",
          "349: void graph_analysis_data_init(voip_calls_tapinfo_t *tapinfo) {",
          "350:     tapinfo->graph_analysis = (seq_analysis_info_t *)g_malloc(sizeof(seq_analysis_info_t));",
          "351:     tapinfo->graph_analysis->nconv = 0;",
          "352:     tapinfo->graph_analysis->items = g_queue_new();;",
          "353:     tapinfo->graph_analysis->ht= g_hash_table_new(g_int_hash, g_int_equal);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "463: static int",
          "465: {",
          "466:     const struct _rtp_event_info *pi = (const struct _rtp_event_info *)rtp_event_info;",
          "",
          "[Removed Lines]",
          "456: static guint32 rtp_evt_frame_num = 0;",
          "457: static guint8 rtp_evt = 0;",
          "458: static gboolean rtp_evt_end = FALSE;",
          "464: rtp_event_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *rtp_event_info)",
          "",
          "[Added Lines]",
          "540: rtp_event_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt _U_, const void *rtp_event_info)",
          "542:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_rtp_event_);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:         return 0;",
          "471:     }",
          "477:     return 0;",
          "478: }",
          "",
          "[Removed Lines]",
          "473:     rtp_evt_frame_num = pinfo->fd->num;",
          "474:     rtp_evt = pi->info_rtp_evt;",
          "475:     rtp_evt_end = pi->info_end;",
          "",
          "[Added Lines]",
          "550:     tapinfo->rtp_evt_frame_num = pinfo->fd->num;",
          "551:     tapinfo->rtp_evt = pi->info_rtp_evt;",
          "552:     tapinfo->rtp_evt_end = pi->info_end;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "516: {",
          "518:     GList *list;",
          "521:     while (list)",
          "522:     {",
          "523:         g_free(list->data);",
          "524:         list = g_list_next(list);",
          "525:     }",
          "529:     return;",
          "530: }",
          "",
          "[Removed Lines]",
          "515: static void voip_rtp_reset(void *ptr _U_)",
          "517:     voip_rtp_tapinfo_t *tapinfo = &the_tapinfo_rtp_struct;",
          "520:     list = g_list_first(tapinfo->list);",
          "526:     g_list_free(tapinfo->list);",
          "527:     tapinfo->list = NULL;",
          "528:     tapinfo->nstreams = 0;",
          "",
          "[Added Lines]",
          "592: static void",
          "593: voip_rtp_reset(void *tap_offset_ptr)",
          "595:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_rtp_);",
          "598:     list = g_list_first(tapinfo->rtp_stream_list);",
          "604:     g_list_free(tapinfo->rtp_stream_list);",
          "605:     tapinfo->rtp_stream_list = NULL;",
          "606:     tapinfo->nrtp_streams = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "535: rtp_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt _U_, void const *RTPinfo)",
          "536: {",
          "537:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_rtp_);",
          "539:     voip_rtp_stream_info_t *tmp_listinfo;",
          "540:     voip_rtp_stream_info_t *strinfo = NULL;",
          "541:     GList *list;",
          "",
          "[Removed Lines]",
          "538:     voip_rtp_tapinfo_t *rtp_tapinfo = &the_tapinfo_rtp_struct;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "554: #endif",
          "558:     while (list)",
          "559:     {",
          "560:         tmp_listinfo=(voip_rtp_stream_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "557:     list = g_list_first(rtp_tapinfo->list);",
          "",
          "[Added Lines]",
          "634:     list = g_list_first(tapinfo->rtp_stream_list);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "573:     }",
          "577:         return 0;",
          "578:     }",
          "",
          "[Removed Lines]",
          "576:     if ((rtp_evt_frame_num == pinfo->fd->num) && !strinfo && (rtp_evt_end == TRUE)) {",
          "",
          "[Added Lines]",
          "653:     if ((tapinfo->rtp_evt_frame_num == pinfo->fd->num) && !strinfo && (tapinfo->rtp_evt_end == TRUE)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "606:         strinfo->start_rel_ts = pinfo->rel_ts;",
          "607:         strinfo->setup_frame_number = pi->info_setup_frame_num;",
          "608:         strinfo->rtp_event = -1;",
          "610:     }",
          "",
          "[Removed Lines]",
          "609:         rtp_tapinfo->list = g_list_prepend(rtp_tapinfo->list, strinfo);",
          "",
          "[Added Lines]",
          "686:         tapinfo->rtp_stream_list = g_list_prepend(tapinfo->rtp_stream_list, strinfo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "615:     strinfo->stop_rel_ts = pinfo->rel_ts;",
          "621:             strinfo->end_stream = TRUE;",
          "622:         }",
          "623:     }",
          "",
          "[Removed Lines]",
          "618:     if (rtp_evt_frame_num == pinfo->fd->num) {",
          "619:         strinfo->rtp_event = rtp_evt;",
          "620:         if (rtp_evt_end == TRUE) {",
          "",
          "[Added Lines]",
          "695:     if (tapinfo->rtp_evt_frame_num == pinfo->fd->num) {",
          "696:         strinfo->rtp_event = tapinfo->rtp_evt;",
          "697:         if (tapinfo->rtp_evt_end == TRUE) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "633: {",
          "634:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_rtp_);",
          "636:     GList *rtp_streams_list;",
          "637:     voip_rtp_stream_info_t *rtp_listinfo;",
          "",
          "[Removed Lines]",
          "632: static void rtp_packet_draw(void *tap_offset_ptr)",
          "635:     voip_rtp_tapinfo_t *rtp_tapinfo = &the_tapinfo_rtp_struct;",
          "",
          "[Added Lines]",
          "709: static void",
          "710: rtp_packet_draw(void *tap_offset_ptr)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "643:     gchar time_str[COL_MAX_LEN];",
          "647:     while (rtp_streams_list)",
          "648:     {",
          "649:         rtp_listinfo = (voip_rtp_stream_info_t *)rtp_streams_list->data;",
          "",
          "[Removed Lines]",
          "646:     rtp_streams_list = g_list_first(rtp_tapinfo->list);",
          "",
          "[Added Lines]",
          "723:     rtp_streams_list = g_list_first(tapinfo->rtp_stream_list);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "694: }",
          "695: #if 0",
          "697: {",
          "698:  voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_rtp_);",
          "700:  GList *rtp_streams_list;",
          "701:  voip_rtp_stream_info_t *rtp_listinfo;",
          "702:  GList *voip_calls_graph_list;",
          "",
          "[Removed Lines]",
          "696: static void RTP_packet_draw(void *tap_offset_ptr)",
          "699:  voip_rtp_tapinfo_t *rtp_tapinfo = &the_tapinfo_rtp_struct;",
          "",
          "[Added Lines]",
          "773: static void",
          "774: rtp_packet_draw(void *tap_offset_ptr)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "708:  gchar time_str[COL_MAX_LEN];",
          "712:  while (rtp_streams_list)",
          "713:  {",
          "714:   rtp_listinfo = rtp_streams_list->data;",
          "",
          "[Removed Lines]",
          "711:  rtp_streams_list = g_list_first(rtp_tapinfo->list);",
          "",
          "[Added Lines]",
          "788:     rtp_streams_list = g_list_first(tapinfo->stream_list);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "983: }",
          "",
          "[Removed Lines]",
          "987: static gchar *sdp_summary = NULL;",
          "988: static guint32 sdp_frame_num = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1047:                  strcmp(pi->request_method,\"INVITE\")==0)) {",
          "1048:             callsinfo = (voip_calls_info_t *)g_malloc0(sizeof(voip_calls_info_t));",
          "1049:             callsinfo->call_active_state = VOIP_ACTIVE;",
          "",
          "[Removed Lines]",
          "1045:         if (VoIPcalls_get_flow_show_option() == FLOW_ALL ||",
          "1046:                 (VoIPcalls_get_flow_show_option() == FLOW_ONLY_INVITES &&",
          "",
          "[Added Lines]",
          "1118:         if (tapinfo->fs_option == FLOW_ALL ||",
          "1119:                 (tapinfo->fs_option == FLOW_ONLY_INVITES &&",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1163:         g_free((void *)tmp_dst.data);",
          "1170:         }",
          "1172:     }",
          "",
          "[Removed Lines]",
          "1166:         if ( (sdp_summary != NULL) && (sdp_frame_num == pinfo->fd->num) ) {",
          "1167:             append_to_frame_graph(tapinfo, pinfo->fd->num, sdp_summary, NULL);",
          "1168:             g_free(sdp_summary);",
          "1169:             sdp_summary = NULL;",
          "",
          "[Added Lines]",
          "1239:         if ( (tapinfo->sdp_summary != NULL) && (tapinfo->sdp_frame_num == pinfo->fd->num) ) {",
          "1240:             append_to_frame_graph(tapinfo, pinfo->fd->num, tapinfo->sdp_summary, NULL);",
          "1241:             g_free(tapinfo->sdp_summary);",
          "1242:             tapinfo->sdp_summary = NULL;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1177: }",
          "",
          "[Removed Lines]",
          "1181: voip_calls_tapinfo_t* voip_calls_get_info(void)",
          "1182: {",
          "1184:     static voip_calls_tapinfo_t the_tapinfo_struct =",
          "1185:         {0, NULL, {0}, 0, NULL, 0, 0, 0, 0, NULL, NULL, FALSE};",
          "1187:     if (!the_tapinfo_struct.callsinfos) {",
          "1189:         the_tapinfo_struct.callsinfos = g_queue_new();",
          "1190:     }",
          "1191:     return &the_tapinfo_struct;",
          "1192: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1234: static int",
          "",
          "[Removed Lines]",
          "1227: static guint32  mtp3_opc, mtp3_dpc;",
          "1228: static guint8  mtp3_ni;",
          "1229: static  guint32  mtp3_frame_num;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1248:     const isup_tap_rec_t *pi = (const isup_tap_rec_t *)isup_info;",
          "1254:     list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "[Removed Lines]",
          "1251:     if (mtp3_frame_num != pinfo->fd->num) return 0;",
          "",
          "[Added Lines]",
          "1304:     if (tapinfo->mtp3_frame_num != pinfo->fd->num) return 0;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1258:         tmp_listinfo=(voip_calls_info_t *)list->data;",
          "1259:         if ((tmp_listinfo->protocol == VOIP_ISUP)&&(tmp_listinfo->call_active_state==VOIP_ACTIVE)) {",
          "1260:             tmp_isupinfo = (isup_calls_info_t *)tmp_listinfo->prot_info;",
          "1263:                     forward = TRUE;",
          "1265:                     forward = FALSE;",
          "1266:                 } else {",
          "1267:                     right_pair = FALSE;",
          "",
          "[Removed Lines]",
          "1261:             if ((tmp_isupinfo->cic == pi->circuit_id)&&(tmp_isupinfo->ni == mtp3_ni)) {",
          "1262:                 if ((tmp_isupinfo->opc == mtp3_opc)&&(tmp_isupinfo->dpc == mtp3_dpc)) {",
          "1264:                 } else if ((tmp_isupinfo->dpc == mtp3_opc)&&(tmp_isupinfo->opc == mtp3_dpc)) {",
          "",
          "[Added Lines]",
          "1314:             if ((tmp_isupinfo->cic == pi->circuit_id)&&(tmp_isupinfo->ni == tapinfo->mtp3_ni)) {",
          "1315:                 if ((tmp_isupinfo->opc == tapinfo->mtp3_opc)&&(tmp_isupinfo->dpc == tapinfo->mtp3_dpc)) {",
          "1317:                 } else if ((tmp_isupinfo->dpc == tapinfo->mtp3_opc)&&(tmp_isupinfo->opc == tapinfo->mtp3_dpc)) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1309:         callsinfo->prot_info=g_malloc(sizeof(isup_calls_info_t));",
          "1310:         callsinfo->free_prot_info = g_free;",
          "1311:         tmp_isupinfo=(isup_calls_info_t *)callsinfo->prot_info;",
          "1315:         tmp_isupinfo->cic = pi->circuit_id;",
          "1316:         callsinfo->npackets = 0;",
          "1317:         callsinfo->call_num = tapinfo->ncalls++;",
          "",
          "[Removed Lines]",
          "1312:         tmp_isupinfo->opc = mtp3_opc;",
          "1313:         tmp_isupinfo->dpc = mtp3_dpc;",
          "1314:         tmp_isupinfo->ni = mtp3_ni;",
          "",
          "[Added Lines]",
          "1365:         tmp_isupinfo->opc = tapinfo->mtp3_opc;",
          "1366:         tmp_isupinfo->dpc = tapinfo->mtp3_dpc;",
          "1367:         tmp_isupinfo->ni = tapinfo->mtp3_ni;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1338:             if (forward) {",
          "1339:                 comment = g_strdup_printf(\"%i-%i -> %i-%i. Cic:%i\",",
          "1342:             } else {",
          "1343:                 comment = g_strdup_printf(\"%i-%i -> %i-%i. Cic:%i\",",
          "1346:             }",
          "1347:         }",
          "",
          "[Removed Lines]",
          "1340:                         mtp3_ni, mtp3_opc,",
          "1341:                         mtp3_ni, mtp3_dpc, pi->circuit_id);",
          "1344:                         mtp3_ni, mtp3_dpc,",
          "1345:                         mtp3_ni, mtp3_opc, pi->circuit_id);",
          "",
          "[Added Lines]",
          "1393:                         tapinfo->mtp3_ni, tapinfo->mtp3_opc,",
          "1394:                         tapinfo->mtp3_ni, tapinfo->mtp3_dpc, pi->circuit_id);",
          "1397:                         tapinfo->mtp3_ni, tapinfo->mtp3_dpc,",
          "1398:                         tapinfo->mtp3_ni, tapinfo->mtp3_opc, pi->circuit_id);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1430: static int",
          "1432: {",
          "1433:     const mtp3_tap_rec_t *pi = (const mtp3_tap_rec_t *)mtp3_info;",
          "1442:     return 0;",
          "1443: }",
          "",
          "[Removed Lines]",
          "1431: mtp3_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *mtp3_info)",
          "1437:     mtp3_opc = pi->addr_opc.pc;",
          "1438:     mtp3_dpc = pi->addr_dpc.pc;",
          "1439:     mtp3_ni = pi->addr_opc.ni;",
          "1440:     mtp3_frame_num = pinfo->fd->num;",
          "",
          "[Added Lines]",
          "1484: mtp3_calls_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt _U_, const void *mtp3_info)",
          "1486:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_mtp3_);",
          "1491:     tapinfo->mtp3_opc = pi->addr_opc.pc;",
          "1492:     tapinfo->mtp3_dpc = pi->addr_dpc.pc;",
          "1493:     tapinfo->mtp3_ni = pi->addr_opc.ni;",
          "1494:     tapinfo->mtp3_frame_num = pinfo->fd->num;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1495: static const e_guid_t guid_allzero = {0, 0, 0, { 0, 0, 0, 0, 0, 0, 0, 0 } };",
          "1516: static int",
          "",
          "[Removed Lines]",
          "1498: static gchar *q931_calling_number;",
          "1499: static gchar *q931_called_number;",
          "1500: static guint8 q931_cause_value;",
          "1501: static gint32 q931_crv;",
          "1502: static guint32 q931_frame_num;",
          "1504: static guint32 h225_frame_num = 0;",
          "1505: static guint16 h225_call_num = 0;",
          "1506: static h225_cs_type h225_cstype = H225_OTHER;",
          "1507: static gboolean h225_is_faststart;",
          "1509: static guint32 actrace_frame_num = 0;",
          "1510: static gint32 actrace_trunk = 0;",
          "1511: static gint32 actrace_direction = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1528:     const q931_packet_info *pi = (const q931_packet_info *)q931_info;",
          "1534:     if (pi->calling_number!=NULL)",
          "1536:     else",
          "1539:     if (pi->called_number!=NULL)",
          "1541:     else",
          "1550:         tmp_h323info = NULL;",
          "1551:         list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "1552:         while (list)",
          "1553:         {",
          "1554:             tmp_listinfo=(voip_calls_info_t *)list->data;",
          "1556:                 tmp_h323info = (h323_calls_info_t *)tmp_listinfo->prot_info;",
          "1557:                 callsinfo = (voip_calls_info_t*)(list->data);",
          "1560:                 if (tmp_h323info->q931_crv == -1) {",
          "1564:                 }",
          "1565:                 break;",
          "1566:             }",
          "",
          "[Removed Lines]",
          "1531:     g_free(q931_calling_number);",
          "1532:     g_free(q931_called_number);",
          "1535:         q931_calling_number = g_strdup(pi->calling_number);",
          "1537:         q931_calling_number = g_strdup(\"\");",
          "1540:         q931_called_number = g_strdup(pi->called_number);",
          "1542:         q931_called_number = g_strdup(\"\");",
          "1543:     q931_cause_value = pi->cause_value;",
          "1544:     q931_frame_num = pinfo->fd->num;",
          "1545:     q931_crv = pi->crv;",
          "1549:     if (h225_frame_num == q931_frame_num) {",
          "1555:             if ( (tmp_listinfo->protocol == VOIP_H323) && (tmp_listinfo->call_num == h225_call_num) ) {",
          "1561:                     tmp_h323info->q931_crv = q931_crv;",
          "1562:                 } else if (tmp_h323info->q931_crv != q931_crv) {",
          "1563:                     tmp_h323info->q931_crv2 = q931_crv;",
          "",
          "[Added Lines]",
          "1569:     g_free(tapinfo->q931_calling_number);",
          "1570:     g_free(tapinfo->q931_called_number);",
          "1573:         tapinfo->q931_calling_number = g_strdup(pi->calling_number);",
          "1575:         tapinfo->q931_calling_number = g_strdup(\"\");",
          "1578:         tapinfo->q931_called_number = g_strdup(pi->called_number);",
          "1580:         tapinfo->q931_called_number = g_strdup(\"\");",
          "1581:     tapinfo->q931_cause_value = pi->cause_value;",
          "1582:     tapinfo->q931_frame_num = pinfo->fd->num;",
          "1583:     tapinfo->q931_crv = pi->crv;",
          "1587:     if (tapinfo->h225_frame_num == tapinfo->q931_frame_num) {",
          "1593:             if ( (tmp_listinfo->protocol == VOIP_H323) && (tmp_listinfo->call_num == tapinfo->h225_call_num) ) {",
          "1599:                     tmp_h323info->q931_crv = tapinfo->q931_crv;",
          "1600:                 } else if (tmp_h323info->q931_crv != tapinfo->q931_crv) {",
          "1601:                     tmp_h323info->q931_crv2 = tapinfo->q931_crv;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1570:         if (callsinfo != NULL) {",
          "1571:             comment = NULL;",
          "1575:                     g_free(callsinfo->from_identity);",
          "1577:                 }",
          "1579:                     g_free(callsinfo->to_identity);",
          "1581:                 }",
          "",
          "[Removed Lines]",
          "1572:             if (h225_cstype == H225_SETUP) {",
          "1574:                 if (q931_calling_number != NULL) {",
          "1576:                     callsinfo->from_identity=g_strdup(q931_calling_number);",
          "1578:                 if (q931_called_number != NULL) {",
          "1580:                     callsinfo->to_identity=g_strdup(q931_called_number);",
          "",
          "[Added Lines]",
          "1610:             if (tapinfo->h225_cstype == H225_SETUP) {",
          "1612:                 if (tapinfo->q931_calling_number != NULL) {",
          "1614:                     callsinfo->from_identity=g_strdup(tapinfo->q931_calling_number);",
          "1616:                 if (tapinfo->q931_called_number != NULL) {",
          "1618:                     callsinfo->to_identity=g_strdup(tapinfo->q931_called_number);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1622:                 }",
          "1624:                 comment = g_strdup_printf(\"H225 From: %s To:%s  TunnH245:%s FS:%s\", callsinfo->from_identity, callsinfo->to_identity, (tmp_h323info->is_h245Tunneling==TRUE?\"on\":\"off\"),",
          "1632:                     comment = g_strdup(\"H225 No Q931 Rel Cause\");",
          "1633:                 }",
          "1634:             }",
          "1636:             if (comment != NULL) {",
          "1638:                 g_free(comment);",
          "1639:             }",
          "1640:         }",
          "1649:         list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "[Removed Lines]",
          "1625:                         (h225_is_faststart==TRUE?\"on\":\"off\"));",
          "1626:             } else if (h225_cstype == H225_RELEASE_COMPLET) {",
          "1628:                 if (q931_cause_value != 0xFF) {",
          "1629:                     comment = g_strdup_printf(\"H225 Q931 Rel Cause (%i):%s\", q931_cause_value,",
          "1630:                             val_to_str_ext_const(q931_cause_value, &q931_cause_code_vals_ext, \"<unknown>\"));",
          "1637:                 change_frame_graph(tapinfo, h225_frame_num, NULL, comment);",
          "1643:         h225_frame_num = 0;",
          "1646:     } else if (h245_labels.frame_num == q931_frame_num) {",
          "",
          "[Added Lines]",
          "1663:                         (tapinfo->h225_is_faststart==TRUE?\"on\":\"off\"));",
          "1664:             } else if (tapinfo->h225_cstype == H225_RELEASE_COMPLET) {",
          "1666:                 if (tapinfo->q931_cause_value != 0xFF) {",
          "1667:                     comment = g_strdup_printf(\"H225 Q931 Rel Cause (%i):%s\", tapinfo->q931_cause_value,",
          "1668:                             val_to_str_ext_const(tapinfo->q931_cause_value, &q931_cause_code_vals_ext, \"<unknown>\"));",
          "1675:                 change_frame_graph(tapinfo, tapinfo->h225_frame_num, NULL, comment);",
          "1681:         tapinfo->h225_frame_num = 0;",
          "1684:     } else if (tapinfo->h245_labels->frame_num == tapinfo->q931_frame_num) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1652:             tmp_listinfo=(voip_calls_info_t *)list->data;",
          "1653:             if (tmp_listinfo->protocol == VOIP_H323) {",
          "1654:                 tmp_h323info = (h323_calls_info_t *)tmp_listinfo->prot_info;",
          "1659:                         add_to_graph(tapinfo, pinfo, edt, NULL, NULL, tmp_listinfo->call_num, &(pinfo->src), &(pinfo->dst), 1);",
          "1660:                         ++(tmp_listinfo->npackets);",
          "",
          "[Removed Lines]",
          "1655:                 if ( ((tmp_h323info->q931_crv == q931_crv) || (tmp_h323info->q931_crv2 == q931_crv)) && (q931_crv!=-1)) {",
          "1657:                     if (!append_to_frame_graph(tapinfo, q931_frame_num, NULL, NULL)) {",
          "",
          "[Added Lines]",
          "1693:                 if ( ((tmp_h323info->q931_crv == tapinfo->q931_crv) || (tmp_h323info->q931_crv2 == tapinfo->q931_crv)) && (tapinfo->q931_crv!=-1)) {",
          "1695:                     if (!append_to_frame_graph(tapinfo, tapinfo->q931_frame_num, NULL, NULL)) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1683:             if ( tmp_listinfo->protocol == VOIP_AC_ISDN ) {",
          "1684:                 tmp_actrace_isdn_info = (actrace_isdn_calls_info_t *)tmp_listinfo->prot_info;",
          "1687:                     callsinfo = (voip_calls_info_t*)(list->data);",
          "1688:                     break;",
          "1689:                 }",
          "",
          "[Removed Lines]",
          "1686:                 if ( (tmp_actrace_isdn_info->crv == q931_crv) && (tmp_actrace_isdn_info->trunk == actrace_trunk) ) {",
          "",
          "[Added Lines]",
          "1724:                 if ( (tmp_actrace_isdn_info->crv == tapinfo->q931_crv) && (tmp_actrace_isdn_info->trunk == tapinfo->actrace_trunk) ) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1698:             callsinfo = (voip_calls_info_t *)g_malloc0(sizeof(voip_calls_info_t));",
          "1699:             callsinfo->call_active_state = VOIP_ACTIVE;",
          "1700:             callsinfo->call_state = VOIP_CALL_SETUP;",
          "1704:             callsinfo->selected=FALSE;",
          "1705:             callsinfo->start_fd=pinfo->fd;",
          "1706:             callsinfo->start_rel_ts=pinfo->rel_ts;",
          "",
          "[Removed Lines]",
          "1701:             callsinfo->from_identity=g_strdup(q931_calling_number);",
          "1702:             callsinfo->to_identity=g_strdup(q931_called_number);",
          "1703:             COPY_ADDRESS(&(callsinfo->initial_speaker),actrace_direction?&pstn_add:&(pinfo->src));",
          "",
          "[Added Lines]",
          "1739:             callsinfo->from_identity=g_strdup(tapinfo->q931_calling_number);",
          "1740:             callsinfo->to_identity=g_strdup(tapinfo->q931_called_number);",
          "1741:             COPY_ADDRESS(&(callsinfo->initial_speaker),tapinfo->actrace_direction?&pstn_add:&(pinfo->src));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1708:             callsinfo->prot_info=g_malloc(sizeof(actrace_isdn_calls_info_t));",
          "1709:             callsinfo->free_prot_info = g_free;",
          "1710:             tmp_actrace_isdn_info=(actrace_isdn_calls_info_t *)callsinfo->prot_info;",
          "1713:             callsinfo->npackets = 0;",
          "1714:             callsinfo->call_num = tapinfo->ncalls++;",
          "1715:             g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "[Removed Lines]",
          "1711:             tmp_actrace_isdn_info->crv=q931_crv;",
          "1712:             tmp_actrace_isdn_info->trunk=actrace_trunk;",
          "",
          "[Added Lines]",
          "1749:             tmp_actrace_isdn_info->crv=tapinfo->q931_crv;",
          "1750:             tmp_actrace_isdn_info->trunk=tapinfo->actrace_trunk;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1724:         switch(pi->message_type) {",
          "1725:             case Q931_SETUP:",
          "1727:                 callsinfo->call_state=VOIP_CALL_SETUP;",
          "1728:                 break;",
          "1729:             case Q931_CONNECT:",
          "",
          "[Removed Lines]",
          "1726:                 comment = g_strdup_printf(\"AC_ISDN trunk:%u Calling: %s  Called:%s\", actrace_trunk, q931_calling_number, q931_called_number);",
          "",
          "[Added Lines]",
          "1764:                 comment = g_strdup_printf(\"AC_ISDN trunk:%u Calling: %s  Called:%s\", tapinfo->actrace_trunk, tapinfo->q931_calling_number, tapinfo->q931_called_number);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1744:                     callsinfo->call_state=VOIP_COMPLETED;",
          "1745:                     tapinfo->completed_calls++;",
          "1746:                 }",
          "1751:                     comment = g_strdup(\"AC_ISDN No Q931 Rel Cause\");",
          "1752:                 }",
          "",
          "[Removed Lines]",
          "1747:                 if (q931_cause_value != 0xFF) {",
          "1748:                     comment = g_strdup_printf(\"AC_ISDN trunk:%u Q931 Rel Cause (%i):%s\", actrace_trunk, q931_cause_value,",
          "1749:                             val_to_str_ext_const(q931_cause_value, &q931_cause_code_vals_ext, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "1785:                 if (tapinfo->q931_cause_value != 0xFF) {",
          "1786:                     comment = g_strdup_printf(\"AC_ISDN trunk:%u Q931 Rel Cause (%i):%s\", tapinfo->actrace_trunk, tapinfo->q931_cause_value,",
          "1787:                             val_to_str_ext_const(tapinfo->q931_cause_value, &q931_cause_code_vals_ext, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1754:         }",
          "1756:         if (!comment)",
          "1759:         add_to_graph(tapinfo, pinfo, edt, val_to_str(pi->message_type, q931_message_type_vals, \"<unknown>\") , comment, callsinfo->call_num,",
          "1762:                 1 );",
          "1764:         g_free(comment);",
          "",
          "[Removed Lines]",
          "1757:             comment = g_strdup_printf(\"AC_ISDN  trunk:%u\", actrace_trunk );",
          "1760:                 actrace_direction?&pstn_add:&(pinfo->src),",
          "1761:                 actrace_direction?&(pinfo->src):&pstn_add,",
          "",
          "[Added Lines]",
          "1795:             comment = g_strdup_printf(\"AC_ISDN  trunk:%u\", tapinfo->actrace_trunk );",
          "1798:                 tapinfo->actrace_direction?&pstn_add:&(pinfo->src),",
          "1799:                 tapinfo->actrace_direction?&(pinfo->src):&pstn_add,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1892:         }",
          "1893:     }",
          "1899:     if (callsinfo==NULL) {",
          "",
          "[Removed Lines]",
          "1895:     h225_cstype = pi->cs_type;",
          "1896:     h225_is_faststart = pi->is_faststart;",
          "",
          "[Added Lines]",
          "1933:     tapinfo->h225_cstype = pi->cs_type;",
          "1934:     tapinfo->h225_is_faststart = pi->is_faststart;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1931:         g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "1932:     }",
          "",
          "[Removed Lines]",
          "1934:     h225_frame_num = pinfo->fd->num;",
          "1935:     h225_call_num = callsinfo->call_num;",
          "",
          "[Added Lines]",
          "1972:     tapinfo->h225_frame_num = pinfo->fd->num;",
          "1973:     tapinfo->h225_call_num = callsinfo->call_num;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2087: {",
          "2088:     gint8 n;",
          "2098:     }",
          "2101: }",
          "2105: {",
          "2106:     gint8 n;",
          "2115:     }",
          "2118: }",
          "2122: {",
          "2132: }",
          "",
          "[Removed Lines]",
          "2090:     if (new_frame_num != h245_labels.frame_num) return;",
          "2092:     for (n=0; n<h245_labels.labels_count; n++) {",
          "2093:         append_to_frame_graph(tapinfo, new_frame_num, h245_labels.labels[n].frame_label, h245_labels.labels[n].comment);",
          "2094:         g_free(h245_labels.labels[n].frame_label);",
          "2095:         h245_labels.labels[n].frame_label = NULL;",
          "2096:         g_free(h245_labels.labels[n].comment);",
          "2097:         h245_labels.labels[n].comment = NULL;",
          "2099:     h245_labels.frame_num = 0;",
          "2100:     h245_labels.labels_count = 0;",
          "2104: static void h245_free_labels(guint32 new_frame_num)",
          "2108:     if (new_frame_num == h245_labels.frame_num) return;",
          "2110:     for (n=0; n<h245_labels.labels_count; n++) {",
          "2111:         g_free(h245_labels.labels[n].frame_label);",
          "2112:         h245_labels.labels[n].frame_label = NULL;",
          "2113:         g_free(h245_labels.labels[n].comment);",
          "2114:         h245_labels.labels[n].comment = NULL;",
          "2116:     h245_labels.frame_num = 0;",
          "2117:     h245_labels.labels_count = 0;",
          "2121: static void h245_add_label(guint32 new_frame_num, const gchar *frame_label, const gchar *comment)",
          "2123:     h245_free_labels(new_frame_num);",
          "2125:     h245_labels.frame_num = new_frame_num;",
          "2126:     h245_labels.labels[h245_labels.labels_count].frame_label = g_strdup(frame_label);",
          "2127:     h245_labels.labels[h245_labels.labels_count].comment = g_strdup(comment);",
          "2129:     if (h245_labels.labels_count < (H245_MAX-1))",
          "2130:         h245_labels.labels_count++;",
          "",
          "[Added Lines]",
          "2128:     if (new_frame_num != tapinfo->h245_labels->frame_num) return;",
          "2130:     for (n=0; n<tapinfo->h245_labels->labels_count; n++) {",
          "2131:         append_to_frame_graph(tapinfo, new_frame_num, tapinfo->h245_labels->labels[n].frame_label, tapinfo->h245_labels->labels[n].comment);",
          "2132:         g_free(tapinfo->h245_labels->labels[n].frame_label);",
          "2133:         tapinfo->h245_labels->labels[n].frame_label = NULL;",
          "2134:         g_free(tapinfo->h245_labels->labels[n].comment);",
          "2135:         tapinfo->h245_labels->labels[n].comment = NULL;",
          "2137:     tapinfo->h245_labels->frame_num = 0;",
          "2138:     tapinfo->h245_labels->labels_count = 0;",
          "2142: static void h245_free_labels(voip_calls_tapinfo_t *tapinfo, guint32 new_frame_num)",
          "2146:     if (new_frame_num == tapinfo->h245_labels->frame_num) return;",
          "2148:     for (n=0; n<tapinfo->h245_labels->labels_count; n++) {",
          "2149:         g_free(tapinfo->h245_labels->labels[n].frame_label);",
          "2150:         tapinfo->h245_labels->labels[n].frame_label = NULL;",
          "2151:         g_free(tapinfo->h245_labels->labels[n].comment);",
          "2152:         tapinfo->h245_labels->labels[n].comment = NULL;",
          "2154:     tapinfo->h245_labels->frame_num = 0;",
          "2155:     tapinfo->h245_labels->labels_count = 0;",
          "2159: static void h245_add_label(voip_calls_tapinfo_t *tapinfo, guint32 new_frame_num, const gchar *frame_label, const gchar *comment)",
          "2161:     h245_free_labels(tapinfo, new_frame_num);",
          "2163:     tapinfo->h245_labels->frame_num = new_frame_num;",
          "2164:     tapinfo->h245_labels->labels[tapinfo->h245_labels->labels_count].frame_label = g_strdup(frame_label);",
          "2165:     tapinfo->h245_labels->labels[tapinfo->h245_labels->labels_count].comment = g_strdup(comment);",
          "2167:     if (tapinfo->h245_labels->labels_count < (H245_MAX-1))",
          "2168:         tapinfo->h245_labels->labels_count++;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2190:            tunnel OFF but we did not matched the h245 add, in this case nobady will set this label",
          "2194:     }",
          "2196:     tapinfo->redraw = TRUE;",
          "",
          "[Removed Lines]",
          "2193:         h245_add_label(pinfo->fd->num, (gchar *) pi->frame_label, (gchar *) pi->comment);",
          "",
          "[Added Lines]",
          "2231:         h245_add_label(tapinfo, pinfo->fd->num, (gchar *) pi->frame_label, (gchar *) pi->comment);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2242:        MGCP/SIP packet, in those cases we assign the SPD summary to global lastSDPsummary",
          "2243:        to use it later",
          "2251:     tapinfo->redraw = TRUE;",
          "",
          "[Removed Lines]",
          "2245:     g_free(sdp_summary);",
          "2246:     sdp_frame_num = pinfo->fd->num;",
          "2248:     sdp_summary = g_strdup_printf(\"SDP (%s)\", pi->summary_str);",
          "2249:     append_to_frame_graph(tapinfo, pinfo->fd->num, sdp_summary, NULL);",
          "",
          "[Added Lines]",
          "2283:     g_free(tapinfo->sdp_summary);",
          "2284:     tapinfo->sdp_frame_num = pinfo->fd->num;",
          "2286:     tapinfo->sdp_summary = g_strdup_printf(\"SDP (%s)\", pi->summary_str);",
          "2287:     append_to_frame_graph(tapinfo, pinfo->fd->num, tapinfo->sdp_summary, NULL);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2606:     g_free(frame_label);",
          "2613:     }",
          "2615:     tapinfo->redraw = TRUE;",
          "",
          "[Removed Lines]",
          "2609:     if ( (sdp_summary != NULL) && (sdp_frame_num == pinfo->fd->num) ) {",
          "2610:         append_to_frame_graph(tapinfo, pinfo->fd->num, sdp_summary, NULL);",
          "2611:         g_free(sdp_summary);",
          "2612:         sdp_summary = NULL;",
          "",
          "[Added Lines]",
          "2647:     if ( (tapinfo->sdp_summary != NULL) && (tapinfo->sdp_frame_num == pinfo->fd->num) ) {",
          "2648:         append_to_frame_graph(tapinfo, pinfo->fd->num, tapinfo->sdp_summary, NULL);",
          "2649:         g_free(tapinfo->sdp_summary);",
          "2650:         tapinfo->sdp_summary = NULL;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2670:     voip_calls_info_t *tmp_listinfo;",
          "2671:     voip_calls_info_t *callsinfo = NULL;",
          "2678:         address pstn_add;",
          "",
          "[Removed Lines]",
          "2673:     actrace_frame_num = pinfo->fd->num;",
          "2674:     actrace_trunk = pi->trunk;",
          "2675:     actrace_direction = pi->direction;",
          "",
          "[Added Lines]",
          "2711:     tapinfo->actrace_frame_num = pinfo->fd->num;",
          "2712:     tapinfo->actrace_trunk = pi->trunk;",
          "2713:     tapinfo->actrace_direction = pi->direction;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2686:             if ( tmp_listinfo->protocol == VOIP_AC_CAS ) {",
          "2687:                 tmp_actrace_cas_info = (actrace_cas_calls_info_t *)tmp_listinfo->prot_info;",
          "2690:                     callsinfo = (voip_calls_info_t*)(list->data);",
          "2691:                     break;",
          "2692:                 }",
          "",
          "[Removed Lines]",
          "2689:                 if ( (tmp_actrace_cas_info->bchannel == pi->cas_bchannel) && (tmp_actrace_cas_info->trunk == actrace_trunk) ) {",
          "",
          "[Added Lines]",
          "2727:                 if ( (tmp_actrace_cas_info->bchannel == pi->cas_bchannel) && (tmp_actrace_cas_info->trunk == tapinfo->actrace_trunk) ) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2703:             callsinfo->call_state = VOIP_CALL_SETUP;",
          "2704:             callsinfo->from_identity=g_strdup(\"N/A\");",
          "2705:             callsinfo->to_identity=g_strdup(\"N/A\");",
          "2707:             callsinfo->selected=FALSE;",
          "2708:             callsinfo->start_fd=pinfo->fd;",
          "2709:             callsinfo->start_rel_ts=pinfo->rel_ts;",
          "",
          "[Removed Lines]",
          "2706:             COPY_ADDRESS(&(callsinfo->initial_speaker),actrace_direction?&pstn_add:&(pinfo->src));",
          "",
          "[Added Lines]",
          "2744:             COPY_ADDRESS(&(callsinfo->initial_speaker),tapinfo->actrace_direction?&pstn_add:&(pinfo->src));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2714:             tmp_actrace_cas_info=(actrace_cas_calls_info_t *)callsinfo->prot_info;",
          "2715:             tmp_actrace_cas_info->bchannel=pi->cas_bchannel;",
          "2717:             callsinfo->npackets = 0;",
          "2718:             callsinfo->call_num = tapinfo->ncalls++;",
          "2719:             g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "[Removed Lines]",
          "2716:             tmp_actrace_cas_info->trunk=actrace_trunk;",
          "",
          "[Added Lines]",
          "2754:             tmp_actrace_cas_info->trunk=tapinfo->actrace_trunk;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2726:         ++(tapinfo->npackets);",
          "2730:         add_to_graph(tapinfo, pinfo, edt, pi->cas_frame_label, comment, callsinfo->call_num,",
          "2733:                 1 );",
          "2735:         g_free(comment);",
          "",
          "[Removed Lines]",
          "2728:         comment = g_strdup_printf(\"AC_CAS  trunk:%u\", actrace_trunk);",
          "2731:                 actrace_direction?&pstn_add:&(pinfo->src),",
          "2732:                 actrace_direction?&(pinfo->src):&pstn_add,",
          "",
          "[Added Lines]",
          "2766:         comment = g_strdup_printf(\"AC_CAS  trunk:%u\", tapinfo->actrace_trunk);",
          "2769:                 tapinfo->actrace_direction?&pstn_add:&(pinfo->src),",
          "2770:                 tapinfo->actrace_direction?&(pinfo->src):&pstn_add,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3034:     return 1;",
          "3035: }",
          "3038:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_sccp_);",
          "3040:     sccp_payload_values = sccp_message_type_acro_values;",
          "",
          "[Removed Lines]",
          "3037: static int sccp_calls_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt, const void *prot_info) {",
          "",
          "[Added Lines]",
          "3075: static int",
          "3076: sccp_calls_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt, const void *prot_info) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3042: }",
          "3046:     voip_calls_tapinfo_t *tapinfo = tap_id_to_base(tap_offset_ptr, tap_id_offset_sccp_);",
          "3048:     sccp_payload_values = sua_co_class_type_acro_values;",
          "",
          "[Removed Lines]",
          "3045: static int sua_calls_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt, const void *prot_info) {",
          "",
          "[Added Lines]",
          "3084: static int",
          "3085: sua_calls_packet(void *tap_offset_ptr, packet_info *pinfo, epan_dissect_t *edt, const void *prot_info) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3945: void",
          "3947: {",
          "3948:     GString *error_string;",
          "",
          "[Removed Lines]",
          "3946: VoIPcalls_init_tap(voip_calls_tapinfo_t *tap_id_base)",
          "",
          "[Added Lines]",
          "3986: voip_calls_init_tap(voip_calls_tapinfo_t *tap_id_base)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3968:     remove_tap_listener(tap_base_to_id(tap_id_base, tap_id_offset_voip_));",
          "3969: }",
          "",
          "[Removed Lines]",
          "3972: static flow_show_options flow_show_option=FLOW_ALL;",
          "3974: flow_show_options VoIPcalls_get_flow_show_option(void)",
          "3975: {",
          "3976:     return flow_show_option;",
          "3977: }",
          "3979: void VoIPcalls_set_flow_show_option(flow_show_options option)",
          "3980: {",
          "3981:     flow_show_option = option;",
          "3982: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/gtk/voip_calls.h||ui/gtk/voip_calls.h": [
          "File: ui/gtk/voip_calls.h -> ui/gtk/voip_calls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     FLOW_ONLY_INVITES",
          "74: } flow_show_options;",
          "81: typedef enum _sip_call_state {",
          "",
          "[Removed Lines]",
          "76: flow_show_options VoIPcalls_get_flow_show_option(void);",
          "77: void VoIPcalls_set_flow_show_option(flow_show_options option);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171: typedef struct _voip_calls_tapinfo {",
          "178:     int start_packets;",
          "179:     int completed_calls;",
          "180:     int rejected_calls;",
          "181:     seq_analysis_info_t* graph_analysis;",
          "183:     gboolean redraw;",
          "184: } voip_calls_tapinfo_t;",
          "",
          "[Removed Lines]",
          "190: typedef struct _voip_rtp_tapinfo {",
          "193: } voip_rtp_tapinfo_t;",
          "",
          "[Added Lines]",
          "171: struct _h245_labels;",
          "185:     guint32 rtp_evt_frame_num;",
          "186:     guint8 rtp_evt;",
          "187:     gboolean rtp_evt_end;",
          "188:     gchar *sdp_summary;",
          "189:     guint32 sdp_frame_num;",
          "190:     guint32 mtp3_opc;",
          "191:     guint32 mtp3_dpc;",
          "192:     guint8 mtp3_ni;",
          "193:     guint32 mtp3_frame_num;",
          "195:     gchar *q931_calling_number;",
          "196:     gchar *q931_called_number;",
          "197:     guint8 q931_cause_value;",
          "198:     gint32 q931_crv;",
          "199:     guint32 q931_frame_num;",
          "200:     guint32 h225_frame_num;",
          "201:     guint16 h225_call_num;",
          "203:     gboolean h225_is_faststart;",
          "204:     guint32 actrace_frame_num;",
          "205:     gint32 actrace_trunk;",
          "206:     gint32 actrace_direction;",
          "207:     flow_show_options fs_option;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "205: void actrace_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "206: void h225_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "207: void h245dg_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "208: void h248_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "209: void iax2_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "210: void isup_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "211: void mgcp_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "212: void mtp3_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "213: void q931_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "214: void rtp_event_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "215: void rtp_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "216: void sccp_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "217: void sdp_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "218: void sip_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "219: void skinny_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "220: void t38_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "221: void unistim_calls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "222: void VoIPcalls_init_tap(voip_calls_tapinfo_t *tap_id_base);",
          "228: void remove_tap_listener_actrace_calls(voip_calls_tapinfo_t *tap_id_base);",
          "229: void remove_tap_listener_h225_calls(voip_calls_tapinfo_t *tap_id_base);",
          "230: void remove_tap_listener_h245dg_calls(voip_calls_tapinfo_t *tap_id_base);",
          "231: void remove_tap_listener_h248_calls(voip_calls_tapinfo_t *tap_id_base);",
          "232: void remove_tap_listener_iax2_calls(voip_calls_tapinfo_t *tap_id_base);",
          "233: void remove_tap_listener_isup_calls(voip_calls_tapinfo_t *tap_id_base);",
          "234: void remove_tap_listener_mgcp_calls(voip_calls_tapinfo_t *tap_id_base);",
          "235: void remove_tap_listener_mtp3_calls(voip_calls_tapinfo_t *tap_id_base);",
          "236: void remove_tap_listener_q931_calls(voip_calls_tapinfo_t *tap_id_base);",
          "237: void remove_tap_listener_rtp(voip_calls_tapinfo_t *tap_id_base);",
          "238: void remove_tap_listener_rtp_event(voip_calls_tapinfo_t *tap_id_base);",
          "239: void remove_tap_listener_sccp_calls(voip_calls_tapinfo_t *tap_id_base);",
          "240: void remove_tap_listener_sdp_calls(voip_calls_tapinfo_t *tap_id_base);",
          "241: void remove_tap_listener_sip_calls(voip_calls_tapinfo_t *tap_id_base);",
          "242: void remove_tap_listener_skinny_calls(voip_calls_tapinfo_t *tap_id_base);",
          "243: void remove_tap_listener_t38(voip_calls_tapinfo_t *tap_id_base);",
          "244: void remove_tap_listener_unistim_calls(voip_calls_tapinfo_t *tap_id_base);",
          "245: void remove_tap_listener_voip_calls(voip_calls_tapinfo_t *tap_id_base);",
          "251: voip_calls_tapinfo_t* voip_calls_get_info(void);",
          "",
          "[Added Lines]",
          "221: void voip_calls_init_all_taps(voip_calls_tapinfo_t *tap_id_base);",
          "227: void voip_calls_remove_all_tap_listeners(voip_calls_tapinfo_t *tap_id_base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258: void q931_calls_reset(voip_calls_tapinfo_t *tapinfo);",
          "259: void voip_calls_reset(voip_calls_tapinfo_t *tapinfo);",
          "",
          "[Removed Lines]",
          "261: void graph_analysis_data_init(void);",
          "",
          "[Added Lines]",
          "237: void graph_analysis_data_init(voip_calls_tapinfo_t *tapinfo);",
          "",
          "---------------"
        ],
        "ui/gtk/voip_calls_dlg.c||ui/gtk/voip_calls_dlg.c": [
          "File: ui/gtk/voip_calls_dlg.c -> ui/gtk/voip_calls_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include <epan/to_str.h>",
          "47: #include <epan/address.h>",
          "48: #include <epan/addr_resolv.h>",
          "49: #include <epan/dissectors/packet-h248.h>",
          "51: #include \"../globals.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include <epan/dissectors/packet-h225.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: };",
          "112: static gboolean have_voip_calls_tap_listeners = FALSE;",
          "114: static void",
          "116: {",
          "141:  have_voip_calls_tap_listeners = FALSE;",
          "142: }",
          "",
          "[Removed Lines]",
          "115: voip_calls_remove_tap_listener(voip_calls_tapinfo_t* tap_id_base)",
          "118:  remove_tap_listener_actrace_calls(tap_id_base);",
          "119:  remove_tap_listener_h225_calls(tap_id_base);",
          "120:  remove_tap_listener_h245dg_calls(tap_id_base);",
          "121:  remove_tap_listener_h248_calls(tap_id_base);",
          "122:  remove_tap_listener_iax2_calls(tap_id_base);",
          "123:  remove_tap_listener_isup_calls(tap_id_base);",
          "124:  remove_tap_listener_mgcp_calls(tap_id_base);",
          "125:  remove_tap_listener_mtp3_calls(tap_id_base);",
          "126:  remove_tap_listener_q931_calls(tap_id_base);",
          "127:  remove_tap_listener_rtp(tap_id_base);",
          "128:  remove_tap_listener_rtp_event(tap_id_base);",
          "129:  remove_tap_listener_sccp_calls(tap_id_base);",
          "130:  remove_tap_listener_sdp_calls(tap_id_base);",
          "131:  remove_tap_listener_sip_calls(tap_id_base);",
          "132:  remove_tap_listener_skinny_calls(tap_id_base);",
          "133:  remove_tap_listener_t38(tap_id_base);",
          "135:   remove_tap_listener_unistim_calls(tap_id_base);",
          "136:  }",
          "137:  if (find_tap_id(\"voip\")) {",
          "138:   remove_tap_listener_voip_calls(tap_id_base);",
          "139:  }",
          "",
          "[Added Lines]",
          "117: static voip_calls_tapinfo_t*",
          "118: voip_calls_get_info(void)",
          "119: {",
          "121:  static voip_calls_tapinfo_t the_tapinfo_struct =",
          "122:  {0, NULL, {0}, 0, NULL, 0, 0, 0, NULL, NULL,",
          "132:   FALSE };",
          "133:  if (!the_tapinfo_struct.session) {",
          "134:   the_tapinfo_struct.session = cfile.epan;",
          "135:  }",
          "136:  if (!the_tapinfo_struct.callsinfos) {",
          "138:   the_tapinfo_struct.callsinfos = g_queue_new();",
          "139:  }",
          "140:  return &the_tapinfo_struct;",
          "141: }",
          "147: voip_calls_dlg_remove_tap_listeners(voip_calls_tapinfo_t* tap_id_base)",
          "149:  voip_calls_remove_all_tap_listeners(tap_id_base);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148: voip_calls_on_destroy(GObject *object _U_, gpointer user_data _U_)",
          "149: {",
          "154:  voip_calls_dlg_reset(NULL);",
          "",
          "[Removed Lines]",
          "151:  voip_calls_remove_tap_listener(voip_calls_get_info());",
          "",
          "[Added Lines]",
          "161:  voip_calls_dlg_remove_tap_listeners(voip_calls_get_info());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378: static void",
          "379: on_flow_bt_clicked(GtkButton *button _U_, gpointer user_data _U_)",
          "380: {",
          "382: }",
          "",
          "[Removed Lines]",
          "381:     on_graph_bt_clicked(button,user_data);",
          "",
          "[Added Lines]",
          "391:  on_graph_bt_clicked(button,user_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:       CALL_COL_DATA,             strinfo,",
          "495:       -1);",
          "498: }",
          "",
          "[Removed Lines]",
          "497:         calls_nb += 1;",
          "",
          "[Added Lines]",
          "507:  calls_nb += 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "838:   gtk_list_store_clear(list_store);",
          "839:  }",
          "842:  voip_calls_reset(voip_calls_get_info());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851: #ifdef HAVE_LIBPORTAUDIO",
          "853:  reset_rtp_player();",
          "854: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "853: static void",
          "855: {",
          "856:  voip_calls_tapinfo_t* tap_id_base = voip_calls_get_info();",
          "857:  tap_id_base->session = cfile.epan;",
          "859:  if (graph_analysis_data == NULL) {",
          "862:   graph_analysis_data = graph_analysis_init(voip_calls_get_info()->graph_analysis);",
          "863:  }",
          "866:  voip_calls_reset(tap_id_base);",
          "869:  if (!have_voip_calls_tap_listeners) {",
          "894:   have_voip_calls_tap_listeners = TRUE;",
          "895:  }",
          "",
          "[Removed Lines]",
          "854: voip_calls_init_tap(const char *dummy _U_, void* userdata _U_)",
          "860:   graph_analysis_data_init();",
          "870:   actrace_calls_init_tap(tap_id_base);",
          "871:   h225_calls_init_tap(tap_id_base);",
          "872:   h245dg_calls_init_tap(tap_id_base);",
          "873:   h248_calls_init_tap(tap_id_base);",
          "874:   iax2_calls_init_tap(tap_id_base);",
          "875:   isup_calls_init_tap(tap_id_base);",
          "876:   mgcp_calls_init_tap(tap_id_base);",
          "877:   mtp3_calls_init_tap(tap_id_base);",
          "878:   q931_calls_init_tap(tap_id_base);",
          "879:   rtp_event_init_tap(tap_id_base);",
          "880:   rtp_init_tap(tap_id_base);",
          "881:   sccp_calls_init_tap(tap_id_base);",
          "882:   sdp_calls_init_tap(tap_id_base);",
          "883:   sip_calls_init_tap(tap_id_base);",
          "884:   skinny_calls_init_tap(tap_id_base);",
          "885:   t38_init_tap(tap_id_base);",
          "887:   if (find_tap_id(\"unistim\")) {",
          "888:    unistim_calls_init_tap(tap_id_base);",
          "889:   }",
          "890:   if (find_tap_id(\"voip\")) {",
          "891:    VoIPcalls_init_tap(tap_id_base);",
          "892:   }",
          "",
          "[Added Lines]",
          "869: voip_calls_dlg_init_taps(const char *dummy _U_, void* userdata _U_)",
          "875:   graph_analysis_data_init(tap_id_base);",
          "880: #ifdef HAVE_LIBPORTAUDIO",
          "882:  reset_rtp_player();",
          "883: #endif",
          "890:   voip_calls_init_all_taps(tap_id_base);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "918: void",
          "919: voip_calls_launch(GtkAction *action _U_, gpointer user_data _U_)",
          "920: {",
          "923: }",
          "",
          "[Removed Lines]",
          "921:  VoIPcalls_set_flow_show_option(FLOW_ONLY_INVITES);",
          "922:  voip_calls_init_tap(\"\", NULL);",
          "",
          "[Added Lines]",
          "918:  voip_calls_get_info()->fs_option = FLOW_ONLY_INVITES;",
          "919:  voip_calls_dlg_init_taps(\"\", NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "927: void",
          "928: voip_flows_launch(GtkAction *action _U_, gpointer user_data _U_)",
          "929: {",
          "932: }",
          "935: static stat_tap_ui voip_calls_ui = {",
          "943: };",
          "945: void",
          "",
          "[Removed Lines]",
          "930:  VoIPcalls_set_flow_show_option(FLOW_ALL);",
          "931:  voip_calls_init_tap(\"\", NULL);",
          "936:     REGISTER_STAT_GROUP_GENERIC,",
          "937:     NULL,",
          "938:     \"voip,calls\",",
          "939:     voip_calls_init_tap,",
          "940:     -1,",
          "941:     0,",
          "942:     NULL",
          "",
          "[Added Lines]",
          "927:  voip_calls_get_info()->fs_option = FLOW_ONLY_INVITES;",
          "928:  voip_calls_dlg_init_taps(\"\", NULL);",
          "933:  REGISTER_STAT_GROUP_GENERIC,",
          "934:  NULL,",
          "935:  \"voip,calls\",",
          "936:  voip_calls_dlg_init_taps,",
          "937:  -1,",
          "938:  0,",
          "939:  NULL",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a67b7f5b5c563e54ca630370cdf7f696e4ce59a5",
      "candidate_info": {
        "commit_hash": "a67b7f5b5c563e54ca630370cdf7f696e4ce59a5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a67b7f5b5c563e54ca630370cdf7f696e4ce59a5",
        "files": [
          "ui/gtk/flow_graph.c",
          "ui/gtk/graph_analysis.c",
          "ui/gtk/lbm_uimflow_dlg.c",
          "ui/gtk/rtp_player.c",
          "ui/gtk/voip_calls.c",
          "ui/gtk/voip_calls.h",
          "ui/gtk/voip_calls_dlg.c",
          "ui/qt/lbm_uimflow_dialog.cpp",
          "ui/qt/sequence_diagram.cpp",
          "ui/qt/sequence_dialog.cpp",
          "ui/tap-sequence-analysis.c",
          "ui/tap-sequence-analysis.h"
        ],
        "message": "Use GQueue for generating statistics\n\nThis makes reversing the list back and forth to keep adding data\nat O(n) complexity obsolete.\n\nBug: 9696\n\nChange-Id: Ice77328b8f6c5bf72bbfcfd82e08d09d4f986d3f\nReviewed-on: https://code.wireshark.org/review/2571\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "ui/gtk/flow_graph.c||ui/gtk/flow_graph.c",
          "ui/gtk/graph_analysis.c||ui/gtk/graph_analysis.c",
          "ui/gtk/lbm_uimflow_dlg.c||ui/gtk/lbm_uimflow_dlg.c",
          "ui/gtk/rtp_player.c||ui/gtk/rtp_player.c",
          "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c",
          "ui/gtk/voip_calls.h||ui/gtk/voip_calls.h",
          "ui/gtk/voip_calls_dlg.c||ui/gtk/voip_calls_dlg.c",
          "ui/qt/lbm_uimflow_dialog.cpp||ui/qt/lbm_uimflow_dialog.cpp",
          "ui/qt/sequence_diagram.cpp||ui/qt/sequence_diagram.cpp",
          "ui/qt/sequence_dialog.cpp||ui/qt/sequence_dialog.cpp",
          "ui/tap-sequence-analysis.c||ui/tap-sequence-analysis.c",
          "ui/tap-sequence-analysis.h||ui/tap-sequence-analysis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c"
          ],
          "candidate": [
            "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/gtk/flow_graph.c||ui/gtk/flow_graph.c": [
          "File: ui/gtk/flow_graph.c -> ui/gtk/flow_graph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  graph_analysis = (seq_analysis_info_t *)g_malloc0(sizeof(seq_analysis_info_t));",
          "68:  graph_analysis->type = SEQ_ANALYSIS_ANY;",
          "69:  graph_analysis->all_packets = TRUE;",
          "70: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:  graph_analysis->items = g_queue_new();",
          "",
          "---------------"
        ],
        "ui/gtk/graph_analysis.c||ui/gtk/graph_analysis.c": [
          "File: ui/gtk/graph_analysis.c -> ui/gtk/graph_analysis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:  display_items = draw_height/ITEM_HEIGHT;",
          "434:  current_item = 0;",
          "435:  i = 0;",
          "436:  while (list)",
          "",
          "[Removed Lines]",
          "433:  list = g_list_first(user_data->graph_info->list);",
          "",
          "[Added Lines]",
          "433:  list = g_queue_peek_nth_link(user_data->graph_info->items, 0);",
          "",
          "---------------"
        ],
        "ui/gtk/lbm_uimflow_dlg.c||ui/gtk/lbm_uimflow_dlg.c": [
          "File: ui/gtk/lbm_uimflow_dlg.c -> ui/gtk/lbm_uimflow_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     dialog_data.graph_analysis->all_packets = TRUE;",
          "66:     dialog_data.graph_analysis->any_addr = TRUE;",
          "67:     dialog_data.graph_analysis->nconv = 0;",
          "69:     dialog_data.graph_analysis->ht = NULL;",
          "70:     dialog_data.graph_analysis->num_nodes = 0;",
          "71: }",
          "",
          "[Removed Lines]",
          "68:     dialog_data.graph_analysis->list = NULL;",
          "",
          "[Added Lines]",
          "68:     dialog_data.graph_analysis->items = g_queue_new();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     if (dialog_data.graph_analysis != NULL)",
          "97:     {",
          "100:         while (list)",
          "101:         {",
          "102:             graph_item = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "99:         list = g_list_first(dialog_data.graph_analysis->list);",
          "",
          "[Added Lines]",
          "99:         list = g_queue_peek_nth_link(dialog_data.graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:             g_free(list->data);",
          "107:             list = g_list_next(list);",
          "108:         }",
          "110:         dialog_data.graph_analysis->nconv = 0;",
          "112:     }",
          "113: }",
          "",
          "[Removed Lines]",
          "109:         g_list_free(dialog_data.graph_analysis->list);",
          "111:         dialog_data.graph_analysis->list = NULL;",
          "",
          "[Added Lines]",
          "109:         g_queue_clear(dialog_data.graph_analysis->items);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "223:     item->conv_num = (guint16)LBM_CHANNEL_ID(stream_info->channel);",
          "224:     item->display = TRUE;",
          "225:     item->line_style = 1;",
          "227:     return (1);",
          "228: }",
          "",
          "[Removed Lines]",
          "226:     dialog_data.graph_analysis->list = g_list_prepend(dialog_data.graph_analysis->list, (gpointer)item);",
          "",
          "[Added Lines]",
          "225:     g_queue_push_tail(dialog_data.graph_analysis->items, item);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "280:         dialog_data.have_tap_listener = TRUE;",
          "281:     }",
          "282:     cf_retap_packets(&cfile);",
          "286:     while (list != NULL)",
          "287:     {",
          "288:         seq_analysis_item_t * seq_item = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "283:     dialog_data.graph_analysis->list = g_list_reverse(dialog_data.graph_analysis->list);",
          "285:     list = g_list_first(dialog_data.graph_analysis->list);",
          "",
          "[Added Lines]",
          "283:     list = g_queue_peek_nth_link(dialog_data.graph_analysis->items, 0);",
          "",
          "---------------"
        ],
        "ui/gtk/rtp_player.c||ui/gtk/rtp_player.c": [
          "File: ui/gtk/rtp_player.c -> ui/gtk/rtp_player.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  rsi->play = FALSE;",
          "442:  while (graph_list)",
          "443:  {",
          "444:   graph_item = (seq_analysis_item_t *)graph_list->data;",
          "445:   if (rsi->first_frame_number == graph_item->fd->num) {",
          "446:    rsi->call_num = graph_item->conv_num;",
          "449:    while (voip_calls_list)",
          "450:    {",
          "451:     tmp_voip_call = (voip_calls_info_t *)voip_calls_list->data;",
          "",
          "[Removed Lines]",
          "441:  graph_list = g_list_first(voip_calls->graph_analysis->list);",
          "448:    voip_calls_list = g_list_first(voip_calls->callsinfo_list);",
          "",
          "[Added Lines]",
          "441:  graph_list = g_queue_peek_nth_link(voip_calls->graph_analysis->items, 0);",
          "448:    voip_calls_list = g_queue_peek_nth_link(voip_calls->callsinfos, 0);",
          "",
          "---------------"
        ],
        "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c": [
          "File: ui/gtk/voip_calls.c -> ui/gtk/voip_calls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: } voip_rtp_stream_info_t;",
          "153: static voip_rtp_tapinfo_t the_tapinfo_rtp_struct =",
          "",
          "[Removed Lines]",
          "149: static voip_calls_tapinfo_t the_tapinfo_struct =",
          "150:  {0, NULL, {0}, 0, NULL, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169: #endif",
          "173:  while (list)",
          "174:  {",
          "175:   callsinfo = (voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "172:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "169:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:   g_free(list->data);",
          "187:   list = g_list_next(list);",
          "188:  }",
          "191:  if(NULL!=tapinfo->callsinfo_hashtable[SIP_HASH])",
          "192:   g_hash_table_remove_all (tapinfo->callsinfo_hashtable[SIP_HASH]);",
          "194:  tapinfo->ncalls = 0;",
          "195:  tapinfo->npackets = 0;",
          "196:  tapinfo->start_packets = 0;",
          "197:  tapinfo->completed_calls = 0;",
          "198:  tapinfo->rejected_calls = 0;",
          "202:  if(NULL!=tapinfo->graph_analysis->ht)",
          "203:   g_hash_table_remove_all(tapinfo->graph_analysis->ht);",
          "205:  while (list)",
          "206:  {",
          "207:   graph_item = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "189:  g_list_free(tapinfo->callsinfo_list);",
          "193:  tapinfo->callsinfo_list = NULL;",
          "199:  tapinfo->reversed= 0;",
          "204:  list = g_list_first(tapinfo->graph_analysis->list);",
          "",
          "[Added Lines]",
          "186:  g_queue_clear(tapinfo->callsinfos);",
          "199:  list = g_queue_peek_nth_link(tapinfo->graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "213:   g_free(list->data);",
          "214:   list = g_list_next(list);",
          "215:  }",
          "217:  tapinfo->graph_analysis->nconv = 0;",
          "220:  ++(tapinfo->launch_count);",
          "",
          "[Removed Lines]",
          "216:  g_list_free(tapinfo->graph_analysis->list);",
          "218:  tapinfo->graph_analysis->list = NULL;",
          "",
          "[Added Lines]",
          "211:  g_queue_clear(tapinfo->graph_analysis->items);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237: void graph_analysis_data_init(void) {",
          "242: }",
          "",
          "[Removed Lines]",
          "238:  the_tapinfo_struct.graph_analysis = (seq_analysis_info_t *)g_malloc(sizeof(seq_analysis_info_t));",
          "239:  the_tapinfo_struct.graph_analysis->nconv = 0;",
          "240:  the_tapinfo_struct.graph_analysis->list = NULL;",
          "241:  the_tapinfo_struct.graph_analysis->ht= g_hash_table_new(g_int_hash, g_int_equal);",
          "",
          "[Added Lines]",
          "232:  voip_calls_tapinfo_t *voip_tapinfo = voip_calls_get_info();",
          "233:  voip_tapinfo->graph_analysis = (seq_analysis_info_t *)g_malloc(sizeof(seq_analysis_info_t));",
          "234:  voip_tapinfo->graph_analysis->nconv = 0;",
          "235:  voip_tapinfo->graph_analysis->items = g_queue_new();;",
          "236:  voip_tapinfo->graph_analysis->ht= g_hash_table_new(g_int_hash, g_int_equal);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "270:  gai->time_str = g_strdup(time_str);",
          "271:  gai->display=FALSE;",
          "274:  g_hash_table_insert(tapinfo->graph_analysis->ht, &gai->fd->num, gai);",
          "276: }",
          "",
          "[Removed Lines]",
          "273:  tapinfo->graph_analysis->list = g_list_prepend(tapinfo->graph_analysis->list, gai);",
          "",
          "[Added Lines]",
          "268:  g_queue_push_tail(tapinfo->graph_analysis->items, gai);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "342:  guint items_changed;",
          "344:  items_changed = 0;",
          "346:  while (list)",
          "347:  {",
          "348:   gai = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "345:  list = g_list_first(tapinfo->graph_analysis->list);",
          "",
          "[Added Lines]",
          "340:  list = g_queue_peek_nth_link(tapinfo->graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "390:  item_num = 0;",
          "391:  inserted = FALSE;",
          "393:  while (list)",
          "394:  {",
          "395:   gai = (seq_analysis_item_t *)list->data;",
          "396:   if (gai->fd->num > frame_num) {",
          "398:    g_hash_table_insert(tapinfo->graph_analysis->ht, &new_gai->fd->num, new_gai);",
          "399:    inserted = TRUE;",
          "400:    break;",
          "",
          "[Removed Lines]",
          "392:  list = g_list_first(tapinfo->graph_analysis->list);",
          "397:    the_tapinfo_struct.graph_analysis->list = g_list_insert(the_tapinfo_struct.graph_analysis->list, new_gai, item_num);",
          "",
          "[Added Lines]",
          "387:  list = g_queue_peek_nth_link(tapinfo->graph_analysis->items, 0);",
          "392:    g_queue_insert_before(tapinfo->graph_analysis->items, list, new_gai);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "404:  }",
          "406:  if (!inserted) {",
          "408:   g_hash_table_insert(tapinfo->graph_analysis->ht, &new_gai->fd->num, new_gai);",
          "409:  }",
          "410: }",
          "",
          "[Removed Lines]",
          "407:   tapinfo->graph_analysis->list = g_list_prepend(tapinfo->graph_analysis->list, new_gai);",
          "",
          "[Added Lines]",
          "402:   g_queue_push_tail(tapinfo->graph_analysis->items, new_gai);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "591:   }",
          "592:  }",
          "596:  return 1;",
          "597: }",
          "",
          "[Removed Lines]",
          "594:  the_tapinfo_struct.redraw = TRUE;",
          "",
          "[Added Lines]",
          "589:  voip_calls_get_info()->redraw = TRUE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "617:   rtp_listinfo = (voip_rtp_stream_info_t *)rtp_streams_list->data;",
          "623:   if(gai != NULL) {",
          "625:    conv_num = gai->conv_num;",
          "628:    if(gai != NULL) {",
          "629:     duration = (guint32)(nstime_to_msec(&rtp_listinfo->stop_rel_ts) - nstime_to_msec(&rtp_listinfo->start_rel_ts));",
          "630:     g_free(gai->comment);",
          "",
          "[Removed Lines]",
          "622:   gai = (seq_analysis_item_t *)g_hash_table_lookup(the_tapinfo_struct.graph_analysis->ht, &rtp_listinfo->setup_frame_number);",
          "627:    gai = (seq_analysis_item_t *)g_hash_table_lookup(the_tapinfo_struct.graph_analysis->ht, &rtp_listinfo->start_fd->num);",
          "",
          "[Added Lines]",
          "617:   gai = (seq_analysis_item_t *)g_hash_table_lookup(voip_calls_get_info()->graph_analysis->ht, &rtp_listinfo->setup_frame_number);",
          "622:    gai = (seq_analysis_item_t *)g_hash_table_lookup(voip_calls_get_info()->graph_analysis->ht, &rtp_listinfo->start_fd->num);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "652:     new_gai->time_str = g_strdup(time_str);",
          "653:     new_gai->display=FALSE;",
          "657:    }",
          "658:   }",
          "659:   rtp_streams_list = g_list_next(rtp_streams_list);",
          "",
          "[Removed Lines]",
          "655:     the_tapinfo_struct.graph_analysis->list = g_list_prepend(the_tapinfo_struct.graph_analysis->list, new_gai);",
          "656:     g_hash_table_insert(the_tapinfo_struct.graph_analysis->ht, &rtp_listinfo->start_fd, new_gai);",
          "",
          "[Added Lines]",
          "650:     g_queue_push_tail(voip_calls_get_info()->graph_analysis->items, new_gai);",
          "651:     g_hash_table_insert(voip_calls_get_info()->graph_analysis->ht, &rtp_listinfo->start_fd, new_gai);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "680:   rtp_listinfo = rtp_streams_list->data;",
          "684:   while (voip_calls_graph_list)",
          "685:   {",
          "686:    gai = voip_calls_graph_list->data;",
          "",
          "[Removed Lines]",
          "683:   voip_calls_graph_list = g_list_first(the_tapinfo_struct.graph_analysis->list);",
          "",
          "[Added Lines]",
          "678:   voip_calls_graph_list = g_list_first(voip_calls_get_info()->graph_analysis->list);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "689:    if (rtp_listinfo->setup_frame_number == gai->fd->num) {",
          "692:     item = 0;",
          "693:     while(voip_calls_graph_list) {",
          "694:      gai = voip_calls_graph_list->data;",
          "",
          "[Removed Lines]",
          "691:     voip_calls_graph_list = g_list_first(the_tapinfo_struct.graph_analysis->list);",
          "",
          "[Added Lines]",
          "686:     voip_calls_graph_list = g_list_first(voip_calls_get_info()->graph_analysis->list);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "728:       new_gai->time_str = g_strdup(time_str);",
          "729:       new_gai->display=FALSE;",
          "732:       break;",
          "733:      }",
          "734:      if (voip_calls_graph_list) item++;",
          "",
          "[Removed Lines]",
          "731:       the_tapinfo_struct.graph_analysis->list = g_list_insert(the_tapinfo_struct.graph_analysis->list, new_gai, item);",
          "",
          "[Added Lines]",
          "726:       voip_calls_get_info()->graph_analysis->list = g_list_insert(voip_calls_get_info()->graph_analysis->list, new_gai, item);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "785: static int",
          "786: T38_packet( void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *T38info)",
          "787: {",
          "790:  voip_calls_info_t *callsinfo = NULL;",
          "791:  voip_calls_info_t *tmp_listinfo;",
          "",
          "[Removed Lines]",
          "788:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "783:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "803:  if  (pi->setup_frame_number != 0) {",
          "806:   while (voip_calls_graph_list)",
          "807:   {",
          "808:    tmp_gai = (seq_analysis_item_t *)voip_calls_graph_list->data;",
          "",
          "[Removed Lines]",
          "805:   voip_calls_graph_list = g_list_first(tapinfo->graph_analysis->list);",
          "",
          "[Added Lines]",
          "800:   voip_calls_graph_list = g_queue_peek_nth_link(tapinfo->graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "823:  if ( (pi->setup_frame_number == 0) || (gai == NULL) ) {",
          "826:   while (list)",
          "827:   {",
          "828:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "825:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "820:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "849:    callsinfo->free_prot_info = NULL;",
          "850:    callsinfo->npackets = 0;",
          "851:    callsinfo->call_num = tapinfo->ncalls++;",
          "853:   }",
          "854:   callsinfo->stop_fd = pinfo->fd;",
          "855:   callsinfo->stop_rel_ts = pinfo->rel_ts;",
          "",
          "[Removed Lines]",
          "852:    tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "847:    g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "938:  if(have_T38_tap_listener==FALSE)",
          "939:  {",
          "942:    0,",
          "943:    voip_calls_dlg_reset,",
          "944:    T38_packet,",
          "",
          "[Removed Lines]",
          "941:   error_string = register_tap_listener(\"t38\", &(the_tapinfo_struct.t38_dummy), NULL,",
          "",
          "[Added Lines]",
          "936:   error_string = register_tap_listener(\"t38\", &(voip_calls_get_info()->t38_dummy), NULL,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "958: void",
          "959: remove_tap_listener_t38(void)",
          "960: {",
          "963:  have_T38_tap_listener=FALSE;",
          "964: }",
          "",
          "[Removed Lines]",
          "961:  remove_tap_listener(&(the_tapinfo_struct.t38_dummy));",
          "",
          "[Added Lines]",
          "956:  remove_tap_listener(&(voip_calls_get_info()->t38_dummy));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "985: static int",
          "986: SIPcalls_packet( void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *SIPinfo)",
          "987: {",
          "",
          "[Removed Lines]",
          "988:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "983:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1050:    callsinfo->call_comment=g_strdup(pi->request_method);",
          "1054:    g_hash_table_insert(tapinfo->callsinfo_hashtable[SIP_HASH],",
          "1055:          tmp_sipinfo->call_identifier, callsinfo);",
          "",
          "[Removed Lines]",
          "1052:    tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "1047:    g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1162: voip_calls_tapinfo_t* voip_calls_get_info(void)",
          "1163: {",
          "1164:  return &the_tapinfo_struct;",
          "1165: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1160:  static voip_calls_tapinfo_t the_tapinfo_struct =",
          "1161:    {0, NULL, {0}, 0, NULL, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};",
          "1162:  if (!the_tapinfo_struct.callsinfos) {",
          "1164:   the_tapinfo_struct.callsinfos = g_queue_new();",
          "1165:  }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1177:  if(have_SIP_tap_listener==FALSE)",
          "1178:  {",
          "1181:    0,",
          "1182:    voip_calls_dlg_reset,",
          "1183:    SIPcalls_packet,",
          "",
          "[Removed Lines]",
          "1180:   error_string = register_tap_listener(\"sip\", &(the_tapinfo_struct.sip_dummy), NULL,",
          "",
          "[Added Lines]",
          "1182:   error_string = register_tap_listener(\"sip\", &(voip_calls_get_info()->sip_dummy), NULL,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1197: void",
          "1198: remove_tap_listener_sip_calls(void)",
          "1199: {",
          "1202:  have_SIP_tap_listener=FALSE;",
          "1203: }",
          "",
          "[Removed Lines]",
          "1200:  remove_tap_listener(&(the_tapinfo_struct.sip_dummy));",
          "",
          "[Added Lines]",
          "1202:  remove_tap_listener(&(voip_calls_get_info()->sip_dummy));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1216: static int",
          "1217: isup_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *isup_info _U_)",
          "1218: {",
          "1220:  voip_calls_info_t *tmp_listinfo;",
          "1221:  voip_calls_info_t *callsinfo = NULL;",
          "1222:  isup_calls_info_t *tmp_isupinfo;",
          "",
          "[Removed Lines]",
          "1219:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "1221:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1227:  gchar *frame_label = NULL;",
          "1228:  gchar *comment = NULL;",
          "1231:  const isup_tap_rec_t *pi = (const isup_tap_rec_t *)isup_info;",
          "1234:  if (mtp3_frame_num != pinfo->fd->num) return 0;",
          "1238:  while (list)",
          "1239:  {",
          "1240:   right_pair = TRUE;",
          "",
          "[Removed Lines]",
          "1237:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1239:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1299:   tmp_isupinfo->cic = pinfo->circuit_id;",
          "1300:   callsinfo->npackets = 0;",
          "1301:   callsinfo->call_num = tapinfo->ncalls++;",
          "1303:  }",
          "",
          "[Removed Lines]",
          "1302:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "1304:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1386:  if(have_isup_tap_listener==FALSE)",
          "1387:  {",
          "1389:    NULL,",
          "1390:    0,",
          "1391:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "1388:   error_string = register_tap_listener(\"isup\", &(the_tapinfo_struct.isup_dummy),",
          "",
          "[Added Lines]",
          "1390:   error_string = register_tap_listener(\"isup\", &(voip_calls_get_info()->isup_dummy),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1408: void",
          "1409: remove_tap_listener_isup_calls(void)",
          "1410: {",
          "1413:  have_isup_tap_listener=FALSE;",
          "1414: }",
          "",
          "[Removed Lines]",
          "1411:  remove_tap_listener(&(the_tapinfo_struct.isup_dummy));",
          "",
          "[Added Lines]",
          "1413:  remove_tap_listener(&(voip_calls_get_info()->isup_dummy));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1450:  if(have_mtp3_tap_listener==FALSE)",
          "1451:  {",
          "1453:    NULL,",
          "1454:    0,",
          "1455:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "1452:   error_string = register_tap_listener(\"mtp3\", &(the_tapinfo_struct.mtp3_dummy),",
          "",
          "[Added Lines]",
          "1454:   error_string = register_tap_listener(\"mtp3\", &(voip_calls_get_info()->mtp3_dummy),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1469:  if(have_m3ua_tap_listener==FALSE)",
          "1470:  {",
          "1472:    NULL,",
          "1473:    0,",
          "1474:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "1471:   error_string = register_tap_listener(\"m3ua\", &(the_tapinfo_struct.mtp3_dummy),",
          "",
          "[Added Lines]",
          "1473:   error_string = register_tap_listener(\"m3ua\", &(voip_calls_get_info()->mtp3_dummy),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1492: void",
          "1493: remove_tap_listener_mtp3_calls(void)",
          "1494: {",
          "1498:  have_mtp3_tap_listener=FALSE;",
          "1499:  have_m3ua_tap_listener=FALSE;",
          "",
          "[Removed Lines]",
          "1495:  remove_tap_listener(&(the_tapinfo_struct.mtp3_dummy));",
          "1496:  remove_tap_listener(&(the_tapinfo_struct.m3ua_dummy));",
          "",
          "[Added Lines]",
          "1497:  remove_tap_listener(&(voip_calls_get_info()->mtp3_dummy));",
          "1498:  remove_tap_listener(&(voip_calls_get_info()->m3ua_dummy));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1528: q931_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *q931_info)",
          "1529: {",
          "1530:  GList *list,*list2;",
          "1532:  h323_calls_info_t *tmp_h323info,*tmp2_h323info;",
          "1533:  actrace_isdn_calls_info_t *tmp_actrace_isdn_info;",
          "1534:  voip_calls_info_t *tmp_listinfo;",
          "",
          "[Removed Lines]",
          "1531:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "1533:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1560:  if (h225_frame_num == q931_frame_num) {",
          "1561:   tmp_h323info = NULL;",
          "1563:   while (list)",
          "1564:   {",
          "1565:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "1562:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1564:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1596:      we should also check if the h225 signaling IP and port match the destination",
          "1599:     while (list)",
          "1600:     {",
          "1601:      tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "1598:     list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1600:     list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1625:        g_list_free(tmp_h323info->h245_list);",
          "1626:        tmp_h323info->h245_list = NULL;",
          "1627:        g_free(tmp_listinfo->prot_info);",
          "1629:        break;",
          "1630:       }",
          "1631:      }",
          "",
          "[Removed Lines]",
          "1628:        tapinfo->callsinfo_list = g_list_remove(tapinfo->callsinfo_list, tmp_listinfo);",
          "",
          "[Added Lines]",
          "1630:        g_queue_unlink(tapinfo->callsinfos, list);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1657:  } else if (h245_labels.frame_num == q931_frame_num) {",
          "1661:   while (list)",
          "1662:   {",
          "1663:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "1660:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1662:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1688:   comment = NULL;",
          "1689:   callsinfo = NULL;",
          "1691:   while (list)",
          "1692:   {",
          "1693:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "1690:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1692:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1723:    tmp_actrace_isdn_info->trunk=actrace_trunk;",
          "1724:    callsinfo->npackets = 0;",
          "1725:    callsinfo->call_num = tapinfo->ncalls++;",
          "1727:   }",
          "1729:   callsinfo->stop_fd = pinfo->fd;",
          "",
          "[Removed Lines]",
          "1726:    tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "1728:    g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1793:  if(have_q931_tap_listener==FALSE)",
          "1794:  {",
          "1796:    NULL,",
          "1797:    0,",
          "1798:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "1795:   error_string = register_tap_listener(\"q931\", &(the_tapinfo_struct.q931_dummy),",
          "",
          "[Added Lines]",
          "1797:   error_string = register_tap_listener(\"q931\", &(voip_calls_get_info()->q931_dummy),",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1815: void",
          "1816: remove_tap_listener_q931_calls(void)",
          "1817: {",
          "1820:  have_q931_tap_listener=FALSE;",
          "1821: }",
          "",
          "[Removed Lines]",
          "1818:  remove_tap_listener(&(the_tapinfo_struct.q931_dummy));",
          "",
          "[Added Lines]",
          "1820:  remove_tap_listener(&(voip_calls_get_info()->q931_dummy));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1857: static int",
          "1858: H225calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *H225info)",
          "1859: {",
          "1861:  voip_calls_info_t *tmp_listinfo;",
          "1862:  voip_calls_info_t *callsinfo = NULL;",
          "1863:  h323_calls_info_t *tmp_h323info = NULL;",
          "",
          "[Removed Lines]",
          "1860:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "1862:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1880:   if (!pi->request_available) return 0;",
          "1884:   while (list)",
          "1885:   {",
          "1886:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "1883:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1885:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1896:   }",
          "1897:  } else {",
          "1900:   while (list)",
          "1901:   {",
          "1902:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "1899:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "1901:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1948:   callsinfo->call_num = tapinfo->ncalls++;",
          "1949:   callsinfo->npackets = 0;",
          "1952:  }",
          "1954:  h225_frame_num = pinfo->fd->num;",
          "",
          "[Removed Lines]",
          "1951:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "1953:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2085:  if(have_H225_tap_listener==FALSE)",
          "2086:  {",
          "2089:    0,",
          "2090:    voip_calls_dlg_reset,",
          "2091:    H225calls_packet,",
          "",
          "[Removed Lines]",
          "2088:   error_string = register_tap_listener(\"h225\", &(the_tapinfo_struct.h225_dummy), NULL,",
          "",
          "[Added Lines]",
          "2090:   error_string = register_tap_listener(\"h225\", &(voip_calls_get_info()->h225_dummy), NULL,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2106: void",
          "2107: remove_tap_listener_h225_calls(void)",
          "2108: {",
          "2111:  have_H225_tap_listener=FALSE;",
          "2112: }",
          "",
          "[Removed Lines]",
          "2109:  remove_tap_listener(&(the_tapinfo_struct.h225_dummy));",
          "",
          "[Added Lines]",
          "2111:  remove_tap_listener(&(voip_calls_get_info()->h225_dummy));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2119:  if (new_frame_num != h245_labels.frame_num) return;",
          "2121:  for (n=0; n<h245_labels.labels_count; n++) {",
          "2123:   g_free(h245_labels.labels[n].frame_label);",
          "2124:   h245_labels.labels[n].frame_label = NULL;",
          "2125:   g_free(h245_labels.labels[n].comment);",
          "",
          "[Removed Lines]",
          "2122:   append_to_frame_graph(&the_tapinfo_struct, new_frame_num, h245_labels.labels[n].frame_label, h245_labels.labels[n].comment);",
          "",
          "[Added Lines]",
          "2124:   append_to_frame_graph(voip_calls_get_info(), new_frame_num, h245_labels.labels[n].frame_label, h245_labels.labels[n].comment);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2165: static int",
          "2166: H245dgcalls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *H245info)",
          "2167: {",
          "2169:  voip_calls_info_t *tmp_listinfo;",
          "2170:  voip_calls_info_t *callsinfo = NULL;",
          "2171:  h323_calls_info_t *tmp_h323info;",
          "",
          "[Removed Lines]",
          "2168:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "2170:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2176:  const h245_packet_info *pi = (const h245_packet_info *)H245info;",
          "2180:  while (list)",
          "2181:  {",
          "2182:   tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "2179:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "2181:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2241:  if(have_H245dg_tap_listener==FALSE)",
          "2242:  {",
          "2245:    0,",
          "2246:    voip_calls_dlg_reset,",
          "2247:    H245dgcalls_packet,",
          "",
          "[Removed Lines]",
          "2244:   error_string = register_tap_listener(\"h245dg\", &(the_tapinfo_struct.h245dg_dummy), NULL,",
          "",
          "[Added Lines]",
          "2246:   error_string = register_tap_listener(\"h245dg\", &(voip_calls_get_info()->h245dg_dummy), NULL,",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2262: void",
          "2263: remove_tap_listener_h245dg_calls(void)",
          "2264: {",
          "2267:  have_H245dg_tap_listener=FALSE;",
          "2268: }",
          "",
          "[Removed Lines]",
          "2265:  remove_tap_listener(&(the_tapinfo_struct.h245dg_dummy));",
          "",
          "[Added Lines]",
          "2267:  remove_tap_listener(&(voip_calls_get_info()->h245dg_dummy));",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2274: static int",
          "2275: SDPcalls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *SDPinfo)",
          "2276: {",
          "2278:  const sdp_packet_info *pi = (const sdp_packet_info *)SDPinfo;",
          "",
          "[Removed Lines]",
          "2277:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "2279:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2306:  if(have_sdp_tap_listener==FALSE)",
          "2307:  {",
          "2310:    0,",
          "2311:    voip_calls_dlg_reset,",
          "2312:    SDPcalls_packet,",
          "",
          "[Removed Lines]",
          "2309:   error_string = register_tap_listener(\"sdp\", &(the_tapinfo_struct.sdp_dummy), NULL,",
          "",
          "[Added Lines]",
          "2311:   error_string = register_tap_listener(\"sdp\", &(voip_calls_get_info()->sdp_dummy), NULL,",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2327: void",
          "2328: remove_tap_listener_sdp_calls(void)",
          "2329: {",
          "2332:  have_sdp_tap_listener=FALSE;",
          "2333: }",
          "",
          "[Removed Lines]",
          "2330:  remove_tap_listener(&(the_tapinfo_struct.sdp_dummy));",
          "",
          "[Added Lines]",
          "2332:  remove_tap_listener(&(voip_calls_get_info()->sdp_dummy));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2448: static int",
          "2449: MGCPcalls_packet( void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *MGCPinfo)",
          "2450: {",
          "2453:  voip_calls_info_t *tmp_listinfo;",
          "2454:  voip_calls_info_t *callsinfo = NULL;",
          "",
          "[Removed Lines]",
          "2451:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "2453:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2468:  if ((pi->mgcp_type == MGCP_REQUEST) && !pi->is_duplicate ) {",
          "2471:   while (list)",
          "2472:   {",
          "2473:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "2470:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "2472:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2513:    ((pi->mgcp_type == MGCP_REQUEST) && pi->is_duplicate) ) {",
          "2517:   while (listGraph)",
          "2518:   {",
          "2519:    gai = (seq_analysis_item_t *)listGraph->data;",
          "2520:    if (gai->fd->num == pi->req_num) {",
          "2523:     while (list)",
          "2524:     {",
          "2525:      tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "2516:   listGraph = g_list_first(tapinfo->graph_analysis->list);",
          "2522:     list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "2518:   listGraph = g_queue_peek_nth_link(tapinfo->graph_analysis->items, 0);",
          "2524:     list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2564:   tmp_mgcpinfo->fromEndpoint = fromEndpoint;",
          "2565:   callsinfo->npackets = 0;",
          "2566:   callsinfo->call_num = tapinfo->ncalls++;",
          "2568:  }",
          "2570:  g_assert(tmp_mgcpinfo != NULL);",
          "",
          "[Removed Lines]",
          "2567:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "2569:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2688:   error_string = register_tap_listener(\"mgcp\",",
          "2690:    NULL,",
          "2691:    TL_REQUIRES_PROTO_TREE,",
          "2692:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "2689:    &(the_tapinfo_struct.mgcp_dummy),",
          "",
          "[Added Lines]",
          "2691:    &(voip_calls_get_info()->mgcp_dummy),",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2707: void",
          "2708: remove_tap_listener_mgcp_calls(void)",
          "2709: {",
          "2712:  have_MGCP_tap_listener=FALSE;",
          "2713: }",
          "",
          "[Removed Lines]",
          "2710:  remove_tap_listener(&(the_tapinfo_struct.mgcp_dummy));",
          "",
          "[Added Lines]",
          "2712:  remove_tap_listener(&(voip_calls_get_info()->mgcp_dummy));",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2721: static int",
          "2722: ACTRACEcalls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *ACTRACEinfo)",
          "2723: {",
          "2725:  const actrace_info_t *pi = (const actrace_info_t *)ACTRACEinfo;",
          "2726:  GList *list;",
          "2727:  actrace_cas_calls_info_t *tmp_actrace_cas_info;",
          "",
          "[Removed Lines]",
          "2724:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "2726:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2738:   gchar *comment = NULL;",
          "2740:   callsinfo = NULL;",
          "2742:   while (list)",
          "2743:   {",
          "2744:    tmp_listinfo=(voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "2741:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "2743:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2775:    tmp_actrace_cas_info->trunk=actrace_trunk;",
          "2776:    callsinfo->npackets = 0;",
          "2777:    callsinfo->call_num = tapinfo->ncalls++;",
          "2779:   }",
          "2781:   callsinfo->stop_fd = pinfo->fd;",
          "",
          "[Removed Lines]",
          "2778:    tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "2780:    g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2813:  if(have_actrace_tap_listener==FALSE)",
          "2814:  {",
          "2817:    0,",
          "2818:    voip_calls_dlg_reset,",
          "2819:    ACTRACEcalls_packet,",
          "",
          "[Removed Lines]",
          "2816:   error_string = register_tap_listener(\"actrace\", &(the_tapinfo_struct.actrace_dummy), NULL,",
          "",
          "[Added Lines]",
          "2818:   error_string = register_tap_listener(\"actrace\", &(voip_calls_get_info()->actrace_dummy), NULL,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2834: void",
          "2835: remove_tap_listener_actrace_calls(void)",
          "2836: {",
          "2839:  have_actrace_tap_listener=FALSE;",
          "2840: }",
          "",
          "[Removed Lines]",
          "2837:  remove_tap_listener(&(the_tapinfo_struct.actrace_dummy));",
          "",
          "[Added Lines]",
          "2839:  remove_tap_listener(&(voip_calls_get_info()->actrace_dummy));",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2852:        type == GCP_CMD_CTX_ATTR_AUDIT_REQ )",
          "2854: static int h248_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *prot_info) {",
          "2856:  const gcp_cmd_t *cmd = (const gcp_cmd_t *)prot_info;",
          "2857:  GList *list;",
          "2858:  voip_calls_info_t *callsinfo = NULL;",
          "",
          "[Removed Lines]",
          "2855:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "2857:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2875:  address_to_str_buf(mgw, mgw_addr, 128);",
          "2879:  while (list)",
          "2880:  {",
          "2881:   voip_calls_info_t* tmp_listinfo = (voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "2878:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "2880:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2913:   callsinfo->selected = FALSE;",
          "2917:  } else {",
          "2918:   GString *s = g_string_new(\"\");",
          "",
          "[Removed Lines]",
          "2915:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "2917:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2958:  if(have_megaco_tap_listener==FALSE)",
          "2959:  {",
          "2961:    NULL,",
          "2962:    0,",
          "2963:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "2960:   error_string = register_tap_listener(\"megaco\", &(the_tapinfo_struct.megaco_dummy),",
          "",
          "[Added Lines]",
          "2962:   error_string = register_tap_listener(\"megaco\", &(voip_calls_get_info()->megaco_dummy),",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2977:  if(have_h248_tap_listener==FALSE)",
          "2978:  {",
          "2980:    NULL,",
          "2981:    0,",
          "2982:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "2979:   error_string = register_tap_listener(\"h248\", &(the_tapinfo_struct.h248_dummy),",
          "",
          "[Added Lines]",
          "2981:   error_string = register_tap_listener(\"h248\", &(voip_calls_get_info()->h248_dummy),",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2997: void",
          "2998: remove_tap_listener_h248_calls(void)",
          "2999: {",
          "3003:  have_megaco_tap_listener=FALSE;",
          "3004:  have_h248_tap_listener=FALSE;",
          "",
          "[Removed Lines]",
          "3000:  remove_tap_listener(&(the_tapinfo_struct.h248_dummy));",
          "3001:  remove_tap_listener(&(the_tapinfo_struct.megaco_dummy));",
          "",
          "[Added Lines]",
          "3002:  remove_tap_listener(&(voip_calls_get_info()->h248_dummy));",
          "3003:  remove_tap_listener(&(voip_calls_get_info()->megaco_dummy));",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3021: const value_string* sccp_payload_values;",
          "3023: static int sccp_calls(packet_info *pinfo, const void *prot_info) {",
          "3025:  const sccp_msg_info_t* msg = (const sccp_msg_info_t *)prot_info;",
          "3026:  sccp_assoc_info_t* assoc = msg->data.co.assoc;",
          "3027:  GList *list;",
          "",
          "[Removed Lines]",
          "3024:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "3026:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3030:  const gchar *comment = NULL;",
          "3034:   if ( ((voip_calls_info_t*)(list->data))->prot_info == assoc ) {",
          "3035:     callsinfo = (voip_calls_info_t*)(list->data);",
          "3036:     break;",
          "",
          "[Removed Lines]",
          "3033:  for(list = g_list_first(tapinfo->callsinfo_list) ; list ; list = g_list_next (list) ) {",
          "",
          "[Added Lines]",
          "3035:  for(list = g_queue_peek_nth_link(tapinfo->callsinfos, 0) ; list ; list = g_list_next (list) ) {",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3070:   callsinfo->selected = FALSE;",
          "3071:   callsinfo->call_num = tapinfo->ncalls++;",
          "3074:  } else {",
          "3076:   if ( assoc->calling_party ) {",
          "",
          "[Removed Lines]",
          "3073:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "3075:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3142:  if(have_sccp_tap_listener==FALSE)",
          "3143:  {",
          "3145:    NULL,",
          "3146:    0,",
          "3147:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "3144:   error_string = register_tap_listener(\"sccp\", &(the_tapinfo_struct.sccp_dummy),",
          "",
          "[Added Lines]",
          "3146:   error_string = register_tap_listener(\"sccp\", &(voip_calls_get_info()->sccp_dummy),",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3161:  if(have_sua_tap_listener==FALSE)",
          "3162:  {",
          "3164:    NULL,",
          "3165:    0,",
          "3166:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "3163:   error_string = register_tap_listener(\"sua\", &(the_tapinfo_struct.sua_dummy),",
          "",
          "[Added Lines]",
          "3165:   error_string = register_tap_listener(\"sua\", &(voip_calls_get_info()->sua_dummy),",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3182: void",
          "3183: remove_tap_listener_sccp_calls(void)",
          "3184: {",
          "3187:  have_sccp_tap_listener=FALSE;",
          "3188:  have_sua_tap_listener=FALSE;",
          "",
          "[Removed Lines]",
          "3185:  remove_tap_listener(&(the_tapinfo_struct.sccp_dummy));",
          "",
          "[Added Lines]",
          "3187:  remove_tap_listener(&(voip_calls_get_info()->sccp_dummy));",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3196: static int",
          "3197: unistim_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *unistim_info)",
          "3198: {",
          "3200:  voip_calls_info_t *tmp_listinfo;",
          "3201:  voip_calls_info_t *callsinfo = NULL;",
          "3202:  unistim_info_t *tmp_unistim_info = NULL;",
          "",
          "[Removed Lines]",
          "3199:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "3201:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3212:  g_tmp = g_string_new(NULL);",
          "3217:  while(list)",
          "3218:  {",
          "",
          "[Removed Lines]",
          "3215:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "3217:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3308:     callsinfo->free_prot_info = g_free;",
          "3309:     callsinfo->npackets = 0;",
          "3310:     callsinfo->call_num = tapinfo->ncalls++;",
          "3313:    } else {",
          "",
          "[Removed Lines]",
          "3311:     tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "3313:     g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3564:    callsinfo->free_prot_info = g_free;",
          "3565:    callsinfo->npackets = 0;",
          "3566:    callsinfo->call_num = tapinfo->ncalls++;",
          "",
          "[Removed Lines]",
          "3567:    tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "3569:    g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3670:  if(have_unistim_tap_listener==FALSE) {",
          "3673:    NULL,",
          "3674:    0,",
          "3675:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "3672:   error_string = register_tap_listener(\"unistim\", &(the_tapinfo_struct.unistim_dummy),",
          "",
          "[Added Lines]",
          "3674:   error_string = register_tap_listener(\"unistim\", &(voip_calls_get_info()->unistim_dummy),",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3692: void",
          "3693: remove_tap_listener_unistim_calls(void)",
          "3694: {",
          "3697:  have_unistim_tap_listener=FALSE;",
          "3698: }",
          "",
          "[Removed Lines]",
          "3695:  remove_tap_listener(&(the_tapinfo_struct.unistim_dummy));",
          "",
          "[Added Lines]",
          "3697:  remove_tap_listener(&(voip_calls_get_info()->unistim_dummy));",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3723: static int",
          "3724: skinny_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *skinny_info)",
          "3725: {",
          "3727:  GList* list;",
          "3728:  voip_calls_info_t *callsinfo = NULL;",
          "3729:  address* phone;",
          "",
          "[Removed Lines]",
          "3726:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "3728:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3734:  if (si == NULL || (si->callId == 0 && si->passThruId == 0))",
          "3735:   return 0;",
          "3738:  while (list)",
          "3739:  {",
          "3740:   voip_calls_info_t* tmp_listinfo = (voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "3737:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "3739:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3777:   callsinfo->stop_rel_ts = pinfo->rel_ts;",
          "3779:   callsinfo->selected = FALSE;",
          "3781:  } else {",
          "3782:   if (si->callingParty) {",
          "3783:    g_free(callsinfo->from_identity);",
          "",
          "[Removed Lines]",
          "3780:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "3782:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3837:   error_string = register_tap_listener(\"skinny\",",
          "3839:    NULL,",
          "3840:    TL_REQUIRES_PROTO_TREE,",
          "3841:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "3838:    &(the_tapinfo_struct.skinny_dummy),",
          "",
          "[Added Lines]",
          "3840:    &(voip_calls_get_info()->skinny_dummy),",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3856: void",
          "3857: remove_tap_listener_skinny_calls(void)",
          "3858: {",
          "3861:  have_skinny_tap_listener=FALSE;",
          "3862: }",
          "",
          "[Removed Lines]",
          "3859:  remove_tap_listener(&(the_tapinfo_struct.skinny_dummy));",
          "",
          "[Added Lines]",
          "3861:  remove_tap_listener(&(voip_calls_get_info()->skinny_dummy));",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3877: static int",
          "3878: iax2_calls_packet( void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *iax2_info)",
          "3879: {",
          "3881:  GList* list;",
          "3882:  voip_calls_info_t *callsinfo = NULL;",
          "3883:  address* phone;",
          "",
          "[Removed Lines]",
          "3880:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "3882:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3887:  if (ii == NULL || ii->ptype != IAX2_FULL_PACKET || (ii->scallno == 0 && ii->dcallno == 0))",
          "3888:   return 0;",
          "3891:  while (list)",
          "3892:  {",
          "3893:   voip_calls_info_t* tmp_listinfo = (voip_calls_info_t *)list->data;",
          "",
          "[Removed Lines]",
          "3890:  list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "3892:  list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3933:   callsinfo->stop_rel_ts = pinfo->rel_ts;",
          "3935:   callsinfo->selected = FALSE;",
          "3938:  } else {",
          "3939:   callsinfo->call_state = ii->callState;",
          "",
          "[Removed Lines]",
          "3936:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "3938:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3976:   error_string = register_tap_listener(\"IAX2\",",
          "3978:    NULL,",
          "3979:    TL_REQUIRES_PROTO_TREE,",
          "3980:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "3977:    &(the_tapinfo_struct.iax2_dummy),",
          "",
          "[Added Lines]",
          "3979:    &(voip_calls_get_info()->iax2_dummy),",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3995: void",
          "3996: remove_tap_listener_iax2_calls(void)",
          "3997: {",
          "4000:  have_iax2_tap_listener=FALSE;",
          "4001: }",
          "",
          "[Removed Lines]",
          "3998:  remove_tap_listener(&(the_tapinfo_struct.iax2_dummy));",
          "",
          "[Added Lines]",
          "4000:  remove_tap_listener(&(voip_calls_get_info()->iax2_dummy));",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4007: static int",
          "4008: VoIPcalls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *VoIPinfo)",
          "4009: {",
          "4011:  voip_calls_info_t *callsinfo = NULL;",
          "4012:  voip_calls_info_t *tmp_listinfo;",
          "4013:  GList *list = NULL;",
          "4014:  const voip_packet_info_t *pi = (const voip_packet_info_t *)VoIPinfo;",
          "4016:  if (pi->call_id)",
          "4018:  while (list) {",
          "4019:   tmp_listinfo = (voip_calls_info_t *)list->data;",
          "4020:   if ( tmp_listinfo->protocol == VOIP_COMMON ) {",
          "",
          "[Removed Lines]",
          "4010:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "4017:   list = g_list_first(tapinfo->callsinfo_list);",
          "",
          "[Added Lines]",
          "4012:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "4019:   list = g_queue_peek_nth_link(tapinfo->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "4046:   callsinfo->call_num = tapinfo->ncalls++;",
          "4047:   callsinfo->npackets = 0;",
          "4050:  }",
          "4052:  callsinfo->call_active_state = pi->call_active_state;",
          "",
          "[Removed Lines]",
          "4049:   tapinfo->callsinfo_list = g_list_prepend(tapinfo->callsinfo_list, callsinfo);",
          "",
          "[Added Lines]",
          "4051:   g_queue_push_tail(tapinfo->callsinfos, callsinfo);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "4081:  if(have_voip_tap_listener==FALSE)",
          "4082:  {",
          "4084:    NULL,",
          "4085:    0,",
          "4086:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "4083:   error_string = register_tap_listener(\"voip\", &(the_tapinfo_struct.voip_dummy),",
          "",
          "[Added Lines]",
          "4085:   error_string = register_tap_listener(\"voip\", &(voip_calls_get_info()->voip_dummy),",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4101: void",
          "4102: remove_tap_listener_voip_calls(void)",
          "4103: {",
          "4106:  have_voip_tap_listener=FALSE;",
          "4107: }",
          "",
          "[Removed Lines]",
          "4104:  remove_tap_listener(&(the_tapinfo_struct.voip_dummy));",
          "",
          "[Added Lines]",
          "4106:  remove_tap_listener(&(voip_calls_get_info()->voip_dummy));",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4129: static int",
          "4130: prot_calls_packet(void *ptr _U_, packet_info *pinfo, epan_dissect_t *edt _U_, const void *prot_info _U_)",
          "4131: {",
          "4133:  if (callsinfo!=NULL) {",
          "4134:   callsinfo->stop_abs = pinfo->fd->abs_ts;",
          "4135:   callsinfo->stop_rel = pinfo->rel_ts;",
          "",
          "[Removed Lines]",
          "4132:  voip_calls_tapinfo_t *tapinfo = &the_tapinfo_struct;",
          "",
          "[Added Lines]",
          "4134:  voip_calls_tapinfo_t *tapinfo = voip_calls_get_info();",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4155:  if(have_prot__tap_listener==FALSE)",
          "4156:  {",
          "4158:    NULL,",
          "4159:    0,",
          "4160:    voip_calls_dlg_reset,",
          "",
          "[Removed Lines]",
          "4157:   error_string = register_tap_listener(\"prot_\", &(the_tapinfo_struct.prot__dummy),",
          "",
          "[Added Lines]",
          "4159:   error_string = register_tap_listener(\"prot_\", &(voip_calls_get_info()->prot__dummy),",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "4177: void",
          "4178: remove_tap_listener_prot__calls(void)",
          "4179: {",
          "4182:  have_prot__tap_listener=FALSE;",
          "4183: }",
          "",
          "[Removed Lines]",
          "4180:  remove_tap_listener(&(the_tapinfo_struct.prot__dummy));",
          "",
          "[Added Lines]",
          "4182:  remove_tap_listener(&(voip_calls_get_info()->prot__dummy));",
          "",
          "---------------"
        ],
        "ui/gtk/voip_calls.h||ui/gtk/voip_calls.h": [
          "File: ui/gtk/voip_calls.h -> ui/gtk/voip_calls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:  int completed_calls;",
          "180:  int rejected_calls;",
          "181:  seq_analysis_info_t* graph_analysis;",
          "183:  gboolean redraw;",
          "",
          "[Removed Lines]",
          "182:  gboolean reversed;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/gtk/voip_calls_dlg.c||ui/gtk/voip_calls_dlg.c": [
          "File: ui/gtk/voip_calls_dlg.c -> ui/gtk/voip_calls_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  g_string_append_printf(filter_string_fwd, \"(\");",
          "213:  while (lista) {",
          "214:   listinfo = (voip_calls_info_t *)lista->data;",
          "215:   if (listinfo->selected) {",
          "217:    while (listb) {",
          "218:     gai = (seq_analysis_item_t *)listb->data;",
          "219:     if (gai->conv_num == listinfo->call_num) {",
          "",
          "[Removed Lines]",
          "212:  lista = g_list_first(voip_calls_get_info()->callsinfo_list);",
          "216:    listb = g_list_first(voip_calls_get_info()->graph_analysis->list);",
          "",
          "[Added Lines]",
          "212:  lista = g_queue_peek_nth_link(voip_calls_get_info()->callsinfos, 0);",
          "216:    listb = g_queue_peek_nth_link(voip_calls_get_info()->graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:   g_string_append_printf(filter_string_fwd, \"(\");",
          "239:   is_first = TRUE;",
          "242:   while (lista) {",
          "243:    listinfo = (voip_calls_info_t *)lista->data;",
          "244:    if (listinfo->selected) {",
          "",
          "[Removed Lines]",
          "241:   lista = g_list_first(voip_calls_get_info()->callsinfo_list);",
          "",
          "[Added Lines]",
          "241:   lista = g_queue_peek_nth_link(voip_calls_get_info()->callsinfos, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316: static gint",
          "318: {",
          "322:  if(entry_a->fd->num < entry_b->fd->num)",
          "323:   return -1;",
          "",
          "[Removed Lines]",
          "317: graph_analysis_sort_compare(gconstpointer a, gconstpointer b)",
          "319:     const seq_analysis_item_t *entry_a = (const seq_analysis_item_t *)a;",
          "320:     const seq_analysis_item_t *entry_b = (const seq_analysis_item_t *)b;",
          "",
          "[Added Lines]",
          "317: graph_analysis_sort_compare(gconstpointer a, gconstpointer b, gpointer user_data _U_)",
          "319:  const seq_analysis_item_t *entry_a = (const seq_analysis_item_t *)a;",
          "320:  const seq_analysis_item_t *entry_b = (const seq_analysis_item_t *)b;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337:  GList* listb;",
          "338:  voip_calls_info_t *listinfo;",
          "349:  while (listb) {",
          "350:   gai = (seq_analysis_item_t *)listb->data;",
          "351:   gai->display = FALSE;",
          "",
          "[Removed Lines]",
          "340:  if(!voip_calls_get_info()->reversed) {",
          "341:   voip_calls_get_info()->callsinfo_list=",
          "342:    g_list_reverse(voip_calls_get_info()->callsinfo_list);",
          "343:   voip_calls_get_info()->graph_analysis->list=",
          "344:    g_list_sort(voip_calls_get_info()->graph_analysis->list, graph_analysis_sort_compare);",
          "345:   voip_calls_get_info()->reversed=1;",
          "346:  }",
          "348:  listb = g_list_first(voip_calls_get_info()->graph_analysis->list);",
          "",
          "[Added Lines]",
          "340:  g_queue_sort(voip_calls_get_info()->graph_analysis->items, graph_analysis_sort_compare, NULL);",
          "343:  listb = g_queue_peek_nth_link(voip_calls_get_info()->graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:  }",
          "357:  while (lista) {",
          "358:   listinfo = (voip_calls_info_t *)lista->data;",
          "359:   if (listinfo->selected) {",
          "361:    while (listb) {",
          "362:     gai = (seq_analysis_item_t *)listb->data;",
          "363:     if (gai->conv_num == listinfo->call_num) {",
          "",
          "[Removed Lines]",
          "356:  lista = g_list_first(voip_calls_get_info()->callsinfo_list);",
          "360:    listb = g_list_first(voip_calls_get_info()->graph_analysis->list);",
          "",
          "[Added Lines]",
          "351:  lista = g_queue_peek_nth_link(voip_calls_get_info()->callsinfos, 0);",
          "355:    listb = g_queue_peek_nth_link(voip_calls_get_info()->graph_analysis->items, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "791:   g_snprintf(label_text, sizeof(label_text),",
          "792:    \"Total: Calls: %u   Start packets: %u   Completed calls: %u   Rejected calls: %u\",",
          "794:    voip_calls_get_info()->start_packets,",
          "795:    voip_calls_get_info()->completed_calls,",
          "796:    voip_calls_get_info()->rejected_calls);",
          "",
          "[Removed Lines]",
          "793:    g_list_length(voip_calls_get_info()->callsinfo_list),",
          "",
          "[Added Lines]",
          "788:    g_queue_get_length(voip_calls_get_info()->callsinfos),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "825: voip_calls_dlg_draw(void *ptr _U_)",
          "826: {",
          "827:  if (voip_calls_get_info()->redraw) {",
          "829:   voip_calls_get_info()->redraw = FALSE;",
          "830:  }",
          "831: }",
          "",
          "[Removed Lines]",
          "828:   voip_calls_dlg_update(voip_calls_get_info()->callsinfo_list);",
          "",
          "[Added Lines]",
          "823:   voip_calls_dlg_update(g_queue_peek_nth_link(voip_calls_get_info()->callsinfos, 0));",
          "",
          "---------------"
        ],
        "ui/qt/lbm_uimflow_dialog.cpp||ui/qt/lbm_uimflow_dialog.cpp": [
          "File: ui/qt/lbm_uimflow_dialog.cpp -> ui/qt/lbm_uimflow_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     item->conv_num = (guint16)LBM_CHANNEL_ID(stream_info->channel);",
          "153:     item->display = TRUE;",
          "154:     item->line_style = 1;",
          "156:     return (TRUE);",
          "157: }",
          "",
          "[Removed Lines]",
          "155:     seq_info->list = g_list_prepend(seq_info->list, (gpointer)item);",
          "",
          "[Added Lines]",
          "155:     g_queue_push_tail(seq_info->items, item);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     register_tap_listener(\"lbm_uim\", (void *)seq_info, NULL, TL_REQUIRES_COLUMNS, NULL, lbm_uimflow_tap_packet, NULL);",
          "180:     cf_retap_packets(cfile);",
          "182:     remove_tap_listener((void *)seq_info);",
          "186:     while (list != NULL)",
          "187:     {",
          "188:         seq_analysis_item_t * seq_item = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "181:     seq_info->list = g_list_reverse(seq_info->list);",
          "185:     list = g_list_first(seq_info->list);",
          "",
          "[Added Lines]",
          "184:     list = g_queue_peek_nth_link(seq_info->items, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "506:     seq_analysis_info_t new_sa;",
          "508:     new_sa = m_sequence_analysis;",
          "510:     new_sa.ht = NULL;",
          "511:     new_sa.num_nodes = 0;",
          "512:     lbm_uimflow_get_analysis(m_capture_file, &new_sa);",
          "",
          "[Removed Lines]",
          "509:     new_sa.list = NULL;",
          "",
          "[Added Lines]",
          "508:     new_sa.items = g_queue_new();",
          "",
          "---------------"
        ],
        "ui/qt/sequence_diagram.cpp||ui/qt/sequence_diagram.cpp": [
          "File: ui/qt/sequence_diagram.cpp -> ui/qt/sequence_diagram.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     QFontMetrics com_fm(comment_axis_->tickLabelFont());",
          "107:     int elide_w = com_fm.height() * max_comment_em_width_;",
          "110:         seq_analysis_item_t *sai = (seq_analysis_item_t *) cur->data;",
          "112:         new_data.key = cur_key;",
          "",
          "[Removed Lines]",
          "109:     for (GList *cur = g_list_first(sainfo->list); cur; cur = g_list_next(cur)) {",
          "",
          "[Added Lines]",
          "109:     for (GList *cur = g_queue_peek_nth_link(sainfo->items, 0); cur; cur = g_list_next(cur)) {",
          "",
          "---------------"
        ],
        "ui/qt/sequence_dialog.cpp||ui/qt/sequence_dialog.cpp": [
          "File: ui/qt/sequence_dialog.cpp -> ui/qt/sequence_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:     seq_analysis_info_t new_sa;",
          "348:     new_sa = seq_analysis_;",
          "350:     new_sa.ht = NULL;",
          "351:     new_sa.num_nodes = 0;",
          "352:     sequence_analysis_list_get(cap_file_, &new_sa);",
          "",
          "[Removed Lines]",
          "349:     new_sa.list = NULL;",
          "",
          "[Added Lines]",
          "349:     new_sa.items = g_queue_new();",
          "",
          "---------------"
        ],
        "ui/tap-sequence-analysis.c||ui/tap-sequence-analysis.c": [
          "File: ui/tap-sequence-analysis.c -> ui/tap-sequence-analysis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         sai->conv_num=0;",
          "130:         sai->display=TRUE;",
          "133:     }",
          "135:     return TRUE;",
          "",
          "[Removed Lines]",
          "132:         sainfo->list = g_list_prepend(sainfo->list, sai);",
          "",
          "[Added Lines]",
          "132:         g_queue_push_tail(sainfo->items, sai);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         sai->conv_num = 0;",
          "196:         sai->display = TRUE;",
          "199:     }",
          "201:     return TRUE;",
          "202: }",
          "206: {",
          "208:     gchar time_str[COL_MAX_LEN];",
          "210:     if (!cf || !sainfo) return;",
          "212:     switch (sainfo->type) {",
          "",
          "[Removed Lines]",
          "198:         sainfo->list = g_list_prepend(sainfo->list, sai);",
          "204: void",
          "205: sequence_analysis_list_get(capture_file *cf, seq_analysis_info_t *sainfo)",
          "207:     GList *list;",
          "",
          "[Added Lines]",
          "198:         g_queue_push_tail(sainfo->items, sai);",
          "204: static void sequence_analysis_item_set_timestamp(gpointer data, gpointer user_data)",
          "207:     seq_analysis_item_t *seq_item = (seq_analysis_item_t *)data;",
          "208:     const struct epan_session *epan = (const struct epan_session *)user_data;",
          "209:     set_fd_time(epan, seq_item->fd, time_str);",
          "210:     seq_item->time_str = g_strdup(time_str);",
          "211: }",
          "213: void",
          "214: sequence_analysis_list_get(capture_file *cf, seq_analysis_info_t *sainfo)",
          "215: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:     }",
          "236:     cf_retap_packets(cf);",
          "238:     remove_tap_listener(sainfo);",
          "249: }",
          "251: void",
          "252: sequence_analysis_list_free(seq_analysis_info_t *sainfo)",
          "253: {",
          "255:     int i;",
          "257:     if (!sainfo) return;",
          "272:     sainfo->nconv = 0;",
          "274:     for (i=0; i<MAX_NUM_NODES; i++) {",
          "275:         sainfo->nodes[i].type = AT_NONE;",
          "",
          "[Removed Lines]",
          "237:     sainfo->list = g_list_reverse(sainfo->list);",
          "241:     list = g_list_first(sainfo->list);",
          "242:     while (list)",
          "243:     {",
          "244:         seq_analysis_item_t *seq_item = (seq_analysis_item_t *)list->data;",
          "245:         set_fd_time(cf->epan, seq_item->fd, time_str);",
          "246:         seq_item->time_str = g_strdup(time_str);",
          "247:         list = g_list_next(list);",
          "248:     }",
          "254:     GList *list;",
          "260:     list = g_list_first(sainfo->list);",
          "261:     while (list)",
          "262:     {",
          "263:         seq_analysis_item_t *seq_item = (seq_analysis_item_t *)list->data;",
          "264:         g_free(seq_item->frame_label);",
          "265:         g_free(seq_item->time_str);",
          "266:         g_free(seq_item->comment);",
          "267:         g_free(list->data);",
          "268:         list = g_list_next(list);",
          "269:     }",
          "270:     g_list_free(sainfo->list);",
          "271:     sainfo->list = NULL;",
          "",
          "[Added Lines]",
          "246:     g_queue_foreach(sainfo->items, sequence_analysis_item_set_timestamp, cf->epan);",
          "247: }",
          "250: static void sequence_analysis_item_free(gpointer data)",
          "251: {",
          "252:     seq_analysis_item_t *seq_item = (seq_analysis_item_t *)data;",
          "253:     g_free(seq_item->frame_label);",
          "254:     g_free(seq_item->time_str);",
          "255:     g_free(seq_item->comment);",
          "266:     g_queue_free_full(sainfo->items, sequence_analysis_item_free);",
          "268:     sainfo->items = NULL;",
          "270:     sainfo->items = g_queue_new();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:     }",
          "363: }",
          "367: int",
          "368: sequence_analysis_get_nodes(seq_analysis_info_t *sainfo)",
          "369: {",
          "396: }",
          "",
          "[Removed Lines]",
          "370:     GList *list;",
          "371:     seq_analysis_item_t *gai;",
          "372:     int num_items = 0;",
          "375:     list = g_list_first(sainfo->list);",
          "376:     while (list)",
          "377:     {",
          "378:         gai = (seq_analysis_item_t *)list->data;",
          "379:         if (gai->display) {",
          "380:             num_items++;",
          "382:             if (!user_data->dlg.inverse) {",
          "383: #endif",
          "384:                 gai->src_node = (guint16)add_or_get_node(sainfo, &(gai->src_addr));",
          "385:                 gai->dst_node = (guint16)add_or_get_node(sainfo, &(gai->dst_addr));",
          "387:             } else {",
          "388:                 gai->dst_node = (guint16)add_or_get_node(sainfo, &(gai->src_addr));",
          "389:                 gai->src_node = (guint16)add_or_get_node(sainfo, &(gai->dst_addr));",
          "390:             }",
          "391: #endif",
          "392:         }",
          "393:         list = g_list_next(list);",
          "394:     }",
          "395:     return num_items;",
          "",
          "[Added Lines]",
          "363: struct sainfo_counter {",
          "364:     seq_analysis_info_t *sainfo;",
          "365:     int num_items;",
          "366: };",
          "368: static void sequence_analysis_get_nodes_item_proc(gpointer data, gpointer user_data)",
          "369: {",
          "370:     seq_analysis_item_t *gai = (seq_analysis_item_t *)data;",
          "371:     struct sainfo_counter *sc = (struct sainfo_counter *)user_data;",
          "372:     if (gai->display) {",
          "373:         (sc->num_items)++;",
          "374:         gai->src_node = (guint16)add_or_get_node(sc->sainfo, &(gai->src_addr));",
          "375:         gai->dst_node = (guint16)add_or_get_node(sc->sainfo, &(gai->dst_addr));",
          "376:     }",
          "377: }",
          "384:     struct sainfo_counter sc = {sainfo, 0};",
          "387:     g_queue_foreach(sainfo->items, sequence_analysis_get_nodes_item_proc, &sc);",
          "389:     return sc.num_items;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "428:     tmp_str2       = g_string_new(\"\");",
          "430:     display_items = 0;",
          "432:     while (list)",
          "433:     {",
          "434:         sai = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "431:     list = g_list_first(sainfo->list);",
          "",
          "[Added Lines]",
          "425:     list = g_queue_peek_nth_link(sainfo->items, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "513:     while (list)",
          "514:     {",
          "515:         sai = (seq_analysis_item_t *)list->data;",
          "",
          "[Removed Lines]",
          "512:     list = g_list_first(sainfo->list);",
          "",
          "[Added Lines]",
          "506:     list = g_queue_peek_nth_link(sainfo->items, 0);",
          "",
          "---------------"
        ],
        "ui/tap-sequence-analysis.h||ui/tap-sequence-analysis.h": [
          "File: ui/tap-sequence-analysis.h -> ui/tap-sequence-analysis.h"
        ]
      }
    },
    {
      "candidate_hash": "7221215cdca74a587615e4e1ab9d79540bf58043",
      "candidate_info": {
        "commit_hash": "7221215cdca74a587615e4e1ab9d79540bf58043",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7221215cdca74a587615e4e1ab9d79540bf58043",
        "files": [
          "asn1/h245/packet-h245-template.c",
          "epan/dissectors/packet-ansi_a.c",
          "epan/dissectors/packet-gsm_a_bssmap.c",
          "epan/dissectors/packet-h245.c",
          "epan/dissectors/packet-rtp.c",
          "epan/dissectors/packet-sdp.c",
          "epan/dissectors/packet-skinny.c",
          "epan/dissectors/packet-uma.c"
        ],
        "message": "Add \"rtp handle protection\" inside srtp_add_address/rtp_add_address/bluetooth_add_address so dissectors calling it don't need to find \"rtp\" just for the handle check.\n\nsvn path=/trunk/; revision=53288",
        "before_after_code_files": [
          "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
          "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c",
          "epan/dissectors/packet-gsm_a_bssmap.c||epan/dissectors/packet-gsm_a_bssmap.c",
          "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c",
          "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
          "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c",
          "epan/dissectors/packet-skinny.c||epan/dissectors/packet-skinny.c",
          "epan/dissectors/packet-uma.c||epan/dissectors/packet-uma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
            "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c",
            "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c",
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
            "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
          ],
          "candidate": [
            "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
            "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c",
            "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c",
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
            "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c": [
          "File: asn1/h245/packet-h245-template.c -> asn1/h245/packet-h245-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #define PSNAME \"H.245\"",
          "61: #define PFNAME \"h245\"",
          "64: static dissector_handle_t rtcp_handle=NULL;",
          "65: static dissector_table_t nsp_object_dissector_table;",
          "66: static dissector_table_t nsp_h221_dissector_table;",
          "",
          "[Removed Lines]",
          "63: static dissector_handle_t rtp_handle=NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:   srtp_add_address(pinfo, &upcoming_channel_lcl->media_addr.addr,",
          "375:       upcoming_channel_lcl->media_addr.port, 0,",
          "376:       \"H245\", pinfo->fd->num, upcoming_channel_lcl->is_video , rtp_dyn_payload, dummy_srtp_info);",
          "",
          "[Removed Lines]",
          "373:  if (upcoming_channel_lcl->media_addr.addr.type!=AT_NONE && upcoming_channel_lcl->media_addr.port!=0 && rtp_handle) {",
          "",
          "[Added Lines]",
          "373:  if (upcoming_channel_lcl->media_addr.addr.type!=AT_NONE && upcoming_channel_lcl->media_addr.port!=0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576: void proto_reg_handoff_h245(void) {",
          "577:  dissector_handle_t h245_handle;",
          "580:  rtcp_handle = find_dissector(\"rtcp\");",
          "581:  data_handle = find_dissector(\"data\");",
          "582:  h263_handle = find_dissector(\"h263data\");",
          "",
          "[Removed Lines]",
          "579:  rtp_handle = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c": [
          "File: epan/dissectors/packet-ansi_a.c -> epan/dissectors/packet-ansi_a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "720: static expert_field ei_ansi_a_extraneous_data = EI_INIT;",
          "722: static char a_bigbuf[1024];",
          "724: static dissector_handle_t data_handle;",
          "725: static dissector_handle_t dtap_handle;",
          "",
          "[Removed Lines]",
          "723: static dissector_handle_t rtp_handle=NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8420:         proto_item_set_len(item, curr_offset - orig_offset);",
          "8424:             (first_assigned_found == FALSE))",
          "8425:         {",
          "8426:             key  = wmem_new(wmem_file_scope(), gint);",
          "",
          "[Removed Lines]",
          "8422:         if (rtp_handle &&",
          "8423:             format_assigned &&",
          "",
          "[Added Lines]",
          "8421:         if (format_assigned &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12413:         dtap_handle = create_dissector_handle(dissect_dtap, proto_a_dtap);",
          "12414:         sip_dtap_bsmap_handle = create_dissector_handle(dissect_sip_dtap_bsmap, proto_a_dtap);",
          "12415:         data_handle = find_dissector(\"data\");",
          "12418:         dissector_add_uint(\"bsap.pdu_type\",  BSSAP_PDU_TYPE_BSMAP, bsmap_handle);",
          "12419:         dissector_add_uint(\"bsap.pdu_type\",  BSSAP_PDU_TYPE_DTAP, dtap_handle);",
          "",
          "[Removed Lines]",
          "12416:         rtp_handle = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_a_bssmap.c||epan/dissectors/packet-gsm_a_bssmap.c": [
          "File: epan/dissectors/packet-gsm_a_bssmap.c -> epan/dissectors/packet-gsm_a_bssmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664: static dissector_handle_t dtap_handle;",
          "665: static dissector_handle_t bssgp_handle;",
          "666: static dissector_handle_t rrc_handle;",
          "669: static proto_tree *g_tree;",
          "",
          "[Removed Lines]",
          "667: static dissector_handle_t rtp_handle;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3871:         break;",
          "3872:     }",
          "3875:         rtp_add_address(pinfo, &rtp_dst_addr, rtp_port, 0, \"BSS MAP\", pinfo->fd->num, FALSE, 0);",
          "3876:   rtcp_add_address(pinfo, &rtp_dst_addr, rtp_port+1, 0, \"BSS MAP\", pinfo->fd->num);",
          "3877:     }",
          "",
          "[Removed Lines]",
          "3874:     if ((!pinfo->fd->flags.visited) && rtp_port != 0 && rtp_handle) {",
          "",
          "[Added Lines]",
          "3873:     if ((!pinfo->fd->flags.visited) && rtp_port != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8139:     gsm_bsslap_handle = find_dissector(\"gsm_bsslap\");",
          "8140:     bssgp_handle      = find_dissector (\"bssgp\");",
          "8141:     rrc_handle        = find_dissector (\"rrc\");",
          "8144: }",
          "",
          "[Removed Lines]",
          "8142:     rtp_handle        = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c": [
          "File: epan/dissectors/packet-h245.c -> epan/dissectors/packet-h245.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #define PSNAME \"H.245\"",
          "69: #define PFNAME \"h245\"",
          "72: static dissector_handle_t rtcp_handle=NULL;",
          "73: static dissector_table_t nsp_object_dissector_table;",
          "74: static dissector_table_t nsp_h221_dissector_table;",
          "",
          "[Removed Lines]",
          "71: static dissector_handle_t rtp_handle=NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:   srtp_add_address(pinfo, &upcoming_channel_lcl->media_addr.addr,",
          "506:       upcoming_channel_lcl->media_addr.port, 0,",
          "507:       \"H245\", pinfo->fd->num, upcoming_channel_lcl->is_video , rtp_dyn_payload, dummy_srtp_info);",
          "",
          "[Removed Lines]",
          "504:  if (upcoming_channel_lcl->media_addr.addr.type!=AT_NONE && upcoming_channel_lcl->media_addr.port!=0 && rtp_handle) {",
          "",
          "[Added Lines]",
          "504:  if (upcoming_channel_lcl->media_addr.addr.type!=AT_NONE && upcoming_channel_lcl->media_addr.port!=0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "20777: void proto_reg_handoff_h245(void) {",
          "20778:  dissector_handle_t h245_handle;",
          "20781:  rtcp_handle = find_dissector(\"rtcp\");",
          "20782:  data_handle = find_dissector(\"data\");",
          "20783:  h263_handle = find_dissector(\"h263data\");",
          "",
          "[Removed Lines]",
          "20780:  rtp_handle = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c": [
          "File: epan/dissectors/packet-rtp.c -> epan/dissectors/packet-rtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:  {",
          "834:   return;",
          "835:  }",
          "",
          "[Removed Lines]",
          "832:  if (pinfo->fd->flags.visited)",
          "",
          "[Added Lines]",
          "832:  if ((pinfo->fd->flags.visited) || (rtp_handle == NULL))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917:  {",
          "918:   return;",
          "919:  }",
          "",
          "[Removed Lines]",
          "916:  if (pinfo->fd->flags.visited)",
          "",
          "[Added Lines]",
          "916:  if ((pinfo->fd->flags.visited) || (rtp_handle == NULL))",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c": [
          "File: epan/dissectors/packet-sdp.c -> epan/dissectors/packet-sdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #include \"packet-h264.h\"",
          "76: #include \"packet-mp4ves.h\"",
          "79: static dissector_handle_t rtcp_handle;",
          "80: static dissector_handle_t sprt_handle;",
          "81: static dissector_handle_t msrp_handle;",
          "",
          "[Removed Lines]",
          "78: static dissector_handle_t rtp_handle;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:       if ((transport_info->media_port[n] != 0) &&",
          "1838:           (transport_info->proto_bitmask[n] & (SDP_RTP_PROTO|SDP_SRTP_PROTO)) &&",
          "1839:           (transport_info->proto_bitmask[n] & (SDP_IPv4|SDP_IPv6))) {",
          "1842:             srtp_info = wmem_new0(wmem_file_scope(), struct srtp_info);",
          "1843:             if (transport_info->encryption_algorithm != SRTP_ENC_ALG_NOT_SET) {",
          "1844:               srtp_info->encryption_algorithm = transport_info->encryption_algorithm;",
          "",
          "[Removed Lines]",
          "1840:         if (rtp_handle) {",
          "1841:           if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "",
          "[Added Lines]",
          "1839:         if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1850:             srtp_add_address(pinfo, &transport_info->src_addr[n], transport_info->media_port[n], 0, \"SDP\", pinfo->fd->num,",
          "1851:                             (transport_info->proto_bitmask[n] & SDP_VIDEO) ? TRUE : FALSE,",
          "1852:                              transport_info->media[n].rtp_dyn_payload, srtp_info);",
          "1854:             rtp_add_address(pinfo, &transport_info->src_addr[n], transport_info->media_port[n], 0, \"SDP\", pinfo->fd->num,",
          "1855:                             (transport_info->proto_bitmask[n] & SDP_VIDEO) ? TRUE : FALSE,",
          "1856:                             transport_info->media[n].rtp_dyn_payload);",
          "1861:         }",
          "1862:         if (rtcp_handle) {",
          "1863:           if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "1864:             srtcp_add_address(pinfo, &transport_info->src_addr[n], transport_info->media_port[n]+1, 0, \"SDP\", pinfo->fd->num, srtp_info);",
          "",
          "[Removed Lines]",
          "1853:           } else {",
          "1857:           }",
          "1858:           transport_info->media[n].set_rtp = TRUE;",
          "1860:           current_rtp_port = transport_info->media_port[n];",
          "",
          "[Added Lines]",
          "1851:         } else {",
          "1856:         transport_info->media[n].set_rtp = TRUE;",
          "1858:         current_rtp_port = transport_info->media_port[n];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2178:         (transport_info->media_port[n] != 0) &&",
          "2179:         (transport_info->proto_bitmask[n] & (SDP_RTP_PROTO|SDP_SRTP_PROTO)) &&",
          "2180:         (transport_info->proto_bitmask[n] & (SDP_IPv4|SDP_IPv6))) {",
          "2183:           srtp_info = wmem_new0(wmem_file_scope(), struct srtp_info);",
          "2184:           if (transport_info->encryption_algorithm != SRTP_ENC_ALG_NOT_SET) {",
          "2185:             srtp_info->encryption_algorithm = transport_info->encryption_algorithm;",
          "",
          "[Removed Lines]",
          "2181:       if (rtp_handle) {",
          "2182:         if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "",
          "[Added Lines]",
          "2179:       if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2190:           srtp_add_address(pinfo, &transport_info->src_addr[n], transport_info->media_port[n], 0, \"SDP\", pinfo->fd->num,",
          "2191:                           (transport_info->proto_bitmask[n] & SDP_VIDEO) ? TRUE : FALSE,",
          "2192:                            transport_info->media[n].rtp_dyn_payload, srtp_info);",
          "2194:           rtp_add_address(pinfo, &transport_info->src_addr[n], transport_info->media_port[n], 0, \"SDP\", pinfo->fd->num,",
          "2195:                           (transport_info->proto_bitmask[n] & SDP_VIDEO) ? TRUE : FALSE,",
          "2196:                           transport_info->media[n].rtp_dyn_payload);",
          "2201:       }",
          "2202:       if (rtcp_handle) {",
          "2203:         if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "2204:           srtcp_add_address(pinfo, &transport_info->src_addr[n], transport_info->media_port[n]+1, 0, \"SDP\", pinfo->fd->num, srtp_info);",
          "",
          "[Removed Lines]",
          "2193:         } else {",
          "2197:         }",
          "2198:         transport_info->media[n].set_rtp = TRUE;",
          "2200:         current_rtp_port = transport_info->media_port[n];",
          "",
          "[Added Lines]",
          "2190:       } else {",
          "2195:       transport_info->media[n].set_rtp = TRUE;",
          "2197:       current_rtp_port = transport_info->media_port[n];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2734: {",
          "2735:   dissector_handle_t sdp_handle;",
          "2738:   rtcp_handle   = find_dissector(\"rtcp\");",
          "2739:   msrp_handle   = find_dissector(\"msrp\");",
          "2740:   sprt_handle   = find_dissector(\"sprt\");",
          "",
          "[Removed Lines]",
          "2737:   rtp_handle    = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-skinny.c||epan/dissectors/packet-skinny.c": [
          "File: epan/dissectors/packet-skinny.c -> epan/dissectors/packet-skinny.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1375: static gboolean skinny_desegment = TRUE;",
          "1380: static int skinny_tap = -1;",
          "",
          "[Removed Lines]",
          "1377: static dissector_handle_t rtp_handle=NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1631:       if (hdr_version == BASIC_MSG_TYPE) {",
          "1632:         proto_tree_add_item(skinny_tree, hf_skinny_ORCStatus, tvb, offset+12, 4, ENC_LITTLE_ENDIAN);",
          "1633:         proto_tree_add_item(skinny_tree, hf_skinny_ipAddress, tvb, offset+16, 4, ENC_BIG_ENDIAN);",
          "1634:         proto_tree_add_item(skinny_tree, hf_skinny_portNumber, tvb, offset+20, 4, ENC_LITTLE_ENDIAN);",
          "1635:         proto_tree_add_item(skinny_tree, hf_skinny_passThruPartyID, tvb, offset+24, 4, ENC_LITTLE_ENDIAN);",
          "1646:         si->passThruId = tvb_get_letohl(tvb, offset+24);",
          "1647:       } else if (hdr_version == CM7_MSG_TYPE_A || hdr_version == CM7_MSG_TYPE_B || hdr_version == CM7_MSG_TYPE_C || hdr_version == CM7_MSG_TYPE_D) {",
          "1648:         proto_tree_add_item(skinny_tree, hf_skinny_ORCStatus, tvb, offset+12, 4, ENC_LITTLE_ENDIAN);",
          "1650:         ipversion = tvb_get_ntohl(tvb, offset+16);",
          "",
          "[Removed Lines]",
          "1636:         if (rtp_handle) {",
          "1637:           address src_addr;",
          "1638:           guint32 ipv4_address;",
          "1640:           src_addr.type = AT_IPv4;",
          "1641:           src_addr.len = 4;",
          "1642:           src_addr.data = (guint8 *)&ipv4_address;",
          "1643:           ipv4_address = tvb_get_ipv4(tvb, offset+16);",
          "1644:           rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+20), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "1645:         }",
          "",
          "[Added Lines]",
          "1630:         address src_addr;",
          "1631:         guint32 ipv4_address;",
          "1637:         src_addr.type = AT_IPv4;",
          "1638:         src_addr.len = 4;",
          "1639:         src_addr.data = (guint8 *)&ipv4_address;",
          "1640:         ipv4_address = tvb_get_ipv4(tvb, offset+16);",
          "1641:         rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+20), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "1645:         address src_addr;",
          "1646:         guint32 ipv4_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1657:         }",
          "1658:         proto_tree_add_item(skinny_tree, hf_skinny_portNumber, tvb, offset+36, 4, ENC_LITTLE_ENDIAN);",
          "1659:         proto_tree_add_item(skinny_tree, hf_skinny_passThruPartyID, tvb, offset+40, 4, ENC_LITTLE_ENDIAN);",
          "1670:         si->passThruId = tvb_get_letohl(tvb, offset+40);",
          "1671:       }",
          "1672:       break;",
          "",
          "[Removed Lines]",
          "1660:         if (rtp_handle) {",
          "1661:           address src_addr;",
          "1662:           guint32 ipv4_address;",
          "1664:           src_addr.type = AT_IPv4;",
          "1665:           src_addr.len = 4;",
          "1666:           src_addr.data = (guint8 *)&ipv4_address;",
          "1667:           ipv4_address = tvb_get_ipv4(tvb, offset+20);",
          "1668:           rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+36), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "1669:         }",
          "",
          "[Added Lines]",
          "1661:         src_addr.type = AT_IPv4;",
          "1662:         src_addr.len = 4;",
          "1663:         src_addr.data = (guint8 *)&ipv4_address;",
          "1664:         ipv4_address = tvb_get_ipv4(tvb, offset+20);",
          "1665:         rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+36), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2300:       if (hdr_version == BASIC_MSG_TYPE) {",
          "2301:         proto_tree_add_item(skinny_tree, hf_skinny_conferenceID,          tvb, offset+12, 4, ENC_LITTLE_ENDIAN);",
          "2302:         proto_tree_add_item(skinny_tree, hf_skinny_passThruPartyID,       tvb, offset+16, 4, ENC_LITTLE_ENDIAN);",
          "2303:         proto_tree_add_item(skinny_tree, hf_skinny_remoteIpAddr,          tvb, offset+20, 4, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2298:         address src_addr;",
          "2299:         guint32 ipv4_address;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2308:         proto_tree_add_item(skinny_tree, hf_skinny_silenceSuppression,    tvb, offset+40, 4, ENC_LITTLE_ENDIAN);",
          "2309:         proto_tree_add_item(skinny_tree, hf_skinny_maxFramesPerPacket,    tvb, offset+44, 2, ENC_LITTLE_ENDIAN);",
          "2310:         proto_tree_add_item(skinny_tree, hf_skinny_g723BitRate,           tvb, offset+48, 4, ENC_LITTLE_ENDIAN);",
          "2321:         si->passThruId = tvb_get_letohl(tvb, offset+16);",
          "2322:       }",
          "2323:       else if (hdr_version == CM7_MSG_TYPE_A || hdr_version == CM7_MSG_TYPE_B || hdr_version == CM7_MSG_TYPE_C || hdr_version == CM7_MSG_TYPE_D)",
          "2324:       {",
          "2325:         proto_tree_add_item(skinny_tree, hf_skinny_conferenceID,          tvb, offset+12, 4, ENC_LITTLE_ENDIAN);",
          "2326:         proto_tree_add_item(skinny_tree, hf_skinny_passThruPartyID,       tvb, offset+16, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "2311:         if (rtp_handle) {",
          "2312:           address src_addr;",
          "2313:           guint32 ipv4_address;",
          "2315:           src_addr.type = AT_IPv4;",
          "2316:           src_addr.len = 4;",
          "2317:           src_addr.data = (char *)&ipv4_address;",
          "2318:           ipv4_address = tvb_get_ipv4(tvb, offset+20);",
          "2319:           rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+24), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "2320:         }",
          "",
          "[Added Lines]",
          "2312:         src_addr.type = AT_IPv4;",
          "2313:         src_addr.len = 4;",
          "2314:         src_addr.data = (char *)&ipv4_address;",
          "2315:         ipv4_address = tvb_get_ipv4(tvb, offset+20);",
          "2316:         rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+24), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "2322:         address src_addr;",
          "2323:         guint32 ipv4_address;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2357:         si->passThruId = tvb_get_letohl(tvb, offset+16);",
          "2358:       }",
          "2359:       break;",
          "",
          "[Removed Lines]",
          "2347:         if (rtp_handle) {",
          "2348:           address src_addr;",
          "2349:           guint32 ipv4_address;",
          "2351:           src_addr.type = AT_IPv4;",
          "2352:           src_addr.len = 4;",
          "2353:           src_addr.data = (char *)&ipv4_address;",
          "2354:           ipv4_address = tvb_get_ipv4(tvb, offset+24);",
          "2355:           rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+40), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "2356:         }",
          "",
          "[Added Lines]",
          "2348:         src_addr.type = AT_IPv4;",
          "2349:         src_addr.len = 4;",
          "2350:         src_addr.data = (char *)&ipv4_address;",
          "2351:         ipv4_address = tvb_get_ipv4(tvb, offset+24);",
          "2352:         rtp_add_address(pinfo, &src_addr, tvb_get_letohl(tvb, offset+40), 0, \"Skinny\", pinfo->fd->num, is_video, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5379:   dissector_handle_t skinny_handle;",
          "5381:   if (!skinny_prefs_initialized) {",
          "5384:     media_type_dissector_table = find_dissector_table(\"media_type\");",
          "5385:     skinny_handle = new_create_dissector_handle(dissect_skinny, proto_skinny);",
          "",
          "[Removed Lines]",
          "5382:     rtp_handle = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-uma.c||epan/dissectors/packet-uma.c": [
          "File: epan/dissectors/packet-uma.c -> epan/dissectors/packet-uma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static dissector_handle_t uma_udp_handle;",
          "79: static dissector_handle_t data_handle;",
          "80: static dissector_table_t  bssap_pdu_type_table;",
          "82: static dissector_handle_t rtcp_handle;",
          "83: static dissector_handle_t llc_handle;",
          "",
          "[Removed Lines]",
          "81: static dissector_handle_t rtp_handle;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1528:   proto_tree_add_item(urr_ie_tree, hf_uma_urr_RTP_port, tvb, ie_offset, 2, ENC_BIG_ENDIAN);",
          "1534:   if(unc_ipv4_address!=0){",
          "1535:    SET_ADDRESS(&src_addr, AT_IPv4, 4, &unc_ipv4_address);",
          "",
          "[Removed Lines]",
          "1531:   proto_tree_add_text(urr_ie_tree,tvb,ie_offset,ie_len,\"IP %u, Port %u Handle %u\",",
          "1532:    rtp_ipv4_address,RTP_UDP_port,rtp_handle);",
          "",
          "[Added Lines]",
          "1530:   proto_tree_add_text(urr_ie_tree,tvb,ie_offset,ie_len,\"IP %u, Port %u,",
          "1531:    rtp_ipv4_address,RTP_UDP_port);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1538:    src_addr = pinfo->src;",
          "1539:   }",
          "1542:    rtp_add_address(pinfo, &src_addr, RTP_UDP_port, 0, \"UMA\", pinfo->fd->num, FALSE, 0);",
          "",
          "[Removed Lines]",
          "1540:   if((!pinfo->fd->flags.visited) && RTP_UDP_port!=0 && rtp_handle){",
          "",
          "[Added Lines]",
          "1539:   if((!pinfo->fd->flags.visited) && RTP_UDP_port!=0){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1758:   uma_udp_handle = find_dissector(\"umaudp\");",
          "1760:   data_handle = find_dissector(\"data\");",
          "1762:   rtcp_handle = find_dissector(\"rtcp\");",
          "1763:   llc_handle = find_dissector(\"llcgprs\");",
          "1764:   bssap_pdu_type_table = find_dissector_table(\"bssap.pdu_type\");",
          "",
          "[Removed Lines]",
          "1761:   rtp_handle = find_dissector(\"rtp\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4daaf4fb575449da402bd9b4df6935176e431187",
      "candidate_info": {
        "commit_hash": "4daaf4fb575449da402bd9b4df6935176e431187",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4daaf4fb575449da402bd9b4df6935176e431187",
        "files": [
          "epan/dissectors/packet-kingfisher.c",
          "epan/dissectors/packet-sdp.c"
        ],
        "message": "Purge some emem. - In kingfisher it wasn't even needed, just use a variable on the stack. - In SDP convert to wmem. Use auto-resetting trees to avoid the need for an init   routine and somewhat simplify that whole thing.\n\nsvn path=/trunk/; revision=51484",
        "before_after_code_files": [
          "epan/dissectors/packet-kingfisher.c||epan/dissectors/packet-kingfisher.c",
          "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-kingfisher.c||epan/dissectors/packet-kingfisher.c": [
          "File: epan/dissectors/packet-kingfisher.c -> epan/dissectors/packet-kingfisher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"config.h\"",
          "30: #include <epan/packet.h>",
          "32: #include <epan/conversation.h>",
          "34: #define SUPPORT_KINGFISHER_SERIES_2",
          "",
          "[Removed Lines]",
          "31: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "31: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: static gboolean",
          "182: dissect_kingfisher(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, gboolean is_conv_dissector)",
          "183: {",
          "185:     proto_tree *kingfisher_tree=NULL;",
          "186:     proto_item *item=NULL;",
          "187:     const char *func_string = NULL;",
          "",
          "[Removed Lines]",
          "184:     kingfisher_packet_t *kfp;",
          "",
          "[Added Lines]",
          "184:     kingfisher_packet_t kfp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     }",
          "226:     if(tvb_reported_length(tvb)<9){",
          "227:         return FALSE;",
          "228:     }",
          "235:         return FALSE;",
          "236:     }",
          "241:         return FALSE;",
          "242:     }",
          "246:     checksum = kingfisher_checksum(tvb, 0);",
          "248:         return FALSE;",
          "249:     }",
          "261:     {",
          "265:     }",
          "271:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"Kingfisher\");",
          "277:     if(tree){",
          "279:         kingfisher_tree = proto_item_add_subtree( item, ett_kingfisher );",
          "280:     }",
          "309:     }",
          "",
          "[Removed Lines]",
          "222:     kfp=ep_new(kingfisher_packet_t);",
          "232:     kfp->function = tvb_get_guint8( tvb, 6 );",
          "233:     if (try_val_to_str(kfp->function, function_code_vals) == NULL) {",
          "239:     kfp->length = tvb_get_guint8(tvb, 2);",
          "240:     if((kfp->length+1) != (guint8)tvb_length(tvb)){",
          "245:     kfp->checksum = tvb_get_ntohs(tvb, kfp->length - 1);",
          "247:     if(kfp->checksum!=checksum){",
          "252:     kfp->version = (kfp->function & 0x80)?3:2;",
          "253:     kfp->system = tvb_get_guint8( tvb, 0 );",
          "254:     kfp->message = tvb_get_guint8( tvb, 5 );",
          "256:     kfp->target = tvb_get_guint8( tvb, 1 );",
          "257:     kfp->from = tvb_get_guint8( tvb, 3 );",
          "258:     kfp->via = tvb_get_guint8( tvb, 4 );",
          "260:     if( kfp->version == 3 )",
          "262:         kfp->target |= ( tvb_get_guint8( tvb, 7 ) << 8 );",
          "263:         kfp->from   |= ( tvb_get_guint8( tvb, 8 ) << 8 );",
          "264:         kfp->via    |= ( tvb_get_guint8( tvb, 9 ) << 8 );",
          "269:     func_string = val_to_str_const(kfp->function, function_code_vals, \"Unknown function\");",
          "272:     col_add_fstr(pinfo->cinfo, COL_INFO, \"%u > %u (%s)\", kfp->from, kfp->target, func_string);",
          "275:     message = (kfp->message & 0x0f) | ((kfp->message & 0xf0) >> 4);",
          "278:         item = proto_tree_add_protocol_format(tree, proto_kingfisher, tvb, 0, -1, \"Kingfisher Protocol, From RTU: %d, Target RTU: %d\", kfp->from, kfp->target );",
          "283:     proto_tree_add_uint(kingfisher_tree, hf_kingfisher_version, tvb, 6, 1, kfp->version);",
          "286:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_system, tvb, 0, 1, kfp->system, \"System Identifier: %u (0x%02X)\", kfp->system, kfp->system);",
          "289:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_target, tvb, 1, 1, kfp->target, \"Target RTU: %u (0x%02X)\", kfp->target, kfp->target);",
          "292:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_length, tvb, 2, 1, kfp->length, \"Length: %u (0x%02X)\", kfp->length, kfp->length);",
          "295:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_from, tvb, 3, 1, kfp->from, \"From RTU: %u (0x%02X)\", kfp->from, kfp->from);",
          "298:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_via, tvb, 4, 1, kfp->via, \"Via RTU: %u (0x%02X)\", kfp->via, kfp->via);",
          "301:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_message, tvb, 5, 1, kfp->message, \"Message Number: %u (0x%02X, %s)\", message, kfp->message, ((kfp->message & 0xf0)?\"Response\":\"Request\"));",
          "304:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_function, tvb, 6, 1, kfp->function, \"Message Function Code: %u (0x%02X, %s)\", kfp->function, kfp->function, func_string);",
          "307:     if(kfp->length > ((kfp->version==3)?11:8)){",
          "308:         proto_tree_add_text(kingfisher_tree, tvb, ((kfp->version==3)?10:7), kfp->length - ((kfp->version==3)?11:8), \"Message Data\");",
          "312:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_checksum, tvb, kfp->length-1, 2, kfp->checksum, \"Checksum: 0x%04X [%s]\", kfp->checksum, ((checksum != kfp->checksum)?\"incorrect\":\"correct\"));",
          "",
          "[Added Lines]",
          "226:     kfp.function = tvb_get_guint8( tvb, 6 );",
          "227:     if (try_val_to_str(kfp.function, function_code_vals) == NULL) {",
          "233:     kfp.length = tvb_get_guint8(tvb, 2);",
          "234:     if((kfp.length+1) != (guint8)tvb_length(tvb)){",
          "239:     kfp.checksum = tvb_get_ntohs(tvb, kfp.length - 1);",
          "241:     if(kfp.checksum!=checksum){",
          "246:     kfp.version = (kfp.function & 0x80)?3:2;",
          "247:     kfp.system = tvb_get_guint8( tvb, 0 );",
          "248:     kfp.message = tvb_get_guint8( tvb, 5 );",
          "250:     kfp.target = tvb_get_guint8( tvb, 1 );",
          "251:     kfp.from = tvb_get_guint8( tvb, 3 );",
          "252:     kfp.via = tvb_get_guint8( tvb, 4 );",
          "254:     if( kfp.version == 3 )",
          "256:         kfp.target |= ( tvb_get_guint8( tvb, 7 ) << 8 );",
          "257:         kfp.from   |= ( tvb_get_guint8( tvb, 8 ) << 8 );",
          "258:         kfp.via    |= ( tvb_get_guint8( tvb, 9 ) << 8 );",
          "263:     func_string = val_to_str_const(kfp.function, function_code_vals, \"Unknown function\");",
          "266:     col_add_fstr(pinfo->cinfo, COL_INFO, \"%u > %u (%s)\", kfp.from, kfp.target, func_string);",
          "269:     message = (kfp.message & 0x0f) | ((kfp.message & 0xf0) >> 4);",
          "272:         item = proto_tree_add_protocol_format(tree, proto_kingfisher, tvb, 0, -1, \"Kingfisher Protocol, From RTU: %d, Target RTU: %d\", kfp.from, kfp.target );",
          "277:     proto_tree_add_uint(kingfisher_tree, hf_kingfisher_version, tvb, 6, 1, kfp.version);",
          "280:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_system, tvb, 0, 1, kfp.system, \"System Identifier: %u (0x%02X)\", kfp.system, kfp.system);",
          "283:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_target, tvb, 1, 1, kfp.target, \"Target RTU: %u (0x%02X)\", kfp.target, kfp.target);",
          "286:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_length, tvb, 2, 1, kfp.length, \"Length: %u (0x%02X)\", kfp.length, kfp.length);",
          "289:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_from, tvb, 3, 1, kfp.from, \"From RTU: %u (0x%02X)\", kfp.from, kfp.from);",
          "292:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_via, tvb, 4, 1, kfp.via, \"Via RTU: %u (0x%02X)\", kfp.via, kfp.via);",
          "295:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_message, tvb, 5, 1, kfp.message, \"Message Number: %u (0x%02X, %s)\", message, kfp.message, ((kfp.message & 0xf0)?\"Response\":\"Request\"));",
          "298:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_function, tvb, 6, 1, kfp.function, \"Message Function Code: %u (0x%02X, %s)\", kfp.function, kfp.function, func_string);",
          "301:     if(kfp.length > ((kfp.version==3)?11:8)){",
          "302:         proto_tree_add_text(kingfisher_tree, tvb, ((kfp.version==3)?10:7), kfp.length - ((kfp.version==3)?11:8), \"Message Data\");",
          "306:     proto_tree_add_uint_format(kingfisher_tree, hf_kingfisher_checksum, tvb, kfp.length-1, 2, kfp.checksum, \"Checksum: 0x%04X [%s]\", kfp.checksum, ((checksum != kfp.checksum)?\"incorrect\":\"correct\"));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c": [
          "File: epan/dissectors/packet-sdp.c -> epan/dissectors/packet-sdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include <epan/packet.h>",
          "55: #include <epan/strutil.h>",
          "57: #include <epan/wmem/wmem.h>",
          "58: #include <epan/base64.h>",
          "59: #include <epan/asn1.h>",
          "",
          "[Removed Lines]",
          "56: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: static int proto_sprt = -1;",
          "91: static const char* UNKNOWN_ENCODING = \"Unknown\";",
          "96: static gboolean global_sdp_establish_conversation = TRUE;",
          "",
          "[Removed Lines]",
          "92: static emem_tree_t *sdp_transport_reqs = NULL;",
          "93: static emem_tree_t *sdp_transport_rsps = NULL;",
          "",
          "[Added Lines]",
          "91: static wmem_tree_t *sdp_transport_reqs = NULL;",
          "92: static wmem_tree_t *sdp_transport_rsps = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1205:     }",
          "1210:     transport_info->encoding_name[pt] = (char*)tvb_get_ephemeral_string(tvb, offset, tokenlen);",
          "",
          "[Removed Lines]",
          "1207:     key  = se_new(gint);",
          "",
          "[Added Lines]",
          "1206:     key  = wmem_new(wmem_file_scope(), gint);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1240:     if (transport_info->media_count < 0) {",
          "1241:       for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
          "1244:         encoding_name_and_rate->sample_rate = transport_info->sample_rate[pt];",
          "1245:         if (n == 0) {",
          "1246:           g_hash_table_insert(transport_info->media[n].rtp_dyn_payload,",
          "1247:                               key, encoding_name_and_rate);",
          "1249:           gint *key2;",
          "1252:           g_hash_table_insert(transport_info->media[n].rtp_dyn_payload,",
          "1253:                               key2, encoding_name_and_rate);",
          "",
          "[Removed Lines]",
          "1242:         encoding_name_and_rate = se_new(encoding_name_and_rate_t);",
          "1243:         encoding_name_and_rate->encoding_name = se_strdup(transport_info->encoding_name[pt]);",
          "1250:           key2  = se_new(gint);",
          "",
          "[Added Lines]",
          "1241:         encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
          "1242:         encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), transport_info->encoding_name[pt]);",
          "1249:           key2  = wmem_new(wmem_file_scope(), gint);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1258:     } else",
          "1263:     encoding_name_and_rate->sample_rate   = transport_info->sample_rate[pt];",
          "1264:     g_hash_table_insert(transport_info->media[ transport_info->media_count ].rtp_dyn_payload,",
          "1265:                           key, encoding_name_and_rate);",
          "",
          "[Removed Lines]",
          "1260:       encoding_name_and_rate = se_new(encoding_name_and_rate_t);",
          "1262:     encoding_name_and_rate->encoding_name = se_strdup(transport_info->encoding_name[pt]);",
          "",
          "[Added Lines]",
          "1259:       encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
          "1261:     encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), transport_info->encoding_name[pt]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1662:     if ((media_info->connection_address != NULL) &&",
          "1663:         (media_info->connection_type != NULL)) {",
          "1664:       if (strcmp(media_info->connection_type, \"IP4\") == 0) {",
          "1666:         if (inet_pton(AF_INET, media_info->connection_address, (void*)transport_info->src_addr[transport_index].data) > 0) {",
          "1668:           transport_info->proto_bitmask[transport_index] |= SDP_IPv4;",
          "",
          "[Removed Lines]",
          "1665:         transport_info->src_addr[transport_index].data = se_alloc(4);",
          "",
          "[Added Lines]",
          "1664:         transport_info->src_addr[transport_index].data = wmem_alloc(wmem_file_scope(), 4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1670:           transport_info->src_addr[transport_index].len  = 4;",
          "1671:         }",
          "1672:       } else if (strcmp(media_info->connection_type, \"IP6\") == 0) {",
          "1674:           if (inet_pton(AF_INET6, media_info->connection_address, (void*)transport_info->src_addr[transport_index].data) > 0) {",
          "1676:             transport_info->proto_bitmask[transport_index] |= SDP_IPv6;",
          "",
          "[Removed Lines]",
          "1673:           transport_info->src_addr[transport_index].data = se_alloc(16);",
          "",
          "[Added Lines]",
          "1672:           transport_info->src_addr[transport_index].data = wmem_alloc(wmem_file_scope(), 16);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1687:         msrp_handle) {",
          "1688:        transport_info->src_addr[transport_index].type = AT_IPv4;",
          "1689:        transport_info->src_addr[transport_index].len  = 4;",
          "1691:        transport_info->media_port[transport_index] = media_info->msrp_port_number;",
          "1692:     }",
          "",
          "[Removed Lines]",
          "1690:        transport_info->src_addr[transport_index].data = se_memdup(media_info->msrp_ipaddr, 4);",
          "",
          "[Added Lines]",
          "1689:        transport_info->src_addr[transport_index].data = wmem_memdup(wmem_file_scope(), media_info->msrp_ipaddr, 4);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1719:   memset(&media_info, 0, sizeof(media_info));",
          "1721:   if (request_frame != 0)",
          "1723:   if (transport_info == NULL) {",
          "1725:     transport_info->media_count = -1;",
          "1727:     for (n = 0; n < SDP_NO_OF_PT; n++) {",
          "",
          "[Removed Lines]",
          "1722:     transport_info = (transport_info_t*)se_tree_lookup32( sdp_transport_reqs, request_frame );",
          "1724:     transport_info = se_new0(transport_info_t);",
          "",
          "[Added Lines]",
          "1721:     transport_info = (transport_info_t*)wmem_tree_lookup32( sdp_transport_reqs, request_frame );",
          "1723:     transport_info = wmem_new0(wmem_file_scope(), transport_info_t);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1734:     }",
          "1736:     if (request_frame != 0)",
          "1738:   }",
          "1740:   if (exchange_type != SDP_EXCHANGE_OFFER)",
          "",
          "[Removed Lines]",
          "1737:       se_tree_insert32(sdp_transport_reqs, request_frame, (void *)transport_info);",
          "1741:     se_tree_insert32(sdp_transport_rsps, pinfo->fd->num, (void *)transport_info);",
          "",
          "[Added Lines]",
          "1736:       wmem_tree_insert32(sdp_transport_reqs, request_frame, (void *)transport_info);",
          "1740:     wmem_tree_insert32(sdp_transport_rsps, pinfo->fd->num, (void *)transport_info);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1840:           (transport_info->proto_bitmask[n] & (SDP_IPv4|SDP_IPv6))) {",
          "1841:         if (rtp_handle) {",
          "1842:           if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "1844:             if (transport_info->encryption_algorithm != SRTP_ENC_ALG_NOT_SET) {",
          "1845:               srtp_info->encryption_algorithm = transport_info->encryption_algorithm;",
          "1846:               srtp_info->auth_algorithm       = transport_info->auth_algorithm;",
          "",
          "[Removed Lines]",
          "1843:             srtp_info = se_new0(struct srtp_info);",
          "",
          "[Added Lines]",
          "1842:             srtp_info = wmem_new0(wmem_file_scope(), struct srtp_info);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1955:   transport_info_t* transport_info = NULL;",
          "1957:   if (request_frame != 0) {",
          "1959:     if (transport_info != NULL) {",
          "1961:     }",
          "1962:   }",
          "1963: }",
          "",
          "[Removed Lines]",
          "1958:     transport_info = (transport_info_t*)se_tree_lookup32( sdp_transport_reqs, request_frame );",
          "1960:         se_tree_insert32(sdp_transport_reqs, current_frame, (void *)transport_info);",
          "",
          "[Added Lines]",
          "1957:     transport_info = (transport_info_t*)wmem_tree_lookup32( sdp_transport_reqs, request_frame );",
          "1959:         wmem_tree_insert32(sdp_transport_reqs, current_frame, (void *)transport_info);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1982:   struct srtp_info *srtp_info = NULL;",
          "1986:   sdp_pi->summary_str[0] = '\\0';",
          "1988:   if (!pinfo->fd->flags.visited) {",
          "1991:     if (transport_info == NULL) {",
          "1994:     }",
          "1995:   }",
          "",
          "[Removed Lines]",
          "1985:   sdp_pi = ep_new(sdp_packet_info);",
          "1989:     transport_info = (transport_info_t*)se_tree_lookup32( sdp_transport_reqs, pinfo->fd->num );",
          "1993:        transport_info = (transport_info_t*)se_tree_lookup32( sdp_transport_rsps, pinfo->fd->num );",
          "",
          "[Added Lines]",
          "1984:   sdp_pi = wmem_new(wmem_packet_scope(), sdp_packet_info);",
          "1988:     transport_info = (transport_info_t*)wmem_tree_lookup32( sdp_transport_reqs, pinfo->fd->num );",
          "1992:        transport_info = (transport_info_t*)wmem_tree_lookup32( sdp_transport_rsps, pinfo->fd->num );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2182:         (transport_info->proto_bitmask[n] & (SDP_IPv4|SDP_IPv6))) {",
          "2183:       if (rtp_handle) {",
          "2184:         if (transport_info->proto_bitmask[n] & SDP_SRTP_PROTO) {",
          "2186:           if (transport_info->encryption_algorithm != SRTP_ENC_ALG_NOT_SET) {",
          "2187:             srtp_info->encryption_algorithm = transport_info->encryption_algorithm;",
          "2188:             srtp_info->auth_algorithm       = transport_info->auth_algorithm;",
          "",
          "[Removed Lines]",
          "2185:           srtp_info = se_new0(struct srtp_info);",
          "",
          "[Added Lines]",
          "2184:           srtp_info = wmem_new0(wmem_file_scope(), struct srtp_info);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2320:   tap_queue_packet(sdp_tap, pinfo, sdp_pi);",
          "2321: }",
          "2334: void",
          "2335: proto_register_sdp(void)",
          "2336: {",
          "",
          "[Removed Lines]",
          "2323: static void",
          "2324: sdp_init(void)",
          "2325: {",
          "2328:     sdp_transport_reqs = se_tree_create_non_persistent(",
          "2329:             EMEM_TREE_TYPE_RED_BLACK, \"sdp_transport_reqs\");",
          "2330:     sdp_transport_rsps = se_tree_create_non_persistent(",
          "2331:             EMEM_TREE_TYPE_RED_BLACK, \"sdp_transport_rsps\");",
          "2332: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2730:                                  \"upon port numbers found in SDP payload\",",
          "2731:                                  &global_sdp_establish_conversation);",
          "",
          "[Removed Lines]",
          "2733:   register_init_routine(sdp_init);",
          "",
          "[Added Lines]",
          "2721:   sdp_transport_reqs = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "2722:   sdp_transport_rsps = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc84709705644272dce313b8fc40c4ed2e5300f7",
      "candidate_info": {
        "commit_hash": "dc84709705644272dce313b8fc40c4ed2e5300f7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/dc84709705644272dce313b8fc40c4ed2e5300f7",
        "files": [
          "epan/dissectors/packet-rtp.c"
        ],
        "message": "please checkAPI\n\nChange-Id: I2dbd1fcb47b75300e753b5ef2dc60e68ca1b5fa5\nReviewed-on: https://code.wireshark.org/review/941\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c": [
          "File: epan/dissectors/packet-rtp.c -> epan/dissectors/packet-rtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:     if (rtp_dyn_payload->ref_count == 0) {",
          "904:     }",
          "905:     else if (rtp_dyn_payload->table) {",
          "",
          "[Removed Lines]",
          "903:         g_error(\"rtp_dyn_payload cannot be free'd because it should already have been!\\n\");",
          "",
          "[Added Lines]",
          "903:         DPRINT((\"rtp_dyn_payload cannot be free'd because it should already have been!\\n\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919: wmem_rtp_dyn_payload_destroy_cb(wmem_allocator_t *allocator _U_, wmem_cb_event_t event _U_,",
          "920:         void *user_data _U_)",
          "921: {",
          "924:     DPRINT((\"destroying %u remaining rtp_dyn_payload_t's\", g_hash_table_size(rtp_dyn_payloads)));",
          "",
          "[Removed Lines]",
          "922:     g_assert(rtp_dyn_payloads);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1071: #endif",
          "1075:         if (!g_hash_table_remove(rtp_dyn_payloads, rtp_dyn_payload)) {",
          "1077:         }",
          "",
          "[Removed Lines]",
          "1074:         g_assert(rtp_dyn_payloads);",
          "1076:             g_error(\"rtp_dyn_payload not found in rtp_dyn_payloads table to remove!\");",
          "",
          "[Added Lines]",
          "1073:             DPRINT((\"rtp_dyn_payload not found in rtp_dyn_payloads table to remove!\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}