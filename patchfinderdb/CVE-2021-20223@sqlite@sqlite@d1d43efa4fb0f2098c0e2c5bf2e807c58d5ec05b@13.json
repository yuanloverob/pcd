{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8f76d672b78b77e7d79ebaf0e9ab55c8bb0b14d",
      "candidate_info": {
        "commit_hash": "f8f76d672b78b77e7d79ebaf0e9ab55c8bb0b14d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f8f76d672b78b77e7d79ebaf0e9ab55c8bb0b14d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Simplification of the logic in the constant-propagation optimization.\n\nFossilOrigin-Name: 1c3e5c20a9e6f501befa2bf6241a1b5190872bd83b765dac67065d252d04ea4f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6db1c3498f6bfa01bb460e62b802b63ec4bf43577a17a94e1e2fa0ecc1e64960",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4151: static void constInsert(",
          "4155: ){",
          "4156:   int i;",
          "4157:   assert( pColumn->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4163:   assert( sqlite3ExprIsConstant(pValue) );",
          "4165:   if( !ExprHasProperty(pValue, EP_FixedCol) && sqlite3ExprAffinity(pValue)!=0 ){",
          "4166:     return;",
          "4167:   }",
          "4168:   if( !sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr)) ){",
          "4169:     return;",
          "4170:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4174:   if( pConst->apExpr==0 ){",
          "4175:     pConst->nConst = 0;",
          "4176:   }else{",
          "4178:     pConst->apExpr[pConst->nConst*2-2] = pColumn;",
          "4179:     pConst->apExpr[pConst->nConst*2-1] = pValue;",
          "4180:   }",
          "",
          "[Removed Lines]",
          "4177:     if( ExprHasProperty(pValue, EP_FixedCol) ) pValue = pValue->pLeft;",
          "",
          "[Added Lines]",
          "4190:     if( ExprHasProperty(pValue, EP_FixedCol) ){",
          "4191:       pValue = pValue->pLeft;",
          "4192:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4200:   pLeft = pExpr->pLeft;",
          "4201:   assert( pRight!=0 );",
          "4202:   assert( pLeft!=0 );",
          "4218:   }",
          "4219: }",
          "",
          "[Removed Lines]",
          "4203:   if( pRight->op==TK_COLUMN",
          "4204:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4205:    && sqlite3ExprIsConstant(pLeft)",
          "4206:    && sqlite3ExprAffinity(pLeft)==0",
          "4207:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4208:   ){",
          "4209:     constInsert(pConst, pRight, pLeft);",
          "4210:   }else",
          "4211:   if( pLeft->op==TK_COLUMN",
          "4212:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4213:    && sqlite3ExprIsConstant(pRight)",
          "4214:    && sqlite3ExprAffinity(pRight)==0",
          "4215:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4216:   ){",
          "4217:     constInsert(pConst, pLeft, pRight);",
          "",
          "[Added Lines]",
          "4218:   if( pRight->op==TK_COLUMN && sqlite3ExprIsConstant(pLeft) ){",
          "4219:     constInsert(pConst,pRight,pLeft,pExpr);",
          "4220:   }",
          "4221:   if( pLeft->op==TK_COLUMN && sqlite3ExprIsConstant(pRight) ){",
          "4222:     constInsert(pConst,pLeft,pRight,pExpr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "375b0b014b3f64ddb4ff705f3b7f5bc1ed08db3d",
      "candidate_info": {
        "commit_hash": "375b0b014b3f64ddb4ff705f3b7f5bc1ed08db3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/375b0b014b3f64ddb4ff705f3b7f5bc1ed08db3d",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhancements to the incremental build support for MSVC.\n\nFossilOrigin-Name: 2e25d915bcb8d6f1747f9befdef64d2e0e495cc6c5948a8eff5d0097b6613d06",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496: # All source code files.",
          "1497: #",
          "1500: # Source code to the test files.",
          "1501: #",
          "",
          "[Removed Lines]",
          "1498: SRC = $(SRC00) $(SRC01) $(SRC03) $(SRC04) $(SRC05) $(SRC06) $(SRC07) $(SRC08) $(SRC09) $(SRC10) $(SRC11)",
          "",
          "[Added Lines]",
          "1498: SRC = $(SRC00) $(SRC01) $(SRC03) $(SRC04) $(SRC05) $(SRC06) $(SRC07) $(SRC08) $(SRC09) $(SRC10) $(SRC11) $(SRC12)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1846:  for %i in ($(SRC11)) do copy /Y %i tsrc",
          "1847:  for %i in ($(SRC12)) do copy /Y %i tsrc",
          "1848:  copy /Y fts5.c tsrc",
          "1849:  copy /Y fts5.h tsrc",
          "1850:  del /Q tsrc\\sqlite.h.in tsrc\\parse.y 2>NUL",
          "1851:  $(TCLSH_CMD) $(TOP)\\tool\\vdbe-compress.tcl $(OPTS) < tsrc\\vdbe.c > vdbe.new",
          "1852:  move vdbe.new tsrc\\vdbe.c",
          "1853:  echo > .target_source",
          "1856:  $(TCLSH_CMD) $(MKSQLITE3C_TOOL) $(MKSQLITE3C_ARGS)",
          "1859: sqlite3-all.c: sqlite3.c $(TOP)\\tool\\split-sqlite3c.tcl",
          "1860:  $(TCLSH_CMD) $(TOP)\\tool\\split-sqlite3c.tcl",
          "",
          "[Removed Lines]",
          "1855: sqlite3.c: .target_source sqlite3ext.h $(MKSQLITE3C_TOOL)",
          "1857:  copy $(TOP)\\ext\\session\\sqlite3session.h .",
          "",
          "[Added Lines]",
          "1849:  copy /B tsrc\\fts5.c +,,",
          "1851:  copy /B tsrc\\fts5.h +,,",
          "1857: sqlite3.c: .target_source sqlite3ext.h sqlite3session.h $(MKSQLITE3C_TOOL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1869: # Rules to build the LEMON compiler generator",
          "1870: #",
          "1871: lempar.c: $(TOP)\\tool\\lempar.c",
          "1874: lemon.exe: $(TOP)\\tool\\lemon.c lempar.c",
          "1875:  $(BCC) $(NO_WARN) -Daccess=_access \\",
          "",
          "[Removed Lines]",
          "1872:  copy $(TOP)\\tool\\lempar.c .",
          "",
          "[Added Lines]",
          "1873:  copy /Y $(TOP)\\tool\\lempar.c .",
          "1874:  copy /B lempar.c +,,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2170: parse.c: $(TOP)\\src\\parse.y lemon.exe",
          "2171:  del /Q parse.y parse.h parse.h.temp 2>NUL",
          "2173:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S parse.y",
          "2175: $(SQLITE3H): $(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION",
          "",
          "[Removed Lines]",
          "2172:  copy $(TOP)\\src\\parse.y .",
          "",
          "[Added Lines]",
          "2174:  copy /Y $(TOP)\\src\\parse.y .",
          "2175:  copy /B parse.y +,,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2182:  copy /Y sqlite3ext.h tsrc\\sqlite3ext.h",
          "2183: !ELSE",
          "2184:  copy /Y tsrc\\sqlite3ext.h sqlite3ext.h",
          "2185: !ENDIF",
          "2187: mkkeywordhash.exe: $(TOP)\\tool\\mkkeywordhash.c",
          "2188:  $(BCC) $(NO_WARN) -Fe$@ $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) \\",
          "2189:   $(TOP)\\tool\\mkkeywordhash.c /link $(LDFLAGS) $(NLTLINKOPTS) $(NLTLIBPATHS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2188:  copy /B sqlite3ext.h +,,",
          "2191: sqlite3session.h: $(TOP)\\ext\\session\\sqlite3session.h",
          "2192:  copy /Y $(TOP)\\ext\\session\\sqlite3session.h .",
          "2193:  copy /B sqlite3session.h +,,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2198:  $(TOP)\\ext\\misc\\shathree.c \\",
          "2199:  $(TOP)\\ext\\misc\\fileio.c \\",
          "2200:  $(TOP)\\ext\\misc\\completion.c \\",
          "2202:  $(TOP)\\ext\\expert\\sqlite3expert.c \\",
          "2203:  $(TOP)\\ext\\expert\\sqlite3expert.h \\",
          "2204:  $(TOP)\\ext\\misc\\memtrace.c \\",
          "",
          "[Removed Lines]",
          "2201:         $(TOP)\\ext\\misc\\uint.c \\",
          "",
          "[Added Lines]",
          "2209:  $(TOP)\\ext\\misc\\uint.c \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2329:    $(TOP)\\ext\\lsm1\\lsm_win32.c",
          "2331: fts5parse.c: $(TOP)\\ext\\fts5\\fts5parse.y lemon.exe",
          "2333:  del /Q fts5parse.h 2>NUL",
          "2334:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S fts5parse.y",
          "",
          "[Removed Lines]",
          "2332:  copy $(TOP)\\ext\\fts5\\fts5parse.y .",
          "",
          "[Added Lines]",
          "2340:  copy /Y $(TOP)\\ext\\fts5\\fts5parse.y .",
          "2341:  copy /B fts5parse.y +,,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2338: fts5.c: $(FTS5_SRC)",
          "2339:  $(TCLSH_CMD) $(TOP)\\ext\\fts5\\tool\\mkfts5c.tcl",
          "2342: lsm1.c: $(LSM1_SRC)",
          "2343:  $(TCLSH_CMD) $(TOP)\\ext\\lsm1\\tool\\mklsm1c.tcl",
          "2346: fts5.lo: fts5.c $(HDR) $(EXTHDR)",
          "2347:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c fts5.c",
          "",
          "[Removed Lines]",
          "2340:  copy $(TOP)\\ext\\fts5\\fts5.h .",
          "2344:  copy $(TOP)\\ext\\lsm1\\lsm.h .",
          "",
          "[Added Lines]",
          "2349:  copy /Y $(TOP)\\ext\\fts5\\fts5.h .",
          "2350:  copy /B fts5.h +,,",
          "2354:  copy /Y $(TOP)\\ext\\lsm1\\lsm.h .",
          "2355:  copy /B lsm.h +,,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5865d2f2d0333024366ecf1d919535fd4ec05c637feff16d75028ccdc8db4b50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c947d6a4dcdfe6f0185a22464cf97153cabb8052",
      "candidate_info": {
        "commit_hash": "c947d6a4dcdfe6f0185a22464cf97153cabb8052",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c947d6a4dcdfe6f0185a22464cf97153cabb8052",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c"
        ],
        "message": "Fix an issue where malloc could be used to fulfill a small allocation when a large lookaside slot could have beeen used instead.\n\nFossilOrigin-Name: 611020e3378f4c81c277cccd84807ae51a816bbab6c3d887c91c5e5af3b5225f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d3783357f8fa76c42a86f12b214522f0388c37773c36ab8c5ce0623abbc4436a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:       return db->mallocFailed ? 0 : dbMallocRawFinish(db, n);",
          "583:     }",
          "584:     db->lookaside.anStat[1]++;",
          "585: # ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "587:     if( (pBuf = db->lookaside.pMiniFree)!=0 ){",
          "588:       db->lookaside.pMiniFree = pBuf->pNext;",
          "589:       db->lookaside.anStat[0]++;",
          "",
          "[Removed Lines]",
          "586:   }else if( n<=MINI_SZ ){",
          "",
          "[Added Lines]",
          "585:     return dbMallocRawFinish(db, n);",
          "586:   }",
          "588:   if( n<=MINI_SZ ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:       db->lookaside.anStat[0]++;",
          "594:       return (void*)pBuf;",
          "595:     }",
          "596: # endif",
          "598:     db->lookaside.pFree = pBuf->pNext;",
          "599:     db->lookaside.anStat[0]++;",
          "600:     return (void*)pBuf;",
          "",
          "[Removed Lines]",
          "597:   }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "",
          "[Added Lines]",
          "598:   }",
          "600:   if( (pBuf = db->lookaside.pFree)!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aef2fb1b43eb391472b74174cdbae69241ecf8d",
      "candidate_info": {
        "commit_hash": "3aef2fb1b43eb391472b74174cdbae69241ecf8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3aef2fb1b43eb391472b74174cdbae69241ecf8d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Have the OP_ReleaseReg opcode also invalidate the registers if P5 is non-zero.\n\nFossilOrigin-Name: 937be22106f7e3f08712febd342d6cb81d129f2d5ab24ce80b3a5c3f9bbde54e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e782096aa06fcf410c3a0a6ee26a9e4f44333da39b28b2efe675814a8652911a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4140:         if( constMask==0 ){",
          "4141:           sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "4142:         }else{",
          "4144:         }",
          "4145:       }",
          "4146:       return target;",
          "",
          "[Removed Lines]",
          "4143:           sqlite3VdbeReleaseRegisters(pParse, r1, nFarg, constMask);",
          "",
          "[Added Lines]",
          "4143:           sqlite3VdbeReleaseRegisters(pParse, r1, nFarg, constMask, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5800: void sqlite3ReleaseTempReg(Parse *pParse, int iReg){",
          "5801:   if( iReg ){",
          "5803:     if( pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5804:       pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "5805:     }",
          "",
          "[Removed Lines]",
          "5802:     sqlite3VdbeReleaseRegisters(pParse, iReg, 1, 0);",
          "",
          "[Added Lines]",
          "5802:     sqlite3VdbeReleaseRegisters(pParse, iReg, 1, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5828:     sqlite3ReleaseTempReg(pParse, iReg);",
          "5829:     return;",
          "5830:   }",
          "5832:   if( nReg>pParse->nRangeReg ){",
          "5833:     pParse->nRangeReg = nReg;",
          "5834:     pParse->iRangeReg = iReg;",
          "",
          "[Removed Lines]",
          "5831:   sqlite3VdbeReleaseRegisters(pParse, iReg, nReg, 0);",
          "",
          "[Added Lines]",
          "5831:   sqlite3VdbeReleaseRegisters(pParse, iReg, nReg, 0, 0);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1024:     addrInsTop = addrCont = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);",
          "1025:     VdbeCoverage(v);",
          "1026:     if( ipkColumn>=0 ){",
          "",
          "[Removed Lines]",
          "1023:     sqlite3VdbeReleaseRegisters(pParse, regData, pTab->nCol, 0);",
          "",
          "[Added Lines]",
          "1023:     sqlite3VdbeReleaseRegisters(pParse, regData, pTab->nCol, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1976:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1977:     }",
          "1978: #endif",
          "",
          "[Removed Lines]",
          "1979:     sqlite3VdbeReleaseRegisters(pParse, regIdx, pIdx->nColumn, 0);",
          "",
          "[Added Lines]",
          "1979:     sqlite3VdbeReleaseRegisters(pParse, regIdx, pIdx->nColumn, 0, 0);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7850:   for(i=0; i<pOp->p2; i++, pMem++){",
          "7851:     if( i>=32 || (constMask & MASKBIT32(i))==0 ){",
          "7852:       pMem->pScopyFrom = 0;",
          "7854:     }",
          "7855:   }",
          "7856:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7855:       if( i<32 && pOp->p5 ) MemSetTypeFlag(pMem, MEM_Undefined);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: int sqlite3VdbeChangeToNoop(Vdbe*, int addr);",
          "234: int sqlite3VdbeDeletePriorOpcode(Vdbe*, u8 op);",
          "235: #ifdef SQLITE_DEBUG",
          "237: #else",
          "239: #endif",
          "240: void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);",
          "241: void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);",
          "",
          "[Removed Lines]",
          "236:   void sqlite3VdbeReleaseRegisters(Parse*,int addr, int n, u32 mask);",
          "238: # define sqlite3VdbeReleaseRegisters(P,A,N,M)",
          "",
          "[Added Lines]",
          "236:   void sqlite3VdbeReleaseRegisters(Parse*,int addr, int n, u32 mask, int);",
          "238: # define sqlite3VdbeReleaseRegisters(P,A,N,M,F)",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1202:   assert( pParse->pVdbe );",
          "1203:   while( N>0 && (mask&1)!=0 ){",
          "1204:     mask >>= 1;",
          "1205:     iFirst++;",
          "",
          "[Removed Lines]",
          "1201: void sqlite3VdbeReleaseRegisters(Parse *pParse, int iFirst, int N, u32 mask){",
          "",
          "[Added Lines]",
          "1201: void sqlite3VdbeReleaseRegisters(",
          "1207: ){",
          "1208:   if( N==0 ) return;",
          "1210:   assert( iFirst>=1 );",
          "1211:   assert( iFirst+N-1<=pParse->nMem );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1211:   }",
          "1212:   if( N>0 ){",
          "1213:     sqlite3VdbeAddOp3(pParse->pVdbe, OP_ReleaseReg, iFirst, N, *(int*)&mask);",
          "1214:   }",
          "1215: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:     if( bUndefine ) sqlite3VdbeChangeP5(pParse->pVdbe, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
      "candidate_info": {
        "commit_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/gencol1.test"
        ],
        "message": "Add a few simple TCL test cases for generated columns.  (Full test coverage of the generated column logic is provided separately by TH3.)\n\nFossilOrigin-Name: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: foreach {tn schema} {",
          "28: 1 {",
          "29:    CREATE TABLE t1(",
          "30:      a INT,",
          "31:      b TEXT,",
          "32:      c ANY,",
          "33:      w INT GENERATED ALWAYS AS (a*10),",
          "34:      x TEXT AS (typeof(c)),",
          "35:      y TEXT AS (substr(b,a,a+2))",
          "36:    );",
          "37:   }",
          "38: 2 {",
          "39:    CREATE TABLE t1(",
          "40:      w INT GENERATED ALWAYS AS (a*10),",
          "41:      x TEXT AS (typeof(c)),",
          "42:      y TEXT AS (substr(b,a,a+2)),",
          "43:      a INT,",
          "44:      b TEXT,",
          "45:      c ANY",
          "46:    );",
          "47:   }",
          "48: 3 {",
          "49:    CREATE TABLE t1(",
          "50:      w INT GENERATED ALWAYS AS (a*10),",
          "51:      a INT,",
          "52:      x TEXT AS (typeof(c)) STORED,",
          "53:      b TEXT,",
          "54:      y TEXT AS (substr(b,a,a+2)),",
          "55:      c ANY",
          "56:    );",
          "57:   }",
          "58: 4 {",
          "59:    CREATE TABLE t1(",
          "60:      a INTEGER PRIMARY KEY,",
          "61:      w INT GENERATED ALWAYS AS (a*10),",
          "62:      b TEXT,",
          "63:      x TEXT AS (typeof(c)),",
          "64:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "65:      c ANY",
          "66:    );",
          "67:   }",
          "68: 5 {",
          "69:    CREATE TABLE t1(",
          "70:      w INT GENERATED ALWAYS AS (a*10),",
          "71:      a INT,",
          "72:      x TEXT AS (typeof(c)),",
          "73:      b TEXT,",
          "74:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "75:      c ANY,",
          "76:      PRIMARY KEY(a,b)",
          "77:    ) WITHOUT ROWID;",
          "78:   }",
          "79: 6 {",
          "80:    CREATE TABLE t1(",
          "81:      w INT GENERATED ALWAYS AS (m*5),",
          "82:      m INT AS (a*2) STORED,",
          "83:      a INT,",
          "84:      x TEXT AS (typeof(c)),",
          "85:      b TEXT,",
          "86:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "87:      c ANY,",
          "88:      PRIMARY KEY(a,b)",
          "89:    );",
          "90:   }",
          "91: 7 {",
          "92:    CREATE TABLE t1(",
          "93:      w INT GENERATED ALWAYS AS (m*5),",
          "94:      m INT AS (a*2) NOT NULL,",
          "95:      a INT,",
          "96:      x TEXT AS (typeof(c)) CHECK (x<>'blank'),",
          "97:      b TEXT,",
          "98:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "99:      c ANY,",
          "100:      PRIMARY KEY(b,a)",
          "101:    ) WITHOUT ROWID;",
          "102:   }",
          "103: } {",
          "104:   catch {db close}",
          "105:   sqlite3 db :memory:",
          "106:   db eval $schema",
          "107:   do_execsql_test gencol1-2.$tn.100 {",
          "108:     INSERT INTO t1(a,b,c) VALUES(1,'abcdef',5.5),(3,'cantaloupe',NULL);",
          "109:     SELECT w, x, y, '|' FROM t1 ORDER BY a;",
          "110:   } {10 real abc | 30 null ntalo |}",
          "111:   do_execsql_test gencol1-2.$tn.101 {",
          "112:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "113:   } {10 real abc | 30 null ntalo |}",
          "114:   do_execsql_test gencol1-2.$tn.102 {",
          "115:     SELECT a FROM t1 WHERE w=30;",
          "116:   } {3}",
          "117:   do_execsql_test gencol1-2.$tn.103 {",
          "118:     SELECT a FROM t1 WHERE x='real';",
          "119:   } {1}",
          "120:   do_execsql_test gencol1-2.$tn.104 {",
          "121:     SELECT a FROM t1 WHERE y LIKE '%tal%' OR x='real' ORDER BY b;",
          "122:   } {1 3}",
          "123:   do_execsql_test gencol1-2.$tn.110 {",
          "124:     CREATE INDEX t1w ON t1(w);",
          "125:     SELECT a FROM t1 WHERE w=10;",
          "126:   } {1}",
          "127:   do_execsql_test gencol1-2.$tn.120 {",
          "128:     CREATE INDEX t1x ON t1(x) WHERE w BETWEEN 20 AND 40;",
          "129:     SELECT a FROM t1 WHERE x='null' AND w BETWEEN 20 AND 40;",
          "130:   } {3}",
          "131:   do_execsql_test gencol1-2.$tn.121 {",
          "132:     SELECT a FROM t1 WHERE x='real';",
          "133:   } {1}",
          "134:   do_execsql_test gencol1-2.$tn.130 {",
          "135:     VACUUM;",
          "136:     PRAGMA integrity_check;",
          "137:   } {ok}",
          "138:   do_execsql_test gencol1-2.$tn.140 {",
          "139:     UPDATE t1 SET a=a+100 WHERE w<20;",
          "140:     SELECT a, w, '|' FROM t1 ORDER BY w;",
          "141:   } {3 30 | 101 1010 |}",
          "142:   do_execsql_test gencol1-2.$tn.150 {",
          "143:     INSERT INTO t1 VALUES(4,'jambalaya','Chef John'),(15,87719874135,0);",
          "144:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}