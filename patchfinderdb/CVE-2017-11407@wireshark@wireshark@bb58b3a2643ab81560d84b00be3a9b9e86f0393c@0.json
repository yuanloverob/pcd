{
  "cve_id": "CVE-2017-11407",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.7 and 2.0.0 to 2.0.13, the MQ dissector could crash. This was addressed in epan/dissectors/packet-mq.c by validating the fragment length before a reassembly attempt.",
  "repo": "wireshark/wireshark",
  "patch_hash": "bb58b3a2643ab81560d84b00be3a9b9e86f0393c",
  "patch_info": {
    "commit_hash": "bb58b3a2643ab81560d84b00be3a9b9e86f0393c",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/bb58b3a2643ab81560d84b00be3a9b9e86f0393c",
    "files": [
      "epan/dissectors/packet-mq.c"
    ],
    "message": "MQ: check fragment length before trying to perform reassembly\n\nBug: 13792\nChange-Id: Id0c116655288c5a3347911281a932ae80250c24f\nReviewed-on: https://code.wireshark.org/review/22233\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c": [
      "File: epan/dissectors/packet-mq.c -> epan/dissectors/packet-mq.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "78: #include <epan/ptvcursor.h>",
      "79: #include <epan/exceptions.h>",
      "80: #include <epan/reassemble.h>",
      "82: #include <epan/prefs.h>",
      "83: #include <epan/strutil.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "961: static gint ett_mq_structid = -1;",
      "963: static dissector_handle_t mq_handle;",
      "964: static dissector_handle_t mq_spx_handle;",
      "965: static dissector_handle_t mqpcf_handle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "963: static expert_field ei_mq_reassembly_error = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3922:                 fragment_head *fd_head;",
      "3923:                 guint32 iConnectionId = (pinfo->srcport + pinfo->destport);",
      "3924:                 iHdrL = 28 + iMulS;",
      "3927:                 iHdl = tvb_get_guint32(tvb, iHdrL + 4, iEnco);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3927:                 gboolean reassembly_error = FALSE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3956:                 iBegL = (bSeg1st) ? 0 : iNxtP;",
      "3963:                 if (tree)",
      "3964:                 {",
      "",
      "[Removed Lines]",
      "3958:                 fd_head = fragment_add_seq_next(&mq_reassembly_table,",
      "3959:                     tvb, iBegL,",
      "3960:                     pinfo, iConnectionId, NULL,",
      "3961:                     iSegL - iBegL, bMore);",
      "",
      "[Added Lines]",
      "3961:                 if (iSegL <= iBegL) {",
      "3963:                     fd_head = NULL;",
      "3964:                     reassembly_error = TRUE;",
      "3965:                 } else {",
      "3966:                     fd_head = fragment_add_seq_next(&mq_reassembly_table,",
      "3967:                         tvb, iBegL,",
      "3968:                         pinfo, iConnectionId, NULL,",
      "3969:                         iSegL - iBegL, bMore);",
      "3970:                 }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3979:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
      "3980:                             iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
      "3981:                     }",
      "3982:                     mq_tree = proto_item_add_subtree(ti, ett_mq_reaasemb);",
      "3983:                 }",
      "3984:                 else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3991:                     if (reassembly_error)",
      "3992:                     {",
      "3993:                         expert_add_info_format(pinfo, ti, &ei_mq_reassembly_error,",
      "3994:                                                \"Wrong fragment length (%d) - skipping reassembly\", iSegL - iBegL);",
      "3995:                     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4766:     };",
      "4768:     module_t *mq_module;",
      "4770:     proto_mq = proto_register_protocol(\"WebSphere MQ\", \"MQ\", \"mq\");",
      "4771:     proto_register_field_array(proto_mq, hf, array_length(hf));",
      "4772:     proto_register_subtree_array(ett, array_length(ett));",
      "4774:     mq_heur_subdissector_list = register_heur_dissector_list(\"mq\", proto_mq);",
      "4776:     reassembly_table_register(&mq_reassembly_table,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4783:     expert_module_t *expert_mq;",
      "4785:     static ei_register_info ei[] = {",
      "4786:         { &ei_mq_reassembly_error, { \"mq.reassembly_error\",",
      "4787:           PI_REASSEMBLE, PI_ERROR, \"Reassembly error\", EXPFILL }}",
      "4788:     };",
      "4794:     expert_mq = expert_register_protocol(proto_mq);",
      "4795:     expert_register_field_array(expert_mq, ei, array_length(ei));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8fcd725bb6bcf48c7bc91df1127fe3364b2f0730",
      "candidate_info": {
        "commit_hash": "8fcd725bb6bcf48c7bc91df1127fe3364b2f0730",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8fcd725bb6bcf48c7bc91df1127fe3364b2f0730",
        "files": [
          "epan/dissectors/packet-mq.c"
        ],
        "message": "MQ: check fragment length before trying to perform reassembly\n\nBug: 13792\nChange-Id: Id0c116655288c5a3347911281a932ae80250c24f\nReviewed-on: https://code.wireshark.org/review/22233\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit bb58b3a2643ab81560d84b00be3a9b9e86f0393c)\n Conflicts:\n\tepan/dissectors/packet-mq.c\nReviewed-on: https://code.wireshark.org/review/22253\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c": [
          "File: epan/dissectors/packet-mq.c -> epan/dissectors/packet-mq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: #include <epan/ptvcursor.h>",
          "72: #include <epan/exceptions.h>",
          "73: #include <epan/reassemble.h>",
          "75: #include <epan/prefs.h>",
          "76: #include <epan/strutil.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "949: static gint ett_mq_structid = -1;",
          "951: static dissector_handle_t mq_tcp_handle;",
          "952: static dissector_handle_t mq_spx_handle;",
          "953: static dissector_handle_t data_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951: static expert_field ei_mq_reassembly_error = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3905:                 fragment_head *fd_head;",
          "3906:                 guint32 iConnectionId = (pinfo->srcport + pinfo->destport);",
          "3907:                 iHdrL = 28 + iMulS;",
          "3910:                 iHdl = tvb_get_guint32(tvb, iHdrL + 4, iEnco);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3910:                 gboolean reassembly_error = FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3939:                 iBegL = (bSeg1st) ? 0 : iNxtP;",
          "3946:                 if (tree)",
          "3947:                 {",
          "",
          "[Removed Lines]",
          "3941:                 fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3942:                     tvb, iBegL,",
          "3943:                     pinfo, iConnectionId, NULL,",
          "3944:                     iSegL - iBegL, bMore);",
          "",
          "[Added Lines]",
          "3944:                 if (iSegL <= iBegL) {",
          "3946:                     fd_head = NULL;",
          "3947:                     reassembly_error = TRUE;",
          "3948:                 } else {",
          "3949:                     fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3950:                         tvb, iBegL,",
          "3951:                         pinfo, iConnectionId, NULL,",
          "3952:                         iSegL - iBegL, bMore);",
          "3953:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3962:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3963:                             iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "3964:                     }",
          "3965:                     mq_tree = proto_item_add_subtree(ti, ett_mq_reaasemb);",
          "3966:                 }",
          "3967:                 else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3974:                     if (reassembly_error)",
          "3975:                     {",
          "3976:                         expert_add_info_format(pinfo, ti, &ei_mq_reassembly_error,",
          "3977:                                                \"Wrong fragment length (%d) - skipping reassembly\", iSegL - iBegL);",
          "3978:                     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4751:     };",
          "4753:     module_t *mq_module;",
          "4755:     proto_mq = proto_register_protocol(\"WebSphere MQ\", \"MQ\", \"mq\");",
          "4756:     proto_register_field_array(proto_mq, hf, array_length(hf));",
          "4757:     proto_register_subtree_array(ett, array_length(ett));",
          "4759:     mq_heur_subdissector_list = register_heur_dissector_list(\"mq\");",
          "4760:     register_init_routine(mq_init);",
          "4761:     register_cleanup_routine(mq_cleanup);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4768:     expert_module_t *expert_mq;",
          "4770:     static ei_register_info ei[] = {",
          "4771:         { &ei_mq_reassembly_error, { \"mq.reassembly_error\",",
          "4772:           PI_REASSEMBLE, PI_ERROR, \"Reassembly error\", EXPFILL }}",
          "4773:     };",
          "4779:     expert_mq = expert_register_protocol(proto_mq);",
          "4780:     expert_register_field_array(expert_mq, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e54dae7f0d7840836ee6d5ce1e688f152ab2978",
      "candidate_info": {
        "commit_hash": "4e54dae7f0d7840836ee6d5ce1e688f152ab2978",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4e54dae7f0d7840836ee6d5ce1e688f152ab2978",
        "files": [
          "epan/dissectors/packet-mq.c"
        ],
        "message": "MQ: check fragment length before trying to perform reassembly\n\nBug: 13792\nChange-Id: Id0c116655288c5a3347911281a932ae80250c24f\nReviewed-on: https://code.wireshark.org/review/22233\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit bb58b3a2643ab81560d84b00be3a9b9e86f0393c)\nReviewed-on: https://code.wireshark.org/review/22252\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c": [
          "File: epan/dissectors/packet-mq.c -> epan/dissectors/packet-mq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: #include <epan/ptvcursor.h>",
          "72: #include <epan/exceptions.h>",
          "73: #include <epan/reassemble.h>",
          "75: #include <epan/prefs.h>",
          "76: #include <epan/strutil.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "950: static gint ett_mq_structid = -1;",
          "952: static dissector_handle_t mq_handle;",
          "953: static dissector_handle_t mq_spx_handle;",
          "954: static dissector_handle_t mqpcf_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952: static expert_field ei_mq_reassembly_error = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3900:                 fragment_head *fd_head;",
          "3901:                 guint32 iConnectionId = (pinfo->srcport + pinfo->destport);",
          "3902:                 iHdrL = 28 + iMulS;",
          "3905:                 iHdl = tvb_get_guint32(tvb, iHdrL + 4, iEnco);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3905:                 gboolean reassembly_error = FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3934:                 iBegL = (bSeg1st) ? 0 : iNxtP;",
          "3941:                 if (tree)",
          "3942:                 {",
          "",
          "[Removed Lines]",
          "3936:                 fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3937:                     tvb, iBegL,",
          "3938:                     pinfo, iConnectionId, NULL,",
          "3939:                     iSegL - iBegL, bMore);",
          "",
          "[Added Lines]",
          "3939:                 if (iSegL <= iBegL) {",
          "3941:                     fd_head = NULL;",
          "3942:                     reassembly_error = TRUE;",
          "3943:                 } else {",
          "3944:                     fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3945:                         tvb, iBegL,",
          "3946:                         pinfo, iConnectionId, NULL,",
          "3947:                         iSegL - iBegL, bMore);",
          "3948:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3957:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3958:                             iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "3959:                     }",
          "3960:                     mq_tree = proto_item_add_subtree(ti, ett_mq_reaasemb);",
          "3961:                 }",
          "3962:                 else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3969:                     if (reassembly_error)",
          "3970:                     {",
          "3971:                         expert_add_info_format(pinfo, ti, &ei_mq_reassembly_error,",
          "3972:                                                \"Wrong fragment length (%d) - skipping reassembly\", iSegL - iBegL);",
          "3973:                     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4751:     };",
          "4753:     module_t *mq_module;",
          "4755:     proto_mq = proto_register_protocol(\"WebSphere MQ\", \"MQ\", \"mq\");",
          "4756:     proto_register_field_array(proto_mq, hf, array_length(hf));",
          "4757:     proto_register_subtree_array(ett, array_length(ett));",
          "4759:     mq_heur_subdissector_list = register_heur_dissector_list(\"mq\", proto_mq);",
          "4760:     register_init_routine(mq_init);",
          "4761:     register_cleanup_routine(mq_cleanup);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4768:     expert_module_t *expert_mq;",
          "4770:     static ei_register_info ei[] = {",
          "4771:         { &ei_mq_reassembly_error, { \"mq.reassembly_error\",",
          "4772:           PI_REASSEMBLE, PI_ERROR, \"Reassembly error\", EXPFILL }}",
          "4773:     };",
          "4779:     expert_mq = expert_register_protocol(proto_mq);",
          "4780:     expert_register_field_array(expert_mq, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c558379e4592b78d3010a7fbbdc4e61579984760",
      "candidate_info": {
        "commit_hash": "c558379e4592b78d3010a7fbbdc4e61579984760",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c558379e4592b78d3010a7fbbdc4e61579984760",
        "files": [
          "epan/dissectors/packet-mq.c"
        ],
        "message": "MQ: check fragment length before trying to perform reassembly\n\nBug: 13792\nChange-Id: Id0c116655288c5a3347911281a932ae80250c24f\nReviewed-on: https://code.wireshark.org/review/22233\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit bb58b3a2643ab81560d84b00be3a9b9e86f0393c)\nReviewed-on: https://code.wireshark.org/review/22251\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c": [
          "File: epan/dissectors/packet-mq.c -> epan/dissectors/packet-mq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #include <epan/ptvcursor.h>",
          "79: #include <epan/exceptions.h>",
          "80: #include <epan/reassemble.h>",
          "82: #include <epan/prefs.h>",
          "83: #include <epan/strutil.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "961: static gint ett_mq_structid = -1;",
          "963: static dissector_handle_t mq_handle;",
          "964: static dissector_handle_t mq_spx_handle;",
          "965: static dissector_handle_t mqpcf_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963: static expert_field ei_mq_reassembly_error = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3922:                 fragment_head *fd_head;",
          "3923:                 guint32 iConnectionId = (pinfo->srcport + pinfo->destport);",
          "3924:                 iHdrL = 28 + iMulS;",
          "3927:                 iHdl = tvb_get_guint32(tvb, iHdrL + 4, iEnco);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3927:                 gboolean reassembly_error = FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3956:                 iBegL = (bSeg1st) ? 0 : iNxtP;",
          "3963:                 if (tree)",
          "3964:                 {",
          "",
          "[Removed Lines]",
          "3958:                 fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3959:                     tvb, iBegL,",
          "3960:                     pinfo, iConnectionId, NULL,",
          "3961:                     iSegL - iBegL, bMore);",
          "",
          "[Added Lines]",
          "3961:                 if (iSegL <= iBegL) {",
          "3963:                     fd_head = NULL;",
          "3964:                     reassembly_error = TRUE;",
          "3965:                 } else {",
          "3966:                     fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3967:                         tvb, iBegL,",
          "3968:                         pinfo, iConnectionId, NULL,",
          "3969:                         iSegL - iBegL, bMore);",
          "3970:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3979:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3980:                             iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "3981:                     }",
          "3982:                     mq_tree = proto_item_add_subtree(ti, ett_mq_reaasemb);",
          "3983:                 }",
          "3984:                 else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3991:                     if (reassembly_error)",
          "3992:                     {",
          "3993:                         expert_add_info_format(pinfo, ti, &ei_mq_reassembly_error,",
          "3994:                                                \"Wrong fragment length (%d) - skipping reassembly\", iSegL - iBegL);",
          "3995:                     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4766:     };",
          "4768:     module_t *mq_module;",
          "4770:     proto_mq = proto_register_protocol(\"WebSphere MQ\", \"MQ\", \"mq\");",
          "4771:     proto_register_field_array(proto_mq, hf, array_length(hf));",
          "4772:     proto_register_subtree_array(ett, array_length(ett));",
          "4774:     mq_heur_subdissector_list = register_heur_dissector_list(\"mq\", proto_mq);",
          "4776:     reassembly_table_register(&mq_reassembly_table,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4783:     expert_module_t *expert_mq;",
          "4785:     static ei_register_info ei[] = {",
          "4786:         { &ei_mq_reassembly_error, { \"mq.reassembly_error\",",
          "4787:           PI_REASSEMBLE, PI_ERROR, \"Reassembly error\", EXPFILL }}",
          "4788:     };",
          "4794:     expert_mq = expert_register_protocol(proto_mq);",
          "4795:     expert_register_field_array(expert_mq, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "487eae350743ede43432ebef49268cc670d82fb2",
      "candidate_info": {
        "commit_hash": "487eae350743ede43432ebef49268cc670d82fb2",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/487eae350743ede43432ebef49268cc670d82fb2",
        "files": [
          "AUTHORS.src",
          "epan/dissectors/packet-mq-base.c",
          "epan/dissectors/packet-mq-pcf.c",
          "epan/dissectors/packet-mq.c",
          "epan/dissectors/packet-mq.h"
        ],
        "message": "packet-mq: Improve display of ID Struct + Segmented Msgs\n\nImprove display of ID Struct for FAP Lvl 13\nImprove display for Segmented MQ Mesages\nAdd also the ReasonCode of the ASYNCH_MESSAGE in column and tre node\nAdded various new CONST for display\n\nChange-Id: I458296e466d0744627e0b4f645d634b0c6d930de\nReviewed-on: https://code.wireshark.org/review/25009\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "AUTHORS.src||AUTHORS.src",
          "epan/dissectors/packet-mq-base.c||epan/dissectors/packet-mq-base.c",
          "epan/dissectors/packet-mq-pcf.c||epan/dissectors/packet-mq-pcf.c",
          "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c",
          "epan/dissectors/packet-mq.h||epan/dissectors/packet-mq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ]
        }
      },
      "candidate_diff": {
        "AUTHORS.src||AUTHORS.src": [
          "File: AUTHORS.src -> AUTHORS.src",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:  tfp (Tinkerforge) dissector",
          "3572: }",
          "3575:  IBM WebSphere MQ protocol dissector enhancements",
          "3576: }",
          "",
          "[Removed Lines]",
          "3574: RobiOneKenobi  <robionekenobi[AT]bluewin.ch> {",
          "",
          "[Added Lines]",
          "3574: Robert Grange  <robionekenobi[AT]bluewin.ch> {",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq-base.c||epan/dissectors/packet-mq-base.c": [
          "File: epan/dissectors/packet-mq-base.c -> epan/dissectors/packet-mq-base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "302: DEF_VALSB(EventRule)",
          "",
          "[Added Lines]",
          "303: DEF_VALSB(MQEVR)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459: DEF_VALSE;",
          "461: #if 0",
          "462: DEF_VALSB(MQLR)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462: DEF_VALSB(MQUCI)",
          "465: DEF_VALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "560: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "562: #if 0",
          "563: DEF_VALSB(AuthorityValues)",
          "",
          "[Added Lines]",
          "568: DEF_VALSB(MQAUTH)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590: DEF_VALSE;",
          "593: #if 0",
          "594: DEF_VALSB(BridgeTypes)",
          "",
          "[Removed Lines]",
          "591: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1032: DEF_VALSE;",
          "1035: DEF_VALSB(MQSECCOMM)",
          "1039: DEF_VALSE;",
          "1047: DEF_VALSE;",
          "1054: DEF_VALSE;",
          "1061: DEF_VALSE;",
          "1069: DEF_VALSE;",
          "1072: DEF_VALSB(InhibitPublications)",
          "",
          "[Removed Lines]",
          "1034: #if 0",
          "1040: #endif",
          "1042: #if 0",
          "1043: DEF_VALSB(LDAPAuthorisationMethod)",
          "1048: #endif",
          "1050: #if 0",
          "1051: DEF_VALSB(LDAPNestedGroupPolicy)",
          "1055: #endif",
          "1057: #if 0",
          "1058: DEF_VALSB(AuthenticationMethod)",
          "1062: #endif",
          "1064: #if 0",
          "1065: DEF_VALSB(QMgrLDAPConnectionStatus)",
          "1070: #endif",
          "",
          "[Added Lines]",
          "1044: DEF_VALSB(MQLDAP_AUTHORMD)",
          "1050: DEF_VALSB(MQLDAP_NESTGRP)",
          "1055: DEF_VALSB(MQAUTHENTICATE)",
          "1060: DEF_VALSB(MQLDAPC)",
          "1066: DEF_VALSB(MQZAET)",
          "1071: DEF_VALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1155: DEF_VALSE;",
          "1161: DEF_VALSE;",
          "1168: DEF_VALSE;",
          "1178: DEF_VALSE;",
          "1181: #if 0",
          "1182: DEF_VALSB(SubscriptionDestinationClass)",
          "",
          "[Removed Lines]",
          "1157: DEF_VALSB(DurableSubscriptions)",
          "1163: #if 0",
          "1164: DEF_VALSB(Durable)",
          "1169: #endif",
          "1171: #if 0",
          "1172: DEF_VALSB(SubscriptionTypes)",
          "1179: #endif",
          "",
          "[Added Lines]",
          "1158: DEF_VALSB(MQSUB_DURABLE)",
          "1165: DEF_VALSB(MQQSO)",
          "1171: DEF_VALSB(MQSUBTYPE)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1185: DEF_VALSE;",
          "1186: #endif",
          "1192: DEF_VALSE;",
          "1195: #if 0",
          "1196: DEF_VALSB(TimeUnits)",
          "",
          "[Removed Lines]",
          "1188: #if 0",
          "1189: DEF_VALSB(SubscriptionRequestOnly)",
          "1193: #endif",
          "",
          "[Added Lines]",
          "1186: DEF_VALSB(MQRU_PUBLISH)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1586: DEF_VALSE;",
          "1588: DEF_VALSB(SMDSUsage)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584: DEF_VALSB(MQCIT)",
          "1586: DEF_VALSE;",
          "1588: DEF_VALSB(MQMCB)",
          "1591: DEF_VALSE;",
          "1593: DEF_VALSB(MQNSH)",
          "1596: DEF_VALSE;",
          "1598: DEF_VALSB(MQPSST)",
          "1603: DEF_VALSE;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq-pcf.c||epan/dissectors/packet-mq-pcf.c": [
          "File: epan/dissectors/packet-mq-pcf.c -> epan/dissectors/packet-mq-pcf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: static int hf_mq_pcf_int64 = -1;",
          "81: static int hf_mq_pcf_int64list = -1;",
          "83: static expert_field ei_mq_pcf_prmln0 = EI_INIT;",
          "84: static expert_field ei_mq_pcf_MaxInt = EI_INIT;",
          "85: static expert_field ei_mq_pcf_MaxStr = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: static expert_field ei_mq_pcf_hdrlne = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     char    strPrm[256];",
          "165:     guint32 uTyp;",
          "166:     guint32 uLen = 0;",
          "167:     guint32 uPrm;",
          "168:     guint32 uCnt;",
          "169:     guint32 uCCS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:     guint32 uMax = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:     const char sMaxLst[] = \" Max # of List reached. DECODE interrupted   (actual %u of %u)\";",
          "176:     const char sPrmLn0[] = \" MQPrm[%3u] has a zero length. DECODE Failed (MQPrm Count: %u)\";",
          "177:     const char sMaxPrm[] = \" Max # of Parm reached. DECODE interrupted   (actual %u of %u)\";",
          "178:     const char sPrmCnt[] = \" Cnt=-1 and Length(%u) < 16. DECODE interrupted for elem %u\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:     const char sHdrLne[] = \" MQPrm[%3u] PCF Header not enough remaining bytes in pdu. DECODE Failed (MQPrm Count: %u)\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:     for (u = 0; u < uCount && u < mq_pcf_maxprm; u++)",
          "205:     {",
          "206:         tOfs = offset;",
          "207:         uTyp = tvb_get_guint32(tvb, offset    , bLittleEndian);",
          "208:         uLen = tvb_get_guint32(tvb, offset + 4, bLittleEndian);",
          "209:         if (uLen == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:         uMax = (guint)tvb_reported_length_remaining(tvb, tOfs);",
          "211:         if (uMax < 12)",
          "212:         {",
          "213:             proto_tree_add_expert_format(tree, pinfo, &ei_mq_pcf_hdrlne, tvb, offset, 12, sHdrLne, u + 1, uCount);",
          "214:             u = uCount;",
          "215:             break;",
          "216:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:             u = uCount;",
          "213:             break;",
          "214:         }",
          "215:         uPrm = tvb_get_guint32(tvb, offset + 8, bLittleEndian);",
          "216:         uLenF = 12;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:         uLen = MIN(uLen, uMax);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "676:     static ei_register_info ei[] =",
          "677:     {",
          "678:         { &ei_mq_pcf_prmln0, { \"mqpcf.parm.len0\"     , PI_MALFORMED, PI_ERROR, \"MQPCF Parameter length is 0\", EXPFILL }},",
          "679:         { &ei_mq_pcf_MaxInt, { \"mqpcf.parm.IntList\"  , PI_UNDECODED, PI_WARN , \"MQPCF Parameter Integer list exhausted\", EXPFILL }},",
          "680:         { &ei_mq_pcf_MaxStr, { \"mqpcf.parm.StrList\"  , PI_UNDECODED, PI_WARN , \"MQPCF Parameter String list exhausted\", EXPFILL }},",
          "681:         { &ei_mq_pcf_MaxI64, { \"mqpcf.parm.Int64List\", PI_UNDECODED, PI_WARN , \"MQPCF Parameter Int64 list exhausted\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692:         { &ei_mq_pcf_hdrlne, { \"mqpcf.parm.hdrlenerr\", PI_MALFORMED, PI_ERROR, \"MQPCF Header not enough bytes in pdu\", EXPFILL}},",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c": [
          "File: epan/dissectors/packet-mq.c -> epan/dissectors/packet-mq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: static int hf_mq_id_TraceId = -1;",
          "195: static int hf_mq_id_ProdId = -1;",
          "196: static int hf_mq_id_mqmid = -1;",
          "199: static int hf_mq_id_icf1_msgseq = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: static int hf_mq_id_pal = -1;",
          "198: static int hf_mq_id_r = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960: static gint ett_mq_xa_xid = -1;",
          "961: static gint ett_mq_xa_info = -1;",
          "962: static gint ett_mq_charv = -1;",
          "964: static gint ett_mq_notif = -1;",
          "966: static gint ett_mq_structid = -1;",
          "",
          "[Removed Lines]",
          "963: static gint ett_mq_reaasemb = -1;",
          "",
          "[Added Lines]",
          "965: static gint ett_mq_reassemb = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "979: static gboolean mq_in_reassembly = FALSE;",
          "981: static reassembly_table mq_reassembly_table;",
          "983: #define MQ_PORT_TCP    1414",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983: static guint32  mq_AsyMsgRsn;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2311: {",
          "2312:     guint8 iFAPLvl;",
          "2313:     gint   iSize;",
          "2315:     iFAPLvl = tvb_get_guint8(tvb, offset + 4);",
          "2317:     if (iFAPLvl < 4)",
          "2318:         iSize = 44;",
          "2320:         iSize = 102;",
          "2322:         iSize = 208;",
          "2324:     if (iSize != 0 && tvb_reported_length_remaining(tvb, offset) >= iSize)",
          "2325:     {",
          "",
          "[Removed Lines]",
          "2319:     else if (iFAPLvl < 10)",
          "2321:     else",
          "",
          "[Added Lines]",
          "2318:     gint   iPktSz;",
          "2320:     iPktSz = tvb_reported_length_remaining(tvb, offset);",
          "2325:     else if (iFAPLvl < 9)",
          "2327:     else if (iFAPLvl < 11)",
          "2329:     else",
          "2330:         iSize = 240;",
          "2331:     iSize = MIN(iSize, iPktSz);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2331:         {",
          "2332:             col_append_fstr(pinfo->cinfo, COL_INFO, \", CHL=%s\", sChannel);",
          "2333:         }",
          "2335:         {",
          "2336:             guint8 *sQMgr;",
          "2337:             sQMgr = tvb_get_string_enc(wmem_packet_scope(), tvb, offset + 48, 48, p_mq_parm->mq_str_enc);",
          "",
          "[Removed Lines]",
          "2334:         if (iFAPLvl >= 4)",
          "",
          "[Added Lines]",
          "2343:         if (iSize > 48)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2362:             proto_tree_add_item(mq_tree, hf_mq_id_SeqWrapVal , tvb, offset + 20,  4, p_mq_parm->mq_int_enc);",
          "2363:             proto_tree_add_item(mq_tree, hf_mq_id_channel    , tvb, offset + 24, 20, p_mq_parm->mq_str_enc);",
          "2366:             {",
          "2368:                 proto_tree_add_bitmask(mq_tree, tvb, offset + 44, hf_mq_id_icf2, ett_mq_id_icf2, pf_flds_icf2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "2365:             if (iFAPLvl >= 4)",
          "",
          "[Added Lines]",
          "2374:             if (iSize > 44)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2372:                 proto_tree_add_item(mq_tree, hf_mq_id_qmgrname  , tvb, offset +  48, 48, p_mq_parm->mq_str_enc);",
          "2373:                 proto_tree_add_item(mq_tree, hf_mq_id_HBInterval, tvb, offset +  96,  4, p_mq_parm->mq_int_enc);",
          "2374:                 proto_tree_add_item(mq_tree, hf_mq_id_EFLLength , tvb, offset + 100,  2, p_mq_parm->mq_int_enc);",
          "2376:                 {",
          "2378:                     proto_tree_add_bitmask(mq_tree, tvb, offset + 102, hf_mq_id_ief2, ett_mq_id_ief2, pf_flds_ief2, ENC_BIG_ENDIAN);",
          "2382:                     proto_tree_add_item(mq_tree, hf_mq_id_MsgCprsLst, tvb, offset + 106, 16, p_mq_parm->mq_int_enc);",
          "2388:                     proto_tree_add_bitmask(mq_tree, tvb, offset + 132, hf_mq_id_icf3, ett_mq_id_icf3, pf_flds_icf3, ENC_BIG_ENDIAN);",
          "2389:                     proto_tree_add_bitmask(mq_tree, tvb, offset + 133, hf_mq_id_Eicf3, ett_mq_id_eicf3, pf_flds_icf3, ENC_BIG_ENDIAN);",
          "2397:                 }",
          "2398:             }",
          "2399:         }",
          "",
          "[Removed Lines]",
          "2375:                 if (iFAPLvl >= 10)",
          "2379:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved1 , tvb, offset + 103,  1, ENC_BIG_ENDIAN);",
          "2381:                     proto_tree_add_item(mq_tree, hf_mq_id_HdrCprsLst, tvb, offset + 104,  2, p_mq_parm->mq_int_enc);",
          "2383:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved2 , tvb, offset + 122,  2, p_mq_parm->mq_int_enc);",
          "2384:                     proto_tree_add_item(mq_tree, hf_mq_id_SSLKeyRst , tvb, offset + 124,  4, p_mq_parm->mq_int_enc);",
          "2385:                     proto_tree_add_item(mq_tree, hf_mq_id_ConvBySkt , tvb, offset + 128,  4, p_mq_parm->mq_int_enc);",
          "2391:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved3, tvb, offset + 134,  2, p_mq_parm->mq_int_enc);",
          "2392:                     proto_tree_add_item(mq_tree, hf_mq_id_ProcessId, tvb, offset + 136,  4, p_mq_parm->mq_int_enc);",
          "2393:                     proto_tree_add_item(mq_tree, hf_mq_id_ThreadId , tvb, offset + 140,  4, p_mq_parm->mq_int_enc);",
          "2394:                     proto_tree_add_item(mq_tree, hf_mq_id_TraceId  , tvb, offset + 144,  4, p_mq_parm->mq_int_enc);",
          "2395:                     proto_tree_add_item(mq_tree, hf_mq_id_ProdId   , tvb, offset + 148, 12, p_mq_parm->mq_str_enc);",
          "2396:                     proto_tree_add_item(mq_tree, hf_mq_id_mqmid    , tvb, offset + 160, 48, p_mq_parm->mq_str_enc);",
          "",
          "[Added Lines]",
          "2384:                 if (iSize > 102)",
          "2388:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved1, tvb, offset + 103, 1, ENC_BIG_ENDIAN);",
          "2390:                     proto_tree_add_item(mq_tree, hf_mq_id_HdrCprsLst, tvb, offset + 104, 2, p_mq_parm->mq_int_enc);",
          "2392:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved2, tvb, offset + 122, 2, p_mq_parm->mq_int_enc);",
          "2393:                     proto_tree_add_item(mq_tree, hf_mq_id_SSLKeyRst, tvb, offset + 124, 4, p_mq_parm->mq_int_enc);",
          "2394:                     proto_tree_add_item(mq_tree, hf_mq_id_ConvBySkt, tvb, offset + 128, 4, p_mq_parm->mq_int_enc);",
          "2400:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved3, tvb, offset + 134, 2, p_mq_parm->mq_int_enc);",
          "2401:                     proto_tree_add_item(mq_tree, hf_mq_id_ProcessId, tvb, offset + 136, 4, p_mq_parm->mq_int_enc);",
          "2402:                     proto_tree_add_item(mq_tree, hf_mq_id_ThreadId, tvb, offset + 140, 4, p_mq_parm->mq_int_enc);",
          "2403:                     proto_tree_add_item(mq_tree, hf_mq_id_TraceId, tvb, offset + 144, 4, p_mq_parm->mq_int_enc);",
          "2404:                     proto_tree_add_item(mq_tree, hf_mq_id_ProdId, tvb, offset + 148, 12, p_mq_parm->mq_str_enc);",
          "2405:                 }",
          "2406:                 if (iSize > 160)",
          "2407:                 {",
          "2408:                     proto_tree_add_item(mq_tree, hf_mq_id_mqmid, tvb, offset + 160, 48, p_mq_parm->mq_str_enc);",
          "2409:                 }",
          "2410:                 if (iSize > 208)",
          "2411:                 {",
          "2412:                     proto_tree_add_item(mq_tree, hf_mq_id_pal, tvb, offset + 208, 20, p_mq_parm->mq_str_enc);",
          "2413:                     proto_tree_add_item(mq_tree, hf_mq_id_r, tvb, offset + 228, 12, p_mq_parm->mq_str_enc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2575:             if (!mq_in_reassembly)",
          "2576:             {",
          "2577:                 col_clear(pinfo->cinfo, COL_INFO);",
          "2579:                 col_set_fence(pinfo->cinfo, COL_INFO);",
          "2580:             }",
          "",
          "[Removed Lines]",
          "2578:                 col_append_sep_fstr(pinfo->cinfo, COL_INFO, \" | \", \"%-17s\", val_to_str_ext(p_mq_parm->mq_opcode, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "",
          "[Added Lines]",
          "2594:                 col_clear_fence(pinfo->cinfo, COL_INFO);",
          "2596:                 col_append_sep_fstr(pinfo->cinfo, COL_INFO, \" | \", \" %-17s\", val_to_str_ext(p_mq_parm->mq_opcode, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3055:                     }",
          "3056:                     else if (p_mq_parm->mq_opcode == MQ_TST_ASYNC_MESSAGE)",
          "3057:                     {",
          "3058:                         gint  iSegmIndex;",
          "3059:                         gint  iGlbMsgIdx;",
          "3060:                         gint  iPadLen;",
          "3062:                         gint8 iStrLen;",
          "3063:                         gint  iHdl;",
          "3064:                         gint  iHdrL;",
          "3066:                         iHdl       = tvb_get_guint32(tvb, offset +  4, p_mq_parm->mq_int_enc);",
          "3067:                         iGlbMsgIdx = tvb_get_guint32(tvb, offset + 12, p_mq_parm->mq_int_enc);",
          "3069:                         iSegmIndex = tvb_get_guint16(tvb, offset + 20, p_mq_parm->mq_int_enc);",
          "3071:                         if (iSegmIndex == 0)",
          "3072:                         {",
          "3073:                             iStrLen = tvb_get_guint8(tvb, offset + 54);",
          "3076:                         }",
          "3077:                         else",
          "3078:                         {",
          "",
          "[Removed Lines]",
          "3061:                         gint  iSegLength;",
          "3068:                         iSegLength = tvb_get_guint32(tvb, offset + 16, p_mq_parm->mq_int_enc);",
          "3074:                             iPadLen = (2+1+iStrLen) % 4;",
          "3075:                             iPadLen = (iPadLen) ? 4-iPadLen : 0;",
          "",
          "[Added Lines]",
          "3076:                         gint  iReasnCode = 0;",
          "3089:                         if (p_mq_parm->mq_ctlf1 & MQ_TCF_FIRST)",
          "3090:                         {",
          "3091:                             iReasnCode = tvb_get_guint32(tvb, offset + 24, p_mq_parm->mq_int_enc);",
          "3092:                         }",
          "3097:                             iPadLen = (2 + 1 + iStrLen) % 4;",
          "3098:                             iPadLen = (iPadLen) ? 4 - iPadLen : 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3085:                         if (!mq_in_reassembly)",
          "3086:                         {",
          "3087:                             dissect_mq_addCR_colinfo(pinfo, p_mq_parm);",
          "3090:                         }",
          "3092:                         mq_tree = proto_tree_add_subtree(mqroot_tree, tvb, offset, iHdrL, ett_mq_msg, NULL, MQ_TEXT_ASYMSG);",
          "",
          "[Removed Lines]",
          "3088:                             col_append_fstr(pinfo->cinfo, COL_INFO, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3089:                                 iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "",
          "[Added Lines]",
          "3111:                             col_append_fstr(pinfo->cinfo, COL_INFO,",
          "3112:                                             \" Hdl=0x%04x GlbMsgIdx=%d, Full Message, RC=%d(0x%x) - %s\",",
          "3113:                                             iHdl, iGlbMsgIdx, iReasnCode, iReasnCode,",
          "3114:                                             val_to_str_ext(iReasnCode, GET_VALS_EXTP(mqrc), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3114:                         p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "3116:                         iSizePayload = tvb_reported_length_remaining(tvb, offset);",
          "3118:                     }",
          "3119:                     else if ((p_mq_parm->mq_opcode == MQ_TST_SPI || p_mq_parm->mq_opcode == MQ_TST_SPI_REPLY) && capLen >= 12)",
          "3120:                     {",
          "",
          "[Removed Lines]",
          "3117:                         bPayload = (iSizePayload>0);",
          "",
          "[Added Lines]",
          "3142:                         bPayload = (iSizePayload > 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3872:                 if (iSegmIndex == 0)",
          "3873:                 {",
          "3874:                     uStrL = tvb_get_guint8(tvb, iHdrL + 54);",
          "3875:                     uPadL = ((((2+1+uStrL)/4)+1)*4)-(2+1+uStrL);",
          "3876:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3899:                     mq_AsyMsgRsn = tvb_get_guint32(tvb, iHdrL + 24, iEnco);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3885:                   if it is the 1st Segment, it means we are",
          "3888:                 iBegL = (bSeg1st) ? 0 : iNxtP;",
          "3892:                     fd_head = NULL;",
          "3893:                     reassembly_error = TRUE;",
          "3895:                     fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3896:                         tvb, iBegL,",
          "3897:                         pinfo, iConnectionId, NULL,",
          "",
          "[Removed Lines]",
          "3886:                   of the beginning of a reassembling. We must take the whole segment (with tSHM, and headers)",
          "3890:                 if (iSegL <= iBegL) {",
          "3894:                 } else {",
          "",
          "[Added Lines]",
          "3912:                   of the beginning of a reassembling. We must take the whole segment (with TSHM, and headers)",
          "3916:                 if (iSegL <= iBegL)",
          "3917:                 {",
          "3921:                 }",
          "3922:                 else",
          "3923:                 {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3901:                 if (tree)",
          "3902:                 {",
          "3903:                     proto_item *ti = proto_tree_add_item(tree, proto_mq, tvb, 0, -1, ENC_NA);",
          "3920:                     if (reassembly_error)",
          "3921:                     {",
          "3922:                         expert_add_info_format(pinfo, ti, &ei_mq_reassembly_error,",
          "3923:                                                \"Wrong fragment length (%d) - skipping reassembly\", iSegL - iBegL);",
          "3924:                     }",
          "3926:                 }",
          "3927:                 else",
          "3928:                 {",
          "3929:                     mq_tree = tree;",
          "3930:                 }",
          "3933:                 {",
          "3934:                     tvbuff_t *next_tvb;",
          "3937:                     if (fd_head->next != NULL)",
          "3938:                     {",
          "3940:                         next_tvb = tvb_new_chain(tvb, fd_head->tvb_data);",
          "3941:                         add_new_data_source(pinfo, next_tvb, \"Reassembled MQ\");",
          "3942:                     }",
          "3943:                     else",
          "3944:                     {",
          "",
          "[Removed Lines]",
          "3904:                     if (bMore)",
          "3905:                     {",
          "3906:                         proto_item_append_text(ti, \" [%s of a Reassembled MQ Segment]\",",
          "3907:                             val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3908:                         dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "3909:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3910:                             iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "3911:                     }",
          "3912:                     else",
          "3913:                     {",
          "3914:                         proto_item_append_text(ti, \" %s\",",
          "3915:                             val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3916:                         dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "3917:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3918:                             iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "3919:                     }",
          "3925:                     mq_tree = proto_item_add_subtree(ti, ett_mq_reaasemb);",
          "3932:                 if (fd_head != NULL && pinfo->num == fd_head->reassembled_in)",
          "",
          "[Added Lines]",
          "3934:                     proto_item_append_text(ti, \" [%s of a Reassembled MQ Segment]\",",
          "3935:                                            val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3936:                     dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "3937:                     proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3938:                                            iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "3945:                     mq_tree = proto_item_add_subtree(ti, ett_mq_reassemb);",
          "3952:                 if (fd_head != NULL && pinfo->num == fd_head->reassembled_in && !bMore)",
          "3959:                         proto_item *ti;",
          "3964:                         mq_in_reassembly = TRUE;",
          "3965:                         dissect_mq_pdu(tvb, pinfo, mq_tree);",
          "3966:                         mq_in_reassembly = FALSE;",
          "3969:                         2 or more fragments.",
          "3970:                         Build Up the full pdu to be dissected correwctly",
          "3976:                         ti = proto_tree_add_item(tree, proto_mq, tvb, 0, -1, ENC_NA);",
          "3977:                         proto_item_append_text(ti, \"%s\",",
          "3978:                                                val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3979:                         dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "3980:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, Full, Len=%d, RC=%d(0x%x) - %s\",",
          "3981:                                                iHdl, iGlbMsgIdx,",
          "3982:                                                tvb_reported_length_remaining(next_tvb, 0),",
          "3983:                                                mq_AsyMsgRsn, mq_AsyMsgRsn,",
          "3984:                                                val_to_str_ext(mq_AsyMsgRsn, GET_VALS_EXTP(mqrc), \"Unknown (0x%02x)\"));",
          "3985:                         mq_tree = proto_item_add_subtree(ti, ett_mq_reassemb);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3952:                 {",
          "3953:                     mq_in_reassembly = TRUE;",
          "3956:                     col_add_fstr(pinfo->cinfo, COL_INFO, \"[%s of a Reassembled MQ Segment]\",",
          "3958:                     dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "3961:                     dissect_mq_pdu(tvb, pinfo, mq_tree);",
          "3962:                     return tvb_reported_length(tvb);",
          "3963:                 }",
          "",
          "[Removed Lines]",
          "3955:                     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"MQ\");",
          "3957:                         val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3959:                     col_add_fstr(pinfo->cinfo, COL_INFO, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3960:                         iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "",
          "[Added Lines]",
          "4000:                                  val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "4002:                     col_append_fstr(pinfo->cinfo, COL_INFO, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "4003:                                     iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4142:         { &hf_mq_id_TraceId    , {\"TraceId...\", \"mq.id.traceid\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"ID Trace Identifier\", HFILL }},",
          "4143:         { &hf_mq_id_ProdId     , {\"ProdId....\", \"mq.id.prodid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"ID Product Identifier\", HFILL }},",
          "4144:         { &hf_mq_id_mqmid      , {\"MQM ID....\", \"mq.id.mqmid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"ID MQM ID\", HFILL }},",
          "4146:         { &hf_mq_id_icf1_msgseq  , {\"Message sequence\", \"mq.id.icf.msgseq\"  , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF1_MSG_SEQ, \"ID ICF Message sequence\", HFILL }},",
          "4147:         { &hf_mq_id_icf1_convcap , {\"Conversion capable\", \"mq.id.icf.convcap\" , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF1_CONVERSION_CAPABLE, \"ID ICF Conversion capable\", HFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4188:         { &hf_mq_id_pal        , {\"PAL.......\", \"mq.id.pal\", FT_BYTES, BASE_NONE, NULL, 0x0, \"ID PAL\", HFILL}},",
          "4189:         { &hf_mq_id_r          , {\"R.........\", \"mq.id.r\", FT_BYTES, BASE_NONE, NULL, 0x0, \"ID R\", HFILL}},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4309:         { &hf_mq_msgasy_SegLength, {\"SegLength\", \"mq.msgasy.seglength\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Segment Length\", HFILL }},",
          "4310:         { &hf_mq_msgasy_SegmIndex, {\"SegmIndex\", \"mq.msgasy.segmindex\", FT_UINT16, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Segment Index\", HFILL }},",
          "4311:         { &hf_mq_msgasy_SeleIndex, {\"SeleIndex\", \"mq.msgasy.seleindex\", FT_UINT16, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Selection Index\", HFILL }},",
          "4313:         { &hf_mq_msgasy_ActMsgLen, {\"ActMsgLen\", \"mq.msgasy.actmsglen\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Actual Message Length\", HFILL }},",
          "4314:         { &hf_mq_msgasy_TotMsgLen, {\"TotMsgLen\", \"mq.msgasy.totmsglen\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Total Message Length\", HFILL }},",
          "4315:         { &hf_mq_msgasy_MsgToken , {\"MsgToken.\", \"mq.msgasy.msgtoken\" , FT_BYTES , BASE_NONE   , NULL, 0x0, \"MSGASYNC Mesasage Token\", HFILL }},",
          "",
          "[Removed Lines]",
          "4312:         { &hf_mq_msgasy_ReasonCod, {\"ReasonCod\", \"mq.msgasy.reasoncod\", FT_UINT32, BASE_HEX    , NULL, 0x0, \"MSGASYNC Reason Code\", HFILL }},",
          "",
          "[Added Lines]",
          "4357:         { &hf_mq_msgasy_ReasonCod, {\"ReasonCod\", \"mq.msgasy.reasoncod\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(mqrc), 0x0, \"MSGASYNC Reason Code\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4708:         &ett_mq_xa_info,",
          "4709:         &ett_mq_charv,",
          "4710:         &ett_mq_rfh_ValueName,",
          "4712:         &ett_mq_structid",
          "4713:     };",
          "",
          "[Removed Lines]",
          "4711:         &ett_mq_reaasemb,",
          "",
          "[Added Lines]",
          "4756:         &ett_mq_reassemb,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq.h||epan/dissectors/packet-mq.h": [
          "File: epan/dissectors/packet-mq.h -> epan/dissectors/packet-mq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4979: #define MQ_MQCHT_CLUSRCVR                 8",
          "4980: #define MQ_MQCHT_CLUSSDR                  9",
          "4981: #define MQ_MQCHT_MQTT                     10",
          "4984: #define MQ_MQCOMPRESS_NOT_AVAILABLE       (-1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4982: #define MQ_MQCHT_AMQP                     11",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5042: #define MQ_MQCLXQ_SCTQ                    0",
          "5043: #define MQ_MQCLXQ_CHANNEL                 1",
          "5045: #endif",
          "5047: extern gint32  strip_trailing_blanks(guint8 *a_str,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5046: #define MQ_MQZAET_NONE                    0",
          "5047: #define MQ_MQZAET_PRINCIPAL               1",
          "5048: #define MQ_MQZAET_GROUP                   2",
          "5049: #define MQ_MQZAET_UNKNOWN                 3",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bec60fa461dc2f225929cbcec33308b430f55a08",
      "candidate_info": {
        "commit_hash": "bec60fa461dc2f225929cbcec33308b430f55a08",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/bec60fa461dc2f225929cbcec33308b430f55a08",
        "files": [
          "epan/dissectors/packet-mq-base.c",
          "epan/dissectors/packet-mq-pcf.c",
          "epan/dissectors/packet-mq.c",
          "epan/dissectors/packet-mq.h"
        ],
        "message": "packet-mq: Add support for IMS+TM Struct\n\nAdded support for IMS, TM, TMC2 Struct\nImprove display some Flags in ID Struct\nFix display for FCNO Struct\nFix error in get_mq_pdu_len\nCode reformat (VS2017)\nMoved DEFINE to header file\nMore struct display fixed\nFix for IMS Msg len display\n\nChange-Id: I80bfd25a5079598fc44124dc2c7b850640a38b00\nReviewed-on: https://code.wireshark.org/review/25295\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-mq-base.c||epan/dissectors/packet-mq-base.c",
          "epan/dissectors/packet-mq-pcf.c||epan/dissectors/packet-mq-pcf.c",
          "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c",
          "epan/dissectors/packet-mq.h||epan/dissectors/packet-mq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mq-base.c||epan/dissectors/packet-mq-base.c": [
          "File: epan/dissectors/packet-mq-base.c -> epan/dissectors/packet-mq-base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "132: DEF_VALSB(PutResponse)",
          "",
          "[Added Lines]",
          "132: DEF_VALSBX(MQPRT)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424: DEF_VALSE;",
          "425: #endif",
          "",
          "[Removed Lines]",
          "427: DEF_VALSB(MQREADA)",
          "",
          "[Added Lines]",
          "427: DEF_VALSBX(MQREADA)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "435: DEF_VALSB(PropertyCtlVal)",
          "",
          "[Added Lines]",
          "435: DEF_VALSBX(MQPROP)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "455: DEF_VALSB(Persistence)",
          "",
          "[Added Lines]",
          "455: DEF_VALSBX(MQPER)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "487: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "489: DEF_VALSB(MsgType)",
          "",
          "[Added Lines]",
          "488: #endif",
          "490: DEF_VALSBX(MQMT)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496: DEF_VALSE;",
          "499: DEF_VALSB(Platform)",
          "",
          "[Removed Lines]",
          "497: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1610: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "1612: DEF_VALSB(mqat)",
          "",
          "[Added Lines]",
          "1612: DEF_VALSB(MQAT)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1648: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "1649: DEF_VALS_EXTBX(mqat);",
          "1651: DEF_VALSB(mqcmd)",
          "",
          "[Added Lines]",
          "1649: DEF_VALS_EXTBX(MQAT);",
          "1651: DEF_VALSB(MQCMD)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1845: DEF_VALSE;",
          "",
          "[Removed Lines]",
          "1846: DEF_VALS_EXTBX(mqcmd);",
          "1848: DEF_VALSB(mqrc)",
          "",
          "[Added Lines]",
          "1846: DEF_VALS_EXTBX(MQCMD);",
          "1848: DEF_VALSB(MQRC)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2746: DEF_VALSE;",
          "2749: DEF_VALSB(objtype)",
          "",
          "[Removed Lines]",
          "2747: DEF_VALS_EXTBX(mqrc);",
          "",
          "[Added Lines]",
          "2747: DEF_VALS_EXTBX(MQRC);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq-pcf.c||epan/dissectors/packet-mq-pcf.c": [
          "File: epan/dissectors/packet-mq-pcf.c -> epan/dissectors/packet-mq-pcf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 uCCS = tvb_get_guint32(tvb, offset + uLenF, bLittleEndian);",
          "280:                 uSLn = tvb_get_guint32(tvb, offset + uLenF + 4, bLittleEndian);",
          "281:                 sStr = tvb_get_string_enc(wmem_packet_scope(), tvb, offset + uLenF + 8,",
          "283:                 if (*sStr)",
          "284:                     strip_trailing_blanks(sStr, uSLn);",
          "285:                 if (*sStr)",
          "",
          "[Removed Lines]",
          "282:                     uSLn, (uCCS != 500) ? ENC_ASCII : ENC_EBCDIC);",
          "",
          "[Added Lines]",
          "282:                     uSLn, IS_EBCDIC(uCCS) ? ENC_EBCDIC : ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:                 proto_tree_add_item(tree, hf_mq_pcf_prmccsid , tvb, offset + 12, 4, bLittleEndian);",
          "294:                 proto_tree_add_item(tree, hf_mq_pcf_prmstrlen, tvb, offset + 16, 4, bLittleEndian);",
          "297:             }",
          "298:             break;",
          "299:         case MQ_MQCFT_INTEGER_LIST:",
          "",
          "[Removed Lines]",
          "296:                 proto_tree_add_item(tree, hf_mq_pcf_string, tvb, offset + uLenF + 8, uSLn, (uCCS != 500) ? ENC_ASCII : ENC_EBCDIC);",
          "",
          "[Added Lines]",
          "296:                 proto_tree_add_item(tree, hf_mq_pcf_string, tvb, offset + uLenF + 8, uSLn, IS_EBCDIC(uCCS) ? ENC_EBCDIC : ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:                 for (u2 = 0; u2 < uCnt && u2 < mq_pcf_maxlst; u2++)",
          "353:                 {",
          "354:                     sStr = tvb_get_string_enc(wmem_packet_scope(), tvb, offset,",
          "356:                     if (*sStr)",
          "357:                         strip_trailing_blanks(sStr, uSLn);",
          "358:                     if (*sStr)",
          "",
          "[Removed Lines]",
          "355:                         uSLn, (uCCS != 500) ? ENC_ASCII : ENC_EBCDIC);",
          "",
          "[Added Lines]",
          "355:                         uSLn, IS_EBCDIC(uCCS) ? ENC_EBCDIC : ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "441:                 uOpe = tvb_get_guint32(tvb, offset + uLenF, bLittleEndian);",
          "442:                 uCCS = tvb_get_guint32(tvb, offset + uLenF + 4, bLittleEndian);",
          "443:                 uSLn = tvb_get_guint32(tvb, offset + uLenF + 8, bLittleEndian);",
          "445:                 strip_trailing_blanks(sStr, uSLn);",
          "447:                 tree = proto_tree_add_subtree_format(mq_tree, tvb, offset, uLen, ett_mqpcf_prm, NULL, \"%s %s %s\",",
          "",
          "[Removed Lines]",
          "444:                 sStr = (guint8 *)format_text_chr(wmem_packet_scope(), tvb_get_string_enc(wmem_packet_scope(), tvb, offset + uLenF + 12, uSLn, (uCCS != 500) ? ENC_ASCII : ENC_EBCDIC), uSLn, '.');",
          "",
          "[Added Lines]",
          "444:                 sStr = (guint8 *)format_text_chr(wmem_packet_scope(),",
          "445:                                                  tvb_get_string_enc(wmem_packet_scope(), tvb, offset + uLenF + 12, uSLn, IS_EBCDIC(uCCS) ? ENC_EBCDIC : ENC_ASCII),",
          "446:                                                  uSLn, '.');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454:                 proto_tree_add_item(tree, hf_mq_pcf_prmccsid , tvb, offset + 16, 4, bLittleEndian);",
          "455:                 proto_tree_add_item(tree, hf_mq_pcf_prmstrlen, tvb, offset + 20, 4, bLittleEndian);",
          "458:             }",
          "459:             break;",
          "460:         case MQ_MQCFT_BYTE_STRING_FILTER:",
          "",
          "[Removed Lines]",
          "457:                 proto_tree_add_item(tree, hf_mq_pcf_string, tvb, offset + uLenF + 12, uSLn, (uCCS != 500) ? ENC_ASCII : ENC_EBCDIC);",
          "",
          "[Added Lines]",
          "459:                 proto_tree_add_item(tree, hf_mq_pcf_string, tvb, offset + uLenF + 12, uSLn, IS_EBCDIC(uCCS) ? ENC_EBCDIC : ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "588:                 g_snprintf(sTmp, (gulong)sizeof(sTmp)-1, \" %-s [%d-%s] {%d-%s} PrmCnt(%d) CC(%d-%s) RC(%d-%s)\",",
          "589:                     MQ_TEXT_CFH,",
          "590:                     uTyp, val_to_str_const(uTyp, GET_VALSV(mqcft), \"Unknown\"),",
          "592:                     uCnt,",
          "593:                     uCC, val_to_str_const(uCC, GET_VALSV(mqcc), \"Unknown\"),",
          "595:             }",
          "596:             else",
          "597:             {",
          "598:                 g_snprintf(sTmp, (gulong)sizeof(sTmp)-1, \" %-s [%d-%s] {%d-%s} PrmCnt(%d)\",",
          "599:                     MQ_TEXT_CFH,",
          "600:                     uTyp, val_to_str_const(uTyp, GET_VALSV(mqcft), \"Unknown\"),",
          "602:                     uCnt);",
          "603:             }",
          "605:             ti = proto_tree_add_item(tree, proto_mqpcf, tvb, offset, -1, ENC_NA);",
          "608:             mqroot_tree = proto_item_add_subtree(ti, ett_mqpcf);",
          "610:             mq_tree = proto_tree_add_subtree(mqroot_tree, tvb, offset, iSizeMQCFH, ett_mqpcf_cfh, NULL, sTmp);",
          "",
          "[Removed Lines]",
          "591:                     uCmd, val_to_str_ext_const(uCmd, GET_VALS_EXTP(mqcmd), \"Unknown\"),",
          "594:                     uRC, val_to_str_ext_const(uRC, GET_VALS_EXTP(mqrc), \"Unknown\"));",
          "601:                     uCmd, val_to_str_ext_const(uCmd, GET_VALS_EXTP(mqcmd), \"Unknown\"),",
          "607:             proto_item_append_text(ti, \" (%s)\", val_to_str_ext_const(iCommand, GET_VALS_EXTP(mqcmd), \"Unknown (0x%02x)\"));",
          "",
          "[Added Lines]",
          "593:                     uCmd, val_to_str_ext_const(uCmd, GET_VALS_EXTP(MQCMD), \"Unknown\"),",
          "596:                     uRC, val_to_str_ext_const(uRC, GET_VALS_EXTP(MQRC), \"Unknown\"));",
          "603:                     uCmd, val_to_str_ext_const(uCmd, GET_VALS_EXTP(MQCMD), \"Unknown\"),",
          "609:             proto_item_append_text(ti, \" (%s)\", val_to_str_ext_const(iCommand, GET_VALS_EXTP(MQCMD), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "656:         { &hf_mqpcf_cfh_type     , { \"Type.....\", \"mqpcf.cfh.type\"      , FT_UINT32, BASE_DEC, VALS(mq_mqcft_vals), 0x0, \"CFH type\", HFILL }},",
          "657:         { &hf_mqpcf_cfh_length   , { \"Length...\", \"mqpcf.cfh.length\"    , FT_UINT32, BASE_DEC, NULL, 0x0, \"CFH length\", HFILL }},",
          "658:         { &hf_mqpcf_cfh_version  , { \"Version..\", \"mqpcf.cfh.version\"   , FT_UINT32, BASE_DEC, NULL, 0x0, \"CFH version\", HFILL }},",
          "660:         { &hf_mqpcf_cfh_MsgSeqNbr, { \"MsgSeqNbr\", \"mqpcf.cfh.MsgSeqNbr\" , FT_UINT32, BASE_DEC, NULL, 0x0, \"CFH message sequence number\", HFILL }},",
          "661:         { &hf_mqpcf_cfh_control  , { \"Control..\", \"mqpcf.cfh.control\"   , FT_UINT32, BASE_DEC, VALS(mq_CtlOpt_vals), 0x0, \"CFH control\", HFILL }},",
          "662:         { &hf_mqpcf_cfh_compcode , { \"CompCode.\", \"mqpcf.cfh.compcode\"  , FT_UINT32, BASE_DEC, VALS(mq_mqcc_vals), 0x0, \"CFH completion code\", HFILL }},",
          "664:         { &hf_mqpcf_cfh_ParmCount, { \"ParmCount\", \"mqpcf.cfh.ParmCount\" , FT_UINT32, BASE_DEC, NULL, 0x0, \"CFH parameter count\", HFILL }},",
          "667:         { &hf_mq_pcf_prmlen      , { \"ParmLen..\", \"mqpcf.parm.len\"       , FT_UINT32 , BASE_DEC, NULL, 0x0, \"MQPCF parameter length\", HFILL }},",
          "669:         { &hf_mq_pcf_prmidnovals , { \"ParmID...\", \"mqpcf.parm.idNoVals\"  , FT_UINT32 , BASE_HEX_DEC, NULL, 0x0, \"MQPCF parameter id No Vals\", HFILL }},",
          "670:         { &hf_mq_pcf_filterop    , { \"FilterOP.\", \"mqpcf.filter.op\"      , FT_UINT32 , BASE_DEC, VALS(mq_FilterOP_vals), 0x0, \"MQPCF Filter operator\", HFILL }},",
          "671:         { &hf_mq_pcf_prmccsid    , { \"ParmCCSID\", \"mqpcf.parm.ccsid\"     , FT_UINT32 , BASE_DEC | BASE_RANGE_STRING, RVALS(mq_ccsid_rvals), 0x0, \"MQPCF parameter ccsid\", HFILL }},",
          "",
          "[Removed Lines]",
          "659:         { &hf_mqpcf_cfh_command  , { \"Command..\", \"mqpcf.cfh.command\"   , FT_UINT32, BASE_DEC | BASE_EXT_STRING, &mq_mqcmd_xvals, 0x0, \"CFH command\", HFILL }},",
          "663:         { &hf_mqpcf_cfh_reason   , { \"ReasCode.\", \"mqpcf.cfh.reasoncode\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, &mq_mqrc_xvals, 0x0, \"CFH reason code\", HFILL }},",
          "666:         { &hf_mq_pcf_prmtyp      , { \"ParmTyp..\", \"mqpcf.parm.type\"      , FT_UINT32 , BASE_DEC | BASE_EXT_STRING, &mq_PrmTyp_xvals, 0x0, \"MQPCF parameter type\", HFILL }},",
          "668:         { &hf_mq_pcf_prmid       , { \"ParmID...\", \"mqpcf.parm.id\"        , FT_UINT32 , BASE_DEC | BASE_EXT_STRING, &mq_PrmId_xvals, 0x0, \"MQPCF parameter id\", HFILL }},",
          "",
          "[Added Lines]",
          "661:         { &hf_mqpcf_cfh_command  , { \"Command..\", \"mqpcf.cfh.command\"   , FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQCMD), 0x0, \"CFH command\", HFILL }},",
          "665:         { &hf_mqpcf_cfh_reason   , { \"ReasCode.\", \"mqpcf.cfh.reasoncode\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQRC), 0x0, \"CFH reason code\", HFILL }},",
          "668:         { &hf_mq_pcf_prmtyp      , { \"ParmTyp..\", \"mqpcf.parm.type\"      , FT_UINT32 , BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(PrmTyp), 0x0, \"MQPCF parameter type\", HFILL }},",
          "670:         { &hf_mq_pcf_prmid       , { \"ParmID...\", \"mqpcf.parm.id\"        , FT_UINT32 , BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(PrmId), 0x0, \"MQPCF parameter id\", HFILL }},",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq.c||epan/dissectors/packet-mq.c": [
          "File: epan/dissectors/packet-mq.c -> epan/dissectors/packet-mq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: };",
          "136: static int hf_mq_tsh_tcf2_CmitIntv = -1;",
          "137: static const int *pf_flds_tcf2[] =",
          "138: {",
          "",
          "[Removed Lines]",
          "133: static int hf_mq_tsh_tcf2_HdrComp  = -1;",
          "134: static int hf_mq_tsh_tcf2_MsgComp  = -1;",
          "135: static int hf_mq_tsh_tcf2_CSH      = -1;",
          "",
          "[Added Lines]",
          "133: static int hf_mq_tsh_tcf2_HdrComp = -1;",
          "134: static int hf_mq_tsh_tcf2_MsgComp = -1;",
          "135: static int hf_mq_tsh_tcf2_CSH = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245: static int hf_mq_id_icf2_CanDstLst = -1;",
          "246: static int hf_mq_id_icf2_FstMsgReq = -1;",
          "248: static int hf_mq_id_icf2_XARequest = -1;",
          "249: static int hf_mq_id_icf2_XARunTApp = -1;",
          "252: static int hf_mq_id_icf2_CanTrcRte = -1;",
          "253: static const int *pf_flds_icf2[] =",
          "254: {",
          "",
          "[Removed Lines]",
          "247: static int hf_mq_id_icf2_RespConv  = -1;",
          "250: static int hf_mq_id_icf2_SPIRqst   = -1;",
          "251: static int hf_mq_id_icf2_DualUOW   = -1;",
          "",
          "[Added Lines]",
          "247: static int hf_mq_id_icf2_RespConv = -1;",
          "250: static int hf_mq_id_icf2_SPIRqst = -1;",
          "251: static int hf_mq_id_icf2_DualUOW = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267: static int hf_mq_id_ief2_HdrCmpLst = -1;",
          "268: static int hf_mq_id_ief2_MsgCmpLst = -1;",
          "270: static const int *pf_flds_ief2[] =",
          "271: {",
          "272:     &hf_mq_id_ief2_SSLReset ,",
          "",
          "[Removed Lines]",
          "269: static int hf_mq_id_ief2_SSLReset  = -1;",
          "",
          "[Added Lines]",
          "269: static int hf_mq_id_ief2_SSLReset = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279: static int hf_mq_id_icf3_CanMsgPrp = -1;",
          "281: static int hf_mq_id_icf3_MPlxSyGet = -1;",
          "282: static const int *pf_flds_icf3[] =",
          "283: {",
          "286:     &hf_mq_id_icf3_MPlxSyGet,",
          "287:     NULL",
          "288: };",
          "",
          "[Removed Lines]",
          "280: static int hf_mq_id_icf3_Unknown02 = -1;",
          "284:     &hf_mq_id_icf3_Unknown02,",
          "285:     &hf_mq_id_icf3_CanMsgPrp,",
          "",
          "[Added Lines]",
          "280: static int hf_mq_id_icf3_CanMulticast = -1;",
          "285:     &hf_mq_id_icf3_CanMulticast,",
          "286:     &hf_mq_id_icf3_CanMsgPrp,",
          "287:     NULL",
          "288: };",
          "291: static int hf_mq_id_ief3_CanMsgPrp = -1;",
          "292: static int hf_mq_id_ief3_CanMulticast = -1;",
          "293: static int hf_mq_id_ief3_PropIntSep = -1;",
          "294: static int hf_mq_id_ief3_MPlxSyGet = -1;",
          "295: static int hf_mq_id_ief3_ProtAlgorit = -1;",
          "296: static const int *pf_flds_ief3[] =",
          "297: {",
          "298:     &hf_mq_id_ief3_ProtAlgorit,",
          "299:     &hf_mq_id_ief3_MPlxSyGet,",
          "300:     &hf_mq_id_ief3_PropIntSep,",
          "301:     &hf_mq_id_ief3_CanMulticast,",
          "302:     &hf_mq_id_ief3_CanMsgPrp,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "299: static int hf_mq_conn_appname = -1;",
          "300: static int hf_mq_conn_apptype = -1;",
          "301: static int hf_mq_conn_acttoken = -1;",
          "303: static int hf_mq_conn_options = -1;",
          "304: static int hf_mq_fcno_StructID = -1;",
          "305: static int hf_mq_fcno_msgid = -1;",
          "",
          "[Removed Lines]",
          "302: static int hf_mq_conn_version = -1;",
          "",
          "[Added Lines]",
          "318: static int hf_mq_conn_Xoptions = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352: static int hf_mq_put_length = -1;",
          "354: static int hf_mq_close_options = -1;",
          "360: static const int *pf_flds_clsopt[] =",
          "361: {",
          "362:     &hf_mq_close_options_QUIESCE     ,",
          "",
          "[Removed Lines]",
          "355: static int hf_mq_close_options_DELETE                 = -1;",
          "356: static int hf_mq_close_options_DELETE_PURGE           = -1;",
          "357: static int hf_mq_close_options_KEEP_SUB               = -1;",
          "358: static int hf_mq_close_options_REMOVE_SUB             = -1;",
          "359: static int hf_mq_close_options_QUIESCE                = -1;",
          "",
          "[Added Lines]",
          "371: static int hf_mq_close_options_DELETE = -1;",
          "372: static int hf_mq_close_options_DELETE_PURGE = -1;",
          "373: static int hf_mq_close_options_KEEP_SUB = -1;",
          "374: static int hf_mq_close_options_REMOVE_SUB = -1;",
          "375: static int hf_mq_close_options_QUIESCE = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "422: static int hf_mq_fopa_StructID = -1;",
          "423: static int hf_mq_fopa_version = -1;",
          "424: static int hf_mq_fopa_length = -1;",
          "432: static int hf_mq_ping_length = -1;",
          "433: static int hf_mq_ping_buffer = -1;",
          "",
          "[Removed Lines]",
          "425: static int hf_mq_fopa_unknown1 = -1;",
          "426: static int hf_mq_fopa_unknown2 = -1;",
          "427: static int hf_mq_fopa_unknown3 = -1;",
          "428: static int hf_mq_fopa_qprotect = -1;",
          "429: static int hf_mq_fopa_unknown4 = -1;",
          "430: static int hf_mq_fopa_unknown5 = -1;",
          "",
          "[Added Lines]",
          "441: static int hf_mq_fopa_DefPersistence = -1;",
          "442: static int hf_mq_fopa_DefPutRespType = -1;",
          "443: static int hf_mq_fopa_DefReadAhead = -1;",
          "444: static int hf_mq_fopa_PropertyControl = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "623: static int hf_mq_lpoo_xtradata = -1;",
          "625: static int hf_mq_lpoo_lpiopts_SAVE_IDENTITY_CTXT = -1;",
          "627: static int hf_mq_lpoo_lpiopts_SAVE_USER_CTXT = -1;",
          "628: static const int *pf_flds_lpooopt[] =",
          "629: {",
          "",
          "[Removed Lines]",
          "626: static int hf_mq_lpoo_lpiopts_SAVE_ORIGIN_CTXT = -1 ;",
          "",
          "[Added Lines]",
          "640: static int hf_mq_lpoo_lpiopts_SAVE_ORIGIN_CTXT = -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "765: static int hf_mq_msgreq_mtchGrpid = -1;",
          "766: static int hf_mq_msgreq_mtchMsgTk = -1;",
          "768: static int hf_mq_msgasy_version = -1;",
          "769: static int hf_mq_msgasy_handle = -1;",
          "770: static int hf_mq_msgasy_MsgIndex = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: static int hf_mq_msgreq_flags_selection = -1;",
          "783: static int hf_mq_msgreq_flags_F00000008 = -1;",
          "784: static int hf_mq_msgreq_flags_F00000004 = -1;",
          "785: static int hf_mq_msgreq_flags_F00000002 = -1;",
          "786: static const int *pf_flds_msgreq_flags[] =",
          "787: {",
          "788:     &hf_mq_msgreq_flags_selection,",
          "789:     &hf_mq_msgreq_flags_F00000008,",
          "790:     &hf_mq_msgreq_flags_F00000004,",
          "791:     &hf_mq_msgreq_flags_F00000002,",
          "792:     NULL",
          "793: };",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "781: static int hf_mq_msgasy_resolQNme = -1;",
          "782: static int hf_mq_msgasy_padding = -1;",
          "785: static int hf_mq_notif_handle = -1;",
          "789: static int hf_mq_head_StructID = -1;",
          "790: static int hf_mq_head_version = -1;",
          "",
          "[Removed Lines]",
          "784: static int hf_mq_notif_vers   = -1;",
          "786: static int hf_mq_notif_code   = -1;",
          "787: static int hf_mq_notif_value  = -1;",
          "",
          "[Added Lines]",
          "811: static int hf_mq_notif_vers = -1;",
          "813: static int hf_mq_notif_code = -1;",
          "814: static int hf_mq_notif_value = -1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "806: static int hf_mq_dh_objrecofs = -1;",
          "807: static int hf_mq_dh_putmsgrecofs = -1;",
          "810: static int hf_mq_iih_flags_replyfmtnone = -1;",
          "813: static const int *pf_flds_iih_flags[] =",
          "814: {",
          "815:     &hf_mq_iih_flags_cmqrqstresp ,",
          "",
          "[Removed Lines]",
          "809: static int hf_mq_iih_flags_passexpir    = -1;",
          "811: static int hf_mq_iih_flags_ignorepurg   = -1;",
          "812: static int hf_mq_iih_flags_cmqrqstresp  = -1;",
          "",
          "[Added Lines]",
          "836: static int hf_mq_iih_flags_passexpir = -1;",
          "838: static int hf_mq_iih_flags_ignorepurg = -1;",
          "839: static int hf_mq_iih_flags_cmqrqstresp = -1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "819:     NULL",
          "820: };",
          "821: static int hf_mq_iih_ltermoverride = -1;",
          "824: static int hf_mq_iih_authenticator = -1;",
          "828: static int hf_mq_iih_securityscope = -1;",
          "832: static int hf_mq_cih_flags_replywonulls = -1;",
          "834: static const int *pf_flds_cih_flags[] =",
          "835: {",
          "836:     &hf_mq_cih_flags_synconret   ,",
          "",
          "[Removed Lines]",
          "822: static int hf_mq_iih_mfsmapname    = -1;",
          "823: static int hf_mq_iih_replytofmt    = -1;",
          "825: static int hf_mq_iih_transinstid   = -1;",
          "826: static int hf_mq_iih_transstate    = -1;",
          "827: static int hf_mq_iih_commimode     = -1;",
          "829: static int hf_mq_iih_reserved      = -1;",
          "831: static int hf_mq_cih_flags_synconret    = -1;",
          "833: static int hf_mq_cih_flags_passexpir    = -1;",
          "",
          "[Added Lines]",
          "849: static int hf_mq_iih_mfsmapname = -1;",
          "850: static int hf_mq_iih_replytofmt = -1;",
          "852: static int hf_mq_iih_transinstid = -1;",
          "853: static int hf_mq_iih_transstate = -1;",
          "854: static int hf_mq_iih_commimode = -1;",
          "856: static int hf_mq_iih_reserved = -1;",
          "858: static int hf_mq_ims_ll = -1;",
          "859: static int hf_mq_ims_zz = -1;",
          "860: static int hf_mq_ims_trx = -1;",
          "861: static int hf_mq_ims_data = -1;",
          "863: static int hf_mq_tm_StructID = -1;",
          "864: static int hf_mq_tm_version = -1;",
          "865: static int hf_mq_tm_QName = -1;",
          "866: static int hf_mq_tm_ProcessNme = -1;",
          "867: static int hf_mq_tm_TriggerData = -1;",
          "868: static int hf_mq_tm_ApplType = -1;",
          "869: static int hf_mq_tm_ApplId = -1;",
          "870: static int hf_mq_tm_EnvData = -1;",
          "871: static int hf_mq_tm_UserData = -1;",
          "873: static int hf_mq_tmc2_StructID = -1;",
          "874: static int hf_mq_tmc2_version = -1;",
          "875: static int hf_mq_tmc2_QName = -1;",
          "876: static int hf_mq_tmc2_ProcessNme = -1;",
          "877: static int hf_mq_tmc2_TriggerData = -1;",
          "878: static int hf_mq_tmc2_ApplType = -1;",
          "879: static int hf_mq_tmc2_ApplId = -1;",
          "880: static int hf_mq_tmc2_EnvData = -1;",
          "881: static int hf_mq_tmc2_UserData = -1;",
          "882: static int hf_mq_tmc2_QMgrName = -1;",
          "884: static int hf_mq_cih_flags_synconret = -1;",
          "886: static int hf_mq_cih_flags_passexpir = -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "838:     &hf_mq_cih_flags_passexpir   ,",
          "839:     NULL",
          "840: };",
          "848: static int hf_mq_cih_facilkeeptime = -1;",
          "849: static int hf_mq_cih_adsdescriptor = -1;",
          "851: static int hf_mq_cih_taskendstatus = -1;",
          "852: static int hf_mq_cih_bridgefactokn = -1;",
          "855: static int hf_mq_cih_authenticator = -1;",
          "859: static int hf_mq_cih_remotetransid = -1;",
          "860: static int hf_mq_cih_transactionid = -1;",
          "878: static const int *pf_flds_rmh_flags[] =",
          "879: {",
          "880:     &hf_mq_rmh_flags_last,",
          "881:     NULL",
          "882: };",
          "894: static int hf_mq_rmh_datalogicofsl = -1;",
          "895: static int hf_mq_rmh_datalogicofsh = -1;",
          "902: static gint ett_mq = -1;",
          "903: static gint ett_mq_tsh = -1;",
          "",
          "[Removed Lines]",
          "841: static int hf_mq_cih_returncode    = -1;",
          "842: static int hf_mq_cih_compcode      = -1;",
          "843: static int hf_mq_cih_reasoncode    = -1;",
          "844: static int hf_mq_cih_uowcontrols   = -1;",
          "845: static int hf_mq_cih_getwaitintv   = -1;",
          "846: static int hf_mq_cih_linktype      = -1;",
          "847: static int hf_mq_cih_outdatalen    = -1;",
          "850: static int hf_mq_cih_converstask   = -1;",
          "853: static int hf_mq_cih_function      = -1;",
          "854: static int hf_mq_cih_abendcode     = -1;",
          "856: static int hf_mq_cih_reserved      = -1;",
          "857: static int hf_mq_cih_replytofmt    = -1;",
          "858: static int hf_mq_cih_remotesysid   = -1;",
          "861: static int hf_mq_cih_facilitylike  = -1;",
          "862: static int hf_mq_cih_attentionid   = -1;",
          "863: static int hf_mq_cih_startcode     = -1;",
          "864: static int hf_mq_cih_cancelcode    = -1;",
          "865: static int hf_mq_cih_nexttransid   = -1;",
          "866: static int hf_mq_cih_reserved2     = -1;",
          "867: static int hf_mq_cih_reserved3     = -1;",
          "868: static int hf_mq_cih_cursorpos     = -1;",
          "869: static int hf_mq_cih_erroroffset   = -1;",
          "870: static int hf_mq_cih_inputitem     = -1;",
          "871: static int hf_mq_cih_reserved4     = -1;",
          "873: static int hf_mq_rfh_ccsid        = -1;",
          "874: static int hf_mq_rfh_length       = -1;",
          "875: static int hf_mq_rfh_string       = -1;",
          "877: static int hf_mq_rmh_flags_last    = -1;",
          "883: static int hf_mq_rmh_objecttype    = -1;",
          "884: static int hf_mq_rmh_objectinstid  = -1;",
          "885: static int hf_mq_rmh_srcenvlen     = -1;",
          "886: static int hf_mq_rmh_srcenvofs     = -1;",
          "887: static int hf_mq_rmh_srcnamelen    = -1;",
          "888: static int hf_mq_rmh_srcnameofs    = -1;",
          "889: static int hf_mq_rmh_dstenvlen     = -1;",
          "890: static int hf_mq_rmh_dstenvofs     = -1;",
          "891: static int hf_mq_rmh_dstnamelen    = -1;",
          "892: static int hf_mq_rmh_dstnameofs    = -1;",
          "893: static int hf_mq_rmh_datalogiclen  = -1;",
          "897: static int hf_mq_wih_servicename  = -1;",
          "898: static int hf_mq_wih_servicestep  = -1;",
          "899: static int hf_mq_wih_msgtoken     = -1;",
          "900: static int hf_mq_wih_reserved     = -1;",
          "",
          "[Added Lines]",
          "894: static int hf_mq_cih_returncode = -1;",
          "895: static int hf_mq_cih_compcode = -1;",
          "896: static int hf_mq_cih_reasoncode = -1;",
          "897: static int hf_mq_cih_uowcontrols = -1;",
          "898: static int hf_mq_cih_getwaitintv = -1;",
          "899: static int hf_mq_cih_linktype = -1;",
          "900: static int hf_mq_cih_outdatalen = -1;",
          "903: static int hf_mq_cih_converstask = -1;",
          "906: static int hf_mq_cih_function = -1;",
          "907: static int hf_mq_cih_abendcode = -1;",
          "909: static int hf_mq_cih_reserved = -1;",
          "910: static int hf_mq_cih_replytofmt = -1;",
          "911: static int hf_mq_cih_remotesysid = -1;",
          "914: static int hf_mq_cih_facilitylike = -1;",
          "915: static int hf_mq_cih_attentionid = -1;",
          "916: static int hf_mq_cih_startcode = -1;",
          "917: static int hf_mq_cih_cancelcode = -1;",
          "918: static int hf_mq_cih_nexttransid = -1;",
          "919: static int hf_mq_cih_reserved2 = -1;",
          "920: static int hf_mq_cih_reserved3 = -1;",
          "921: static int hf_mq_cih_cursorpos = -1;",
          "922: static int hf_mq_cih_erroroffset = -1;",
          "923: static int hf_mq_cih_inputitem = -1;",
          "924: static int hf_mq_cih_reserved4 = -1;",
          "926: static int hf_mq_rfh_ccsid = -1;",
          "927: static int hf_mq_rfh_length = -1;",
          "928: static int hf_mq_rfh_string = -1;",
          "930: static int hf_mq_rmh_flags_last = -1;",
          "936: static int hf_mq_rmh_objecttype = -1;",
          "937: static int hf_mq_rmh_objectinstid = -1;",
          "938: static int hf_mq_rmh_srcenvlen = -1;",
          "939: static int hf_mq_rmh_srcenvofs = -1;",
          "940: static int hf_mq_rmh_srcnamelen = -1;",
          "941: static int hf_mq_rmh_srcnameofs = -1;",
          "942: static int hf_mq_rmh_dstenvlen = -1;",
          "943: static int hf_mq_rmh_dstenvofs = -1;",
          "944: static int hf_mq_rmh_dstnamelen = -1;",
          "945: static int hf_mq_rmh_dstnameofs = -1;",
          "946: static int hf_mq_rmh_datalogiclen = -1;",
          "950: static int hf_mq_wih_servicename = -1;",
          "951: static int hf_mq_wih_servicestep = -1;",
          "952: static int hf_mq_wih_msgtoken = -1;",
          "953: static int hf_mq_wih_reserved = -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "949: static gint ett_mq_pmo = -1;",
          "950: static gint ett_mq_pmo_option = -1;",
          "951: static gint ett_mq_rfh_ValueName = -1;",
          "953: static gint ett_mq_lpoo = -1;",
          "954: static gint ett_mq_lpoo_options = -1;",
          "955: static gint ett_mq_lpoo_lpiopts = -1;",
          "958: static gint ett_mq_head_flags = -1;",
          "960: static gint ett_mq_xa = -1;",
          "961: static gint ett_mq_xa_tmflags = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005: static gint ett_mq_msgreq_RqstFlags = -1;",
          "1013: static gint ett_mq_ims = -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "987: static reassembly_table mq_reassembly_table;",
          "1404: DEF_VALSB(notifcode)",
          "1405:     DEF_VALS2(NC_GET_INHIBITED     , \"GET_INHIBITED\"),",
          "1406:     DEF_VALS2(NC_GET_ALLOWED       , \"GET_ALLOWED\"),",
          "",
          "[Removed Lines]",
          "989: #define MQ_PORT_TCP    1414",
          "990: #define MQ_SOCKET_SPX  0x5E86",
          "992: #define MQ_STRUCTID_NULL          0x00000000",
          "994: #define MQ_STRUCTID_CAUT          0x43415554",
          "995: #define MQ_STRUCTID_CIH           0x43494820",
          "996: #define MQ_STRUCTID_DH            0x44482020",
          "997: #define MQ_STRUCTID_DLH           0x444C4820",
          "999: #define MQ_STRUCTID_FOPA          0x464F5041",
          "1000: #define MQ_STRUCTID_GMO           0x474D4F20",
          "1001: #define MQ_STRUCTID_ID            0x49442020",
          "1002: #define MQ_STRUCTID_IIH           0x49494820",
          "1004: #define MQ_STRUCTID_MD            0x4D442020",
          "1005: #define MQ_STRUCTID_MDE           0x4D444520",
          "1006: #define MQ_STRUCTID_MSH           0x4D534820",
          "1007: #define MQ_STRUCTID_OD            0x4F442020",
          "1008: #define MQ_STRUCTID_PMO           0x504D4F20",
          "1009: #define MQ_STRUCTID_RFH           0x52464820",
          "1010: #define MQ_STRUCTID_RMH           0x524D4820",
          "1031: #define MQ_STRUCTID_TM            0x544D2020",
          "1032: #define MQ_STRUCTID_TMC2          0x544D4332",
          "1034: #define MQ_MASK_TSHx              0xffffff00",
          "1037: #define MQ_STRUCTID_TSH           0x54534820",
          "1038: #define MQ_STRUCTID_TSHC          0x54534843",
          "1039: #define MQ_STRUCTID_TSHM          0x5453484D",
          "1040: #define MQ_STRUCTID_UID           0x55494420",
          "1041: #define MQ_STRUCTID_WIH           0x57494820",
          "1042: #define MQ_STRUCTID_XQH           0x58514820",
          "1044: #define MQ_STRUCTID_CAUT_EBCDIC   0xC3C1E4E3",
          "1045: #define MQ_STRUCTID_CIH_EBCDIC    0xC3C9C840",
          "1046: #define MQ_STRUCTID_DH_EBCDIC     0xC4C84040",
          "1047: #define MQ_STRUCTID_DLH_EBCDIC    0xC4D3C840",
          "1049: #define MQ_STRUCTID_GMO_EBCDIC    0xC7D4D640",
          "1050: #define MQ_STRUCTID_ID_EBCDIC     0xC9C44040",
          "1051: #define MQ_STRUCTID_IIH_EBCDIC    0xC9C9C840",
          "1053: #define MQ_STRUCTID_MD_EBCDIC     0xD4C44040",
          "1054: #define MQ_STRUCTID_MDE_EBCDIC    0xD4C4C540",
          "1055: #define MQ_STRUCTID_MSH_EBCDIC    0xD4E2C840",
          "1056: #define MQ_STRUCTID_FOPA_EBCDIC   0xD64FD7C1",
          "1057: #define MQ_STRUCTID_OD_EBCDIC     0xD6C44040",
          "1058: #define MQ_STRUCTID_PMO_EBCDIC    0xD7D4D640",
          "1059: #define MQ_STRUCTID_RFH_EBCDIC    0xD9C6C840",
          "1060: #define MQ_STRUCTID_RMH_EBCDIC    0xD9D4C840",
          "1081: #define MQ_STRUCTID_TM_EBCDIC     0xE3D44040",
          "1082: #define MQ_STRUCTID_TMC2_EBCDIC   0xE3D4C3F2",
          "1084: #define MQ_STRUCTID_TSHx_EBCDIC   0xE3E2C800",
          "1085: #define MQ_STRUCTID_TSH_EBCDIC    0xE3E2C840",
          "1086: #define MQ_STRUCTID_TSHC_EBCDIC   0xE3E2C8C3",
          "1087: #define MQ_STRUCTID_TSHM_EBCDIC   0xE3E2C8D4",
          "1089: #define MQ_STRUCTID_UID_EBCDIC    0xE4C9C440",
          "1090: #define MQ_STRUCTID_WIH_EBCDIC    0xE6C9C840",
          "1091: #define MQ_STRUCTID_XQH_EBCDIC    0xE7D8C840",
          "1093: #define MQ_MASK_SPxx              0xffff0000",
          "1094: #define MQ_MASK_SPxZ              0xffff00ff",
          "1096: #define MQ_TST_INITIAL            0x01",
          "1097: #define MQ_TST_RESYNC             0x02",
          "1098: #define MQ_TST_RESET              0x03",
          "1099: #define MQ_TST_MESSAGE            0x04",
          "1100: #define MQ_TST_STATUS             0x05",
          "1101: #define MQ_TST_SECURITY           0x06",
          "1102: #define MQ_TST_PING               0x07",
          "1103: #define MQ_TST_USERID             0x08",
          "1104: #define MQ_TST_HEARTBEAT          0x09",
          "1105: #define MQ_TST_CONAUTH_INFO       0x0A",
          "1106: #define MQ_TST_RENEGOTIATE_DATA   0x0B",
          "1107: #define MQ_TST_SOCKET_ACTION      0x0C",
          "1108: #define MQ_TST_ASYNC_MESSAGE      0x0D",
          "1109: #define MQ_TST_REQUEST_MSGS       0x0E",
          "1110: #define MQ_TST_NOTIFICATION       0x0F",
          "1111: #define MQ_TST_MQCONN             0x81",
          "1112: #define MQ_TST_MQDISC             0x82",
          "1113: #define MQ_TST_MQOPEN             0x83",
          "1114: #define MQ_TST_MQCLOSE            0x84",
          "1115: #define MQ_TST_MQGET              0x85",
          "1116: #define MQ_TST_MQPUT              0x86",
          "1117: #define MQ_TST_MQPUT1             0x87",
          "1118: #define MQ_TST_MQSET              0x88",
          "1119: #define MQ_TST_MQINQ              0x89",
          "1120: #define MQ_TST_MQCMIT             0x8A",
          "1121: #define MQ_TST_MQBACK             0x8B",
          "1122: #define MQ_TST_SPI                0x8C",
          "1123: #define MQ_TST_MQSTAT             0x8D",
          "1124: #define MQ_TST_MQSUB              0x8E",
          "1125: #define MQ_TST_MQSUBRQ            0x8F",
          "1126: #define MQ_TST_MQCONN_REPLY       0x91",
          "1127: #define MQ_TST_MQDISC_REPLY       0x92",
          "1128: #define MQ_TST_MQOPEN_REPLY       0x93",
          "1129: #define MQ_TST_MQCLOSE_REPLY      0x94",
          "1130: #define MQ_TST_MQGET_REPLY        0x95",
          "1131: #define MQ_TST_MQPUT_REPLY        0x96",
          "1132: #define MQ_TST_MQPUT1_REPLY       0x97",
          "1133: #define MQ_TST_MQSET_REPLY        0x98",
          "1134: #define MQ_TST_MQINQ_REPLY        0x99",
          "1135: #define MQ_TST_MQCMIT_REPLY       0x9A",
          "1136: #define MQ_TST_MQBACK_REPLY       0x9B",
          "1137: #define MQ_TST_SPI_REPLY          0x9C",
          "1138: #define MQ_TST_MQSTAT_REPLY       0x9D",
          "1139: #define MQ_TST_MQSUB_REPLY        0x9E",
          "1140: #define MQ_TST_MQSUBRQ_REPLY      0x9F",
          "1141: #define MQ_TST_XA_START           0xA1",
          "1142: #define MQ_TST_XA_END             0xA2",
          "1143: #define MQ_TST_XA_OPEN            0xA3",
          "1144: #define MQ_TST_XA_CLOSE           0xA4",
          "1145: #define MQ_TST_XA_PREPARE         0xA5",
          "1146: #define MQ_TST_XA_COMMIT          0xA6",
          "1147: #define MQ_TST_XA_ROLLBACK        0xA7",
          "1148: #define MQ_TST_XA_FORGET          0xA8",
          "1149: #define MQ_TST_XA_RECOVER         0xA9",
          "1150: #define MQ_TST_XA_COMPLETE        0xAA",
          "1151: #define MQ_TST_XA_START_REPLY     0xB1",
          "1152: #define MQ_TST_XA_END_REPLY       0xB2",
          "1153: #define MQ_TST_XA_OPEN_REPLY      0xB3",
          "1154: #define MQ_TST_XA_CLOSE_REPLY     0xB4",
          "1155: #define MQ_TST_XA_PREPARE_REPLY   0xB5",
          "1156: #define MQ_TST_XA_COMMIT_REPLY    0xB6",
          "1157: #define MQ_TST_XA_ROLLBACK_REPLY  0xB7",
          "1158: #define MQ_TST_XA_FORGET_REPLY    0xB8",
          "1159: #define MQ_TST_XA_RECOVER_REPLY   0xB9",
          "1160: #define MQ_TST_XA_COMPLETE_REPLY  0xBA",
          "1162: #define MQ_SPI_QUERY              0x01",
          "1163: #define MQ_SPI_PUT                0x02",
          "1164: #define MQ_SPI_GET                0x03",
          "1165: #define MQ_SPI_ACTIVATE           0x04",
          "1166: #define MQ_SPI_OPEN               0x0C",
          "1168: #define MQ_SPI_ACTIVATE_ENABLE    0x01",
          "1169: #define MQ_SPI_ACTIVATE_DISABLE   0x02",
          "1171: #define MQ_SPI_OPTIONS_BLANK_PADDED  0x01",
          "1172: #define MQ_SPI_OPTIONS_SYNCPOINT     0x02",
          "1173: #define MQ_SPI_OPTIONS_DEFERRED      0x04",
          "1175: #define MQ_TCF_CONFIRM_REQUEST    0x01",
          "1176: #define MQ_TCF_ERROR              0x02",
          "1177: #define MQ_TCF_REQUEST_CLOSE      0x04",
          "1178: #define MQ_TCF_CLOSE_CHANNEL      0x08",
          "1179: #define MQ_TCF_FIRST              0x10",
          "1180: #define MQ_TCF_LAST               0x20",
          "1181: #define MQ_TCF_REQUEST_ACCEPTED   0x40",
          "1182: #define MQ_TCF_DLQ_USED           0x80",
          "1184: #define MQ_TCF2_HDRCOMP           0x01",
          "1185: #define MQ_TCF2_MSGCOMP           0x02",
          "1186: #define MQ_TCF2_CSH               0x04",
          "1187: #define MQ_TCF2_CMIT_INTERVAL     0x08",
          "1189: #define MQ_ICF1_MSG_SEQ            0x01",
          "1190: #define MQ_ICF1_CONVERSION_CAPABLE 0x02",
          "1191: #define MQ_ICF1_SPLIT_MESSAGE      0x04",
          "1192: #define MQ_ICF1_REQUEST_INITIATION 0x08",
          "1193: #define MQ_ICF1_REQUEST_SECURITY   0x10",
          "1194: #define MQ_ICF1_MQREQUEST          0x20",
          "1195: #define MQ_ICF1_SVRCONN_SECURITY   0x40",
          "1196: #define MQ_ICF1_RUNTIME            0x80",
          "1198: #define MQ_ICF2_DIST_LIST_CAPABLE      0x01",
          "1199: #define MQ_ICF2_FAST_MESSAGES_REQUIRED 0x02",
          "1200: #define MQ_ICF2_RESPONDER_CONVERSION   0x04",
          "1201: #define MQ_ICF2_DUAL_UOW               0x08",
          "1202: #define MQ_ICF2_XAREQUEST              0x10",
          "1203: #define MQ_ICF2_XARUNTIME_APP          0x20",
          "1204: #define MQ_ICF2_SPIREQUEST             0x40",
          "1205: #define MQ_ICF2_TRACE_ROUTE_CAPABLE    0x80",
          "1207: #define MQ_ICF3_MSG_PROP_CAPABLE       0x01",
          "1208: #define MQ_ICF3_UNKNOWNX02             0x02",
          "1209: #define MQ_ICF3_MULTIPLEX_SYNCGET      0x08",
          "1211: #define MQ_IEF1_CCSID                  0x01",
          "1212: #define MQ_IEF1_ENCODING               0x02",
          "1213: #define MQ_IEF1_MAX_TRANSMISSION_SIZE  0x04",
          "1214: #define MQ_IEF1_FAP_LEVEL              0x08",
          "1215: #define MQ_IEF1_MAX_MSG_SIZE           0x10",
          "1216: #define MQ_IEF1_MAX_MSG_PER_BATCH      0x20",
          "1217: #define MQ_IEF1_SEQ_WRAP_VALUE         0x40",
          "1218: #define MQ_IEF1_HEARTBEAT_INTERVAL     0x80",
          "1220: #define MQ_IEF2_HDRCOMPLIST           0x01",
          "1221: #define MQ_IEF2_MSGCOMPLIST           0x02",
          "1222: #define MQ_IEF2_SSL_RESET             0x04",
          "1224: #define MQ_BIG_ENDIAN          0x01",
          "1225: #define MQ_LITTLE_ENDIAN       0x02",
          "1227: #define MQ_CONN_VERSION        0x01",
          "1228: #define MQ_CONNX_VERSION       0x03",
          "1230: #define MQ_STATUS_ERR_NO_CHANNEL              0x01",
          "1231: #define MQ_STATUS_ERR_CHANNEL_WRONG_TYPE      0x02",
          "1232: #define MQ_STATUS_ERR_QM_UNAVAILABLE          0x03",
          "1233: #define MQ_STATUS_ERR_MSG_SEQUENCE_ERROR      0x04",
          "1234: #define MQ_STATUS_ERR_QM_TERMINATING          0x05",
          "1235: #define MQ_STATUS_ERR_CAN_NOT_STORE           0x06",
          "1236: #define MQ_STATUS_ERR_USER_CLOSED             0x07",
          "1237: #define MQ_STATUS_ERR_TIMEOUT_EXPIRED         0x08",
          "1238: #define MQ_STATUS_ERR_TARGET_Q_UNKNOWN        0x09",
          "1239: #define MQ_STATUS_ERR_PROTOCOL_SEGMENT_TYPE   0x0A",
          "1240: #define MQ_STATUS_ERR_PROTOCOL_LENGTH_ERROR   0x0B",
          "1241: #define MQ_STATUS_ERR_PROTOCOL_INVALID_DATA   0x0C",
          "1242: #define MQ_STATUS_ERR_PROTOCOL_SEGMENT_ERROR  0x0D",
          "1243: #define MQ_STATUS_ERR_PROTOCOL_ID_ERROR       0x0E",
          "1244: #define MQ_STATUS_ERR_PROTOCOL_MSH_ERROR      0x0F",
          "1245: #define MQ_STATUS_ERR_PROTOCOL_GENERAL        0x10",
          "1246: #define MQ_STATUS_ERR_BATCH_FAILURE           0x11",
          "1247: #define MQ_STATUS_ERR_MESSAGE_LENGTH_ERROR    0x12",
          "1248: #define MQ_STATUS_ERR_SEGMENT_NUMBER_ERROR    0x13",
          "1249: #define MQ_STATUS_ERR_SECURITY_FAILURE        0x14",
          "1250: #define MQ_STATUS_ERR_WRAP_VALUE_ERROR        0x15",
          "1251: #define MQ_STATUS_ERR_CHANNEL_UNAVAILABLE     0x16",
          "1252: #define MQ_STATUS_ERR_CLOSED_BY_EXIT          0x17",
          "1253: #define MQ_STATUS_ERR_CIPHER_SPEC             0x18",
          "1254: #define MQ_STATUS_ERR_PEER_NAME               0x19",
          "1255: #define MQ_STATUS_ERR_SSL_CLIENT_CERTIFICATE  0x1A",
          "1256: #define MQ_STATUS_ERR_RMT_RSRCS_IN_RECOVERY   0x1B",
          "1257: #define MQ_STATUS_ERR_SSL_REFRESHING          0x1C",
          "1258: #define MQ_STATUS_ERR_INVALID_HOBJ            0x1D",
          "1259: #define MQ_STATUS_ERR_CONV_ID_ERROR           0x1E",
          "1260: #define MQ_STATUS_ERR_SOCKET_ACTION_TYPE      0x1F",
          "1261: #define MQ_STATUS_ERR_STANDBY_Q_MGR           0x20",
          "1263: #define MQ_STATUS_ERR_CCSID_NOT_SUPPORTED     0xF0",
          "1264: #define MQ_STATUS_ERR_ENCODING_INVALID        0xF1",
          "1265: #define MQ_STATUS_ERR_FAP_LEVEL               0xF2",
          "1266: #define MQ_STATUS_ERR_NEGOTIATION_FAILED      0xF3",
          "1269: #define MQ_XA_RBROLLBACK   100",
          "1270: #define MQ_XA_RBCOMMFAIL   101",
          "1271: #define MQ_XA_RBDEADLOCK   102",
          "1272: #define MQ_XA_RBINTEGRITY  103",
          "1273: #define MQ_XA_RBOTHER      104",
          "1274: #define MQ_XA_RBPROTO      105",
          "1275: #define MQ_XA_RBTIMEOUT    106",
          "1276: #define MQ_XA_RBTRANSIENT  107",
          "1277: #define MQ_XA_NOMIGRATE    9",
          "1278: #define MQ_XA_HEURHAZ      8",
          "1279: #define MQ_XA_HEURCOM      7",
          "1280: #define MQ_XA_HEURRB       6",
          "1281: #define MQ_XA_HEURMIX      5",
          "1282: #define MQ_XA_RETRY        4",
          "1283: #define MQ_XA_RDONLY       3",
          "1284: #define MQ_XA_OK           0",
          "1285: #define MQ_XAER_ASYNC      -2",
          "1286: #define MQ_XAER_RMERR      -3",
          "1287: #define MQ_XAER_NOTA       -4",
          "1288: #define MQ_XAER_INVAL      -5",
          "1289: #define MQ_XAER_PROTO      -6",
          "1290: #define MQ_XAER_RMFAIL     -7",
          "1291: #define MQ_XAER_DUPID      -8",
          "1292: #define MQ_XAER_OUTSIDE    -9",
          "1295: #define MQ_XA_TMNOFLAGS     0",
          "1296: #define MQ_XA_TMJOIN        0x200000",
          "1297: #define MQ_XA_TMENDRSCAN    0x800000",
          "1298: #define MQ_XA_TMSTARTRSCAN  0x1000000",
          "1299: #define MQ_XA_TMSUSPEND     0x2000000",
          "1300: #define MQ_XA_TMSUCCESS     0x4000000",
          "1301: #define MQ_XA_TMRESUME      0x8000000",
          "1302: #define MQ_XA_TMFAIL        0x20000000",
          "1303: #define MQ_XA_TMONEPHASE    0x40000000",
          "1305: #define MQ_PMRF_NONE              0x00",
          "1306: #define MQ_PMRF_MSG_ID            0x01",
          "1307: #define MQ_PMRF_CORREL_ID         0x02",
          "1308: #define MQ_PMRF_GROUP_ID          0x04",
          "1309: #define MQ_PMRF_FEEDBACK          0x08",
          "1310: #define MQ_PMRF_ACCOUNTING_TOKEN  0x10",
          "1314: #define MQ_TEXT_TSH                     \"Transmission Segment Header\"",
          "1315: #define MQ_TEXT_TSHC                    \"Transmission Segment Header Common\"",
          "1316: #define MQ_TEXT_TSHM                    \"Transmission Segment Header Multiplexed\"",
          "1317: #define MQ_TEXT_FCNO                    \"F Connect Option\"",
          "1318: #define MQ_TEXT_API                     \"API Header\"",
          "1319: #define MQ_TEXT_SOCKET                  \"Socket Action\"",
          "1320: #define MQ_TEXT_ID                      \"Initial Data\"",
          "1321: #define MQ_TEXT_UID                     \"User Id Data\"",
          "1322: #define MQ_TEXT_MSH                     \"Message Segment Header\"",
          "1323: #define MQ_TEXT_CAUT                    \"Connection Authority\"",
          "1324: #define MQ_TEXT_CONN                    \"MQCONN\"",
          "1325: #define MQ_TEXT_INQ                     \"MQINQ/MQSET\"",
          "1326: #define MQ_TEXT_PUT                     \"MQPUT/MQGET\"",
          "1327: #define MQ_TEXT_OPEN                    \"MQOPEN/MQCLOSE\"",
          "1328: #define MQ_TEXT_REQMSG                  \"REQUEST MESSAGE\"",
          "1329: #define MQ_TEXT_ASYMSG                  \"ASYNC MESSAGE\"",
          "1330: #define MQ_TEXT_NOTIFICATION            \"NOTIFICATION\"",
          "1331: #define MQ_TEXT_BIND_READAHEAD_AS_Q_DEF \"Bind/Read Ahead As Q Def\"",
          "1332: #define MQ_TEXT_IMMEDIATE_NONE          \"Close Immediate/No option\"",
          "1333: #define MQ_TEXT_MQPMO_NONE              \"Resp as Q Def/Resp as Topic Def/None\"",
          "1334: #define MQ_TEXT_MQGMO_NONE              \"No Wait/Prop as Q Def/None\"",
          "1335: #define MQ_TEXT_MQMO_NONE               \"None\"",
          "1336: #define MQ_TEXT_LPOOOPT_NONE            \"None\"",
          "1338: #define MQ_TEXT_PING  \"PING\"",
          "1339: #define MQ_TEXT_RESET \"RESET\"",
          "1340: #define MQ_TEXT_STAT  \"STATUS\"",
          "1341: #define MQ_TEXT_SPI   \"SPI\"",
          "1342: #define MQ_TEXT_XA    \"XA\"",
          "1343: #define MQ_TEXT_XID   \"Xid\"",
          "1344: #define MQ_TEXT_XINF  \"XA_info\"",
          "1346: #define MQ_TEXT_SPQU  \"SPI Query InOut\"",
          "1347: #define MQ_TEXT_SPQI  \"SPI Query In\"",
          "1348: #define MQ_TEXT_SPQO  \"SPI Query Out\"",
          "1349: #define MQ_TEXT_SPPU  \"SPI Put InOut\"",
          "1350: #define MQ_TEXT_SPPI  \"SPI Put In\"",
          "1351: #define MQ_TEXT_SPPO  \"SPI Put Out\"",
          "1352: #define MQ_TEXT_SPGU  \"SPI Get InOut\"",
          "1353: #define MQ_TEXT_SPGI  \"SPI Get In\"",
          "1354: #define MQ_TEXT_SPGO  \"SPI Get Out\"",
          "1355: #define MQ_TEXT_SPAU  \"SPI Activate InOut\"",
          "1356: #define MQ_TEXT_SPAI  \"SPI Activate In\"",
          "1357: #define MQ_TEXT_SPAO  \"SPI Activate Out\"",
          "1358: #define MQ_TEXT_SPOU  \"SPI InOut\"",
          "1359: #define MQ_TEXT_SPOI  \"SPI In\"",
          "1360: #define MQ_TEXT_SPOO  \"SPI Out\"",
          "1361: #define MQ_TEXT_LPOO  \"LPOO\"",
          "1362: #define MQ_TEXT_FOPA  \"FOPA\"",
          "1365: #define MQ_TEXT_CIH  \"CICS bridge Header\"",
          "1366: #define MQ_TEXT_DH   \"Distribution Header\"",
          "1367: #define MQ_TEXT_DLH  \"Dead-Letter Header\"",
          "1368: #define MQ_TEXT_GMO  \"Get Message Options\"",
          "1369: #define MQ_TEXT_IIH  \"IMS Information Header\"",
          "1370: #define MQ_TEXT_MD   \"Message Descriptor\"",
          "1371: #define MQ_TEXT_MDE  \"Message Descriptor Extension\"",
          "1372: #define MQ_TEXT_OD   \"Object Descriptor\"",
          "1373: #define MQ_TEXT_PMO  \"Put Message Options\"",
          "1374: #define MQ_TEXT_RMH  \"Reference Message Header\"",
          "1375: #define MQ_TEXT_RFH  \"Rules and Formatting Header\"",
          "1376: #define MQ_TEXT_TM   \"Trigger Message\"",
          "1377: #define MQ_TEXT_TMC2 \"Trigger Message 2 (character format)\"",
          "1378: #define MQ_TEXT_WIH  \"Work Information Header\"",
          "1379: #define MQ_TEXT_XQH  \"Transmission Queue Header\"",
          "1382: #define MQ_TEXT_OR   \"Object Record\"",
          "1383: #define MQ_TEXT_PMR  \"Put Message Record\"",
          "1384: #define MQ_TEXT_RR   \"Response Record\"",
          "1386: #define MQ_NC_GET_INHIBITED          1",
          "1387: #define MQ_NC_GET_ALLOWED            2",
          "1388: #define MQ_NC_CONN_STATE             3",
          "1389: #define MQ_NC_CONN_STATE_REPLY       4",
          "1390: #define MQ_NC_Q_STATE                5",
          "1391: #define MQ_NC_Q_STATE_REPLY          6",
          "1392: #define MQ_NC_QM_QUIESCING           7",
          "1393: #define MQ_NC_TXN_ALLOWED            8",
          "1394: #define MQ_NC_TXN_REVOKE             9",
          "1395: #define MQ_NC_TXN_REVOKE_REPLY      10",
          "1396: #define MQ_NC_CHECK_MSG             11",
          "1397: #define MQ_NC_BROWSE_FIRST          12",
          "1398: #define MQ_NC_MESSAGE_TOO_LARGE     13",
          "1399: #define MQ_NC_STREAMING_FAILURE     14",
          "1400: #define MQ_NC_CLIENT_ASYNC_EMPTY    15",
          "1401: #define MQ_NC_STREAMING_TXN_PAUSED  16",
          "1402: #define MQ_NC_RECONNECTION_COMPLETE 17",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1658:     DEF_VALS2(BIG_ENDIAN   , \"Big endian\"),",
          "1659: DEF_VALSE;",
          "1664: DEF_VALSE;",
          "1666: DEF_VALSB(sidtype)",
          "",
          "[Removed Lines]",
          "1661: DEF_VALSB(conn_version)",
          "1662:     DEF_VALS2(CONN_VERSION , \"MQCONN\"),",
          "1663:     DEF_VALS2(CONNX_VERSION, \"MQCONNX\"),",
          "",
          "[Added Lines]",
          "1301: DEF_VALSB(conn_options)",
          "1302:     DEF_VALS2(CONN_OPTION , \"MQCONN\"),",
          "1303:     DEF_VALS2(CONNX_OPTION, \"MQCONNX\"),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1706:     else if (CHECK_ENC(MQ_MQENC_FLOAT_MASK, MQ_MQENC_FLOAT_TNS))",
          "1707:     {",
          "1708:         DOPRT(\"FLT_TNS\");",
          "1710:     {",
          "1711:         DOPRT(\"FLT_UNKNOWN\");",
          "1712:     }",
          "",
          "[Removed Lines]",
          "1709:     } else",
          "",
          "[Added Lines]",
          "1349:     }",
          "1350:     else",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1750: #undef DOPRT",
          "1752:     proto_tree_add_uint_format_value(tree, hfindex, tvb, start, length, uEnc,",
          "1755:     return length;",
          "1756: }",
          "",
          "[Removed Lines]",
          "1753:         \"%8x-%d (%s)\", uEnc, uEnc, sEnc);",
          "",
          "[Added Lines]",
          "1394:                                      \"%8x-%d (%s)\", uEnc, uEnc, sEnc);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1968:         {",
          "1969:             gint iOffsetOR = 0;",
          "1970:             gint iRecord = 0;",
          "1972:             {",
          "1973:                 proto_tree *mq_tree = proto_tree_add_subtree(tree, tvb, offset + iOffsetOR, 96, ett_mq_or, NULL, MQ_TEXT_OR);",
          "1974:                 proto_tree_add_item(mq_tree, hf_mq_or_objname, tvb, offset + iOffsetOR, 48, p_mq_parm->mq_str_enc);",
          "",
          "[Removed Lines]",
          "1971:             for (iRecord = 0; iRecord < iNbrRecords ; iRecord++)",
          "",
          "[Added Lines]",
          "1612:             for (iRecord = 0; iRecord < iNbrRecords; iRecord++)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2015:         switch (iVersion)",
          "2016:         {",
          "2020:         }",
          "2022:         if (iSize != 0 && tvb_reported_length_remaining(tvb, offset) >= iSize)",
          "",
          "[Removed Lines]",
          "2017:         case 1: iSize = 72; break;",
          "2018:         case 2: iSize = 80; break;",
          "2019:         case 3: iSize = 100; break;",
          "",
          "[Added Lines]",
          "1658:             case 1: iSize = 72; break;",
          "1659:             case 2: iSize = 80; break;",
          "1660:             case 3: iSize = 100; break;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2170:         switch (iVersion)",
          "2171:         {",
          "2176:         }",
          "2178:         if (iSize != 0 && tvb_reported_length_remaining(tvb, offset) >= iSize)",
          "",
          "[Removed Lines]",
          "2172:         case 1: iSize = 168; break;",
          "2173:         case 2: iSize = 200; break;",
          "2174:         case 3: iSize = 336; break;",
          "2175:         case 4: iSize = 336+3*20+4; break;",
          "",
          "[Added Lines]",
          "1813:             case 1: iSize = 168; break;",
          "1814:             case 2: iSize = 200; break;",
          "1815:             case 3: iSize = 336; break;",
          "1816:             case 4: iSize = 336 + 3 * 20 + 4; break;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2225:                 }",
          "2226:                 if (iVersion >= 4)",
          "2227:                 {",
          "2231:                     proto_tree_add_item(mq_tree, hf_mq_od_resolvobjtyp, tvb, offset + 396, 4, p_mq_parm->mq_int_enc);",
          "2232:                 }",
          "2233:             }",
          "",
          "[Removed Lines]",
          "2228:                     dissect_mq_charv(tvb, mq_tree, offset+336, 20, ett_mq_od_objstr,    \"Object string\",                    p_mq_parm);",
          "2229:                     dissect_mq_charv(tvb, mq_tree, offset+356, 20, ett_mq_od_selstr,    \"Selection string\",                 p_mq_parm);",
          "2230:                     dissect_mq_charv(tvb, mq_tree, offset+376, 20, ett_mq_od_resobjstr, \"Resolved object string\",           p_mq_parm);",
          "",
          "[Added Lines]",
          "1869:                     dissect_mq_charv(tvb, mq_tree, offset + 336, 20, ett_mq_od_objstr,    \"Object string\",                    p_mq_parm);",
          "1870:                     dissect_mq_charv(tvb, mq_tree, offset + 356, 20, ett_mq_od_selstr,    \"Selection string\",                 p_mq_parm);",
          "1871:                     dissect_mq_charv(tvb, mq_tree, offset + 376, 20, ett_mq_od_resobjstr, \"Resolved object string\",           p_mq_parm);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2286:     guint8    iSIDL;",
          "2287:     guint8    iSID;",
          "2288:     char *sid_str;",
          "2291:     iSIDL = tvb_get_guint8(tvb, offset);",
          "2292:     proto_tree_add_item(tree, hf_mq_sidlen, tvb, offset, 1, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "2289:     gint    bOffset    = offset;",
          "",
          "[Added Lines]",
          "1930:     gint    bOffset = offset;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2350:             {",
          "2351:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", QM=%s\", sQMgr);",
          "2352:             }",
          "2354:         }",
          "2355:         if (mqroot_tree)",
          "2356:         {",
          "",
          "[Removed Lines]",
          "2353:             p_mq_parm->mq_id_ccsid.ccsid = (guint32)tvb_get_guint16(tvb, offset +  46,  p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "1994:             p_mq_parm->mq_id_ccsid.ccsid = (guint32)tvb_get_guint16(tvb, offset + 46, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2399:                     proto_tree_add_bitmask(mq_tree, tvb, offset + 132, hf_mq_id_icf3, ett_mq_id_icf3, pf_flds_icf3, ENC_BIG_ENDIAN);",
          "2402:                     proto_tree_add_item(mq_tree, hf_mq_id_Reserved3, tvb, offset + 134, 2, p_mq_parm->mq_int_enc);",
          "2403:                     proto_tree_add_item(mq_tree, hf_mq_id_ProcessId, tvb, offset + 136, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "2400:                     proto_tree_add_bitmask(mq_tree, tvb, offset + 133, hf_mq_id_Eicf3, ett_mq_id_eicf3, pf_flds_icf3, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "2041:                     proto_tree_add_bitmask(mq_tree, tvb, offset + 133, hf_mq_id_Eicf3, ett_mq_id_eicf3, pf_flds_ief3, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2432:         switch (iVersion)",
          "2433:         {",
          "2436:         }",
          "2438:         if (bDecode && iSize != 0 && tvb_reported_length_remaining(tvb, offset) >= iSize)",
          "",
          "[Removed Lines]",
          "2434:         case 1: iSize = 324; break;",
          "2435:         case 2: iSize = 364; break;",
          "",
          "[Added Lines]",
          "2075:             case 1: iSize = 324; break;",
          "2076:             case 2: iSize = 364; break;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2441:             p_mq_parm->iOfsCcs = offset + 28;",
          "2442:             p_mq_parm->iOfsFmt = offset + 32;",
          "2446:             if (tree)",
          "2447:             {",
          "2448:                 proto_tree *mq_tree = proto_tree_add_subtree(tree, tvb, offset, iSize, ett_mq_md, NULL, MQ_TEXT_MD);",
          "",
          "[Removed Lines]",
          "2444:             p_mq_parm->mq_md_ccsid.encod = tvb_get_guint32(tvb, offset +  24,  p_mq_parm->mq_int_enc);",
          "2445:             p_mq_parm->mq_md_ccsid.ccsid = tvb_get_guint32(tvb, offset +  28,  p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "2085:             p_mq_parm->mq_md_ccsid.encod = tvb_get_guint32(tvb, offset + 24, p_mq_parm->mq_int_enc);",
          "2086:             p_mq_parm->mq_md_ccsid.ccsid = tvb_get_guint32(tvb, offset + 28, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2475:                 if (iVersion >= 2)",
          "2476:                 {",
          "2478:                     proto_tree_add_item(mq_tree, hf_mq_md_msgseqnumber, tvb, offset + 348,  4, p_mq_parm->mq_int_enc);",
          "2482:                 }",
          "2483:             }",
          "2484:         }",
          "",
          "[Removed Lines]",
          "2477:                     proto_tree_add_item(mq_tree, hf_mq_md_groupid,        tvb, offset + 324, 24, ENC_NA);",
          "2479:                     proto_tree_add_item(mq_tree, hf_mq_md_offset,        tvb, offset + 352,  4, p_mq_parm->mq_int_enc);",
          "2480:                     proto_tree_add_item(mq_tree, hf_mq_md_msgflags,        tvb, offset + 356,  4, p_mq_parm->mq_int_enc);",
          "2481:                     proto_tree_add_item(mq_tree, hf_mq_md_origlen,        tvb, offset + 360,  4, p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "2118:                     proto_tree_add_item(mq_tree, hf_mq_md_groupid     , tvb, offset + 324, 24, ENC_NA);",
          "2120:                     proto_tree_add_item(mq_tree, hf_mq_md_offset      , tvb, offset + 352,  4, p_mq_parm->mq_int_enc);",
          "2121:                     proto_tree_add_item(mq_tree, hf_mq_md_msgflags    , tvb, offset + 356,  4, p_mq_parm->mq_int_enc);",
          "2122:                     proto_tree_add_item(mq_tree, hf_mq_md_origlen     , tvb, offset + 360,  4, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2492:     p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "2493:     if (p_mq_parm->mq_strucID == MQ_STRUCTID_FOPA || p_mq_parm->mq_strucID == MQ_STRUCTID_FOPA_EBCDIC)",
          "2494:     {",
          "2496:         if (iSize != 0 && tvb_reported_length_remaining(tvb, offset) >= iSize)",
          "2497:         {",
          "2498:             proto_tree *mq_tree = proto_tree_add_subtree(tree, tvb, offset, iSize, ett_mq_fopa, NULL, MQ_TEXT_FOPA);",
          "2501:             proto_tree_add_item(mq_tree, hf_mq_fopa_version , tvb, offset +  4, 4, p_mq_parm->mq_int_enc);",
          "2502:             proto_tree_add_item(mq_tree, hf_mq_fopa_length  , tvb, offset +  8, 4, p_mq_parm->mq_int_enc);",
          "2512:         }",
          "2513:     }",
          "2514:     return iSize;",
          "",
          "[Removed Lines]",
          "2495:         iSize = tvb_get_guint32(tvb, offset+8, p_mq_parm->mq_int_enc);",
          "2500:             proto_tree_add_item(mq_tree, hf_mq_fopa_StructID, tvb, offset,      4, p_mq_parm->mq_str_enc);",
          "2503:             proto_tree_add_item(mq_tree, hf_mq_fopa_unknown1, tvb, offset + 12, 4, p_mq_parm->mq_int_enc);",
          "2504:             proto_tree_add_item(mq_tree, hf_mq_fopa_unknown2, tvb, offset + 16, 4, p_mq_parm->mq_int_enc);",
          "2505:             proto_tree_add_item(mq_tree, hf_mq_fopa_unknown3, tvb, offset + 20, 8, p_mq_parm->mq_str_enc);",
          "2506:             if (iSize > 28)",
          "2507:             {",
          "2508:                 proto_tree_add_item(mq_tree, hf_mq_fopa_qprotect, tvb, offset + 28, 48, p_mq_parm->mq_int_enc);",
          "2509:                 proto_tree_add_item(mq_tree, hf_mq_fopa_unknown4, tvb, offset + 76, 4, p_mq_parm->mq_int_enc);",
          "2510:                 proto_tree_add_item(mq_tree, hf_mq_fopa_unknown5, tvb, offset + 80, 4, p_mq_parm->mq_int_enc);",
          "2511:             }",
          "",
          "[Added Lines]",
          "2136:         iSize = tvb_get_guint32(tvb, offset + 8, p_mq_parm->mq_int_enc);",
          "2141:             proto_tree_add_item(mq_tree, hf_mq_fopa_StructID, tvb, offset     , 4, p_mq_parm->mq_str_enc);",
          "2145:             proto_tree_add_item(mq_tree, hf_mq_fopa_DefPersistence, tvb, offset + 12, 4, p_mq_parm->mq_int_enc);",
          "2146:             proto_tree_add_item(mq_tree, hf_mq_fopa_DefPutRespType, tvb, offset + 16, 4, p_mq_parm->mq_int_enc);",
          "2147:             proto_tree_add_item(mq_tree, hf_mq_fopa_DefReadAhead, tvb, offset + 20, 4, p_mq_parm->mq_int_enc);",
          "2148:             proto_tree_add_item(mq_tree, hf_mq_fopa_PropertyControl, tvb, offset + 24, 4, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2531:     p_mq_parm->mq_strucID = MQ_STRUCTID_NULL;",
          "2532:     p_mq_parm->mq_int_enc = ENC_BIG_ENDIAN;",
          "2535:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"MQ\");",
          "",
          "[Removed Lines]",
          "2533:     p_mq_parm->mq_str_enc = ENC_UTF_8|ENC_NA;",
          "",
          "[Added Lines]",
          "2170:     p_mq_parm->mq_str_enc = ENC_UTF_8 | ENC_NA;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2542:     {",
          "2543:         p_mq_parm->mq_strucID = tvb_get_ntohl(tvb, offset);",
          "2544:         if (((p_mq_parm->mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx ||",
          "2546:             && tvb_reported_length_remaining(tvb, offset) >= 28)",
          "2547:         {",
          "2548:             proto_tree *mq_tree     = NULL;",
          "",
          "[Removed Lines]",
          "2545:              (p_mq_parm->mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC)",
          "",
          "[Added Lines]",
          "2182:             (p_mq_parm->mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2576:             {",
          "2577:                 p_mq_parm->iOfsEnc = offset + iSizeMPF + 20;",
          "2578:                 p_mq_parm->iOfsCcs = offset + iSizeMPF + 24;",
          "2580:             }",
          "2581:             p_mq_parm->mq_int_enc = (tvb_get_guint8(tvb, offset + iSizeMPF + 8) == MQ_LITTLE_ENDIAN ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "2582:             p_mq_parm->mq_ctlf1 = tvb_get_guint8(tvb, offset + iSizeMPF + 10);",
          "",
          "[Removed Lines]",
          "2579:                 p_mq_parm->iOfsFmt = offset ;",
          "",
          "[Added Lines]",
          "2216:                 p_mq_parm->iOfsFmt = offset;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2585:             p_mq_parm->mq_tsh_ccsid.encod = tvb_get_guint32(tvb, offset + iSizeMPF + 20, p_mq_parm->mq_int_enc);",
          "2586:             p_mq_parm->mq_tsh_ccsid.ccsid = tvb_get_guint16(tvb, offset + iSizeMPF + 24, p_mq_parm->mq_int_enc);",
          "2589:             {",
          "2590:                 bEBCDIC = TRUE;",
          "2591:                 p_mq_parm->mq_str_enc = ENC_EBCDIC | ENC_NA;",
          "",
          "[Removed Lines]",
          "2588:             if (p_mq_parm->mq_tsh_ccsid.ccsid == 500 && !bEBCDIC)",
          "",
          "[Added Lines]",
          "2225:             if (IS_EBCDIC(p_mq_parm->mq_tsh_ccsid.ccsid) && !bEBCDIC)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2595:             {",
          "2596:                 col_clear_fence(pinfo->cinfo, COL_INFO);",
          "2597:                 col_clear(pinfo->cinfo, COL_INFO);",
          "2600:             }",
          "2602:             if (tree)",
          "",
          "[Removed Lines]",
          "2598:                 col_append_sep_fstr(pinfo->cinfo, COL_INFO, \" | \", \" %-17s\", val_to_str_ext(p_mq_parm->mq_opcode, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "2599:                 col_set_fence(pinfo->cinfo, COL_INFO);",
          "",
          "[Added Lines]",
          "2235:                 col_add_fstr(pinfo->cinfo, COL_INFO, \"%-17s\", val_to_str_ext(p_mq_parm->mq_opcode, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2668:                         offset += iSizeAPI;",
          "2669:                         p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "2670:                     }",
          "2672:                     if ((p_mq_parm->mq_strucID == MQ_STRUCTID_MSH || p_mq_parm->mq_strucID == MQ_STRUCTID_MSH_EBCDIC) && capLen >= 20)",
          "2673:                     {",
          "2674:                         gint iSize = 20;",
          "",
          "[Removed Lines]",
          "2671:                     capLen = tvb_reported_length_remaining(tvb , offset);",
          "",
          "[Added Lines]",
          "2307:                     capLen = tvb_reported_length_remaining(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2853:                             }",
          "2854:                             iApp = tvb_get_guint32(tvb, offset + 48 + 28, iCod);",
          "2857:                             if (strip_trailing_blanks((guint8 *)sApplicationName, 28) > 0)",
          "2858:                             {",
          "2859:                                 col_append_fstr(pinfo->cinfo, COL_INFO, \" App=%s\", sApplicationName);",
          "2860:                             }",
          "2862:                             if (strip_trailing_blanks((guint8 *)sQMgr, 48) > 0)",
          "2863:                             {",
          "2864:                                 col_append_fstr(pinfo->cinfo, COL_INFO, \" QM=%s\", sQMgr);",
          "",
          "[Removed Lines]",
          "2856:                             sApplicationName = format_text_chr(wmem_packet_scope(), tvb_get_string_enc(wmem_packet_scope(), tvb, offset + 48, 28, iEnc), 28, '.');",
          "2861:                             sQMgr = format_text_chr(wmem_packet_scope(), tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 48, iEnc), 48, '.');",
          "",
          "[Added Lines]",
          "2492:                             sApplicationName = tvb_get_string_enc(wmem_packet_scope(), tvb, offset + 48, 28, iEnc);",
          "2493:                             sApplicationName = format_text_chr(wmem_packet_scope(), sApplicationName, strlen(sApplicationName), '.');",
          "2498:                             sQMgr = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 48, iEnc);",
          "2499:                             sQMgr = format_text_chr(wmem_packet_scope(), sQMgr, strlen(sQMgr), '.');",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2879:                                 if (iSizeCONN >= 120)",
          "2880:                                 {",
          "2882:                                     ptvcursor_add(cursor, hf_mq_conn_options, 4, iCod);",
          "2883:                                 }",
          "2884:                                 if (iSizeCONN >= 260)",
          "2885:                                 {",
          "",
          "[Removed Lines]",
          "2881:                                     ptvcursor_add(cursor, hf_mq_conn_version, 4, iCod);",
          "",
          "[Added Lines]",
          "2520:                                     ptvcursor_add(cursor, hf_mq_conn_Xoptions, 4, iCod);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2897:                                     ptvcursor_add(cursor, hf_mq_fcno_option, 4, iCod);",
          "2898:                                     if (iVersion == 2)",
          "2899:                                     {",
          "2900:                                         ptvcursor_add(cursor, hf_mq_fcno_msgid, 12, iEnc);",
          "2901:                                         ptvcursor_add(cursor, hf_mq_fcno_mqmid, 48, iEnc);",
          "2903:                                     }",
          "2904:                                     if (iVersion == 1)",
          "2905:                                     {",
          "",
          "[Removed Lines]",
          "2902:                                         ptvcursor_add(cursor, hf_mq_fcno_unknown02, 68, ENC_NA);",
          "",
          "[Added Lines]",
          "2538:                                         ptvcursor_add(cursor, hf_mq_fcno_connid, 24, iEnc);",
          "2539:                                         ptvcursor_add(cursor, hf_mq_fcno_unknown02, 116, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2995:                         proto_tree_add_item(mq_tree, hf_mq_notif_code,   tvb, offset +  8, 4, p_mq_parm->mq_int_enc);",
          "2996:                         proto_tree_add_item(mq_tree, hf_mq_notif_value,  tvb, offset + 12, 4, p_mq_parm->mq_int_enc);",
          "2999:                         p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "3000:                     }",
          "3001:                     else if (p_mq_parm->mq_opcode == MQ_TST_REQUEST_MSGS)",
          "",
          "[Removed Lines]",
          "2998:                         offset+=16;",
          "",
          "[Added Lines]",
          "2637:                         offset += 16;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3004:                         gint iFlags;",
          "3005:                         gint iGlbMsgIdx;",
          "3006:                         gint iMaxMsgLen;",
          "3008:                         gint iOpt;",
          "3011:                         iHdl       = tvb_get_guint32(tvb, offset +  4, p_mq_parm->mq_int_enc);",
          "3012:                         iMaxMsgLen = tvb_get_guint32(tvb, offset + 16, p_mq_parm->mq_int_enc);",
          "3013:                         iFlags     = tvb_get_guint32(tvb, offset + 32, p_mq_parm->mq_int_enc);",
          "3014:                         iGlbMsgIdx = tvb_get_guint32(tvb, offset + 36, p_mq_parm->mq_int_enc);",
          "3016:                         {",
          "3017:                             p_mq_parm->mq_msgreq_ccsid.encod = tvb_get_guint32(tvb, offset + 44, p_mq_parm->mq_int_enc);",
          "3018:                             p_mq_parm->mq_msgreq_ccsid.ccsid = tvb_get_guint32(tvb, offset + 48, p_mq_parm->mq_int_enc);",
          "3019:                         }",
          "3020:                         dissect_mq_addCR_colinfo(pinfo, p_mq_parm);",
          "3024:                         if (tree)",
          "3025:                         {",
          "",
          "[Removed Lines]",
          "3007:                         gint xOfs;",
          "3010:                         xOfs       = 0;",
          "3015:                         if (iFlags & 0x00000010)",
          "3021:                         col_append_fstr(pinfo->cinfo, COL_INFO, \" Hdl=0x%04x GlbMsgIdx=%d, MaxLen=%d\",",
          "3022:                             iHdl, iGlbMsgIdx, iMaxMsgLen);",
          "",
          "[Added Lines]",
          "2652:                         if (iFlags & MQ_REQUEST_MSG_SELECTION)",
          "2658:                         col_append_fstr(pinfo->cinfo, COL_INFO, \" Hdl=0x%04x RqstFlags=%08x GlbMsgIdx=%d MaxLen=%d \",",
          "2659:                                         iHdl, iFlags, iGlbMsgIdx, iMaxMsgLen);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3035:                             proto_tree_add_item(mq_tree, hf_mq_msgreq_WaitIntrv, tvb, offset + 24,  4, p_mq_parm->mq_int_enc);",
          "3036:                             proto_tree_add_item(mq_tree, hf_mq_msgreq_QueStatus, tvb, offset + 28,  4, p_mq_parm->mq_int_enc);",
          "3038:                             proto_tree_add_item(mq_tree, hf_mq_msgreq_GlbMsgIdx, tvb, offset + 36,  4, p_mq_parm->mq_int_enc);",
          "3041:                             {",
          "3042:                                 proto_tree_add_item(mq_tree, hf_mq_msgreq_SelectIdx, tvb, offset + 40,  2, p_mq_parm->mq_int_enc);",
          "3043:                                 proto_tree_add_item(mq_tree, hf_mq_msgreq_MQMDVers , tvb, offset + 42,  2, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3037:                             proto_tree_add_item(mq_tree, hf_mq_msgreq_RqstFlags, tvb, offset + 32,  4, p_mq_parm->mq_int_enc);",
          "3040:                             if (iFlags & 0x00000010)",
          "",
          "[Added Lines]",
          "2674:                             proto_tree_add_bitmask(mq_tree, tvb, offset + 32, hf_mq_msgreq_RqstFlags, ett_mq_msgreq_RqstFlags, pf_flds_msgreq_flags, p_mq_parm->mq_int_enc);",
          "2678:                             if (iFlags & MQ_REQUEST_MSG_SELECTION)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3048:                                 dissect_mq_MQMO(tvb, mq_tree, offset + 60, ett_mq_gmo_matchoption, p_mq_parm);",
          "3049:                                 iOpt = tvb_get_guint32(tvb, offset + 60, p_mq_parm->mq_int_enc);",
          "3051:                                 if (iOpt & MQ_MQMO_MATCH_MSG_ID)",
          "3052:                                 {",
          "3055:                                 }",
          "3056:                                 if (iOpt & MQ_MQMO_MATCH_CORREL_ID)",
          "3057:                                 {",
          "3060:                                 }",
          "3061:                                 if (iOpt & MQ_MQMO_MATCH_GROUP_ID)",
          "3062:                                 {",
          "3065:                                 }",
          "3066:                                 if (iOpt & MQ_MQMO_MATCH_MSG_TOKEN)",
          "3067:                                 {",
          "3070:                                 }",
          "3071:                             }",
          "3072:                         }",
          "3074:                         p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "3075:                     }",
          "3076:                     else if (p_mq_parm->mq_opcode == MQ_TST_ASYNC_MESSAGE)",
          "",
          "[Removed Lines]",
          "3053:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchMsgId, tvb, offset + 64 + xOfs, 24, p_mq_parm->mq_str_enc);",
          "3054:                                     xOfs += 24;",
          "3058:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchCorId, tvb, offset + 64 + xOfs, 24, p_mq_parm->mq_str_enc);",
          "3059:                                     xOfs += 24;",
          "3063:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchGrpid, tvb, offset + 64 + xOfs, 24, p_mq_parm->mq_str_enc);",
          "3064:                                     xOfs += 24;",
          "3068:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchMsgTk, tvb, offset + 64 + xOfs, 16, p_mq_parm->mq_str_enc);",
          "3069:                                     xOfs += 16;",
          "3073:                         offset += (iFlags & 0x00000010) ? (64+xOfs) : 40;",
          "",
          "[Added Lines]",
          "2689:                                 offset += MQ_REQUEST_MSG_SIZE_V1_SELECTION_FIXED_PART;",
          "2692:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchMsgId, tvb, offset, 24, p_mq_parm->mq_str_enc);",
          "2693:                                     offset += 24;",
          "2697:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchCorId, tvb, offset, 24, p_mq_parm->mq_str_enc);",
          "2698:                                     offset += 24;",
          "2702:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchGrpid, tvb, offset, 24, p_mq_parm->mq_str_enc);",
          "2703:                                     offset += 24;",
          "2707:                                     proto_tree_add_item(mq_tree, hf_mq_msgreq_mtchMsgTk, tvb, offset, 16, p_mq_parm->mq_str_enc);",
          "2708:                                     offset += 16;",
          "2711:                             else",
          "2712:                             {",
          "2713:                                 offset += MQ_REQUEST_MSG_SIZE_V1_NO_SELECTION;",
          "2714:                             }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3105:                             iStrLen = 0;",
          "3106:                         }",
          "3110:                         if (!mq_in_reassembly)",
          "3111:                         {",
          "",
          "[Removed Lines]",
          "3108:                         iHdrL = (iSegmIndex == 0) ? (54+1+iStrLen+iPadLen) : 24;",
          "",
          "[Added Lines]",
          "2750:                         iHdrL = (iSegmIndex == 0) ? (54 + 1 + iStrLen + iPadLen) : 24;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3113:                             col_append_fstr(pinfo->cinfo, COL_INFO,",
          "3114:                                             \" Hdl=0x%04x GlbMsgIdx=%d, Full Message, RC=%d(0x%x) - %s\",",
          "3115:                                             iHdl, iGlbMsgIdx, iReasnCode, iReasnCode,",
          "3117:                         }",
          "3119:                         mq_tree = proto_tree_add_subtree(mqroot_tree, tvb, offset, iHdrL, ett_mq_msg, NULL, MQ_TEXT_ASYMSG);",
          "",
          "[Removed Lines]",
          "3116:                                             val_to_str_ext(iReasnCode, GET_VALS_EXTP(mqrc), \"Unknown (0x%02x)\"));",
          "",
          "[Added Lines]",
          "2758:                                             val_to_str_ext(iReasnCode, GET_VALS_EXTP(MQRC), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3128:                         if (p_mq_parm->mq_ctlf1 & MQ_TCF_FIRST)",
          "3129:                         {",
          "3130:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_ReasonCod, tvb, offset + 24,  4, p_mq_parm->mq_int_enc);",
          "3133:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_MsgToken , tvb, offset + 36, 16, p_mq_parm->mq_int_enc);",
          "3134:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_Status   , tvb, offset + 52,  2, p_mq_parm->mq_int_enc);",
          "3135:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_resolQNLn, tvb, offset + 54,  1, ENC_NA);",
          "",
          "[Removed Lines]",
          "3131:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_ActMsgLen, tvb, offset + 28,  4, p_mq_parm->mq_int_enc);",
          "3132:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_TotMsgLen, tvb, offset + 32,  4, p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "2773:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_TotMsgLen, tvb, offset + 28,  4, p_mq_parm->mq_int_enc);",
          "2774:                             proto_tree_add_item(mq_tree, hf_mq_msgasy_ActMsgLen, tvb, offset + 32,  4, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3137:                             if (iPadLen)",
          "3138:                                 proto_tree_add_item(mq_tree, hf_mq_msgasy_padding  , tvb, offset + 55 + iStrLen, iPadLen, p_mq_parm->mq_str_enc);",
          "3139:                         }",
          "3141:                         p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "3143:                         iSizePayload = tvb_reported_length_remaining(tvb, offset);",
          "",
          "[Removed Lines]",
          "3140:                         offset+=iHdrL;",
          "",
          "[Added Lines]",
          "2782:                         offset += iHdrL;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3230:                                     }",
          "3231:                                 }",
          "3232:                                 else if ((p_mq_parm->mq_strucID == MQ_STRUCTID_SPAI || p_mq_parm->mq_strucID == MQ_STRUCTID_SPAI_EBCDIC)",
          "3234:                                 {",
          "3235:                                     proto_tree_add_item(mq_tree, hf_mq_spi_spai_mode    , tvb, offset +  12,  4, p_mq_parm->mq_int_enc);",
          "3236:                                     proto_tree_add_item(mq_tree, hf_mq_spi_spai_unknown1, tvb, offset +  16, 48, p_mq_parm->mq_str_enc);",
          "",
          "[Removed Lines]",
          "3233:                                     && tvb_reported_length_remaining(tvb, offset) >= 136)",
          "",
          "[Added Lines]",
          "2875:                                          && tvb_reported_length_remaining(tvb, offset) >= 136)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3239:                                     offset += 136;",
          "3240:                                 }",
          "3241:                                 else if ((p_mq_parm->mq_strucID == MQ_STRUCTID_SPGI || p_mq_parm->mq_strucID == MQ_STRUCTID_SPGI_EBCDIC)",
          "3243:                                 {",
          "3244:                                     proto_tree_add_item(mq_tree, hf_mq_spi_spgi_batchsz , tvb, offset + 12, 4, p_mq_parm->mq_int_enc);",
          "3245:                                     proto_tree_add_item(mq_tree, hf_mq_spi_spgi_batchint, tvb, offset + 16, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3242:                                     && tvb_reported_length_remaining(tvb, offset) >= 24)",
          "",
          "[Added Lines]",
          "2884:                                          && tvb_reported_length_remaining(tvb, offset) >= 24)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3247:                                     offset += 24;",
          "3248:                                 }",
          "3249:                                 else if ((p_mq_parm->mq_strucID == MQ_STRUCTID_SPGO || p_mq_parm->mq_strucID == MQ_STRUCTID_SPPI ||",
          "3252:                                 {",
          "3253:                                     proto_tree_add_bitmask(mq_tree, tvb, offset + 12, hf_mq_spi_spgo_options, ett_mq_spi_options, pf_flds_spiopt, ENC_BIG_ENDIAN);",
          "3254:                                     proto_tree_add_item(mq_tree, hf_mq_spi_spgo_size, tvb, offset + 16, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3250:                                     p_mq_parm->mq_strucID == MQ_STRUCTID_SPGO_EBCDIC || p_mq_parm->mq_strucID == MQ_STRUCTID_SPPI_EBCDIC)",
          "3251:                                     && tvb_reported_length_remaining(tvb, offset) >= 20)",
          "",
          "[Added Lines]",
          "2892:                                           p_mq_parm->mq_strucID == MQ_STRUCTID_SPGO_EBCDIC || p_mq_parm->mq_strucID == MQ_STRUCTID_SPPI_EBCDIC)",
          "2893:                                          && tvb_reported_length_remaining(tvb, offset) >= 20)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3268:                     {",
          "3270:                         mq_tree = proto_tree_add_subtree_format(mqroot_tree, tvb, offset, 16, ett_mq_xa, NULL,",
          "3273:                         proto_tree_add_item(mq_tree, hf_mq_xa_length,      tvb, offset,     4, ENC_BIG_ENDIAN);",
          "3274:                         proto_tree_add_item(mq_tree, hf_mq_xa_returnvalue, tvb, offset + 4, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3271:                                 \"%s (%s)\", MQ_TEXT_XA, val_to_str_ext(p_mq_parm->mq_opcode, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "",
          "[Added Lines]",
          "2913:                                                                 \"%s (%s)\", MQ_TEXT_XA, val_to_str_ext(p_mq_parm->mq_opcode, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3286:                                 offset += iSizeXid;",
          "3287:                         }",
          "3288:                         else if ((p_mq_parm->mq_opcode == MQ_TST_XA_OPEN || p_mq_parm->mq_opcode == MQ_TST_XA_CLOSE)",
          "3290:                         {",
          "3291:                             guint8 iXAInfoLength = 0;",
          "3292:                             iXAInfoLength = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "3289:                             && tvb_reported_length_remaining(tvb, offset) >= 1)",
          "",
          "[Added Lines]",
          "2931:                                  && tvb_reported_length_remaining(tvb, offset) >= 1)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3300:                             offset += 1 + iXAInfoLength;",
          "3301:                         }",
          "3302:                         else if ((p_mq_parm->mq_opcode == MQ_TST_XA_RECOVER || p_mq_parm->mq_opcode == MQ_TST_XA_RECOVER_REPLY)",
          "3304:                         {",
          "3305:                             gint iNbXid = 0;",
          "3306:                             iNbXid = tvb_get_guint32(tvb, offset, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3303:                             && tvb_reported_length_remaining(tvb, offset) >= 4)",
          "",
          "[Added Lines]",
          "2945:                                  && tvb_reported_length_remaining(tvb, offset) >= 4)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3325:                         guint iVersion;",
          "3326:                         guint iXtraData = 0;",
          "3327:                         gint  iSize = 32;",
          "3329:                         if (iVersion >= 3)",
          "3330:                         {",
          "3331:                             iSize += 56;",
          "",
          "[Removed Lines]",
          "3328:                         iVersion = tvb_get_guint32(tvb, offset+4, p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "2970:                         iVersion = tvb_get_guint32(tvb, offset + 4, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3339:                             proto_tree_add_item(mq_tree, hf_mq_lpoo_StructID, tvb, offset,     4, p_mq_parm->mq_str_enc);",
          "3340:                             proto_tree_add_item(mq_tree, hf_mq_lpoo_version , tvb, offset + 4, 4, p_mq_parm->mq_int_enc);",
          "3345:                             proto_tree_add_item(mq_tree, hf_mq_lpoo_unknown5      , tvb, offset + 16, 4, p_mq_parm->mq_int_enc);",
          "3346:                             proto_tree_add_item(mq_tree, hf_mq_lpoo_defpersist    , tvb, offset + 20, 4, p_mq_parm->mq_int_enc);",
          "3347:                             proto_tree_add_item(mq_tree, hf_mq_lpoo_defputresptype, tvb, offset + 24, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3342:                             dissect_mq_MQOO(tvb, mq_tree, offset+8, ett_mq_lpoo_options, hf_mq_lpoo_options, p_mq_parm);",
          "3344:                             dissect_mq_LPOO_LPIOPTS(tvb, mq_tree, offset+12, ett_mq_lpoo_lpiopts, p_mq_parm);",
          "",
          "[Added Lines]",
          "2984:                             dissect_mq_MQOO(tvb, mq_tree, offset + 8, ett_mq_lpoo_options, hf_mq_lpoo_options, p_mq_parm);",
          "2986:                             dissect_mq_LPOO_LPIOPTS(tvb, mq_tree, offset + 12, ett_mq_lpoo_lpiopts, p_mq_parm);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3354:                             }",
          "3355:                             offset += iSize;",
          "3356:                             p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "3358:                             {",
          "3359:                                 if (p_mq_parm->mq_opcode == MQ_TST_SPI_REPLY)",
          "3360:                                 {",
          "",
          "[Removed Lines]",
          "3357:                             if (iXtraData>0)",
          "",
          "[Added Lines]",
          "2999:                             if (iXtraData > 0)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3417:                         if ((iSizeGMO = dissect_mq_gmo(tvb, pinfo, mqroot_tree, offset, p_mq_parm)) != 0)",
          "3418:                         {",
          "3421:                         }",
          "3422:                         else if ((iSizePMO = dissect_mq_pmo(tvb, pinfo, mqroot_tree, offset, p_mq_parm, &iDistributionListSize)) != 0)",
          "3423:                         {",
          "3426:                         }",
          "3427:                         if (tvb_reported_length_remaining(tvb, offset) >= 4)",
          "3428:                         {",
          "",
          "[Removed Lines]",
          "3419:                             offset   += iSizeGMO;",
          "3420:                             bPayload  = TRUE;",
          "3424:                             offset   += iSizePMO;",
          "3425:                             bPayload  = TRUE;",
          "",
          "[Added Lines]",
          "3061:                             offset += iSizeGMO;",
          "3062:                             bPayload = TRUE;",
          "3066:                             offset += iSizePMO;",
          "3067:                             bPayload = TRUE;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3511:                                     iHeadersLength += iSizeDLH;",
          "3512:                                     p_mq_parm->mq_strucID = (tvb_reported_length_remaining(tvb, offset) >= 4) ? tvb_get_ntohl(tvb, offset) : MQ_STRUCTID_NULL;",
          "3513:                                 }",
          "3514:                                 if ((p_mq_parm->mq_strucID == MQ_STRUCTID_MDE || p_mq_parm->mq_strucID == MQ_STRUCTID_MDE_EBCDIC",
          "3520:                                     && tvb_reported_length_remaining(tvb, offset) >= 12)",
          "3521:                                 {",
          "3524:                                     gint iSizeHeader;",
          "3528:                                     if (iSizeHeader <= 32)",
          "",
          "[Removed Lines]",
          "3515:                                     || p_mq_parm->mq_strucID == MQ_STRUCTID_CIH || p_mq_parm->mq_strucID == MQ_STRUCTID_CIH_EBCDIC",
          "3516:                                     || p_mq_parm->mq_strucID == MQ_STRUCTID_IIH || p_mq_parm->mq_strucID == MQ_STRUCTID_IIH_EBCDIC",
          "3517:                                     || p_mq_parm->mq_strucID == MQ_STRUCTID_RFH || p_mq_parm->mq_strucID == MQ_STRUCTID_RFH_EBCDIC",
          "3518:                                     || p_mq_parm->mq_strucID == MQ_STRUCTID_RMH || p_mq_parm->mq_strucID == MQ_STRUCTID_RMH_EBCDIC",
          "3519:                                     || p_mq_parm->mq_strucID == MQ_STRUCTID_WIH || p_mq_parm->mq_strucID == MQ_STRUCTID_WIH_EBCDIC)",
          "3525:                                     iSizeHeader = (gint) tvb_get_guint32(tvb, offset + 8, p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "3156:                                 if ((p_mq_parm->mq_strucID == MQ_STRUCTID_TM || p_mq_parm->mq_strucID == MQ_STRUCTID_TM_EBCDIC)",
          "3157:                                     && tvb_reported_length_remaining(tvb, offset) >= 8)",
          "3158:                                 {",
          "3160:                                     if (tree)",
          "3161:                                     {",
          "3162:                                         mq_tree = proto_tree_add_subtree(mqroot_tree, tvb, offset, tvb_reported_length_remaining(tvb, offset), ett_mq_head, NULL,",
          "3163:                                                                          val_to_str_ext(p_mq_parm->mq_strucID, GET_VALS_EXTP(StructID), \"Unknown (0x%08x)\"));",
          "3164:                                     }",
          "3165:                                     proto_tree_add_item(mq_tree, hf_mq_tm_StructID, tvb, offset + 0, 4, p_mq_parm->mq_str_enc);",
          "3166:                                     proto_tree_add_item(mq_tree, hf_mq_tm_version, tvb, offset + 4, 4, p_mq_parm->mq_int_enc);",
          "3167:                                     proto_tree_add_item(mq_tree, hf_mq_tm_QName, tvb, offset + 8, 48, p_mq_parm->mq_str_enc);",
          "3168:                                     proto_tree_add_item(mq_tree, hf_mq_tm_ProcessNme, tvb, offset + 56, 48, p_mq_parm->mq_str_enc);",
          "3169:                                     proto_tree_add_item(mq_tree, hf_mq_tm_TriggerData, tvb, offset + 104, 64, p_mq_parm->mq_str_enc);",
          "3170:                                     proto_tree_add_item(mq_tree, hf_mq_tm_ApplType, tvb, offset + 168, 4, p_mq_parm->mq_int_enc);",
          "3171:                                     proto_tree_add_item(mq_tree, hf_mq_tm_ApplId, tvb, offset + 172, 256, p_mq_parm->mq_str_enc);",
          "3172:                                     proto_tree_add_item(mq_tree, hf_mq_tm_EnvData, tvb, offset + 428, 128, p_mq_parm->mq_str_enc);",
          "3173:                                     proto_tree_add_item(mq_tree, hf_mq_tm_UserData, tvb, offset + 556, 128, p_mq_parm->mq_str_enc);",
          "3174:                                     offset += 684;",
          "3175:                                 }",
          "3176:                                 if ((p_mq_parm->mq_strucID == MQ_STRUCTID_TMC2 || p_mq_parm->mq_strucID == MQ_STRUCTID_TMC2_EBCDIC)",
          "3177:                                     && tvb_reported_length_remaining(tvb, offset) >= 8)",
          "3178:                                 {",
          "3179:                                     if (tree)",
          "3180:                                     {",
          "3181:                                         mq_tree = proto_tree_add_subtree(mqroot_tree, tvb, offset, tvb_reported_length_remaining(tvb, offset), ett_mq_head, NULL,",
          "3182:                                                                          val_to_str_ext(p_mq_parm->mq_strucID, GET_VALS_EXTP(StructID), \"Unknown (0x%08x)\"));",
          "3183:                                     }",
          "3184:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_StructID, tvb, offset + 0, 4, p_mq_parm->mq_str_enc);",
          "3185:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_version, tvb, offset + 4, 4, p_mq_parm->mq_str_enc);",
          "3186:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_QName, tvb, offset + 8, 48, p_mq_parm->mq_str_enc);",
          "3187:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_ProcessNme, tvb, offset + 56, 48, p_mq_parm->mq_str_enc);",
          "3188:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_TriggerData, tvb, offset + 104, 64, p_mq_parm->mq_str_enc);",
          "3189:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_ApplType, tvb, offset + 168, 4, p_mq_parm->mq_str_enc);",
          "3190:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_ApplId, tvb, offset + 172, 256, p_mq_parm->mq_str_enc);",
          "3191:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_EnvData, tvb, offset + 428, 128, p_mq_parm->mq_str_enc);",
          "3192:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_UserData, tvb, offset + 556, 128, p_mq_parm->mq_str_enc);",
          "3193:                                     proto_tree_add_item(mq_tree, hf_mq_tmc2_QMgrName, tvb, offset + 684, 48, p_mq_parm->mq_str_enc);",
          "3194:                                     offset += 732;",
          "3195:                                 }",
          "3197:                                      || p_mq_parm->mq_strucID == MQ_STRUCTID_CIH || p_mq_parm->mq_strucID == MQ_STRUCTID_CIH_EBCDIC",
          "3198:                                      || p_mq_parm->mq_strucID == MQ_STRUCTID_IIH || p_mq_parm->mq_strucID == MQ_STRUCTID_IIH_EBCDIC",
          "3199:                                      || p_mq_parm->mq_strucID == MQ_STRUCTID_RFH || p_mq_parm->mq_strucID == MQ_STRUCTID_RFH_EBCDIC",
          "3200:                                      || p_mq_parm->mq_strucID == MQ_STRUCTID_RMH || p_mq_parm->mq_strucID == MQ_STRUCTID_RMH_EBCDIC",
          "3201:                                      || p_mq_parm->mq_strucID == MQ_STRUCTID_WIH || p_mq_parm->mq_strucID == MQ_STRUCTID_WIH_EBCDIC",
          "3202:                                      )",
          "3208:                                     iSizeHeader = (gint)tvb_get_guint32(tvb, offset + 8, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3542:                                         p_mq_parm->iOfsCcs = offset + 16;",
          "3543:                                         p_mq_parm->iOfsFmt = offset + 20;",
          "3547:                                         iTmp = p_mq_parm->mq_head_ccsid.ccsid;",
          "3548:                                         if (iTmp == 0)",
          "3549:                                             iTmp = p_mq_parm->mq_md_ccsid.ccsid;",
          "3553:                                         else",
          "3556:                                         if (tree)",
          "3557:                                         {",
          "3558:                                             mq_tree = proto_tree_add_subtree(mqroot_tree, tvb, offset, iSizeHeader, ett_mq_head, NULL,",
          "3561:                                             proto_tree_add_item(mq_tree, hf_mq_head_StructID, tvb, offset,      4, p_mq_parm->mq_str_enc);",
          "3562:                                             proto_tree_add_item(mq_tree, hf_mq_head_version , tvb, offset +  4, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3545:                                         iVer = (gint)tvb_get_guint32(tvb, offset +  4, p_mq_parm->mq_int_enc);",
          "3546:                                         iLen = (gint)tvb_get_guint32(tvb, offset +  8, p_mq_parm->mq_int_enc);",
          "3551:                                         if (iTmp == 500)",
          "3552:                                             p_mq_parm->mq_str_enc = ENC_EBCDIC|ENC_NA;",
          "3554:                                             p_mq_parm->mq_str_enc = ENC_UTF_8|ENC_NA;",
          "3559:                                                                 val_to_str_ext(p_mq_parm->mq_strucID, GET_VALS_EXTP(StructID), \"Unknown (0x%08x)\"));",
          "",
          "[Added Lines]",
          "3228:                                         iVer = (gint)tvb_get_guint32(tvb, offset + 4, p_mq_parm->mq_int_enc);",
          "3229:                                         iLen = (gint)tvb_get_guint32(tvb, offset + 8, p_mq_parm->mq_int_enc);",
          "3234:                                         if (IS_EBCDIC(iTmp))",
          "3235:                                             p_mq_parm->mq_str_enc = ENC_EBCDIC | ENC_NA;",
          "3237:                                             p_mq_parm->mq_str_enc = ENC_UTF_8 | ENC_NA;",
          "3242:                                                                              val_to_str_ext(p_mq_parm->mq_strucID, GET_VALS_EXTP(StructID), \"Unknown (0x%08x)\"));",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3602:                                             }",
          "3603:                                             else if (p_mq_parm->mq_strucID == MQ_STRUCTID_IIH || p_mq_parm->mq_strucID == MQ_STRUCTID_IIH_EBCDIC)",
          "3604:                                             {",
          "3605:                                                 proto_tree_add_bitmask(mq_tree, tvb, offset + 28, hf_mq_head_flags, ett_mq_head_flags, pf_flds_iih_flags, ENC_BIG_ENDIAN);",
          "3615:                                             }",
          "3616:                                             else if (p_mq_parm->mq_strucID == MQ_STRUCTID_CIH || p_mq_parm->mq_strucID == MQ_STRUCTID_CIH_EBCDIC)",
          "3617:                                             {",
          "",
          "[Removed Lines]",
          "3606:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_ltermoverride, tvb, offset + 32,  8, p_mq_parm->mq_str_enc);",
          "3607:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_mfsmapname   , tvb, offset + 40,  8, p_mq_parm->mq_str_enc);",
          "3608:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_replytofmt   , tvb, offset + 48,  8, p_mq_parm->mq_str_enc);",
          "3609:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_authenticator, tvb, offset + 56,  8, p_mq_parm->mq_str_enc);",
          "3610:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_transinstid  , tvb, offset + 64, 16, ENC_NA);",
          "3611:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_transstate   , tvb, offset + 80,  1, p_mq_parm->mq_str_enc);",
          "3612:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_commimode    , tvb, offset + 81,  1, p_mq_parm->mq_str_enc);",
          "3613:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_securityscope, tvb, offset + 82,  1, p_mq_parm->mq_str_enc);",
          "3614:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_reserved     , tvb, offset + 83,  1, p_mq_parm->mq_str_enc);",
          "",
          "[Added Lines]",
          "3288:                                                 gint16 sLen;",
          "3289:                                                 gint32 iPos;",
          "3290:                                                 proto_tree *mq_ims;",
          "3293:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_ltermoverride, tvb, offset + 32, 8, p_mq_parm->mq_str_enc);",
          "3294:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_mfsmapname, tvb, offset + 40, 8, p_mq_parm->mq_str_enc);",
          "3295:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_replytofmt, tvb, offset + 48, 8, p_mq_parm->mq_str_enc);",
          "3296:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_authenticator, tvb, offset + 56, 8, p_mq_parm->mq_str_enc);",
          "3297:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_transinstid, tvb, offset + 64, 16, ENC_NA);",
          "3298:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_transstate, tvb, offset + 80, 1, p_mq_parm->mq_str_enc);",
          "3299:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_commimode, tvb, offset + 81, 1, p_mq_parm->mq_str_enc);",
          "3300:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_securityscope, tvb, offset + 82, 1, p_mq_parm->mq_str_enc);",
          "3301:                                                 proto_tree_add_item(mq_tree, hf_mq_iih_reserved, tvb, offset + 83, 1, p_mq_parm->mq_str_enc);",
          "3303:                                                 iPos = offset + iSizeHeader;",
          "3304:                                                 sLen = tvb_get_guint16(tvb, iPos, p_mq_parm->mq_int_enc);",
          "3305:                                                 mq_ims = proto_tree_add_subtree(mq_tree, tvb, iPos, sLen, ett_mq_ims, NULL, \"IMS Message\");",
          "3306:                                                 proto_tree_add_item(mq_ims, hf_mq_ims_ll, tvb, iPos + 0, 2, p_mq_parm->mq_int_enc);",
          "3307:                                                 proto_tree_add_item(mq_ims, hf_mq_ims_zz, tvb, iPos + 2, 2, p_mq_parm->mq_int_enc);",
          "3308:                                                 proto_tree_add_item(mq_ims, hf_mq_ims_trx, tvb, iPos + 4, 8, p_mq_parm->mq_str_enc);",
          "3309:                                                 proto_tree_add_item(mq_ims, hf_mq_ims_data, tvb, iPos + 12, sLen - 12, ENC_NA);",
          "3310:                                                 offset += sLen;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3685:                                                 proto_tree *rfh_tree;",
          "3688:                                                 iPos = offset + 32;",
          "3689:                                                 iEnd = offset + iLen - 32;",
          "3691:                                                 {",
          "3692:                                                     iCCSID = (int)tvb_get_guint32(tvb, iPos, p_mq_parm->mq_int_enc);",
          "3693:                                                     proto_tree_add_item(mq_tree, hf_mq_rfh_ccsid, tvb, iPos, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Removed Lines]",
          "3687:                                                 proto_tree_add_item(mq_tree, hf_mq_head_flags , tvb, offset + 28, 4, p_mq_parm->mq_int_enc);",
          "3690:                                                 if ( iVer > 1 )",
          "",
          "[Added Lines]",
          "3383:                                                 proto_tree_add_item(mq_tree, hf_mq_head_flags, tvb, offset + 28, 4, p_mq_parm->mq_int_enc);",
          "3386:                                                 if (iVer > 1)",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3700:                                                 while (iPos < iEnd)",
          "3701:                                                 {",
          "3702:                                                     iLenStr = (int)tvb_get_guint32(tvb, iPos, p_mq_parm->mq_int_enc);",
          "3704:                                                     if (*sStr)",
          "3705:                                                         strip_trailing_blanks(sStr, iLenStr);",
          "3706:                                                     if (*sStr)",
          "3707:                                                         sStr = (guint8*)format_text_chr(wmem_packet_scope(), sStr, strlen((const char *)sStr), '.');",
          "3711:                                                     proto_tree_add_item(rfh_tree, hf_mq_rfh_length, tvb, iPos, 4, p_mq_parm->mq_int_enc);",
          "3712:                                                     proto_tree_add_item(rfh_tree, hf_mq_rfh_string, tvb, iPos + 4, iLenStr, p_mq_parm->mq_str_enc);",
          "",
          "[Removed Lines]",
          "3703:                                                     sStr = tvb_get_string_enc(wmem_packet_scope(), tvb, iPos + 4, iLenStr, (iCCSID != 500) ? ENC_ASCII : ENC_EBCDIC);",
          "3709:                                                     rfh_tree = proto_tree_add_subtree_format(mq_tree, tvb, iPos, iLenStr+4, ett_mq_rfh_ValueName, NULL, \"NameValue: %s\",  sStr);",
          "",
          "[Added Lines]",
          "3399:                                                     sStr = tvb_get_string_enc(wmem_packet_scope(), tvb, iPos + 4, iLenStr, IS_EBCDIC(iCCSID) ? ENC_EBCDIC : ENC_ASCII);",
          "3405:                                                     rfh_tree = proto_tree_add_subtree_format(mq_tree, tvb, iPos, iLenStr + 4, ett_mq_rfh_ValueName, NULL, \"NameValue: %s\", sStr);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3715:                                             }",
          "3716:                                             else",
          "3717:                                             {",
          "3719:                                                 proto_tree_add_item(mq_tree, hf_mq_head_struct, tvb, offset + 32, iSizeHeader - 32, ENC_NA);",
          "3720:                                             }",
          "3721:                                         }",
          "",
          "[Removed Lines]",
          "3718:                                                 proto_tree_add_item(mq_tree, hf_mq_head_flags , tvb, offset + 28, 4, p_mq_parm->mq_int_enc);",
          "",
          "[Added Lines]",
          "3414:                                                 proto_tree_add_item(mq_tree, hf_mq_head_flags, tvb, offset + 28, 4, p_mq_parm->mq_int_enc);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3736:                                 p_mq_parm->mq_cur_ccsid.encod = tvb_get_guint32(tvb, p_mq_parm->iOfsEnc, p_mq_parm->mq_int_enc);",
          "3737:                                 p_mq_parm->mq_cur_ccsid.ccsid = tvb_get_guint32(tvb, p_mq_parm->iOfsCcs, p_mq_parm->mq_int_enc);",
          "3738:                                 memcpy(p_mq_parm->mq_format,",
          "3742:                                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "3743:                                 if (!dissector_try_heuristic(mq_heur_subdissector_list, next_tvb, pinfo, mqroot_tree, &hdtbl_entry, p_mq_parm))",
          "",
          "[Removed Lines]",
          "3739:                                     tvb_get_string_enc(wmem_packet_scope(), tvb, p_mq_parm->iOfsFmt, sizeof(p_mq_parm->mq_format), p_mq_parm->mq_str_enc),",
          "3740:                                     sizeof(p_mq_parm->mq_format));",
          "",
          "[Added Lines]",
          "3435:                                        tvb_get_string_enc(wmem_packet_scope(), tvb, p_mq_parm->iOfsFmt, sizeof(p_mq_parm->mq_format), p_mq_parm->mq_str_enc),",
          "3436:                                        sizeof(p_mq_parm->mq_format));",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3757:                     {",
          "3758:                         p_mq_parm->mq_strucID = tvb_get_ntohl(tvb, offset);",
          "3759:                         proto_tree_add_subtree_format(mqroot_tree, tvb, offset, -1, ett_mq_structid, NULL,",
          "3761:                     }",
          "3762:                 }",
          "3763:                 else",
          "",
          "[Removed Lines]",
          "3760:                                 \"%s\", val_to_str_ext(p_mq_parm->mq_strucID, GET_VALS_EXTP(StructID), \"Unknown (0x%08x)\"));",
          "",
          "[Added Lines]",
          "3456:                                                       \"%s\", val_to_str_ext(p_mq_parm->mq_strucID, GET_VALS_EXTP(StructID), \"Unknown (0x%08x)\"));",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3793:     memset(&mq_parm, 0, sizeof(mq_parm_t));",
          "3794:     mq_parm.mq_strucID = tvb_get_ntohl(tvb, 0);",
          "3797:     {",
          "3798:         guint8   iCtlF        = 0;",
          "3799:         gint32   iSegL        = 0;",
          "",
          "[Removed Lines]",
          "3796:     if ( (mq_parm.mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx || (mq_parm.mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC )",
          "",
          "[Added Lines]",
          "3492:     if ((mq_parm.mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx || (mq_parm.mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3820:             iMulS = 8;",
          "3825:         {",
          "3828:         }",
          "3829:         else",
          "3830:         {",
          "",
          "[Removed Lines]",
          "3823:         iSegL    = tvb_get_ntohl ( tvb, 4);",
          "3824:         if (iMulS==8)",
          "3826:             mq_parm.mq_convID = tvb_get_ntohl (tvb,  8);",
          "3827:             mq_parm.mq_rqstID = tvb_get_ntohl (tvb, 12);",
          "",
          "[Added Lines]",
          "3519:         iSegL = tvb_get_ntohl(tvb, 4);",
          "3520:         if (iMulS == 8)",
          "3522:             mq_parm.mq_convID = tvb_get_ntohl(tvb, 8);",
          "3523:             mq_parm.mq_rqstID = tvb_get_ntohl(tvb, 12);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3833:         }",
          "3837:         mq_parm.mq_int_enc = iEnco;",
          "3840:         mq_parm.mq_opcode = iOpcd;",
          "3843:         mq_parm.mq_ctlf1 = iCtlF;",
          "3845:         bSeg1st = ((iCtlF & MQ_TCF_FIRST) != 0);",
          "",
          "[Removed Lines]",
          "3836:         iEnco    = (tvb_get_guint8(tvb,  8 + iMulS) == MQ_LITTLE_ENDIAN ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "3839:         iOpcd    = tvb_get_guint8( tvb,  9 + iMulS);",
          "3842:         iCtlF    = tvb_get_guint8( tvb, 10 + iMulS);",
          "",
          "[Added Lines]",
          "3532:         iEnco = (tvb_get_guint8(tvb, 8 + iMulS) == MQ_LITTLE_ENDIAN ? ENC_LITTLE_ENDIAN : ENC_BIG_ENDIAN);",
          "3535:         iOpcd = tvb_get_guint8(tvb, 9 + iMulS);",
          "3538:         iCtlF = tvb_get_guint8(tvb, 10 + iMulS);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3890:                 iSegLength = tvb_get_guint32(tvb, iHdrL + 16, iEnco);",
          "3895:                   if SegmIndex == 0, it has 54 bytes + the length and padding",
          "",
          "[Removed Lines]",
          "3892:                 iSegmIndex = tvb_get_guint16(tvb, iHdrL +20, iEnco);",
          "",
          "[Added Lines]",
          "3588:                 iSegmIndex = tvb_get_guint16(tvb, iHdrL + 20, iEnco);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3902:                     mq_AsyMsgAct = tvb_get_guint32(tvb, iHdrL + 28, iEnco);",
          "3903:                     mq_AsyMsgTot = tvb_get_guint32(tvb, iHdrL + 32, iEnco);",
          "3904:                     uStrL = tvb_get_guint8(tvb, iHdrL + 54);",
          "3906:                 }",
          "3907:                 bMore = !bSegLst;",
          "3909:                   First segment has a longer header",
          "3912:                 iNxtP += dissect_mq_md(tvb, NULL, iNxtP, &mq_parm, FALSE);",
          "",
          "[Removed Lines]",
          "3905:                     uPadL = ((((2+1+uStrL)/4)+1)*4)-(2+1+uStrL);",
          "3911:                 iNxtP  = iHdrL + ((bSeg1st) ? (54 + 1 + uStrL + uPadL) : (24));",
          "",
          "[Added Lines]",
          "3601:                     uPadL = ((((2 + 1 + uStrL) / 4) + 1) * 4) - (2 + 1 + uStrL);",
          "3607:                 iNxtP = iHdrL + ((bSeg1st) ? (54 + 1 + uStrL + uPadL) : (24));",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3926:                 else",
          "3927:                 {",
          "3928:                     fd_head = fragment_add_seq_next(&mq_reassembly_table,",
          "3932:                 }",
          "3934:                 if (tree)",
          "",
          "[Removed Lines]",
          "3929:                         tvb, iBegL,",
          "3930:                         pinfo, iConnectionId, NULL,",
          "3931:                         iSegL - iBegL, bMore);",
          "",
          "[Added Lines]",
          "3625:                                                     tvb, iBegL,",
          "3626:                                                     pinfo, iConnectionId, NULL,",
          "3627:                                                     iSegL - iBegL, bMore);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3941:                     else",
          "3942:                         proto_item_append_text(ti, \" [%s of a Reassembled MQ Segment]\",",
          "3943:                                                val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3945:                     proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, SegIdx=%d, SegLen=%d\",",
          "3946:                                            iHdl, iGlbMsgIdx, iSegmIndex, iSegLength);",
          "",
          "[Removed Lines]",
          "3944:                     dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3984:                         ti = proto_tree_add_item(tree, proto_mq, tvb, 0, -1, ENC_NA);",
          "3985:                         proto_item_append_text(ti, \"%s\",",
          "3986:                                                val_to_str_ext(iOpcd, GET_VALS_EXTP(opcode), \"Unknown (0x%02x)\"));",
          "3988:                         proto_item_append_text(ti, \" Hdl=0x%04x GlbMsgIdx=%d, Full, Len=%d, RC=%d(0x%x) - %s\",",
          "3989:                                                iHdl, iGlbMsgIdx,",
          "3990:                                                tvb_reported_length_remaining(next_tvb, 0),",
          "3991:                                                mq_AsyMsgRsn, mq_AsyMsgRsn,",
          "3993:                         mq_tree = proto_item_add_subtree(ti, ett_mq_reassemb);",
          "3994:                     }",
          "3995:                     else",
          "",
          "[Removed Lines]",
          "3987:                         dissect_mq_addCR_colinfo(pinfo, &mq_parm);",
          "3992:                                                val_to_str_ext(mq_AsyMsgRsn, GET_VALS_EXTP(mqrc), \"Unknown (0x%02x)\"));",
          "",
          "[Added Lines]",
          "3686:                                                val_to_str_ext(mq_AsyMsgRsn, GET_VALS_EXTP(MQRC), \"Unknown (0x%02x)\"));",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4036: {",
          "4037:     if (tvb_reported_length_remaining(tvb, offset) >= 8)",
          "4038:     {",
          "4041:         {",
          "4042:             return tvb_get_ntohl(tvb, offset + 4);",
          "4043:         }",
          "4044:     }",
          "4045:     return 0;",
          "4046: }",
          "",
          "[Removed Lines]",
          "4039:         guint32 mq_strucID = tvb_get_ntohl(tvb, 0);",
          "4040:         if ( (mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx || (mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC )",
          "",
          "[Added Lines]",
          "3733:         guint32 mq_strucID = tvb_get_ntohl(tvb, offset + 0);",
          "3734:         if ((mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx || (mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC)",
          "3738:         else",
          "3739:             return tvb_reported_length_remaining(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4059: }",
          "4061: static gboolean dissect_mq_heur(tvbuff_t *tvb, packet_info *pinfo,",
          "4063: {",
          "4064:     if ((tvb_captured_length(tvb) >= 4) && (tvb_reported_length(tvb) >= 28))",
          "4065:     {",
          "4066:         guint32 mq_strucID = tvb_get_ntohl(tvb, 0);",
          "4068:         {",
          "4070:             conversation_t  *conversation;",
          "",
          "[Removed Lines]",
          "4062:         proto_tree *tree, gboolean is_tcp, dissector_handle_t *ssl_app_handle)",
          "4067:         if ( (mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx || (mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC )",
          "",
          "[Added Lines]",
          "3758:                                 proto_tree *tree, gboolean is_tcp, dissector_handle_t *ssl_app_handle)",
          "3763:         if ((mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx || (mq_strucID & MQ_MASK_TSHx) == MQ_STRUCTID_TSHx_EBCDIC)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4096: static gboolean    dissect_mq_heur_ssl(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "4097: {",
          "4099:     return dissect_mq_heur(tvb, pinfo, tree, FALSE, app_handle);",
          "4100: }",
          "",
          "[Removed Lines]",
          "4098:     dissector_handle_t *app_handle = (dissector_handle_t *) data;",
          "",
          "[Added Lines]",
          "3794:     dissector_handle_t *app_handle = (dissector_handle_t *)data;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4133:         { &hf_mq_api_replylen , {\"Reply len..\", \"mq.api.replylength\", FT_UINT32, BASE_DEC, NULL, 0x0, \"API Reply length\", HFILL }},",
          "4134:         { &hf_mq_api_compcode , {\"Compl Code.\", \"mq.api.completioncode\", FT_UINT32, BASE_DEC, VALS(GET_VALSV(mqcc)), 0x0, \"API Completion code\", HFILL }},",
          "4136:         { &hf_mq_api_objecthdl, {\"Object Hdl.\", \"mq.api.hobj\", FT_UINT32, BASE_HEX, NULL, 0x0, \"API Object handle\", HFILL }},",
          "4138:         { &hf_mq_socket_conversid, {\"ConversId\", \"mq.socket.conversid\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"Socket Conversation Id\", HFILL }},",
          "",
          "[Removed Lines]",
          "4135:         { &hf_mq_api_reascode , {\"Reason Code\", \"mq.api.reasoncode\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(mqrc), 0x0, \"API Reason code\", HFILL }},",
          "",
          "[Added Lines]",
          "3831:         { &hf_mq_api_reascode , {\"Reason Code\", \"mq.api.reasoncode\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQRC), 0x0, \"API Reason code\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4214:         { &hf_mq_id_icf2_DualUOW  , {\"DualUOW\", \"mq.id.icf2.dualuow\"       , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF2_DUAL_UOW, \"ID ICF2 Dual UOW\", HFILL }},",
          "4215:         { &hf_mq_id_icf2_CanTrcRte, {\"Trace Rte Capab\", \"mq.id.icf2.cantraceroute\" , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF2_TRACE_ROUTE_CAPABLE, \"ID ICF2 Trace Route Capable\", HFILL }},",
          "4223:         { &hf_mq_id_ief1_mxtrsz , {\"Invalid Max Trans Size\", \"mq.id.ief1.mxtrsz\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_MAX_TRANSMISSION_SIZE, \"ID invalid maximum transmission size\", HFILL }},",
          "4224:         { &hf_mq_id_ief1_fap    , {\"Invalid FAP level\", \"mq.id.ief1.fap\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_FAP_LEVEL, \"ID invalid FAP level\", HFILL }},",
          "4225:         { &hf_mq_id_ief1_mxmsgsz, {\"Invalid message size\", \"mq.id.ief1.mxmsgsz\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_MAX_MSG_SIZE, \"ID invalid message size\", HFILL }},",
          "",
          "[Removed Lines]",
          "4217:         { &hf_mq_id_icf3_CanMsgPrp, {\"Msg Property Cap\", \"mq.id.icf.msgprpcap\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF3_MSG_PROP_CAPABLE, \"ID ICF3 Message PropertyCapable\", HFILL }},",
          "4218:         { &hf_mq_id_icf3_Unknown02, {\"Unknownx02\", \"mq.id.icf.unknown02\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF3_UNKNOWNX02, \"ID ICF3 Unknown Flag x02\", HFILL }},",
          "4219:         { &hf_mq_id_icf3_MPlxSyGet, {\"Multiplex_synchget\", \"mq.id.icf.Multiplex_synchget\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF3_MULTIPLEX_SYNCGET, \"ID ICF3 MULTIPLEX_SYNCGET\", HFILL }},",
          "4221:         { &hf_mq_id_ief1_ccsid  , {\"Invalid CCSID\", \"mq.id.ief1.ccsid\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_CCSID, \"ID invalid CCSID\", HFILL }},",
          "4222:         { &hf_mq_id_ief1_enc    , {\"Invalid encoding\", \"mq.id.ief1.enc\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_ENCODING, \"ID invalid encoding\", HFILL }},",
          "",
          "[Added Lines]",
          "3913:         { &hf_mq_id_icf3_CanMsgPrp   , {\"Msg Property Cap\", \"mq.id.icf3.msgpropertycap\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF3_MSG_PROP_CAPABLE, \"ID ICF3 Message PropertyCapable\", HFILL }},",
          "3914:         { &hf_mq_id_icf3_CanMulticast, {\"Multicast Cap\", \"mq.id.icf3.multicastcap\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF3_MULTICAST_CAPABLE, \"ID ICF3 Mutlicast Capabilities\", HFILL }},",
          "3915:         { &hf_mq_id_icf3_MPlxSyGet   , {\"Multiplex_synchget\", \"mq.id.icf3.multiplexsynchget\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_ICF3_MULTIPLEX_SYNCGET, \"ID ICF3 MULTIPLEX_SYNCGET\", HFILL }},",
          "3917:         { &hf_mq_id_ief1_ccsid  , {\"Invalid CCSID\", \"mq.id.ief1.ccsid\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_CCSID_NOT_SUPPORTED, \"ID invalid CCSID\", HFILL }},",
          "3918:         { &hf_mq_id_ief1_enc    , {\"Invalid encoding\", \"mq.id.ief1.enc\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF1_ENCODING_INVALID, \"ID invalid encoding\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4231:         { &hf_mq_id_ief2_MsgCmpLst, {\"Invalid Msg CompLst\", \"mq.id.ief2.msgcomplst\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF2_MSGCOMPLIST, \"ID invalid Message Compression List\", HFILL }},",
          "4232:         { &hf_mq_id_ief2_SSLReset , {\"Invalid SSL Reset\", \"mq.id.ief2.sslreset\"  , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF2_SSL_RESET  , \"ID invalid SSL Reset\", HFILL }},",
          "4234:         { &hf_mq_uid_StructID  , {\"Structid\", \"mq.uid.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "4235:         { &hf_mq_uid_userid    , {\"User ID.\", \"mq.uid.userid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"UID structid\", HFILL }},",
          "4236:         { &hf_mq_uid_password  , {\"Password\", \"mq.uid.password\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"UID password\", HFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3930:         {&hf_mq_id_ief3_CanMsgPrp   ,{\"Invalid Property Cap\", \"mq.id.ief3.msgpropertycap\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF3_MSG_PROP_CAPABLE, \"ID invalid Message PropertyCapable\", HFILL}},",
          "3931:         {&hf_mq_id_ief3_CanMulticast,{\"Invalid Multicast Cap\", \"mq.id.ief3.multicastcap\", FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF3_MULTICAST_CAPABLE, \"ID invalid Mutlicast Capabilities\", HFILL}},",
          "3932:         {&hf_mq_id_ief3_PropIntSep  ,{\"Invalid Prop Int Separate\", \"mq.id.ief3.propintseparate\"  , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF3_MSG_PROP_INT_SEPARATE, \"ID invalid Properety Int Separate\", HFILL}},",
          "3933:         {&hf_mq_id_ief3_MPlxSyGet   ,{\"Invalid Multiplex_synchget\", \"mq.id.ief3.multiplexsynchget\"  , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF3_MULTIPLEX_SYNCGET, \"ID invalid MULTIPLEX_SYNCGET\", HFILL}},",
          "3934:         {&hf_mq_id_ief3_ProtAlgorit ,{\"Invalid Prot Algorithms\", \"mq.id.ief3.protalgorithms\"  , FT_BOOLEAN, 8, TFS(&tfs_set_notset), MQ_IEF3_PROT_ALGORITHMS, \"ID invalid Prot Algorithms\", HFILL}},",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4243:         { &hf_mq_conn_QMgr     , {\"QMgr....\", \"mq.conn.qm\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"CONN queue manager\", HFILL }},",
          "4244:         { &hf_mq_conn_appname  , {\"ApplName\", \"mq.conn.appname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"CONN application name\", HFILL }},",
          "4246:         { &hf_mq_conn_acttoken , {\"AccntTok\", \"mq.conn.acttoken\", FT_BYTES, BASE_NONE, NULL, 0x0, \"CONN accounting token\", HFILL }},",
          "4250:         { &hf_mq_fcno_StructID , {\"StructId.\", \"mq.fcno.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "4251:         { &hf_mq_fcno_version  , {\"version..\", \"mq.fcno.version\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"FCNO version\", HFILL }},",
          "",
          "[Removed Lines]",
          "4245:         { &hf_mq_conn_apptype  , {\"ApplType\", \"mq.conn.apptype\", FT_INT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(mqat), 0x0, \"CONN application type\", HFILL }},",
          "4247:         { &hf_mq_conn_version  , {\"Version.\", \"mq.conn.version\", FT_UINT32, BASE_DEC, VALS(mq_conn_version_vals), 0x0, \"CONN version\", HFILL }},",
          "4248:         { &hf_mq_conn_options  , {\"Options.\", \"mq.conn.options\", FT_UINT32, BASE_HEX, NULL, 0x0, \"CONN options\", HFILL }},",
          "",
          "[Added Lines]",
          "3947:         { &hf_mq_conn_apptype  , {\"ApplType\", \"mq.conn.apptype\", FT_INT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQAT), 0x0, \"CONN application type\", HFILL }},",
          "3949:         { &hf_mq_conn_options  , {\"Options.\", \"mq.conn.options\", FT_UINT32, BASE_DEC, VALS(mq_conn_options_vals), 0x0, \"CONN options\", HFILL }},",
          "3950:         { &hf_mq_conn_Xoptions , {\"XOptions\", \"mq.conn.xoptions\", FT_UINT32, BASE_HEX, NULL, 0x0, \"CONN Xoptions\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4325:         { &hf_mq_open_options_NO_MULTICAST   , {\"NO_MULTICAST\", \"mq.open.options.NoMulticast\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQOO_NO_MULTICAST, \"OPEN options NO_MULTICAST\", HFILL }},",
          "4326:         { &hf_mq_open_options_BIND_ON_GROUP  , {\"BIND_ON_GROUP\", \"mq.open.options.BindOnGroup\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQOO_BIND_ON_GROUP, \"OPEN options BIND_ON_GROUP\", HFILL }},",
          "4338:         { &hf_mq_msgreq_version  , {\"version..\", \"mq.msgreq.version\"  , FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGREQ version\", HFILL }},",
          "4339:         { &hf_mq_msgreq_handle   , {\"handle...\", \"mq.msgreq.handle\"   , FT_UINT32, BASE_HEX, NULL, 0x0, \"MSGREQ handle\", HFILL }},",
          "",
          "[Removed Lines]",
          "4328:         { &hf_mq_fopa_StructID, {\"StructId\", \"mq.fopa.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "4329:         { &hf_mq_fopa_version , {\"Version.\", \"mq.fopa.version\", FT_UINT32, BASE_DEC, NULL, 0x0, \"FOPA Version\", HFILL }},",
          "4330:         { &hf_mq_fopa_length  , {\"Length..\", \"mq.fopa.length\", FT_UINT32, BASE_DEC, NULL, 0x0, \"FOPA Length\", HFILL }},",
          "4331:         { &hf_mq_fopa_unknown1, {\"Unknown1\", \"mq.fopa.unknown1\", FT_UINT32, BASE_HEX, NULL, 0x0, \"FOPA unknown1\", HFILL }},",
          "4332:         { &hf_mq_fopa_unknown2, {\"Unknown2\", \"mq.fopa.unknown2\", FT_UINT32, BASE_HEX, NULL, 0x0, \"FOPA unknown2\", HFILL }},",
          "4333:         { &hf_mq_fopa_unknown3, {\"Unknown3\", \"mq.fopa.unknown3\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"FOPA unknown3\", HFILL }},",
          "4334:         { &hf_mq_fopa_qprotect, {\"qprotect\", \"mq.fopa.qprotect\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"FOPA queue protection\", HFILL }},",
          "4335:         { &hf_mq_fopa_unknown4, {\"Unknown4\", \"mq.fopa.unknown4\", FT_UINT32, BASE_HEX, NULL, 0x0, \"FOPA unknown4\", HFILL }},",
          "4336:         { &hf_mq_fopa_unknown5, {\"Unknown5\", \"mq.fopa.unknown5\", FT_UINT32, BASE_HEX, NULL, 0x0, \"FOPA unknown5\", HFILL }},",
          "",
          "[Added Lines]",
          "4030:         { &hf_mq_fopa_StructID       , {\"StructId.......\", \"mq.fopa.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "4031:         { &hf_mq_fopa_version        , {\"Version........\", \"mq.fopa.version\", FT_UINT32, BASE_DEC, NULL, 0x0, \"FOPA Version\", HFILL }},",
          "4032:         { &hf_mq_fopa_length         , {\"Length.........\", \"mq.fopa.length\", FT_UINT32, BASE_DEC, NULL, 0x0, \"FOPA Length\", HFILL }},",
          "4033:         { &hf_mq_fopa_DefPersistence , {\"DefPersistence.\", \"mq.fopa.defpersistence\", FT_UINT32, BASE_DEC, VALS(GET_VALSV(MQPER)), 0x0, \"FOPA DefPersistence\", HFILL }},",
          "4034:         { &hf_mq_fopa_DefPutRespType , {\"DefPutRespType.\", \"mq.fopa.defputresponsetype\", FT_UINT32, BASE_DEC , VALS(GET_VALSV(MQPRT)), 0x0, \"FOPA DefPutRespType\", HFILL }},",
          "4035:         { &hf_mq_fopa_DefReadAhead   , {\"DefReadAhead...\", \"mq.fopa.defreadahaed\", FT_UINT32, BASE_DEC , VALS(GET_VALSV(MQREADA)), 0x0, \"FOPA DefReadAhead\", HFILL }},",
          "4036:         { &hf_mq_fopa_PropertyControl, {\"PropertyControl\", \"mq.fopa.propertycontrol\", FT_UINT32, BASE_DEC , VALS(GET_VALSV(MQPROP)), 0x0, \"FOPA PropertyControl\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "4343:         { &hf_mq_msgreq_WaitIntrv, {\"WaitIntrv\", \"mq.msgreq.waitintrv\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGREQ Wait Interval\", HFILL }},",
          "4344:         { &hf_mq_msgreq_QueStatus, {\"QueStatus\", \"mq.msgreq.questatus\", FT_UINT32, BASE_HEX    , NULL, 0x0, \"MSGREQ Queue Status\", HFILL }},",
          "4345:         { &hf_mq_msgreq_RqstFlags, {\"RqstFlags\", \"mq.msgreq.rqstflags\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGREQ Request Flags\", HFILL }},",
          "4346:         { &hf_mq_msgreq_GlbMsgIdx, {\"GlbMsgIdx\", \"mq.msgreq.glbmsgidx\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGREQ Global Message Index\", HFILL }},",
          "4347:         { &hf_mq_msgreq_SelectIdx, {\"SelectIdx\", \"mq.msgreq.selectIdx\", FT_UINT16, BASE_HEX_DEC, NULL, 0x0, \"MSGREQ Selection Index\", HFILL }},",
          "4348:         { &hf_mq_msgreq_MQMDVers , {\"MQMDVers.\", \"mq.msgreq.mqmdvers\" , FT_UINT16, BASE_HEX_DEC, NULL, 0x0, \"MSGREQ MQMD Version\", HFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4046:         { &hf_mq_msgreq_flags_selection,{\"REQ_MSG_SELECTION\", \"mq.msgreq.rqstflags.SELECTION\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_REQUEST_MSG_SELECTION, \"Request Message flag SELECTION\", HFILL}},",
          "4047:         { &hf_mq_msgreq_flags_F00000008,{\"REQ_MSG_F00000008\", \"mq.msgreq.rqstflags.F00000008\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_REQUEST_MSG_F00000008, \"Request Message flag F00000008\", HFILL}},",
          "4048:         { &hf_mq_msgreq_flags_F00000004,{\"REQ_MSG_F00000004\", \"mq.msgreq.rqstflags.F00000004\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_REQUEST_MSG_F00000004, \"Request Message flag F00000004\", HFILL}},",
          "4049:         { &hf_mq_msgreq_flags_F00000002,{\"REQ_MSG_F00000002\", \"mq.msgreq.rqstflags.F00000002\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_REQUEST_MSG_F00000002, \"Request Message flag F00000002\", HFILL}},",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "4362:         { &hf_mq_msgasy_SegLength, {\"SegLength\", \"mq.msgasy.seglength\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Segment Length\", HFILL }},",
          "4363:         { &hf_mq_msgasy_SegmIndex, {\"SegmIndex\", \"mq.msgasy.segmindex\", FT_UINT16, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Segment Index\", HFILL }},",
          "4364:         { &hf_mq_msgasy_SeleIndex, {\"SeleIndex\", \"mq.msgasy.seleindex\", FT_UINT16, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Selection Index\", HFILL }},",
          "4366:         { &hf_mq_msgasy_ActMsgLen, {\"ActMsgLen\", \"mq.msgasy.actmsglen\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Actual Message Length\", HFILL }},",
          "4367:         { &hf_mq_msgasy_TotMsgLen, {\"TotMsgLen\", \"mq.msgasy.totmsglen\", FT_UINT32, BASE_HEX_DEC, NULL, 0x0, \"MSGASYNC Total Message Length\", HFILL }},",
          "4368:         { &hf_mq_msgasy_MsgToken , {\"MsgToken.\", \"mq.msgasy.msgtoken\" , FT_BYTES , BASE_NONE   , NULL, 0x0, \"MSGASYNC Mesasage Token\", HFILL }},",
          "",
          "[Removed Lines]",
          "4365:         { &hf_mq_msgasy_ReasonCod, {\"ReasonCod\", \"mq.msgasy.reasoncod\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(mqrc), 0x0, \"MSGASYNC Reason Code\", HFILL }},",
          "",
          "[Added Lines]",
          "4070:         { &hf_mq_msgasy_ReasonCod, {\"ReasonCod\", \"mq.msgasy.reasoncod\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQRC), 0x0, \"MSGASYNC Reason Code\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "4421:         { &hf_mq_md_StructID    , {\"StructID.\", \"mq.md.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "4422:         { &hf_mq_md_version     , {\"Version..\", \"mq.md.version\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD version\", HFILL }},",
          "4423:         { &hf_mq_md_report      , {\"Report...\", \"mq.md.report\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD report\", HFILL }},",
          "4425:         { &hf_mq_md_expiry      , {\"Expiry  .\", \"mq.md.expiry\", FT_INT32, BASE_DEC, NULL, 0x0, \"MD expiry\", HFILL }},",
          "4426:         { &hf_mq_md_feedback    , {\"Feedback.\", \"mq.md.feedback\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD feedback\", HFILL }},",
          "4427:         { &hf_mq_md_encoding    , {\"Encoding.\", \"mq.md.encoding\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD encoding\", HFILL }},",
          "4428:         { &hf_mq_md_ccsid       , {\"CCSID....\", \"mq.md.ccsid\", FT_INT32, BASE_DEC | BASE_RANGE_STRING, RVALS(&GET_VALRV(ccsid)), 0x0, \"MD character set\", HFILL }},",
          "4429:         { &hf_mq_md_format      , {\"Format...\", \"mq.md.format\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"MD format\", HFILL }},",
          "4430:         { &hf_mq_md_priority    , {\"Priority.\", \"mq.md.priority\", FT_INT32, BASE_DEC, NULL, 0x0, \"MD priority\", HFILL }},",
          "4432:         { &hf_mq_md_msgid       , {\"Msg ID...\", \"mq.md.msgid\", FT_BYTES, BASE_NONE, NULL, 0x0, \"MD Message Id\", HFILL }},",
          "4433:         { &hf_mq_md_correlid    , {\"CorrelID.\", \"mq.md.correlid\", FT_BYTES, BASE_NONE, NULL, 0x0, \"MD Correlation Id\", HFILL }},",
          "4434:         { &hf_mq_md_backoutcnt  , {\"BackoCnt.\", \"mq.md.backount\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD Backout count\", HFILL }},",
          "",
          "[Removed Lines]",
          "4424:         { &hf_mq_md_msgtype     , {\"Msg Type.\", \"mq.md.msgtype\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD message type\", HFILL }},",
          "4431:         { &hf_mq_md_persistence , {\"Persist..\", \"mq.md.persistence\", FT_UINT32, BASE_DEC, NULL, 0x0, \"MD persistence\", HFILL }},",
          "",
          "[Added Lines]",
          "4129:         { &hf_mq_md_msgtype     , {\"Msg Type.\", \"mq.md.msgtype\", FT_UINT32, BASE_DEC , VALS(GET_VALSV(MQMT)), 0x0, \"MD message type\", HFILL }},",
          "4136:         { &hf_mq_md_persistence , {\"Persist..\", \"mq.md.persistence\", FT_UINT32, BASE_DEC , VALS(GET_VALSV(MQPER)), 0x0, \"MD persistence\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "4437:         { &hf_mq_md_userid      , {\"UserId...\", \"mq.md.userid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"MD UserId\", HFILL }},",
          "4438:         { &hf_mq_md_acttoken    , {\"AccntTok.\", \"mq.md.acttoken\", FT_BYTES, BASE_NONE, NULL, 0x0, \"MD accounting token\", HFILL }},",
          "4439:         { &hf_mq_md_appliddata  , {\"AppIdData\", \"mq.md.appldata\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"MD Put applicationId data\", HFILL }},",
          "4441:         { &hf_mq_md_putapplname , {\"PutAppNme\", \"mq.md.applname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"MD Put application name\", HFILL }},",
          "4442:         { &hf_mq_md_putdate     , {\"PutDatGMT\", \"mq.md.date\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"MD Put date\", HFILL }},",
          "4443:         { &hf_mq_md_puttime     , {\"PutTimGMT\", \"mq.md.time\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"MD Put time\", HFILL }},",
          "",
          "[Removed Lines]",
          "4440:         { &hf_mq_md_putappltype , {\"PutAppTyp\", \"mq.md.appltype\", FT_INT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(mqat), 0x0, \"MD Put application type\", HFILL }},",
          "",
          "[Added Lines]",
          "4145:         { &hf_mq_md_putappltype , {\"PutAppTyp\", \"mq.md.appltype\", FT_INT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQAT), 0x0, \"MD Put application type\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "4456:         { &hf_mq_dlh_encoding   , {\"Encoding.\", \"mq.dlh.encoding\", FT_UINT32, BASE_DEC, NULL, 0x0, \"DLH encoding\", HFILL }},",
          "4457:         { &hf_mq_dlh_ccsid      , {\"CCSID....\", \"mq.dlh.ccsid\", FT_INT32, BASE_DEC | BASE_RANGE_STRING, RVALS(&GET_VALRV(ccsid)), 0x0, \"DLH character set\", HFILL }},",
          "4458:         { &hf_mq_dlh_format     , {\"Format...\", \"mq.dlh.format\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"DLH format\", HFILL }},",
          "4460:         { &hf_mq_dlh_putapplname, {\"PutAppNme\", \"mq.dlh.putapplname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"DLH put application name\", HFILL }},",
          "4461:         { &hf_mq_dlh_putdate    , {\"PutDatGMT\", \"mq.dlh.putdate\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"DLH put date\", HFILL }},",
          "4462:         { &hf_mq_dlh_puttime    , {\"PutTimGMT\", \"mq.dlh.puttime\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"DLH put time\", HFILL }},",
          "",
          "[Removed Lines]",
          "4459:         { &hf_mq_dlh_putappltype, {\"PutAppTyp\", \"mq.dlh.putappltype\", FT_INT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(mqat), 0x0, \"DLH put application type\", HFILL }},",
          "",
          "[Added Lines]",
          "4164:         { &hf_mq_dlh_putappltype, {\"PutAppTyp\", \"mq.dlh.putappltype\", FT_INT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQAT), 0x0, \"DLH put application type\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4524:         { &hf_mq_lpoo_lpiopts_SAVE_IDENTITY_CTXT, {\"SAVE_IDENTITY_CTXT\", \"mq.lpoo.opts.SAVE_IDENTITY_CTXT\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_LPOO_SAVE_IDENTITY_CTXT, \"LPOO options SAVE_IDENTITY_CTXT\", HFILL }},",
          "4526:         { &hf_mq_lpoo_unknown5      , {\"Unknown5......\", \"mq.lpoo.unknown5\", FT_UINT32, BASE_HEX, NULL, 0x0, \"LPOO unknown5\", HFILL }},",
          "4530:         { &hf_mq_lpoo_qprotect      , {\"qprotect......\", \"mq.lpoo.qprotect\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"LPOO queue protection\", HFILL }},",
          "4531:         { &hf_mq_lpoo_unknown6      , {\"Unknown6......\", \"mq.lpoo.unknown6\", FT_UINT32, BASE_HEX, NULL, 0x0, \"LPOO unknown6\", HFILL }},",
          "4532:         { &hf_mq_lpoo_xtradata      , {\"ExtraData.....\", \"mq.lpoo.extradata\", FT_UINT32, BASE_DEC, NULL, 0x0, \"LPOO Extra Data\", HFILL }},",
          "",
          "[Removed Lines]",
          "4527:         { &hf_mq_lpoo_defpersist    , {\"DefPersitence.\", \"mq.lpoo.defpersist\", FT_UINT32, BASE_HEX, NULL, 0x0, \"LPOO Default Persitence\", HFILL }},",
          "4528:         { &hf_mq_lpoo_defputresptype, {\"DefPutRespType\", \"mq.lpoo.defputresptype\", FT_UINT32, BASE_HEX, NULL, 0x0, \"LPOO Default Put Response Type\", HFILL }},",
          "4529:         { &hf_mq_lpoo_defreadahead  , {\"DefReadAHead..\", \"mq.lpoo.defreadahead\", FT_UINT32, BASE_HEX, NULL, 0x0, \"LPOO Default Read AHead\", HFILL }},",
          "",
          "[Added Lines]",
          "4232:         { &hf_mq_lpoo_defpersist    , {\"DefPersistence\", \"mq.lpoo.defpersist\", FT_UINT32, BASE_DEC, VALS(GET_VALSV(MQPER)), 0x0, \"LPOO Default Persistence\", HFILL }},",
          "4233:         { &hf_mq_lpoo_defputresptype, {\"DefPutRespType\", \"mq.lpoo.defputresptype\", FT_UINT32, BASE_DEC, VALS(GET_VALSV(MQPRT)), 0x0, \"LPOO Default Put Response Type\", HFILL }},",
          "4234:         { &hf_mq_lpoo_defreadahead  , {\"DefReadAHead..\", \"mq.lpoo.defreadahead\", FT_UINT32, BASE_DEC, VALS(GET_VALSV(MQREADA)), 0x0, \"LPOO Default Read AHead\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4589:         { &hf_mq_xa_tmflags_fail      , {\"FAIL\", \"mq.xa.tmflags.fail\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_XA_TMFAIL, \"XA TM Flags FAIL\", HFILL }},",
          "4590:         { &hf_mq_xa_tmflags_onephase  , {\"ONEPHASE\", \"mq.xa.tmflags.onephase\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_XA_TMONEPHASE, \"XA TM Flags ONEPHASE\", HFILL }},",
          "4593:         { &hf_mq_xa_xid_glbxid_len, {\"GlbTransIDLen\", \"mq.xa.xid.gxidl\", FT_UINT8, BASE_DEC, NULL, 0x0, \"XA Xid Global TransactionId Length\", HFILL }},",
          "4594:         { &hf_mq_xa_xid_brq_length, {\"BranchQualLen\", \"mq.xa.xid.bql\", FT_UINT8, BASE_DEC, NULL, 0x0, \"XA Xid Branch Qualifier Length\", HFILL }},",
          "4595:         { &hf_mq_xa_xid_globalxid , {\"GlbTransactID\", \"mq.xa.xid.gxid\", FT_BYTES, BASE_NONE, NULL, 0x0, \"XA Xid Global TransactionId\", HFILL }},",
          "",
          "[Removed Lines]",
          "4592:         { &hf_mq_xa_xid_formatid  , {\"Format ID....\", \"mq.xa.xid.formatid\", FT_INT32, BASE_DEC, NULL, 0x0, \"XA Xid Format ID\", HFILL }},",
          "",
          "[Added Lines]",
          "4297:         { &hf_mq_xa_xid_formatid  , {\"Format ID....\", \"mq.xa.xid.formatid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"XA Xid Format ID\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4636:         { &hf_mq_iih_securityscope, {\"SecurityScope.\", \"mq.iih.securityscope\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"Security Scope\", HFILL }},",
          "4637:         { &hf_mq_iih_reserved     , {\"Reserved......\", \"mq.iih.reserved\"     , FT_STRINGZ, BASE_NONE, NULL, 0x0, \"Reserved\", HFILL }},",
          "4643:         { &hf_mq_cih_returncode   , {\"ReturnCode...\", \"mq.cih.returncode\"   , FT_UINT32 , BASE_HEX_DEC, NULL, 0x0, \"Return Code\", HFILL }},",
          "4644:         { &hf_mq_cih_compcode     , {\"ComplCode....\", \"mq.cih.compcode\"     , FT_UINT32 , BASE_HEX_DEC, NULL, 0x0, \"Completion Code\", HFILL }},",
          "",
          "[Removed Lines]",
          "4639:         { &hf_mq_cih_flags_synconret   , {\"SYNC_ON_RETURN\", \"mq.iih.flags.synconret\"   , FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQCIH_SYNC_ON_RETURN, \"MQ CIH Flags IGNORE_PURG\", HFILL }},",
          "4640:         { &hf_mq_cih_flags_replywonulls, {\"REPLY_WO_NULLS\", \"mq.iih.flags.replywonulls\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQCIH_REPLY_WITHOUT_NULLS, \"MQ CIH Flags REPLY_WITHOUT_NULLS\", HFILL }},",
          "4641:         { &hf_mq_cih_flags_passexpir   , {\"PASS_EXPIR....\", \"mq.iih.flags.passexpir\"   , FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQCIH_PASS_EXPIRATION, \"MQ CIH Flags PASS_EXPIRATION\", HFILL }},",
          "",
          "[Added Lines]",
          "4344:         {&hf_mq_cih_flags_synconret   ,{\"SYNC_ON_RETURN\", \"mq.iih.flags.synconret\"   , FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQCIH_SYNC_ON_RETURN, \"MQ CIH Flags IGNORE_PURG\", HFILL}},",
          "4345:         {&hf_mq_cih_flags_replywonulls,{\"REPLY_WO_NULLS\", \"mq.iih.flags.replywonulls\", FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQCIH_REPLY_WITHOUT_NULLS, \"MQ CIH Flags REPLY_WITHOUT_NULLS\", HFILL}},",
          "4346:         {&hf_mq_cih_flags_passexpir   ,{\"PASS_EXPIR....\", \"mq.iih.flags.passexpir\"   , FT_BOOLEAN, 32, TFS(&tfs_set_notset), MQ_MQCIH_PASS_EXPIRATION, \"MQ CIH Flags PASS_EXPIRATION\", HFILL}},",
          "4348:         {&hf_mq_ims_ll  ,{\"ll..\", \"mq.ims.ll\" , FT_UINT16, BASE_DEC, NULL, 0x0, \"IMS ll\", HFILL}},",
          "4349:         {&hf_mq_ims_zz  ,{\"zz..\", \"mq.ims.zz\" , FT_UINT16, BASE_DEC, NULL, 0x0, \"IMS zz\", HFILL}},",
          "4350:         {&hf_mq_ims_trx ,{\"trx.\", \"mq.ims.trx\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"IMS Transaction\", HFILL}},",
          "4351:         {&hf_mq_ims_data,{\"data\", \"mq.ims.data\", FT_BYTES,   BASE_NONE, NULL, 0x0, \"Transaction Instance Identifier\", HFILL}},",
          "4353:         {&hf_mq_tm_StructID   ,{\"Structid\", \"mq.tm.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM structid\", HFILL}},",
          "4354:         {&hf_mq_tm_version    ,{\"version.\", \"mq.tm.version\", FT_UINT32, BASE_DEC, NULL, 0x0, \"TM version\", HFILL}},",
          "4355:         {&hf_mq_tm_QName      ,{\"QName...\", \"mq.tm.qname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM Queue Name\", HFILL}},",
          "4356:         {&hf_mq_tm_ProcessNme ,{\"ProcName\", \"mq.tm.procname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM Process Name\", HFILL}},",
          "4357:         {&hf_mq_tm_TriggerData,{\"TrigData\", \"mq.tm.triggerdata\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM Trigger Data\", HFILL}},",
          "4358:         {&hf_mq_tm_ApplType   ,{\"ApplType\", \"mq.tm.appltype\", FT_UINT32, BASE_DEC | BASE_EXT_STRING, GET_VALS_EXTP(MQAT), 0x0, \"TM Application Type\", HFILL}},",
          "4359:         {&hf_mq_tm_ApplId     ,{\"ApplId..\", \"mq.tm.applid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM Application ID\", HFILL}},",
          "4360:         {&hf_mq_tm_EnvData    ,{\"EnvData.\", \"mq.tm.envdaqta\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM Environment Data\", HFILL}},",
          "4361:         {&hf_mq_tm_UserData   ,{\"UserData.\", \"mq.t2.userdata\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TM User Data\", HFILL}},",
          "4363:         {&hf_mq_tmc2_StructID   ,{\"Structid\", \"mq.tmc2.structid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 structid\", HFILL}},",
          "4364:         {&hf_mq_tmc2_version    ,{\"version.\", \"mq.tmc2.version\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 version\", HFILL}},",
          "4365:         {&hf_mq_tmc2_QName      ,{\"QName...\", \"mq.tmc2.qname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Queue Name\", HFILL}},",
          "4366:         {&hf_mq_tmc2_ProcessNme ,{\"ProcName\", \"mq.tmc2.procname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Process Name\", HFILL}},",
          "4367:         {&hf_mq_tmc2_TriggerData,{\"TrigData\", \"mq.tmc2.triggerdata\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Trigger Data\", HFILL}},",
          "4368:         {&hf_mq_tmc2_ApplType   ,{\"ApplType\", \"mq.tmc2.appltype\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Application Type\", HFILL}},",
          "4369:         {&hf_mq_tmc2_ApplId     ,{\"ApplId..\", \"mq.tmc2.applid\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Application ID\", HFILL}},",
          "4370:         {&hf_mq_tmc2_EnvData    ,{\"EnvData.\", \"mq.tmc2.envdaqta\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Environment Data\", HFILL}},",
          "4371:         {&hf_mq_tmc2_UserData   ,{\"UserData\", \"mq.tmc2.userdata\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 User Data\", HFILL}},",
          "4372:         {&hf_mq_tmc2_QMgrName   ,{\"QMgrName\", \"mq.tmc2.qmgrname\", FT_STRINGZ, BASE_NONE, NULL, 0x0, \"TMC2 Queue Manager Name\", HFILL}},",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4687:         { &hf_mq_rmh_dstenvlen    , {\"DstEnvLen....\", \"mq.rmh.dstenvlen\"    , FT_UINT32 , BASE_DEC , NULL, 0x0, \"Length of destination environment data\", HFILL }},",
          "4688:         { &hf_mq_rmh_dstenvofs    , {\"DstEnvOfs....\", \"mq.rmh.dstenvofs\"    , FT_UINT32 , BASE_DEC_HEX, NULL, 0x0, \"Offset of destination environment data\", HFILL }},",
          "4689:         { &hf_mq_rmh_dstnamelen   , {\"DstNameLen...\", \"mq.rmh.dstnamelen\"   , FT_UINT32 , BASE_DEC , NULL, 0x0, \"Length of destination object name\", HFILL }},",
          "4691:         { &hf_mq_rmh_datalogiclen , {\"DataLogicLen.\", \"mq.rmh.datalogiclen\" , FT_UINT32 , BASE_DEC , NULL, 0x0, \"Length of bulk data\", HFILL }},",
          "4692:         { &hf_mq_rmh_datalogicofsl, {\"DataLogicOfsL\", \"mq.rmh.datalogicofsl\", FT_UINT32 , BASE_DEC_HEX, NULL, 0x0, \"Low offset of bulk data\", HFILL }},",
          "4693:         { &hf_mq_rmh_datalogicofsh, {\"DataLogicOfsH\", \"mq.rmh.datalogicofsh\", FT_UINT32 , BASE_DEC_HEX, NULL, 0x0, \"High offset of bulk data\", HFILL }},",
          "",
          "[Removed Lines]",
          "4690:         { &hf_mq_rmh_dstnameofs   , {\"DstNameOfs...\", \"mq.rmh.dstnameofs\"   , FT_UINT32 , BASE_DEC  | BASE_HEX, NULL, 0x0, \"Offset of destination object name\", HFILL }},",
          "",
          "[Added Lines]",
          "4421:         { &hf_mq_rmh_dstnameofs   , {\"DstNameOfs...\", \"mq.rmh.dstnameofs\"   , FT_UINT32 , BASE_DEC | BASE_HEX, NULL, 0x0, \"Offset of destination object name\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4746:         &ett_mq_gmo,",
          "4747:         &ett_mq_gmo_option,",
          "4748:         &ett_mq_gmo_matchoption,",
          "4749:         &ett_mq_pmo,",
          "4750:         &ett_mq_pmo_option,",
          "4751:         &ett_mq_fcno,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4480:         &ett_mq_msgreq_RqstFlags,",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4755:         &ett_mq_lpoo_lpiopts,",
          "4756:         &ett_mq_head,",
          "4757:         &ett_mq_head_flags,",
          "4758:         &ett_mq_xa,",
          "4759:         &ett_mq_xa_tmflags,",
          "4760:         &ett_mq_xa_xid,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4490:         &ett_mq_ims,",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4783:     mq_heur_subdissector_list = register_heur_dissector_list(\"mq\", proto_mq);",
          "4785:     reassembly_table_register(&mq_reassembly_table,",
          "4788:     mq_module = prefs_register_protocol(proto_mq, NULL);",
          "4789:     mq_handle = register_dissector(\"mq\", dissect_mq_tcp, proto_mq);",
          "4791:     prefs_register_bool_preference(mq_module, \"desegment\",",
          "4796:     prefs_register_bool_preference(mq_module, \"reassembly\",",
          "4800: }",
          "4802: void proto_reg_handoff_mq(void)",
          "",
          "[Removed Lines]",
          "4786:         &addresses_reassembly_table_functions);",
          "4792:         \"Reassemble MQ messages spanning multiple TCP segments\",",
          "4793:         \"Whether the MQ dissector should reassemble messages spanning multiple TCP segments.\"",
          "4794:         \" To use this option, you must also enable \\\"Allow subdissectors to reassemble TCP streams\\\" in the TCP protocol settings.\",",
          "4795:         &mq_desegment);",
          "4797:         \"Reassemble segmented MQ messages\",",
          "4798:         \"Whether the MQ dissector should reassemble MQ messages spanning multiple TSH segments\",",
          "4799:         &mq_reassembly);",
          "",
          "[Added Lines]",
          "4519:                               &addresses_reassembly_table_functions);",
          "4525:                                    \"Reassemble MQ messages spanning multiple TCP segments\",",
          "4526:                                    \"Whether the MQ dissector should reassemble messages spanning multiple TCP segments.\"",
          "4527:                                    \" To use this option, you must also enable \\\"Allow subdissectors to reassemble TCP streams\\\" in the TCP protocol settings.\",",
          "4528:                                    &mq_desegment);",
          "4530:                                    \"Reassemble segmented MQ messages\",",
          "4531:                                    \"Whether the MQ dissector should reassemble MQ messages spanning multiple TSH segments\",",
          "4532:                                    &mq_reassembly);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4810:     dissector_add_for_decode_as_with_preference(\"tcp.port\", mq_handle);",
          "4811:     ssl_dissector_add(0, mq_handle);",
          "4813:     heur_dissector_add(\"netbios\", dissect_mq_heur_nontcp, \"WebSphere MQ over Netbios\", \"mq_netbios\", proto_mq, HEURISTIC_ENABLE);",
          "4816:     dissector_add_uint(\"spx.socket\", MQ_SOCKET_SPX, mq_spx_handle);",
          "4817:     mqpcf_handle = find_dissector(\"mqpcf\");",
          "4818: }",
          "",
          "[Removed Lines]",
          "4812:     heur_dissector_add(\"tcp\",     dissect_mq_heur_tcp, \"WebSphere MQ over TCP\", \"mq_tcp\", proto_mq, HEURISTIC_ENABLE);",
          "4814:     heur_dissector_add(\"http\",    dissect_mq_heur_nontcp, \"WebSphere MQ over HTTP\", \"mq_http\", proto_mq, HEURISTIC_ENABLE);",
          "4815:     heur_dissector_add(\"ssl\",     dissect_mq_heur_ssl, \"WebSphere MQ over SSL\", \"mq_ssl\", proto_mq, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "4545:     heur_dissector_add(\"tcp\", dissect_mq_heur_tcp, \"WebSphere MQ over TCP\", \"mq_tcp\", proto_mq, HEURISTIC_ENABLE);",
          "4547:     heur_dissector_add(\"http\", dissect_mq_heur_nontcp, \"WebSphere MQ over HTTP\", \"mq_http\", proto_mq, HEURISTIC_ENABLE);",
          "4548:     heur_dissector_add(\"ssl\", dissect_mq_heur_ssl, \"WebSphere MQ over SSL\", \"mq_ssl\", proto_mq, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mq.h||epan/dissectors/packet-mq.h": [
          "File: epan/dissectors/packet-mq.h -> epan/dissectors/packet-mq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: { 0, 0, NULL } \\",
          "65: }",
          "67: typedef struct _mq_ccsid_t",
          "68: {",
          "69:     guint32 encod;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #define IS_EBCDIC(a) ((a == 500) || (a == 1047))",
          "69: #define MQ_PORT_TCP    1414",
          "70: #define MQ_SOCKET_SPX  0x5E86",
          "72: #define MQ_STRUCTID_NULL          0x00000000",
          "74: #define MQ_STRUCTID_CAUT          0x43415554",
          "75: #define MQ_STRUCTID_CIH           0x43494820",
          "76: #define MQ_STRUCTID_DH            0x44482020",
          "77: #define MQ_STRUCTID_DLH           0x444C4820",
          "78: #define MQ_STRUCTID_FCNO          0x46434E4F",
          "79: #define MQ_STRUCTID_FOPA          0x464F5041",
          "80: #define MQ_STRUCTID_GMO           0x474D4F20",
          "81: #define MQ_STRUCTID_ID            0x49442020",
          "82: #define MQ_STRUCTID_IIH           0x49494820",
          "83: #define MQ_STRUCTID_LPOO          0x4C504F4F",
          "84: #define MQ_STRUCTID_MD            0x4D442020",
          "85: #define MQ_STRUCTID_MDE           0x4D444520",
          "86: #define MQ_STRUCTID_MSH           0x4D534820",
          "87: #define MQ_STRUCTID_OD            0x4F442020",
          "88: #define MQ_STRUCTID_PMO           0x504D4F20",
          "89: #define MQ_STRUCTID_RFH           0x52464820",
          "90: #define MQ_STRUCTID_RMH           0x524D4820",
          "111: #define MQ_STRUCTID_TM            0x544D2020",
          "112: #define MQ_STRUCTID_TMC2          0x544D4332",
          "114: #define MQ_MASK_TSHx              0xffffff00",
          "115: #define MQ_STRUCTID_TSHx          0x54534800",
          "117: #define MQ_STRUCTID_TSH           0x54534820",
          "118: #define MQ_STRUCTID_TSHC          0x54534843",
          "119: #define MQ_STRUCTID_TSHM          0x5453484D",
          "120: #define MQ_STRUCTID_UID           0x55494420",
          "121: #define MQ_STRUCTID_WIH           0x57494820",
          "122: #define MQ_STRUCTID_XQH           0x58514820",
          "124: #define MQ_STRUCTID_CAUT_EBCDIC   0xC3C1E4E3",
          "125: #define MQ_STRUCTID_CIH_EBCDIC    0xC3C9C840",
          "126: #define MQ_STRUCTID_DH_EBCDIC     0xC4C84040",
          "127: #define MQ_STRUCTID_DLH_EBCDIC    0xC4D3C840",
          "128: #define MQ_STRUCTID_FCNO_EBCDIC   0xC6C3D5D6",
          "129: #define MQ_STRUCTID_GMO_EBCDIC    0xC7D4D640",
          "130: #define MQ_STRUCTID_ID_EBCDIC     0xC9C44040",
          "131: #define MQ_STRUCTID_IIH_EBCDIC    0xC9C9C840",
          "132: #define MQ_STRUCTID_LPOO_EBCDIC   0xD3D7D6D6",
          "133: #define MQ_STRUCTID_MD_EBCDIC     0xD4C44040",
          "134: #define MQ_STRUCTID_MDE_EBCDIC    0xD4C4C540",
          "135: #define MQ_STRUCTID_MSH_EBCDIC    0xD4E2C840",
          "136: #define MQ_STRUCTID_FOPA_EBCDIC   0xC6D6D7C1",
          "137: #define MQ_STRUCTID_OD_EBCDIC     0xD6C44040",
          "138: #define MQ_STRUCTID_PMO_EBCDIC    0xD7D4D640",
          "139: #define MQ_STRUCTID_RFH_EBCDIC    0xD9C6C840",
          "140: #define MQ_STRUCTID_RMH_EBCDIC    0xD9D4C840",
          "161: #define MQ_STRUCTID_TM_EBCDIC     0xE3D44040",
          "162: #define MQ_STRUCTID_TMC2_EBCDIC   0xE3D4C3F2",
          "164: #define MQ_STRUCTID_TSHx_EBCDIC   0xE3E2C800",
          "165: #define MQ_STRUCTID_TSH_EBCDIC    0xE3E2C840",
          "166: #define MQ_STRUCTID_TSHC_EBCDIC   0xE3E2C8C3",
          "167: #define MQ_STRUCTID_TSHM_EBCDIC   0xE3E2C8D4",
          "169: #define MQ_STRUCTID_UID_EBCDIC    0xE4C9C440",
          "170: #define MQ_STRUCTID_WIH_EBCDIC    0xE6C9C840",
          "171: #define MQ_STRUCTID_XQH_EBCDIC    0xE7D8C840",
          "173: #define MQ_MASK_SPxx              0xffff0000",
          "174: #define MQ_MASK_SPxZ              0xffff00ff",
          "176: #define MQ_TST_INITIAL            0x01",
          "177: #define MQ_TST_RESYNC             0x02",
          "178: #define MQ_TST_RESET              0x03",
          "179: #define MQ_TST_MESSAGE            0x04",
          "180: #define MQ_TST_STATUS             0x05",
          "181: #define MQ_TST_SECURITY           0x06",
          "182: #define MQ_TST_PING               0x07",
          "183: #define MQ_TST_USERID             0x08",
          "184: #define MQ_TST_HEARTBEAT          0x09",
          "185: #define MQ_TST_CONAUTH_INFO       0x0A",
          "186: #define MQ_TST_RENEGOTIATE_DATA   0x0B",
          "187: #define MQ_TST_SOCKET_ACTION      0x0C",
          "188: #define MQ_TST_ASYNC_MESSAGE      0x0D",
          "189: #define MQ_TST_REQUEST_MSGS       0x0E",
          "190: #define MQ_TST_NOTIFICATION       0x0F",
          "191: #define MQ_TST_MQCONN             0x81",
          "192: #define MQ_TST_MQDISC             0x82",
          "193: #define MQ_TST_MQOPEN             0x83",
          "194: #define MQ_TST_MQCLOSE            0x84",
          "195: #define MQ_TST_MQGET              0x85",
          "196: #define MQ_TST_MQPUT              0x86",
          "197: #define MQ_TST_MQPUT1             0x87",
          "198: #define MQ_TST_MQSET              0x88",
          "199: #define MQ_TST_MQINQ              0x89",
          "200: #define MQ_TST_MQCMIT             0x8A",
          "201: #define MQ_TST_MQBACK             0x8B",
          "202: #define MQ_TST_SPI                0x8C",
          "203: #define MQ_TST_MQSTAT             0x8D",
          "204: #define MQ_TST_MQSUB              0x8E",
          "205: #define MQ_TST_MQSUBRQ            0x8F",
          "206: #define MQ_TST_MQCONN_REPLY       0x91",
          "207: #define MQ_TST_MQDISC_REPLY       0x92",
          "208: #define MQ_TST_MQOPEN_REPLY       0x93",
          "209: #define MQ_TST_MQCLOSE_REPLY      0x94",
          "210: #define MQ_TST_MQGET_REPLY        0x95",
          "211: #define MQ_TST_MQPUT_REPLY        0x96",
          "212: #define MQ_TST_MQPUT1_REPLY       0x97",
          "213: #define MQ_TST_MQSET_REPLY        0x98",
          "214: #define MQ_TST_MQINQ_REPLY        0x99",
          "215: #define MQ_TST_MQCMIT_REPLY       0x9A",
          "216: #define MQ_TST_MQBACK_REPLY       0x9B",
          "217: #define MQ_TST_SPI_REPLY          0x9C",
          "218: #define MQ_TST_MQSTAT_REPLY       0x9D",
          "219: #define MQ_TST_MQSUB_REPLY        0x9E",
          "220: #define MQ_TST_MQSUBRQ_REPLY      0x9F",
          "221: #define MQ_TST_XA_START           0xA1",
          "222: #define MQ_TST_XA_END             0xA2",
          "223: #define MQ_TST_XA_OPEN            0xA3",
          "224: #define MQ_TST_XA_CLOSE           0xA4",
          "225: #define MQ_TST_XA_PREPARE         0xA5",
          "226: #define MQ_TST_XA_COMMIT          0xA6",
          "227: #define MQ_TST_XA_ROLLBACK        0xA7",
          "228: #define MQ_TST_XA_FORGET          0xA8",
          "229: #define MQ_TST_XA_RECOVER         0xA9",
          "230: #define MQ_TST_XA_COMPLETE        0xAA",
          "231: #define MQ_TST_XA_START_REPLY     0xB1",
          "232: #define MQ_TST_XA_END_REPLY       0xB2",
          "233: #define MQ_TST_XA_OPEN_REPLY      0xB3",
          "234: #define MQ_TST_XA_CLOSE_REPLY     0xB4",
          "235: #define MQ_TST_XA_PREPARE_REPLY   0xB5",
          "236: #define MQ_TST_XA_COMMIT_REPLY    0xB6",
          "237: #define MQ_TST_XA_ROLLBACK_REPLY  0xB7",
          "238: #define MQ_TST_XA_FORGET_REPLY    0xB8",
          "239: #define MQ_TST_XA_RECOVER_REPLY   0xB9",
          "240: #define MQ_TST_XA_COMPLETE_REPLY  0xBA",
          "242: #define MQ_SPI_QUERY              0x01",
          "243: #define MQ_SPI_PUT                0x02",
          "244: #define MQ_SPI_GET                0x03",
          "245: #define MQ_SPI_ACTIVATE           0x04",
          "246: #define MQ_SPI_OPEN               0x0C",
          "248: #define MQ_SPI_ACTIVATE_ENABLE    0x01",
          "249: #define MQ_SPI_ACTIVATE_DISABLE   0x02",
          "251: #define MQ_SPI_OPTIONS_BLANK_PADDED  0x01",
          "252: #define MQ_SPI_OPTIONS_SYNCPOINT     0x02",
          "253: #define MQ_SPI_OPTIONS_DEFERRED      0x04",
          "255: #define MQ_TCF_CONFIRM_REQUEST    0x01",
          "256: #define MQ_TCF_ERROR              0x02",
          "257: #define MQ_TCF_REQUEST_CLOSE      0x04",
          "258: #define MQ_TCF_CLOSE_CHANNEL      0x08",
          "259: #define MQ_TCF_FIRST              0x10",
          "260: #define MQ_TCF_LAST               0x20",
          "261: #define MQ_TCF_REQUEST_ACCEPTED   0x40",
          "262: #define MQ_TCF_DLQ_USED           0x80",
          "264: #define MQ_TCF2_HDRCOMP           0x01",
          "265: #define MQ_TCF2_MSGCOMP           0x02",
          "266: #define MQ_TCF2_CSH               0x04",
          "267: #define MQ_TCF2_CMIT_INTERVAL     0x08",
          "269: #define MQ_ICF1_MSG_SEQ            0x01",
          "270: #define MQ_ICF1_CONVERSION_CAPABLE 0x02",
          "271: #define MQ_ICF1_SPLIT_MESSAGE      0x04",
          "272: #define MQ_ICF1_REQUEST_INITIATION 0x08",
          "273: #define MQ_ICF1_REQUEST_SECURITY   0x10",
          "274: #define MQ_ICF1_MQREQUEST          0x20",
          "275: #define MQ_ICF1_SVRCONN_SECURITY   0x40",
          "276: #define MQ_ICF1_RUNTIME            0x80",
          "278: #define MQ_ICF2_DIST_LIST_CAPABLE      0x01",
          "279: #define MQ_ICF2_FAST_MESSAGES_REQUIRED 0x02",
          "280: #define MQ_ICF2_RESPONDER_CONVERSION   0x04",
          "281: #define MQ_ICF2_DUAL_UOW               0x08",
          "282: #define MQ_ICF2_XAREQUEST              0x10",
          "283: #define MQ_ICF2_XARUNTIME_APP          0x20",
          "284: #define MQ_ICF2_SPIREQUEST             0x40",
          "285: #define MQ_ICF2_TRACE_ROUTE_CAPABLE    0x80",
          "287: #define MQ_ICF3_MSG_PROP_CAPABLE      0x01",
          "288: #define MQ_ICF3_MULTICAST_CAPABLE     0x02",
          "289: #define MQ_ICF3_MSG_PROP_INT_SEPARATE 0x04",
          "290: #define MQ_ICF3_MULTIPLEX_SYNCGET     0x08",
          "291: #define MQ_ICF3_PROT_ALGORITHMS       0x10",
          "293: #define MQ_IEF1_CCSID_NOT_SUPPORTED   0x01",
          "294: #define MQ_IEF1_ENCODING_INVALID      0x02",
          "295: #define MQ_IEF1_MAX_TRANSMISSION_SIZE 0x04",
          "296: #define MQ_IEF1_FAP_LEVEL             0x08",
          "297: #define MQ_IEF1_MAX_MSG_SIZE          0x10",
          "298: #define MQ_IEF1_MAX_MSG_PER_BATCH     0x20",
          "299: #define MQ_IEF1_SEQ_WRAP_VALUE        0x40",
          "300: #define MQ_IEF1_HEARTBEAT_INTERVAL    0x80",
          "302: #define MQ_IEF2_HDRCOMPLIST           0x01",
          "303: #define MQ_IEF2_MSGCOMPLIST           0x02",
          "304: #define MQ_IEF2_SSL_RESET             0x04",
          "306: #define MQ_IEF3_MSG_PROP_CAPABLE      0x01",
          "307: #define MQ_IEF3_MULTICAST_CAPABLE     0x02",
          "308: #define MQ_IEF3_MSG_PROP_INT_SEPARATE 0x04",
          "309: #define MQ_IEF3_MULTIPLEX_SYNCGET     0x08",
          "310: #define MQ_IEF3_PROT_ALGORITHMS       0x10",
          "312: #define MQ_BIG_ENDIAN          0x01",
          "313: #define MQ_LITTLE_ENDIAN       0x02",
          "315: #define MQ_CONN_OPTION         0x01",
          "316: #define MQ_CONNX_OPTION        0x03",
          "318: #define MQ_REQUEST_MSG_SELECTION   0x00000010",
          "319: #define MQ_REQUEST_MSG_F00000008   0x00000008",
          "320: #define MQ_REQUEST_MSG_F00000004   0x00000004",
          "321: #define MQ_REQUEST_MSG_F00000002   0x00000002",
          "323: #define MQ_REQUEST_MSG_SIZE_V1_SELECTION_FIXED_PART 64",
          "324: #define MQ_REQUEST_MSG_SIZE_V1_NO_SELECTION         40",
          "326: #define MQ_STATUS_ERR_NO_CHANNEL              0x01",
          "327: #define MQ_STATUS_ERR_CHANNEL_WRONG_TYPE      0x02",
          "328: #define MQ_STATUS_ERR_QM_UNAVAILABLE          0x03",
          "329: #define MQ_STATUS_ERR_MSG_SEQUENCE_ERROR      0x04",
          "330: #define MQ_STATUS_ERR_QM_TERMINATING          0x05",
          "331: #define MQ_STATUS_ERR_CAN_NOT_STORE           0x06",
          "332: #define MQ_STATUS_ERR_USER_CLOSED             0x07",
          "333: #define MQ_STATUS_ERR_TIMEOUT_EXPIRED         0x08",
          "334: #define MQ_STATUS_ERR_TARGET_Q_UNKNOWN        0x09",
          "335: #define MQ_STATUS_ERR_PROTOCOL_SEGMENT_TYPE   0x0A",
          "336: #define MQ_STATUS_ERR_PROTOCOL_LENGTH_ERROR   0x0B",
          "337: #define MQ_STATUS_ERR_PROTOCOL_INVALID_DATA   0x0C",
          "338: #define MQ_STATUS_ERR_PROTOCOL_SEGMENT_ERROR  0x0D",
          "339: #define MQ_STATUS_ERR_PROTOCOL_ID_ERROR       0x0E",
          "340: #define MQ_STATUS_ERR_PROTOCOL_MSH_ERROR      0x0F",
          "341: #define MQ_STATUS_ERR_PROTOCOL_GENERAL        0x10",
          "342: #define MQ_STATUS_ERR_BATCH_FAILURE           0x11",
          "343: #define MQ_STATUS_ERR_MESSAGE_LENGTH_ERROR    0x12",
          "344: #define MQ_STATUS_ERR_SEGMENT_NUMBER_ERROR    0x13",
          "345: #define MQ_STATUS_ERR_SECURITY_FAILURE        0x14",
          "346: #define MQ_STATUS_ERR_WRAP_VALUE_ERROR        0x15",
          "347: #define MQ_STATUS_ERR_CHANNEL_UNAVAILABLE     0x16",
          "348: #define MQ_STATUS_ERR_CLOSED_BY_EXIT          0x17",
          "349: #define MQ_STATUS_ERR_CIPHER_SPEC             0x18",
          "350: #define MQ_STATUS_ERR_PEER_NAME               0x19",
          "351: #define MQ_STATUS_ERR_SSL_CLIENT_CERTIFICATE  0x1A",
          "352: #define MQ_STATUS_ERR_RMT_RSRCS_IN_RECOVERY   0x1B",
          "353: #define MQ_STATUS_ERR_SSL_REFRESHING          0x1C",
          "354: #define MQ_STATUS_ERR_INVALID_HOBJ            0x1D",
          "355: #define MQ_STATUS_ERR_CONV_ID_ERROR           0x1E",
          "356: #define MQ_STATUS_ERR_SOCKET_ACTION_TYPE      0x1F",
          "357: #define MQ_STATUS_ERR_STANDBY_Q_MGR           0x20",
          "359: #define MQ_STATUS_ERR_CCSID_NOT_SUPPORTED     0xF0",
          "360: #define MQ_STATUS_ERR_ENCODING_INVALID        0xF1",
          "361: #define MQ_STATUS_ERR_FAP_LEVEL               0xF2",
          "362: #define MQ_STATUS_ERR_NEGOTIATION_FAILED      0xF3",
          "365: #define MQ_XA_RBROLLBACK   100",
          "366: #define MQ_XA_RBCOMMFAIL   101",
          "367: #define MQ_XA_RBDEADLOCK   102",
          "368: #define MQ_XA_RBINTEGRITY  103",
          "369: #define MQ_XA_RBOTHER      104",
          "370: #define MQ_XA_RBPROTO      105",
          "371: #define MQ_XA_RBTIMEOUT    106",
          "372: #define MQ_XA_RBTRANSIENT  107",
          "373: #define MQ_XA_NOMIGRATE    9",
          "374: #define MQ_XA_HEURHAZ      8",
          "375: #define MQ_XA_HEURCOM      7",
          "376: #define MQ_XA_HEURRB       6",
          "377: #define MQ_XA_HEURMIX      5",
          "378: #define MQ_XA_RETRY        4",
          "379: #define MQ_XA_RDONLY       3",
          "380: #define MQ_XA_OK           0",
          "381: #define MQ_XAER_ASYNC      -2",
          "382: #define MQ_XAER_RMERR      -3",
          "383: #define MQ_XAER_NOTA       -4",
          "384: #define MQ_XAER_INVAL      -5",
          "385: #define MQ_XAER_PROTO      -6",
          "386: #define MQ_XAER_RMFAIL     -7",
          "387: #define MQ_XAER_DUPID      -8",
          "388: #define MQ_XAER_OUTSIDE    -9",
          "391: #define MQ_XA_TMNOFLAGS     0",
          "392: #define MQ_XA_TMJOIN        0x200000",
          "393: #define MQ_XA_TMENDRSCAN    0x800000",
          "394: #define MQ_XA_TMSTARTRSCAN  0x1000000",
          "395: #define MQ_XA_TMSUSPEND     0x2000000",
          "396: #define MQ_XA_TMSUCCESS     0x4000000",
          "397: #define MQ_XA_TMRESUME      0x8000000",
          "398: #define MQ_XA_TMFAIL        0x20000000",
          "399: #define MQ_XA_TMONEPHASE    0x40000000",
          "401: #define MQ_PMRF_NONE              0x00",
          "402: #define MQ_PMRF_MSG_ID            0x01",
          "403: #define MQ_PMRF_CORREL_ID         0x02",
          "404: #define MQ_PMRF_GROUP_ID          0x04",
          "405: #define MQ_PMRF_FEEDBACK          0x08",
          "406: #define MQ_PMRF_ACCOUNTING_TOKEN  0x10",
          "410: #define MQ_TEXT_TSH                     \"Transmission Segment Header\"",
          "411: #define MQ_TEXT_TSHC                    \"Transmission Segment Header Common\"",
          "412: #define MQ_TEXT_TSHM                    \"Transmission Segment Header Multiplexed\"",
          "413: #define MQ_TEXT_FCNO                    \"F Connect Option\"",
          "414: #define MQ_TEXT_API                     \"API Header\"",
          "415: #define MQ_TEXT_SOCKET                  \"Socket Action\"",
          "416: #define MQ_TEXT_ID                      \"Initial Data\"",
          "417: #define MQ_TEXT_UID                     \"User Id Data\"",
          "418: #define MQ_TEXT_MSH                     \"Message Segment Header\"",
          "419: #define MQ_TEXT_CAUT                    \"Connection Authority\"",
          "420: #define MQ_TEXT_CONN                    \"MQCONN\"",
          "421: #define MQ_TEXT_INQ                     \"MQINQ/MQSET\"",
          "422: #define MQ_TEXT_PUT                     \"MQPUT/MQGET\"",
          "423: #define MQ_TEXT_OPEN                    \"MQOPEN/MQCLOSE\"",
          "424: #define MQ_TEXT_REQMSG                  \"REQUEST MESSAGE\"",
          "425: #define MQ_TEXT_ASYMSG                  \"ASYNC MESSAGE\"",
          "426: #define MQ_TEXT_NOTIFICATION            \"NOTIFICATION\"",
          "427: #define MQ_TEXT_BIND_READAHEAD_AS_Q_DEF \"Bind/Read Ahead As Q Def\"",
          "428: #define MQ_TEXT_IMMEDIATE_NONE          \"Close Immediate/No option\"",
          "429: #define MQ_TEXT_MQPMO_NONE              \"Resp as Q Def/Resp as Topic Def/None\"",
          "430: #define MQ_TEXT_MQGMO_NONE              \"No Wait/Prop as Q Def/None\"",
          "431: #define MQ_TEXT_MQMO_NONE               \"None\"",
          "432: #define MQ_TEXT_LPOOOPT_NONE            \"None\"",
          "434: #define MQ_TEXT_PING  \"PING\"",
          "435: #define MQ_TEXT_RESET \"RESET\"",
          "436: #define MQ_TEXT_STAT  \"STATUS\"",
          "437: #define MQ_TEXT_SPI   \"SPI\"",
          "438: #define MQ_TEXT_XA    \"XA\"",
          "439: #define MQ_TEXT_XID   \"Xid\"",
          "440: #define MQ_TEXT_XINF  \"XA_info\"",
          "442: #define MQ_TEXT_SPQU  \"SPI Query InOut\"",
          "443: #define MQ_TEXT_SPQI  \"SPI Query In\"",
          "444: #define MQ_TEXT_SPQO  \"SPI Query Out\"",
          "445: #define MQ_TEXT_SPPU  \"SPI Put InOut\"",
          "446: #define MQ_TEXT_SPPI  \"SPI Put In\"",
          "447: #define MQ_TEXT_SPPO  \"SPI Put Out\"",
          "448: #define MQ_TEXT_SPGU  \"SPI Get InOut\"",
          "449: #define MQ_TEXT_SPGI  \"SPI Get In\"",
          "450: #define MQ_TEXT_SPGO  \"SPI Get Out\"",
          "451: #define MQ_TEXT_SPAU  \"SPI Activate InOut\"",
          "452: #define MQ_TEXT_SPAI  \"SPI Activate In\"",
          "453: #define MQ_TEXT_SPAO  \"SPI Activate Out\"",
          "454: #define MQ_TEXT_SPOU  \"SPI InOut\"",
          "455: #define MQ_TEXT_SPOI  \"SPI In\"",
          "456: #define MQ_TEXT_SPOO  \"SPI Out\"",
          "457: #define MQ_TEXT_LPOO  \"LPOO\"",
          "458: #define MQ_TEXT_FOPA  \"FOPA\"",
          "461: #define MQ_TEXT_CIH  \"CICS bridge Header\"",
          "462: #define MQ_TEXT_DH   \"Distribution Header\"",
          "463: #define MQ_TEXT_DLH  \"Dead-Letter Header\"",
          "464: #define MQ_TEXT_GMO  \"Get Message Options\"",
          "465: #define MQ_TEXT_IIH  \"IMS Information Header\"",
          "466: #define MQ_TEXT_MD   \"Message Descriptor\"",
          "467: #define MQ_TEXT_MDE  \"Message Descriptor Extension\"",
          "468: #define MQ_TEXT_OD   \"Object Descriptor\"",
          "469: #define MQ_TEXT_PMO  \"Put Message Options\"",
          "470: #define MQ_TEXT_RMH  \"Reference Message Header\"",
          "471: #define MQ_TEXT_RFH  \"Rules and Formatting Header\"",
          "472: #define MQ_TEXT_TM   \"Trigger Message\"",
          "473: #define MQ_TEXT_TMC2 \"Trigger Message 2 (character format)\"",
          "474: #define MQ_TEXT_WIH  \"Work Information Header\"",
          "475: #define MQ_TEXT_XQH  \"Transmission Queue Header\"",
          "478: #define MQ_TEXT_OR   \"Object Record\"",
          "479: #define MQ_TEXT_PMR  \"Put Message Record\"",
          "480: #define MQ_TEXT_RR   \"Response Record\"",
          "482: #define MQ_NC_GET_INHIBITED          1",
          "483: #define MQ_NC_GET_ALLOWED            2",
          "484: #define MQ_NC_CONN_STATE             3",
          "485: #define MQ_NC_CONN_STATE_REPLY       4",
          "486: #define MQ_NC_Q_STATE                5",
          "487: #define MQ_NC_Q_STATE_REPLY          6",
          "488: #define MQ_NC_QM_QUIESCING           7",
          "489: #define MQ_NC_TXN_ALLOWED            8",
          "490: #define MQ_NC_TXN_REVOKE             9",
          "491: #define MQ_NC_TXN_REVOKE_REPLY      10",
          "492: #define MQ_NC_CHECK_MSG             11",
          "493: #define MQ_NC_BROWSE_FIRST          12",
          "494: #define MQ_NC_MESSAGE_TOO_LARGE     13",
          "495: #define MQ_NC_STREAMING_FAILURE     14",
          "496: #define MQ_NC_CLIENT_ASYNC_EMPTY    15",
          "497: #define MQ_NC_STREAMING_TXN_PAUSED  16",
          "498: #define MQ_NC_RECONNECTION_COMPLETE 17",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5058: DEF_VALSX(mqcc);",
          "5063: DEF_VALS_EXTX(objtype);",
          "5064: DEF_VALS_EXTX(PrmId);",
          "5065: DEF_VALS_EXTX(PrmTyp);",
          "",
          "[Removed Lines]",
          "5060: DEF_VALS_EXTX(mqat);",
          "5061: DEF_VALS_EXTX(mqcmd);",
          "5062: DEF_VALS_EXTX(mqrc);",
          "",
          "[Added Lines]",
          "5493: DEF_VALS_EXTX(MQAT);",
          "5494: DEF_VALS_EXTX(MQCMD);",
          "5495: DEF_VALS_EXTX(MQRC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5069: DEF_VALSX(CtlOpt);",
          "5070: DEF_VALSX(mqcft);",
          "5072: DEF_VALSX(FilterOP);",
          "5073: DEF_VALSX(UOWControls);",
          "5074: DEF_VALSX(LinkType);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5505: DEF_VALSX(MQPER);",
          "5506: DEF_VALSX(MQPRT);",
          "5507: DEF_VALSX(MQREADA);",
          "5508: DEF_VALSX(MQPROP);",
          "5509: DEF_VALSX(MQMT);",
          "",
          "---------------"
        ]
      }
    }
  ]
}