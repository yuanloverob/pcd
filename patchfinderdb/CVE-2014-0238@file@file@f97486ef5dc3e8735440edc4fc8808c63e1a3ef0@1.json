{
  "cve_id": "CVE-2014-0238",
  "cve_desc": "The cdf_read_property_info function in cdf.c in the Fileinfo component in PHP before 5.4.29 and 5.5.x before 5.5.13 allows remote attackers to cause a denial of service (infinite loop or out-of-bounds memory access) via a vector that (1) has zero length or (2) is too long.",
  "repo": "file/file",
  "patch_hash": "f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
  "patch_info": {
    "commit_hash": "f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
    "files": [
      "src/cdf.c"
    ],
    "message": "CVE-2014-0207: Prevent 0 element vectors and vectors longer than the number of properties from accessing random memory.",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.58 2014/05/13 16:41:06 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.59 2014/05/14 23:22:48 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "827:       i, inp[i].pi_id, inp[i].pi_type, q - p, offs));",
      "828:   if (inp[i].pi_type & CDF_VECTOR) {",
      "829:    nelements = CDF_GETUINT32(q, 1);",
      "830:    o = 2;",
      "831:   } else {",
      "832:    nelements = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "830:    if (nelements == 0) {",
      "831:     DPRINTF((\"CDF_VECTOR with nelements == 0\\n\"));",
      "832:     goto out;",
      "833:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "901:    }",
      "902:    DPRINTF((\"nelements = %\" SIZE_T_FORMAT \"u\\n\",",
      "903:        nelements));",
      "905:     uint32_t l = CDF_GETUINT32(q, o);",
      "906:     inp[i].pi_str.s_len = l;",
      "907:     inp[i].pi_str.s_buf = (const char *)",
      "",
      "[Removed Lines]",
      "904:    for (j = 0; j < nelements; j++, i++) {",
      "",
      "[Added Lines]",
      "908:    for (j = 0; j < nelements && i < sh.sh_properties;",
      "909:        j++, i++)",
      "910:    {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "78c2b81ccb511a740049ffe8ca5410433aae7d4e",
      "candidate_info": {
        "commit_hash": "78c2b81ccb511a740049ffe8ca5410433aae7d4e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/78c2b81ccb511a740049ffe8ca5410433aae7d4e",
        "files": [
          "src/apprentice.c",
          "src/cdf.c",
          "src/compress.c",
          "src/file.c",
          "src/file.h",
          "src/funcs.c",
          "src/magic.c",
          "src/print.c",
          "src/readcdf.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "Bug + portability fixes from the NetBSD build.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/cdf.c||src/cdf.c",
          "src/compress.c||src/compress.c",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/magic.c||src/magic.c",
          "src/print.c||src/print.c",
          "src/readcdf.c||src/readcdf.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.228 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.229 2015/01/01 17:07:34 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2199:  size_t i;",
          "2200:  const char *l = line;",
          "2201:  struct magic *m = &me->mp[me->cont_count == 0 ? 0 : me->cont_count - 1];",
          "2204:  if (buf[0] != '\\0') {",
          "2205:   len = nt ? strlen(buf) : len;",
          "",
          "[Removed Lines]",
          "2202:  char *buf = (char *)m + off;",
          "",
          "[Added Lines]",
          "2202:  char *buf = CAST(char *, CAST(void *, m)) + off;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2248: {",
          "2249:  struct magic *m = &me->mp[0];",
          "2252:      sizeof(m->apple), \"APPLE\", \"!+-./\", 0);",
          "2253: }",
          "",
          "[Removed Lines]",
          "2251:  return parse_extra(ms, me, line, offsetof(struct magic, apple),",
          "",
          "[Added Lines]",
          "2251:  return parse_extra(ms, me, line,",
          "2252:      CAST(off_t, offsetof(struct magic, apple)),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2261: {",
          "2262:  struct magic *m = &me->mp[0];",
          "2265:      sizeof(m->mimetype), \"MIME\", \"+-/.\", 1);",
          "2266: }",
          "",
          "[Removed Lines]",
          "2264:  return parse_extra(ms, me, line, offsetof(struct magic, mimetype),",
          "",
          "[Added Lines]",
          "2265:  return parse_extra(ms, me, line,",
          "2266:      CAST(off_t, offsetof(struct magic, mimetype)),",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.68 2014/10/22 19:27:36 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.69 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: #define CDF_TOLE8(x) ((uint64_t)(NEED_SWAP ? _cdf_tole8(x) : (uint64_t)(x)))",
          "74: #define CDF_TOLE4(x) ((uint32_t)(NEED_SWAP ? _cdf_tole4(x) : (uint32_t)(x)))",
          "75: #define CDF_TOLE2(x) ((uint16_t)(NEED_SWAP ? _cdf_tole2(x) : (uint16_t)(x)))",
          "78: #define CDF_GETUINT32(x, y) cdf_getuint32(x, y)",
          "",
          "[Removed Lines]",
          "76: #define CDF_TOLE(x) (sizeof(x) == 2 ? CDF_TOLE2(x) : (sizeof(x) == 4 ? \\",
          "77:     CDF_TOLE4(x) : CDF_TOLE8(x)))",
          "",
          "[Added Lines]",
          "76: #define CDF_TOLE(x) (/*CONSTCOND*/sizeof(x) == 2 ? \\",
          "77:        CDF_TOLE2(CAST(uint16_t, x)) : \\",
          "78:    (/*CONSTCOND*/sizeof(x) == 4 ? \\",
          "79:        CDF_TOLE4(CAST(uint32_t, x)) : \\",
          "80:        CDF_TOLE8(CAST(uint64_t, x))))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:  const char *e = ((const char *)p) + tail;",
          "272:  size_t ss = sst->sst_dirlen < h->h_min_size_standard_stream ?",
          "273:      CDF_SHORT_SEC_SIZE(h) : CDF_SEC_SIZE(h);",
          "275:  if (e >= b && (size_t)(e - b) <= ss * sst->sst_len)",
          "276:   return 0;",
          "277:  DPRINTF((\"%d: offset begin %p < end %p || %\" SIZE_T_FORMAT \"u\"",
          "",
          "[Removed Lines]",
          "274:  (void)&line;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "998: }",
          "1002:     memcpy(&ce[i].f, b + (l), sizeof(ce[i].f)); \\",
          "1005: int",
          "1006: cdf_unpack_catalog(const cdf_header_t *h, const cdf_stream_t *sst,",
          "",
          "[Removed Lines]",
          "1001: #define extract_catalog_field(f, l) \\",
          "1003:     ce[i].f = CDF_TOLE(ce[i].f)",
          "",
          "[Added Lines]",
          "1004: #define extract_catalog_field(t, f, l) \\",
          "1006:     ce[i].f = CAST(t, CDF_TOLE(ce[i].f))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1028:  ce = (*cat)->cat_e;",
          "1029:  b = CAST(const char *, sst->sst_tab);",
          "1030:  for (i = 0; i < nr; i++) {",
          "1034:   reclen = ce[i].ce_namlen;",
          "1035:   ce[i].ce_namlen =",
          "1036:       sizeof(ce[i].ce_name) / sizeof(ce[i].ce_name[0]) - 1;",
          "1037:   if (ce[i].ce_namlen > reclen - 14)",
          "1038:    ce[i].ce_namlen = reclen - 14;",
          "1040:   for (k = 0; k < ce[i].ce_namlen; k++) {",
          "1043:   }",
          "1044:   ce[i].ce_name[ce[i].ce_namlen] = 0;",
          "1045:   b += reclen;",
          "",
          "[Removed Lines]",
          "1031:   extract_catalog_field(ce_namlen, 0);",
          "1032:   extract_catalog_field(ce_num, 2);",
          "1033:   extract_catalog_field(ce_timestamp, 6);",
          "1039:   np = CAST(const uint16_t *, (b + 16));",
          "1041:    ce[i].ce_name[k] = np[k];",
          "1042:    CDF_TOLE2(ce[i].ce_name[k]);",
          "",
          "[Added Lines]",
          "1034:   extract_catalog_field(uint16_t, ce_namlen, 0);",
          "1035:   extract_catalog_field(uint16_t, ce_num, 2);",
          "1036:   extract_catalog_field(uint64_t, ce_timestamp, 6);",
          "1042:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.76 2014/12/11 11:47:08 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.77 2014/12/12 16:33:01 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:  int fdin[2], fdout[2];",
          "384:  int status;",
          "385:  ssize_t r;",
          "388: #ifdef BUILTIN_DECOMPRESS",
          "",
          "[Removed Lines]",
          "386:  pid_t pid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:   file_error(ms, errno, \"cannot create pipe\");",
          "398:   return NODATA;",
          "399:  }",
          "402:   (void) close(0);",
          "403:   if (fd != -1) {",
          "",
          "[Removed Lines]",
          "400:  switch (pid = fork()) {",
          "",
          "[Added Lines]",
          "399:  switch (fork()) {",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.159 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.160 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: private void usage(void);",
          "134: private void docprint(const char *);",
          "135: private void help(void);",
          "137: private int unwrap(struct magic_set *, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: #ifdef __dead",
          "134: __dead",
          "135: #endif",
          "138: #ifdef __dead",
          "139: __dead",
          "140: #endif",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "590: #else",
          "591: #define FILE_RCSID(id)",
          "592: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: #ifndef __RCSID",
          "594: #define __RCSID(a)",
          "595: #endif",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.78 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.79 2014/12/16 20:52:49 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: }",
          "161: #ifndef COMPILE_ONLY",
          "162: protected int",
          "164:     const void *buf, size_t nb)",
          "165: {",
          "166:  int m = 0, rv = 0, looks_text = 0;",
          "",
          "[Removed Lines]",
          "163: file_buffer(struct magic_set *ms, int fd, const char *inname __attribute__ ((unused)),",
          "",
          "[Added Lines]",
          "164: file_buffer(struct magic_set *ms, int fd, const char *inname __attribute__ ((__unused__)),",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.90 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.91 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543: {",
          "544:  switch (param) {",
          "545:  case MAGIC_PARAM_INDIR_MAX:",
          "547:   return 0;",
          "548:  case MAGIC_PARAM_NAME_MAX:",
          "550:   return 0;",
          "551:  case MAGIC_PARAM_ELF_PHNUM_MAX:",
          "553:   return 0;",
          "554:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
          "556:   return 0;",
          "557:  case MAGIC_PARAM_ELF_NOTES_MAX:",
          "559:   return 0;",
          "560:  default:",
          "561:   errno = EINVAL;",
          "",
          "[Removed Lines]",
          "546:   ms->indir_max = *(const size_t *)val;",
          "549:   ms->name_max = *(const size_t *)val;",
          "552:   ms->elf_phnum_max = *(const size_t *)val;",
          "555:   ms->elf_shnum_max = *(const size_t *)val;",
          "558:   ms->elf_notes_max = *(const size_t *)val;",
          "",
          "[Added Lines]",
          "546:   ms->indir_max = (uint16_t)*(const size_t *)val;",
          "549:   ms->name_max = (uint16_t)*(const size_t *)val;",
          "552:   ms->elf_phnum_max = (uint16_t)*(const size_t *)val;",
          "555:   ms->elf_shnum_max = (uint16_t)*(const size_t *)val;",
          "558:   ms->elf_notes_max = (uint16_t)*(const size_t *)val;",
          "",
          "---------------"
        ],
        "src/print.c||src/print.c": [
          "File: src/print.c -> src/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include <string.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.75 2012/10/30 23:11:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.76 2013/02/26 18:25:00 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:   case FILE_MELDATE:",
          "165:    (void)fprintf(stderr, \"%s,\",",
          "166:        file_fmttime(m->value.l, 0, tbuf));",
          "167:   case FILE_QDATE:",
          "168:   case FILE_LEQDATE:",
          "169:   case FILE_BEQDATE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:    break;",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.48 2014/09/10 18:41:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.49 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: #include \"cdf.h\"",
          "40: #include \"magic.h\"",
          "42: #define NOTMIME(ms) (((ms)->flags & MAGIC_MIME) == 0)",
          "44: static const struct nv {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #ifndef __arraycount",
          "43: #define __arraycount(a) (sizeof(a) / sizeof(a[0]))",
          "44: #endif",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.116 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.117 2014/12/16 23:29:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:    return 1;",
          "624:   for (i = 0; i < __arraycount(pax); i++) {",
          "626:     continue;",
          "627:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
          "628:        pax[i]) == -1)",
          "",
          "[Removed Lines]",
          "625:    if (((1 << i) & desc) == 0)",
          "",
          "[Added Lines]",
          "626:    if (((1 << (int)i) & desc) == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1008:  }",
          "1012:   file_badread(ms);",
          "1013:   return -1;",
          "1014:  }",
          "",
          "[Removed Lines]",
          "1011:  if (pread(fd, xsh_addr, xsh_sizeof, off + size * strtab) < (ssize_t)xsh_sizeof) {",
          "",
          "[Added Lines]",
          "1012:  if (pread(fd, xsh_addr, xsh_sizeof, CAST(off_t, (off + size * strtab)))",
          "1013:      < (ssize_t)xsh_sizeof) {",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.205 2015/01/01 04:12:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.206 2015/01/01 17:07:34 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1667:  case FILE_INDIRECT:",
          "1668:   if (m->str_flags & INDIRECT_RELATIVE)",
          "1670:   if (offset == 0)",
          "1671:    return 0;",
          "",
          "[Removed Lines]",
          "1669:    offset += o;",
          "",
          "[Added Lines]",
          "1669:    offset += CAST(uint32_t, o);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34a2a20178e86bad906200ac68089897930277ea",
      "candidate_info": {
        "commit_hash": "34a2a20178e86bad906200ac68089897930277ea",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/34a2a20178e86bad906200ac68089897930277ea",
        "files": [
          "src/cdf.c"
        ],
        "message": "return error on not finding stream.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.72 2015/01/05 18:09:40 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.73 2015/01/11 16:58:25 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:  int i = cdf_find_stream(dir, name, CDF_DIR_TYPE_USER_STREAM);",
          "753:  if (i <= 0)",
          "756:  d = &dir->dir_tab[i - 1];",
          "757:  return cdf_read_sector_chain(info, h, sat, ssat, sst,",
          "",
          "[Removed Lines]",
          "754:   return i;",
          "",
          "[Added Lines]",
          "754:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8acc83781d5a24cc5101e525d15efe0482c280d",
      "candidate_info": {
        "commit_hash": "b8acc83781d5a24cc5101e525d15efe0482c280d",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b8acc83781d5a24cc5101e525d15efe0482c280d",
        "files": [
          "src/cdf.c"
        ],
        "message": "Remove loop that kept reading the same offset (Jan Kaluza)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.56 2014/05/05 16:11:21 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "932: cdf_unpack_summary_info(const cdf_stream_t *sst, const cdf_header_t *h,",
          "933:     cdf_summary_info_header_t *ssi, cdf_property_info_t **info, size_t *count)",
          "934: {",
          "936:  const cdf_summary_info_header_t *si =",
          "937:      CAST(const cdf_summary_info_header_t *, sst->sst_tab);",
          "938:  const cdf_section_declaration_t *sd =",
          "",
          "[Removed Lines]",
          "935:  size_t i, maxcount;",
          "",
          "[Added Lines]",
          "935:  size_t maxcount;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947:  ssi->si_os = CDF_TOLE2(si->si_os);",
          "948:  ssi->si_class = si->si_class;",
          "949:  cdf_swap_class(&ssi->si_class);",
          "952:  maxcount = 0;",
          "965:  return 0;",
          "966: }",
          "",
          "[Removed Lines]",
          "950:  ssi->si_count = CDF_TOLE2(si->si_count);",
          "954:  for (i = 0; i < CDF_TOLE4(si->si_count); i++) {",
          "955:   if (i >= CDF_LOOP_LIMIT) {",
          "956:    DPRINTF((\"Unpack summary info loop limit\"));",
          "957:    errno = EFTYPE;",
          "958:    return -1;",
          "959:   }",
          "960:   if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset),",
          "961:       info, count, &maxcount) == -1) {",
          "962:    return -1;",
          "963:   }",
          "964:  }",
          "",
          "[Added Lines]",
          "950:  ssi->si_count = CDF_TOLE4(si->si_count);",
          "954:  if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset), info,",
          "955:      count, &maxcount) == -1)",
          "956:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "209113ac443c82cc7573bb228b68ce1dd9d50f90",
      "candidate_info": {
        "commit_hash": "209113ac443c82cc7573bb228b68ce1dd9d50f90",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/209113ac443c82cc7573bb228b68ce1dd9d50f90",
        "files": [
          "src/cdf.c",
          "src/cdf.h",
          "src/readcdf.c"
        ],
        "message": "add some class id matching (from Christoph Biedl)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.54 2014/02/25 20:52:02 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676: int",
          "677: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
          "679: {",
          "680:  size_t i;",
          "681:  const cdf_directory_t *d;",
          "683:  for (i = 0; i < dir->dir_len; i++)",
          "684:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
          "685:    break;",
          "",
          "[Removed Lines]",
          "678:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
          "",
          "[Added Lines]",
          "678:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
          "679:     const cdf_directory_t **root)",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
          "295:     cdf_sat_t *);",
          "296: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
          "298: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
          "299:     cdf_property_info_t **, size_t *, size_t *);",
          "300: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
          "",
          "[Removed Lines]",
          "297:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
          "",
          "[Added Lines]",
          "297:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
          "298:     const cdf_directory_t **);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.38 2014/02/18 11:09:31 kim Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  { NULL,    NULL,   },",
          "71: };",
          "73: private const char *",
          "74: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
          "75: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: static const struct cv {",
          "74:  uint64_t clsid[2];",
          "75:  const char *mime;",
          "76: } clsid2mime[] = {",
          "77:  {",
          "78:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
          "79:   \"x-msi\",",
          "80:  }",
          "81: }, clsid2desc[] = {",
          "82:  {",
          "83:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
          "84:   \"MSI Installer\",",
          "85:  },",
          "86: };",
          "88: private const char *",
          "89: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
          "90: {",
          "91:  size_t i;",
          "92:  for (i = 0; cv[i].mime != NULL; i++) {",
          "93:  printf(\"%llx %llx %llx %llx\\n\",",
          "94:   clsid[0], cv[i].clsid[0], clsid[1], cv[i].clsid[1]);",
          "95:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
          "96:    return cv[i].mime;",
          "97:  }",
          "98:  return NULL;",
          "99: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: private int",
          "96: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
          "98: {",
          "99:         size_t i;",
          "100:         cdf_timestamp_t tp;",
          "",
          "[Removed Lines]",
          "97:     size_t count)",
          "",
          "[Added Lines]",
          "125:     size_t count, const uint64_t clsid[2])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         const char *s;",
          "105:         int len;",
          "107:         for (i = 0; i < count; i++) {",
          "108:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
          "109:                 switch (info[i].pi_type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:         if (!NOTMIME(ms))",
          "136:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:                                                     buf, vbuf) == -1)",
          "161:                                                         return -1;",
          "162:                                         }",
          "164:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
          "165:      str = cdf_app_to_mime(vbuf, app2mime);",
          "166:     }",
          "",
          "[Removed Lines]",
          "163:                                 } else if (info[i].pi_id ==",
          "",
          "[Added Lines]",
          "194:                                 } else if (str == NULL && info[i].pi_id ==",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208: private int",
          "209: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
          "211: {",
          "212:         cdf_summary_info_header_t si;",
          "213:         cdf_property_info_t *info;",
          "",
          "[Removed Lines]",
          "210:     const cdf_stream_t *sst)",
          "",
          "[Added Lines]",
          "241:     const cdf_stream_t *sst, const uint64_t clsid[2])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218:                 return -1;",
          "220:         if (NOTMIME(ms)) {",
          "221:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
          "222:       == -1)",
          "223:                         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   const char *str;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "245:                                 return -2;",
          "246:                         break;",
          "247:                 }",
          "248:         }",
          "251:         free(info);",
          "253:         return m == -1 ? -2 : m;",
          "254: }",
          "256: protected int",
          "257: file_trycdf(struct magic_set *ms, int fd, const unsigned char *buf,",
          "258:     size_t nbytes)",
          "",
          "[Removed Lines]",
          "250:         m = cdf_file_property_info(ms, info, count);",
          "",
          "[Added Lines]",
          "281:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
          "282:   if (str)",
          "283:                         if (file_printf(ms, \", %s\", str) == -1)",
          "284:     return -2;",
          "287:         m = cdf_file_property_info(ms, info, count, clsid);",
          "293: #ifdef notdef",
          "294: private char *",
          "295: format_clsid(char *buf, size_t len, const uint64_t uuid[2]) {",
          "296:  snprintf(buf, len, \"%.8\" PRIx64 \"-%.4\" PRIx64 \"-%.4\" PRIx64 \"-%.4\"",
          "297:      PRIx64 \"-%.12\" PRIx64,",
          "298:      (uuid[0] >> 32) & (uint64_t)0x000000000ffffffffLLU,",
          "299:      (uuid[0] >> 16) & (uint64_t)0x0000000000000ffffLLU,",
          "300:      (uuid[0] >>  0) & (uint64_t)0x0000000000000ffffLLU,",
          "301:      (uuid[1] >> 48) & (uint64_t)0x0000000000000ffffLLU,",
          "302:      (uuid[1] >>  0) & (uint64_t)0x0000fffffffffffffLLU);",
          "303:  return buf;",
          "304: }",
          "305: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "298:                 goto out2;",
          "299:         }",
          "302:                 expn = \"Cannot read short stream\";",
          "303:                 goto out3;",
          "304:         }",
          "305: #ifdef CDF_DEBUG",
          "306:         cdf_dump_dir(&info, &h, &sat, &ssat, &sst, &dir);",
          "307: #endif",
          "309:         if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,",
          "310:             &scn)) == -1) {",
          "",
          "[Removed Lines]",
          "301:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
          "",
          "[Added Lines]",
          "352:         const cdf_directory_t *root_storage;",
          "353:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
          "354:      &root_storage)) == -1) {",
          "361: #ifdef notdef",
          "362:  if (root_storage) {",
          "363:   if (NOTMIME(ms)) {",
          "364:    char clsbuf[128];",
          "365:    if (file_printf(ms, \"CLSID %s, \",",
          "366:        format_clsid(clsbuf, sizeof(clsbuf),",
          "367:        root_storage->d_storage_uuid)) == -1)",
          "368:     return -1;",
          "369:   }",
          "370:  }",
          "371: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319: #ifdef CDF_DEBUG",
          "320:         cdf_dump_summary_info(&h, &scn);",
          "321: #endif",
          "323:                 expn = \"Can't expand summary_info\";",
          "324:  if (i == 0) {",
          "325:   const char *str = NULL;",
          "326:   cdf_directory_t *d;",
          "327:   char name[__arraycount(d->d_name)];",
          "328:   size_t j, k;",
          "330:    d = &dir.dir_tab[j];",
          "331:    for (k = 0; k < sizeof(name); k++)",
          "332:     name[k] = (char)cdf_tole2(d->d_name[k]);",
          "339:   }",
          "340:   if (NOTMIME(ms)) {",
          "341:    if (str != NULL) {",
          "",
          "[Removed Lines]",
          "322:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
          "329:   for (j = 0; j < dir.dir_len; j++) {",
          "333:    if (NOTMIME(ms))",
          "334:     str = cdf_app_to_mime(name, name2desc);",
          "335:    else",
          "336:     str = cdf_app_to_mime(name, name2mime);",
          "337:    if (str != NULL)",
          "338:     break;",
          "",
          "[Added Lines]",
          "386:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
          "387:      root_storage->d_storage_uuid)) < 0)",
          "396:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
          "400:    str = cdf_app_to_mime(name,",
          "401:        NOTMIME(ms) ? name2desc : name2mime);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d683328df506519bd674624dd4bff3c8dbef3e75",
      "candidate_info": {
        "commit_hash": "d683328df506519bd674624dd4bff3c8dbef3e75",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d683328df506519bd674624dd4bff3c8dbef3e75",
        "files": [
          "src/cdf.c"
        ],
        "message": "Fix thumbs parsing (wrong offsets, skip first entry, pack)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.74 2015/01/11 17:00:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.75 2015/02/27 21:16:55 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026:      CDF_SHORT_SEC_SIZE(h) : CDF_SEC_SIZE(h);",
          "1027:  const char *b = CAST(const char *, sst->sst_tab);",
          "1028:  const char *eb = b + ss * sst->sst_len;",
          "1030:  cdf_catalog_entry_t *ce;",
          "1031:  uint16_t reclen;",
          "1032:  const uint16_t *np;",
          "1035:   memcpy(&reclen, b, sizeof(reclen));",
          "1036:   reclen = CDF_TOLE2(reclen);",
          "1037:   if (reclen == 0)",
          "1038:    break;",
          "1039:   b += reclen;",
          "1040:  }",
          "1042:      malloc(sizeof(cdf_catalog_t) + nr * sizeof(*ce)));",
          "1044:  ce = (*cat)->cat_e;",
          "1045:  memset(ce, 0, nr * sizeof(*ce));",
          "1046:  b = CAST(const char *, sst->sst_tab);",
          "1049:   uint16_t rlen;",
          "1051:   extract_catalog_field(uint16_t, ce_namlen, 0);",
          "1054:   reclen = cep->ce_namlen;",
          "1056:   if (reclen < 14) {",
          "",
          "[Removed Lines]",
          "1029:  size_t nr, i, k;",
          "1034:  for (nr = 0; b < eb; nr++) {",
          "1043:  (*cat)->cat_num = nr;",
          "1047:  for (i = 0; i < nr; i++, b += reclen) {",
          "1048:   cdf_catalog_entry_t *cep = &ce[i];",
          "1052:   extract_catalog_field(uint16_t, ce_num, 2);",
          "1053:   extract_catalog_field(uint64_t, ce_timestamp, 6);",
          "",
          "[Added Lines]",
          "1029:  size_t nr, i, j, k;",
          "1034:  for (nr = 0;; nr++) {",
          "1040:   if (b > eb)",
          "1041:       break;",
          "1043:  nr--;",
          "1049:  for (j = i = 0; i < nr; b += reclen) {",
          "1050:   cdf_catalog_entry_t *cep = &ce[j];",
          "1054:   extract_catalog_field(uint16_t, ce_num, 4);",
          "1055:   extract_catalog_field(uint64_t, ce_timestamp, 8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:   for (k = 0; k < cep->ce_namlen; k++)",
          "1074:   cep->ce_name[cep->ce_namlen] = 0;",
          "1075:  }",
          "1076:  return 0;",
          "1077: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1077:   j = i;",
          "1078:   i++;",
          "1080:  (*cat)->cat_num = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:  cdf_dir_t dir;",
          "1432:  cdf_info_t info;",
          "1433:  const cdf_directory_t *root;",
          "1435:  if (argc < 2) {",
          "1436:   (void)fprintf(stderr, \"Usage: %s <filename>\\n\", getprogname());",
          "1437:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439: #ifdef __linux__",
          "1440: #define getprogname() __progname",
          "1441:  extern char *__progname;",
          "1442: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1484:    cdf_dump_summary_info(&h, &scn);",
          "1485: #endif",
          "1486:   if (cdf_read_user_stream(&info, &h, &sat, &ssat, &sst,",
          "1488:    warn(\"Cannot read catalog\");",
          "1489: #ifdef CDF_DEBUG",
          "1490:   else",
          "",
          "[Removed Lines]",
          "1487:       &dir, \"Catalog\", &scn) <= 0)",
          "",
          "[Added Lines]",
          "1495:       &dir, \"Catalog\", &scn) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}