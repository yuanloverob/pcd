{
  "cve_id": "CVE-2022-35993",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When `SetSize` receives an input `set_shape` that is not a 1D tensor, it gives a `CHECK` fails that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit cf70b79d2662c0d3c6af74583641e345fc939467. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "cf70b79d2662c0d3c6af74583641e345fc939467",
  "patch_info": {
    "commit_hash": "cf70b79d2662c0d3c6af74583641e345fc939467",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/cf70b79d2662c0d3c6af74583641e345fc939467",
    "files": [
      "tensorflow/core/kernels/set_kernels.cc",
      "tensorflow/python/kernel_tests/math_ops/sets_test.py"
    ],
    "message": "Fix tf.raw_ops.SetSize vulnerability with invalid input arg specifying shape.\n\nCheck that given input is a 1D tensor, as required.\n\nPiperOrigin-RevId: 460740463",
    "before_after_code_files": [
      "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
      "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc": [
      "File: tensorflow/core/kernels/set_kernels.cc -> tensorflow/core/kernels/set_kernels.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:                                sparse::SparseTensor* tensor) {",
      "72:   TensorShape shape;",
      "75:   CheckRankAtLeast2(ctx, shape);",
      "76:   std::vector<int64_t> order(shape.dims());",
      "77:   std::iota(order.begin(), order.end(), 0);",
      "",
      "[Removed Lines]",
      "73:   TF_RETURN_IF_ERROR(TensorShape::BuildTensorShape(",
      "74:       ctx->input(base_index + 2).vec<int64_t>(), &shape));",
      "",
      "[Added Lines]",
      "73:   const Tensor& shape_tensor = ctx->input(base_index + 2);",
      "74:   if (shape_tensor.dims() != 1) {",
      "75:     return errors::InvalidArgument(\"Shape must be a 1D tensor.\");",
      "76:   }",
      "77:   TF_RETURN_IF_ERROR(",
      "78:       TensorShape::BuildTensorShape(shape_tensor.vec<int64_t>(), &shape));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py": [
      "File: tensorflow/python/kernel_tests/math_ops/sets_test.py -> tensorflow/python/kernel_tests/math_ops/sets_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: from tensorflow.python.framework import sparse_tensor as sparse_tensor_lib",
      "24: from tensorflow.python.framework import test_util",
      "25: from tensorflow.python.ops import array_ops",
      "26: from tensorflow.python.ops import math_ops",
      "27: from tensorflow.python.ops import sets",
      "28: from tensorflow.python.ops import sparse_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: from tensorflow.python.ops import gen_set_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1303:         result.values,",
      "1304:         _constant([1, 3, 5, 7, 9, 0, 2, 4, 5, 6, 6, 8, 9], dtype))",
      "1307: if __name__ == \"__main__\":",
      "1308:   googletest.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1307:   def test_raw_ops_setsize_invalid_shape(self):",
      "1308:     with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
      "1309:                                 \"Shape must be a 1D tensor\"):",
      "1310:       invalid_shape = 1",
      "1311:       self.evaluate(",
      "1312:           gen_set_ops.set_size(",
      "1313:               set_indices=1,",
      "1314:               set_values=[1, 1],",
      "1315:               set_shape=invalid_shape,",
      "1316:               validate_indices=True,",
      "1317:               name=\"\"))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "781bac10156001569c5e99057f6581cd38773fc6",
      "candidate_info": {
        "commit_hash": "781bac10156001569c5e99057f6581cd38773fc6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/781bac10156001569c5e99057f6581cd38773fc6",
        "files": [
          "tensorflow/core/kernels/set_kernels.cc"
        ],
        "message": "Add a fix for Check Failure due to integer overflow\n\nPiperOrigin-RevId: 416216408\nChange-Id: I16d3e2ce35d88b91e8a4ca38b9ebbbf7a05ee792",
        "before_after_code_files": [
          "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc": [
          "File: tensorflow/core/kernels/set_kernels.cc -> tensorflow/core/kernels/set_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"tensorflow/core/framework/types.h\"",
          "37: #include \"tensorflow/core/lib/core/status.h\"",
          "38: #include \"tensorflow/core/platform/env.h\"",
          "39: #include \"tensorflow/core/util/sparse/sparse_tensor.h\"",
          "41: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:                                const bool validate_indices,",
          "69:                                sparse::SparseTensor* tensor) {",
          "73:   CheckRankAtLeast2(ctx, shape);",
          "74:   std::vector<int64_t> order(shape.dims());",
          "75:   std::iota(order.begin(), order.end(), 0);",
          "",
          "[Removed Lines]",
          "71:   const TensorShape shape =",
          "72:       TensorShape(ctx->input(base_index + 2).vec<int64_t>());",
          "",
          "[Added Lines]",
          "72:   TensorShape shape;",
          "73:   TF_RETURN_IF_ERROR(TensorShape::BuildTensorShape(",
          "74:       ctx->input(base_index + 2).vec<int64_t>(), &shape));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11f617bda4b82dda2d53461c84f096d74ffdbbe3",
      "candidate_info": {
        "commit_hash": "11f617bda4b82dda2d53461c84f096d74ffdbbe3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/11f617bda4b82dda2d53461c84f096d74ffdbbe3",
        "files": [
          "tensorflow/core/kernels/set_kernels.cc",
          "tensorflow/python/kernel_tests/math_ops/sets_test.py"
        ],
        "message": "Fix tf.raw_ops.SetSize vulnerability with invalid input arg specifying shape.\n\nCheck that given input is a 1D tensor, as required.\n\nPiperOrigin-RevId: 460740463",
        "before_after_code_files": [
          "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
          "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
            "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
            "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc": [
          "File: tensorflow/core/kernels/set_kernels.cc -> tensorflow/core/kernels/set_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                                sparse::SparseTensor* tensor) {",
          "72:   TensorShape shape;",
          "75:   CheckRankAtLeast2(ctx, shape);",
          "76:   std::vector<int64_t> order(shape.dims());",
          "77:   std::iota(order.begin(), order.end(), 0);",
          "",
          "[Removed Lines]",
          "73:   TF_RETURN_IF_ERROR(TensorShape::BuildTensorShape(",
          "74:       ctx->input(base_index + 2).vec<int64_t>(), &shape));",
          "",
          "[Added Lines]",
          "73:   const Tensor& shape_tensor = ctx->input(base_index + 2);",
          "74:   if (shape_tensor.dims() != 1) {",
          "75:     return errors::InvalidArgument(\"Shape must be a 1D tensor.\");",
          "76:   }",
          "77:   TF_RETURN_IF_ERROR(",
          "78:       TensorShape::BuildTensorShape(shape_tensor.vec<int64_t>(), &shape));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py": [
          "File: tensorflow/python/kernel_tests/math_ops/sets_test.py -> tensorflow/python/kernel_tests/math_ops/sets_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from tensorflow.python.framework import sparse_tensor as sparse_tensor_lib",
          "24: from tensorflow.python.framework import test_util",
          "25: from tensorflow.python.ops import array_ops",
          "26: from tensorflow.python.ops import math_ops",
          "27: from tensorflow.python.ops import sets",
          "28: from tensorflow.python.ops import sparse_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: from tensorflow.python.ops import gen_set_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:         result.values,",
          "1304:         _constant([1, 3, 5, 7, 9, 0, 2, 4, 5, 6, 6, 8, 9], dtype))",
          "1307: if __name__ == \"__main__\":",
          "1308:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1307:   def test_raw_ops_setsize_invalid_shape(self):",
          "1308:     with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "1309:                                 \"Shape must be a 1D tensor\"):",
          "1310:       invalid_shape = 1",
          "1311:       self.evaluate(",
          "1312:           gen_set_ops.set_size(",
          "1313:               set_indices=1,",
          "1314:               set_values=[1, 1],",
          "1315:               set_shape=invalid_shape,",
          "1316:               validate_indices=True,",
          "1317:               name=\"\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "461d03b6d902165364dd16b33c3fe39fa1f9012a",
      "candidate_info": {
        "commit_hash": "461d03b6d902165364dd16b33c3fe39fa1f9012a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/461d03b6d902165364dd16b33c3fe39fa1f9012a",
        "files": [
          "tensorflow/core/kernels/set_kernels.cc",
          "tensorflow/python/kernel_tests/sets_test.py"
        ],
        "message": "Fix tf.raw_ops.SetSize vulnerability with invalid input arg specifying shape.\n\nCheck that given input is a 1D tensor, as required.\n\nPiperOrigin-RevId: 460740463",
        "before_after_code_files": [
          "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
          "tensorflow/python/kernel_tests/sets_test.py||tensorflow/python/kernel_tests/sets_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc": [
          "File: tensorflow/core/kernels/set_kernels.cc -> tensorflow/core/kernels/set_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                                sparse::SparseTensor* tensor) {",
          "73:   TensorShape shape;",
          "76:   CheckRankAtLeast2(ctx, shape);",
          "77:   std::vector<int64_t> order(shape.dims());",
          "78:   std::iota(order.begin(), order.end(), 0);",
          "",
          "[Removed Lines]",
          "74:   TF_RETURN_IF_ERROR(TensorShape::BuildTensorShape(",
          "75:       ctx->input(base_index + 2).vec<int64_t>(), &shape));",
          "",
          "[Added Lines]",
          "74:   const Tensor& shape_tensor = ctx->input(base_index + 2);",
          "75:   if (shape_tensor.dims() != 1) {",
          "76:     return errors::InvalidArgument(\"Shape must be a 1D tensor.\");",
          "77:   }",
          "78:   TF_RETURN_IF_ERROR(",
          "79:       TensorShape::BuildTensorShape(shape_tensor.vec<int64_t>(), &shape));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sets_test.py||tensorflow/python/kernel_tests/sets_test.py": [
          "File: tensorflow/python/kernel_tests/sets_test.py -> tensorflow/python/kernel_tests/sets_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from tensorflow.python.framework import sparse_tensor as sparse_tensor_lib",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import math_ops",
          "30: from tensorflow.python.ops import sets",
          "31: from tensorflow.python.ops import sparse_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: from tensorflow.python.ops import gen_set_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1265:                                                       last_indices))",
          "1266:     self.assertAllEqual(expected_shape, sparse_tensor_value.dense_shape)",
          "1269: if __name__ == \"__main__\":",
          "1270:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:   def test_raw_ops_setsize_invalid_shape(self):",
          "1270:     with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "1271:                                 \"Shape must be a 1D tensor\"):",
          "1272:       invalid_shape = 1",
          "1273:       self.evaluate(",
          "1274:           gen_set_ops.set_size(",
          "1275:               set_indices=1,",
          "1276:               set_values=[1, 1],",
          "1277:               set_shape=invalid_shape,",
          "1278:               validate_indices=True,",
          "1279:               name=\"\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e15637690d547bf03d52a6077bacbeeaa174cd7",
      "candidate_info": {
        "commit_hash": "8e15637690d547bf03d52a6077bacbeeaa174cd7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8e15637690d547bf03d52a6077bacbeeaa174cd7",
        "files": [
          "tensorflow/core/kernels/set_kernels.cc",
          "tensorflow/python/kernel_tests/math_ops/sets_test.py"
        ],
        "message": "Fix tf.raw_ops.SetSize vulnerability with invalid input arg specifying shape.\n\nCheck that given input is a 1D tensor, as required.\n\nPiperOrigin-RevId: 460740463",
        "before_after_code_files": [
          "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
          "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
            "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc",
            "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/set_kernels.cc||tensorflow/core/kernels/set_kernels.cc": [
          "File: tensorflow/core/kernels/set_kernels.cc -> tensorflow/core/kernels/set_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                                sparse::SparseTensor* tensor) {",
          "72:   TensorShape shape;",
          "75:   CheckRankAtLeast2(ctx, shape);",
          "76:   std::vector<int64_t> order(shape.dims());",
          "77:   std::iota(order.begin(), order.end(), 0);",
          "",
          "[Removed Lines]",
          "73:   TF_RETURN_IF_ERROR(TensorShape::BuildTensorShape(",
          "74:       ctx->input(base_index + 2).vec<int64_t>(), &shape));",
          "",
          "[Added Lines]",
          "73:   const Tensor& shape_tensor = ctx->input(base_index + 2);",
          "74:   if (shape_tensor.dims() != 1) {",
          "75:     return errors::InvalidArgument(\"Shape must be a 1D tensor.\");",
          "76:   }",
          "77:   TF_RETURN_IF_ERROR(",
          "78:       TensorShape::BuildTensorShape(shape_tensor.vec<int64_t>(), &shape));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/math_ops/sets_test.py||tensorflow/python/kernel_tests/math_ops/sets_test.py": [
          "File: tensorflow/python/kernel_tests/math_ops/sets_test.py -> tensorflow/python/kernel_tests/math_ops/sets_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from tensorflow.python.framework import sparse_tensor as sparse_tensor_lib",
          "24: from tensorflow.python.framework import test_util",
          "25: from tensorflow.python.ops import array_ops",
          "26: from tensorflow.python.ops import math_ops",
          "27: from tensorflow.python.ops import sets",
          "28: from tensorflow.python.ops import sparse_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: from tensorflow.python.ops import gen_set_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:         result.values,",
          "1304:         _constant([1, 3, 5, 7, 9, 0, 2, 4, 5, 6, 6, 8, 9], dtype))",
          "1307: if __name__ == \"__main__\":",
          "1308:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1307:   def test_raw_ops_setsize_invalid_shape(self):",
          "1308:     with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "1309:                                 \"Shape must be a 1D tensor\"):",
          "1310:       invalid_shape = 1",
          "1311:       self.evaluate(",
          "1312:           gen_set_ops.set_size(",
          "1313:               set_indices=1,",
          "1314:               set_values=[1, 1],",
          "1315:               set_shape=invalid_shape,",
          "1316:               validate_indices=True,",
          "1317:               name=\"\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}