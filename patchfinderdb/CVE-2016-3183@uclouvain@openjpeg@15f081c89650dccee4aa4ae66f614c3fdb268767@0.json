{
  "cve_id": "CVE-2016-3183",
  "cve_desc": "The sycc422_t_rgb function in common/color.c in OpenJPEG before 2.1.1 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted jpeg2000 file.",
  "repo": "uclouvain/openjpeg",
  "patch_hash": "15f081c89650dccee4aa4ae66f614c3fdb268767",
  "patch_info": {
    "commit_hash": "15f081c89650dccee4aa4ae66f614c3fdb268767",
    "repo": "uclouvain/openjpeg",
    "commit_url": "https://github.com/uclouvain/openjpeg/commit/15f081c89650dccee4aa4ae66f614c3fdb268767",
    "files": [
      "src/bin/common/color.c",
      "src/bin/jp2/convertbmp.c"
    ],
    "message": "Fix Out-Of-Bounds Read in sycc42x_to_rgb function (#745)\n\n42x Images with an odd x0/y0 lead to subsampled component starting at the\n2nd column/line.\nThat is offset = comp->dx * comp->x0 - image->x0 = 1\n\nFix #726",
    "before_after_code_files": [
      "src/bin/common/color.c||src/bin/common/color.c",
      "src/bin/jp2/convertbmp.c||src/bin/jp2/convertbmp.c"
    ]
  },
  "patch_diff": {
    "src/bin/common/color.c||src/bin/common/color.c": [
      "File: src/bin/common/color.c -> src/bin/common/color.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "91: {",
      "92:  int *d0, *d1, *d2, *r, *g, *b;",
      "93:  const int *y, *cb, *cr;",
      "95:  int offset, upb;",
      "97:  upb = (int)img->comps[0].prec;",
      "98:  offset = 1<<(upb - 1); upb = (1<<upb)-1;",
      "101:  max = maxw * maxh;",
      "103:  y = img->comps[0].data;",
      "104:  cb = img->comps[1].data;",
      "105:  cr = img->comps[2].data;",
      "111:  if(r == NULL || g == NULL || b == NULL) goto fails;",
      "",
      "[Removed Lines]",
      "94:  unsigned int maxw, maxh, max, i;",
      "100:  maxw = (unsigned int)img->comps[0].w; maxh = (unsigned int)img->comps[0].h;",
      "107:  d0 = r = (int*)malloc(sizeof(int) * (size_t)max);",
      "108:  d1 = g = (int*)malloc(sizeof(int) * (size_t)max);",
      "109:  d2 = b = (int*)malloc(sizeof(int) * (size_t)max);",
      "",
      "[Added Lines]",
      "94:  size_t maxw, maxh, max, i;",
      "100:  maxw = (size_t)img->comps[0].w; maxh = (size_t)img->comps[0].h;",
      "107:  d0 = r = (int*)malloc(sizeof(int) * max);",
      "108:  d1 = g = (int*)malloc(sizeof(int) * max);",
      "109:  d2 = b = (int*)malloc(sizeof(int) * max);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:  free(img->comps[0].data); img->comps[0].data = d0;",
      "119:  free(img->comps[1].data); img->comps[1].data = d1;",
      "120:  free(img->comps[2].data); img->comps[2].data = d2;",
      "121:  return;",
      "123: fails:",
      "130: static void sycc422_to_rgb(opj_image_t *img)",
      "131: {",
      "132:  int *d0, *d1, *d2, *r, *g, *b;",
      "133:  const int *y, *cb, *cr;",
      "135:  int offset, upb;",
      "138:  upb = (int)img->comps[0].prec;",
      "139:  offset = 1<<(upb - 1); upb = (1<<upb)-1;",
      "142:  max = maxw * maxh;",
      "144:  y = img->comps[0].data;",
      "145:  cb = img->comps[1].data;",
      "146:  cr = img->comps[2].data;",
      "152:  if(r == NULL || g == NULL || b == NULL) goto fails;",
      "154:  for(i=0U; i < maxh; ++i)",
      "155:  {",
      "157:   {",
      "158:    sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
      "159:    ++y; ++r; ++g; ++b;",
      "160:    sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
      "161:    ++y; ++r; ++g; ++b; ++cb; ++cr;",
      "162:   }",
      "164:    sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
      "165:    ++y; ++r; ++g; ++b; ++cb; ++cr;",
      "166:   }",
      "167:  }",
      "168:  free(img->comps[0].data); img->comps[0].data = d0;",
      "169:  free(img->comps[1].data); img->comps[1].data = d1;",
      "170:  free(img->comps[2].data); img->comps[2].data = d2;",
      "183:  return;",
      "185: fails:",
      "192: static void sycc420_to_rgb(opj_image_t *img)",
      "193: {",
      "194:  int *d0, *d1, *d2, *r, *g, *b, *nr, *ng, *nb;",
      "195:  const int *y, *cb, *cr, *ny;",
      "197:  int offset, upb;",
      "200:  upb = (int)img->comps[0].prec;",
      "201:  offset = 1<<(upb - 1); upb = (1<<upb)-1;",
      "204:  max = maxw * maxh;",
      "206:  y = img->comps[0].data;",
      "207:  cb = img->comps[1].data;",
      "208:  cr = img->comps[2].data;",
      "217:  {",
      "218:   ny = y + maxw;",
      "219:   nr = r + maxw; ng = g + maxw; nb = b + maxw;",
      "222:   {",
      "223:    sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
      "224:    ++y; ++r; ++g; ++b;",
      "",
      "[Removed Lines]",
      "124:  if(r) free(r);",
      "125:  if(g) free(g);",
      "126:  if(b) free(b);",
      "134:  unsigned int maxw, maxh, max;",
      "136:  unsigned int i, j;",
      "141:  maxw = (unsigned int)img->comps[0].w; maxh = (unsigned int)img->comps[0].h;",
      "148:  d0 = r = (int*)malloc(sizeof(int) * (size_t)max);",
      "149:  d1 = g = (int*)malloc(sizeof(int) * (size_t)max);",
      "150:  d2 = b = (int*)malloc(sizeof(int) * (size_t)max);",
      "156:   for(j=0U; j < (maxw & ~(unsigned int)1U); j += 2U)",
      "163:   if (j < maxw) {",
      "172: #if defined(USE_JPWL) || defined(USE_MJ2)",
      "173:  img->comps[1].w = maxw; img->comps[1].h = maxh;",
      "174:  img->comps[2].w = maxw; img->comps[2].h = maxh;",
      "175: #else",
      "176:  img->comps[1].w = (OPJ_UINT32)maxw; img->comps[1].h = (OPJ_UINT32)maxh;",
      "177:  img->comps[2].w = (OPJ_UINT32)maxw; img->comps[2].h = (OPJ_UINT32)maxh;",
      "178: #endif",
      "179:  img->comps[1].dx = img->comps[0].dx;",
      "180:  img->comps[2].dx = img->comps[0].dx;",
      "181:  img->comps[1].dy = img->comps[0].dy;",
      "182:  img->comps[2].dy = img->comps[0].dy;",
      "186:  if(r) free(r);",
      "187:  if(g) free(g);",
      "188:  if(b) free(b);",
      "196:  unsigned int maxw, maxh, max;",
      "198:  unsigned int i, j;",
      "203:  maxw = (unsigned int)img->comps[0].w; maxh = (unsigned int)img->comps[0].h;",
      "210:  d0 = r = (int*)malloc(sizeof(int) * (size_t)max);",
      "211:  d1 = g = (int*)malloc(sizeof(int) * (size_t)max);",
      "212:  d2 = b = (int*)malloc(sizeof(int) * (size_t)max);",
      "214:  if(r == NULL || g == NULL || b == NULL) goto fails;",
      "216:  for(i=0U; i < (maxh & ~(unsigned int)1U); i += 2U)",
      "221:   for(j=0; j < (maxw & ~(unsigned int)1U); j += 2U)",
      "",
      "[Added Lines]",
      "121:  img->color_space = OPJ_CLRSPC_SRGB;",
      "125:  free(r);",
      "126:  free(g);",
      "127:  free(b);",
      "134:  size_t maxw, maxh, max, offx, loopmaxw;",
      "136:  size_t i;",
      "141:  maxw = (size_t)img->comps[0].w; maxh = (size_t)img->comps[0].h;",
      "148:  d0 = r = (int*)malloc(sizeof(int) * max);",
      "149:  d1 = g = (int*)malloc(sizeof(int) * max);",
      "150:  d2 = b = (int*)malloc(sizeof(int) * max);",
      "155:  offx = img->x0 & 1U;",
      "156:  loopmaxw = maxw - offx;",
      "160:   size_t j;",
      "162:   if (offx > 0U) {",
      "163:    sycc_to_rgb(offset, upb, *y, 0, 0, r, g, b);",
      "164:    ++y; ++r; ++g; ++b;",
      "165:   }",
      "167:   for(j=0U; j < (loopmaxw & ~(size_t)1U); j += 2U)",
      "174:   if (j < loopmaxw) {",
      "184:  img->comps[1].w = img->comps[2].w = img->comps[0].w;",
      "185:  img->comps[1].h = img->comps[2].h = img->comps[0].h;",
      "186:  img->comps[1].dx = img->comps[2].dx = img->comps[0].dx;",
      "187:  img->comps[1].dy = img->comps[2].dy = img->comps[0].dy;",
      "188:  img->color_space = OPJ_CLRSPC_SRGB;",
      "192:  free(r);",
      "193:  free(g);",
      "194:  free(b);",
      "201:  size_t maxw, maxh, max, offx, loopmaxw, offy, loopmaxh;",
      "203:  size_t i;",
      "208:  maxw = (size_t)img->comps[0].w; maxh = (size_t)img->comps[0].h;",
      "215:  d0 = r = (int*)malloc(sizeof(int) * max);",
      "216:  d1 = g = (int*)malloc(sizeof(int) * max);",
      "217:  d2 = b = (int*)malloc(sizeof(int) * max);",
      "219:  if (r == NULL || g == NULL || b == NULL) goto fails;",
      "222:  offx = img->x0 & 1U;",
      "223:  loopmaxw = maxw - offx;",
      "225:  offy = img->y0 & 1U;",
      "226:  loopmaxh = maxh - offy;",
      "228:  if (offy > 0U) {",
      "229:   size_t j;",
      "231:   for(j=0; j < maxw; ++j)",
      "232:   {",
      "233:    sycc_to_rgb(offset, upb, *y, 0, 0, r, g, b);",
      "234:    ++y; ++r; ++g; ++b;",
      "235:   }",
      "236:  }",
      "238:  for(i=0U; i < (loopmaxh & ~(size_t)1U); i += 2U)",
      "240:   size_t j;",
      "245:   if (offx > 0U) {",
      "246:    sycc_to_rgb(offset, upb, *y, 0, 0, r, g, b);",
      "247:    ++y; ++r; ++g; ++b;",
      "248:    sycc_to_rgb(offset, upb, *ny, *cb, *cr, nr, ng, nb);",
      "249:    ++ny; ++nr; ++ng; ++nb;",
      "250:   }",
      "252:   for(j=0; j < (loopmaxw & ~(size_t)1U); j += 2U)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "230:    sycc_to_rgb(offset, upb, *ny, *cb, *cr, nr, ng, nb);",
      "231:    ++ny; ++nr; ++ng; ++nb; ++cb; ++cr;",
      "232:   }",
      "234:   {",
      "235:    sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
      "236:    ++y; ++r; ++g; ++b;",
      "",
      "[Removed Lines]",
      "233:   if(j < maxw)",
      "",
      "[Added Lines]",
      "264:   if(j < loopmaxw)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "240:   }",
      "241:   y += maxw; r += maxw; g += maxw; b += maxw;",
      "242:  }",
      "244:  {",
      "246:   {",
      "247:    sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
      "",
      "[Removed Lines]",
      "243:  if(i < maxh)",
      "245:   for(j=0U; j < (maxw & ~(unsigned int)1U); j += 2U)",
      "",
      "[Added Lines]",
      "274:  if(i < loopmaxh)",
      "276:   size_t j;",
      "278:   for(j=0U; j < (maxw & ~(size_t)1U); j += 2U)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "262:  free(img->comps[1].data); img->comps[1].data = d1;",
      "263:  free(img->comps[2].data); img->comps[2].data = d2;",
      "276:  return;",
      "278: fails:",
      "285: void color_sycc_to_rgb(opj_image_t *img)",
      "",
      "[Removed Lines]",
      "265: #if defined(USE_JPWL) || defined(USE_MJ2)",
      "266:  img->comps[1].w = maxw; img->comps[1].h = maxh;",
      "267:  img->comps[2].w = maxw; img->comps[2].h = maxh;",
      "268: #else",
      "269:  img->comps[1].w = (OPJ_UINT32)maxw; img->comps[1].h = (OPJ_UINT32)maxh;",
      "270:  img->comps[2].w = (OPJ_UINT32)maxw; img->comps[2].h = (OPJ_UINT32)maxh;",
      "271: #endif",
      "272:  img->comps[1].dx = img->comps[0].dx;",
      "273:  img->comps[2].dx = img->comps[0].dx;",
      "274:  img->comps[1].dy = img->comps[0].dy;",
      "275:  img->comps[2].dy = img->comps[0].dy;",
      "279:  if(r) free(r);",
      "280:  if(g) free(g);",
      "281:  if(b) free(b);",
      "",
      "[Added Lines]",
      "298:  img->comps[1].w = img->comps[2].w = img->comps[0].w;",
      "299:  img->comps[1].h = img->comps[2].h = img->comps[0].h;",
      "300:  img->comps[1].dx = img->comps[2].dx = img->comps[0].dx;",
      "301:  img->comps[1].dy = img->comps[2].dy = img->comps[0].dy;",
      "302:  img->color_space = OPJ_CLRSPC_SRGB;",
      "306:  free(r);",
      "307:  free(g);",
      "308:  free(b);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "324:   fprintf(stderr,\"%s:%d:color_sycc_to_rgb\\n\\tCAN NOT CONVERT\\n\", __FILE__,__LINE__);",
      "325:   return;",
      "326:   }",
      "331: #if defined(OPJ_HAVE_LIBLCMS2) || defined(OPJ_HAVE_LIBLCMS1)",
      "",
      "[Removed Lines]",
      "327:  img->color_space = OPJ_CLRSPC_SRGB;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/bin/jp2/convertbmp.c||src/bin/jp2/convertbmp.c": [
      "File: src/bin/jp2/convertbmp.c -> src/bin/jp2/convertbmp.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f11e89c803fd9a332698bc36338a4be87c6d199",
      "candidate_info": {
        "commit_hash": "4f11e89c803fd9a332698bc36338a4be87c6d199",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/4f11e89c803fd9a332698bc36338a4be87c6d199",
        "files": [
          "tests/nonregression/md5refs.txt",
          "tests/nonregression/test_suite.ctest.in"
        ],
        "message": "Add tests for recent issues\n\nUpdate uclouvain/openjpeg#725\nUpdate uclouvain/openjpeg#726",
        "before_after_code_files": [
          "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
          "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "552: opj_decompress -i @INPUT_NR_PATH@/basn6a08.jp2 -o @TEMP_PATH@/basn6a08_tif-11.tif -p 11S",
          "553: opj_decompress -i @INPUT_NR_PATH@/basn6a08.jp2 -o @TEMP_PATH@/basn6a08_tif-13.tif -p 13S",
          "554: opj_decompress -i @INPUT_NR_PATH@/basn6a08.jp2 -o @TEMP_PATH@/basn6a08_tif-15.tif -p 15S",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556: # issue 725",
          "557: !opj_decompress -i @INPUT_NR_PATH@/issue725.jp2 -o @TEMP_PATH@/issue725.png",
          "558: # issue 726",
          "559: opj_decompress -i @INPUT_NR_PATH@/issue726.j2k -o @TEMP_PATH@/issue726.png",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "319fc971fef8a1e1c1c543506c26805873e3f258",
      "candidate_info": {
        "commit_hash": "319fc971fef8a1e1c1c543506c26805873e3f258",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/319fc971fef8a1e1c1c543506c26805873e3f258",
        "files": [
          "src/bin/common/color.c",
          "src/bin/jp2/convert.c",
          "src/bin/jp2/convertbmp.c",
          "src/bin/jp2/convertpng.c",
          "src/bin/jp2/opj_compress.c",
          "src/bin/jp2/opj_decompress.c",
          "src/bin/jp2/opj_dump.c",
          "src/lib/openjp2/cidx_manager.c",
          "src/lib/openjp2/j2k.c",
          "src/lib/openjp2/jp2.c",
          "src/lib/openjp2/phix_manager.c",
          "src/lib/openjp2/ppix_manager.c",
          "src/lib/openjp2/t1.c",
          "src/lib/openjp2/thix_manager.c",
          "tests/test_tile_encoder.c"
        ],
        "message": "cppcheck fix for openjp2 (#740)",
        "before_after_code_files": [
          "src/bin/common/color.c||src/bin/common/color.c",
          "src/bin/jp2/convert.c||src/bin/jp2/convert.c",
          "src/bin/jp2/convertbmp.c||src/bin/jp2/convertbmp.c",
          "src/bin/jp2/convertpng.c||src/bin/jp2/convertpng.c",
          "src/bin/jp2/opj_compress.c||src/bin/jp2/opj_compress.c",
          "src/bin/jp2/opj_decompress.c||src/bin/jp2/opj_decompress.c",
          "src/bin/jp2/opj_dump.c||src/bin/jp2/opj_dump.c",
          "src/lib/openjp2/cidx_manager.c||src/lib/openjp2/cidx_manager.c",
          "src/lib/openjp2/j2k.c||src/lib/openjp2/j2k.c",
          "src/lib/openjp2/jp2.c||src/lib/openjp2/jp2.c",
          "src/lib/openjp2/phix_manager.c||src/lib/openjp2/phix_manager.c",
          "src/lib/openjp2/ppix_manager.c||src/lib/openjp2/ppix_manager.c",
          "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c",
          "src/lib/openjp2/thix_manager.c||src/lib/openjp2/thix_manager.c",
          "tests/test_tile_encoder.c||tests/test_tile_encoder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bin/common/color.c||src/bin/common/color.c",
            "src/bin/jp2/convertbmp.c||src/bin/jp2/convertbmp.c"
          ],
          "candidate": [
            "src/bin/common/color.c||src/bin/common/color.c",
            "src/bin/jp2/convertbmp.c||src/bin/jp2/convertbmp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bin/common/color.c||src/bin/common/color.c": [
          "File: src/bin/common/color.c -> src/bin/common/color.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:  d1 = g = (int*)malloc(sizeof(int) * (size_t)max);",
          "109:  d2 = b = (int*)malloc(sizeof(int) * (size_t)max);",
          "111:  for(i = 0U; i < max; ++i)",
          "112:  {",
          "113:   sycc_to_rgb(offset, upb, *y, *cb, *cr, r, g, b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  if(r == NULL || g == NULL || b == NULL) goto fails;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:  free(img->comps[0].data); img->comps[0].data = d0;",
          "117:  free(img->comps[1].data); img->comps[1].data = d1;",
          "118:  free(img->comps[2].data); img->comps[2].data = d2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:  return;",
          "123: fails:",
          "124:  if(r) free(r);",
          "125:  if(g) free(g);",
          "126:  if(b) free(b);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:  d1 = g = (int*)malloc(sizeof(int) * (size_t)max);",
          "142:  d2 = b = (int*)malloc(sizeof(int) * (size_t)max);",
          "144:  for(i=0U; i < maxh; ++i)",
          "145:  {",
          "146:   for(j=0U; j < (maxw & ~(unsigned int)1U); j += 2U)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  if(r == NULL || g == NULL || b == NULL) goto fails;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:  img->comps[2].dx = img->comps[0].dx;",
          "171:  img->comps[1].dy = img->comps[0].dy;",
          "172:  img->comps[2].dy = img->comps[0].dy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:  return;",
          "185: fails:",
          "186:  if(r) free(r);",
          "187:  if(g) free(g);",
          "188:  if(b) free(b);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:  d1 = g = (int*)malloc(sizeof(int) * (size_t)max);",
          "196:  d2 = b = (int*)malloc(sizeof(int) * (size_t)max);",
          "198:  for(i=0U; i < (maxh & ~(unsigned int)1U); i += 2U)",
          "199:  {",
          "200:   ny = y + maxw;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:  if(r == NULL || g == NULL || b == NULL) goto fails;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "255:  img->comps[2].dx = img->comps[0].dx;",
          "256:  img->comps[1].dy = img->comps[0].dy;",
          "257:  img->comps[2].dy = img->comps[0].dy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:  return;",
          "278: fails:",
          "279:  if(r) free(r);",
          "280:  if(g) free(g);",
          "281:  if(b) free(b);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328:  cmsHPROFILE in_prof, out_prof;",
          "329:  cmsHTRANSFORM transform;",
          "330:  cmsColorSpaceSignature in_space, out_space;",
          "332:  int *r, *g, *b;",
          "336:  in_prof =",
          "337:   cmsOpenProfileFromMem(image->icc_profile_buf, image->icc_profile_len);",
          "",
          "[Removed Lines]",
          "331:  cmsUInt32Number intent, in_type, out_type, nr_samples;",
          "333:  int prec, i, max, max_w, max_h;",
          "334:  OPJ_COLOR_SPACE oldspace;",
          "",
          "[Added Lines]",
          "355:  cmsUInt32Number intent, in_type, out_type;",
          "357:  size_t nr_samples;",
          "358:  int prec, i, max, max_w, max_h, ok = 0;",
          "359:  OPJ_COLOR_SPACE new_space;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "351:  max_w = (int)image->comps[0].w;",
          "352:   max_h = (int)image->comps[0].h;",
          "353:  prec = (int)image->comps[0].prec;",
          "357:    {",
          "",
          "[Removed Lines]",
          "354:  oldspace = image->color_space;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "366:  out_type = TYPE_RGB_16;",
          "367:   }",
          "368:  out_prof = cmsCreate_sRGBProfile();",
          "370:    }",
          "371:  else",
          "",
          "[Removed Lines]",
          "369:  image->color_space = OPJ_CLRSPC_SRGB;",
          "",
          "[Added Lines]",
          "393:  new_space = OPJ_CLRSPC_SRGB;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "374:  in_type = TYPE_GRAY_8;",
          "375:  out_type = TYPE_RGB_8;",
          "376:  out_prof = cmsCreate_sRGBProfile();",
          "378:    }",
          "379:  else",
          "",
          "[Removed Lines]",
          "377:  image->color_space = OPJ_CLRSPC_SRGB;",
          "",
          "[Added Lines]",
          "401:  new_space = OPJ_CLRSPC_SRGB;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "382:  in_type = TYPE_YCbCr_16;",
          "383:  out_type = TYPE_RGB_16;",
          "384:  out_prof = cmsCreate_sRGBProfile();",
          "386:    }",
          "387:  else",
          "388:    {",
          "",
          "[Removed Lines]",
          "385:  image->color_space = OPJ_CLRSPC_SRGB;",
          "",
          "[Added Lines]",
          "409:  new_space = OPJ_CLRSPC_SRGB;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "393:  (out_space>>24) & 0xff,(out_space>>16) & 0xff,",
          "394:  (out_space>>8) & 0xff, out_space & 0xff);",
          "395: #endif",
          "396:  return;",
          "397:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:  cmsCloseProfile(in_prof);",
          "422:  return;",
          "423:    }",
          "424:  if(out_prof == NULL)",
          "425:    {",
          "426:  cmsCloseProfile(in_prof);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "435: fprintf(stderr,\"%s:%d:color_apply_icc_profile\\n\\tcmsCreateTransform failed. \"",
          "436: \"ICC Profile ignored.\\n\",__FILE__,__LINE__);",
          "437: #endif",
          "439: #ifdef OPJ_HAVE_LIBLCMS1",
          "440:  cmsCloseProfile(in_prof);",
          "441:  cmsCloseProfile(out_prof);",
          "",
          "[Removed Lines]",
          "438:  image->color_space = oldspace;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "448:  if( prec <= 8 )",
          "449:   {",
          "450:  unsigned char *inbuf, *outbuf, *in, *out;",
          "451:  max = max_w * max_h;",
          "453:  in = inbuf = (unsigned char*)malloc(nr_samples);",
          "454:  out = outbuf = (unsigned char*)malloc(nr_samples);",
          "456:  r = image->comps[0].data;",
          "457:  g = image->comps[1].data;",
          "458:  b = image->comps[2].data;",
          "",
          "[Removed Lines]",
          "452:  nr_samples = (cmsUInt32Number)max * 3 * (cmsUInt32Number)sizeof(unsigned char);",
          "",
          "[Added Lines]",
          "485:  nr_samples = (size_t)(max * 3 * sizeof(unsigned char));",
          "489:  if(inbuf == NULL || outbuf == NULL) goto fails0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "478:  }",
          "480:   }",
          "482:   {",
          "483:  unsigned short *inbuf, *outbuf, *in, *out;",
          "484:  max = max_w * max_h;",
          "486:  in = inbuf = (unsigned short*)malloc(nr_samples);",
          "487:  out = outbuf = (unsigned short*)malloc(nr_samples);",
          "489:  r = image->comps[0].data;",
          "490:  g = image->comps[1].data;",
          "491:  b = image->comps[2].data;",
          "",
          "[Removed Lines]",
          "479:  free(inbuf); free(outbuf);",
          "481:  else",
          "485:  nr_samples = (cmsUInt32Number)max * 3 * (cmsUInt32Number)sizeof(unsigned short);",
          "",
          "[Added Lines]",
          "514:  ok = 1;",
          "516: fails0:",
          "517:  if(inbuf) free(inbuf);",
          "518:  if(outbuf) free(outbuf);",
          "525:  nr_samples = (size_t)(max * 3 * sizeof(unsigned short));",
          "529:  if(inbuf == NULL || outbuf == NULL) goto fails1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "511:  }",
          "513:   }",
          "514:    }",
          "516:    {",
          "517:  unsigned char *in, *inbuf, *out, *outbuf;",
          "518:  max = max_w * max_h;",
          "520:  in = inbuf = (unsigned char*)malloc(nr_samples);",
          "521:  out = outbuf = (unsigned char*)malloc(nr_samples);",
          "524:   realloc(image->comps, (image->numcomps+2)*sizeof(opj_image_comp_t));",
          "526:  if(image->numcomps == 2)",
          "527:   image->comps[3] = image->comps[1];",
          "529:  image->comps[1] = image->comps[0];",
          "530:  image->comps[2] = image->comps[0];",
          "535:  image->numcomps += 2;",
          "537:  r = image->comps[0].data;",
          "539:  for(i = 0; i < max; ++i)",
          "543:  cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);",
          "545:  r = image->comps[0].data;",
          "",
          "[Removed Lines]",
          "512:  free(inbuf); free(outbuf);",
          "519:  nr_samples = (cmsUInt32Number)max * 3 * sizeof(unsigned char);",
          "523:  image->comps = (opj_image_comp_t*)",
          "532:  image->comps[1].data = (int*)calloc((size_t)max, sizeof(int));",
          "533:  image->comps[2].data = (int*)calloc((size_t)max, sizeof(int));",
          "540:   {",
          "542:   }",
          "",
          "[Added Lines]",
          "554:  ok = 1;",
          "556: fails1:",
          "557:  if(inbuf) free(inbuf);",
          "558:  if(outbuf) free(outbuf);",
          "563:  if(prec <= 8)",
          "564:   {",
          "566:  opj_image_comp_t *new_comps;",
          "569:  nr_samples = (size_t)(max * 3 * sizeof(unsigned char));",
          "572:  g = (int*)calloc((size_t)max, sizeof(int));",
          "573:  b = (int*)calloc((size_t)max, sizeof(int));",
          "575:  if(inbuf == NULL || outbuf == NULL || g == NULL || b == NULL) goto fails2;",
          "577:  new_comps = (opj_image_comp_t*)",
          "580:  if(new_comps == NULL) goto fails2;",
          "582:  image->comps = new_comps;",
          "590:  image->comps[1].data = g;",
          "591:  image->comps[2].data = b;",
          "598:  {",
          "600:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "547:  b = image->comps[2].data;",
          "549:  for(i = 0; i < max; ++i)",
          "552:   }",
          "557:  cmsDeleteTransform(transform);",
          "",
          "[Removed Lines]",
          "550:   {",
          "553:  free(inbuf); free(outbuf);",
          "",
          "[Added Lines]",
          "608:  {",
          "610:  }",
          "611:  r = g = b = NULL;",
          "612:  ok = 1;",
          "614: fails2:",
          "615:  if(inbuf) free(inbuf);",
          "616:  if(outbuf) free(outbuf);",
          "617:  if(g) free(g);",
          "618:  if(b) free(b);",
          "621:   {",
          "622:  unsigned short *in, *inbuf, *out, *outbuf;",
          "623:  opj_image_comp_t *new_comps;",
          "625:  max = max_w * max_h;",
          "626:  nr_samples = (size_t)(max * 3 * sizeof(unsigned short));",
          "627:  in = inbuf = (unsigned short*)malloc(nr_samples);",
          "628:  out = outbuf = (unsigned short*)malloc(nr_samples);",
          "629:  g = (int*)calloc((size_t)max, sizeof(int));",
          "630:  b = (int*)calloc((size_t)max, sizeof(int));",
          "632:  if(inbuf == NULL || outbuf == NULL || g == NULL || b == NULL) goto fails3;",
          "634:  new_comps = (opj_image_comp_t*)",
          "635:   realloc(image->comps, (image->numcomps+2)*sizeof(opj_image_comp_t));",
          "637:  if(new_comps == NULL) goto fails3;",
          "639:  image->comps = new_comps;",
          "641:  if(image->numcomps == 2)",
          "642:   image->comps[3] = image->comps[1];",
          "644:  image->comps[1] = image->comps[0];",
          "645:  image->comps[2] = image->comps[0];",
          "647:  image->comps[1].data = g;",
          "648:  image->comps[2].data = b;",
          "650:  image->numcomps += 2;",
          "652:  r = image->comps[0].data;",
          "654:  for(i = 0; i < max; ++i)",
          "655:  {",
          "657:  }",
          "658:  cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);",
          "660:  r = image->comps[0].data;",
          "661:  g = image->comps[1].data;",
          "662:  b = image->comps[2].data;",
          "664:  for(i = 0; i < max; ++i)",
          "665:  {",
          "667:  }",
          "668:  r = g = b = NULL;",
          "669:  ok = 1;",
          "671: fails3:",
          "672:  if(inbuf) free(inbuf);",
          "673:  if(outbuf) free(outbuf);",
          "674:  if(g) free(g);",
          "675:  if(b) free(b);",
          "676:   }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "560:  cmsCloseProfile(in_prof);",
          "561:  cmsCloseProfile(out_prof);",
          "562: #endif",
          "565: void color_cielab_to_rgb(opj_image_t *image)",
          "566: {",
          "567:  int *row;",
          "568:  int enumcs, numcomps;",
          "572:  numcomps = (int)image->numcomps;",
          "574:  if(numcomps != 3)",
          "",
          "[Removed Lines]",
          "570:  image->color_space = OPJ_CLRSPC_SRGB;",
          "",
          "[Added Lines]",
          "685:  if(ok)",
          "686:    {",
          "687:  image->color_space = new_space;",
          "688:    }",
          "695:  OPJ_COLOR_SPACE new_space;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "595:   cmsCIELab Lab;",
          "597:   in = cmsCreateLab4Profile(NULL);",
          "598:   out = cmsCreate_sRGBProfile();",
          "600:   transform = cmsCreateTransform(in, TYPE_Lab_DBL, out, TYPE_RGB_16, INTENT_PERCEPTUAL, 0);",
          "602: #ifdef OPJ_HAVE_LIBLCMS2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:   if(in == NULL){",
          "724:    return;",
          "725:   }",
          "727:   if(out == NULL){",
          "728:    cmsCloseProfile(in);",
          "729:    return;",
          "730:   }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "611: #endif",
          "612:    return;",
          "613:   }",
          "614:   prec0 = (double)image->comps[0].prec;",
          "615:   prec1 = (double)image->comps[1].prec;",
          "616:   prec2 = (double)image->comps[2].prec;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745:   new_space = OPJ_CLRSPC_SRGB;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "639:   red = dst0 = (int*)malloc(max * sizeof(int));",
          "640:   green = dst1 = (int*)malloc(max * sizeof(int));",
          "641:   blue = dst2 = (int*)malloc(max * sizeof(int));",
          "643:   minL = -(rl * ol)/(pow(2, prec0)-1);",
          "644:   maxL = minL + rl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:   if(red == NULL || green == NULL || blue == NULL) goto fails;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "670:   free(src1); image->comps[1].data = dst1;",
          "671:   free(src2); image->comps[2].data = dst2;",
          "674:   image->comps[0].prec = 16;",
          "675:   image->comps[1].prec = 16;",
          "676:   image->comps[2].prec = 16;",
          "678:   return;",
          "679:  }",
          "681:  fprintf(stderr,\"%s:%d:\\n\\tenumCS %d not handled. Ignoring.\\n\", __FILE__,__LINE__, enumcs);",
          "",
          "[Removed Lines]",
          "673:   image->color_space = OPJ_CLRSPC_SRGB;",
          "",
          "[Added Lines]",
          "808:   image->color_space = new_space;",
          "815: fails:",
          "816:   cmsDeleteTransform(transform);",
          "817: #ifdef OPJ_HAVE_LIBLCMS1",
          "818:   cmsCloseProfile(in);",
          "819:   cmsCloseProfile(out);",
          "820: #endif",
          "821:   if(red) free(red);",
          "822:   if(green) free(green);",
          "823:   if(blue) free(blue);",
          "824:   return;",
          "",
          "---------------"
        ],
        "src/bin/jp2/convert.c||src/bin/jp2/convert.c": [
          "File: src/bin/jp2/convert.c -> src/bin/jp2/convert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:     if (id_len)",
          "612:     {",
          "613:         unsigned char *id = (unsigned char *) malloc(id_len);",
          "614:         if ( !fread(id, id_len, 1, fp) )",
          "615:         {",
          "616:             fprintf(stderr, \"\\nError: fread return a number of element different from the expected.\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:   if(id == 0){",
          "615:    fprintf(stderr, \"tga_readheader: memory out\\n\");",
          "616:    return 0;",
          "617:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1249:   {",
          "1250:       name = (char*)malloc(total+1);",
          "1251:    if (name == NULL) {",
          "1252:     goto fin;",
          "1253:    }",
          "1254:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1256:     fprintf(stderr, \"imagetopgx: memory out\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1906:         fprintf(stderr,\"           is written to the file\\n\");",
          "1907:     }",
          "1908:     destname = (char*)malloc(strlen(outfile) + 8);",
          "1910:     for (compno = 0; compno < ncomp; compno++)",
          "1911:     {",
          "1912:     if (ncomp > 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1914:  if(destname == NULL){",
          "1915:   fprintf(stderr, \"imagetopnm: memory out\\n\");",
          "1916:   fclose(fdest);",
          "1917:   return 1;",
          "1918:  }",
          "",
          "---------------"
        ],
        "src/bin/jp2/convertbmp.c||src/bin/jp2/convertbmp.c": [
          "File: src/bin/jp2/convertbmp.c -> src/bin/jp2/convertbmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  OPJ_UINT32 width, height;",
          "182:  OPJ_UINT32 x, y;",
          "183:  const OPJ_UINT8 *pSrc = NULL;",
          "185:  OPJ_UINT32 redShift,   redPrec;",
          "186:  OPJ_UINT32 greenShift, greenPrec;",
          "187:  OPJ_UINT32 blueShift,  bluePrec;",
          "",
          "[Removed Lines]",
          "184:  OPJ_BOOL hasAlpha = OPJ_FALSE;",
          "",
          "[Added Lines]",
          "184:  OPJ_BOOL hasAlpha;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:  OPJ_UINT32 width, height;",
          "240:  OPJ_UINT32 x, y;",
          "241:  const OPJ_UINT8 *pSrc = NULL;",
          "243:  OPJ_UINT32 redShift,   redPrec;",
          "244:  OPJ_UINT32 greenShift, greenPrec;",
          "245:  OPJ_UINT32 blueShift,  bluePrec;",
          "",
          "[Removed Lines]",
          "242:  OPJ_BOOL hasAlpha = OPJ_FALSE;",
          "",
          "[Added Lines]",
          "242:  OPJ_BOOL hasAlpha;",
          "",
          "---------------"
        ],
        "src/bin/jp2/convertpng.c||src/bin/jp2/convertpng.c": [
          "File: src/bin/jp2/convertpng.c -> src/bin/jp2/convertpng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  rows = (OPJ_BYTE**)calloc(height+1, sizeof(OPJ_BYTE*));",
          "189:   rows[i] = (OPJ_BYTE*)malloc(png_get_rowbytes(png,info));",
          "191:  png_read_image(png, rows);",
          "",
          "[Removed Lines]",
          "188:  for(i = 0; i < height; ++i)",
          "",
          "[Added Lines]",
          "188:  if(rows == NULL){",
          "189:   fprintf(stderr, \"pngtoimage: memory out\\n\");",
          "190:   goto fin;",
          "191:  }",
          "192:  for(i = 0; i < height; ++i){",
          "194:   if(rows[i] == NULL){",
          "195:    fprintf(stderr,\"pngtoimage: memory out\\n\");",
          "196:    goto fin;",
          "197:   }",
          "198:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:  if(rows)",
          "236:  {",
          "237:   for(i = 0; i < height; ++i)",
          "239:   free(rows);",
          "240:  }",
          "241:  if (row32s) {",
          "",
          "[Removed Lines]",
          "238:    free(rows[i]);",
          "",
          "[Added Lines]",
          "246:    if(rows[i]) free(rows[i]);",
          "",
          "---------------"
        ],
        "src/bin/jp2/opj_compress.c||src/bin/jp2/opj_compress.c": [
          "File: src/bin/jp2/opj_compress.c -> src/bin/jp2/opj_compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:                 raw_cp->rawBitDepth = bitdepth;",
          "648:                 raw_cp->rawSigned  = raw_signed;",
          "649:                 raw_cp->rawComps = (raw_comp_cparameters_t*) malloc(((OPJ_UINT32)(ncomp))*sizeof(raw_comp_cparameters_t));",
          "650:                 for (compno = 0; compno < ncomp && !wrong; compno++) {",
          "651:                     if (substr2 == NULL) {",
          "652:                         raw_cp->rawComps[compno].dx = lastdx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650:     if(raw_cp->rawComps == NULL){",
          "651:      free(substr1);",
          "652:      return 1;",
          "653:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:             numresolution = (OPJ_UINT32)parameters->numresolution;",
          "726:             matrix_width = numresolution * 3;",
          "727:             parameters->cp_matrice = (int *) malloc(numlayers * matrix_width * sizeof(int));",
          "728:             s = s + 2;",
          "730:             for (i = 0; i < numlayers; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:    if(parameters->cp_matrice == NULL){",
          "733:     return 1;",
          "734:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "996:         {",
          "997:             img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);",
          "998:             strcpy(img_fol->imgdirpath,opj_optarg);",
          "999:             img_fol->set_imgdir=1;",
          "1000:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005:    if(img_fol->imgdirpath == NULL){",
          "1006:     return 1;",
          "1007:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1637:     if(parse_cmdline_encoder(argc, argv, &parameters,&img_fol, &raw_cp, indexfilename, sizeof(indexfilename)) == 1) {",
          "1639:     }",
          "",
          "[Removed Lines]",
          "1638:         return 1;",
          "",
          "[Added Lines]",
          "1649:         goto fails;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1848:             OPJ_BYTE *l_data;",
          "1849:             OPJ_UINT32 l_data_size = 512*512*3;",
          "1850:             l_data = (OPJ_BYTE*) calloc( 1,l_data_size);",
          "1852:             for (i=0;i<l_nb_tiles;++i) {",
          "1853:                 if (! opj_write_tile(l_codec,i,l_data,l_data_size,l_stream)) {",
          "1854:                     fprintf(stderr, \"ERROR -> test_tile_encoder: failed to write the tile %d!\\n\",i);",
          "",
          "[Removed Lines]",
          "1851:             assert( l_data );",
          "",
          "[Added Lines]",
          "1862:             if(l_data == NULL){",
          "1863:     goto fails;",
          "1864:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1904:     }",
          "1906:     return 0;",
          "1907: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1921: fails:",
          "1922:  if(parameters.cp_comment)   free(parameters.cp_comment);",
          "1923:  if(parameters.cp_matrice)   free(parameters.cp_matrice);",
          "1924:  if(raw_cp.rawComps) free(raw_cp.rawComps);",
          "1925:  if(img_fol.imgdirpath) free(img_fol.imgdirpath);",
          "1926:  if(dirptr){",
          "1927:      if(dirptr->filename_buf) free(dirptr->filename_buf);",
          "1928:      if(dirptr->filename) free(dirptr->filename);",
          "1929:      free(dirptr);",
          "1930:  }",
          "1931:  return 1;",
          "",
          "---------------"
        ],
        "src/bin/jp2/opj_decompress.c||src/bin/jp2/opj_decompress.c": [
          "File: src/bin/jp2/opj_decompress.c -> src/bin/jp2/opj_decompress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:                 {",
          "682:      img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);",
          "683:      strcpy(img_fol->imgdirpath,opj_optarg);",
          "684:      img_fol->set_imgdir=1;",
          "685:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:      if(img_fol->imgdirpath == NULL){",
          "684:       return 1;",
          "685:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1202:  if(parse_cmdline_decoder(argc, argv, &parameters,&img_fol) == 1) {",
          "1205:  }",
          "",
          "[Removed Lines]",
          "1203:   destroy_parameters(&parameters);",
          "1204:   return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1206:   failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1210:   num_images=get_num_images(img_fol.imgdirpath);",
          "1212:   dirptr=(dircnt_t*)malloc(sizeof(dircnt_t));",
          "1224:   }",
          "1225:   if(load_images(dirptr,img_fol.imgdirpath)==1){",
          "1228:   }",
          "1229:   if (num_images==0){",
          "1230:    fprintf(stdout,\"Folder is empty\\n\");",
          "1233:   }",
          "1234:  }else{",
          "1235:   num_images=1;",
          "",
          "[Removed Lines]",
          "1213:   if(dirptr){",
          "1215:    dirptr->filename = (char**) malloc((size_t)num_images*sizeof(char*));",
          "1217:    if(!dirptr->filename_buf){",
          "1218:     destroy_parameters(&parameters);",
          "1219:     return EXIT_FAILURE;",
          "1220:    }",
          "1221:    for(it_image=0;it_image<num_images;it_image++){",
          "1222:     dirptr->filename[it_image] = dirptr->filename_buf + it_image*OPJ_PATH_LEN;",
          "1223:    }",
          "1226:    destroy_parameters(&parameters);",
          "1227:    return EXIT_FAILURE;",
          "1231:    destroy_parameters(&parameters);",
          "1232:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1215:   if(!dirptr){",
          "1216:    destroy_parameters(&parameters);",
          "1217:    return EXIT_FAILURE;",
          "1218:   }",
          "1220:   if(!dirptr->filename_buf){",
          "1221:    failed = 1; goto fin;",
          "1222:   }",
          "1224:   dirptr->filename = (char**) malloc((size_t)num_images*sizeof(char*));",
          "1226:   if(!dirptr->filename){",
          "1227:    failed = 1; goto fin;",
          "1228:   }",
          "1229:   for(it_image=0;it_image<num_images;it_image++){",
          "1230:    dirptr->filename[it_image] = dirptr->filename_buf + it_image*OPJ_PATH_LEN;",
          "1234:    failed = 1; goto fin;",
          "1238:    failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1254:   l_stream = opj_stream_create_default_file_stream(parameters.infile,1);",
          "1255:   if (!l_stream){",
          "1256:    fprintf(stderr, \"ERROR -> failed to create the stream from the file %s\\n\", parameters.infile);",
          "1259:   }",
          "",
          "[Removed Lines]",
          "1257:    destroy_parameters(&parameters);",
          "1258:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1263:    failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1298:   if ( !opj_setup_decoder(l_codec, &(parameters.core)) ){",
          "1299:    fprintf(stderr, \"ERROR -> opj_decompress: failed to setup the decoder\\n\");",
          "1301:    opj_stream_destroy(l_stream);",
          "1302:    opj_destroy_codec(l_codec);",
          "1304:   }",
          "1308:   if(! opj_read_header(l_stream, l_codec, &image)){",
          "1309:    fprintf(stderr, \"ERROR -> opj_decompress: failed to read the header\\n\");",
          "1311:    opj_stream_destroy(l_stream);",
          "1312:    opj_destroy_codec(l_codec);",
          "1313:    opj_image_destroy(image);",
          "1315:   }",
          "1317:   if (!parameters.nb_tile_to_decode) {",
          "",
          "[Removed Lines]",
          "1300:    destroy_parameters(&parameters);",
          "1303:    return EXIT_FAILURE;",
          "1310:    destroy_parameters(&parameters);",
          "1314:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1307:    failed = 1; goto fin;",
          "1317:    failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1319:    if (!opj_set_decode_area(l_codec, image, (OPJ_INT32)parameters.DA_x0,",
          "1320:      (OPJ_INT32)parameters.DA_y0, (OPJ_INT32)parameters.DA_x1, (OPJ_INT32)parameters.DA_y1)){",
          "1321:     fprintf(stderr, \"ERROR -> opj_decompress: failed to set the decoded area\\n\");",
          "1323:     opj_stream_destroy(l_stream);",
          "1324:     opj_destroy_codec(l_codec);",
          "1325:     opj_image_destroy(image);",
          "1327:    }",
          "1330:    if (!(opj_decode(l_codec, l_stream, image) && opj_end_decompress(l_codec, l_stream))) {",
          "1331:     fprintf(stderr,\"ERROR -> opj_decompress: failed to decode image!\\n\");",
          "1333:     opj_destroy_codec(l_codec);",
          "1334:     opj_stream_destroy(l_stream);",
          "1335:     opj_image_destroy(image);",
          "1337:    }",
          "1338:   }",
          "1339:   else {",
          "",
          "[Removed Lines]",
          "1322:     destroy_parameters(&parameters);",
          "1326:     return EXIT_FAILURE;",
          "1332:     destroy_parameters(&parameters);",
          "1336:     return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1328:     failed = 1; goto fin;",
          "1337:     failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1344:     opj_destroy_codec(l_codec);",
          "1345:     opj_stream_destroy(l_stream);",
          "1346:     opj_image_destroy(image);",
          "1350:    if (!opj_get_decoded_tile(l_codec, l_stream, image, parameters.tile_index)) {",
          "1351:     fprintf(stderr, \"ERROR -> opj_decompress: failed to decode tile!\\n\");",
          "1353:     opj_destroy_codec(l_codec);",
          "1354:     opj_stream_destroy(l_stream);",
          "1355:     opj_image_destroy(image);",
          "1357:    }",
          "1358:    fprintf(stdout, \"tile %d is decoded!\\n\\n\", parameters.tile_index);",
          "1359:   }",
          "",
          "[Removed Lines]",
          "1347:     return EXIT_FAILURE;",
          "1352:     destroy_parameters(&parameters);",
          "1356:     return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1348:     failed = 1; goto fin;",
          "1356:     failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1432:    image = upsample_image_components(image);",
          "1433:    if (image == NULL) {",
          "1434:     fprintf(stderr, \"ERROR -> opj_decompress: failed to upsample image components!\\n\");",
          "1436:     opj_destroy_codec(l_codec);",
          "1438:    }",
          "1439:   }",
          "",
          "[Removed Lines]",
          "1435:     destroy_parameters(&parameters);",
          "1437:     return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1436:     failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1456:    }",
          "1457:    if (image == NULL) {",
          "1458:     fprintf(stderr, \"ERROR -> opj_decompress: failed to convert to RGB image!\\n\");",
          "1460:     opj_destroy_codec(l_codec);",
          "1462:    }",
          "1463:   }",
          "",
          "[Removed Lines]",
          "1459:     destroy_parameters(&parameters);",
          "1461:     return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "1459:     failed = 1; goto fin;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1569:  }",
          "1570:  destroy_parameters(&parameters);",
          "1571:  if (numDecompressedImages) {",
          "1572:   fprintf(stdout, \"decode time: %d ms\\n\", (int)( (tCumulative * 1000.0) / (OPJ_FLOAT64)numDecompressedImages));",
          "1573:  }",
          "1574:  return failed ? EXIT_FAILURE : EXIT_SUCCESS;",
          "1575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1568: fin:",
          "1570:  if(failed && img_fol.imgdirpath) free(img_fol.imgdirpath);",
          "1571:  if(dirptr){",
          "1572:   if(dirptr->filename) free(dirptr->filename);",
          "1573:   if(dirptr->filename_buf) free(dirptr->filename_buf);",
          "1574:   free(dirptr);",
          "1575:  }",
          "",
          "---------------"
        ],
        "src/bin/jp2/opj_dump.c||src/bin/jp2/opj_dump.c": [
          "File: src/bin/jp2/opj_dump.c -> src/bin/jp2/opj_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:    {",
          "343:     img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);",
          "344:     strcpy(img_fol->imgdirpath,opj_optarg);",
          "345:     img_fol->set_imgdir=1;",
          "346:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:     if(img_fol->imgdirpath == NULL){",
          "345:      return 1;",
          "346:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:  if(parse_cmdline_decoder(argc, argv, &parameters,&img_fol) == 1) {",
          "445:   return EXIT_FAILURE;",
          "446:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:   if(img_fol.imgdirpath) free(img_fol.imgdirpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:   num_images=get_num_images(img_fol.imgdirpath);",
          "453:   dirptr=(dircnt_t*)malloc(sizeof(dircnt_t));",
          "465:   }",
          "466:   if(load_images(dirptr,img_fol.imgdirpath)==1){",
          "468:   }",
          "470:   if (num_images==0){",
          "471:    fprintf(stdout,\"Folder is empty\\n\");",
          "473:   }",
          "474:  }else{",
          "475:   num_images=1;",
          "",
          "[Removed Lines]",
          "454:   if(dirptr){",
          "456:    dirptr->filename = (char**) malloc((size_t)num_images*sizeof(char*));",
          "458:    if(!dirptr->filename_buf){",
          "459:     return EXIT_FAILURE;",
          "460:    }",
          "462:    for(it_image=0;it_image<num_images;it_image++){",
          "463:     dirptr->filename[it_image] = dirptr->filename_buf + it_image*OPJ_PATH_LEN;",
          "464:    }",
          "467:    return EXIT_FAILURE;",
          "472:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "459:   if(!dirptr){",
          "460:    return EXIT_FAILURE;",
          "461:   }",
          "463:   if(!dirptr->filename_buf){",
          "464:    free(dirptr);",
          "465:    return EXIT_FAILURE;",
          "466:   }",
          "467:   dirptr->filename = (char**) malloc((size_t)num_images*sizeof(char*));",
          "469:   if(!dirptr->filename){",
          "470:    goto fails;",
          "471:   }",
          "473:   for(it_image=0;it_image<num_images;it_image++){",
          "474:    dirptr->filename[it_image] = dirptr->filename_buf + it_image*OPJ_PATH_LEN;",
          "478:    goto fails;",
          "483:    goto fails;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:   fout = fopen(parameters.outfile,\"w\");",
          "481:   if (!fout){",
          "482:    fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", parameters.outfile);",
          "484:   }",
          "485:  }",
          "486:  else",
          "",
          "[Removed Lines]",
          "483:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "494:    goto fails;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "504:   l_stream = opj_stream_create_default_file_stream(parameters.infile,1);",
          "505:   if (!l_stream){",
          "506:    fprintf(stderr, \"ERROR -> failed to create the stream from the file %s\\n\",parameters.infile);",
          "508:   }",
          "",
          "[Removed Lines]",
          "507:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "518:    goto fails;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "546:    opj_stream_destroy(l_stream);",
          "547:    opj_destroy_codec(l_codec);",
          "548:    fclose(fout);",
          "550:   }",
          "",
          "[Removed Lines]",
          "549:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "560:    goto fails;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "556:    opj_destroy_codec(l_codec);",
          "557:    opj_image_destroy(image);",
          "558:    fclose(fout);",
          "560:   }",
          "562:   opj_dump_codec(l_codec, img_fol.flag, fout );",
          "",
          "[Removed Lines]",
          "559:    return EXIT_FAILURE;",
          "",
          "[Added Lines]",
          "570:    goto fails;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "588:  fclose(fout);",
          "590:   return EXIT_SUCCESS;",
          "591: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: fails:",
          "604:  if(dirptr){",
          "605:   if(dirptr->filename) free(dirptr->filename);",
          "606:   if(dirptr->filename_buf) free(dirptr->filename_buf);",
          "607:   free(dirptr);",
          "608:  }",
          "609:  return EXIT_FAILURE;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/cidx_manager.c||src/lib/openjp2/cidx_manager.c": [
          "File: src/lib/openjp2/cidx_manager.c -> src/lib/openjp2/cidx_manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   lenp = -1;",
          "62:   box = (opj_jp2_box_t *)opj_calloc( 32, sizeof(opj_jp2_box_t));",
          "64:   for (i=0;i<2;i++){",
          "66:     if(i)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   if(box == NULL){",
          "64:  return 0;",
          "65:   }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/j2k.c||src/lib/openjp2/j2k.c": [
          "File: src/lib/openjp2/j2k.c -> src/lib/openjp2/j2k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2094:                         opj_event_msg(p_manager, EVT_ERROR,",
          "2095:                                 \"JPWL: bad image size (%d x %d)\\n\",",
          "2096:                                 l_image->x1, l_image->y1);",
          "2098:                                 opj_event_msg(p_manager, EVT_ERROR, \"JPWL: giving up\\n\");",
          "2099:                                 return OPJ_FALSE;",
          "2100:                         }",
          "",
          "[Removed Lines]",
          "2097:                         if (!JPWL_ASSUME || JPWL_ASSUME) {",
          "",
          "[Added Lines]",
          "2097:                         if (!JPWL_ASSUME) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2276:                 if (!l_cp->tcps) {",
          "2277:                         opj_event_msg(p_manager, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,",
          "2278:                                 \"JPWL: could not alloc tcps field of cp\\n\");",
          "2280:                                 opj_event_msg(p_manager, EVT_ERROR, \"JPWL: giving up\\n\");",
          "2281:                                 return OPJ_FALSE;",
          "2282:                         }",
          "",
          "[Removed Lines]",
          "2279:                         if (!JPWL_ASSUME || JPWL_ASSUME) {",
          "",
          "[Added Lines]",
          "2279:                         if (!JPWL_ASSUME) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2584:                 p_j2k->cstr_info->prog = l_tcp->prg;",
          "2585:                 p_j2k->cstr_info->numlayers = l_tcp->numlayers;",
          "2586:                 p_j2k->cstr_info->numdecompos = (OPJ_INT32*) opj_malloc(l_image->numcomps * sizeof(OPJ_UINT32));",
          "2587:                 for     (i = 0; i < l_image->numcomps; ++i) {",
          "2588:                         p_j2k->cstr_info->numdecompos[i] = l_tcp->tccps[i].numresolutions - 1;",
          "2589:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2587:     if(!p_j2k->cstr_info->numdecompos){",
          "2588:      return OPJ_FALSE;",
          "2589:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4627:                         opj_event_msg(p_manager, EVT_ERROR,",
          "4628:                                 \"JPWL: bad component number in RGN (%d when there are only %d)\\n\",",
          "4629:                                 l_comp_room, l_nb_comp);",
          "4631:                                 opj_event_msg(p_manager, EVT_ERROR, \"JPWL: giving up\\n\");",
          "4632:                                 return OPJ_FALSE;",
          "4633:                         }",
          "",
          "[Removed Lines]",
          "4630:                         if (!JPWL_ASSUME || JPWL_ASSUME) {",
          "",
          "[Added Lines]",
          "4633:                         if (!JPWL_ASSUME) {",
          "",
          "---------------"
        ],
        "src/lib/openjp2/jp2.c||src/lib/openjp2/jp2.c": [
          "File: src/lib/openjp2/jp2.c -> src/lib/openjp2/jp2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "646: {",
          "647:  OPJ_UINT32 i;",
          "650:  OPJ_BYTE * l_bpcc_data,* l_current_bpcc_ptr;",
          "653:  assert(jp2 != 00);",
          "654:  assert(p_nb_bytes_written != 00);",
          "656:  l_bpcc_data = (OPJ_BYTE *) opj_calloc(1,l_bpcc_size);",
          "657:  if (l_bpcc_data == 00) {",
          "",
          "[Removed Lines]",
          "649:  OPJ_UINT32 l_bpcc_size = 8 + jp2->numcomps;",
          "",
          "[Added Lines]",
          "649:  OPJ_UINT32 l_bpcc_size;",
          "655:  l_bpcc_size = 8 + jp2->numcomps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1404:    OPJ_UINT32 rl, ol, ra, oa, rb, ob, il;",
          "1406:    cielab = (OPJ_UINT32*)opj_malloc(9 * sizeof(OPJ_UINT32));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1408:    if(cielab == NULL){",
          "1409:     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for cielab\\n\");",
          "1410:     return OPJ_FALSE;",
          "1411:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1639:        opj_event_mgr_t * p_manager )",
          "1640: {",
          "1641:  OPJ_UINT32 i;",
          "1643:  OPJ_BYTE * l_ftyp_data, * l_current_data_ptr;",
          "1644:  OPJ_BOOL l_result;",
          "",
          "[Removed Lines]",
          "1642:  OPJ_UINT32 l_ftyp_size = 16 + 4 * jp2->numcl;",
          "",
          "[Added Lines]",
          "1647:  OPJ_UINT32 l_ftyp_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1647:  assert(cio != 00);",
          "1648:  assert(jp2 != 00);",
          "1649:  assert(p_manager != 00);",
          "1651:  l_ftyp_data = (OPJ_BYTE *) opj_calloc(1,l_ftyp_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1655:  l_ftyp_size = 16 + 4 * jp2->numcl;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/phix_manager.c||src/lib/openjp2/phix_manager.c": [
          "File: src/lib/openjp2/phix_manager.c -> src/lib/openjp2/phix_manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   OPJ_OFF_T lenp = 0;",
          "59:   box = (opj_jp2_box_t *)opj_calloc( (size_t)cstr_info.numcomps, sizeof(opj_jp2_box_t));",
          "61:   for( i=0;i<2;i++){",
          "62:     if (i)",
          "63:       opj_stream_seek( cio, lenp, p_manager);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   if(box == NULL){",
          "61:   return 0;",
          "62:   }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/ppix_manager.c||src/lib/openjp2/ppix_manager.c": [
          "File: src/lib/openjp2/ppix_manager.c -> src/lib/openjp2/ppix_manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   lenp = -1;",
          "63:   box = (opj_jp2_box_t *)opj_calloc( (size_t)cstr_info.numcomps, sizeof(opj_jp2_box_t));",
          "65:   for (i=0;i<2;i++){",
          "66:     if (i)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   if(box == NULL){",
          "65:  return 0;",
          "66:   }",
          "",
          "---------------"
        ],
        "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c": [
          "File: src/lib/openjp2/t1.c -> src/lib/openjp2/t1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:  flag = vsc ? (OPJ_UINT32)((*flagsp) & (~(T1_SIG_S | T1_SIG_SE | T1_SIG_SW | T1_SGN_S))) : (OPJ_UINT32)(*flagsp);",
          "383:  if ((flag & T1_SIG_OTH) && !(flag & (T1_SIG | T1_VISIT))) {",
          "387:    opj_mqc_bypass_enc(mqc, (OPJ_UINT32)v);",
          "",
          "[Removed Lines]",
          "384:   v = opj_int_abs(*datap) & one ? 1 : 0;",
          "",
          "[Added Lines]",
          "384:   v = (opj_int_abs(*datap) & one) ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:  flag = vsc ? (OPJ_UINT32)((*flagsp) & (~(T1_SIG_S | T1_SIG_SE | T1_SIG_SW | T1_SGN_S))) : (OPJ_UINT32)(*flagsp);",
          "626:  if ((flag & (T1_SIG | T1_VISIT)) == T1_SIG) {",
          "631:    opj_mqc_bypass_enc(mqc, (OPJ_UINT32)v);",
          "",
          "[Removed Lines]",
          "628:   v = opj_int_abs(*datap) & one ? 1 : 0;",
          "",
          "[Added Lines]",
          "628:   v = (opj_int_abs(*datap) & one) ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:  }",
          "850:  if (!(*flagsp & (T1_SIG | T1_VISIT))) {",
          "851:   opj_mqc_setcurctx(mqc, opj_t1_getctxno_zc(flag, orient));",
          "853:   opj_mqc_encode(mqc, (OPJ_UINT32)v);",
          "854:   if (v) {",
          "855: LABEL_PARTIAL:",
          "",
          "[Removed Lines]",
          "852:   v = opj_int_abs(*datap) & one ? 1 : 0;",
          "",
          "[Added Lines]",
          "852:   v = (opj_int_abs(*datap) & one) ? 1 : 0;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/thix_manager.c||src/lib/openjp2/thix_manager.c": [
          "File: src/lib/openjp2/thix_manager.c -> src/lib/openjp2/thix_manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   lenp = 0;",
          "51:   box = (opj_jp2_box_t *)opj_calloc( (size_t)(cstr_info.tw*cstr_info.th), sizeof(opj_jp2_box_t));",
          "53:   for ( i = 0; i < 2 ; i++ ){",
          "54:     if (i)",
          "55:       opj_stream_seek( cio, lenp, p_manager);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   if(box == NULL){",
          "53:  return 0;",
          "54:   }",
          "",
          "---------------"
        ],
        "tests/test_tile_encoder.c||tests/test_tile_encoder.c": [
          "File: tests/test_tile_encoder.c -> tests/test_tile_encoder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:  l_data_size = (OPJ_UINT32)tile_width * (OPJ_UINT32)tile_height * (OPJ_UINT32)num_comps * (OPJ_UINT32)(comp_prec/8);",
          "131:  l_data = (OPJ_BYTE*) malloc(l_data_size * sizeof(OPJ_BYTE));",
          "133:  fprintf(stdout, \"Encoding random values -> keep in mind that this is very hard to compress\\n\");",
          "134:  for (i=0;i<l_data_size;++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:  if(l_data == NULL){",
          "133:   return 1;",
          "134:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:     l_codec = opj_create_compress(OPJ_CODEC_J2K);",
          "237:     }",
          "238:  if (!l_codec) {",
          "239:   return 1;",
          "240:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:   free(l_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:  l_image = opj_image_tile_create(num_comps,l_params,OPJ_CLRSPC_SRGB);",
          "248:  if (! l_image) {",
          "249:   opj_destroy_codec(l_codec);",
          "250:   return 1;",
          "251:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   free(l_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:   fprintf(stderr, \"ERROR -> test_tile_encoder: failed to setup the codec!\\n\");",
          "261:   opj_destroy_codec(l_codec);",
          "262:   opj_image_destroy(l_image);",
          "263:   return 1;",
          "264:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:   free(l_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:   fprintf(stderr, \"ERROR -> test_tile_encoder: failed to create the stream from the output file %s !\\n\",output_file );",
          "269:   opj_destroy_codec(l_codec);",
          "270:   opj_image_destroy(l_image);",
          "271:   return 1;",
          "272:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   free(l_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:         opj_stream_destroy(l_stream);",
          "277:   opj_destroy_codec(l_codec);",
          "278:   opj_image_destroy(l_image);",
          "279:   return 1;",
          "280:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:   free(l_data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:             opj_stream_destroy(l_stream);",
          "286:    opj_destroy_codec(l_codec);",
          "287:    opj_image_destroy(l_image);",
          "288:    return 1;",
          "289:   }",
          "290:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:    free(l_data);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:         opj_stream_destroy(l_stream);",
          "295:   opj_destroy_codec(l_codec);",
          "296:   opj_image_destroy(l_image);",
          "297:   return 1;",
          "298:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:   free(l_data);",
          "",
          "---------------"
        ]
      }
    }
  ]
}