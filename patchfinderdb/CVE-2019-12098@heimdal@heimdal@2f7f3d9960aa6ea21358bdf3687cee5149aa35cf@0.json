{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38c797e1ae9b9c8f99ae4aa2e73957679031fd2b",
      "candidate_info": {
        "commit_hash": "38c797e1ae9b9c8f99ae4aa2e73957679031fd2b",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/38c797e1ae9b9c8f99ae4aa2e73957679031fd2b",
        "files": [
          "lib/krb5/init_creds_pw.c",
          "lib/krb5/krb5_locl.h",
          "lib/krb5/pkinit.c"
        ],
        "message": "krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>",
        "before_after_code_files": [
          "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
          "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
          "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ],
          "candidate": [
            "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
          "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2280:            &ctx->req_buffer,",
          "2281:            NULL,",
          "2282:            NULL);",
          "2283:      if (ret == 0)",
          "2284:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2283:      if (ret == 0 && ctx->pk_init_ctx) {",
          "2284:   PA_DATA *pa_pkinit_kx;",
          "2285:   int idx = 0;",
          "2287:   pa_pkinit_kx =",
          "2288:       krb5_find_padata(rep.kdc_rep.padata->val,",
          "2289:          rep.kdc_rep.padata->len,",
          "2290:          KRB5_PADATA_PKINIT_KX,",
          "2291:          &idx);",
          "2293:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
          "2294:        ctx->fast_state.reply_key,",
          "2295:        &ctx->cred.session,",
          "2296:        pa_pkinit_kx);",
          "2297:   if (ret)",
          "2298:       krb5_set_error_message(context, ret,",
          "2299:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
          "2300:   else if (pa_pkinit_kx != NULL)",
          "2301:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
          "2302:      }",
          "",
          "---------------"
        ],
        "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
          "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: #define KRB5_INIT_CREDS_CANONICALIZE  1",
          "214: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
          "215: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
          "216:     struct {",
          "217:         krb5_gic_process_last_req func;",
          "218:         void *ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
          "",
          "---------------"
        ],
        "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
          "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1220:     return ret;",
          "1221: }",
          "1223: static krb5_error_code",
          "1224: pk_rd_pa_reply_dh(krb5_context context,",
          "1225:     const heim_octet_string *indata,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
          "1231: _krb5_pk_kx_confirm(krb5_context context,",
          "1232:       krb5_pk_init_ctx ctx,",
          "1233:       krb5_keyblock *reply_key,",
          "1234:       krb5_keyblock *session_key,",
          "1235:       PA_DATA *pa_pkinit_kx)",
          "1236: {",
          "1237:     krb5_error_code ret;",
          "1238:     EncryptedData ed;",
          "1239:     krb5_keyblock ck, sk_verify;",
          "1240:     krb5_crypto ck_crypto = NULL;",
          "1241:     krb5_crypto rk_crypto = NULL;",
          "1242:     size_t len;",
          "1243:     krb5_data data;",
          "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
          "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
          "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
          "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
          "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
          "1252:     if (pa_pkinit_kx == NULL)",
          "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
          "1255:     memset(&ed, 0, sizeof(ed));",
          "1256:     krb5_keyblock_zero(&ck);",
          "1257:     krb5_keyblock_zero(&sk_verify);",
          "1258:     krb5_data_zero(&data);",
          "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
          "1261:           pa_pkinit_kx->padata_value.length,",
          "1262:           &ed, &len);",
          "1263:     if (ret)",
          "1264:  goto out;",
          "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
          "1267:  ret = KRB5_KDCREP_MODIFIED;",
          "1268:  goto out;",
          "1269:     }",
          "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
          "1272:     if (ret)",
          "1273:  goto out;",
          "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
          "1276:          KRB5_KU_PA_PKINIT_KX,",
          "1277:          &ed, &data);",
          "1278:     if (ret)",
          "1279:  goto out;",
          "1281:     ret = decode_EncryptionKey(data.data, data.length,",
          "1282:           &ck, &len);",
          "1283:     if (ret)",
          "1284:  goto out;",
          "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
          "1287:     if (ret)",
          "1288:  goto out;",
          "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
          "1291:         &p1, &p2, session_key->keytype,",
          "1292:         &sk_verify);",
          "1293:     if (ret)",
          "1294:  goto out;",
          "1296:     if (sk_verify.keytype != session_key->keytype ||",
          "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
          "1298:  ret = KRB5_KDCREP_MODIFIED;",
          "1299:  goto out;",
          "1300:     }",
          "1302: out:",
          "1303:     free_EncryptedData(&ed);",
          "1304:     krb5_free_keyblock_contents(context, &ck);",
          "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
          "1306:     if (ck_crypto)",
          "1307:  krb5_crypto_destroy(context, ck_crypto);",
          "1308:     if (rk_crypto)",
          "1309:  krb5_crypto_destroy(context, rk_crypto);",
          "1310:     krb5_data_free(&data);",
          "1312:     return ret;",
          "1313: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "583b1561739c408e2349f25afcfc9bd6fd89d561",
      "candidate_info": {
        "commit_hash": "583b1561739c408e2349f25afcfc9bd6fd89d561",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/583b1561739c408e2349f25afcfc9bd6fd89d561",
        "files": [
          "kuser/kinit.c"
        ],
        "message": "kinit: don't leave dangling temporary ccaches\n\nkinit does not destroy ccaches created with krb5_cc_new_unique() if ticket\nacquisition fails. This was leaving dangling keyring entries with the keyring\nccache.\n\n(cherry picked from commit 2e1304b9d55d24a3846f4dc9c794d0c197af4438)",
        "before_after_code_files": [
          "kuser/kinit.c||kuser/kinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: out:",
          "385:     if (tempccache)",
          "387:     if (out)",
          "388:  krb5_free_creds(context, out);",
          "389:     krb5_free_cred_contents(context, &in);",
          "",
          "[Removed Lines]",
          "386:  krb5_cc_close(context, tempccache);",
          "",
          "[Added Lines]",
          "386:  krb5_cc_destroy(context, tempccache);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:     if (ctx)",
          "780:  krb5_init_creds_free(context, ctx);",
          "781:     if (tempccache)",
          "784:     if (enctype)",
          "785:  free(enctype);",
          "",
          "[Removed Lines]",
          "782:  krb5_cc_close(context, tempccache);",
          "",
          "[Added Lines]",
          "782:  krb5_cc_destroy(context, tempccache);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1222: #ifdef HAVE_SIGACTION",
          "1223:     struct sigaction sa;",
          "1224: #endif",
          "1226:     setprogname(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1225:     krb5_boolean unique_ccache = FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1311:        krb5_cc_get_type(context, ccache),",
          "1312:        krb5_cc_get_name(context, ccache));",
          "1313:      setenv(\"KRB5CCNAME\", s, 1);",
          "1314:  } else {",
          "1315:      ret = krb5_cc_cache_match(context, principal, &ccache);",
          "1316:      if (ret) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1315:      unique_ccache = TRUE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1330:       krb5_cc_close(context, ccache);",
          "1331:       ret = get_switched_ccache(context, type, principal,",
          "1332:            &ccache);",
          "1333:   }",
          "1334:      }",
          "1335:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:       if (ret == 0)",
          "1336:    unique_ccache = TRUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1378:      krb5_afslog(context, ccache, NULL, NULL);",
          "1379: #endif",
          "1381:  exit(ret != 0);",
          "1382:     }",
          "1384:     ret = get_new_tickets(context, principal, ccache, ticket_life, 1);",
          "1386:  exit(1);",
          "1388: #ifndef NO_AFS",
          "1389:     if (ret == 0 && server_str == NULL && do_afslog && k_hasafs())",
          "",
          "[Removed Lines]",
          "1385:     if (ret)",
          "",
          "[Added Lines]",
          "1385:  if (unique_ccache)",
          "1386:      krb5_cc_destroy(context, ccache);",
          "1391:     if (ret) {",
          "1392:  if (unique_ccache)",
          "1393:      krb5_cc_destroy(context, ccache);",
          "1395:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2bcabb86c8ac0d7cbd69fb06c80d8b3856bf63e",
      "candidate_info": {
        "commit_hash": "c2bcabb86c8ac0d7cbd69fb06c80d8b3856bf63e",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/c2bcabb86c8ac0d7cbd69fb06c80d8b3856bf63e",
        "files": [
          "lib/hcrypto/evp-pkcs11.c"
        ],
        "message": "hcrypto PKCS#11 backend: don't leak sessions on digest reinit\n\nClients of the EVP API can reinitialize message digest contexts\nwithout destroying them. The PKCS#11 backend assumed they were\nonly used once, and was leaking session handles upon reinitialization.\nThis fix disposes of any existing PKCS#11 message digest context\nin the initialization method.\n\n(cherry picked from commit 9518f2965b4d0daef0eda733c31c6c26ccae20a4)",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:     return 1;",
          "365: }",
          "367: static int",
          "368: p11_md_hash_init(CK_MECHANISM_TYPE mechanismType, EVP_MD_CTX *ctx)",
          "369: {",
          "370:     struct pkcs11_md_ctx *p11ctx = (struct pkcs11_md_ctx *)ctx;",
          "371:     CK_RV rv;",
          "373:     rv = p11_session_init(mechanismType, &p11ctx->hSession);",
          "374:     if (rv == CKR_OK) {",
          "375:         CK_MECHANISM mechanism = { mechanismType, NULL, 0 };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367: static int",
          "368: p11_md_cleanup(EVP_MD_CTX *ctx);",
          "376:     if (p11ctx->hSession != CK_INVALID_HANDLE)",
          "377:         p11_md_cleanup(ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc81aa0f966b4f1e2853e9af1e90eaf990cf42ae",
      "candidate_info": {
        "commit_hash": "dc81aa0f966b4f1e2853e9af1e90eaf990cf42ae",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/dc81aa0f966b4f1e2853e9af1e90eaf990cf42ae",
        "files": [
          "kuser/kinit.c"
        ],
        "message": "kuser: plug leak in kinit anonymous PKINIT renew\n\nDo not leak the result of krb5_cc_get_config() when determining anonymous\nPKINIT start realm.\n\n(cherry picked from commit 3138c1836c770621347ef0f9a16e5ffb87d464b3)",
        "before_after_code_files": [
          "kuser/kinit.c||kuser/kinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:     char *realm;",
          "291:     ret = krb5_cc_get_config(context, ccache, NULL, \"anon-pkinit-realm\", &data);",
          "297:  realm = get_default_realm(context);",
          "299:     ret = krb5_make_principal(context, tgs_name, realm,",
          "300:          KRB5_TGS_NAME, realm, NULL);",
          "301:     free(realm);",
          "303:     return ret;",
          "",
          "[Removed Lines]",
          "292:     if (ret == 0) {",
          "293:  realm = malloc(data.length + 1);",
          "294:  memcpy(realm, data.data, data.length);",
          "295:  realm[data.length] = '\\0';",
          "296:     } else",
          "",
          "[Added Lines]",
          "292:     if (ret == 0)",
          "293:  realm = strndup(data.data, data.length);",
          "294:     else",
          "297:     krb5_data_free(&data);",
          "299:     if (realm == NULL)",
          "300:  return krb5_enomem(context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "360351529c275f307c1dc41aca40bc2e76a2fa55",
      "candidate_info": {
        "commit_hash": "360351529c275f307c1dc41aca40bc2e76a2fa55",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/360351529c275f307c1dc41aca40bc2e76a2fa55",
        "files": [
          "lib/kadm5/ipropd_master.c"
        ],
        "message": "ipropd-master: use async I/O\n\nIf a slave is slow to consume what the master sends it, the master can\nblock and all iprop operations with it.\n\nWith minimal effort we make the master async oriented.",
        "before_after_code_files": [
          "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c": [
          "File: lib/kadm5/ipropd_master.c -> lib/kadm5/ipropd_master.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: #define SLAVE_F_DEAD 0x1",
          "135: #define SLAVE_F_AYT 0x2",
          "136: #define SLAVE_F_READY   0x4",
          "137:     struct slave *next;",
          "138: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     struct {",
          "147:         uint8_t         header_buf[4];",
          "148:         krb5_data       header;",
          "149:         krb5_data       packet;",
          "150:         size_t          packet_off;",
          "152:         krb5_storage    *dump;",
          "153:         uint32_t        vno;",
          "154:     } tail;",
          "155:     struct {",
          "156:         uint8_t         header_buf[4];",
          "157:         krb5_data       packet;",
          "158:         size_t          offset;",
          "159:         int             hlen;",
          "160:     } input;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:     if (s->ac)",
          "223:  krb5_auth_con_free (context, s->ac);",
          "225:     for (p = root; *p; p = &(*p)->next)",
          "226:  if (*p == s) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     krb5_data_free(&s->input.packet);",
          "251:     krb5_data_free(&s->tail.packet);",
          "252:     krb5_storage_free(s->tail.dump);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:     krb5_ticket *ticket = NULL;",
          "242:     char hostname[128];",
          "245:     if (s == NULL) {",
          "246:  krb5_warnx (context, \"add_slave: no memory\");",
          "247:  return;",
          "248:     }",
          "249:     s->name = NULL;",
          "250:     s->ac = NULL;",
          "252:     addr_len = sizeof(s->addr);",
          "253:     s->fd = accept (fd, (struct sockaddr *)&s->addr, &addr_len);",
          "",
          "[Removed Lines]",
          "244:     s = malloc(sizeof(*s));",
          "",
          "[Added Lines]",
          "273:     s = calloc(1, sizeof(*s));",
          "280:     s->input.packet.data = NULL;",
          "281:     s->tail.header.data = NULL;",
          "282:     s->tail.packet.data = NULL;",
          "283:     s->tail.dump = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:     ret = krb5_recvauth (context, &s->ac, &s->fd,",
          "271:     IPROP_VERSION, server, 0, keytab, &ticket);",
          "272:     krb5_free_principal (context, server);",
          "273:     if (ret) {",
          "274:  krb5_warn (context, ret, \"krb5_recvauth\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:     socket_set_nonblocking(s->fd, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454:     return ret;",
          "455: }",
          "457: static int",
          "458: send_complete (krb5_context context, slave *s, const char *database,",
          "459:         uint32_t current_version, uint32_t oldest_version,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506: static int",
          "507: mk_priv_tail(krb5_context context, slave *s, krb5_data *data)",
          "508: {",
          "509:     uint32_t len;",
          "510:     int ret;",
          "512:     ret = krb5_mk_priv(context, s->ac, data, &s->tail.packet, NULL);",
          "513:     if (ret)",
          "514:         return ret;",
          "516:     len = s->tail.packet.length;",
          "517:     _krb5_put_int(s->tail.header_buf, len, sizeof(s->tail.header_buf));",
          "518:     s->tail.header.length = sizeof(s->tail.header_buf);",
          "519:     s->tail.header.data = s->tail.header_buf;",
          "520:     return 0;",
          "521: }",
          "523: static int",
          "524: have_tail(slave *s)",
          "525: {",
          "526:     return s->tail.header.length || s->tail.packet.length || s->tail.dump;",
          "527: }",
          "529: #define SEND_COMPLETE_MAX_RECORDS 50",
          "531: static int",
          "532: send_tail(krb5_context context, slave *s)",
          "533: {",
          "534:     krb5_data data;",
          "535:     ssize_t bytes = 0;",
          "536:     size_t rem = 0;",
          "537:     size_t n;",
          "538:     int ret;",
          "540:     if (! have_tail(s))",
          "541:         return 0;",
          "549:     for (n = 0; n < SEND_COMPLETE_MAX_RECORDS; n++) {",
          "550:         if (! have_tail(s))",
          "551:             return 0;",
          "553:         if (s->tail.header.length) {",
          "554:             bytes = krb5_net_write(context, &s->fd,",
          "555:                                    s->tail.header.data,",
          "556:                                    s->tail.header.length);",
          "557:             if (bytes < 0)",
          "558:                 goto err;",
          "560:             s->tail.header.length -= bytes;",
          "561:             s->tail.header.data = (char *)s->tail.header.data + bytes;",
          "562:             rem = s->tail.header.length;",
          "563:             if (rem)",
          "564:                 goto ewouldblock;",
          "565:         }",
          "567:         if (s->tail.packet.length) {",
          "568:             bytes = krb5_net_write(context, &s->fd,",
          "569:                                    (char *)s->tail.packet.data + s->tail.packet_off,",
          "570:                                    s->tail.packet.length - s->tail.packet_off);",
          "571:             if (bytes < 0)",
          "572:                 goto err;",
          "573:             s->tail.packet_off += bytes;",
          "574:             if (bytes)",
          "575:                 slave_seen(s);",
          "576:             rem = s->tail.packet.length - s->tail.packet_off;",
          "577:             if (rem)",
          "578:                 goto ewouldblock;",
          "580:             krb5_data_free(&s->tail.packet);",
          "581:             s->tail.packet_off = 0;",
          "582:         }",
          "584:         if (s->tail.dump == NULL)",
          "585:             return 0;",
          "591:         ret = krb5_ret_data(s->tail.dump, &data);",
          "592:         if (ret == HEIM_ERR_EOF) {",
          "593:             krb5_storage_free(s->tail.dump);",
          "594:             s->tail.dump = NULL;",
          "595:             s->version = s->tail.vno;",
          "596:             return 0;",
          "597:         }",
          "599:         if (ret) {",
          "600:             krb5_warn(context, ret, \"failed to read entry from dump!\");",
          "601:         } else {",
          "602:             ret = mk_priv_tail(context, s, &data);",
          "603:             krb5_data_free(&data);",
          "604:             if (ret == 0)",
          "605:                 continue;",
          "606:             krb5_warn(context, ret, \"failed to make and send a KRB-PRIV to %s\",",
          "607:                       s->name);",
          "608:         }",
          "610:         slave_dead(context, s);",
          "611:         return ret;",
          "612:     }",
          "614:     if (ret == 0 && s->tail.dump != NULL)",
          "615:         return EWOULDBLOCK;",
          "617: err:",
          "618:     if (errno != EAGAIN && errno != EWOULDBLOCK) {",
          "619:         krb5_warn(context, ret = errno,",
          "620:                   \"error sending diffs to now-dead slave %s\", s->name);",
          "621:         slave_dead(context, s);",
          "622:         return ret;",
          "623:     }",
          "625: ewouldblock:",
          "626:     if (verbose)",
          "627:         krb5_warnx(context, \"would block writing %llu bytes to slave %s\",",
          "628:                    (unsigned long long)rem, s->name);",
          "629:     return EWOULDBLOCK;",
          "630: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "462:     krb5_error_code ret;",
          "463:     krb5_storage *dump = NULL;",
          "464:     uint32_t vno = 0;",
          "466:     int fd = -1;",
          "467:     struct stat st;",
          "468:     char *dfn;",
          "",
          "[Removed Lines]",
          "465:     krb5_data data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "616: done:",
          "621:     if (fd != -1)",
          "622:  close(fd);",
          "623:     if (dump)",
          "",
          "[Removed Lines]",
          "593:     for (;;) {",
          "594:  ret = krb5_ret_data(dump, &data);",
          "595:  if (ret == HEIM_ERR_EOF) {",
          "597:      goto done;",
          "598:  }",
          "600:  if (ret) {",
          "601:      krb5_warn(context, ret, \"krb5_ret_data(dump, &data)\");",
          "602:      slave_dead(context, s);",
          "603:      goto done;",
          "604:  }",
          "606:  ret = krb5_write_priv_message(context, s->ac, &s->fd, &data);",
          "607:  krb5_data_free(&data);",
          "609:  if (ret) {",
          "610:      krb5_warn (context, ret, \"krb5_write_priv_message\");",
          "611:      slave_dead(context, s);",
          "612:      goto done;",
          "613:  }",
          "614:     }",
          "617:     if (!ret) {",
          "618:  s->version = vno;",
          "619:  slave_seen(s);",
          "620:     }",
          "",
          "[Added Lines]",
          "768:     s->tail.dump = dump;",
          "769:     s->tail.vno = vno;",
          "770:     dump = NULL;",
          "771:     ret = send_tail(context, s);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "636:     if (s->flags & (SLAVE_F_DEAD|SLAVE_F_AYT))",
          "637:  return 0;",
          "639:     krb5_warnx(context, \"slave %s missing, sending AYT\", s->name);",
          "641:     s->flags |= SLAVE_F_AYT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:     ret = send_tail(context, s);",
          "797:     if (ret)",
          "798:         return ret;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "647:     if (sp == NULL) {",
          "648:  krb5_warnx (context, \"are_you_there: krb5_data_alloc\");",
          "649:  slave_dead(context, s);",
          "651:     }",
          "652:     ret = krb5_store_uint32(sp, ARE_YOU_THERE);",
          "653:     krb5_storage_free (sp);",
          "663:     }",
          "666: }",
          "668: static int",
          "",
          "[Removed Lines]",
          "650:  return 1;",
          "655:     if (ret == 0) {",
          "656:         ret = krb5_write_priv_message(context, s->ac, &s->fd, &data);",
          "658:         if (ret) {",
          "659:             krb5_warn(context, ret, \"are_you_there: krb5_write_priv_message\");",
          "660:             slave_dead(context, s);",
          "661:             return 1;",
          "662:         }",
          "665:     return 0;",
          "",
          "[Added Lines]",
          "811:  return ENOMEM;",
          "816:     if (ret == 0)",
          "817:         ret = mk_priv_tail(context, s, &data);",
          "818:     if (ret == 0)",
          "819:         ret = send_tail(context, s);",
          "820:     if (ret && ret != EWOULDBLOCK) {",
          "821:         krb5_warn(context, ret, \"are_you_there\");",
          "822:         slave_dead(context, s);",
          "824:     return ret;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "693:         return 0;",
          "694:     }",
          "700:  if (sp == NULL)",
          "701:      krb5_errx(context, IPROPD_RESTART, \"krb5_storage_from_mem\");",
          "702:  ret = krb5_store_uint32(sp, YOU_HAVE_LAST_VERSION);",
          "703:  krb5_storage_free(sp);",
          "715:  return ret;",
          "716:     }",
          "",
          "[Removed Lines]",
          "696:     if (s->version == current_version) {",
          "697:  char buf[4];",
          "699:  sp = krb5_storage_from_mem(buf, 4);",
          "704:  data.data   = buf;",
          "705:  data.length = 4;",
          "706:         if (ret == 0) {",
          "707:             ret = krb5_write_priv_message(context, s->ac, &s->fd, &data);",
          "708:             if (ret) {",
          "709:                 krb5_warn(context, ret, \"send_diffs: failed to send to slave\");",
          "710:                 slave_dead(context, s);",
          "711:             }",
          "712:             krb5_warnx(context, \"slave %s version %ld already sent\",",
          "713:                        s->name, (long)s->version);",
          "714:         }",
          "",
          "[Added Lines]",
          "859:     ret = send_tail(context, s);",
          "860:     if (ret)",
          "861:         return ret;",
          "863:     if (s->version == current_version) {",
          "864:         krb5_warnx(context, \"slave %s version %ld already sent\", s->name,",
          "865:                    (long)s->version);",
          "866:  sp = krb5_storage_emem();",
          "870:         if (ret == 0)",
          "871:             ret = krb5_storage_to_data(sp, &data);",
          "873:         if (ret == 0)",
          "874:             ret = mk_priv_tail(context, s, &data);",
          "875:         if (ret == 0)",
          "876:             ret = send_tail(context, s);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "859:     krb5_store_uint32 (sp, FOR_YOU);",
          "860:     krb5_storage_free(sp);",
          "863:     krb5_data_free(&data);",
          "867:  slave_dead(context, s);",
          "868:  return 1;",
          "869:     }",
          "",
          "[Removed Lines]",
          "862:     ret = krb5_write_priv_message(context, s->ac, &s->fd, &data);",
          "865:     if (ret) {",
          "866:  krb5_warn (context, ret, \"send_diffs: krb5_write_priv_message\");",
          "",
          "[Added Lines]",
          "1024:     ret = mk_priv_tail(context, s, &data);",
          "1026:     if (ret == 0)",
          "1027:         ret = send_tail(context, s);",
          "1029:     if (ret && ret != EWOULDBLOCK) {",
          "1030:  krb5_warn(context, ret, \"send_diffs: making or sending \"",
          "1031:                   \"KRB-PRIV message\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "876:     return 0;",
          "877: }",
          "879: static int",
          "880: process_msg (kadm5_server_context *server_context, slave *s, int log_fd,",
          "881:       const char *database, uint32_t current_version,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045: #define SLAVE_MSG_MAX 65536",
          "1047: static int",
          "1048: fill_input(krb5_context context, slave *s)",
          "1049: {",
          "1050:     krb5_error_code ret;",
          "1052:     if (s->input.hlen < 4) {",
          "1053:         uint8_t *buf = s->input.header_buf + s->input.hlen;",
          "1054:         size_t len = 4 - s->input.hlen;",
          "1055:         krb5_ssize_t bytes = krb5_net_read(context, &s->fd, buf, len);",
          "1057:         if (bytes == 0)",
          "1058:             return HEIM_ERR_EOF;",
          "1059:         if (bytes < 0) {",
          "1060:             if (errno == EWOULDBLOCK || errno == EAGAIN)",
          "1061:                 return EWOULDBLOCK;",
          "1062:             return errno ? errno : EIO;",
          "1063:         }",
          "1064:         s->input.hlen += bytes;",
          "1065:         if (bytes < len)",
          "1066:             return EWOULDBLOCK;",
          "1068:         buf = s->input.header_buf;",
          "1069:         len = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];",
          "1070:         if (len > SLAVE_MSG_MAX)",
          "1071:             return EINVAL;",
          "1072:         ret = krb5_data_alloc(&s->input.packet, len);",
          "1073:         if (ret != 0)",
          "1074:             return ret;",
          "1075:     }",
          "1077:     if (s->input.offset < s->input.packet.length) {",
          "1078:         u_char *buf = (u_char *)s->input.packet.data + s->input.offset;",
          "1079:         size_t len = s->input.packet.length - s->input.offset;",
          "1080:         krb5_ssize_t bytes = krb5_net_read(context, &s->fd, buf, len);",
          "1082:         if (bytes == 0)",
          "1083:             return HEIM_ERR_EOF;",
          "1084:         if (bytes < 0) {",
          "1085:             if (errno == EWOULDBLOCK || errno == EAGAIN)",
          "1086:                 return EWOULDBLOCK;",
          "1087:             return errno ? errno : EIO;",
          "1088:         }",
          "1089:         s->input.offset += bytes;",
          "1090:         if (bytes != len)",
          "1091:             return EWOULDBLOCK;",
          "1092:     }",
          "1093:     return 0;",
          "1094: }",
          "1096: static int",
          "1097: read_msg(krb5_context context, slave *s, krb5_data *out)",
          "1098: {",
          "1099:     int ret = fill_input(context, s);",
          "1101:     if (ret != 0)",
          "1102:  return ret;",
          "1104:     ret = krb5_rd_priv(context, s->ac, &s->input.packet, out, NULL);",
          "1107:     krb5_data_free(&s->input.packet);",
          "1108:     s->input.offset = 0;",
          "1109:     s->input.hlen = 0;",
          "1111:     return ret;",
          "1112: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "887:     krb5_storage *sp;",
          "888:     uint32_t tmp;",
          "894:     }",
          "896:     sp = krb5_storage_from_mem(out.data, out.length);",
          "",
          "[Removed Lines]",
          "890:     ret = krb5_read_priv_message(context, s->ac, &s->fd, &out);",
          "891:     if(ret) {",
          "892:  krb5_warn(context, ret, \"error reading message from %s\", s->name);",
          "893:  return 1;",
          "",
          "[Added Lines]",
          "1125:     ret = read_msg(context, s, &out);",
          "1126:     if (ret) {",
          "1127:         if (ret != EWOULDBLOCK)",
          "1128:             krb5_warn(context, ret, \"error reading message from %s\", s->name);",
          "1129:  return ret;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "931:   krb5_warnx(context, \"Slave %s (version %u) has later version \"",
          "932:       \"than the master (version %u) OUT OF SYNC\",",
          "933:       s->name, tmp, current_version);",
          "934:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1175:                 tmp = 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1241:     while (exit_flag == 0){",
          "1242:  slave *p;",
          "1244:  int max_fd = 0;",
          "1245:  struct timeval to = {30, 0};",
          "1246:  uint32_t vers;",
          "",
          "[Removed Lines]",
          "1243:  fd_set readset;",
          "",
          "[Added Lines]",
          "1485:  fd_set readset, writeset;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1253: #endif",
          "1255:  FD_ZERO(&readset);",
          "1256:  FD_SET(signal_fd, &readset);",
          "1257:  max_fd = max(max_fd, signal_fd);",
          "1258:  FD_SET(listen_fd, &readset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1498:  FD_ZERO(&writeset);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1266:      if (p->flags & SLAVE_F_DEAD)",
          "1267:   continue;",
          "1268:      FD_SET(p->fd, &readset);",
          "1269:      max_fd = max(max_fd, p->fd);",
          "1270:  }",
          "1274:  if (ret < 0) {",
          "1275:      if (errno == EINTR)",
          "1276:   continue;",
          "",
          "[Removed Lines]",
          "1272:  ret = select (max_fd + 1,",
          "1273:         &readset, NULL, NULL, &to);",
          "",
          "[Added Lines]",
          "1512:             if (have_tail(p))",
          "1513:                 FD_SET(p->fd, &writeset);",
          "1517:  ret = select(max_fd + 1, &readset, &writeset, NULL, &to);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1289:             log_fd = open(server_context->log_context.log_file, O_RDONLY, 0);",
          "1290:             if (log_fd < 0)",
          "1292:                           server_context->log_context.log_file);",
          "1294:             if (fstat(log_fd, &st) == -1)",
          "",
          "[Removed Lines]",
          "1291:                 krb5_err(context, 1, IPROPD_RESTART_SLOW, \"open %s\",",
          "",
          "[Added Lines]",
          "1535:                 krb5_err(context, IPROPD_RESTART_SLOW, errno, \"open %s\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1316:      flock(log_fd, LOCK_UN);",
          "1318:      if (current_version > old_version) {",
          "1323:   for (p = slaves; p != NULL; p = p->next) {",
          "1324:       if (p->flags & SLAVE_F_DEAD)",
          "1325:    continue;",
          "",
          "[Removed Lines]",
          "1319:   krb5_warnx(context,",
          "1320:       \"Missed a signal, updating slaves %lu to %lu\",",
          "1321:       (unsigned long)old_version,",
          "1322:       (unsigned long)current_version);",
          "",
          "[Added Lines]",
          "1563:                 if (verbose)",
          "1564:                     krb5_warnx(context,",
          "1565:                                \"Missed a signal, updating slaves %lu to %lu\",",
          "1566:                                (unsigned long)old_version,",
          "1567:                                (unsigned long)current_version);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1377:   for (p = slaves; p != NULL; p = p->next) {",
          "1378:       if (p->flags & SLAVE_F_DEAD)",
          "1379:    continue;",
          "",
          "[Removed Lines]",
          "1373:   krb5_warnx(context,",
          "1374:       \"Got a signal, updating slaves %lu to %lu\",",
          "1375:       (unsigned long)old_version,",
          "1376:       (unsigned long)current_version);",
          "",
          "[Added Lines]",
          "1618:                 if (verbose)",
          "1619:                     krb5_warnx(context,",
          "1620:                                \"Got a signal, updating slaves %lu to %lu\",",
          "1621:                                (unsigned long)old_version,",
          "1622:                                (unsigned long)current_version);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1381:                                 current_version, current_tstamp);",
          "1382:   }",
          "1383:      } else {",
          "1387:      }",
          "1388:         }",
          "1390:  for(p = slaves; p != NULL; p = p->next) {",
          "1391:      if (p->flags & SLAVE_F_DEAD)",
          "1392:          continue;",
          "1393:      if (ret && FD_ISSET(p->fd, &readset)) {",
          "1394:   --ret;",
          "1395:   assert(ret >= 0);",
          "1398:       slave_dead(context, p);",
          "1399:      } else if (slave_gone_p (p))",
          "1400:   slave_dead(context, p);",
          "",
          "[Removed Lines]",
          "1384:   krb5_warnx(context,",
          "1385:       \"Got a signal, but no update in log version %lu\",",
          "1386:       (unsigned long)current_version);",
          "1396:   if(process_msg (server_context, p, log_fd, database,",
          "1397:     current_version, current_tstamp))",
          "",
          "[Added Lines]",
          "1630:                 if (verbose)",
          "1631:                     krb5_warnx(context,",
          "1632:                                \"Got a signal, but no update in log version %lu\",",
          "1633:                                (unsigned long)current_version);",
          "1637:  for (p = slaves; p != NULL; p = p->next) {",
          "1638:             if (!(p->flags & SLAVE_F_DEAD) &&",
          "1639:                 FD_ISSET(p->fd, &writeset) &&",
          "1640:                 have_tail(p) &&",
          "1641:                 send_tail(context, p) == 0) {",
          "1642:                 (void) send_diffs(server_context, p, log_fd, database,",
          "1643:                                   current_version, current_tstamp);",
          "1644:             }",
          "1645:         }",
          "1653:                 ret = process_msg(server_context, p, log_fd, database,",
          "1654:                                   current_version, current_tstamp);",
          "1655:                 if (ret && ret != EWOULDBLOCK)",
          "",
          "---------------"
        ]
      }
    }
  ]
}