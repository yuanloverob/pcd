{
  "cve_id": "CVE-2012-1836",
  "cve_desc": "Heap-based buffer overflow in dns.cpp in InspIRCd 2.0.5 might allow remote attackers to execute arbitrary code via a crafted DNS query that uses compression.",
  "repo": "inspircd/inspircd",
  "patch_hash": "fe7dbd2c104c37f6f3af7d9f1646a3c332aea4a4",
  "patch_info": {
    "commit_hash": "fe7dbd2c104c37f6f3af7d9f1646a3c332aea4a4",
    "repo": "inspircd/inspircd",
    "commit_url": "https://github.com/inspircd/inspircd/commit/fe7dbd2c104c37f6f3af7d9f1646a3c332aea4a4",
    "files": [
      "src/dns.cpp"
    ],
    "message": "Merge pull request #1 from nenolod/insp20\n\nDNS resolver hardening (insp20 branch)",
    "before_after_code_files": [
      "src/dns.cpp||src/dns.cpp"
    ]
  },
  "patch_diff": {
    "src/dns.cpp||src/dns.cpp": [
      "File: src/dns.cpp -> src/dns.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:  DNSRequest(DNS* dns, int id, const std::string &original);",
      "100:  ~DNSRequest();",
      "102:  int SendRequests(const DNSHeader *header, const int length, QueryType qt);",
      "103: };",
      "",
      "[Removed Lines]",
      "101:  DNSInfo ResultIsReady(DNSHeader &h, int length);",
      "",
      "[Added Lines]",
      "103:  DNSInfo ResultIsReady(DNSHeader &h, unsigned length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162: DNSRequest::DNSRequest(DNS* dns, int rid, const std::string &original) : dnsobj(dns)",
      "163: {",
      "166:  orig = original;",
      "167:  RequestTimeout* RT = new RequestTimeout(ServerInstance->Config->dns_timeout ? ServerInstance->Config->dns_timeout : 5, this, rid);",
      "",
      "[Removed Lines]",
      "164:  res = new unsigned char[512];",
      "",
      "[Added Lines]",
      "169:  res = new unsigned char[sizeof(DNSHeader) * 2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "688: }",
      "692: {",
      "694:  int q = 0;",
      "696:  ResourceRecord rr;",
      "697:   unsigned short ptr;",
      "",
      "[Removed Lines]",
      "691: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, int length)",
      "693:  int i = 0;",
      "695:  int curanswer, o;",
      "",
      "[Added Lines]",
      "696: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, unsigned length)",
      "698:  unsigned i = 0, o;",
      "700:  int curanswer;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "791:  switch (rr.type)",
      "792:  {",
      "793:   case DNS_QUERY_CNAME:",
      "795:   case DNS_QUERY_PTR:",
      "796:    o = 0;",
      "797:    q = 0;",
      "798:    while (q == 0 && i < length && o + 256 < 1023)",
      "799:    {",
      "800:     if (header.payload[i] > 63)",
      "801:     {",
      "802:      memcpy(&ptr,&header.payload[i],2);",
      "804:     }",
      "805:     else",
      "806:     {",
      "",
      "[Removed Lines]",
      "803:      i = ntohs(ptr) - 0xC000 - 12;",
      "",
      "[Added Lines]",
      "812:      i = ntohs(ptr);",
      "815:      if (!(i & DN_COMP_BITMASK))",
      "816:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
      "819:      i &= ~DN_COMP_BITMASK;",
      "822:      i =- 12;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "813:       res[o] = 0;",
      "814:       if (o != 0)",
      "815:        res[o++] = '.';",
      "817:       o += header.payload[i];",
      "818:       i += header.payload[i] + 1;",
      "819:      }",
      "",
      "[Removed Lines]",
      "816:       memcpy(&res[o],&header.payload[i + 1],header.payload[i]);",
      "",
      "[Added Lines]",
      "836:       if (o + header.payload[i] > sizeof(DNSHeader))",
      "837:        return std::make_pair((unsigned char *) NULL, \"DN label decompression is impossible -- malformed/hostile packet?\");",
      "839:       memcpy(&res[o], &header.payload[i + 1], header.payload[i]);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "822:    res[o] = 0;",
      "823:   break;",
      "824:   case DNS_QUERY_AAAA:",
      "825:    memcpy(res,&header.payload[i],rr.rdlength);",
      "826:    res[rr.rdlength] = 0;",
      "827:   break;",
      "828:   case DNS_QUERY_A:",
      "829:    memcpy(res,&header.payload[i],rr.rdlength);",
      "830:    res[rr.rdlength] = 0;",
      "831:   break;",
      "832:   default:",
      "835:   break;",
      "836:  }",
      "837:  return std::make_pair(res,\"No error\");",
      "",
      "[Removed Lines]",
      "833:    memcpy(res,&header.payload[i],rr.rdlength);",
      "834:    res[rr.rdlength] = 0;",
      "",
      "[Added Lines]",
      "848:    if (rr.rdlength != sizeof(struct in6_addr))",
      "849:     return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 16 bytes for an ipv6 entry -- malformed/hostile packet?\");",
      "855:    if (rr.rdlength != sizeof(struct in_addr))",
      "856:     return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 4 bytes for an ipv4 entry -- malformed/hostile packet?\");",
      "862:    return std::make_pair((unsigned char *) NULL, \"don't know how to handle undefined type (\" + ConvToStr(rr.type) + \") -- rejecting\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5a778fb849cfe10bc58d61b5579ce7d41326c023",
      "candidate_info": {
        "commit_hash": "5a778fb849cfe10bc58d61b5579ce7d41326c023",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/5a778fb849cfe10bc58d61b5579ce7d41326c023",
        "files": [
          "src/dns.cpp"
        ],
        "message": "dns: more hardening\n\n- don't trust rr.rdlength\n- don't accept replies we know are impossible for AAAA/A records\n- don't try to process record types we do not know about specifically\n  (this behaviour just leads to disaster)",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "842:    res[o] = 0;",
          "843:   break;",
          "844:   case DNS_QUERY_AAAA:",
          "845:    memcpy(res,&header.payload[i],rr.rdlength);",
          "846:    res[rr.rdlength] = 0;",
          "847:   break;",
          "848:   case DNS_QUERY_A:",
          "849:    memcpy(res,&header.payload[i],rr.rdlength);",
          "850:    res[rr.rdlength] = 0;",
          "851:   break;",
          "852:   default:",
          "855:   break;",
          "856:  }",
          "857:  return std::make_pair(res,\"No error\");",
          "",
          "[Removed Lines]",
          "853:    memcpy(res,&header.payload[i],rr.rdlength);",
          "854:    res[rr.rdlength] = 0;",
          "",
          "[Added Lines]",
          "845:    if (rr.rdlength != sizeof(struct in6_addr))",
          "846:     return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 16 bytes for an ipv6 entry -- malformed/hostile packet?\");",
          "852:    if (rr.rdlength != sizeof(struct in_addr))",
          "853:     return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 4 bytes for an ipv4 entry -- malformed/hostile packet?\");",
          "859:    return std::make_pair((unsigned char *) NULL, \"don't know how to handle undefined type (\" + ConvToStr(rr.type) + \") -- rejecting\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c897aacd8ee813d1237c95afa83dd8ae8bef38b5",
      "candidate_info": {
        "commit_hash": "c897aacd8ee813d1237c95afa83dd8ae8bef38b5",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/c897aacd8ee813d1237c95afa83dd8ae8bef38b5",
        "files": [
          "src/dns.cpp"
        ],
        "message": "dns: cleanup ResultIsReady() prototype",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  DNSRequest(DNS* dns, int id, const std::string &original);",
          "99:  ~DNSRequest();",
          "101:  int SendRequests(const DNSHeader *header, const int length, QueryType qt);",
          "102: };",
          "",
          "[Removed Lines]",
          "100:  DNSInfo ResultIsReady(DNSHeader &h, int length);",
          "",
          "[Added Lines]",
          "100:  DNSInfo ResultIsReady(DNSHeader &h, unsigned length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690: }",
          "694: {",
          "695:  unsigned i = 0, o;",
          "696:  int q = 0;",
          "",
          "[Removed Lines]",
          "693: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, int length)",
          "",
          "[Added Lines]",
          "693: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, unsigned length)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:  length -= 12;",
          "723:  {",
          "724:   if (header.payload[i] > 63)",
          "725:   {",
          "",
          "[Removed Lines]",
          "722:  while ((unsigned int)q < header.qdcount && i < (unsigned) length)",
          "",
          "[Added Lines]",
          "722:  while ((unsigned int)q < header.qdcount && i < length)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "740:  while ((unsigned)curanswer < header.ancount)",
          "741:  {",
          "742:   q = 0;",
          "744:   {",
          "745:    if (header.payload[i] > 63)",
          "746:    {",
          "",
          "[Removed Lines]",
          "743:   while (q == 0 && i < (unsigned) length)",
          "",
          "[Added Lines]",
          "743:   while (q == 0 && i < length)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "758:    }",
          "759:   }",
          "761:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "760:   if ((unsigned) length - i < 10)",
          "",
          "[Added Lines]",
          "760:   if (length - i < 10)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "799:   case DNS_QUERY_PTR:",
          "800:    o = 0;",
          "801:    q = 0;",
          "803:    {",
          "805:     if (header.payload[i] > 63)",
          "",
          "[Removed Lines]",
          "802:    while (q == 0 && i < (unsigned) length && o + 256 < 1023)",
          "",
          "[Added Lines]",
          "802:    while (q == 0 && i < length && o + 256 < 1023)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a791fbd87627756b4704d7666682ce232d30ad67",
      "candidate_info": {
        "commit_hash": "a791fbd87627756b4704d7666682ce232d30ad67",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/a791fbd87627756b4704d7666682ce232d30ad67",
        "files": [
          "src/dns.cpp"
        ],
        "message": "dns: reject messages with lengths larger than DNSHeader with prejudice\n\nThis also includes when decompressing name entries.",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: DNSRequest::DNSRequest(InspIRCd* Instance, DNS* dns, int rid, const std::string &original) : dnsobj(dns), ServerInstance(Instance)",
          "153: {",
          "156:  orig = original;",
          "157:  RequestTimeout* RT = new RequestTimeout(Instance->Config->dns_timeout ? Instance->Config->dns_timeout : 5, Instance, this, rid);",
          "",
          "[Removed Lines]",
          "154:  res = new unsigned char[512];",
          "",
          "[Added Lines]",
          "159:  res = new unsigned char[sizeof(DNSHeader) * 2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "776: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, int length)",
          "777: {",
          "779:  int q = 0;",
          "781:  ResourceRecord rr;",
          "782:   unsigned short ptr;",
          "",
          "[Removed Lines]",
          "778:  unsigned i = 0;",
          "780:  int curanswer, o;",
          "",
          "[Added Lines]",
          "783:  unsigned i = 0, o;",
          "785:  int curanswer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "803:  length -= 12;",
          "806:  {",
          "807:   if (header.payload[i] > 63)",
          "808:   {",
          "",
          "[Removed Lines]",
          "805:  while ((unsigned int)q < header.qdcount && i < length)",
          "",
          "[Added Lines]",
          "810:  while ((unsigned int)q < header.qdcount && i < (unsigned) length)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "823:  while ((unsigned)curanswer < header.ancount)",
          "824:  {",
          "825:   q = 0;",
          "827:   {",
          "828:    if (header.payload[i] > 63)",
          "829:    {",
          "",
          "[Removed Lines]",
          "826:   while (q == 0 && i < length)",
          "",
          "[Added Lines]",
          "831:   while (q == 0 && i < (unsigned) length)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "841:    }",
          "842:   }",
          "844:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "843:   if (length - i < 10)",
          "",
          "[Added Lines]",
          "848:   if ((unsigned) length - i < 10)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "876:  switch (rr.type)",
          "877:  {",
          "878:   case DNS_QUERY_CNAME:",
          "880:   case DNS_QUERY_PTR:",
          "881:    o = 0;",
          "882:    q = 0;",
          "884:    {",
          "885:     if (header.payload[i] > 63)",
          "886:     {",
          "887:      memcpy(&ptr,&header.payload[i],2);",
          "889:     }",
          "890:     else",
          "891:     {",
          "",
          "[Removed Lines]",
          "883:    while (q == 0 && i < length && o + 256 < 1023)",
          "888:      i = ntohs(ptr) - 0xC000 - 12;",
          "",
          "[Added Lines]",
          "890:    while (q == 0 && i < (unsigned) length && o + 256 < 1023)",
          "897:      i = ntohs(ptr);",
          "900:      if (!(i & DN_COMP_BITMASK))",
          "901:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
          "904:      i &= ~DN_COMP_BITMASK;",
          "907:      i =- 12;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "898:       res[o] = 0;",
          "899:       if (o != 0)",
          "900:        res[o++] = '.';",
          "902:       o += header.payload[i];",
          "903:       i += header.payload[i] + 1;",
          "904:      }",
          "",
          "[Removed Lines]",
          "901:       memcpy(&res[o],&header.payload[i + 1],header.payload[i]);",
          "",
          "[Added Lines]",
          "921:       if (o + header.payload[i] > sizeof(DNSHeader))",
          "922:        return std::make_pair((unsigned char *) NULL, \"DN label decompression is impossible -- malformed/hostile packet?\");",
          "924:       memcpy(&res[o], &header.payload[i + 1], header.payload[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c245955ae4c2b197326de78a892e3d0ceb1a1589",
      "candidate_info": {
        "commit_hash": "c245955ae4c2b197326de78a892e3d0ceb1a1589",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/c245955ae4c2b197326de78a892e3d0ceb1a1589",
        "files": [
          "src/dns.cpp"
        ],
        "message": "dns: reject messages with lengths larger than DNSHeader with prejudice\n\nThis also includes when decompressing name entries.",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: DNSRequest::DNSRequest(DNS* dns, int rid, const std::string &original) : dnsobj(dns)",
          "160: {",
          "163:  orig = original;",
          "164:  RequestTimeout* RT = new RequestTimeout(ServerInstance->Config->dns_timeout ? ServerInstance->Config->dns_timeout : 5, this, rid);",
          "",
          "[Removed Lines]",
          "161:  res = new unsigned char[512];",
          "",
          "[Added Lines]",
          "166:  res = new unsigned char[sizeof(DNSHeader) * 2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688: DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, int length)",
          "689: {",
          "691:  int q = 0;",
          "693:  ResourceRecord rr;",
          "694:   unsigned short ptr;",
          "",
          "[Removed Lines]",
          "690:  unsigned i = 0;",
          "692:  int curanswer, o;",
          "",
          "[Added Lines]",
          "695:  unsigned i = 0, o;",
          "697:  int curanswer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "715:  length -= 12;",
          "718:  {",
          "719:   if (header.payload[i] > 63)",
          "720:   {",
          "",
          "[Removed Lines]",
          "717:  while ((unsigned int)q < header.qdcount && i < length)",
          "",
          "[Added Lines]",
          "722:  while ((unsigned int)q < header.qdcount && i < (unsigned) length)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "735:  while ((unsigned)curanswer < header.ancount)",
          "736:  {",
          "737:   q = 0;",
          "739:   {",
          "740:    if (header.payload[i] > 63)",
          "741:    {",
          "",
          "[Removed Lines]",
          "738:   while (q == 0 && i < length)",
          "",
          "[Added Lines]",
          "743:   while (q == 0 && i < (unsigned) length)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "753:    }",
          "754:   }",
          "756:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "755:   if (length - i < 10)",
          "",
          "[Added Lines]",
          "760:   if ((unsigned) length - i < 10)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "788:  switch (rr.type)",
          "789:  {",
          "790:   case DNS_QUERY_CNAME:",
          "792:   case DNS_QUERY_PTR:",
          "793:    o = 0;",
          "794:    q = 0;",
          "796:    {",
          "797:     if (header.payload[i] > 63)",
          "798:     {",
          "799:      memcpy(&ptr,&header.payload[i],2);",
          "801:     }",
          "802:     else",
          "803:     {",
          "",
          "[Removed Lines]",
          "795:    while (q == 0 && i < length && o + 256 < 1023)",
          "800:      i = ntohs(ptr) - 0xC000 - 12;",
          "",
          "[Added Lines]",
          "802:    while (q == 0 && i < (unsigned) length && o + 256 < 1023)",
          "809:      i = ntohs(ptr);",
          "812:      if (!(i & DN_COMP_BITMASK))",
          "813:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
          "816:      i &= ~DN_COMP_BITMASK;",
          "819:      i =- 12;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "810:       res[o] = 0;",
          "811:       if (o != 0)",
          "812:        res[o++] = '.';",
          "814:       o += header.payload[i];",
          "815:       i += header.payload[i] + 1;",
          "816:      }",
          "",
          "[Removed Lines]",
          "813:       memcpy(&res[o],&header.payload[i + 1],header.payload[i]);",
          "",
          "[Added Lines]",
          "833:       if (o + header.payload[i] > sizeof(DNSHeader))",
          "834:        return std::make_pair((unsigned char *) NULL, \"DN label decompression is impossible -- malformed/hostile packet?\");",
          "836:       memcpy(&res[o], &header.payload[i + 1], header.payload[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1925797a8218364b1275943c1e7a75ee48817b6",
      "candidate_info": {
        "commit_hash": "e1925797a8218364b1275943c1e7a75ee48817b6",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/e1925797a8218364b1275943c1e7a75ee48817b6",
        "files": [
          "src/dns.cpp"
        ],
        "message": "dns: more hardening\n\n- don't trust rr.rdlength\n- don't accept replies we know are impossible for AAAA/A records\n- don't try to process record types we do not know about specifically\n  (this behaviour just leads to disaster)",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:    res[o] = 0;",
          "931:   break;",
          "932:   case DNS_QUERY_AAAA:",
          "933:    memcpy(res,&header.payload[i],rr.rdlength);",
          "934:    res[rr.rdlength] = 0;",
          "935:   break;",
          "936:   case DNS_QUERY_A:",
          "937:    memcpy(res,&header.payload[i],rr.rdlength);",
          "938:    res[rr.rdlength] = 0;",
          "939:   break;",
          "940:   default:",
          "943:   break;",
          "944:  }",
          "945:  return std::make_pair(res,\"No error\");",
          "",
          "[Removed Lines]",
          "941:    memcpy(res,&header.payload[i],rr.rdlength);",
          "942:    res[rr.rdlength] = 0;",
          "",
          "[Added Lines]",
          "933:    if (rr.rdlength != sizeof(struct in6_addr))",
          "934:     return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 16 bytes for an ipv6 entry -- malformed/hostile packet?\");",
          "940:    if (rr.rdlength != sizeof(struct in_addr))",
          "941:     return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 4 bytes for an ipv4 entry -- malformed/hostile packet?\");",
          "947:    return std::make_pair((unsigned char *) NULL, \"don't know how to handle undefined type (\" + ConvToStr(rr.type) + \") -- rejecting\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}