{
  "cve_id": "CVE-2014-1832",
  "cve_desc": "Phusion Passenger 4.0.37 allows local users to write to certain files and directories via a symlink attack on (1) control_process.pid or a (2) generation-* file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-1831.",
  "repo": "phusion/passenger",
  "patch_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
  "patch_info": {
    "commit_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
    "repo": "phusion/passenger",
    "commit_url": "https://github.com/phusion/passenger/commit/94428057c602da3d6d34ef75c78091066ecac5c0",
    "files": [
      "NEWS",
      "ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp",
      "ext/common/Utils.h"
    ],
    "message": "Fix a symlink-related security vulnerability.\n\nThe fix in commit 34b10878 and contained a small attack time window in\nbetween two filesystem operations. This has been fixed.",
    "before_after_code_files": [
      "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp||ext/common/Utils.cpp",
      "ext/common/Utils.h||ext/common/Utils.h"
    ]
  },
  "patch_diff": {
    "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
      "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "194:  void initialize(const string &path, bool owner) {",
      "195:   TRACE_POINT();",
      "196:   this->path  = path;",
      "197:   this->owner = owner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "196:   struct stat buf;",
      "197:   int ret;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:   if (owner) {",
      "218:     createDirectory(path);",
      "225:    }",
      "227:    throw RuntimeException(\"Server instance directory '\" + path +",
      "228:     \"' does not exist\");",
      "229:   }",
      "",
      "[Removed Lines]",
      "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
      "217:    case FT_NONEXISTANT:",
      "219:     break;",
      "220:    case FT_DIRECTORY:",
      "221:     verifyDirectoryPermissions(path);",
      "222:     break;",
      "223:    default:",
      "224:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "226:   } else if (getFileType(path) != FT_DIRECTORY) {",
      "",
      "[Added Lines]",
      "219:   do {",
      "220:    ret = lstat(path.c_str(), &buf);",
      "221:   } while (ret == -1 && errno == EAGAIN);",
      "223:    if (ret == 0) {",
      "224:     if (S_ISDIR(buf.st_mode)) {",
      "225:      verifyDirectoryPermissions(path, buf);",
      "226:     } else {",
      "227:      throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "228:     }",
      "229:    } else if (errno == ENOENT) {",
      "231:    } else {",
      "232:     int e = errno;",
      "233:     throw FileSystemException(\"Cannot lstat '\" + path + \"'\",",
      "234:      e, path);",
      "236:   } else if (!S_ISDIR(buf.st_mode)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:   TRACE_POINT();",
      "270:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
      "271:     path + \", but it has wrong permissions\");",
      "272:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
      "",
      "[Removed Lines]",
      "262:  void verifyDirectoryPermissions(const string &path) {",
      "264:   struct stat buf;",
      "266:   if (stat(path.c_str(), &buf) == -1) {",
      "267:    int e = errno;",
      "268:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
      "269:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
      "",
      "[Added Lines]",
      "272:  void verifyDirectoryPermissions(const string &path, struct stat &buf) {",
      "275:   if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
      "",
      "---------------"
    ],
    "ext/common/Utils.cpp||ext/common/Utils.cpp": [
      "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:  }",
      "144: }",
      "175: void",
      "176: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
      "177:  gid_t group, bool overwrite)",
      "",
      "[Removed Lines]",
      "146: FileType",
      "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
      "148:  struct stat buf;",
      "149:  int ret;",
      "151:  ret = lstat(filename.c_str(), &buf);",
      "152:  if (ret == 0) {",
      "153:   if (S_ISREG(buf.st_mode)) {",
      "154:    return FT_REGULAR;",
      "155:   } else if (S_ISDIR(buf.st_mode)) {",
      "156:    return FT_DIRECTORY;",
      "157:   } else if (S_ISLNK(buf.st_mode)) {",
      "158:    return FT_SYMLINK;",
      "159:   } else {",
      "160:    return FT_OTHER;",
      "161:   }",
      "162:  } else {",
      "163:   if (errno == ENOENT) {",
      "164:    return FT_NONEXISTANT;",
      "165:   } else {",
      "166:    int e = errno;",
      "167:    string message(\"Cannot lstat '\");",
      "168:    message.append(filename);",
      "169:    message.append(\"'\");",
      "170:    throw FileSystemException(message, e, filename);",
      "171:   }",
      "172:  }",
      "173: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ext/common/Utils.h||ext/common/Utils.h": [
      "File: ext/common/Utils.h -> ext/common/Utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:  FT_REGULAR,",
      "67:  FT_DIRECTORY,",
      "71:  FT_OTHER",
      "72: } FileType;",
      "",
      "[Removed Lines]",
      "69:  FT_SYMLINK,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
      "125:                      unsigned int throttleRate = 0);",
      "",
      "[Removed Lines]",
      "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c734ebdac5b8724ca986f3106d50f2a93b4e55f6",
      "candidate_info": {
        "commit_hash": "c734ebdac5b8724ca986f3106d50f2a93b4e55f6",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/c734ebdac5b8724ca986f3106d50f2a93b4e55f6",
        "files": [
          "ext/common/AgentsStarter.cpp",
          "ext/common/AgentsStarter.h",
          "ext/common/AgentsStarter.hpp",
          "ext/common/Exceptions.h",
          "ext/common/LoggingAgent.cpp",
          "ext/common/LoggingServer.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h",
          "ext/common/Watchdog.cpp",
          "ext/nginx/Configuration.c",
          "ext/nginx/Configuration.h",
          "ext/nginx/ngx_http_passenger_module.c",
          "test/cxx/UtilsTest.cpp"
        ],
        "message": "Add ability to specify owner, group and permissions for the analytics log dir, and make it world-readable by default.",
        "before_after_code_files": [
          "ext/common/AgentsStarter.cpp||ext/common/AgentsStarter.cpp",
          "ext/common/AgentsStarter.h||ext/common/AgentsStarter.h",
          "ext/common/AgentsStarter.hpp||ext/common/AgentsStarter.hpp",
          "ext/common/Exceptions.h||ext/common/Exceptions.h",
          "ext/common/LoggingAgent.cpp||ext/common/LoggingAgent.cpp",
          "ext/common/LoggingServer.h||ext/common/LoggingServer.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h",
          "ext/common/Watchdog.cpp||ext/common/Watchdog.cpp",
          "ext/nginx/Configuration.c||ext/nginx/Configuration.c",
          "ext/nginx/Configuration.h||ext/nginx/Configuration.h",
          "ext/nginx/ngx_http_passenger_module.c||ext/nginx/ngx_http_passenger_module.c",
          "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/AgentsStarter.cpp||ext/common/AgentsStarter.cpp": [
          "File: ext/common/AgentsStarter.cpp -> ext/common/AgentsStarter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:                      const char *rubyCommand, unsigned int maxPoolSize,",
          "30:                      unsigned int maxInstancesPerApp,",
          "31:                      unsigned int poolIdleTime,",
          "33:                      const AfterForkCallback afterFork,",
          "34:                      void *callbackArgument,",
          "35:                      char **errorMessage)",
          "",
          "[Removed Lines]",
          "32:                      const char *analyticsLogDir,",
          "",
          "[Added Lines]",
          "32:                      const char *analyticsLogDir, const char *analyticsLogUser,",
          "33:                      const char *analyticsLogGroup, const char *analyticsLogPermissions,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   agentsStarter->start(logLevel, webServerPid, tempDir, userSwitching,",
          "46:    defaultUser, workerUid, workerGid, passengerRoot, rubyCommand,",
          "47:    maxPoolSize, maxInstancesPerApp, poolIdleTime,",
          "49:    afterForkFunctionObject);",
          "50:   return 1;",
          "51:  } catch (const Passenger::SystemException &e) {",
          "",
          "[Removed Lines]",
          "48:    analyticsLogDir,",
          "",
          "[Added Lines]",
          "49:    analyticsLogDir, analyticsLogUser,",
          "50:    analyticsLogGroup, analyticsLogPermissions,",
          "",
          "---------------"
        ],
        "ext/common/AgentsStarter.h||ext/common/AgentsStarter.h": [
          "File: ext/common/AgentsStarter.h -> ext/common/AgentsStarter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:                           const char *rubyCommand, unsigned int maxPoolSize,",
          "29:                           unsigned int maxInstancesPerApp,",
          "30:                           unsigned int poolIdleTime,",
          "32:                           const AfterForkCallback afterFork,",
          "33:                           void *callbackArgument,",
          "34:                           char **errorMessage);",
          "",
          "[Removed Lines]",
          "31:                           const char *analyticsLogDir,",
          "",
          "[Added Lines]",
          "31:                           const char *analyticsLogDir, const char *analyticsLogUser,",
          "32:                           const char *analyticsLogGroup, const char *analyticsLogPermissions,",
          "",
          "---------------"
        ],
        "ext/common/AgentsStarter.hpp||ext/common/AgentsStarter.hpp": [
          "File: ext/common/AgentsStarter.hpp -> ext/common/AgentsStarter.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:             const string &passengerRoot, const string &rubyCommand,",
          "267:             unsigned int maxPoolSize, unsigned int maxInstancesPerApp,",
          "268:             unsigned int poolIdleTime,",
          "270:             const function<void ()> &afterFork = function<void ()>())",
          "271:  {",
          "272:   TRACE_POINT();",
          "",
          "[Removed Lines]",
          "269:             const string &analyticsLogDir,",
          "",
          "[Added Lines]",
          "269:             const string &analyticsLogDir, const string &analyticsLogUser,",
          "270:             const string &analyticsLogGroup, const string &analyticsLogPermissions,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:   }",
          "285:   if (syscalls::socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == -1) {",
          "287:    throw SystemException(\"Cannot create a Unix socket pair\", e);",
          "288:   }",
          "",
          "[Removed Lines]",
          "286:    int e = errno;",
          "",
          "[Added Lines]",
          "287:    e = errno;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:     toString(maxInstancesPerApp).c_str(),",
          "342:     toString(poolIdleTime).c_str(),",
          "343:     analyticsLogDir.c_str(),",
          "344:     (char *) 0);",
          "345:    e = errno;",
          "346:    try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:     analyticsLogUser.c_str(),",
          "346:     analyticsLogGroup.c_str(),",
          "347:     analyticsLogPermissions.c_str(),",
          "",
          "---------------"
        ],
        "ext/common/Exceptions.h||ext/common/Exceptions.h": [
          "File: ext/common/Exceptions.h -> ext/common/Exceptions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  virtual const char *what() const throw() { return msg.c_str(); }",
          "251: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: class InvalidModeStringException: public ArgumentException {",
          "257: public:",
          "258:  InvalidModeStringException(const string &message): ArgumentException(message) {}",
          "259: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:  virtual const char *what() const throw() { return msg.c_str(); }",
          "293: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306: class NonExistentUserException: public SecurityException {",
          "307: public:",
          "308:  NonExistentUserException(const string &message): SecurityException(message) {}",
          "309: };",
          "314: class NonExistentGroupException: public SecurityException {",
          "315: public:",
          "316:  NonExistentGroupException(const string &message): SecurityException(message) {}",
          "317: };",
          "",
          "---------------"
        ],
        "ext/common/LoggingAgent.cpp||ext/common/LoggingAgent.cpp": [
          "File: ext/common/LoggingAgent.cpp -> ext/common/LoggingAgent.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  sigaction(SIGPIPE, &action, NULL);",
          "99: }",
          "106: static void",
          "152:   P_WARN(\"WARNING: Unable to lower PassengerLoggingAgent's \"",
          "153:    \"privilege to that of user '\" << username <<",
          "155:  }",
          "156: }",
          "",
          "[Removed Lines]",
          "107: lowerPrivilege(const string &username, const string &groupname = \"\") {",
          "108:  struct passwd *entry;",
          "110:  entry = getpwnam(username.c_str());",
          "111:  if (entry != NULL) {",
          "112:   gid_t groupId;",
          "114:   if (initgroups(username.c_str(), entry->pw_gid) != 0) {",
          "115:    int e = errno;",
          "116:    P_WARN(\"WARNING: Unable to lower PassengerLoggingAgent's \"",
          "117:     \"privilege to that of user '\" << username <<",
          "118:     \"': cannot set supplementary groups for this \"",
          "119:     \"user: \" << strerror(e) << \" (\" << e << \")\");",
          "120:   }",
          "121:   if (groupname.empty()) {",
          "122:    groupId = entry->pw_gid;",
          "123:   } else {",
          "124:    struct group *group;",
          "126:    group = getgrnam(groupname.c_str());",
          "127:    if (group == NULL) {",
          "128:     P_WARN(\"WARNING: Group '\" << groupname <<",
          "129:      \"' not found; using default group for user '\" <<",
          "130:      username << \"' instead.\");",
          "131:     groupId = entry->pw_gid;",
          "132:    } else {",
          "133:     groupId = group->gr_gid;",
          "134:    }",
          "135:   }",
          "136:   if (setgid(groupId) != 0) {",
          "137:    int e = errno;",
          "138:    P_WARN(\"WARNING: Unable to lower PassengerLoggingAgent's \"",
          "139:     \"privilege to that of user '\" << username <<",
          "140:     \"': cannot set group ID to \" << groupId <<",
          "141:     \": \" << strerror(e) <<",
          "142:     \" (\" << e << \")\");",
          "143:   }",
          "144:   if (setuid(entry->pw_uid) != 0) {",
          "145:    int e = errno;",
          "146:    P_WARN(\"WARNING: Unable to lower PassengerLoggingAgent's \"",
          "147:     \"privilege to that of user '\" << username <<",
          "148:     \"': cannot set user ID: \" << strerror(e) <<",
          "149:     \" (\" << e << \")\");",
          "150:   }",
          "151:  } else {",
          "154:    \"': user does not exist.\");",
          "",
          "[Added Lines]",
          "102: lowerPrivilege(const string &username, const struct passwd *user, const struct group *group) {",
          "103:  int e;",
          "105:  if (initgroups(username.c_str(), group->gr_gid) != 0) {",
          "106:   e = errno;",
          "107:   P_WARN(\"WARNING: Unable to set supplementary groups for \" <<",
          "108:    \"PassengerLoggingAgent: \" << strerror(e) << \" (\" << e << \")\");",
          "109:  }",
          "110:  if (setgid(group->gr_gid) != 0) {",
          "111:   e = errno;",
          "112:   P_WARN(\"WARNING: Unable to lower PassengerLoggingAgent's \"",
          "113:    \"privilege to that of user '\" << username <<",
          "114:    \"': cannot set group ID to \" << group->gr_gid <<",
          "115:    \": \" << strerror(e) <<",
          "116:    \" (\" << e << \")\");",
          "117:  }",
          "118:  if (setuid(user->pw_uid) != 0) {",
          "119:   e = errno;",
          "122:    \"': cannot set user ID: \" << strerror(e) <<",
          "123:    \" (\" << e << \")\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:  string loggingDir       = argv[5];",
          "165:  string username         = argv[6];",
          "166:  string groupname        = argv[7];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  string permissions      = argv[8];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:   ServerInstanceDir::GenerationPtr generation;",
          "192:   AccountsDatabasePtr  accountsDatabase;",
          "193:   MessageServerPtr     messageServer;",
          "195:   serverInstanceDir = ptr(new ServerInstanceDir(webServerPid, tempDir, false));",
          "196:   generation = serverInstanceDir->getGeneration(generationNumber);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   struct passwd       *user;",
          "165:   struct group        *group;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:   messageServer = ptr(new MessageServer(generation->getPath() + \"/logging.socket\",",
          "199:    accountsDatabase));",
          "204:   }",
          "205:   if (groupname.empty()) {",
          "207:   }",
          "210:   if (getFileType(loggingDir) == FT_NONEXISTANT) {",
          "211:    if (geteuid() == 0) {",
          "228:    } else {",
          "230:    }",
          "231:   }",
          "234:   if (geteuid() == 0) {",
          "241:   }",
          "",
          "[Removed Lines]",
          "202:   if (username.empty()) {",
          "203:    username = \"nobody\";",
          "206:    groupname = \"nobody\";",
          "212:     struct passwd *user = getpwnam(username.c_str());",
          "213:     struct group *group = getgrnam(groupname.c_str());",
          "215:     if (user == NULL) {",
          "216:      P_ERROR(\"Cannot create directory \" << loggingDir <<",
          "217:       \" with owner '\" << username <<",
          "218:       \"': user does not exist\");",
          "219:      return 1;",
          "220:     }",
          "221:     if (group == NULL) {",
          "222:      P_ERROR(\"Cannot create directory \" << loggingDir <<",
          "223:       \" with group '\" << username <<",
          "224:       \"': group does not exist\");",
          "225:      return 1;",
          "226:     }",
          "227:     makeDirTree(loggingDir, \"u=rwx,g=,o=\", user->pw_uid, group->gr_gid);",
          "229:     makeDirTree(loggingDir);",
          "235:    if (username.empty()) {",
          "237:     lowerPrivilege(\"nobody\");",
          "238:    } else {",
          "239:     lowerPrivilege(username, groupname);",
          "240:    }",
          "",
          "[Added Lines]",
          "173:   user = getpwnam(username.c_str());",
          "174:   if (user == NULL) {",
          "175:    throw NonExistentUserException(string(\"The configuration option \") +",
          "176:     \"'PassengerAnalyticsLogUser' (Apache) or \" +",
          "177:     \"'passenger_analytics_log_user' (Nginx) was set to '\" +",
          "178:     username + \"', but this user doesn't exist. Please fix \" +",
          "179:     \"the configuration option.\");",
          "183:    group = getgrgid(user->pw_gid);",
          "184:    if (group == NULL) {",
          "185:     throw NonExistentGroupException(string(\"The configuration option \") +",
          "186:      \"'PassengerAnalyticsLogGroup' (Apache) or \" +",
          "187:      \"'passenger_analytics_log_group' (Nginx) wasn't set, \" +",
          "188:      \"so PassengerLoggingAgent tried to use the default group \" +",
          "189:      \"for user '\" + username + \"' - which is GID #\" +",
          "190:      toString(user->pw_gid) + \" - as the group for the analytics \" +",
          "191:      \"log dir, but this GID doesn't exist. \" +",
          "192:      \"You can solve this problem by explicitly \" +",
          "193:      \"setting PassengerAnalyticsLogGroup (Apache) or \" +",
          "194:      \"passenger_analytics_log_group (Nginx) to a group that \" +",
          "195:      \"does exist. In any case, it looks like your system's user \" +",
          "196:      \"database is broken; Phusion Passenger can work fine even \" +",
          "197:      \"with this broken user database, but you should still fix it.\");",
          "198:    } else {",
          "199:     groupname = group->gr_name;",
          "200:    }",
          "201:   } else {",
          "202:    group = getgrnam(groupname.c_str());",
          "203:    if (group == NULL) {",
          "204:     throw NonExistentGroupException(string(\"The configuration option \") +",
          "205:      \"'PassengerAnalyticsLogGroup' (Apache) or \" +",
          "206:      \"'passenger_analytics_log_group' (Nginx) was set to '\" +",
          "207:      groupname + \"', but this group doesn't exist. Please fix \" +",
          "208:      \"the configuration option.\");",
          "209:    }",
          "215:     makeDirTree(loggingDir, permissions, user->pw_uid, group->gr_gid);",
          "217:     makeDirTree(loggingDir, permissions);",
          "223:    lowerPrivilege(username, user, group);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258:   accountsDatabase->add(\"logging\", Base64::decode(args[1]), false);",
          "259:   messageServer->addHandler(ptr(new TimerUpdateHandler(exitTimer)));",
          "261:   messageServer->addHandler(ptr(new ExitHandler(exitEvent)));",
          "262:   messageServerThread = new oxt::thread(",
          "263:    boost::bind(&MessageServer::mainLoop, messageServer.get())",
          "",
          "[Removed Lines]",
          "260:   messageServer->addHandler(ptr(new LoggingServer(loggingDir)));",
          "",
          "[Added Lines]",
          "243:   messageServer->addHandler(ptr(new LoggingServer(loggingDir, permissions,",
          "244:    group->gr_gid)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:   return 0;",
          "309:  } catch (const tracable_exception &e) {",
          "311:   return 1;",
          "312:  }",
          "313: }",
          "",
          "[Removed Lines]",
          "310:   P_ERROR(e.what() << \"\\n\" << e.backtrace());",
          "",
          "[Added Lines]",
          "294:   P_ERROR(\"*** ERROR: \" << e.what() << \"\\n\" << e.backtrace());",
          "",
          "---------------"
        ],
        "ext/common/LoggingServer.h||ext/common/LoggingServer.h": [
          "File: ext/common/LoggingServer.h -> ext/common/LoggingServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <cstdio>",
          "36: #include <cstdlib>",
          "37: #include <cstring>",
          "39: #include \"MessageServer.h\"",
          "40: #include \"Logging.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <grp.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: class LoggingServer: public MessageServer::Handler {",
          "52: private:",
          "53:  string dir;",
          "55: public:",
          "57:   this->dir = dir;",
          "58:  }",
          "60:  virtual bool processMessage(MessageServer::CommonClientContext &commonContext,",
          "",
          "[Removed Lines]",
          "56:  LoggingServer(const string &dir) {",
          "",
          "[Added Lines]",
          "55:  string dirPermissions;",
          "56:  mode_t filePermissions;",
          "57:  gid_t gid;",
          "60:  LoggingServer(const string &dir, const string &permissions = \"u=rwx,g=rx,o=rx\", gid_t gid = GROUP_NOT_GIVEN) {",
          "62:   this->gid = gid;",
          "63:   dirPermissions = permissions;",
          "64:   filePermissions = parseModeString(permissions) & ~(S_IXUSR | S_IXGRP | S_IXOTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     return true;",
          "79:    }",
          "82:    FileDescriptor fd;",
          "83:    int ret;",
          "85:    try {",
          "88:    } catch (const IOException &e) {",
          "89:     string message = \"Cannot create directory \" + extractDirName(filename) +",
          "90:      \": \" + e.what();",
          "",
          "[Removed Lines]",
          "81:    mode_t mode = S_IRUSR | S_IWUSR;",
          "87:     makeDirTree(extractDirName(filename));",
          "",
          "[Added Lines]",
          "93:     makeDirTree(extractDirName(filename), dirPermissions, USER_NOT_GIVEN, gid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:    fd = syscalls::open(filename.c_str(),",
          "101:     O_CREAT | O_WRONLY | O_APPEND,",
          "103:    if (fd == -1) {",
          "104:     const char *message = strerror(errno);",
          "105:     commonContext.channel.write(\"error\", message, NULL);",
          "",
          "[Removed Lines]",
          "102:     mode);",
          "",
          "[Added Lines]",
          "108:     filePermissions);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:    }",
          "109:    do {",
          "111:    } while (ret == -1 && errno == EINTR);",
          "112:    commonContext.channel.write(\"ok\", NULL);",
          "113:    commonContext.channel.writeFileDescriptor(fd);",
          "",
          "[Removed Lines]",
          "110:     ret = fchmod(fd, mode);",
          "",
          "[Added Lines]",
          "116:     ret = fchmod(fd, filePermissions);",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     e, filename);",
          "159:   }",
          "162:    do {",
          "163:     ret = fchown(fd, owner, group);",
          "164:    } while (ret == -1 && errno == EINTR);",
          "",
          "[Removed Lines]",
          "161:   if (owner != (uid_t) -1 && group != (gid_t) -1) {",
          "",
          "[Added Lines]",
          "161:   if (owner != USER_NOT_GIVEN && group != GROUP_NOT_GIVEN) {",
          "162:    if (owner == USER_NOT_GIVEN) {",
          "163:     owner = (uid_t) -1; // Don't let fchown change file owner.",
          "164:    }",
          "165:    if (group == GROUP_NOT_GIVEN) {",
          "166:     group = (gid_t) -1; // Don't let fchown change file group.",
          "167:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:   ent = getpwnam(\"nobody\");",
          "373:  }",
          "374:  if (ent == NULL) {",
          "377:  } else {",
          "378:   uid = ent->pw_uid;",
          "379:   gid = ent->pw_gid;",
          "380:  }",
          "381: }",
          "399:  vector<string> clauses;",
          "400:  vector<string>::iterator it;",
          "419:  split(mode, ',', clauses);",
          "420:  for (it = clauses.begin(); it != clauses.end(); it++) {",
          "423:   if (clause.empty()) {",
          "424:    continue;",
          "425:   } else if (clause.size() < 2 || clause[1] != '=') {",
          "427:   }",
          "429:   switch (clause[0]) {",
          "",
          "[Removed Lines]",
          "375:   uid = (uid_t) -1;",
          "376:   gid = (gid_t) -1;",
          "383: const char *",
          "384: getSystemTempDir() {",
          "385:  const char *temp_dir = getenv(\"PASSENGER_TEMP_DIR\");",
          "386:  if (temp_dir == NULL || *temp_dir == '\\0') {",
          "387:   temp_dir = getenv(\"PASSENGER_TMPDIR\");",
          "388:   if (temp_dir == NULL || *temp_dir == '\\0') {",
          "389:    temp_dir = \"/tmp\";",
          "390:   }",
          "391:  }",
          "392:  return temp_dir;",
          "393: }",
          "395: void",
          "396: makeDirTree(const string &path, const char *mode, uid_t owner, gid_t group) {",
          "397:  struct stat buf;",
          "398:  vector<string> paths;",
          "401:  vector<string>::reverse_iterator rit;",
          "402:  string current = path;",
          "403:  mode_t modeBits = 0;",
          "404:  int ret;",
          "406:  if (stat(path.c_str(), &buf) == 0) {",
          "407:   return;",
          "408:  }",
          "421:   string clause = *it;",
          "426:    throw ArgumentException(\"Invalid mode clause specification '\" + clause + \"'\");",
          "",
          "[Added Lines]",
          "381:   uid = USER_NOT_GIVEN;",
          "382:   gid = GROUP_NOT_GIVEN;",
          "389: mode_t",
          "390: parseModeString(const StaticString &mode) {",
          "391:  mode_t modeBits = 0;",
          "397:   const string &clause = *it;",
          "402:    throw InvalidModeStringException(\"Invalid mode clause specification '\" + clause + \"'\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "443:      modeBits |= S_ISUID;",
          "444:      break;",
          "445:     default:",
          "447:       \"' in mode clause specification '\" +",
          "448:       clause + \"'\");",
          "449:     }",
          "",
          "[Removed Lines]",
          "446:      throw ArgumentException(\"Invalid permission '\" + string(1, clause[i]) +",
          "",
          "[Added Lines]",
          "422:      throw InvalidModeStringException(\"Invalid permission '\" +",
          "423:       string(1, clause[i]) +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "465:      modeBits |= S_ISGID;",
          "466:      break;",
          "467:     default:",
          "469:       \"' in mode clause specification '\" +",
          "470:       clause + \"'\");",
          "471:     }",
          "",
          "[Removed Lines]",
          "468:      throw ArgumentException(\"Invalid permission '\" + string(1, clause[i]) +",
          "",
          "[Added Lines]",
          "445:      throw InvalidModeStringException(\"Invalid permission '\" +",
          "446:       string(1, clause[i]) +",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:      modeBits |= S_IXOTH;",
          "485:      break;",
          "486:     default:",
          "488:       \"' in mode clause specification '\" +",
          "489:       clause + \"'\");",
          "490:     }",
          "491:    }",
          "492:    break;",
          "493:   default:",
          "495:     \"' in mode clause specification '\" + clause + \"'\");",
          "496:   }",
          "497:  }",
          "",
          "[Removed Lines]",
          "487:      throw ArgumentException(\"Invalid permission '\" + string(1, clause[i]) +",
          "494:    throw ArgumentException(\"Invalid owner '\" + string(1, clause[0]) +",
          "",
          "[Added Lines]",
          "465:      throw InvalidModeStringException(\"Invalid permission '\" +",
          "466:       string(1, clause[i]) +",
          "473:    throw InvalidModeStringException(\"Invalid owner '\" + string(1, clause[0]) +",
          "478:  return modeBits;",
          "479: }",
          "481: const char *",
          "482: getSystemTempDir() {",
          "483:  const char *temp_dir = getenv(\"PASSENGER_TEMP_DIR\");",
          "484:  if (temp_dir == NULL || *temp_dir == '\\0') {",
          "485:   temp_dir = getenv(\"PASSENGER_TMPDIR\");",
          "486:   if (temp_dir == NULL || *temp_dir == '\\0') {",
          "487:    temp_dir = \"/tmp\";",
          "488:   }",
          "489:  }",
          "490:  return temp_dir;",
          "491: }",
          "493: void",
          "494: makeDirTree(const string &path, const StaticString &mode, uid_t owner, gid_t group) {",
          "495:  struct stat buf;",
          "496:  vector<string> paths;",
          "497:  vector<string>::reverse_iterator rit;",
          "498:  string current = path;",
          "499:  mode_t modeBits;",
          "500:  int ret;",
          "502:  if (stat(path.c_str(), &buf) == 0) {",
          "503:   return;",
          "504:  }",
          "506:  modeBits = parseModeString(mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "522:     continue;",
          "523:    } else {",
          "524:     int e = errno;",
          "527:    }",
          "528:   }",
          "",
          "[Removed Lines]",
          "525:     throw FileSystemException(\"Cannot create directory '\" + *it + \"'\",",
          "526:      e, *it);",
          "",
          "[Added Lines]",
          "534:     throw FileSystemException(\"Cannot create directory '\" + current + \"'\",",
          "535:      e, current);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "532:    ret = chmod(current.c_str(), modeBits);",
          "533:   } while (ret == -1 && errno == EINTR);",
          "536:    do {",
          "537:     ret = chown(current.c_str(), owner, group);",
          "538:    } while (ret == -1 && errno == EINTR);",
          "",
          "[Removed Lines]",
          "535:   if (owner != (uid_t) -1 && group != (gid_t) -1) {",
          "",
          "[Added Lines]",
          "544:   if (owner != USER_NOT_GIVEN && group != GROUP_NOT_GIVEN) {",
          "545:    if (owner == USER_NOT_GIVEN) {",
          "546:     owner = (uid_t) -1; // Don't let chown change file owner.",
          "547:    }",
          "548:    if (group == GROUP_NOT_GIVEN) {",
          "549:     group = (gid_t) -1; // Don't let chown change file group.",
          "550:    }",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: using namespace std;",
          "47: using namespace boost;",
          "49: typedef struct CachedFileStat CachedFileStat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: static const uid_t USER_NOT_GIVEN = (uid_t) -1;",
          "50: static const gid_t GROUP_NOT_GIVEN = (gid_t) -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203: void createFile(const string &filename, const StaticString &contents,",
          "204:                 mode_t permissions = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH,",
          "",
          "[Removed Lines]",
          "205:                 uid_t owner = (uid_t) -1, gid_t group = (gid_t) -1);",
          "",
          "[Added Lines]",
          "208:                 uid_t owner = USER_NOT_GIVEN, gid_t group = GROUP_NOT_GIVEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274: void determineLowestUserAndGroup(const string &user, uid_t &uid, gid_t &gid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: mode_t parseModeString(const StaticString &mode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "350: void makeDirTree(const string &path, const char *mode = \"u=rwx,g=,o=\", uid_t owner = (uid_t) -1, gid_t group = (gid_t) -1);",
          "",
          "[Added Lines]",
          "377: void makeDirTree(const string &path, const StaticString &mode = \"u=rwx,g=,o=\",",
          "378:  uid_t owner = USER_NOT_GIVEN, gid_t group = GROUP_NOT_GIVEN);",
          "",
          "---------------"
        ],
        "ext/common/Watchdog.cpp||ext/common/Watchdog.cpp": [
          "File: ext/common/Watchdog.cpp -> ext/common/Watchdog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: static unsigned int maxInstancesPerApp;",
          "44: static unsigned int poolIdleTime;",
          "45: static string  analyticsLogDir;",
          "47: static ServerInstanceDirPtr serverInstanceDir;",
          "48: static ServerInstanceDir::GenerationPtr generation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: static string  analyticsLogUser;",
          "47: static string  analyticsLogGroup;",
          "48: static string  analyticsLogPermissions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "575:    tempDir.c_str(),",
          "576:    generationNumber.c_str(),",
          "577:    analyticsLogDir.c_str(),",
          "580:    (char *) 0);",
          "581:  }",
          "",
          "[Removed Lines]",
          "578:    \"\",",
          "579:    \"\",",
          "",
          "[Added Lines]",
          "581:    analyticsLogUser.c_str(),",
          "582:    analyticsLogGroup.c_str(),",
          "583:    analyticsLogPermissions.c_str(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "804:  maxInstancesPerApp = atoi(argv[13]);",
          "805:  poolIdleTime       = atoi(argv[14]);",
          "806:  analyticsLogDir    = argv[15];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:  analyticsLogUser        = argv[16];",
          "812:  analyticsLogGroup       = argv[17];",
          "813:  analyticsLogPermissions = argv[18];",
          "",
          "---------------"
        ],
        "ext/nginx/Configuration.c||ext/nginx/Configuration.c": [
          "File: ext/nginx/Configuration.c -> ext/nginx/Configuration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     conf->default_user.len  = 0;",
          "75:     conf->analytics_log_dir.data = NULL;",
          "76:     conf->analytics_log_dir.len  = 0;",
          "78:     return conf;",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     conf->analytics_log_user.data = NULL;",
          "78:     conf->analytics_log_user.len  = 0;",
          "79:     conf->analytics_log_group.data = (u_char *) \"\";",
          "80:     conf->analytics_log_group.len  = 0;",
          "81:     conf->analytics_log_permissions.data = NULL;",
          "82:     conf->analytics_log_permissions.len  = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         }",
          "147:     }",
          "149:     return NGX_CONF_OK;",
          "150: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     if (conf->analytics_log_user.len == 0) {",
          "156:         conf->analytics_log_user.len  = sizeof(\"nobody\") - 1;",
          "157:         conf->analytics_log_user.data = (u_char *) \"nobody\";",
          "158:     }",
          "160:     if (conf->analytics_log_permissions.len == 0) {",
          "161:         conf->analytics_log_permissions.len  = sizeof(\"u=rwx,g=rx,o=rx\") - 1;",
          "162:         conf->analytics_log_permissions.data = (u_char *) \"u=rwx,g=rx,o=rx\";",
          "163:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1006:       offsetof(passenger_main_conf_t, analytics_log_dir),",
          "1007:       NULL },",
          "1009:     { ngx_string(\"passenger_pass_header\"),",
          "1010:       NGX_HTTP_MAIN_CONF | NGX_HTTP_SRV_CONF | NGX_HTTP_LOC_CONF | NGX_HTTP_LIF_CONF | NGX_CONF_FLAG,",
          "1011:       ngx_conf_set_str_array_slot,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     { ngx_string(\"passenger_analytics_log_user\"),",
          "1026:       NGX_HTTP_MAIN_CONF | NGX_CONF_TAKE1,",
          "1027:       ngx_conf_set_str_slot,",
          "1028:       NGX_HTTP_MAIN_CONF_OFFSET,",
          "1029:       offsetof(passenger_main_conf_t, analytics_log_user),",
          "1030:       NULL },",
          "1032:     { ngx_string(\"passenger_analytics_log_group\"),",
          "1033:       NGX_HTTP_MAIN_CONF | NGX_CONF_TAKE1,",
          "1034:       ngx_conf_set_str_slot,",
          "1035:       NGX_HTTP_MAIN_CONF_OFFSET,",
          "1036:       offsetof(passenger_main_conf_t, analytics_log_group),",
          "1037:       NULL },",
          "1039:     { ngx_string(\"passenger_analytics_log_permissions\"),",
          "1040:       NGX_HTTP_MAIN_CONF | NGX_CONF_TAKE1,",
          "1041:       ngx_conf_set_str_slot,",
          "1042:       NGX_HTTP_MAIN_CONF_OFFSET,",
          "1043:       offsetof(passenger_main_conf_t, analytics_log_permissions),",
          "1044:       NULL },",
          "",
          "---------------"
        ],
        "ext/nginx/Configuration.h||ext/nginx/Configuration.h": [
          "File: ext/nginx/Configuration.h -> ext/nginx/Configuration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     ngx_flag_t  user_switching;",
          "64:     ngx_str_t   default_user;",
          "65:     ngx_str_t   analytics_log_dir;",
          "66: } passenger_main_conf_t;",
          "68: extern const ngx_command_t   passenger_commands[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     ngx_str_t   analytics_log_user;",
          "67:     ngx_str_t   analytics_log_group;",
          "68:     ngx_str_t   analytics_log_permissions;",
          "",
          "---------------"
        ],
        "ext/nginx/ngx_http_passenger_module.c||ext/nginx/ngx_http_passenger_module.c": [
          "File: ext/nginx/ngx_http_passenger_module.c -> ext/nginx/ngx_http_passenger_module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     char   *passenger_root = NULL;",
          "221:     char   *ruby = NULL;",
          "222:     char   *analytics_log_dir;",
          "223:     char   *error_message = NULL;",
          "225:     core_conf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     char   *analytics_log_user;",
          "224:     char   *analytics_log_group;",
          "225:     char   *analytics_log_permissions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:     passenger_root = ngx_str_null_terminate(&passenger_main_conf.root_dir);",
          "231:     ruby           = ngx_str_null_terminate(&passenger_main_conf.ruby);",
          "232:     analytics_log_dir = ngx_str_null_terminate(&passenger_main_conf.analytics_log_dir);",
          "234:     ret = agents_starter_start(passenger_agents_starter,",
          "235:         passenger_main_conf.log_level, getpid(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     analytics_log_user = ngx_str_null_terminate(&passenger_main_conf.analytics_log_user);",
          "237:     analytics_log_group = ngx_str_null_terminate(&passenger_main_conf.analytics_log_group);",
          "238:     analytics_log_permissions = ngx_str_null_terminate(&passenger_main_conf.analytics_log_permissions);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:         passenger_root, ruby, passenger_main_conf.max_pool_size,",
          "239:         passenger_main_conf.max_instances_per_app,",
          "240:         passenger_main_conf.pool_idle_time,",
          "242:         starting_helper_server_after_fork,",
          "243:         cycle,",
          "244:         &error_message);",
          "",
          "[Removed Lines]",
          "241:         analytics_log_dir,",
          "",
          "[Added Lines]",
          "247:         analytics_log_dir, analytics_log_user,",
          "248:         analytics_log_group, analytics_log_permissions,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:     free(passenger_root);",
          "303:     free(ruby);",
          "304:     free(analytics_log_dir);",
          "305:     free(error_message);",
          "306:     return result;",
          "307: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     free(analytics_log_user);",
          "313:     free(analytics_log_group);",
          "314:     free(analytics_log_permissions);",
          "",
          "---------------"
        ],
        "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp": [
          "File: test/cxx/UtilsTest.cpp -> test/cxx/UtilsTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:   ensure(memcmp(str.c_str(), \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 11) == 0);",
          "286:  }",
          "292:   makeDirTree(\"tmp.dir/foo\");",
          "293:   ensure_equals(getFileType(\"tmp.dir/foo\"), FT_DIRECTORY);",
          "294:  }",
          "298:   makeDirTree(\"tmp.dir/foo/bar\");",
          "299:   ensure_equals(getFileType(\"tmp.dir/foo\"), FT_DIRECTORY);",
          "300:   ensure_equals(getFileType(\"tmp.dir/foo/bar\"), FT_DIRECTORY);",
          "301:  }",
          "305:   struct stat buf, buf2;",
          "",
          "[Removed Lines]",
          "290:  TEST_METHOD(35) {",
          "296:  TEST_METHOD(36) {",
          "303:  TEST_METHOD(37) {",
          "",
          "[Added Lines]",
          "290:  static bool modeStringCannotBeParsed(const StaticString &modeString) {",
          "291:   try {",
          "292:    parseModeString(modeString);",
          "293:    return false;",
          "294:   } catch (const InvalidModeStringException &) {",
          "295:    return true;",
          "296:   }",
          "297:  }",
          "299:  TEST_METHOD(36) {",
          "300:   ensure_equals(parseModeString(\"\"), 0);",
          "301:   ensure_equals(parseModeString(\"u=\"), 0);",
          "302:   ensure_equals(parseModeString(\"u=,u=\"), 0);",
          "303:   ensure_equals(parseModeString(\"u=,g=\"), 0);",
          "304:   ensure_equals(parseModeString(\"u=,g=,o=\"), 0);",
          "305:   ensure_equals(parseModeString(\"u=,g=,o=,u=,g=\"), 0);",
          "306:   ensure_equals(parseModeString(\"o=\"), 0);",
          "307:  }",
          "309:  TEST_METHOD(37) {",
          "310:   ensure_equals(\"(1)\", parseModeString(\"u=rwx\"), S_IRWXU);",
          "311:   ensure_equals(\"(2)\", parseModeString(\"g=rwx\"), S_IRWXG);",
          "312:   ensure_equals(\"(3)\", parseModeString(\"o=rwx\"), S_IRWXO);",
          "313:   ensure_equals(\"(4)\", parseModeString(\"u=r,g=,o=rx\"), S_IRUSR | S_IROTH | S_IXOTH);",
          "314:   ensure_equals(\"(5)\", parseModeString(\"o=r,g=wx\"), S_IROTH | S_IWGRP | S_IXGRP);",
          "315:   ensure_equals(\"(6)\", parseModeString(\"u=r,g=w,o=x,u=x\"), S_IRUSR | S_IXUSR | S_IWGRP | S_IXOTH);",
          "316:   ensure_equals(\"(7)\", parseModeString(\"u=rs,g=ws\"), S_IRUSR | S_ISUID | S_IWGRP | S_ISGID);",
          "317:  }",
          "319:  TEST_METHOD(38) {",
          "320:   ensure(modeStringCannotBeParsed(\"0\"));",
          "321:   ensure(modeStringCannotBeParsed(\"0600\"));",
          "322:   ensure(modeStringCannotBeParsed(\"600\"));",
          "323:   ensure(modeStringCannotBeParsed(\"x=rs\"));",
          "324:   ensure(modeStringCannotBeParsed(\"u=rs,g=rs,x=rs\"));",
          "325:   ensure(modeStringCannotBeParsed(\"x=rs\"));",
          "326:   ensure(modeStringCannotBeParsed(\"rwxrwxrwx\"));",
          "327:  }",
          "331:  TEST_METHOD(40) {",
          "337:  TEST_METHOD(41) {",
          "344:  TEST_METHOD(42) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:    S_IROTH | S_IXOTH);",
          "318:  }",
          "322:   testMakeDirTreeMode(\"empty 1\", \"\", 0);",
          "323:   testMakeDirTreeMode(\"empty 2\", \"u=\", 0);",
          "",
          "[Removed Lines]",
          "320:  TEST_METHOD(38) {",
          "",
          "[Added Lines]",
          "361:  TEST_METHOD(43) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:    S_IRWXU | S_ISUID | S_IRWXO);",
          "335:  }",
          "339:   struct stat buf, buf2;",
          "340:   stat(\"tmp.dir\", &buf);",
          "",
          "[Removed Lines]",
          "337:  TEST_METHOD(39) {",
          "",
          "[Added Lines]",
          "378:  TEST_METHOD(44) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dda49f4a3ebe9bafc48da1bd45799f30ce19566",
      "candidate_info": {
        "commit_hash": "9dda49f4a3ebe9bafc48da1bd45799f30ce19566",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/9dda49f4a3ebe9bafc48da1bd45799f30ce19566",
        "files": [
          "NEWS",
          "ext/apache2/Hooks.cpp",
          "ext/common/ServerInstanceDir.h",
          "ext/common/agents/LoggingAgent/Main.cpp"
        ],
        "message": "Fixed a problem with graceful web server restarts. This problem was introduced in 4.0.6 during the attempt to fix issue #910.",
        "before_after_code_files": [
          "ext/apache2/Hooks.cpp||ext/apache2/Hooks.cpp",
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/agents/LoggingAgent/Main.cpp||ext/common/agents/LoggingAgent/Main.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/apache2/Hooks.cpp||ext/apache2/Hooks.cpp": [
          "File: ext/apache2/Hooks.cpp -> ext/apache2/Hooks.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     if (!connected) {",
          "280:      UPDATE_TRACE_POINT();",
          "282:     }",
          "283:    } else {",
          "284:     throw;",
          "",
          "[Removed Lines]",
          "281:      throw IOException(\"Cannot connect to the helper agent\");",
          "",
          "[Added Lines]",
          "281:      throw IOException(\"Cannot connect to the helper agent at \" +",
          "282:       agentsStarter.getRequestSocketFilename());",
          "",
          "---------------"
        ],
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <string>",
          "42: #include <Constants.h>",
          "43: #include <Exceptions.h>",
          "44: #include <Utils.h>",
          "45: #include <Utils/StrIntUtils.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include <Logging.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:     createDirectory(path);",
          "222:     break;",
          "223:    case FT_DIRECTORY:",
          "226:     break;",
          "227:    default:",
          "228:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "",
          "[Removed Lines]",
          "224:     removeDirTree(path);",
          "225:     createDirectory(path);",
          "",
          "[Added Lines]",
          "234:     verifyDirectoryPermissions(path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:    throw FileSystemException(\"Cannot create server instance directory '\" +",
          "243:     path + \"'\", e, path);",
          "244:   }",
          "245:  }",
          "247:  bool isDirectory(const string &dir, struct dirent *entry) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   if (chown(path.c_str(), geteuid(), getegid()) == -1) {",
          "258:    int e = errno;",
          "259:    throw FileSystemException(\"Cannot change the permissions of the server \"",
          "260:     \"instance directory '\" + path + \"'\", e, path);",
          "261:   }",
          "262:  }",
          "269:  void verifyDirectoryPermissions(const string &path) {",
          "270:   TRACE_POINT();",
          "271:   struct stat buf;",
          "273:   if (stat(path.c_str(), &buf) == -1) {",
          "274:    int e = errno;",
          "275:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
          "276:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
          "277:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
          "278:     path + \", but it has wrong permissions\");",
          "279:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
          "288:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
          "289:     path + \", but it has wrong owner and group\");",
          "290:   }",
          "",
          "---------------"
        ],
        "ext/common/agents/LoggingAgent/Main.cpp||ext/common/agents/LoggingAgent/Main.cpp": [
          "File: ext/common/agents/LoggingAgent/Main.cpp -> ext/common/agents/LoggingAgent/Main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:  ev::sig sigtermWatcher(eventLoop);",
          "321:  ev::sig sigquitWatcher(eventLoop);",
          "328:  sigintWatcher.set<&caughtExitSignal>();",
          "329:  sigintWatcher.start(SIGINT);",
          "330:  sigtermWatcher.set<&caughtExitSignal>();",
          "",
          "[Removed Lines]",
          "323:  if (feedbackFdAvailable()) {",
          "324:   feedbackFdWatcher.set<&feedbackFdBecameReadable>();",
          "325:   feedbackFdWatcher.start(FEEDBACK_FD, ev::READ);",
          "326:   writeArrayMessage(FEEDBACK_FD, \"initialized\", NULL);",
          "327:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:  sigquitWatcher.start(SIGQUIT);",
          "335:  P_WARN(\"PassengerLoggingAgent online, listening at \" << socketAddress);",
          "336:  ev_run(eventLoop, 0);",
          "337: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:  if (feedbackFdAvailable()) {",
          "332:   feedbackFdWatcher.set<&feedbackFdBecameReadable>();",
          "333:   feedbackFdWatcher.start(FEEDBACK_FD, ev::READ);",
          "334:   writeArrayMessage(FEEDBACK_FD, \"initialized\", NULL);",
          "335:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8fcbc309027a9b8e5dc96ed9b8bdc1a3e74bef2",
      "candidate_info": {
        "commit_hash": "d8fcbc309027a9b8e5dc96ed9b8bdc1a3e74bef2",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/d8fcbc309027a9b8e5dc96ed9b8bdc1a3e74bef2",
        "files": [
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "test/cxx/UtilsTest.cpp"
        ],
        "message": "Ensure that the 'backends' directory has the sticky bit set.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:    string structureVersionFile = path + \"/structure_version.txt\";",
          "",
          "[Removed Lines]",
          "95:    makeDirTree(path, \"u=rwxs,g=x,o=x\");",
          "",
          "[Added Lines]",
          "95:    makeDirTree(path, \"u=rwx,g=x,o=x\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:    if (runningAsRoot) {",
          "111:      webServerWorkerUid, webServerWorkerGid);",
          "112:    } else {",
          "114:    }",
          "",
          "[Removed Lines]",
          "110:     makeDirTree(path + \"/buffered_uploads\", \"u=rwxs,g=,o=\",",
          "113:     makeDirTree(path + \"/buffered_uploads\", \"u=rwxs,g=,o=\");",
          "",
          "[Added Lines]",
          "110:     makeDirTree(path + \"/buffered_uploads\", \"u=rwx,g=,o=\",",
          "113:     makeDirTree(path + \"/buffered_uploads\", \"u=rwx,g=,o=\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     } else {",
          "",
          "[Removed Lines]",
          "124:      makeDirTree(path + \"/backends\", \"u=rwxs,g=wx,o=wx\");",
          "",
          "[Added Lines]",
          "124:      makeDirTree(path + \"/backends\", \"u=rwx,g=wx,o=wx,+t\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     }",
          "136:    } else {",
          "141:    }",
          "",
          "[Removed Lines]",
          "134:      makeDirTree(path + \"/backends\", \"u=rwxs,g=x,o=x\", defaultUid, defaultGid);",
          "140:     makeDirTree(path + \"/backends\", \"u=rwxs,g=,o=\");",
          "",
          "[Added Lines]",
          "134:      makeDirTree(path + \"/backends\", \"u=rwx,g=x,o=x\", defaultUid, defaultGid);",
          "140:     makeDirTree(path + \"/backends\", \"u=rwx,g=,o=\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:     } else {",
          "157:       defaultUid, defaultGid);",
          "158:     }",
          "159:    } else {",
          "161:    }",
          "163:    owner = true;",
          "",
          "[Removed Lines]",
          "151:      makeDirTree(path + \"/spawn-server\", \"u=rwxs,g=,o=\");",
          "156:      makeDirTree(path + \"/spawn-server\", \"u=rwxs,g=,o=\",",
          "160:     makeDirTree(path + \"/spawn-server\", \"u=rwxs,g=,o=\");",
          "",
          "[Added Lines]",
          "151:      makeDirTree(path + \"/spawn-server\", \"u=rwx,g=,o=\");",
          "156:      makeDirTree(path + \"/spawn-server\", \"u=rwx,g=,o=\",",
          "160:     makeDirTree(path + \"/spawn-server\", \"u=rwx,g=,o=\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "218:  }",
          "220:  bool isDirectory(const string &dir, struct dirent *entry) const {",
          "",
          "[Removed Lines]",
          "217:   makeDirTree(path, \"u=rwxs,g=rx,o=rx\");",
          "",
          "[Added Lines]",
          "217:   makeDirTree(path, \"u=rwx,g=rx,o=rx\");",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:   if (clause.empty()) {",
          "414:    continue;",
          "416:    throw InvalidModeStringException(\"Invalid mode clause specification '\" + clause + \"'\");",
          "417:   }",
          "",
          "[Removed Lines]",
          "415:   } else if (clause.size() < 2 || clause[1] != '=') {",
          "",
          "[Added Lines]",
          "415:   } else if (clause.size() < 2 || (clause[0] != '+' && clause[1] != '=')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:     }",
          "484:    }",
          "485:    break;",
          "486:   default:",
          "487:    throw InvalidModeStringException(\"Invalid owner '\" + string(1, clause[0]) +",
          "488:     \"' in mode clause specification '\" + clause + \"'\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:   case '+':",
          "487:    for (string::size_type i = 1; i < clause.size(); i++) {",
          "488:     switch (clause[i]) {",
          "489:     case 't':",
          "490:      modeBits |= S_ISVTX;",
          "491:      break;",
          "492:     default:",
          "493:      throw InvalidModeStringException(\"Invalid permission '\" +",
          "494:       string(1, clause[i]) +",
          "495:       \"' in mode clause specification '\" +",
          "496:       clause + \"'\");",
          "497:     }",
          "498:    }",
          "499:    break;",
          "",
          "---------------"
        ],
        "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp": [
          "File: test/cxx/UtilsTest.cpp -> test/cxx/UtilsTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:    (mode_t) (S_IRUSR | S_IXUSR | S_IWGRP | S_IXOTH));",
          "334:   ensure_equals(\"(7)\", parseModeString(\"u=rs,g=ws\"),",
          "335:    (mode_t) (S_IRUSR | S_ISUID | S_IWGRP | S_ISGID));",
          "336:  }",
          "338:  TEST_METHOD(38) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   ensure_equals(\"(7)\", parseModeString(\"u=rwx,g=rwx,+t\"),",
          "337:    (mode_t) (S_IRWXU | S_IRWXG | S_ISVTX));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44571f3772263c7977ee1f25da50fc82947f9d71",
      "candidate_info": {
        "commit_hash": "44571f3772263c7977ee1f25da50fc82947f9d71",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/44571f3772263c7977ee1f25da50fc82947f9d71",
        "files": [
          "Rakefile",
          "ext/common/ServerInstanceDir.h",
          "ext/common/StaticString.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h",
          "test/ServerInstanceDirTest.cpp",
          "test/UtilsTest.cpp",
          "test/support/Support.cpp",
          "test/support/Support.h"
        ],
        "message": "Begin refactoring the Passenger temp directory, now called the server instance directory.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/StaticString.h||ext/common/StaticString.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h",
          "test/ServerInstanceDirTest.cpp||test/ServerInstanceDirTest.cpp",
          "test/UtilsTest.cpp||test/UtilsTest.cpp",
          "test/support/Support.cpp||test/support/Support.cpp",
          "test/support/Support.h||test/support/Support.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #ifndef _PASSENGER_SERVER_INSTANCE_DIR_H_",
          "26: #define _PASSENGER_SERVER_INSTANCE_DIR_H_",
          "28: #include <boost/noncopyable.hpp>",
          "29: #include <boost/shared_ptr.hpp>",
          "31: #include <sys/types.h>",
          "32: #include <dirent.h>",
          "33: #include <unistd.h>",
          "34: #include <cstdlib>",
          "35: #include <cstring>",
          "36: #include <string>",
          "38: #include \"Exceptions.h\"",
          "39: #include \"Utils.h\"",
          "41: namespace Passenger {",
          "43: using namespace std;",
          "44: using namespace boost;",
          "46: class ServerInstanceDir: public noncopyable {",
          "47: public:",
          "48:  class Generation: public noncopyable {",
          "49:  private:",
          "50:   friend class ServerInstanceDir;",
          "52:   string path;",
          "53:   unsigned int number;",
          "54:   bool owner;",
          "56:   Generation(const string &serverInstanceDir, unsigned int number) {",
          "57:    path = serverInstanceDir + \"/generation-\" + toString(number);",
          "58:    this->number = number;",
          "59:    owner = false;",
          "60:   }",
          "62:   void create(bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid) {",
          "63:    uid_t defaultUid;",
          "64:    gid_t defaultGid;",
          "66:    determineLowestUserAndGroup(defaultUser, defaultUid, defaultGid);",
          "72:    makeDirTree(path, \"u=wxs,g=x,o=x\");",
          "82:    if (geteuid() == 0) {",
          "83:     makeDirTree(path + \"/webserver_private\", \"u=wxs,g=,o=\", workerUid, workerGid);",
          "84:    } else {",
          "85:     makeDirTree(path + \"/webserver_private\", \"u=wxs,g=,o=\");",
          "86:    }",
          "93:    if (geteuid() == 0) {",
          "98:     if (userSwitching) {",
          "99:      makeDirTree(path + \"/master\", \"u=xs,g=,o=\", workerUid, workerGid);",
          "100:     } else {",
          "101:      makeDirTree(path + \"/master\", \"u=xs,g=,o=\", defaultUid, defaultGid);",
          "102:     }",
          "103:    } else {",
          "104:     makeDirTree(path + \"/master\", \"u=wxs,g=,o=\");",
          "105:    }",
          "107:    if (geteuid() == 0) {",
          "108:     if (userSwitching) {",
          "115:      makeDirTree(path + \"/backends\", \"u=wxs,g=wx,o=wx\");",
          "116:     } else {",
          "125:      makeDirTree(path + \"/backends\", \"u=wxs,g=,o=\", defaultUid, defaultGid);",
          "126:     }",
          "127:    } else {",
          "137:     makeDirTree(path + \"/backends\", \"u=wxs,g=,o=\");",
          "138:    }",
          "140:    owner = true;",
          "141:   }",
          "143:  public:",
          "144:   ~Generation() {",
          "145:    if (owner) {",
          "146:     removeDirTree(path);",
          "147:    }",
          "148:   }",
          "150:   unsigned int getNumber() const {",
          "151:    return number;",
          "152:   }",
          "154:   string getPath() const {",
          "155:    return path;",
          "156:   }",
          "157:  };",
          "159:  typedef shared_ptr<Generation> GenerationPtr;",
          "161: private:",
          "162:  string path;",
          "163:  bool owner;",
          "165:  void initialize(const string &path, bool create) {",
          "166:   this->path = path;",
          "167:   owner = create;",
          "168:   if (!create) {",
          "169:    return;",
          "170:   }",
          "191:   makeDirTree(path, \"u=rwxs,g=rx,o=rx\");",
          "198:   string structureVersionFile = path + \"/structure_version.txt\";",
          "200:    S_IRUSR | S_IRGRP | S_IROTH);",
          "201:  }",
          "203: public:",
          "204:  ServerInstanceDir(pid_t webServerPid, const string &parentDir = \"\") {",
          "205:   string theParentDir;",
          "207:   if (parentDir.empty()) {",
          "208:    theParentDir = getSystemTempDir();",
          "209:   } else {",
          "210:    theParentDir = parentDir;",
          "211:   }",
          "212:   initialize(theParentDir + \"/passenger.\" + toString<unsigned long long>(webServerPid),",
          "213:    true);",
          "214:  }",
          "216:  ServerInstanceDir(const string &path) {",
          "217:   initialize(path, false);",
          "218:  }",
          "220:  ~ServerInstanceDir() {",
          "221:   if (owner && getNewestGeneration() == NULL) {",
          "222:    removeDirTree(path);",
          "223:   }",
          "224:  }",
          "226:  string getPath() const {",
          "227:   return path;",
          "228:  }",
          "230:  GenerationPtr newGeneration(bool userSwitching, const string &defaultUser, uid_t workerUid, gid_t workerGid) {",
          "231:   GenerationPtr newestGeneration = getNewestGeneration();",
          "232:   unsigned int newNumber;",
          "233:   if (newestGeneration != NULL) {",
          "234:    newNumber = newestGeneration->getNumber() + 1;",
          "235:   } else {",
          "236:    newNumber = 0;",
          "237:   }",
          "239:   GenerationPtr generation(new Generation(path, newNumber));",
          "240:   generation->create(userSwitching, defaultUser, workerUid, workerGid);",
          "241:   return generation;",
          "242:  }",
          "244:  GenerationPtr getGeneration(unsigned int number) const {",
          "245:   return ptr(new Generation(path, number));",
          "246:  }",
          "248:  GenerationPtr getNewestGeneration() const {",
          "249:   DIR *dir = opendir(path.c_str());",
          "250:   struct dirent *entry;",
          "251:   int result = -1;",
          "253:   if (dir == NULL) {",
          "254:    int e = errno;",
          "255:    throw FileSystemException(\"Cannot open directory \" + path,",
          "256:     e, path);",
          "257:   }",
          "258:   while ((entry = readdir(dir)) != NULL) {",
          "259:    if (entry->d_type == DT_DIR",
          "260:     && strncmp(entry->d_name, \"generation-\", sizeof(\"generation-\") - 1) == 0) {",
          "261:     const char *numberString = entry->d_name + sizeof(\"generation-\") - 1;",
          "262:     int number = atoi(numberString);",
          "263:     if (number >= 0 && number > result) {",
          "264:      result = number;",
          "265:     }",
          "266:    }",
          "267:   }",
          "268:   closedir(dir);",
          "270:   if (result == -1) {",
          "271:    return GenerationPtr();",
          "272:   } else {",
          "273:    return getGeneration(result);",
          "274:   }",
          "275:  }",
          "276: };",
          "278: } // namespace Passenger",
          "",
          "---------------"
        ],
        "ext/common/StaticString.h||ext/common/StaticString.h": [
          "File: ext/common/StaticString.h -> ext/common/StaticString.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   return content;",
          "95:  }",
          "97:  bool equals(const StaticString &other) const {",
          "98:   return len == other.len && memcmp(content, other.content, len) == 0;",
          "99:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:  string toString() const {",
          "98:   return string(content, len);",
          "99:  }",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: }",
          "106: FileType",
          "108:  struct stat buf;",
          "109:  int ret;",
          "111:  if (cstat != NULL) {",
          "113:  } else {",
          "115:  }",
          "116:  if (ret == 0) {",
          "117:   if (S_ISREG(buf.st_mode)) {",
          "",
          "[Removed Lines]",
          "107: getFileType(const char *filename, CachedFileStat *cstat, unsigned int throttleRate) {",
          "112:   ret = cstat->stat(filename, &buf, throttleRate);",
          "114:   ret = stat(filename, &buf);",
          "",
          "[Added Lines]",
          "107: getFileType(const StaticString &filename, CachedFileStat *cstat, unsigned int throttleRate) {",
          "112:   ret = cstat->stat(filename.toString(), &buf, throttleRate);",
          "114:   ret = stat(filename.c_str(), &buf);",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "185: FileType getFileType(const char *filename, CachedFileStat *cstat = 0,",
          "",
          "[Added Lines]",
          "185: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
          "",
          "---------------"
        ],
        "test/ServerInstanceDirTest.cpp||test/ServerInstanceDirTest.cpp": [
          "File: test/ServerInstanceDirTest.cpp -> test/ServerInstanceDirTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"tut.h\"",
          "2: #include \"support/Support.h\"",
          "3: #include \"ServerInstanceDir.h\"",
          "5: using namespace Passenger;",
          "6: using namespace std;",
          "7: using namespace Test;",
          "9: namespace tut {",
          "10:  struct ServerInstanceDirTest {",
          "11:   string parentDir;",
          "12:   TempDir tmpDir;",
          "14:   ServerInstanceDirTest(): tmpDir(\"server_instance_dir_test.tmp\") {",
          "15:    parentDir = \"server_instance_dir_test.tmp\";",
          "16:   }",
          "18:   void createGenerationDir(const string &instanceDir, unsigned int number) {",
          "19:    string command = \"mkdir \" + instanceDir + \"/generation-\" + toString(number);",
          "20:    system(command.c_str());",
          "21:   }",
          "22:  };",
          "24:  DEFINE_TEST_GROUP(ServerInstanceDirTest);",
          "26:  TEST_METHOD(1) {",
          "30:   ServerInstanceDir dir(1234, parentDir);",
          "31:   vector<string> contents = listDir(parentDir);",
          "32:   ensure_equals(contents.size(), 1u);",
          "33:   ensure_equals(contents[0], \"passenger.1234\");",
          "34:  }",
          "36:  TEST_METHOD(2) {",
          "40:   ServerInstanceDir dir(1234, parentDir);",
          "41:   ServerInstanceDir dir2(dir.getPath());",
          "42:   ServerInstanceDir dir3(parentDir + \"/foo\");",
          "43:   ensure_equals(dir2.getPath(), dir.getPath());",
          "44:   ensure_equals(dir3.getPath(), parentDir + \"/foo\");",
          "45:   ensure_equals(getFileType(dir3.getPath()), FT_NONEXISTANT);",
          "46:  }",
          "48:  TEST_METHOD(3) {",
          "52:   {",
          "53:    ServerInstanceDir dir(1234, parentDir);",
          "54:   }",
          "55:   ensure_equals(listDir(parentDir).size(), 0u);",
          "57:   {",
          "58:    ServerInstanceDir dir(1234, parentDir);",
          "59:    createGenerationDir(dir.getPath(), 1);",
          "60:   }",
          "61:   ensure_equals(listDir(parentDir).size(), 1u);",
          "62:  }",
          "64:  TEST_METHOD(4) {",
          "67:   ServerInstanceDir dir(1234, parentDir);",
          "68:   {",
          "69:    ServerInstanceDir dir2(dir.getPath());",
          "70:   }",
          "71:   ensure_equals(getFileType(dir.getPath()), FT_DIRECTORY);",
          "72:  }",
          "74:  TEST_METHOD(5) {",
          "77:   ServerInstanceDir dir(1234, parentDir);",
          "78:   unsigned int ncontents = listDir(dir.getPath()).size();",
          "79:   ServerInstanceDir::GenerationPtr generation = dir.newGeneration(true, \"nobody\", 0, 0);",
          "81:   ensure_equals(generation->getNumber(), 0u);",
          "82:   ensure_equals(getFileType(generation->getPath()), FT_DIRECTORY);",
          "83:   ensure_equals(listDir(dir.getPath()).size(), ncontents + 1);",
          "84:  }",
          "86:  TEST_METHOD(6) {",
          "89:   ServerInstanceDir dir(1234, parentDir);",
          "90:   ServerInstanceDir::GenerationPtr generation = dir.newGeneration(true, \"nobody\", 0, 0);",
          "91:   string path = generation->getPath();",
          "92:   generation.reset();",
          "93:   ensure_equals(getFileType(path), FT_NONEXISTANT);",
          "94:  }",
          "96:  TEST_METHOD(7) {",
          "98:   ServerInstanceDir dir(1234, parentDir);",
          "99:   ServerInstanceDir::GenerationPtr generation0 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "100:   ServerInstanceDir::GenerationPtr generation1 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "101:   ServerInstanceDir::GenerationPtr generation2 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "102:   ServerInstanceDir::GenerationPtr generation3 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "104:   generation2.reset();",
          "105:   ensure_equals(dir.getNewestGeneration()->getNumber(), 3u);",
          "106:   generation3.reset();",
          "107:   ensure_equals(dir.getNewestGeneration()->getNumber(), 1u);",
          "108:  }",
          "110:  TEST_METHOD(8) {",
          "112:   ServerInstanceDir dir(1234, parentDir);",
          "113:   ensure(dir.getNewestGeneration() == NULL);",
          "114:  }",
          "116:  TEST_METHOD(9) {",
          "119:   ServerInstanceDir dir(1234, parentDir);",
          "120:   ServerInstanceDir::GenerationPtr generation = dir.newGeneration(true, \"nobody\", 0, 0);",
          "121:   ServerInstanceDir::GenerationPtr newestGeneration = dir.getNewestGeneration();",
          "122:   newestGeneration.reset();",
          "123:   ensure_equals(getFileType(generation->getPath()), FT_DIRECTORY);",
          "124:  }",
          "126:  TEST_METHOD(10) {",
          "128:   ServerInstanceDir dir(1234, parentDir);",
          "129:   ServerInstanceDir::GenerationPtr generation0 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "130:   ServerInstanceDir::GenerationPtr generation1 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "131:   ServerInstanceDir::GenerationPtr generation2 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "132:   ServerInstanceDir::GenerationPtr generation3 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "134:   ensure_equals(dir.getGeneration(0)->getNumber(), 0u);",
          "135:   ensure_equals(dir.getGeneration(3)->getNumber(), 3u);",
          "136:  }",
          "138:  TEST_METHOD(11) {",
          "141:   ServerInstanceDir dir(1234, parentDir);",
          "142:   ServerInstanceDir::GenerationPtr generation0 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "143:   ServerInstanceDir::GenerationPtr generation1 = dir.newGeneration(true, \"nobody\", 0, 0);",
          "145:   dir.getGeneration(0).reset();",
          "146:   dir.getGeneration(1).reset();",
          "147:   ensure_equals(getFileType(generation0->getPath()), FT_DIRECTORY);",
          "148:   ensure_equals(getFileType(generation1->getPath()), FT_DIRECTORY);",
          "149:  }",
          "150: }",
          "",
          "---------------"
        ],
        "test/UtilsTest.cpp||test/UtilsTest.cpp": [
          "File: test/UtilsTest.cpp -> test/UtilsTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <sys/types.h>",
          "5: #include <sys/stat.h>",
          "6: #include <stdio.h>",
          "8: #include <unistd.h>",
          "9: #include <limits.h>",
          "10: #include <string.h>",
          "",
          "[Removed Lines]",
          "7: #include <dirent.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   }",
          "34:  };",
          "51:  DEFINE_TEST_GROUP(UtilsTest);",
          "",
          "[Removed Lines]",
          "36:  static vector<string>",
          "37:  listDir(const char *path) {",
          "38:   vector<string> result;",
          "39:   DIR *d = opendir(path);",
          "40:   struct dirent *ent;",
          "42:   while ((ent = readdir(d)) != NULL) {",
          "43:    if (strcmp(ent->d_name, \".\") == 0 || strcmp(ent->d_name, \"..\") == 0) {",
          "44:     continue;",
          "45:    }",
          "46:    result.push_back(ent->d_name);",
          "47:   }",
          "48:   return result;",
          "49:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/support/Support.cpp||test/support/Support.cpp": [
          "File: test/support/Support.cpp -> test/support/Support.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <unistd.h>",
          "2: #include \"Support.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <dirent.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  }",
          "82: }",
          "84: } // namespace Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: vector<string>",
          "86: listDir(const string &path) {",
          "87:  vector<string> result;",
          "88:  DIR *d = opendir(path.c_str());",
          "89:  struct dirent *ent;",
          "91:  if (d == NULL) {",
          "92:   int e = errno;",
          "93:   throw FileSystemException(\"Cannot open directory \" + path,",
          "94:    e, path);",
          "95:  }",
          "96:  while ((ent = readdir(d)) != NULL) {",
          "97:   if (strcmp(ent->d_name, \".\") == 0 || strcmp(ent->d_name, \"..\") == 0) {",
          "98:    continue;",
          "99:   }",
          "100:   result.push_back(ent->d_name);",
          "101:  }",
          "102:  return result;",
          "103: }",
          "",
          "---------------"
        ],
        "test/support/Support.h||test/support/Support.h": [
          "File: test/support/Support.h -> test/support/Support.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <sys/types.h>",
          "6: #include <iostream>",
          "7: #include <string>",
          "8: #include <exception>",
          "9: #include <cstdio>",
          "10: #include <cerrno>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include <vector>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: void touchFile(const char *filename, time_t timestamp = (time_t) - 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: vector<string> listDir(const string &path);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34b1087870c2bf85ebfd72c30b78577e10ab9744",
      "candidate_info": {
        "commit_hash": "34b1087870c2bf85ebfd72c30b78577e10ab9744",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/34b1087870c2",
        "files": [
          "NEWS",
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h"
        ],
        "message": "Fix low-urgency security vulnerability: writing files to arbitrary directory by hijacking temp directories.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   if (owner) {",
          "217:    case FT_NONEXISTANT:",
          "218:     createDirectory(path);",
          "219:     break;",
          "",
          "[Removed Lines]",
          "216:    switch (getFileType(path)) {",
          "",
          "[Added Lines]",
          "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  }",
          "144: }",
          "146: void",
          "147: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
          "148:  gid_t group, bool overwrite)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: FileType",
          "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
          "148:  struct stat buf;",
          "149:  int ret;",
          "151:  ret = lstat(filename.c_str(), &buf);",
          "152:  if (ret == 0) {",
          "153:   if (S_ISREG(buf.st_mode)) {",
          "154:    return FT_REGULAR;",
          "155:   } else if (S_ISDIR(buf.st_mode)) {",
          "156:    return FT_DIRECTORY;",
          "157:   } else if (S_ISLNK(buf.st_mode)) {",
          "158:    return FT_SYMLINK;",
          "159:   } else {",
          "160:    return FT_OTHER;",
          "161:   }",
          "162:  } else {",
          "163:   if (errno == ENOENT) {",
          "164:    return FT_NONEXISTANT;",
          "165:   } else {",
          "166:    int e = errno;",
          "167:    string message(\"Cannot lstat '\");",
          "168:    message.append(filename);",
          "169:    message.append(\"'\");",
          "170:    throw FileSystemException(message, e, filename);",
          "171:   }",
          "172:  }",
          "173: }",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  FT_REGULAR,",
          "67:  FT_DIRECTORY,",
          "69:  FT_OTHER",
          "70: } FileType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:  FT_SYMLINK,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
          "123:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
          "",
          "---------------"
        ]
      }
    }
  ]
}