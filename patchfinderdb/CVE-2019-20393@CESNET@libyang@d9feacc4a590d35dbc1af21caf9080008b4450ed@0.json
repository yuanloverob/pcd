{
  "cve_id": "CVE-2019-20393",
  "cve_desc": "A double-free is present in libyang before v1.0-r1 in the function yyparse() when an empty description is used. Applications that use libyang to parse untrusted input yang files may be vulnerable to this flaw, which would cause a crash or potentially code execution.",
  "repo": "CESNET/libyang",
  "patch_hash": "d9feacc4a590d35dbc1af21caf9080008b4450ed",
  "patch_info": {
    "commit_hash": "d9feacc4a590d35dbc1af21caf9080008b4450ed",
    "repo": "CESNET/libyang",
    "commit_url": "https://github.com/CESNET/libyang/commit/d9feacc4a590d35dbc1af21caf9080008b4450ed",
    "files": [
      "src/parser_yang.c",
      "src/parser_yang.h",
      "src/parser_yang_bis.c",
      "src/yang.y.in"
    ],
    "message": "yang parser BUGFIX double free\n\nFixes #742",
    "before_after_code_files": [
      "src/parser_yang.c||src/parser_yang.c",
      "src/parser_yang.h||src/parser_yang.h",
      "src/parser_yang_bis.c||src/parser_yang_bis.c",
      "src/yang.y.in||src/yang.y.in"
    ]
  },
  "patch_diff": {
    "src/parser_yang.c||src/parser_yang.c": [
      "File: src/parser_yang.c -> src/parser_yang.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4764: int",
      "4765: yang_read_extcomplex_str(struct lys_module *module, struct lys_ext_instance_complex *ext, const char *arg_name,",
      "4767: {",
      "4768:     int c;",
      "4769:     const char **str, ***p = NULL;",
      "",
      "[Removed Lines]",
      "4766:                          const char *parent_name, char *value, int parent_stmt, LY_STMT stmt)",
      "",
      "[Added Lines]",
      "4766:                          const char *parent_name, char **value, int parent_stmt, LY_STMT stmt)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4782:             for (c = 0; p[0][c + 1]; c++);",
      "4783:             str = p[1];",
      "4784:         }",
      "4786:     }  else {",
      "4787:         str = lys_ext_complex_get_substmt(stmt, ext, &info);",
      "4788:         if (!str) {",
      "",
      "[Removed Lines]",
      "4785:         str[c] = lydict_insert_zc(module->ctx, value);",
      "",
      "[Added Lines]",
      "4785:         str[c] = lydict_insert_zc(module->ctx, *value);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4819:             str = p[0];",
      "4820:         }",
      "4825:         if (c) {",
      "",
      "[Removed Lines]",
      "4822:         str[c] = lydict_insert_zc(module->ctx, value);",
      "4823:         value = NULL;",
      "",
      "[Added Lines]",
      "4823:         str[c] = lydict_insert_zc(module->ctx, *value);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4862:     return EXIT_SUCCESS;",
      "4864: error:",
      "4866:     return EXIT_FAILURE;",
      "4867: }",
      "",
      "[Removed Lines]",
      "4865:     free(value);",
      "",
      "[Added Lines]",
      "4866:     free(*value);",
      "",
      "---------------"
    ],
    "src/parser_yang.h||src/parser_yang.h": [
      "File: src/parser_yang.h -> src/parser_yang.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "174:                             void *parent, struct unres_schema *unres);",
      "176: int yang_read_extcomplex_str(struct lys_module *module, struct lys_ext_instance_complex *ext, const char *arg_name,",
      "179: void **yang_getplace_for_extcomplex_struct(struct lys_ext_instance_complex *ext, int *index,",
      "180:                                     char *parent_name, char *node_name, LY_STMT stmt);",
      "",
      "[Removed Lines]",
      "177:                              const char *parent_name, char *value, int parent_stmt, LY_STMT stmt);",
      "",
      "[Added Lines]",
      "177:                              const char *parent_name, char **value, int parent_stmt, LY_STMT stmt);",
      "",
      "---------------"
    ],
    "src/parser_yang_bis.c||src/parser_yang_bis.c": [
      "File: src/parser_yang_bis.c -> src/parser_yang_bis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3436:     { (yyval.token) = actual_type;",
      "3437:                                          if (is_ext_instance) {",
      "3439:                                                                         0, LY_STMT_BELONGSTO)) {",
      "3440:                                              YYABORT;",
      "3441:                                            }",
      "",
      "[Removed Lines]",
      "3438:                                            if (yang_read_extcomplex_str(trg, ext_instance, \"belongs-to\", ext_name, s,",
      "",
      "[Added Lines]",
      "3438:                                            if (yang_read_extcomplex_str(trg, ext_instance, \"belongs-to\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3461:   case 48:",
      "3463:     { if (is_ext_instance) {",
      "3465:                                                       LY_STMT_BELONGSTO, LY_STMT_PREFIX)) {",
      "3466:                            YYABORT;",
      "3467:                          }",
      "",
      "[Removed Lines]",
      "3464:                          if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", \"belongs-to\", s,",
      "",
      "[Added Lines]",
      "3464:                          if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", \"belongs-to\", &s,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3803:     { (yyval.token) = actual_type;",
      "3804:                                    if (is_ext_instance) {",
      "3806:                                                                   0, LY_STMT_ARGUMENT)) {",
      "3807:                                        YYABORT;",
      "3808:                                      }",
      "",
      "[Removed Lines]",
      "3805:                                      if (yang_read_extcomplex_str(trg, ext_instance, \"argument\", ext_name, s,",
      "",
      "[Added Lines]",
      "3805:                                      if (yang_read_extcomplex_str(trg, ext_instance, \"argument\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "8443:   case 792:",
      "8446:                                                                   0, LY_STMT_PREFIX)) {",
      "8447:                                        YYABORT;",
      "8448:                                      }",
      "",
      "[Removed Lines]",
      "8445:     { if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, s,",
      "",
      "[Added Lines]",
      "8445:     { if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "8453:   case 793:",
      "8456:                                                                        0, LY_STMT_DESCRIPTION)) {",
      "8457:                                             YYABORT;",
      "8458:                                           }",
      "",
      "[Removed Lines]",
      "8455:     { if (yang_read_extcomplex_str(trg, ext_instance, \"description\", ext_name, s,",
      "",
      "[Added Lines]",
      "8455:     { if (yang_read_extcomplex_str(trg, ext_instance, \"description\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "8463:   case 794:",
      "8466:                                                                      0, LY_STMT_REFERENCE)) {",
      "8467:                                           YYABORT;",
      "8468:                                         }",
      "",
      "[Removed Lines]",
      "8465:     { if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, s,",
      "",
      "[Added Lines]",
      "8465:     { if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "8473:   case 795:",
      "8476:                                                                      0, LY_STMT_UNITS)) {",
      "8477:                                       YYABORT;",
      "8478:                                     }",
      "",
      "[Removed Lines]",
      "8475:     { if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, s,",
      "",
      "[Added Lines]",
      "8475:     { if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "8483:   case 796:",
      "8486:                                                                 0, LY_STMT_BASE)) {",
      "8487:                                      YYABORT;",
      "8488:                                    }",
      "",
      "[Removed Lines]",
      "8485:     { if (yang_read_extcomplex_str(trg, ext_instance, \"base\", ext_name, s,",
      "",
      "[Added Lines]",
      "8485:     { if (yang_read_extcomplex_str(trg, ext_instance, \"base\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "8493:   case 797:",
      "8496:                                                                      0, LY_STMT_CONTACT)) {",
      "8497:                                         YYABORT;",
      "8498:                                       }",
      "",
      "[Removed Lines]",
      "8495:     { if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, s,",
      "",
      "[Added Lines]",
      "8495:     { if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "8503:   case 798:",
      "8506:                                                                      0, LY_STMT_DEFAULT)) {",
      "8507:                                         YYABORT;",
      "8508:                                       }",
      "",
      "[Removed Lines]",
      "8505:     { if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, s,",
      "",
      "[Added Lines]",
      "8505:     { if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "8513:   case 799:",
      "8516:                                                                          0, LY_STMT_ERRMSG)) {",
      "8517:                                               YYABORT;",
      "8518:                                             }",
      "",
      "[Removed Lines]",
      "8515:     { if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, s,",
      "",
      "[Added Lines]",
      "8515:     { if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "8523:   case 800:",
      "8526:                                                                          0, LY_STMT_ERRTAG)) {",
      "8527:                                               YYABORT;",
      "8528:                                             }",
      "",
      "[Removed Lines]",
      "8525:     { if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, s,",
      "",
      "[Added Lines]",
      "8525:     { if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "8533:   case 801:",
      "8536:                                                                0, LY_STMT_KEY)) {",
      "8537:                                     YYABORT;",
      "8538:                                   }",
      "",
      "[Removed Lines]",
      "8535:     { if (yang_read_extcomplex_str(trg, ext_instance, \"key\", ext_name, s,",
      "",
      "[Added Lines]",
      "8535:     { if (yang_read_extcomplex_str(trg, ext_instance, \"key\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "8543:   case 802:",
      "8546:                                                                      0, LY_STMT_NAMESPACE)) {",
      "8547:                                           YYABORT;",
      "8548:                                         }",
      "",
      "[Removed Lines]",
      "8545:     { if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, s,",
      "",
      "[Added Lines]",
      "8545:     { if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "8553:   case 803:",
      "8556:                                                                         0, LY_STMT_ORGANIZATION)) {",
      "8557:                                              YYABORT;",
      "8558:                                            }",
      "",
      "[Removed Lines]",
      "8555:     { if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, s,",
      "",
      "[Added Lines]",
      "8555:     { if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "8563:   case 804:",
      "8566:                                                                 0, LY_STMT_PATH)) {",
      "8567:                                      YYABORT;",
      "8568:                                    }",
      "",
      "[Removed Lines]",
      "8565:     { if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, s,",
      "",
      "[Added Lines]",
      "8565:     { if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "8573:   case 805:",
      "8576:                                                                     0, LY_STMT_PRESENCE)) {",
      "8577:                                          YYABORT;",
      "8578:                                        }",
      "",
      "[Removed Lines]",
      "8575:     { if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, s,",
      "",
      "[Added Lines]",
      "8575:     { if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "8583:   case 806:",
      "8586:                                                                          0, LY_STMT_REVISIONDATE)) {",
      "8587:                                               YYABORT;",
      "8588:                                             }",
      "",
      "[Removed Lines]",
      "8585:     { if (yang_read_extcomplex_str(trg, ext_instance, \"revision-date\", ext_name, s,",
      "",
      "[Added Lines]",
      "8585:     { if (yang_read_extcomplex_str(trg, ext_instance, \"revision-date\", ext_name, &s,",
      "",
      "---------------"
    ],
    "src/yang.y.in||src/yang.y.in": [
      "File: src/yang.y.in -> src/yang.y.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "614: belongs_to_arg_str: identifier_arg_str { $$ = actual_type;",
      "615:                                          if (is_ext_instance) {",
      "617:                                                                         0, LY_STMT_BELONGSTO)) {",
      "618:                                              YYABORT;",
      "619:                                            }",
      "",
      "[Removed Lines]",
      "616:                                            if (yang_read_extcomplex_str(trg, ext_instance, \"belongs-to\", ext_name, s,",
      "",
      "[Added Lines]",
      "616:                                            if (yang_read_extcomplex_str(trg, ext_instance, \"belongs-to\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "638:                  '{' stmtsep",
      "639:                      prefix_stmt",
      "640:                  '}' { if (is_ext_instance) {",
      "642:                                                       LY_STMT_BELONGSTO, LY_STMT_PREFIX)) {",
      "643:                            YYABORT;",
      "644:                          }",
      "",
      "[Removed Lines]",
      "641:                          if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", \"belongs-to\", s,",
      "",
      "[Added Lines]",
      "641:                          if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", \"belongs-to\", &s,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "910: argument_str: identifier_arg_str { $$ = actual_type;",
      "911:                                    if (is_ext_instance) {",
      "913:                                                                   0, LY_STMT_ARGUMENT)) {",
      "914:                                        YYABORT;",
      "915:                                      }",
      "",
      "[Removed Lines]",
      "912:                                      if (yang_read_extcomplex_str(trg, ext_instance, \"argument\", ext_name, s,",
      "",
      "[Added Lines]",
      "912:                                      if (yang_read_extcomplex_str(trg, ext_instance, \"argument\", ext_name, &s,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4545:                                 $$ = 0;",
      "4546:                               }",
      "4547:   |  ext_substatements belongs_to_stmt stmtsep",
      "4549:                                                                   0, LY_STMT_PREFIX)) {",
      "4550:                                        YYABORT;",
      "4551:                                      }",
      "4552:                                    }",
      "4554:                                                                        0, LY_STMT_DESCRIPTION)) {",
      "4555:                                             YYABORT;",
      "4556:                                           }",
      "4557:                                         }",
      "4559:                                                                      0, LY_STMT_REFERENCE)) {",
      "4560:                                           YYABORT;",
      "4561:                                         }",
      "4562:                                       }",
      "4564:                                                                      0, LY_STMT_UNITS)) {",
      "4565:                                       YYABORT;",
      "4566:                                     }",
      "4567:                                   }",
      "4569:                                                                 0, LY_STMT_BASE)) {",
      "4570:                                      YYABORT;",
      "4571:                                    }",
      "4572:                                  }",
      "4574:                                                                      0, LY_STMT_CONTACT)) {",
      "4575:                                         YYABORT;",
      "4576:                                       }",
      "4577:                                     }",
      "4579:                                                                      0, LY_STMT_DEFAULT)) {",
      "4580:                                         YYABORT;",
      "4581:                                       }",
      "4582:                                     }",
      "4584:                                                                          0, LY_STMT_ERRMSG)) {",
      "4585:                                               YYABORT;",
      "4586:                                             }",
      "4587:                                           }",
      "4589:                                                                          0, LY_STMT_ERRTAG)) {",
      "4590:                                               YYABORT;",
      "4591:                                             }",
      "4592:                                           }",
      "4594:                                                                0, LY_STMT_KEY)) {",
      "4595:                                     YYABORT;",
      "4596:                                   }",
      "4597:                                 }",
      "4599:                                                                      0, LY_STMT_NAMESPACE)) {",
      "4600:                                           YYABORT;",
      "4601:                                         }",
      "4602:                                       }",
      "4604:                                                                         0, LY_STMT_ORGANIZATION)) {",
      "4605:                                              YYABORT;",
      "4606:                                            }",
      "4607:                                          }",
      "4609:                                                                 0, LY_STMT_PATH)) {",
      "4610:                                      YYABORT;",
      "4611:                                    }",
      "4612:                                  }",
      "4614:                                                                     0, LY_STMT_PRESENCE)) {",
      "4615:                                          YYABORT;",
      "4616:                                        }",
      "4617:                                      }",
      "4619:                                                                          0, LY_STMT_REVISIONDATE)) {",
      "4620:                                               YYABORT;",
      "4621:                                             }",
      "",
      "[Removed Lines]",
      "4548:   |  ext_substatements prefix_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, s,",
      "4553:   |  ext_substatements description_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"description\", ext_name, s,",
      "4558:   |  ext_substatements reference_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, s,",
      "4563:   |  ext_substatements units_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, s,",
      "4568:   |  ext_substatements base_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"base\", ext_name, s,",
      "4573:   |  ext_substatements contact_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, s,",
      "4578:   |  ext_substatements default_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, s,",
      "4583:   |  ext_substatements error_message_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, s,",
      "4588:   |  ext_substatements error_app_tag_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, s,",
      "4593:   |  ext_substatements key_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"key\", ext_name, s,",
      "4598:   |  ext_substatements namespace_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, s,",
      "4603:   |  ext_substatements organization_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, s,",
      "4608:   |  ext_substatements path_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, s,",
      "4613:   |  ext_substatements presence_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, s,",
      "4618:   |  ext_substatements revision_date_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"revision-date\", ext_name, s,",
      "",
      "[Added Lines]",
      "4548:   |  ext_substatements prefix_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, &s,",
      "4553:   |  ext_substatements description_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"description\", ext_name, &s,",
      "4558:   |  ext_substatements reference_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, &s,",
      "4563:   |  ext_substatements units_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, &s,",
      "4568:   |  ext_substatements base_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"base\", ext_name, &s,",
      "4573:   |  ext_substatements contact_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, &s,",
      "4578:   |  ext_substatements default_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, &s,",
      "4583:   |  ext_substatements error_message_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, &s,",
      "4588:   |  ext_substatements error_app_tag_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, &s,",
      "4593:   |  ext_substatements key_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"key\", ext_name, &s,",
      "4598:   |  ext_substatements namespace_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, &s,",
      "4603:   |  ext_substatements organization_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, &s,",
      "4608:   |  ext_substatements path_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, &s,",
      "4613:   |  ext_substatements presence_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, &s,",
      "4618:   |  ext_substatements revision_date_stmt { if (yang_read_extcomplex_str(trg, ext_instance, \"revision-date\", ext_name, &s,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d4c01738f9a79df88899bb688cc21ae685c41e8",
      "candidate_info": {
        "commit_hash": "7d4c01738f9a79df88899bb688cc21ae685c41e8",
        "repo": "CESNET/libyang",
        "commit_url": "https://github.com/CESNET/libyang/commit/7d4c01738f9a79df88899bb688cc21ae685c41e8",
        "files": [
          "src/parser_yang.c",
          "src/parser_yang_bis.c",
          "src/parser_yang_bis.h",
          "src/parser_yin.c",
          "src/yang.y.in"
        ],
        "message": "parser BUGFIX handle non-matching module and file name with invalid import\n\nFixes #1006",
        "before_after_code_files": [
          "src/parser_yang.c||src/parser_yang.c",
          "src/parser_yang_bis.c||src/parser_yang_bis.c",
          "src/parser_yang_bis.h||src/parser_yang_bis.h",
          "src/parser_yin.c||src/parser_yin.c",
          "src/yang.y.in||src/yang.y.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/parser_yang.c||src/parser_yang.c",
            "src/parser_yang_bis.c||src/parser_yang_bis.c",
            "src/yang.y.in||src/yang.y.in"
          ],
          "candidate": [
            "src/parser_yang.c||src/parser_yang.c",
            "src/parser_yang_bis.c||src/parser_yang_bis.c",
            "src/yang.y.in||src/yang.y.in"
          ]
        }
      },
      "candidate_diff": {
        "src/parser_yang.c||src/parser_yang.c": [
          "File: src/parser_yang.c -> src/parser_yang.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: yang_read_common(struct lys_module *module, char *value, enum yytokentype type)",
          "50: {",
          "51:     int ret = 0;",
          "53:     switch (type) {",
          "54:     case MODULE_KEYWORD:",
          "55:         module->name = lydict_insert_zc(module->ctx, value);",
          "56:         break;",
          "57:     case NAMESPACE_KEYWORD:",
          "58:         ret = yang_check_string(module, &module->ns, \"namespace\", \"module\", value, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     uint8_t i;",
          "60:         for (i = 0; i < module->ctx->models.parsing_sub_modules_count; ++i) {",
          "61:             if (module->ctx->models.parsing_sub_modules[i] == module) {",
          "63:                 continue;",
          "64:             }",
          "66:             if (!strcmp(module->ctx->models.parsing_sub_modules[i]->name, module->name)) {",
          "67:                 LOGVAL(module->ctx, LYE_CIRC_IMPORTS, LY_VLOG_NONE, NULL, module->name);",
          "68:                 ret = EXIT_FAILURE;",
          "69:                 break;",
          "70:             }",
          "71:         }",
          "",
          "---------------"
        ],
        "src/parser_yang_bis.c||src/parser_yang_bis.c": [
          "File: src/parser_yang_bis.c -> src/parser_yang_bis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2019 Free Software Foundation,",
          "6:    Inc.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: #define YYBISON 1",
          "53: #define YYSKELETON_NAME \"yacc.c\"",
          "",
          "[Removed Lines]",
          "50: #define YYBISON_VERSION \"3.2.4\"",
          "",
          "[Added Lines]",
          "51: #define YYBISON_VERSION \"3.5\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105: # ifndef YY_NULLPTR",
          "106: #  if defined __cplusplus",
          "107: #   if 201103L <= __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: # ifndef YY_CAST",
          "106: #  ifdef __cplusplus",
          "107: #   define YY_CAST(Type, Val) static_cast<Type> (Val)",
          "108: #   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)",
          "109: #  else",
          "110: #   define YY_CAST(Type, Val) ((Type) (Val))",
          "111: #   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))",
          "112: #  endif",
          "113: # endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "314: # undef short",
          "315: #endif",
          "321: #endif",
          "325: #else",
          "326: typedef signed char yytype_int8;",
          "327: #endif",
          "331: #else",
          "333: #endif",
          "337: #else",
          "339: #endif",
          "341: #ifndef YYSIZE_T",
          "",
          "[Removed Lines]",
          "317: #ifdef YYTYPE_UINT8",
          "318: typedef YYTYPE_UINT8 yytype_uint8;",
          "319: #else",
          "320: typedef unsigned char yytype_uint8;",
          "323: #ifdef YYTYPE_INT8",
          "324: typedef YYTYPE_INT8 yytype_int8;",
          "329: #ifdef YYTYPE_UINT16",
          "330: typedef YYTYPE_UINT16 yytype_uint16;",
          "332: typedef unsigned short yytype_uint16;",
          "335: #ifdef YYTYPE_INT16",
          "336: typedef YYTYPE_INT16 yytype_int16;",
          "338: typedef short yytype_int16;",
          "",
          "[Added Lines]",
          "325:    <limits.h> and (if available) <stdint.h> are included",
          "328: #ifndef __PTRDIFF_MAX__",
          "330: # if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__",
          "332: #  define YY_STDINT_H",
          "333: # endif",
          "337:    signed or unsigned integer of at least N bits.  In tables they can",
          "338:    save space and decrease cache pressure.  Promoting to a signed type",
          "341: #ifdef __INT_LEAST8_MAX__",
          "342: typedef __INT_LEAST8_TYPE__ yytype_int8;",
          "343: #elif defined YY_STDINT_H",
          "344: typedef int_least8_t yytype_int8;",
          "349: #ifdef __INT_LEAST16_MAX__",
          "350: typedef __INT_LEAST16_TYPE__ yytype_int16;",
          "351: #elif defined YY_STDINT_H",
          "352: typedef int_least16_t yytype_int16;",
          "354: typedef short yytype_int16;",
          "357: #if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__",
          "358: typedef __UINT_LEAST8_TYPE__ yytype_uint8;",
          "359: #elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \\",
          "360:        && UINT_LEAST8_MAX <= INT_MAX)",
          "361: typedef uint_least8_t yytype_uint8;",
          "362: #elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX",
          "363: typedef unsigned char yytype_uint8;",
          "365: typedef short yytype_uint8;",
          "366: #endif",
          "368: #if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__",
          "369: typedef __UINT_LEAST16_TYPE__ yytype_uint16;",
          "370: #elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \\",
          "371:        && UINT_LEAST16_MAX <= INT_MAX)",
          "372: typedef uint_least16_t yytype_uint16;",
          "373: #elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX",
          "374: typedef unsigned short yytype_uint16;",
          "375: #else",
          "376: typedef int yytype_uint16;",
          "377: #endif",
          "379: #ifndef YYPTRDIFF_T",
          "380: # if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__",
          "381: #  define YYPTRDIFF_T __PTRDIFF_TYPE__",
          "382: #  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__",
          "383: # elif defined PTRDIFF_MAX",
          "384: #  ifndef ptrdiff_t",
          "386: #  endif",
          "387: #  define YYPTRDIFF_T ptrdiff_t",
          "388: #  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX",
          "389: # else",
          "390: #  define YYPTRDIFF_T long",
          "391: #  define YYPTRDIFF_MAXIMUM LONG_MAX",
          "392: # endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343: #  define YYSIZE_T __SIZE_TYPE__",
          "344: # elif defined size_t",
          "345: #  define YYSIZE_T size_t",
          "348: #  define YYSIZE_T size_t",
          "349: # else",
          "",
          "[Removed Lines]",
          "346: # elif ! defined YYSIZE_T",
          "",
          "[Added Lines]",
          "400: # elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "351: # endif",
          "352: #endif",
          "356: #ifndef YY_",
          "357: # if defined YYENABLE_NLS && YYENABLE_NLS",
          "",
          "[Removed Lines]",
          "354: #define YYSIZE_MAXIMUM ((YYSIZE_T) -1)",
          "",
          "[Added Lines]",
          "408: #define YYSIZE_MAXIMUM                                  \\",
          "409:   YY_CAST (YYPTRDIFF_T,                                 \\",
          "410:            (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \\",
          "411:             ? YYPTRDIFF_MAXIMUM                         \\",
          "412:             : YY_CAST (YYSIZE_T, -1)))",
          "414: #define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))",
          "417: typedef yytype_int16 yy_state_t;",
          "420: typedef int yy_state_fast_t;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "365: # endif",
          "366: #endif",
          "373: # else",
          "375: # endif",
          "376: #endif",
          "382: #ifndef YY_ATTRIBUTE_UNUSED",
          "384: #endif",
          "",
          "[Removed Lines]",
          "368: #ifndef YY_ATTRIBUTE",
          "369: # if (defined __GNUC__                                               \\",
          "370:       && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\",
          "371:      || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C",
          "372: #  define YY_ATTRIBUTE(Spec) __attribute__(Spec)",
          "378: #ifndef YY_ATTRIBUTE_PURE",
          "379: # define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))",
          "380: #endif",
          "383: # define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))",
          "",
          "[Added Lines]",
          "434: #ifndef YY_ATTRIBUTE_PURE",
          "435: # if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)",
          "436: #  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))",
          "438: #  define YY_ATTRIBUTE_PURE",
          "443: # if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)",
          "444: #  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))",
          "445: # else",
          "446: #  define YY_ATTRIBUTE_UNUSED",
          "447: # endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "393: #if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__",
          "398:     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")",
          "400:     _Pragma (\"GCC diagnostic pop\")",
          "401: #else",
          "402: # define YY_INITIAL_VALUE(Value) Value",
          "",
          "[Removed Lines]",
          "395: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\",
          "396:     _Pragma (\"GCC diagnostic push\") \\",
          "397:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\",
          "399: # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\",
          "",
          "[Added Lines]",
          "459: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \\",
          "460:     _Pragma (\"GCC diagnostic push\")                                     \\",
          "461:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")              \\",
          "463: # define YY_IGNORE_MAYBE_UNINITIALIZED_END      \\",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410: #endif",
          "413: #if ! defined yyoverflow || YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476: #if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__",
          "477: # define YY_IGNORE_USELESS_CAST_BEGIN                          \\",
          "478:     _Pragma (\"GCC diagnostic push\")                            \\",
          "479:     _Pragma (\"GCC diagnostic ignored \\\"-Wuseless-cast\\\"\")",
          "480: # define YY_IGNORE_USELESS_CAST_END            \\",
          "481:     _Pragma (\"GCC diagnostic pop\")",
          "482: #endif",
          "483: #ifndef YY_IGNORE_USELESS_CAST_BEGIN",
          "484: # define YY_IGNORE_USELESS_CAST_BEGIN",
          "485: # define YY_IGNORE_USELESS_CAST_END",
          "486: #endif",
          "489: #define YY_ASSERT(E) ((void) (0 && (E)))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "487: union yyalloc",
          "488: {",
          "490:   YYSTYPE yyvs_alloc;",
          "491:   YYLTYPE yyls_alloc;",
          "492: };",
          "499: # define YYSTACK_BYTES(N) \\",
          "501:       + 2 * YYSTACK_GAP_MAXIMUM)",
          "503: # define YYCOPY_NEEDED 1",
          "",
          "[Removed Lines]",
          "489:   yytype_int16 yyss_alloc;",
          "495: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)",
          "500:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \\",
          "",
          "[Added Lines]",
          "567:   yy_state_t yyss_alloc;",
          "573: # define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)",
          "578:      ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \\",
          "579:              + YYSIZEOF (YYLTYPE)) \\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "510: # define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\",
          "511:     do                                                                  \\",
          "512:       {                                                                 \\",
          "514:         YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\",
          "515:         Stack = &yyptr->Stack_alloc;                                    \\",
          "518:       }                                                                 \\",
          "519:     while (0)",
          "",
          "[Removed Lines]",
          "513:         YYSIZE_T yynewbytes;                                            \\",
          "516:         yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "517:         yyptr += yynewbytes / sizeof (*yyptr);                          \\",
          "",
          "[Added Lines]",
          "592:         YYPTRDIFF_T yynewbytes;                                         \\",
          "595:         yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "596:         yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \\",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "526: # ifndef YYCOPY",
          "527: #  if defined __GNUC__ && 1 < __GNUC__",
          "528: #   define YYCOPY(Dst, Src, Count) \\",
          "530: #  else",
          "531: #   define YYCOPY(Dst, Src, Count)              \\",
          "532:       do                                        \\",
          "533:         {                                       \\",
          "535:           for (yyi = 0; yyi < (Count); yyi++)   \\",
          "536:             (Dst)[yyi] = (Src)[yyi];            \\",
          "537:         }                                       \\",
          "",
          "[Removed Lines]",
          "529:       __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))",
          "534:           YYSIZE_T yyi;                         \\",
          "",
          "[Added Lines]",
          "608:       __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))",
          "613:           YYPTRDIFF_T yyi;                      \\",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "555: #define YYNSTATES  1318",
          "559: #define YYUNDEFTOK  2",
          "560: #define YYMAXUTOK   357",
          "562: #define YYTRANSLATE(YYX)                                                \\",
          "568: {",
          "569:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "570:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "",
          "[Removed Lines]",
          "563:   ((unsigned) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)",
          "567: static const yytype_uint8 yytranslate[] =",
          "",
          "[Added Lines]",
          "643:   (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)",
          "647: static const yytype_int8 yytranslate[] =",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "607: #if YYDEBUG",
          "610: {",
          "611:        0,   338,   338,   339,   340,   342,   365,   368,   370,   369,",
          "694: };",
          "695: #endif",
          "",
          "[Removed Lines]",
          "609: static const yytype_uint16 yyrline[] =",
          "612:      393,   404,   414,   424,   425,   431,   436,   442,   453,   463,",
          "613:      476,   477,   483,   485,   489,   491,   495,   497,   498,   499,",
          "614:      501,   509,   517,   518,   523,   534,   545,   556,   564,   569,",
          "615:      570,   574,   575,   586,   597,   608,   612,   614,   637,   654,",
          "616:      658,   660,   661,   666,   671,   676,   682,   686,   688,   692,",
          "617:      694,   698,   700,   704,   706,   719,   730,   731,   743,   747,",
          "618:      748,   752,   753,   758,   765,   765,   776,   782,   830,   849,",
          "619:      852,   853,   854,   855,   856,   857,   858,   859,   860,   861,",
          "620:      864,   879,   886,   887,   891,   892,   893,   899,   904,   910,",
          "621:      928,   930,   931,   935,   940,   941,   963,   964,   965,   978,",
          "622:      983,   985,   986,   987,   988,  1003,  1017,  1022,  1023,  1038,",
          "623:     1039,  1040,  1046,  1051,  1057,  1114,  1119,  1120,  1122,  1138,",
          "624:     1143,  1144,  1169,  1170,  1184,  1185,  1191,  1196,  1202,  1206,",
          "625:     1208,  1261,  1272,  1275,  1278,  1283,  1288,  1294,  1299,  1305,",
          "626:     1310,  1319,  1320,  1324,  1371,  1372,  1374,  1375,  1379,  1385,",
          "627:     1398,  1399,  1400,  1404,  1405,  1407,  1411,  1429,  1434,  1436,",
          "628:     1437,  1453,  1458,  1467,  1468,  1472,  1488,  1493,  1498,  1503,",
          "629:     1509,  1513,  1529,  1544,  1545,  1549,  1550,  1560,  1565,  1570,",
          "630:     1575,  1581,  1585,  1596,  1608,  1609,  1612,  1620,  1631,  1632,",
          "631:     1647,  1648,  1649,  1661,  1667,  1672,  1678,  1683,  1685,  1686,",
          "632:     1701,  1706,  1707,  1712,  1716,  1718,  1723,  1725,  1726,  1727,",
          "633:     1740,  1752,  1753,  1755,  1763,  1775,  1776,  1791,  1792,  1793,",
          "634:     1805,  1811,  1816,  1822,  1827,  1829,  1830,  1846,  1850,  1852,",
          "635:     1856,  1858,  1862,  1864,  1868,  1870,  1880,  1887,  1888,  1892,",
          "636:     1893,  1899,  1904,  1909,  1910,  1911,  1912,  1913,  1919,  1920,",
          "637:     1921,  1922,  1923,  1924,  1925,  1926,  1929,  1939,  1946,  1947,",
          "638:     1970,  1971,  1972,  1973,  1974,  1979,  1985,  1991,  1996,  2001,",
          "639:     2002,  2003,  2008,  2009,  2011,  2051,  2061,  2064,  2065,  2066,",
          "640:     2069,  2074,  2075,  2080,  2086,  2092,  2098,  2103,  2109,  2119,",
          "641:     2174,  2177,  2178,  2179,  2182,  2193,  2198,  2199,  2205,  2218,",
          "642:     2231,  2241,  2247,  2252,  2258,  2268,  2315,  2318,  2319,  2320,",
          "643:     2321,  2330,  2336,  2342,  2355,  2368,  2378,  2384,  2389,  2394,",
          "644:     2395,  2396,  2397,  2402,  2404,  2414,  2421,  2422,  2442,  2445,",
          "645:     2446,  2447,  2457,  2464,  2471,  2478,  2484,  2490,  2492,  2493,",
          "646:     2495,  2496,  2497,  2498,  2499,  2500,  2501,  2507,  2517,  2524,",
          "647:     2525,  2539,  2540,  2541,  2542,  2548,  2553,  2558,  2561,  2571,",
          "648:     2578,  2588,  2595,  2596,  2619,  2622,  2623,  2624,  2625,  2632,",
          "649:     2639,  2646,  2651,  2657,  2667,  2674,  2675,  2707,  2708,  2709,",
          "650:     2710,  2716,  2721,  2726,  2727,  2729,  2730,  2732,  2745,  2750,",
          "651:     2751,  2783,  2786,  2800,  2816,  2838,  2889,  2908,  2927,  2948,",
          "652:     2969,  2974,  2980,  2981,  2984,  2999,  3008,  3009,  3011,  3022,",
          "653:     3031,  3032,  3033,  3034,  3040,  3045,  3050,  3051,  3052,  3057,",
          "654:     3059,  3074,  3081,  3091,  3098,  3099,  3123,  3126,  3127,  3133,",
          "655:     3138,  3143,  3144,  3145,  3152,  3160,  3175,  3205,  3206,  3207,",
          "656:     3208,  3209,  3211,  3226,  3256,  3265,  3272,  3273,  3305,  3306,",
          "657:     3307,  3308,  3314,  3319,  3324,  3325,  3326,  3328,  3340,  3360,",
          "658:     3361,  3367,  3373,  3375,  3376,  3378,  3379,  3382,  3390,  3395,",
          "659:     3396,  3398,  3399,  3400,  3402,  3410,  3415,  3416,  3448,  3449,",
          "660:     3455,  3456,  3462,  3468,  3475,  3482,  3490,  3499,  3507,  3512,",
          "661:     3513,  3545,  3546,  3552,  3553,  3559,  3566,  3574,  3579,  3580,",
          "662:     3594,  3595,  3596,  3602,  3608,  3615,  3622,  3630,  3639,  3648,",
          "663:     3653,  3654,  3658,  3659,  3664,  3670,  3675,  3677,  3678,  3679,",
          "664:     3692,  3697,  3699,  3700,  3701,  3714,  3718,  3720,  3725,  3727,",
          "665:     3728,  3748,  3753,  3755,  3756,  3757,  3777,  3782,  3784,  3785,",
          "666:     3786,  3798,  3867,  3872,  3873,  3877,  3881,  3883,  3884,  3886,",
          "667:     3890,  3892,  3892,  3899,  3902,  3911,  3930,  3932,  3933,  3936,",
          "668:     3936,  3953,  3953,  3960,  3960,  3967,  3970,  3972,  3974,  3975,",
          "669:     3977,  3979,  3981,  3982,  3984,  3986,  3987,  3989,  3990,  3992,",
          "670:     3994,  3997,  4000,  4002,  4003,  4005,  4006,  4008,  4010,  4021,",
          "671:     4022,  4025,  4026,  4038,  4039,  4041,  4042,  4044,  4045,  4051,",
          "672:     4052,  4055,  4056,  4057,  4081,  4082,  4085,  4091,  4095,  4100,",
          "673:     4101,  4102,  4105,  4110,  4120,  4122,  4123,  4125,  4126,  4128,",
          "674:     4129,  4130,  4132,  4133,  4135,  4136,  4138,  4139,  4143,  4144,",
          "675:     4171,  4209,  4210,  4212,  4214,  4216,  4217,  4219,  4220,  4222,",
          "676:     4223,  4226,  4227,  4230,  4232,  4233,  4236,  4236,  4243,  4245,",
          "677:     4246,  4247,  4248,  4249,  4250,  4251,  4253,  4254,  4255,  4257,",
          "678:     4258,  4259,  4260,  4261,  4262,  4263,  4264,  4265,  4266,  4269,",
          "679:     4270,  4271,  4272,  4273,  4274,  4275,  4276,  4277,  4278,  4279,",
          "680:     4280,  4281,  4282,  4283,  4284,  4285,  4286,  4287,  4288,  4289,",
          "681:     4290,  4291,  4292,  4293,  4294,  4295,  4296,  4297,  4298,  4299,",
          "682:     4300,  4301,  4302,  4303,  4304,  4305,  4306,  4307,  4308,  4309,",
          "683:     4310,  4311,  4312,  4313,  4314,  4315,  4316,  4317,  4318,  4319,",
          "684:     4320,  4321,  4322,  4323,  4324,  4325,  4326,  4327,  4328,  4329,",
          "685:     4330,  4331,  4332,  4333,  4334,  4335,  4336,  4337,  4338,  4340,",
          "686:     4347,  4354,  4374,  4392,  4408,  4435,  4442,  4460,  4500,  4502,",
          "687:     4503,  4504,  4505,  4506,  4507,  4508,  4509,  4510,  4511,  4512,",
          "688:     4513,  4514,  4516,  4517,  4518,  4519,  4520,  4521,  4522,  4523,",
          "689:     4524,  4525,  4526,  4527,  4528,  4529,  4531,  4532,  4533,  4534,",
          "690:     4536,  4544,  4545,  4550,  4555,  4560,  4565,  4570,  4575,  4580,",
          "691:     4585,  4590,  4595,  4600,  4605,  4610,  4615,  4620,  4634,  4654,",
          "692:     4659,  4664,  4669,  4682,  4687,  4691,  4701,  4716,  4731,  4746,",
          "693:     4761,  4781,  4796,  4797,  4803,  4810,  4825,  4828",
          "",
          "[Added Lines]",
          "689: static const yytype_int16 yyrline[] =",
          "692:      393,   406,   416,   426,   427,   433,   438,   444,   457,   467,",
          "693:      480,   481,   487,   489,   493,   495,   499,   501,   502,   503,",
          "694:      505,   513,   521,   522,   527,   538,   549,   560,   568,   573,",
          "695:      574,   578,   579,   590,   601,   612,   616,   618,   641,   658,",
          "696:      662,   664,   665,   670,   675,   680,   686,   690,   692,   696,",
          "697:      698,   702,   704,   708,   710,   723,   734,   735,   747,   751,",
          "698:      752,   756,   757,   762,   769,   769,   780,   786,   834,   853,",
          "699:      856,   857,   858,   859,   860,   861,   862,   863,   864,   865,",
          "700:      868,   883,   890,   891,   895,   896,   897,   903,   908,   914,",
          "701:      932,   934,   935,   939,   944,   945,   967,   968,   969,   982,",
          "702:      987,   989,   990,   991,   992,  1007,  1021,  1026,  1027,  1042,",
          "703:     1043,  1044,  1050,  1055,  1061,  1118,  1123,  1124,  1126,  1142,",
          "704:     1147,  1148,  1173,  1174,  1188,  1189,  1195,  1200,  1206,  1210,",
          "705:     1212,  1265,  1276,  1279,  1282,  1287,  1292,  1298,  1303,  1309,",
          "706:     1314,  1323,  1324,  1328,  1375,  1376,  1378,  1379,  1383,  1389,",
          "707:     1402,  1403,  1404,  1408,  1409,  1411,  1415,  1433,  1438,  1440,",
          "708:     1441,  1457,  1462,  1471,  1472,  1476,  1492,  1497,  1502,  1507,",
          "709:     1513,  1517,  1536,  1551,  1552,  1556,  1557,  1567,  1572,  1577,",
          "710:     1582,  1588,  1592,  1603,  1615,  1616,  1619,  1627,  1638,  1639,",
          "711:     1654,  1655,  1656,  1668,  1674,  1679,  1685,  1690,  1692,  1693,",
          "712:     1708,  1713,  1714,  1719,  1723,  1725,  1730,  1732,  1733,  1734,",
          "713:     1747,  1759,  1760,  1762,  1770,  1782,  1783,  1798,  1799,  1800,",
          "714:     1812,  1818,  1823,  1829,  1834,  1836,  1837,  1853,  1857,  1859,",
          "715:     1863,  1865,  1869,  1871,  1875,  1877,  1887,  1894,  1895,  1899,",
          "716:     1900,  1906,  1911,  1916,  1917,  1918,  1919,  1920,  1926,  1927,",
          "717:     1928,  1929,  1930,  1931,  1932,  1933,  1936,  1946,  1953,  1954,",
          "718:     1977,  1978,  1979,  1980,  1981,  1986,  1992,  1998,  2003,  2008,",
          "719:     2009,  2010,  2015,  2016,  2018,  2058,  2068,  2071,  2072,  2073,",
          "720:     2076,  2081,  2082,  2087,  2093,  2099,  2105,  2110,  2116,  2126,",
          "721:     2181,  2184,  2185,  2186,  2189,  2200,  2205,  2206,  2212,  2225,",
          "722:     2238,  2248,  2254,  2259,  2265,  2275,  2322,  2325,  2326,  2327,",
          "723:     2328,  2337,  2343,  2349,  2362,  2375,  2385,  2391,  2396,  2401,",
          "724:     2402,  2403,  2404,  2409,  2411,  2421,  2428,  2429,  2449,  2452,",
          "725:     2453,  2454,  2464,  2471,  2478,  2485,  2491,  2497,  2499,  2500,",
          "726:     2502,  2503,  2504,  2505,  2506,  2507,  2508,  2514,  2524,  2531,",
          "727:     2532,  2546,  2547,  2548,  2549,  2555,  2560,  2565,  2568,  2578,",
          "728:     2585,  2595,  2602,  2603,  2626,  2629,  2630,  2631,  2632,  2639,",
          "729:     2646,  2653,  2658,  2664,  2674,  2681,  2682,  2714,  2715,  2716,",
          "730:     2717,  2723,  2728,  2733,  2734,  2736,  2737,  2739,  2752,  2757,",
          "731:     2758,  2790,  2793,  2807,  2823,  2845,  2896,  2915,  2934,  2955,",
          "732:     2976,  2981,  2987,  2988,  2991,  3006,  3015,  3016,  3018,  3029,",
          "733:     3038,  3039,  3040,  3041,  3047,  3052,  3057,  3058,  3059,  3064,",
          "734:     3066,  3081,  3088,  3098,  3105,  3106,  3130,  3133,  3134,  3140,",
          "735:     3145,  3150,  3151,  3152,  3159,  3167,  3182,  3212,  3213,  3214,",
          "736:     3215,  3216,  3218,  3233,  3263,  3273,  3280,  3281,  3313,  3314,",
          "737:     3315,  3316,  3322,  3327,  3332,  3333,  3334,  3336,  3348,  3368,",
          "738:     3369,  3375,  3381,  3383,  3384,  3386,  3387,  3390,  3398,  3403,",
          "739:     3404,  3406,  3407,  3408,  3410,  3418,  3423,  3424,  3456,  3457,",
          "740:     3463,  3464,  3470,  3476,  3483,  3490,  3498,  3507,  3515,  3520,",
          "741:     3521,  3553,  3554,  3560,  3561,  3567,  3574,  3582,  3587,  3588,",
          "742:     3602,  3603,  3604,  3610,  3616,  3623,  3630,  3638,  3647,  3656,",
          "743:     3661,  3662,  3666,  3667,  3672,  3678,  3683,  3685,  3686,  3687,",
          "744:     3700,  3705,  3707,  3708,  3709,  3722,  3726,  3728,  3733,  3735,",
          "745:     3736,  3756,  3761,  3763,  3764,  3765,  3785,  3790,  3792,  3793,",
          "746:     3794,  3806,  3875,  3880,  3881,  3885,  3889,  3891,  3892,  3894,",
          "747:     3898,  3900,  3900,  3907,  3910,  3919,  3938,  3940,  3941,  3944,",
          "748:     3944,  3961,  3961,  3968,  3968,  3975,  3978,  3980,  3982,  3983,",
          "749:     3985,  3987,  3989,  3990,  3992,  3994,  3995,  3997,  3998,  4000,",
          "750:     4002,  4005,  4008,  4010,  4011,  4013,  4014,  4016,  4018,  4029,",
          "751:     4030,  4033,  4034,  4046,  4047,  4049,  4050,  4052,  4053,  4059,",
          "752:     4060,  4063,  4064,  4065,  4089,  4090,  4093,  4099,  4103,  4108,",
          "753:     4109,  4110,  4113,  4118,  4128,  4130,  4131,  4133,  4134,  4136,",
          "754:     4137,  4138,  4140,  4141,  4143,  4144,  4146,  4147,  4151,  4152,",
          "755:     4179,  4217,  4218,  4220,  4222,  4224,  4225,  4227,  4228,  4230,",
          "756:     4231,  4234,  4235,  4238,  4240,  4241,  4244,  4244,  4251,  4253,",
          "757:     4254,  4255,  4256,  4257,  4258,  4259,  4261,  4262,  4263,  4265,",
          "758:     4266,  4267,  4268,  4269,  4270,  4271,  4272,  4273,  4274,  4277,",
          "759:     4278,  4279,  4280,  4281,  4282,  4283,  4284,  4285,  4286,  4287,",
          "760:     4288,  4289,  4290,  4291,  4292,  4293,  4294,  4295,  4296,  4297,",
          "761:     4298,  4299,  4300,  4301,  4302,  4303,  4304,  4305,  4306,  4307,",
          "762:     4308,  4309,  4310,  4311,  4312,  4313,  4314,  4315,  4316,  4317,",
          "763:     4318,  4319,  4320,  4321,  4322,  4323,  4324,  4325,  4326,  4327,",
          "764:     4328,  4329,  4330,  4331,  4332,  4333,  4334,  4335,  4336,  4337,",
          "765:     4338,  4339,  4340,  4341,  4342,  4343,  4344,  4345,  4346,  4348,",
          "766:     4355,  4362,  4382,  4400,  4416,  4443,  4450,  4468,  4508,  4510,",
          "767:     4511,  4512,  4513,  4514,  4515,  4516,  4517,  4518,  4519,  4520,",
          "768:     4521,  4522,  4524,  4525,  4526,  4527,  4528,  4529,  4530,  4531,",
          "769:     4532,  4533,  4534,  4535,  4536,  4537,  4539,  4540,  4541,  4542,",
          "770:     4544,  4552,  4553,  4558,  4563,  4568,  4573,  4578,  4583,  4588,",
          "771:     4593,  4598,  4603,  4608,  4613,  4618,  4623,  4628,  4642,  4662,",
          "772:     4667,  4672,  4677,  4690,  4695,  4699,  4709,  4724,  4739,  4754,",
          "773:     4769,  4789,  4804,  4805,  4811,  4818,  4833,  4836",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "827: # ifdef YYPRINT",
          "831: {",
          "832:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,",
          "833:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,",
          "",
          "[Removed Lines]",
          "830: static const yytype_uint16 yytoknum[] =",
          "",
          "[Added Lines]",
          "910: static const yytype_int16 yytoknum[] =",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "844: };",
          "845: # endif",
          "855:   0",
          "",
          "[Removed Lines]",
          "847: #define YYPACT_NINF -1012",
          "849: #define yypact_value_is_default(Yystate) \\",
          "850:   (!!((Yystate) == (-1012)))",
          "852: #define YYTABLE_NINF -757",
          "854: #define yytable_value_is_error(Yytable_value) \\",
          "",
          "[Added Lines]",
          "927: #define YYPACT_NINF (-1012)",
          "929: #define yypact_value_is_default(Yyn) \\",
          "930:   ((Yyn) == YYPACT_NINF)",
          "932: #define YYTABLE_NINF (-757)",
          "934: #define yytable_value_is_error(Yyn) \\",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "996:      Performed when YYTABLE does not specify something else to do.  Zero",
          "999: {",
          "1000:      790,     0,     2,     3,     0,   757,     1,   649,   650,     0,",
          "1001:        0,   652,     0,   763,     0,     0,   761,     0,     0,     0,",
          "",
          "[Removed Lines]",
          "998: static const yytype_uint16 yydefact[] =",
          "",
          "[Added Lines]",
          "1078: static const yytype_int16 yydefact[] =",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1918: {",
          "1919:        0,   114,   120,   124,   419,   441,     0,     5,     7,    54,",
          "1920:       74,   418,    20,    21,    22,    23,    24,    27,    28,    30,",
          "",
          "[Removed Lines]",
          "1917: static const yytype_uint16 yystos[] =",
          "",
          "[Added Lines]",
          "1997: static const yytype_int16 yystos[] =",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2051: };",
          "2055: {",
          "2056:        0,   113,   114,   114,   114,   115,   116,   117,   118,   117,",
          "2057:      119,   120,   121,   122,   122,   122,   122,   123,   124,   125,",
          "",
          "[Removed Lines]",
          "2054: static const yytype_uint16 yyr1[] =",
          "",
          "[Added Lines]",
          "2134: static const yytype_int16 yyr1[] =",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2139: };",
          "2143: {",
          "2144:        0,     2,     1,     1,     1,     1,     3,     0,     0,     6,",
          "2145:        1,    13,     1,     0,     2,     2,     2,     1,    13,     1,",
          "",
          "[Removed Lines]",
          "2142: static const yytype_uint8 yyr2[] =",
          "",
          "[Added Lines]",
          "2222: static const yytype_int8 yyr2[] =",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2240: #define YYRECOVERING()  (!!yyerrstatus)",
          "2260: #define YYTERROR        1",
          "",
          "[Removed Lines]",
          "2242: #define YYBACKUP(Token, Value)                                  \\",
          "2243: do                                                              \\",
          "2244:   if (yychar == YYEMPTY)                                        \\",
          "2245:     {                                                           \\",
          "2246:       yychar = (Token);                                         \\",
          "2247:       yylval = (Value);                                         \\",
          "2248:       YYPOPSTACK (yylen);                                       \\",
          "2249:       yystate = *yyssp;                                         \\",
          "2250:       goto yybackup;                                            \\",
          "2251:     }                                                           \\",
          "2252:   else                                                          \\",
          "2253:     {                                                           \\",
          "2254:       yyerror (&yylloc, scanner, param, YY_(\"syntax error: cannot back up\")); \\",
          "2255:       YYERROR;                                                  \\",
          "2256:     }                                                           \\",
          "2257: while (0)",
          "",
          "[Added Lines]",
          "2322: #define YYBACKUP(Token, Value)                                    \\",
          "2323:   do                                                              \\",
          "2324:     if (yychar == YYEMPTY)                                        \\",
          "2325:       {                                                           \\",
          "2326:         yychar = (Token);                                         \\",
          "2327:         yylval = (Value);                                         \\",
          "2328:         YYPOPSTACK (yylen);                                       \\",
          "2329:         yystate = *yyssp;                                         \\",
          "2330:         goto yybackup;                                            \\",
          "2331:       }                                                           \\",
          "2332:     else                                                          \\",
          "2333:       {                                                           \\",
          "2334:         yyerror (&yylloc, scanner, param, YY_(\"syntax error: cannot back up\")); \\",
          "2335:         YYERROR;                                                  \\",
          "2336:       }                                                           \\",
          "2337:   while (0)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2377:   if (yytype < YYNTOKENS)",
          "2378:     YYPRINT (yyo, yytoknum[yytype], *yyvaluep);",
          "2379: # endif",
          "2380:   YYUSE (yytype);",
          "2381: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2460:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "2462:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2405: static void",
          "2407: {",
          "2408:   YYFPRINTF (stderr, \"Stack now\");",
          "2409:   for (; yybottom <= yytop; yybottom++)",
          "",
          "[Removed Lines]",
          "2406: yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)",
          "",
          "[Added Lines]",
          "2488: yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2428: static void",
          "2430: {",
          "2432:   int yynrhs = yyr2[yyrule];",
          "2433:   int yyi;",
          "2435:              yyrule - 1, yylno);",
          "2437:   for (yyi = 0; yyi < yynrhs; yyi++)",
          "",
          "[Removed Lines]",
          "2429: yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, void *scanner, struct yang_parameter *param)",
          "2431:   unsigned long yylno = yyrline[yyrule];",
          "2434:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",",
          "",
          "[Added Lines]",
          "2511: yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, void *scanner, struct yang_parameter *param)",
          "2513:   int yylno = yyrline[yyrule];",
          "2516:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %d):\\n\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2439:       YYFPRINTF (stderr, \"   $%d = \", yyi + 1);",
          "2440:       yy_symbol_print (stderr,",
          "2441:                        yystos[yyssp[yyi + 1 - yynrhs]],",
          "2443:                        , &(yylsp[(yyi + 1) - (yynrhs)])                       , scanner, param);",
          "2444:       YYFPRINTF (stderr, \"\\n\");",
          "2445:     }",
          "",
          "[Removed Lines]",
          "2442:                        &(yyvsp[(yyi + 1) - (yynrhs)])",
          "",
          "[Added Lines]",
          "2524:                        &yyvsp[(yyi + 1) - (yynrhs)]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2484: # ifndef yystrlen",
          "2485: #  if defined __GLIBC__ && defined _STRING_H",
          "2487: #  else",
          "2490: yystrlen (const char *yystr)",
          "2491: {",
          "2493:   for (yylen = 0; yystr[yylen]; yylen++)",
          "2494:     continue;",
          "2495:   return yylen;",
          "",
          "[Removed Lines]",
          "2486: #   define yystrlen strlen",
          "2489: static YYSIZE_T",
          "2492:   YYSIZE_T yylen;",
          "",
          "[Added Lines]",
          "2568: #   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))",
          "2571: static YYPTRDIFF_T",
          "2574:   YYPTRDIFF_T yylen;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2525:    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is",
          "2526:    null, do not copy; instead, return the length of what the result",
          "2529: yytnamerr (char *yyres, const char *yystr)",
          "2530: {",
          "2531:   if (*yystr == '\"')",
          "2532:     {",
          "2534:       char const *yyp = yystr;",
          "2536:       for (;;)",
          "",
          "[Removed Lines]",
          "2528: static YYSIZE_T",
          "2533:       YYSIZE_T yyn = 0;",
          "",
          "[Added Lines]",
          "2610: static YYPTRDIFF_T",
          "2615:       YYPTRDIFF_T yyn = 0;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2543:           case '\\\\':",
          "2544:             if (*++yyp != '\\\\')",
          "2545:               goto do_not_strip_quotes;",
          "2547:           default:",
          "2548:             if (yyres)",
          "2549:               yyres[yyn] = *yyp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2628:             else",
          "2629:               goto append;",
          "2631:           append:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2558:     do_not_strip_quotes: ;",
          "2559:     }",
          "2562:     return yystrlen (yystr);",
          "2565: }",
          "2566: # endif",
          "",
          "[Removed Lines]",
          "2561:   if (! yyres)",
          "2564:   return (YYSIZE_T) (yystpcpy (yyres, yystr) - yyres);",
          "",
          "[Added Lines]",
          "2646:   if (yyres)",
          "2647:     return yystpcpy (yyres, yystr) - yyres;",
          "2648:   else",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2576: static int",
          "2579: {",
          "2582:   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "2584:   const char *yyformat = YY_NULLPTR;",
          "2586:   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "2589:   int yycount = 0;",
          "2592:      - If this state is a consistent state with a default action, then",
          "",
          "[Removed Lines]",
          "2577: yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,",
          "2578:                 yytype_int16 *yyssp, int yytoken)",
          "2580:   YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);",
          "2581:   YYSIZE_T yysize = yysize0;",
          "",
          "[Added Lines]",
          "2662: yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,",
          "2663:                 yy_state_t *yyssp, int yytoken)",
          "2674:   YYPTRDIFF_T yysize = 0;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2614:   if (yytoken != YYEMPTY)",
          "2615:     {",
          "2616:       int yyn = yypact[*yyssp];",
          "2617:       yyarg[yycount++] = yytname[yytoken];",
          "2618:       if (!yypact_value_is_default (yyn))",
          "2619:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2702:       YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);",
          "2703:       yysize = yysize0;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2638:                   }",
          "2639:                 yyarg[yycount++] = yytname[yyx];",
          "2640:                 {",
          "2644:                     return 2;",
          "2646:                 }",
          "2647:               }",
          "2648:         }",
          "",
          "[Removed Lines]",
          "2641:                   YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);",
          "2642:                   if (! (yysize <= yysize1",
          "2643:                          && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "2645:                   yysize = yysize1;",
          "",
          "[Added Lines]",
          "2728:                   YYPTRDIFF_T yysize1",
          "2729:                     = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);",
          "2730:                   if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)",
          "2731:                     yysize = yysize1;",
          "2732:                   else",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2665:     }",
          "2667:   {",
          "2670:       return 2;",
          "2672:   }",
          "2674:   if (*yymsg_alloc < yysize)",
          "",
          "[Removed Lines]",
          "2668:     YYSIZE_T yysize1 = yysize + yystrlen (yyformat);",
          "2669:     if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "2671:     yysize = yysize1;",
          "",
          "[Added Lines]",
          "2758:     YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;",
          "2759:     if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)",
          "2760:       yysize = yysize1;",
          "2761:     else",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2694:         }",
          "2695:       else",
          "2696:         {",
          "2699:         }",
          "2700:   }",
          "2701:   return 0;",
          "",
          "[Removed Lines]",
          "2697:           yyp++;",
          "2698:           yyformat++;",
          "",
          "[Added Lines]",
          "2788:           ++yyp;",
          "2789:           ++yyformat;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2720:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "2721:   switch (yytype)",
          "2722:     {",
          "2727:         break;",
          "2733:         break;",
          "2739:         break;",
          "2745:         break;",
          "2751:         break;",
          "2757:         break;",
          "2763:         break;",
          "2766:       default:",
          "2767:         break;",
          "2768:     }",
          "",
          "[Removed Lines]",
          "2725:       { free((((*yyvaluep).p_str)) ? *((*yyvaluep).p_str) : NULL); }",
          "2731:       { free(((*yyvaluep).str)); }",
          "2737:       { free(((*yyvaluep).str)); }",
          "2743:       { free(((*yyvaluep).str)); }",
          "2749:       { free(((*yyvaluep).str)); }",
          "2755:       { yang_type_free(param->module->ctx, ((*yyvaluep).v)); }",
          "2761:       { yang_type_free(param->module->ctx, &((struct lys_tpdf *)((*yyvaluep).v))->type); }",
          "",
          "[Added Lines]",
          "2815:             { free((((*yyvaluep).p_str)) ? *((*yyvaluep).p_str) : NULL); }",
          "2819:             { free(((*yyvaluep).str)); }",
          "2823:             { free(((*yyvaluep).str)); }",
          "2827:             { free(((*yyvaluep).str)); }",
          "2831:             { free(((*yyvaluep).str)); }",
          "2835:             { yang_type_free(param->module->ctx, ((*yyvaluep).v)); }",
          "2839:             { yang_type_free(param->module->ctx, &((struct lys_tpdf *)((*yyvaluep).v))->type); }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2811:     int yynerrs;",
          "2815:     int yyerrstatus;",
          "",
          "[Removed Lines]",
          "2813:     int yystate;",
          "",
          "[Added Lines]",
          "2889:     yy_state_fast_t yystate;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2831:     YYSTYPE yyvsa[YYINITDEPTH];",
          "",
          "[Removed Lines]",
          "2826:     yytype_int16 yyssa[YYINITDEPTH];",
          "2827:     yytype_int16 *yyss;",
          "2828:     yytype_int16 *yyssp;",
          "",
          "[Added Lines]",
          "2902:     yy_state_t yyssa[YYINITDEPTH];",
          "2903:     yy_state_t *yyss;",
          "2904:     yy_state_t *yyssp;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2841:     YYLTYPE yyerror_range[3];",
          "2845:   int yyn;",
          "2846:   int yyresult;",
          "",
          "[Removed Lines]",
          "2843:     YYSIZE_T yystacksize;",
          "",
          "[Added Lines]",
          "2919:     YYPTRDIFF_T yystacksize;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2856:   char yymsgbuf[128];",
          "2857:   char *yymsg = yymsgbuf;",
          "2859: #endif",
          "2861: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))",
          "",
          "[Removed Lines]",
          "2858:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "",
          "[Added Lines]",
          "2934:   YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2898:   yylsp[0] = yylloc;",
          "2899:   goto yysetstate;",
          "2907:   yyssp++;",
          "2912:   if (yyss + yystacksize - 1 <= yyssp)",
          "2913:     {",
          "2918:       {",
          "2920:            these so that the &'s don't force the real ones into",
          "2922:         YYSTYPE *yyvs1 = yyvs;",
          "2924:         YYLTYPE *yyls1 = yyls;",
          "",
          "[Removed Lines]",
          "2902: | yynewstate -- Push a new state, which is found in yystate.  |",
          "2904:  yynewstate:",
          "2909:  yysetstate:",
          "2915:       YYSIZE_T yysize = (YYSIZE_T) (yyssp - yyss + 1);",
          "2917: #ifdef yyoverflow",
          "2923:         yytype_int16 *yyss1 = yyss;",
          "",
          "[Added Lines]",
          "2978: | yynewstate -- push a new state, which is found in yystate.  |",
          "2980: yynewstate:",
          "2987: | yysetstate -- set current state (the top of the stack) to yystate.  |",
          "2989: yysetstate:",
          "2990:   YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));",
          "2991:   YY_ASSERT (0 <= yystate && yystate < YYNSTATES);",
          "2992:   YY_IGNORE_USELESS_CAST_BEGIN",
          "2994:   YY_IGNORE_USELESS_CAST_END",
          "2997: #if !defined yyoverflow && !defined YYSTACK_RELOCATE",
          "2998:     goto yyexhaustedlab;",
          "2999: #else",
          "3002:       YYPTRDIFF_T yysize = yyssp - yyss + 1;",
          "3004: # if defined yyoverflow",
          "3009:         yy_state_t *yyss1 = yyss;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2928:            conditional around just the two extra args, but that might",
          "2930:         yyoverflow (YY_(\"memory exhausted\"),",
          "2934:                     &yystacksize);",
          "2935:         yyss = yyss1;",
          "2936:         yyvs = yyvs1;",
          "2937:         yyls = yyls1;",
          "2938:       }",
          "2944:       if (YYMAXDEPTH <= yystacksize)",
          "2945:         goto yyexhaustedlab;",
          "",
          "[Removed Lines]",
          "2931:                     &yyss1, yysize * sizeof (*yyssp),",
          "2932:                     &yyvs1, yysize * sizeof (*yyvsp),",
          "2933:                     &yyls1, yysize * sizeof (*yylsp),",
          "2940: # ifndef YYSTACK_RELOCATE",
          "2941:       goto yyexhaustedlab;",
          "2942: # else",
          "",
          "[Added Lines]",
          "3018:                     &yyss1, yysize * YYSIZEOF (*yyssp),",
          "3019:                     &yyvs1, yysize * YYSIZEOF (*yyvsp),",
          "3020:                     &yyls1, yysize * YYSIZEOF (*yylsp),",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2948:         yystacksize = YYMAXDEPTH;",
          "2950:       {",
          "2952:         union yyalloc *yyptr =",
          "2954:         if (! yyptr)",
          "2955:           goto yyexhaustedlab;",
          "2956:         YYSTACK_RELOCATE (yyss_alloc, yyss);",
          "2957:         YYSTACK_RELOCATE (yyvs_alloc, yyvs);",
          "2958:         YYSTACK_RELOCATE (yyls_alloc, yyls);",
          "2960:         if (yyss1 != yyssa)",
          "2961:           YYSTACK_FREE (yyss1);",
          "2962:       }",
          "2963: # endif",
          "2966:       yyssp = yyss + yysize - 1;",
          "2967:       yyvsp = yyvs + yysize - 1;",
          "2968:       yylsp = yyls + yysize - 1;",
          "2973:       if (yyss + yystacksize - 1 <= yyssp)",
          "2974:         YYABORT;",
          "2975:     }",
          "2979:   if (yystate == YYFINAL)",
          "2980:     YYACCEPT;",
          "2982:   goto yybackup;",
          "2985: | yybackup.  |",
          "2987: yybackup:",
          "",
          "[Removed Lines]",
          "2951:         yytype_int16 *yyss1 = yyss;",
          "2953:           (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "2959: #  undef YYSTACK_RELOCATE",
          "2970:       YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",",
          "2971:                   (unsigned long) yystacksize));",
          "2977:   YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));",
          "",
          "[Added Lines]",
          "3035:         yy_state_t *yyss1 = yyss;",
          "3037:           YY_CAST (union yyalloc *,",
          "3038:                    YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));",
          "3044: # undef YYSTACK_RELOCATE",
          "3054:       YY_IGNORE_USELESS_CAST_BEGIN",
          "3055:       YYDPRINTF ((stderr, \"Stack size increased to %ld\\n\",",
          "3056:                   YY_CAST (long, yystacksize)));",
          "3057:       YY_IGNORE_USELESS_CAST_END",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3037:   YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);",
          "3042:   yystate = yyn;",
          "3043:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "3045:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "3047:   goto yynewstate;",
          "",
          "[Removed Lines]",
          "3040:   yychar = YYEMPTY;",
          "",
          "[Added Lines]",
          "3130:   yychar = YYEMPTY;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3063: yyreduce:",
          "",
          "[Removed Lines]",
          "3061: | yyreduce -- Do a reduction.  |",
          "",
          "[Added Lines]",
          "3145: | yyreduce -- do a reduction.  |",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3080:   YY_REDUCE_PRINT (yyn);",
          "3081:   switch (yyn)",
          "3082:     {",
          "3086:                       char *tmp;",
          "3088:                       s = malloc(yyget_leng(scanner) - 1 + 7 * yylval.i);",
          "",
          "[Removed Lines]",
          "3083:         case 5:",
          "3085:     { if (yyget_text(scanner)[0] == '\"') {",
          "",
          "[Added Lines]",
          "3167:   case 5:",
          "3168:                    { if (yyget_text(scanner)[0] == '\"') {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3104:                     }",
          "3105:                     (yyval.p_str) = &s;",
          "3106:                   }",
          "3108:     break;",
          "3110:   case 8:",
          "3113:                 int length_s = strlen(s), length_tmp = yyget_leng(scanner);",
          "3114:                 char *tmp;",
          "",
          "[Removed Lines]",
          "3112:     { if (yyget_leng(scanner) > 2) {",
          "",
          "[Added Lines]",
          "3193:             { if (yyget_leng(scanner) > 2) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3130:                 }",
          "3131:               }",
          "3132:             }",
          "3134:     break;",
          "3136:   case 10:",
          "3139:                                        free(s);",
          "3140:                                        LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"module\");",
          "3141:                                        YYABORT;",
          "3142:                                      }",
          "3143:                                      trg = param->module;",
          "3145:                                      s = NULL;",
          "3146:                                      actual_type = MODULE_KEYWORD;",
          "3147:                                    }",
          "3149:     break;",
          "3151:   case 12:",
          "3154:                                             LOGVAL(trg->ctx, LYE_MISSCHILDSTMT, LY_VLOG_NONE, NULL, \"namespace\", \"module\");",
          "3155:                                             YYABORT;",
          "3156:                                           }",
          "",
          "[Removed Lines]",
          "3138:     { if (param->submodule) {",
          "3144:                                      yang_read_common(trg,s,MODULE_KEYWORD);",
          "3153:     { if (!param->module->ns) {",
          "",
          "[Added Lines]",
          "3217:                                    { if (param->submodule) {",
          "3223:                                      if (yang_read_common(trg,s,MODULE_KEYWORD)) {",
          "3224:                                        YYABORT;",
          "3225:                                      }",
          "3232:                                         { if (!param->module->ns) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3159:                                             YYABORT;",
          "3160:                                           }",
          "3161:                                         }",
          "3163:     break;",
          "3165:   case 13:",
          "3169:     break;",
          "3171:   case 14:",
          "3174:                                               YYABORT;",
          "3175:                                             }",
          "3176:                                             (yyval.i) = 1;",
          "3177:                                             s = NULL;",
          "3178:                                           }",
          "3180:     break;",
          "3182:   case 15:",
          "3185:                                            YYABORT;",
          "3186:                                          }",
          "3187:                                          s = NULL;",
          "3188:                                        }",
          "3190:     break;",
          "3192:   case 16:",
          "3195:                                         YYABORT;",
          "3196:                                       }",
          "3197:                                       s = NULL;",
          "3198:                                     }",
          "3200:     break;",
          "3202:   case 17:",
          "3205:                                           free(s);",
          "3206:                                           LOGVAL(trg->ctx, LYE_SUBMODULE, LY_VLOG_NONE, NULL);",
          "3207:                                           YYABORT;",
          "3208:                                         }",
          "3209:                                         trg = (struct lys_module *)param->submodule;",
          "3211:                                         s = NULL;",
          "3212:                                         actual_type = SUBMODULE_KEYWORD;",
          "3213:                                       }",
          "3215:     break;",
          "3217:   case 19:",
          "3220:                                                   LOGVAL(trg->ctx, LYE_MISSCHILDSTMT, LY_VLOG_NONE, NULL, \"belongs-to\", \"submodule\");",
          "3221:                                                   YYABORT;",
          "3222:                                                 }",
          "",
          "[Removed Lines]",
          "3167:     { (yyval.i) = 0; }",
          "3173:     { if (yang_check_version(param->module, param->submodule, s, (yyvsp[-1].i))) {",
          "3184:     { if (yang_read_common(param->module, s, NAMESPACE_KEYWORD)) {",
          "3194:     { if (yang_read_prefix(trg, NULL, s)) {",
          "3204:     { if (!param->submodule) {",
          "3210:                                         yang_read_common(trg,s,MODULE_KEYWORD);",
          "3219:     { if (!param->submodule->prefix) {",
          "",
          "[Added Lines]",
          "3244:                             { (yyval.i) = 0; }",
          "3248:                                           { if (yang_check_version(param->module, param->submodule, s, (yyvsp[-1].i))) {",
          "3257:                                        { if (yang_read_common(param->module, s, NAMESPACE_KEYWORD)) {",
          "3265:                                     { if (yang_read_prefix(trg, NULL, s)) {",
          "3273:                                       { if (!param->submodule) {",
          "3279:                                         if (yang_read_common(trg,s,MODULE_KEYWORD)) {",
          "3280:                                           YYABORT;",
          "3281:                                         }",
          "3288:                                               { if (!param->submodule->prefix) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3228:                                                   }",
          "3229:                                                 }",
          "3230:                                               }",
          "3232:     break;",
          "3234:   case 20:",
          "3238:     break;",
          "3240:   case 21:",
          "3243:                                                  YYABORT;",
          "3244:                                                }",
          "3245:                                                (yyval.i) = 1;",
          "3246:                                                s = NULL;",
          "3247:                                              }",
          "3249:     break;",
          "3251:   case 23:",
          "3254:                            actual_type = YANG_VERSION_KEYWORD;",
          "3255:                          }",
          "3257:     break;",
          "3259:   case 25:",
          "3262:                             actual_type = NAMESPACE_KEYWORD;",
          "3263:                           }",
          "3265:     break;",
          "3267:   case 30:",
          "3270:                    backup_type = NODE;",
          "3271:                    actual = NULL;",
          "3272:                  }",
          "3274:     break;",
          "3276:   case 31:",
          "3280:                                      ((struct lys_import *)actual)->module = (struct lys_module *)s;",
          "3281:                                      s = NULL;",
          "3282:                                      (yyval.token) = actual_type;",
          "3283:                                      actual_type = IMPORT_KEYWORD;",
          "3284:                                    }",
          "3286:     break;",
          "3288:   case 32:",
          "3292:     break;",
          "3294:   case 33:",
          "3297:                                      YYABORT;",
          "3298:                                    }",
          "3299:                                    s = NULL;",
          "3300:                                  }",
          "3302:     break;",
          "3304:   case 34:",
          "3307:                                           LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"description\");",
          "3308:                                           free(s);",
          "3309:                                           YYABORT;",
          "",
          "[Removed Lines]",
          "3236:     { (yyval.i) = 0; }",
          "3242:     { if (yang_check_version(param->module, param->submodule, s, (yyvsp[-1].i))) {",
          "3253:     { backup_type = actual_type;",
          "3261:     { backup_type = actual_type;",
          "3269:     { actual_type = (yyvsp[-4].token);",
          "3278:     { YANG_ADDELEM(trg->imp, trg->imp_size, \"imports\");",
          "3290:     { (yyval.i) = 0; }",
          "3296:     { if (yang_read_prefix(trg, actual, s)) {",
          "3306:     { if (trg->version != 2) {",
          "",
          "[Added Lines]",
          "3303:                               { (yyval.i) = 0; }",
          "3307:                                              { if (yang_check_version(param->module, param->submodule, s, (yyvsp[-1].i))) {",
          "3316:                          { backup_type = actual_type;",
          "3322:                           { backup_type = actual_type;",
          "3328:                  { actual_type = (yyvsp[-4].token);",
          "3335:                                    { YANG_ADDELEM(trg->imp, trg->imp_size, \"imports\");",
          "3345:                         { (yyval.i) = 0; }",
          "3349:                                  { if (yang_read_prefix(trg, actual, s)) {",
          "3357:                                       { if (trg->version != 2) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3314:                                         s = NULL;",
          "3315:                                         (yyval.i) = (yyvsp[-1].i);",
          "3316:                                       }",
          "3318:     break;",
          "3320:   case 35:",
          "3323:                                         LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"reference\");",
          "3324:                                         free(s);",
          "3325:                                         YYABORT;",
          "",
          "[Removed Lines]",
          "3322:     { if (trg->version != 2) {",
          "",
          "[Added Lines]",
          "3371:                                     { if (trg->version != 2) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3330:                                       s = NULL;",
          "3331:                                       (yyval.i) = (yyvsp[-1].i);",
          "3332:                                     }",
          "3334:     break;",
          "3336:   case 36:",
          "3339:                                             LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"revision-date\", \"import\");",
          "3340:                                             free(s);",
          "3341:                                             YYABORT;",
          "",
          "[Removed Lines]",
          "3338:     { if ((yyvsp[-1].i)) {",
          "",
          "[Added Lines]",
          "3385:                                         { if ((yyvsp[-1].i)) {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3345:                                           s = NULL;",
          "3346:                                           (yyval.i) = 1;",
          "3347:                                         }",
          "3349:     break;",
          "3351:   case 37:",
          "3355:                                      ((struct lys_include *)actual)->submodule = (struct lys_submodule *)s;",
          "3356:                                      s = NULL;",
          "3357:                                      (yyval.token) = actual_type;",
          "3358:                                      actual_type = INCLUDE_KEYWORD;",
          "3359:                                    }",
          "3361:     break;",
          "3363:   case 38:",
          "3366:                                                                 backup_type = NODE;",
          "3367:                                                                 actual = NULL;",
          "3368:                                                               }",
          "3370:     break;",
          "3372:   case 41:",
          "3376:     break;",
          "3378:   case 42:",
          "3381:                                            LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"description\");",
          "3382:                                            free(s);",
          "3383:                                            YYABORT;",
          "",
          "[Removed Lines]",
          "3353:     { YANG_ADDELEM(trg->inc, trg->inc_size, \"includes\");",
          "3365:     { actual_type = (yyvsp[-1].token);",
          "3374:     { (yyval.i) = 0; }",
          "3380:     { if (trg->version != 2) {",
          "",
          "[Added Lines]",
          "3398:                                     { YANG_ADDELEM(trg->inc, trg->inc_size, \"includes\");",
          "3408:                                                               { actual_type = (yyvsp[-1].token);",
          "3415:                          { (yyval.i) = 0; }",
          "3419:                                        { if (trg->version != 2) {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3388:                                          s = NULL;",
          "3389:                                          (yyval.i) = (yyvsp[-1].i);",
          "3390:                                        }",
          "3392:     break;",
          "3394:   case 43:",
          "3397:                                          LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"reference\");",
          "3398:                                          free(s);",
          "3399:                                          YYABORT;",
          "",
          "[Removed Lines]",
          "3396:     { if (trg->version != 2) {",
          "",
          "[Added Lines]",
          "3433:                                      { if (trg->version != 2) {",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3404:                                        s = NULL;",
          "3405:                                        (yyval.i) = (yyvsp[-1].i);",
          "3406:                                      }",
          "3408:     break;",
          "3410:   case 44:",
          "3413:                                              LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"revision-date\", \"include\");",
          "3414:                                              free(s);",
          "3415:                                              YYABORT;",
          "",
          "[Removed Lines]",
          "3412:     { if ((yyvsp[-1].i)) {",
          "",
          "[Added Lines]",
          "3447:                                          { if ((yyvsp[-1].i)) {",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3419:                                            s = NULL;",
          "3420:                                            (yyval.i) = 1;",
          "3421:                                          }",
          "3423:     break;",
          "3425:   case 45:",
          "3428:                                   actual_type = REVISION_DATE_KEYWORD;",
          "3429:                                 }",
          "3431:     break;",
          "3433:   case 47:",
          "3436:                                          if (is_ext_instance) {",
          "3437:                                            if (yang_read_extcomplex_str(trg, ext_instance, \"belongs-to\", ext_name, &s,",
          "3438:                                                                         0, LY_STMT_BELONGSTO)) {",
          "",
          "[Removed Lines]",
          "3427:     { backup_type = actual_type;",
          "3435:     { (yyval.token) = actual_type;",
          "",
          "[Added Lines]",
          "3460:                                 { backup_type = actual_type;",
          "3466:                                        { (yyval.token) = actual_type;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3454:                                          s = NULL;",
          "3455:                                          actual_type = BELONGS_TO_KEYWORD;",
          "3456:                                        }",
          "3458:     break;",
          "3460:   case 48:",
          "3463:                          if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", \"belongs-to\", &s,",
          "3464:                                                       LY_STMT_BELONGSTO, LY_STMT_PREFIX)) {",
          "3465:                            YYABORT;",
          "",
          "[Removed Lines]",
          "3462:     { if (is_ext_instance) {",
          "",
          "[Added Lines]",
          "3491:                      { if (is_ext_instance) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3472:                        s = NULL;",
          "3473:                        actual_type = (yyvsp[-4].token);",
          "3474:                      }",
          "3476:     break;",
          "3478:   case 49:",
          "3481:                              actual_type = PREFIX_KEYWORD;",
          "3482:                            }",
          "3484:     break;",
          "3486:   case 52:",
          "3489:                                       YYABORT;",
          "3490:                                     }",
          "3491:                                     s = NULL;",
          "3492:                                   }",
          "3494:     break;",
          "3496:   case 53:",
          "3499:                                  YYABORT;",
          "3500:                                }",
          "3501:                                s = NULL;",
          "3502:                              }",
          "3504:     break;",
          "3506:   case 54:",
          "3509:                                      YYABORT;",
          "3510:                                    }",
          "3511:                                    s = NULL;",
          "3512:                                  }",
          "3514:     break;",
          "3516:   case 55:",
          "3519:                                    YYABORT;",
          "3520:                                  }",
          "3521:                                  s=NULL;",
          "3522:                                }",
          "3524:     break;",
          "3526:   case 56:",
          "3529:                            actual_type = ORGANIZATION_KEYWORD;",
          "3530:                          }",
          "3532:     break;",
          "3534:   case 58:",
          "3537:                       actual_type = CONTACT_KEYWORD;",
          "3538:                     }",
          "3540:     break;",
          "3542:   case 60:",
          "3545:                           actual_type = DESCRIPTION_KEYWORD;",
          "3546:                         }",
          "3548:     break;",
          "3550:   case 62:",
          "3553:                         actual_type = REFERENCE_KEYWORD;",
          "3554:                       }",
          "3556:     break;",
          "3558:   case 64:",
          "3561:                                       struct lys_revision *tmp;",
          "3563:                                       tmp = realloc(trg->rev, trg->rev_size * sizeof *trg->rev);",
          "",
          "[Removed Lines]",
          "3480:     { backup_type = actual_type;",
          "3488:     { if (yang_read_common(trg, s, ORGANIZATION_KEYWORD)) {",
          "3498:     { if (yang_read_common(trg, s, CONTACT_KEYWORD)) {",
          "3508:     { if (yang_read_description(trg, NULL, s, NULL, MODULE_KEYWORD)) {",
          "3518:     { if (yang_read_reference(trg, NULL, s, NULL, MODULE_KEYWORD)) {",
          "3528:     { backup_type = actual_type;",
          "3536:     { backup_type = actual_type;",
          "3544:     { backup_type = actual_type;",
          "3552:     { backup_type = actual_type;",
          "3560:     { if (trg->rev_size) {",
          "",
          "[Added Lines]",
          "3507:                            { backup_type = actual_type;",
          "3513:                                   { if (yang_read_common(trg, s, ORGANIZATION_KEYWORD)) {",
          "3521:                              { if (yang_read_common(trg, s, CONTACT_KEYWORD)) {",
          "3529:                                  { if (yang_read_description(trg, NULL, s, NULL, MODULE_KEYWORD)) {",
          "3537:                                { if (yang_read_reference(trg, NULL, s, NULL, MODULE_KEYWORD)) {",
          "3545:                          { backup_type = actual_type;",
          "3551:                     { backup_type = actual_type;",
          "3557:                         { backup_type = actual_type;",
          "3563:                       { backup_type = actual_type;",
          "3569:                                    { if (trg->rev_size) {",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3568:                                       trg->rev = tmp;",
          "3569:                                     }",
          "3570:                                   }",
          "3572:     break;",
          "3574:   case 65:",
          "3577:                                   (yyval.backup_token).actual = actual;",
          "3578:                                   if (!is_ext_instance) {",
          "3579:                                     YANG_ADDELEM(trg->rev, trg->rev_size, \"revisions\");",
          "",
          "[Removed Lines]",
          "3576:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "3583:                                 { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3583:                                   s = NULL;",
          "3584:                                   actual_type = REVISION_KEYWORD;",
          "3585:                                 }",
          "3587:     break;",
          "3589:   case 67:",
          "3594:                                                 for (i = 0; i < (trg->rev_size - 1); i++) {",
          "",
          "[Removed Lines]",
          "3591:     { int i;",
          "",
          "[Added Lines]",
          "3596:                                               { int i;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3599:                                                   }",
          "3600:                                                 }",
          "3601:                                               }",
          "3603:     break;",
          "3605:   case 68:",
          "3608:                                                                      actual = (yyvsp[-1].backup_token).actual;",
          "3609:                                                                    }",
          "3611:     break;",
          "3613:   case 72:",
          "3616:                                             YYABORT;",
          "3617:                                           }",
          "3618:                                           s = NULL;",
          "3619:                                         }",
          "3621:     break;",
          "3623:   case 73:",
          "3626:                                           YYABORT;",
          "3627:                                         }",
          "3628:                                         s = NULL;",
          "3629:                                       }",
          "3631:     break;",
          "3633:   case 74:",
          "3636:                               if (!s) {",
          "3637:                                 LOGMEM(trg->ctx);",
          "3638:                                 YYABORT;",
          "",
          "[Removed Lines]",
          "3607:     { actual_type = (yyvsp[-1].backup_token).token;",
          "3615:     { if (yang_read_description(trg, actual, s, \"revision\",REVISION_KEYWORD)) {",
          "3625:     { if (yang_read_reference(trg, actual, s, \"revision\", REVISION_KEYWORD)) {",
          "3635:     { s = strdup(yyget_text(scanner));",
          "",
          "[Added Lines]",
          "3610:                                                                    { actual_type = (yyvsp[-1].backup_token).token;",
          "3616:                                         { if (yang_read_description(trg, actual, s, \"revision\",REVISION_KEYWORD)) {",
          "3624:                                       { if (yang_read_reference(trg, actual, s, \"revision\", REVISION_KEYWORD)) {",
          "3632:                             { s = strdup(yyget_text(scanner));",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3642:                                   YYABORT;",
          "3643:                               }",
          "3644:                             }",
          "3646:     break;",
          "3648:   case 76:",
          "3651:                    free(s);",
          "3652:                    YYABORT;",
          "3653:                }",
          "3654:              }",
          "3656:     break;",
          "3658:   case 77:",
          "3662:                              if (trg->tpdf_size) {",
          "3663:                                tmp = realloc(trg->tpdf, trg->tpdf_size * sizeof *trg->tpdf);",
          "",
          "[Removed Lines]",
          "3650:     { if (lyp_check_date(trg->ctx, s)) {",
          "3660:     { void *tmp;",
          "",
          "[Added Lines]",
          "3645:              { if (lyp_check_date(trg->ctx, s)) {",
          "3653:                            { void *tmp;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3728:                          }",
          "3729:                          actual = NULL;",
          "3730:                        }",
          "3732:     break;",
          "3734:   case 79:",
          "3738:     break;",
          "3740:   case 90:",
          "3743:                                         (yyval.backup_token).actual = actual;",
          "3744:                                         YANG_ADDELEM(trg->extensions, trg->extensions_size, \"extensions\");",
          "3745:                                         trg->extensions_size--;",
          "",
          "[Removed Lines]",
          "3736:     { actual = NULL; }",
          "3742:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "3725:                                  { actual = NULL; }",
          "3729:                                       { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3753:                                         s = NULL;",
          "3754:                                         actual_type = EXTENSION_KEYWORD;",
          "3755:                                       }",
          "3757:     break;",
          "3759:   case 91:",
          "3762:                   ext->plugin = ext_get_plugin(ext->name, ext->module->name, ext->module->rev ? ext->module->rev[0].date : NULL);",
          "3763:                   actual_type = (yyvsp[-1].backup_token).token;",
          "3764:                   actual = (yyvsp[-1].backup_token).actual;",
          "3765:                 }",
          "3767:     break;",
          "3769:   case 96:",
          "3772:                                         LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"status\", \"extension\");",
          "3773:                                         YYABORT;",
          "3774:                                       }",
          "3775:                                       ((struct lys_ext *)actual)->flags |= (yyvsp[0].i);",
          "3776:                                     }",
          "3778:     break;",
          "3780:   case 97:",
          "3783:                                              YYABORT;",
          "3784:                                            }",
          "3785:                                            s = NULL;",
          "3786:                                          }",
          "3788:     break;",
          "3790:   case 98:",
          "3793:                                            YYABORT;",
          "3794:                                          }",
          "3795:                                          s = NULL;",
          "3796:                                        }",
          "3798:     break;",
          "3800:   case 99:",
          "3803:                                    if (is_ext_instance) {",
          "3804:                                      if (yang_read_extcomplex_str(trg, ext_instance, \"argument\", ext_name, &s,",
          "3805:                                                                   0, LY_STMT_ARGUMENT)) {",
          "",
          "[Removed Lines]",
          "3761:     { struct lys_ext *ext = actual;",
          "3771:     { if (((struct lys_ext *)actual)->flags & LYS_STATUS_MASK) {",
          "3782:     { if (yang_read_description(trg, actual, s, \"extension\", NODE)) {",
          "3792:     { if (yang_read_reference(trg, actual, s, \"extension\", NODE)) {",
          "3802:     { (yyval.token) = actual_type;",
          "",
          "[Added Lines]",
          "3746:                 { struct lys_ext *ext = actual;",
          "3754:                                     { if (((struct lys_ext *)actual)->flags & LYS_STATUS_MASK) {",
          "3763:                                          { if (yang_read_description(trg, actual, s, \"extension\", NODE)) {",
          "3771:                                        { if (yang_read_reference(trg, actual, s, \"extension\", NODE)) {",
          "3779:                                  { (yyval.token) = actual_type;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3816:                                    s = NULL;",
          "3817:                                    actual_type = ARGUMENT_KEYWORD;",
          "3818:                                  }",
          "3820:     break;",
          "3822:   case 100:",
          "3826:     break;",
          "3828:   case 103:",
          "3831:                                        backup_type = actual_type;",
          "3832:                                        actual_type = YIN_ELEMENT_KEYWORD;",
          "3833:                                      }",
          "3835:     break;",
          "3837:   case 105:",
          "3840:          int c;",
          "3841:          const char ***p;",
          "3842:          uint8_t *val;",
          "",
          "[Removed Lines]",
          "3824:     { actual_type = (yyvsp[-1].token); }",
          "3830:     { (yyval.uint) = (yyvsp[0].uint);",
          "3839:     { if (is_ext_instance) {",
          "",
          "[Added Lines]",
          "3799:                                                                { actual_type = (yyvsp[-1].token); }",
          "3803:                                      { (yyval.uint) = (yyvsp[0].uint);",
          "3810:      { if (is_ext_instance) {",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3856:          ((struct lys_ext *)actual)->flags |= (yyvsp[-1].uint);",
          "3857:        }",
          "3858:      }",
          "3860:     break;",
          "3862:   case 106:",
          "3866:     break;",
          "3868:   case 107:",
          "3872:     break;",
          "3874:   case 108:",
          "3877:                  (yyval.uint) = LYS_YINELEM;",
          "3878:                } else if (!strcmp(s, \"false\")) {",
          "3879:                  (yyval.uint) = 0;",
          "",
          "[Removed Lines]",
          "3864:     { (yyval.uint) = LYS_YINELEM; }",
          "3870:     { (yyval.uint) = 0; }",
          "3876:     { if (!strcmp(s, \"true\")) {",
          "",
          "[Added Lines]",
          "3833:                                          { (yyval.uint) = LYS_YINELEM; }",
          "3837:                          { (yyval.uint) = 0; }",
          "3841:              { if (!strcmp(s, \"true\")) {",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3885:                free(s);",
          "3886:                s = NULL;",
          "3887:              }",
          "3889:     break;",
          "3891:   case 109:",
          "3894:                              backup_type = actual_type;",
          "3895:                              actual_type = STATUS_KEYWORD;",
          "3896:                            }",
          "3898:     break;",
          "3900:   case 110:",
          "3904:     break;",
          "3906:   case 111:",
          "3910:     break;",
          "3912:   case 112:",
          "3916:     break;",
          "3918:   case 113:",
          "3922:     break;",
          "3924:   case 114:",
          "3927:                  (yyval.i) = LYS_STATUS_CURR;",
          "3928:                } else if (!strcmp(s, \"obsolete\")) {",
          "3929:                  (yyval.i) = LYS_STATUS_OBSLT;",
          "",
          "[Removed Lines]",
          "3893:     { (yyval.i) = (yyvsp[0].i);",
          "3902:     { (yyval.i) = (yyvsp[-1].i); }",
          "3908:     { (yyval.i) = LYS_STATUS_CURR; }",
          "3914:     { (yyval.i) = LYS_STATUS_OBSLT; }",
          "3920:     { (yyval.i) = LYS_STATUS_DEPRC; }",
          "3926:     { if (!strcmp(s, \"current\")) {",
          "",
          "[Added Lines]",
          "3856:                            { (yyval.i) = (yyvsp[0].i);",
          "3863:                                                     { (yyval.i) = (yyvsp[-1].i); }",
          "3867:                                        { (yyval.i) = LYS_STATUS_CURR; }",
          "3871:                             { (yyval.i) = LYS_STATUS_OBSLT; }",
          "3875:                               { (yyval.i) = LYS_STATUS_DEPRC; }",
          "3879:              { if (!strcmp(s, \"current\")) {",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3955:                                       s = NULL;",
          "3956:                                       actual_type = FEATURE_KEYWORD;",
          "3957:                                     }",
          "3959:     break;",
          "3961:   case 116:",
          "3964:                 actual_type = (yyvsp[-1].backup_token).token;",
          "3965:               }",
          "3967:     break;",
          "3969:   case 118:",
          "3973:           if (((struct lys_feature *)actual)->iffeature_size) {",
          "3974:             tmp = realloc(((struct lys_feature *)actual)->iffeature,",
          "",
          "[Removed Lines]",
          "3963:     { actual = (yyvsp[-1].backup_token).actual;",
          "3971:     { struct lys_iffeature *tmp;",
          "",
          "[Added Lines]",
          "3912:               { actual = (yyvsp[-1].backup_token).actual;",
          "3918:         { struct lys_iffeature *tmp;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3980:             ((struct lys_feature *)actual)->iffeature = tmp;",
          "3981:           }",
          "3982:         }",
          "3984:     break;",
          "3986:   case 121:",
          "3989:                                       LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"status\", \"feature\");",
          "3990:                                       YYABORT;",
          "3991:                                     }",
          "3992:                                     ((struct lys_feature *)actual)->flags |= (yyvsp[0].i);",
          "3993:                                   }",
          "3995:     break;",
          "3997:   case 122:",
          "4000:                                            YYABORT;",
          "4001:                                          }",
          "4002:                                          s = NULL;",
          "4003:                                        }",
          "4005:     break;",
          "4007:   case 123:",
          "4010:                                          YYABORT;",
          "4011:                                        }",
          "4012:                                        s = NULL;",
          "4013:                                      }",
          "4015:     break;",
          "4017:   case 124:",
          "4020:                          (yyval.backup_token).actual = actual;",
          "4021:                          switch (actual_type) {",
          "4022:                          case FEATURE_KEYWORD:",
          "",
          "[Removed Lines]",
          "3988:     { if (((struct lys_feature *)actual)->flags & LYS_STATUS_MASK) {",
          "3999:     { if (yang_read_description(trg, actual, s, \"feature\", NODE)) {",
          "4009:     { if (yang_read_reference(trg, actual, s, \"feature\", NODE)) {",
          "4019:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "3933:                                   { if (((struct lys_feature *)actual)->flags & LYS_STATUS_MASK) {",
          "3942:                                        { if (yang_read_description(trg, actual, s, \"feature\", NODE)) {",
          "3950:                                      { if (yang_read_reference(trg, actual, s, \"feature\", NODE)) {",
          "3958:                        { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4072:                          s = NULL;",
          "4073:                          actual_type = IF_FEATURE_KEYWORD;",
          "4074:                        }",
          "4076:     break;",
          "4078:   case 125:",
          "4081:                    actual_type = (yyvsp[-1].backup_token).token;",
          "4082:                  }",
          "4084:     break;",
          "4086:   case 128:",
          "4090:                                        tmp = lydict_insert_zc(trg->ctx, s);",
          "4091:                                        s = NULL;",
          "",
          "[Removed Lines]",
          "4080:     { actual = (yyvsp[-1].backup_token).actual;",
          "4088:     { const char *tmp;",
          "",
          "[Added Lines]",
          "4017:                  { actual = (yyvsp[-1].backup_token).actual;",
          "4023:                                      { const char *tmp;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4100:                                        ((struct lys_ident *)actual)->module = trg;",
          "4101:                                        actual_type = IDENTITY_KEYWORD;",
          "4102:                                      }",
          "4104:     break;",
          "4106:   case 129:",
          "4109:                  actual_type = (yyvsp[-1].backup_token).token;",
          "4110:                }",
          "4112:     break;",
          "4114:   case 131:",
          "4118:            if (((struct lys_ident *)actual)->base_size) {",
          "4119:              tmp = realloc(((struct lys_ident *)actual)->base,",
          "",
          "[Removed Lines]",
          "4108:     { actual = (yyvsp[-1].backup_token).actual;",
          "4116:     { void *tmp;",
          "",
          "[Added Lines]",
          "4041:                { actual = (yyvsp[-1].backup_token).actual;",
          "4047:          { void *tmp;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4135:              ((struct lys_ident *)actual)->iffeature = tmp;",
          "4136:            }",
          "4137:          }",
          "4139:     break;",
          "4141:   case 133:",
          "4145:                                    if ((trg->version < 2) && ((struct lys_ident *)actual)->base_size) {",
          "4146:                                      free(s);",
          "",
          "[Removed Lines]",
          "4143:     { void *identity;",
          "",
          "[Added Lines]",
          "4072:                                  { void *identity;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "4154:                                    s = NULL;",
          "4155:                                    actual = identity;",
          "4156:                                  }",
          "4158:     break;",
          "4160:   case 135:",
          "4163:                                        LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"status\", \"identity\");",
          "4164:                                        YYABORT;",
          "4165:                                      }",
          "4166:                                      ((struct lys_ident *)actual)->flags |= (yyvsp[0].i);",
          "4167:                                    }",
          "4169:     break;",
          "4171:   case 136:",
          "4174:                                             YYABORT;",
          "4175:                                           }",
          "4176:                                           s = NULL;",
          "4177:                                         }",
          "4179:     break;",
          "4181:   case 137:",
          "4184:                                           YYABORT;",
          "4185:                                         }",
          "4186:                                         s = NULL;",
          "4187:                                       }",
          "4189:     break;",
          "4191:   case 138:",
          "4194:                                    actual_type = BASE_KEYWORD;",
          "4195:                                  }",
          "4197:     break;",
          "4199:   case 140:",
          "4202:                                       (yyval.backup_token).token = actual_type;",
          "4203:                                       (yyval.backup_token).actual = actual;",
          "4204:                                       if (lyp_check_identifier(trg->ctx, s, LY_IDENT_TYPE, trg, tpdf_parent)) {",
          "",
          "[Removed Lines]",
          "4162:     { if (((struct lys_ident *)actual)->flags & LYS_STATUS_MASK) {",
          "4173:     { if (yang_read_description(trg, actual, s, \"identity\", NODE)) {",
          "4183:     { if (yang_read_reference(trg, actual, s, \"identity\", NODE)) {",
          "4193:     { backup_type = actual_type;",
          "4201:     { tpdf_parent = (actual_type == EXTENSION_INSTANCE) ? ext_instance : actual;",
          "",
          "[Added Lines]",
          "4089:                                    { if (((struct lys_ident *)actual)->flags & LYS_STATUS_MASK) {",
          "4098:                                         { if (yang_read_description(trg, actual, s, \"identity\", NODE)) {",
          "4106:                                       { if (yang_read_reference(trg, actual, s, \"identity\", NODE)) {",
          "4114:                                  { backup_type = actual_type;",
          "4120:                                     { tpdf_parent = (actual_type == EXTENSION_INSTANCE) ? ext_instance : actual;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4250:                                       s = NULL;",
          "4251:                                       actual_type = TYPEDEF_KEYWORD;",
          "4252:                                     }",
          "4254:     break;",
          "4256:   case 141:",
          "4259:                       LOGVAL(trg->ctx, LYE_MISSCHILDSTMT, LY_VLOG_NONE, NULL, \"type\", \"typedef\");",
          "4260:                       YYABORT;",
          "4261:                     }",
          "4262:                     actual_type = (yyvsp[-4].backup_token).token;",
          "4263:                     actual = (yyvsp[-4].backup_token).actual;",
          "4264:                   }",
          "4266:     break;",
          "4268:   case 142:",
          "4271:                             (yyval.nodes).node.flag = 0;",
          "4272:                           }",
          "4274:     break;",
          "4276:   case 143:",
          "4279:                                        (yyval.nodes) = (yyvsp[-2].nodes);",
          "4280:                                      }",
          "4282:     break;",
          "4284:   case 144:",
          "4287:                                   YYABORT;",
          "4288:                                 }",
          "4289:                                 s = NULL;",
          "4290:                               }",
          "4292:     break;",
          "4294:   case 145:",
          "4297:                                     YYABORT;",
          "4298:                                   }",
          "4299:                                   s = NULL;",
          "4300:                                 }",
          "4302:     break;",
          "4304:   case 146:",
          "4307:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"status\", \"typedef\");",
          "4308:                                    YYABORT;",
          "4309:                                  }",
          "4310:                                  (yyvsp[-1].nodes).node.ptr_tpdf->flags |= (yyvsp[0].i);",
          "4311:                                }",
          "4313:     break;",
          "4315:   case 147:",
          "4318:                                         YYABORT;",
          "4319:                                       }",
          "4320:                                       s = NULL;",
          "4321:                                     }",
          "4323:     break;",
          "4325:   case 148:",
          "4328:                                       YYABORT;",
          "4329:                                     }",
          "4330:                                     s = NULL;",
          "4331:                                   }",
          "4333:     break;",
          "4335:   case 149:",
          "4338:              actual = (yyvsp[-1].backup_token).actual;",
          "4339:            }",
          "4341:     break;",
          "4343:   case 150:",
          "4346:                                        (yyval.backup_token).actual = actual;",
          "4347:                                        if (!(actual = yang_read_type(trg->ctx, actual, s, actual_type))) {",
          "4348:                                          YYABORT;",
          "",
          "[Removed Lines]",
          "4258:     { if (!((yyvsp[-1].nodes).node.flag & LYS_TYPE_DEF)) {",
          "4270:     { (yyval.nodes).node.ptr_tpdf = actual;",
          "4278:     { (yyvsp[-2].nodes).node.flag |= LYS_TYPE_DEF;",
          "4286:     { if (yang_read_units(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, TYPEDEF_KEYWORD)) {",
          "4296:     { if (yang_read_default(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, TYPEDEF_KEYWORD)) {",
          "4306:     { if ((yyvsp[-1].nodes).node.ptr_tpdf->flags & LYS_STATUS_MASK) {",
          "4317:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, \"typedef\", NODE)) {",
          "4327:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, \"typedef\", NODE)) {",
          "4337:     { actual_type = (yyvsp[-1].backup_token).token;",
          "4345:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "4175:                   { if (!((yyvsp[-1].nodes).node.flag & LYS_TYPE_DEF)) {",
          "4185:                       { (yyval.nodes).node.ptr_tpdf = actual;",
          "4191:                                      { (yyvsp[-2].nodes).node.flag |= LYS_TYPE_DEF;",
          "4197:                               { if (yang_read_units(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, TYPEDEF_KEYWORD)) {",
          "4205:                                 { if (yang_read_default(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, TYPEDEF_KEYWORD)) {",
          "4213:                                { if ((yyvsp[-1].nodes).node.ptr_tpdf->flags & LYS_STATUS_MASK) {",
          "4222:                                     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, \"typedef\", NODE)) {",
          "4230:                                   { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_tpdf, s, \"typedef\", NODE)) {",
          "4238:            { actual_type = (yyvsp[-1].backup_token).token;",
          "4244:                                      { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4350:                                        s = NULL;",
          "4351:                                        actual_type = TYPE_KEYWORD;",
          "4352:                                      }",
          "4354:     break;",
          "4356:   case 153:",
          "4359:                                          ((struct yang_type *)actual)->type->info.str.pat_count) {",
          "4360:                                        void *tmp;",
          "",
          "[Removed Lines]",
          "4358:     { if (((struct yang_type *)actual)->base == LY_TYPE_STRING &&",
          "",
          "[Added Lines]",
          "4255:                                    { if (((struct yang_type *)actual)->base == LY_TYPE_STRING &&",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4402:                                        ((struct yang_type *)actual)->type->info.ident.ref = tmp;",
          "4403:                                      }",
          "4404:                                    }",
          "4406:     break;",
          "4408:   case 157:",
          "4411:                                                  YYABORT;",
          "4412:                                                }",
          "4413:                                              }",
          "4415:     break;",
          "4417:   case 158:",
          "4420:                                    if (yang_read_leafref_path(trg, actual, s)) {",
          "4421:                                      YYABORT;",
          "4422:                                    }",
          "4423:                                    s = NULL;",
          "4424:                                  }",
          "4426:     break;",
          "4428:   case 159:",
          "4431:                                    if (((struct yang_type *)actual)->base && ((struct yang_type *)actual)->base != LY_TYPE_IDENT) {",
          "4432:                                      LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"base\");",
          "4433:                                      return EXIT_FAILURE;",
          "",
          "[Removed Lines]",
          "4410:     { if (yang_read_require_instance(trg->ctx, actual, (yyvsp[0].i))) {",
          "",
          "[Added Lines]",
          "4305:                                              { if (yang_read_require_instance(trg->ctx, actual, (yyvsp[0].i))) {",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4440:                                    actual = yang_type;",
          "4441:                                    s = NULL;",
          "4442:                                  }",
          "4444:     break;",
          "4446:   case 162:",
          "4449:                                                 YYABORT;",
          "4450:                                               }",
          "4451:                                             }",
          "4453:     break;",
          "4455:   case 165:",
          "4458:                                    actual = (yyvsp[-1].backup_token).actual;",
          "4459:                                  }",
          "4461:     break;",
          "4463:   case 166:",
          "4467:                          (yyval.backup_token).token = actual_type;",
          "4468:                          (yyval.backup_token).actual = actual;",
          "",
          "[Removed Lines]",
          "4448:     { if (yang_read_fraction(trg->ctx, actual, (yyvsp[0].uint))) {",
          "4457:     { actual_type = (yyvsp[-1].backup_token).token;",
          "4465:     { struct yang_type *stype = (struct yang_type *)actual;",
          "",
          "[Added Lines]",
          "4337:                                             { if (yang_read_fraction(trg->ctx, actual, (yyvsp[0].uint))) {",
          "4344:                                  { actual_type = (yyvsp[-1].backup_token).token;",
          "4350:                    { struct yang_type *stype = (struct yang_type *)actual;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4479:                          YANG_ADDELEM(stype->type->info.uni.types, stype->type->info.uni.count, \"union types\")",
          "4480:                          actual_type = UNION_KEYWORD;",
          "4481:                        }",
          "4483:     break;",
          "4485:   case 167:",
          "4488:                                                backup_type = actual_type;",
          "4489:                                                actual_type = FRACTION_DIGITS_KEYWORD;",
          "4490:                                              }",
          "4492:     break;",
          "4494:   case 168:",
          "4498:     break;",
          "4500:   case 169:",
          "4504:     break;",
          "4506:   case 170:",
          "4509:                unsigned long val;",
          "4510:                errno = 0;",
          "",
          "[Removed Lines]",
          "4487:     { (yyval.uint) = (yyvsp[0].uint);",
          "4496:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "4502:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "4508:     { char *endptr = NULL;",
          "",
          "[Added Lines]",
          "4370:                                              { (yyval.uint) = (yyvsp[0].uint);",
          "4377:                                                                               { (yyval.uint) = (yyvsp[-1].uint); }",
          "4381:                                                        { (yyval.uint) = (yyvsp[-1].uint); }",
          "4385:              { char *endptr = NULL;",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4520:                free(s);",
          "4521:                s =NULL;",
          "4522:              }",
          "4524:     break;",
          "4526:   case 171:",
          "4529:                actual_type = (yyvsp[-1].backup_token).token;",
          "4530:              }",
          "4532:     break;",
          "4534:   case 172:",
          "4537:                          (yyval.backup_token).actual = actual;",
          "4538:                          if (!(actual = yang_read_length(trg->ctx, actual, s, is_ext_instance))) {",
          "4539:                            YYABORT;",
          "",
          "[Removed Lines]",
          "4528:     { actual = (yyvsp[-1].backup_token).actual;",
          "4536:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "4403:              { actual = (yyvsp[-1].backup_token).actual;",
          "4409:                        { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4541:                          actual_type = LENGTH_KEYWORD;",
          "4542:                          s = NULL;",
          "4543:                        }",
          "4545:     break;",
          "4547:   case 175:",
          "4550:                                case MUST_KEYWORD:",
          "4551:                                  (yyval.str) = \"must\";",
          "4552:                                  break;",
          "",
          "[Removed Lines]",
          "4549:     { switch (actual_type) {",
          "",
          "[Added Lines]",
          "4420:                          { switch (actual_type) {",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4562:                                  break;",
          "4563:                                }",
          "4564:                              }",
          "4566:     break;",
          "4568:   case 176:",
          "4571:                                              YYABORT;",
          "4572:                                            }",
          "4573:                                            s = NULL;",
          "4574:                                          }",
          "4576:     break;",
          "4578:   case 177:",
          "4581:                                              YYABORT;",
          "4582:                                            }",
          "4583:                                            s = NULL;",
          "4584:                                          }",
          "4586:     break;",
          "4588:   case 178:",
          "4591:                                            YYABORT;",
          "4592:                                           }",
          "4593:                                           s = NULL;",
          "4594:                                         }",
          "4596:     break;",
          "4598:   case 179:",
          "4601:                                          YYABORT;",
          "4602:                                        }",
          "4603:                                        s = NULL;",
          "4604:                                      }",
          "4606:     break;",
          "4608:   case 180:",
          "4611:                    (yyval.backup_token).actual = actual;",
          "4612:                  }",
          "4614:     break;",
          "4616:   case 181:",
          "4619:                                                                         actual = NULL;",
          "4620: #ifdef LY_ENABLED_CACHE",
          "4621:                                                                         if ((yyvsp[-2].backup_token).token != EXTENSION_INSTANCE &&",
          "",
          "[Removed Lines]",
          "4570:     { if (yang_read_message(trg, actual, s, (yyvsp[-1].str), ERROR_MESSAGE_KEYWORD)) {",
          "4580:     { if (yang_read_message(trg, actual, s, (yyvsp[-1].str), ERROR_APP_TAG_KEYWORD)) {",
          "4590:     { if (yang_read_description(trg, actual, s, (yyvsp[-1].str), NODE)) {",
          "4600:     { if (yang_read_reference(trg, actual, s, (yyvsp[-1].str), NODE)) {",
          "4610:     { (yyval.backup_token).token = actual_type;",
          "4618:     {struct lys_restr *pattern = actual;",
          "",
          "[Added Lines]",
          "4439:                                          { if (yang_read_message(trg, actual, s, (yyvsp[-1].str), ERROR_MESSAGE_KEYWORD)) {",
          "4447:                                          { if (yang_read_message(trg, actual, s, (yyvsp[-1].str), ERROR_APP_TAG_KEYWORD)) {",
          "4455:                                        { if (yang_read_description(trg, actual, s, (yyvsp[-1].str), NODE)) {",
          "4463:                                      { if (yang_read_reference(trg, actual, s, (yyvsp[-1].str), NODE)) {",
          "4471:                  { (yyval.backup_token).token = actual_type;",
          "4477:                                                                        {struct lys_restr *pattern = actual;",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "4633:                                                                         actual_type = (yyvsp[-2].backup_token).token;",
          "4634:                                                                         actual = (yyvsp[-2].backup_token).actual;",
          "4635:                                                                       }",
          "4637:     break;",
          "4639:   case 182:",
          "4642:                             if (((struct yang_type *)actual)->base != 0 && ((struct yang_type *)actual)->base != LY_TYPE_STRING) {",
          "4643:                               free(s);",
          "4644:                               LOGVAL(trg->ctx, LYE_SPEC, LY_VLOG_NONE, NULL, \"Unexpected pattern statement.\");",
          "",
          "[Removed Lines]",
          "4641:     { if (actual_type != EXTENSION_INSTANCE) {",
          "",
          "[Added Lines]",
          "4498:                         { if (actual_type != EXTENSION_INSTANCE) {",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "4652:                           s = NULL;",
          "4653:                           actual_type = PATTERN_KEYWORD;",
          "4654:                         }",
          "4656:     break;",
          "4658:   case 183:",
          "4662:     break;",
          "4664:   case 184:",
          "4668:     break;",
          "4670:   case 185:",
          "4674:     break;",
          "4676:   case 186:",
          "4679:                                         LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, \"modifier\");",
          "4680:                                         YYABORT;",
          "4681:                                       }",
          "",
          "[Removed Lines]",
          "4660:     { (yyval.ch) = 0x06; }",
          "4666:     { (yyval.ch) = (yyvsp[-1].ch); }",
          "4672:     { (yyval.ch) = 0x06; /* ACK */ }",
          "4678:     { if (trg->version < 2) {",
          "",
          "[Added Lines]",
          "4515:                  { (yyval.ch) = 0x06; }",
          "4519:          { (yyval.ch) = (yyvsp[-1].ch); }",
          "4523:                          { (yyval.ch) = 0x06; /* ACK */ }",
          "4527:                                     { if (trg->version < 2) {",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "4685:                                       }",
          "4686:                                       (yyval.ch) = (yyvsp[0].ch);",
          "4687:                                     }",
          "4689:     break;",
          "4691:   case 187:",
          "4694:                                              YYABORT;",
          "4695:                                            }",
          "4696:                                            s = NULL;",
          "4697:                                          }",
          "4699:     break;",
          "4701:   case 188:",
          "4704:                                              YYABORT;",
          "4705:                                            }",
          "4706:                                            s = NULL;",
          "4707:                                          }",
          "4709:     break;",
          "4711:   case 189:",
          "4714:                                            YYABORT;",
          "4715:                                           }",
          "4716:                                           s = NULL;",
          "4717:                                         }",
          "4719:     break;",
          "4721:   case 190:",
          "4724:                                          YYABORT;",
          "4725:                                        }",
          "4726:                                        s = NULL;",
          "4727:                                      }",
          "4729:     break;",
          "4731:   case 191:",
          "4734:                        actual_type = MODIFIER_KEYWORD;",
          "4735:                      }",
          "4737:     break;",
          "4739:   case 192:",
          "4742:                                                              (yyval.ch) = 0x15;",
          "4743:                                                              free(s);",
          "4744:                                                              s = NULL;",
          "",
          "[Removed Lines]",
          "4693:     { if (yang_read_message(trg, actual, s, \"pattern\", ERROR_MESSAGE_KEYWORD)) {",
          "4703:     { if (yang_read_message(trg, actual, s, \"pattern\", ERROR_APP_TAG_KEYWORD)) {",
          "4713:     { if (yang_read_description(trg, actual, s, \"pattern\", NODE)) {",
          "4723:     { if (yang_read_reference(trg, actual, s, \"pattern\", NODE)) {",
          "4733:     { backup_type = actual_type;",
          "4741:     { if (!strcmp(s, \"invert-match\")) {",
          "",
          "[Added Lines]",
          "4540:                                          { if (yang_read_message(trg, actual, s, \"pattern\", ERROR_MESSAGE_KEYWORD)) {",
          "4548:                                          { if (yang_read_message(trg, actual, s, \"pattern\", ERROR_APP_TAG_KEYWORD)) {",
          "4556:                                        { if (yang_read_description(trg, actual, s, \"pattern\", NODE)) {",
          "4564:                                      { if (yang_read_reference(trg, actual, s, \"pattern\", NODE)) {",
          "4572:                      { backup_type = actual_type;",
          "4578:                                                          { if (!strcmp(s, \"invert-match\")) {",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "4748:                                                              YYABORT;",
          "4749:                                                            }",
          "4750:                                                          }",
          "4752:     break;",
          "4754:   case 193:",
          "4758:                                                    cnt_val = 0;",
          "4759:                                                    tmp = realloc(((struct yang_type *)actual)->type->info.enums.enm,",
          "",
          "[Removed Lines]",
          "4756:     { struct lys_type_enum * tmp;",
          "",
          "[Added Lines]",
          "4591:                                                  { struct lys_type_enum * tmp;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "4764:                                                    }",
          "4765:                                                    ((struct yang_type *)actual)->type->info.enums.enm = tmp;",
          "4766:                                                  }",
          "4768:     break;",
          "4770:   case 196:",
          "4773:                YYABORT;",
          "4774:              }",
          "4775:              actual = (yyvsp[-1].backup_token).actual;",
          "4776:              actual_type = (yyvsp[-1].backup_token).token;",
          "4777:            }",
          "4779:     break;",
          "4781:   case 197:",
          "4784:                        (yyval.backup_token).actual = yang_type = actual;",
          "4785:                        YANG_ADDELEM(((struct yang_type *)actual)->type->info.enums.enm, ((struct yang_type *)actual)->type->info.enums.count, \"enums\");",
          "4786:                        if (yang_read_enum(trg->ctx, yang_type, actual, s)) {",
          "",
          "[Removed Lines]",
          "4772:     { if (yang_check_enum(trg->ctx, yang_type, actual, &cnt_val, is_value)) {",
          "4783:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "4605:            { if (yang_check_enum(trg->ctx, yang_type, actual, &cnt_val, is_value)) {",
          "4614:                      { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4790:                        is_value = 0;",
          "4791:                        actual_type = ENUM_KEYWORD;",
          "4792:                      }",
          "4794:     break;",
          "4796:   case 199:",
          "4799:              struct lys_iffeature *tmp;",
          "4801:              tmp = realloc(((struct lys_type_enum *)actual)->iffeature,",
          "",
          "[Removed Lines]",
          "4798:     { if (((struct lys_type_enum *)actual)->iffeature_size) {",
          "",
          "[Added Lines]",
          "4627:          { if (((struct lys_type_enum *)actual)->iffeature_size) {",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4807:              ((struct lys_type_enum *)actual)->iffeature = tmp;",
          "4808:            }",
          "4809:          }",
          "4811:     break;",
          "4813:   case 202:",
          "4816:                                   LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"value\", \"enum\");",
          "4817:                                   YYABORT;",
          "4818:                                 }",
          "",
          "[Removed Lines]",
          "4815:     { if (is_value) {",
          "",
          "[Added Lines]",
          "4642:                               { if (is_value) {",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4824:                                 }",
          "4825:                                 is_value = 1;",
          "4826:                               }",
          "4828:     break;",
          "4830:   case 203:",
          "4833:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"status\", \"enum\");",
          "4834:                                    YYABORT;",
          "4835:                                  }",
          "4836:                                  ((struct lys_type_enum *)actual)->flags |= (yyvsp[0].i);",
          "4837:                                }",
          "4839:     break;",
          "4841:   case 204:",
          "4844:                                         YYABORT;",
          "4845:                                       }",
          "4846:                                       s = NULL;",
          "4847:                                     }",
          "4849:     break;",
          "4851:   case 205:",
          "4854:                                       YYABORT;",
          "4855:                                     }",
          "4856:                                     s = NULL;",
          "4857:                                   }",
          "4859:     break;",
          "4861:   case 206:",
          "4864:                                    backup_type = actual_type;",
          "4865:                                    actual_type = VALUE_KEYWORD;",
          "4866:                                  }",
          "4868:     break;",
          "4870:   case 207:",
          "4874:     break;",
          "4876:   case 208:",
          "4880:     break;",
          "4882:   case 209:",
          "4885:                 int64_t val;",
          "4886:                 char *endptr;",
          "",
          "[Removed Lines]",
          "4832:     { if (((struct lys_type_enum *)actual)->flags & LYS_STATUS_MASK) {",
          "4843:     { if (yang_read_description(trg, actual, s, \"enum\", NODE)) {",
          "4853:     { if (yang_read_reference(trg, actual, s, \"enum\", NODE)) {",
          "4863:     { (yyval.i) = (yyvsp[0].i);",
          "4872:     { (yyval.i) = (yyvsp[-1].i); }",
          "4878:     { (yyval.i) = (yyvsp[-1].i); }",
          "",
          "[Added Lines]",
          "4657:                                { if (((struct lys_type_enum *)actual)->flags & LYS_STATUS_MASK) {",
          "4666:                                     { if (yang_read_description(trg, actual, s, \"enum\", NODE)) {",
          "4674:                                   { if (yang_read_reference(trg, actual, s, \"enum\", NODE)) {",
          "4682:                                  { (yyval.i) = (yyvsp[0].i);",
          "4689:                                                 { (yyval.i) = (yyvsp[-1].i); }",
          "4693:                                             { (yyval.i) = (yyvsp[-1].i); }",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4895:                 s = NULL;",
          "4896:                 (yyval.i) = (int32_t) val;",
          "4897:              }",
          "4899:     break;",
          "4901:   case 210:",
          "4904:                                                         actual = (yyvsp[-1].backup_token).actual;",
          "4905:                                                       }",
          "4907:     break;",
          "4909:   case 213:",
          "4912:                          actual_type = PATH_KEYWORD;",
          "4913:                        }",
          "4915:     break;",
          "4917:   case 215:",
          "4920:                                                  backup_type = actual_type;",
          "4921:                                                  actual_type = REQUIRE_INSTANCE_KEYWORD;",
          "4922:                                                }",
          "4924:     break;",
          "4926:   case 216:",
          "4930:     break;",
          "4932:   case 217:",
          "4936:     break;",
          "4938:   case 218:",
          "4942:     break;",
          "4944:   case 219:",
          "4947:                   (yyval.i) = 1;",
          "4948:                 } else if (!strcmp(s,\"false\")) {",
          "4949:                   (yyval.i) = -1;",
          "",
          "[Removed Lines]",
          "4903:     { actual_type = (yyvsp[-1].backup_token).token;",
          "4911:     { backup_type = actual_type;",
          "4919:     { (yyval.i) = (yyvsp[0].i);",
          "4928:     { (yyval.i) = (yyvsp[-1].i); }",
          "4934:     { (yyval.i) = 1; }",
          "4940:     { (yyval.i) = -1; }",
          "4946:     { if (!strcmp(s,\"true\")) {",
          "",
          "[Added Lines]",
          "4714:                                                       { actual_type = (yyvsp[-1].backup_token).token;",
          "4720:                        { backup_type = actual_type;",
          "4726:                                                { (yyval.i) = (yyvsp[0].i);",
          "4733:                                                                                  { (yyval.i) = (yyvsp[-1].i); }",
          "4737:                                               { (yyval.i) = 1; }",
          "4741:                           { (yyval.i) = -1; }",
          "4745:               { if (!strcmp(s,\"true\")) {",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4955:                 free(s);",
          "4956:                 s = NULL;",
          "4957:               }",
          "4959:     break;",
          "4961:   case 220:",
          "4965:                                          cnt_val = 0;",
          "4966:                                          tmp = realloc(((struct yang_type *)actual)->type->info.bits.bit,",
          "",
          "[Removed Lines]",
          "4963:     { struct lys_type_bit * tmp;",
          "",
          "[Added Lines]",
          "4760:                                        { struct lys_type_bit * tmp;",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4971:                                          }",
          "4972:                                          ((struct yang_type *)actual)->type->info.bits.bit = tmp;",
          "4973:                                        }",
          "4975:     break;",
          "4977:   case 223:",
          "4980:                       YYABORT;",
          "4981:                     }",
          "4982:                     actual = (yyvsp[-2].backup_token).actual;",
          "4983:                     actual_type = (yyvsp[-2].backup_token).token;",
          "4984:                   }",
          "4986:     break;",
          "4988:   case 224:",
          "4991:                                   (yyval.backup_token).actual = yang_type = actual;",
          "4992:                                   YANG_ADDELEM(((struct yang_type *)actual)->type->info.bits.bit,",
          "4993:                                                ((struct yang_type *)actual)->type->info.bits.count, \"bits\");",
          "",
          "[Removed Lines]",
          "4979:     { if (yang_check_bit(trg->ctx, yang_type, actual, &cnt_val, is_value)) {",
          "4990:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "4774:                   { if (yang_check_bit(trg->ctx, yang_type, actual, &cnt_val, is_value)) {",
          "4783:                                 { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4998:                                   is_value = 0;",
          "4999:                                   actual_type = BIT_KEYWORD;",
          "5000:                                 }",
          "5002:     break;",
          "5004:   case 226:",
          "5007:              struct lys_iffeature *tmp;",
          "5009:              tmp = realloc(((struct lys_type_bit *)actual)->iffeature,",
          "",
          "[Removed Lines]",
          "5006:     { if (((struct lys_type_bit *)actual)->iffeature_size) {",
          "",
          "[Added Lines]",
          "4797:          { if (((struct lys_type_bit *)actual)->iffeature_size) {",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "5015:              ((struct lys_type_bit *)actual)->iffeature = tmp;",
          "5016:            }",
          "5017:          }",
          "5019:     break;",
          "5021:   case 229:",
          "5024:                                     LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"position\", \"bit\");",
          "5025:                                     YYABORT;",
          "5026:                                   }",
          "",
          "[Removed Lines]",
          "5023:     { if (is_value) {",
          "",
          "[Added Lines]",
          "4812:                                 { if (is_value) {",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "5032:                                   }",
          "5033:                                   is_value = 1;",
          "5034:                                 }",
          "5036:     break;",
          "5038:   case 230:",
          "5041:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"status\", \"bit\");",
          "5042:                                    YYABORT;",
          "5043:                                  }",
          "5044:                                  ((struct lys_type_bit *)actual)->flags |= (yyvsp[0].i);",
          "5045:                               }",
          "5047:     break;",
          "5049:   case 231:",
          "5052:                                        YYABORT;",
          "5053:                                      }",
          "5054:                                      s = NULL;",
          "5055:                                    }",
          "5057:     break;",
          "5059:   case 232:",
          "5062:                                      YYABORT;",
          "5063:                                    }",
          "5064:                                    s = NULL;",
          "5065:                                  }",
          "5067:     break;",
          "5069:   case 233:",
          "5072:                                              backup_type = actual_type;",
          "5073:                                              actual_type = POSITION_KEYWORD;",
          "5074:                                            }",
          "5076:     break;",
          "5078:   case 234:",
          "5082:     break;",
          "5084:   case 235:",
          "5088:     break;",
          "5090:   case 236:",
          "5093:                 unsigned long val;",
          "5094:                 char *endptr = NULL;",
          "5095:                 errno = 0;",
          "",
          "[Removed Lines]",
          "5040:     { if (((struct lys_type_bit *)actual)->flags & LYS_STATUS_MASK) {",
          "5051:     { if (yang_read_description(trg, actual, s, \"bit\", NODE)) {",
          "5061:     { if (yang_read_reference(trg, actual, s, \"bit\", NODE)) {",
          "5071:     { (yyval.uint) = (yyvsp[0].uint);",
          "5080:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "5086:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "",
          "[Added Lines]",
          "4827:                               { if (((struct lys_type_bit *)actual)->flags & LYS_STATUS_MASK) {",
          "4836:                                    { if (yang_read_description(trg, actual, s, \"bit\", NODE)) {",
          "4844:                                  { if (yang_read_reference(trg, actual, s, \"bit\", NODE)) {",
          "4852:                                            { (yyval.uint) = (yyvsp[0].uint);",
          "4859:                                                                { (yyval.uint) = (yyvsp[-1].uint); }",
          "4863:                                                           { (yyval.uint) = (yyvsp[-1].uint); }",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "5104:                 s = NULL;",
          "5105:                 (yyval.uint) = (uint32_t) val;",
          "5106:               }",
          "5108:     break;",
          "5110:   case 237:",
          "5113:                             actual_type = ERROR_MESSAGE_KEYWORD;",
          "5114:                           }",
          "5116:     break;",
          "5118:   case 239:",
          "5121:                             actual_type = ERROR_APP_TAG_KEYWORD;",
          "5122:                           }",
          "5124:     break;",
          "5126:   case 241:",
          "5129:                     actual_type = UNITS_KEYWORD;",
          "5130:                   }",
          "5132:     break;",
          "5134:   case 243:",
          "5137:                       actual_type = DEFAULT_KEYWORD;",
          "5138:                     }",
          "5140:     break;",
          "5142:   case 245:",
          "5145:                                        (yyval.backup_token).actual = actual;",
          "5146:                                        if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_GROUPING, sizeof(struct lys_node_grp)))) {",
          "5147:                                          YYABORT;",
          "",
          "[Removed Lines]",
          "5112:     { backup_type = actual_type;",
          "5120:     { backup_type = actual_type;",
          "5128:     { backup_type = actual_type;",
          "5136:     { backup_type = actual_type;",
          "5144:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "4885:                           { backup_type = actual_type;",
          "4891:                           { backup_type = actual_type;",
          "4897:                   { backup_type = actual_type;",
          "4903:                     { backup_type = actual_type;",
          "4909:                                      { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "5150:                                        data_node = actual;",
          "5151:                                        actual_type = GROUPING_KEYWORD;",
          "5152:                                      }",
          "5154:     break;",
          "5156:   case 246:",
          "5159:                  actual_type = (yyvsp[-1].backup_token).token;",
          "5160:                  actual = (yyvsp[-1].backup_token).actual;",
          "5161:                  data_node = (yyvsp[-1].backup_token).actual;",
          "5162:                }",
          "5164:     break;",
          "5166:   case 249:",
          "5170:     break;",
          "5172:   case 250:",
          "5175:                                        LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).grouping, \"status\", \"grouping\");",
          "5176:                                        YYABORT;",
          "5177:                                      }",
          "5178:                                      (yyvsp[-1].nodes).grouping->flags |= (yyvsp[0].i);",
          "5179:                                    }",
          "5181:     break;",
          "5183:   case 251:",
          "5186:                                             YYABORT;",
          "5187:                                           }",
          "5188:                                           s = NULL;",
          "5189:                                         }",
          "5191:     break;",
          "5193:   case 252:",
          "5196:                                           YYABORT;",
          "5197:                                         }",
          "5198:                                         s = NULL;",
          "5199:                                       }",
          "5201:     break;",
          "5203:   case 257:",
          "5206:                                                      LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, (yyvsp[-2].nodes).grouping, \"notification\");",
          "5207:                                                      YYABORT;",
          "5208:                                                    }",
          "5209:                                                  }",
          "5211:     break;",
          "5213:   case 266:",
          "5216:                                         (yyval.backup_token).actual = actual;",
          "5217:                                         if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_CONTAINER, sizeof(struct lys_node_container)))) {",
          "5218:                                           YYABORT;",
          "",
          "[Removed Lines]",
          "5158:     { LOGDBG(LY_LDGYANG, \"finished parsing grouping statement \\\"%s\\\"\", data_node->name);",
          "5168:     { (yyval.nodes).grouping = actual; }",
          "5174:     { if ((yyvsp[-1].nodes).grouping->flags & LYS_STATUS_MASK) {",
          "5185:     { if (yang_read_description(trg, (yyvsp[-1].nodes).grouping, s, \"grouping\", NODE_PRINT)) {",
          "5195:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).grouping, s, \"grouping\", NODE_PRINT)) {",
          "5205:     { if (trg->version < 2) {",
          "5215:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "4921:                { LOGDBG(LY_LDGYANG, \"finished parsing grouping statement \\\"%s\\\"\", data_node->name);",
          "4929:                           { (yyval.nodes).grouping = actual; }",
          "4933:                                    { if ((yyvsp[-1].nodes).grouping->flags & LYS_STATUS_MASK) {",
          "4942:                                         { if (yang_read_description(trg, (yyvsp[-1].nodes).grouping, s, \"grouping\", NODE_PRINT)) {",
          "4950:                                       { if (yang_read_reference(trg, (yyvsp[-1].nodes).grouping, s, \"grouping\", NODE_PRINT)) {",
          "4958:                                                  { if (trg->version < 2) {",
          "4966:                                       { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "5221:                                         s = NULL;",
          "5222:                                         actual_type = CONTAINER_KEYWORD;",
          "5223:                                       }",
          "5225:     break;",
          "5227:   case 267:",
          "5230:                   actual_type = (yyvsp[-1].backup_token).token;",
          "5231:                   actual = (yyvsp[-1].backup_token).actual;",
          "5232:                   data_node = (yyvsp[-1].backup_token).actual;",
          "5233:                 }",
          "5235:     break;",
          "5237:   case 269:",
          "5241:             if ((yyvsp[-1].nodes).container->iffeature_size) {",
          "5242:               tmp = realloc((yyvsp[-1].nodes).container->iffeature, (yyvsp[-1].nodes).container->iffeature_size * sizeof *(yyvsp[-1].nodes).container->iffeature);",
          "",
          "[Removed Lines]",
          "5229:     { LOGDBG(LY_LDGYANG, \"finished parsing container statement \\\"%s\\\"\", data_node->name);",
          "5239:     { void *tmp;",
          "",
          "[Added Lines]",
          "4978:                 { LOGDBG(LY_LDGYANG, \"finished parsing container statement \\\"%s\\\"\", data_node->name);",
          "4986:           { void *tmp;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "5256:               (yyvsp[-1].nodes).container->must = tmp;",
          "5257:             }",
          "5258:           }",
          "5260:     break;",
          "5262:   case 270:",
          "5266:     break;",
          "5268:   case 274:",
          "5271:                                           YYABORT;",
          "5272:                                         }",
          "5273:                                         s = NULL;",
          "5274:                                       }",
          "5276:     break;",
          "5278:   case 275:",
          "5281:                                         LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).container, \"config\", \"container\");",
          "5282:                                         YYABORT;",
          "5283:                                       }",
          "5284:                                       (yyvsp[-1].nodes).container->flags |= (yyvsp[0].i);",
          "5285:                                     }",
          "5287:     break;",
          "5289:   case 276:",
          "5292:                                         LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).container, \"status\", \"container\");",
          "5293:                                         YYABORT;",
          "5294:                                       }",
          "5295:                                       (yyvsp[-1].nodes).container->flags |= (yyvsp[0].i);",
          "5296:                                     }",
          "5298:     break;",
          "5300:   case 277:",
          "5303:                                              YYABORT;",
          "5304:                                            }",
          "5305:                                            s = NULL;",
          "5306:                                          }",
          "5308:     break;",
          "5310:   case 278:",
          "5313:                                            YYABORT;",
          "5314:                                          }",
          "5315:                                          s = NULL;",
          "5316:                                        }",
          "5318:     break;",
          "5320:   case 281:",
          "5323:                                                       LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, (yyvsp[-2].nodes).container, \"notification\");",
          "5324:                                                       YYABORT;",
          "5325:                                                     }",
          "5326:                                                   }",
          "5328:     break;",
          "5330:   case 284:",
          "5334:                   if (!((yyvsp[-1].nodes).node.flag & LYS_TYPE_DEF)) {",
          "5335:                     LOGVAL(trg->ctx, LYE_MISSCHILDSTMT, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaf, \"type\", \"leaf\");",
          "",
          "[Removed Lines]",
          "5264:     { (yyval.nodes).container = actual; }",
          "5270:     { if (yang_read_presence(trg, (yyvsp[-1].nodes).container, s)) {",
          "5280:     { if ((yyvsp[-1].nodes).container->flags & LYS_CONFIG_MASK) {",
          "5291:     { if ((yyvsp[-1].nodes).container->flags & LYS_STATUS_MASK) {",
          "5302:     { if (yang_read_description(trg, (yyvsp[-1].nodes).container, s, \"container\", NODE_PRINT)) {",
          "5312:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).container, s, \"container\", NODE_PRINT)) {",
          "5322:     { if (trg->version < 2) {",
          "5332:     { void *tmp;",
          "",
          "[Added Lines]",
          "5009:                            { (yyval.nodes).container = actual; }",
          "5013:                                       { if (yang_read_presence(trg, (yyvsp[-1].nodes).container, s)) {",
          "5021:                                     { if ((yyvsp[-1].nodes).container->flags & LYS_CONFIG_MASK) {",
          "5030:                                     { if ((yyvsp[-1].nodes).container->flags & LYS_STATUS_MASK) {",
          "5039:                                          { if (yang_read_description(trg, (yyvsp[-1].nodes).container, s, \"container\", NODE_PRINT)) {",
          "5047:                                        { if (yang_read_reference(trg, (yyvsp[-1].nodes).container, s, \"container\", NODE_PRINT)) {",
          "5055:                                                   { if (trg->version < 2) {",
          "5063:                 { void *tmp;",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "5365:                   actual = (yyvsp[-4].backup_token).actual;",
          "5366:                   data_node = (yyvsp[-4].backup_token).actual;",
          "5367:                 }",
          "5369:     break;",
          "5371:   case 285:",
          "5374:                                    (yyval.backup_token).actual = actual;",
          "5375:                                    if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_LEAF, sizeof(struct lys_node_leaf)))) {",
          "5376:                                      YYABORT;",
          "",
          "[Removed Lines]",
          "5373:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5102:                                  { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "5379:                                    s = NULL;",
          "5380:                                    actual_type = LEAF_KEYWORD;",
          "5381:                                  }",
          "5383:     break;",
          "5385:   case 286:",
          "5388:                             (yyval.nodes).node.flag = 0;",
          "5389:                           }",
          "5391:     break;",
          "5393:   case 289:",
          "5396:                                        (yyval.nodes) = (yyvsp[-2].nodes);",
          "5397:                                      }",
          "5399:     break;",
          "5401:   case 290:",
          "5404:                                   YYABORT;",
          "5405:                                 }",
          "5406:                                 s = NULL;",
          "5407:                               }",
          "5409:     break;",
          "5411:   case 292:",
          "5414:                                     YYABORT;",
          "5415:                                   }",
          "5416:                                   s = NULL;",
          "5417:                                 }",
          "5419:     break;",
          "5421:   case 293:",
          "5424:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaf, \"config\", \"leaf\");",
          "5425:                                    YYABORT;",
          "5426:                                  }",
          "5427:                                  (yyvsp[-1].nodes).node.ptr_leaf->flags |= (yyvsp[0].i);",
          "5428:                                }",
          "5430:     break;",
          "5432:   case 294:",
          "5435:                                       LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaf, \"mandatory\", \"leaf\");",
          "5436:                                       YYABORT;",
          "5437:                                     }",
          "5438:                                     (yyvsp[-1].nodes).node.ptr_leaf->flags |= (yyvsp[0].i);",
          "5439:                                   }",
          "5441:     break;",
          "5443:   case 295:",
          "5446:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaf, \"status\", \"leaf\");",
          "5447:                                    YYABORT;",
          "5448:                                  }",
          "5449:                                  (yyvsp[-1].nodes).node.ptr_leaf->flags |= (yyvsp[0].i);",
          "5450:                                }",
          "5452:     break;",
          "5454:   case 296:",
          "5457:                                         YYABORT;",
          "5458:                                       }",
          "5459:                                       s = NULL;",
          "5460:                                     }",
          "5462:     break;",
          "5464:   case 297:",
          "5467:                                       YYABORT;",
          "5468:                                     }",
          "5469:                                     s = NULL;",
          "5470:                                   }",
          "5472:     break;",
          "5474:   case 298:",
          "5477:                                         (yyval.backup_token).actual = actual;",
          "5478:                                         if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_LEAFLIST, sizeof(struct lys_node_leaflist)))) {",
          "5479:                                           YYABORT;",
          "",
          "[Removed Lines]",
          "5387:     { (yyval.nodes).node.ptr_leaf = actual;",
          "5395:     { (yyvsp[-2].nodes).node.flag |= LYS_TYPE_DEF;",
          "5403:     { if (yang_read_units(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, LEAF_KEYWORD)) {",
          "5413:     { if (yang_read_default(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, LEAF_KEYWORD)) {",
          "5423:     { if ((yyvsp[-1].nodes).node.ptr_leaf->flags & LYS_CONFIG_MASK) {",
          "5434:     { if ((yyvsp[-1].nodes).node.ptr_leaf->flags & LYS_MAND_MASK) {",
          "5445:     { if ((yyvsp[-1].nodes).node.ptr_leaf->flags & LYS_STATUS_MASK) {",
          "5456:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, \"leaf\", NODE_PRINT)) {",
          "5466:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, \"leaf\", NODE_PRINT)) {",
          "5476:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5114:                       { (yyval.nodes).node.ptr_leaf = actual;",
          "5120:                                      { (yyvsp[-2].nodes).node.flag |= LYS_TYPE_DEF;",
          "5126:                               { if (yang_read_units(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, LEAF_KEYWORD)) {",
          "5134:                                 { if (yang_read_default(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, LEAF_KEYWORD)) {",
          "5142:                                { if ((yyvsp[-1].nodes).node.ptr_leaf->flags & LYS_CONFIG_MASK) {",
          "5151:                                   { if ((yyvsp[-1].nodes).node.ptr_leaf->flags & LYS_MAND_MASK) {",
          "5160:                                { if ((yyvsp[-1].nodes).node.ptr_leaf->flags & LYS_STATUS_MASK) {",
          "5169:                                     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, \"leaf\", NODE_PRINT)) {",
          "5177:                                   { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_leaf, s, \"leaf\", NODE_PRINT)) {",
          "5185:                                       { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "5482:                                         s = NULL;",
          "5483:                                         actual_type = LEAF_LIST_KEYWORD;",
          "5484:                                       }",
          "5486:     break;",
          "5488:   case 299:",
          "5492:                         if ((yyvsp[-1].nodes).node.ptr_leaflist->flags & LYS_CONFIG_R) {",
          "",
          "[Removed Lines]",
          "5490:     { void *tmp;",
          "",
          "[Added Lines]",
          "5197:                       { void *tmp;",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "5538:                         actual = (yyvsp[-4].backup_token).actual;",
          "5539:                         data_node = (yyvsp[-4].backup_token).actual;",
          "5540:                       }",
          "5542:     break;",
          "5544:   case 300:",
          "5547:                                  (yyval.nodes).node.flag = 0;",
          "5548:                                }",
          "5550:     break;",
          "5552:   case 303:",
          "5555:                                             (yyval.nodes) = (yyvsp[-2].nodes);",
          "5556:                                           }",
          "5558:     break;",
          "5560:   case 304:",
          "5563:                                          free(s);",
          "5564:                                          LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaflist, \"default\");",
          "5565:                                          YYABORT;",
          "",
          "[Removed Lines]",
          "5546:     { (yyval.nodes).node.ptr_leaflist = actual;",
          "5554:     { (yyvsp[-2].nodes).node.flag |= LYS_TYPE_DEF;",
          "5562:     { if (trg->version < 2) {",
          "",
          "[Added Lines]",
          "5251:                            { (yyval.nodes).node.ptr_leaflist = actual;",
          "5257:                                           { (yyvsp[-2].nodes).node.flag |= LYS_TYPE_DEF;",
          "5263:                                      { if (trg->version < 2) {",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "5570:                                        s = NULL;",
          "5571:                                        actual = (yyvsp[-1].nodes).node.ptr_leaflist;",
          "5572:                                      }",
          "5574:     break;",
          "5576:   case 305:",
          "5579:                                        YYABORT;",
          "5580:                                      }",
          "5581:                                      s = NULL;",
          "5582:                                    }",
          "5584:     break;",
          "5586:   case 307:",
          "5589:                                         LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaflist, \"config\", \"leaf-list\");",
          "5590:                                         YYABORT;",
          "5591:                                       }",
          "5592:                                       (yyvsp[-1].nodes).node.ptr_leaflist->flags |= (yyvsp[0].i);",
          "5593:                                     }",
          "5595:     break;",
          "5597:   case 308:",
          "5600:                                               LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaflist, \"min-elements\", \"leaf-list\");",
          "5601:                                               YYABORT;",
          "5602:                                             }",
          "",
          "[Removed Lines]",
          "5578:     { if (yang_read_units(trg, (yyvsp[-1].nodes).node.ptr_leaflist, s, LEAF_LIST_KEYWORD)) {",
          "5588:     { if ((yyvsp[-1].nodes).node.ptr_leaflist->flags & LYS_CONFIG_MASK) {",
          "5599:     { if ((yyvsp[-1].nodes).node.flag & LYS_MIN_ELEMENTS) {",
          "",
          "[Added Lines]",
          "5277:                                    { if (yang_read_units(trg, (yyvsp[-1].nodes).node.ptr_leaflist, s, LEAF_LIST_KEYWORD)) {",
          "5285:                                     { if ((yyvsp[-1].nodes).node.ptr_leaflist->flags & LYS_CONFIG_MASK) {",
          "5294:                                           { if ((yyvsp[-1].nodes).node.flag & LYS_MIN_ELEMENTS) {",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "5609:                                               YYABORT;",
          "5610:                                             }",
          "5611:                                           }",
          "5613:     break;",
          "5615:   case 309:",
          "5618:                                               LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaflist, \"max-elements\", \"leaf-list\");",
          "5619:                                               YYABORT;",
          "5620:                                             }",
          "",
          "[Removed Lines]",
          "5617:     { if ((yyvsp[-1].nodes).node.flag & LYS_MAX_ELEMENTS) {",
          "",
          "[Added Lines]",
          "5310:                                           { if ((yyvsp[-1].nodes).node.flag & LYS_MAX_ELEMENTS) {",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "5627:                                               YYABORT;",
          "5628:                                             }",
          "5629:                                           }",
          "5631:     break;",
          "5633:   case 310:",
          "5636:                                             LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaflist, \"ordered by\", \"leaf-list\");",
          "5637:                                             YYABORT;",
          "5638:                                           }",
          "",
          "[Removed Lines]",
          "5635:     { if ((yyvsp[-1].nodes).node.flag & LYS_ORDERED_MASK) {",
          "",
          "[Added Lines]",
          "5326:                                         { if ((yyvsp[-1].nodes).node.flag & LYS_ORDERED_MASK) {",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "5642:                                           (yyvsp[-1].nodes).node.flag |= (yyvsp[0].i);",
          "5643:                                           (yyval.nodes) = (yyvsp[-1].nodes);",
          "5644:                                         }",
          "5646:     break;",
          "5648:   case 311:",
          "5651:                                         LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_leaflist, \"status\", \"leaf-list\");",
          "5652:                                         YYABORT;",
          "5653:                                       }",
          "5654:                                       (yyvsp[-1].nodes).node.ptr_leaflist->flags |= (yyvsp[0].i);",
          "5655:                                     }",
          "5657:     break;",
          "5659:   case 312:",
          "5662:                                              YYABORT;",
          "5663:                                            }",
          "5664:                                            s = NULL;",
          "5665:                                          }",
          "5667:     break;",
          "5669:   case 313:",
          "5672:                                            YYABORT;",
          "5673:                                          }",
          "5674:                                          s = NULL;",
          "5675:                                        }",
          "5677:     break;",
          "5679:   case 314:",
          "5682:                                    (yyval.backup_token).actual = actual;",
          "5683:                                    if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_LIST, sizeof(struct lys_node_list)))) {",
          "5684:                                      YYABORT;",
          "",
          "[Removed Lines]",
          "5650:     { if ((yyvsp[-1].nodes).node.ptr_leaflist->flags & LYS_STATUS_MASK) {",
          "5661:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_leaflist, s, \"leaf-list\", NODE_PRINT)) {",
          "5671:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_leaflist, s, \"leaf-list\", NODE_PRINT)) {",
          "5681:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5339:                                     { if ((yyvsp[-1].nodes).node.ptr_leaflist->flags & LYS_STATUS_MASK) {",
          "5348:                                          { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_leaflist, s, \"leaf-list\", NODE_PRINT)) {",
          "5356:                                        { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_leaflist, s, \"leaf-list\", NODE_PRINT)) {",
          "5364:                                  { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "5687:                                    s = NULL;",
          "5688:                                    actual_type = LIST_KEYWORD;",
          "5689:                                  }",
          "5691:     break;",
          "5693:   case 315:",
          "5697:                   if ((yyvsp[-1].nodes).node.ptr_list->iffeature_size) {",
          "5698:                     tmp = realloc((yyvsp[-1].nodes).node.ptr_list->iffeature, (yyvsp[-1].nodes).node.ptr_list->iffeature_size * sizeof *(yyvsp[-1].nodes).node.ptr_list->iffeature);",
          "",
          "[Removed Lines]",
          "5695:     { void *tmp;",
          "",
          "[Added Lines]",
          "5376:                 { void *tmp;",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "5735:                   actual = (yyvsp[-4].backup_token).actual;",
          "5736:                   data_node = (yyvsp[-4].backup_token).actual;",
          "5737:                 }",
          "5739:     break;",
          "5741:   case 316:",
          "5744:                             (yyval.nodes).node.flag = 0;",
          "5745:                           }",
          "5747:     break;",
          "5749:   case 320:",
          "5752:                                   LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_list, \"key\", \"list\");",
          "5753:                                   free(s);",
          "5754:                                   YYABORT;",
          "",
          "[Removed Lines]",
          "5743:     { (yyval.nodes).node.ptr_list = actual;",
          "5751:     { if ((yyvsp[-1].nodes).node.ptr_list->keys) {",
          "",
          "[Added Lines]",
          "5422:                       { (yyval.nodes).node.ptr_list = actual;",
          "5428:                             { if ((yyvsp[-1].nodes).node.ptr_list->keys) {",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "5757:                               (yyval.nodes) = (yyvsp[-1].nodes);",
          "5758:                               s = NULL;",
          "5759:                             }",
          "5761:     break;",
          "5763:   case 321:",
          "5766:                                  ((struct lys_unique *)actual)->expr = (const char **)s;",
          "5767:                                  (yyval.nodes) = (yyvsp[-1].nodes);",
          "5768:                                  s = NULL;",
          "5769:                                  actual = (yyvsp[-1].nodes).node.ptr_list;",
          "5770:                                }",
          "5772:     break;",
          "5774:   case 322:",
          "5777:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_list, \"config\", \"list\");",
          "5778:                                    YYABORT;",
          "5779:                                  }",
          "5780:                                  (yyvsp[-1].nodes).node.ptr_list->flags |= (yyvsp[0].i);",
          "5781:                                }",
          "5783:     break;",
          "5785:   case 323:",
          "5788:                                          LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_list, \"min-elements\", \"list\");",
          "5789:                                          YYABORT;",
          "5790:                                        }",
          "",
          "[Removed Lines]",
          "5765:     { YANG_ADDELEM((yyvsp[-1].nodes).node.ptr_list->unique, (yyvsp[-1].nodes).node.ptr_list->unique_size, \"uniques\");",
          "5776:     { if ((yyvsp[-1].nodes).node.ptr_list->flags & LYS_CONFIG_MASK) {",
          "5787:     { if ((yyvsp[-1].nodes).node.flag & LYS_MIN_ELEMENTS) {",
          "",
          "[Added Lines]",
          "5440:                                { YANG_ADDELEM((yyvsp[-1].nodes).node.ptr_list->unique, (yyvsp[-1].nodes).node.ptr_list->unique_size, \"uniques\");",
          "5449:                                { if ((yyvsp[-1].nodes).node.ptr_list->flags & LYS_CONFIG_MASK) {",
          "5458:                                      { if ((yyvsp[-1].nodes).node.flag & LYS_MIN_ELEMENTS) {",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "5797:                                          YYABORT;",
          "5798:                                        }",
          "5799:                                      }",
          "5801:     break;",
          "5803:   case 324:",
          "5806:                                          LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_list, \"max-elements\", \"list\");",
          "5807:                                          YYABORT;",
          "5808:                                        }",
          "",
          "[Removed Lines]",
          "5805:     { if ((yyvsp[-1].nodes).node.flag & LYS_MAX_ELEMENTS) {",
          "",
          "[Added Lines]",
          "5474:                                      { if ((yyvsp[-1].nodes).node.flag & LYS_MAX_ELEMENTS) {",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "5815:                                          YYABORT;",
          "5816:                                        }",
          "5817:                                      }",
          "5819:     break;",
          "5821:   case 325:",
          "5824:                                        LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_list, \"ordered by\", \"list\");",
          "5825:                                        YYABORT;",
          "5826:                                      }",
          "",
          "[Removed Lines]",
          "5823:     { if ((yyvsp[-1].nodes).node.flag & LYS_ORDERED_MASK) {",
          "",
          "[Added Lines]",
          "5490:                                    { if ((yyvsp[-1].nodes).node.flag & LYS_ORDERED_MASK) {",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "5830:                                      (yyvsp[-1].nodes).node.flag |= (yyvsp[0].i);",
          "5831:                                      (yyval.nodes) = (yyvsp[-1].nodes);",
          "5832:                                    }",
          "5834:     break;",
          "5836:   case 326:",
          "5839:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_list, \"status\", \"list\");",
          "5840:                                    YYABORT;",
          "5841:                                  }",
          "5842:                                  (yyvsp[-1].nodes).node.ptr_list->flags |= (yyvsp[0].i);",
          "5843:                                }",
          "5845:     break;",
          "5847:   case 327:",
          "5850:                                         YYABORT;",
          "5851:                                       }",
          "5852:                                       s = NULL;",
          "5853:                                     }",
          "5855:     break;",
          "5857:   case 328:",
          "5860:                                       YYABORT;",
          "5861:                                     }",
          "5862:                                     s = NULL;",
          "5863:                                   }",
          "5865:     break;",
          "5867:   case 332:",
          "5870:                                                  LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, (yyvsp[-2].nodes).node.ptr_list, \"notification\");",
          "5871:                                                  YYABORT;",
          "5872:                                                }",
          "5873:                                              }",
          "5875:     break;",
          "5877:   case 334:",
          "5880:                                      (yyval.backup_token).actual = actual;",
          "5881:                                      if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_CHOICE, sizeof(struct lys_node_choice)))) {",
          "5882:                                        YYABORT;",
          "",
          "[Removed Lines]",
          "5838:     { if ((yyvsp[-1].nodes).node.ptr_list->flags & LYS_STATUS_MASK) {",
          "5849:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_list, s, \"list\", NODE_PRINT)) {",
          "5859:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_list, s, \"list\", NODE_PRINT)) {",
          "5869:     { if (trg->version < 2) {",
          "5879:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5503:                                { if ((yyvsp[-1].nodes).node.ptr_list->flags & LYS_STATUS_MASK) {",
          "5512:                                     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_list, s, \"list\", NODE_PRINT)) {",
          "5520:                                   { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_list, s, \"list\", NODE_PRINT)) {",
          "5528:                                              { if (trg->version < 2) {",
          "5536:                                    { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "5885:                                      s = NULL;",
          "5886:                                      actual_type = CHOICE_KEYWORD;",
          "5887:                                    }",
          "5889:     break;",
          "5891:   case 335:",
          "5894:                actual_type = (yyvsp[-1].backup_token).token;",
          "5895:                actual = (yyvsp[-1].backup_token).actual;",
          "5896:                data_node = (yyvsp[-1].backup_token).actual;",
          "5897:              }",
          "5899:     break;",
          "5901:   case 337:",
          "5905:            if (((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_MAND_TRUE) && (yyvsp[-1].nodes).node.ptr_choice->dflt) {",
          "5906:               LOGVAL(trg->ctx, LYE_INCHILDSTMT, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_choice, \"default\", \"choice\");",
          "",
          "[Removed Lines]",
          "5893:     { LOGDBG(LY_LDGYANG, \"finished parsing choice statement \\\"%s\\\"\", data_node->name);",
          "5903:     { struct lys_iffeature *tmp;",
          "",
          "[Added Lines]",
          "5548:              { LOGDBG(LY_LDGYANG, \"finished parsing choice statement \\\"%s\\\"\", data_node->name);",
          "5556:          { struct lys_iffeature *tmp;",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "5917:              (yyvsp[-1].nodes).node.ptr_choice->iffeature = tmp;",
          "5918:            }",
          "5919:          }",
          "5921:     break;",
          "5923:   case 338:",
          "5926:                               (yyval.nodes).node.flag = 0;",
          "5927:                             }",
          "5929:     break;",
          "5931:   case 341:",
          "5934:                                       LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_choice, \"default\", \"choice\");",
          "5935:                                       free(s);",
          "5936:                                       YYABORT;",
          "",
          "[Removed Lines]",
          "5925:     { (yyval.nodes).node.ptr_choice = actual;",
          "5933:     { if ((yyvsp[-1].nodes).node.flag & LYS_CHOICE_DEFAULT) {",
          "",
          "[Added Lines]",
          "5576:                         { (yyval.nodes).node.ptr_choice = actual;",
          "5582:                                   { if ((yyvsp[-1].nodes).node.flag & LYS_CHOICE_DEFAULT) {",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "5940:                                     (yyval.nodes) = (yyvsp[-1].nodes);",
          "5941:                                     (yyval.nodes).node.flag |= LYS_CHOICE_DEFAULT;",
          "5942:                                   }",
          "5944:     break;",
          "5946:   case 342:",
          "5949:                                      LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_choice, \"config\", \"choice\");",
          "5950:                                      YYABORT;",
          "5951:                                    }",
          "5952:                                    (yyvsp[-1].nodes).node.ptr_choice->flags |= (yyvsp[0].i);",
          "5953:                                    (yyval.nodes) = (yyvsp[-1].nodes);",
          "5954:                                  }",
          "5956:     break;",
          "5958:   case 343:",
          "5961:                                       LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_choice, \"mandatory\", \"choice\");",
          "5962:                                       YYABORT;",
          "5963:                                     }",
          "5964:                                     (yyvsp[-1].nodes).node.ptr_choice->flags |= (yyvsp[0].i);",
          "5965:                                     (yyval.nodes) = (yyvsp[-1].nodes);",
          "5966:                                   }",
          "5968:     break;",
          "5970:   case 344:",
          "5973:                                      LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_choice, \"status\", \"choice\");",
          "5974:                                      YYABORT;",
          "5975:                                    }",
          "5976:                                    (yyvsp[-1].nodes).node.ptr_choice->flags |= (yyvsp[0].i);",
          "5977:                                    (yyval.nodes) = (yyvsp[-1].nodes);",
          "5978:                                  }",
          "5980:     break;",
          "5982:   case 345:",
          "5985:                                           YYABORT;",
          "5986:                                         }",
          "5987:                                         s = NULL;",
          "5988:                                         (yyval.nodes) = (yyvsp[-1].nodes);",
          "5989:                                       }",
          "5991:     break;",
          "5993:   case 346:",
          "5996:                                         YYABORT;",
          "5997:                                       }",
          "5998:                                       s = NULL;",
          "5999:                                       (yyval.nodes) = (yyvsp[-1].nodes);",
          "6000:                                     }",
          "6002:     break;",
          "6004:   case 356:",
          "6007:                      LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, actual, \"choice\");",
          "6008:                      YYABORT;",
          "6009:                    }",
          "6010:                  }",
          "6012:     break;",
          "6014:   case 357:",
          "6017:                                    (yyval.backup_token).actual = actual;",
          "6018:                                    if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_CASE, sizeof(struct lys_node_case)))) {",
          "6019:                                      YYABORT;",
          "",
          "[Removed Lines]",
          "5948:     { if ((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_CONFIG_MASK) {",
          "5960:     { if ((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_MAND_MASK) {",
          "5972:     { if ((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_STATUS_MASK) {",
          "5984:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_choice, s, \"choice\", NODE_PRINT)) {",
          "5995:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_choice, s, \"choice\", NODE_PRINT)) {",
          "6006:     { if (trg->version < 2 ) {",
          "6016:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5595:                                  { if ((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_CONFIG_MASK) {",
          "5605:                                   { if ((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_MAND_MASK) {",
          "5615:                                  { if ((yyvsp[-1].nodes).node.ptr_choice->flags & LYS_STATUS_MASK) {",
          "5625:                                       { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_choice, s, \"choice\", NODE_PRINT)) {",
          "5634:                                     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_choice, s, \"choice\", NODE_PRINT)) {",
          "5643:                  { if (trg->version < 2 ) {",
          "5651:                                  { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "6022:                                    s = NULL;",
          "6023:                                    actual_type = CASE_KEYWORD;",
          "6024:                                  }",
          "6026:     break;",
          "6028:   case 358:",
          "6031:              actual_type = (yyvsp[-1].backup_token).token;",
          "6032:              actual = (yyvsp[-1].backup_token).actual;",
          "6033:              data_node = (yyvsp[-1].backup_token).actual;",
          "6034:            }",
          "6036:     break;",
          "6038:   case 360:",
          "6042:            if ((yyvsp[-1].nodes).cs->iffeature_size) {",
          "6043:              tmp = realloc((yyvsp[-1].nodes).cs->iffeature, (yyvsp[-1].nodes).cs->iffeature_size * sizeof *tmp);",
          "",
          "[Removed Lines]",
          "6030:     { LOGDBG(LY_LDGYANG, \"finished parsing case statement \\\"%s\\\"\", data_node->name);",
          "6040:     { struct lys_iffeature *tmp;",
          "",
          "[Added Lines]",
          "5663:            { LOGDBG(LY_LDGYANG, \"finished parsing case statement \\\"%s\\\"\", data_node->name);",
          "5671:           { struct lys_iffeature *tmp;",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "6048:              (yyvsp[-1].nodes).cs->iffeature = tmp;",
          "6049:            }",
          "6050:           }",
          "6052:     break;",
          "6054:   case 361:",
          "6058:     break;",
          "6060:   case 364:",
          "6063:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).cs, \"status\", \"case\");",
          "6064:                                    YYABORT;",
          "6065:                                  }",
          "6066:                                  (yyvsp[-1].nodes).cs->flags |= (yyvsp[0].i);",
          "6067:                                }",
          "6069:     break;",
          "6071:   case 365:",
          "6074:                                         YYABORT;",
          "6075:                                       }",
          "6076:                                       s = NULL;",
          "6077:                                     }",
          "6079:     break;",
          "6081:   case 366:",
          "6084:                                       YYABORT;",
          "6085:                                     }",
          "6086:                                     s = NULL;",
          "6087:                                   }",
          "6089:     break;",
          "6091:   case 368:",
          "6094:                                      (yyval.backup_token).actual = actual;",
          "6095:                                      if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_ANYXML, sizeof(struct lys_node_anydata)))) {",
          "6096:                                        YYABORT;",
          "",
          "[Removed Lines]",
          "6056:     { (yyval.nodes).cs = actual; }",
          "6062:     { if ((yyvsp[-1].nodes).cs->flags & LYS_STATUS_MASK) {",
          "6073:     { if (yang_read_description(trg, (yyvsp[-1].nodes).cs, s, \"case\", NODE_PRINT)) {",
          "6083:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).cs, s, \"case\", NODE_PRINT)) {",
          "6093:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5685:                       { (yyval.nodes).cs = actual; }",
          "5689:                                { if ((yyvsp[-1].nodes).cs->flags & LYS_STATUS_MASK) {",
          "5698:                                     { if (yang_read_description(trg, (yyvsp[-1].nodes).cs, s, \"case\", NODE_PRINT)) {",
          "5706:                                   { if (yang_read_reference(trg, (yyvsp[-1].nodes).cs, s, \"case\", NODE_PRINT)) {",
          "5714:                                    { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "6099:                                      s = NULL;",
          "6100:                                      actual_type = ANYXML_KEYWORD;",
          "6101:                                    }",
          "6103:     break;",
          "6105:   case 369:",
          "6108:                actual_type = (yyvsp[-1].backup_token).token;",
          "6109:                actual = (yyvsp[-1].backup_token).actual;",
          "6110:                data_node = (yyvsp[-1].backup_token).actual;",
          "6111:              }",
          "6113:     break;",
          "6115:   case 370:",
          "6118:                                       (yyval.backup_token).actual = actual;",
          "6119:                                       if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_ANYDATA, sizeof(struct lys_node_anydata)))) {",
          "6120:                                         YYABORT;",
          "",
          "[Removed Lines]",
          "6107:     { LOGDBG(LY_LDGYANG, \"finished parsing anyxml statement \\\"%s\\\"\", data_node->name);",
          "6117:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5726:              { LOGDBG(LY_LDGYANG, \"finished parsing anyxml statement \\\"%s\\\"\", data_node->name);",
          "5734:                                     { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "6123:                                       s = NULL;",
          "6124:                                       actual_type = ANYDATA_KEYWORD;",
          "6125:                                     }",
          "6127:     break;",
          "6129:   case 371:",
          "6132:                 actual_type = (yyvsp[-1].backup_token).token;",
          "6133:                 actual = (yyvsp[-1].backup_token).actual;",
          "6134:                 data_node = (yyvsp[-1].backup_token).actual;",
          "6135:               }",
          "6137:     break;",
          "6139:   case 373:",
          "6143:            if ((yyvsp[-1].nodes).node.ptr_anydata->iffeature_size) {",
          "6144:              tmp = realloc((yyvsp[-1].nodes).node.ptr_anydata->iffeature, (yyvsp[-1].nodes).node.ptr_anydata->iffeature_size * sizeof *(yyvsp[-1].nodes).node.ptr_anydata->iffeature);",
          "",
          "[Removed Lines]",
          "6131:     { LOGDBG(LY_LDGYANG, \"finished parsing anydata statement \\\"%s\\\"\", data_node->name);",
          "6141:     { void *tmp;",
          "",
          "[Added Lines]",
          "5746:               { LOGDBG(LY_LDGYANG, \"finished parsing anydata statement \\\"%s\\\"\", data_node->name);",
          "5754:          { void *tmp;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "6158:              (yyvsp[-1].nodes).node.ptr_anydata->must = tmp;",
          "6159:            }",
          "6160:          }",
          "6162:     break;",
          "6164:   case 374:",
          "6167:                               (yyval.nodes).node.flag = actual_type;",
          "6168:                             }",
          "6170:     break;",
          "6172:   case 378:",
          "6175:                                      LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_anydata, \"config\",",
          "6176:                                             ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\");",
          "6177:                                      YYABORT;",
          "6178:                                    }",
          "6179:                                    (yyvsp[-1].nodes).node.ptr_anydata->flags |= (yyvsp[0].i);",
          "6180:                                  }",
          "6182:     break;",
          "6184:   case 379:",
          "6187:                                         LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_anydata, \"mandatory\",",
          "6188:                                                ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\");",
          "6189:                                         YYABORT;",
          "6190:                                       }",
          "6191:                                       (yyvsp[-1].nodes).node.ptr_anydata->flags |= (yyvsp[0].i);",
          "6192:                                     }",
          "6194:     break;",
          "6196:   case 380:",
          "6199:                                      LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_anydata, \"status\",",
          "6200:                                             ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\");",
          "6201:                                      YYABORT;",
          "6202:                                    }",
          "6203:                                    (yyvsp[-1].nodes).node.ptr_anydata->flags |= (yyvsp[0].i);",
          "6204:                                  }",
          "6206:     break;",
          "6208:   case 381:",
          "6211:                                           YYABORT;",
          "6212:                                         }",
          "6213:                                         s = NULL;",
          "6214:                                       }",
          "6216:     break;",
          "6218:   case 382:",
          "6221:                                         YYABORT;",
          "6222:                                       }",
          "6223:                                       s = NULL;",
          "6224:                                     }",
          "6226:     break;",
          "6228:   case 383:",
          "6231:                                        (yyval.backup_token).actual = actual;",
          "6232:                                        if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_USES, sizeof(struct lys_node_uses)))) {",
          "6233:                                          YYABORT;",
          "",
          "[Removed Lines]",
          "6166:     { (yyval.nodes).node.ptr_anydata = actual;",
          "6174:     { if ((yyvsp[-1].nodes).node.ptr_anydata->flags & LYS_CONFIG_MASK) {",
          "6186:     { if ((yyvsp[-1].nodes).node.ptr_anydata->flags & LYS_MAND_MASK) {",
          "6198:     { if ((yyvsp[-1].nodes).node.ptr_anydata->flags & LYS_STATUS_MASK) {",
          "6210:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_anydata, s, ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\", NODE_PRINT)) {",
          "6220:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_anydata, s, ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\", NODE_PRINT)) {",
          "6230:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5777:                         { (yyval.nodes).node.ptr_anydata = actual;",
          "5783:                                  { if ((yyvsp[-1].nodes).node.ptr_anydata->flags & LYS_CONFIG_MASK) {",
          "5793:                                     { if ((yyvsp[-1].nodes).node.ptr_anydata->flags & LYS_MAND_MASK) {",
          "5803:                                  { if ((yyvsp[-1].nodes).node.ptr_anydata->flags & LYS_STATUS_MASK) {",
          "5813:                                       { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_anydata, s, ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\", NODE_PRINT)) {",
          "5821:                                     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_anydata, s, ((yyvsp[-1].nodes).node.flag == ANYXML_KEYWORD) ? \"anyxml\" : \"anydata\", NODE_PRINT)) {",
          "5829:                                      { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "6236:                                        s = NULL;",
          "6237:                                        actual_type = USES_KEYWORD;",
          "6238:                                      }",
          "6240:     break;",
          "6242:   case 384:",
          "6245:              actual_type = (yyvsp[-1].backup_token).token;",
          "6246:              actual = (yyvsp[-1].backup_token).actual;",
          "6247:              data_node = (yyvsp[-1].backup_token).actual;",
          "6248:            }",
          "6250:     break;",
          "6252:   case 386:",
          "6256:            if ((yyvsp[-1].nodes).uses->iffeature_size) {",
          "6257:              tmp = realloc((yyvsp[-1].nodes).uses->iffeature, (yyvsp[-1].nodes).uses->iffeature_size * sizeof *(yyvsp[-1].nodes).uses->iffeature);",
          "",
          "[Removed Lines]",
          "6244:     { LOGDBG(LY_LDGYANG, \"finished parsing uses statement \\\"%s\\\"\", data_node->name);",
          "6254:     { void *tmp;",
          "",
          "[Added Lines]",
          "5841:            { LOGDBG(LY_LDGYANG, \"finished parsing uses statement \\\"%s\\\"\", data_node->name);",
          "5849:          { void *tmp;",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "6280:              (yyvsp[-1].nodes).uses->augment = tmp;",
          "6281:            }",
          "6282:          }",
          "6284:     break;",
          "6286:   case 387:",
          "6290:     break;",
          "6292:   case 390:",
          "6295:                                    LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).uses, \"status\", \"uses\");",
          "6296:                                    YYABORT;",
          "6297:                                  }",
          "6298:                                  (yyvsp[-1].nodes).uses->flags |= (yyvsp[0].i);",
          "6299:                                }",
          "6301:     break;",
          "6303:   case 391:",
          "6306:                                         YYABORT;",
          "6307:                                       }",
          "6308:                                       s = NULL;",
          "6309:                                     }",
          "6311:     break;",
          "6313:   case 392:",
          "6316:                                       YYABORT;",
          "6317:                                     }",
          "6318:                                     s = NULL;",
          "6319:                                   }",
          "6321:     break;",
          "6323:   case 397:",
          "6326:                                   (yyval.backup_token).actual = actual;",
          "6327:                                   YANG_ADDELEM(((struct lys_node_uses *)actual)->refine,",
          "6328:                                                ((struct lys_node_uses *)actual)->refine_size, \"refines\");",
          "",
          "[Removed Lines]",
          "6288:     { (yyval.nodes).uses = actual; }",
          "6294:     { if ((yyvsp[-1].nodes).uses->flags & LYS_STATUS_MASK) {",
          "6305:     { if (yang_read_description(trg, (yyvsp[-1].nodes).uses, s, \"uses\", NODE_PRINT)) {",
          "6315:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).uses, s, \"uses\", NODE_PRINT)) {",
          "6325:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "5881:                       { (yyval.nodes).uses = actual; }",
          "5885:                                { if ((yyvsp[-1].nodes).uses->flags & LYS_STATUS_MASK) {",
          "5894:                                     { if (yang_read_description(trg, (yyvsp[-1].nodes).uses, s, \"uses\", NODE_PRINT)) {",
          "5902:                                   { if (yang_read_reference(trg, (yyvsp[-1].nodes).uses, s, \"uses\", NODE_PRINT)) {",
          "5910:                                 { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "6334:                                   }",
          "6335:                                   actual_type = REFINE_KEYWORD;",
          "6336:                                 }",
          "6338:     break;",
          "6340:   case 398:",
          "6343:                actual = (yyvsp[-1].backup_token).actual;",
          "6344:              }",
          "6346:     break;",
          "6348:   case 400:",
          "6352:            if ((yyvsp[-1].nodes).refine->iffeature_size) {",
          "6353:              tmp = realloc((yyvsp[-1].nodes).refine->iffeature, (yyvsp[-1].nodes).refine->iffeature_size * sizeof *(yyvsp[-1].nodes).refine->iffeature);",
          "",
          "[Removed Lines]",
          "6342:     { actual_type = (yyvsp[-1].backup_token).token;",
          "6350:     { void *tmp;",
          "",
          "[Added Lines]",
          "5925:              { actual_type = (yyvsp[-1].backup_token).token;",
          "5931:          { void *tmp;",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "6376:              (yyvsp[-1].nodes).refine->dflt = tmp;",
          "6377:            }",
          "6378:          }",
          "6380:     break;",
          "6382:   case 401:",
          "6385:                                     actual_type = REFINE_KEYWORD;",
          "6386:                                   }",
          "6388:     break;",
          "6390:   case 402:",
          "6393:                                                actual_type = REFINE_KEYWORD;",
          "6394:                                                if ((yyvsp[-2].nodes).refine->target_type) {",
          "6395:                                                  if ((yyvsp[-2].nodes).refine->target_type & (LYS_LEAF | LYS_LIST | LYS_LEAFLIST | LYS_CONTAINER | LYS_ANYDATA)) {",
          "",
          "[Removed Lines]",
          "6384:     { (yyval.nodes).refine = actual;",
          "6392:     { actual = (yyvsp[-2].nodes).refine;",
          "",
          "[Added Lines]",
          "5963:                               { (yyval.nodes).refine = actual;",
          "5969:                                              { actual = (yyvsp[-2].nodes).refine;",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "6423:                  (yyvsp[-2].nodes).refine->target_type = LYS_LEAF | LYS_LIST | LYS_LEAFLIST | LYS_CONTAINER | LYS_CHOICE | LYS_CASE | LYS_ANYDATA;",
          "6424:                }",
          "6425:              }",
          "6427:     break;",
          "6429:   case 404:",
          "6432:                                              if ((yyvsp[-1].nodes).refine->target_type & LYS_CONTAINER) {",
          "6433:                                                if ((yyvsp[-1].nodes).refine->mod.presence) {",
          "6434:                                                  LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"presence\", \"refine\");",
          "",
          "[Removed Lines]",
          "6431:     { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "[Added Lines]",
          "6004:                                          { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "6450:                                            s = NULL;",
          "6451:                                            (yyval.nodes) = (yyvsp[-1].nodes);",
          "6452:                                          }",
          "6454:     break;",
          "6456:   case 405:",
          "6460:                                           if ((yyvsp[-1].nodes).refine->dflt_size) {",
          "6461:                                             if (trg->version < 2) {",
          "",
          "[Removed Lines]",
          "6458:     { int i;",
          "",
          "[Added Lines]",
          "6029:                                         { int i;",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "6506:                                           s = NULL;",
          "6507:                                           (yyval.nodes) = (yyvsp[-1].nodes);",
          "6508:                                         }",
          "6510:     break;",
          "6512:   case 406:",
          "6515:                                            if ((yyvsp[-1].nodes).refine->target_type & (LYS_LEAF | LYS_CHOICE | LYS_LIST | LYS_CONTAINER | LYS_LEAFLIST)) {",
          "6516:                                              (yyvsp[-1].nodes).refine->target_type &= (LYS_LEAF | LYS_CHOICE | LYS_LIST | LYS_CONTAINER | LYS_LEAFLIST);",
          "6517:                                              if ((yyvsp[-1].nodes).refine->flags & LYS_CONFIG_MASK) {",
          "",
          "[Removed Lines]",
          "6514:     { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "[Added Lines]",
          "6083:                                        { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "6530:                                          }",
          "6531:                                          (yyval.nodes) = (yyvsp[-1].nodes);",
          "6532:                                        }",
          "6534:     break;",
          "6536:   case 407:",
          "6539:                                               if ((yyvsp[-1].nodes).refine->target_type & (LYS_LEAF | LYS_CHOICE | LYS_ANYDATA)) {",
          "6540:                                                 (yyvsp[-1].nodes).refine->target_type &= (LYS_LEAF | LYS_CHOICE | LYS_ANYDATA);",
          "6541:                                                 if ((yyvsp[-1].nodes).refine->flags & LYS_MAND_MASK) {",
          "",
          "[Removed Lines]",
          "6538:     { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "[Added Lines]",
          "6105:                                           { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "6554:                                             }",
          "6555:                                             (yyval.nodes) = (yyvsp[-1].nodes);",
          "6556:                                           }",
          "6558:     break;",
          "6560:   case 408:",
          "6563:                                                  if ((yyvsp[-1].nodes).refine->target_type & (LYS_LIST | LYS_LEAFLIST)) {",
          "6564:                                                    (yyvsp[-1].nodes).refine->target_type &= (LYS_LIST | LYS_LEAFLIST);",
          "6565:                                                    if ((yyvsp[-1].nodes).refine->flags & LYS_RFN_MINSET) {",
          "",
          "[Removed Lines]",
          "6562:     { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "[Added Lines]",
          "6127:                                              { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "6580:                                                }",
          "6581:                                                (yyval.nodes) = (yyvsp[-1].nodes);",
          "6582:                                              }",
          "6584:     break;",
          "6586:   case 409:",
          "6589:                                                  if ((yyvsp[-1].nodes).refine->target_type & (LYS_LIST | LYS_LEAFLIST)) {",
          "6590:                                                    (yyvsp[-1].nodes).refine->target_type &= (LYS_LIST | LYS_LEAFLIST);",
          "6591:                                                    if ((yyvsp[-1].nodes).refine->flags & LYS_RFN_MAXSET) {",
          "",
          "[Removed Lines]",
          "6588:     { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "[Added Lines]",
          "6151:                                              { if ((yyvsp[-1].nodes).refine->target_type) {",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "6606:                                                }",
          "6607:                                                (yyval.nodes) = (yyvsp[-1].nodes);",
          "6608:                                              }",
          "6610:     break;",
          "6612:   case 410:",
          "6615:                                                 YYABORT;",
          "6616:                                               }",
          "6617:                                               s = NULL;",
          "6618:                                             }",
          "6620:     break;",
          "6622:   case 411:",
          "6625:                                               YYABORT;",
          "6626:                                             }",
          "6627:                                             s = NULL;",
          "6628:                                           }",
          "6630:     break;",
          "6632:   case 414:",
          "6636:                                          (yyval.backup_token).token = actual_type;",
          "6637:                                          (yyval.backup_token).actual = actual;",
          "",
          "[Removed Lines]",
          "6614:     { if (yang_read_description(trg, (yyvsp[-1].nodes).refine, s, \"refine\", NODE)) {",
          "6624:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).refine, s, \"refine\", NODE)) {",
          "6634:     { void *parent;",
          "",
          "[Added Lines]",
          "6175:                                             { if (yang_read_description(trg, (yyvsp[-1].nodes).refine, s, \"refine\", NODE)) {",
          "6183:                                           { if (yang_read_reference(trg, (yyvsp[-1].nodes).refine, s, \"refine\", NODE)) {",
          "6191:                                        { void *parent;",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "6645:                                          s = NULL;",
          "6646:                                          actual_type = AUGMENT_KEYWORD;",
          "6647:                                        }",
          "6649:     break;",
          "6651:   case 415:",
          "6654:                          actual_type = (yyvsp[-4].backup_token).token;",
          "6655:                          actual = (yyvsp[-4].backup_token).actual;",
          "6656:                          data_node = (yyvsp[-4].backup_token).actual;",
          "6657:                        }",
          "6659:     break;",
          "6661:   case 418:",
          "6664:                                (yyval.backup_token).actual = actual;",
          "6665:                                YANG_ADDELEM(trg->augment, trg->augment_size, \"augments\");",
          "6666:                                if (yang_read_augment(trg, NULL, actual, s)) {",
          "",
          "[Removed Lines]",
          "6653:     { LOGDBG(LY_LDGYANG, \"finished parsing augment statement \\\"%s\\\"\", data_node->name);",
          "6663:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6208:                        { LOGDBG(LY_LDGYANG, \"finished parsing augment statement \\\"%s\\\"\", data_node->name);",
          "6216:                              { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "6670:                                s = NULL;",
          "6671:                                actual_type = AUGMENT_KEYWORD;",
          "6672:                              }",
          "6674:     break;",
          "6676:   case 419:",
          "6679:                     actual_type = (yyvsp[-4].backup_token).token;",
          "6680:                     actual = (yyvsp[-4].backup_token).actual;",
          "6681:                     data_node = (yyvsp[-4].backup_token).actual;",
          "6682:                   }",
          "6684:     break;",
          "6686:   case 420:",
          "6690:     break;",
          "6692:   case 423:",
          "6695:                                       LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).augment, \"status\", \"augment\");",
          "6696:                                       YYABORT;",
          "6697:                                     }",
          "6698:                                     (yyvsp[-1].nodes).augment->flags |= (yyvsp[0].i);",
          "6699:                                   }",
          "6701:     break;",
          "6703:   case 424:",
          "6706:                                            YYABORT;",
          "6707:                                          }",
          "6708:                                          s = NULL;",
          "6709:                                        }",
          "6711:     break;",
          "6713:   case 425:",
          "6716:                                          YYABORT;",
          "6717:                                        }",
          "6718:                                        s = NULL;",
          "6719:                                      }",
          "6721:     break;",
          "6723:   case 428:",
          "6726:                                                     LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, (yyvsp[-2].nodes).augment, \"notification\");",
          "6727:                                                     YYABORT;",
          "6728:                                                   }",
          "6729:                                                 }",
          "6731:     break;",
          "6733:   case 430:",
          "6736:                                        LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_LYS, actual, \"action\");",
          "6737:                                        free(s);",
          "6738:                                        YYABORT;",
          "",
          "[Removed Lines]",
          "6678:     { LOGDBG(LY_LDGYANG, \"finished parsing augment statement \\\"%s\\\"\", data_node->name);",
          "6688:     { (yyval.nodes).augment = actual; }",
          "6694:     { if ((yyvsp[-1].nodes).augment->flags & LYS_STATUS_MASK) {",
          "6705:     { if (yang_read_description(trg, (yyvsp[-1].nodes).augment, s, \"augment\", NODE_PRINT)) {",
          "6715:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).augment, s, \"augment\", NODE_PRINT)) {",
          "6725:     { if (trg->version < 2) {",
          "6735:     { if (param->module->version != 2) {",
          "",
          "[Added Lines]",
          "6229:                   { LOGDBG(LY_LDGYANG, \"finished parsing augment statement \\\"%s\\\"\", data_node->name);",
          "6237:                          { (yyval.nodes).augment = actual; }",
          "6241:                                   { if ((yyvsp[-1].nodes).augment->flags & LYS_STATUS_MASK) {",
          "6250:                                        { if (yang_read_description(trg, (yyvsp[-1].nodes).augment, s, \"augment\", NODE_PRINT)) {",
          "6258:                                      { if (yang_read_reference(trg, (yyvsp[-1].nodes).augment, s, \"augment\", NODE_PRINT)) {",
          "6266:                                                 { if (trg->version < 2) {",
          "6274:                                    { if (param->module->version != 2) {",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "6746:                                      s = NULL;",
          "6747:                                      actual_type = ACTION_KEYWORD;",
          "6748:                                    }",
          "6750:     break;",
          "6752:   case 431:",
          "6755:                actual_type = (yyvsp[-1].backup_token).token;",
          "6756:                actual = (yyvsp[-1].backup_token).actual;",
          "6757:                data_node = (yyvsp[-1].backup_token).actual;",
          "6758:              }",
          "6760:     break;",
          "6762:   case 432:",
          "6765:                                   (yyval.backup_token).actual = actual;",
          "6766:                                   if (!(actual = yang_read_node(trg, NULL, param->node, s, LYS_RPC, sizeof(struct lys_node_rpc_action)))) {",
          "6767:                                     YYABORT;",
          "",
          "[Removed Lines]",
          "6754:     { LOGDBG(LY_LDGYANG, \"finished parsing action statement \\\"%s\\\"\", data_node->name);",
          "6764:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6291:              { LOGDBG(LY_LDGYANG, \"finished parsing action statement \\\"%s\\\"\", data_node->name);",
          "6299:                                 { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "6770:                                   s = NULL;",
          "6771:                                   actual_type = RPC_KEYWORD;",
          "6772:                                 }",
          "6774:     break;",
          "6776:   case 433:",
          "6779:             actual_type = (yyvsp[-1].backup_token).token;",
          "6780:             actual = (yyvsp[-1].backup_token).actual;",
          "6781:             data_node = (yyvsp[-1].backup_token).actual;",
          "6782:           }",
          "6784:     break;",
          "6786:   case 435:",
          "6790:             if ((yyvsp[-1].nodes).node.ptr_rpc->iffeature_size) {",
          "6791:               tmp = realloc((yyvsp[-1].nodes).node.ptr_rpc->iffeature, (yyvsp[-1].nodes).node.ptr_rpc->iffeature_size * sizeof *(yyvsp[-1].nodes).node.ptr_rpc->iffeature);",
          "",
          "[Removed Lines]",
          "6778:     { LOGDBG(LY_LDGYANG, \"finished parsing rpc statement \\\"%s\\\"\", data_node->name);",
          "6788:     { void *tmp;",
          "",
          "[Added Lines]",
          "6311:           { LOGDBG(LY_LDGYANG, \"finished parsing rpc statement \\\"%s\\\"\", data_node->name);",
          "6319:           { void *tmp;",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "6805:               (yyvsp[-1].nodes).node.ptr_rpc->tpdf = tmp;",
          "6806:             }",
          "6807:           }",
          "6809:     break;",
          "6811:   case 436:",
          "6814:                            (yyval.nodes).node.flag = 0;",
          "6815:                          }",
          "6817:     break;",
          "6819:   case 438:",
          "6822:                                   LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).node.ptr_rpc, \"status\", \"rpc\");",
          "6823:                                   YYABORT;",
          "6824:                                 }",
          "6825:                                 (yyvsp[-1].nodes).node.ptr_rpc->flags |= (yyvsp[0].i);",
          "6826:                              }",
          "6828:     break;",
          "6830:   case 439:",
          "6833:                                        YYABORT;",
          "6834:                                      }",
          "6835:                                      s = NULL;",
          "6836:                                    }",
          "6838:     break;",
          "6840:   case 440:",
          "6843:                                      YYABORT;",
          "6844:                                    }",
          "6845:                                    s = NULL;",
          "6846:                                  }",
          "6848:     break;",
          "6850:   case 443:",
          "6853:                                          LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-2].nodes).node.ptr_rpc, \"input\", \"rpc\");",
          "6854:                                          YYABORT;",
          "6855:                                        }",
          "6856:                                        (yyvsp[-2].nodes).node.flag |= LYS_RPC_INPUT;",
          "6857:                                        (yyval.nodes) = (yyvsp[-2].nodes);",
          "6858:                                      }",
          "6860:     break;",
          "6862:   case 444:",
          "6865:                                           LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-2].nodes).node.ptr_rpc, \"output\", \"rpc\");",
          "6866:                                           YYABORT;",
          "6867:                                         }",
          "6868:                                         (yyvsp[-2].nodes).node.flag |= LYS_RPC_OUTPUT;",
          "6869:                                         (yyval.nodes) = (yyvsp[-2].nodes);",
          "6870:                                       }",
          "6872:     break;",
          "6874:   case 445:",
          "6877:                                   (yyval.backup_token).actual = actual;",
          "6878:                                   s = strdup(\"input\");",
          "6879:                                   if (!s) {",
          "",
          "[Removed Lines]",
          "6813:     { (yyval.nodes).node.ptr_rpc = actual;",
          "6821:     { if ((yyvsp[-1].nodes).node.ptr_rpc->flags & LYS_STATUS_MASK) {",
          "6832:     { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_rpc, s, \"rpc\", NODE_PRINT)) {",
          "6842:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_rpc, s, \"rpc\", NODE_PRINT)) {",
          "6852:     { if ((yyvsp[-2].nodes).node.flag & LYS_RPC_INPUT) {",
          "6864:     { if ((yyvsp[-2].nodes).node.flag & LYS_RPC_OUTPUT) {",
          "6876:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6342:                      { (yyval.nodes).node.ptr_rpc = actual;",
          "6348:                               { if ((yyvsp[-1].nodes).node.ptr_rpc->flags & LYS_STATUS_MASK) {",
          "6357:                                    { if (yang_read_description(trg, (yyvsp[-1].nodes).node.ptr_rpc, s, \"rpc\", NODE_PRINT)) {",
          "6365:                                  { if (yang_read_reference(trg, (yyvsp[-1].nodes).node.ptr_rpc, s, \"rpc\", NODE_PRINT)) {",
          "6373:                                      { if ((yyvsp[-2].nodes).node.flag & LYS_RPC_INPUT) {",
          "6383:                                       { if ((yyvsp[-2].nodes).node.flag & LYS_RPC_OUTPUT) {",
          "6393:                                 { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "6887:                                   s = NULL;",
          "6888:                                   actual_type = INPUT_KEYWORD;",
          "6889:                                 }",
          "6891:     break;",
          "6893:   case 446:",
          "6896:                   struct lys_node_inout *input = actual;",
          "6898:                   if (input->must_size) {",
          "",
          "[Removed Lines]",
          "6895:     { void *tmp;",
          "",
          "[Added Lines]",
          "6410:                 { void *tmp;",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "6918:                   actual = (yyvsp[-4].backup_token).actual;",
          "6919:                   data_node = (yyvsp[-4].backup_token).actual;",
          "6920:                 }",
          "6922:     break;",
          "6924:   case 452:",
          "6927:                                     (yyval.backup_token).actual = actual;",
          "6928:                                     s = strdup(\"output\");",
          "6929:                                     if (!s) {",
          "",
          "[Removed Lines]",
          "6926:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6439:                                   { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "6937:                                     s = NULL;",
          "6938:                                     actual_type = OUTPUT_KEYWORD;",
          "6939:                                   }",
          "6941:     break;",
          "6943:   case 453:",
          "6946:                    struct lys_node_inout *output = actual;",
          "6948:                    if (output->must_size) {",
          "",
          "[Removed Lines]",
          "6945:     { void *tmp;",
          "",
          "[Added Lines]",
          "6456:                  { void *tmp;",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "6968:                    actual = (yyvsp[-4].backup_token).actual;",
          "6969:                    data_node = (yyvsp[-4].backup_token).actual;",
          "6970:                  }",
          "6972:     break;",
          "6974:   case 454:",
          "6977:                                            (yyval.backup_token).actual = actual;",
          "6978:                                            if (!(actual = yang_read_node(trg, actual, param->node, s, LYS_NOTIF, sizeof(struct lys_node_notif)))) {",
          "6979:                                              YYABORT;",
          "",
          "[Removed Lines]",
          "6976:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6485:                                          { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "6982:                                            s = NULL;",
          "6983:                                            actual_type = NOTIFICATION_KEYWORD;",
          "6984:                                          }",
          "6986:     break;",
          "6988:   case 455:",
          "6991:                      actual_type = (yyvsp[-1].backup_token).token;",
          "6992:                      actual = (yyvsp[-1].backup_token).actual;",
          "6993:                      data_node = (yyvsp[-1].backup_token).actual;",
          "6994:                    }",
          "6996:     break;",
          "6998:   case 457:",
          "7002:             if ((yyvsp[-1].nodes).notif->must_size) {",
          "7003:               tmp = realloc((yyvsp[-1].nodes).notif->must, (yyvsp[-1].nodes).notif->must_size * sizeof *(yyvsp[-1].nodes).notif->must);",
          "",
          "[Removed Lines]",
          "6990:     { LOGDBG(LY_LDGYANG, \"finished parsing notification statement \\\"%s\\\"\", data_node->name);",
          "7000:     { void *tmp;",
          "",
          "[Added Lines]",
          "6497:                    { LOGDBG(LY_LDGYANG, \"finished parsing notification statement \\\"%s\\\"\", data_node->name);",
          "6505:           { void *tmp;",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "7026:              (yyvsp[-1].nodes).notif->tpdf = tmp;",
          "7027:            }",
          "7028:           }",
          "7030:     break;",
          "7032:   case 458:",
          "7036:     break;",
          "7038:   case 461:",
          "7041:                                            LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_LYS, (yyvsp[-1].nodes).notif, \"status\", \"notification\");",
          "7042:                                            YYABORT;",
          "7043:                                          }",
          "7044:                                          (yyvsp[-1].nodes).notif->flags |= (yyvsp[0].i);",
          "7045:                                        }",
          "7047:     break;",
          "7049:   case 462:",
          "7052:                                                 YYABORT;",
          "7053:                                               }",
          "7054:                                               s = NULL;",
          "7055:                                             }",
          "7057:     break;",
          "7059:   case 463:",
          "7062:                                               YYABORT;",
          "7063:                                             }",
          "7064:                                             s = NULL;",
          "7065:                                           }",
          "7067:     break;",
          "7069:   case 467:",
          "7072:                                    (yyval.backup_token).actual = actual;",
          "7073:                                    YANG_ADDELEM(trg->deviation, trg->deviation_size, \"deviations\");",
          "7074:                                    ((struct lys_deviation *)actual)->target_name = transform_schema2json(trg, s);",
          "",
          "[Removed Lines]",
          "7034:     { (yyval.nodes).notif = actual; }",
          "7040:     { if ((yyvsp[-1].nodes).notif->flags & LYS_STATUS_MASK) {",
          "7051:     { if (yang_read_description(trg, (yyvsp[-1].nodes).notif, s, \"notification\", NODE_PRINT)) {",
          "7061:     { if (yang_read_reference(trg, (yyvsp[-1].nodes).notif, s, \"notification\", NODE_PRINT)) {",
          "7071:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6537:                               { (yyval.nodes).notif = actual; }",
          "6541:                                        { if ((yyvsp[-1].nodes).notif->flags & LYS_STATUS_MASK) {",
          "6550:                                             { if (yang_read_description(trg, (yyvsp[-1].nodes).notif, s, \"notification\", NODE_PRINT)) {",
          "6558:                                           { if (yang_read_reference(trg, (yyvsp[-1].nodes).notif, s, \"notification\", NODE_PRINT)) {",
          "6566:                                  { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "7079:                                    s = NULL;",
          "7080:                                    actual_type = DEVIATION_KEYWORD;",
          "7081:                                  }",
          "7083:     break;",
          "7085:   case 468:",
          "7089:                       if ((yyvsp[-1].dev)->deviate_size) {",
          "7090:                         tmp = realloc((yyvsp[-1].dev)->deviate, (yyvsp[-1].dev)->deviate_size * sizeof *(yyvsp[-1].dev)->deviate);",
          "",
          "[Removed Lines]",
          "7087:     { void *tmp;",
          "",
          "[Added Lines]",
          "6580:                     { void *tmp;",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "7100:                       actual_type = (yyvsp[-4].backup_token).token;",
          "7101:                       actual = (yyvsp[-4].backup_token).actual;",
          "7102:                     }",
          "7104:     break;",
          "7106:   case 469:",
          "7110:     break;",
          "7112:   case 470:",
          "7115:                                              YYABORT;",
          "7116:                                            }",
          "7117:                                            s = NULL;",
          "7118:                                            (yyval.dev) = (yyvsp[-1].dev);",
          "7119:                                          }",
          "7121:     break;",
          "7123:   case 471:",
          "7126:                                            YYABORT;",
          "7127:                                          }",
          "7128:                                          s = NULL;",
          "7129:                                          (yyval.dev) = (yyvsp[-1].dev);",
          "7130:                                        }",
          "7132:     break;",
          "7134:   case 477:",
          "7137:                                                (yyval.backup_token).actual = actual;",
          "7138:                                                if (!(actual = yang_read_deviate_unsupported(trg->ctx, actual))) {",
          "7139:                                                  YYABORT;",
          "7140:                                                }",
          "7141:                                                actual_type = NOT_SUPPORTED_KEYWORD;",
          "7142:                                              }",
          "7144:     break;",
          "7146:   case 478:",
          "7149:                               actual = (yyvsp[-2].backup_token).actual;",
          "7150:                             }",
          "7152:     break;",
          "7154:   case 484:",
          "7157:                            (yyval.backup_token).actual = actual;",
          "7158:                            if (!(actual = yang_read_deviate(trg->ctx, actual, LY_DEVIATE_ADD))) {",
          "7159:                              YYABORT;",
          "7160:                            }",
          "7161:                            actual_type = ADD_KEYWORD;",
          "7162:                          }",
          "7164:     break;",
          "7166:   case 485:",
          "7169:                     actual = (yyvsp[-2].backup_token).actual;",
          "7170:                   }",
          "7172:     break;",
          "7174:   case 487:",
          "7178:            if ((yyvsp[-1].deviate)->must_size) {",
          "7179:              tmp = realloc((yyvsp[-1].deviate)->must, (yyvsp[-1].deviate)->must_size * sizeof *(yyvsp[-1].deviate)->must);",
          "",
          "[Removed Lines]",
          "7108:     { (yyval.dev) = actual; }",
          "7114:     { if (yang_read_description(trg, (yyvsp[-1].dev), s, \"deviation\", NODE)) {",
          "7125:     { if (yang_read_reference(trg, (yyvsp[-1].dev), s, \"deviation\", NODE)) {",
          "7136:     { (yyval.backup_token).token = actual_type;",
          "7148:     { actual_type = (yyvsp[-2].backup_token).token;",
          "7156:     { (yyval.backup_token).token = actual_type;",
          "7168:     { actual_type = (yyvsp[-2].backup_token).token;",
          "7176:     { void *tmp;",
          "",
          "[Added Lines]",
          "6599:                            { (yyval.dev) = actual; }",
          "6603:                                          { if (yang_read_description(trg, (yyvsp[-1].dev), s, \"deviation\", NODE)) {",
          "6612:                                        { if (yang_read_reference(trg, (yyvsp[-1].dev), s, \"deviation\", NODE)) {",
          "6621:                                              { (yyval.backup_token).token = actual_type;",
          "6631:                             { actual_type = (yyvsp[-2].backup_token).token;",
          "6637:                          { (yyval.backup_token).token = actual_type;",
          "6647:                   { actual_type = (yyvsp[-2].backup_token).token;",
          "6653:          { void *tmp;",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "7202:              (yyvsp[-1].deviate)->dflt = tmp;",
          "7203:            }",
          "7204:          }",
          "7206:     break;",
          "7208:   case 488:",
          "7212:     break;",
          "7214:   case 489:",
          "7217:                                          YYABORT;",
          "7218:                                        }",
          "7219:                                        s = NULL;",
          "7220:                                        (yyval.deviate) = (yyvsp[-1].deviate);",
          "7221:                                      }",
          "7223:     break;",
          "7225:   case 491:",
          "7228:                                         ((struct lys_unique *)actual)->expr = (const char **)s;",
          "7229:                                         s = NULL;",
          "7230:                                         actual = (yyvsp[-1].deviate);",
          "7231:                                         (yyval.deviate)= (yyvsp[-1].deviate);",
          "7232:                                       }",
          "7234:     break;",
          "7236:   case 492:",
          "7240:                                          s = NULL;",
          "7241:                                          actual = (yyvsp[-1].deviate);",
          "7242:                                          (yyval.deviate) = (yyvsp[-1].deviate);",
          "7243:                                        }",
          "7245:     break;",
          "7247:   case 493:",
          "7250:                                           LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"config\", \"deviate\");",
          "7251:                                           YYABORT;",
          "7252:                                         }",
          "7253:                                         (yyvsp[-1].deviate)->flags = (yyvsp[0].i);",
          "7254:                                         (yyval.deviate) = (yyvsp[-1].deviate);",
          "7255:                                       }",
          "7257:     break;",
          "7259:   case 494:",
          "7262:                                              LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"mandatory\", \"deviate\");",
          "7263:                                              YYABORT;",
          "7264:                                            }",
          "7265:                                            (yyvsp[-1].deviate)->flags = (yyvsp[0].i);",
          "7266:                                            (yyval.deviate) = (yyvsp[-1].deviate);",
          "7267:                                          }",
          "7269:     break;",
          "7271:   case 495:",
          "7274:                                                 LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"min-elements\", \"deviation\");",
          "7275:                                                 YYABORT;",
          "7276:                                               }",
          "",
          "[Removed Lines]",
          "7210:     { (yyval.deviate) = actual; }",
          "7216:     { if (yang_read_units(trg, actual, s, ADD_KEYWORD)) {",
          "7227:     { YANG_ADDELEM((yyvsp[-1].deviate)->unique, (yyvsp[-1].deviate)->unique_size, \"uniques\");",
          "7238:     { YANG_ADDELEM((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size, \"defaults\");",
          "7249:     { if ((yyvsp[-1].deviate)->flags & LYS_CONFIG_MASK) {",
          "7261:     { if ((yyvsp[-1].deviate)->flags & LYS_MAND_MASK) {",
          "7273:     { if ((yyvsp[-1].deviate)->min_set) {",
          "",
          "[Added Lines]",
          "6685:                              { (yyval.deviate) = actual; }",
          "6689:                                      { if (yang_read_units(trg, actual, s, ADD_KEYWORD)) {",
          "6698:                                       { YANG_ADDELEM((yyvsp[-1].deviate)->unique, (yyvsp[-1].deviate)->unique_size, \"uniques\");",
          "6707:                                        { YANG_ADDELEM((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size, \"defaults\");",
          "6716:                                       { if ((yyvsp[-1].deviate)->flags & LYS_CONFIG_MASK) {",
          "6726:                                          { if ((yyvsp[-1].deviate)->flags & LYS_MAND_MASK) {",
          "6736:                                             { if ((yyvsp[-1].deviate)->min_set) {",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "7278:                                               (yyvsp[-1].deviate)->min_set = 1;",
          "7279:                                               (yyval.deviate) =  (yyvsp[-1].deviate);",
          "7280:                                             }",
          "7282:     break;",
          "7284:   case 496:",
          "7287:                                                 LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"max-elements\", \"deviation\");",
          "7288:                                                 YYABORT;",
          "7289:                                               }",
          "",
          "[Removed Lines]",
          "7286:     { if ((yyvsp[-1].deviate)->max_set) {",
          "",
          "[Added Lines]",
          "6747:                                             { if ((yyvsp[-1].deviate)->max_set) {",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "7291:                                               (yyvsp[-1].deviate)->max_set = 1;",
          "7292:                                               (yyval.deviate) =  (yyvsp[-1].deviate);",
          "7293:                                             }",
          "7295:     break;",
          "7297:   case 497:",
          "7300:                                  (yyval.backup_token).actual = actual;",
          "7301:                                  if (!(actual = yang_read_deviate(trg->ctx, actual, LY_DEVIATE_DEL))) {",
          "7302:                                    YYABORT;",
          "7303:                                  }",
          "7304:                                  actual_type = DELETE_KEYWORD;",
          "7305:                                }",
          "7307:     break;",
          "7309:   case 498:",
          "7312:                        actual = (yyvsp[-2].backup_token).actual;",
          "7313:                      }",
          "7315:     break;",
          "7317:   case 500:",
          "7321:             if ((yyvsp[-1].deviate)->must_size) {",
          "7322:               tmp = realloc((yyvsp[-1].deviate)->must, (yyvsp[-1].deviate)->must_size * sizeof *(yyvsp[-1].deviate)->must);",
          "",
          "[Removed Lines]",
          "7299:     { (yyval.backup_token).token = actual_type;",
          "7311:     { actual_type = (yyvsp[-2].backup_token).token;",
          "7319:     { void *tmp;",
          "",
          "[Added Lines]",
          "6758:                                { (yyval.backup_token).token = actual_type;",
          "6768:                      { actual_type = (yyvsp[-2].backup_token).token;",
          "6774:           { void *tmp;",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "7345:               (yyvsp[-1].deviate)->dflt = tmp;",
          "7346:             }",
          "7347:           }",
          "7349:     break;",
          "7351:   case 501:",
          "7355:     break;",
          "7357:   case 502:",
          "7360:                                             YYABORT;",
          "7361:                                           }",
          "7362:                                           s = NULL;",
          "7363:                                           (yyval.deviate) = (yyvsp[-1].deviate);",
          "7364:                                         }",
          "7366:     break;",
          "7368:   case 504:",
          "7371:                                            ((struct lys_unique *)actual)->expr = (const char **)s;",
          "7372:                                            s = NULL;",
          "7373:                                            actual = (yyvsp[-1].deviate);",
          "7374:                                            (yyval.deviate) = (yyvsp[-1].deviate);",
          "7375:                                          }",
          "7377:     break;",
          "7379:   case 505:",
          "7383:                                             s = NULL;",
          "7384:                                             actual = (yyvsp[-1].deviate);",
          "7385:                                             (yyval.deviate) = (yyvsp[-1].deviate);",
          "7386:                                           }",
          "7388:     break;",
          "7390:   case 506:",
          "7393:                                    (yyval.backup_token).actual = actual;",
          "7394:                                    if (!(actual = yang_read_deviate(trg->ctx, actual, LY_DEVIATE_RPL))) {",
          "7395:                                      YYABORT;",
          "7396:                                    }",
          "7397:                                    actual_type = REPLACE_KEYWORD;",
          "7398:                                  }",
          "7400:     break;",
          "7402:   case 507:",
          "7405:                         actual = (yyvsp[-2].backup_token).actual;",
          "7406:                       }",
          "7408:     break;",
          "7410:   case 509:",
          "7414:            if ((yyvsp[-1].deviate)->dflt_size) {",
          "7415:              tmp = realloc((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size * sizeof *(yyvsp[-1].deviate)->dflt);",
          "",
          "[Removed Lines]",
          "7353:     { (yyval.deviate) = actual; }",
          "7359:     { if (yang_read_units(trg, actual, s, DELETE_KEYWORD)) {",
          "7370:     { YANG_ADDELEM((yyvsp[-1].deviate)->unique, (yyvsp[-1].deviate)->unique_size, \"uniques\");",
          "7381:     { YANG_ADDELEM((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size, \"defaults\");",
          "7392:     { (yyval.backup_token).token = actual_type;",
          "7404:     { actual_type = (yyvsp[-2].backup_token).token;",
          "7412:     { void *tmp;",
          "",
          "[Added Lines]",
          "6806:                                 { (yyval.deviate) = actual; }",
          "6810:                                         { if (yang_read_units(trg, actual, s, DELETE_KEYWORD)) {",
          "6819:                                          { YANG_ADDELEM((yyvsp[-1].deviate)->unique, (yyvsp[-1].deviate)->unique_size, \"uniques\");",
          "6828:                                           { YANG_ADDELEM((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size, \"defaults\");",
          "6837:                                  { (yyval.backup_token).token = actual_type;",
          "6847:                       { actual_type = (yyvsp[-2].backup_token).token;",
          "6853:          { void *tmp;",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "7420:              (yyvsp[-1].deviate)->dflt = tmp;",
          "7421:            }",
          "7422:          }",
          "7424:     break;",
          "7426:   case 510:",
          "7430:     break;",
          "7432:   case 512:",
          "7435:                                              YYABORT;",
          "7436:                                            }",
          "7437:                                            s = NULL;",
          "7438:                                            (yyval.deviate) = (yyvsp[-1].deviate);",
          "7439:                                          }",
          "7441:     break;",
          "7443:   case 513:",
          "7447:                                              s = NULL;",
          "7448:                                              actual = (yyvsp[-1].deviate);",
          "7449:                                              (yyval.deviate) = (yyvsp[-1].deviate);",
          "7450:                                            }",
          "7452:     break;",
          "7454:   case 514:",
          "7457:                                               LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"config\", \"deviate\");",
          "7458:                                               YYABORT;",
          "7459:                                             }",
          "7460:                                             (yyvsp[-1].deviate)->flags = (yyvsp[0].i);",
          "7461:                                             (yyval.deviate) = (yyvsp[-1].deviate);",
          "7462:                                           }",
          "7464:     break;",
          "7466:   case 515:",
          "7469:                                                  LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"mandatory\", \"deviate\");",
          "7470:                                                  YYABORT;",
          "7471:                                                }",
          "7472:                                                (yyvsp[-1].deviate)->flags = (yyvsp[0].i);",
          "7473:                                                (yyval.deviate) = (yyvsp[-1].deviate);",
          "7474:                                              }",
          "7476:     break;",
          "7478:   case 516:",
          "7481:                                                     LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"min-elements\", \"deviation\");",
          "7482:                                                     YYABORT;",
          "7483:                                                   }",
          "",
          "[Removed Lines]",
          "7428:     { (yyval.deviate) = actual; }",
          "7434:     { if (yang_read_units(trg, actual, s, DELETE_KEYWORD)) {",
          "7445:     { YANG_ADDELEM((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size, \"defaults\");",
          "7456:     { if ((yyvsp[-1].deviate)->flags & LYS_CONFIG_MASK) {",
          "7468:     { if ((yyvsp[-1].deviate)->flags & LYS_MAND_MASK) {",
          "7480:     { if ((yyvsp[-1].deviate)->min_set) {",
          "",
          "[Added Lines]",
          "6867:                                  { (yyval.deviate) = actual; }",
          "6871:                                          { if (yang_read_units(trg, actual, s, DELETE_KEYWORD)) {",
          "6880:                                            { YANG_ADDELEM((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size, \"defaults\");",
          "6889:                                           { if ((yyvsp[-1].deviate)->flags & LYS_CONFIG_MASK) {",
          "6899:                                              { if ((yyvsp[-1].deviate)->flags & LYS_MAND_MASK) {",
          "6909:                                                 { if ((yyvsp[-1].deviate)->min_set) {",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "7485:                                                   (yyvsp[-1].deviate)->min_set = 1;",
          "7486:                                                   (yyval.deviate) =  (yyvsp[-1].deviate);",
          "7487:                                                 }",
          "7489:     break;",
          "7491:   case 517:",
          "7494:                                                     LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"max-elements\", \"deviation\");",
          "7495:                                                     YYABORT;",
          "7496:                                                   }",
          "",
          "[Removed Lines]",
          "7493:     { if ((yyvsp[-1].deviate)->max_set) {",
          "",
          "[Added Lines]",
          "6920:                                                 { if ((yyvsp[-1].deviate)->max_set) {",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "7498:                                                   (yyvsp[-1].deviate)->max_set = 1;",
          "7499:                                                   (yyval.deviate) =  (yyvsp[-1].deviate);",
          "7500:                                                 }",
          "7502:     break;",
          "7504:   case 518:",
          "7507:                         (yyval.backup_token).actual = actual;",
          "7508:                         if (!(actual = yang_read_when(trg, actual, actual_type, s))) {",
          "7509:                           YYABORT;",
          "",
          "[Removed Lines]",
          "7506:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "6931:                       { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "7511:                         s = NULL;",
          "7512:                         actual_type = WHEN_KEYWORD;",
          "7513:                       }",
          "7515:     break;",
          "7517:   case 519:",
          "7520:              actual = (yyvsp[-1].backup_token).actual;",
          "7521:            }",
          "7523:     break;",
          "7525:   case 523:",
          "7528:                                         YYABORT;",
          "7529:                                       }",
          "7530:                                       s = NULL;",
          "7531:                                     }",
          "7533:     break;",
          "7535:   case 524:",
          "7538:                                       YYABORT;",
          "7539:                                     }",
          "7540:                                     s = NULL;",
          "7541:                                   }",
          "7543:     break;",
          "7545:   case 525:",
          "7548:                              backup_type = actual_type;",
          "7549:                              actual_type = CONFIG_KEYWORD;",
          "7550:                            }",
          "7552:     break;",
          "7554:   case 526:",
          "7558:     break;",
          "7560:   case 527:",
          "7564:     break;",
          "7566:   case 528:",
          "7570:     break;",
          "7572:   case 529:",
          "7575:                   (yyval.i) = LYS_CONFIG_W | LYS_CONFIG_SET;",
          "7576:                 } else if (!strcmp(s, \"false\")) {",
          "7577:                   (yyval.i) = LYS_CONFIG_R | LYS_CONFIG_SET;",
          "",
          "[Removed Lines]",
          "7519:     { actual_type = (yyvsp[-1].backup_token).token;",
          "7527:     { if (yang_read_description(trg, actual, s, \"when\", NODE)) {",
          "7537:     { if (yang_read_reference(trg, actual, s, \"when\", NODE)) {",
          "7547:     { (yyval.i) = (yyvsp[0].i);",
          "7556:     { (yyval.i) = (yyvsp[-1].i); }",
          "7562:     { (yyval.i) = LYS_CONFIG_W | LYS_CONFIG_SET; }",
          "7568:     { (yyval.i) = LYS_CONFIG_R | LYS_CONFIG_SET; }",
          "7574:     { if (!strcmp(s, \"true\")) {",
          "",
          "[Added Lines]",
          "6942:            { actual_type = (yyvsp[-1].backup_token).token;",
          "6948:                                     { if (yang_read_description(trg, actual, s, \"when\", NODE)) {",
          "6956:                                   { if (yang_read_reference(trg, actual, s, \"when\", NODE)) {",
          "6964:                            { (yyval.i) = (yyvsp[0].i);",
          "6971:                                                    { (yyval.i) = (yyvsp[-1].i); }",
          "6975:                                     { (yyval.i) = LYS_CONFIG_W | LYS_CONFIG_SET; }",
          "6979:                           { (yyval.i) = LYS_CONFIG_R | LYS_CONFIG_SET; }",
          "6983:               { if (!strcmp(s, \"true\")) {",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "7583:                 free(s);",
          "7584:                 s = NULL;",
          "7585:               }",
          "7587:     break;",
          "7589:   case 530:",
          "7592:                                    backup_type = actual_type;",
          "7593:                                    actual_type = MANDATORY_KEYWORD;",
          "7594:                                  }",
          "7596:     break;",
          "7598:   case 531:",
          "7602:     break;",
          "7604:   case 532:",
          "7608:     break;",
          "7610:   case 533:",
          "7614:     break;",
          "7616:   case 534:",
          "7619:                   (yyval.i) = LYS_MAND_TRUE;",
          "7620:                 } else if (!strcmp(s, \"false\")) {",
          "7621:                   (yyval.i) = LYS_MAND_FALSE;",
          "",
          "[Removed Lines]",
          "7591:     { (yyval.i) = (yyvsp[0].i);",
          "7600:     { (yyval.i) = (yyvsp[-1].i); }",
          "7606:     { (yyval.i) = LYS_MAND_TRUE; }",
          "7612:     { (yyval.i) = LYS_MAND_FALSE; }",
          "7618:     { if (!strcmp(s, \"true\")) {",
          "",
          "[Added Lines]",
          "6998:                                  { (yyval.i) = (yyvsp[0].i);",
          "7005:                                                             { (yyval.i) = (yyvsp[-1].i); }",
          "7009:                                        { (yyval.i) = LYS_MAND_TRUE; }",
          "7013:                           { (yyval.i) = LYS_MAND_FALSE; }",
          "7017:               { if (!strcmp(s, \"true\")) {",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "7627:                 free(s);",
          "7628:                 s = NULL;",
          "7629:               }",
          "7631:     break;",
          "7633:   case 535:",
          "7636:                        actual_type = PRESENCE_KEYWORD;",
          "7637:                      }",
          "7639:     break;",
          "7641:   case 537:",
          "7644:                                    backup_type = actual_type;",
          "7645:                                    actual_type = MIN_ELEMENTS_KEYWORD;",
          "7646:                                  }",
          "7648:     break;",
          "7650:   case 538:",
          "7654:     break;",
          "7656:   case 539:",
          "7660:     break;",
          "7662:   case 540:",
          "7665:                   (yyval.uint) = 0;",
          "7666:                 } else {",
          "",
          "[Removed Lines]",
          "7635:     { backup_type = actual_type;",
          "7643:     { (yyval.uint) = (yyvsp[0].uint);",
          "7652:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "7658:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "7664:     { if (strlen(s) == 1 && s[0] == '0') {",
          "",
          "[Added Lines]",
          "7032:                      { backup_type = actual_type;",
          "7038:                                  { (yyval.uint) = (yyvsp[0].uint);",
          "7045:                                                                   { (yyval.uint) = (yyvsp[-1].uint); }",
          "7049:                                                      { (yyval.uint) = (yyvsp[-1].uint); }",
          "7053:               { if (strlen(s) == 1 && s[0] == '0') {",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "7680:                 free(s);",
          "7681:                 s = NULL;",
          "7682:               }",
          "7684:     break;",
          "7686:   case 541:",
          "7689:                                    backup_type = actual_type;",
          "7690:                                    actual_type = MAX_ELEMENTS_KEYWORD;",
          "7691:                                  }",
          "7693:     break;",
          "7695:   case 542:",
          "7699:     break;",
          "7701:   case 543:",
          "7705:     break;",
          "7707:   case 544:",
          "7711:     break;",
          "7713:   case 545:",
          "7716:                   (yyval.uint) = 0;",
          "7717:                 } else {",
          "",
          "[Removed Lines]",
          "7688:     { (yyval.uint) = (yyvsp[0].uint);",
          "7697:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "7703:     { (yyval.uint) = 0; }",
          "7709:     { (yyval.uint) = (yyvsp[-1].uint); }",
          "7715:     { if (!strcmp(s, \"unbounded\")) {",
          "",
          "[Added Lines]",
          "7075:                                  { (yyval.uint) = (yyvsp[0].uint);",
          "7082:                                                                   { (yyval.uint) = (yyvsp[-1].uint); }",
          "7086:                                             { (yyval.uint) = 0; }",
          "7090:                                    { (yyval.uint) = (yyvsp[-1].uint); }",
          "7094:               { if (!strcmp(s, \"unbounded\")) {",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "7731:                 free(s);",
          "7732:                 s = NULL;",
          "7733:               }",
          "7735:     break;",
          "7737:   case 546:",
          "7740:                                      backup_type = actual_type;",
          "7741:                                      actual_type = ORDERED_BY_KEYWORD;",
          "7742:                                    }",
          "7744:     break;",
          "7746:   case 547:",
          "7750:     break;",
          "7752:   case 548:",
          "7756:     break;",
          "7758:   case 549:",
          "7762:     break;",
          "7764:   case 550:",
          "7767:                   (yyval.i) = LYS_USERORDERED;",
          "7768:                 } else if (!strcmp(s, \"system\")) {",
          "7769:                   (yyval.i) = LYS_SYSTEMORDERED;",
          "",
          "[Removed Lines]",
          "7739:     { (yyval.i) = (yyvsp[0].i);",
          "7748:     { (yyval.i) = (yyvsp[-1].i); }",
          "7754:     { (yyval.i) = LYS_USERORDERED; }",
          "7760:     { (yyval.i) = LYS_SYSTEMORDERED; }",
          "7766:     { if (!strcmp(s, \"user\")) {",
          "",
          "[Added Lines]",
          "7116:                                    { (yyval.i) = (yyvsp[0].i);",
          "7123:                                                                { (yyval.i) = (yyvsp[-1].i); }",
          "7127:                                         { (yyval.i) = LYS_USERORDERED; }",
          "7131:                            { (yyval.i) = LYS_SYSTEMORDERED; }",
          "7135:               { if (!strcmp(s, \"user\")) {",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "7774:                 free(s);",
          "7775:                 s=NULL;",
          "7776:               }",
          "7778:     break;",
          "7780:   case 551:",
          "7783:                        (yyval.backup_token).actual = actual;",
          "7784:                        switch (actual_type) {",
          "7785:                        case CONTAINER_KEYWORD:",
          "",
          "[Removed Lines]",
          "7782:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "7149:                      { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "7847:                        s = NULL;",
          "7848:                        actual_type = MUST_KEYWORD;",
          "7849:                      }",
          "7851:     break;",
          "7853:   case 552:",
          "7856:              actual = (yyvsp[-1].backup_token).actual;",
          "7857:            }",
          "7859:     break;",
          "7861:   case 555:",
          "7864:                              actual_type = UNIQUE_KEYWORD;",
          "7865:                            }",
          "7867:     break;",
          "7869:   case 559:",
          "7872:                        actual_type = KEY_KEYWORD;",
          "7873:                      }",
          "7875:     break;",
          "7877:   case 561:",
          "7880:                                if (!s) {",
          "7881:                                  LOGMEM(trg->ctx);",
          "7882:                                  YYABORT;",
          "7883:                                }",
          "7884:                              }",
          "7886:     break;",
          "7888:   case 564:",
          "7891:                         (yyval.backup_token).actual = actual;",
          "7892:                         if (!(actual = yang_read_range(trg->ctx, actual, s, is_ext_instance))) {",
          "7893:                           YYABORT;",
          "",
          "[Removed Lines]",
          "7855:     { actual_type = (yyvsp[-1].backup_token).token;",
          "7863:     { backup_type = actual_type;",
          "7871:     { backup_type = actual_type;",
          "7879:     { s = strdup(yyget_text(scanner));",
          "7890:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "7220:            { actual_type = (yyvsp[-1].backup_token).token;",
          "7226:                            { backup_type = actual_type;",
          "7232:                      { backup_type = actual_type;",
          "7238:                              { s = strdup(yyget_text(scanner));",
          "7247:                       { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "7895:                         actual_type = RANGE_KEYWORD;",
          "7896:                         s = NULL;",
          "7897:                       }",
          "7899:     break;",
          "7901:   case 565:",
          "7904:                                                 s = ly_realloc(s,strlen(s) + yyget_leng(scanner) + 2);",
          "7905:                                                 if (!s) {",
          "7906:                                                   LOGMEM(trg->ctx);",
          "",
          "[Removed Lines]",
          "7903:     { if (s) {",
          "",
          "[Added Lines]",
          "7258:                                             { if (s) {",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "7918:                                                 memcpy(s + 1, yyget_text(scanner), yyget_leng(scanner) + 1);",
          "7919:                                               }",
          "7920:                                             }",
          "7922:     break;",
          "7924:   case 569:",
          "7927:                                               s = ly_realloc(s,strlen(s) + yyget_leng(scanner) + 1);",
          "7928:                                               if (!s) {",
          "7929:                                                 LOGMEM(trg->ctx);",
          "",
          "[Removed Lines]",
          "7926:     { if (s) {",
          "",
          "[Added Lines]",
          "7279:                                           { if (s) {",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "7938:                                               }",
          "7939:                                             }",
          "7940:                                           }",
          "7942:     break;",
          "7944:   case 571:",
          "7948:     break;",
          "7950:   case 572:",
          "7953:                                                                 if (!s) {",
          "7954:                                                                   LOGMEM(trg->ctx);",
          "7955:                                                                   YYABORT;",
          "7956:                                                                 }",
          "7957:                                                                 s[strlen(s) - 1] = '\\0';",
          "7958:                                                              }",
          "7960:     break;",
          "7962:   case 573:",
          "7966:     break;",
          "7968:   case 574:",
          "7971:                                                       if (!s) {",
          "7972:                                                         LOGMEM(trg->ctx);",
          "7973:                                                         YYABORT;",
          "7974:                                                       }",
          "7975:                                                       s[strlen(s) - 1] = '\\0';",
          "7976:                                                     }",
          "7978:     break;",
          "7980:   case 598:",
          "7983:                                                 unsigned long val;",
          "7985:                                                 val = strtoul(yyget_text(scanner), NULL, 10);",
          "",
          "[Removed Lines]",
          "7946:     { tmp_s = yyget_text(scanner); }",
          "7952:     { s = strdup(tmp_s);",
          "7964:     { tmp_s = yyget_text(scanner); }",
          "7970:     { s = strdup(tmp_s);",
          "",
          "[Added Lines]",
          "7297:               { tmp_s = yyget_text(scanner); }",
          "7301:                                                               { s = strdup(tmp_s);",
          "7311:      { tmp_s = yyget_text(scanner); }",
          "7315:                                                     { s = strdup(tmp_s);",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "7989:                                                 }",
          "7990:                                                 (yyval.uint) = (uint32_t) val;",
          "7991:                                              }",
          "7993:     break;",
          "7995:   case 599:",
          "7999:     break;",
          "8001:   case 600:",
          "8005:     break;",
          "8007:   case 601:",
          "8011:     break;",
          "8013:   case 602:",
          "8016:                              int64_t val;",
          "8018:                              val = strtoll(yyget_text(scanner), NULL, 10);",
          "",
          "[Removed Lines]",
          "7997:     { (yyval.uint) = 0; }",
          "8003:     { (yyval.uint) = (yyvsp[0].uint); }",
          "8009:     { (yyval.i) = 0; }",
          "",
          "[Added Lines]",
          "7338:                                  { (yyval.uint) = 0; }",
          "7342:                             { (yyval.uint) = (yyvsp[0].uint); }",
          "7346:                     { (yyval.i) = 0; }",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "8023:                              }",
          "8024:                              (yyval.i) = (int32_t) val;",
          "8025:                            }",
          "8027:     break;",
          "8029:   case 608:",
          "8032:                     free(s);",
          "8033:                     YYABORT;",
          "8034:                 }",
          "8035:               }",
          "8037:     break;",
          "8039:   case 613:",
          "8043:                if ((tmp = strchr(s, ':'))) {",
          "",
          "[Removed Lines]",
          "8031:     { if (lyp_check_identifier(trg->ctx, s, LY_IDENT_SIMPLE, trg, NULL)) {",
          "8041:     { char *tmp;",
          "",
          "[Added Lines]",
          "7364:               { if (lyp_check_identifier(trg->ctx, s, LY_IDENT_SIMPLE, trg, NULL)) {",
          "7372:              { char *tmp;",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "8061:                  }",
          "8062:                }",
          "8063:              }",
          "8065:     break;",
          "8067:   case 614:",
          "8071:     break;",
          "8073:   case 615:",
          "8077:     break;",
          "8079:   case 616:",
          "8082:                  backup_type = NODE;",
          "8083:                  (yyval.str) = s;",
          "8084:                  s = NULL;",
          "8085:                }",
          "8087:     break;",
          "8089:   case 617:",
          "8092:                            backup_type = NODE;",
          "8093:                          }",
          "8095:     break;",
          "8097:   case 618:",
          "8100:                           s = NULL;",
          "8101:                         }",
          "8103:     break;",
          "8105:   case 622:",
          "8108:                      actual = (yyvsp[-1].backup_token).actual;",
          "8109:                    }",
          "8111:     break;",
          "8113:   case 623:",
          "8116:                                                 (yyval.backup_token).actual = actual;",
          "8117:                                                 if (!(actual = yang_read_ext(trg, (actual) ? actual : trg, (yyvsp[-1].str), s,",
          "8118:                                                                              actual_type, backup_type, is_ext_instance))) {",
          "",
          "[Removed Lines]",
          "8069:     { s = (yyvsp[-1].str); }",
          "8075:     { s = (yyvsp[-3].str); }",
          "8081:     { actual_type = backup_type;",
          "8091:     { actual_type = backup_type;",
          "8099:     { (yyval.str) = s;",
          "8107:     { actual_type = (yyvsp[-1].backup_token).token;",
          "8115:     { (yyval.backup_token).token = actual_type;",
          "",
          "[Added Lines]",
          "7398:                            { s = (yyvsp[-1].str); }",
          "7402:                                                            { s = (yyvsp[-3].str); }",
          "7406:                { actual_type = backup_type;",
          "7414:                          { actual_type = backup_type;",
          "7420:                         { (yyval.str) = s;",
          "7426:                    { actual_type = (yyvsp[-1].backup_token).token;",
          "7432:                                               { (yyval.backup_token).token = actual_type;",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "8121:                                                 s = NULL;",
          "8122:                                                 actual_type = EXTENSION_INSTANCE;",
          "8123:                                               }",
          "8125:     break;",
          "8127:   case 624:",
          "8131:     break;",
          "8133:   case 639:",
          "8136:         int32_t length = 0, old_length = 0;",
          "8137:         char *tmp_value;",
          "",
          "[Removed Lines]",
          "8129:     { (yyval.str) = s; s = NULL; }",
          "8135:     {  struct yang_ext_substmt *substmt = ((struct lys_ext_instance *)actual)->parent;",
          "",
          "[Added Lines]",
          "7444:                          { (yyval.str) = s; s = NULL; }",
          "7448:      {  struct yang_ext_substmt *substmt = ((struct lys_ext_instance *)actual)->parent;",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "8158:         tmp_value[length + 1] = '\\0';",
          "8159:         tmp_value[length + 2] = '\\0';",
          "8160:       }",
          "8162:     break;",
          "8164:   case 640:",
          "8167:         int32_t length;",
          "8168:         char *tmp_value, **array;",
          "8169:         int i = 0;",
          "",
          "[Removed Lines]",
          "8166:     {  struct yang_ext_substmt *substmt = ((struct lys_ext_instance *)actual)->parent;",
          "",
          "[Added Lines]",
          "7477:      {  struct yang_ext_substmt *substmt = ((struct lys_ext_instance *)actual)->parent;",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "8199:         tmp_value[length] = '\\0';",
          "8200:         tmp_value[length + 1] = '\\0';",
          "8201:       }",
          "8203:     break;",
          "8205:   case 643:",
          "8209:     break;",
          "8211:   case 644:",
          "8215:     break;",
          "8217:   case 656:",
          "8220:                   if (!s) {",
          "8221:                     LOGMEM(trg->ctx);",
          "8222:                     YYABORT;",
          "8223:                   }",
          "8224:                 }",
          "8226:     break;",
          "8228:   case 749:",
          "8231:                           if (!s) {",
          "8232:                             LOGMEM(trg->ctx);",
          "8233:                             YYABORT;",
          "8234:                           }",
          "8235:                         }",
          "8237:     break;",
          "8239:   case 750:",
          "8242:                                     if (!s) {",
          "8243:                                       LOGMEM(trg->ctx);",
          "8244:                                       YYABORT;",
          "8245:                                     }",
          "8246:                                   }",
          "8248:     break;",
          "8250:   case 751:",
          "8254:                              type = (struct lys_type **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8255:                                                                                             \"type\", LY_STMT_TYPE);",
          "",
          "[Removed Lines]",
          "8207:     { (yyval.str) = yyget_text(scanner); }",
          "8213:     { (yyval.str) = yyget_text(scanner); }",
          "8219:     { s = strdup(yyget_text(scanner));",
          "8230:     { s = strdup(yyget_text(scanner));",
          "8241:     { s = strdup(yyget_text(scanner));",
          "8252:     { struct lys_type **type;",
          "",
          "[Added Lines]",
          "7516:                                         { (yyval.str) = yyget_text(scanner); }",
          "7520:                                                { (yyval.str) = yyget_text(scanner); }",
          "7524:                 { s = strdup(yyget_text(scanner));",
          "7533:                         { s = strdup(yyget_text(scanner));",
          "7542:                                   { s = strdup(yyget_text(scanner));",
          "7551:                        { struct lys_type **type;",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "8268:                              (yyval.v) = actual = *type;",
          "8269:                              is_ext_instance = 0;",
          "8270:                             }",
          "8272:     break;",
          "8274:   case 752:",
          "8278:                                 tpdf = (struct lys_tpdf **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8279:                                                                                                \"typedef\", LY_STMT_TYPEDEF);",
          "",
          "[Removed Lines]",
          "8276:     { struct lys_tpdf **tpdf;",
          "",
          "[Added Lines]",
          "7573:                           { struct lys_tpdf **tpdf;",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "8290:                                 (yyval.v) = actual = *tpdf;",
          "8291:                                 is_ext_instance = 0;",
          "8292:                               }",
          "8294:     break;",
          "8296:   case 753:",
          "8300:                                  iffeature = (struct lys_iffeature **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8301:                                                                                                           \"if-feature\", LY_STMT_IFFEATURE);",
          "",
          "[Removed Lines]",
          "8298:     { struct lys_iffeature **iffeature;",
          "",
          "[Added Lines]",
          "7593:                             { struct lys_iffeature **iffeature;",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "8310:                                  }",
          "8311:                                  (yyval.v) = actual = *iffeature;",
          "8312:                                }",
          "8314:     break;",
          "8316:   case 754:",
          "8319:                                     LY_STMT stmt;",
          "8321:                                     s = yyget_text(scanner);",
          "",
          "[Removed Lines]",
          "8318:     { struct lys_restr **restr;",
          "",
          "[Added Lines]",
          "7611:                               { struct lys_restr **restr;",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "8341:                                     (yyval.v) = actual = *restr;",
          "8342:                                     s = NULL;",
          "8343:                                   }",
          "8345:     break;",
          "8347:   case 755:",
          "8350:                              if (!actual) {",
          "8351:                                YYABORT;",
          "8352:                              }",
          "8353:                              (yyval.v) = actual;",
          "8354:                            }",
          "8356:     break;",
          "8358:   case 756:",
          "8361:                                  int i;",
          "8363:                                  rev = (struct lys_revision **)yang_getplace_for_extcomplex_struct(ext_instance, &i, ext_name,",
          "",
          "[Removed Lines]",
          "8349:     { actual = yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name, \"when\", LY_STMT_WHEN);",
          "8360:     { struct lys_revision **rev;",
          "",
          "[Added Lines]",
          "7640:                        { actual = yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name, \"when\", LY_STMT_WHEN);",
          "7649:                            { struct lys_revision **rev;",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "8374:                                  (yyval.revisions).revision = rev;",
          "8375:                                  (yyval.revisions).index = i;",
          "8376:                                }",
          "8378:     break;",
          "8380:   case 757:",
          "8384:                                 s = yyget_text(scanner);",
          "8385:                                 if (!strcmp(s, \"action\")) {",
          "",
          "[Removed Lines]",
          "8382:     { LY_STMT stmt;",
          "",
          "[Added Lines]",
          "7669:                           { LY_STMT stmt;",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "8418:                                 s = NULL;",
          "8419:                                 is_ext_instance = 0;",
          "8420:                               }",
          "8422:     break;",
          "8424:   case 758:",
          "8428:     break;",
          "8430:   case 790:",
          "8433:                                 actual = ext_instance;",
          "8434:                                 if (!is_ext_instance) {",
          "8435:                                   LOGVAL(trg->ctx, LYE_INSTMT, LY_VLOG_NONE, NULL, yyget_text(scanner));",
          "",
          "[Removed Lines]",
          "8426:     { LOGERR(trg->ctx, ly_errno, \"Extension's substatement \\\"%s\\\" not supported.\", yyget_text(scanner)); }",
          "8432:     { actual_type = EXTENSION_INSTANCE;",
          "",
          "[Added Lines]",
          "7711:                                            { LOGERR(trg->ctx, ly_errno, \"Extension's substatement \\\"%s\\\" not supported.\", yyget_text(scanner)); }",
          "7715:                           { actual_type = EXTENSION_INSTANCE;",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "8437:                                 }",
          "8438:                                 (yyval.i) = 0;",
          "8439:                               }",
          "8441:     break;",
          "8443:   case 792:",
          "8446:                                                                   0, LY_STMT_PREFIX)) {",
          "8447:                                        YYABORT;",
          "8448:                                      }",
          "8449:                                    }",
          "8451:     break;",
          "8453:   case 793:",
          "8456:                                                                        0, LY_STMT_DESCRIPTION)) {",
          "8457:                                             YYABORT;",
          "8458:                                           }",
          "8459:                                         }",
          "8461:     break;",
          "8463:   case 794:",
          "8466:                                                                      0, LY_STMT_REFERENCE)) {",
          "8467:                                           YYABORT;",
          "8468:                                         }",
          "8469:                                       }",
          "8471:     break;",
          "8473:   case 795:",
          "8476:                                                                      0, LY_STMT_UNITS)) {",
          "8477:                                       YYABORT;",
          "8478:                                     }",
          "8479:                                   }",
          "8481:     break;",
          "8483:   case 796:",
          "8486:                                                                 0, LY_STMT_BASE)) {",
          "8487:                                      YYABORT;",
          "8488:                                    }",
          "8489:                                  }",
          "8491:     break;",
          "8493:   case 797:",
          "8496:                                                                      0, LY_STMT_CONTACT)) {",
          "8497:                                         YYABORT;",
          "8498:                                       }",
          "8499:                                     }",
          "8501:     break;",
          "8503:   case 798:",
          "8506:                                                                      0, LY_STMT_DEFAULT)) {",
          "8507:                                         YYABORT;",
          "8508:                                       }",
          "8509:                                     }",
          "8511:     break;",
          "8513:   case 799:",
          "8516:                                                                          0, LY_STMT_ERRMSG)) {",
          "8517:                                               YYABORT;",
          "8518:                                             }",
          "8519:                                           }",
          "8521:     break;",
          "8523:   case 800:",
          "8526:                                                                          0, LY_STMT_ERRTAG)) {",
          "8527:                                               YYABORT;",
          "8528:                                             }",
          "8529:                                           }",
          "8531:     break;",
          "8533:   case 801:",
          "8536:                                                                0, LY_STMT_KEY)) {",
          "8537:                                     YYABORT;",
          "8538:                                   }",
          "8539:                                 }",
          "8541:     break;",
          "8543:   case 802:",
          "8546:                                                                      0, LY_STMT_NAMESPACE)) {",
          "8547:                                           YYABORT;",
          "8548:                                         }",
          "8549:                                       }",
          "8551:     break;",
          "8553:   case 803:",
          "8556:                                                                         0, LY_STMT_ORGANIZATION)) {",
          "8557:                                              YYABORT;",
          "8558:                                            }",
          "8559:                                          }",
          "8561:     break;",
          "8563:   case 804:",
          "8566:                                                                 0, LY_STMT_PATH)) {",
          "8567:                                      YYABORT;",
          "8568:                                    }",
          "8569:                                  }",
          "8571:     break;",
          "8573:   case 805:",
          "8576:                                                                     0, LY_STMT_PRESENCE)) {",
          "8577:                                          YYABORT;",
          "8578:                                        }",
          "8579:                                      }",
          "8581:     break;",
          "8583:   case 806:",
          "8586:                                                                          0, LY_STMT_REVISIONDATE)) {",
          "8587:                                               YYABORT;",
          "8588:                                             }",
          "8589:                                           }",
          "8591:     break;",
          "8593:   case 807:",
          "8597:        if (yang_fill_type(trg, type, (struct yang_type *)type->der, ext_instance, param->unres)) {",
          "8598:          yang_type_free(trg->ctx, type);",
          "",
          "[Removed Lines]",
          "8445:     { if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, &s,",
          "8455:     { if (yang_read_extcomplex_str(trg, ext_instance, \"description\", ext_name, &s,",
          "8465:     { if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, &s,",
          "8475:     { if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, &s,",
          "8485:     { if (yang_read_extcomplex_str(trg, ext_instance, \"base\", ext_name, &s,",
          "8495:     { if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, &s,",
          "8505:     { if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, &s,",
          "8515:     { if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, &s,",
          "8525:     { if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, &s,",
          "8535:     { if (yang_read_extcomplex_str(trg, ext_instance, \"key\", ext_name, &s,",
          "8545:     { if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, &s,",
          "8555:     { if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, &s,",
          "8565:     { if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, &s,",
          "8575:     { if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, &s,",
          "8585:     { if (yang_read_extcomplex_str(trg, ext_instance, \"revision-date\", ext_name, &s,",
          "8595:     { struct lys_type *type = (yyvsp[-2].v);",
          "",
          "[Added Lines]",
          "7726:                                    { if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, &s,",
          "7734:                                         { if (yang_read_extcomplex_str(trg, ext_instance, \"description\", ext_name, &s,",
          "7742:                                       { if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, &s,",
          "7750:                                   { if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, &s,",
          "7758:                                  { if (yang_read_extcomplex_str(trg, ext_instance, \"base\", ext_name, &s,",
          "7766:                                     { if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, &s,",
          "7774:                                     { if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, &s,",
          "7782:                                           { if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, &s,",
          "7790:                                           { if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, &s,",
          "7798:                                 { if (yang_read_extcomplex_str(trg, ext_instance, \"key\", ext_name, &s,",
          "7806:                                       { if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, &s,",
          "7814:                                          { if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, &s,",
          "7822:                                  { if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, &s,",
          "7830:                                      { if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, &s,",
          "7838:                                           { if (yang_read_extcomplex_str(trg, ext_instance, \"revision-date\", ext_name, &s,",
          "7846:      { struct lys_type *type = (yyvsp[-2].v);",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "8605:        actual = ext_instance;",
          "8606:        is_ext_instance = 1;",
          "8607:      }",
          "8609:     break;",
          "8611:   case 808:",
          "8615:        if (yang_fill_type(trg, &tpdf->type, (struct yang_type *)tpdf->type.der, tpdf, param->unres)) {",
          "8616:          yang_type_free(trg->ctx, &tpdf->type);",
          "",
          "[Removed Lines]",
          "8613:     { struct lys_tpdf *tpdf = (yyvsp[-2].v);",
          "",
          "[Added Lines]",
          "7862:      { struct lys_tpdf *tpdf = (yyvsp[-2].v);",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "8629:        actual = ext_instance;",
          "8630:        is_ext_instance = 1;",
          "8631:      }",
          "8633:     break;",
          "8635:   case 809:",
          "8638:                                                                     (yyvsp[0].i), LYS_STATUS_MASK)) {",
          "8639:                                        YYABORT;",
          "8640:                                      }",
          "8641:                                    }",
          "8643:     break;",
          "8645:   case 810:",
          "8648:                                                                     (yyvsp[0].i), LYS_CONFIG_MASK)) {",
          "8649:                                        YYABORT;",
          "8650:                                      }",
          "8651:                                    }",
          "8653:     break;",
          "8655:   case 811:",
          "8658:                                                                        (yyvsp[0].i), LYS_MAND_MASK)) {",
          "8659:                                           YYABORT;",
          "8660:                                         }",
          "8661:                                       }",
          "8663:     break;",
          "8665:   case 812:",
          "8668:                                             LOGVAL(trg->ctx, LYE_TOOMANY, LY_VLOG_NONE, NULL, \"ordered by\", ext_name);",
          "8669:                                             YYABORT;",
          "8670:                                          }",
          "",
          "[Removed Lines]",
          "8637:     { if (yang_fill_extcomplex_flags(ext_instance, ext_name, \"status\", LY_STMT_STATUS,",
          "8647:     { if (yang_fill_extcomplex_flags(ext_instance, ext_name, \"config\", LY_STMT_CONFIG,",
          "8657:     { if (yang_fill_extcomplex_flags(ext_instance, ext_name, \"mandatory\", LY_STMT_MANDATORY,",
          "8667:     { if ((yyvsp[-1].i) & LYS_ORDERED_MASK) {",
          "",
          "[Added Lines]",
          "7884:                                    { if (yang_fill_extcomplex_flags(ext_instance, ext_name, \"status\", LY_STMT_STATUS,",
          "7892:                                    { if (yang_fill_extcomplex_flags(ext_instance, ext_name, \"config\", LY_STMT_CONFIG,",
          "7900:                                       { if (yang_fill_extcomplex_flags(ext_instance, ext_name, \"mandatory\", LY_STMT_MANDATORY,",
          "7908:                                        { if ((yyvsp[-1].i) & LYS_ORDERED_MASK) {",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "8677:                                          (yyvsp[-1].i) |= (yyvsp[0].i);",
          "8678:                                          (yyval.i) = (yyvsp[-1].i);",
          "8679:                                        }",
          "8681:     break;",
          "8683:   case 813:",
          "8686:                                                                               LY_STMT_REQINSTANCE, (yyvsp[0].i))) {",
          "8687:                                                  YYABORT;",
          "8688:                                                }",
          "8689:                                              }",
          "8691:     break;",
          "8693:   case 814:",
          "8696:                                          YYABORT;",
          "8697:                                        }",
          "8698:                                      }",
          "8700:     break;",
          "8702:   case 815:",
          "8705:        if ((yyvsp[0].uint) < 1 || (yyvsp[0].uint) > 18) {",
          "8706:          LOGVAL(trg->ctx, LYE_SPEC, LY_VLOG_NONE, NULL, \"Invalid value \\\"%d\\\" of \\\"%s\\\".\", (yyvsp[0].uint), \"fraction-digits\");",
          "8707:          YYABORT;",
          "",
          "[Removed Lines]",
          "8685:     { if (yang_fill_extcomplex_uint8(ext_instance, ext_name, \"require-instance\",",
          "8695:     { if (yang_fill_extcomplex_uint8(ext_instance, ext_name, \"modifier\", LY_STMT_MODIFIER, 0)) {",
          "",
          "[Added Lines]",
          "7924:                                              { if (yang_fill_extcomplex_uint8(ext_instance, ext_name, \"require-instance\",",
          "7932:                                      { if (yang_fill_extcomplex_uint8(ext_instance, ext_name, \"modifier\", LY_STMT_MODIFIER, 0)) {",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "8710:          YYABORT;",
          "8711:        }",
          "8712:      }",
          "8714:     break;",
          "8716:   case 816:",
          "8720:                                            val = (uint32_t **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8721:                                                                                                   \"min-elements\", LY_STMT_MIN);",
          "",
          "[Removed Lines]",
          "8718:     { uint32_t **val;",
          "",
          "[Added Lines]",
          "7951:                                          { uint32_t **val;",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "8730:                                            }",
          "8732:                                          }",
          "8734:     break;",
          "8736:   case 817:",
          "8740:                                            val = (uint32_t **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8741:                                                                                                   \"max-elements\", LY_STMT_MAX);",
          "",
          "[Removed Lines]",
          "8738:     { uint32_t **val;",
          "",
          "[Added Lines]",
          "7969:                                          { uint32_t **val;",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "8750:                                            }",
          "8752:                                          }",
          "8754:     break;",
          "8756:   case 818:",
          "8760:                                        val = (uint32_t **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8761:                                                                                               \"position\", LY_STMT_POSITION);",
          "",
          "[Removed Lines]",
          "8758:     { uint32_t **val;",
          "",
          "[Added Lines]",
          "7987:                                      { uint32_t **val;",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "8770:                                        }",
          "8772:                                      }",
          "8774:     break;",
          "8776:   case 819:",
          "8780:                                     val = (int32_t **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "8781:                                                                                           \"value\", LY_STMT_VALUE);",
          "",
          "[Removed Lines]",
          "8778:     { int32_t **val;",
          "",
          "[Added Lines]",
          "8005:                                   { int32_t **val;",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "8790:                                     }",
          "8792:                                   }",
          "8794:     break;",
          "8796:   case 820:",
          "8799:                                      int rc;",
          "8801:                                      unique = (struct lys_unique **)yang_getplace_for_extcomplex_struct(ext_instance, NULL, ext_name,",
          "",
          "[Removed Lines]",
          "8798:     { struct lys_unique **unique;",
          "",
          "[Added Lines]",
          "8023:                                    { struct lys_unique **unique;",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "8815:                                        YYABORT;",
          "8816:                                      }",
          "8817:                                    }",
          "8819:     break;",
          "8821:   case 821:",
          "8825:        iffeature = (yyvsp[-2].v);",
          "8826:        s = (char *)iffeature->features;",
          "",
          "[Removed Lines]",
          "8823:     { struct lys_iffeature *iffeature;",
          "",
          "[Added Lines]",
          "8046:      { struct lys_iffeature *iffeature;",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "8834:        s = NULL;",
          "8835:        actual = ext_instance;",
          "8836:      }",
          "8838:     break;",
          "8840:   case 823:",
          "8843:          YYABORT;",
          "8844:        }",
          "8845:        actual = ext_instance;",
          "8846:      }",
          "8848:     break;",
          "8850:   case 824:",
          "8854:          YYABORT;",
          "8855:        }",
          "8856:        actual = ext_instance;",
          "8857:      }",
          "8859:     break;",
          "8861:   case 825:",
          "8865:        for (i = 0; i < (yyvsp[-2].revisions).index; ++i) {",
          "8866:          if (!strcmp((yyvsp[-2].revisions).revision[i]->date, (yyvsp[-2].revisions).revision[(yyvsp[-2].revisions).index]->date)) {",
          "",
          "[Removed Lines]",
          "8842:     { if (yang_check_ext_instance(trg, &((struct lys_restr *)(yyvsp[-2].v))->ext, ((struct lys_restr *)(yyvsp[-2].v))->ext_size, (yyvsp[-2].v), param->unres)) {",
          "8852:     { if (yang_check_ext_instance(trg, &(*(struct lys_when **)(yyvsp[-2].v))->ext, (*(struct lys_when **)(yyvsp[-2].v))->ext_size,",
          "8863:     { int i;",
          "",
          "[Added Lines]",
          "8063:      { if (yang_check_ext_instance(trg, &((struct lys_restr *)(yyvsp[-2].v))->ext, ((struct lys_restr *)(yyvsp[-2].v))->ext_size, (yyvsp[-2].v), param->unres)) {",
          "8071:      { if (yang_check_ext_instance(trg, &(*(struct lys_when **)(yyvsp[-2].v))->ext, (*(struct lys_when **)(yyvsp[-2].v))->ext_size,",
          "8080:      { int i;",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "8874:        }",
          "8875:        actual = ext_instance;",
          "8876:      }",
          "8878:     break;",
          "8880:   case 826:",
          "8883:                                                                     is_ext_instance = 1;",
          "8884:                                                                   }",
          "8886:     break;",
          "",
          "[Removed Lines]",
          "8882:     { actual = ext_instance;",
          "",
          "[Added Lines]",
          "8097:                                                                   { actual = ext_instance;",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "8950:           {",
          "8951:             if (yymsg != yymsgbuf)",
          "8952:               YYSTACK_FREE (yymsg);",
          "8954:             if (!yymsg)",
          "8955:               {",
          "8956:                 yymsg = yymsgbuf;",
          "",
          "[Removed Lines]",
          "8953:             yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);",
          "",
          "[Added Lines]",
          "8167:             yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "9001: | yyerrorlab -- error raised explicitly by YYERROR.  |",
          "9003: yyerrorlab:",
          "",
          "[Removed Lines]",
          "9006:      YYERROR and the label yyerrorlab therefore never appears in user",
          "9008:   if (/*CONSTCOND*/ 0)",
          "9009:      goto yyerrorlab;",
          "",
          "[Added Lines]",
          "8220:   if (0)",
          "8221:     YYERROR;",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "9091: #endif",
          "9093: yyreturn:",
          "9094:   if (yychar != YYEMPTY)",
          "9095:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8309: | yyreturn -- parsing is finished, return the result.  |",
          "",
          "---------------"
        ],
        "src/parser_yang_bis.h||src/parser_yang_bis.h": [
          "File: src/parser_yang_bis.h -> src/parser_yang_bis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2019 Free Software Foundation,",
          "6:    Inc.",
          "",
          "---------------"
        ],
        "src/parser_yin.c||src/parser_yin.c": [
          "File: src/parser_yin.c -> src/parser_yin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7339:     struct unres_schema *unres;",
          "7340:     const char *value;",
          "7341:     int ret;",
          "7343:     unres = calloc(1, sizeof *unres);",
          "7344:     LY_CHECK_ERR_RETURN(!unres, LOGMEM(ctx), NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7342:     uint8_t i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7358:         goto error;",
          "7359:     }",
          "7361:     module = calloc(1, sizeof *module);",
          "7362:     LY_CHECK_ERR_GOTO(!module, LOGMEM(ctx), error);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7364:     for (i = 0; i < ctx->models.parsing_sub_modules_count; ++i) {",
          "7365:         if (!strcmp(ctx->models.parsing_sub_modules[i]->name, value)) {",
          "7366:             LOGVAL(ctx, LYE_CIRC_IMPORTS, LY_VLOG_NONE, NULL, value);",
          "7367:             goto error;",
          "7368:         }",
          "7369:     }",
          "",
          "---------------"
        ],
        "src/yang.y.in||src/yang.y.in": [
          "File: src/yang.y.in -> src/yang.y.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:                                        YYABORT;",
          "397:                                      }",
          "398:                                      trg = param->module;",
          "400:                                      s = NULL;",
          "401:                                      actual_type = MODULE_KEYWORD;",
          "402:                                    }",
          "",
          "[Removed Lines]",
          "399:                                      yang_read_common(trg,s,MODULE_KEYWORD);",
          "",
          "[Added Lines]",
          "399:                                      if (yang_read_common(trg,s,MODULE_KEYWORD)) {",
          "400:                                        YYABORT;",
          "401:                                      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:                                           YYABORT;",
          "446:                                         }",
          "447:                                         trg = (struct lys_module *)param->submodule;",
          "449:                                         s = NULL;",
          "450:                                         actual_type = SUBMODULE_KEYWORD;",
          "451:                                       }",
          "",
          "[Removed Lines]",
          "448:                                         yang_read_common(trg,s,MODULE_KEYWORD);",
          "",
          "[Added Lines]",
          "450:                                         if (yang_read_common(trg,s,MODULE_KEYWORD)) {",
          "451:                                           YYABORT;",
          "452:                                         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}