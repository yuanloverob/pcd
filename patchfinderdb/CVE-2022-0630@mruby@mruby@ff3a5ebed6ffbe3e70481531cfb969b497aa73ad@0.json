{
  "cve_id": "CVE-2022-0630",
  "cve_desc": "Out-of-bounds Read in Homebrew mruby prior to 3.2.",
  "repo": "mruby/mruby",
  "patch_hash": "ff3a5ebed6ffbe3e70481531cfb969b497aa73ad",
  "patch_info": {
    "commit_hash": "ff3a5ebed6ffbe3e70481531cfb969b497aa73ad",
    "repo": "mruby/mruby",
    "commit_url": "https://github.com/mruby/mruby/commit/ff3a5ebed6ffbe3e70481531cfb969b497aa73ad",
    "files": [
      "src/vm.c"
    ],
    "message": "vm.c: should check type before hash access.\n\nSince the operand of double splat (`**`) may not be a hash, simple\nassertion (previous code since d42a64e) was not enough for this case.",
    "before_after_code_files": [
      "src/vm.c||src/vm.c"
    ]
  },
  "patch_diff": {
    "src/vm.c||src/vm.c": [
      "File: src/vm.c -> src/vm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2766:       int lim = a+b*2+1;",
      "2768:       hash = regs[a];",
      "2770:       for (i=a+1; i<lim; i+=2) {",
      "2771:         mrb_hash_set(mrb, hash, regs[i], regs[i+1]);",
      "2772:       }",
      "",
      "[Removed Lines]",
      "2769:       mrb_assert(mrb_hash_p(hash));",
      "",
      "[Added Lines]",
      "2769:       mrb_ensure_hash_type(mrb, hash);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d42a64eadfc060f147163aef48e068ca371d90dd",
      "candidate_info": {
        "commit_hash": "d42a64eadfc060f147163aef48e068ca371d90dd",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/d42a64eadfc060f147163aef48e068ca371d90dd",
        "files": [
          "src/vm.c"
        ],
        "message": "vm.c: add assertion for type of register values.\n\nWe used to check them by `mrb_ensure_xxx_type()` functions, but type\nerrors there should not occur if there's no bug in code generations.\nSo we use assertion rather than dynamic type checks.",
        "before_after_code_files": [
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vm.c||src/vm.c"
          ],
          "candidate": [
            "src/vm.c||src/vm.c"
          ]
        }
      },
      "candidate_diff": {
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2618:         regs[a] = splat;",
          "2619:       }",
          "2620:       else {",
          "2622:         mrb_ary_concat(mrb, regs[a], splat);",
          "2623:       }",
          "2624:       mrb_gc_arena_restore(mrb, ai);",
          "",
          "[Removed Lines]",
          "2621:         mrb_assert(mrb_type(regs[a]) == MRB_TT_ARRAY);",
          "",
          "[Added Lines]",
          "2621:         mrb_assert(mrb_array_p(regs[a]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2626:     }",
          "2628:     CASE(OP_ARYPUSH, BB) {",
          "2630:       for (mrb_int i=0; i<b; i++) {",
          "2631:         mrb_ary_push(mrb, regs[a], regs[a+i+1]);",
          "2632:       }",
          "",
          "[Removed Lines]",
          "2629:       mrb_assert(mrb_type(regs[a]) == MRB_TT_ARRAY);",
          "",
          "[Added Lines]",
          "2629:       mrb_assert(mrb_array_p(regs[a]));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2664:     }",
          "2666:     CASE(OP_ASET, BBB) {",
          "2668:       mrb_ary_set(mrb, regs[b], c, regs[a]);",
          "2669:       NEXT;",
          "2670:     }",
          "",
          "[Removed Lines]",
          "2667:       mrb_assert(mrb_type(regs[b]) == MRB_TT_ARRAY);",
          "",
          "[Added Lines]",
          "2667:       mrb_assert(mrb_array_p(regs[a]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2704:     }",
          "2706:     CASE(OP_INTERN, B) {",
          "2707:       mrb_sym sym = mrb_intern_str(mrb, regs[a]);",
          "2709:       regs[a] = mrb_symbol_value(sym);",
          "2710:       NEXT;",
          "2711:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2707:       mrb_assert(mrb_string_p(regs[a]));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2742:     }",
          "2744:     CASE(OP_STRCAT, B) {",
          "2746:       mrb_str_concat(mrb, regs[a], regs[a+1]);",
          "2747:       NEXT;",
          "2748:     }",
          "",
          "[Removed Lines]",
          "2745:       mrb_ensure_string_type(mrb, regs[a]);",
          "",
          "[Added Lines]",
          "2745:       mrb_assert(mrb_string_p(regs[a]));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2766:       int lim = a+b*2+1;",
          "2768:       hash = regs[a];",
          "2770:       for (i=a+1; i<lim; i+=2) {",
          "2771:         mrb_hash_set(mrb, hash, regs[i], regs[i+1]);",
          "2772:       }",
          "",
          "[Removed Lines]",
          "2769:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "[Added Lines]",
          "2769:       mrb_assert(mrb_hash_p(hash));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2776:     CASE(OP_HASHCAT, B) {",
          "2777:       mrb_value hash = regs[a];",
          "2780:       mrb_hash_merge(mrb, hash, regs[a+1]);",
          "2781:       mrb_gc_arena_restore(mrb, ai);",
          "2782:       NEXT;",
          "",
          "[Removed Lines]",
          "2779:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "[Added Lines]",
          "2779:       mrb_assert(mrb_hash_p(hash));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "913a0a5a036664ab0d12a1af40b652412301c89f",
      "candidate_info": {
        "commit_hash": "913a0a5a036664ab0d12a1af40b652412301c89f",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/913a0a5a036664ab0d12a1af40b652412301c89f",
        "files": [
          "src/vm.c"
        ],
        "message": "vm.c: add assertions instead of `mrb_ensure_hash_type()`.",
        "before_after_code_files": [
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vm.c||src/vm.c"
          ],
          "candidate": [
            "src/vm.c||src/vm.c"
          ]
        }
      },
      "candidate_diff": {
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2687:       int lim = a+b*2+1;",
          "2689:       hash = regs[a];",
          "2691:       for (i=a+1; i<lim; i+=2) {",
          "2692:         mrb_hash_set(mrb, hash, regs[i], regs[i+1]);",
          "2693:       }",
          "",
          "[Removed Lines]",
          "2690:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "[Added Lines]",
          "2690:       mrb_assert(mrb_type(hash) == MRB_TT_HASH);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2697:     CASE(OP_HASHCAT, B) {",
          "2698:       mrb_value hash = regs[a];",
          "2701:       mrb_hash_merge(mrb, hash, regs[a+1]);",
          "2702:       mrb_gc_arena_restore(mrb, ai);",
          "2703:       NEXT;",
          "",
          "[Removed Lines]",
          "2700:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "[Added Lines]",
          "2700:       mrb_assert(mrb_type(hash) == MRB_TT_HASH);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e86c9cb57c0ee799ca66d18612e15c6c8983f872",
      "candidate_info": {
        "commit_hash": "e86c9cb57c0ee799ca66d18612e15c6c8983f872",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/e86c9cb57c0ee799ca66d18612e15c6c8983f872",
        "files": [
          "mrbgems/mruby-io/src/file.c",
          "mrbgems/mruby-kernel-ext/src/kernel.c",
          "mrbgems/mruby-string-ext/src/string.c",
          "src/class.c",
          "src/vm.c"
        ],
        "message": "Do no use return values from `mrb_ensure_` functions.\n\nThey return the checking argument without modification, so the values\nare already there. Maybe we should change the return type to `void` but\nkeep them unchanged for compatibility.",
        "before_after_code_files": [
          "mrbgems/mruby-io/src/file.c||mrbgems/mruby-io/src/file.c",
          "mrbgems/mruby-kernel-ext/src/kernel.c||mrbgems/mruby-kernel-ext/src/kernel.c",
          "mrbgems/mruby-string-ext/src/string.c||mrbgems/mruby-string-ext/src/string.c",
          "src/class.c||src/class.c",
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vm.c||src/vm.c"
          ],
          "candidate": [
            "src/vm.c||src/vm.c"
          ]
        }
      },
      "candidate_diff": {
        "mrbgems/mruby-io/src/file.c||mrbgems/mruby-io/src/file.c": [
          "File: mrbgems/mruby-io/src/file.c -> mrbgems/mruby-io/src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: mrb_file_s_unlink(mrb_state *mrb, mrb_value obj)",
          "117: {",
          "118:   const mrb_value *argv;",
          "120:   mrb_int argc, i;",
          "121:   char *path;",
          "123:   mrb_get_args(mrb, \"*\", &argv, &argc);",
          "124:   for (i = 0; i < argc; i++) {",
          "125:     const char *utf8_path;",
          "127:     utf8_path = RSTRING_CSTR(mrb, pathv);",
          "128:     path = mrb_locale_from_utf8(utf8_path, -1);",
          "129:     if (UNLINK(path) < 0) {",
          "",
          "[Removed Lines]",
          "119:   mrb_value pathv;",
          "126:     pathv = mrb_ensure_string_type(mrb, argv[i]);",
          "",
          "[Added Lines]",
          "125:     mrb_value pathv = argv[i];",
          "126:     mrb_ensure_string_type(mrb, pathv);",
          "",
          "---------------"
        ],
        "mrbgems/mruby-kernel-ext/src/kernel.c||mrbgems/mruby-kernel-ext/src/kernel.c": [
          "File: mrbgems/mruby-kernel-ext/src/kernel.c -> mrbgems/mruby-kernel-ext/src/kernel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   if (mrb_nil_p(arg) || (mrb_array_p(arg) && RARRAY_LEN(arg) == 0)) {",
          "203:     return mrb_hash_new(mrb);",
          "204:   }",
          "206: }",
          "208: void",
          "",
          "[Removed Lines]",
          "205:   return mrb_ensure_hash_type(mrb, arg);",
          "",
          "[Added Lines]",
          "205:   mrb_ensure_hash_type(mrb, arg);",
          "206:   return arg;",
          "",
          "---------------"
        ],
        "mrbgems/mruby-string-ext/src/string.c||mrbgems/mruby-string-ext/src/string.c": [
          "File: mrbgems/mruby-string-ext/src/string.c -> mrbgems/mruby-string-ext/src/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195: mrb_str_start_with(mrb_state *mrb, mrb_value self)",
          "196: {",
          "197:   const mrb_value *argv;",
          "199:   mrb_int argc, i;",
          "200:   mrb_get_args(mrb, \"*\", &argv, &argc);",
          "202:   for (i = 0; i < argc; i++) {",
          "203:     size_t len_l, len_r;",
          "204:     int ai = mrb_gc_arena_save(mrb);",
          "206:     mrb_gc_arena_restore(mrb, ai);",
          "207:     len_l = RSTRING_LEN(self);",
          "208:     len_r = RSTRING_LEN(sub);",
          "",
          "[Removed Lines]",
          "198:   mrb_value sub;",
          "205:     sub = mrb_ensure_string_type(mrb, argv[i]);",
          "",
          "[Added Lines]",
          "204:     mrb_value sub = argv[i];",
          "205:     mrb_ensure_string_type(mrb, sub);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225: mrb_str_end_with(mrb_state *mrb, mrb_value self)",
          "226: {",
          "227:   const mrb_value *argv;",
          "229:   mrb_int argc, i;",
          "230:   mrb_get_args(mrb, \"*\", &argv, &argc);",
          "232:   for (i = 0; i < argc; i++) {",
          "233:     size_t len_l, len_r;",
          "234:     int ai = mrb_gc_arena_save(mrb);",
          "236:     mrb_gc_arena_restore(mrb, ai);",
          "237:     len_l = RSTRING_LEN(self);",
          "238:     len_r = RSTRING_LEN(sub);",
          "",
          "[Removed Lines]",
          "228:   mrb_value sub;",
          "235:     sub = mrb_ensure_string_type(mrb, argv[i]);",
          "",
          "[Added Lines]",
          "234:     mrb_value sub = argv[i];",
          "235:     mrb_ensure_string_type(mrb, sub);",
          "",
          "---------------"
        ],
        "src/class.c||src/class.c": [
          "File: src/class.c -> src/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2379:   }",
          "2383:   ptr = RSTRING_PTR(path);",
          "2384:   len = RSTRING_LEN(path);",
          "2385:   off = 0;",
          "",
          "[Removed Lines]",
          "2382:   path = mrb_ensure_string_type(mrb, path);",
          "",
          "[Added Lines]",
          "2382:   mrb_ensure_string_type(mrb, path);",
          "",
          "---------------"
        ],
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2671:       int i;",
          "2672:       int lim = a+b*2+1;",
          "2675:       for (i=a+1; i<lim; i+=2) {",
          "2676:         mrb_hash_set(mrb, hash, regs[i], regs[i+1]);",
          "2677:       }",
          "",
          "[Removed Lines]",
          "2674:       hash = mrb_ensure_hash_type(mrb, regs[a]);",
          "",
          "[Added Lines]",
          "2674:       hash = regs[a];",
          "2675:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2679:       NEXT;",
          "2680:     }",
          "2681:     CASE(OP_HASHCAT, B) {",
          "2684:       mrb_hash_merge(mrb, hash, regs[a+1]);",
          "2685:       mrb_gc_arena_restore(mrb, ai);",
          "2686:       NEXT;",
          "",
          "[Removed Lines]",
          "2682:       mrb_value hash = mrb_ensure_hash_type(mrb, regs[a]);",
          "",
          "[Added Lines]",
          "2683:       mrb_value hash = regs[a];",
          "2685:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c70159b3562e09a37577b4c6913de3ec7b8f06b4",
      "candidate_info": {
        "commit_hash": "c70159b3562e09a37577b4c6913de3ec7b8f06b4",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/c70159b3562e09a37577b4c6913de3ec7b8f06b4",
        "files": [
          "src/vm.c"
        ],
        "message": "Revert \"vm.c: add assertions instead of `mrb_ensure_hash_type()`.\"\n\nThis reverts commit 913a0a5a036664ab0d12a1af40b652412301c89f.\nIn some cases, `OP_HASHADD` operand may not be `Hash`. We should check\nexplicitly in those cases.",
        "before_after_code_files": [
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vm.c||src/vm.c"
          ],
          "candidate": [
            "src/vm.c||src/vm.c"
          ]
        }
      },
      "candidate_diff": {
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2687:       int lim = a+b*2+1;",
          "2689:       hash = regs[a];",
          "2691:       for (i=a+1; i<lim; i+=2) {",
          "2692:         mrb_hash_set(mrb, hash, regs[i], regs[i+1]);",
          "2693:       }",
          "",
          "[Removed Lines]",
          "2690:       mrb_assert(mrb_type(hash) == MRB_TT_HASH);",
          "",
          "[Added Lines]",
          "2690:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2697:     CASE(OP_HASHCAT, B) {",
          "2698:       mrb_value hash = regs[a];",
          "2701:       mrb_hash_merge(mrb, hash, regs[a+1]);",
          "2702:       mrb_gc_arena_restore(mrb, ai);",
          "2703:       NEXT;",
          "",
          "[Removed Lines]",
          "2700:       mrb_assert(mrb_type(hash) == MRB_TT_HASH);",
          "",
          "[Added Lines]",
          "2700:       mrb_ensure_hash_type(mrb, hash);",
          "",
          "---------------"
        ]
      }
    }
  ]
}