{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3251a2031bfd29f338a5fda1a08c18878296d354",
      "candidate_info": {
        "commit_hash": "3251a2031bfd29f338a5fda1a08c18878296d354",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3251a2031bfd29f338a5fda1a08c18878296d354",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/colname.test"
        ],
        "message": "Remove two incorrect assert() statements from the logic used to derive column names and types from subqueries.\n\nFossilOrigin-Name: 712e47714863a8ed7ff73324d9fec569633e8b901c436c633b0220d16a7a9302",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/colname.test||test/colname.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eaf15d9bae6773058341d6219241f44ce728ad1cb9cf649f2efd4dddd81ec461",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1645:   assert( pExpr!=0 );",
          "1646:   assert( pNC->pSrcList!=0 );",
          "1649:   switch( pExpr->op ){",
          "1650:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "1647:   assert( pExpr->op!=TK_AGG_COLUMN );  /* This routine runes before aggregates",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1967:         pColExpr = pColExpr->pRight;",
          "1968:         assert( pColExpr!=0 );",
          "1969:       }",
          "1971:       if( pColExpr->op==TK_COLUMN ){",
          "1973:         int iCol = pColExpr->iColumn;",
          "",
          "[Removed Lines]",
          "1970:       assert( pColExpr->op!=TK_AGG_COLUMN );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/colname.test||test/colname.test": [
          "File: test/colname.test -> test/colname.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:     SELECT name FROM pragma_table_info('t2');",
          "400:   } {Bbb}",
          "401: }",
          "403: # Issue detected by OSSFuzz on 2017-12-24 (Christmas Eve)",
          "404: # caused by check-in https://sqlite.org/src/info/6b2ff26c25",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: do_execsql_test colname-9.330 { -- added 2019-08-10 to invalidate",
          "403:   DROP TABLE IF EXISTS t1;      -- a couple assert()s that were",
          "404:   CREATE TABLE t1(a);           -- added by ticket 3b44500725",
          "405:   INSERT INTO t1 VALUES(17),(2),(99),(-3),(7);",
          "406:   SELECT (SELECT avg(a) UNION SELECT min(a) OVER()) FROM t1;",
          "407: } {17}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "821afa44c13e1bbe0de726dbace1145bf38b057f",
      "candidate_info": {
        "commit_hash": "821afa44c13e1bbe0de726dbace1145bf38b057f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/821afa44c13e1bbe0de726dbace1145bf38b057f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "test/collate1.test"
        ],
        "message": "Fix the implementation of the built-in RTRIM collating sequence so that it works for control characters at the end of the string. Ticket [f1580ba1b574e9e9]\n\nFossilOrigin-Name: 86fa0087cd1f5c79ed51b99a226ec2eef5b0fa0a23981d469bec0e02fadf2a68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "test/collate1.test||test/collate1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b4a9e09e60213ccff925d09f0b6e549e2a3e3862856c710f108779e2867dec76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:   return rc;",
          "876: }",
          "894: static int binCollFunc(",
          "896:   int nKey1, const void *pKey1,",
          "897:   int nKey2, const void *pKey2",
          "898: ){",
          "899:   int rc, n;",
          "900:   n = nKey1<nKey2 ? nKey1 : nKey2;",
          "",
          "[Removed Lines]",
          "882: static int allSpaces(const char *z, int n){",
          "883:   while( n>0 && z[n-1]==' ' ){ n--; }",
          "884:   return n==0;",
          "885: }",
          "895:   void *padFlag,",
          "",
          "[Added Lines]",
          "883:   void *NotUsed,",
          "888:   UNUSED_PARAMETER(NotUsed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:   assert( pKey1 && pKey2 );",
          "905:   rc = memcmp(pKey1, pKey2, n);",
          "906:   if( rc==0 ){",
          "919:   }",
          "920:   return rc;",
          "921: }",
          "926: int sqlite3IsBinary(const CollSeq *p){",
          "930: }",
          "",
          "[Removed Lines]",
          "907:     if( padFlag",
          "908:      && allSpaces(((char*)pKey1)+n, nKey1-n)",
          "909:      && allSpaces(((char*)pKey2)+n, nKey2-n)",
          "910:     ){",
          "916:     }else{",
          "917:       rc = nKey1 - nKey2;",
          "918:     }",
          "927:   assert( p==0 || p->xCmp!=binCollFunc || p->pUser!=0",
          "928:             || strcmp(p->zName,\"BINARY\")==0 );",
          "929:   return p==0 || (p->xCmp==binCollFunc && p->pUser==0);",
          "",
          "[Added Lines]",
          "896:     rc = nKey1 - nKey2;",
          "905: static int rtrimCollFunc(",
          "906:   void *pUser,",
          "907:   int nKey1, const void *pKey1,",
          "908:   int nKey2, const void *pKey2",
          "909: ){",
          "910:   const u8 *pK1 = (const u8*)pKey1;",
          "911:   const u8 *pK2 = (const u8*)pKey2;",
          "912:   while( nKey1 && pK1[nKey1-1]==' ' ) nKey1--;",
          "913:   while( nKey2 && pK2[nKey2-1]==' ' ) nKey2--;",
          "914:   return binCollFunc(pUser, nKey1, pKey1, nKey2, pKey2);",
          "915: }",
          "921:   assert( p==0 || p->xCmp!=binCollFunc || strcmp(p->zName,\"BINARY\")==0 );",
          "922:   return p==0 || p->xCmp==binCollFunc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3128:   createCollation(db, sqlite3StrBINARY, SQLITE_UTF16BE, 0, binCollFunc, 0);",
          "3129:   createCollation(db, sqlite3StrBINARY, SQLITE_UTF16LE, 0, binCollFunc, 0);",
          "3130:   createCollation(db, \"NOCASE\", SQLITE_UTF8, 0, nocaseCollatingFunc, 0);",
          "3132:   if( db->mallocFailed ){",
          "3133:     goto opendb_out;",
          "3134:   }",
          "",
          "[Removed Lines]",
          "3131:   createCollation(db, \"RTRIM\", SQLITE_UTF8, (void*)1, binCollFunc, 0);",
          "",
          "[Added Lines]",
          "3124:   createCollation(db, \"RTRIM\", SQLITE_UTF8, 0, rtrimCollFunc, 0);",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     ORDER BY 1 COLLATE binary COLLATE binary COLLATE binary COLLATE nocase;",
          "401: } {abc DEF}",
          "404: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: # 2019-06-14",
          "404: # https://sqlite.org/src/info/f1580ba1b574e9e9",
          "405: #",
          "406: do_execsql_test 8.0 {",
          "407:   SELECT ' ' > char(20) COLLATE rtrim;",
          "408: } 0",
          "409: do_execsql_test 8.1 {",
          "410:   SELECT '' < char(20) COLLATE rtrim;",
          "411: } 1",
          "412: do_execsql_test 8.2 {",
          "413:   DROP TABLE IF EXISTS t0;",
          "414:   CREATE TABLE t0(c0 COLLATE RTRIM, c1 BLOB UNIQUE,",
          "415:                   PRIMARY KEY (c0, c1)) WITHOUT ROWID;",
          "416:   INSERT INTO t0 VALUES (123, 3), (' ', 1), (' ', 2), ('', 4);",
          "417:   SELECT * FROM t0 WHERE c1 = 1;",
          "418: } {{ } 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00a6153fafe01c9dde8f84a70f1cb810256300dd",
      "candidate_info": {
        "commit_hash": "00a6153fafe01c9dde8f84a70f1cb810256300dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00a6153fafe01c9dde8f84a70f1cb810256300dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/autoindex5.test"
        ],
        "message": "Use the OP_Sequence opcode for generating unique rowid values for an autoindex on a co-routine implementation of a subquery.\n\nFossilOrigin-Name: eab4297577e4d325fed4757867fc77860de7448998d86f098c8a50272e17d35e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/autoindex5.test||test/autoindex5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5fd20e09a522b62a529cf4d76fbdf0a09426f67ffa30430cac6b81ebf32ba43e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:       pOp->p2 = pOp->p3;",
          "587:       pOp->p3 = 0;",
          "588:     }else if( pOp->opcode==OP_Rowid ){",
          "594:       }else{",
          "595:         pOp->opcode = OP_Null;",
          "596:         pOp->p1 = 0;",
          "",
          "[Removed Lines]",
          "589:       if( bIncrRowid ){",
          "591:         pOp->opcode = OP_AddImm;",
          "592:         pOp->p1 = pOp->p2;",
          "593:         pOp->p2 = 1;",
          "",
          "[Added Lines]",
          "589:       if( iAutoidxCur ){",
          "590:         pOp->opcode = OP_Sequence;",
          "591:         pOp->p1 = iAutoidxCur;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "864:   if( pTabItem->fg.viaCoroutine ){",
          "865:     sqlite3VdbeChangeP2(v, addrCounter, regBase+n);",
          "866:     testcase( pParse->db->mallocFailed );",
          "867:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "869:     sqlite3VdbeGoto(v, addrTop);",
          "870:     pTabItem->fg.viaCoroutine = 0;",
          "871:   }else{",
          "",
          "[Removed Lines]",
          "868:                           pTabItem->regResult, 1);",
          "",
          "[Added Lines]",
          "865:     assert( pLevel->iIdxCur>0 );",
          "867:                           pTabItem->regResult, pLevel->iIdxCur);",
          "",
          "---------------"
        ],
        "test/autoindex5.test||test/autoindex5.test": [
          "File: test/autoindex5.test -> test/autoindex5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:       SELECT sum(z) FROM vvv WHERE x='aaa'",
          "124:   ) FROM one;",
          "125: } {8.0}",
          "127: # Ticket https://www.sqlite.org/src/info/787fa716be3a7f65",
          "128: # Segfault due to multiple uses of the same subquery where the",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126: do_execsql_test 2.2 {",
          "127:   DROP TABLE t1;",
          "128:   CREATE TABLE t1(aaa);",
          "129:   INSERT INTO t1(aaa) VALUES(9);",
          "130:   SELECT (",
          "131:     SELECT aaa FROM t1 GROUP BY (",
          "132:       SELECT bbb FROM (",
          "133:         SELECT ccc AS bbb FROM (",
          "134:            SELECT 1 ccc",
          "135:         ) WHERE rowid IS NOT 1",
          "136:       ) WHERE bbb = 1",
          "137:     )",
          "138:   );",
          "139: } {9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c589acbc501fa0f04e1f818b2fce94131fd05542",
      "candidate_info": {
        "commit_hash": "c589acbc501fa0f04e1f818b2fce94131fd05542",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c589acbc501fa0f04e1f818b2fce94131fd05542",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c",
          "test/fts4rename.test"
        ],
        "message": "Fix a problem allowing a Table object to be deleted from within a call to the xDestroy method of the associated virtual table, causing a use-after-free error.\n\nFossilOrigin-Name: 1dbbb0101e8213b92b9a4c78c0fd2f9d0240a8ea3b40dff1033d1b8d71fb04ef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c",
          "test/fts4rename.test||test/fts4rename.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b6d7d42b7426622a26b67809cd1f21285fea120aa1897377b9946840463b41f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:     p = vtabDisconnectAll(db, pTab);",
          "842:     xDestroy = p->pMod->pModule->xDestroy;",
          "844:     rc = xDestroy(p->pVtab);",
          "846:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:     pTab->nTabRef++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "849:       pTab->pVTable = 0;",
          "850:       sqlite3VtabUnlock(p);",
          "851:     }",
          "852:   }",
          "854:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     sqlite3DeleteTable(db, pTab);",
          "",
          "---------------"
        ],
        "test/fts4rename.test||test/fts4rename.test": [
          "File: test/fts4rename.test -> test/fts4rename.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: source $testdir/fts3_common.tcl",
          "16: set ::testprefix fts4rename",
          "18: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "19: ifcapable !fts3 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE temp.t1 USING fts3(a);",
          "26:   BEGIN;",
          "27:   CREATE TABLE t2(x);",
          "28: } {}",
          "30: do_catchsql_test 1.1 {",
          "31:   ALTER TABLE t1_content RENAME c0a TO docid;",
          "32: } {1 {duplicate column name: docid}}",
          "34: do_catchsql_test 1.2 {",
          "35:   UPDATE t1 SET Col0 = 1 ;",
          "36: } {1 {no such column: Col0}}",
          "38: do_catchsql_test 1.3 {",
          "39:   ROLLBACK;",
          "40:   DROP TABLE t1;",
          "41: } {0 {}}",
          "43: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed07d1274ce924779e769eedb647f11bc729259",
      "candidate_info": {
        "commit_hash": "8ed07d1274ce924779e769eedb647f11bc729259",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ed07d1274ce924779e769eedb647f11bc729259",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --max-stack option to dbfuzz2.\n\nFossilOrigin-Name: c11ae4fed89484f0a0061002861b5d599bbda8e40a1f0c33fdbe8cb072134d5c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <stdarg.h>",
          "44: #include <ctype.h>",
          "45: #include <stdint.h>",
          "46: #include \"sqlite3.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include <sys/time.h>",
          "47: #include <sys/resource.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         bVdbeDebug = 1;",
          "149:         continue;",
          "150:       }",
          "151:     }",
          "152:     argv[j++] = argv[i];",
          "153:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0 ){",
          "154:         struct rlimit x,y;",
          "155:         if( i+1==argc ){",
          "156:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "157:           exit(1);",
          "158:         }",
          "159:         memset(&x,0,sizeof(x));",
          "160:         getrlimit(RLIMIT_STACK, &x);",
          "161:         y.rlim_cur = atoi(argv[++i]);",
          "162:         y.rlim_max = x.rlim_cur;",
          "163:         setrlimit(RLIMIT_STACK, &y);",
          "164:         memset(&y,0,sizeof(y));",
          "165:         getrlimit(RLIMIT_STACK, &y);",
          "166:         printf(\"Stack size limit changed from %d to %d\\n\",",
          "167:                (int)x.rlim_cur, (int)y.rlim_cur);",
          "168:         continue;",
          "169:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}