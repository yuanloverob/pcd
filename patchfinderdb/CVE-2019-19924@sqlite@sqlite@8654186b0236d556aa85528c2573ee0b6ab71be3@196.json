{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8bf4126c84341c5674fce578146992a36e5c26a8",
      "candidate_info": {
        "commit_hash": "8bf4126c84341c5674fce578146992a36e5c26a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8bf4126c84341c5674fce578146992a36e5c26a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/corruptL.test",
          "test/fuzzdata8.db"
        ],
        "message": "Change the error message slightly for when two or more indexes have the same rootpage.\n\nFossilOrigin-Name: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b360bc0b9ad18ccda9d58d43a8388d19999432bfdf294abcf5beb44ef990cb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3490:       if( pTblName!=0 ){",
          "3491:         pIndex->tnum = db->init.newTnum;",
          "3492:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "3494:           pParse->rc = SQLITE_CORRUPT_BKPT;",
          "3495:           goto exit_create_index;",
          "3496:         }",
          "",
          "[Removed Lines]",
          "3493:           sqlite3ErrorMsg(pParse, \"invalid root page\");",
          "",
          "[Added Lines]",
          "3493:           sqlite3ErrorMsg(pParse, \"invalid rootpage\");",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:     INSERT INTO t1(b) VALUES(1);",
          "628:     INSERT INTO t1(b) VALUES(2);",
          "629:   COMMIT;",
          "632: #-------------------------------------------------------------------------",
          "633: reset_db",
          "",
          "[Removed Lines]",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "",
          "[Added Lines]",
          "630: } {1 {malformed database schema (t1b) - invalid rootpage}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721: do_catchsql_test 7.1 {",
          "722:   SELECT * FROM sqlite_master;",
          "725: finish_test",
          "",
          "[Removed Lines]",
          "723: } {1 {malformed database schema (t1x1) - invalid root page}}",
          "",
          "[Added Lines]",
          "723: } {1 {malformed database schema (t1x1) - invalid rootpage}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e8e533bf7ee9afd7f6a4d8899b891bbdbf9ac53",
      "candidate_info": {
        "commit_hash": "4e8e533bf7ee9afd7f6a4d8899b891bbdbf9ac53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e8e533bf7ee9afd7f6a4d8899b891bbdbf9ac53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Restore generated column loop detection logic that was incorrectly removed from the previous check-in [9e07b48934e9a972].  This fixes ticket [299b50ba812d8e54]\n\nFossilOrigin-Name: 104a2beb57037f9353ffa77096aae0eb64e4682e667f31623bfd3d064dd8d881",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e07b48934e9a972dcf62e3538b3b21ffa044c553feba0441675ac0bbe13bcb2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3645:           iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;",
          "3646: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3647:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3649:             return iSrc;",
          "3650:           }else",
          "",
          "[Removed Lines]",
          "3648:             sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "",
          "[Added Lines]",
          "3648:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3649:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3650:                               pCol->zName);",
          "3651:               return 0;",
          "3652:             }",
          "3653:             pCol->colFlags |= COLFLAG_BUSY;",
          "3654:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3655:               sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "3656:             }",
          "3657:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   INSERT INTO t0 VALUES (0),(99);",
          "234:   SELECT * FROM t0;",
          "235: } {1 1 0 1 1 99}",
          "237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: do_catchsql_test gencol1-8.20 {",
          "237:   DROP TABLE IF EXISTS t0;",
          "238:   CREATE TABLE t0(",
          "239:     c0,",
          "240:     c1 AS(c0 + c2),",
          "241:     c2 AS(c1) CHECK(c2)",
          "242:   );",
          "243:   UPDATE t0 SET c0 = NULL;",
          "244: } {1 {generated column loop on \"c2\"}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5cc870ef88c76ff6f234eb542700a54354bd3ae",
      "candidate_info": {
        "commit_hash": "c5cc870ef88c76ff6f234eb542700a54354bd3ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5cc870ef88c76ff6f234eb542700a54354bd3ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Refinement to check-in [348e7f193a963390] that avoids unreachable branches.\n\nFossilOrigin-Name: bbfb2908ecd113c88e69a0984cbe2550463cdd3a67648b0e4e3578e80630136e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ff290feb97f689cf6ce4162d6aa36f9f9dcf1bff3096847d53a85f39f728d2de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: static int walkWindowList(Walker *pWalker, Window *pList){",
          "26:   Window *pWin;",
          "27:   for(pWin=pList; pWin; pWin=pWin->pNextWin){",
          "33:   }",
          "34:   return WRC_Continue;",
          "35: }",
          "",
          "[Removed Lines]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "28:     int rc;",
          "29:     rc = sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "30:     if( rc ) return WRC_Abort;",
          "31:     rc = sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "32:     if( rc ) return WRC_Abort;",
          "33:     rc = sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "34:     if( rc ) return WRC_Abort;",
          "40:     rc = sqlite3WalkExpr(pWalker, pWin->pStart);",
          "41:     if( NEVER(rc) ) return WRC_Abort;",
          "42:     rc = sqlite3WalkExpr(pWalker, pWin->pEnd);",
          "43:     if( NEVER(rc) ) return WRC_Abort;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d69a58119d68653c045e1476af7fad5566bd3cf",
      "candidate_info": {
        "commit_hash": "8d69a58119d68653c045e1476af7fad5566bd3cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d69a58119d68653c045e1476af7fad5566bd3cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/permutations.test",
          "test/walvfs.test"
        ],
        "message": "Improve the coverage of wal.c provided by the \"coverage-wal\" test permutation.\n\nFossilOrigin-Name: 6231485114eb07b258cd0e6e163ca05f7e9cf5664e071808fcb1329b33e4c4f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/permutations.test||test/permutations.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb17fea4b9779fbd3adb6ff9500da83a6ca4fa7cba379aa70074e4328814a7f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     int eCode;",
          "229:     const char *zCode;",
          "230:   } aCode[] = {",
          "236:   };",
          "238:   const char *z;",
          "",
          "[Removed Lines]",
          "231:     { SQLITE_OK,     \"SQLITE_OK\"     },",
          "232:     { SQLITE_ERROR,  \"SQLITE_ERROR\"  },",
          "233:     { SQLITE_IOERR,  \"SQLITE_IOERR\"  },",
          "234:     { SQLITE_LOCKED, \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,   \"SQLITE_BUSY\"   },",
          "",
          "[Added Lines]",
          "231:     { SQLITE_OK,       \"SQLITE_OK\"     },",
          "232:     { SQLITE_ERROR,    \"SQLITE_ERROR\"  },",
          "233:     { SQLITE_IOERR,    \"SQLITE_IOERR\"  },",
          "234:     { SQLITE_LOCKED,   \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:   pFd->pNext = pBuffer->pFile;",
          "866:   pBuffer->pFile = pFd;",
          "867:   pFd->pShm = pBuffer;",
          "869: }",
          "871: static void tvfsAllocPage(TestvfsBuffer *p, int iPage, int pgsz){",
          "",
          "[Removed Lines]",
          "868:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "869:   return rc;",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430: test_suite \"coverage-wal\" -description {",
          "431:   Coverage tests for file wal.c.",
          "432: } -files {",
          "437: }",
          "439: test_suite \"coverage-pager\" -description {",
          "",
          "[Removed Lines]",
          "433:   wal.test       wal2.test     wal3.test       walmode.test",
          "434:   walbak.test    walhook.test  walcrash2.test  walcksum.test",
          "435:   walfault.test  walbig.test   walnoshm.test",
          "436:   wal5.test",
          "",
          "[Added Lines]",
          "433:   wal.test wal2.test wal3.test wal4.test wal5.test",
          "434:   wal64k.test wal6.test wal7.test wal8.test wal9.test",
          "435:   walbak.test walbig.test walblock.test walcksum.test walcrash2.test",
          "436:   walcrash3.test walcrash4.test walcrash.test walfault.test walhook.test",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/lock_common.tcl",
          "19: source $testdir/malloc_common.tcl",
          "20: source $testdir/wal_common.tcl",
          "21: set testprefix walvfs",
          "23: ifcapable !wal {finish_test ; return }",
          "25: db close",
          "26: testvfs tvfs",
          "27: tvfs script xSync",
          "28: tvfs filter xSync",
          "29: set ::sync_count 0",
          "30: proc xSync {method file args} {",
          "31:   if {[file tail $file]==\"test.db-wal\"} {",
          "32:     incr ::sync_count",
          "33:   }",
          "34: }",
          "36: #-------------------------------------------------------------------------",
          "37: # Test that if IOCAP_SEQUENTIAL is set, the wal-header is not synced to",
          "38: # disk immediately after it is written.",
          "39: #",
          "40: sqlite3 db test.db -vfs tvfs",
          "41: do_execsql_test 1.0 {",
          "42:   PRAGMA auto_vacuum = 0;",
          "43:   PRAGMA journal_mode = wal;",
          "44:   PRAGMA synchronous = normal;",
          "45:   CREATE TABLE t1(a, b, c);",
          "46:   INSERT INTO t1 VALUES(1, 2, 3);",
          "47:   INSERT INTO t1 VALUES(4, 5, 6);",
          "48:   INSERT INTO t1 VALUES(7, 8, 9);",
          "49:   PRAGMA wal_checkpoint;",
          "50: } {wal 0 5 5}",
          "52: set ::sync_count 0",
          "53: do_test 1.1 {",
          "54:   execsql { INSERT INTO t1 VALUES(10, 11, 12) }",
          "55:   set ::sync_count",
          "56: } 1",
          "58: db close",
          "59: tvfs devchar sequential",
          "60: sqlite3 db test.db -vfs tvfs",
          "61: do_execsql_test 1.2 {",
          "62:   PRAGMA synchronous = normal;",
          "63:   INSERT INTO t1 VALUES(13, 14, 15);",
          "64:   INSERT INTO t1 VALUES(16, 17, 18);",
          "65:   PRAGMA wal_checkpoint;",
          "66: } {0 4 4}",
          "68: set ::sync_count 0",
          "69: do_test 1.3 {",
          "70:   execsql { INSERT INTO t1 VALUES(10, 11, 12) }",
          "71:   set ::sync_count",
          "72: } 0",
          "74: #-------------------------------------------------------------------------",
          "75: # Test that \"PRAGMA journal_size_limit\" works in wal mode.",
          "76: #",
          "77: reset_db",
          "78: do_execsql_test 2.0 {",
          "79:   PRAGMA journal_size_limit = 10000;",
          "80:   CREATE TABLE t1(x);",
          "81:   PRAGMA journal_mode = wal;",
          "82:   WITH s(i) AS (",
          "83:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "84:   )",
          "85:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "86: } {10000 wal}",
          "87: do_test 2.1 {",
          "88:   expr [file size test.db-wal]>12000",
          "89: } {1}",
          "90: do_test 2.2 {",
          "91:   execsql {",
          "92:     PRAGMA wal_checkpoint;",
          "93:     INSERT INTO t1 VALUES(randomblob(750));",
          "94:   }",
          "95:   file size test.db-wal",
          "96: } {10000}",
          "97: do_test 2.3 {",
          "98:   execsql {",
          "99:     PRAGMA journal_size_limit = 8000;",
          "100:     PRAGMA wal_checkpoint;",
          "101:     INSERT INTO t1 VALUES(randomblob(750));",
          "102:   }",
          "103:   file size test.db-wal",
          "104: } {8000}",
          "106: #-------------------------------------------------------------------------",
          "107: # Test that a checkpoint may be interrupted using sqlite3_interrupt().",
          "108: #",
          "109: reset_db",
          "110: db close",
          "111: sqlite3 db test.db -vfs tvfs",
          "112: tvfs filter {}",
          "114: do_execsql_test 3.0 {",
          "115:   CREATE TABLE t1(x);",
          "116:   PRAGMA journal_mode = wal;",
          "117:   WITH s(i) AS (",
          "118:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "119:   )",
          "120:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "121: } {wal}",
          "123: tvfs filter xWrite",
          "124: tvfs script xWrite",
          "125: set ::cnt 2",
          "126: proc xWrite {method file args} {",
          "127:   if {[file tail $file]==\"test.db\"} {",
          "128:     incr ::cnt -1",
          "129:     if {$::cnt==0} {",
          "130:       sqlite3_interrupt db",
          "131:     }",
          "132:   }",
          "133:   return SQLITE_OK",
          "134: }",
          "136: do_catchsql_test 3.1 {",
          "137:   PRAGMA wal_checkpoint",
          "138: } {1 interrupted}",
          "140: #-------------------------------------------------------------------------",
          "141: #",
          "142: reset_db",
          "143: db close",
          "144: do_test 4.0 {",
          "145:   sqlite3 db test.db -vfs tvfs",
          "146:   execsql {",
          "147:     CREATE TABLE t1(x);",
          "148:     PRAGMA journal_mode = wal;",
          "149:     WITH s(i) AS (",
          "150:         SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "151:     )",
          "152:     INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "153:   } db",
          "154: } {wal}",
          "155: db close",
          "157: tvfs filter xShmMap",
          "158: tvfs script xShmMap",
          "159: proc xShmMap {method file args} {",
          "160:   return SQLITE_READONLY",
          "161: }",
          "162: sqlite3 db test.db -vfs tvfs",
          "163: do_catchsql_test 4.1 {",
          "164:   SELECT count(*) FROM t1",
          "165: } {1 {attempt to write a readonly database}}",
          "167: set ::cnt 5",
          "168: tvfs filter {xShmMap xShmLock}",
          "169: proc xShmMap {method file name args} {",
          "170:   switch -- $method {",
          "171:     xShmMap {  return SQLITE_READONLY }",
          "172:     xShmLock {",
          "173:       if {$args == \"{0 1 lock shared}\"} {",
          "174:         incr ::cnt -1",
          "175:         if {$::cnt>0} { return SQLITE_BUSY }",
          "176:       }",
          "177:     }",
          "178:   }",
          "179:   return SQLITE_OK",
          "180: }",
          "181: do_catchsql_test 4.2 {",
          "182:   SELECT count(*) FROM t1",
          "183: } {1 {attempt to write a readonly database}}",
          "185: db close",
          "186: tvfs delete",
          "187: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37d296a717abb896c72368e3e09d833de2415838",
      "candidate_info": {
        "commit_hash": "37d296a717abb896c72368e3e09d833de2415838",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37d296a717abb896c72368e3e09d833de2415838",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Bug fixes for window frames of the form (... RANGE BETWEEN b PRECEDING AND a PRECEDING) or (... RANGE a FOLLOWING AND b FOLLOWING) where (a > b).\n\nFossilOrigin-Name: 040e196a8be3ca41b9365310ab88c2a3cc84b918a6511c77a6d95d4b4e0da3ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f907395ef5a2dc1d084b6a286af00de4c742cf12d4f347c21e1b757786508f57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408:   return (pList ? pList->nExpr : 0);",
          "1409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1411: typedef struct WindowCodeArg WindowCodeArg;",
          "1412: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1417: struct WindowCsrAndReg {",
          "1420: };",
          "1477: struct WindowCodeArg {",
          "1488:   WindowCsrAndReg start;",
          "1489:   WindowCsrAndReg current;",
          "1490:   WindowCsrAndReg end;",
          "1491: };",
          "1497: static void windowReadPeerValues(",
          "1498:   WindowCodeArg *p,",
          "1499:   int csr,",
          "1500:   int reg",
          "1501: ){",
          "1502:   Window *pMWin = p->pMWin;",
          "1503:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1504:   if( pOrderBy ){",
          "1505:     Vdbe *v = sqlite3GetVdbe(p->pParse);",
          "1506:     ExprList *pPart = pMWin->pPartition;",
          "1507:     int iColOff = pMWin->nBufferCol + (pPart ? pPart->nExpr : 0);",
          "1508:     int i;",
          "1509:     for(i=0; i<pOrderBy->nExpr; i++){",
          "1510:       sqlite3VdbeAddOp3(v, OP_Column, csr, iColOff+i, reg+i);",
          "1511:     }",
          "1512:   }",
          "1513: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1430: static void windowAggStep(",
          "1436: ){",
          "1437:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1438:   Window *pWin;",
          "1439:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "",
          "[Removed Lines]",
          "1431:   Parse *pParse,",
          "",
          "[Added Lines]",
          "1535:   WindowCodeArg *p,",
          "1541:   Parse *pParse = p->pParse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1479:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1480:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1481:       int addrIf = 0;",
          "1482:       if( pWin->pFilter ){",
          "1483:         int regTmp;",
          "1484:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1587:       int addrIf2 = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1489:         VdbeCoverage(v);",
          "1490:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1491:       }",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1494:         VdbeOp *pOp, *pEnd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1607:       if( pWin->eFrmType==TK_RANGE",
          "1608:        && pWin->eStart==pWin->eEnd",
          "1609:        && pWin->eStart==TK_PRECEDING",
          "1610:       ){",
          "1611:         int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1612:         int regPeer = sqlite3GetTempReg(pParse);",
          "1613:         int regString = sqlite3GetTempReg(pParse);",
          "1614:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1615:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1616:         sqlite3VdbeAddOp3(v, op, p->regStart, lbl, p->regEnd);",
          "1619:         windowReadPeerValues(p, csr, regPeer);",
          "1620:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1621:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1622:         addrIf2 = sqlite3VdbeAddOp3(v, OP_Lt, regString, 0, regPeer);",
          "1623:         sqlite3ReleaseTempReg(pParse, regPeer);",
          "1624:         sqlite3ReleaseTempReg(pParse, regString);",
          "1625:         sqlite3VdbeResolveLabel(v, lbl);",
          "1626:         VdbeModuleComment((v, \"windowAggStep end \\\"peer is numeric?\\\"\"));",
          "1627:         assert( pWin->eStart==TK_PRECEDING || pWin->eStart==TK_FOLLOWING );",
          "1628:         assert( pMWin->pOrderBy && pMWin->pOrderBy->nExpr==1 );",
          "1629:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1518:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1519:       }",
          "1520:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1521:     }",
          "1522:   }",
          "1523: }",
          "",
          "[Removed Lines]",
          "1525: typedef struct WindowCodeArg WindowCodeArg;",
          "1526: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1531: struct WindowCsrAndReg {",
          "1534: };",
          "1591: struct WindowCodeArg {",
          "1600:   WindowCsrAndReg start;",
          "1601:   WindowCsrAndReg current;",
          "1602:   WindowCsrAndReg end;",
          "1603: };",
          "",
          "[Added Lines]",
          "1660:       if( addrIf2 ) sqlite3VdbeJumpHere(v, addrIf2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1609: #define WINDOW_AGGINVERSE 2",
          "1610: #define WINDOW_AGGSTEP    3",
          "",
          "[Removed Lines]",
          "1616: static void windowReadPeerValues(",
          "1617:   WindowCodeArg *p,",
          "1618:   int csr,",
          "1619:   int reg",
          "1620: ){",
          "1621:   Window *pMWin = p->pMWin;",
          "1622:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1623:   if( pOrderBy ){",
          "1624:     Vdbe *v = sqlite3GetVdbe(p->pParse);",
          "1625:     ExprList *pPart = pMWin->pPartition;",
          "1626:     int iColOff = pMWin->nBufferCol + (pPart ? pPart->nExpr : 0);",
          "1627:     int i;",
          "1628:     for(i=0; i<pOrderBy->nExpr; i++){",
          "1629:       sqlite3VdbeAddOp3(v, OP_Column, csr, iColOff+i, reg+i);",
          "1630:     }",
          "1631:   }",
          "1632: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1693:   int addrNext;",
          "1694:   int csr;",
          "1696:   assert( pMWin!=0 );",
          "1697:   csr = pMWin->csrApp;",
          "1698:   nPeer = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:   VdbeModuleComment((v, \"windowFullScan begin\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1749:     if( addrEq ) sqlite3VdbeJumpHere(v, addrEq);",
          "1750:   }",
          "1754:   sqlite3VdbeResolveLabel(v, lblNext);",
          "1755:   sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "",
          "[Removed Lines]",
          "1752:   windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "",
          "[Added Lines]",
          "1792:   windowAggStep(p, pMWin, csr, 0, p->regArg);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1764:   }",
          "1766:   windowAggFinal(p, 1);",
          "1767: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1807:   VdbeModuleComment((v, \"windowFullScan end\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2094:   Window *pMWin = p->pMWin;",
          "2095:   int ret = 0;",
          "2096:   Vdbe *v = p->pVdbe;",
          "2098:   int addrContinue = 0;",
          "2100:   int bPeer = (pMWin->eFrmType!=TK_ROWS);",
          "2102:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "2097:   int addrIf = 0;",
          "2099:   int addrGoto = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2129:         );",
          "2130:       }",
          "2131:     }else{",
          "2133:       VdbeCoverage(v);",
          "2134:     }",
          "2135:   }",
          "",
          "[Removed Lines]",
          "2132:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "2171:       sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, lblDone, 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2152:         assert( pMWin->regEndRowid );",
          "2153:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "2154:       }else{",
          "2156:       }",
          "2157:       break;",
          "",
          "[Removed Lines]",
          "2155:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "",
          "[Added Lines]",
          "2194:         windowAggStep(p, pMWin, csr, 1, p->regArg);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2164:         assert( pMWin->regEndRowid );",
          "2165:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "2166:       }else{",
          "2168:       }",
          "2169:       break;",
          "2170:   }",
          "",
          "[Removed Lines]",
          "2167:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "",
          "[Added Lines]",
          "2206:         windowAggStep(p, pMWin, csr, 0, p->regArg);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2182:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1+bPeer);",
          "2183:     VdbeCoverage(v);",
          "2184:     if( bPeer ){",
          "2186:     }",
          "2187:   }",
          "2189:   if( bPeer ){",
          "2190:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "2192:     windowReadPeerValues(p, csr, regTmp);",
          "2193:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "2194:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "",
          "[Removed Lines]",
          "2185:       addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2191:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "[Added Lines]",
          "2224:       sqlite3VdbeAddOp2(v, OP_Goto, 0, lblDone);",
          "2230:     int regTmp;",
          "2235:     if( pMWin->eStart==TK_FOLLOWING && pMWin->eEnd==TK_FOLLOWING",
          "2236:      && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2237:     ){",
          "2238:       int regRowid1 = sqlite3GetTempReg(pParse);",
          "2239:       int regRowid2 = sqlite3GetTempReg(pParse);",
          "2240:       sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2241:       sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2242:       sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2243:       sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2244:       sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2245:     }",
          "2246:     regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2198:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "2199:   }",
          "2200:   sqlite3VdbeResolveLabel(v, lblDone);",
          "2203:   return ret;",
          "2204: }",
          "",
          "[Removed Lines]",
          "2201:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "2202:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2707:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "2709:   }",
          "2710:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "2712:   }",
          "",
          "[Removed Lines]",
          "2708:     regStart = ++pParse->nMem;",
          "2711:     regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "2759:     s.regStart = ++pParse->nMem;",
          "2762:     s.regEnd = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2764:   s.regArg = windowInitAccum(pParse, pMWin);",
          "2769:   }",
          "2773:   }",
          "2776:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2780:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "2766:   if( regStart ){",
          "2767:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2768:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2770:   if( regEnd ){",
          "2771:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2772:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2775:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "2777:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "[Added Lines]",
          "2817:   if( s.regStart ){",
          "2818:     sqlite3ExprCode(pParse, pMWin->pStart, s.regStart);",
          "2819:     windowCheckValue(pParse, s.regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2821:   if( s.regEnd ){",
          "2822:     sqlite3ExprCode(pParse, pMWin->pEnd, s.regEnd);",
          "2823:     windowCheckValue(pParse, s.regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2826:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && s.regStart ){",
          "2828:     int addrGe = sqlite3VdbeAddOp3(v, op, s.regStart, 0, s.regEnd);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2785:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2786:     sqlite3VdbeJumpHere(v, addrGe);",
          "2787:   }",
          "2789:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2791:   }",
          "2793:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "2788:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "2790:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "",
          "[Added Lines]",
          "2839:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && s.regEnd ){",
          "2841:     sqlite3VdbeAddOp3(v, OP_Subtract, s.regStart, s.regEnd, s.regStart);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2819:       if( pMWin->eFrmType==TK_RANGE ){",
          "2820:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2821:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2824:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2825:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "2826:         sqlite3VdbeResolveLabel(v, lbl);",
          "2827:       }else{",
          "2830:       }",
          "2831:     }",
          "2832:   }else",
          "2833:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2834:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2837:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2839:   }else{",
          "2840:     int addr = 0;",
          "2841:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2822:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2823:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2828:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "2829:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2835:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2836:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2838:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2873:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, s.regEnd, s.end.csr, lbl);",
          "2874:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2879:         windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 0);",
          "2880:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2886:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2887:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2889:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2843:       if( pMWin->eFrmType==TK_RANGE ){",
          "2844:         int lbl = 0;",
          "2845:         addr = sqlite3VdbeCurrentAddr(v);",
          "2847:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "2849:         }",
          "2850:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2853:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "2854:           sqlite3VdbeResolveLabel(v, lbl);",
          "2855:         }",
          "2856:       }else{",
          "2859:           VdbeCoverage(v);",
          "2860:         }",
          "2861:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2864:       }",
          "2865:     }",
          "2866:   }",
          "",
          "[Removed Lines]",
          "2846:         if( regEnd ){",
          "2848:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2851:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2852:         if( regEnd ){",
          "2857:         if( regEnd ){",
          "2858:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2862:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2863:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2897:         if( s.regEnd ){",
          "2899:           windowCodeRangeTest(&s, OP_Ge, s.current.csr,s.regEnd,s.end.csr,lbl);",
          "2902:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2903:         if( s.regEnd ){",
          "2908:         if( s.regEnd ){",
          "2909:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, s.regEnd, 0, 1);",
          "2913:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2914:         if( s.regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2879:   VdbeCoverage(v);",
          "2880:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2881:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2884:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2885:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2886:     int addrStart;",
          "",
          "[Removed Lines]",
          "2882:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2883:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2933:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2934:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2890:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2891:     if( pMWin->eFrmType==TK_RANGE ){",
          "2892:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2894:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2895:     }else",
          "2896:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "2897:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2899:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, 0, 1);",
          "2900:     }else{",
          "2901:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "2902:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2905:     }",
          "2906:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2907:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "",
          "[Removed Lines]",
          "2893:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2898:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "2903:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 1);",
          "2904:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "",
          "[Added Lines]",
          "2944:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "2949:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regStart, 1);",
          "2954:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 1);",
          "2955:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2916:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2917:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2918:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2920:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2921:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2922:   }",
          "",
          "[Removed Lines]",
          "2919:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2970:     windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: reset_db",
          "235: do_execsql_test 5.0 {",
          "236:   CREATE TABLE t1(a, c);",
          "237:   CREATE INDEX i1 ON t1(a);",
          "239:   INSERT INTO t1 VALUES(0, 421);",
          "240:   INSERT INTO t1 VALUES(1, 844);",
          "241:   INSERT INTO t1 VALUES(2, 1001);",
          "242: }",
          "244: do_execsql_test 5.1 {",
          "245:   SELECT a, sum(c) OVER (",
          "246:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING",
          "247:   ) FROM t1;",
          "248: } {0 {} 1 {} 2 {}}",
          "250: do_execsql_test 5.2 {",
          "251:   INSERT INTO t1 VALUES(NULL, 123);",
          "252:   INSERT INTO t1 VALUES(NULL, 111);",
          "253:   INSERT INTO t1 VALUES('xyz', 222);",
          "254:   INSERT INTO t1 VALUES('xyz', 333);",
          "256:   SELECT a, sum(c) OVER (",
          "257:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING",
          "258:   ) FROM t1;",
          "259: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "261: do_execsql_test 5.3 {",
          "262:   SELECT a, sum(c) OVER (",
          "263:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "264:   ) FROM t1;",
          "265: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "267: do_execsql_test 5.4 {",
          "268:   SELECT a, sum(c) OVER (",
          "269:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING EXCLUDE NO OTHERS",
          "270:   ) FROM t1;",
          "271: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "273: do_execsql_test 5.5 {",
          "274:   SELECT a, sum(c) OVER (",
          "275:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING EXCLUDE NO OTHERS",
          "276:   ) FROM t1;",
          "277: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "279: #-------------------------------------------------------------------------",
          "280: reset_db",
          "281: do_execsql_test 6.0 {",
          "282:   CREATE TABLE t1(a, c);",
          "283:   CREATE INDEX i1 ON t1(a);",
          "285:   INSERT INTO t1 VALUES(7,  997);",
          "286:   INSERT INTO t1 VALUES(8,  997);",
          "287:   INSERT INTO t1 VALUES('abc', 1001);",
          "288: }",
          "289: do_execsql_test 6.1 {",
          "290:   SELECT a, sum(c) OVER (",
          "291:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "292:   ) FROM t1;",
          "293: } {7 {} 8 {} abc 1001}",
          "294: do_execsql_test 6.2 {",
          "295:   SELECT a, sum(c) OVER (",
          "296:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING EXCLUDE NO OTHERS",
          "297:   ) FROM t1;",
          "298: } {7 {} 8 {} abc 1001}",
          "",
          "---------------"
        ]
      }
    }
  ]
}