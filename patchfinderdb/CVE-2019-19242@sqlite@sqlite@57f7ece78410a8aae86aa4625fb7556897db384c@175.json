{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a790882d63af27deca8a2cf63577ae909fe08d6c",
      "candidate_info": {
        "commit_hash": "a790882d63af27deca8a2cf63577ae909fe08d6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a790882d63af27deca8a2cf63577ae909fe08d6c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the -memtrace option to dbfuzz2.\n\nFossilOrigin-Name: 67fecbc79d3e927a7e22f3589be3184114322635874e4b3170666e352d0bfe9d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a127ef9f7feafe6ba8c75e4eb29e28aa61a30249082cc8767ada1ec0cc0b7f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static sqlite3_int64 szMax = 104857600;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static sqlite3_mem_methods memtraceBase;",
          "78: static FILE *memtraceOut;",
          "81: static void *memtraceMalloc(int n){",
          "82:   if( memtraceOut ){",
          "83:     fprintf(memtraceOut, \"MEMTRACE: allocate %d bytes\\n\",",
          "84:             memtraceBase.xRoundup(n));",
          "85:   }",
          "86:   return memtraceBase.xMalloc(n);",
          "87: }",
          "88: static void memtraceFree(void *p){",
          "89:   if( p==0 ) return;",
          "90:   if( memtraceOut ){",
          "91:     fprintf(memtraceOut, \"MEMTRACE: free %d bytes\\n\", memtraceBase.xSize(p));",
          "92:   }",
          "93:   memtraceBase.xFree(p);",
          "94: }",
          "95: static void *memtraceRealloc(void *p, int n){",
          "96:   if( p==0 ) return memtraceMalloc(n);",
          "97:   if( n==0 ){",
          "98:     memtraceFree(p);",
          "99:     return 0;",
          "100:   }",
          "101:   if( memtraceOut ){",
          "102:     fprintf(memtraceOut, \"MEMTRACE: resize %d -> %d bytes\\n\",",
          "103:             memtraceBase.xSize(p), memtraceBase.xRoundup(n));",
          "104:   }",
          "105:   return memtraceBase.xRealloc(p, n);",
          "106: }",
          "107: static int memtraceSize(void *p){",
          "108:   return memtraceBase.xSize(p);",
          "109: }",
          "110: static int memtraceRoundup(int n){",
          "111:   return memtraceBase.xRoundup(n);",
          "112: }",
          "113: static int memtraceInit(void *p){",
          "114:   return memtraceBase.xInit(p);",
          "115: }",
          "116: static void memtraceShutdown(void *p){",
          "117:   memtraceBase.xShutdown(p);",
          "118: }",
          "121: static sqlite3_mem_methods ersaztMethods = {",
          "122:   memtraceMalloc,",
          "123:   memtraceFree,",
          "124:   memtraceRealloc,",
          "125:   memtraceSize,",
          "126:   memtraceRoundup,",
          "127:   memtraceInit,",
          "128:   memtraceShutdown",
          "129: };",
          "132: int sqlite3MemTraceActivate(FILE *out){",
          "133:   int rc = SQLITE_OK;",
          "134:   if( memtraceBase.xMalloc==0 ){",
          "135:     rc = sqlite3_config(SQLITE_CONFIG_GETMALLOC, &memtraceBase);",
          "136:     if( rc==SQLITE_OK ){",
          "137:       rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &ersaztMethods);",
          "138:     }",
          "139:   }",
          "140:   memtraceOut = out;",
          "141:   return rc;",
          "142: }",
          "145: int sqlite3MemTraceDeactivate(void){",
          "146:   int rc = SQLITE_OK;",
          "147:   if( memtraceBase.xMalloc!=0 ){",
          "148:     rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &memtraceBase);",
          "149:     if( rc==SQLITE_OK ){",
          "150:       memset(&memtraceBase, 0, sizeof(memtraceBase));",
          "151:     }",
          "152:   }",
          "153:   memtraceOut = 0;",
          "154:   return rc;",
          "155: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:         bVdbeDebug = 1;",
          "163:         continue;",
          "164:       }",
          "165:       if( strcmp(z,\"max-db-size\")==0 ){",
          "166:         if( i+1==argc ){",
          "167:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( strcmp(z,\"memtrace\")==0 ){",
          "249:         sqlite3MemTraceActivate(stdout);",
          "250:         continue;",
          "251:       }",
          "252:       if( strcmp(z,\"mem\")==0 ){",
          "253:         bVdbeDebug = 1;",
          "254:         continue;",
          "255:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cb02640419614ae3771ebbffce076474380029b",
      "candidate_info": {
        "commit_hash": "9cb02640419614ae3771ebbffce076474380029b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9cb02640419614ae3771ebbffce076474380029b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".parameter\" command to the CLI.\n\nFossilOrigin-Name: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3547:   \"        --zip           FILE is a ZIP archive\",",
          "3548:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3549:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3550:   \".print STRING...         Print literal STRING\",",
          "3551: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "3552:   \".progress N              Invoke progress handler after every N opcodes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3560:   \".parameter CMD ...       Manage SQL parameter bindings\",",
          "3561:   \"   clear                   Erase all bindings\",",
          "3562:   \"   init                    Initialize the TEMP table that holds bindings\",",
          "3563:   \"   list                    List the current parameter bindings\",",
          "3564:   \"   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE\",",
          "3565:   \"                           PARAMETER should start with '$', ':', '@', or '?'\",",
          "3566:   \"   unset PARAMETER         Remove PARAMETER from the binding table\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7078:     }",
          "7079:   }else",
          "7081:   if( c=='p' && n>=3 && strncmp(azArg[0], \"print\", n)==0 ){",
          "7082:     int i;",
          "7083:     for(i=1; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7098:   if( c=='p' && n>=3 && strncmp(azArg[0], \"parameter\", n)==0 ){",
          "7099:     open_db(p,0);",
          "7100:     if( nArg<=1 ) goto parameter_syntax_error;",
          "7105:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7106:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "7107:                    0, 0, 0);",
          "7108:     }else",
          "7113:     if( nArg==2 && strcmp(azArg[1],\"list\")==0 ){",
          "7114:       sqlite3_stmt *pStmt = 0;",
          "7115:       int rx;",
          "7116:       int len = 0;",
          "7117:       rx = sqlite3_prepare_v2(p->db,",
          "7118:              \"SELECT max(length(key)) \"",
          "7119:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "7120:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7121:         len = sqlite3_column_int(pStmt, 0);",
          "7122:         if( len>40 ) len = 40;",
          "7123:       }",
          "7124:       sqlite3_finalize(pStmt);",
          "7125:       pStmt = 0;",
          "7126:       if( len ){",
          "7127:         rx = sqlite3_prepare_v2(p->db,",
          "7128:              \"SELECT key, quote(value) \"",
          "7129:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "7130:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7131:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7132:                       sqlite3_column_text(pStmt,1));",
          "7133:         }",
          "7134:         sqlite3_finalize(pStmt);",
          "7135:       }",
          "7136:     }else",
          "7142:     if( nArg==2 && strcmp(azArg[1],\"init\")==0 ){",
          "7143:       bind_table_init(p);",
          "7144:     }else",
          "7152:     if( nArg==4 && strcmp(azArg[1],\"set\")==0 ){",
          "7153:       int rx;",
          "7154:       char *zSql;",
          "7155:       sqlite3_stmt *pStmt;",
          "7156:       const char *zKey = azArg[2];",
          "7157:       const char *zValue = azArg[3];",
          "7158:       bind_table_init(p);",
          "7159:       zSql = sqlite3_mprintf(",
          "7160:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "7161:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7162:       if( zSql==0 ) shell_out_of_memory();",
          "7163:       pStmt = 0;",
          "7164:       rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7165:       sqlite3_free(zSql);",
          "7166:       if( rx!=SQLITE_OK ){",
          "7167:         sqlite3_finalize(pStmt);",
          "7168:         pStmt = 0;",
          "7169:         zSql = sqlite3_mprintf(",
          "7170:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "7171:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7172:         if( zSql==0 ) shell_out_of_memory();",
          "7173:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7174:         sqlite3_free(zSql);",
          "7175:         if( rx!=SQLITE_OK ){",
          "7176:           utf8_printf(p->out, \"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "7177:           sqlite3_finalize(pStmt);",
          "7178:           pStmt = 0;",
          "7179:           rc = 1;",
          "7180:         }",
          "7181:       }",
          "7182:       sqlite3_step(pStmt);",
          "7183:       sqlite3_finalize(pStmt);",
          "7184:     }else",
          "7190:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7191:       char *zSql = sqlite3_mprintf(",
          "7192:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "7193:       if( zSql==0 ) shell_out_of_memory();",
          "7194:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7195:       sqlite3_free(zSql);",
          "7196:     }else",
          "7198:     parameter_syntax_error:",
          "7199:     showHelp(p->out, \"parameter\");",
          "7200:   }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
      "candidate_info": {
        "commit_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join5.test"
        ],
        "message": "Fix an assert() failure that could occur in a join query if the RHS of an IN() operator is a list containing correlated expressions. This problem was introduced by checkin [e130319317e7611938] which was part of the fix for ticket [787fa716be3a7f650c] - so this commit is part of that ticket's fix too.\n\nFossilOrigin-Name: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join5.test||test/join5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2810:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2811:         addrOnce = 0;",
          "2812:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:         ExprClearProperty(pExpr, EP_Subrtn);",
          "",
          "---------------"
        ],
        "test/join5.test||test/join5.test": [
          "File: test/join5.test -> test/join5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   `--SEARCH TABLE t4 USING INDEX t4xz (x=?)",
          "307: }",
          "309: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: reset_db",
          "310: do_execsql_test 8.0 {",
          "311:   CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
          "312:   CREATE TABLE t1 (c0);",
          "314:   INSERT INTO t1 VALUES (2);",
          "316:   INSERT INTO t0 VALUES(0, 10);",
          "317:   INSERT INTO t0 VALUES(1, 10);",
          "318:   INSERT INTO t0 VALUES(2, 10);",
          "319:   INSERT INTO t0 VALUES(3, 10);",
          "320: }",
          "322: do_execsql_test 8.1 {",
          "323:   SELECT * FROM t0, t1",
          "324:   WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1;",
          "325: } {",
          "326:   1 10 2",
          "327:   2 10 2",
          "328: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
      "candidate_info": {
        "commit_hash": "4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Formatting change on a multi-line conditional, for improved clarity. No logic changes.\n\nFossilOrigin-Name: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "1309:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1310:         disableTerm(pLevel, pTerm);",
          "1313:       ){",
          "",
          "[Removed Lines]",
          "1311:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "1312:           sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "",
          "[Added Lines]",
          "1311:       }else if( (pTerm->eOperator & WO_IN)!=0",
          "1312:         && sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eafb9a0ae5a284c99043032f302e07377a178b74",
      "candidate_info": {
        "commit_hash": "eafb9a0ae5a284c99043032f302e07377a178b74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eafb9a0ae5a284c99043032f302e07377a178b74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_win.c",
          "test/incrvacuum.test"
        ],
        "message": "Make the winTruncate() method of the windows VFS be a no-op if there are outstanding references to the memory-mapped pages.  Otherwise, memory might be deleted out from under those references when the file is remapped during the truncate operation.\n\nFossilOrigin-Name: ffce4aac18dacbf2a3112ae2ab56c7db20cb164f179683d90a66ef38f4a98f2b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c",
          "test/incrvacuum.test||test/incrvacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0e7aa62227d1d9c3540b54d7caf44a1ce7ccfa706672fc41dbb2be477ab3a667",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2905:   DWORD lastErrno;",
          "2906: #if SQLITE_MAX_MMAP_SIZE>0",
          "2907:   sqlite3_int64 oldMmapSize;",
          "2908: #endif",
          "2910:   assert( pFile );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2908:   if( pFile->nFetchOut>0 ){",
          "2926:     return SQLITE_OK;",
          "2927:   }",
          "",
          "---------------"
        ],
        "test/incrvacuum.test||test/incrvacuum.test": [
          "File: test/incrvacuum.test -> test/incrvacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:   }",
          "784: } {ok}",
          "786: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786: #-------------------------------------------------------------------------",
          "787: # At one point it was unsafe to truncate a db file on windows while there",
          "788: # were outstanding xFetch() references. This test case attempts to hit",
          "789: # that case.",
          "790: #",
          "791: reset_db",
          "792: do_execsql_test incrvacuum-16.0 {",
          "793:   PRAGMA auto_vacuum = 2;",
          "794:   CREATE TABLE t3(a);",
          "795:   INSERT INTO t3 VALUES(1), (2), (3), (4);",
          "797:   CREATE TABLE t2(x);",
          "798:   INSERT INTO t2 VALUES( randomblob(1000) );",
          "799:   INSERT INTO t2 VALUES( randomblob(1000) );",
          "800:   INSERT INTO t2 VALUES( randomblob(1000) );",
          "801:   INSERT INTO t2 VALUES( randomblob(1000) );",
          "802:   INSERT INTO t2 VALUES( randomblob(1000) );",
          "803:   INSERT INTO t2 VALUES( randomblob(1000) );",
          "804: } {}",
          "806: # Reopen db to ensure the page-cache is empty.",
          "807: #",
          "808: db close",
          "809: sqlite3 db test.db",
          "811: # Open db in mmap-mode. Open a transaction, delete some data, then run",
          "812: # incremental-vacuum. Do not commit the transaction.",
          "813: #",
          "814: do_execsql_test incrvacuum-16.1 {",
          "815:   PRAGMA mmap_size = 1000000;",
          "816:   BEGIN;",
          "817:   DELETE FROM t2;",
          "818:   PRAGMA incremental_vacuum = 1000;",
          "819: } {1000000}",
          "821: # Scan through table t3 (which is all clean pages - so mmap is used). Then,",
          "822: # midway through, commit the transaction. This causes the db to be truncated",
          "823: # while there are outstanding xFetch pages.",
          "824: #",
          "825: do_test incrvacuum-16.2 {",
          "826:   set res [list]",
          "827:   db eval { SELECT a FROM t3 } {",
          "828:     if {$a==3} { db eval COMMIT }",
          "829:     lappend res $a",
          "830:   }",
          "831:   set res",
          "832: } {1 2 3 4}",
          "",
          "---------------"
        ]
      }
    }
  ]
}