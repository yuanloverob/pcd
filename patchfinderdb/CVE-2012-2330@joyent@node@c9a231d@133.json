{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7bdeed203991d35a56e7448540e3b74387c65d0d",
      "candidate_info": {
        "commit_hash": "7bdeed203991d35a56e7448540e3b74387c65d0d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7bdeed203991d35a56e7448540e3b74387c65d0d",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "zlib: fix uninitialized variable compiler warning",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     switch (ctx->mode_) {",
          "147:       case DEFLATE:",
          "148:       case GZIP:",
          "",
          "[Removed Lines]",
          "145:     int err;",
          "",
          "[Added Lines]",
          "145:     int err = Z_STREAM_ERROR;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b521ff3b4f8e79c5e28a1f4915d4203d8bcb0ab7",
      "candidate_info": {
        "commit_hash": "b521ff3b4f8e79c5e28a1f4915d4203d8bcb0ab7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b521ff3b4f8e79c5e28a1f4915d4203d8bcb0ab7",
        "files": [
          "lib/tty.js"
        ],
        "message": "tty: add keypress event for backwards-compat",
        "before_after_code_files": [
          "lib/tty.js||litty.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   this.readable = true;",
          "49:   this.writable = false;",
          "50:   this.isRaw = false;",
          "51: }",
          "52: inherits(ReadStream, net.Socket);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8727e5f2becfa538d0f2f5f48172fd0d1c902546",
      "candidate_info": {
        "commit_hash": "8727e5f2becfa538d0f2f5f48172fd0d1c902546",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8727e5f2becfa538d0f2f5f48172fd0d1c902546",
        "files": [
          "test/simple/test-tls-getcipher.js"
        ],
        "message": "test: add test of cleartextStream.getCipher() in tls",
        "before_after_code_files": [
          "test/simple/test-tls-getcipher.js||test/simple/test-tls-getcipher.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-getcipher.js||test/simple/test-tls-getcipher.js": [
          "File: test/simple/test-tls-getcipher.js -> test/simple/test-tls-getcipher.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var tls = require('tls');",
          "25: var fs = require('fs');",
          "26: var cipher_list = ['RC4-SHA', 'AES256-SHA'];",
          "27: var cipher_version_pattern = /TLS|SSL/;",
          "28: var options = {",
          "29:   key: fs.readFileSync(common.fixturesDir + '/keys/agent2-key.pem'),",
          "30:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent2-cert.pem'),",
          "31:   ciphers: cipher_list.join(':'),",
          "32:   honorCipherOrder: true",
          "33: };",
          "35: var nconns = 0;",
          "37: process.on('exit', function() {",
          "38:   assert.equal(nconns, 1);",
          "39: });",
          "41: var server = tls.createServer(options, function(cleartextStream) {",
          "42:   nconns++;",
          "43: });",
          "45: server.listen(common.PORT, '127.0.0.1', function() {",
          "46:   var client = tls.connect(common.PORT, '127.0.0.1',  function() {",
          "47:     var cipher = client.getCipher();",
          "48:     assert.equal(cipher.name, cipher_list[0]);",
          "49:     assert(cipher_version_pattern.test(cipher.version));",
          "50:     client.end();",
          "51:     server.close();",
          "52:   });",
          "53: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "809fdf26fbb48af8f441493b797a6a809b3aeff6",
      "candidate_info": {
        "commit_hash": "809fdf26fbb48af8f441493b797a6a809b3aeff6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/809fdf26fbb48af8f441493b797a6a809b3aeff6",
        "files": [
          "src/node.cc"
        ],
        "message": "isolates: add process.tid property, pass args to isolate",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: namespace node {",
          "132: static int option_end_index;",
          "133: static unsigned long max_stack_size;",
          "134: static unsigned short debug_port = 5858;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: static const char* eval_string;",
          "138: static bool print_eval;",
          "146: static void StartGCTimer () {",
          "147:   if (!uv_is_active((uv_handle_t*) &gc_timer)) {",
          "",
          "[Removed Lines]",
          "142: #define TICK_TIME(n) tick_times[(tick_time_head - (n)) % RPM_SAMPLES]",
          "144: static void CheckStatus(uv_timer_t* watcher, int status);",
          "",
          "[Added Lines]",
          "142: static void CheckStatus(uv_timer_t* watcher, int status);",
          "143: static unsigned long NewThreadId();",
          "145: void StartThread(unsigned long thread_id,",
          "146:                  Isolate* isolate,",
          "147:                  int argc,",
          "148:                  char** argv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1846: }",
          "1849: static void RunIsolate(void* arg) {",
          "1850:   uv_loop_t* loop = uv_loop_new();",
          "1851:   Isolate* isolate = Isolate::New(loop);",
          "1852: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1854: static struct {",
          "1855:   uv_mutex_t lock_;",
          "1856:   unsigned long counter_;",
          "1857: } thread_id_generator_;",
          "1860: static unsigned long NewThreadId() {",
          "1861:   unsigned long thread_id;",
          "1863:   uv_mutex_lock(&thread_id_generator_.lock_);",
          "1864:   thread_id = ++thread_id_generator_.counter_;",
          "1865:   uv_mutex_unlock(&thread_id_generator_.lock_);",
          "1867:   return thread_id;",
          "1868: }",
          "1871: struct ThreadInfo {",
          "1872:   unsigned long thread_id_;",
          "1873:   uv_thread_t thread_;",
          "1874:   char** argv_;",
          "1875:   int argc_;",
          "1877:   ThreadInfo(int argc, char** argv) {",
          "1878:     argc_ = argc;",
          "1879:     argv_ = new char*[argc_ + 1];",
          "1881:     for (int i = 0; i < argc_; ++i) {",
          "1882:       size_t size = 1 + strlen(argv[i]);",
          "1883:       argv_[i] = new char[size];",
          "1884:       memcpy(argv_[i], argv[i], size);",
          "1885:     }",
          "1886:     argv_[argc_] = NULL;",
          "1887:   }",
          "1889:   ThreadInfo(Handle<Array> args) {",
          "1890:     argc_ = args->Length();",
          "1891:     argv_ = new char*[argc_ + 1];",
          "1893:     for (int i = 0; i < argc_; ++i) {",
          "1894:       String::Utf8Value str(args->Get(i));",
          "1895:       size_t size = 1 + strlen(*str);",
          "1896:       argv_[i] = new char[size];",
          "1897:       memcpy(argv_[i], *str, size);",
          "1898:     }",
          "1899:     argv_[argc_] = NULL;",
          "1900:   }",
          "1902:   ~ThreadInfo() {",
          "1903:     for (int i = 0; i < argc_; ++i) {",
          "1904:       delete[] argv_[i];",
          "1905:     }",
          "1906:     delete argv_;",
          "1907:   }",
          "1908: };",
          "1912:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(arg);",
          "1917:   StartThread(ti->thread_id_, isolate, ti->argc_, ti->argv_);",
          "1918:   delete ti;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1858: static Handle<Value> NewIsolate(const Arguments& args) {",
          "1859:   HandleScope scope;",
          "1864:     return Null();",
          "1866:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "1867:   tpl->SetInternalFieldCount(2);",
          "1869:   Local<Object> obj = tpl->NewInstance();",
          "1870:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1873:   return scope.Close(obj);",
          "1874: }",
          "",
          "[Removed Lines]",
          "1861:   uv_thread_t* tid = new uv_thread_t;",
          "1863:   if (uv_thread_create(tid, RunIsolate, NULL))",
          "1871:   obj->SetPointerInInternalField(1, tid);",
          "",
          "[Added Lines]",
          "1928:   assert(args[0]->IsArray());",
          "1930:   Local<Array> argv = args[0].As<Array>();",
          "1931:   assert(argv->Length() >= 2);",
          "1933:   ThreadInfo* ti = new ThreadInfo(argv);",
          "1934:   ti->thread_id_ = NewThreadId();",
          "1936:   if (uv_thread_create(&ti->thread_, RunIsolate, ti)) {",
          "1937:     delete ti;",
          "1939:   }",
          "1946:   obj->SetPointerInInternalField(1, ti);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1883:   assert(obj->InternalFieldCount() == 2);",
          "1884:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1889:     return False(); // error",
          "1890:   else",
          "1891:     return True();  // ok",
          "",
          "[Removed Lines]",
          "1886:   uv_thread_t* tid = (uv_thread_t*) obj->GetPointerFromInternalField(1);",
          "1888:   if (uv_thread_join(tid))",
          "",
          "[Added Lines]",
          "1961:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(",
          "1962:       obj->GetPointerFromInternalField(1));",
          "1964:   if (uv_thread_join(&ti->thread_))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2634: }",
          "2640:   uv_prepare_init(loop, &prepare_tick_watcher);",
          "2641:   uv_prepare_start(&prepare_tick_watcher, PrepareTick);",
          "2642:   uv_unref(loop);",
          "",
          "[Removed Lines]",
          "2637: void StartThread(Isolate* isolate, int argc, char** argv) {",
          "2638:   uv_loop_t* loop = isolate->GetLoop();",
          "",
          "[Added Lines]",
          "2713: void StartThread(unsigned long thread_id,",
          "2714:                  Isolate* isolate,",
          "2715:                  int argc,",
          "2716:                  char** argv) {",
          "2717:   HandleScope scope;",
          "2719:   v8::Isolate::Scope isolate_scope(isolate->GetV8Isolate());",
          "2720:   v8::Context::Scope context_scope(isolate->GetV8Context());",
          "2722:   uv_loop_t* loop = isolate->GetLoop();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2688:   }",
          "2690:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "",
          "[Removed Lines]",
          "2691:   v8_typed_array::AttachBindings(v8::Context::GetCurrent()->Global());",
          "",
          "[Added Lines]",
          "2775:   process_l->Set(String::NewSymbol(\"tid\"),",
          "2776:                  Integer::NewFromUnsigned(thread_id));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2708: int Start(int argc, char *argv[]) {",
          "2710:   argv = ProcessInit(argc, argv);",
          "2712:   v8::V8::Initialize();",
          "2713:   v8::HandleScope handle_scope;",
          "2720:   Isolate* isolate = Isolate::New(uv_default_loop());",
          "2722:   isolate->Dispose();",
          "2724: #ifndef NDEBUG",
          "2727:   V8::Dispose();",
          "2728: #endif  // NDEBUG",
          "",
          "[Removed Lines]",
          "2716:   Persistent<v8::Context> context = v8::Context::New();",
          "2717:   v8::Context::Scope context_scope(context);",
          "2721:   StartThread(isolate, argc, argv);",
          "2726:   context.Dispose();",
          "",
          "[Added Lines]",
          "2797:   if (uv_mutex_init(&thread_id_generator_.lock_)) abort();",
          "2807:   StartThread(NewThreadId(), isolate, argc, argv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1dd57058571c23c3a863ca00176cc0a99f6097e",
      "candidate_info": {
        "commit_hash": "e1dd57058571c23c3a863ca00176cc0a99f6097e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e1dd57058571c23c3a863ca00176cc0a99f6097e",
        "files": [
          "src/node_io_watcher.cc"
        ],
        "message": "MakeCallback: Use in node_io_watcher",
        "before_after_code_files": [
          "src/node_io_watcher.cc||src/node_io_watcher.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_io_watcher.cc||src/node_io_watcher.cc": [
          "File: src/node_io_watcher.cc -> src/node_io_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   Local<Function> callback = Local<Function>::Cast(callback_v);",
          "70:   Local<Value> argv[2];",
          "71:   argv[0] = Local<Value>::New(revents & EV_READ ? True() : False());",
          "72:   argv[1] = Local<Value>::New(revents & EV_WRITE ? True() : False());",
          "79: }",
          "",
          "[Removed Lines]",
          "68:   TryCatch try_catch;",
          "74:   callback->Call(io->handle_, 2, argv);",
          "76:   if (try_catch.HasCaught()) {",
          "77:     FatalException(try_catch);",
          "78:   }",
          "",
          "[Added Lines]",
          "72:   MakeCallback(io->handle_, callback, 2, argv);",
          "",
          "---------------"
        ]
      }
    }
  ]
}