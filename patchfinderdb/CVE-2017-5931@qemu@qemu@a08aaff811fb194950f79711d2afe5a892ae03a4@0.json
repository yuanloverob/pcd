{
  "cve_id": "CVE-2017-5931",
  "cve_desc": "Integer overflow in hw/virtio/virtio-crypto.c in QEMU (aka Quick Emulator) allows local guest OS privileged users to cause a denial of service (QEMU process crash) or possibly execute arbitrary code on the host via a crafted virtio-crypto request, which triggers a heap-based buffer overflow.",
  "repo": "qemu/qemu",
  "patch_hash": "a08aaff811fb194950f79711d2afe5a892ae03a4",
  "patch_info": {
    "commit_hash": "a08aaff811fb194950f79711d2afe5a892ae03a4",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/a08aaff811fb194950f79711d2afe5a892ae03a4",
    "files": [
      "hw/virtio/virtio-crypto.c"
    ],
    "message": "virtio-crypto: fix possible integer and heap overflow\n\nBecause the 'size_t' type is 4 bytes in 32-bit platform, which\nis the same with 'int'. It's easy to make 'max_len' to zero when\ninteger overflow and then cause heap overflow if 'max_len' is zero.\n\nUsing uint_64 instead of size_t to avoid the integer overflow.\n\nCc: qemu-stable@nongnu.org\nReported-by: Li Qiang <liqiang6-s@360.cn>\nSigned-off-by: Gonglei <arei.gonglei@huawei.com>\nTested-by: Li Qiang <liqiang6-s@360.cn>\nReviewed-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>",
    "before_after_code_files": [
      "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c"
    ]
  },
  "patch_diff": {
    "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c": [
      "File: hw/virtio/virtio-crypto.c -> hw/virtio/virtio-crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "416:     uint32_t hash_start_src_offset = 0, len_to_hash = 0;",
      "417:     uint32_t cipher_start_src_offset = 0, len_to_cipher = 0;",
      "420:     size_t s;",
      "",
      "[Removed Lines]",
      "419:     size_t max_len, curr_size = 0;",
      "",
      "[Added Lines]",
      "419:     uint64_t max_len, curr_size = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:         return NULL;",
      "442:     }",
      "445:     if (unlikely(max_len > vcrypto->conf.max_size)) {",
      "446:         virtio_error(vdev, \"virtio-crypto too big length\");",
      "447:         return NULL;",
      "",
      "[Removed Lines]",
      "444:     max_len = iv_len + aad_len + src_len + dst_len + hash_result_len;",
      "",
      "[Added Lines]",
      "444:     max_len = (uint64_t)iv_len + aad_len + src_len + dst_len + hash_result_len;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6f119475d3c9c913f9140771895036be66d5c33",
      "candidate_info": {
        "commit_hash": "d6f119475d3c9c913f9140771895036be66d5c33",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/d6f119475d3c9c913f9140771895036be66d5c33",
        "files": [
          "hw/virtio/virtio-crypto.c"
        ],
        "message": "virtio-crypto: fix possible integer and heap overflow\n\nBecause the 'size_t' type is 4 bytes in 32-bit platform, which\nis the same with 'int'. It's easy to make 'max_len' to zero when\ninteger overflow and then cause heap overflow if 'max_len' is zero.\n\nUsing uint_64 instead of size_t to avoid the integer overflow.\n\nCc: qemu-stable@nongnu.org\nReported-by: Li Qiang <liqiang6-s@360.cn>\nSigned-off-by: Gonglei <arei.gonglei@huawei.com>\nTested-by: Li Qiang <liqiang6-s@360.cn>\nReviewed-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>\n(cherry picked from commit a08aaff811fb194950f79711d2afe5a892ae03a4)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c"
          ],
          "candidate": [
            "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c": [
          "File: hw/virtio/virtio-crypto.c -> hw/virtio/virtio-crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:     uint32_t hash_start_src_offset = 0, len_to_hash = 0;",
          "417:     uint32_t cipher_start_src_offset = 0, len_to_cipher = 0;",
          "420:     size_t s;",
          "",
          "[Removed Lines]",
          "419:     size_t max_len, curr_size = 0;",
          "",
          "[Added Lines]",
          "419:     uint64_t max_len, curr_size = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:         return NULL;",
          "442:     }",
          "445:     if (unlikely(max_len > vcrypto->conf.max_size)) {",
          "446:         virtio_error(vdev, \"virtio-crypto too big length\");",
          "447:         return NULL;",
          "",
          "[Removed Lines]",
          "444:     max_len = iv_len + aad_len + src_len + dst_len + hash_result_len;",
          "",
          "[Added Lines]",
          "444:     max_len = (uint64_t)iv_len + aad_len + src_len + dst_len + hash_result_len;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04b9b37edda85964cca033a48dcc0298036782f2",
      "candidate_info": {
        "commit_hash": "04b9b37edda85964cca033a48dcc0298036782f2",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/04b9b37edda85964cca033a48dcc0298036782f2",
        "files": [
          "hw/virtio/virtio-crypto.c",
          "include/hw/virtio/virtio-crypto.h"
        ],
        "message": "virtio-crypto: add data queue processing handler\n\nIntroduces VirtIOCryptoReq structure to store\ncrypto request so that we can easily support\nasynchronous crypto operation in the future.\n\nAt present, we only support cipher and algorithm\nchaining.\n\nSigned-off-by: Gonglei <arei.gonglei@huawei.com>\nReviewed-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>",
        "before_after_code_files": [
          "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c",
          "include/hw/virtio/virtio-crypto.h||include/hw/virtio/virtio-crypto.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c"
          ],
          "candidate": [
            "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/virtio/virtio-crypto.c||hw/virtio/virtio-crypto.c": [
          "File: hw/virtio/virtio-crypto.c -> hw/virtio/virtio-crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321: }",
          "323: static uint64_t virtio_crypto_get_features(VirtIODevice *vdev,",
          "324:                                            uint64_t features,",
          "325:                                            Error **errp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: static void virtio_crypto_init_request(VirtIOCrypto *vcrypto, VirtQueue *vq,",
          "324:                                 VirtIOCryptoReq *req)",
          "325: {",
          "326:     req->vcrypto = vcrypto;",
          "327:     req->vq = vq;",
          "328:     req->in = NULL;",
          "329:     req->in_iov = NULL;",
          "330:     req->in_num = 0;",
          "331:     req->in_len = 0;",
          "332:     req->flags = CRYPTODEV_BACKEND_ALG__MAX;",
          "333:     req->u.sym_op_info = NULL;",
          "334: }",
          "336: static void virtio_crypto_free_request(VirtIOCryptoReq *req)",
          "337: {",
          "338:     if (req) {",
          "339:         if (req->flags == CRYPTODEV_BACKEND_ALG_SYM) {",
          "340:             g_free(req->u.sym_op_info);",
          "341:         }",
          "342:         g_free(req);",
          "343:     }",
          "344: }",
          "346: static void",
          "347: virtio_crypto_sym_input_data_helper(VirtIODevice *vdev,",
          "348:                 VirtIOCryptoReq *req,",
          "349:                 uint32_t status,",
          "350:                 CryptoDevBackendSymOpInfo *sym_op_info)",
          "351: {",
          "352:     size_t s, len;",
          "354:     if (status != VIRTIO_CRYPTO_OK) {",
          "355:         return;",
          "356:     }",
          "358:     len = sym_op_info->dst_len;",
          "360:     s = iov_from_buf(req->in_iov, req->in_num, 0, sym_op_info->dst, len);",
          "361:     if (s != len) {",
          "362:         virtio_error(vdev, \"virtio-crypto dest data incorrect\");",
          "363:         return;",
          "364:     }",
          "366:     iov_discard_front(&req->in_iov, &req->in_num, len);",
          "368:     if (sym_op_info->op_type ==",
          "369:                       VIRTIO_CRYPTO_SYM_OP_ALGORITHM_CHAINING) {",
          "371:         s = iov_from_buf(req->in_iov, req->in_num, 0,",
          "372:                          sym_op_info->digest_result,",
          "373:                          sym_op_info->digest_result_len);",
          "374:         if (s != sym_op_info->digest_result_len) {",
          "375:             virtio_error(vdev, \"virtio-crypto digest result incorrect\");",
          "376:         }",
          "377:     }",
          "378: }",
          "380: static void virtio_crypto_req_complete(VirtIOCryptoReq *req, uint8_t status)",
          "381: {",
          "382:     VirtIOCrypto *vcrypto = req->vcrypto;",
          "383:     VirtIODevice *vdev = VIRTIO_DEVICE(vcrypto);",
          "385:     if (req->flags == CRYPTODEV_BACKEND_ALG_SYM) {",
          "386:         virtio_crypto_sym_input_data_helper(vdev, req, status,",
          "387:                                             req->u.sym_op_info);",
          "388:     }",
          "389:     stb_p(&req->in->status, status);",
          "390:     virtqueue_push(req->vq, &req->elem, req->in_len);",
          "391:     virtio_notify(vdev, req->vq);",
          "392: }",
          "394: static VirtIOCryptoReq *",
          "395: virtio_crypto_get_request(VirtIOCrypto *s, VirtQueue *vq)",
          "396: {",
          "397:     VirtIOCryptoReq *req = virtqueue_pop(vq, sizeof(VirtIOCryptoReq));",
          "399:     if (req) {",
          "400:         virtio_crypto_init_request(s, vq, req);",
          "401:     }",
          "402:     return req;",
          "403: }",
          "405: static CryptoDevBackendSymOpInfo *",
          "406: virtio_crypto_sym_op_helper(VirtIODevice *vdev,",
          "407:            struct virtio_crypto_cipher_para *cipher_para,",
          "408:            struct virtio_crypto_alg_chain_data_para *alg_chain_para,",
          "409:            struct iovec *iov, unsigned int out_num)",
          "410: {",
          "411:     VirtIOCrypto *vcrypto = VIRTIO_CRYPTO(vdev);",
          "412:     CryptoDevBackendSymOpInfo *op_info;",
          "413:     uint32_t src_len = 0, dst_len = 0;",
          "414:     uint32_t iv_len = 0;",
          "415:     uint32_t aad_len = 0, hash_result_len = 0;",
          "416:     uint32_t hash_start_src_offset = 0, len_to_hash = 0;",
          "417:     uint32_t cipher_start_src_offset = 0, len_to_cipher = 0;",
          "419:     size_t max_len, curr_size = 0;",
          "420:     size_t s;",
          "423:     if (cipher_para) {",
          "424:         iv_len = ldl_le_p(&cipher_para->iv_len);",
          "425:         src_len = ldl_le_p(&cipher_para->src_data_len);",
          "426:         dst_len = ldl_le_p(&cipher_para->dst_data_len);",
          "428:         iv_len = ldl_le_p(&alg_chain_para->iv_len);",
          "429:         src_len = ldl_le_p(&alg_chain_para->src_data_len);",
          "430:         dst_len = ldl_le_p(&alg_chain_para->dst_data_len);",
          "432:         aad_len = ldl_le_p(&alg_chain_para->aad_len);",
          "433:         hash_result_len = ldl_le_p(&alg_chain_para->hash_result_len);",
          "434:         hash_start_src_offset = ldl_le_p(",
          "435:                          &alg_chain_para->hash_start_src_offset);",
          "436:         cipher_start_src_offset = ldl_le_p(",
          "437:                          &alg_chain_para->cipher_start_src_offset);",
          "438:         len_to_cipher = ldl_le_p(&alg_chain_para->len_to_cipher);",
          "439:         len_to_hash = ldl_le_p(&alg_chain_para->len_to_hash);",
          "440:     } else {",
          "441:         return NULL;",
          "442:     }",
          "444:     max_len = iv_len + aad_len + src_len + dst_len + hash_result_len;",
          "445:     if (unlikely(max_len > vcrypto->conf.max_size)) {",
          "446:         virtio_error(vdev, \"virtio-crypto too big length\");",
          "447:         return NULL;",
          "448:     }",
          "450:     op_info = g_malloc0(sizeof(CryptoDevBackendSymOpInfo) + max_len);",
          "451:     op_info->iv_len = iv_len;",
          "452:     op_info->src_len = src_len;",
          "453:     op_info->dst_len = dst_len;",
          "454:     op_info->aad_len = aad_len;",
          "455:     op_info->digest_result_len = hash_result_len;",
          "456:     op_info->hash_start_src_offset = hash_start_src_offset;",
          "457:     op_info->len_to_hash = len_to_hash;",
          "458:     op_info->cipher_start_src_offset = cipher_start_src_offset;",
          "459:     op_info->len_to_cipher = len_to_cipher;",
          "461:     if (op_info->iv_len > 0) {",
          "462:         DPRINTF(\"iv_len=%\" PRIu32 \"\\n\", op_info->iv_len);",
          "463:         op_info->iv = op_info->data + curr_size;",
          "465:         s = iov_to_buf(iov, out_num, 0, op_info->iv, op_info->iv_len);",
          "466:         if (unlikely(s != op_info->iv_len)) {",
          "467:             virtio_error(vdev, \"virtio-crypto iv incorrect\");",
          "468:             goto err;",
          "469:         }",
          "470:         iov_discard_front(&iov, &out_num, op_info->iv_len);",
          "471:         curr_size += op_info->iv_len;",
          "472:     }",
          "475:     if (op_info->aad_len > 0) {",
          "476:         DPRINTF(\"aad_len=%\" PRIu32 \"\\n\", op_info->aad_len);",
          "477:         op_info->aad_data = op_info->data + curr_size;",
          "479:         s = iov_to_buf(iov, out_num, 0, op_info->aad_data, op_info->aad_len);",
          "480:         if (unlikely(s != op_info->aad_len)) {",
          "481:             virtio_error(vdev, \"virtio-crypto additional auth data incorrect\");",
          "482:             goto err;",
          "483:         }",
          "484:         iov_discard_front(&iov, &out_num, op_info->aad_len);",
          "486:         curr_size += op_info->aad_len;",
          "487:     }",
          "490:     if (op_info->src_len > 0) {",
          "491:         DPRINTF(\"src_len=%\" PRIu32 \"\\n\", op_info->src_len);",
          "492:         op_info->src = op_info->data + curr_size;",
          "494:         s = iov_to_buf(iov, out_num, 0, op_info->src, op_info->src_len);",
          "495:         if (unlikely(s != op_info->src_len)) {",
          "496:             virtio_error(vdev, \"virtio-crypto source data incorrect\");",
          "497:             goto err;",
          "498:         }",
          "499:         iov_discard_front(&iov, &out_num, op_info->src_len);",
          "501:         curr_size += op_info->src_len;",
          "502:     }",
          "505:     op_info->dst = op_info->data + curr_size;",
          "506:     curr_size += op_info->dst_len;",
          "508:     DPRINTF(\"dst_len=%\" PRIu32 \"\\n\", op_info->dst_len);",
          "511:     if (hash_result_len > 0) {",
          "512:         DPRINTF(\"hash_result_len=%\" PRIu32 \"\\n\", hash_result_len);",
          "513:         op_info->digest_result = op_info->data + curr_size;",
          "514:     }",
          "516:     return op_info;",
          "518: err:",
          "519:     g_free(op_info);",
          "520:     return NULL;",
          "521: }",
          "523: static int",
          "524: virtio_crypto_handle_sym_req(VirtIOCrypto *vcrypto,",
          "525:                struct virtio_crypto_sym_data_req *req,",
          "526:                CryptoDevBackendSymOpInfo **sym_op_info,",
          "527:                struct iovec *iov, unsigned int out_num)",
          "528: {",
          "529:     VirtIODevice *vdev = VIRTIO_DEVICE(vcrypto);",
          "530:     uint32_t op_type;",
          "531:     CryptoDevBackendSymOpInfo *op_info;",
          "533:     op_type = ldl_le_p(&req->op_type);",
          "535:     if (op_type == VIRTIO_CRYPTO_SYM_OP_CIPHER) {",
          "536:         op_info = virtio_crypto_sym_op_helper(vdev, &req->u.cipher.para,",
          "537:                                               NULL, iov, out_num);",
          "538:         if (!op_info) {",
          "539:             return -EFAULT;",
          "540:         }",
          "541:         op_info->op_type = op_type;",
          "542:     } else if (op_type == VIRTIO_CRYPTO_SYM_OP_ALGORITHM_CHAINING) {",
          "543:         op_info = virtio_crypto_sym_op_helper(vdev, NULL,",
          "544:                                               &req->u.chain.para,",
          "545:                                               iov, out_num);",
          "546:         if (!op_info) {",
          "547:             return -EFAULT;",
          "548:         }",
          "549:         op_info->op_type = op_type;",
          "550:     } else {",
          "552:         error_report(\"virtio-crypto unsupported cipher type\");",
          "553:         return -VIRTIO_CRYPTO_NOTSUPP;",
          "554:     }",
          "558:     return 0;",
          "559: }",
          "561: static int",
          "562: virtio_crypto_handle_request(VirtIOCryptoReq *request)",
          "563: {",
          "564:     VirtIOCrypto *vcrypto = request->vcrypto;",
          "565:     VirtIODevice *vdev = VIRTIO_DEVICE(vcrypto);",
          "566:     VirtQueueElement *elem = &request->elem;",
          "567:     int queue_index = virtio_crypto_vq2q(virtio_get_queue_index(request->vq));",
          "568:     struct virtio_crypto_op_data_req req;",
          "569:     int ret;",
          "570:     struct iovec *in_iov;",
          "571:     struct iovec *out_iov;",
          "572:     unsigned in_num;",
          "573:     unsigned out_num;",
          "574:     uint32_t opcode;",
          "575:     uint8_t status = VIRTIO_CRYPTO_ERR;",
          "576:     uint64_t session_id;",
          "577:     CryptoDevBackendSymOpInfo *sym_op_info = NULL;",
          "578:     Error *local_err = NULL;",
          "580:     if (elem->out_num < 1 || elem->in_num < 1) {",
          "581:         virtio_error(vdev, \"virtio-crypto dataq missing headers\");",
          "582:         return -1;",
          "583:     }",
          "585:     out_num = elem->out_num;",
          "586:     out_iov = elem->out_sg;",
          "587:     in_num = elem->in_num;",
          "588:     in_iov = elem->in_sg;",
          "589:     if (unlikely(iov_to_buf(out_iov, out_num, 0, &req, sizeof(req))",
          "590:                 != sizeof(req))) {",
          "591:         virtio_error(vdev, \"virtio-crypto request outhdr too short\");",
          "592:         return -1;",
          "593:     }",
          "594:     iov_discard_front(&out_iov, &out_num, sizeof(req));",
          "596:     if (in_iov[in_num - 1].iov_len <",
          "597:             sizeof(struct virtio_crypto_inhdr)) {",
          "598:         virtio_error(vdev, \"virtio-crypto request inhdr too short\");",
          "599:         return -1;",
          "600:     }",
          "602:     request->in_len = iov_size(in_iov, in_num);",
          "603:     request->in = (void *)in_iov[in_num - 1].iov_base",
          "604:               + in_iov[in_num - 1].iov_len",
          "605:               - sizeof(struct virtio_crypto_inhdr);",
          "606:     iov_discard_back(in_iov, &in_num, sizeof(struct virtio_crypto_inhdr));",
          "612:     request->in_num = in_num;",
          "613:     request->in_iov = in_iov;",
          "615:     opcode = ldl_le_p(&req.header.opcode);",
          "616:     session_id = ldq_le_p(&req.header.session_id);",
          "618:     switch (opcode) {",
          "619:     case VIRTIO_CRYPTO_CIPHER_ENCRYPT:",
          "620:     case VIRTIO_CRYPTO_CIPHER_DECRYPT:",
          "621:         ret = virtio_crypto_handle_sym_req(vcrypto,",
          "622:                          &req.u.sym_req,",
          "623:                          &sym_op_info,",
          "624:                          out_iov, out_num);",
          "626:         if (ret == -EFAULT) {",
          "627:             return -1;",
          "628:         } else if (ret == -VIRTIO_CRYPTO_NOTSUPP) {",
          "629:             virtio_crypto_req_complete(request, VIRTIO_CRYPTO_NOTSUPP);",
          "630:             virtio_crypto_free_request(request);",
          "631:         } else {",
          "632:             sym_op_info->session_id = session_id;",
          "635:             request->flags = CRYPTODEV_BACKEND_ALG_SYM;",
          "636:             request->u.sym_op_info = sym_op_info;",
          "637:             ret = cryptodev_backend_sym_operation(vcrypto->cryptodev,",
          "638:                                     sym_op_info, queue_index, &local_err);",
          "639:             if (ret < 0) {",
          "640:                 status = VIRTIO_CRYPTO_ERR;",
          "641:                 if (local_err) {",
          "642:                     error_report_err(local_err);",
          "643:                 }",
          "645:                 status = VIRTIO_CRYPTO_OK;",
          "646:             }",
          "647:             virtio_crypto_req_complete(request, status);",
          "648:             virtio_crypto_free_request(request);",
          "649:         }",
          "650:         break;",
          "651:     case VIRTIO_CRYPTO_HASH:",
          "652:     case VIRTIO_CRYPTO_MAC:",
          "653:     case VIRTIO_CRYPTO_AEAD_ENCRYPT:",
          "654:     case VIRTIO_CRYPTO_AEAD_DECRYPT:",
          "655:     default:",
          "656:         error_report(\"virtio-crypto unsupported dataq opcode: %u\",",
          "657:                      opcode);",
          "658:         virtio_crypto_req_complete(request, VIRTIO_CRYPTO_NOTSUPP);",
          "659:         virtio_crypto_free_request(request);",
          "660:     }",
          "662:     return 0;",
          "663: }",
          "665: static void virtio_crypto_handle_dataq(VirtIODevice *vdev, VirtQueue *vq)",
          "666: {",
          "667:     VirtIOCrypto *vcrypto = VIRTIO_CRYPTO(vdev);",
          "668:     VirtIOCryptoReq *req;",
          "670:     while ((req = virtio_crypto_get_request(vcrypto, vq))) {",
          "671:         if (virtio_crypto_handle_request(req) < 0) {",
          "672:             virtqueue_detach_element(req->vq, &req->elem, 0);",
          "673:             virtio_crypto_free_request(req);",
          "674:             break;",
          "675:         }",
          "676:     }",
          "677: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:     vcrypto->curr_queues = 1;",
          "386:     for (i = 0; i < vcrypto->max_queues; i++) {",
          "388:     }",
          "390:     vcrypto->ctrl_vq = virtio_add_queue(vdev, 64, virtio_crypto_handle_ctrl);",
          "",
          "[Removed Lines]",
          "387:         virtio_add_queue(vdev, 1024, NULL);",
          "",
          "[Added Lines]",
          "743:         virtio_add_queue(vdev, 1024, virtio_crypto_handle_dataq);",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio-crypto.h||include/hw/virtio/virtio-crypto.h": [
          "File: include/hw/virtio/virtio-crypto.h -> include/hw/virtio/virtio-crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     VirtQueueElement elem;",
          "67:     uint32_t flags;",
          "68:     VirtQueue *vq;",
          "69:     struct VirtIOCrypto *vcrypto;",
          "70:     union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     struct virtio_crypto_inhdr *in;",
          "71:     size_t in_len;",
          "",
          "---------------"
        ]
      }
    }
  ]
}