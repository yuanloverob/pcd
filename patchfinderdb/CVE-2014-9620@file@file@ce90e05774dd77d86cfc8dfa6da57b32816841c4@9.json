{
  "cve_id": "CVE-2014-9620",
  "cve_desc": "The ELF parser in file 5.08 through 5.21 allows remote attackers to cause a denial of service via a large number of notes.",
  "repo": "file/file",
  "patch_hash": "ce90e05774dd77d86cfc8dfa6da57b32816841c4",
  "patch_info": {
    "commit_hash": "ce90e05774dd77d86cfc8dfa6da57b32816841c4",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/ce90e05774dd77d86cfc8dfa6da57b32816841c4",
    "files": [
      "ChangeLog",
      "doc/file.man",
      "doc/libmagic.man",
      "src/apprentice.c",
      "src/elfclass.h",
      "src/file.c",
      "src/file.h",
      "src/file_opts.h",
      "src/magic.c",
      "src/magic.h.in",
      "src/readelf.c"
    ],
    "message": "- Add a limit to the number of ELF notes processed (Suggested by Alexander   Cherepanov) - Restructure ELF note printing so that we don't print the same message   multiple times on repeated notes of the same kind.",
    "before_after_code_files": [
      "src/apprentice.c||src/apprentice.c",
      "src/elfclass.h||src/elfclass.h",
      "src/file.c||src/file.c",
      "src/file.h||src/file.h",
      "src/file_opts.h||src/file_opts.h",
      "src/magic.c||src/magic.c",
      "src/magic.h.in||src/magic.h.in",
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/apprentice.c||src/apprentice.c": [
      "File: src/apprentice.c -> src/apprentice.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.226 2014/11/28 02:35:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "528:  ms->name_max = FILE_NAME_MAX;",
      "529:  ms->elf_shnum_max = FILE_ELF_SHNUM_MAX;",
      "530:  ms->elf_phnum_max = FILE_ELF_PHNUM_MAX;",
      "531:  return ms;",
      "532: free:",
      "533:  free(ms);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "531:  ms->elf_notes_max = FILE_ELF_NOTES_MAX;",
      "",
      "---------------"
    ],
    "src/elfclass.h||src/elfclass.h": [
      "File: src/elfclass.h -> src/elfclass.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  swap = (u.c[sizeof(int32_t) - 1] + 1) != elfhdr.e_ident[EI_DATA];",
      "34:  type = elf_getu16(swap, elfhdr.e_type);",
      "35:  switch (type) {",
      "36: #ifdef ELFCORE",
      "37:  case ET_CORE:",
      "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
      "39:   if (phnum > ms->elf_phnum_max)",
      "41:   flags |= FLAGS_IS_CORE;",
      "42:   if (dophn_core(ms, clazz, swap, fd,",
      "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "44:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "46:    return -1;",
      "47:   break;",
      "48: #endif",
      "",
      "[Removed Lines]",
      "40:    return toomany(ms, \"program\", phnum);",
      "45:       fsize, &flags) == -1)",
      "",
      "[Added Lines]",
      "35:  notecount = ms->elf_notes_max;",
      "41:    return toomany(ms, \"program headers\", phnum);",
      "46:       fsize, &flags, &notecount) == -1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:   if (dophn_exec(ms, clazz, swap, fd,",
      "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "59:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "61:    return -1;",
      "63:  case ET_REL:",
      "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
      "65:   if (shnum > ms->elf_shnum_max)",
      "67:   if (doshn(ms, clazz, swap, fd,",
      "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
      "69:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
      "72:    return -1;",
      "73:   break;",
      "75:  default:",
      "76:   break;",
      "77:  }",
      "78:  return 1;",
      "",
      "[Removed Lines]",
      "60:       fsize, &flags, shnum) == -1)",
      "66:    return toomany(ms, \"section\", shnum);",
      "70:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
      "71:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
      "",
      "[Added Lines]",
      "61:       fsize, shnum, &flags, &notecount) == -1)",
      "67:    return toomany(ms, \"section headers\", shnum);",
      "71:       fsize, elf_getu16(swap, elfhdr.e_machine),",
      "72:       (int)elf_getu16(swap, elfhdr.e_shstrndx),",
      "73:       &flags, &notecount) == -1)",
      "80:  if (notecount == 0)",
      "81:   return toomany(ms, \"notes\", ms->elf_notes_max);",
      "",
      "---------------"
    ],
    "src/file.c||src/file.c": [
      "File: src/file.c -> src/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: file.c,v 1.158 2014/11/28 02:35:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: file.c,v 1.159 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:  { \"name\", MAGIC_PARAM_NAME_MAX, 0 },",
      "126:  { \"elf_phnum\", MAGIC_PARAM_ELF_PHNUM_MAX, 0 },",
      "127:  { \"elf_shnum\", MAGIC_PARAM_ELF_SHNUM_MAX, 0 },",
      "128: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:  { \"elf_notes\", MAGIC_PARAM_ELF_NOTES_MAX, 0 },",
      "",
      "---------------"
    ],
    "src/file.h||src/file.h": [
      "File: src/file.h -> src/file.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "407:  uint16_t name_max;",
      "408:  uint16_t elf_shnum_max;",
      "409:  uint16_t elf_phnum_max;",
      "410: #define FILE_INDIR_MAX   15",
      "411: #define FILE_NAME_MAX   30",
      "412: #define FILE_ELF_SHNUM_MAX  32768",
      "413: #define FILE_ELF_PHNUM_MAX  128",
      "414: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:  uint16_t elf_notes_max;",
      "415: #define FILE_ELF_NOTES_MAX  256",
      "",
      "---------------"
    ],
    "src/file_opts.h||src/file_opts.h": [
      "File: src/file_opts.h -> src/file_opts.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: OPT('P', \"parameter\", 0, \"            set file engine parameter limits\\n\"",
      "47:     \"                               indir        15 recursion limit for indirection\\n\"",
      "48:     \"                               name         30 use limit for name/use magic\\n\"",
      "49:     \"                               elf_phnum   128 max ELF prog sections processed\\n\"",
      "50:     \"                               elf_shnum 32768 max ELF sections processed\\n\")",
      "51: OPT('r', \"raw\", 0, \"                  don't translate unprintable chars to \\\\ooo\\n\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:     \"                               elf_notes   256 max ELF notes processed\\n\"",
      "",
      "---------------"
    ],
    "src/magic.c||src/magic.c": [
      "File: src/magic.c -> src/magic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include \"file.h\"",
      "35: #ifndef lint",
      "39: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.89 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "[Added Lines]",
      "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.90 2014/12/04 15:56:46 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "554:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
      "555:   ms->elf_shnum_max = *(const size_t *)val;",
      "556:   return 0;",
      "557:  default:",
      "558:   errno = EINVAL;",
      "559:   return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "557:  case MAGIC_PARAM_ELF_NOTES_MAX:",
      "558:   ms->elf_notes_max = *(const size_t *)val;",
      "559:   return 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "576:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
      "578:   return 0;",
      "579:  default:",
      "580:   errno = EINVAL;",
      "581:   return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:  case MAGIC_PARAM_ELF_NOTES_MAX:",
      "584:   return 0;",
      "",
      "---------------"
    ],
    "src/magic.h.in||src/magic.h.in": [
      "File: src/magic.h.in -> src/magic.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "107: #define MAGIC_PARAM_NAME_MAX  1",
      "108: #define MAGIC_PARAM_ELF_PHNUM_MAX 2",
      "109: #define MAGIC_PARAM_ELF_SHNUM_MAX 3",
      "111: int magic_setparam(magic_t, int, const void *);",
      "112: int magic_getparam(magic_t, int, void *);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110: #define MAGIC_PARAM_ELF_NOTES_MAX 4",
      "",
      "---------------"
    ],
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.114 2014/12/11 14:19:36 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.115 2014/12/16 20:53:05 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44: #ifdef ELFCORE",
      "45: private int dophn_core(struct magic_set *, int, int, int, off_t, int, size_t,",
      "47: #endif",
      "48: private int dophn_exec(struct magic_set *, int, int, int, off_t, int, size_t,",
      "50: private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,",
      "52: private size_t donote(struct magic_set *, void *, size_t, size_t, int,",
      "55: #define ELF_ALIGN(a) ((((a) + align - 1) / align) * align)",
      "",
      "[Removed Lines]",
      "46:     off_t, int *);",
      "49:     off_t, int *, int);",
      "51:     off_t, int *, int, int);",
      "53:     int, size_t, int *);",
      "",
      "[Added Lines]",
      "46:     off_t, int *, uint16_t *);",
      "49:     off_t, int, int *, uint16_t *);",
      "51:     off_t, int, int, int *, uint16_t *);",
      "53:     int, size_t, int *, uint16_t *);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "67: private int",
      "68: toomany(struct magic_set *ms, const char *name, uint16_t num)",
      "69: {",
      "71:      ) == -1)",
      "72:   return -1;",
      "73:  return 0;",
      "",
      "[Removed Lines]",
      "70:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
      "",
      "[Added Lines]",
      "70:  if (file_printf(ms, \", too many %s (%u)\", name, num",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "293:  \"NetBSD\",",
      "294: };",
      "302: private int",
      "303: dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
      "305: {",
      "306:  Elf32_Phdr ph32;",
      "307:  Elf64_Phdr ph64;",
      "",
      "[Removed Lines]",
      "296: #define FLAGS_DID_CORE  0x01",
      "297: #define FLAGS_DID_NOTE  0x02",
      "298: #define FLAGS_DID_BUILD_ID 0x04",
      "299: #define FLAGS_DID_CORE_STYLE 0x08",
      "300: #define FLAGS_IS_CORE  0x10",
      "304:     int num, size_t size, off_t fsize, int *flags)",
      "",
      "[Added Lines]",
      "296: #define FLAGS_DID_CORE   0x001",
      "297: #define FLAGS_DID_OS_NOTE  0x002",
      "298: #define FLAGS_DID_BUILD_ID  0x004",
      "299: #define FLAGS_DID_CORE_STYLE  0x008",
      "300: #define FLAGS_DID_NETBSD_PAX  0x010",
      "301: #define FLAGS_DID_NETBSD_MARCH  0x020",
      "302: #define FLAGS_DID_NETBSD_CMODEL  0x040",
      "303: #define FLAGS_DID_NETBSD_UNKNOWN 0x080",
      "304: #define FLAGS_IS_CORE   0x100",
      "308:     int num, size_t size, off_t fsize, int *flags, uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "347:    if (offset >= (size_t)bufsize)",
      "348:     break;",
      "349:    offset = donote(ms, nbuf, offset, (size_t)bufsize,",
      "351:    if (offset == 0)",
      "352:     break;",
      "",
      "[Removed Lines]",
      "350:        clazz, swap, 4, flags);",
      "",
      "[Added Lines]",
      "354:        clazz, swap, 4, flags, notecount);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "477:  }",
      "478: }",
      "483: {",
      "542:  }",
      "548:  if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&",
      "550:      file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]);",
      "551:  }",
      "552:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "554:   uint32_t desc[4];",
      "555:   (void)memcpy(desc, &nbuf[doff], sizeof(desc));",
      "557:   if (file_printf(ms, \", for GNU/\") == -1)",
      "559:   switch (elf_getu32(swap, desc[0])) {",
      "560:   case GNU_OS_LINUX:",
      "561:    if (file_printf(ms, \"Linux\") == -1)",
      "563:    break;",
      "564:   case GNU_OS_HURD:",
      "565:    if (file_printf(ms, \"Hurd\") == -1)",
      "567:    break;",
      "568:   case GNU_OS_SOLARIS:",
      "569:    if (file_printf(ms, \"Solaris\") == -1)",
      "571:    break;",
      "572:   case GNU_OS_KFREEBSD:",
      "573:    if (file_printf(ms, \"kFreeBSD\") == -1)",
      "575:    break;",
      "576:   case GNU_OS_KNETBSD:",
      "577:    if (file_printf(ms, \"kNetBSD\") == -1)",
      "579:    break;",
      "580:   default:",
      "581:    if (file_printf(ms, \"<unknown>\") == -1)",
      "583:   }",
      "584:   if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),",
      "585:       elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)",
      "589:  }",
      "603:  }",
      "605:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"PaX\") == 0 &&",
      "607:   static const char *pax[] = {",
      "608:       \"+mprotect\",",
      "609:       \"-mprotect\",",
      "",
      "[Removed Lines]",
      "480: private size_t",
      "481: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
      "482:     int clazz, int swap, size_t align, int *flags)",
      "484:  Elf32_Nhdr nh32;",
      "485:  Elf64_Nhdr nh64;",
      "486:  size_t noff, doff;",
      "487: #ifdef ELFCORE",
      "488:  int os_style = -1;",
      "489: #endif",
      "490:  uint32_t namesz, descsz;",
      "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "492:  char sbuf[512];",
      "494:  if (xnh_sizeof + offset > size) {",
      "498:   return xnh_sizeof + offset;",
      "499:  }",
      "501:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "502:  offset += xnh_sizeof;",
      "504:  namesz = xnh_namesz;",
      "505:  descsz = xnh_descsz;",
      "506:  if ((namesz == 0) && (descsz == 0)) {",
      "510:   return (offset >= size) ? offset : size;",
      "511:  }",
      "513:  if (namesz & 0x80000000) {",
      "514:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "515:   (unsigned long)namesz);",
      "516:      return 0;",
      "517:  }",
      "519:  if (descsz & 0x80000000) {",
      "520:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "521:   (unsigned long)descsz);",
      "522:      return 0;",
      "523:  }",
      "526:  noff = offset;",
      "527:  doff = ELF_ALIGN(offset + namesz);",
      "529:  if (offset + namesz > size) {",
      "533:   return doff;",
      "534:  }",
      "536:  offset = ELF_ALIGN(doff + descsz);",
      "537:  if (doff + descsz > size) {",
      "541:   return (offset >= size) ? offset : size;",
      "544:  if ((*flags & (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID)) ==",
      "545:      (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID))",
      "546:   goto core;",
      "549:      xnh_type == NT_GNU_VERSION && descsz == 2) {",
      "553:      xnh_type == NT_GNU_VERSION && descsz == 16) {",
      "558:    return size;",
      "562:     return size;",
      "566:     return size;",
      "570:     return size;",
      "574:     return size;",
      "578:     return size;",
      "582:     return size;",
      "586:    return size;",
      "588:   return size;",
      "591:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "592:      xnh_type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "593:      uint8_t desc[20];",
      "594:      uint32_t i;",
      "595:      if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "596:   \"sha1\") == -1)",
      "597:       return size;",
      "598:      (void)memcpy(desc, &nbuf[doff], descsz);",
      "599:      for (i = 0; i < descsz; i++)",
      "600:   if (file_printf(ms, \"%02x\", desc[i]) == -1)",
      "601:       return size;",
      "606:      xnh_type == NT_NETBSD_PAX && descsz == 4) {",
      "",
      "[Added Lines]",
      "484: private int",
      "485: do_bid_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "486:     int swap __attribute__((__unused__)), uint32_t namesz, uint32_t descsz,",
      "487:     size_t noff, size_t doff, int *flags)",
      "489:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "490:      type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "491:   uint8_t desc[20];",
      "492:   uint32_t i;",
      "494:   if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "495:       \"sha1\") == -1)",
      "496:    return 1;",
      "497:   (void)memcpy(desc, &nbuf[doff], descsz);",
      "498:   for (i = 0; i < descsz; i++)",
      "499:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
      "500:    return 1;",
      "501:   return 1;",
      "503:  return 0;",
      "504: }",
      "506: private int",
      "507: do_os_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "508:     int swap, uint32_t namesz, uint32_t descsz,",
      "509:     size_t noff, size_t doff, int *flags)",
      "510: {",
      "512:      type == NT_GNU_VERSION && descsz == 2) {",
      "515:      return 1;",
      "519:      type == NT_GNU_VERSION && descsz == 16) {",
      "525:    return 1;",
      "529:     return 1;",
      "533:     return 1;",
      "537:     return 1;",
      "541:     return 1;",
      "545:     return 1;",
      "549:     return 1;",
      "553:    return 1;",
      "554:   return 1;",
      "557:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "558:       if (type == NT_NETBSD_VERSION && descsz == 4) {",
      "560:    do_note_netbsd_version(ms, swap, &nbuf[doff]);",
      "561:    return 1;",
      "562:   }",
      "563:  }",
      "565:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
      "566:       if (type == NT_FREEBSD_VERSION && descsz == 4) {",
      "568:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
      "569:    return 1;",
      "570:   }",
      "573:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
      "574:      type == NT_OPENBSD_VERSION && descsz == 4) {",
      "576:   if (file_printf(ms, \", for OpenBSD\") == -1)",
      "577:    return 1;",
      "579:   return 1;",
      "580:  }",
      "582:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
      "583:      type == NT_DRAGONFLY_VERSION && descsz == 4) {",
      "584:   uint32_t desc;",
      "586:   if (file_printf(ms, \", for DragonFly\") == -1)",
      "587:    return 1;",
      "588:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "589:   desc = elf_getu32(swap, desc);",
      "590:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
      "591:       desc / 10000 % 10, desc % 10000) == -1)",
      "592:    return 1;",
      "593:   return 1;",
      "594:  }",
      "595:  return 0;",
      "596: }",
      "598: private int",
      "599: do_pax_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "600:     int swap, uint32_t namesz, uint32_t descsz,",
      "601:     size_t noff, size_t doff, int *flags)",
      "602: {",
      "604:      type == NT_NETBSD_PAX && descsz == 4) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "616:   size_t i;",
      "617:   int did = 0;",
      "619:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "620:   desc = elf_getu32(swap, desc);",
      "622:   if (desc && file_printf(ms, \", PaX: \") == -1)",
      "625:   for (i = 0; i < __arraycount(pax); i++) {",
      "626:    if (((1 << i) & desc) == 0)",
      "627:     continue;",
      "628:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
      "629:        pax[i]) == -1)",
      "666:   }",
      "667:  }",
      "",
      "[Removed Lines]",
      "623:    return size;",
      "630:     return size;",
      "631:   }",
      "632:  }",
      "634:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "635:   switch (xnh_type) {",
      "636:   case NT_NETBSD_VERSION:",
      "637:    if (descsz == 4) {",
      "638:     do_note_netbsd_version(ms, swap, &nbuf[doff]);",
      "640:     return size;",
      "641:    }",
      "642:    break;",
      "643:   case NT_NETBSD_MARCH:",
      "644:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "645:        (const char *)&nbuf[doff]) == -1)",
      "646:     return size;",
      "647:    break;",
      "648:   case NT_NETBSD_CMODEL:",
      "649:    if (file_printf(ms, \", compiler model: %.*s\",",
      "650:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "651:     return size;",
      "652:    break;",
      "653:   default:",
      "654:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
      "655:     return size;",
      "656:    break;",
      "657:   }",
      "658:   return size;",
      "659:  }",
      "661:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
      "662:       if (xnh_type == NT_FREEBSD_VERSION && descsz == 4) {",
      "663:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
      "665:    return size;",
      "669:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
      "670:      xnh_type == NT_OPENBSD_VERSION && descsz == 4) {",
      "671:   if (file_printf(ms, \", for OpenBSD\") == -1)",
      "672:    return size;",
      "675:   return size;",
      "676:  }",
      "678:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
      "679:      xnh_type == NT_DRAGONFLY_VERSION && descsz == 4) {",
      "680:   uint32_t desc;",
      "681:   if (file_printf(ms, \", for DragonFly\") == -1)",
      "682:    return size;",
      "683:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "684:   desc = elf_getu32(swap, desc);",
      "685:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
      "686:       desc / 10000 % 10, desc % 10000) == -1)",
      "687:    return size;",
      "689:   return size;",
      "690:  }",
      "692: core:",
      "",
      "[Added Lines]",
      "622:    return 1;",
      "629:     return 1;",
      "631:   return 1;",
      "633:  return 0;",
      "634: }",
      "636: private int",
      "637: do_core_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "638:     int swap, uint32_t namesz, uint32_t descsz,",
      "639:     size_t noff, size_t doff, int *flags, size_t size, int clazz)",
      "640: {",
      "641: #ifdef ELFCORE",
      "642:  int os_style = -1;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "718:   os_style = OS_STYLE_NETBSD;",
      "719:  }",
      "725:  if (os_style != -1 && (*flags & FLAGS_DID_CORE_STYLE) == 0) {",
      "726:   if (file_printf(ms, \", %s-style\", os_style_names[os_style])",
      "727:       == -1)",
      "730:  }",
      "732:  switch (os_style) {",
      "733:  case OS_STYLE_NETBSD:",
      "735:    uint32_t signo;",
      "",
      "[Removed Lines]",
      "721: #ifdef ELFCORE",
      "722:  if ((*flags & FLAGS_DID_CORE) != 0)",
      "723:   return size;",
      "728:    return size;",
      "734:   if (xnh_type == NT_NETBSD_CORE_PROCINFO) {",
      "",
      "[Added Lines]",
      "674:    return 1;",
      "680:   if (type == NT_NETBSD_CORE_PROCINFO) {",
      "681:    char sbuf[512];",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "741:    if (file_printf(ms, \", from '%.31s'\",",
      "742:        file_printable(sbuf, sizeof(sbuf),",
      "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
      "",
      "[Removed Lines]",
      "744:     return size;",
      "",
      "[Added Lines]",
      "691:     return 1;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "751:        sizeof(signo));",
      "752:    if (file_printf(ms, \" (signal %u)\",",
      "753:        elf_getu32(swap, signo)) == -1)",
      "757:   }",
      "758:   break;",
      "760:  default:",
      "762:    size_t i, j;",
      "763:    unsigned char c;",
      "",
      "[Removed Lines]",
      "754:     return size;",
      "756:    return size;",
      "761:   if (xnh_type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
      "",
      "[Added Lines]",
      "701:     return 1;",
      "703:    return 1;",
      "708:   if (type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "830:      size_t no;",
      "831:      int adjust = 1;",
      "832:      if (prpsoffsets(k) >= prpsoffsets(i))",
      "",
      "[Removed Lines]",
      "829:     for (k = i + 1 ; k < NOFFSETS ; k++) {",
      "",
      "[Added Lines]",
      "776:     for (k = i + 1 ; k < NOFFSETS; k++) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "851:      cp--;",
      "852:     if (file_printf(ms, \", from '%.*s'\",",
      "853:         (int)(cp - cname), cname) == -1)",
      "858:    tryanother:",
      "859:     ;",
      "",
      "[Removed Lines]",
      "854:      return size;",
      "856:     return size;",
      "",
      "[Added Lines]",
      "801:      return 1;",
      "803:     return 1;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "862:   break;",
      "863:  }",
      "864: #endif",
      "865:  return offset;",
      "866: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "812:  return 0;",
      "813: }",
      "815: private size_t",
      "816: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
      "817:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount)",
      "818: {",
      "819:  Elf32_Nhdr nh32;",
      "820:  Elf64_Nhdr nh64;",
      "821:  size_t noff, doff;",
      "822:  uint32_t namesz, descsz;",
      "823:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "825:  if (*notecount == 0)",
      "826:   return 0;",
      "827:  --*notecount;",
      "829:  if (xnh_sizeof + offset > size) {",
      "833:   return xnh_sizeof + offset;",
      "834:  }",
      "836:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "837:  offset += xnh_sizeof;",
      "839:  namesz = xnh_namesz;",
      "840:  descsz = xnh_descsz;",
      "841:  if ((namesz == 0) && (descsz == 0)) {",
      "845:   return (offset >= size) ? offset : size;",
      "846:  }",
      "848:  if (namesz & 0x80000000) {",
      "849:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "850:   (unsigned long)namesz);",
      "851:      return 0;",
      "852:  }",
      "854:  if (descsz & 0x80000000) {",
      "855:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "856:   (unsigned long)descsz);",
      "857:      return 0;",
      "858:  }",
      "860:  noff = offset;",
      "861:  doff = ELF_ALIGN(offset + namesz);",
      "863:  if (offset + namesz > size) {",
      "867:   return doff;",
      "868:  }",
      "870:  offset = ELF_ALIGN(doff + descsz);",
      "871:  if (doff + descsz > size) {",
      "875:   return (offset >= size) ? offset : size;",
      "876:  }",
      "878:  if ((*flags & FLAGS_DID_OS_NOTE) == 0) {",
      "879:   if (do_os_note(ms, nbuf, xnh_type, swap,",
      "880:       namesz, descsz, noff, doff, flags))",
      "881:    return size;",
      "882:  }",
      "884:  if ((*flags & FLAGS_DID_BUILD_ID) == 0) {",
      "885:   if (do_bid_note(ms, nbuf, xnh_type, swap,",
      "886:       namesz, descsz, noff, doff, flags))",
      "887:    return size;",
      "888:  }",
      "890:  if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {",
      "891:   if (do_pax_note(ms, nbuf, xnh_type, swap,",
      "892:       namesz, descsz, noff, doff, flags))",
      "893:    return size;",
      "894:  }",
      "896:  if ((*flags & FLAGS_DID_CORE) == 0) {",
      "897:   if (do_core_note(ms, nbuf, xnh_type, swap,",
      "898:       namesz, descsz, noff, doff, flags, size, clazz))",
      "899:    return size;",
      "900:  }",
      "902:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "903:   switch (xnh_type) {",
      "904:       case NT_NETBSD_VERSION:",
      "905:    return size;",
      "906:   case NT_NETBSD_MARCH:",
      "907:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
      "908:     return size;",
      "909:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "910:        (const char *)&nbuf[doff]) == -1)",
      "911:     return size;",
      "912:    break;",
      "913:   case NT_NETBSD_CMODEL:",
      "914:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
      "915:     return size;",
      "916:    if (file_printf(ms, \", compiler model: %.*s\",",
      "917:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "918:     return size;",
      "919:    break;",
      "920:   default:",
      "921:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
      "922:     return size;",
      "923:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
      "924:     return size;",
      "925:    break;",
      "926:   }",
      "927:   return size;",
      "928:  }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "918: private int",
      "919: doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,",
      "921: {",
      "922:  Elf32_Shdr sh32;",
      "923:  Elf64_Shdr sh64;",
      "",
      "[Removed Lines]",
      "920:     size_t size, off_t fsize, int *flags, int mach, int strtab)",
      "",
      "[Added Lines]",
      "985:     size_t size, off_t fsize, int mach, int strtab, int *flags,",
      "986:     uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "994:     if (noff >= (off_t)xsh_size)",
      "995:      break;",
      "996:     noff = donote(ms, nbuf, (size_t)noff,",
      "998:     if (noff == 0)",
      "999:      break;",
      "1000:    }",
      "",
      "[Removed Lines]",
      "997:         xsh_size, clazz, swap, 4, flags);",
      "",
      "[Added Lines]",
      "1063:         xsh_size, clazz, swap, 4, flags, notecount);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1162: private int",
      "1163: dophn_exec(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
      "1165: {",
      "1166:  Elf32_Phdr ph32;",
      "1167:  Elf64_Phdr ph64;",
      "",
      "[Removed Lines]",
      "1164:     int num, size_t size, off_t fsize, int *flags, int sh_num)",
      "",
      "[Added Lines]",
      "1230:     int num, size_t size, off_t fsize, int sh_num, int *flags,",
      "1231:     uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1242:      break;",
      "1243:     offset = donote(ms, nbuf, offset,",
      "1244:         (size_t)bufsize, clazz, swap, align,",
      "1246:     if (offset == 0)",
      "1247:      break;",
      "1248:    }",
      "",
      "[Removed Lines]",
      "1245:         flags);",
      "",
      "[Added Lines]",
      "1312:         flags, notecount);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1277:  int flags = 0;",
      "1278:  Elf32_Ehdr elf32hdr;",
      "1279:  Elf64_Ehdr elf64hdr;",
      "1282:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
      "1283:   return 0;",
      "",
      "[Removed Lines]",
      "1280:  uint16_t type, phnum, shnum;",
      "",
      "[Added Lines]",
      "1347:  uint16_t type, phnum, shnum, notecount;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "27bdeefaa687bfeffd1a66b735c9f2aef609ff61",
      "candidate_info": {
        "commit_hash": "27bdeefaa687bfeffd1a66b735c9f2aef609ff61",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/27bdeefaa687bfeffd1a66b735c9f2aef609ff61",
        "files": [
          "src/apprentice.c"
        ],
        "message": "Be more strict about extra string parsing, and always report errors.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.213 2014/08/04 06:19:44 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.214 2014/08/04 06:48:22 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2123:  return -1;",
          "2124: }",
          "2126: private int",
          "2127: parse_extra(struct magic_set *ms, struct magic_entry *me, const char *line,",
          "2129: {",
          "2130:  size_t i;",
          "2131:  const char *l = line;",
          "",
          "[Removed Lines]",
          "2128:     off_t off, size_t len, const char *name, int nt)",
          "",
          "[Added Lines]",
          "2126: private int",
          "2127: goodchar(unsigned char x, const char *extra)",
          "2128: {",
          "2129:  return (isascii(x) && isalnum(x)) || strchr(extra, x);",
          "2130: }",
          "2134:     off_t off, size_t len, const char *name, const char *extra, int nt)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2146:  }",
          "2148:  EATAB;",
          "2152:   continue;",
          "2154:  if (i == len && *l) {",
          "",
          "[Removed Lines]",
          "2149:  for (i = 0; *l && ((isascii((unsigned char)*l) &&",
          "2150:      isalnum((unsigned char)*l)) || strchr(\"-+/.\", *l)) &&",
          "2151:      i < len; buf[i++] = *l++)",
          "",
          "[Added Lines]",
          "2155:  for (i = 0; *l && i < len && goodchar(*l, extra); buf[i++] = *l++)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2158:    file_magwarn(ms, \"%s type `%s' truncated %\"",
          "2159:        SIZE_T_FORMAT \"u\", name, line, i);",
          "2160:  } else {",
          "2161:   if (nt)",
          "2162:    buf[i] = '\\0';",
          "2163:  }",
          "2165:  if (i > 0)",
          "2166:   return 0;",
          "2169: }",
          "",
          "[Removed Lines]",
          "2167:  else",
          "2168:   return -1;",
          "",
          "[Added Lines]",
          "2165:   if (!isspace((unsigned char)*l) && !goodchar(*l, extra))",
          "2166:    file_magwarn(ms, \"%s type `%s' has bad char '%c'\",",
          "2167:        name, line, *l);",
          "2175:  file_magerror(ms, \"Bad magic entry '%s'\", line);",
          "2176:  return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2178:  struct magic *m = &me->mp[0];",
          "2180:  return parse_extra(ms, me, line, offsetof(struct magic, apple),",
          "2182: }",
          "",
          "[Removed Lines]",
          "2181:      sizeof(m->apple), \"APPLE\", 0);",
          "",
          "[Added Lines]",
          "2189:      sizeof(m->apple), \"APPLE\", \"!+-./\", 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2191:  struct magic *m = &me->mp[0];",
          "2193:  return parse_extra(ms, me, line, offsetof(struct magic, mimetype),",
          "2195: }",
          "2197: private int",
          "",
          "[Removed Lines]",
          "2194:      sizeof(m->mimetype), \"MIME\", 1);",
          "",
          "[Added Lines]",
          "2202:      sizeof(m->mimetype), \"MIME\", \"+-/.\", 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9190a18d09f25fb0ca6abe1fcbdba780f5077e45",
      "candidate_info": {
        "commit_hash": "9190a18d09f25fb0ca6abe1fcbdba780f5077e45",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9190a18d09f25fb0ca6abe1fcbdba780f5077e45",
        "files": [
          "ChangeLog",
          "TODO",
          "doc/file.man",
          "doc/libmagic.man",
          "magic/Magdir/jpeg",
          "magic/Magdir/mathematica",
          "src/apprentice.c",
          "src/ascmagic.c",
          "src/file.c",
          "src/file.h",
          "src/file_opts.h",
          "src/fsmagic.c",
          "src/is_tar.c",
          "src/readcdf.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "Add --extension",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/ascmagic.c||src/ascmagic.c",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/file_opts.h||src/file_opts.h",
          "src/fsmagic.c||src/fsmagic.c",
          "src/is_tar.c||src/is_tar.c",
          "src/readcdf.c||src/readcdf.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.c||src/file.c",
            "src/file.h||src/file.h",
            "src/file_opts.h||src/file_opts.h",
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.c||src/file.c",
            "src/file.h||src/file.h",
            "src/file_opts.h||src/file_opts.h",
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.230 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.231 2015/02/06 17:08:58 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: private int parse_mime(struct magic_set *, struct magic_entry *, const char *);",
          "150: private int parse_strength(struct magic_set *, struct magic_entry *, const char *);",
          "151: private int parse_apple(struct magic_set *, struct magic_entry *, const char *);",
          "154: private size_t magicsize = sizeof(struct magic);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: private int parse_ext(struct magic_set *, struct magic_entry *, const char *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163: #define DECLARE_FIELD(name) { # name, sizeof(# name) - 1, parse_ ## name }",
          "164:  DECLARE_FIELD(mime),",
          "165:  DECLARE_FIELD(apple),",
          "166:  DECLARE_FIELD(strength),",
          "167: #undef DECLARE_FIELD",
          "168:  { NULL, 0, NULL }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  DECLARE_FIELD(ext),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2254:      sizeof(m->apple), \"APPLE\", \"!+-./\", 0);",
          "2255: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2262: private int",
          "2263: parse_ext(struct magic_set *ms, struct magic_entry *me, const char *line)",
          "2264: {",
          "2265:  struct magic *m = &me->mp[0];",
          "2267:  return parse_extra(ms, me, line,",
          "2268:      CAST(off_t, offsetof(struct magic, ext)),",
          "2269:      sizeof(m->ext), \"EXTENSION\", \",!+-/\", 0);",
          "2270: }",
          "",
          "---------------"
        ],
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.90 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.91 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  const char *code_mime = NULL;",
          "80:  const char *type = NULL;",
          "83:   return 0;",
          "85:  nbytes = trim_nuls(buf, nbytes);",
          "",
          "[Removed Lines]",
          "82:  if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "82:  if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:  size_t last_line_end = (size_t)-1;",
          "124:  int has_long_lines = 0;",
          "127:   return 0;",
          "129:  nbytes = trim_nuls(buf, nbytes);",
          "",
          "[Removed Lines]",
          "126:  if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "126:  if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.161 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.162 2015/02/09 20:15:50 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: # define USAGE  \\",
          "77:     \"Usage: %s [\" FILE_FLAGS \\",
          "79:     \"            [-e testname] [-F separator] [-f namefile] [-m magicfiles] \" \\",
          "80:     \"file ...\\n\" \\",
          "81:     \"       %s -C [-m magicfiles]\\n\" \\",
          "",
          "[Removed Lines]",
          "78:  \"] [--apple] [--mime-encoding] [--mime-type]\\n\" \\",
          "",
          "[Added Lines]",
          "78:  \"] [--apple] [--extension] [--mime-encoding] [--mime-type]\\n\" \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:     flags |= MAGIC_APPLE;",
          "192:     break;",
          "193:    case 11:",
          "195:     break;",
          "196:    case 12:",
          "197:     flags |= MAGIC_MIME_ENCODING;",
          "198:     break;",
          "199:    }",
          "",
          "[Removed Lines]",
          "194:     flags |= MAGIC_MIME_TYPE;",
          "",
          "[Added Lines]",
          "194:     flags |= MAGIC_EXTENSION;",
          "197:     flags |= MAGIC_MIME_TYPE;",
          "198:     break;",
          "199:    case 13:",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: #define MAGICNO  0xF11E041C",
          "141: #define FILE_LOAD 0",
          "142: #define FILE_CHECK 1",
          "",
          "[Removed Lines]",
          "138: #define VERSIONNO 12",
          "139: #define FILE_MAGICSIZE 248",
          "",
          "[Added Lines]",
          "138: #define VERSIONNO 13",
          "139: #define FILE_MAGICSIZE 312",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311: };",
          "313: #define BIT(A)   (1 << (A))",
          "",
          "[Removed Lines]",
          "310:  char apple[8];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/file_opts.h||src/file_opts.h": [
          "File: src/file_opts.h -> src/file_opts.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: OPT('i', \"mime\", 0, \"                 output MIME type strings (--mime-type and\\n\"",
          "30:     \"                               --mime-encoding)\\n\")",
          "31: OPT_LONGONLY(\"apple\", 0, \"                output the Apple CREATOR/TYPE\\n\")",
          "32: OPT_LONGONLY(\"mime-type\", 0, \"            output the MIME type\\n\")",
          "33: OPT_LONGONLY(\"mime-encoding\", 0, \"        output the MIME encoding\\n\")",
          "34: OPT('k', \"keep-going\", 0, \"           don't stop at the first match\\n\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: OPT_LONGONLY(\"extension\", 0, \"            output a comma-separated list of extnsions\\n\")",
          "",
          "---------------"
        ],
        "src/fsmagic.c||src/fsmagic.c": [
          "File: src/fsmagic.c -> src/fsmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.74 2014/10/13 20:21:49 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.75 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:  struct stat tstatbuf;",
          "111: #endif",
          "114:   return 0;",
          "115:  if (fn == NULL)",
          "116:   return 0;",
          "",
          "[Removed Lines]",
          "113:  if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "113:  if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/is_tar.c||src/is_tar.c": [
          "File: src/is_tar.c -> src/is_tar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"file.h\"",
          "42: #ifndef lint",
          "44: #endif",
          "46: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.36 2009/02/03 20:27:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.37 2010/11/30 14:58:53 rrt Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  int tar;",
          "70:  int mime = ms->flags & MAGIC_MIME;",
          "73:   return 0;",
          "75:  tar = is_tar(buf, nbytes);",
          "",
          "[Removed Lines]",
          "72:  if ((ms->flags & MAGIC_APPLE) != 0)",
          "",
          "[Added Lines]",
          "72:  if ((ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION)) != 0)",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.51 2015/01/11 16:58:25 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.52 2015/02/27 21:16:38 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:         info.i_fd = fd;",
          "455:         info.i_buf = buf;",
          "456:         info.i_len = nbytes;",
          "458:                 return 0;",
          "459:         if (cdf_read_header(&info, &h) == -1)",
          "460:                 return 0;",
          "",
          "[Removed Lines]",
          "457:         if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "457:         if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.117 2014/12/16 23:29:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.118 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:  Elf64_Ehdr elf64hdr;",
          "1354:  uint16_t type, phnum, shnum, notecount;",
          "1357:   return 0;",
          "",
          "[Removed Lines]",
          "1356:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
          "",
          "[Added Lines]",
          "1356:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.212 2015/01/24 22:11:25 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.213 2015/02/14 18:43:12 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:  unsigned int cont_level = 0;",
          "152:  if (returnval == NULL)",
          "153:   returnval = &returnvalv;",
          "",
          "[Removed Lines]",
          "150:  int print = (ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0;",
          "",
          "[Added Lines]",
          "150:  int print = (ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION)) == 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1674:    return -1;",
          "1676:   if (rv == 1) {",
          "1678:        file_printf(ms, F(ms, m, \"%u\"), offset) == -1) {",
          "1679:     free(rbuf);",
          "1680:     return -1;",
          "",
          "[Removed Lines]",
          "1677:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
          "",
          "[Added Lines]",
          "1677:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION)) == 0 &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2136:    return -1;",
          "2137:   return 1;",
          "2138:  }",
          "2139:  if ((ms->flags & MAGIC_MIME_TYPE) && m->mimetype[0]) {",
          "2140:   if (file_printf(ms, \"%s\", m->mimetype) == -1)",
          "2141:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2139:  if (ms->flags & MAGIC_EXTENSION) {",
          "2140:   if (file_printf(ms, \"%s\", m->ext) == -1)",
          "2141:    return -1;",
          "2142:   return 1;",
          "2143:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e601116a8768fb35d48a706efb0d4533024697a",
      "candidate_info": {
        "commit_hash": "7e601116a8768fb35d48a706efb0d4533024697a",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/7e601116a8768fb35d48a706efb0d4533024697a",
        "files": [
          "src/apprentice.c"
        ],
        "message": "PR/479: check the format length modifiers.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.237 2015/09/11 17:24:09 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.238 2015/09/12 18:10:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: private void apprentice_unmap(struct magic_map *);",
          "144: private int apprentice_compile(struct magic_set *, struct magic_map *,",
          "145:     const char *);",
          "147: private int check_format(struct magic_set *, struct magic *);",
          "148: private int get_op(char);",
          "149: private int parse_mime(struct magic_set *, struct magic_entry *, const char *);",
          "",
          "[Removed Lines]",
          "146: private int check_format_type(const char *, int);",
          "",
          "[Added Lines]",
          "146: private int check_format_type(const char *, int, const char **);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2298: }",
          "2300: private int",
          "2302: {",
          "2303:  int quad = 0, h;",
          "2304:  if (*ptr == '\\0') {",
          "2306:   return -1;",
          "2307:  }",
          "",
          "[Removed Lines]",
          "2301: check_format_type(const char *ptr, int type)",
          "",
          "[Added Lines]",
          "2301: check_format_type(const char *ptr, int type, const char **estr)",
          "2304:  size_t len, cnt;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2339:    ptr++;",
          "2340:   if (*ptr == '.')",
          "2341:    ptr++;",
          "2343:   if (*ptr == '.')",
          "2344:    ptr++;",
          "2346:   if (quad) {",
          "2347:    if (*ptr++ != 'l')",
          "2349:    if (*ptr++ != 'l')",
          "2351:   }",
          "2353:   switch (*ptr++) {",
          "",
          "[Removed Lines]",
          "2342:   while (isdigit((unsigned char)*ptr)) ptr++;",
          "2345:   while (isdigit((unsigned char)*ptr)) ptr++;",
          "2348:     return -1;",
          "2350:     return -1;",
          "",
          "[Added Lines]",
          "2344: #define CHECKLEN() do { \\",
          "2345:  for (len = cnt = 0; isdigit((unsigned char)*ptr); ptr++, cnt++) \\",
          "2346:   len = len * 10 + (*ptr - '0'); \\",
          "2347:  if (cnt > 10 || len > 1024) \\",
          "2348:   goto toolong; \\",
          "2349: } while (/*CONSTCOND*/0)",
          "2351:   CHECKLEN();",
          "2354:   CHECKLEN();",
          "2357:     goto invalid;",
          "2359:     goto invalid;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2361:    case 'o':",
          "2362:    case 'x':",
          "2363:    case 'X':",
          "2365:    default:",
          "2367:    }",
          "",
          "[Removed Lines]",
          "2364:     return h != 0 ? -1 : 0;",
          "2366:     return -1;",
          "",
          "[Added Lines]",
          "2373:     if (h == 0)",
          "2374:      return 0;",
          "2377:     goto invalid;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2373:   case 'h':",
          "2374:    if (h-- <= 0)",
          "2376:    switch (*ptr++) {",
          "2377:    case 'h':",
          "2378:     if (h-- <= 0)",
          "2380:     switch (*ptr++) {",
          "2381:     case 'i':",
          "2382:     case 'd':",
          "",
          "[Removed Lines]",
          "2375:     return -1;",
          "2379:      return -1;",
          "",
          "[Added Lines]",
          "2386:     goto invalid;",
          "2390:      goto invalid;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2386:     case 'X':",
          "2387:      return 0;",
          "2388:     default:",
          "2390:     }",
          "2391:    case 'i':",
          "2392:    case 'd':",
          "",
          "[Removed Lines]",
          "2389:      return -1;",
          "",
          "[Added Lines]",
          "2400:      goto invalid;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2394:    case 'o':",
          "2395:    case 'x':",
          "2396:    case 'X':",
          "2398:    default:",
          "2400:    }",
          "2401: #endif",
          "2402:   case 'c':",
          "2404:   case 'i':",
          "2405:   case 'd':",
          "2406:   case 'u':",
          "",
          "[Removed Lines]",
          "2397:     return h != 0 ? -1 : 0;",
          "2399:     return -1;",
          "2403:    return h != 2 ? -1 : 0;",
          "",
          "[Added Lines]",
          "2408:     if (h == 0)",
          "2409:      return 0;",
          "2412:     goto invalid;",
          "2416:    if (h == 2)",
          "2417:     return 0;",
          "2418:    goto invalid;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2408:   case 'x':",
          "2409:   case 'X':",
          "2410: #ifdef STRICT_FORMAT",
          "2412: #else",
          "2413:    return 0;",
          "2414: #endif",
          "2415:   default:",
          "2417:   }",
          "2419:  case FILE_FMT_FLOAT:",
          "",
          "[Removed Lines]",
          "2411:    return h != 0 ? -1 : 0;",
          "2416:    return -1;",
          "",
          "[Added Lines]",
          "2426:    if (h == 0)",
          "2427:     return 0;",
          "2433:    goto invalid;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2422:    ptr++;",
          "2423:   if (*ptr == '.')",
          "2424:    ptr++;",
          "2426:   if (*ptr == '.')",
          "2427:    ptr++;",
          "2430:   switch (*ptr++) {",
          "2431:   case 'e':",
          "2432:   case 'E':",
          "",
          "[Removed Lines]",
          "2425:   while (isdigit((unsigned char)*ptr)) ptr++;",
          "2428:   while (isdigit((unsigned char)*ptr)) ptr++;",
          "",
          "[Added Lines]",
          "2442:   CHECKLEN();",
          "2445:   CHECKLEN();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2437:    return 0;",
          "2439:   default:",
          "2441:   }",
          "",
          "[Removed Lines]",
          "2440:    return -1;",
          "",
          "[Added Lines]",
          "2456:    goto invalid;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2456:   case 's':",
          "2457:    return 0;",
          "2458:   default:",
          "2460:   }",
          "2462:  default:",
          "2464:   abort();",
          "2465:  }",
          "2467:  return -1;",
          "2468: }",
          "",
          "[Removed Lines]",
          "2459:    return -1;",
          "",
          "[Added Lines]",
          "2475:    goto invalid;",
          "2482: invalid:",
          "2484: toolong:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2475: check_format(struct magic_set *ms, struct magic *m)",
          "2476: {",
          "2477:  char *ptr;",
          "2479:  for (ptr = m->desc; *ptr; ptr++)",
          "2480:   if (*ptr == '%')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2497:  const char *estr;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2498:  }",
          "2500:  ptr++;",
          "2508:       file_names[m->type], m->desc);",
          "2509:   return -1;",
          "2510:  }",
          "",
          "[Removed Lines]",
          "2501:  if (check_format_type(ptr, m->type) == -1) {",
          "2506:   file_magwarn(ms, \"Printf format `%c' is not valid for type \"",
          "2507:       \"`%s' in description `%s'\", *ptr ? *ptr : '?',",
          "",
          "[Added Lines]",
          "2521:  if (check_format_type(ptr, m->type, &estr) == -1) {",
          "2526:   file_magwarn(ms, \"Printf format is %s for type \"",
          "2527:       \"`%s' in description `%s'\", estr,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
      "candidate_info": {
        "commit_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4a284c89d6ef11aca34da65da7d673050a5ea320",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/android",
          "magic/Magdir/fortran",
          "magic/Magdir/graphviz",
          "magic/Magdir/marc21",
          "magic/Magdir/scientific",
          "magic/Magdir/troff",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "* Enforce limit of 8K on regex searches that have no limits * Allow the l modifier for regex to mean line count. Default   to byte count. If line count is specified, assume a max   of 80 characters per line to limit the byte count. * Don't allow conversions to be used for dates, allowing   the mask field to be used as an offset. * Bump the version of the magic format so that regex changes   are visible.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.h||src/file.h"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.h||src/file.h"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.209 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.210 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1382:  if ((ms->flags & MAGIC_CHECK) == 0)",
          "1383:   return 0;",
          "1386:   file_magwarn(ms,",
          "1387:       \"'/BHhLl' modifiers are only allowed for pascal strings\\n\");",
          "1388:   return -1;",
          "",
          "[Removed Lines]",
          "1385:  if (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0) {",
          "",
          "[Added Lines]",
          "1385:  if ((m->type != FILE_REGEX || (m->str_flags & REGEX_LINE_COUNT) == 0) &&",
          "1386:      (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1875:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1876:      break;",
          "1877:     case CHAR_PSTRING_4_LE:",
          "1879:       goto bad;",
          "1880:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1881:      break;",
          "1882:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "",
          "[Removed Lines]",
          "1878:      if (m->type != FILE_PSTRING)",
          "",
          "[Added Lines]",
          "1879:      switch (m->type) {",
          "1880:      case FILE_PSTRING:",
          "1881:      case FILE_REGEX:",
          "1882:       break;",
          "1883:      default:",
          "1885:      }",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: #define MAGICNO  0xF11E041C",
          "137: #define FILE_MAGICSIZE 248",
          "139: #define FILE_LOAD 0",
          "",
          "[Removed Lines]",
          "136: #define VERSIONNO 11",
          "",
          "[Added Lines]",
          "136: #define VERSIONNO 12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321: #define PSTRING_2_LE    BIT(9)",
          "322: #define PSTRING_4_BE    BIT(10)",
          "323: #define PSTRING_4_LE    BIT(11)",
          "324: #define PSTRING_LEN \\",
          "325:     (PSTRING_1_BE|PSTRING_2_LE|PSTRING_2_BE|PSTRING_4_LE|PSTRING_4_BE)",
          "326: #define PSTRING_LENGTH_INCLUDES_ITSELF  BIT(12)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: #define REGEX_LINE_COUNT   BIT(11)",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: private int32_t moffset(struct magic_set *, struct magic *);",
          "58: private void mdebug(uint32_t, const char *, size_t);",
          "59: private int mcopy(struct magic_set *, union VALUETYPE *, int, int,",
          "61: private int mconvert(struct magic_set *, struct magic *, int);",
          "62: private int print_sep(struct magic_set *, int);",
          "63: private int handle_annotation(struct magic_set *, struct magic *);",
          "",
          "[Removed Lines]",
          "60:     const unsigned char *, uint32_t, size_t, size_t);",
          "",
          "[Added Lines]",
          "60:     const unsigned char *, uint32_t, size_t, struct magic *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  case FILE_LEDATE:",
          "541:  case FILE_MEDATE:",
          "542:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "544:    return -1;",
          "545:   t = ms->offset + sizeof(uint32_t);",
          "546:   break;",
          "",
          "[Removed Lines]",
          "543:       file_fmttime(p->l, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "543:       file_fmttime(p->l + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:  case FILE_LELDATE:",
          "551:  case FILE_MELDATE:",
          "552:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "554:    return -1;",
          "555:   t = ms->offset + sizeof(uint32_t);",
          "556:   break;",
          "",
          "[Removed Lines]",
          "553:       file_fmttime(p->l, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "553:       file_fmttime(p->l + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559:  case FILE_BEQDATE:",
          "560:  case FILE_LEQDATE:",
          "561:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "563:    return -1;",
          "564:   t = ms->offset + sizeof(uint64_t);",
          "565:   break;",
          "",
          "[Removed Lines]",
          "562:       file_fmttime(p->q, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "562:       file_fmttime(p->q + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:  case FILE_BEQLDATE:",
          "569:  case FILE_LEQLDATE:",
          "570:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "572:    return -1;",
          "573:   t = ms->offset + sizeof(uint64_t);",
          "574:   break;",
          "",
          "[Removed Lines]",
          "571:       file_fmttime(p->q, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "571:       file_fmttime(p->q + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "577:  case FILE_BEQWDATE:",
          "578:  case FILE_LEQWDATE:",
          "579:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "581:    return -1;",
          "582:   t = ms->offset + sizeof(uint64_t);",
          "583:   break;",
          "",
          "[Removed Lines]",
          "580:       file_fmttime(p->q, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "580:       file_fmttime(p->q + m->num_mask, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "912: mconvert(struct magic_set *ms, struct magic *m, int flip)",
          "913: {",
          "914:  union VALUETYPE *p = &ms->ms_value;",
          "917:  case FILE_BYTE:",
          "918:   cvt_8(p, m);",
          "919:   return 1;",
          "",
          "[Removed Lines]",
          "916:  switch (cvt_flip(m->type, flip)) {",
          "",
          "[Added Lines]",
          "915:  uint8_t type;",
          "917:  switch (type = cvt_flip(m->type, flip)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "957:  case FILE_BELDATE:",
          "958:   p->l = (int32_t)",
          "959:       ((p->hl[0]<<24)|(p->hl[1]<<16)|(p->hl[2]<<8)|(p->hl[3]));",
          "961:   return 1;",
          "962:  case FILE_BEQUAD:",
          "963:  case FILE_BEQDATE:",
          "",
          "[Removed Lines]",
          "960:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "961:   if (type == FILE_BELONG)",
          "962:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "968:        ((uint64_t)p->hq[2]<<40)|((uint64_t)p->hq[3]<<32)|",
          "969:        ((uint64_t)p->hq[4]<<24)|((uint64_t)p->hq[5]<<16)|",
          "970:        ((uint64_t)p->hq[6]<<8)|((uint64_t)p->hq[7]));",
          "972:   return 1;",
          "973:  case FILE_LESHORT:",
          "974:   p->h = (short)((p->hs[1]<<8)|(p->hs[0]));",
          "",
          "[Removed Lines]",
          "971:   cvt_64(p, m);",
          "",
          "[Added Lines]",
          "973:   if (type == FILE_BEQUAD)",
          "974:    cvt_64(p, m);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "979:  case FILE_LELDATE:",
          "980:   p->l = (int32_t)",
          "981:       ((p->hl[3]<<24)|(p->hl[2]<<16)|(p->hl[1]<<8)|(p->hl[0]));",
          "983:   return 1;",
          "984:  case FILE_LEQUAD:",
          "985:  case FILE_LEQDATE:",
          "",
          "[Removed Lines]",
          "982:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "985:   if (type == FILE_LELONG)",
          "986:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "990:        ((uint64_t)p->hq[5]<<40)|((uint64_t)p->hq[4]<<32)|",
          "991:        ((uint64_t)p->hq[3]<<24)|((uint64_t)p->hq[2]<<16)|",
          "992:        ((uint64_t)p->hq[1]<<8)|((uint64_t)p->hq[0]));",
          "994:   return 1;",
          "995:  case FILE_MELONG:",
          "996:  case FILE_MEDATE:",
          "997:  case FILE_MELDATE:",
          "998:   p->l = (int32_t)",
          "999:       ((p->hl[1]<<24)|(p->hl[0]<<16)|(p->hl[3]<<8)|(p->hl[2]));",
          "1001:   return 1;",
          "1002:  case FILE_FLOAT:",
          "1003:   cvt_float(p, m);",
          "",
          "[Removed Lines]",
          "993:   cvt_64(p, m);",
          "1000:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "997:   if (type == FILE_LEQUAD)",
          "998:    cvt_64(p, m);",
          "1005:   if (type == FILE_MELONG)",
          "1006:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1055: private int",
          "1056: mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,",
          "1058: {",
          "",
          "[Removed Lines]",
          "1057:     const unsigned char *s, uint32_t offset, size_t nbytes, size_t linecnt)",
          "",
          "[Added Lines]",
          "1063:     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1076:    const char *end;",
          "1079:    if (s == NULL) {",
          "1080:     ms->search.s_len = 0;",
          "1081:     ms->search.s = NULL;",
          "1082:     return 0;",
          "1083:    }",
          "1084:    buf = RCAST(const char *, s) + offset;",
          "1087:    for (lines = linecnt, b = buf; lines && b < end &&",
          "1088:         ((b = CAST(const char *,",
          "",
          "[Removed Lines]",
          "1077:    size_t lines;",
          "1085:    end = last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1083:    size_t lines, linecnt, bytecnt;",
          "1091:    if (m->str_flags & REGEX_LINE_COUNT) {",
          "1092:     linecnt = m->str_range;",
          "1093:     bytecnt = linecnt * 80;",
          "1094:    } else {",
          "1095:     linecnt = 0;",
          "1096:     bytecnt = m->str_range;",
          "1097:    }",
          "1099:    if (bytecnt == 0)",
          "1100:     bytecnt = 8192;",
          "1101:    if (bytecnt > nbytes)",
          "1102:     bytecnt = nbytes;",
          "1105:    end = last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1095:      b++;",
          "1096:    }",
          "1097:    if (lines)",
          "1100:    ms->search.s = buf;",
          "1101:    ms->search.s_len = last - buf;",
          "",
          "[Removed Lines]",
          "1098:     last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1118:     last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1166:     int *need_separator, int *returnval)",
          "1167: {",
          "1168:  uint32_t soffset, offset = ms->offset;",
          "1170:  uint32_t lhs;",
          "1171:  int rv, oneed_separator, in_type;",
          "1172:  char *sbuf, *rbuf;",
          "",
          "[Removed Lines]",
          "1169:  uint32_t count = m->str_range;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1179:  }",
          "1181:  if (mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),",
          "1183:   return -1;",
          "1185:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1186:   fprintf(stderr, \"mget(type=%d, flag=%x, offset=%u, o=%zu, \"",
          "1189:   mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));",
          "1190: #ifndef COMPILE_ONLY",
          "1191:   file_mdump(m);",
          "",
          "[Removed Lines]",
          "1182:      (uint32_t)nbytes, count) == -1)",
          "1187:       \"nbytes=%zu, count=%u)\\n\", m->type, m->flag, offset, o,",
          "1188:       nbytes, count);",
          "",
          "[Added Lines]",
          "1201:      (uint32_t)nbytes, m) == -1)",
          "1206:       \"nbytes=%zu)\\n\", m->type, m->flag, offset, o, nbytes);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1550:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1551:     fprintf(stderr, \"indirect +offs=%u\\n\", offset);",
          "1552:   }",
          "1554:    return -1;",
          "1555:   ms->offset = offset;",
          "",
          "[Removed Lines]",
          "1553:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, count) == -1)",
          "",
          "[Added Lines]",
          "1571:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, m) == -1)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1906:    if (slen + idx > ms->search.s_len)",
          "1907:     break;",
          "1911:     ms->search.offset += idx;",
          "1912:     break;",
          "",
          "[Removed Lines]",
          "1909:    v = file_strncmp(m->value.s, ms->search.s + idx, slen, m->str_flags);",
          "",
          "[Added Lines]",
          "1927:    v = file_strncmp(m->value.s, ms->search.s + idx, slen,",
          "1928:        m->str_flags);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1929:    file_regerror(&rx, rc, ms);",
          "1930:    v = (uint64_t)-1;",
          "1931:   } else {",
          "1935:    regmatch_t pmatch[1];",
          "1936:    size_t slen = ms->search.s_len;",
          "1940: #ifndef REG_STARTEND",
          "1941: #define REG_STARTEND 0",
          "1942:    if (slen != 0)",
          "1943:     slen--;",
          "1944:    c = ms->search.s[slen];",
          "",
          "[Removed Lines]",
          "1932: #ifndef REG_STARTEND",
          "1933:    char c;",
          "1934: #endif",
          "1938:    if (m->str_range > 0)",
          "1939:     slen = MIN(slen, m->str_range);",
          "",
          "[Added Lines]",
          "1955:    char c;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
      "candidate_info": {
        "commit_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "files": [
          "ChangeLog",
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "* change printable -> file_printable and use it in more places for safety * in ELF, instead of \"(uses dynamic libraries)\" when PT_INTERP   is present print the interpreter name.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/file.h||src/file.h",
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/file.h||src/file.h",
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     size_t *);",
          "477: protected size_t file_pstring_length_size(const struct magic *);",
          "478: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "479: #ifdef __EMX__",
          "480: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "481:     size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: protected char * file_printable(char *, size_t, const char *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.76 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: protected char *",
          "539: file_printable(char *buf, size_t bufsiz, const char *str)",
          "540: {",
          "541:  char *ptr, *eptr;",
          "542:  const unsigned char *s = (const unsigned char *)str;",
          "544:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "545:   if (isprint(*s)) {",
          "547:    continue;",
          "548:   }",
          "549:   if (ptr >= eptr + 4)",
          "550:    break;",
          "555:  }",
          "557:  return buf;",
          "558: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "493:  if (xnh_sizeof + offset > size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:    if (file_printf(ms, \", from '%.31s'\",",
          "742:     return size;",
          "",
          "[Removed Lines]",
          "741:        &nbuf[doff + 0x7c]) == -1)",
          "",
          "[Added Lines]",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  Elf32_Phdr ph32;",
          "1164:  Elf64_Phdr ph64;",
          "1165:  const char *linking_style = \"statically\";",
          "1167:  unsigned char nbuf[BUFSIZ];",
          "1168:  ssize_t bufsize;",
          "1169:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1166:  const char *shared_libraries = \"\";",
          "",
          "[Added Lines]",
          "1168:  const char *interp = \"\";",
          "1170:  char ibuf[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1181:   }",
          "1183:   off += size;",
          "1186:   switch (xph_type) {",
          "1187:   case PT_DYNAMIC:",
          "1188:    linking_style = \"dynamically\";",
          "1189:    break;",
          "1190:   case PT_INTERP:",
          "1192:    break;",
          "1193:   default:",
          "1194:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "",
          "[Removed Lines]",
          "1191:    shared_libraries = \" (uses shared libs)\";",
          "",
          "[Added Lines]",
          "1187:   bufsize = 0;",
          "1188:   align = 4;",
          "1195:   case PT_NOTE:",
          "1197:     continue;",
          "1198:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1199:        align < 4) {",
          "1200:     if (file_printf(ms,",
          "1201:         \", invalid note alignment 0x%lx\",",
          "1202:         (unsigned long)align) == -1)",
          "1203:      return -1;",
          "1204:     align = 4;",
          "1205:    }",
          "1208:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1209:        : sizeof(nbuf);",
          "1210:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1211:    if (bufsize == -1) {",
          "1212:     file_badread(ms);",
          "1213:     return -1;",
          "1214:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1202:   switch (xph_type) {",
          "1211:    }",
          "1225:    offset = 0;",
          "1226:    for (;;) {",
          "1227:     if (offset >= (size_t)bufsize)",
          "",
          "[Removed Lines]",
          "1203:   case PT_NOTE:",
          "1204:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1205:        align < 4) {",
          "1206:     if (file_printf(ms,",
          "1207:         \", invalid note alignment 0x%lx\",",
          "1208:         (unsigned long)align) == -1)",
          "1209:      return -1;",
          "1210:     align = 4;",
          "1212:    if (sh_num)",
          "1213:     break;",
          "1218:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1219:        : sizeof(nbuf);",
          "1220:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1221:    if (bufsize == -1) {",
          "1222:     file_badread(ms);",
          "1223:     return -1;",
          "1224:    }",
          "",
          "[Added Lines]",
          "1226:   case PT_INTERP:",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1237:    break;",
          "1238:   }",
          "1239:  }",
          "1241:      == -1)",
          "1243:  return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1240:  if (file_printf(ms, \", %s linked%s\", linking_style, shared_libraries)",
          "1242:      return -1;",
          "",
          "[Added Lines]",
          "1252:  if (file_printf(ms, \", %s linked\", linking_style)",
          "1254:   return -1;",
          "1255:  if (interp[0])",
          "1256:   if (file_printf(ms, \", interpreter %s\",",
          "1257:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "1258:    return -1;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.202 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: }",
          "429: private int32_t",
          "430: mprint(struct magic_set *ms, struct magic *m)",
          "431: {",
          "",
          "[Removed Lines]",
          "407: static char *",
          "408: printable(char *buf, size_t bufsiz, const char *str)",
          "409: {",
          "410:  char *ptr, *eptr;",
          "411:  const unsigned char *s = (const unsigned char *)str;",
          "413:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "414:   if (isprint(*s)) {",
          "416:    continue;",
          "417:   }",
          "418:   if (ptr >= eptr + 4)",
          "419:    break;",
          "424:  }",
          "426:  return buf;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  float vf;",
          "434:  double vd;",
          "435:  int64_t t = 0;",
          "437:  union VALUETYPE *p = &ms->ms_value;",
          "439:    switch (m->type) {",
          "",
          "[Removed Lines]",
          "436:   char buf[128], tbuf[26];",
          "",
          "[Added Lines]",
          "414:   char buf[128], tbuf[26], sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:    case FILE_BESTRING16:",
          "528:    case FILE_LESTRING16:",
          "529:   if (m->reln == '=' || m->reln == '!') {",
          "531:     return -1;",
          "532:    t = ms->offset + m->vallen;",
          "533:   }",
          "534:   else {",
          "536:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "530:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "535:    char sbuf[512];",
          "",
          "[Added Lines]",
          "508:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "509:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "510:        == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "555:    }",
          "557:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "559:     return -1;",
          "561:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "558:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "537:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:    file_oomem(ms, ms->search.rm_len);",
          "660:    return -1;",
          "661:   }",
          "663:   free(cp);",
          "665:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "662:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "641:   rval = file_printf(ms, F(ms, m, \"%s\"),",
          "642:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:  }",
          "675:  case FILE_SEARCH:",
          "677:    return -1;",
          "678:   if ((m->str_flags & REGEX_OFFSET_START))",
          "679:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "676:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}