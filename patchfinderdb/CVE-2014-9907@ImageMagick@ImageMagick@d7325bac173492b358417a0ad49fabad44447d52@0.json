{
  "cve_id": "CVE-2014-9907",
  "cve_desc": "coders/dds.c in ImageMagick allows remote attackers to cause a denial of service via a crafted DDS file.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "d7325bac173492b358417a0ad49fabad44447d52",
  "patch_info": {
    "commit_hash": "d7325bac173492b358417a0ad49fabad44447d52",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/d7325bac173492b358417a0ad49fabad44447d52",
    "files": [
      "coders/dds.c"
    ],
    "message": "Added extra EOF check and some minor refactoring.",
    "before_after_code_files": [
      "coders/dds.c||coders/dds.c"
    ]
  },
  "patch_diff": {
    "coders/dds.c||coders/dds.c": [
      "File: coders/dds.c -> coders/dds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "726: #define FixRange(min, max, steps) \\",
      "727: if (min > max) \\",
      "728:   min = max; \\",
      "730:   max = Min(min + steps, 255); \\",
      "732:   min = Max(min - steps, 0)",
      "734: #define Dot(left, right) (left.x*right.x) + (left.y*right.y) + (left.z*right.z)",
      "",
      "[Removed Lines]",
      "729: if (max - min < steps) \\",
      "731: if (max - min < steps) \\",
      "",
      "[Added Lines]",
      "729: if (max - min < steps) \\",
      "731: if (max - min < steps) \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "744:   Forward declarations",
      "785:     const MagickBooleanType, ExceptionInfo *);",
      "830: }",
      "832: static inline void VectorAdd(const DDSVector4 left, const DDSVector4 right,",
      "",
      "[Removed Lines]",
      "746: static MagickBooleanType",
      "747:   ConstructOrdering(const size_t, const DDSVector4 *, const DDSVector3,",
      "748:     DDSVector4 *, DDSVector4 *, unsigned char *, size_t);",
      "750: static MagickBooleanType",
      "751:   ReadDDSInfo(Image *, DDSInfo *);",
      "753: static MagickBooleanType",
      "754:   ReadDXT1(Image *, DDSInfo *, ExceptionInfo *);",
      "756: static MagickBooleanType",
      "757:   ReadDXT3(Image *, DDSInfo *, ExceptionInfo *);",
      "759: static MagickBooleanType",
      "760:   ReadDXT5(Image *, DDSInfo *, ExceptionInfo *);",
      "762: static MagickBooleanType",
      "763:   ReadUncompressedRGB(Image *, DDSInfo *, ExceptionInfo *);",
      "765: static MagickBooleanType",
      "766:   ReadUncompressedRGBA(Image *, DDSInfo *, ExceptionInfo *);",
      "768: static void",
      "769:   RemapIndices(const ssize_t *, const unsigned char *, unsigned char *);",
      "771: static void",
      "772:   SkipDXTMipmaps(Image *, DDSInfo *, int);",
      "774: static void",
      "775:   SkipRGBMipmaps(Image *, DDSInfo *, int);",
      "777: static",
      "778:   MagickBooleanType WriteDDSImage(const ImageInfo *, Image *);",
      "780: static void",
      "781:   WriteDDSInfo(Image *, const size_t, const size_t, const size_t);",
      "783: static void",
      "784:   WriteFourCC(Image *, const size_t, const MagickBooleanType,",
      "787: static void",
      "788:   WriteImageData(Image *, const size_t, const size_t, const MagickBooleanType,",
      "789:     const MagickBooleanType, ExceptionInfo *);",
      "791: static void",
      "792:   WriteIndices(Image *, const DDSVector3, const DDSVector3, unsigned char *);",
      "794: static MagickBooleanType",
      "795:   WriteMipmaps(Image *, const size_t, const size_t, const size_t,",
      "796:     const MagickBooleanType, const MagickBooleanType, ExceptionInfo *);",
      "798: static void",
      "799:   WriteSingleColorFit(Image *, const DDSVector4 *, const ssize_t *);",
      "801: static void",
      "802:   WriteUncompressed(Image *, ExceptionInfo *);",
      "804: static inline size_t Max(size_t one, size_t two)",
      "805: {",
      "806:   if (one > two)",
      "807:     return one;",
      "808:   return two;",
      "809: }",
      "811: static inline float MaxF(float one, float two)",
      "812: {",
      "813:   if (one > two)",
      "814:     return one;",
      "815:   return two;",
      "816: }",
      "818: static inline size_t Min(size_t one, size_t two)",
      "819: {",
      "820:   if (one < two)",
      "821:     return one;",
      "822:   return two;",
      "823: }",
      "825: static inline float MinF(float one, float two)",
      "826: {",
      "827:   if (one < two)",
      "828:     return one;",
      "829:   return two;",
      "",
      "[Added Lines]",
      "746: static MagickBooleanType",
      "747:   ConstructOrdering(const size_t,const DDSVector4 *,const DDSVector3,",
      "748:     DDSVector4 *,DDSVector4 *,unsigned char *,size_t),",
      "749:   ReadDDSInfo(Image *,DDSInfo *),",
      "750:   ReadDXT1(Image *,DDSInfo *,ExceptionInfo *),",
      "751:   ReadDXT3(Image *,DDSInfo *,ExceptionInfo *),",
      "752:   ReadDXT5(Image *,DDSInfo *,ExceptionInfo *),",
      "753:   ReadUncompressedRGB(Image *,DDSInfo *,ExceptionInfo *),",
      "754:   ReadUncompressedRGBA(Image *,DDSInfo *,ExceptionInfo *),",
      "755:   SkipDXTMipmaps(Image *,DDSInfo *,int,ExceptionInfo *),",
      "756:   SkipRGBMipmaps(Image *,DDSInfo *,int,ExceptionInfo *),",
      "757:   WriteDDSImage(const ImageInfo *,Image *),",
      "758:   WriteMipmaps(Image *,const size_t,const size_t,const size_t,",
      "761: static void",
      "762:   RemapIndices(const ssize_t *,const unsigned char *,unsigned char *),",
      "763:   WriteDDSInfo(Image *,const size_t,const size_t,const size_t),",
      "764:   WriteFourCC(Image *,const size_t,const MagickBooleanType,",
      "765:     const MagickBooleanType,ExceptionInfo *),",
      "766:   WriteImageData(Image *,const size_t,const size_t,const MagickBooleanType,",
      "767:     const MagickBooleanType,ExceptionInfo *),",
      "768:   WriteIndices(Image *,const DDSVector3,const DDSVector3, unsigned char *),",
      "769:   WriteSingleColorFit(Image *,const DDSVector4 *,const ssize_t *),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "839: }",
      "841: static inline void VectorClamp(DDSVector4 *value)",
      "846:   value->w = MinF(1.0f,MaxF(0.0f,value->w));",
      "847: }",
      "849: static inline void VectorClamp3(DDSVector3 *value)",
      "853:   value->z = MinF(1.0f,MaxF(0.0f,value->z));",
      "854: }",
      "",
      "[Removed Lines]",
      "842: {",
      "843:   value->x = MinF(1.0f,MaxF(0.0f,value->x));",
      "844:   value->y = MinF(1.0f,MaxF(0.0f,value->y));",
      "845:   value->z = MinF(1.0f,MaxF(0.0f,value->z));",
      "850: {",
      "851:   value->x = MinF(1.0f,MaxF(0.0f,value->x));",
      "852:   value->y = MinF(1.0f,MaxF(0.0f,value->y));",
      "",
      "[Added Lines]",
      "782: {",
      "783:   value->x = MagickMin(1.0f,MagickMax(0.0f,value->x));",
      "784:   value->y = MagickMin(1.0f,MagickMax(0.0f,value->y));",
      "785:   value->z = MagickMin(1.0f,MagickMax(0.0f,value->z));",
      "790: {",
      "791:   value->x = MagickMin(1.0f,MagickMax(0.0f,value->x));",
      "792:   value->y = MagickMin(1.0f,MagickMax(0.0f,value->y));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1474:     w.y = (row2.y * v.z) + w.y;",
      "1475:     w.z = (row2.z * v.z) + w.z;",
      "1476:     w.w = (row2.w * v.z) + w.w;",
      "1478:     a = 1.0f / MaxF(w.x,MaxF(w.y,w.z));",
      "1480:     v.x = w.x * a;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1961:   {",
      "1962:     for (x = 0; x < (ssize_t) dds_info->width; x += 4)",
      "1963:     {",
      "1966:         Min(4, dds_info->height - y),exception);",
      "1968:       if (q == (PixelPacket *) NULL)",
      "",
      "[Removed Lines]",
      "1965:       q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),",
      "",
      "[Added Lines]",
      "1905:       q = QueueAuthenticPixels(image, x, y, MagickMin(4, dds_info->width - x),",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1999:         return MagickFalse;",
      "2000:     }",
      "2001:   }",
      "2005:   return MagickTrue;",
      "2006: }",
      "",
      "[Removed Lines]",
      "2003:   SkipDXTMipmaps(image, dds_info, 8);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2039:   {",
      "2040:     for (x = 0; x < (ssize_t) dds_info->width; x += 4)",
      "2041:     {",
      "2044:                          Min(4, dds_info->height - y),exception);",
      "2046:       if (q == (PixelPacket *) NULL)",
      "",
      "[Removed Lines]",
      "2043:       q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),",
      "",
      "[Added Lines]",
      "1981:       q = QueueAuthenticPixels(image, x, y, MagickMin(4, dds_info->width - x),",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2086:         return MagickFalse;",
      "2087:     }",
      "2088:   }",
      "2092:   return MagickTrue;",
      "2093: }",
      "",
      "[Removed Lines]",
      "2090:   SkipDXTMipmaps(image, dds_info, 16);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2130:   {",
      "2131:     for (x = 0; x < (ssize_t) dds_info->width; x += 4)",
      "2132:     {",
      "2135:                          Min(4, dds_info->height - y),exception);",
      "2137:       if (q == (PixelPacket *) NULL)",
      "",
      "[Removed Lines]",
      "2134:       q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),",
      "",
      "[Added Lines]",
      "2070:       q = QueueAuthenticPixels(image, x, y, MagickMin(4, dds_info->width - x),",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2187:         return MagickFalse;",
      "2188:     }",
      "2189:   }",
      "2193:   return MagickTrue;",
      "2194: }",
      "",
      "[Removed Lines]",
      "2191:   SkipDXTMipmaps(image, dds_info, 16);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2251:     if (SyncAuthenticPixels(image,exception) == MagickFalse)",
      "2252:       return MagickFalse;",
      "2253:   }",
      "2257:   return MagickTrue;",
      "2258: }",
      "",
      "[Removed Lines]",
      "2255:   SkipRGBMipmaps(image, dds_info, 3);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2345:     if (SyncAuthenticPixels(image,exception) == MagickFalse)",
      "2346:       return MagickFalse;",
      "2347:   }",
      "2351:   return MagickTrue;",
      "2352: }",
      "",
      "[Removed Lines]",
      "2349:   SkipRGBMipmaps(image, dds_info, 4);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2423: }",
      "2428: static void SkipDXTMipmaps(Image *image, DDSInfo *dds_info, int texel_size)",
      "2429: {",
      "",
      "[Removed Lines]",
      "2426:   Skip the mipmap images for compressed (DXTn) dds files",
      "",
      "[Added Lines]",
      "2356:   Skip the mipmap images for compressed (DXTn) dds files",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2443:   if (dds_info->ddscaps1 & DDSCAPS_MIPMAP",
      "2444:       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE",
      "2445:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
      "2446:     {",
      "2447:       w = DIV2(dds_info->width);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2376:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
      "2377:     {",
      "2378:       if (EOFBlob(image) != MagickFalse)",
      "2379:         {",
      "2380:           ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",",
      "2381:             image->filename);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2458:         w = DIV2(w);",
      "2459:         h = DIV2(h);",
      "2460:       }",
      "2461:     }",
      "2462: }",
      "2467: static void SkipRGBMipmaps(Image *image, DDSInfo *dds_info, int pixel_size)",
      "2468: {",
      "",
      "[Removed Lines]",
      "2465:   Skip the mipmap images for uncompressed (RGB or RGBA) dds files",
      "",
      "[Added Lines]",
      "2397:       }",
      "2403:   Skip the mipmap images for uncompressed (RGB or RGBA) dds files",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2482:   if (dds_info->ddscaps1 & DDSCAPS_MIPMAP",
      "2483:       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE",
      "2484:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
      "2485:     {",
      "2486:       w = DIV2(dds_info->width);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2423:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
      "2424:     {",
      "2425:       if (EOFBlob(image) != MagickFalse)",
      "2426:         {",
      "2427:           ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",",
      "2428:             image->filename);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2497:         w = DIV2(w);",
      "2498:         h = DIV2(h);",
      "2499:       }",
      "2500:     }",
      "2501: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2444:       }",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2779:   (void) WriteBlobLSBLong(image,(unsigned int) image->rows);",
      "2780:   (void) WriteBlobLSBLong(image,(unsigned int) image->columns);",
      "2783:     (void) WriteBlobLSBLong(image,",
      "2784:              (unsigned int) (Max(1,(image->columns+3)/4) * 8));",
      "2786:     (void) WriteBlobLSBLong(image,",
      "2787:              (unsigned int) (Max(1,(image->columns+3)/4) * 16));",
      "",
      "[Removed Lines]",
      "2782:   if (compression == FOURCC_DXT1)",
      "2785:   else",
      "",
      "[Added Lines]",
      "2728:   if (compression == FOURCC_DXT1)",
      "2731:   else",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee6b4cb86fe4b5c2aabb40f50905be6bb04c5f56",
      "candidate_info": {
        "commit_hash": "ee6b4cb86fe4b5c2aabb40f50905be6bb04c5f56",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/ee6b4cb86fe4b5c2aabb40f50905be6bb04c5f56",
        "files": [
          "coders/dds.c"
        ],
        "message": "Added extra EOF check and some minor refactoring.",
        "before_after_code_files": [
          "coders/dds.c||coders/dds.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "coders/dds.c||coders/dds.c"
          ],
          "candidate": [
            "coders/dds.c||coders/dds.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/dds.c||coders/dds.c": [
          "File: coders/dds.c -> coders/dds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "727: #define FixRange(min, max, steps) \\",
          "728: if (min > max) \\",
          "730: if (max - min < steps) \\",
          "732: if (max - min < steps) \\",
          "733:   min = Max(min - steps, 0)",
          "",
          "[Removed Lines]",
          "729:   min = max; \\",
          "731:   max = Min(min + steps, 255); \\",
          "",
          "[Added Lines]",
          "729:   min = max; \\",
          "731:   max = MagickMin(min + steps, 255); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739: #define VectorInit3(vector, value) vector.x = vector.y = vector.z = value",
          "741: #define IsBitMask(mask, r, g, b, a) (mask.r_bitmask == r && mask.g_bitmask == \\",
          "742:   g && mask.b_bitmask == b && mask.alpha_bitmask == a)",
          "745:   Forward declarations",
          "803: static void",
          "804:   WriteSingleColorFit(Image *, const DDSVector4 *, const ssize_t *);",
          "834:   return two;",
          "835: }",
          "",
          "[Removed Lines]",
          "747: static MagickBooleanType",
          "748:   ConstructOrdering(const size_t, const DDSVector4 *, const DDSVector3,",
          "749:   DDSVector4 *, DDSVector4 *, unsigned char *, size_t);",
          "751: static MagickBooleanType",
          "752:   ReadDDSInfo(Image *, DDSInfo *);",
          "754: static void",
          "755:   CalculateColors(unsigned short, unsigned short,",
          "756:     DDSColors *, MagickBooleanType);",
          "758: static MagickBooleanType",
          "759:   ReadDXT1(Image *, DDSInfo *, ExceptionInfo *);",
          "761: static MagickBooleanType",
          "762:   ReadDXT3(Image *, DDSInfo *, ExceptionInfo *);",
          "764: static MagickBooleanType",
          "765:   ReadDXT5(Image *, DDSInfo *, ExceptionInfo *);",
          "767: static MagickBooleanType",
          "768:   ReadUncompressedRGB(Image *, DDSInfo *, ExceptionInfo *);",
          "770: static MagickBooleanType",
          "771:   ReadUncompressedRGBA(Image *, DDSInfo *, ExceptionInfo *);",
          "773: static void",
          "774:   RemapIndices(const ssize_t *, const unsigned char *, unsigned char *);",
          "776: static void",
          "777:   SkipDXTMipmaps(Image *, DDSInfo *, int);",
          "779: static void",
          "780:   SkipRGBMipmaps(Image *, DDSInfo *, int);",
          "782: static",
          "783:   MagickBooleanType WriteDDSImage(const ImageInfo *, Image *, ExceptionInfo *);",
          "785: static void",
          "786:   WriteDDSInfo(Image *, const size_t, const size_t, const size_t);",
          "788: static void",
          "789:   WriteFourCC(Image *, const size_t, const MagickBooleanType,",
          "790:     const MagickBooleanType, ExceptionInfo *);",
          "792: static void",
          "793:   WriteImageData(Image *, const size_t, const size_t, const MagickBooleanType,",
          "794:   const MagickBooleanType, ExceptionInfo *);",
          "796: static void",
          "797:   WriteIndices(Image *, const DDSVector3, const DDSVector3, unsigned char *);",
          "799: static MagickBooleanType",
          "800:   WriteMipmaps(Image *, const size_t, const size_t, const size_t,",
          "801:     const MagickBooleanType, const MagickBooleanType, ExceptionInfo *);",
          "806: static void",
          "807:   WriteUncompressed(Image *, ExceptionInfo *);",
          "809: static inline size_t Max(size_t one, size_t two)",
          "810: {",
          "811:   if (one > two)",
          "812:     return one;",
          "813:   return two;",
          "814: }",
          "816: static inline float MaxF(float one, float two)",
          "817: {",
          "818:   if (one > two)",
          "819:     return one;",
          "820:   return two;",
          "821: }",
          "823: static inline size_t Min(size_t one, size_t two)",
          "824: {",
          "825:   if (one < two)",
          "826:     return one;",
          "827:   return two;",
          "828: }",
          "830: static inline float MinF(float one, float two)",
          "831: {",
          "832:   if (one < two)",
          "833:     return one;",
          "",
          "[Added Lines]",
          "750: static MagickBooleanType",
          "751:   ConstructOrdering(const size_t,const DDSVector4 *,const DDSVector3,",
          "752:     DDSVector4 *, DDSVector4 *, unsigned char *, size_t),",
          "753:   ReadDDSInfo(Image *,DDSInfo *),",
          "754:   ReadDXT1(Image *,DDSInfo *,ExceptionInfo *),",
          "755:   ReadDXT3(Image *,DDSInfo *,ExceptionInfo *),",
          "756:   ReadDXT5(Image *,DDSInfo *,ExceptionInfo *),",
          "757:   ReadUncompressedRGB(Image *,DDSInfo *,ExceptionInfo *),",
          "758:   ReadUncompressedRGBA(Image *,DDSInfo *,ExceptionInfo *),",
          "759:   SkipDXTMipmaps(Image *,DDSInfo *,int,ExceptionInfo *),",
          "760:   SkipRGBMipmaps(Image *,DDSInfo *,int,ExceptionInfo *),",
          "761:   WriteDDSImage(const ImageInfo *,Image *,ExceptionInfo *),",
          "765: static void",
          "766:   RemapIndices(const ssize_t *,const unsigned char *,unsigned char *),",
          "767:   WriteDDSInfo(Image *,const size_t,const size_t,const size_t),",
          "768:   WriteFourCC(Image *,const size_t,const MagickBooleanType,",
          "769:     const MagickBooleanType,ExceptionInfo *),",
          "770:   WriteImageData(Image *,const size_t,const size_t,const MagickBooleanType,",
          "771:     const MagickBooleanType,ExceptionInfo *),",
          "772:   WriteIndices(Image *,const DDSVector3,const DDSVector3,unsigned char *),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "843:   destination->w = left.w + right.w;",
          "844: }",
          "850:   value->z = MinF(1.0f,MaxF(0.0f,value->z));",
          "851:   value->w = MinF(1.0f,MaxF(0.0f,value->w));",
          "852: }",
          "857:   value->y = MinF(1.0f,MaxF(0.0f,value->y));",
          "858:   value->z = MinF(1.0f,MaxF(0.0f,value->z));",
          "859: }",
          "",
          "[Removed Lines]",
          "846: static inline void VectorClamp(DDSVector4 *value)",
          "847: {",
          "848:   value->x = MinF(1.0f,MaxF(0.0f,value->x));",
          "849:   value->y = MinF(1.0f,MaxF(0.0f,value->y));",
          "854: static inline void VectorClamp3(DDSVector3 *value)",
          "855: {",
          "856:   value->x = MinF(1.0f,MaxF(0.0f,value->x));",
          "",
          "[Added Lines]",
          "785: static inline void VectorClamp(DDSVector4 *value)",
          "786: {",
          "787:   value->x = MagickMin(1.0f,MagickMax(0.0f,value->x));",
          "788:   value->y = MagickMin(1.0f,MagickMax(0.0f,value->y));",
          "793: static inline void VectorClamp3(DDSVector3 *value)",
          "794: {",
          "795:   value->x = MagickMin(1.0f,MagickMax(0.0f,value->x));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1478:     w.x = (row2.x * v.z) + w.x;",
          "1479:     w.y = (row2.y * v.z) + w.y;",
          "1480:     w.z = (row2.z * v.z) + w.z;",
          "1483:     a = 1.0f / MaxF(w.x,MaxF(w.y,w.z));",
          "",
          "[Removed Lines]",
          "1481:     w.w = (row2.w * v.z) + w.w;",
          "",
          "[Added Lines]",
          "1420:     w.w = (row2.w * v.z) + w.w;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1842:   for (n = 0; n < num_images; n++)",
          "1843:   {",
          "1846:         if (EOFBlob(image) != MagickFalse)",
          "1847:           ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");",
          "",
          "[Removed Lines]",
          "1844:     if (n != 0)",
          "1845:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1962:   for (y = 0; y < (ssize_t) dds_info->height; y += 4)",
          "1963:   {",
          "1964:     for (x = 0; x < (ssize_t) dds_info->width; x += 4)",
          "1967:       q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),",
          "1968:         Min(4, dds_info->height - y),exception);",
          "",
          "[Removed Lines]",
          "1965:     {",
          "",
          "[Added Lines]",
          "1902:     {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2000:       if (SyncAuthenticPixels(image,exception) == MagickFalse)",
          "2001:         return MagickFalse;",
          "2002:     }",
          "2007:   return MagickTrue;",
          "2008: }",
          "",
          "[Removed Lines]",
          "2003:   }",
          "2005:   SkipDXTMipmaps(image, dds_info, 8);",
          "",
          "[Added Lines]",
          "1940:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2040:   for (y = 0; y < (ssize_t) dds_info->height; y += 4)",
          "2041:   {",
          "2042:     for (x = 0; x < (ssize_t) dds_info->width; x += 4)",
          "2045:       q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),",
          "2046:                          Min(4, dds_info->height - y),exception);",
          "",
          "[Removed Lines]",
          "2043:     {",
          "",
          "[Added Lines]",
          "1978:     {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2086:       if (SyncAuthenticPixels(image,exception) == MagickFalse)",
          "2087:         return MagickFalse;",
          "2088:     }",
          "2093:   return MagickTrue;",
          "2094: }",
          "",
          "[Removed Lines]",
          "2089:   }",
          "2091:   SkipDXTMipmaps(image, dds_info, 16);",
          "",
          "[Added Lines]",
          "2024:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2130:   for (y = 0; y < (ssize_t) dds_info->height; y += 4)",
          "2131:   {",
          "2132:     for (x = 0; x < (ssize_t) dds_info->width; x += 4)",
          "2135:       q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),",
          "2136:                          Min(4, dds_info->height - y),exception);",
          "",
          "[Removed Lines]",
          "2133:     {",
          "",
          "[Added Lines]",
          "2066:     {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2187:       if (SyncAuthenticPixels(image,exception) == MagickFalse)",
          "2188:         return MagickFalse;",
          "2189:     }",
          "2194:   return MagickTrue;",
          "2195: }",
          "",
          "[Removed Lines]",
          "2190:   }",
          "2192:   SkipDXTMipmaps(image, dds_info, 16);",
          "",
          "[Added Lines]",
          "2123:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2251:     if (SyncAuthenticPixels(image,exception) == MagickFalse)",
          "2252:       return MagickFalse;",
          "2257:   return MagickTrue;",
          "2258: }",
          "",
          "[Removed Lines]",
          "2253:   }",
          "2255:   SkipRGBMipmaps(image, dds_info, 3);",
          "",
          "[Added Lines]",
          "2184:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2345:     if (SyncAuthenticPixels(image,exception) == MagickFalse)",
          "2346:       return MagickFalse;",
          "2351:   return MagickTrue;",
          "2352: }",
          "",
          "[Removed Lines]",
          "2347:   }",
          "2349:   SkipRGBMipmaps(image, dds_info, 4);",
          "",
          "[Added Lines]",
          "2276:   }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2422:   }",
          "2423: }",
          "2426:   Skip the mipmap images for compressed (DXTn) dds files",
          "2428: static void SkipDXTMipmaps(Image *image, DDSInfo *dds_info, int texel_size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2353:   Skip the mipmap images for compressed (DXTn) dds files",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2441:     Only skip mipmaps for textures and cube maps",
          "2443:   if (dds_info->ddscaps1 & DDSCAPS_MIPMAP",
          "2444:       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE",
          "2445:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
          "2446:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2372:       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE",
          "2373:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
          "2374:     {",
          "2375:       if (EOFBlob(image) != MagickFalse)",
          "2376:         {",
          "2377:           ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2456:         (void) SeekBlob(image, offset, SEEK_CUR);",
          "2458:         w = DIV2(w);",
          "2459:         h = DIV2(h);",
          "2460:       }",
          "2461:     }",
          "2462: }",
          "2465:   Skip the mipmap images for uncompressed (RGB or RGBA) dds files",
          "2467: static void SkipRGBMipmaps(Image *image, DDSInfo *dds_info, int pixel_size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2393:         h = DIV2(h);",
          "2400:   Skip the mipmap images for uncompressed (RGB or RGBA) dds files",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2480:     Only skip mipmaps for textures and cube maps",
          "2482:   if (dds_info->ddscaps1 & DDSCAPS_MIPMAP",
          "2483:       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE",
          "2484:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
          "2485:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2419:       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE",
          "2420:           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))",
          "2421:     {",
          "2422:       if (EOFBlob(image) != MagickFalse)",
          "2423:         {",
          "2424:           ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2495:         (void) SeekBlob(image, offset, SEEK_CUR);",
          "2497:         w = DIV2(w);",
          "2498:         h = DIV2(h);",
          "2499:       }",
          "2500:     }",
          "2501: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2440:         h = DIV2(h);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2778:   (void) WriteBlobLSBLong(image,124);",
          "2779:   (void) WriteBlobLSBLong(image,flags);",
          "2780:   (void) WriteBlobLSBLong(image,(unsigned int) image->rows);",
          "2783:   if (compression == FOURCC_DXT1)",
          "2785:              (unsigned int) (Max(1,(image->columns+3)/4) * 8));",
          "2786:   else",
          "2787:     (void) WriteBlobLSBLong(image,",
          "",
          "[Removed Lines]",
          "2781:   (void) WriteBlobLSBLong(image,(unsigned int) image->columns);",
          "2784:     (void) WriteBlobLSBLong(image,",
          "",
          "[Added Lines]",
          "2724:   (void) WriteBlobLSBLong(image,(unsigned int) image->columns);",
          "2727:     (void) WriteBlobLSBLong(image,",
          "",
          "---------------"
        ]
      }
    }
  ]
}