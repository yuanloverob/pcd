{
  "cve_id": "CVE-2016-6271",
  "cve_desc": "The Bzrtp library (aka libbzrtp) 1.0.x before 1.0.4 allows man-in-the-middle attackers to conduct spoofing attacks by leveraging a missing HVI check on DHPart2 packet reception.",
  "repo": "BelledonneCommunications/bzrtp",
  "patch_hash": "bbb1e6e2f467ee4bd7b9a8c800e4f07343d7d99b",
  "patch_info": {
    "commit_hash": "bbb1e6e2f467ee4bd7b9a8c800e4f07343d7d99b",
    "repo": "BelledonneCommunications/bzrtp",
    "commit_url": "https://github.com/BelledonneCommunications/bzrtp/commit/bbb1e6e2f467ee4bd7b9a8c800e4f07343d7d99b",
    "files": [
      "include/packetParser.h",
      "src/packetParser.c",
      "test/bzrtpParserTest.c",
      "test/bzrtpParserTest.h",
      "test/bzrtpTest.c"
    ],
    "message": "Add ZRTP Commit packet hvi check on DHPart2 packet reception",
    "before_after_code_files": [
      "include/packetParser.h||include/packetParser.h",
      "src/packetParser.c||src/packetParser.c",
      "test/bzrtpParserTest.c||test/bzrtpParserTest.c",
      "test/bzrtpParserTest.h||test/bzrtpParserTest.h",
      "test/bzrtpTest.c||test/bzrtpTest.c"
    ]
  },
  "patch_diff": {
    "include/packetParser.h||include/packetParser.h": [
      "File: include/packetParser.h -> include/packetParser.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #define  BZRTP_PARSER_ERROR_UNMATCHINGHASHCHAIN 0xa080",
      "43: #define  BZRTP_PARSER_ERROR_UNMATCHINGMAC  0xa100",
      "44: #define  BZRTP_PARSER_ERROR_UNEXPECTEDMESSAGE 0xa200",
      "46: #define  BZRTP_BUILDER_ERROR_INVALIDPACKET  0x5001",
      "47: #define  BZRTP_BUILDER_ERROR_INVALIDMESSAGE  0x5002",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: #define  BZRTP_PARSER_ERROR_UNMATCHINGHVI  0xa400",
      "",
      "---------------"
    ],
    "src/packetParser.c||src/packetParser.c": [
      "File: src/packetParser.c -> src/packetParser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "438:       free (messageData);",
      "439:       return BZRTP_PARSER_ERROR_UNMATCHINGMAC;",
      "440:      }",
      "442:      uint8_t checkH2[32];",
      "443:      uint8_t checkH3[32];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "446:      {",
      "447:       uint8_t computedHvi[32];",
      "448:       uint16_t HelloMessageLength = zrtpChannelContext->selfPackets[HELLO_MESSAGE_STORE_ID]->messageLength;",
      "449:       uint16_t DHPartHelloMessageStringLength = zrtpPacket->messageLength + HelloMessageLength;",
      "451:       uint8_t *DHPartHelloMessageString = (uint8_t *)malloc(DHPartHelloMessageStringLength*sizeof(uint8_t));",
      "453:       memcpy(DHPartHelloMessageString, input+ZRTP_PACKET_HEADER_LENGTH, zrtpPacket->messageLength);",
      "454:       memcpy(DHPartHelloMessageString+zrtpPacket->messageLength, zrtpChannelContext->selfPackets[HELLO_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, HelloMessageLength);",
      "456:       zrtpChannelContext->hashFunction(DHPartHelloMessageString, DHPartHelloMessageStringLength, 32, computedHvi);",
      "458:       free(DHPartHelloMessageString);",
      "461:       if (memcmp(computedHvi, peerCommitMessageData->hvi, 32)!=0) {",
      "462:        free (messageData);",
      "463:        return BZRTP_PARSER_ERROR_UNMATCHINGHVI;",
      "464:       }",
      "465:      }",
      "",
      "---------------"
    ],
    "test/bzrtpParserTest.c||test/bzrtpParserTest.c": [
      "File: test/bzrtpParserTest.c -> test/bzrtpParserTest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "101: uint8_t zrtpkeyi[16] = {0x22, 0xf6, 0xea, 0xaa, 0xa4, 0xad, 0x53, 0x30, 0x71, 0x97, 0xcc, 0x68, 0x6b, 0xb0, 0xcb, 0x55};",
      "102: uint8_t zrtpkeyr[16] = {0x09, 0x50, 0xcd, 0x9e, 0xc2, 0x78, 0x54, 0x31, 0x93, 0x2e, 0x99, 0x31, 0x15, 0x58, 0xd0, 0x2a};",
      "105:  int i, retval;",
      "106:  bzrtpPacket_t *zrtpPacket;",
      "",
      "[Removed Lines]",
      "104: void test_parser(void) {",
      "",
      "[Added Lines]",
      "105: void test_parser_param(uint8_t hvi_trick) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:   zrtpPacket = bzrtp_packetCheck(patternZRTPPackets[i], patternZRTPMetaData[i][0], (patternZRTPMetaData[i][1])-1, &retval);",
      "161:   retval +=  bzrtp_packetParser((patternZRTPMetaData[i][2]==0x87654321)?context12345678:context87654321, (patternZRTPMetaData[i][2]==0x87654321)?context12345678->channelContext[0]:context87654321->channelContext[0], patternZRTPPackets[i], patternZRTPMetaData[i][0], zrtpPacket);",
      "164:   if (zrtpPacket->messageType==MSGTYPE_HELLO) {",
      "165:    if (patternZRTPMetaData[i][2]==0x87654321) {",
      "166:     context12345678->channelContext[0]->peerPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;",
      "167:    } else {",
      "168:     context87654321->channelContext[0]->peerPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;",
      "169:    }",
      "170:    freePacketFlag = 0;",
      "171:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   if (hvi_trick==0) {",
      "164:    CU_ASSERT_EQUAL_FATAL(retval,0);",
      "166:    if (zrtpPacket->messageType==MSGTYPE_DHPART2) {",
      "167:     CU_ASSERT_EQUAL_FATAL(retval, BZRTP_PARSER_ERROR_UNMATCHINGHVI);",
      "170:     context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
      "171:     context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
      "173:     bzrtp_destroyBzrtpContext(context87654321, 0x87654321);",
      "174:     bzrtp_destroyBzrtpContext(context12345678, 0x12345678);",
      "176:     return;",
      "178:    } else {",
      "179:     CU_ASSERT_EQUAL_FATAL(retval,0);",
      "180:    }",
      "181:   }",
      "182:    bzrtp_message(\"parsing Ret val is %x index is %d\\n\", retval, i);",
      "187:     context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;",
      "190:     context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "205:   if (freePacketFlag == 1) {",
      "206:    bzrtp_freeZrtpPacket(zrtpPacket);",
      "207:   }",
      "208:  }",
      "210:  bzrtp_destroyBzrtpContext(context87654321, 0x87654321);",
      "211:  bzrtp_destroyBzrtpContext(context12345678, 0x12345678);",
      "213: }",
      "216: typedef struct my_Context_struct {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:   if (hvi_trick == 1) {",
      "233:    if (zrtpPacket->messageType==MSGTYPE_COMMIT) {",
      "234:     if (patternZRTPMetaData[i][2]==0x87654321) {",
      "235:      bzrtpCommitMessage_t *peerCommitMessageData;",
      "236:      peerCommitMessageData = (bzrtpCommitMessage_t *)zrtpPacket->messageData;",
      "237:      peerCommitMessageData->hvi[0]=0xFF;",
      "238:     }",
      "239:    }",
      "240:   }",
      "245:  context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
      "246:  context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
      "254: void test_parser(void) {",
      "255:  test_parser_param(0);",
      "256: }",
      "258: void test_parser_hvi(void) {",
      "259:  test_parser_param(1);",
      "260: }",
      "",
      "---------------"
    ],
    "test/bzrtpParserTest.h||test/bzrtpParserTest.h": [
      "File: test/bzrtpParserTest.h -> test/bzrtpParserTest.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",
      "22: void test_parser(void);",
      "23: void test_parserComplete(void);",
      "24: void test_stateMachine(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: void test_parser_hvi(void);",
      "",
      "---------------"
    ],
    "test/bzrtpTest.c||test/bzrtpTest.c": [
      "File: test/bzrtpTest.c -> test/bzrtpTest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:  parserTestSuite = CU_add_suite(\"Bzrtp ZRTP Packet Parser\", NULL, NULL);",
      "77:  CU_add_test(parserTestSuite, \"Parse\", test_parser);",
      "78:  CU_add_test(parserTestSuite, \"Parse Exchange\", test_parserComplete);",
      "79:  CU_add_test(parserTestSuite, \"State machine\", test_stateMachine);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  CU_add_test(parserTestSuite, \"Parse hvi check fail\", test_parser_hvi);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "540644f66b0e181fc29749e2ecb2be365f44c8b3",
      "candidate_info": {
        "commit_hash": "540644f66b0e181fc29749e2ecb2be365f44c8b3",
        "repo": "BelledonneCommunications/bzrtp",
        "commit_url": "https://github.com/BelledonneCommunications/bzrtp/commit/540644f66b0e181fc29749e2ecb2be365f44c8b3",
        "files": [
          "test/bzrtpCryptoTest.c",
          "test/bzrtpParserTest.c",
          "test/bzrtpTest.c"
        ],
        "message": "Use bctoolbox_tester instead of using CUnit directly.",
        "before_after_code_files": [
          "test/bzrtpCryptoTest.c||test/bzrtpCryptoTest.c",
          "test/bzrtpParserTest.c||test/bzrtpParserTest.c",
          "test/bzrtpTest.c||test/bzrtpTest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/bzrtpParserTest.c||test/bzrtpParserTest.c",
            "test/bzrtpTest.c||test/bzrtpTest.c"
          ],
          "candidate": [
            "test/bzrtpParserTest.c||test/bzrtpParserTest.c",
            "test/bzrtpTest.c||test/bzrtpTest.c"
          ]
        }
      },
      "candidate_diff": {
        "test/bzrtpCryptoTest.c||test/bzrtpCryptoTest.c": [
          "File: test/bzrtpCryptoTest.c -> test/bzrtpCryptoTest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <stdio.h>",
          "32: #include <stdlib.h>",
          "33: #include <math.h>",
          "36: #include \"bzrtp/bzrtp.h\"",
          "37: #include \"cryptoUtils.h\"",
          "38: #include \"testUtils.h\"",
          "",
          "[Removed Lines]",
          "34: #include \"CUnit/Basic.h\"",
          "",
          "[Added Lines]",
          "38: #include <bctoolbox/tester.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:    (void (*)(uint8_t *, uint8_t, uint8_t *, uint32_t, uint8_t, uint8_t *))bctbx_hmacSha256,",
          "88:    output);",
          "91:  }",
          "93: }",
          "",
          "[Removed Lines]",
          "90:   CU_ASSERT_TRUE(memcmp(output, patternKDFOutput[i], patternKDFHmacLength[i]) == 0);",
          "",
          "[Added Lines]",
          "90:   BC_ASSERT_TRUE(memcmp(output, patternKDFOutput[i], patternKDFHmacLength[i]) == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: void test_CRC32(void) {",
          "113:  int i;",
          "114:  for (i=0; i<CRC_TEST_NUMBER; i++) {",
          "116:  }",
          "117: }",
          "",
          "[Removed Lines]",
          "115:   CU_ASSERT_TRUE(bzrtp_CRC32(patterCRCinput[i], patternCRCLength[i]) == patternCRCoutput[i]);",
          "",
          "[Added Lines]",
          "115:   BC_ASSERT_TRUE(bzrtp_CRC32(patterCRCinput[i], patternCRCLength[i]) == patternCRCoutput[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:   setHelloMessageAlgo(helloMessage, algoType, packetTypes, packetTypesCount);",
          "185:  }",
          "188:  retval = compareAllAlgoTypesWithExpectedChangedOnly(zrtpContext->channelContext[0], algoType, expectedType);",
          "190:  bzrtp_freeZrtpPacket(helloPacket);",
          "",
          "[Removed Lines]",
          "187:  CU_ASSERT_FALSE(crypoAlgoAgreement(zrtpContext, zrtpContext->channelContext[0], helloPacket->messageData));",
          "",
          "[Added Lines]",
          "187:  BC_ASSERT_FALSE(crypoAlgoAgreement(zrtpContext, zrtpContext->channelContext[0], helloPacket->messageData));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:  struct st_algo_type *cipher_type;",
          "302:  agreement_type_with_packet = &agreement_types_with_packet[0];",
          "303:  while (agreement_type_with_packet->typesCount > 0) {",
          "305:   agreement_type_with_packet++;",
          "306:  }",
          "307:  agreement_type_with_context = &agreement_types_with_context[0];",
          "308:  while (agreement_type_with_context->typesCount > 0) {",
          "310:   agreement_type_with_context++;",
          "311:  }",
          "312:  agreement_type = &agreement_types[0];",
          "313:  while (agreement_type->packetTypesCount > 0) {",
          "315:   agreement_type++;",
          "316:  }",
          "319:  cipher_type_with_packet = &cipher_types_with_packet[0];",
          "320:  while (cipher_type_with_packet->typesCount > 0) {",
          "322:   cipher_type_with_packet++;",
          "323:  }",
          "324:  cipher_type_with_context = &cipher_types_with_context[0];",
          "325:  while (cipher_type_with_context->typesCount > 0) {",
          "327:   cipher_type_with_context++;",
          "328:  }",
          "329:  cipher_type = &cipher_types[0];",
          "330:  while (cipher_type->packetTypesCount > 0) {",
          "332:   cipher_type++;",
          "333:  }",
          "334: }",
          "",
          "[Removed Lines]",
          "299:  CU_ASSERT_TRUE(testAlgoTypeWithPacket(ZRTP_UNSET_ALGO, NULL, 0, ZRTP_KEYAGREEMENT_DH3k));",
          "304:   CU_ASSERT_TRUE(testAlgoTypeWithPacket(ZRTP_KEYAGREEMENT_TYPE, agreement_type_with_packet->types, agreement_type_with_packet->typesCount, agreement_type_with_packet->expectedType));",
          "309:   CU_ASSERT_TRUE(testAlgoTypeWithContext(ZRTP_KEYAGREEMENT_TYPE, agreement_type_with_context->types, agreement_type_with_context->typesCount, agreement_type_with_context->expectedType));",
          "314:   CU_ASSERT_TRUE(testAlgoType(ZRTP_KEYAGREEMENT_TYPE, agreement_type->packetTypes, agreement_type->packetTypesCount, agreement_type->contextTypes, agreement_type->contextTypesCount, agreement_type->expectedType));",
          "321:   CU_ASSERT_TRUE(testAlgoTypeWithPacket(ZRTP_CIPHERBLOCK_TYPE, cipher_type_with_packet->types, cipher_type_with_packet->typesCount, cipher_type_with_packet->expectedType));",
          "326:   CU_ASSERT_TRUE(testAlgoTypeWithContext(ZRTP_CIPHERBLOCK_TYPE, cipher_type_with_context->types, cipher_type_with_context->typesCount, cipher_type_with_context->expectedType));",
          "331:   CU_ASSERT_TRUE(testAlgoType(ZRTP_CIPHERBLOCK_TYPE, cipher_type->packetTypes, cipher_type->packetTypesCount, cipher_type->contextTypes, cipher_type->contextTypesCount, cipher_type->expectedType));",
          "",
          "[Added Lines]",
          "299:  BC_ASSERT_TRUE(testAlgoTypeWithPacket(ZRTP_UNSET_ALGO, NULL, 0, ZRTP_KEYAGREEMENT_DH3k));",
          "304:   BC_ASSERT_TRUE(testAlgoTypeWithPacket(ZRTP_KEYAGREEMENT_TYPE, agreement_type_with_packet->types, agreement_type_with_packet->typesCount, agreement_type_with_packet->expectedType));",
          "309:   BC_ASSERT_TRUE(testAlgoTypeWithContext(ZRTP_KEYAGREEMENT_TYPE, agreement_type_with_context->types, agreement_type_with_context->typesCount, agreement_type_with_context->expectedType));",
          "314:   BC_ASSERT_TRUE(testAlgoType(ZRTP_KEYAGREEMENT_TYPE, agreement_type->packetTypes, agreement_type->packetTypesCount, agreement_type->contextTypes, agreement_type->contextTypesCount, agreement_type->expectedType));",
          "321:   BC_ASSERT_TRUE(testAlgoTypeWithPacket(ZRTP_CIPHERBLOCK_TYPE, cipher_type_with_packet->types, cipher_type_with_packet->typesCount, cipher_type_with_packet->expectedType));",
          "326:   BC_ASSERT_TRUE(testAlgoTypeWithContext(ZRTP_CIPHERBLOCK_TYPE, cipher_type_with_context->types, cipher_type_with_context->typesCount, cipher_type_with_context->expectedType));",
          "331:   BC_ASSERT_TRUE(testAlgoType(ZRTP_CIPHERBLOCK_TYPE, cipher_type->packetTypes, cipher_type->packetTypesCount, cipher_type->contextTypes, cipher_type->contextTypesCount, cipher_type->expectedType));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "414:  agreement_type = &agreement_types[0];",
          "415:  while (agreement_type->contextTypesCount > 0) {",
          "417:   agreement_type++;",
          "418:  }",
          "421:  cipher_type = &cipher_types[0];",
          "422:  while (cipher_type->contextTypesCount > 0) {",
          "424:   cipher_type++;",
          "425:  }",
          "426: }",
          "",
          "[Removed Lines]",
          "416:   CU_ASSERT_TRUE(testAlgoSetterGetter(ZRTP_KEYAGREEMENT_TYPE, agreement_type->contextTypes, agreement_type->contextTypesCount, agreement_type->expectedTypes, agreement_type->expectedTypesCount));",
          "423:   CU_ASSERT_TRUE(testAlgoSetterGetter(ZRTP_CIPHERBLOCK_TYPE, cipher_type->contextTypes, cipher_type->contextTypesCount, cipher_type->expectedTypes, cipher_type->expectedTypesCount));",
          "",
          "[Added Lines]",
          "416:   BC_ASSERT_TRUE(testAlgoSetterGetter(ZRTP_KEYAGREEMENT_TYPE, agreement_type->contextTypes, agreement_type->contextTypesCount, agreement_type->expectedTypes, agreement_type->expectedTypesCount));",
          "423:   BC_ASSERT_TRUE(testAlgoSetterGetter(ZRTP_CIPHERBLOCK_TYPE, cipher_type->contextTypes, cipher_type->contextTypesCount, cipher_type->expectedTypes, cipher_type->expectedTypesCount));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "478:  crypto_type = &crypto_types[0];",
          "479:  while (crypto_type->algoTypesCount > 0) {",
          "481:   crypto_type++;",
          "482:  }",
          "483: }",
          "",
          "[Removed Lines]",
          "480:   CU_ASSERT_TRUE(testAddMandatoryCryptoTypesIfNeeded(crypto_type->algoType, crypto_type->algoTypes, crypto_type->algoTypesCount, crypto_type->expectedTypes, crypto_type->expectedTypesCount));",
          "",
          "[Added Lines]",
          "480:   BC_ASSERT_TRUE(testAddMandatoryCryptoTypesIfNeeded(crypto_type->algoType, crypto_type->algoTypes, crypto_type->algoTypesCount, crypto_type->expectedTypes, crypto_type->expectedTypesCount));",
          "",
          "---------------"
        ],
        "test/bzrtpParserTest.c||test/bzrtpParserTest.c": [
          "File: test/bzrtpParserTest.c -> test/bzrtpParserTest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdio.h>",
          "25: #include <stdlib.h>",
          "26: #include <errno.h>",
          "29: #include \"bzrtp/bzrtp.h\"",
          "30: #include \"typedef.h\"",
          "",
          "[Removed Lines]",
          "27: #include \"CUnit/Basic.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"cryptoUtils.h\"",
          "33: #include \"zidCache.h\"",
          "34: #include \"testUtils.h\"",
          "36: #ifndef _WIN32",
          "37: #include <time.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <bctoolbox/tester.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:   retval +=  bzrtp_packetParser((patternZRTPMetaData[i][2]==0x87654321)?context12345678:context87654321, (patternZRTPMetaData[i][2]==0x87654321)?context12345678->channelContext[0]:context87654321->channelContext[0], patternZRTPPackets[i], patternZRTPMetaData[i][0], zrtpPacket);",
          "180:   if (hvi_trick==0) {",
          "183:    if (zrtpPacket->messageType==MSGTYPE_DHPART2) {",
          "195:    } else {",
          "197:    }",
          "198:   }",
          "",
          "[Removed Lines]",
          "181:    CU_ASSERT_EQUAL_FATAL(retval,0);",
          "184:     CU_ASSERT_EQUAL_FATAL(retval, BZRTP_PARSER_ERROR_UNMATCHINGHVI);",
          "187:     context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
          "188:     context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
          "190:     bzrtp_destroyBzrtpContext(context87654321, 0x87654321);",
          "191:     bzrtp_destroyBzrtpContext(context12345678, 0x12345678);",
          "193:     return;",
          "196:     CU_ASSERT_EQUAL_FATAL(retval,0);",
          "199:    bzrtp_message(\"parsing Ret val is %x index is %d\\n\", retval, i);",
          "",
          "[Added Lines]",
          "181:    BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "182:    if (retval != 0) goto error;",
          "185:     BC_ASSERT_EQUAL(retval, BZRTP_PARSER_ERROR_UNMATCHINGHVI, int, \"%d\");",
          "186:     goto error;",
          "188:     BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "189:     if (retval != 0) goto error;",
          "192:   bzrtp_message(\"parsing Ret val is %x index is %d\\n\", retval, i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:     retval = bzrtp_setPeerHelloHash(context87654321, 0x87654321, (uint8_t *)patternZRTPHelloHash12345678, strlen((const char *)patternZRTPHelloHash12345678));",
          "214:    }",
          "215:    freePacketFlag = 0;",
          "216:   }",
          "",
          "[Removed Lines]",
          "213:     CU_ASSERT_EQUAL_FATAL(retval,0);",
          "",
          "[Added Lines]",
          "206:     BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "207:     if (retval != 0) goto error;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "244:   if (zrtpPacket->packetString != NULL) {",
          "246:   } else {",
          "248:   }",
          "250:   if (freePacketFlag == 1) {",
          "",
          "[Removed Lines]",
          "245:    CU_ASSERT_TRUE(memcmp(zrtpPacket->packetString, patternZRTPPackets[i], patternZRTPMetaData[i][0]) == 0);",
          "247:    CU_FAIL(\"Unable to build packet\");",
          "",
          "[Added Lines]",
          "239:    BC_ASSERT_TRUE(memcmp(zrtpPacket->packetString, patternZRTPPackets[i], patternZRTPMetaData[i][0]) == 0);",
          "241:    BC_FAIL(\"Unable to build packet\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "265:  }",
          "268:  context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
          "269:  context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;",
          "272:  bzrtp_destroyBzrtpContext(context87654321, 0x87654321);",
          "273:  bzrtp_destroyBzrtpContext(context12345678, 0x12345678);",
          "275: }",
          "277: void test_parser(void) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: error:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "868:  if (memcmp(contextBob->DHMContext->key, contextAlice->DHMContext->key, secretLength)==0) {",
          "869:   bzrtp_message(\"Secret Key correctly exchanged \\n\");",
          "871:  } else {",
          "873:   bzrtp_message(\"ERROR : secretKey exchange failed!!\\n\");",
          "874:  }",
          "",
          "[Removed Lines]",
          "870:   CU_PASS(\"Secret Key exchange OK\");",
          "872:   CU_FAIL(\"Secret Key exchange failed\");",
          "",
          "[Added Lines]",
          "863:   BC_PASS(\"Secret Key exchange OK\");",
          "865:   BC_FAIL(\"Secret Key exchange failed\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "902:  contextBob->channelContext[0]->hashFunction(dataToHash, totalHashDataLength, 32, bob_totalHash);",
          "903:  if (memcmp(bob_totalHash, alice_totalHash, 32) == 0) {",
          "904:   bzrtp_message(\"Got the same total hash\\n\");",
          "906:  } else {",
          "907:   bzrtp_message(\"AARGG!! total hash mismatch\");",
          "909:  }",
          "",
          "[Removed Lines]",
          "905:   CU_PASS(\"Total Hash match\");",
          "908:   CU_FAIL(\"Total Hash mismatch\");",
          "",
          "[Added Lines]",
          "898:   BC_PASS(\"Total Hash match\");",
          "901:   BC_FAIL(\"Total Hash mismatch\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1105:  if (memcmp(contextBob->channelContext[0]->s0, contextAlice->channelContext[0]->s0, 32)==0) {",
          "1106:   bzrtp_message(\"Got the same s0\\n\");",
          "1108:  } else {",
          "1109:   bzrtp_message(\"ERROR s0 differs\\n\");",
          "1111:  }",
          "",
          "[Removed Lines]",
          "1107:   CU_PASS(\"s0 match\");",
          "1110:   CU_PASS(\"s0 mismatch\");",
          "",
          "[Added Lines]",
          "1100:   BC_PASS(\"s0 match\");",
          "1103:   BC_PASS(\"s0 mismatch\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1134:  if (memcmp(contextBob->ZRTPSess, contextAlice->ZRTPSess, 32)==0) {",
          "1135:   bzrtp_message(\"Got the same ZRTPSess\\n\");",
          "1137:  } else {",
          "1138:   bzrtp_message(\"ERROR ZRTPSess differs\\n\");",
          "1140:  }",
          "",
          "[Removed Lines]",
          "1136:   CU_PASS(\"ZRTPSess match\");",
          "1139:   CU_PASS(\"ZRTPSess mismatch\");",
          "",
          "[Added Lines]",
          "1129:   BC_PASS(\"ZRTPSess match\");",
          "1132:   BC_PASS(\"ZRTPSess mismatch\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1159:  if (memcmp(alice_sasHash, bob_sasHash, 32)==0) {",
          "1160:   bzrtp_message(\"Got the same SAS Hash\\n\");",
          "1162:  } else {",
          "1163:   bzrtp_message(\"ERROR SAS Hash differs\\n\");",
          "1165:  }",
          "",
          "[Removed Lines]",
          "1161:   CU_PASS(\"SAS Hash match\");",
          "1164:   CU_PASS(\"SAS Hash mismatch\");",
          "",
          "[Added Lines]",
          "1154:   BC_PASS(\"SAS Hash match\");",
          "1157:   BC_PASS(\"SAS Hash mismatch\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1203:  if ((memcmp(contextAlice->channelContext[0]->mackeyi, contextBob->channelContext[0]->mackeyi, contextAlice->channelContext[0]->hashLength)==0) && (memcmp(contextAlice->channelContext[0]->mackeyr, contextBob->channelContext[0]->mackeyr, contextAlice->channelContext[0]->hashLength)==0) && (memcmp(contextAlice->channelContext[0]->zrtpkeyi, contextBob->channelContext[0]->zrtpkeyi, contextAlice->channelContext[0]->cipherKeyLength)==0) && (memcmp(contextAlice->channelContext[0]->zrtpkeyr, contextBob->channelContext[0]->zrtpkeyr, contextAlice->channelContext[0]->cipherKeyLength)==0)) {",
          "1204:   bzrtp_message(\"Got the same keys\\n\");",
          "1206:  } else {",
          "1207:   bzrtp_message(\"ERROR keys differ\\n\");",
          "1209:  }",
          "",
          "[Removed Lines]",
          "1205:   CU_PASS(\"keys match\");",
          "1208:   CU_PASS(\"Keys mismatch\");",
          "",
          "[Added Lines]",
          "1198:   BC_PASS(\"keys match\");",
          "1201:   BC_PASS(\"Keys mismatch\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1439:  contextBob->channelContext[1]->hashFunction(dataToHash, totalHashDataLength, 32, bob_totalHash);",
          "1440:  if (memcmp(bob_totalHash, alice_totalHash, 32) == 0) {",
          "1441:   bzrtp_message(\"Got the same total hash\\n\");",
          "1443:  } else {",
          "1444:   bzrtp_message(\"AARGG!! total hash mismatch\");",
          "1446:  }",
          "1448:  free(dataToHash);",
          "",
          "[Removed Lines]",
          "1442:   CU_PASS(\"Total Hash match\");",
          "1445:   CU_FAIL(\"Total Hash mismatch\");",
          "",
          "[Added Lines]",
          "1435:   BC_PASS(\"Total Hash match\");",
          "1438:   BC_FAIL(\"Total Hash mismatch\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1464:  if (memcmp(contextBob->channelContext[1]->KDFContext, contextAlice->channelContext[1]->KDFContext, 56) == 0) {",
          "1465:   bzrtp_message(\"Got the same total KDF Context\\n\");",
          "1467:  } else {",
          "1468:   bzrtp_message(\"AARGG!! KDF Context mismatch\");",
          "1470:  }",
          "",
          "[Removed Lines]",
          "1466:   CU_PASS(\"KDFContext match\");",
          "1469:   CU_FAIL(\"KDF Context mismatch\");",
          "",
          "[Added Lines]",
          "1459:   BC_PASS(\"KDFContext match\");",
          "1462:   BC_FAIL(\"KDF Context mismatch\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1489:  if (memcmp(contextBob->channelContext[1]->s0, contextAlice->channelContext[1]->s0, contextAlice->channelContext[1]->hashLength) == 0) {",
          "1490:   bzrtp_message(\"Got the same s0\\n\");",
          "1492:  } else {",
          "1493:   bzrtp_message(\"AARGG!! s0 mismatch\");",
          "1495:  }",
          "",
          "[Removed Lines]",
          "1491:   CU_PASS(\"s0 match\");",
          "1494:   CU_FAIL(\"s0 mismatch\");",
          "",
          "[Added Lines]",
          "1484:   BC_PASS(\"s0 match\");",
          "1487:   BC_FAIL(\"s0 mismatch\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1522:  if ((memcmp(contextAlice->channelContext[1]->mackeyi, contextBob->channelContext[1]->mackeyi, contextAlice->channelContext[1]->hashLength)==0) && (memcmp(contextAlice->channelContext[1]->mackeyr, contextBob->channelContext[1]->mackeyr, contextAlice->channelContext[1]->hashLength)==0) && (memcmp(contextAlice->channelContext[1]->zrtpkeyi, contextBob->channelContext[1]->zrtpkeyi, contextAlice->channelContext[1]->cipherKeyLength)==0) && (memcmp(contextAlice->channelContext[1]->zrtpkeyr, contextBob->channelContext[1]->zrtpkeyr, contextAlice->channelContext[1]->cipherKeyLength)==0)) {",
          "1523:   bzrtp_message(\"Got the same keys\\n\");",
          "1525:  } else {",
          "1526:   bzrtp_message(\"ERROR keys differ\\n\");",
          "1528:  }",
          "",
          "[Removed Lines]",
          "1524:   CU_PASS(\"keys match\");",
          "1527:   CU_PASS(\"Keys mismatch\");",
          "",
          "[Added Lines]",
          "1517:   BC_PASS(\"keys match\");",
          "1520:   BC_PASS(\"Keys mismatch\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1775:   bzrtp_SASVerified(contextAlice);",
          "1776:   bzrtp_SASVerified(contextBob);",
          "1777:  } else {",
          "1779:  }",
          "",
          "[Removed Lines]",
          "1773:   CU_ASSERT_TRUE((memcmp(contextAlice->channelContext[0]->srtpSecrets.sas, contextBob->channelContext[0]->srtpSecrets.sas, 4) == 0));",
          "1778:   CU_FAIL(\"Unable to reach secure state\");",
          "",
          "[Added Lines]",
          "1766:   BC_ASSERT_TRUE((memcmp(contextAlice->channelContext[0]->srtpSecrets.sas, contextBob->channelContext[0]->srtpSecrets.sas, 4) == 0));",
          "1771:   BC_FAIL(\"Unable to reach secure state\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1885:  }",
          "1890:  dumpContext(\"\\nAlice\", contextAlice);",
          "1891:  dumpContext(\"\\nBob\", contextBob);",
          "",
          "[Removed Lines]",
          "1888:  CU_ASSERT_TRUE((memcmp(contextAlice->channelContext[1]->srtpSecrets.selfSrtpKey, contextBob->channelContext[1]->srtpSecrets.peerSrtpKey, 16) == 0) && (contextAlice->isSecure == 1) && (contextBob->isSecure == 1));",
          "",
          "[Added Lines]",
          "1881:  BC_ASSERT_TRUE((memcmp(contextAlice->channelContext[1]->srtpSecrets.selfSrtpKey, contextBob->channelContext[1]->srtpSecrets.peerSrtpKey, 16) == 0) && (contextAlice->isSecure == 1) && (contextBob->isSecure == 1));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1918:  zrtpPacket = bzrtp_packetCheck(HelloPacketZrtpHash, sizeof(HelloPacketZrtpHash), 0, &retval);",
          "1920:  retval = bzrtp_packetParser(context12345678, context12345678->channelContext[0], HelloPacketZrtpHash, sizeof(HelloPacketZrtpHash), zrtpPacket);",
          "1923:  context12345678->channelContext[0]->peerPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;",
          "1925:  retval = bzrtp_setPeerHelloHash(context12345678, 0x12345678, (uint8_t *)ZRTPHASHPATTERN, strlen((const char *)ZRTPHASHPATTERN));",
          "1929:  retval = bzrtp_setPeerHelloHash(context12345678, 0x12345678, (uint8_t *)ZRTPHASHPATTERN_WRONG, strlen((const char *)ZRTPHASHPATTERN));",
          "1934:  zrtpPacket = bzrtp_packetCheck(HelloPacketZrtpHash, sizeof(HelloPacketZrtpHash), 0, &retval);",
          "1936:  retval = bzrtp_packetParser(context12345678, context12345678->channelContext[0], HelloPacketZrtpHash, sizeof(HelloPacketZrtpHash), zrtpPacket);",
          "1940:  retval = bzrtp_setPeerHelloHash(context12345678, 0x12345678, (uint8_t *)ZRTPHASHPATTERN, strlen((const char *)ZRTPHASHPATTERN));",
          "1942:  retval = bzrtp_packetParser(context12345678, context12345678->channelContext[0], HelloPacketZrtpHash, sizeof(HelloPacketZrtpHash), zrtpPacket);",
          "1944: }",
          "",
          "[Removed Lines]",
          "1919:  CU_ASSERT_EQUAL(retval, 0);",
          "1921:  CU_ASSERT_EQUAL(retval, 0);",
          "1926:  CU_ASSERT_EQUAL(retval, 0);",
          "1930:  CU_ASSERT_EQUAL(retval, BZRTP_ERROR_HELLOHASH_MISMATCH);",
          "1935:  CU_ASSERT_EQUAL(retval, 0);",
          "1937:  CU_ASSERT_EQUAL(retval, BZRTP_ERROR_HELLOHASH_MISMATCH);",
          "1941:  CU_ASSERT_EQUAL(retval, 0);",
          "1943:  CU_ASSERT_EQUAL(retval, 0);",
          "",
          "[Added Lines]",
          "1912:  BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "1914:  BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "1919:  BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "1923:  BC_ASSERT_EQUAL(retval, BZRTP_ERROR_HELLOHASH_MISMATCH, int, \"%d\");",
          "1928:  BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "1930:  BC_ASSERT_EQUAL(retval, BZRTP_ERROR_HELLOHASH_MISMATCH, int, \"%d\");",
          "1934:  BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "1936:  BC_ASSERT_EQUAL(retval, 0, int, \"%d\");",
          "",
          "---------------"
        ],
        "test/bzrtpTest.c||test/bzrtpTest.c": [
          "File: test/bzrtpTest.c -> test/bzrtpTest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdio.h>",
          "25: #include \"bzrtpCryptoTest.h\"",
          "26: #include \"bzrtpParserTest.h\"",
          "27: #include \"typedef.h\"",
          "28: #include \"testUtils.h\"",
          "30: #ifdef HAVE_LIBXML2",
          "31: #include <libxml/parser.h>",
          "32: #endif",
          "58: #ifdef HAVE_LIBXML2",
          "59:  xmlInitParser();",
          "60: #endif",
          "92: #ifdef HAVE_LIBXML2",
          "94:  xmlCleanupParser();",
          "95: #endif",
          "98: }",
          "",
          "[Removed Lines]",
          "24: #include \"CUnit/Basic.h\"",
          "35: int main(int argc, char *argv[] ) {",
          "36:  int i, fails_count=0;",
          "37:  CU_pSuite cryptoUtilsTestSuite, parserTestSuite;",
          "39:  CU_pSuite *suites[] = {",
          "40:   &cryptoUtilsTestSuite,",
          "41:   &parserTestSuite,",
          "42:   NULL",
          "43:  };",
          "45:  if (argc>1) {",
          "46:   if (argv[1][0] == '-') {",
          "47:    if (strcmp(argv[1], \"-verbose\") == 0) {",
          "48:     verbose = 1;",
          "49:    } else {",
          "50:     printf (\"Usage:\\n %s [-verbose] to enable extensive logging\\n\", argv[0]);",
          "51:     return 1;",
          "52:    }",
          "53:   } else {",
          "54:    printf (\"Usage:\\n %s [-verbose] to enable extensive logging\\n\", argv[0]);",
          "55:    return 1;",
          "56:   }",
          "57:  }",
          "63:  if (CUE_SUCCESS != CU_initialize_registry()) {",
          "64:   return CU_get_error();",
          "65:  }",
          "68:  cryptoUtilsTestSuite = CU_add_suite(\"Bzrtp Crypto Utils\", NULL, NULL);",
          "69:  CU_add_test(cryptoUtilsTestSuite, \"zrtpKDF\", test_zrtpKDF);",
          "70:  CU_add_test(cryptoUtilsTestSuite, \"CRC32\", test_CRC32);",
          "71:  CU_add_test(cryptoUtilsTestSuite, \"algo agreement\", test_algoAgreement);",
          "72:  CU_add_test(cryptoUtilsTestSuite, \"context algo setter and getter\", test_algoSetterGetter);",
          "73:  CU_add_test(cryptoUtilsTestSuite, \"adding mandatory crypto algorithms if needed\", test_addMandatoryCryptoTypesIfNeeded);",
          "76:  parserTestSuite = CU_add_suite(\"Bzrtp ZRTP Packet Parser\", NULL, NULL);",
          "77:  CU_add_test(parserTestSuite, \"Parse\", test_parser);",
          "78:  CU_add_test(parserTestSuite, \"Parse hvi check fail\", test_parser_hvi);",
          "79:  CU_add_test(parserTestSuite, \"Parse Exchange\", test_parserComplete);",
          "80:  CU_add_test(parserTestSuite, \"State machine\", test_stateMachine);",
          "81:  CU_add_test(parserTestSuite, \"ZRTP-hash\", test_zrtphash);",
          "84:  for(i=0; suites[i]; i++){",
          "85:   CU_basic_run_suite(*suites[i]);",
          "86:   fails_count += CU_get_number_of_tests_failed();",
          "87:  }",
          "90:  CU_cleanup_registry();",
          "97:  return (fails_count == 0 ? 0 : 1);",
          "",
          "[Added Lines]",
          "28: #include <bctoolbox/logging.h>",
          "29: #include <bctoolbox/tester.h>",
          "36: test_t crypto_utils_tests[] = {",
          "37:  { \"zrtpKDF\", test_zrtpKDF },",
          "38:  { \"CRC32\", test_CRC32 },",
          "39:  { \"algo agreement\", test_algoAgreement },",
          "40:  { \"context algo setter and getter\", test_algoSetterGetter },",
          "41:  { \"adding mandatory crypto algorithms if needed\", test_addMandatoryCryptoTypesIfNeeded }",
          "42: };",
          "44: test_suite_t crypto_utils_test_suite = {",
          "45:  \"Crypto Utils\",",
          "46:  NULL,",
          "47:  NULL,",
          "48:  NULL,",
          "49:  NULL,",
          "50:  sizeof(crypto_utils_tests) / sizeof(crypto_utils_tests[0]),",
          "51:  crypto_utils_tests",
          "52: };",
          "54: test_t packet_parser_tests[] = {",
          "55:  { \"Parse\", test_parser },",
          "56:  { \"Parse hvi check fail\", test_parser_hvi },",
          "57:  { \"Parse Exchange\", test_parserComplete },",
          "58:  { \"State machine\", test_stateMachine },",
          "59:  { \"ZRTP-hash\", test_zrtphash }",
          "60: };",
          "62: test_suite_t packet_parser_test_suite = {",
          "63:  \"Packet Parser\",",
          "64:  NULL,",
          "65:  NULL,",
          "66:  NULL,",
          "67:  NULL,",
          "68:  sizeof(packet_parser_tests) / sizeof(packet_parser_tests[0]),",
          "69:  packet_parser_tests",
          "70: };",
          "72: void bzrtp_tester_init(void) {",
          "76:  bc_tester_init(NULL, BCTBX_LOG_MESSAGE, BCTBX_LOG_ERROR, NULL);",
          "78:  bc_tester_add_suite(&crypto_utils_test_suite);",
          "79:  bc_tester_add_suite(&packet_parser_test_suite);",
          "80: }",
          "82: void bzrtp_tester_uninit(void) {",
          "83:  bc_tester_uninit();",
          "88: }",
          "90: int main(int argc, char *argv[]) {",
          "91:  int i;",
          "92:  int ret;",
          "94:  bzrtp_tester_init();",
          "96:  for (i = 1; i < argc; ++i) {",
          "97:   int ret = bc_tester_parse_args(argc, argv, i);",
          "98:   if (ret > 0) {",
          "99:    i += ret - 1;",
          "100:    continue;",
          "101:   } else if (ret < 0) {",
          "102:    bc_tester_helper(argv[0], \"\");",
          "103:   }",
          "104:   return ret;",
          "105:  }",
          "107:  ret = bc_tester_start(argv[0]);",
          "108:  bzrtp_tester_uninit();",
          "109:  return ret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}