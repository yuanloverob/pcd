{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f70fa3bae61cf203cc9a46fb449af793c08ff086",
      "candidate_info": {
        "commit_hash": "f70fa3bae61cf203cc9a46fb449af793c08ff086",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f70fa3bae61cf203cc9a46fb449af793c08ff086",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Replace 'echo -n' with 'echo' in build commands",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:         'target_conditions': [",
          "271:           ['_toolset==\"host\"', {",
          "272:             'variables': {",
          "274:             },",
          "275:             'cflags': [ '<(m32flag)' ],",
          "276:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:           }],",
          "281:           ['_toolset==\"target\"', {",
          "282:             'variables': {",
          "284:             },",
          "285:             'cflags': [ '<(m32flag)' ],",
          "286:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7e34ddb66f61d123f00a173e6a7b196d567c9d0",
      "candidate_info": {
        "commit_hash": "e7e34ddb66f61d123f00a173e6a7b196d567c9d0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e7e34ddb66f61d123f00a173e6a7b196d567c9d0",
        "files": [
          "test/simple/test-dgram-broadcast-multi-process.js"
        ],
        "message": "test: fix test-dgram-broadcast-multi-process\n\nThe test failed when a router replies IPADDR_BROADCAST.\nFixed it by specifying only one address to bind a socket.",
        "before_after_code_files": [
          "test/simple/test-dgram-broadcast-multi-process.js||test/simple/test-dgram-broadcast-multi-process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-dgram-broadcast-multi-process.js||test/simple/test-dgram-broadcast-multi-process.js": [
          "File: test/simple/test-dgram-broadcast-multi-process.js -> test/simple/test-dgram-broadcast-multi-process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     assert = require('assert'),",
          "24:     dgram = require('dgram'),",
          "25:     util = require('util'),",
          "27:     Buffer = require('buffer').Buffer,",
          "28:     fork = require('child_process').fork,",
          "29:     LOCAL_BROADCAST_HOST = '255.255.255.255',",
          "",
          "[Removed Lines]",
          "26:     assert = require('assert'),",
          "",
          "[Added Lines]",
          "26:     networkInterfaces = require('os').networkInterfaces(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:       new Buffer('Fourth message to send')",
          "36:     ];",
          "38: if (process.argv[2] !== 'child') {",
          "39:   var workers = {},",
          "40:       listeners = 3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: get_bindAddress: for (var name in networkInterfaces) {",
          "40:   var interfaces = networkInterfaces[name];",
          "41:   for(var i = 0; i < interfaces.length; i++) {",
          "42:     var localInterface = interfaces[i];",
          "43:     if (!localInterface.internal && localInterface.family === 'IPv4') {",
          "44:       var bindAddress = localInterface.address;",
          "45:       break get_bindAddress;",
          "46:     }",
          "47:   }",
          "48: }",
          "49: assert.ok(bindAddress);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   var sendSocket = dgram.createSocket('udp4');",
          "150:   sendSocket.setBroadcast(true);",
          "152:   sendSocket.on('close', function() {",
          "",
          "[Removed Lines]",
          "149:   sendSocket.bind(common.PORT);",
          "",
          "[Added Lines]",
          "164:   sendSocket.bind(common.PORT, bindAddress);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:   var listenSocket = dgram.createSocket('udp4');",
          "189:   listenSocket.on('message', function(buf, rinfo) {",
          "190:     console.error('[CHILD] %s received %s from %j',",
          "191:                   process.pid,",
          "192:                   util.inspect(buf.toString()),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     if (rinfo.address !== bindAddress) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67fc1dafd0010f4c0a23db2aa472d0dc2a8f3492",
      "candidate_info": {
        "commit_hash": "67fc1dafd0010f4c0a23db2aa472d0dc2a8f3492",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/67fc1dafd0010f4c0a23db2aa472d0dc2a8f3492",
        "files": [
          "src/v8_typed_array.cc",
          "test/common.js",
          "test/simple/test-typed-arrays.js"
        ],
        "message": "typed arrays: add Uint8ClampedArray",
        "before_after_code_files": [
          "src/v8_typed_array.cc||src/v8_typed_array.cc",
          "test/common.js||test/common.js",
          "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:         reinterpret_cast<float*>(ptr)[index] = (float) args[1]->NumberValue();",
          "340:       else if (TEAType == v8::kExternalDoubleArray)",
          "341:         reinterpret_cast<double*>(ptr)[index] = (double) args[1]->NumberValue();",
          "342:     } else if (args[0]->IsObject()) {",
          "343:       v8::Handle<v8::Object> obj = v8::Handle<v8::Object>::Cast(args[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:       else if (TEAType == v8::kExternalPixelArray) {",
          "343:         int value = args[1]->Int32Value();",
          "344:         if (value < 0)",
          "345:           value = 0;",
          "346:         else if (value > 255)",
          "347:           value = 255;",
          "348:         reinterpret_cast<unsigned char*>(ptr)[index] =",
          "349:             (unsigned char) value;",
          "350:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:       case v8::kExternalUnsignedIntArray: return \"Uint32Array\";",
          "440:       case v8::kExternalFloatArray: return \"Float32Array\";",
          "441:       case v8::kExternalDoubleArray: return \"Float64Array\";",
          "442:     }",
          "443:     abort();",
          "444:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:       case v8::kExternalPixelArray: return \"Uint8ClampedArray\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447: class Int8Array : public TypedArray<1, v8::kExternalByteArray> { };",
          "448: class Uint8Array : public TypedArray<1, v8::kExternalUnsignedByteArray> { };",
          "449: class Int16Array : public TypedArray<2, v8::kExternalShortArray> { };",
          "450: class Uint16Array : public TypedArray<2, v8::kExternalUnsignedShortArray> { };",
          "451: class Int32Array : public TypedArray<4, v8::kExternalIntArray> { };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459: class Uint8ClampedArray : public TypedArray<1, v8::kExternalPixelArray> { };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "799:            Int8Array::GetTemplate()->GetFunction());",
          "800:   obj->Set(v8::String::New(\"Uint8Array\"),",
          "801:            Uint8Array::GetTemplate()->GetFunction());",
          "802:   obj->Set(v8::String::New(\"Int16Array\"),",
          "803:            Int16Array::GetTemplate()->GetFunction());",
          "804:   obj->Set(v8::String::New(\"Uint16Array\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813:   obj->Set(v8::String::New(\"Uint8ClampedArray\"),",
          "814:            Uint8ClampedArray::GetTemplate()->GetFunction());",
          "",
          "---------------"
        ],
        "test/common.js||test/common.js": [
          "File: test/common.js -> test/common.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     knownGlobals.push(ArrayBuffer);",
          "112:     knownGlobals.push(Int8Array);",
          "113:     knownGlobals.push(Uint8Array);",
          "114:     knownGlobals.push(Int16Array);",
          "115:     knownGlobals.push(Uint16Array);",
          "116:     knownGlobals.push(Int32Array);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     knownGlobals.push(Uint8ClampedArray);",
          "",
          "---------------"
        ],
        "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js": [
          "File: test/simple/test-typed-arrays.js -> test/simple/test-typed-arrays.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   'Int32Array',",
          "38:   'Uint32Array',",
          "39:   'Float32Array',",
          "41: ].forEach(function(name) {",
          "42:   var expected = '[object ' + name + ']';",
          "43:   var clazz = global[name];",
          "",
          "[Removed Lines]",
          "40:   'Float64Array'",
          "",
          "[Added Lines]",
          "40:   'Float64Array',",
          "41:   'Uint8ClampedArray'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: assert.equal(uint8.get(1), 0x09);",
          "146: assert.equal(uint8.get(2), 0x0a);",
          "147: assert.equal(uint8.get(3), 0x0b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: var uint8c = new Uint8ClampedArray(buffer);",
          "152: uint8c[0] = -1;",
          "153: uint8c[1] = 257;",
          "155: assert.equal(uint8c[0], 0);",
          "156: assert.equal(uint8c[1], 255);",
          "158: uint8c.set(0, -10);",
          "159: uint8c.set(1, 260);",
          "161: assert.equal(uint8c[0], 0);",
          "162: assert.equal(uint8c[1], 255);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c0c00a2052ec613503a0322dcbabb6fcf41dab0",
      "candidate_info": {
        "commit_hash": "6c0c00a2052ec613503a0322dcbabb6fcf41dab0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6c0c00a2052ec613503a0322dcbabb6fcf41dab0",
        "files": [
          "src/node.h"
        ],
        "message": "fix windows build",
        "before_after_code_files": [
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #include <node_object_wrap.h>",
          "69: #ifndef offset_of",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #if defined(_MSC_VER)",
          "70: #undef interface",
          "71: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "badbd1af27f5f3fd07862b8ee7d0810e7ae9ef56",
      "candidate_info": {
        "commit_hash": "badbd1af27f5f3fd07862b8ee7d0810e7ae9ef56",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/badbd1af27f5f3fd07862b8ee7d0810e7ae9ef56",
        "files": [
          "doc/api/tls.markdown",
          "lib/tls.js"
        ],
        "message": "tls: update default cipher list\n\nUpdate the default cipher list from RC4-SHA:AES128-SHA:AES256-SHA\nto ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH\nin order to mitigate BEAST attacks.\n\nThe documentation suggested AES256-SHA but unfortunately that's a CBC cipher\nand therefore susceptible to attacks.\n\nFixes #3900.",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: var assert = require('assert').ok;",
          "30: var constants = require('constants');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1031:     passphrase: self.passphrase,",
          "1032:     cert: self.cert,",
          "1033:     ca: self.ca,",
          "1035:     secureProtocol: self.secureProtocol,",
          "1036:     secureOptions: self.secureOptions,",
          "1037:     crl: self.crl,",
          "",
          "[Removed Lines]",
          "1034:     ciphers: self.ciphers || 'RC4-SHA:AES128-SHA:AES256-SHA',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}