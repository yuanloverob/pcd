{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99490934aeac3111eb3043865d986d90d560ac71",
      "candidate_info": {
        "commit_hash": "99490934aeac3111eb3043865d986d90d560ac71",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99490934aeac3111eb3043865d986d90d560ac71",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Move variable declaration to address compilation issue (C89).\n\nFossilOrigin-Name: d64f248da3ce7762fe2c17fbc83f7bea9ffca73723bb3ad0982a85320839da90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4002790d9418289f3e090c694f651a89d8f523119c8ce2f396999b0387148241",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3905: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3906:     else",
          "3907:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3908:       int nData = 0;",
          "3909:       unsigned char *aData;",
          "3910:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3908:       int rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3916:           return;",
          "3917:         }",
          "3918:       }",
          "3920:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3921:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "3922:       if( rc ){",
          "",
          "[Removed Lines]",
          "3919:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "",
          "[Added Lines]",
          "3920:       rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afdc9e23fcacb2df2f80915730e34b3935fd2156",
      "candidate_info": {
        "commit_hash": "afdc9e23fcacb2df2f80915730e34b3935fd2156",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/afdc9e23fcacb2df2f80915730e34b3935fd2156",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3fuzz001.test"
        ],
        "message": "In FTS3, avoid calling memcpy() with a NULL source pointer, even if the transfer amount is zero bytes.\n\nFossilOrigin-Name: 1abb83d29a06308c96bea379311b390240347c5f81824749348d18ad75840c96",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1611:   if( iStartLeaf==0 ){",
          "1612:     nExtra = nRoot + FTS3_NODE_PADDING;",
          "1613:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1611:   assert( zRoot!=0 || nRoot==0 );",
          "1612: #ifdef CORRUPT_DB",
          "1613:   assert( zRoot!=0 || CORRUPT_DB );",
          "1614: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1628:     pReader->aNode = (char *)&pReader[1];",
          "1629:     pReader->rootOnly = 1;",
          "1630:     pReader->nNode = nRoot;",
          "1632:     memset(&pReader->aNode[nRoot], 0, FTS3_NODE_PADDING);",
          "1633:   }else{",
          "1634:     pReader->iCurrentBlock = iStartLeaf-1;",
          "",
          "[Removed Lines]",
          "1631:     memcpy(pReader->aNode, zRoot, nRoot);",
          "",
          "[Added Lines]",
          "1636:     if( nRoot ) memcpy(pReader->aNode, zRoot, nRoot);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dee3ae900129d39d69aff3ec6187376be100803ee6170bbf39529f37b4253260",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2012-12-21",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for corrupt database files.",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !deserialize||!fts3 {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "21: database_may_be_corrupt",
          "23: do_test fts3fuzz001-100 {",
          "24:   sqlite3 db {}",
          "25:   db deserialize [decode_hexdb {",
          "26: | size 24576 pagesize 4096 filename c6.db",
          "27: | page 1 offset 0",
          "28: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "29: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "30: |     32: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 04   ................",
          "31: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "32: |     96: 00 00 00 00 0d 0e f9 00 06 0d ec 00 0f cd 0f 69   ...............i",
          "33: |    112: 0f 01 0e 10 0e c6 0d ec 00 00 00 00 00 00 00 00   ................",
          "34: |   3552: 00 00 00 00 00 00 00 00 00 00 00 00 22 06 06 17   ............\"...",
          "35: |   3568: 11 11 01 31 74 61 62 6c 65 74 32 74 32 06 43 52   ...1tablet2t2.CR",
          "36: |   3584: 45 41 54 45 20 54 41 42 4c 45 20 74 32 28 78 29   EATE TABLE t2(x)",
          "37: |   3600: 81 33 04 07 17 1f 1f 01 82 35 74 61 62 6c 65 74   .3.......5tablet",
          "38: |   3616: 31 5f 73 65 67 64 69 72 74 31 5f 73 65 67 64 69   1_segdirt1_segdi",
          "39: |   3632: 72 04 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   r.CREATE TABLE '",
          "40: |   3648: 74 31 5f 73 65 67 64 69 72 27 28 6c 65 76 65 6c   t1_segdir'(level",
          "41: |   3664: 20 49 4e 54 45 47 45 52 2c 69 64 78 20 49 4e 54    INTEGER,idx INT",
          "42: |   3680: 45 47 45 52 2c 73 74 61 72 74 5f 62 6c 6f 63 6b   EGER,start_block",
          "43: |   3696: 20 49 4e 54 45 47 45 52 2c 6c 65 61 76 65 73 5f    INTEGER,leaves_",
          "44: |   3712: 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45   end_block INTEGE",
          "45: |   3728: 52 2c 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45   R,end_block INTE",
          "46: |   3744: 47 45 52 2c 72 6f 6f 74 20 42 4c 4f 42 2c 50 52   GER,root BLOB,PR",
          "47: |   3760: 49 4d 41 52 59 20 4b 45 59 28 6c 65 76 65 6c 2c   IMARY KEY(level,",
          "48: |   3776: 20 69 64 78 29 29 31 05 06 17 45 1f 01 00 69 6e    idx))1...E...in",
          "49: |   3792: 64 65 78 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e   dexsqlite_autoin",
          "50: |   3808: 64 65 78 5f 74 15 f7 36 56 76 46 97 25 f3 17 43   dex_t..6VvF.%..C",
          "51: |   3824: 15 5f 73 65 67 64 69 72 05 00 00 00 08 00 00 00   ._segdir........",
          "52: |   3840: 00 66 03 07 17 23 23 01 81 13 74 61 62 6c 65 74   .f...##...tablet",
          "53: |   3856: 31 5f 73 65 67 6d 65 6e 74 73 74 31 5f 73 65 67   1_segmentst1_seg",
          "54: |   3872: 6d 65 6e 74 73 03 43 52 45 41 54 45 20 54 41 42   ments.CREATE TAB",
          "55: |   3888: 4c 45 20 27 74 31 5f 73 65 67 6d 65 6e 74 73 27   LE 't1_segments'",
          "56: |   3904: 28 62 6c 6f 63 6b 69 64 20 49 4e 54 45 47 45 52   (blockid INTEGER",
          "57: |   3920: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62 6c    PRIMARY KEY, bl",
          "58: |   3936: 6f 63 6b 20 42 4c 4f 42 29 62 02 07 17 21 21 01   ock BLOB)b...!!.",
          "59: |   3952: 81 0f 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65 6e   ..tablet1_conten",
          "60: |   3968: 74 74 31 5f 63 6f 6e 74 65 6e 74 02 43 52 45 41   tt1_content.CREA",
          "61: |   3984: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "62: |   4000: 74 65 6e 74 27 28 64 6f 63 69 64 20 49 4e 54 45   tent'(docid INTE",
          "63: |   4016: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "64: |   4032: 20 27 63 30 63 6f 6e 74 65 6e 74 27 29 31 01 06    'c0content')1..",
          "65: |   4048: 17 11 11 08 51 74 61 62 6c 65 74 31 74 31 43 52   ....Qtablet1t1CR",
          "66: |   4064: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "67: |   4080: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "68: | page 2 offset 4096",
          "69: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "70: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "71: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "72: | page 3 offset 8192",
          "73: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "74: | page 4 offset 12288",
          "75: |      0: 0d 00 00 00 01 0f d6 00 0f 00 00 00 00 00 00 00   ................",
          "76: |   4048: 00 00 00 00 00 00 28 01 07 08 08 08 08 15 46 30   ......(.......F0",
          "77: |   4064: 20 32 39 00 05 61 62 61 63 6b 03 01 02 00 03 02    29..aback......",
          "78: |   4080: 66 74 03 02 02 00 03 04 6e 64 6f 6e 03 03 02 00   ft......ndon....",
          "79: | page 5 offset 16384",
          "80: |      0: 0a 00 00 00 01 0f fb 00 0f fb 00 00 00 00 00 00   ................",
          "81: |   4080: 00 00 00 00 00 00 00 00 00 00 00 04 04 08 08 09   ................",
          "82: | page 6 offset 20480",
          "83: |      0: 0d 00 00 00 05 0f b8 00 0f f4 0f e9 0f d6 0f c7   ................",
          "84: |     16: 0f b8 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "85: |   4016: 00 00 00 00 00 00 00 00 0d 05 02 23 61 75 74 6f   ...........#auto",
          "86: |   4032: 6d 65 72 67 65 3d 35 0d 04 02 23 6d 65 72 67 65   merge=5...#merge",
          "87: |   4048: 3d 31 30 30 2c 38 11 03 02 2b 69 6e 74 65 67 72   =100,8...+integr",
          "88: |   4064: 69 74 79 3d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity=check....reb",
          "89: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   uild....optimize",
          "90: | end c6.db",
          "91:   }]",
          "92:   catchsql {",
          "93:     INSERT INTO t1(t1) SELECT x FROM t2;",
          "94:   }",
          "95: } {1 {database disk image is malformed}}",
          "96: do_test fts3fuzz001-110 {",
          "97:   catchsql {",
          "98:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "99:   }",
          "100: } {1 {database disk image is malformed}}",
          "101: do_test fts3fuzz001-120 {",
          "102:   catchsql {",
          "103:     INSERT INTO t1(t1) VALUES('optimize');",
          "104:   }",
          "105: } {0 {}}",
          "106: do_test fts3fuzz001-121 {",
          "107:   catchsql {",
          "108:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "109:   }",
          "110: } {1 {database disk image is malformed}}",
          "113: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e72d1a8682ba69f163ed022178a286e69406ef40",
      "candidate_info": {
        "commit_hash": "e72d1a8682ba69f163ed022178a286e69406ef40",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e72d1a8682ba69f163ed022178a286e69406ef40",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Fix a harmless use-of-initialized-value fault in the assert() logic added by check-in [d612fb7873cf59d]\n\nFossilOrigin-Name: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dff823ca8b5ca4a5611407b0231f89b2e8c981f50e85e361e76d3e4973cea8ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   if( p->flags & MEM_Term ){",
          "151:       assert( p->enc==SQLITE_UTF8 || p->szMalloc >= ((p->n+1)&~1)+2 );",
          "152:       assert( p->enc!=SQLITE_UTF8 || p->szMalloc >= p->n+1 );",
          "153:     }",
          "",
          "[Removed Lines]",
          "150:     if( p->z==p->zMalloc && p->szMalloc>0 ){",
          "",
          "[Added Lines]",
          "150:     if( p->szMalloc>0 && p->z==p->zMalloc ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8117f113bc0468d4c955ffa3f04cea26a39a3bd3",
      "candidate_info": {
        "commit_hash": "8117f113bc0468d4c955ffa3f04cea26a39a3bd3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8117f113bc0468d4c955ffa3f04cea26a39a3bd3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/walker.c"
        ],
        "message": "Minor performance improvement in sqlite3ExprDeleteNN().\n\nFossilOrigin-Name: bcc8b38ac75b731a4cd2873ab83f423be036467a511b617c779869de9bbb5383",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7a1e30a17f57ca006dd84b6f97b0c7811bf4c6da4b02903452ffc4bc363cab9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1043:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1044:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1045:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1049: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1057: #endif",
          "1058:   }",
          "1059:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "1060:   if( !ExprHasProperty(p, EP_Static) ){",
          "",
          "[Removed Lines]",
          "1048:     }",
          "1050:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1051:       assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1052:       sqlite3WindowDelete(db, p->y.pWin);",
          "1053:     }else if( ExprHasProperty(p, EP_Filter) ){",
          "1054:       assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1055:       sqlite3ExprDelete(db, p->y.pFilter);",
          "1056:     }",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1046:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1051:       if( ExprHasProperty(p, (EP_WinFunc|EP_Filter)) ){",
          "1052:         if( ExprHasProperty(p, EP_WinFunc) ){",
          "1053:           assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1054:           sqlite3WindowDelete(db, p->y.pWin);",
          "1055:         }else{",
          "1056:           assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1057:           sqlite3ExprDeleteNN(db, p->y.pFilter);",
          "1058:         }",
          "1059:       }",
          "1061:     }",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "830:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "831:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "832:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "833:         );",
          "835:           sqlite3ErrorMsg(pParse,",
          "836:               \"%.*s() may not be used as a window function\", nId, zId",
          "837:           );",
          "838:           pNC->nErr++;",
          "839:         }else if(",
          "840:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "843:         ){",
          "844:           const char *zType;",
          "846:             zType = \"window\";",
          "847:           }else{",
          "848:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "829:         int is_win = ExprHasProperty(pExpr, EP_WinFunc);",
          "834:         if( pDef && pDef->xValue==0 && is_win ){",
          "841:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !is_win)",
          "842:            || (is_agg && is_win && (pNC->ncFlags & NC_AllowWin)==0)",
          "845:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || is_win ){",
          "",
          "[Added Lines]",
          "829:         Window *pWin = (ExprHasProperty(pExpr, EP_WinFunc) ? pExpr->y.pWin : 0);",
          "834:         if( pDef && pDef->xValue==0 && pWin ){",
          "841:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pWin)",
          "842:            || (is_agg && pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "845:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pWin ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "883: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "885: #else",
          "886:           pNC->ncFlags &= ~NC_AllowAgg;",
          "887: #endif",
          "",
          "[Removed Lines]",
          "884:           pNC->ncFlags &= ~(NC_AllowWin | (!is_win ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "884:           pNC->ncFlags &= ~(NC_AllowWin | (!pWin ? NC_AllowAgg : 0));",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "66:         pExpr = pExpr->pRight;",
          "67:         continue;",
          "68:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "69:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "73: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "80: #endif",
          "81:     }",
          "82:     break;",
          "83:   }",
          "",
          "[Removed Lines]",
          "70:       }else if( pExpr->x.pList ){",
          "71:         if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "72:       }",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "77:       if( ExprHasProperty(pExpr, EP_Filter) ){",
          "78:         if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "79:       }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) ){",
          "78:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "79:             if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "80:           }else if( ExprHasProperty(pExpr, EP_Filter) ){",
          "81:             if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "82:           }",
          "83:         }",
          "85:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
      "candidate_info": {
        "commit_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/wherecode.c"
        ],
        "message": "Strive to prevent harmless compiler warnings in GCC 4.8.5.\n\nFossilOrigin-Name: 8b6691f619ed9a56f6aecbd878ebb447c40984f8767508b248494fd9ec68fbaa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82062351a62f4ccc438a2b47a22ee581bd030dec952fecd610f360a25002a5ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7989:       while( i==cntOldNext ){",
          "7990:         iOld++;",
          "7991:         assert( iOld<nNew || iOld<nOld );",
          "7992:         pOld = iOld<nNew ? apNew[iOld] : apOld[iOld];",
          "7993:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7994:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7992:         assert( iOld>=0 && iOld<NB );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:     sqlite3VdbeGoto(v, pLevel->addrBrk);",
          "2116:     sqlite3VdbeResolveLabel(v, iLoopBody);",
          "2119:     if( !untestedTerms ) disableTerm(pLevel, pTerm);",
          "2120:   }else",
          "",
          "[Removed Lines]",
          "2118:     if( pWInfo->nLevel>1 ) sqlite3StackFree(db, pOrTab);",
          "",
          "[Added Lines]",
          "2118:     if( pWInfo->nLevel>1 ){ sqlite3StackFree(db, pOrTab); }",
          "",
          "---------------"
        ]
      }
    }
  ]
}