{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
      "candidate_info": {
        "commit_hash": "e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Make sure the extra bytes allocated for the saved cursor position by check-in [160b1e31c0f27257] are initialized to zero.\n\nFossilOrigin-Name: 2737564929e86ead84a3ff6512369268198d38b46e3e02866f8ce34babc76cb9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e12fa2a8eb5648a96cc2d8d39899d6f87c5e2269cec7de486964c8b915e724",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:     if( pKey ){",
          "673:       rc = sqlite3BtreePayload(pCur, 0, (int)pCur->nKey, pKey);",
          "674:       if( rc==SQLITE_OK ){",
          "675:         pCur->pKey = pKey;",
          "676:       }else{",
          "677:         sqlite3_free(pKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675:         memset(((u8*)pKey)+pCur->nKey, 0, 9+8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
      "candidate_info": {
        "commit_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Trivial performance improvement for balance().\n\nFossilOrigin-Name: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
      "candidate_info": {
        "commit_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/594b124f216641e7d6df059cca84c45d4f0ab393",
        "files": [
          "ext/misc/sha1.c",
          "manifest",
          "manifest.uuid",
          "src/hwtime.h",
          "tool/dbhash.c"
        ],
        "message": "Changes to extensions and test logic so that the build works with gcc and with -std=iso9899:1999\n\nFossilOrigin-Name: 2575a68c3965e72f2ab211d933012442755afe6a9b7de9e9e50cdd2155fd1ec8",
        "before_after_code_files": [
          "ext/misc/sha1.c||ext/misc/sha1.c",
          "manifest.uuid||manifest.uuid",
          "src/hwtime.h||src/hwtime.h",
          "tool/dbhash.c||tool/dbhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/sha1.c||ext/misc/sha1.c": [
          "File: ext/misc/sha1.c -> ext/misc/sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   unsigned char buffer[64];",
          "40: };",
          "56: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "57: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "58: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "62: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "63:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "43: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "49: #define SHA_ROT(op, x, k) \\",
          "50:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "51: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "52: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "54: #else",
          "59: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a48f6e17599d7ec794cfcd60858d6a69cf05caaae9321048b111fedd86a3b5b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hwtime.h||src/hwtime.h": [
          "File: src/hwtime.h -> src/hwtime.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   #if defined(__GNUC__)",
          "",
          "[Removed Lines]",
          "25: #if (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "26:       (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "[Added Lines]",
          "25: #if !defined(__STRICT_ANSI__) && \\",
          "26:     (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "27:     (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   #endif",
          "49:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "50:       unsigned long val;",
          "",
          "[Removed Lines]",
          "47: #elif (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "[Added Lines]",
          "48: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:       return val;",
          "53:   }",
          "57:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "58:       unsigned long long retval;",
          "",
          "[Removed Lines]",
          "55: #elif (defined(__GNUC__) && defined(__ppc__))",
          "",
          "[Added Lines]",
          "56: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__ppc__))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70: #else",
          "81:   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }",
          "",
          "[Removed Lines]",
          "72:   #error Need implementation of sqlite3Hwtime() for your platform.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbhash.c||tool/dbhash.c": [
          "File: tool/dbhash.c -> tool/dbhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "79: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "80: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "84: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "85:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "65: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "71: #define SHA_ROT(op, x, k) \\",
          "72:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "73: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "74: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "76: #else",
          "81: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd668c26b5d7a7526638e39239844e01a1d251e0",
      "candidate_info": {
        "commit_hash": "dd668c26b5d7a7526638e39239844e01a1d251e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd668c26b5d7a7526638e39239844e01a1d251e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "When applying the IN_INDEX_NOOP optimization and the LHS has REAL affinity, also apply REAL affinity to each element of the RHS. Ticket [2841e99d104c6436].\n\nFossilOrigin-Name: 88833a9c2849c959a37a80e0e4d2b211ce3c83a48319724c89b172b060c876b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0c946f0846b2835f8facca806a4d4ecc2b2e97343de245a0d91716d998b2a829",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3124:     int r2, regToFree;",
          "3125:     int regCkNull = 0;",
          "3126:     int ii;",
          "3127:     assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "3128:     if( destIfNull!=destIfFalse ){",
          "3129:       regCkNull = sqlite3GetTempReg(pParse);",
          "3130:       sqlite3VdbeAddOp3(v, OP_BitAnd, rLhs, rLhs, regCkNull);",
          "3131:     }",
          "3132:     for(ii=0; ii<pList->nExpr; ii++){",
          "3133:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "3134:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3135:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3136:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3133:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3136:       if( bLhsReal ){",
          "3137:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3138:       }",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:   SELECT * FROM t0 WHERE '1' IN (t0.c0);",
          "760: } {}",
          "763: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762: # 2019-09-02 ticket https://www.sqlite.org/src/info/2841e99d104c6436",
          "763: # For the IN_INDEX_NOOP optimization, apply REAL affinity to the LHS",
          "764: # values prior to comparison if the RHS has REAL affinity.",
          "765: #",
          "766: do_execsql_test in-19.1 {",
          "767:   DROP TABLE IF EXISTS t0;",
          "768:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "769:   INSERT INTO t0(c0) VALUES(2.07093491255203046E18);",
          "770:   SELECT 1 FROM t0 WHERE c0 IN ('2070934912552030444');",
          "771: } {1}",
          "772: do_execsql_test in-19.2 {",
          "773:   SELECT c0 IN ('2070934912552030444') FROM t0;",
          "774: } {1}",
          "775: do_execsql_test in-19.3 {",
          "776:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "777: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "922b35801d8bdbb9365cbde7d44e66293f616e13",
      "candidate_info": {
        "commit_hash": "922b35801d8bdbb9365cbde7d44e66293f616e13",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/922b35801d8bdbb9365cbde7d44e66293f616e13",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_journal.c"
        ],
        "message": "Update an assert() in test_journal.c to take the new \"VACUUM INTO\" functionality into account.\n\nFossilOrigin-Name: 0e6249cb958a40ead0edf6e75a2c46e8657db3d358c5fe78a9dc0fa5ed7ad929",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_journal.c||src/test_journal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d54a63d6e3cd47b483cf0ee868a5e7f638bcb0e3cbdeaecc667f293b87a3e99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_journal.c||src/test_journal.c": [
          "File: src/test_journal.c -> src/test_journal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:       assert( pgno>p->nPage || sqlite3BitvecTest(p->pWritable, pgno) );",
          "565:     }",
          "566:   }",
          "",
          "[Removed Lines]",
          "563:       assert( pgno<=p->nPage || p->nSync>0 );",
          "",
          "[Added Lines]",
          "563:       assert( p->nPage==0 || pgno<=p->nPage || p->nSync>0 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}