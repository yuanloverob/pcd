{
  "cve_id": "CVE-2018-10021",
  "cve_desc": "drivers/scsi/libsas/sas_scsi_host.c in the Linux kernel before 4.16 allows local users to cause a denial of service (ata qc leak) by triggering certain failure conditions. NOTE: a third party disputes the relevance of this report because the failure can only occur for physically proximate attackers who unplug SAS Host Bus Adapter cables",
  "repo": "torvalds/linux",
  "patch_hash": "318aaf34f1179b39fa9c30fa0f3288b645beee39",
  "patch_info": {
    "commit_hash": "318aaf34f1179b39fa9c30fa0f3288b645beee39",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/318aaf34f1179b39fa9c30fa0f3288b645beee39",
    "files": [
      "drivers/scsi/libsas/sas_scsi_host.c"
    ],
    "message": "scsi: libsas: defer ata device eh commands to libata\n\nWhen ata device doing EH, some commands still attached with tasks are\nnot passed to libata when abort failed or recover failed, so libata did\nnot handle these commands. After these commands done, sas task is freed,\nbut ata qc is not freed. This will cause ata qc leak and trigger a\nwarning like below:\n\nWARNING: CPU: 0 PID: 28512 at drivers/ata/libata-eh.c:4037\nata_eh_finish+0xb4/0xcc\nCPU: 0 PID: 28512 Comm: kworker/u32:2 Tainted: G     W  OE 4.14.0#1\n......\nCall trace:\n[<ffff0000088b7bd0>] ata_eh_finish+0xb4/0xcc\n[<ffff0000088b8420>] ata_do_eh+0xc4/0xd8\n[<ffff0000088b8478>] ata_std_error_handler+0x44/0x8c\n[<ffff0000088b8068>] ata_scsi_port_error_handler+0x480/0x694\n[<ffff000008875fc4>] async_sas_ata_eh+0x4c/0x80\n[<ffff0000080f6be8>] async_run_entry_fn+0x4c/0x170\n[<ffff0000080ebd70>] process_one_work+0x144/0x390\n[<ffff0000080ec100>] worker_thread+0x144/0x418\n[<ffff0000080f2c98>] kthread+0x10c/0x138\n[<ffff0000080855dc>] ret_from_fork+0x10/0x18\n\nIf ata qc leaked too many, ata tag allocation will fail and io blocked\nfor ever.\n\nAs suggested by Dan Williams, defer ata device commands to libata and\nmerge sas_eh_finish_cmd() with sas_eh_defer_cmd(). libata will handle\nata qcs correctly after this.\n\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nCC: Xiaofei Tan <tanxiaofei@huawei.com>\nCC: John Garry <john.garry@huawei.com>\nCC: Dan Williams <dan.j.williams@intel.com>\nReviewed-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_scsi_host.c||drivers/scsi/libsas/sas_scsi_host.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_scsi_host.c||drivers/scsi/libsas/sas_scsi_host.c": [
      "File: drivers/scsi/libsas/sas_scsi_host.c -> drivers/scsi/libsas/sas_scsi_host.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "223: static void sas_eh_finish_cmd(struct scsi_cmnd *cmd)",
      "224: {",
      "225:  struct sas_ha_struct *sas_ha = SHOST_TO_SAS_HA(cmd->device->host);",
      "226:  struct sas_task *task = TO_SAS_TASK(cmd);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:  struct domain_device *dev = cmd_to_domain_dev(cmd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:  sas_end_task(cmd, task);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "235:  if (dev_is_sata(dev)) {",
      "239:   list_move_tail(&cmd->eh_entry, &sas_ha->eh_ata_q);",
      "240:   return;",
      "241:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "238:  scsi_eh_finish_cmd(cmd, &sas_ha->eh_done_q);",
      "239: }",
      "257: static void sas_scsi_clear_queue_lu(struct list_head *error_q, struct scsi_cmnd *my_cmd)",
      "258: {",
      "259:  struct scsi_cmnd *cmd, *n;",
      "",
      "[Removed Lines]",
      "241: static void sas_eh_defer_cmd(struct scsi_cmnd *cmd)",
      "242: {",
      "243:  struct domain_device *dev = cmd_to_domain_dev(cmd);",
      "244:  struct sas_ha_struct *ha = dev->port->ha;",
      "245:  struct sas_task *task = TO_SAS_TASK(cmd);",
      "247:  if (!dev_is_sata(dev)) {",
      "248:   sas_eh_finish_cmd(cmd);",
      "249:   return;",
      "250:  }",
      "253:  sas_end_task(cmd, task);",
      "254:  list_move_tail(&cmd->eh_entry, &ha->eh_ata_q);",
      "255: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "261:  list_for_each_entry_safe(cmd, n, error_q, eh_entry) {",
      "262:   if (cmd->device->sdev_target == my_cmd->device->sdev_target &&",
      "263:       cmd->device->lun == my_cmd->device->lun)",
      "265:  }",
      "266: }",
      "",
      "[Removed Lines]",
      "264:    sas_eh_defer_cmd(cmd);",
      "",
      "[Added Lines]",
      "257:    sas_eh_finish_cmd(cmd);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "618:   case TASK_IS_DONE:",
      "619:    SAS_DPRINTK(\"%s: task 0x%p is done\\n\", __func__,",
      "620:         task);",
      "622:    continue;",
      "623:   case TASK_IS_ABORTED:",
      "624:    SAS_DPRINTK(\"%s: task 0x%p is aborted\\n\",",
      "625:         __func__, task);",
      "627:    continue;",
      "628:   case TASK_IS_AT_LU:",
      "629:    SAS_DPRINTK(\"task 0x%p is at LU: lu recover\\n\", task);",
      "",
      "[Removed Lines]",
      "621:    sas_eh_defer_cmd(cmd);",
      "626:    sas_eh_defer_cmd(cmd);",
      "",
      "[Added Lines]",
      "614:    sas_eh_finish_cmd(cmd);",
      "619:    sas_eh_finish_cmd(cmd);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "634:          \"recovered\\n\",",
      "635:          SAS_ADDR(task->dev),",
      "636:          cmd->device->lun);",
      "638:     sas_scsi_clear_queue_lu(work_q, cmd);",
      "639:     goto Again;",
      "640:    }",
      "",
      "[Removed Lines]",
      "637:     sas_eh_defer_cmd(cmd);",
      "",
      "[Added Lines]",
      "630:     sas_eh_finish_cmd(cmd);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b31a2fa1e8f7bc6c2a474b4a12dad7a145cf83d",
      "candidate_info": {
        "commit_hash": "6b31a2fa1e8f7bc6c2a474b4a12dad7a145cf83d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6b31a2fa1e8f7bc6c2a474b4a12dad7a145cf83d",
        "files": [
          "drivers/firmware/efi/arm-runtime.c"
        ],
        "message": "efi/arm*: Only register page tables when they exist\n\nCurrently the arm/arm64 runtime code registers the runtime servies\npagetables with ptdump regardless of whether runtime services page\ntables have been created.\n\nAs efi_mm.pgd is NULL in these cases, attempting to dump the efi page\ntables results in a NULL pointer dereference in the ptdump code:\n\n/sys/kernel/debug# cat efi_page_tables\n[  479.522600] Unable to handle kernel NULL pointer dereference at virtual address 00000000\n[  479.522715] Mem abort info:\n[  479.522764]   ESR = 0x96000006\n[  479.522850]   Exception class = DABT (current EL), IL = 32 bits\n[  479.522899]   SET = 0, FnV = 0\n[  479.522937]   EA = 0, S1PTW = 0\n[  479.528200] Data abort info:\n[  479.528230]   ISV = 0, ISS = 0x00000006\n[  479.528317]   CM = 0, WnR = 0\n[  479.528317] user pgtable: 4k pages, 48-bit VAs, pgd = 0000000064ab0cb0\n[  479.528449] [0000000000000000] *pgd=00000000fbbe4003, *pud=00000000fb66e003, *pmd=0000000000000000\n[  479.528600] Internal error: Oops: 96000006 [#1] PREEMPT SMP\n[  479.528664] Modules linked in:\n[  479.528699] CPU: 0 PID: 2457 Comm: cat Not tainted 4.15.0-rc3-00065-g2ad2ee7ecb5c-dirty #7\n[  479.528799] Hardware name: FVP Base (DT)\n[  479.528899] pstate: 00400009 (nzcv daif +PAN -UAO)\n[  479.528941] pc : walk_pgd.isra.1+0x20/0x1d0\n[  479.529011] lr : ptdump_walk_pgd+0x30/0x50\n[  479.529105] sp : ffff00000bf4bc20\n[  479.529185] x29: ffff00000bf4bc20 x28: 0000ffff9d22e000\n[  479.529271] x27: 0000000000020000 x26: ffff80007b4c63c0\n[  479.529358] x25: 00000000014000c0 x24: ffff80007c098900\n[  479.529445] x23: ffff00000bf4beb8 x22: 0000000000000000\n[  479.529532] x21: ffff00000bf4bd70 x20: 0000000000000001\n[  479.529618] x19: ffff00000bf4bcb0 x18: 0000000000000000\n[  479.529760] x17: 000000000041a1c8 x16: ffff0000082139d8\n[  479.529800] x15: 0000ffff9d3c6030 x14: 0000ffff9d2527f4\n[  479.529924] x13: 00000000000003f3 x12: 0000000000000038\n[  479.530000] x11: 0000000000000003 x10: 0101010101010101\n[  479.530099] x9 : 0000000017e94050 x8 : 000000000000003f\n[  479.530226] x7 : 0000000000000000 x6 : 0000000000000000\n[  479.530313] x5 : 0000000000000001 x4 : 0000000000000000\n[  479.530416] x3 : ffff000009069fd8 x2 : 0000000000000000\n[  479.530500] x1 : 0000000000000000 x0 : 0000000000000000\n[  479.530599] Process cat (pid: 2457, stack limit = 0x000000005d1b0e6f)\n[  479.530660] Call trace:\n[  479.530746]  walk_pgd.isra.1+0x20/0x1d0\n[  479.530833]  ptdump_walk_pgd+0x30/0x50\n[  479.530907]  ptdump_show+0x10/0x20\n[  479.530920]  seq_read+0xc8/0x470\n[  479.531023]  full_proxy_read+0x60/0x90\n[  479.531100]  __vfs_read+0x18/0x100\n[  479.531180]  vfs_read+0x88/0x160\n[  479.531267]  SyS_read+0x48/0xb0\n[  479.531299]  el0_svc_naked+0x20/0x24\n[  479.531400] Code: 91400420 f90033a0 a90707a2 f9403fa0 (f9400000)\n[  479.531499] ---[ end trace bfe8e28d8acb2b67 ]---\nSegmentation fault\n\nLet's avoid this problem by only registering the tables after their\nsuccessful creation, which is also less confusing when EFI runtime\nservices are not in use.\n\nReported-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nSigned-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>\nAcked-by: Will Deacon <will.deacon@arm.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Matt Fleming <matt@codeblueprint.co.uk>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-efi@vger.kernel.org\nLink: http://lkml.kernel.org/r/20180308080020.22828-2-ard.biesheuvel@linaro.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "drivers/firmware/efi/arm-runtime.c||drivers/firmware/efi/arm-runtime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/firmware/efi/arm-runtime.c||drivers/firmware/efi/arm-runtime.c": [
          "File: drivers/firmware/efi/arm-runtime.c -> drivers/firmware/efi/arm-runtime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: static int __init ptdump_init(void)",
          "56: {",
          "57:  return ptdump_debugfs_register(&efi_ptdump_info, \"efi_page_tables\");",
          "58: }",
          "59: device_initcall(ptdump_init);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:  if (!efi_enabled(EFI_RUNTIME_SERVICES))",
          "58:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9f4c6cf53bfafb639386a4c094929f13f573e04",
      "candidate_info": {
        "commit_hash": "c9f4c6cf53bfafb639386a4c094929f13f573e04",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c9f4c6cf53bfafb639386a4c094929f13f573e04",
        "files": [
          "net/smc/smc_ib.c",
          "net/smc/smc_wr.h"
        ],
        "message": "net/smc: pay attention to MAX_ORDER for CQ entries\n\nsmc allocates a certain number of CQ entries for used RoCE devices. For\nmlx5 devices the chosen constant number results in a large allocation\ncausing this warning:\n\n[13355.124656] WARNING: CPU: 3 PID: 16535 at mm/page_alloc.c:3883 __alloc_pages_nodemask+0x2be/0x10c0\n[13355.124657] Modules linked in: smc_diag(O) smc(O) xt_CHECKSUM iptable_mangle ipt_MASQUERADE nf_nat_masquerade_ipv4 iptable_nat nf_nat_ipv4 nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 xt_conntrack nf_conntrack ipt_REJECT nf_reject_ipv4 xt_tcpudp bridge stp llc ip6table_filter ip6_tables iptable_filter mlx5_ib ib_core sunrpc mlx5_core s390_trng rng_core ghash_s390 prng aes_s390 des_s390 des_generic sha512_s390 sha256_s390 sha1_s390 sha_common ptp pps_core eadm_sch dm_multipath dm_mod vhost_net tun vhost tap sch_fq_codel kvm ip_tables x_tables autofs4 [last unloaded: smc]\n[13355.124672] CPU: 3 PID: 16535 Comm: kworker/3:0 Tainted: G           O    4.14.0uschi #1\n[13355.124673] Hardware name: IBM 3906 M04 704 (LPAR)\n[13355.124675] Workqueue: events smc_listen_work [smc]\n[13355.124677] task: 00000000e2f22100 task.stack: 0000000084720000\n[13355.124678] Krnl PSW : 0704c00180000000 000000000029da76 (__alloc_pages_nodemask+0x2be/0x10c0)\n[13355.124681]            R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:3 CC:0 PM:0 RI:0 EA:3\n[13355.124682] Krnl GPRS: 0000000000000000 00550e00014080c0 0000000000000000 0000000000000001\n[13355.124684]            000000000029d8b6 00000000f3bfd710 0000000000000000 00000000014080c0\n[13355.124685]            0000000000000009 00000000ec277a00 0000000000200000 0000000000000000\n[13355.124686]            0000000000000000 00000000000001ff 000000000029d8b6 0000000084723720\n[13355.124708] Krnl Code: 000000000029da6a: a7110200\t\ttmll\t%r1,512\n                          000000000029da6e: a774ff29\t\tbrc\t7,29d8c0\n                         #000000000029da72: a7f40001\t\tbrc\t15,29da74\n                         >000000000029da76: a7f4ff25\t\tbrc\t15,29d8c0\n                          000000000029da7a: a7380000\t\tlhi\t%r3,0\n                          000000000029da7e: a7f4fef1\t\tbrc\t15,29d860\n                          000000000029da82: 5820f0c4\t\tl\t%r2,196(%r15)\n                          000000000029da86: a53e0048\t\tllilh\t%r3,72\n[13355.124720] Call Trace:\n[13355.124722] ([<000000000029d8b6>] __alloc_pages_nodemask+0xfe/0x10c0)\n[13355.124724]  [<000000000013bd1e>] s390_dma_alloc+0x6e/0x148\n[13355.124733]  [<000003ff802eeba6>] mlx5_dma_zalloc_coherent_node+0x8e/0xe0 [mlx5_core]\n[13355.124740]  [<000003ff802eee18>] mlx5_buf_alloc_node+0x70/0x108 [mlx5_core]\n[13355.124744]  [<000003ff804eb410>] mlx5_ib_create_cq+0x558/0x898 [mlx5_ib]\n[13355.124749]  [<000003ff80407d40>] ib_create_cq+0x48/0x88 [ib_core]\n[13355.124751]  [<000003ff80109fba>] smc_ib_setup_per_ibdev+0x52/0x118 [smc]\n[13355.124753]  [<000003ff8010bcb6>] smc_conn_create+0x65e/0x728 [smc]\n[13355.124755]  [<000003ff801081a2>] smc_listen_work+0x2d2/0x540 [smc]\n[13355.124756]  [<0000000000162c66>] process_one_work+0x1be/0x440\n[13355.124758]  [<0000000000162f40>] worker_thread+0x58/0x458\n[13355.124759]  [<0000000000169e7e>] kthread+0x14e/0x168\n[13355.124760]  [<00000000009ce8be>] kernel_thread_starter+0x6/0xc\n[13355.124762]  [<00000000009ce8b8>] kernel_thread_starter+0x0/0xc\n[13355.124762] Last Breaking-Event-Address:\n[13355.124764]  [<000000000029da72>] __alloc_pages_nodemask+0x2ba/0x10c0\n[13355.124764] ---[ end trace 34be38b581c0b585 ]---\n\nThis patch reduces the smc constant for the maximum number of allocated\ncompletion queue entries SMC_MAX_CQE by 2 to avoid high round up values\nin the mlx5 code, and reduces the number of allocated completion queue\nentries even more, if the final allocation for an mlx5 device hits the\nMAX_ORDER limit.\n\nReported-by: Ihnken Menssen <menssen@de.ibm.com>\nSigned-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/smc/smc_ib.c||net/smc/smc_ib.c",
          "net/smc/smc_wr.h||net/smc/smc_wr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/smc/smc_ib.c||net/smc/smc_ib.c": [
          "File: net/smc/smc_ib.c -> net/smc/smc_ib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438: long smc_ib_setup_per_ibdev(struct smc_ib_device *smcibdev)",
          "439: {",
          "440:  struct ib_cq_init_attr cqattr = {",
          "442:  long rc;",
          "444:  smcibdev->roce_cq_send = ib_create_cq(smcibdev->ibdev,",
          "445:            smc_wr_tx_cq_handler, NULL,",
          "446:            smcibdev, &cqattr);",
          "",
          "[Removed Lines]",
          "441:   .cqe = SMC_WR_MAX_CQE, .comp_vector = 0 };",
          "",
          "[Added Lines]",
          "443:   .cqe = SMC_MAX_CQE, .comp_vector = 0 };",
          "444:  int cqe_size_order, smc_order;",
          "448:  cqe_size_order = cache_line_size() == 128 ? 7 : 6;",
          "449:  smc_order = MAX_ORDER - cqe_size_order - 1;",
          "450:  if (SMC_MAX_CQE + 2 > (0x00000001 << smc_order) * PAGE_SIZE)",
          "451:   cqattr.cqe = (0x00000001 << smc_order) * PAGE_SIZE - 2;",
          "",
          "---------------"
        ],
        "net/smc/smc_wr.h||net/smc/smc_wr.h": [
          "File: net/smc/smc_wr.h -> net/smc/smc_wr.h"
        ]
      }
    },
    {
      "candidate_hash": "7688f2c3bbf55e52388e37ac5d63ca471a7712e1",
      "candidate_info": {
        "commit_hash": "7688f2c3bbf55e52388e37ac5d63ca471a7712e1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7688f2c3bbf55e52388e37ac5d63ca471a7712e1",
        "files": [
          "drivers/infiniband/core/cma.c"
        ],
        "message": "RDMA/ucma: Fix access to non-initialized CM_ID object\n\nThe attempt to join multicast group without ensuring that CMA device\nexists will lead to the following crash reported by syzkaller.\n\n[   64.076794] BUG: KASAN: null-ptr-deref in rdma_join_multicast+0x26e/0x12c0\n[   64.076797] Read of size 8 at addr 00000000000000b0 by task join/691\n[   64.076797]\n[   64.076800] CPU: 1 PID: 691 Comm: join Not tainted 4.16.0-rc1-00219-gb97853b65b93 #23\n[   64.076802] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.0-0-g63451fca13-prebuilt.qemu-proj4\n[   64.076803] Call Trace:\n[   64.076809]  dump_stack+0x5c/0x77\n[   64.076817]  kasan_report+0x163/0x380\n[   64.085859]  ? rdma_join_multicast+0x26e/0x12c0\n[   64.086634]  rdma_join_multicast+0x26e/0x12c0\n[   64.087370]  ? rdma_disconnect+0xf0/0xf0\n[   64.088579]  ? __radix_tree_replace+0xc3/0x110\n[   64.089132]  ? node_tag_clear+0x81/0xb0\n[   64.089606]  ? idr_alloc_u32+0x12e/0x1a0\n[   64.090517]  ? __fprop_inc_percpu_max+0x150/0x150\n[   64.091768]  ? tracing_record_taskinfo+0x10/0xc0\n[   64.092340]  ? idr_alloc+0x76/0xc0\n[   64.092951]  ? idr_alloc_u32+0x1a0/0x1a0\n[   64.093632]  ? ucma_process_join+0x23d/0x460\n[   64.094510]  ucma_process_join+0x23d/0x460\n[   64.095199]  ? ucma_migrate_id+0x440/0x440\n[   64.095696]  ? futex_wake+0x10b/0x2a0\n[   64.096159]  ucma_join_multicast+0x88/0xe0\n[   64.096660]  ? ucma_process_join+0x460/0x460\n[   64.097540]  ? _copy_from_user+0x5e/0x90\n[   64.098017]  ucma_write+0x174/0x1f0\n[   64.098640]  ? ucma_resolve_route+0xf0/0xf0\n[   64.099343]  ? rb_erase_cached+0x6c7/0x7f0\n[   64.099839]  __vfs_write+0xc4/0x350\n[   64.100622]  ? perf_syscall_enter+0xe4/0x5f0\n[   64.101335]  ? kernel_read+0xa0/0xa0\n[   64.103525]  ? perf_sched_cb_inc+0xc0/0xc0\n[   64.105510]  ? syscall_exit_register+0x2a0/0x2a0\n[   64.107359]  ? __switch_to+0x351/0x640\n[   64.109285]  ? fsnotify+0x899/0x8f0\n[   64.111610]  ? fsnotify_unmount_inodes+0x170/0x170\n[   64.113876]  ? __fsnotify_update_child_dentry_flags+0x30/0x30\n[   64.115813]  ? ring_buffer_record_is_on+0xd/0x20\n[   64.117824]  ? __fget+0xa8/0xf0\n[   64.119869]  vfs_write+0xf7/0x280\n[   64.122001]  SyS_write+0xa1/0x120\n[   64.124213]  ? SyS_read+0x120/0x120\n[   64.126644]  ? SyS_read+0x120/0x120\n[   64.128563]  do_syscall_64+0xeb/0x250\n[   64.130732]  entry_SYSCALL_64_after_hwframe+0x21/0x86\n[   64.132984] RIP: 0033:0x7f5c994ade99\n[   64.135699] RSP: 002b:00007f5c99b97d98 EFLAGS: 00000246 ORIG_RAX: 0000000000000001\n[   64.138740] RAX: ffffffffffffffda RBX: 00000000200001e4 RCX: 00007f5c994ade99\n[   64.141056] RDX: 00000000000000a0 RSI: 00000000200001c0 RDI: 0000000000000015\n[   64.143536] RBP: 00007f5c99b97ec0 R08: 0000000000000000 R09: 0000000000000000\n[   64.146017] R10: 0000000000000000 R11: 0000000000000246 R12: 00007f5c99b97fc0\n[   64.148608] R13: 0000000000000000 R14: 00007fff660e1c40 R15: 00007f5c99b989c0\n[   64.151060]\n[   64.153703] Disabling lock debugging due to kernel taint\n[   64.156032] BUG: unable to handle kernel NULL pointer dereference at 00000000000000b0\n[   64.159066] IP: rdma_join_multicast+0x26e/0x12c0\n[   64.161451] PGD 80000001d0298067 P4D 80000001d0298067 PUD 1dea39067 PMD 0\n[   64.164442] Oops: 0000 [#1] SMP KASAN PTI\n[   64.166817] CPU: 1 PID: 691 Comm: join Tainted: G    B 4.16.0-rc1-00219-gb97853b65b93 #23\n[   64.170004] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.0-0-g63451fca13-prebuilt.qemu-proj4\n[   64.174985] RIP: 0010:rdma_join_multicast+0x26e/0x12c0\n[   64.177246] RSP: 0018:ffff8801c8207860 EFLAGS: 00010282\n[   64.179901] RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffff94789522\n[   64.183344] RDX: 1ffffffff2d50fa5 RSI: 0000000000000297 RDI: 0000000000000297\n[   64.186237] RBP: ffff8801c8207a50 R08: 0000000000000000 R09: ffffed0039040ea7\n[   64.189328] R10: 0000000000000001 R11: ffffed0039040ea6 R12: 0000000000000000\n[   64.192634] R13: 0000000000000000 R14: ffff8801e2022800 R15: ffff8801d4ac2400\n[   64.196105] FS:  00007f5c99b98700(0000) GS:ffff8801e5d00000(0000) knlGS:0000000000000000\n[   64.199211] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   64.202046] CR2: 00000000000000b0 CR3: 00000001d1c48004 CR4: 00000000003606a0\n[   64.205032] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[   64.208221] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[   64.211554] Call Trace:\n[   64.213464]  ? rdma_disconnect+0xf0/0xf0\n[   64.216124]  ? __radix_tree_replace+0xc3/0x110\n[   64.219337]  ? node_tag_clear+0x81/0xb0\n[   64.222140]  ? idr_alloc_u32+0x12e/0x1a0\n[   64.224422]  ? __fprop_inc_percpu_max+0x150/0x150\n[   64.226588]  ? tracing_record_taskinfo+0x10/0xc0\n[   64.229763]  ? idr_alloc+0x76/0xc0\n[   64.232186]  ? idr_alloc_u32+0x1a0/0x1a0\n[   64.234505]  ? ucma_process_join+0x23d/0x460\n[   64.237024]  ucma_process_join+0x23d/0x460\n[   64.240076]  ? ucma_migrate_id+0x440/0x440\n[   64.243284]  ? futex_wake+0x10b/0x2a0\n[   64.245302]  ucma_join_multicast+0x88/0xe0\n[   64.247783]  ? ucma_process_join+0x460/0x460\n[   64.250841]  ? _copy_from_user+0x5e/0x90\n[   64.253878]  ucma_write+0x174/0x1f0\n[   64.257008]  ? ucma_resolve_route+0xf0/0xf0\n[   64.259877]  ? rb_erase_cached+0x6c7/0x7f0\n[   64.262746]  __vfs_write+0xc4/0x350\n[   64.265537]  ? perf_syscall_enter+0xe4/0x5f0\n[   64.267792]  ? kernel_read+0xa0/0xa0\n[   64.270358]  ? perf_sched_cb_inc+0xc0/0xc0\n[   64.272575]  ? syscall_exit_register+0x2a0/0x2a0\n[   64.275367]  ? __switch_to+0x351/0x640\n[   64.277700]  ? fsnotify+0x899/0x8f0\n[   64.280530]  ? fsnotify_unmount_inodes+0x170/0x170\n[   64.283156]  ? __fsnotify_update_child_dentry_flags+0x30/0x30\n[   64.286182]  ? ring_buffer_record_is_on+0xd/0x20\n[   64.288749]  ? __fget+0xa8/0xf0\n[   64.291136]  vfs_write+0xf7/0x280\n[   64.292972]  SyS_write+0xa1/0x120\n[   64.294965]  ? SyS_read+0x120/0x120\n[   64.297474]  ? SyS_read+0x120/0x120\n[   64.299751]  do_syscall_64+0xeb/0x250\n[   64.301826]  entry_SYSCALL_64_after_hwframe+0x21/0x86\n[   64.304352] RIP: 0033:0x7f5c994ade99\n[   64.306711] RSP: 002b:00007f5c99b97d98 EFLAGS: 00000246 ORIG_RAX: 0000000000000001\n[   64.309577] RAX: ffffffffffffffda RBX: 00000000200001e4 RCX: 00007f5c994ade99\n[   64.312334] RDX: 00000000000000a0 RSI: 00000000200001c0 RDI: 0000000000000015\n[   64.315783] RBP: 00007f5c99b97ec0 R08: 0000000000000000 R09: 0000000000000000\n[   64.318365] R10: 0000000000000000 R11: 0000000000000246 R12: 00007f5c99b97fc0\n[   64.320980] R13: 0000000000000000 R14: 00007fff660e1c40 R15: 00007f5c99b989c0\n[   64.323515] Code: e8 e8 79 08 ff 4c 89 ff 45 0f b6 a7 b8 01 00 00 e8 68 7c 08 ff 49 8b 1f 4d 89 e5 49 c1 e4 04 48 8\n[   64.330753] RIP: rdma_join_multicast+0x26e/0x12c0 RSP: ffff8801c8207860\n[   64.332979] CR2: 00000000000000b0\n[   64.335550] ---[ end trace 0c00c17a408849c1 ]---\n\nReported-by: <syzbot+e6aba77967bd72cbc9d6@syzkaller.appspotmail.com>\nFixes: c8f6a362bf3e (\"RDMA/cma: Add multicast communication support\")\nSigned-off-by: Leon Romanovsky <leonro@mellanox.com>\nReviewed-by: Sean Hefty <sean.hefty@intel.com>\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/cma.c||drivers/infiniband/core/cma.c": [
          "File: drivers/infiniband/core/cma.c -> drivers/infiniband/core/cma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175:  struct cma_multicast *mc;",
          "4176:  int ret;",
          "4178:  id_priv = container_of(id, struct rdma_id_private, id);",
          "4179:  if (!cma_comp(id_priv, RDMA_CM_ADDR_BOUND) &&",
          "4180:      !cma_comp(id_priv, RDMA_CM_ADDR_RESOLVED))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178:  if (!id->device)",
          "4179:   return -EINVAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51d4740f88affd85d49c04e3c9cd129c0e33bcb9",
      "candidate_info": {
        "commit_hash": "51d4740f88affd85d49c04e3c9cd129c0e33bcb9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/51d4740f88affd85d49c04e3c9cd129c0e33bcb9",
        "files": [
          "net/sched/act_tunnel_key.c"
        ],
        "message": "net sched actions: return explicit error when tunnel_key mode is not specified\n\nIf set/unset mode of the tunnel_key action is not provided, ->init() still\nreturns 0, and the caller proceeds with bogus 'struct tc_action *' object,\nthis results in crash:\n\n% tc actions add action tunnel_key src_ip 1.1.1.1 dst_ip 2.2.2.1 id 7 index 1\n\n[   35.805515] general protection fault: 0000 [#1] SMP PTI\n[   35.806161] Modules linked in: act_tunnel_key kvm_intel kvm irqbypass\ncrct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64\ncrypto_simd glue_helper cryptd serio_raw\n[   35.808233] CPU: 1 PID: 428 Comm: tc Not tainted 4.16.0-rc4+ #286\n[   35.808929] RIP: 0010:tcf_action_init+0x90/0x190\n[   35.809457] RSP: 0018:ffffb8edc068b9a0 EFLAGS: 00010206\n[   35.810053] RAX: 1320c000000a0003 RBX: 0000000000000001 RCX: 0000000000000000\n[   35.810866] RDX: 0000000000000070 RSI: 0000000000007965 RDI: ffffb8edc068b910\n[   35.811660] RBP: ffffb8edc068b9d0 R08: 0000000000000000 R09: ffffb8edc068b808\n[   35.812463] R10: ffffffffc02bf040 R11: 0000000000000040 R12: ffffb8edc068bb38\n[   35.813235] R13: 0000000000000000 R14: 0000000000000000 R15: ffffb8edc068b910\n[   35.814006] FS:  00007f3d0d8556c0(0000) GS:ffff91d1dbc40000(0000)\nknlGS:0000000000000000\n[   35.814881] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   35.815540] CR2: 000000000043f720 CR3: 0000000019248001 CR4: 00000000001606a0\n[   35.816457] Call Trace:\n[   35.817158]  tc_ctl_action+0x11a/0x220\n[   35.817795]  rtnetlink_rcv_msg+0x23d/0x2e0\n[   35.818457]  ? __slab_alloc+0x1c/0x30\n[   35.819079]  ? __kmalloc_node_track_caller+0xb1/0x2b0\n[   35.819544]  ? rtnl_calcit.isra.30+0xe0/0xe0\n[   35.820231]  netlink_rcv_skb+0xce/0x100\n[   35.820744]  netlink_unicast+0x164/0x220\n[   35.821500]  netlink_sendmsg+0x293/0x370\n[   35.822040]  sock_sendmsg+0x30/0x40\n[   35.822508]  ___sys_sendmsg+0x2c5/0x2e0\n[   35.823149]  ? pagecache_get_page+0x27/0x220\n[   35.823714]  ? filemap_fault+0xa2/0x640\n[   35.824423]  ? page_add_file_rmap+0x108/0x200\n[   35.825065]  ? alloc_set_pte+0x2aa/0x530\n[   35.825585]  ? finish_fault+0x4e/0x70\n[   35.826140]  ? __handle_mm_fault+0xbc1/0x10d0\n[   35.826723]  ? __sys_sendmsg+0x41/0x70\n[   35.827230]  __sys_sendmsg+0x41/0x70\n[   35.827710]  do_syscall_64+0x68/0x120\n[   35.828195]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2\n[   35.828859] RIP: 0033:0x7f3d0ca4da67\n[   35.829331] RSP: 002b:00007ffc9f284338 EFLAGS: 00000246 ORIG_RAX:\n000000000000002e\n[   35.830304] RAX: ffffffffffffffda RBX: 00007ffc9f284460 RCX: 00007f3d0ca4da67\n[   35.831247] RDX: 0000000000000000 RSI: 00007ffc9f2843b0 RDI: 0000000000000003\n[   35.832167] RBP: 000000005aa6a7a9 R08: 0000000000000001 R09: 0000000000000000\n[   35.833075] R10: 00000000000005f1 R11: 0000000000000246 R12: 0000000000000000\n[   35.833997] R13: 00007ffc9f2884c0 R14: 0000000000000001 R15: 0000000000674640\n[   35.834923] Code: 24 30 bb 01 00 00 00 45 31 f6 eb 5e 8b 50 08 83 c2 07 83 e2\nfc 83 c2 70 49 8b 07 48 8b 40 70 48 85 c0 74 10 48 89 14 24 4c 89 ff <ff> d0 48\n8b 14 24 48 01 c2 49 01 d6 45 85 ed 74 05 41 83 47 2c\n[   35.837442] RIP: tcf_action_init+0x90/0x190 RSP: ffffb8edc068b9a0\n[   35.838291] ---[ end trace a095c06ee4b97a26 ]---\n\nFixes: d0f6dd8a914f (\"net/sched: Introduce act_tunnel_key\")\nSigned-off-by: Roman Mashak <mrv@mojatatu.com>\nAcked-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_tunnel_key.c||net/sched/act_tunnel_key.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_tunnel_key.c||net/sched/act_tunnel_key.c": [
          "File: net/sched/act_tunnel_key.c -> net/sched/act_tunnel_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   metadata->u.tun_info.mode |= IP_TUNNEL_INFO_TX;",
          "154:   break;",
          "155:  default:",
          "156:   goto err_out;",
          "157:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   ret = -EINVAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "047fdea6341966a0898e3b16c51f54d4f5ba030a",
      "candidate_info": {
        "commit_hash": "047fdea6341966a0898e3b16c51f54d4f5ba030a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/047fdea6341966a0898e3b16c51f54d4f5ba030a",
        "files": [
          "fs/btrfs/raid56.c"
        ],
        "message": "btrfs: Fix NULL pointer exception in find_bio_stripe\n\nOn detaching of a disk which is a part of a RAID6 filesystem, the\nfollowing kernel OOPS may happen:\n\n[63122.680461] BTRFS error (device sdo): bdev /dev/sdo errs: wr 0, rd 0, flush 1, corrupt 0, gen 0\n[63122.719584] BTRFS warning (device sdo): lost page write due to IO error on /dev/sdo\n[63122.719587] BTRFS error (device sdo): bdev /dev/sdo errs: wr 1, rd 0, flush 1, corrupt 0, gen 0\n[63122.803516] BTRFS warning (device sdo): lost page write due to IO error on /dev/sdo\n[63122.803519] BTRFS error (device sdo): bdev /dev/sdo errs: wr 2, rd 0, flush 1, corrupt 0, gen 0\n[63122.863902] BTRFS critical (device sdo): fatal error on device /dev/sdo\n[63122.935338] BUG: unable to handle kernel NULL pointer dereference at 0000000000000080\n[63122.946554] IP: fail_bio_stripe+0x58/0xa0 [btrfs]\n[63122.958185] PGD 9ecda067 P4D 9ecda067 PUD b2b37067 PMD 0\n[63122.971202] Oops: 0000 [#1] SMP\n[63123.006760] CPU: 0 PID: 3979 Comm: kworker/u8:9 Tainted: G W 4.14.2-16-scst34x+ #8\n[63123.007091] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006\n[63123.007402] Workqueue: btrfs-worker btrfs_worker_helper [btrfs]\n[63123.007595] task: ffff880036ea4040 task.stack: ffffc90006384000\n[63123.007796] RIP: 0010:fail_bio_stripe+0x58/0xa0 [btrfs]\n[63123.007968] RSP: 0018:ffffc90006387ad8 EFLAGS: 00010287\n[63123.008140] RAX: 0000000000000002 RBX: ffff88004beaa0b8 RCX: ffff8800b2bd5690\n[63123.008359] RDX: 0000000000000000 RSI: ffff88007bb43500 RDI: ffff88004beaa000\n[63123.008621] RBP: ffffc90006387ae8 R08: 0000000099100000 R09: ffff8800b2bd5600\n[63123.008840] R10: 0000000000000004 R11: 0000000000010000 R12: ffff88007bb43500\n[63123.009059] R13: 00000000fffffffb R14: ffff880036fc5180 R15: 0000000000000004\n[63123.009278] FS: 0000000000000000(0000) GS:ffff8800b7000000(0000) knlGS:0000000000000000\n[63123.009564] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[63123.009748] CR2: 0000000000000080 CR3: 00000000b0866000 CR4: 00000000000406f0\n[63123.009969] Call Trace:\n[63123.010085] raid_write_end_io+0x7e/0x80 [btrfs]\n[63123.010251] bio_endio+0xa1/0x120\n[63123.010378] generic_make_request+0x218/0x270\n[63123.010921] submit_bio+0x66/0x130\n[63123.011073] finish_rmw+0x3fc/0x5b0 [btrfs]\n[63123.011245] full_stripe_write+0x96/0xc0 [btrfs]\n[63123.011428] raid56_parity_write+0x117/0x170 [btrfs]\n[63123.011604] btrfs_map_bio+0x2ec/0x320 [btrfs]\n[63123.011759] ? ___cache_free+0x1c5/0x300\n[63123.011909] __btrfs_submit_bio_done+0x26/0x50 [btrfs]\n[63123.012087] run_one_async_done+0x9c/0xc0 [btrfs]\n[63123.012257] normal_work_helper+0x19e/0x300 [btrfs]\n[63123.012429] btrfs_worker_helper+0x12/0x20 [btrfs]\n[63123.012656] process_one_work+0x14d/0x350\n[63123.012888] worker_thread+0x4d/0x3a0\n[63123.013026] ? _raw_spin_unlock_irqrestore+0x15/0x20\n[63123.013192] kthread+0x109/0x140\n[63123.013315] ? process_scheduled_works+0x40/0x40\n[63123.013472] ? kthread_stop+0x110/0x110\n[63123.013610] ret_from_fork+0x25/0x30\n[63123.014469] RIP: fail_bio_stripe+0x58/0xa0 [btrfs] RSP: ffffc90006387ad8\n[63123.014678] CR2: 0000000000000080\n[63123.016590] ---[ end trace a295ea7259c17880 ]\u2014\n\nThis is reproducible in a cycle, where a series of writes is followed by\nSCSI device delete command. The test may take up to few minutes.\n\nFixes: 74d46992e0d9 (\"block: replace bi_bdev with a gendisk pointer and partitions index\")\n[ no signed-off-by provided ]\nAuthor: Dmitriy Gorokh <Dmitriy.Gorokh@wdc.com>\nReviewed-by: Liu Bo <bo.li.liu@oracle.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/raid56.c||fs/btrfs/raid56.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/raid56.c||fs/btrfs/raid56.c": [
          "File: fs/btrfs/raid56.c -> fs/btrfs/raid56.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1370:   stripe_start = stripe->physical;",
          "1371:   if (physical >= stripe_start &&",
          "1372:       physical < stripe_start + rbio->stripe_len &&",
          "1373:       bio->bi_disk == stripe->dev->bdev->bd_disk &&",
          "1374:       bio->bi_partno == stripe->dev->bdev->bd_partno) {",
          "1375:    return i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1373:       stripe->dev->bdev &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}