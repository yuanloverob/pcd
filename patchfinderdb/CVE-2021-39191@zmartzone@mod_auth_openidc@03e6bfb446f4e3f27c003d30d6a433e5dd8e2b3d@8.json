{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d4bd852ac7c26b3310f8f76587354f4b59e0b06",
      "candidate_info": {
        "commit_hash": "9d4bd852ac7c26b3310f8f76587354f4b59e0b06",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9d4bd852ac7c26b3310f8f76587354f4b59e0b06",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c"
        ],
        "message": "add AM_PROG_CC_C_O to configure.ac (at least for RHEL 7.7)\n\n- see #765; thanks @bitmagewb\n- include <openssl/bn.h> in jose.c to compile with OpenSSL 1.0.x\n- bump to 2.4.11rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: AC_CONFIG_MACRO_DIR([m4])",
          "10: AC_PROG_CC",
          "11: AM_PROG_AR",
          "12: LT_INIT([dlopen])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: AM_PROG_CC_C_O",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <openssl/err.h>",
          "54: #include <openssl/pem.h>",
          "55: #include <openssl/rsa.h>",
          "57: #ifdef WIN32",
          "58: #define snprintf _snprintf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #include <openssl/bn.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae44c41497458b3044325307edf29d29db075963",
      "candidate_info": {
        "commit_hash": "ae44c41497458b3044325307edf29d29db075963",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ae44c41497458b3044325307edf29d29db075963",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/common.c"
        ],
        "message": "fix graceful restart (regression); see #458; thanks @Foxite\n\nsee https://github.com/zmartzone/mod_auth_openidc/issues/458#issuecomment-902819263\nbump to 2.4.9.2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/common.c||src/cache/common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:    rv = apr_shm_destroy(m->shm);",
          "226:    oidc_sdebug(s, \"apr_shm_destroy for semaphore returned: %d\", rv);",
          "",
          "[Removed Lines]",
          "223:   if ((m->shm != NULL) && (*m->sema == 0)) {",
          "",
          "[Added Lines]",
          "223:   if ((m->shm != NULL) && (*m->sema == 0) && (m->is_parent == TRUE)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d30ff7996b2042d70827fbf5b3f46f60149a7a0",
      "candidate_info": {
        "commit_hash": "9d30ff7996b2042d70827fbf5b3f46f60149a7a0",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9d30ff7996b2042d70827fbf5b3f46f60149a7a0",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/parse.c"
        ],
        "message": "add expiry timestamps to OIDCInfoHook; bump to 2.4.7-dev; closes #541\n\nmaximum session lifetime (exp), inactivity timeout (timeout) and\nremote_user\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/parse.c||src/parse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "859: #   id_token (object)          : the claims presented in the ID token",
          "860: #   userinfo (object)          : the claims resolved from the UserInfo endpoint",
          "861: #   refresh_token (string)     : the refresh token (if returned by the OP)",
          "862: #   session (object)           : (for debugging) mod_auth_openidc specific session data such as \"remote user\", \"session expiry\", \"session id\" and a \"state\" object",
          "863: # When not defined the session hook will not return any data but a HTTP 404",
          "864: #OIDCInfoHook [iat|access_token|access_token_expires|id_token|userinfo|refresh_token|session]+",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862: #   exp (int)                  : the maximum session lifetime (Unix timestamp in seconds)",
          "863: #   timeout (int)              : the session inactivity timeout (Unix timestamp in seconds)",
          "864: #   remote_user (string)       : the remote user name",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3524:    json_object_set_new(json, OIDC_HOOK_INFO_USER_INFO, claims);",
          "3525:  }",
          "3527:  if (apr_hash_get(c->info_hook_data, OIDC_HOOK_INFO_SESSION,",
          "3528:    APR_HASH_KEY_STRING)) {",
          "3529:   json_t *j_session = json_object();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3528:  if (apr_hash_get(c->info_hook_data, OIDC_HOOK_INFO_SESSION_EXP,",
          "3529:    APR_HASH_KEY_STRING)) {",
          "3530:   apr_time_t session_expires = oidc_session_get_session_expires(r,",
          "3531:     session);",
          "3532:   json_object_set_new(json, OIDC_HOOK_INFO_SESSION_EXP,",
          "3533:     json_integer(apr_time_sec(session_expires)));",
          "3534:  }",
          "3537:  if (apr_hash_get(c->info_hook_data, OIDC_HOOK_INFO_SESSION_TIMEOUT,",
          "3538:    APR_HASH_KEY_STRING)) {",
          "3539:   json_object_set_new(json, OIDC_HOOK_INFO_SESSION_TIMEOUT,",
          "3540:     json_integer(apr_time_sec(session->expiry)));",
          "3541:  }",
          "3544:  if (apr_hash_get(c->info_hook_data, OIDC_HOOK_INFO_SESSION_REMOTE_USER,",
          "3545:    APR_HASH_KEY_STRING)) {",
          "3546:   json_object_set_new(json, OIDC_HOOK_INFO_SESSION_REMOTE_USER,",
          "3547:     json_string(session->remote_user));",
          "3548:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3531:     session->state);",
          "3532:   json_object_set_new(j_session, OIDC_HOOK_INFO_SESSION_UUID,",
          "3533:     json_string(session->uuid));",
          "3542:   json_object_set_new(json, OIDC_HOOK_INFO_SESSION, j_session);",
          "3544:  }",
          "",
          "[Removed Lines]",
          "3534:   json_object_set_new(j_session, OIDC_HOOK_INFO_SESSION_TIMEOUT,",
          "3535:     json_integer(apr_time_sec(session->expiry)));",
          "3536:   apr_time_t session_expires = oidc_session_get_session_expires(r,",
          "3537:     session);",
          "3538:   json_object_set_new(j_session, OIDC_HOOK_INFO_SESSION_EXP,",
          "3539:     json_integer(apr_time_sec(session_expires)));",
          "3540:   json_object_set_new(j_session, OIDC_HOOK_INFO_SESSION_REMOTE_USER,",
          "3541:     json_string(session->remote_user));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1187:    OIDC_HOOK_INFO_ID_TOKEN,",
          "1188:    OIDC_HOOK_INFO_USER_INFO,",
          "1189:    OIDC_HOOK_INFO_REFRESH_TOKEN,",
          "1190:    OIDC_HOOK_INFO_SESSION,",
          "1191:    NULL };",
          "1192:  const char *rv = oidc_valid_string_option(pool, arg, options);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190:    OIDC_HOOK_INFO_SESSION_EXP,",
          "1191:    OIDC_HOOK_INFO_SESSION_TIMEOUT,",
          "1192:    OIDC_HOOK_INFO_SESSION_REMOTE_USER,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5215391ab1c54e7e606b9b735aab942e645417a1",
      "candidate_info": {
        "commit_hash": "5215391ab1c54e7e606b9b735aab942e645417a1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/5215391ab1c54e7e606b9b735aab942e645417a1",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h",
          "src/session.c",
          "src/util.c",
          "test/test.c"
        ],
        "message": "make interpretation of X-Forwarded-* headers configurable\n\ndefaulting to none, so mod_auth_openidc running behind a reverse\nproxy that sets X-Forwarded-* headers needs explicit configuration\nof OIDCXForwardedHeaders\n\nbump to 2.4.11rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/session.c||src/session.c",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "953: #   OIDCLogoutXFrameOptions: allow-from https://provider.example.com/",
          "954: # When not defined the default is \"DENY\".",
          "955: #OIDCLogoutXFrameOptions <value>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957: # Define the X-Forwarded-* headers that will be taken into account as set by a reverse proxy",
          "958: # in front of mod_auth_openidc. Must be one or more of:",
          "959: #  X-Forwarded-Host",
          "960: #  X-Forwarded-Port",
          "961: #  X-Forwarded-Proto",
          "962: # When not defined, such headers will be ignored.",
          "963: #OIDCXForwardedHeaders <header>+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: #define OIDC_DEFAULT_STATE_INPUT_HEADERS (OIDC_STATE_INPUT_HEADERS_USER_AGENT | OIDC_STATE_INPUT_HEADERS_X_FORWARDED_FOR)",
          "157: #define OIDC_DEFAULT_STATE_COOKIE_PREFIX \"mod_auth_openidc_state_\"",
          "159: #define OIDCProviderMetadataURL                \"OIDCProviderMetadataURL\"",
          "160: #define OIDCProviderIssuer                     \"OIDCProviderIssuer\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: #define OIDC_DEFAULT_X_FORWARDED_HEADERS 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264: #define OIDCStateCookiePrefix                  \"OIDCStateCookiePrefix\"",
          "265: #define OIDCCABundlePath                       \"OIDCCABundlePath\"",
          "266: #define OIDCLogoutXFrameOptions                \"OIDCLogoutXFrameOptions\"",
          "268: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #define OIDCXForwardedHeaders                  \"OIDCXForwardedHeaders\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1229:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1230: }",
          "1232: static const char* oidc_set_redirect_urls_allowed(cmd_parms *cmd, void *m,",
          "1233:   const char *arg) {",
          "1234:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(cmd->server->module_config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1235: static const char* oidc_set_x_forwarded_headers(cmd_parms *cmd, void *m, const char *arg) {",
          "1236:  oidc_cfg *cfg =",
          "1237:    (oidc_cfg*) ap_get_module_config(cmd->server->module_config, &auth_openidc_module);",
          "1238:  const char *rv = oidc_parse_x_forwarded_headers(cmd->pool, arg, &cfg->x_forwarded_headers);",
          "1239:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1240: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:    OIDC_DEFAULT_PROVIDER_ISSUER_SPECIFIC_REDIRECT_URI;",
          "1433:  c->state_input_headers = OIDC_DEFAULT_STATE_INPUT_HEADERS;",
          "1435:  c->redirect_urls_allowed = NULL;",
          "1437:  c->ca_bundle_path = NULL;",
          "1439:  c->logout_x_frame_options = NULL;",
          "1441:  return c;",
          "1442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447:  c->x_forwarded_headers = OIDC_DEFAULT_X_FORWARDED_HEADERS;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1934:    add->logout_x_frame_options != NULL ?",
          "1935:      add->logout_x_frame_options : base->logout_x_frame_options;",
          "1937:  return c;",
          "1938: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1945:  c->x_forwarded_headers =",
          "1946:    add->x_forwarded_headers != OIDC_DEFAULT_X_FORWARDED_HEADERS ?",
          "1947:      add->x_forwarded_headers : base->x_forwarded_headers;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3434:     RSRC_CONF,",
          "3435:     \"Sets the value of the X-Frame-Options header on front channel logout.\"),",
          "3437:   { NULL }",
          "3438: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3449:   AP_INIT_ITERATE(OIDCXForwardedHeaders,",
          "3450:     oidc_set_x_forwarded_headers,",
          "3451:     (void *) APR_OFFSETOF(oidc_cfg, x_forwarded_headers),",
          "3452:     RSRC_CONF,",
          "3453:     \"Sets the value of the interpreted X-Forwarded-* headers.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:  struct oidc_state_cookies_t *next;",
          "516: } oidc_state_cookies_t;",
          "519:   int number_of_valid_state_cookies, int max_number_of_state_cookies,",
          "520:   oidc_state_cookies_t *first) {",
          "523:  while (number_of_valid_state_cookies >= max_number_of_state_cookies) {",
          "524:   oldest = first;",
          "525:   prev_oldest = NULL;",
          "",
          "[Removed Lines]",
          "518: static int oidc_delete_oldest_state_cookies(request_rec *r,",
          "521:  oidc_state_cookies_t *cur = NULL, *prev = NULL, *prev_oldest = NULL,",
          "",
          "[Added Lines]",
          "518: static int oidc_delete_oldest_state_cookies(request_rec *r, oidc_cfg *c,",
          "521:  oidc_state_cookies_t *cur = NULL, *prev = NULL, *prev_oldest = NULL, *oldest = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:    prev = cur;",
          "534:    cur = cur->next;",
          "535:   }",
          "541:   if (prev_oldest)",
          "542:    prev_oldest->next = oldest->next;",
          "543:   else",
          "",
          "[Removed Lines]",
          "536:   oidc_warn(r,",
          "537:     \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\",",
          "538:     oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "539:   oidc_util_set_cookie(r, oldest->name, \"\", 0,",
          "540:     OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "535:   oidc_warn(r, \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\", oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "536:   oidc_util_set_cookie(r, oldest->name, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:      cookie++;",
          "573:      if ((currentCookieName == NULL)",
          "576:       oidc_proto_state_t *proto_state =",
          "577:         oidc_proto_state_from_cookie(r, c, cookie);",
          "578:       if (proto_state != NULL) {",
          "581:        if (apr_time_now() > ts + apr_time_from_sec(c->state_timeout)) {",
          "589:        } else {",
          "590:         if (first == NULL) {",
          "593:          last = first;",
          "594:         } else {",
          "597:          last = last->next;",
          "598:         }",
          "599:         last->name = cookieName;",
          "",
          "[Removed Lines]",
          "574:        || (apr_strnatcmp(cookieName, currentCookieName)",
          "575:          != 0)) {",
          "579:        json_int_t ts = oidc_proto_state_get_timestamp(",
          "580:          proto_state);",
          "582:         oidc_warn(r,",
          "583:           \"state (%s) has expired (original_url=%s)\",",
          "584:           cookieName,",
          "585:           oidc_proto_state_get_original_url(",
          "586:             proto_state));",
          "587:         oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "588:           OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "591:          first = apr_pcalloc(r->pool,",
          "592:            sizeof(oidc_state_cookies_t));",
          "595:          last->next = apr_pcalloc(r->pool,",
          "596:            sizeof(oidc_state_cookies_t));",
          "",
          "[Added Lines]",
          "570:        || (apr_strnatcmp(cookieName, currentCookieName) != 0)) {",
          "574:        json_int_t ts = oidc_proto_state_get_timestamp(proto_state);",
          "576:         oidc_warn(r, \"state (%s) has expired (original_url=%s)\", cookieName, oidc_proto_state_get_original_url(proto_state));",
          "577:         oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "580:          first = apr_pcalloc(r->pool, sizeof(oidc_state_cookies_t));",
          "583:          last->next = apr_pcalloc(r->pool, sizeof(oidc_state_cookies_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:        }",
          "604:        oidc_proto_state_destroy(proto_state);",
          "605:       } else {",
          "611:       }",
          "612:      }",
          "613:     }",
          "",
          "[Removed Lines]",
          "606:        oidc_warn(r,",
          "607:          \"state cookie could not be retrieved/decoded, deleting: %s\",",
          "608:          cookieName);",
          "609:        oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "610:          OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "593:        oidc_warn(r, \"state cookie could not be retrieved/decoded, deleting: %s\", cookieName);",
          "594:        oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "617:  }",
          "619:  if (delete_oldest > 0)",
          "624:  return number_of_valid_state_cookies;",
          "625: }",
          "",
          "[Removed Lines]",
          "620:   number_of_valid_state_cookies = oidc_delete_oldest_state_cookies(r,",
          "621:     number_of_valid_state_cookies, c->max_number_of_state_cookies,",
          "622:     first);",
          "",
          "[Added Lines]",
          "604:   number_of_valid_state_cookies =",
          "605:     oidc_delete_oldest_state_cookies(r, c, number_of_valid_state_cookies, c->max_number_of_state_cookies, first);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "633:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "630: static apr_byte_t oidc_restore_proto_state(request_rec *r, oidc_cfg *c,",
          "631:   const char *state, oidc_proto_state_t **proto_state) {",
          "",
          "[Added Lines]",
          "613: static apr_byte_t oidc_restore_proto_state(request_rec *r, oidc_cfg *c, const char *state,",
          "614:   oidc_proto_state_t **proto_state) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "641:  char *cookieValue = oidc_util_get_cookie(r, cookieName);",
          "642:  if (cookieValue == NULL) {",
          "646:   return FALSE;",
          "647:  }",
          "654:  if (*proto_state == NULL)",
          "",
          "[Removed Lines]",
          "643:   oidc_error(r,",
          "644:     \"no \\\"%s\\\" state cookie found: check domain and samesite cookie settings\",",
          "645:     cookieName);",
          "650:  oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "651:    OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "626:   oidc_error(r, \"no \\\"%s\\\" state cookie found: check domain and samesite cookie settings\", cookieName);",
          "631:  oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "660:  char *calc = oidc_get_browser_state_hash(r, c, nonce);",
          "662:  if (apr_strnatcmp(calc, state) != 0) {",
          "666:   oidc_proto_state_destroy(*proto_state);",
          "667:   return FALSE;",
          "668:  }",
          "",
          "[Removed Lines]",
          "663:   oidc_error(r,",
          "664:     \"calculated state from cookie does not match state parameter passed back in URL: \\\"%s\\\" != \\\"%s\\\"\",",
          "665:     state, calc);",
          "",
          "[Added Lines]",
          "643:   oidc_error(r, \"calculated state from cookie does not match state parameter passed back in URL: \\\"%s\\\" != \\\"%s\\\"\", state, calc);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "690:  oidc_proto_state_set_state(*proto_state, state);",
          "697:  return TRUE;",
          "",
          "[Removed Lines]",
          "693:  oidc_debug(r, \"restored state: %s\",",
          "694:    oidc_proto_state_to_string(r, *proto_state));",
          "",
          "[Added Lines]",
          "671:  oidc_debug(r, \"restored state: %s\", oidc_proto_state_to_string(r, *proto_state));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "925:    NULL, NULL, oidc_dir_cfg_path_auth_request_params(r),",
          "926:    oidc_dir_cfg_path_scope(r));",
          "927: }",
          "",
          "[Removed Lines]",
          "924:  return oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r), NULL,",
          "",
          "[Added Lines]",
          "901:  return oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r, c->x_forwarded_headers), NULL,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "962:   oidc_session_t *session) {",
          "963:  const char *c_cookie_domain =",
          "964:    cfg->cookie_domain ?",
          "966:  const char *s_cookie_domain = oidc_session_get_cookie_domain(r, session);",
          "967:  if ((s_cookie_domain == NULL)",
          "968:    || (apr_strnatcmp(c_cookie_domain, s_cookie_domain) != 0)) {",
          "",
          "[Removed Lines]",
          "965:      cfg->cookie_domain : oidc_get_current_url_host(r);",
          "",
          "[Added Lines]",
          "942:      cfg->cookie_domain : oidc_get_current_url_host(r, cfg->x_forwarded_headers);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1793:  oidc_session_set_cookie_domain(r, session,",
          "1796:  char *sid = NULL;",
          "1797:  oidc_debug(r, \"provider->backchannel_logout_supported=%d\",",
          "",
          "[Removed Lines]",
          "1794:    c->cookie_domain ? c->cookie_domain : oidc_get_current_url_host(r));",
          "",
          "[Added Lines]",
          "1771:    c->cookie_domain ? c->cookie_domain : oidc_get_current_url_host(r, c->x_forwarded_headers));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2114:  oidc_debug(r, \"enter\");",
          "2118:  const char *method = oidc_original_request_method(r, cfg, FALSE);",
          "",
          "[Removed Lines]",
          "2117:  char *current_url = oidc_get_current_url(r);",
          "",
          "[Added Lines]",
          "2094:  char *current_url = oidc_get_current_url(r, cfg->x_forwarded_headers);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2492:    return FALSE;",
          "2493:   }",
          "2494:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
          "2496:   if ((strstr(c_host, uri.hostname) == NULL)",
          "2497:     || (strstr(uri.hostname, c_host) == NULL)) {",
          "",
          "[Removed Lines]",
          "2495:   c_host = oidc_get_current_url_host(r);",
          "",
          "[Added Lines]",
          "2472:   c_host = oidc_get_current_url_host(r, c->x_forwarded_headers);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2571:   oidc_util_set_cookie(r, OIDC_CSRF_NAME, \"\", 0,",
          "2575:   if ((csrf_query == NULL)",
          "",
          "[Removed Lines]",
          "2572:     OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "2549:     OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4027:    break;",
          "4028:  }",
          "4031:    NULL, NULL, oidc_dir_cfg_path_auth_request_params(r), oidc_dir_cfg_path_scope(r));",
          "4033:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "",
          "[Removed Lines]",
          "4030:  oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r), NULL,",
          "",
          "[Added Lines]",
          "4007:  oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r, c->x_forwarded_headers), NULL,",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: #define OIDC_COOKIE_EXT_SAME_SITE_LAX    \"SameSite=Lax\"",
          "231: #define OIDC_COOKIE_EXT_SAME_SITE_STRICT \"SameSite=Strict\"",
          "235: #define OIDC_COOKIE_SAMESITE_STRICT(c, r) \\",
          "237: #define OIDC_COOKIE_SAMESITE_LAX(c, r) \\",
          "241: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Sec-Provided-Token-Binding-ID\"",
          "",
          "[Removed Lines]",
          "232: #define OIDC_COOKIE_EXT_SAME_SITE_NONE(r) \\",
          "233:   oidc_util_request_is_secure(r) ? \"SameSite=None\" : NULL",
          "236:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_STRICT : OIDC_COOKIE_EXT_SAME_SITE_NONE(r)",
          "238:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_LAX : OIDC_COOKIE_EXT_SAME_SITE_NONE(r)",
          "",
          "[Added Lines]",
          "232: #define OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r) \\",
          "233:   oidc_util_request_is_secure(r,c ) ? \"SameSite=None\" : NULL",
          "236:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_STRICT : OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r)",
          "238:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_LAX : OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250: #define OIDC_STATE_INPUT_HEADERS_USER_AGENT 1",
          "251: #define OIDC_STATE_INPUT_HEADERS_X_FORWARDED_FOR 2",
          "253: typedef apr_byte_t (*oidc_proto_pkce_state)(request_rec *r, char **state);",
          "254: typedef apr_byte_t (*oidc_proto_pkce_challenge)(request_rec *r, const char *state, char **code_challenge);",
          "255: typedef apr_byte_t (*oidc_proto_pkce_verifier)(request_rec *r, const char *state, char **code_verifier);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #define OIDC_HDR_X_FORWARDED_HOST   1",
          "254: #define OIDC_HDR_X_FORWARDED_PORT   2",
          "255: #define OIDC_HDR_X_FORWARDED_PROTO  4",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "443:  apr_hash_t *white_listed_claims;",
          "445:  apr_byte_t state_input_headers;",
          "447:  apr_hash_t *redirect_urls_allowed;",
          "449:  char *ca_bundle_path;",
          "451:  char *logout_x_frame_options;",
          "452: } oidc_cfg;",
          "454: int oidc_check_user_id(request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:  apr_byte_t x_forwarded_headers;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "764: int oidc_strnenvcmp(const char *a, const char *b, int len);",
          "765: int oidc_base64url_encode(request_rec *r, char **dst, const char *src, int src_len, int remove_padding);",
          "766: int oidc_base64url_decode(apr_pool_t *pool, char **dst, const char *src);",
          "769: const char *oidc_get_redirect_uri(request_rec *r, oidc_cfg *c);",
          "770: const char *oidc_get_redirect_uri_iss(request_rec *r, oidc_cfg *c, oidc_provider_t *provider);",
          "771: char *oidc_url_encode(const request_rec *r, const char *str, const char *charsToEncode);",
          "772: char *oidc_normalize_header_name(const request_rec *r, const char *str);",
          "774: void oidc_util_set_cookie(request_rec *r, const char *cookieName, const char *cookieValue, apr_time_t expires, const char *ext);",
          "775: char *oidc_util_get_cookie(request_rec *r, const char *cookieName);",
          "776: apr_byte_t oidc_util_http_get(request_rec *r, const char *url, const apr_table_t *params, const char *basic_auth, const char *bearer_token, int ssl_validate_server, char **response, int timeout, const char *outgoing_proxy, apr_array_header_t *pass_cookies, const char *ssl_cert, const char *ssl_key, const char *ssl_key_pwd);",
          "",
          "[Removed Lines]",
          "767: const char *oidc_get_current_url_host(request_rec *r);",
          "768: char *oidc_get_current_url(request_rec *r);",
          "773: apr_byte_t oidc_util_request_is_secure(request_rec *r);",
          "",
          "[Added Lines]",
          "769: const char *oidc_get_current_url_host(request_rec *r, const apr_byte_t x_forwarded_headers);",
          "770: char *oidc_get_current_url(request_rec *r, const apr_byte_t x_forwarded_headers);",
          "775: apr_byte_t oidc_util_request_is_secure(request_rec *r, oidc_cfg *c);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1356:  return NULL;",
          "1357: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1359: const char* oidc_parse_x_forwarded_headers(apr_pool_t *pool, const char *arg,",
          "1360:   apr_byte_t *x_forwarded_headers) {",
          "1361:  static char *options[] = {",
          "1362:    OIDC_HTTP_HDR_X_FORWARDED_HOST,",
          "1363:    OIDC_HTTP_HDR_X_FORWARDED_PORT,",
          "1364:    OIDC_HTTP_HDR_X_FORWARDED_PROTO,",
          "1365:    NULL };",
          "1366:  const char *rv = oidc_valid_string_option(pool, arg, options);",
          "1367:  if (rv != NULL)",
          "1368:   return rv;",
          "1370:  if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_HOST) == 0) {",
          "1372:  } else if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_PORT) == 0) {",
          "1374:  } else if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_PROTO) == 0) {",
          "1376:  }",
          "1378:  return NULL;",
          "1379: }",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: const char *oidc_parse_max_number_of_state_cookies(apr_pool_t *pool, const char *arg1, const char *arg2, int *int_value, int *bool_value);",
          "116: const char *oidc_parse_refresh_access_token_before_expiry(apr_pool_t *pool, const char *arg, int *int_value);",
          "117: const char *oidc_parse_set_state_input_headers_as(apr_pool_t *pool, const char *arg, apr_byte_t *state_input_headers);",
          "119: typedef const char *(*oidc_valid_int_function_t)(apr_pool_t *, int);",
          "120: typedef const char *(*oidc_valid_function_t)(apr_pool_t *, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: const char *oidc_parse_x_forwarded_headers(apr_pool_t *pool, const char *arg, apr_byte_t *x_forwarded_headers);",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: static apr_byte_t oidc_session_load_cache(request_rec *r, oidc_session_t *z) {",
          "154:  apr_byte_t rc = FALSE;",
          "",
          "[Removed Lines]",
          "151:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "152:    &auth_openidc_module);",
          "",
          "[Added Lines]",
          "151:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   if (z->state == NULL) {",
          "175:   }",
          "176:  }",
          "",
          "[Removed Lines]",
          "173:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "174:      OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "172:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  apr_byte_t rc = TRUE;",
          "",
          "[Removed Lines]",
          "184: static apr_byte_t oidc_session_save_cache(request_rec *r, oidc_session_t *z,",
          "185:   apr_byte_t first_time) {",
          "186:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "187:    &auth_openidc_module);",
          "",
          "[Added Lines]",
          "182: static apr_byte_t oidc_session_save_cache(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "183:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:   if (rc == TRUE)",
          "213:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), z->uuid,",
          "221:  } else {",
          "",
          "[Removed Lines]",
          "214:      c->persistent_session_cookie ? z->expiry : -1,",
          "215:        c->cookie_same_site ?",
          "216:          (first_time ?",
          "217:            OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "218:            OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "219:            OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "210:          c->persistent_session_cookie ? z->expiry : -1,",
          "211:            c->cookie_same_site ? (first_time ?",
          "212:              OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "213:              OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "214:              OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:    oidc_cache_set_sid(r, z->sid, NULL, 0);",
          "231:   rc = oidc_cache_set_session(r, z->uuid, NULL, 0);",
          "",
          "[Removed Lines]",
          "227:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "228:     OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "222:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246:   return FALSE;",
          "247:  return TRUE;",
          "248: }",
          "",
          "[Removed Lines]",
          "240: static apr_byte_t oidc_session_load_cookie(request_rec *r, oidc_cfg *c,",
          "241:   oidc_session_t *z) {",
          "242:  char *cookieValue = oidc_util_get_chunked_cookie(r, oidc_cfg_dir_cookie(r),",
          "243:    c->session_cookie_chunk_size);",
          "244:  if ((cookieValue != NULL)",
          "245:    && (oidc_session_decode(r, c, z, cookieValue, TRUE) == FALSE))",
          "",
          "[Added Lines]",
          "234: static apr_byte_t oidc_session_load_cookie(request_rec *r, oidc_cfg *c, oidc_session_t *z) {",
          "235:  char *cookieValue =",
          "236:    oidc_util_get_chunked_cookie(r, oidc_cfg_dir_cookie(r), c->session_cookie_chunk_size);",
          "237:  if ((cookieValue != NULL) && (oidc_session_decode(r, c, z, cookieValue, TRUE) == FALSE))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:  char *cookieValue = \"\";",
          "260:   return FALSE;",
          "262:  oidc_util_set_chunked_cookie(r, oidc_cfg_dir_cookie(r), cookieValue,",
          "272:  return TRUE;",
          "273: }",
          "",
          "[Removed Lines]",
          "253: static apr_byte_t oidc_session_save_cookie(request_rec *r, oidc_session_t *z,",
          "254:   apr_byte_t first_time) {",
          "255:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "256:    &auth_openidc_module);",
          "258:  if ((z->state != NULL)",
          "259:    && (oidc_session_encode(r, c, z, &cookieValue, TRUE) == FALSE))",
          "263:    c->persistent_session_cookie ? z->expiry : -1,",
          "264:      c->session_cookie_chunk_size,",
          "265:      (z->state == NULL) ? OIDC_COOKIE_EXT_SAME_SITE_NONE(r) :",
          "266:        c->cookie_same_site ?",
          "267:          (first_time ?",
          "268:            OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "269:            OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "270:            OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "245: static apr_byte_t oidc_session_save_cookie(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "246:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "248:  if ((z->state != NULL) && (oidc_session_encode(r, c, z, &cookieValue, TRUE) == FALSE))",
          "252:    c->persistent_session_cookie ? z->expiry : -1, c->session_cookie_chunk_size,",
          "253:      (z->state == NULL) ? OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r) :",
          "254:        c->cookie_same_site ? (first_time ?",
          "255:          OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "256:          OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "257:          OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:  if (scheme_str == NULL) {",
          "446: #ifdef APACHE2_0",
          "",
          "[Removed Lines]",
          "441: static const char* oidc_get_current_url_scheme(const request_rec *r) {",
          "443:  const char *scheme_str = oidc_util_hdr_in_x_forwarded_proto_get(r);",
          "",
          "[Added Lines]",
          "441: static const char* oidc_get_current_url_scheme(const request_rec *r,",
          "442:   const apr_byte_t x_forwarded_headers) {",
          "444:  const char *scheme_str = NULL;",
          "446:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "447:   scheme_str = oidc_util_hdr_in_x_forwarded_proto_get(r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:  if ((scheme_str == NULL)",
          "453:    || ((apr_strnatcmp(scheme_str, \"http\") != 0)",
          "454:      && (apr_strnatcmp(scheme_str, \"https\") != 0))) {",
          "458:   scheme_str = \"https\";",
          "459:  }",
          "460:  return scheme_str;",
          "",
          "[Removed Lines]",
          "455:   oidc_warn(r,",
          "456:     \"detected HTTP scheme \\\"%s\\\" is not \\\"http\\\" nor \\\"https\\\"; perhaps your reverse proxy passes a wrongly configured \\\"%s\\\" header: falling back to default \\\"https\\\"\",",
          "457:     scheme_str, OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "",
          "[Added Lines]",
          "460:   oidc_warn(r, \"detected HTTP scheme \\\"%s\\\" is not \\\"http\\\" nor \\\"https\\\"; perhaps your reverse proxy passes a wrongly configured \\\"%s\\\" header: falling back to default \\\"https\\\"\", scheme_str, OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:  char *p = NULL;",
          "468:  char *i = NULL;",
          "470:  if (host_hdr) {",
          "472:    i = strchr(host_hdr, ']');",
          "473:    p = strchr(i, OIDC_CHAR_COLON);",
          "474:   } else {",
          "",
          "[Removed Lines]",
          "466: static const char* oidc_get_port_from_host( const char *host_hdr){",
          "471:   if (host_hdr[0]=='[') {",
          "",
          "[Added Lines]",
          "469: static const char* oidc_get_port_from_host(const char *host_hdr) {",
          "474:   if (host_hdr[0] == '[') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:  if (port_str)",
          "496:   return port_str;",
          "",
          "[Removed Lines]",
          "487: static const char* oidc_get_current_url_port(const request_rec *r,",
          "488:   const char *scheme_str) {",
          "494:  const char *port_str = oidc_util_hdr_in_x_forwarded_port_get(r);",
          "",
          "[Added Lines]",
          "490: static const char* oidc_get_current_url_port(const request_rec *r, const char *scheme_str,",
          "491:   const apr_byte_t x_forwarded_headers) {",
          "493:  const char *host_hdr = NULL;",
          "494:  const char *port_str = NULL;",
          "501:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PORT)",
          "502:   port_str = oidc_util_hdr_in_x_forwarded_port_get(r);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503:  if (host_hdr) {",
          "504:   port_str = oidc_get_port_from_host(host_hdr);",
          "505:   if (port_str)",
          "",
          "[Removed Lines]",
          "502:  const char *host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "",
          "[Added Lines]",
          "512:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "513:   host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "527:  if (oidc_util_hdr_in_x_forwarded_proto_get(r))",
          "528:   return NULL;",
          "",
          "[Added Lines]",
          "539:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "540:   if (oidc_util_hdr_in_x_forwarded_proto_get(r))",
          "541:    return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:  char *i = NULL;",
          "551:  if (host_str == NULL)",
          "552:   host_str = oidc_util_hdr_in_host_get(r);",
          "553:  if (host_str) {",
          "554:   host_str = apr_pstrdup(r->pool, host_str);",
          "556:   if (host_str[0] == '[') {",
          "558:    p = strchr(i, OIDC_CHAR_COLON);",
          "559:   } else {",
          "560:    p = strchr(host_str, OIDC_CHAR_COLON);",
          "561:   }",
          "565:  } else {",
          "567:   host_str = ap_get_server_name(r);",
          "",
          "[Removed Lines]",
          "547: const char* oidc_get_current_url_host(request_rec *r) {",
          "548:  const char *host_str = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "549:     char *p = NULL;",
          "557:    i= strchr(host_str, ']');",
          "563:  if (p != NULL)",
          "",
          "[Added Lines]",
          "560: const char* oidc_get_current_url_host(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "561:  const char *host_str = NULL;",
          "562:  char *p = NULL;",
          "565:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "566:   host_str = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "574:    i = strchr(host_str, ']');",
          "580:   if (p != NULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:  port_str = port_str ? apr_psprintf(r->pool, \":%s\", port_str) : \"\";",
          "582:  char *url = apr_pstrcat(r->pool, scheme_str, \"://\", host_str, port_str,",
          "585:  return url;",
          "586: }",
          "",
          "[Removed Lines]",
          "575: static const char* oidc_get_current_url_base(request_rec *r) {",
          "577:  const char *scheme_str = oidc_get_current_url_scheme(r);",
          "578:  const char *host_str = oidc_get_current_url_host(r);",
          "579:  const char *port_str = oidc_get_current_url_port(r, scheme_str);",
          "583:    NULL);",
          "",
          "[Added Lines]",
          "592: static const char* oidc_get_current_url_base(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "594:  const char *scheme_str = oidc_get_current_url_scheme(r, x_forwarded_headers);",
          "595:  const char *host_str = oidc_get_current_url_host(r, x_forwarded_headers);",
          "596:  const char *port_str = oidc_get_current_url_port(r, scheme_str, x_forwarded_headers);",
          "600:        NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "592:  char *url = NULL, *path = NULL;",
          "593:  apr_uri_t uri;",
          "",
          "[Removed Lines]",
          "591: char* oidc_get_current_url(request_rec *r) {",
          "",
          "[Added Lines]",
          "608: char* oidc_get_current_url(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "598:  if ((path) && (path[0] != '/')) {",
          "599:   memset(&uri, 0, sizeof(apr_uri_t));",
          "600:   if (apr_uri_parse(r->pool, r->uri, &uri) == APR_SUCCESS)",
          "604:   else",
          "607:  } else {",
          "609:   path = r->unparsed_uri;",
          "610:  }",
          "614:  oidc_debug(r, \"current URL '%s'\", url);",
          "",
          "[Removed Lines]",
          "601:    path = apr_pstrcat(r->pool, uri.path,",
          "602:      (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "603:      NULL);",
          "605:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\",",
          "606:      r->uri);",
          "612:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), path, NULL);",
          "",
          "[Added Lines]",
          "618:    path =",
          "619:      apr_pstrcat(r->pool, uri.path, (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "620:         NULL);",
          "622:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\", r->uri);",
          "628:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r, x_forwarded_headers), path, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "627:    && (redirect_uri[0] == OIDC_CHAR_FORWARD_SLASH)) {",
          "631:     cfg->redirect_uri, NULL);",
          "633:   oidc_debug(r, \"determined absolute redirect uri: %s\", redirect_uri);",
          "",
          "[Removed Lines]",
          "630:   redirect_uri = apr_pstrcat(r->pool, oidc_get_current_url_base(r),",
          "",
          "[Added Lines]",
          "646:   redirect_uri = apr_pstrcat(r->pool, oidc_get_current_url_base(r, cfg->x_forwarded_headers),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1107:  return env_var_value;",
          "1108: }",
          "1112: }",
          "1122:  char *headerString, *expiresString = NULL;",
          "1123:  const char *appendString = NULL;",
          "",
          "[Removed Lines]",
          "1110: apr_byte_t oidc_util_request_is_secure(request_rec *r) {",
          "1111:  return (apr_strnatcasecmp(\"https\", oidc_get_current_url_scheme(r)) == 0);",
          "1117: void oidc_util_set_cookie(request_rec *r, const char *cookieName,",
          "1118:   const char *cookieValue, apr_time_t expires, const char *ext) {",
          "1120:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "1121:    &auth_openidc_module);",
          "",
          "[Added Lines]",
          "1126: apr_byte_t oidc_util_request_is_secure(request_rec *r, oidc_cfg *c) {",
          "1127:  return (apr_strnatcasecmp(\"https\", oidc_get_current_url_scheme(r, c->x_forwarded_headers)) == 0);",
          "1133: void oidc_util_set_cookie(request_rec *r, const char *cookieName, const char *cookieValue,",
          "1134:   apr_time_t expires, const char *ext) {",
          "1136:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1138:  headerString = apr_psprintf(r->pool, \"%s=%s\", cookieName, cookieValue);",
          "1140:  headerString = apr_psprintf(r->pool, \"%s; %s=%s\", headerString,",
          "1143:  if (expiresString != NULL)",
          "1144:   headerString = apr_psprintf(r->pool, \"%s; %s=%s\", headerString,",
          "1147:  if (c->cookie_domain != NULL)",
          "1148:   headerString = apr_psprintf(r->pool, \"%s; %s=%s\", headerString,",
          "1152:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1155:  if (c->cookie_http_only != FALSE)",
          "1156:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1159:  appendString = oidc_util_set_cookie_append_value(r, c);",
          "1160:  if (appendString != NULL)",
          "1163:  else if (ext != NULL)",
          "1164:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString, ext);",
          "1167:  if (strlen(headerString) > OIDC_COOKIE_MAX_SIZE) {",
          "1171:  }",
          "",
          "[Removed Lines]",
          "1141:    OIDC_COOKIE_FLAG_PATH, oidc_util_get_cookie_path(r));",
          "1145:     OIDC_COOKIE_FLAG_EXPIRES, expiresString);",
          "1149:     OIDC_COOKIE_FLAG_DOMAIN, c->cookie_domain);",
          "1151:  if (oidc_util_request_is_secure(r))",
          "1153:     OIDC_COOKIE_FLAG_SECURE);",
          "1157:     OIDC_COOKIE_FLAG_HTTP_ONLY);",
          "1161:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1162:     appendString);",
          "1168:   oidc_warn(r,",
          "1169:     \"the length of the cookie value (%d) is greater than %d(!) bytes, this may not work with all browsers/server combinations: consider switching to a server side caching!\",",
          "1170:     (int )strlen(headerString), OIDC_COOKIE_MAX_SIZE);",
          "",
          "[Added Lines]",
          "1156:         OIDC_COOKIE_FLAG_PATH, oidc_util_get_cookie_path(r));",
          "1160:          OIDC_COOKIE_FLAG_EXPIRES, expiresString);",
          "1164:          OIDC_COOKIE_FLAG_DOMAIN, c->cookie_domain);",
          "1166:  if (oidc_util_request_is_secure(r, c))",
          "1168:          OIDC_COOKIE_FLAG_SECURE);",
          "1172:          OIDC_COOKIE_FLAG_HTTP_ONLY);",
          "1176:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString, appendString);",
          "1182:   oidc_warn(r, \"the length of the cookie value (%d) is greater than %d(!) bytes, this may not work with all browsers/server combinations: consider switching to a server side caching!\", (int )strlen(headerString), OIDC_COOKIE_MAX_SIZE);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:  r->uri = \"/test\";",
          "1238:  r->unparsed_uri = apr_pstrcat(r->pool, r->uri, \"?\", r->args, NULL);",
          "1241:  TST_ASSERT_STR(\"test_current_url (1)\", url,",
          "1242:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1244:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com\");",
          "1247:    \"https://www.outer.com/test?foo=bar&param1=value1\");",
          "1249:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com:654\");",
          "1251:  TST_ASSERT_STR(\"test_current_url (3)\", url,",
          "1252:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1254:  apr_table_set(r->headers_in, \"X-Forwarded-Port\", \"321\");",
          "1256:  TST_ASSERT_STR(\"test_current_url (4)\", url,",
          "1257:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1259:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http\");",
          "1262:    \"http://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1264:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"https , http\");",
          "1266:  TST_ASSERT_STR(\"test_current_url (6)\", url,",
          "1267:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1269:  apr_table_unset(r->headers_in, \"X-Forwarded-Host\");",
          "1270:  apr_table_unset(r->headers_in, \"X-Forwarded-Port\");",
          "1272:  TST_ASSERT_STR(\"test_current_url (7)\", url,",
          "1273:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1275:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http \");",
          "1276:  apr_table_set(r->headers_in, \"Host\", \"remotehost:8380\");",
          "1277:  r->uri = \"http://remotehost:8380/private/\";",
          "1279:  TST_ASSERT_STR(\"test_current_url (8)\", url,",
          "1280:    \"http://remotehost:8380/private/?foo=bar&param1=value1\");",
          "1282:  apr_table_set(r->headers_in, \"Host\", \"[fd04:41b1:1170:28:16b0:446b:9fb7:7118]:8380\");",
          "1284:  TST_ASSERT_STR(\"test_current_url (9)\", url,",
          "1285:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]:8380/private/?foo=bar&param1=value1\");",
          "1287:  apr_table_set(r->headers_in, \"Host\", \"[fd04:41b1:1170:28:16b0:446b:9fb7:7118]\");",
          "1289:  TST_ASSERT_STR(\"test_current_url (10)\", url,",
          "1290:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]/private/?foo=bar&param1=value1\");",
          "",
          "[Removed Lines]",
          "1240:  url = oidc_get_current_url(r);",
          "1245:  url = oidc_get_current_url(r);",
          "1246:  TST_ASSERT_STR(\"test_current_url (2)\", url,",
          "1250:  url = oidc_get_current_url(r);",
          "1255:  url = oidc_get_current_url(r);",
          "1260:  url = oidc_get_current_url(r);",
          "1261:  TST_ASSERT_STR(\"test_current_url (5)\", url,",
          "1265:  url = oidc_get_current_url(r);",
          "1271:  url = oidc_get_current_url(r);",
          "1278:  url = oidc_get_current_url(r);",
          "1283:  url = oidc_get_current_url(r);",
          "1288:  url = oidc_get_current_url(r);",
          "",
          "[Added Lines]",
          "1240:  url = oidc_get_current_url(r, 0);",
          "1245:  url = oidc_get_current_url(r, 0);",
          "1246:  TST_ASSERT_STR(\"test_current_url (2a)\", url,",
          "1247:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1248:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1249:  TST_ASSERT_STR(\"test_current_url (2b)\", url,",
          "1253:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1258:  url = oidc_get_current_url(r, 0);",
          "1259:  TST_ASSERT_STR(\"test_current_url (4a)\", url,",
          "1260:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1261:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1262:  TST_ASSERT_STR(\"test_current_url (4b)\", url,",
          "1263:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1264:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT);",
          "1269:  url = oidc_get_current_url(r, 0);",
          "1270:  TST_ASSERT_STR(\"test_current_url (5a)\", url,",
          "1271:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1272:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1273:  TST_ASSERT_STR(\"test_current_url (5b)\", url,",
          "1274:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1275:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT);",
          "1276:  TST_ASSERT_STR(\"test_current_url (5c)\", url,",
          "1277:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1278:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT | OIDC_HDR_X_FORWARDED_PROTO);",
          "1279:  TST_ASSERT_STR(\"test_current_url (5d)\", url,",
          "1283:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT | OIDC_HDR_X_FORWARDED_PROTO);",
          "1289:  url = oidc_get_current_url(r,  OIDC_HDR_X_FORWARDED_PROTO);",
          "1296:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_PROTO);",
          "1301:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_PROTO);",
          "1306:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_PROTO);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a394a86be6d5b49b197aa62f0d96c06a0e5e515",
      "candidate_info": {
        "commit_hash": "1a394a86be6d5b49b197aa62f0d96c06a0e5e515",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/1a394a86be6d5b49b197aa62f0d96c06a0e5e515",
        "files": [
          "ChangeLog",
          "Makefile.am",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "test/open-redirect-payload-list.txt",
          "test/test.c"
        ],
        "message": "improve detection of suspicious redirect URLs; add test list\n\nbump to 2.4.11rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  LICENSE.txt \\",
          "62:  auth_openidc.conf \\",
          "63:  test/public.pem \\",
          "66: noinst_DATA = mod_auth_openidc.la",
          "",
          "[Removed Lines]",
          "64:  test/certificate.pem",
          "",
          "[Added Lines]",
          "64:  test/certificate.pem \\",
          "65:  test/open-redirect-payload-list.txt",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2431: #define OIDC_MAX_URL_LENGTH 8192 * 2",
          "2434:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
          "2435:   char **err_desc) {",
          "2436:  apr_uri_t uri;",
          "",
          "[Removed Lines]",
          "2433: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
          "",
          "[Added Lines]",
          "2433: apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2515:   return FALSE;",
          "2516:  }",
          "2518:  return TRUE;",
          "2519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2518:  if ((strstr(url, \"/%09\") != NULL) || (strstr(url, \"/%2f\") != NULL)",
          "2519:    || (strstr(url, \"/%68\") != NULL) || (strstr(url, \"/.\") != NULL)",
          "2520:    || (strstr(url, \"/http:\") != NULL) || (strstr(url, \"/https:\") != NULL)",
          "2521:    || (strstr(url, \"/javascript:\") != NULL) || (strstr(url, \"/\u3031\") != NULL)",
          "2522:    || (strstr(url, \"/\u3035\") != NULL) || (strstr(url, \"/\u309d\") != NULL)",
          "2523:    || (strstr(url, \"/\u30fc\") != NULL) || (strstr(url, \"/\u3031\") != NULL)",
          "2524:    || (strstr(url, \"/\uff70\") != NULL) || (strstr(url, \"/<\") != NULL)",
          "2525:    || (strstr(url, \"%01javascript:\") != NULL) || (strstr(url, \"/%5c\") != NULL)) {",
          "2528:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "2529:   return FALSE;",
          "2530:  }",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "693: apr_byte_t oidc_proto_validate_access_token(request_rec *r, oidc_provider_t *provider, oidc_jwt_t *jwt, const char *response_type, const char *access_token);",
          "694: apr_byte_t oidc_proto_validate_code(request_rec *r, oidc_provider_t *provider, oidc_jwt_t *jwt, const char *response_type, const char *code);",
          "695: apr_byte_t oidc_proto_validate_nonce(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *nonce, oidc_jwt_t *jwt);",
          "698: typedef apr_byte_t (*oidc_authz_match_claim_fn_type)(request_rec *, const char * const, const json_t * const);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696: apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c, const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str, char **err_desc);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:    return TST_ERR_MSG; \\",
          "98:   }",
          "100: #define TST_RUN(test, pool) message = test(pool); test_nr_run++; if (message) return message;",
          "102: static char *_jwk_parse(apr_pool_t *pool, const char *s, oidc_jwk_t **jwk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: #define TST_ASSERT_BYTE(message, result, expected) \\",
          "101:   if (result != expected) { \\",
          "102:    sprintf(TST_ERR_MSG, TST_FORMAT(\"%s\"), __FUNCTION__, message, result ? \"TRUE\" : \"FALSE\", expected ? \"TRUE\" : \"FALSE\"); \\",
          "103:    return TST_ERR_MSG; \\",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1307:  TST_ASSERT_STR(\"test_current_url (10)\", url,",
          "1308:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]/private/?foo=bar&param1=value1\");",
          "1310:  return 0;",
          "1311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:  apr_table_set(r->headers_in, \"Host\", \"www.example.com\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1588:  return 0;",
          "1589: }",
          "1591: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1592:  char *message;",
          "1593:  TST_RUN(test_public_key_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1599: #define TST_OPEN_REDIRECT(url, result) \\",
          "1600:   err_str = NULL; \\",
          "1601:   err_desc = NULL; \\",
          "1602:   rc = oidc_validate_redirect_url(r, c, url, TRUE, &err_str, &err_desc); \\",
          "1603:   msg = apr_psprintf(r->pool, \"test validate_redirect_url (%s): %s: %s\", url, err_str, err_desc); \\",
          "1604:   TST_ASSERT_BYTE(msg, rc, result);",
          "1606: static char* test_open_redirect(request_rec *r) {",
          "1607:  apr_byte_t rc = FALSE;",
          "1608:  char *err_str = NULL, *err_desc = NULL, *url = NULL, *msg = NULL;",
          "1609:  char filename[512];",
          "1610:  char line_buf[8096];",
          "1611:  apr_file_t *f;",
          "1612:  size_t line_s;",
          "1613:  char *dir = getenv(\"srcdir\") ? getenv(\"srcdir\") : \".\";",
          "1615:  sprintf((char* )filename, \"%s/%s\", dir, \"/test/open-redirect-payload-list.txt\");",
          "1617:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "1619:  TST_OPEN_REDIRECT(\"https://www.example.com/somewhere\", TRUE);",
          "1620:  TST_OPEN_REDIRECT(\"https://evil.example.com/somewhere\", FALSE);",
          "1622:  apr_file_open(&f, filename, APR_READ, APR_OS_DEFAULT, r->pool);",
          "1623:  while (1) {",
          "1624:   if (apr_file_gets(line_buf, sizeof(line_buf), f) != APR_SUCCESS)",
          "1625:    break;",
          "1626:   line_s = strlen(line_buf);",
          "1627:   line_buf[--line_s] = '\\0';",
          "1628:   TST_OPEN_REDIRECT(line_buf, FALSE);",
          "1629:  }",
          "1630:  apr_file_close(f);",
          "1632:  return 0;",
          "1633: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1626:  TST_RUN(test_remote_user, r);",
          "1627:  TST_RUN(test_is_auth_capable_request, r);",
          "1629: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1630:  TST_RUN(test_authz_worker, r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:  TST_RUN(test_open_redirect, r);",
          "",
          "---------------"
        ]
      }
    }
  ]
}