{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
      "candidate_info": {
        "commit_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08652b5ea00316539c913fc936e2966c8d58d283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/pragma.c",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Provide the SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA compile-time option to omit the case_sensitive_like pragma.  This change, in combination with documentation changes, is the current solution to ticket [a340eef47b0cad5].\n\nFossilOrigin-Name: eabe7f2d4ff0e0dd868dcab7ec1d4a9168a25f80d3a52f0eeea2f90bd33782f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658b84d7f4a0886591c5aab30ed9e31c4a0f56db303eb863f24833ca37085d14",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1824:   }",
          "1825:   sqlite3CreateFunc(db, \"like\", 2, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1826:   sqlite3CreateFunc(db, \"like\", 3, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1830:   setLikeOptFlag(db, \"like\",",
          "1831:       caseSensitive ? (SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE) : SQLITE_FUNC_LIKE);",
          "1832: }",
          "",
          "[Removed Lines]",
          "1827:   sqlite3CreateFunc(db, \"glob\", 2, SQLITE_UTF8,",
          "1828:       (struct compareInfo*)&globInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1829:   setLikeOptFlag(db, \"glob\", SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424: #ifndef SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: #endif",
          "181:  {/* zName:     */ \"case_sensitive_like\",",
          "186:  {/* zName:     */ \"cell_size_check\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #if !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "187: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   NAME: case_sensitive_like",
          "303:   FLAG: NoColumns",
          "305:   NAME: integrity_check",
          "306:   FLAG: NeedSchema Result0 Result1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:   IF:   !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
      "candidate_info": {
        "commit_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/filter1.test"
        ],
        "message": "Fix a problem with queries containing a min() or max() function for which the FILTER clause excludes all rows.\n\nFossilOrigin-Name: b1d7e104e034655fe41bc55c562d91e8074a2973d538b8b29301458db45afc57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 601ce9532d34f97a5faa170b6d8a272e5c54f2eabff84660201a1840e0fd9929",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5343:   int i;",
          "5344:   int regHit = 0;",
          "5345:   int addrHitTest = 0;",
          "5346:   struct AggInfo_func *pF;",
          "5347:   struct AggInfo_col *pC;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5346:   int bFilterMinMax = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5356:     assert( !IsWindowFunc(pF->pExpr) );",
          "5357:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5358:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5359:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5360:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5361:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5360:       if( pAggInfo->nAccumulator",
          "5361:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5362:       ){",
          "5363:         bFilterMinMax = 1;",
          "5364:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5369:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5370:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5406:   for(i=0, pC=pAggInfo->aCol; i<pAggInfo->nAccumulator; i++, pC++){",
          "5407:     sqlite3ExprCode(pParse, pC->pExpr, pC->iMem);",
          "5408:   }",
          "5409:   pAggInfo->directMode = 0;",
          "5410:   if( addrHitTest ){",
          "5411:     sqlite3VdbeJumpHere(v, addrHitTest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5421:   if( bFilterMinMax ){",
          "5425:     sqlite3VdbeAddOp2(v, OP_Integer, 1, regHit);",
          "5426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6581:       {",
          "6589:         if( sAggInfo.nAccumulator ){",
          "6590:           for(i=0; i<sAggInfo.nFunc; i++){",
          "6591:             if( sAggInfo.aFunc[i].pFunc->funcFlags&SQLITE_FUNC_NEEDCOLL ) break;",
          "6592:           }",
          "6593:           if( i==sAggInfo.nFunc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6614:             if( ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_WinFunc) ) continue;",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #-------------------------------------------------------------------------",
          "105: reset_db",
          "106: do_execsql_test 3.0 {",
          "107:   CREATE TABLE t1(a,b);",
          "108:   INSERT INTO t1 VALUES(1, 1);",
          "109: }",
          "110: do_execsql_test 3.1 {",
          "111:   SELECT b, max(a) FILTER (WHERE b='x') FROM t1;",
          "112: } {1 {}}",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE t2(a, b, c);",
          "116:   INSERT INTO t2 VALUES(1, 2, 3);",
          "117:   INSERT INTO t2 VALUES(1, 3, 4);",
          "118:   INSERT INTO t2 VALUES(2, 5, 6);",
          "119:   INSERT INTO t2 VALUES(2, 7, 8);",
          "120: }",
          "121: do_execsql_test 3.3 {",
          "122:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "123: } {1 3 {} 2 6 {}}",
          "125: do_execsql_test 3.4 {",
          "126:   DELETE FROM t2;",
          "127:   INSERT INTO t2 VALUES(1, 5, 'x');",
          "128:   INSERT INTO t2 VALUES(1, 2, 3);",
          "129:   INSERT INTO t2 VALUES(1, 4, 'x');",
          "130:   INSERT INTO t2 VALUES(2, 5, 6);",
          "131:   INSERT INTO t2 VALUES(2, 7, 8);",
          "132: }",
          "133: do_execsql_test 3.5 {",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
      "candidate_info": {
        "commit_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "files": [
          "ext/lsm1/lsm_vtab.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to the query planner for the LSM1 extension.\n\nFossilOrigin-Name: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
        "before_after_code_files": [
          "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c": [
          "File: ext/lsm1/lsm_vtab.c -> ext/lsm1/lsm_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   const struct sqlite3_index_constraint *pConstraint;",
          "844:   pConstraint = pIdxInfo->aConstraint;",
          "846:     if( pConstraint->usable==0 ) continue;",
          "847:     if( pConstraint->iColumn!=0 ) continue;",
          "848:     switch( pConstraint->op ){",
          "",
          "[Removed Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint && idxNum<16; i++, pConstraint++){",
          "",
          "[Added Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
      "candidate_info": {
        "commit_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Avoid allocating excessive registers for the PARTITION BY expressions when processing window functions.\n\nFossilOrigin-Name: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:   int regResult;",
          "",
          "[Removed Lines]",
          "3574:   int regPart;            /* First in a set of registers holding PARTITION BY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118: void sqlite3WindowCodeInit(Parse *pParse, Window *pMWin){",
          "1119:   Window *pWin;",
          "1120:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1124:     pMWin->regPart = pParse->nMem+1;",
          "1127:   }",
          "1129:   pMWin->regFirst = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1121:   int nPart = (pMWin->pPartition ? pMWin->pPartition->nExpr : 0);",
          "1122:   nPart += (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1123:   if( nPart ){",
          "1125:     pParse->nMem += nPart;",
          "1126:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "",
          "[Added Lines]",
          "1124:   if( pMWin->pPartition ){",
          "1125:     int nExpr = pMWin->pPartition->nExpr;",
          "1127:     pParse->nMem += nExpr;",
          "1128:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nExpr-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2302:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2303:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2307:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2308:   if( regPeer ){",
          "2309:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2306:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2354:       }",
          "2355:     }",
          "2356:   }",
          "2360:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2357:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2366:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2367:   }",
          "2370:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2371:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2372:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2369:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2417:   if( pMWin->pPartition ){",
          "2418:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2419:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2416:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e752040c099f4137c7cbab3c4a51c684ed8173be",
      "candidate_info": {
        "commit_hash": "e752040c099f4137c7cbab3c4a51c684ed8173be",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e752040c099f4137c7cbab3c4a51c684ed8173be",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5savepoint.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() in fts5 that could fail if an xSavepoint() call on another vtab fails.\n\nFossilOrigin-Name: a5d7f5d24a239f729de0b8aa5becf5af35ba87160565ee0713c335b8d1bbf12d",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5savepoint.test||ext/fts5/test/fts5savepoint.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:     case FTS5_ROLLBACKTO:",
          "290:       assert( p->ts.eState==1 );",
          "291:       assert( iSavepoint>=-1 );",
          "293:       p->ts.iSavepoint = iSavepoint;",
          "294:       break;",
          "295:   }",
          "",
          "[Removed Lines]",
          "292:       assert( iSavepoint<=p->ts.iSavepoint );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5savepoint.test||ext/fts5/test/fts5savepoint.test": [
          "File: ext/fts5/test/fts5savepoint.test -> ext/fts5/test/fts5savepoint.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Dec 26",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] fts5_common.tcl]",
          "14: set testprefix fts5savepoint",
          "16: # If SQLITE_ENABLE_FTS5 is defined, omit this file.",
          "17: ifcapable !fts5 {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE VIRTUAL TABLE ft USING fts5(c);",
          "24:   BEGIN;",
          "25:     SAVEPOINT one;",
          "26:       INSERT INTO ft VALUES('a');",
          "27:       SAVEPOINT two;",
          "28:         INSERT INTO ft VALUES('b');",
          "29:       RELEASE two;",
          "30:       SAVEPOINT four;",
          "31:         INSERT INTO ft VALUES('c');",
          "32:       RELEASE four;",
          "33:       SAVEPOINT three;",
          "34:         INSERT INTO ft VALUES('d');",
          "35:       ROLLBACK TO three;",
          "36:   COMMIT;",
          "37:   SELECT * FROM ft",
          "38: } {a b c}",
          "40: reset_db",
          "41: do_catchsql_test 2.0 {",
          "42:   CREATE VIRTUAL TABLE ft1 USING fts5(c);",
          "43:   CREATE VIRTUAL TABLE ft2 USING fts5(c);",
          "44:   DROP TABLE ft2_idx;",
          "45:   BEGIN;",
          "46:       INSERT INTO ft2 VALUES('a');",
          "47:       INSERT INTO ft1 VALUES('a');",
          "48:       SAVEPOINT two;",
          "49:         INSERT INTO ft1 VALUES('b');",
          "50:   COMMIT;",
          "51: } {1 {SQL logic error}}",
          "53: reset_db",
          "54: ifcapable fts3 {",
          "55:   do_execsql_test 3.0 {",
          "56:     CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "57:     CREATE VIRTUAL TABLE vt1 USING fts4(c0);",
          "58:     INSERT INTO vt1(c0) VALUES(0);",
          "59:   }",
          "61:   do_execsql_test 3.1 {",
          "62:     BEGIN;",
          "63:       UPDATE vt1 SET c0 = 0;",
          "64:       INSERT INTO vt1(c0) VALUES (0), (0);",
          "65:       UPDATE vt0 SET c0 = 0;",
          "66:       INSERT INTO vt1(c0) VALUES (0);",
          "67:       UPDATE vt1 SET c0 = 0;",
          "68:       INSERT INTO vt1(vt1) VALUES('automerge=1');",
          "69:       UPDATE vt1 SET c0 = 0;",
          "70:   }",
          "72:   do_catchsql_test 3.2 {",
          "73:     DROP TABLE vt1;",
          "74:   } {1 {SQL logic error}}",
          "76:   do_execsql_test 3.3 {",
          "77:     SAVEPOINT x;",
          "78:       INSERT INTO vt0 VALUES('x');",
          "79:     COMMIT;",
          "80:     INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "81:   }",
          "82: }",
          "84: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f482a4cdfa768941e22c399de8ec29a55e729529eeae86d3832077ad1bef22f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}