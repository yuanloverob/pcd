{
  "cve_id": "CVE-2019-13300",
  "cve_desc": "ImageMagick 7.0.8-50 Q16 has a heap-based buffer overflow at MagickCore/statistic.c in EvaluateImages because of mishandling columns.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "a906fe9298bf89e01d5272023db687935068849a",
  "patch_info": {
    "commit_hash": "a906fe9298bf89e01d5272023db687935068849a",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/a906fe9298bf89e01d5272023db687935068849a",
    "files": [
      "MagickCore/statistic.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/1586",
    "before_after_code_files": [
      "MagickCore/statistic.c||MagickCore/statistic.c"
    ]
  },
  "patch_diff": {
    "MagickCore/statistic.c||MagickCore/statistic.c": [
      "File: MagickCore/statistic.c -> MagickCore/statistic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:       pixels[i]=(PixelChannels *) RelinquishMagickMemory(pixels[i]);",
      "151:   pixels=(PixelChannels **) RelinquishMagickMemory(pixels);",
      "152:   return(pixels);",
      "155: static PixelChannels **AcquirePixelThreadSet(const Image *image)",
      "156: {",
      "157:   PixelChannels",
      "",
      "[Removed Lines]",
      "153: }",
      "",
      "[Added Lines]",
      "153: }",
      "155: static PixelChannels **AcquirePixelThreadSet(const Image *images)",
      "156: {",
      "157:   const Image",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:   register ssize_t",
      "161:     i;",
      "163:   size_t",
      "164:     number_threads;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "167:   pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,",
      "168:     sizeof(*pixels));",
      "169:   if (pixels == (PixelChannels **) NULL)",
      "170:     return((PixelChannels **) NULL);",
      "171:   (void) memset(pixels,0,number_threads*sizeof(*pixels));",
      "172:   for (i=0; i < (ssize_t) number_threads; i++)",
      "173:   {",
      "174:     register ssize_t",
      "177:     pixels[i]=(PixelChannels *) AcquireQuantumMemory(image->columns,",
      "178:       sizeof(**pixels));",
      "180:       return(DestroyPixelThreadSet(pixels));",
      "181:     for (j=0; j < (ssize_t) image->columns; j++)",
      "182:     {",
      "",
      "[Removed Lines]",
      "175:       j;",
      "179:     if (pixels[i] == (PixelChannels *) NULL)",
      "",
      "[Added Lines]",
      "174:     return((PixelChannels **) NULL);",
      "175:   (void) memset(pixels,0,number_threads*sizeof(*pixels));",
      "176:   columns=images->columns;",
      "182:       j;",
      "185:     if (pixels[i] == (PixelChannels *) NULL)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c33fe5984950fdb104d7f0553aee25cb66058a3",
      "candidate_info": {
        "commit_hash": "0c33fe5984950fdb104d7f0553aee25cb66058a3",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/0c33fe5984950fdb104d7f0553aee25cb66058a3",
        "files": [
          "MagickCore/statistic.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "MagickCore/statistic.c||MagickCore/statistic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/statistic.c||MagickCore/statistic.c"
          ],
          "candidate": [
            "MagickCore/statistic.c||MagickCore/statistic.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/statistic.c||MagickCore/statistic.c": [
          "File: MagickCore/statistic.c -> MagickCore/statistic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   register ssize_t",
          "170:     i;",
          "172:   size_t",
          "173:     columns,",
          "176:   rows=MagickMax(GetImageListLength(images),",
          "177:     (size_t) GetMagickResourceLimit(ThreadResource));",
          "178:   pixels=(PixelChannels **) AcquireQuantumMemory(rows,sizeof(*pixels));",
          "179:   if (pixels == (PixelChannels **) NULL)",
          "181:   (void) memset(pixels,0,rows*sizeof(*pixels));",
          "182:   columns=MagickMax(GetImageListLength(images),MaxPixelChannels);",
          "183:   for (next=images; next != (Image *) NULL; next=next->next)",
          "",
          "[Removed Lines]",
          "174:     rows;",
          "180:     return((PixelChannels **) NULL);",
          "",
          "[Added Lines]",
          "172:   size_t",
          "175:     rows;",
          "181:     return((PixelChannels **) NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:       result=(double) (QuantumRange*exp((double) (value*QuantumScale*pixel)));",
          "295:       break;",
          "296:     }",
          "299:       result=(double) GenerateDifferentialNoise(random_info,pixel,",
          "300:         GaussianNoise,value);",
          "301:       break;",
          "",
          "[Removed Lines]",
          "297:     case GaussianNoiseEvaluateOperator:",
          "298:     {",
          "",
          "[Added Lines]",
          "298:     case GaussianNoiseEvaluateOperator:",
          "299:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "610:         for (x=0; x < (ssize_t) image->columns; x++)",
          "611:         {",
          "612:           register ssize_t",
          "616:             for (i=0; i < MaxPixelChannels; i++)",
          "617:               evaluate_pixel[j].channel[i]=0.0;",
          "618:           next=images;",
          "619:           for (j=0; j < (ssize_t) number_images; j++)",
          "620:           {",
          "621:             for (i=0; i < (ssize_t) GetPixelChannels(image); i++)",
          "",
          "[Removed Lines]",
          "613:             i;",
          "615:           for (j=0; j < (ssize_t) number_images; j++)",
          "",
          "[Added Lines]",
          "617:           for (j=0; j < (ssize_t) number_images; j++)",
          "618:           {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "025e77fcb2f45b21689931ba3bf74eac153afa48",
      "candidate_info": {
        "commit_hash": "025e77fcb2f45b21689931ba3bf74eac153afa48",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/025e77fcb2f45b21689931ba3bf74eac153afa48",
        "files": [
          "MagickCore/statistic.c"
        ],
        "message": "https://github.com/ImageMagick/ImageMagick/issues/1615",
        "before_after_code_files": [
          "MagickCore/statistic.c||MagickCore/statistic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/statistic.c||MagickCore/statistic.c"
          ],
          "candidate": [
            "MagickCore/statistic.c||MagickCore/statistic.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/statistic.c||MagickCore/statistic.c": [
          "File: MagickCore/statistic.c -> MagickCore/statistic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   register ssize_t",
          "164:     i;",
          "167:     columns,",
          "171:   pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,",
          "172:     sizeof(*pixels));",
          "175:   (void) memset(pixels,0,number_threads*sizeof(*pixels));",
          "176:   columns=images->columns;",
          "178:     columns=MagickMax(next->columns,columns);",
          "179:   for (i=0; i < (ssize_t) number_threads; i++)",
          "180:   {",
          "",
          "[Removed Lines]",
          "166:   size_t",
          "168:     number_threads;",
          "170:   number_threads=(size_t) GetMagickResourceLimit(ThreadResource);",
          "173:   if (pixels == (PixelChannels **) NULL)",
          "174:     return((PixelChannels **) NULL);",
          "177:   for (next=images; next != (Image *) NULL; next=next->next)",
          "",
          "[Added Lines]",
          "166:   size_t",
          "168:     rows;",
          "170:   rows=MagickMax(GetImageListLength(images),",
          "173:   if (pixels == (PixelChannels **) NULL)",
          "176:   for (next=images; next != (Image *) NULL; next=next->next)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc33f038d26fef62904becc3ba004d7525fb6418",
      "candidate_info": {
        "commit_hash": "cc33f038d26fef62904becc3ba004d7525fb6418",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/cc33f038d26fef62904becc3ba004d7525fb6418",
        "files": [
          "MagickCore/statistic.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "MagickCore/statistic.c||MagickCore/statistic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/statistic.c||MagickCore/statistic.c"
          ],
          "candidate": [
            "MagickCore/statistic.c||MagickCore/statistic.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/statistic.c||MagickCore/statistic.c": [
          "File: MagickCore/statistic.c -> MagickCore/statistic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     (size_t) GetMagickResourceLimit(ThreadResource));",
          "178:   pixels=(PixelChannels **) AcquireQuantumMemory(rows,sizeof(*pixels));",
          "179:   if (pixels == (PixelChannels **) NULL)",
          "181:   (void) memset(pixels,0,rows*sizeof(*pixels));",
          "182:   columns=MaxPixelChannels;",
          "183:   for (next=images; next != (Image *) NULL; next=next->next)",
          "",
          "[Removed Lines]",
          "180:     return((PixelChannels **) NULL);",
          "",
          "[Added Lines]",
          "180:     return((PixelChannels **) NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}