{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3be6f0dc79b69f38a82d55569a3eab6452b99682",
      "candidate_info": {
        "commit_hash": "3be6f0dc79b69f38a82d55569a3eab6452b99682",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3be6f0dc79b69f38a82d55569a3eab6452b99682",
        "files": [
          "ext/standard/credits.c"
        ],
        "message": "update the credits",
        "before_after_code_files": [
          "ext/standard/credits.c||ext/standard/credits.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/credits.c||ext/standard/credits.c": [
          "File: ext/standard/credits.c -> ext/standard/credits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   php_info_print_table_start();",
          "62:   php_info_print_table_colspan_header(2, \"PHP Authors\");",
          "63:   php_info_print_table_header(2, \"Contribution\", \"Authors\");",
          "65:   CREDIT_LINE(\"Extension Module API\", \"Andi Gutmans, Zeev Suraski, Andrei Zmievski\");",
          "66:   CREDIT_LINE(\"UNIX Build and Modularization\", \"Stig Bakken, Sascha Schumann, Jani Taskinen\");",
          "68:   CREDIT_LINE(\"Server API (SAPI) Abstraction Layer\", \"Andi Gutmans, Shane Caraveo, Zeev Suraski\");",
          "69:   CREDIT_LINE(\"Streams Abstraction Layer\", \"Wez Furlong, Sara Golemon\");",
          "70:   CREDIT_LINE(\"PHP Data Objects Layer\", \"Wez Furlong, Marcus Boerger, Sterling Hughes, George Schlossnagle, Ilia Alshanetsky\");",
          "",
          "[Removed Lines]",
          "64:   CREDIT_LINE(\"Zend Scripting Language Engine\", \"Andi Gutmans, Zeev Suraski, Stanislav Malyshev, Marcus Boerger, Dmitry Stogov\");",
          "67:   CREDIT_LINE(\"Windows Port\", \"Shane Caraveo, Zeev Suraski, Wez Furlong, Pierre-Alain Joye\");",
          "",
          "[Added Lines]",
          "64:   CREDIT_LINE(\"Zend Scripting Language Engine\", \"Andi Gutmans, Zeev Suraski, Stanislav Malyshev, Marcus Boerger, Dmitry Stogov, Xinchen Hui, Nikita Popov\");",
          "67:   CREDIT_LINE(\"Windows Port\", \"Shane Caraveo, Zeev Suraski, Wez Furlong, Pierre-Alain Joye, Anatol Belski\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:  if (flag & PHP_CREDITS_DOCS) {",
          "96:   php_info_print_table_start();",
          "97:   php_info_print_table_colspan_header(2, \"PHP Documentation\");",
          "99:   CREDIT_LINE(\"Editor\", \"Philip Olson\");",
          "100:   CREDIT_LINE(\"User Note Maintainers\", \"Daniel P. Brown, Thiago Henrique Pojda\");",
          "101:   CREDIT_LINE(\"Other Contributors\", \"Previously active authors, editors and other contributors are listed in the manual.\");",
          "",
          "[Removed Lines]",
          "98:   CREDIT_LINE(\"Authors\", \"Mehdi Achour, Friedhelm Betz, Antony Dovgal, Nuno Lopes, Hannes Magnusson, Georg Richter, Damien Seguy, Jakub Vrana\");",
          "",
          "[Added Lines]",
          "98:   CREDIT_LINE(\"Authors\", \"Mehdi Achour, Friedhelm Betz, Antony Dovgal, Nuno Lopes, Hannes Magnusson, Georg Richter, Damien Seguy, Jakub Vrana, Adam Harvey, Peter Cowburn\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:  if (flag & PHP_CREDITS_QA) {",
          "106:   php_info_print_table_start();",
          "107:   php_info_print_table_header(1, \"PHP Quality Assurance Team\");",
          "109:   php_info_print_table_end();",
          "110:  }",
          "",
          "[Removed Lines]",
          "108:   php_info_print_table_row(1, \"Ilia Alshanetsky, Joerg Behrens, Antony Dovgal, Stefan Esser, Moriyoshi Koizumi, Magnus Maatta, Sebastian Nohn, Derick Rethans, Melvyn Sopacua, Jani Taskinen, Pierre-Alain Joye, Dmitry Stogov, Felipe Pena, David Soria Parra\");",
          "",
          "[Added Lines]",
          "108:   php_info_print_table_row(1, \"Ilia Alshanetsky, Joerg Behrens, Antony Dovgal, Stefan Esser, Moriyoshi Koizumi, Magnus Maatta, Sebastian Nohn, Derick Rethans, Melvyn Sopacua, Jani Taskinen, Pierre-Alain Joye, Dmitry Stogov, Felipe Pena, David Soria Parra, Stephen Zarkos, Anatol Belski, Ferenc Kovacs\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:   php_info_print_table_start();",
          "116:   php_info_print_table_colspan_header(2, \"Websites and Infrastructure team\");",
          "119:   CREDIT_LINE(\"Event Maintainers\", \"Damien Seguy, Daniel P. Brown\");",
          "121:   CREDIT_LINE(\"Network Infrastructure\", \"Daniel P. Brown\");",
          "",
          "[Removed Lines]",
          "118:   CREDIT_LINE(\"PHP Websites Team\", \"Rasmus Lerdorf, Hannes Magnusson, Philip Olson, Lukas Kahwe Smith, Pierre-Alain Joye, Kalle Sommer Nielsen\");",
          "",
          "[Added Lines]",
          "118:   CREDIT_LINE(\"PHP Websites Team\", \"Rasmus Lerdorf, Hannes Magnusson, Philip Olson, Lukas Kahwe Smith, Pierre-Alain Joye, Kalle Sommer Nielsen, Peter Cowburn, Adam Harvey, Ferenc Kovacs, Levi Morrison\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf7fed7e4151983821270fd8c864aa149cdb201b",
      "candidate_info": {
        "commit_hash": "bf7fed7e4151983821270fd8c864aa149cdb201b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/bf7fed7e4151983821270fd8c864aa149cdb201b",
        "files": [
          "ext/spl/tests/unserialize.phpt"
        ],
        "message": "new test, missing in ea466a3",
        "before_after_code_files": [
          "ext/spl/tests/unserialize.phpt||ext/spl/tests/unserialize.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/spl/tests/unserialize.phpt||ext/spl/tests/unserialize.phpt": [
          "File: ext/spl/tests/unserialize.phpt -> ext/spl/tests/unserialize.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: unserialize with no data (for PHPUnit)",
          "3: --FILE--",
          "4: <?php",
          "6: $types = array('SplDoublyLinkedList', 'SplObjectStorage', 'ArrayObject');",
          "8: foreach ($types as $type) {",
          "10:  $exp = serialize(new $type());",
          "12:  $str = sprintf('C:%d:\"%s\":0:{}', strlen($type), $type);",
          "13:  $obj = unserialize($str);",
          "14:  var_dump($obj);",
          "16:  $out = serialize($obj);",
          "18:  var_dump($exp === $out);",
          "19: }",
          "20: ?>",
          "21: ===DONE===",
          "22: --EXPECTF--",
          "23: object(SplDoublyLinkedList)#%d (2) {",
          "24:   [\"flags\":\"SplDoublyLinkedList\":private]=>",
          "25:   int(0)",
          "26:   [\"dllist\":\"SplDoublyLinkedList\":private]=>",
          "27:   array(0) {",
          "28:   }",
          "29: }",
          "30: bool(true)",
          "31: object(SplObjectStorage)#%d (1) {",
          "32:   [\"storage\":\"SplObjectStorage\":private]=>",
          "33:   array(0) {",
          "34:   }",
          "35: }",
          "36: bool(true)",
          "37: object(ArrayObject)#%d (1) {",
          "38:   [\"storage\":\"ArrayObject\":private]=>",
          "39:   array(0) {",
          "40:   }",
          "41: }",
          "42: bool(true)",
          "43: ===DONE===",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df5551ba4f1aae8486b3c4011318188fde7e30cd",
      "candidate_info": {
        "commit_hash": "df5551ba4f1aae8486b3c4011318188fde7e30cd",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/df5551ba4f1aae8486b3c4011318188fde7e30cd",
        "files": [
          "NEWS",
          "ext/standard/array.c"
        ],
        "message": "Fix bug #67433 SIGSEGV when using count() on an object implementing Countable",
        "before_after_code_files": [
          "ext/standard/array.c||ext/standard/array.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/array.c||ext/standard/array.c": [
          "File: ext/standard/array.c -> ext/standard/array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:      RETVAL_LONG(Z_LVAL_P(retval));",
          "343:      zval_ptr_dtor(&retval);",
          "344:     }",
          "347:     return;",
          "348:    }",
          "349: #endif",
          "",
          "[Removed Lines]",
          "345:     zval_dtor(mode_zv);",
          "346:     efree(mode_zv);",
          "",
          "[Added Lines]",
          "345:     zval_ptr_dtor(&mode_zv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16ae792988c577299ea9a34e11ad798739c2d888",
      "candidate_info": {
        "commit_hash": "16ae792988c577299ea9a34e11ad798739c2d888",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/16ae792988c577299ea9a34e11ad798739c2d888",
        "files": [
          "phpdbg_parser.c",
          "phpdbg_parser.y"
        ],
        "message": "Fix issue krakjoe/phpdbg#98 break if does not seem to work",
        "before_after_code_files": [
          "phpdbg_parser.c||phpdbg_parser.c",
          "phpdbg_parser.y||phpdbg_parser.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_parser.c||phpdbg_parser.c": [
          "File: phpdbg_parser.c -> phpdbg_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "437: #define YYFINAL  25",
          "442: #define YYNTOKENS  21",
          "",
          "[Removed Lines]",
          "439: #define YYLAST   41",
          "",
          "[Added Lines]",
          "439: #define YYLAST   42",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493: static const yytype_uint8 yyprhs[] =",
          "494: {",
          "495:        0,     0,     3,     5,     7,     8,    10,    13,    17,    22,",
          "498: };",
          "",
          "[Removed Lines]",
          "496:       27,    33,    37,    43,    47,    49,    51,    53,    55,    57,",
          "497:       59,    61,    64,    67,    70,    72",
          "",
          "[Added Lines]",
          "496:       27,    33,    37,    43,    47,    50,    52,    54,    56,    58,",
          "497:       60,    62,    64,    67,    70,    72",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:       23,    24,    -1,    18,    10,    14,    -1,    18,    10,    12,",
          "505:       14,    -1,    13,    18,    10,    14,    -1,    13,    18,    10,",
          "506:       12,    14,    -1,    18,    11,    18,    -1,    18,    11,    18,",
          "510:        4,    -1,     4,    19,    -1",
          "511: };",
          "",
          "[Removed Lines]",
          "507:       12,    14,    -1,    18,    12,    14,    -1,    17,    -1,    16,",
          "508:       -1,    15,    -1,     7,    -1,     8,    -1,    14,    -1,    18,",
          "509:       -1,     6,    19,    -1,     3,    19,    -1,     5,    19,    -1,",
          "",
          "[Added Lines]",
          "507:       12,    14,    -1,    18,    12,    14,    -1,     6,    19,    -1,",
          "508:       17,    -1,    16,    -1,    15,    -1,     7,    -1,     8,    -1,",
          "509:       14,    -1,    18,    -1,     3,    19,    -1,     5,    19,    -1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "514: static const yytype_uint8 yyrline[] =",
          "515: {",
          "516:        0,    66,    66,    67,    68,    72,    73,    77,    82,    87,",
          "519: };",
          "520: #endif",
          "",
          "[Removed Lines]",
          "517:       97,   107,   112,   118,   124,   125,   126,   127,   128,   129,",
          "518:      130,   134,   139,   144,   149,   153",
          "",
          "[Added Lines]",
          "517:       97,   107,   112,   118,   124,   129,   130,   131,   132,   133,",
          "518:      134,   135,   139,   144,   149,   153",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "552: {",
          "553:        0,    21,    22,    22,    22,    23,    23,    24,    24,    24,",
          "554:       24,    24,    24,    24,    24,    24,    24,    24,    24,    24,",
          "556: };",
          "559: static const yytype_uint8 yyr2[] =",
          "560: {",
          "561:        0,     2,     1,     1,     0,     1,     2,     3,     4,     4,",
          "564: };",
          "",
          "[Removed Lines]",
          "555:       24,    25,    25,    25,    25,    25",
          "562:        5,     3,     5,     3,     1,     1,     1,     1,     1,     1,",
          "563:        1,     2,     2,     2,     1,     2",
          "",
          "[Added Lines]",
          "555:       24,    24,    25,    25,    25,    25",
          "562:        5,     3,     5,     3,     2,     1,     1,     1,     1,     1,",
          "563:        1,     1,     2,     2,     1,     2",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "569: static const yytype_uint8 yydefact[] =",
          "570: {",
          "574:       11,    13,     0,     9,     8,     0,    10,    12",
          "575: };",
          "",
          "[Removed Lines]",
          "571:        4,     0,    24,     0,     0,    17,    18,     0,    19,    16,",
          "572:       15,    14,    20,     0,     2,     5,     3,    22,    25,    23,",
          "573:       21,     0,     0,     0,     0,     1,     6,     0,     0,     7,",
          "",
          "[Added Lines]",
          "571:        4,     0,    24,     0,     0,    18,    19,     0,    20,    17,",
          "572:       16,    15,    21,     0,     2,     5,     3,    22,    25,    23,",
          "573:       14,     0,     0,     0,     0,     1,     6,     0,     0,     7,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "585: #define YYPACT_NINF -11",
          "586: static const yytype_int8 yypact[] =",
          "587: {",
          "592: };",
          "595: static const yytype_int8 yypgoto[] =",
          "596: {",
          "598: };",
          "",
          "[Removed Lines]",
          "588:       -3,   -10,    10,    11,    12,   -11,   -11,    14,   -11,   -11,",
          "589:      -11,   -11,    -4,    28,     9,   -11,   -11,   -11,   -11,   -11,",
          "590:      -11,    23,     6,    16,    21,   -11,   -11,     7,    22,   -11,",
          "591:       25,   -11,    24,   -11,   -11,    26,   -11,   -11",
          "597:      -11,   -11,   -11,    27,   -11",
          "",
          "[Added Lines]",
          "588:       -3,   -10,    11,    12,    13,   -11,   -11,    15,   -11,   -11,",
          "589:      -11,   -11,    -4,    29,    10,   -11,   -11,   -11,   -11,   -11,",
          "590:      -11,    24,     7,    17,    22,   -11,   -11,     8,    23,   -11,",
          "591:       26,   -11,    25,   -11,   -11,    27,   -11,   -11",
          "597:      -11,   -11,   -11,    28,   -11",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "604: static const yytype_uint8 yytable[] =",
          "605: {",
          "606:        1,     2,     3,     4,     5,     6,    22,    23,    24,    17,",
          "611: };",
          "613: #define yypact_value_is_default(yystate) \\",
          "",
          "[Removed Lines]",
          "607:        7,     8,     9,    10,    11,    12,     5,     6,    28,    32,",
          "608:       29,    33,     7,     8,     9,    10,    11,    12,    25,    18,",
          "609:       19,    20,    21,    27,    30,    31,    34,    35,    36,     0,",
          "610:       37,    26",
          "",
          "[Added Lines]",
          "607:        7,     8,     9,    10,    11,    12,     4,     5,     6,    28,",
          "608:       32,    29,    33,     7,     8,     9,    10,    11,    12,    25,",
          "609:       18,    19,    20,    21,    27,    30,    31,    34,    35,    36,",
          "610:        0,    37,    26",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "619: static const yytype_int8 yycheck[] =",
          "620: {",
          "621:        3,     4,     5,     6,     7,     8,    10,    11,    12,    19,",
          "626: };",
          "",
          "[Removed Lines]",
          "622:       13,    14,    15,    16,    17,    18,     7,     8,    12,    12,",
          "623:       14,    14,    13,    14,    15,    16,    17,    18,     0,    19,",
          "624:       19,    19,    18,    10,    18,    14,    14,    12,    14,    -1,",
          "625:       14,    14",
          "",
          "[Added Lines]",
          "622:       13,    14,    15,    16,    17,    18,     6,     7,     8,    12,",
          "623:       12,    14,    14,    13,    14,    15,    16,    17,    18,     0,",
          "624:       19,    19,    19,    18,    10,    18,    14,    14,    12,    14,",
          "625:       -1,    14,    14",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1563:   case 14:",
          "1565: #line 124 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1567:     break;",
          "1569:   case 15:",
          "1572:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1573:     break;",
          "1575:   case 16:",
          "1578:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1579:     break;",
          "1581:   case 17:",
          "1584:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1585:     break;",
          "1587:   case 18:",
          "1590:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1591:     break;",
          "1593:   case 19:",
          "1596:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1597:     break;",
          "1599:   case 20:",
          "1602:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1603:     break;",
          "1605:   case 21:",
          "1613:     break;",
          "1615:   case 22:",
          "",
          "[Removed Lines]",
          "1566:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1571: #line 125 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1577: #line 126 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1583: #line 127 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1589: #line 128 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1595: #line 129 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1601: #line 130 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1607: #line 134 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1608:     {",
          "1609:   (yyval).type = COND_PARAM;",
          "1610:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1611:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1612:  }",
          "",
          "[Added Lines]",
          "1566:     {",
          "1567:   (yyval).type = COND_PARAM;",
          "1568:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1569:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1570:  }",
          "1575: #line 129 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1581: #line 130 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1587: #line 131 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1593: #line 132 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1599: #line 133 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1605: #line 134 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1611: #line 135 \"/var/root/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1612:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "",
          "---------------"
        ],
        "phpdbg_parser.y||phpdbg_parser.y": [
          "File: phpdbg_parser.y -> phpdbg_parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   $$.len = $1.len;",
          "122:   $$.num = $3.num;",
          "123:  }",
          "124:  | T_OPCODE { $$ = $1; }",
          "125:  | T_ADDR { $$ = $1; }",
          "126:  | T_LITERAL { $$ = $1; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:  | T_IF T_INPUT {",
          "125:   $$.type = COND_PARAM;",
          "126:   $$.str = $2.str;",
          "127:   $$.len = $2.len;",
          "128:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  ;",
          "133: full_expression",
          "140:   $$.type = EVAL_PARAM;",
          "141:   $$.str = $2.str;",
          "142:   $$.len = $2.len;",
          "",
          "[Removed Lines]",
          "134:  : T_IF T_INPUT {",
          "135:   $$.type = COND_PARAM;",
          "136:   $$.str = $2.str;",
          "137:   $$.len = $2.len;",
          "138:  }",
          "139:  | T_EVAL T_INPUT {",
          "",
          "[Added Lines]",
          "139:  : T_EVAL T_INPUT {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c580d9b69caffbf2c75ff18c08c99cc9b78d96f1",
      "candidate_info": {
        "commit_hash": "c580d9b69caffbf2c75ff18c08c99cc9b78d96f1",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/c580d9b69caffbf2c75ff18c08c99cc9b78d96f1",
        "files": [
          "NEWS",
          "ext/pgsql/pgsql.c"
        ],
        "message": "Fix ext/pgsql builds against libpq 7.3.\n\nFixes bug #67555 (Cannot build against libpq 7.3).",
        "before_after_code_files": [
          "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c": [
          "File: ext/pgsql/pgsql.c -> ext/pgsql/pgsql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:  REGISTER_LONG_CONSTANT(\"PGSQL_CONNECTION_MADE\", CONNECTION_MADE, CONST_CS | CONST_PERSISTENT);",
          "1128:  REGISTER_LONG_CONSTANT(\"PGSQL_CONNECTION_AWAITING_RESPONSE\", CONNECTION_AWAITING_RESPONSE, CONST_CS | CONST_PERSISTENT);",
          "1129:  REGISTER_LONG_CONSTANT(\"PGSQL_CONNECTION_AUTH_OK\", CONNECTION_AUTH_OK, CONST_CS | CONST_PERSISTENT);",
          "1130:  REGISTER_LONG_CONSTANT(\"PGSQL_CONNECTION_SSL_STARTUP\", CONNECTION_SSL_STARTUP, CONST_CS | CONST_PERSISTENT);",
          "1131:  REGISTER_LONG_CONSTANT(\"PGSQL_CONNECTION_SETENV\", CONNECTION_SETENV, CONST_CS | CONST_PERSISTENT);",
          "1133:  REGISTER_LONG_CONSTANT(\"PGSQL_POLLING_FAILED\", PGRES_POLLING_FAILED, CONST_CS | CONST_PERSISTENT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130: #ifdef CONNECTION_SSL_STARTUP",
          "1132: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}