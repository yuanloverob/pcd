{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92107a38dccca75441fb080875e24822ec7a7695",
      "candidate_info": {
        "commit_hash": "92107a38dccca75441fb080875e24822ec7a7695",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92107a38dccca75441fb080875e24822ec7a7695",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/walfault2.test",
          "test/walvfs.test"
        ],
        "message": "Add a few more test cases to walfault2.test and walvfs.test.\n\nFossilOrigin-Name: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/walfault2.test||test/walfault2.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:   walfault2.test",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2010 May 03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/malloc_common.tcl",
          "19: source $testdir/lock_common.tcl",
          "21: ifcapable !wal {finish_test ; return }",
          "22: set testprefix walfault2",
          "24: #-------------------------------------------------------------------------",
          "25: # Inject faults while truncating the wal file.",
          "26: #",
          "27: do_execsql_test 1.0 {",
          "28:   PRAGMA auto_vacuum = 0;",
          "29:   CREATE TABLE t1(a, b);",
          "30:   PRAGMA journal_mode = wal;",
          "31:   WITH s(i) AS (",
          "32:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "33:   )",
          "34:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "35: } {wal}",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "42:   execsql {",
          "43:     PRAGMA wal_checkpoint;",
          "44:     PRAGMA journal_size_limit = 10000;",
          "45:     PRAGMA synchronous = full;",
          "46:   }",
          "47: } -body {",
          "48:   execsql { INSERT INTO t1 VALUES(1,1) }",
          "49: } -test {",
          "50:   faultsim_test_result {0 {}}",
          "51: }",
          "53: #-------------------------------------------------------------------------",
          "54: # Inject faults while rewriting checksums.",
          "55: #",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   PRAGMA auto_vacuum = 0;",
          "59:   CREATE TABLE t1(a, b);",
          "60:   PRAGMA journal_mode = wal;",
          "61:   WITH s(i) AS (",
          "62:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "63:   )",
          "64:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "65: } {wal}",
          "66: faultsim_save_and_close",
          "68: do_faultsim_test 2 -prep {",
          "69:   faultsim_restore_and_reopen",
          "70:   execsql {",
          "71:     PRAGMA cache_size = 2;",
          "72:     BEGIN;",
          "73:     UPDATE t1 SET a=randomblob(400);",
          "74:     UPDATE t1 SET b=randomblob(400);",
          "75:     UPDATE t1 SET a=randomblob(400);",
          "76:     UPDATE t1 SET b=randomblob(400);",
          "77:     UPDATE t1 SET a=randomblob(400);",
          "78:     UPDATE t1 SET b=randomblob(400);",
          "79:     UPDATE t1 SET a=randomblob(400);",
          "80:     UPDATE t1 SET b=randomblob(400);",
          "81:   }",
          "82: } -body {",
          "83:   execsql COMMIT",
          "84: } -test {",
          "85:   faultsim_test_result {0 {}}",
          "86: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "277: db close",
          "278: tvfs delete",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Check that a checkpoint fails if it cannot get the CHECKPOINTER lock",
          "280: #",
          "281: reset_db",
          "282: tvfs filter {}",
          "283: db close",
          "284: sqlite3 db test.db -vfs tvfs",
          "285: do_execsql_test 7.0 {",
          "286:   PRAGMA auto_vacuum = 0;",
          "287:   PRAGMA page_size = 1024;",
          "288:   CREATE TABLE t1(x);",
          "289:   PRAGMA journal_mode = wal;",
          "290:   WITH s(i) AS (",
          "291:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "292:   )",
          "293:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "294: } {wal}",
          "296: tvfs script xShmLock",
          "297: tvfs filter xShmLock",
          "298: proc xShmLock {method file handle spec} {",
          "299:   if {$spec==\"1 1 lock exclusive\"} {",
          "300:     return SQLITE_BUSY",
          "301:   }",
          "302:   return SQLITE_OK",
          "303: }",
          "305: do_execsql_test 7.1 {",
          "306:   PRAGMA wal_checkpoint",
          "307: } {1 -1 -1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfa70de11729499021b5cf91e78fd49fa1784d43",
      "candidate_info": {
        "commit_hash": "bfa70de11729499021b5cf91e78fd49fa1784d43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bfa70de11729499021b5cf91e78fd49fa1784d43",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 61fdfc57b9539cb6da5fc24653da2c8fb7c041a7409df911df11b987ed479a3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e7aca0714bc475e04b16e9db78722ce025d2a1382f80cfc0a49cff2af904eae5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
      "candidate_info": {
        "commit_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix VDBE opcodes OP_SeekLT and OP_SeekLE so that they work on intkey tables with non-numeric text values.\n\nFossilOrigin-Name: a870c196d78d8b72c7353fa0015e96b2abd4be154541d76328e3a4f9e5da5d04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4014:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "4017:         VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4018:         break;",
          "4019:       }",
          "",
          "[Added Lines]",
          "4015:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4016:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4017:           break;",
          "4018:         }else{",
          "4019:           sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4020:           goto seek_not_found;",
          "4021:         }",
          "4022:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4040:         assert( (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) );",
          "4041:         if( (oc & 0x0001)==(OP_SeekLT & 0x0001) ) oc++;",
          "4042:       }",
          "4044:     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);",
          "4046:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4043:     }",
          "",
          "[Added Lines]",
          "4046:     }",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc'}",
          "660: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "662: # Test the automatic generation of rowids when the table already contains",
          "663: # a rowid with the maximum value.",
          "664: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662: do_test rowid-11.asc.1 {",
          "663:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 ASC}",
          "664: } {}",
          "665: do_test rowid-11.asc.2 {",
          "666:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 ASC}",
          "667: } {}",
          "668: do_test rowid-11.asc.3 {",
          "669:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 ASC}",
          "670: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "671: do_test rowid-11.asc.4 {",
          "672:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 ASC}",
          "673: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "675: do_test rowid-11.desc.1 {",
          "676:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 DESC}",
          "677: } {}",
          "678: do_test rowid-11.desc.2 {",
          "679:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 DESC}",
          "680: } {}",
          "681: do_test rowid-11.desc.3 {",
          "682:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 DESC}",
          "683: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "684: do_test rowid-11.desc.4 {",
          "685:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 DESC}",
          "686: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   SELECT last_insert_rowid();",
          "720: } {1234 5 2234 | 2234 4990756 3234 | 3234 10458756 4234 | 4234}",
          "722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: #-------------------------------------------------------------------------",
          "749: do_execsql_test rowid-14.0 {",
          "750:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "751:   INSERT INTO t14(x) VALUES (100);",
          "752: }",
          "753: do_execsql_test rowid-14.1 {",
          "754:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "755: } {100}",
          "756: do_execsql_test rowid-14.2 {",
          "757:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "758: } {100}",
          "760: do_execsql_test rowid-14.3 {",
          "761:   DELETE FROM t14;",
          "762:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "763: } {}",
          "764: do_execsql_test rowid-14.4 {",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
      "candidate_info": {
        "commit_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata1.db"
        ],
        "message": "Add more test cases from Yongheng Chen and Rui Zhong.\n\nFossilOrigin-Name: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76f8318e315e24ebd22e25e6222bb9df8bc2e401",
      "candidate_info": {
        "commit_hash": "76f8318e315e24ebd22e25e6222bb9df8bc2e401",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76f8318e315e24ebd22e25e6222bb9df8bc2e401",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the \"fastfuzztest\" makefile target.  Use only \"fuzztest\".\n\nFossilOrigin-Name: e17571c789db31123642d0ed1f3d8764e070019e0deb8b88cce58d2183551cdf",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1263: # This is the common case.  Run many tests that do not take too long,",
          "1264: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "1265: #",
          "1268: # Run a test using valgrind.  This can take a really long time",
          "1269: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "1266: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "1262: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2416: # This is the common case.  Run many tests that do not take too long,",
          "2417: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "2418: #",
          "2420:  @set PATH=$(LIBTCLPATH);$(PATH)",
          "2421:  .\\testfixture.exe $(TOP)\\test\\veryquick.test $(TESTOPTS)",
          "",
          "[Removed Lines]",
          "2419: test: $(TESTPROGS) sourcetest fastfuzztest",
          "",
          "[Added Lines]",
          "2416: test: $(TESTPROGS) sourcetest fuzztest",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "956: # The default test case.  Runs most of the faster standard TCL tests,",
          "957: # and fuzz tests, and sqlite3_analyzer and sqldiff tests.",
          "960: # Run a test using valgrind.  This can take a really long time",
          "961: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "958: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "954: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b68d21e93a0839b42f49845918df7738ee7fa2a05c7f4ae2f89fdbb5e47ad8eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}