{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42a630b1daf1df13850095251cc73be84dbdeac8",
      "candidate_info": {
        "commit_hash": "42a630b1daf1df13850095251cc73be84dbdeac8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42a630b1daf1df13850095251cc73be84dbdeac8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/callback.c",
          "src/main.c",
          "src/pragma.c",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Change the sqlite3.pDfltColl (the default collating sequence for the database connection) so that it is the collating sequence appropriate for the database encoding, not the UTF8 collating sequence.  This helps to ensure that the database encoding collation is always used, even for expressions that do not have an defined collating sequence. Ticket [1b8d7264567eb6fc].\n\nFossilOrigin-Name: 4a5851893c3d71cc823b6ab5df5e58a852cd322fff26290f1ea05b63d67f564a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/callback.c||src/callback.c",
          "src/main.c||src/main.c",
          "src/pragma.c||src/pragma.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eb5c1b77d1c55fc286ff8fccfd61e21cb67aec92d6f93b093b9af5c32165d82b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: ){",
          "165:   CollSeq *pColl;",
          "166:   if( zName ){",
          "167:     pColl = findCollSeqEntry(db, zName, create);",
          "168:   }else{",
          "169:     pColl = db->pDfltColl;",
          "170:   }",
          "174:   return pColl;",
          "175: }",
          "",
          "[Removed Lines]",
          "171:   assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "172:   assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );",
          "173:   if( pColl ) pColl += enc-1;",
          "",
          "[Added Lines]",
          "166:   assert( SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "167:   assert( enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE );",
          "170:     if( pColl ) pColl += enc-1;",
          "181: void sqlite3SetTextEncoding(sqlite3 *db, u8 enc){",
          "182:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "183:   db->enc = enc;",
          "187:   db->pDfltColl = sqlite3FindCollSeq(db, enc, sqlite3StrBINARY, 0);",
          "188: }",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3199:   if( db->mallocFailed ){",
          "3200:     goto opendb_out;",
          "3201:   }",
          "",
          "[Removed Lines]",
          "3205:   db->pDfltColl = sqlite3FindCollSeq(db, SQLITE_UTF8, sqlite3StrBINARY, 0);",
          "3206:   assert( db->pDfltColl!=0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3248:   }",
          "3249:   sqlite3BtreeEnter(db->aDb[0].pBt);",
          "3250:   db->aDb[0].pSchema = sqlite3SchemaGet(db, db->aDb[0].pBt);",
          "3252:   sqlite3BtreeLeave(db->aDb[0].pBt);",
          "3253:   db->aDb[1].pSchema = sqlite3SchemaGet(db, 0);",
          "",
          "[Removed Lines]",
          "3251:   if( !db->mallocFailed ) ENC(db) = SCHEMA_ENC(db);",
          "",
          "[Added Lines]",
          "3246:   if( !db->mallocFailed ){",
          "3247:     sqlite3SetTextEncoding(db, SCHEMA_ENC(db));",
          "3248:   }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:       if( canChangeEnc ){",
          "1838:         for(pEnc=&encnames[0]; pEnc->zName; pEnc++){",
          "1839:           if( 0==sqlite3StrICmp(zRight, pEnc->zName) ){",
          "1842:             break;",
          "1843:           }",
          "1844:         }",
          "",
          "[Removed Lines]",
          "1840:             SCHEMA_ENC(db) = ENC(db) =",
          "1841:                 pEnc->enc ? pEnc->enc : SQLITE_UTF16NATIVE;",
          "",
          "[Added Lines]",
          "1840:             u8 enc = pEnc->enc ? pEnc->enc : SQLITE_UTF16NATIVE;",
          "1841:             SCHEMA_ENC(db) = enc;",
          "1842:             sqlite3SetTextEncoding(db, enc);",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     if( iDb==0 ){",
          "271:       u8 encoding;",
          "273:       encoding = (u8)meta[BTREE_TEXT_ENCODING-1] & 3;",
          "274:       if( encoding==0 ) encoding = SQLITE_UTF8;",
          "276: #else",
          "278: #endif",
          "279:     }else{",
          "281:       if( meta[BTREE_TEXT_ENCODING-1]!=ENC(db) ){",
          "",
          "[Removed Lines]",
          "270: #ifndef SQLITE_OMIT_UTF16",
          "275:       ENC(db) = encoding;",
          "277:       ENC(db) = SQLITE_UTF8;",
          "",
          "[Added Lines]",
          "271: #ifndef SQLITE_OMIT_UTF16",
          "276:       encoding = SQLITE_UTF8;",
          "278:       sqlite3SetTextEncoding(db, encoding);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4465: CollSeq *sqlite3FindCollSeq(sqlite3*,u8 enc, const char*,int);",
          "4466: int sqlite3IsBinary(const CollSeq*);",
          "4467: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char*zName);",
          "4468: CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr);",
          "4469: CollSeq *sqlite3ExprNNCollSeq(Parse *pParse, Expr *pExpr);",
          "4470: int sqlite3ExprCollSeqMatch(Parse*,Expr*,Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4468: void sqlite3SetTextEncoding(sqlite3 *db, u8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
      "candidate_info": {
        "commit_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/upsert1.test"
        ],
        "message": "Do not allow UPSERT of a view.\n\nFossilOrigin-Name: ebf897e861c19e214c57f1e73841b505182202cc8d7d39e24d5a1e5625e26b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/upsert1.test||test/upsert1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "949:               pTab->zName);",
          "950:       goto insert_cleanup;",
          "951:     }",
          "952:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "953:       goto insert_cleanup;",
          "954:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:     if( pTab->pSelect ){",
          "953:       sqlite3ErrorMsg(pParse, \"cannot UPSERT a view\");",
          "954:       goto insert_cleanup;",
          "955:     }",
          "",
          "---------------"
        ],
        "test/upsert1.test||test/upsert1.test": [
          "File: test/upsert1.test -> test/upsert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   REINDEX;",
          "222: } {ok}",
          "224: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: # 2019-12-06 gramfuzz find",
          "225: sqlite3 db :memory:",
          "226: do_execsql_test upsert1-900 {",
          "227:   CREATE VIEW t1(a) AS SELECT 1;",
          "228:   CREATE TRIGGER t1r1 INSTEAD OF INSERT ON t1 BEGIN",
          "229:      SELECT 2;",
          "230:   END;",
          "231: }",
          "232: do_catchsql_test upsert1-910 {",
          "233:   INSERT INTO t1 VALUES(3) ON CONFLICT(x) DO NOTHING;",
          "234: } {1 {cannot UPSERT a view}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7576a68c8c9281288ab6ddc25f202d0f3c0ee05e",
      "candidate_info": {
        "commit_hash": "7576a68c8c9281288ab6ddc25f202d0f3c0ee05e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7576a68c8c9281288ab6ddc25f202d0f3c0ee05e",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test",
          "test/fts4aa.test"
        ],
        "message": "Improve corruption detection in fts3 shadow tables earlier in order to prevent an assert() from failing.\n\nFossilOrigin-Name: a9ec8c8f80a59badabb0afdb4189f0fd2934f936530d4151de395b3a7e7c1f1f",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   if( pReader->nDoclist > pReader->nNode-(pReader->aDoclist-pReader->aNode)",
          "1417:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1418:   ){",
          "1419:     return FTS_CORRUPT_VTAB;",
          "1420:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1418:    || pReader->nDoclist==0",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85d3dc8c50d8dbb8eac1956e8976e861d3b671e03355ca9257060fa3dca51cc4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5834:   INSERT INTO f(f) VALUES ('merge=59,59');",
          "5835: } {1 {database disk image is malformed}}",
          "5837: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5837: #-------------------------------------------------------------------------",
          "5838: #",
          "5839: reset_db",
          "5840: do_execsql_test 37.0 {",
          "5841:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5842:   INSERT INTO f_segdir VALUES (28,0,0,0,'0 0',x'00');",
          "5843:   INSERT INTO f_segdir VALUES (0,241,0,0,'0 0',x'0001000030310000f1');",
          "5844: }",
          "5846: do_catchsql_test 37.1 {",
          "5847:   INSERT INTO f VALUES (0,x'00');",
          "5848: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: } else {",
          "235:   set res {X'0000000200000000000000000000000E0000000E00000001000000010000000100000001'}",
          "236: }",
          "238:   CREATE VIRTUAL TABLE f USING fts4();",
          "239:   INSERT INTO f_segdir VALUES (77,91,0,0,'255 77',x'0001308000004d5c4ddddddd4d4d7b4d4d4d614d8019ff4d05000001204d4d2e4d6e4d4d4d4b4d6c4d004d4d4d4d4d4d3d000000004d5d4d4d645d4d004d4d4d4d4d4d4d4d4d454d6910004d05ffff054d646c4d004d5d4d4d4d4d3d000000004d4d4d4d4d4d4d4d4d4d4d69624d4d4d04004d4d4d4d4d604d4ce1404d554d45');",
          "240:   INSERT INTO f_segdir VALUES (77,108,0,0,'255 77',x'0001310000fa64004d4d4d3c5d4d654d4d4d614d8000ff4d05000001204d4d2e4d6e4d4d4dff4d4d4d4d4d4d00104d4d4d4d000000004d4d4d0400311d4d4d4d4d4d4d4d4d4d684d6910004d05ffff054d4d6c4d004d4d4d4d4d4d3d000000004d4d4d4d644d4d4d4d4d4d69624d4d4d03ed4d4d4d4d4d604d4ce1404d550080');",
          "241:   INSERT INTO f_stat VALUES (0,x'80808080100000000064004d4d4d3c4d4d654d4d4d614d8000ff4df6ff1a00204d4d2e4d6e4d4d4d104d4d4d4d4d4d00104d4d4d4d4d4d69574d4d4d000031044d4d4d3e4d4d4c4d05004d6910');",
          "242:   SELECT quote(matchinfo(f,'pnax')) from f where f match '0 1';",
          "245: # 2019-11-18 Detect infinite loop in fts3SelectLeaf()",
          "246: db close",
          "",
          "[Removed Lines]",
          "237: do_execsql_test fts4aa-6.10 {",
          "243: } $res",
          "",
          "[Added Lines]",
          "237: do_catchsql_test fts4aa-6.10 {",
          "243: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b107654e965973e68c88f90a09a3cc53bac9d8b",
      "candidate_info": {
        "commit_hash": "5b107654e965973e68c88f90a09a3cc53bac9d8b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5b107654e965973e68c88f90a09a3cc53bac9d8b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Readd the ALWAYS() macro that was removed by [f7a74f89dbd58b47] as the condition is no longer reachable due to the previous check-in.\n\nFossilOrigin-Name: 9cb03beae42d814a1b1b69f72865fde502d3f443313ec29edd010d1de40225eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6c2192ef88e9990c8b91755c8e779f09e23f936a17123d8e42059257b756ed7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "199:         ){",
          "200:           int i;",
          "202:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "203:               pNext = p->x.pList->a[i].pExpr;",
          "204:               break;",
          "",
          "[Removed Lines]",
          "201:           for(i=0; i<p->x.pList->nExpr; i++){",
          "",
          "[Added Lines]",
          "201:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ca9a53a421920a412d4fdfd57303593c1ecf723",
      "candidate_info": {
        "commit_hash": "9ca9a53a421920a412d4fdfd57303593c1ecf723",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ca9a53a421920a412d4fdfd57303593c1ecf723",
        "files": [
          "ext/fts5/test/fts5matchinfo.test",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Modify a couple of FTS test cases so that they work on big-endian platforms.\n\nFossilOrigin-Name: b20503aaf5b6595afafee6aa2bc6276354a62b0f583f6d94e31fedfdfc130347",
        "before_after_code_files": [
          "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test": [
          "File: ext/fts5/test/fts5matchinfo.test -> ext/fts5/test/fts5matchinfo.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:   INSERT INTO t1 VALUES('c', 'd');",
          "501: }",
          "503: do_execsql_test 15.1 {",
          "504:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "507: do_execsql_test 15.2 {",
          "508:   DELETE FROM t1_content WHERE rowid=1;",
          "509:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "512: fts5_aux_test_functions db",
          "513: do_execsql_test 15.3 {",
          "",
          "[Removed Lines]",
          "505: } {X'02000000'}",
          "510: } {X'02000000'}",
          "",
          "[Added Lines]",
          "503: if {$tcl_platform(byteOrder)==\"littleEndian\"} {",
          "504:   set res {X'02000000'}",
          "505: } else {",
          "506:   set res {X'00000002'}",
          "507: }",
          "510: } $res",
          "514: } $res",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 59a31b16b54a0068c81ee65bc2fa905c2c826e98da3a7ffd8c3ea860a2827b4a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "230: db close",
          "231: sqlite3 db :memory:",
          "232: do_execsql_test fts4aa-6.10 {",
          "233:   CREATE VIRTUAL TABLE f USING fts4();",
          "234:   INSERT INTO f_segdir VALUES (77,91,0,0,'255 77',x'0001308000004d5c4ddddddd4d4d7b4d4d4d614d8019ff4d05000001204d4d2e4d6e4d4d4d4b4d6c4d004d4d4d4d4d4d3d000000004d5d4d4d645d4d004d4d4d4d4d4d4d4d4d454d6910004d05ffff054d646c4d004d5d4d4d4d4d3d000000004d4d4d4d4d4d4d4d4d4d4d69624d4d4d04004d4d4d4d4d604d4ce1404d554d45');",
          "235:   INSERT INTO f_segdir VALUES (77,108,0,0,'255 77',x'0001310000fa64004d4d4d3c5d4d654d4d4d614d8000ff4d05000001204d4d2e4d6e4d4d4dff4d4d4d4d4d4d00104d4d4d4d000000004d4d4d0400311d4d4d4d4d4d4d4d4d4d684d6910004d05ffff054d4d6c4d004d4d4d4d4d4d3d000000004d4d4d4d644d4d4d4d4d4d69624d4d4d03ed4d4d4d4d4d604d4ce1404d550080');",
          "236:   INSERT INTO f_stat VALUES (0,x'80808080100000000064004d4d4d3c4d4d654d4d4d614d8000ff4df6ff1a00204d4d2e4d6e4d4d4d104d4d4d4d4d4d00104d4d4d4d4d4d69574d4d4d000031044d4d4d3e4d4d4c4d05004d6910');",
          "237:   SELECT quote(matchinfo(f,'pnax')) from f where f match '0 1';",
          "240: # 2019-11-18 Detect infinite loop in fts3SelectLeaf()",
          "241: db close",
          "",
          "[Removed Lines]",
          "238: } {X'0200000000000000000000000E0000000E00000001000000010000000100000001000000'}",
          "",
          "[Added Lines]",
          "232: if {$tcl_platform(byteOrder)==\"littleEndian\"} {",
          "233:   set res {X'0200000000000000000000000E0000000E00000001000000010000000100000001000000'}",
          "234: } else {",
          "235:   set res {X'0000000200000000000000000000000E0000000E00000001000000010000000100000001'}",
          "236: }",
          "243: } $res",
          "",
          "---------------"
        ]
      }
    }
  ]
}