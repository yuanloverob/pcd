{
  "cve_id": "CVE-2022-35984",
  "cve_desc": "TensorFlow is an open source platform for machine learning. `ParameterizedTruncatedNormal` assumes `shape` is of type `int32`. A valid `shape` of type `int64` results in a mismatched type `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 72180be03447a10810edca700cbc9af690dfeb51. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "72180be03447a10810edca700cbc9af690dfeb51",
  "patch_info": {
    "commit_hash": "72180be03447a10810edca700cbc9af690dfeb51",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/72180be03447a10810edca700cbc9af690dfeb51",
    "files": [
      "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
      "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
    ],
    "message": "Fix tensor shape dtype bug in parameterized_truncated_normal.\n\nThe original made the assumption that the dtype is int32 when it could\nalso be int64 - leading to a crash due to mismatched type.\n\nPiperOrigin-RevId: 456685278",
    "before_after_code_files": [
      "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
      "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
      "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"tensorflow/core/framework/register_types.h\"",
      "33: #include \"tensorflow/core/framework/tensor.h\"",
      "34: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "35: #include \"tensorflow/core/kernels/stateless_random_ops.h\"",
      "36: #include \"tensorflow/core/lib/random/random_distributions.h\"",
      "37: #include \"tensorflow/core/platform/logging.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #include \"tensorflow/core/framework/tensor_util.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "630:     OP_REQUIRES(ctx, shape_tensor.NumElements() > 0,",
      "631:                 errors::InvalidArgument(\"Shape tensor must not be empty, got \",",
      "632:                                         shape_tensor.DebugString()));",
      "635:     int32_t samples_per_batch = 1;",
      "637:     for (int32_t i = 1; i < num_dims; i++) {",
      "639:     }",
      "640:     const int32_t num_elements = num_batches * samples_per_batch;",
      "647:     Tensor* samples_tensor;",
      "648:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, tensor_shape, &samples_tensor));",
      "",
      "[Removed Lines]",
      "633:     int32_t num_batches = shape_tensor.flat<int32>()(0);",
      "636:     const int32_t num_dims = shape_tensor.dim_size(0);",
      "638:       samples_per_batch *= shape_tensor.flat<int32>()(i);",
      "643:     auto shape_vec = shape_tensor.flat<int32>();",
      "644:     TensorShape tensor_shape;",
      "645:     OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(",
      "646:                             shape_vec.data(), shape_vec.size(), &tensor_shape));",
      "",
      "[Added Lines]",
      "634:     TensorShape tensor_shape;",
      "635:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_tensor, &tensor_shape));",
      "637:     int32_t num_batches = tensor_shape.dim_size(0);",
      "639:     const int32_t num_dims = tensor_shape.dims();",
      "641:       samples_per_batch *= tensor_shape.dim_size(i);",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py": [
      "File: tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py -> tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:       self.assertAllGreater(samples, 0.)",
      "304:       self.assertAllGreater(samples_stateless, 0.)",
      "306:   def testStatelessParameterizedTruncatedNormalHasGrads(self):",
      "307:     mean = variables.Variable(0.01)",
      "308:     stddev = variables.Variable(1.)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:   def testShapeTypes(self):",
      "307:     for shape_dtype in [np.int32, np.int64]:",
      "308:       shape = np.array([1000], dtype=shape_dtype)",
      "309:       sample_op = random_ops.parameterized_truncated_normal(",
      "310:           shape=shape, means=0.0, stddevs=0.1, minvals=-1., maxvals=1.)",
      "311:       new_seed = random_ops.random_uniform([2],",
      "312:                                            seed=1234,",
      "313:                                            minval=0,",
      "314:                                            maxval=(2**31 - 1),",
      "315:                                            dtype=np.int32)",
      "316:       sample_op_stateless = stateless.stateless_parameterized_truncated_normal(",
      "317:           shape=shape,",
      "318:           seed=new_seed,",
      "319:           means=0.0,",
      "320:           stddevs=0.1,",
      "321:           minvals=-1.,",
      "322:           maxvals=1.)",
      "324:       samples = self.evaluate(sample_op)",
      "325:       stateless_samples = self.evaluate(sample_op_stateless)",
      "326:       self.assertAllEqual(samples.shape, shape)",
      "327:       self.assertAllEqual(stateless_samples.shape, shape)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ced10635088359538d9fa71a4da6c79ddf96b7a9",
      "candidate_info": {
        "commit_hash": "ced10635088359538d9fa71a4da6c79ddf96b7a9",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ced10635088359538d9fa71a4da6c79ddf96b7a9",
        "files": [
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
        ],
        "message": "Fix tensor shape dtype bug in parameterized_truncated_normal.\n\nThe original made the assumption that the dtype is int32 when it could\nalso be int64 - leading to a crash due to mismatched type.\n\nPiperOrigin-RevId: 456685278",
        "before_after_code_files": [
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/framework/register_types.h\"",
          "33: #include \"tensorflow/core/framework/tensor.h\"",
          "34: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "35: #include \"tensorflow/core/kernels/stateless_random_ops.h\"",
          "36: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "37: #include \"tensorflow/core/platform/logging.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:     OP_REQUIRES(ctx, shape_tensor.NumElements() > 0,",
          "631:                 errors::InvalidArgument(\"Shape tensor must not be empty, got \",",
          "632:                                         shape_tensor.DebugString()));",
          "635:     int32_t samples_per_batch = 1;",
          "637:     for (int32_t i = 1; i < num_dims; i++) {",
          "639:     }",
          "640:     const int32_t num_elements = num_batches * samples_per_batch;",
          "647:     Tensor* samples_tensor;",
          "648:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, tensor_shape, &samples_tensor));",
          "",
          "[Removed Lines]",
          "633:     int32_t num_batches = shape_tensor.flat<int32>()(0);",
          "636:     const int32_t num_dims = shape_tensor.dim_size(0);",
          "638:       samples_per_batch *= shape_tensor.flat<int32>()(i);",
          "643:     auto shape_vec = shape_tensor.flat<int32>();",
          "644:     TensorShape tensor_shape;",
          "645:     OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(",
          "646:                             shape_vec.data(), shape_vec.size(), &tensor_shape));",
          "",
          "[Added Lines]",
          "634:     TensorShape tensor_shape;",
          "635:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_tensor, &tensor_shape));",
          "637:     int32_t num_batches = tensor_shape.dim_size(0);",
          "639:     const int32_t num_dims = tensor_shape.dims();",
          "641:       samples_per_batch *= tensor_shape.dim_size(i);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py": [
          "File: tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py -> tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:       self.assertAllGreater(samples, 0.)",
          "304:       self.assertAllGreater(samples_stateless, 0.)",
          "306:   def testStatelessParameterizedTruncatedNormalHasGrads(self):",
          "307:     mean = variables.Variable(0.01)",
          "308:     stddev = variables.Variable(1.)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   def testShapeTypes(self):",
          "307:     for shape_dtype in [np.int32, np.int64]:",
          "308:       shape = np.array([1000], dtype=shape_dtype)",
          "309:       sample_op = random_ops.parameterized_truncated_normal(",
          "310:           shape=shape, means=0.0, stddevs=0.1, minvals=-1., maxvals=1.)",
          "311:       new_seed = random_ops.random_uniform([2],",
          "312:                                            seed=1234,",
          "313:                                            minval=0,",
          "314:                                            maxval=(2**31 - 1),",
          "315:                                            dtype=np.int32)",
          "316:       sample_op_stateless = stateless.stateless_parameterized_truncated_normal(",
          "317:           shape=shape,",
          "318:           seed=new_seed,",
          "319:           means=0.0,",
          "320:           stddevs=0.1,",
          "321:           minvals=-1.,",
          "322:           maxvals=1.)",
          "324:       samples = self.evaluate(sample_op)",
          "325:       stateless_samples = self.evaluate(sample_op_stateless)",
          "326:       self.assertAllEqual(samples.shape, shape)",
          "327:       self.assertAllEqual(stateless_samples.shape, shape)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54c01739253a08ec340e6774bec5d306698501ff",
      "candidate_info": {
        "commit_hash": "54c01739253a08ec340e6774bec5d306698501ff",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/54c01739253a08ec340e6774bec5d306698501ff",
        "files": [
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
        ],
        "message": "Fix tensor shape dtype bug in parameterized_truncated_normal.\n\nThe original made the assumption that the dtype is int32 when it could\nalso be int64 - leading to a crash due to mismatched type.\n\nPiperOrigin-RevId: 456685278",
        "before_after_code_files": [
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/framework/register_types.h\"",
          "33: #include \"tensorflow/core/framework/tensor.h\"",
          "34: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "35: #include \"tensorflow/core/kernels/stateless_random_ops.h\"",
          "36: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "37: #include \"tensorflow/core/platform/logging.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:     OP_REQUIRES(ctx, shape_tensor.NumElements() > 0,",
          "631:                 errors::InvalidArgument(\"Shape tensor must not be empty, got \",",
          "632:                                         shape_tensor.DebugString()));",
          "635:     int32_t samples_per_batch = 1;",
          "637:     for (int32_t i = 1; i < num_dims; i++) {",
          "639:     }",
          "640:     const int32_t num_elements = num_batches * samples_per_batch;",
          "647:     Tensor* samples_tensor;",
          "648:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, tensor_shape, &samples_tensor));",
          "",
          "[Removed Lines]",
          "633:     int32_t num_batches = shape_tensor.flat<int32>()(0);",
          "636:     const int32_t num_dims = shape_tensor.dim_size(0);",
          "638:       samples_per_batch *= shape_tensor.flat<int32>()(i);",
          "643:     auto shape_vec = shape_tensor.flat<int32>();",
          "644:     TensorShape tensor_shape;",
          "645:     OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(",
          "646:                             shape_vec.data(), shape_vec.size(), &tensor_shape));",
          "",
          "[Added Lines]",
          "634:     TensorShape tensor_shape;",
          "635:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_tensor, &tensor_shape));",
          "637:     int32_t num_batches = tensor_shape.dim_size(0);",
          "639:     const int32_t num_dims = tensor_shape.dims();",
          "641:       samples_per_batch *= tensor_shape.dim_size(i);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py": [
          "File: tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py -> tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:       self.assertAllGreater(samples, 0.)",
          "304:       self.assertAllGreater(samples_stateless, 0.)",
          "306:   def testStatelessParameterizedTruncatedNormalHasGrads(self):",
          "307:     mean = variables.Variable(0.01)",
          "308:     stddev = variables.Variable(1.)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   def testShapeTypes(self):",
          "307:     for shape_dtype in [np.int32, np.int64]:",
          "308:       shape = np.array([1000], dtype=shape_dtype)",
          "309:       sample_op = random_ops.parameterized_truncated_normal(",
          "310:           shape=shape, means=0.0, stddevs=0.1, minvals=-1., maxvals=1.)",
          "311:       new_seed = random_ops.random_uniform([2],",
          "312:                                            seed=1234,",
          "313:                                            minval=0,",
          "314:                                            maxval=(2**31 - 1),",
          "315:                                            dtype=np.int32)",
          "316:       sample_op_stateless = stateless.stateless_parameterized_truncated_normal(",
          "317:           shape=shape,",
          "318:           seed=new_seed,",
          "319:           means=0.0,",
          "320:           stddevs=0.1,",
          "321:           minvals=-1.,",
          "322:           maxvals=1.)",
          "324:       samples = self.evaluate(sample_op)",
          "325:       stateless_samples = self.evaluate(sample_op_stateless)",
          "326:       self.assertAllEqual(samples.shape, shape)",
          "327:       self.assertAllEqual(stateless_samples.shape, shape)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da380c7d3281808c9076c7ca6e917b50feba99cb",
      "candidate_info": {
        "commit_hash": "da380c7d3281808c9076c7ca6e917b50feba99cb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/da380c7d3281808c9076c7ca6e917b50feba99cb",
        "files": [
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
        ],
        "message": "Fix tensor shape dtype bug in parameterized_truncated_normal.\n\nThe original made the assumption that the dtype is int32 when it could\nalso be int64 - leading to a crash due to mismatched type.\n\nPiperOrigin-RevId: 456685278",
        "before_after_code_files": [
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/framework/register_types.h\"",
          "33: #include \"tensorflow/core/framework/tensor.h\"",
          "34: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "35: #include \"tensorflow/core/kernels/stateless_random_ops.h\"",
          "36: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "37: #include \"tensorflow/core/platform/logging.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:     OP_REQUIRES(ctx, shape_tensor.NumElements() > 0,",
          "631:                 errors::InvalidArgument(\"Shape tensor must not be empty, got \",",
          "632:                                         shape_tensor.DebugString()));",
          "635:     int32_t samples_per_batch = 1;",
          "637:     for (int32_t i = 1; i < num_dims; i++) {",
          "639:     }",
          "640:     const int32_t num_elements = num_batches * samples_per_batch;",
          "647:     Tensor* samples_tensor;",
          "648:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, tensor_shape, &samples_tensor));",
          "",
          "[Removed Lines]",
          "633:     int32_t num_batches = shape_tensor.flat<int32>()(0);",
          "636:     const int32_t num_dims = shape_tensor.dim_size(0);",
          "638:       samples_per_batch *= shape_tensor.flat<int32>()(i);",
          "643:     auto shape_vec = shape_tensor.flat<int32>();",
          "644:     TensorShape tensor_shape;",
          "645:     OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(",
          "646:                             shape_vec.data(), shape_vec.size(), &tensor_shape));",
          "",
          "[Added Lines]",
          "634:     TensorShape tensor_shape;",
          "635:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_tensor, &tensor_shape));",
          "637:     int32_t num_batches = tensor_shape.dim_size(0);",
          "639:     const int32_t num_dims = tensor_shape.dims();",
          "641:       samples_per_batch *= tensor_shape.dim_size(i);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py": [
          "File: tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py -> tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:       self.assertAllGreater(samples, 0.)",
          "308:       self.assertAllGreater(samples_stateless, 0.)",
          "310:   def testStatelessParameterizedTruncatedNormalHasGrads(self):",
          "311:     mean = variables.Variable(0.01)",
          "312:     stddev = variables.Variable(1.)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:   def testShapeTypes(self):",
          "311:     for shape_dtype in [np.int32, np.int64]:",
          "312:       shape = np.array([1000], dtype=shape_dtype)",
          "313:       sample_op = random_ops.parameterized_truncated_normal(",
          "314:           shape=shape, means=0.0, stddevs=0.1, minvals=-1., maxvals=1.)",
          "315:       new_seed = random_ops.random_uniform([2],",
          "316:                                            seed=1234,",
          "317:                                            minval=0,",
          "318:                                            maxval=(2**31 - 1),",
          "319:                                            dtype=np.int32)",
          "320:       sample_op_stateless = stateless.stateless_parameterized_truncated_normal(",
          "321:           shape=shape,",
          "322:           seed=new_seed,",
          "323:           means=0.0,",
          "324:           stddevs=0.1,",
          "325:           minvals=-1.,",
          "326:           maxvals=1.)",
          "328:       samples = self.evaluate(sample_op)",
          "329:       stateless_samples = self.evaluate(sample_op_stateless)",
          "330:       self.assertAllEqual(samples.shape, shape)",
          "331:       self.assertAllEqual(stateless_samples.shape, shape)",
          "",
          "---------------"
        ]
      }
    }
  ]
}