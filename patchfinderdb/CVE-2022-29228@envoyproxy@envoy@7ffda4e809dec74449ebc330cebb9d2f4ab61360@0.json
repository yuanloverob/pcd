{
  "cve_id": "CVE-2022-29228",
  "cve_desc": "Envoy is a cloud-native high-performance proxy. In versions prior to 1.22.1 the OAuth filter would try to invoke the remaining filters in the chain after emitting a local response, which triggers an ASSERT() in newer versions and corrupts memory on earlier versions. continueDecoding() shouldn\u2019t ever be called from filters after a local reply has been sent. Users are advised to upgrade. There are no known workarounds for this issue.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "7ffda4e809dec74449ebc330cebb9d2f4ab61360",
  "patch_info": {
    "commit_hash": "7ffda4e809dec74449ebc330cebb9d2f4ab61360",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/7ffda4e809dec74449ebc330cebb9d2f4ab61360",
    "files": [
      "source/extensions/filters/http/oauth2/filter.cc",
      "source/extensions/filters/http/oauth2/filter.h",
      "source/extensions/filters/http/oauth2/oauth_client.cc",
      "test/extensions/filters/http/oauth2/filter_test.cc"
    ],
    "message": "oauth2: do not blindly accept requests with a token in the Authorization headera (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "before_after_code_files": [
      "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
      "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
      "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
      "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
    ]
  },
  "patch_diff": {
    "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
      "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
      "204: }",
      "",
      "[Removed Lines]",
      "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
      "207:   ASSERT(headers.Path() != nullptr);",
      "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
      "211:   if (authorization != nullptr) {",
      "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
      "213:     const auto& bearer_prefix = bearerPrefix();",
      "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
      "215:       const size_t start = bearer_prefix.length();",
      "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
      "217:     }",
      "218:   }",
      "221:   const auto path = headers.Path()->value().getStringView();",
      "222:   const auto params = Http::Utility::parseQueryString(path);",
      "223:   const auto param = params.find(\"token\");",
      "224:   if (param != params.end()) {",
      "225:     return param->second;",
      "226:   }",
      "228:   return EMPTY_STRING;",
      "229: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:   headers.removeInline(authorization_handle.handle());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "290:     request_headers_ = &headers;",
      "291:   }",
      "",
      "[Removed Lines]",
      "296:   access_token_ = extractAccessToken(headers);",
      "297:   if (!access_token_.empty()) {",
      "298:     found_bearer_token_ = true;",
      "299:     finishFlow();",
      "300:     return Http::FilterHeadersStatus::Continue;",
      "301:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439: }",
      "441: void OAuth2Filter::finishFlow() {",
      "454:   std::string token_payload;",
      "455:   if (config_->forwardBearerToken()) {",
      "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
      "",
      "[Removed Lines]",
      "445:   if (found_bearer_token_) {",
      "446:     if (config_->forwardBearerToken()) {",
      "447:       setBearerToken(*request_headers_, access_token_);",
      "448:     }",
      "449:     config_->stats().oauth_success_.inc();",
      "450:     decoder_callbacks_->continueDecoding();",
      "451:     return;",
      "452:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
      "511:   config_->stats().oauth_success_.inc();",
      "513: }",
      "515: void OAuth2Filter::sendUnauthorizedResponse() {",
      "",
      "[Removed Lines]",
      "512:   decoder_callbacks_->continueDecoding();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
      "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   std::string new_expires_;",
      "244:   absl::string_view host_;",
      "245:   std::string state_;",
      "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
      "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
      "",
      "[Removed Lines]",
      "246:   bool found_bearer_token_{false};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
      "259:   const std::string& bearerPrefix() const;",
      "261: };",
      "263: } // namespace Oauth2",
      "",
      "[Removed Lines]",
      "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
      "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: namespace Oauth2 {",
      "23: namespace {",
      "27: constexpr const char* GetAccessTokenBodyFormatString =",
      "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
      "",
      "[Removed Lines]",
      "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
      "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
      "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:   }",
      "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
      "100:     auto* endpoint = p.mutable_token_endpoint();",
      "101:     endpoint->set_cluster(\"auth.example.com\");",
      "",
      "[Removed Lines]",
      "98:   FilterConfigSharedPtr getConfig() {",
      "",
      "[Added Lines]",
      "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
      "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
      "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
      "109:     p.add_auth_scopes(\"user\");",
      "110:     p.add_auth_scopes(\"openid\");",
      "111:     p.add_auth_scopes(\"email\");",
      "",
      "[Removed Lines]",
      "108:     p.set_forward_bearer_token(true);",
      "",
      "[Added Lines]",
      "108:     p.set_forward_bearer_token(forward_bearer_token);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
      "434:   init(getConfig(false /* forward_bearer_token */));",
      "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
      "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
      "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
      "442:   };",
      "444:   Http::TestRequestHeaderMapImpl expected_headers{",
      "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
      "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "449:   };",
      "452:   EXPECT_CALL(*validator_, setParams(_, _));",
      "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
      "456:   std::string legit_token{\"legit_token\"};",
      "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
      "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
      "460:             filter_->decodeHeaders(mock_request_headers, false));",
      "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
      "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
      "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
      "467: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "791:   EXPECT_CALL(decoder_callbacks_,",
      "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
      "795:   filter_->finishFlow();",
      "796: }",
      "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
      "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
      "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "",
      "[Removed Lines]",
      "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
      "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
      "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
      "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
      "805:   };",
      "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
      "",
      "[Added Lines]",
      "842:   Http::TestRequestHeaderMapImpl request_headers{",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
      "813:   };",
      "816:   EXPECT_CALL(*validator_, setParams(_, _));",
      "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
      "824: }",
      "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
      "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
      "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "839:   };",
      "842:   EXPECT_CALL(*validator_, setParams(_, _));",
      "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
      "850: }",
      "852: } // namespace Oauth2",
      "",
      "[Removed Lines]",
      "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
      "820:             filter_->decodeHeaders(request_headers_before, false));",
      "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
      "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
      "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
      "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
      "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
      "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
      "832:   };",
      "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
      "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
      "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
      "846:             filter_->decodeHeaders(request_headers_before, false));",
      "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
      "",
      "[Added Lines]",
      "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
      "855:             filter_->decodeHeaders(request_headers, false));",
      "859:   Http::TestRequestHeaderMapImpl request_headers{",
      "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
      "871:             filter_->decodeHeaders(request_headers, false));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e061e4bab491da3dcc6fcc00f53f97309b1a0262",
      "candidate_info": {
        "commit_hash": "e061e4bab491da3dcc6fcc00f53f97309b1a0262",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/e061e4bab491da3dcc6fcc00f53f97309b1a0262",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization headera (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "204: }",
          "",
          "[Removed Lines]",
          "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "207:   ASSERT(headers.Path() != nullptr);",
          "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "211:   if (authorization != nullptr) {",
          "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "213:     const auto& bearer_prefix = bearerPrefix();",
          "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "215:       const size_t start = bearer_prefix.length();",
          "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "217:     }",
          "218:   }",
          "221:   const auto path = headers.Path()->value().getStringView();",
          "222:   const auto params = Http::Utility::parseQueryString(path);",
          "223:   const auto param = params.find(\"token\");",
          "224:   if (param != params.end()) {",
          "225:     return param->second;",
          "226:   }",
          "228:   return EMPTY_STRING;",
          "229: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     request_headers_ = &headers;",
          "291:   }",
          "",
          "[Removed Lines]",
          "296:   access_token_ = extractAccessToken(headers);",
          "297:   if (!access_token_.empty()) {",
          "298:     found_bearer_token_ = true;",
          "299:     finishFlow();",
          "300:     return Http::FilterHeadersStatus::Continue;",
          "301:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439: }",
          "441: void OAuth2Filter::finishFlow() {",
          "454:   std::string token_payload;",
          "455:   if (config_->forwardBearerToken()) {",
          "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
          "",
          "[Removed Lines]",
          "445:   if (found_bearer_token_) {",
          "446:     if (config_->forwardBearerToken()) {",
          "447:       setBearerToken(*request_headers_, access_token_);",
          "448:     }",
          "449:     config_->stats().oauth_success_.inc();",
          "450:     decoder_callbacks_->continueDecoding();",
          "451:     return;",
          "452:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "511:   config_->stats().oauth_success_.inc();",
          "513: }",
          "515: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "512:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   std::string new_expires_;",
          "244:   absl::string_view host_;",
          "245:   std::string state_;",
          "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "246:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "259:   const std::string& bearerPrefix() const;",
          "261: };",
          "263: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace Oauth2 {",
          "23: namespace {",
          "27: constexpr const char* GetAccessTokenBodyFormatString =",
          "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "423: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "434:   init(getConfig(false /* forward_bearer_token */));",
          "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "442:   };",
          "444:   Http::TestRequestHeaderMapImpl expected_headers{",
          "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "449:   };",
          "452:   EXPECT_CALL(*validator_, setParams(_, _));",
          "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "456:   std::string legit_token{\"legit_token\"};",
          "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "460:             filter_->decodeHeaders(mock_request_headers, false));",
          "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "467: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:   EXPECT_CALL(decoder_callbacks_,",
          "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "795:   filter_->finishFlow();",
          "796: }",
          "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "805:   };",
          "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "842:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "813:   };",
          "816:   EXPECT_CALL(*validator_, setParams(_, _));",
          "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "824: }",
          "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "839:   };",
          "842:   EXPECT_CALL(*validator_, setParams(_, _));",
          "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "850: }",
          "852: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "820:             filter_->decodeHeaders(request_headers_before, false));",
          "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "832:   };",
          "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "846:             filter_->decodeHeaders(request_headers_before, false));",
          "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "855:             filter_->decodeHeaders(request_headers, false));",
          "859:   Http::TestRequestHeaderMapImpl request_headers{",
          "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "871:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ffda4e809dec74449ebc330cebb9d2f4ab61360",
      "candidate_info": {
        "commit_hash": "7ffda4e809dec74449ebc330cebb9d2f4ab61360",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/7ffda4e809dec74449ebc330cebb9d2f4ab61360",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization headera (781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per\nabove):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "204: }",
          "",
          "[Removed Lines]",
          "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "207:   ASSERT(headers.Path() != nullptr);",
          "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "211:   if (authorization != nullptr) {",
          "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "213:     const auto& bearer_prefix = bearerPrefix();",
          "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "215:       const size_t start = bearer_prefix.length();",
          "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "217:     }",
          "218:   }",
          "221:   const auto path = headers.Path()->value().getStringView();",
          "222:   const auto params = Http::Utility::parseQueryString(path);",
          "223:   const auto param = params.find(\"token\");",
          "224:   if (param != params.end()) {",
          "225:     return param->second;",
          "226:   }",
          "228:   return EMPTY_STRING;",
          "229: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     request_headers_ = &headers;",
          "291:   }",
          "",
          "[Removed Lines]",
          "296:   access_token_ = extractAccessToken(headers);",
          "297:   if (!access_token_.empty()) {",
          "298:     found_bearer_token_ = true;",
          "299:     finishFlow();",
          "300:     return Http::FilterHeadersStatus::Continue;",
          "301:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439: }",
          "441: void OAuth2Filter::finishFlow() {",
          "454:   std::string token_payload;",
          "455:   if (config_->forwardBearerToken()) {",
          "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
          "",
          "[Removed Lines]",
          "445:   if (found_bearer_token_) {",
          "446:     if (config_->forwardBearerToken()) {",
          "447:       setBearerToken(*request_headers_, access_token_);",
          "448:     }",
          "449:     config_->stats().oauth_success_.inc();",
          "450:     decoder_callbacks_->continueDecoding();",
          "451:     return;",
          "452:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "511:   config_->stats().oauth_success_.inc();",
          "513: }",
          "515: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "512:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   std::string new_expires_;",
          "244:   absl::string_view host_;",
          "245:   std::string state_;",
          "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "246:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "259:   const std::string& bearerPrefix() const;",
          "261: };",
          "263: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace Oauth2 {",
          "23: namespace {",
          "27: constexpr const char* GetAccessTokenBodyFormatString =",
          "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "423: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "434:   init(getConfig(false /* forward_bearer_token */));",
          "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "442:   };",
          "444:   Http::TestRequestHeaderMapImpl expected_headers{",
          "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "449:   };",
          "452:   EXPECT_CALL(*validator_, setParams(_, _));",
          "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "456:   std::string legit_token{\"legit_token\"};",
          "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "460:             filter_->decodeHeaders(mock_request_headers, false));",
          "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "467: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:   EXPECT_CALL(decoder_callbacks_,",
          "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "795:   filter_->finishFlow();",
          "796: }",
          "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "805:   };",
          "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "842:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "813:   };",
          "816:   EXPECT_CALL(*validator_, setParams(_, _));",
          "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "824: }",
          "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "839:   };",
          "842:   EXPECT_CALL(*validator_, setParams(_, _));",
          "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "850: }",
          "852: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "820:             filter_->decodeHeaders(request_headers_before, false));",
          "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "832:   };",
          "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "846:             filter_->decodeHeaders(request_headers_before, false));",
          "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "855:             filter_->decodeHeaders(request_headers, false));",
          "859:   Http::TestRequestHeaderMapImpl request_headers{",
          "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "871:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6539759ac5e22aee68416cb8aefa642ca1dae51c",
      "candidate_info": {
        "commit_hash": "6539759ac5e22aee68416cb8aefa642ca1dae51c",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/6539759ac5e22aee68416cb8aefa642ca1dae51c",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization header (781)\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "192: }",
          "",
          "[Removed Lines]",
          "194: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "195:   ASSERT(headers.Path() != nullptr);",
          "198:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "199:   if (authorization != nullptr) {",
          "200:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "201:     const auto& bearer_prefix = bearerPrefix();",
          "202:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "203:       const size_t start = bearer_prefix.length();",
          "204:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "205:     }",
          "206:   }",
          "209:   const auto path = headers.Path()->value().getStringView();",
          "210:   const auto params = Http::Utility::parseQueryString(path);",
          "211:   const auto param = params.find(\"token\");",
          "212:   if (param != params.end()) {",
          "213:     return param->second;",
          "214:   }",
          "216:   return EMPTY_STRING;",
          "217: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     request_headers_ = &headers;",
          "279:   }",
          "",
          "[Removed Lines]",
          "284:   access_token_ = extractAccessToken(headers);",
          "285:   if (!access_token_.empty()) {",
          "286:     found_bearer_token_ = true;",
          "287:     finishFlow();",
          "288:     return Http::FilterHeadersStatus::Continue;",
          "289:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417: }",
          "419: void OAuth2Filter::finishFlow() {",
          "432:   std::string token_payload;",
          "433:   if (config_->forwardBearerToken()) {",
          "434:     token_payload = absl::StrCat(host_, new_expires_, access_token_);",
          "",
          "[Removed Lines]",
          "423:   if (found_bearer_token_) {",
          "424:     if (config_->forwardBearerToken()) {",
          "425:       setBearerToken(*request_headers_, access_token_);",
          "426:     }",
          "427:     config_->stats().oauth_success_.inc();",
          "428:     decoder_callbacks_->continueDecoding();",
          "429:     return;",
          "430:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "476:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "477:   config_->stats().oauth_success_.inc();",
          "479: }",
          "481: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "478:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   std::string new_expires_;",
          "215:   absl::string_view host_;",
          "216:   std::string state_;",
          "218:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "220:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "217:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "230:   const std::string& bearerPrefix() const;",
          "232: };",
          "234: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "231:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: namespace Oauth2 {",
          "22: namespace {",
          "26: constexpr const char* GetAccessTokenBodyFormatString =",
          "27:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "23: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "24:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "380: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "391:   init(getConfig(false /* forward_bearer_token */));",
          "393:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "394:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "395:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "396:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "397:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "398:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "399:   };",
          "401:   Http::TestRequestHeaderMapImpl expected_headers{",
          "402:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "403:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "404:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "405:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "406:   };",
          "409:   EXPECT_CALL(*validator_, setParams(_, _));",
          "410:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "413:   std::string legit_token{\"legit_token\"};",
          "414:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "416:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "417:             filter_->decodeHeaders(mock_request_headers, false));",
          "420:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "423:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "424: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:   EXPECT_CALL(decoder_callbacks_,",
          "773:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "776:   filter_->finishFlow();",
          "777: }",
          "779: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "789:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "790:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "791:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "774:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "780:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "781:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "782:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "783:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "784:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "785:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "786:   };",
          "788:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "823:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "793:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "794:   };",
          "797:   EXPECT_CALL(*validator_, setParams(_, _));",
          "798:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "805: }",
          "807: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "815:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "816:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "817:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "818:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "820:   };",
          "823:   EXPECT_CALL(*validator_, setParams(_, _));",
          "824:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "831: }",
          "833: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "800:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "801:             filter_->decodeHeaders(request_headers_before, false));",
          "804:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "808:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "809:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "810:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "811:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "812:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "813:   };",
          "814:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "819:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "826:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "827:             filter_->decodeHeaders(request_headers_before, false));",
          "830:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "835:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "836:             filter_->decodeHeaders(request_headers, false));",
          "840:   Http::TestRequestHeaderMapImpl request_headers{",
          "851:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "852:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ac56ec6e27d9b6c56f13eaa62777333001d83d5",
      "candidate_info": {
        "commit_hash": "0ac56ec6e27d9b6c56f13eaa62777333001d83d5",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/0ac56ec6e27d9b6c56f13eaa62777333001d83d5",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization header (781)\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "192: }",
          "",
          "[Removed Lines]",
          "194: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "195:   ASSERT(headers.Path() != nullptr);",
          "198:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "199:   if (authorization != nullptr) {",
          "200:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "201:     const auto& bearer_prefix = bearerPrefix();",
          "202:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "203:       const size_t start = bearer_prefix.length();",
          "204:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "205:     }",
          "206:   }",
          "209:   const auto path = headers.Path()->value().getStringView();",
          "210:   const auto params = Http::Utility::parseQueryString(path);",
          "211:   const auto param = params.find(\"token\");",
          "212:   if (param != params.end()) {",
          "213:     return param->second;",
          "214:   }",
          "216:   return EMPTY_STRING;",
          "217: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     request_headers_ = &headers;",
          "279:   }",
          "",
          "[Removed Lines]",
          "284:   access_token_ = extractAccessToken(headers);",
          "285:   if (!access_token_.empty()) {",
          "286:     found_bearer_token_ = true;",
          "287:     finishFlow();",
          "288:     return Http::FilterHeadersStatus::Continue;",
          "289:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417: }",
          "419: void OAuth2Filter::finishFlow() {",
          "432:   std::string token_payload;",
          "433:   if (config_->forwardBearerToken()) {",
          "434:     token_payload = absl::StrCat(host_, new_expires_, access_token_);",
          "",
          "[Removed Lines]",
          "423:   if (found_bearer_token_) {",
          "424:     if (config_->forwardBearerToken()) {",
          "425:       setBearerToken(*request_headers_, access_token_);",
          "426:     }",
          "427:     config_->stats().oauth_success_.inc();",
          "428:     decoder_callbacks_->continueDecoding();",
          "429:     return;",
          "430:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "476:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "477:   config_->stats().oauth_success_.inc();",
          "479: }",
          "481: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "478:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   std::string new_expires_;",
          "215:   absl::string_view host_;",
          "216:   std::string state_;",
          "218:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "220:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "217:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "230:   const std::string& bearerPrefix() const;",
          "232: };",
          "234: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "231:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: namespace Oauth2 {",
          "22: namespace {",
          "26: constexpr const char* GetAccessTokenBodyFormatString =",
          "27:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "23: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "24:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "380: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "391:   init(getConfig(false /* forward_bearer_token */));",
          "393:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "394:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "395:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "396:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "397:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "398:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "399:   };",
          "401:   Http::TestRequestHeaderMapImpl expected_headers{",
          "402:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "403:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "404:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "405:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "406:   };",
          "409:   EXPECT_CALL(*validator_, setParams(_, _));",
          "410:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "413:   std::string legit_token{\"legit_token\"};",
          "414:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "416:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "417:             filter_->decodeHeaders(mock_request_headers, false));",
          "420:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "423:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "424: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:   EXPECT_CALL(decoder_callbacks_,",
          "773:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "776:   filter_->finishFlow();",
          "777: }",
          "779: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "789:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "790:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "791:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "774:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "780:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "781:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "782:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "783:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "784:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "785:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "786:   };",
          "788:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "823:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "793:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "794:   };",
          "797:   EXPECT_CALL(*validator_, setParams(_, _));",
          "798:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "805: }",
          "807: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "815:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "816:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "817:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "818:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "820:   };",
          "823:   EXPECT_CALL(*validator_, setParams(_, _));",
          "824:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "831: }",
          "833: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "800:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "801:             filter_->decodeHeaders(request_headers_before, false));",
          "804:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "808:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "809:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "810:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "811:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "812:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "813:   };",
          "814:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "819:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "826:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "827:             filter_->decodeHeaders(request_headers_before, false));",
          "830:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "835:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "836:             filter_->decodeHeaders(request_headers, false));",
          "840:   Http::TestRequestHeaderMapImpl request_headers{",
          "851:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "852:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0c52894b0adaee575e3e981814bece8ece58b40",
      "candidate_info": {
        "commit_hash": "e0c52894b0adaee575e3e981814bece8ece58b40",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/e0c52894b0adaee575e3e981814bece8ece58b40",
        "files": [
          "source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc"
        ],
        "message": "oauth2: do not blindly accept requests with a token in the Authorization header (#781)\n\nThe logic was broken because it assumed an additional call would be\nperformed to the auth server, which isn't the case. Per the filter\ndocumentation, a request is only considered subsequently authenticated\nif there's valid cookie that was set after the access token was received\nfrom the auth server:\n\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/oauth2_filter\n\nMore info about how to validate an access token (which we don't do, per above):\n\nhttps://www.oauth.com/oauth2-servers/token-introspection-endpoint/\nhttps://datatracker.ietf.org/doc/html/rfc7662\n\nAlso fix the fact that ee shouldn't be calling continueDecoding() after\ndecoder_callbacks_->encodeHeaders().\n\nSigned-off-by: Raul Gutierrez Segales <rgs@pinterest.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
          "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
          "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
          "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc",
            "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h",
            "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc",
            "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/oauth2/filter.cc||source/extensions/filters/http/oauth2/filter.cc": [
          "File: source/extensions/filters/http/oauth2/filter.cc -> source/extensions/filters/http/oauth2/filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   CONSTRUCT_ON_FIRST_USE(std::string, \"bearer \");",
          "204: }",
          "",
          "[Removed Lines]",
          "206: std::string OAuth2Filter::extractAccessToken(const Http::RequestHeaderMap& headers) const {",
          "207:   ASSERT(headers.Path() != nullptr);",
          "210:   const Http::HeaderEntry* authorization = headers.getInline(authorization_handle.handle());",
          "211:   if (authorization != nullptr) {",
          "212:     const auto value = StringUtil::trim(authorization->value().getStringView());",
          "213:     const auto& bearer_prefix = bearerPrefix();",
          "214:     if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {",
          "215:       const size_t start = bearer_prefix.length();",
          "216:       return std::string(StringUtil::ltrim(value.substr(start)));",
          "217:     }",
          "218:   }",
          "221:   const auto path = headers.Path()->value().getStringView();",
          "222:   const auto params = Http::Utility::parseQueryString(path);",
          "223:   const auto param = params.find(\"token\");",
          "224:   if (param != params.end()) {",
          "225:     return param->second;",
          "226:   }",
          "228:   return EMPTY_STRING;",
          "229: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: Http::FilterHeadersStatus OAuth2Filter::decodeHeaders(Http::RequestHeaderMap& headers, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   headers.removeInline(authorization_handle.handle());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     request_headers_ = &headers;",
          "291:   }",
          "",
          "[Removed Lines]",
          "296:   access_token_ = extractAccessToken(headers);",
          "297:   if (!access_token_.empty()) {",
          "298:     found_bearer_token_ = true;",
          "299:     finishFlow();",
          "300:     return Http::FilterHeadersStatus::Continue;",
          "301:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439: }",
          "441: void OAuth2Filter::finishFlow() {",
          "454:   std::string token_payload;",
          "455:   if (config_->forwardBearerToken()) {",
          "456:     token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);",
          "",
          "[Removed Lines]",
          "445:   if (found_bearer_token_) {",
          "446:     if (config_->forwardBearerToken()) {",
          "447:       setBearerToken(*request_headers_, access_token_);",
          "448:     }",
          "449:     config_->stats().oauth_success_.inc();",
          "450:     decoder_callbacks_->continueDecoding();",
          "451:     return;",
          "452:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:   decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);",
          "511:   config_->stats().oauth_success_.inc();",
          "513: }",
          "515: void OAuth2Filter::sendUnauthorizedResponse() {",
          "",
          "[Removed Lines]",
          "512:   decoder_callbacks_->continueDecoding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/filter.h||source/extensions/filters/http/oauth2/filter.h": [
          "File: source/extensions/filters/http/oauth2/filter.h -> source/extensions/filters/http/oauth2/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   std::string new_expires_;",
          "244:   absl::string_view host_;",
          "245:   std::string state_;",
          "247:   Http::RequestHeaderMap* request_headers_{nullptr};",
          "249:   std::unique_ptr<OAuth2Client> oauth_client_;",
          "",
          "[Removed Lines]",
          "246:   bool found_bearer_token_{false};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   Http::FilterHeadersStatus signOutUser(const Http::RequestHeaderMap& headers);",
          "259:   const std::string& bearerPrefix() const;",
          "261: };",
          "263: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "260:   std::string extractAccessToken(const Http::RequestHeaderMap& headers) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/oauth2/oauth_client.cc||source/extensions/filters/http/oauth2/oauth_client.cc": [
          "File: source/extensions/filters/http/oauth2/oauth_client.cc -> source/extensions/filters/http/oauth2/oauth_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace Oauth2 {",
          "23: namespace {",
          "27: constexpr const char* GetAccessTokenBodyFormatString =",
          "28:     \"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";",
          "",
          "[Removed Lines]",
          "24: Http::RegisterCustomInlineHeader<Http::CustomInlineHeaderRegistry::Type::RequestHeaders>",
          "25:     authorization_handle(Http::CustomHeaders::get().Authorization);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/oauth2/filter_test.cc||test/extensions/filters/http/oauth2/filter_test.cc": [
          "File: test/extensions/filters/http/oauth2/filter_test.cc -> test/extensions/filters/http/oauth2/filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   }",
          "99:     envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;",
          "100:     auto* endpoint = p.mutable_token_endpoint();",
          "101:     endpoint->set_cluster(\"auth.example.com\");",
          "",
          "[Removed Lines]",
          "98:   FilterConfigSharedPtr getConfig() {",
          "",
          "[Added Lines]",
          "98:   FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);",
          "106:     p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");",
          "107:     p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");",
          "109:     p.add_auth_scopes(\"user\");",
          "110:     p.add_auth_scopes(\"openid\");",
          "111:     p.add_auth_scopes(\"email\");",
          "",
          "[Removed Lines]",
          "108:     p.set_forward_bearer_token(true);",
          "",
          "[Added Lines]",
          "108:     p.set_forward_bearer_token(forward_bearer_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "423: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: TEST_F(OAuth2Test, OAuthOkPassButInvalidToken) {",
          "434:   init(getConfig(false /* forward_bearer_token */));",
          "436:   Http::TestRequestHeaderMapImpl mock_request_headers{",
          "437:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "438:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "439:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "440:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "441:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer injected_malice!\"},",
          "442:   };",
          "444:   Http::TestRequestHeaderMapImpl expected_headers{",
          "445:       {Http::Headers::get().Path.get(), \"/anypath\"},",
          "446:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "447:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "448:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "449:   };",
          "452:   EXPECT_CALL(*validator_, setParams(_, _));",
          "453:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(true));",
          "456:   std::string legit_token{\"legit_token\"};",
          "457:   EXPECT_CALL(*validator_, token()).WillRepeatedly(ReturnRef(legit_token));",
          "459:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "460:             filter_->decodeHeaders(mock_request_headers, false));",
          "463:   EXPECT_EQ(mock_request_headers, expected_headers);",
          "465:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_failure\").value(), 0);",
          "466:   EXPECT_EQ(scope_.counterFromString(\"test.oauth_success\").value(), 1);",
          "467: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:   EXPECT_CALL(decoder_callbacks_,",
          "792:               encodeHeaders_(HeaderMapEqualRef(&second_response_headers), true));",
          "795:   filter_->finishFlow();",
          "796: }",
          "798: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {",
          "808:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "809:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "810:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "",
          "[Removed Lines]",
          "793:   EXPECT_CALL(decoder_callbacks_, continueDecoding());",
          "799:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "800:       {Http::Headers::get().Path.get(), \"/test?role=bearer\"},",
          "801:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "802:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "803:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "804:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "805:   };",
          "807:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "",
          "[Added Lines]",
          "842:   Http::TestRequestHeaderMapImpl request_headers{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "812:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},",
          "813:   };",
          "816:   EXPECT_CALL(*validator_, setParams(_, _));",
          "817:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "824: }",
          "826: TEST_F(OAuth2Test, OAuthBearerTokenFlowFromQueryParameters) {",
          "834:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "835:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "836:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "837:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "839:   };",
          "842:   EXPECT_CALL(*validator_, setParams(_, _));",
          "843:   EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));",
          "850: }",
          "852: } // namespace Oauth2",
          "",
          "[Removed Lines]",
          "819:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "820:             filter_->decodeHeaders(request_headers_before, false));",
          "823:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "827:   Http::TestRequestHeaderMapImpl request_headers_before{",
          "828:       {Http::Headers::get().Path.get(), \"/test?role=bearer&token=xyz-queryparam-token\"},",
          "829:       {Http::Headers::get().Host.get(), \"traffic.example.com\"},",
          "830:       {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},",
          "831:       {Http::Headers::get().Scheme.get(), \"https\"},",
          "832:   };",
          "833:   Http::TestRequestHeaderMapImpl request_headers_after{",
          "838:       {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-queryparam-token\"},",
          "845:   EXPECT_EQ(Http::FilterHeadersStatus::Continue,",
          "846:             filter_->decodeHeaders(request_headers_before, false));",
          "849:   EXPECT_EQ(request_headers_before, request_headers_after);",
          "",
          "[Added Lines]",
          "854:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "855:             filter_->decodeHeaders(request_headers, false));",
          "859:   Http::TestRequestHeaderMapImpl request_headers{",
          "870:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,",
          "871:             filter_->decodeHeaders(request_headers, false));",
          "",
          "---------------"
        ]
      }
    }
  ]
}