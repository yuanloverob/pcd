{
  "cve_id": "CVE-2022-23561",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "6c0b2b70eeee588591680f5b7d5d38175fd7cdf6",
  "patch_info": {
    "commit_hash": "6c0b2b70eeee588591680f5b7d5d38175fd7cdf6",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/6c0b2b70eeee588591680f5b7d5d38175fd7cdf6",
    "files": [
      "tensorflow/lite/kernels/fully_connected.cc"
    ],
    "message": "[lite] add validation check for sparse fully connected\n\nPiperOrigin-RevId: 417629354\nChange-Id: If96171c4bd4f5fdb01d6368d6deab19d1c9beca7",
    "before_after_code_files": [
      "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc": [
      "File: tensorflow/lite/kernels/fully_connected.cc -> tensorflow/lite/kernels/fully_connected.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "928:   return kTfLiteOk;",
      "929: }",
      "931: template <KernelType kernel_type>",
      "932: TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,",
      "933:                        TfLiteFullyConnectedParams* params, OpData* data,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "932: bool VerifySparsity(const RuntimeShape& weights_shape,",
      "933:                     const RuntimeShape& input_shape,",
      "934:                     const RuntimeShape& output_shape,",
      "935:                     const TfLiteSparsity* sparsity) {",
      "936:   const int weights_dims_count = weights_shape.DimensionsCount();",
      "937:   const int output_dims_count = output_shape.DimensionsCount();",
      "938:   const int w0_size = sparsity->dim_metadata[0].dense_size;",
      "939:   const int accum_depth = weights_shape.Dims(weights_dims_count - 1);",
      "940:   const int output_elements = output_shape.FlatSize();",
      "941:   const int input_elements = input_shape.FlatSize();",
      "942:   const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);",
      "943:   const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,",
      "944:                                        output_shape, output_dims_count - 1);",
      "945:   const int max_batch_index = batches - 1;",
      "946:   const int max_output = max_batch_index * output_depth + w0_size;",
      "947:   const int max_batch_depth = accum_depth * max_batch_index;",
      "950:   if (output_elements < max_output) return false;",
      "953:   for (int i = 0; i < sparsity->dim_metadata[1].array_indices->size; ++i) {",
      "954:     if (input_elements <=",
      "955:         max_batch_depth + sparsity->dim_metadata[1].array_indices->data[i])",
      "956:       return false;",
      "957:   }",
      "958:   return true;",
      "959: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "968:                            \"Unsupported sparse fully-connected weight format.\");",
      "969:         return kTfLiteError;",
      "970:       }",
      "972:       if (sparsity.dim_metadata_size == kDimMetadataSizeRandomSparse) {",
      "974:         optimized_ops::FullyConnectedSparseWeight(",
      "980:       } else if (sparsity.dim_metadata_size == kDimMetadataSizeBlockSparse &&",
      "981:                  sparsity.dim_metadata[2].dense_size == 4) {",
      "983:         optimized_ops::FullyConnectedSparseWeight1x4(",
      "989:             CpuBackendContext::GetFromContext(context));",
      "990:       } else {",
      "991:         TF_LITE_KERNEL_LOG(context,",
      "",
      "[Removed Lines]",
      "975:             sparsity, op_params, GetTensorShape(input),",
      "976:             GetTensorData<float>(input), GetTensorShape(filter),",
      "977:             GetTensorData<float>(filter), GetTensorShape(bias),",
      "978:             GetTensorData<float>(bias), GetTensorShape(output),",
      "979:             GetTensorData<float>(output));",
      "984:             sparsity, op_params, GetTensorShape(input),",
      "985:             GetTensorData<float>(input), GetTensorShape(filter),",
      "986:             GetTensorData<float>(filter), GetTensorShape(bias),",
      "987:             GetTensorData<float>(bias), GetTensorShape(output),",
      "988:             GetTensorData<float>(output),",
      "",
      "[Added Lines]",
      "1001:       const auto& input_shape = GetTensorShape(input);",
      "1002:       const auto& filter_shape = GetTensorShape(filter);",
      "1003:       const auto& output_shape = GetTensorShape(output);",
      "1004:       const auto& bias_shape = GetTensorShape(bias);",
      "1005:       if (!VerifySparsity(filter_shape, input_shape, output_shape, &sparsity)) {",
      "1006:         TF_LITE_KERNEL_LOG(context, \"Invalid sparse fully-connected format.\");",
      "1007:         return kTfLiteError;",
      "1008:       }",
      "1013:             sparsity, op_params,                         // Disable formatting",
      "1014:             input_shape, GetTensorData<float>(input),    // Disable formatting",
      "1015:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
      "1016:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
      "1017:             output_shape, GetTensorData<float>(output));",
      "1022:             sparsity, op_params,                         // Disable formatting",
      "1023:             input_shape, GetTensorData<float>(input),    // Disable formatting",
      "1024:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
      "1025:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
      "1026:             output_shape, GetTensorData<float>(output),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "399a717bc6eabbf774a0b8bd0717ba25e9a0e733",
      "candidate_info": {
        "commit_hash": "399a717bc6eabbf774a0b8bd0717ba25e9a0e733",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/399a717bc6eabbf774a0b8bd0717ba25e9a0e733",
        "files": [
          "tensorflow/lite/kernels/fully_connected.cc"
        ],
        "message": "[lite] add validation check for sparse fully connected\n\nPiperOrigin-RevId: 417629354\nChange-Id: If96171c4bd4f5fdb01d6368d6deab19d1c9beca7",
        "before_after_code_files": [
          "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc": [
          "File: tensorflow/lite/kernels/fully_connected.cc -> tensorflow/lite/kernels/fully_connected.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:   return kTfLiteOk;",
          "880: }",
          "882: template <KernelType kernel_type>",
          "883: TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "884:                        TfLiteFullyConnectedParams* params, OpData* data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883: bool VerifySparsity(const RuntimeShape& weights_shape,",
          "884:                     const RuntimeShape& input_shape,",
          "885:                     const RuntimeShape& output_shape,",
          "886:                     const TfLiteSparsity* sparsity) {",
          "887:   const int weights_dims_count = weights_shape.DimensionsCount();",
          "888:   const int output_dims_count = output_shape.DimensionsCount();",
          "889:   const int w0_size = sparsity->dim_metadata[0].dense_size;",
          "890:   const int accum_depth = weights_shape.Dims(weights_dims_count - 1);",
          "891:   const int output_elements = output_shape.FlatSize();",
          "892:   const int input_elements = input_shape.FlatSize();",
          "893:   const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);",
          "894:   const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,",
          "895:                                        output_shape, output_dims_count - 1);",
          "896:   const int max_batch_index = batches - 1;",
          "897:   const int max_output = max_batch_index * output_depth + w0_size;",
          "898:   const int max_batch_depth = accum_depth * max_batch_index;",
          "901:   if (output_elements < max_output) return false;",
          "904:   for (int i = 0; i < sparsity->dim_metadata[1].array_indices->size; ++i) {",
          "905:     if (input_elements <=",
          "906:         max_batch_depth + sparsity->dim_metadata[1].array_indices->data[i])",
          "907:       return false;",
          "908:   }",
          "909:   return true;",
          "910: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:                            \"Unsupported sparse fully-connected weight format.\");",
          "920:         return kTfLiteError;",
          "921:       }",
          "923:       if (sparsity.dim_metadata_size == kDimMetadataSizeRandomSparse) {",
          "925:         optimized_ops::FullyConnectedSparseWeight(",
          "931:       } else if (sparsity.dim_metadata_size == kDimMetadataSizeBlockSparse &&",
          "932:                  sparsity.dim_metadata[2].dense_size == 4) {",
          "934:         optimized_ops::FullyConnectedSparseWeight1x4(",
          "940:             CpuBackendContext::GetFromContext(context));",
          "941:       } else {",
          "942:         TF_LITE_KERNEL_LOG(context,",
          "",
          "[Removed Lines]",
          "926:             sparsity, op_params, GetTensorShape(input),",
          "927:             GetTensorData<float>(input), GetTensorShape(filter),",
          "928:             GetTensorData<float>(filter), GetTensorShape(bias),",
          "929:             GetTensorData<float>(bias), GetTensorShape(output),",
          "930:             GetTensorData<float>(output));",
          "935:             sparsity, op_params, GetTensorShape(input),",
          "936:             GetTensorData<float>(input), GetTensorShape(filter),",
          "937:             GetTensorData<float>(filter), GetTensorShape(bias),",
          "938:             GetTensorData<float>(bias), GetTensorShape(output),",
          "939:             GetTensorData<float>(output),",
          "",
          "[Added Lines]",
          "952:       const auto& input_shape = GetTensorShape(input);",
          "953:       const auto& filter_shape = GetTensorShape(filter);",
          "954:       const auto& output_shape = GetTensorShape(output);",
          "955:       const auto& bias_shape = GetTensorShape(bias);",
          "956:       if (!VerifySparsity(filter_shape, input_shape, output_shape, &sparsity)) {",
          "957:         TF_LITE_KERNEL_LOG(context, \"Invalid sparse fully-connected format.\");",
          "958:         return kTfLiteError;",
          "959:       }",
          "964:             sparsity, op_params,                         // Disable formatting",
          "965:             input_shape, GetTensorData<float>(input),    // Disable formatting",
          "966:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
          "967:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
          "968:             output_shape, GetTensorData<float>(output));",
          "973:             sparsity, op_params,                         // Disable formatting",
          "974:             input_shape, GetTensorData<float>(input),    // Disable formatting",
          "975:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
          "976:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
          "977:             output_shape, GetTensorData<float>(output),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72794b0abb67b9cbc6a8bfbbfb09ddf672f2f543",
      "candidate_info": {
        "commit_hash": "72794b0abb67b9cbc6a8bfbbfb09ddf672f2f543",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/72794b0abb67b9cbc6a8bfbbfb09ddf672f2f543",
        "files": [
          "tensorflow/lite/kernels/fully_connected.cc"
        ],
        "message": "[lite] add validation check for sparse fully connected\n\nPiperOrigin-RevId: 417629354\nChange-Id: If96171c4bd4f5fdb01d6368d6deab19d1c9beca7",
        "before_after_code_files": [
          "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc": [
          "File: tensorflow/lite/kernels/fully_connected.cc -> tensorflow/lite/kernels/fully_connected.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:   return kTfLiteOk;",
          "880: }",
          "882: template <KernelType kernel_type>",
          "883: TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "884:                        TfLiteFullyConnectedParams* params, OpData* data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883: bool VerifySparsity(const RuntimeShape& weights_shape,",
          "884:                     const RuntimeShape& input_shape,",
          "885:                     const RuntimeShape& output_shape,",
          "886:                     const TfLiteSparsity* sparsity) {",
          "887:   const int weights_dims_count = weights_shape.DimensionsCount();",
          "888:   const int output_dims_count = output_shape.DimensionsCount();",
          "889:   const int w0_size = sparsity->dim_metadata[0].dense_size;",
          "890:   const int accum_depth = weights_shape.Dims(weights_dims_count - 1);",
          "891:   const int output_elements = output_shape.FlatSize();",
          "892:   const int input_elements = input_shape.FlatSize();",
          "893:   const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);",
          "894:   const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,",
          "895:                                        output_shape, output_dims_count - 1);",
          "896:   const int max_batch_index = batches - 1;",
          "897:   const int max_output = max_batch_index * output_depth + w0_size;",
          "898:   const int max_batch_depth = accum_depth * max_batch_index;",
          "901:   if (output_elements < max_output) return false;",
          "904:   for (int i = 0; i < sparsity->dim_metadata[1].array_indices->size; ++i) {",
          "905:     if (input_elements <=",
          "906:         max_batch_depth + sparsity->dim_metadata[1].array_indices->data[i])",
          "907:       return false;",
          "908:   }",
          "909:   return true;",
          "910: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:                            \"Unsupported sparse fully-connected weight format.\");",
          "920:         return kTfLiteError;",
          "921:       }",
          "923:       if (sparsity.dim_metadata_size == kDimMetadataSizeRandomSparse) {",
          "925:         optimized_ops::FullyConnectedSparseWeight(",
          "931:       } else if (sparsity.dim_metadata_size == kDimMetadataSizeBlockSparse &&",
          "932:                  sparsity.dim_metadata[2].dense_size == 4) {",
          "934:         optimized_ops::FullyConnectedSparseWeight1x4(",
          "940:             CpuBackendContext::GetFromContext(context));",
          "941:       } else {",
          "942:         TF_LITE_KERNEL_LOG(context,",
          "",
          "[Removed Lines]",
          "926:             sparsity, op_params, GetTensorShape(input),",
          "927:             GetTensorData<float>(input), GetTensorShape(filter),",
          "928:             GetTensorData<float>(filter), GetTensorShape(bias),",
          "929:             GetTensorData<float>(bias), GetTensorShape(output),",
          "930:             GetTensorData<float>(output));",
          "935:             sparsity, op_params, GetTensorShape(input),",
          "936:             GetTensorData<float>(input), GetTensorShape(filter),",
          "937:             GetTensorData<float>(filter), GetTensorShape(bias),",
          "938:             GetTensorData<float>(bias), GetTensorShape(output),",
          "939:             GetTensorData<float>(output),",
          "",
          "[Added Lines]",
          "952:       const auto& input_shape = GetTensorShape(input);",
          "953:       const auto& filter_shape = GetTensorShape(filter);",
          "954:       const auto& output_shape = GetTensorShape(output);",
          "955:       const auto& bias_shape = GetTensorShape(bias);",
          "956:       if (!VerifySparsity(filter_shape, input_shape, output_shape, &sparsity)) {",
          "957:         TF_LITE_KERNEL_LOG(context, \"Invalid sparse fully-connected format.\");",
          "958:         return kTfLiteError;",
          "959:       }",
          "964:             sparsity, op_params,                         // Disable formatting",
          "965:             input_shape, GetTensorData<float>(input),    // Disable formatting",
          "966:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
          "967:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
          "968:             output_shape, GetTensorData<float>(output));",
          "973:             sparsity, op_params,                         // Disable formatting",
          "974:             input_shape, GetTensorData<float>(input),    // Disable formatting",
          "975:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
          "976:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
          "977:             output_shape, GetTensorData<float>(output),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4bd44c0450648338b3348901125f6194319fae0",
      "candidate_info": {
        "commit_hash": "b4bd44c0450648338b3348901125f6194319fae0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b4bd44c0450648338b3348901125f6194319fae0",
        "files": [
          "tensorflow/lite/kernels/fully_connected.cc"
        ],
        "message": "[lite] add validation check for sparse fully connected\n\nPiperOrigin-RevId: 417629354\nChange-Id: If96171c4bd4f5fdb01d6368d6deab19d1c9beca7",
        "before_after_code_files": [
          "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/fully_connected.cc||tensorflow/lite/kernels/fully_connected.cc": [
          "File: tensorflow/lite/kernels/fully_connected.cc -> tensorflow/lite/kernels/fully_connected.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:   return kTfLiteOk;",
          "880: }",
          "882: template <KernelType kernel_type>",
          "883: TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "884:                        TfLiteFullyConnectedParams* params, OpData* data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883: bool VerifySparsity(const RuntimeShape& weights_shape,",
          "884:                     const RuntimeShape& input_shape,",
          "885:                     const RuntimeShape& output_shape,",
          "886:                     const TfLiteSparsity* sparsity) {",
          "887:   const int weights_dims_count = weights_shape.DimensionsCount();",
          "888:   const int output_dims_count = output_shape.DimensionsCount();",
          "889:   const int w0_size = sparsity->dim_metadata[0].dense_size;",
          "890:   const int accum_depth = weights_shape.Dims(weights_dims_count - 1);",
          "891:   const int output_elements = output_shape.FlatSize();",
          "892:   const int input_elements = input_shape.FlatSize();",
          "893:   const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);",
          "894:   const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,",
          "895:                                        output_shape, output_dims_count - 1);",
          "896:   const int max_batch_index = batches - 1;",
          "897:   const int max_output = max_batch_index * output_depth + w0_size;",
          "898:   const int max_batch_depth = accum_depth * max_batch_index;",
          "901:   if (output_elements < max_output) return false;",
          "904:   for (int i = 0; i < sparsity->dim_metadata[1].array_indices->size; ++i) {",
          "905:     if (input_elements <=",
          "906:         max_batch_depth + sparsity->dim_metadata[1].array_indices->data[i])",
          "907:       return false;",
          "908:   }",
          "909:   return true;",
          "910: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:                            \"Unsupported sparse fully-connected weight format.\");",
          "920:         return kTfLiteError;",
          "921:       }",
          "923:       if (sparsity.dim_metadata_size == kDimMetadataSizeRandomSparse) {",
          "925:         optimized_ops::FullyConnectedSparseWeight(",
          "931:       } else if (sparsity.dim_metadata_size == kDimMetadataSizeBlockSparse &&",
          "932:                  sparsity.dim_metadata[2].dense_size == 4) {",
          "934:         optimized_ops::FullyConnectedSparseWeight1x4(",
          "940:             CpuBackendContext::GetFromContext(context));",
          "941:       } else {",
          "942:         TF_LITE_KERNEL_LOG(context,",
          "",
          "[Removed Lines]",
          "926:             sparsity, op_params, GetTensorShape(input),",
          "927:             GetTensorData<float>(input), GetTensorShape(filter),",
          "928:             GetTensorData<float>(filter), GetTensorShape(bias),",
          "929:             GetTensorData<float>(bias), GetTensorShape(output),",
          "930:             GetTensorData<float>(output));",
          "935:             sparsity, op_params, GetTensorShape(input),",
          "936:             GetTensorData<float>(input), GetTensorShape(filter),",
          "937:             GetTensorData<float>(filter), GetTensorShape(bias),",
          "938:             GetTensorData<float>(bias), GetTensorShape(output),",
          "939:             GetTensorData<float>(output),",
          "",
          "[Added Lines]",
          "952:       const auto& input_shape = GetTensorShape(input);",
          "953:       const auto& filter_shape = GetTensorShape(filter);",
          "954:       const auto& output_shape = GetTensorShape(output);",
          "955:       const auto& bias_shape = GetTensorShape(bias);",
          "956:       if (!VerifySparsity(filter_shape, input_shape, output_shape, &sparsity)) {",
          "957:         TF_LITE_KERNEL_LOG(context, \"Invalid sparse fully-connected format.\");",
          "958:         return kTfLiteError;",
          "959:       }",
          "964:             sparsity, op_params,                         // Disable formatting",
          "965:             input_shape, GetTensorData<float>(input),    // Disable formatting",
          "966:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
          "967:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
          "968:             output_shape, GetTensorData<float>(output));",
          "973:             sparsity, op_params,                         // Disable formatting",
          "974:             input_shape, GetTensorData<float>(input),    // Disable formatting",
          "975:             filter_shape, GetTensorData<float>(filter),  // Disable formatting",
          "976:             bias_shape, GetTensorData<float>(bias),      // Disable formatting",
          "977:             output_shape, GetTensorData<float>(output),",
          "",
          "---------------"
        ]
      }
    }
  ]
}