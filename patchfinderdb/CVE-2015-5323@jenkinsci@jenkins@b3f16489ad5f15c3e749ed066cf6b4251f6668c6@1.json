{
  "cve_id": "CVE-2015-5323",
  "cve_desc": "Jenkins before 1.638 and LTS before 1.625.2 do not properly restrict access to API tokens which might allow remote administrators to gain privileges and run scripts by using an API token of another user.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "b3f16489ad5f15c3e749ed066cf6b4251f6668c6",
  "patch_info": {
    "commit_hash": "b3f16489ad5f15c3e749ed066cf6b4251f6668c6",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/b3f16489ad5f15c3e749ed066cf6b4251f6668c6",
    "files": [
      "core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/resources/jenkins/security/Messages.properties",
      "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
    ],
    "message": "[FIXED SECURITY-200] - Do not expose Api tokens to other users by default\n\nSystem property can be used to restore the original behavior",
    "before_after_code_files": [
      "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties",
      "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
      "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import hudson.model.User;",
      "30: import hudson.model.UserProperty;",
      "31: import hudson.model.UserPropertyDescriptor;",
      "32: import hudson.util.HttpResponses;",
      "33: import hudson.util.Secret;",
      "34: import jenkins.model.Jenkins;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import hudson.security.ACL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: import java.io.IOException;",
      "43: import java.security.SecureRandom;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import javax.annotation.Nonnull;",
      "46: import org.apache.commons.lang.StringUtils;",
      "47: import org.kohsuke.accmod.Restricted;",
      "48: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: public class ApiTokenProperty extends UserProperty {",
      "54:     private volatile Secret apiToken;",
      "56:     @DataBoundConstructor",
      "57:     public ApiTokenProperty() {",
      "58:         _changeApiToken();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:     private static final boolean SHOW_TOKEN_TO_ADMINS =",
      "68:             Boolean.getBoolean(ApiTokenProperty.class.getName() + \".showTokenToAdmins\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "66:         apiToken = Secret.fromString(seed);",
      "67:     }",
      "69:     public String getApiToken() {",
      "70:         String p = apiToken.getPlainText();",
      "71:         if (p.equals(Util.getDigestOf(Jenkins.getInstance().getSecretKey()+\":\"+user.getId()))) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93:     @Nonnull",
      "95:         return hasPermissionToSeeToken() ? getApiTokenInsecure()",
      "96:                 : Messages.ApiTokenProperty_ChangeToken_TokenIsHidden();",
      "97:     }",
      "99:     @Nonnull",
      "100:     @Restricted(NoExternalUse.class)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "77:     }",
      "79:     public boolean matchesPassword(String password) {",
      "81:     }",
      "83:     public void changeApiToken() throws IOException {",
      "",
      "[Removed Lines]",
      "80:         return getApiToken().equals(password);",
      "",
      "[Added Lines]",
      "112:         return  getApiTokenInsecure().equals(password);",
      "113:     }",
      "115:     private boolean hasPermissionToSeeToken() {",
      "116:         final Jenkins jenkins = Jenkins.getInstance();",
      "117:         if (jenkins == null) {",
      "118:             return false; // Should not happen - we don't display UIs in this stage",
      "119:         }",
      "122:         if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {",
      "123:             return true;",
      "124:         }",
      "127:         final User current = User.current();",
      "128:         if (current == null) { // Anonymous",
      "129:             return false;",
      "130:         }",
      "133:         if (Jenkins.getAuthentication() == ACL.SYSTEM) {",
      "134:             return true;",
      "135:         }",
      "139:         return StringUtils.equals(user.getId(), current.getId());",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "125:                 p.changeApiToken();",
      "126:             }",
      "127:             rsp.setHeader(\"script\",\"document.getElementById('apiToken').value='\"+p.getApiToken()+\"'\");",
      "129:         }",
      "130:     }",
      "",
      "[Removed Lines]",
      "128:             return HttpResponses.html(Messages.ApiTokenProperty_ChangeToken_Success());",
      "",
      "[Added Lines]",
      "187:             return HttpResponses.html(p.hasPermissionToSeeToken()",
      "188:                     ? Messages.ApiTokenProperty_ChangeToken_Success()",
      "189:                     : Messages.ApiTokenProperty_ChangeToken_SuccessHidden());",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties": [
      "File: core/src/main/resources/jenkins/security/Messages.properties -> core/src/main/resources/jenkins/security/Messages.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: # THE SOFTWARE.",
      "23: ApiTokenProperty.DisplayName=API Token",
      "25: RekeySecretAdminMonitor.DisplayName=Re-keying",
      "",
      "[Removed Lines]",
      "24: ApiTokenProperty.ChangeToken.Success=<div>Updated</div>",
      "",
      "[Added Lines]",
      "24: ApiTokenProperty.ChangeToken.TokenIsHidden=Token is hidden",
      "25: ApiTokenProperty.ChangeToken.Success=<div>Updated. See the new token in the field above</div>",
      "26: ApiTokenProperty.ChangeToken.SuccessHidden=<div>Updated. You need to login as the user to see the token</div>",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
      "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "6: import hudson.Util;",
      "7: import hudson.model.User;",
      "8: import jenkins.model.Jenkins;",
      "9: import org.apache.commons.httpclient.Credentials;",
      "10: import org.apache.commons.httpclient.HttpClient;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: import hudson.security.ACL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: import org.jvnet.hudson.test.HudsonTestCase;",
      "18: import java.util.concurrent.Callable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import javax.annotation.Nonnull;",
      "21: import org.jvnet.hudson.test.Issue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "27:     public void testBasics() throws Exception {",
      "28:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "29:         User u = User.get(\"foo\");",
      "31:         final String token = t.getApiToken();",
      "49:             @Override",
      "55:             }",
      "56:         });",
      "59:         assertEquals(u,wc.executeOnServer(new Callable<User>() {",
      "60:             public User call() throws Exception {",
      "61:                 return User.current();",
      "62:             }",
      "63:         }));",
      "64:     }",
      "66:     public void testSecurity49Upgrade() throws Exception {",
      "",
      "[Removed Lines]",
      "30:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "34:         HtmlPage config = createWebClient().goTo(u.getUrl() + \"/configure\");",
      "35:         HtmlForm form = config.getFormByName(\"config\");",
      "36:         assertEquals(token, form.getInputByName(\"_.apiToken\").getValueAttribute());",
      "39:         submit(form);",
      "40:         assertSame(t, u.getProperty(ApiTokenProperty.class));",
      "42:         WebClient wc = createWebClient();",
      "43:         wc.setCredentialsProvider(new CredentialsProvider() {",
      "44:             public Credentials getCredentials(AuthScheme scheme, String host, int port, boolean proxy) throws CredentialsNotAvailableException {",
      "45:                 return new UsernamePasswordCredentials(\"foo\", token);",
      "46:             }",
      "47:         });",
      "48:         wc.setWebConnection(new HttpWebConnection(wc) {",
      "50:             protected HttpClient getHttpClient() {",
      "51:                 HttpClient c = super.getHttpClient();",
      "52:                 c.getParams().setAuthenticationPreemptive(true);",
      "53:                 c.getState().setCredentials(new AuthScope(\"localhost\", localPort, AuthScope.ANY_REALM), new UsernamePasswordCredentials(\"foo\", token));",
      "54:                 return c;",
      "",
      "[Added Lines]",
      "33:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "37:         ACL.impersonate(u.impersonate(), new Runnable() {",
      "39:             public void run() {",
      "40:                 assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
      "45:         WebClient wc = createClientForUser(\"foo\");",
      "53:         HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");",
      "54:         HtmlForm form = config.getFormByName(\"config\");",
      "55:         assertEquals(token, form.getInputByName(\"_.apiToken\").getValueAttribute());",
      "58:         submit(form);",
      "59:         assertSame(t, u.getProperty(ApiTokenProperty.class));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "85:         assertTrue(t.getApiToken().equals(Util.getDigestOf(historicalInitialValue+\"somethingElse\")));",
      "87:     }",
      "88: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     @Issue(\"SECURITY-200\")",
      "86:     public void testAdminsShouldBeUnableToSeeTokensByDefault() throws Exception {",
      "87:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "88:         User u = User.get(\"foo\");",
      "89:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "90:         final String token = t.getApiToken();",
      "93:         WebClient wc = createClientForUser(\"bar\");",
      "94:         HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");",
      "95:         HtmlForm form = config.getFormByName(\"config\");",
      "96:         assertEquals(Messages.ApiTokenProperty_ChangeToken_TokenIsHidden(), form.getInputByName(\"_.apiToken\").getValueAttribute());",
      "97:     }",
      "99:     @Issue(\"SECURITY-200\")",
      "100:     public void testAdminsShouldBeUnableToChangeTokensByDefault() throws Exception {",
      "101:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "102:         User foo = User.get(\"foo\");",
      "103:         User bar = User.get(\"bar\");",
      "104:         final ApiTokenProperty t = foo.getProperty(ApiTokenProperty.class);",
      "105:         final ApiTokenProperty.DescriptorImpl descriptor = (ApiTokenProperty.DescriptorImpl) t.getDescriptor();",
      "108:         WebClient wc = createClientForUser(\"bar\");",
      "109:         HtmlPage res = wc.goTo(foo.getUrl() + \"/\" + descriptor.getDescriptorUrl()+ \"/changeToken\");",
      "110:         assertEquals(\"Update token response is incorrect\",",
      "111:                 Messages.ApiTokenProperty_ChangeToken_SuccessHidden(), \"<div>\" + res.getBody().asText() + \"</div>\");",
      "112:     }",
      "114:     @Nonnull",
      "115:     private WebClient createClientForUser(final String username) {",
      "116:         User u = User.get(username);",
      "117:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "119:         final String token = t.getApiTokenInsecure();",
      "121:         WebClient wc = createWebClient();",
      "122:         wc.setCredentialsProvider(new CredentialsProvider() {",
      "123:             @Override",
      "124:             public Credentials getCredentials(AuthScheme scheme, String host, int port, boolean proxy)",
      "125:                     throws CredentialsNotAvailableException {",
      "126:                 return new UsernamePasswordCredentials(username, token);",
      "127:             }",
      "128:         });",
      "129:         wc.setWebConnection(new HttpWebConnection(wc) {",
      "130:             @Override",
      "131:             protected HttpClient getHttpClient() {",
      "132:                 HttpClient c = super.getHttpClient();",
      "133:                 c.getParams().setAuthenticationPreemptive(true);",
      "134:                 c.getState().setCredentials(new AuthScope(\"localhost\", localPort, AuthScope.ANY_REALM),",
      "135:                         new UsernamePasswordCredentials(username, token));",
      "136:                 return c;",
      "137:             }",
      "138:         });",
      "139:         return wc;",
      "140:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0203504a2cc39b5c1b92495c5f7aefe6ad403c22",
      "candidate_info": {
        "commit_hash": "0203504a2cc39b5c1b92495c5f7aefe6ad403c22",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/0203504a2cc39b5c1b92495c5f7aefe6ad403c22",
        "files": [
          "core/src/main/java/hudson/PluginManager.java",
          "core/src/main/java/hudson/WebAppMain.java",
          "core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java",
          "core/src/main/java/hudson/model/Fingerprint.java",
          "core/src/main/java/hudson/model/ListView.java",
          "core/src/main/java/hudson/security/ACL.java",
          "core/src/main/java/hudson/security/ACLContext.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "test/src/test/java/hudson/model/FingerprintTest.java",
          "test/src/test/java/hudson/model/ListViewTest.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ],
        "message": "[FIXED JENKINS-36494] Switch to a try with resources form of impersonation",
        "before_after_code_files": [
          "core/src/main/java/hudson/PluginManager.java||core/src/main/java/hudson/PluginManager.java",
          "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java",
          "core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java||core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java",
          "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java",
          "core/src/main/java/hudson/model/ListView.java||core/src/main/java/hudson/model/ListView.java",
          "core/src/main/java/hudson/security/ACL.java||core/src/main/java/hudson/security/ACL.java",
          "core/src/main/java/hudson/security/ACLContext.java||core/src/main/java/hudson/security/ACLContext.java",
          "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java",
          "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java||core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java",
          "test/src/test/java/hudson/model/ListViewTest.java||test/src/test/java/hudson/model/ListViewTest.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ],
          "candidate": [
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/PluginManager.java||core/src/main/java/hudson/PluginManager.java": [
          "File: core/src/main/java/hudson/PluginManager.java -> core/src/main/java/hudson/PluginManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson;",
          "26: import edu.umd.cs.findbugs.annotations.NonNull;",
          "27: import jenkins.util.SystemProperties;",
          "28: import hudson.PluginWrapper.Dependency;",
          "29: import hudson.init.InitMilestone;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:                     }",
          "1353:                     updateCenter.persistInstallStatus();",
          "1354:                     if(!failures) {",
          "1361:                     }",
          "1362:                 }",
          "1363:             }.start();",
          "",
          "[Removed Lines]",
          "1355:                         ACL.impersonate(currentAuth, new Runnable() {",
          "1356:                             @Override",
          "1357:                             public void run() {",
          "1358:                                 InstallUtil.proceedToNextStateFrom(InstallState.INITIAL_PLUGINS_INSTALLING);",
          "1359:                             }",
          "1360:                         });",
          "",
          "[Added Lines]",
          "1356:                         try (ACLContext _ = ACL.as(currentAuth)) {",
          "1357:                             InstallUtil.proceedToNextStateFrom(InstallState.INITIAL_PLUGINS_INSTALLING);",
          "1358:                         }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java": [
          "File: core/src/main/java/hudson/WebAppMain.java -> core/src/main/java/hudson/WebAppMain.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson;",
          "26: import jenkins.util.SystemProperties;",
          "27: import com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider;",
          "28: import com.thoughtworks.xstream.core.JVM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: import java.io.File;",
          "60: import java.io.FileOutputStream;",
          "61: import java.io.IOException;",
          "63: import java.net.URL;",
          "64: import java.net.URLClassLoader;",
          "65: import java.util.Date;",
          "",
          "[Removed Lines]",
          "62: import java.lang.reflect.Method;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     }",
          "372:     public void contextDestroyed(ServletContextEvent event) {",
          "392:         } finally {",
          "393:             JenkinsJVMAccess._setJenkinsJVM(false);",
          "394:         }",
          "",
          "[Removed Lines]",
          "373:         try {",
          "374:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "375:                 @Override",
          "376:                 public void run() {",
          "377:                     terminated = true;",
          "378:                     Jenkins instance = Jenkins.getInstanceOrNull();",
          "379:                     if (instance != null)",
          "380:                         instance.cleanUp();",
          "381:                     Thread t = initThread;",
          "382:                     if (t != null && t.isAlive()) {",
          "383:                         LOGGER.log(Level.INFO, \"Shutting down a Jenkins instance that was still starting up\", new Throwable(\"reason\"));",
          "384:                         t.interrupt();",
          "385:                     }",
          "389:                     Logger.getLogger(\"\").removeHandler(handler);",
          "390:                 }",
          "391:             });",
          "",
          "[Added Lines]",
          "373:         try (ACLContext old = ACL.as(ACL.SYSTEM)) {",
          "374:             terminated = true;",
          "375:             Jenkins instance = Jenkins.getInstanceOrNull();",
          "376:             if (instance != null)",
          "377:                 instance.cleanUp();",
          "378:             Thread t = initThread;",
          "379:             if (t != null && t.isAlive()) {",
          "380:                 LOGGER.log(Level.INFO, \"Shutting down a Jenkins instance that was still starting up\", new Throwable(\"reason\"));",
          "381:                 t.interrupt();",
          "382:             }",
          "386:             Logger.getLogger(\"\").removeHandler(handler);",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java||core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java": [
          "File: core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java -> core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.model.Item;",
          "28: import hudson.model.Items;",
          "29: import hudson.security.ACL;",
          "30: import java.util.logging.Level;",
          "31: import java.util.logging.Logger;",
          "32: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         T s = j.getItemByFullName(src, type());",
          "62:         if (s == null) {",
          "63:             final Authentication who = Jenkins.getAuthentication();",
          "72:                 }",
          "74:             T nearest = Items.findNearest(type(), src, j);",
          "75:             if (nearest != null) {",
          "76:                 throw new IllegalArgumentException(\"No such job '\" + src + \"'; perhaps you meant '\" + nearest.getFullName() + \"'?\");",
          "",
          "[Removed Lines]",
          "64:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "65:                 @Override public void run() {",
          "66:                     Item actual = j.getItemByFullName(src);",
          "67:                     if (actual == null) {",
          "68:                         LOGGER.log(Level.FINE, \"really no item exists named {0}\", src);",
          "69:                     } else {",
          "70:                         LOGGER.log(Level.WARNING, \"running as {0} could not find {1} of {2}\", new Object[] {who.getPrincipal(), actual, type()});",
          "71:                     }",
          "73:             });",
          "",
          "[Added Lines]",
          "65:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "66:                 Item actual = j.getItemByFullName(src);",
          "67:                 if (actual == null) {",
          "68:                     LOGGER.log(Level.FINE, \"really no item exists named {0}\", src);",
          "69:                 } else {",
          "70:                     LOGGER.log(Level.WARNING, \"running as {0} could not find {1} of {2}\", new Object[] {who.getPrincipal(), actual, type()});",
          "72:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Fingerprint.java||core/src/main/java/hudson/model/Fingerprint.java": [
          "File: core/src/main/java/hudson/model/Fingerprint.java -> core/src/main/java/hudson/model/Fingerprint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import com.google.common.collect.ImmutableList;",
          "27: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
          "29: import com.thoughtworks.xstream.converters.Converter;",
          "30: import com.thoughtworks.xstream.converters.MarshallingContext;",
          "31: import com.thoughtworks.xstream.converters.UnmarshallingContext;",
          "",
          "[Removed Lines]",
          "28: import com.thoughtworks.xstream.XStream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import hudson.model.listeners.ItemListener;",
          "41: import hudson.model.listeners.SaveableListener;",
          "42: import hudson.security.ACL;",
          "43: import hudson.util.AtomicFileWriter;",
          "44: import hudson.util.HexBinaryConverter;",
          "45: import hudson.util.Iterators;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:     public static final class ProjectRenameListener extends ItemListener {",
          "823:         @Override",
          "824:         public void onLocationChanged(final Item item, final String oldName, final String newName) {",
          "830:         }",
          "831:         private void locationChanged(Item item, String oldName, String newName) {",
          "832:             if (item instanceof AbstractProject) {",
          "",
          "[Removed Lines]",
          "825:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "826:                 @Override public void run() {",
          "827:                     locationChanged(item, oldName, newName);",
          "828:                 }",
          "829:             });",
          "",
          "[Added Lines]",
          "825:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "826:                 locationChanged(item, oldName, newName);",
          "827:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1439:         final Authentication userAuth = Jenkins.getAuthentication();",
          "1463:                         }",
          "1467:             }",
          "1470:     }",
          "1472:     private static final XStream2 XSTREAM = new XStream2();",
          "",
          "[Removed Lines]",
          "1440:         final boolean[] res = new boolean[] {false};",
          "1441:         ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "1442:             @Override",
          "1443:             public void run() {",
          "1444:                 final Item itemBySystemUser = jenkins.getItemByFullName(fullName);",
          "1445:                 if (itemBySystemUser == null) {",
          "1446:                     return;",
          "1447:                 }",
          "1451:                 boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);",
          "1452:                 if (canDiscoverTheItem) {",
          "1453:                     ItemGroup<?> current = itemBySystemUser.getParent();",
          "1454:                     do {",
          "1455:                         if (current instanceof Item) {",
          "1456:                             final Item item = (Item) current;",
          "1457:                             current = item.getParent();",
          "1458:                             if (!item.getACL().hasPermission(userAuth, Item.READ)) {",
          "1459:                                 canDiscoverTheItem = false;",
          "1460:                             }",
          "1461:                         } else {",
          "1462:                             current = null;",
          "1464:                     } while (canDiscoverTheItem && current != null);",
          "1465:                 }",
          "1466:                 res[0] = canDiscoverTheItem;",
          "1468:         });",
          "1469:         return res[0];",
          "",
          "[Added Lines]",
          "1438:         try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "1439:             final Item itemBySystemUser = jenkins.getItemByFullName(fullName);",
          "1440:             if (itemBySystemUser == null) {",
          "1441:                 return false;",
          "1442:             }",
          "1446:             boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);",
          "1447:             if (canDiscoverTheItem) {",
          "1448:                 ItemGroup<?> current = itemBySystemUser.getParent();",
          "1449:                 do {",
          "1450:                     if (current instanceof Item) {",
          "1451:                         final Item i = (Item) current;",
          "1452:                         current = i.getParent();",
          "1453:                         if (!i.getACL().hasPermission(userAuth, Item.READ)) {",
          "1454:                             canDiscoverTheItem = false;",
          "1456:                     } else {",
          "1457:                         current = null;",
          "1458:                     }",
          "1459:                 } while (canDiscoverTheItem && current != null);",
          "1461:             return canDiscoverTheItem;",
          "1462:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/ListView.java||core/src/main/java/hudson/model/ListView.java": [
          "File: core/src/main/java/hudson/model/ListView.java -> core/src/main/java/hudson/model/ListView.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import hudson.model.Descriptor.FormException;",
          "31: import hudson.model.listeners.ItemListener;",
          "32: import hudson.security.ACL;",
          "33: import hudson.util.CaseInsensitiveComparator;",
          "34: import hudson.util.DescribableList;",
          "35: import hudson.util.FormValidation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:     }",
          "443:     @Restricted(NoExternalUse.class)",
          "451:         }",
          "452:         private void locationChanged(Item item, String oldFullName, String newFullName) {",
          "453:             final Jenkins jenkins = Jenkins.getInstance();",
          "",
          "[Removed Lines]",
          "444:     @Extension public static final class Listener extends ItemListener {",
          "445:         @Override public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {",
          "446:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "447:                 @Override public void run() {",
          "448:                     locationChanged(item, oldFullName, newFullName);",
          "449:                 }",
          "450:             });",
          "",
          "[Added Lines]",
          "445:     @Extension",
          "446:     public static final class Listener extends ItemListener {",
          "447:         @Override",
          "448:         public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {",
          "449:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "450:                 locationChanged(item, oldFullName, newFullName);",
          "451:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:             }",
          "488:         }",
          "496:         }",
          "497:         private void deleted(Item item) {",
          "498:             final Jenkins jenkins = Jenkins.getInstance();",
          "",
          "[Removed Lines]",
          "490:         @Override public void onDeleted(final Item item) {",
          "491:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "492:                 @Override public void run() {",
          "493:                     deleted(item);",
          "494:                 }",
          "495:             });",
          "",
          "[Added Lines]",
          "491:         @Override",
          "492:         public void onDeleted(final Item item) {",
          "493:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "494:                 deleted(item);",
          "495:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/ACL.java||core/src/main/java/hudson/security/ACL.java": [
          "File: core/src/main/java/hudson/security/ACL.java -> core/src/main/java/hudson/security/ACL.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.security;",
          "26: import javax.annotation.Nonnull;",
          "28: import hudson.model.Item;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import hudson.model.User;",
          "27: import javax.annotation.CheckForNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:     public static @Nonnull SecurityContext impersonate(@Nonnull Authentication auth) {",
          "184:         SecurityContext old = SecurityContextHolder.getContext();",
          "185:         SecurityContextHolder.setContext(new NonSerializableSecurityContext(auth));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     public static void impersonate(@Nonnull Authentication auth, @Nonnull Runnable body) {",
          "196:         SecurityContext old = impersonate(auth);",
          "197:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:     public static <V,T extends Exception> V impersonate(Authentication auth, Callable<V,T> body) throws T {",
          "211:         SecurityContext old = impersonate(auth);",
          "212:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:         }",
          "217:     }",
          "219: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     @Nonnull",
          "243:     public static ACLContext as(@Nonnull Authentication auth) {",
          "244:         final ACLContext context = new ACLContext(SecurityContextHolder.getContext());",
          "245:         SecurityContextHolder.setContext(new NonSerializableSecurityContext(auth));",
          "246:         return context;",
          "247:     }",
          "265:     @Nonnull",
          "266:     public static ACLContext as(@CheckForNull User user) {",
          "267:         return as(user == null ? Jenkins.ANONYMOUS : user.impersonate());",
          "268:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/ACLContext.java||core/src/main/java/hudson/security/ACLContext.java": [
          "File: core/src/main/java/hudson/security/ACLContext.java -> core/src/main/java/hudson/security/ACLContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.security;",
          "26: import javax.annotation.CheckForNull;",
          "27: import org.acegisecurity.Authentication;",
          "28: import org.acegisecurity.context.SecurityContext;",
          "29: import org.acegisecurity.context.SecurityContextHolder;",
          "36: public class ACLContext implements AutoCloseable {",
          "41:     private final SecurityContext previousContext;",
          "47:     ACLContext(SecurityContext previousContext) {",
          "48:         this.previousContext = previousContext;",
          "49:     }",
          "55:     @CheckForNull",
          "56:     public SecurityContext getPreviousContext() {",
          "57:         return previousContext;",
          "58:     }",
          "61:     @Override",
          "62:     public void close() {",
          "63:         SecurityContextHolder.setContext(previousContext);",
          "64:     }",
          "65: }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/tasks/BuildTrigger.java||core/src/main/java/hudson/tasks/BuildTrigger.java": [
          "File: core/src/main/java/hudson/tasks/BuildTrigger.java -> core/src/main/java/hudson/tasks/BuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import hudson.model.listeners.ItemListener;",
          "47: import hudson.model.queue.Tasks;",
          "48: import hudson.security.ACL;",
          "49: import hudson.util.FormValidation;",
          "50: import java.io.IOException;",
          "51: import java.io.PrintStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:         public static class ItemListenerImpl extends ItemListener {",
          "413:             @Override",
          "414:             public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {",
          "420:             }",
          "421:             private void locationChanged(Item item, String oldFullName, String newFullName) {",
          "",
          "[Removed Lines]",
          "415:                 ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "416:                     @Override public void run() {",
          "417:                         locationChanged(item, oldFullName, newFullName);",
          "418:                     }",
          "419:                 });",
          "",
          "[Added Lines]",
          "416:                 try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "417:                     locationChanged(item, oldFullName, newFullName);",
          "418:                 }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java||core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java": [
          "File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java -> core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import hudson.model.listeners.RunListener;",
          "48: import hudson.model.queue.Tasks;",
          "49: import hudson.security.ACL;",
          "50: import hudson.tasks.BuildTrigger;",
          "51: import hudson.triggers.Trigger;",
          "52: import hudson.triggers.TriggerDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:         }",
          "215:         private Map<Job,Collection<ReverseBuildTrigger>> calculateCache() {",
          "224:                         }",
          "238:                         }",
          "239:                     }",
          "240:                 }",
          "243:         }",
          "245:         @Override public void onCompleted(@Nonnull Run r, @Nonnull TaskListener listener) {",
          "",
          "[Removed Lines]",
          "216:             final Map<Job,Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();",
          "217:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "218:                 @Override",
          "219:                 public void run() {",
          "220:                     for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {",
          "221:                         ReverseBuildTrigger trigger = ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);",
          "222:                         if (trigger == null) {",
          "223:                             continue;",
          "225:                         List<Job> upstreams = Items.fromNameList(downstream.getParent(), trigger.upstreamProjects, Job.class);",
          "226:                         LOGGER.log(Level.FINE, \"from {0} see upstreams {1}\", new Object[] {downstream, upstreams});",
          "227:                         for (Job upstream : upstreams) {",
          "228:                             if (upstream instanceof AbstractProject && downstream instanceof AbstractProject) {",
          "229:                                 continue; // handled specially",
          "230:                             }",
          "231:                             Collection<ReverseBuildTrigger> triggers = result.get(upstream);",
          "232:                             if (triggers == null) {",
          "233:                                 triggers = new LinkedList<>();",
          "234:                                 result.put(upstream, triggers);",
          "235:                             }",
          "236:                             triggers.remove(trigger);",
          "237:                             triggers.add(trigger);",
          "241:             });",
          "242:             return result;",
          "",
          "[Added Lines]",
          "217:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "218:                 final Map<Job, Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();",
          "219:                 for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {",
          "220:                     ReverseBuildTrigger trigger =",
          "221:                             ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);",
          "222:                     if (trigger == null) {",
          "223:                         continue;",
          "224:                     }",
          "225:                     List<Job> upstreams =",
          "226:                             Items.fromNameList(downstream.getParent(), trigger.upstreamProjects, Job.class);",
          "227:                     LOGGER.log(Level.FINE, \"from {0} see upstreams {1}\", new Object[]{downstream, upstreams});",
          "228:                     for (Job upstream : upstreams) {",
          "229:                         if (upstream instanceof AbstractProject && downstream instanceof AbstractProject) {",
          "230:                             continue; // handled specially",
          "232:                         Collection<ReverseBuildTrigger> triggers = result.get(upstream);",
          "233:                         if (triggers == null) {",
          "234:                             triggers = new LinkedList<>();",
          "235:                             result.put(upstream, triggers);",
          "237:                         triggers.remove(trigger);",
          "238:                         triggers.add(trigger);",
          "241:                 return result;",
          "242:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:         }",
          "272:     }",
          "290:                             }",
          "291:                         }",
          "292:                     }",
          "293:                 }",
          "295:         }",
          "296:     }",
          "297: }",
          "",
          "[Removed Lines]",
          "274:     @Extension public static class ItemListenerImpl extends ItemListener {",
          "275:         @Override public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {",
          "276:             ACL.impersonate(ACL.SYSTEM, new Runnable() {",
          "277:                 @Override",
          "278:                 public void run() {",
          "279:                     for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {",
          "280:                         ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);",
          "281:                         if (t != null) {",
          "282:                             String revised = Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.upstreamProjects, p.getParent());",
          "283:                             if (!revised.equals(t.upstreamProjects)) {",
          "284:                                 t.upstreamProjects = revised;",
          "285:                                 try {",
          "286:                                     p.save();",
          "287:                                 } catch (IOException e) {",
          "288:                                     LOGGER.log(Level.WARNING, \"Failed to persist project setting during rename from \" + oldFullName + \" to \" + newFullName, e);",
          "289:                                 }",
          "294:             });",
          "",
          "[Added Lines]",
          "274:     @Extension",
          "275:     public static class ItemListenerImpl extends ItemListener {",
          "276:         @Override",
          "277:         public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {",
          "278:             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {",
          "279:                 for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {",
          "280:                     ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);",
          "281:                     if (t != null) {",
          "282:                         String revised =",
          "283:                                 Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.upstreamProjects,",
          "284:                                         p.getParent());",
          "285:                         if (!revised.equals(t.upstreamProjects)) {",
          "286:                             t.upstreamProjects = revised;",
          "287:                             try {",
          "288:                                 p.save();",
          "289:                             } catch (IOException e) {",
          "290:                                 LOGGER.log(Level.WARNING,",
          "291:                                         \"Failed to persist project setting during rename from \" + oldFullName + \" to \"",
          "292:                                                 + newFullName, e);",
          "297:             }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/FingerprintTest.java||test/src/test/java/hudson/model/FingerprintTest.java": [
          "File: test/src/test/java/hudson/model/FingerprintTest.java -> test/src/test/java/hudson/model/FingerprintTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.model;",
          "26: import hudson.security.ACL;",
          "27: import hudson.security.AuthorizationMatrixProperty;",
          "28: import hudson.security.Permission;",
          "29: import hudson.security.ProjectMatrixAuthorizationStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         setupProjectMatrixAuthStrategy(Jenkins.READ);",
          "141:         setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);",
          "142:         setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);",
          "173:     }",
          "175:     @Test",
          "",
          "[Removed Lines]",
          "144:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "145:             @Override",
          "146:             public void run() {",
          "147:                 Fingerprint.BuildPtr original = fp.getOriginal();",
          "148:                 assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());",
          "149:                 assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());",
          "150:                 assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());",
          "151:                 assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());",
          "152:                 assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);",
          "153:             }",
          "154:         });",
          "156:         ACL.impersonate(user2.impersonate(), new Runnable() {",
          "157:             @Override",
          "158:             public void run() {",
          "159:                 assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "160:                 assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());",
          "161:                 assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);",
          "162:             }",
          "163:         });",
          "165:         ACL.impersonate(user3.impersonate(), new Runnable() {",
          "166:             @Override",
          "167:             public void run() {",
          "168:                 Fingerprint.BuildPtr original = fp.getOriginal();",
          "169:                 assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "170:                 assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());",
          "171:             }",
          "172:         });",
          "",
          "[Added Lines]",
          "145:         try (ACLContext _ = ACL.as(user1)) {",
          "146:             Fingerprint.BuildPtr original = fp.getOriginal();",
          "147:             assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());",
          "148:             assertEquals(\"user1 should be able to see the origin's project name\", project1.getName(), original.getName());",
          "149:             assertEquals(\"user1 should be able to see the origin's build number\", build.getNumber(), original.getNumber());",
          "150:             assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());",
          "151:             assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);",
          "152:         }",
          "154:         try (ACLContext _ = ACL.as(user2)) {",
          "155:             assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "156:             assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());",
          "157:             assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);",
          "158:         }",
          "160:         try (ACLContext _ = ACL.as(user3)) {",
          "161:             Fingerprint.BuildPtr original = fp.getOriginal();",
          "162:             assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "163:             assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());",
          "164:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:         User user1 = User.get(\"user1\");",
          "184:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);",
          "196:     }",
          "198:     @Test",
          "",
          "[Removed Lines]",
          "186:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "187:             @Override",
          "188:             public void run() {",
          "189:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "190:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "191:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "192:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "193:                 assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());",
          "194:             }",
          "195:         });",
          "",
          "[Added Lines]",
          "178:         try (ACLContext _ = ACL.as(user1)) {",
          "179:             Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "180:             assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "181:             assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "182:             assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "183:             assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());",
          "184:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:         folder.setPermissions(\"user1\", Item.READ);",
          "226:     }",
          "228:     @Test",
          "",
          "[Removed Lines]",
          "212:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "213:             @Override",
          "214:             public void run() {",
          "215:                 assertTrue(\"Test framework issue: User1 should be able to read the folder\", folder.hasPermission(Item.READ));",
          "217:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "218:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "219:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "220:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "221:                 assertEquals(\"user1 should be able to see the job\", 1, fingerprint._getUsages().size());",
          "223:                 assertThat(\"User should be unable do retrieve the job due to the missing read\", original.getJob(), nullValue());",
          "224:             }",
          "225:         });",
          "",
          "[Added Lines]",
          "201:         try (ACLContext _ = ACL.as(user1)) {",
          "202:             assertTrue(\"Test framework issue: User1 should be able to read the folder\", folder.hasPermission(Item.READ));",
          "204:             Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "205:             assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "206:             assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "207:             assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "208:             assertEquals(\"user1 should be able to see the job\", 1, fingerprint._getUsages().size());",
          "210:             assertThat(\"User should be unable do retrieve the job due to the missing read\", original.getJob(), nullValue());",
          "211:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);",
          "248:     }",
          "",
          "[Removed Lines]",
          "240:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "241:             @Override",
          "242:             public void run() {",
          "243:                 assertFalse(\"Test framework issue: User1 should be unable to read the folder\", folder.hasPermission(Item.READ));",
          "244:                 assertThat(\"user1 should be unable to see the origin\", fingerprint.getOriginal(), nullValue());",
          "245:                 assertEquals(\"No jobs should be visible to user1\", 0, fingerprint._getUsages().size());",
          "246:             }",
          "247:         });",
          "",
          "[Added Lines]",
          "226:         try (ACLContext _ = ACL.as(user1)) {",
          "227:             assertFalse(\"Test framework issue: User1 should be unable to read the folder\", folder.hasPermission(Item.READ));",
          "228:             assertThat(\"user1 should be unable to see the origin\", fingerprint.getOriginal(), nullValue());",
          "229:             assertEquals(\"No jobs should be visible to user1\", 0, fingerprint._getUsages().size());",
          "230:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:         User user1 = User.get(\"user1\");",
          "265:         setupProjectMatrixAuthStrategy(Jenkins.READ, Item.READ, Item.DISCOVER);",
          "266:         project.delete();",
          "275:     }",
          "277:     @Test",
          "",
          "[Removed Lines]",
          "268:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "269:             @Override",
          "270:             public void run() {",
          "271:                 assertThat(\"user1 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "272:                 assertEquals(\"No jobs should be visible to user1\", 0, fp._getUsages().size());",
          "273:             }",
          "274:         });",
          "",
          "[Added Lines]",
          "251:         try (ACLContext _ = ACL.as(user1)) {",
          "252:             assertThat(\"user1 should be unable to see the origin\", fp.getOriginal(), nullValue());",
          "253:             assertEquals(\"No jobs should be visible to user1\", 0, fp._getUsages().size());",
          "254:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:         User user1 = User.get(\"user1\");",
          "286:         setupProjectMatrixAuthStrategy(Jenkins.ADMINISTER);",
          "287:         project.delete();",
          "300:     }",
          "302:     @Nonnull",
          "",
          "[Removed Lines]",
          "289:         ACL.impersonate(user1.impersonate(), new Runnable() {",
          "290:             @Override",
          "291:             public void run() {",
          "292:                 Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "293:                 assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "294:                 assertThat(\"Job has been deleted, so Job reference shoud return null\", fingerprint.getOriginal().getJob(), nullValue());",
          "295:                 assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "296:                 assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "297:                 assertEquals(\"user1 should be able to see the job in usages\", 1, fingerprint._getUsages().size());",
          "298:             }",
          "299:         });",
          "",
          "[Added Lines]",
          "269:         try (ACLContext _ = ACL.as(user1)) {",
          "270:             Fingerprint.BuildPtr original = fingerprint.getOriginal();",
          "271:             assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());",
          "272:             assertThat(\"Job has been deleted, so Job reference shoud return null\", fingerprint.getOriginal().getJob(), nullValue());",
          "273:             assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());",
          "274:             assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());",
          "275:             assertEquals(\"user1 should be able to see the job in usages\", 1, fingerprint._getUsages().size());",
          "276:         }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ListViewTest.java||test/src/test/java/hudson/model/ListViewTest.java": [
          "File: test/src/test/java/hudson/model/ListViewTest.java -> test/src/test/java/hudson/model/ListViewTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import hudson.matrix.MatrixProject;",
          "33: import hudson.matrix.TextAxis;",
          "34: import hudson.security.ACL;",
          "35: import hudson.security.AuthorizationStrategy;",
          "36: import hudson.security.Permission;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:         ListView v = new ListView(\"v\", j.jenkins);",
          "220:         v.add(p);",
          "221:         j.jenkins.addView(v);",
          "231:         assertEquals(Collections.singletonList(p), v.getItems());",
          "232:     }",
          "233:     private static class AllButViewsAuthorizationStrategy extends AuthorizationStrategy {",
          "",
          "[Removed Lines]",
          "222:         ACL.impersonate(User.get(\"alice\").impersonate(), new Runnable() {",
          "223:             @Override public void run() {",
          "224:                 try {",
          "225:                     p.renameTo(\"p2\");",
          "226:                 } catch (IOException x) {",
          "227:                     throw new RuntimeException(x);",
          "228:                 }",
          "229:             }",
          "230:         });",
          "",
          "[Added Lines]",
          "223:         try (ACLContext _ = ACL.as(User.get(\"alice\"))) {",
          "224:             p.renameTo(\"p2\");",
          "225:         }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import hudson.Util;",
          "19: import hudson.model.User;",
          "20: import hudson.security.ACL;",
          "21: import jenkins.model.Jenkins;",
          "22: import org.apache.http.Header;",
          "23: import org.apache.http.HttpEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         final String token = t.getApiToken();",
          "79:         WebClient wc = createClientForUser(\"foo\");",
          "",
          "[Removed Lines]",
          "71:         ACL.impersonate(u.impersonate(), new Runnable() {",
          "72:             @Override",
          "73:             public void run() {",
          "74:                 assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
          "75:             }",
          "76:         });",
          "",
          "[Added Lines]",
          "72:         try (ACLContext _ = ACL.as(u)) {",
          "73:             assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
          "74:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:             }",
          "248:         });",
          "249:     }",
          "",
          "[Removed Lines]",
          "250: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}