{
  "cve_id": "CVE-2014-4020",
  "cve_desc": "The dissect_frame function in epan/dissectors/packet-frame.c in the frame metadissector in Wireshark 1.10.x before 1.10.8 interprets a negative integer as a length value even though it was intended to represent an error condition, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "beb119f911a698d44f4baa06d888bb1e775983bc",
  "patch_info": {
    "commit_hash": "beb119f911a698d44f4baa06d888bb1e775983bc",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/beb119f911a698d44f4baa06d888bb1e775983bc",
    "files": [
      "epan/dissectors/packet-frame.c"
    ],
    "message": "Don't use -1 as length in frame dissector.\n\nAdditional belated followup to gfe195c0c9 per conversation on -dev about the use\nof -1 and when we should throw exceptions. See also g867a1827e7.\n\nShould (in theory) permit reverting gfe195c0c9.\n\nBug:9999\nBug:10030\nChange-Id: I56e5f4e5dc12fe82268243d0b113cfc9ff5fdd17\nReviewed-on: https://code.wireshark.org/review/1603\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-frame.c||epan/dissectors/packet-frame.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-frame.c||epan/dissectors/packet-frame.c": [
      "File: epan/dissectors/packet-frame.c -> epan/dissectors/packet-frame.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "237:  }",
      "239:  if(pinfo->pkt_comment){",
      "241:   comments_tree = proto_item_add_subtree(item, ett_comments);",
      "243:                           pinfo->pkt_comment, \"%s\",",
      "244:                           pinfo->pkt_comment);",
      "245:   expert_add_info_format(pinfo, comment_item, &ei_comments_text,",
      "",
      "[Removed Lines]",
      "240:   item = proto_tree_add_item(tree, proto_pkt_comment, tvb, 0, -1, ENC_NA);",
      "242:   comment_item = proto_tree_add_string_format(comments_tree, hf_comments_text, tvb, 0, -1,",
      "",
      "[Added Lines]",
      "240:   item = proto_tree_add_item(tree, proto_pkt_comment, tvb, 0, 0, ENC_NA);",
      "242:   comment_item = proto_tree_add_string_format(comments_tree, hf_comments_text, tvb, 0, 0,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "267:   cap_plurality = plurality(cap_len, \"\", \"s\");",
      "268:   frame_plurality = plurality(frame_len, \"\", \"s\");",
      "271:       \"Frame %u: %u byte%s on wire\",",
      "272:       pinfo->fd->num, frame_len, frame_plurality);",
      "273:   if (generate_bits_field)",
      "",
      "[Removed Lines]",
      "270:   ti = proto_tree_add_protocol_format(tree, proto_frame, tvb, 0, -1,",
      "",
      "[Added Lines]",
      "270:   ti = proto_tree_add_protocol_format(tree, proto_frame, tvb, 0, tvb_captured_length(tvb),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "465:  if (pinfo->fd->flags.ignored) {",
      "467:   col_set_str(pinfo->cinfo, COL_INFO, \"<Ignored>\");",
      "469:   return;",
      "470:  }",
      "",
      "[Removed Lines]",
      "468:   proto_tree_add_text (tree, tvb, 0, -1, \"This frame is marked as ignored\");",
      "",
      "[Added Lines]",
      "468:   proto_tree_add_text (tree, tvb, 0, 0, \"This frame is marked as ignored\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5cdb0c35aa3ca7ec5a3af9c166c42c9a01f9eefc",
      "candidate_info": {
        "commit_hash": "5cdb0c35aa3ca7ec5a3af9c166c42c9a01f9eefc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5cdb0c35aa3ca7ec5a3af9c166c42c9a01f9eefc",
        "files": [
          "epan/dissectors/packet-frame.c"
        ],
        "message": "Don't use -1 as length in frame dissector.\n\nAdditional belated followup to gfe195c0c9 per conversation on -dev about the use\nof -1 and when we should throw exceptions. See also g867a1827e7.\n\nShould (in theory) permit reverting gfe195c0c9 (which was not in 1.10)\n\nBug:9999\nBug:10030\nChange-Id: I56e5f4e5dc12fe82268243d0b113cfc9ff5fdd17\nReviewed-on: https://code.wireshark.org/review/1603\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n\nConflicts:\n\tepan/dissectors/packet-frame.c\n\nChange-Id: Ibeb119f911a698d44f4baa06d888bb1e775983bc\nReviewed-on: https://code.wireshark.org/review/1640\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-frame.c||epan/dissectors/packet-frame.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-frame.c||epan/dissectors/packet-frame.c"
          ],
          "candidate": [
            "epan/dissectors/packet-frame.c||epan/dissectors/packet-frame.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-frame.c||epan/dissectors/packet-frame.c": [
          "File: epan/dissectors/packet-frame.c -> epan/dissectors/packet-frame.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:  }",
          "230:  if(pinfo->fd->opt_comment){",
          "232:   comments_tree = proto_item_add_subtree(item, ett_comments);",
          "234:                           pinfo->fd->opt_comment, \"%s\",",
          "235:                           pinfo->fd->opt_comment);",
          "236:   expert_add_info_format(pinfo, comment_item, PI_COMMENTS_GROUP, PI_COMMENT,",
          "",
          "[Removed Lines]",
          "231:   item = proto_tree_add_item(tree, proto_pkt_comment, tvb, 0, -1, ENC_NA);",
          "233:   comment_item = proto_tree_add_string_format(comments_tree, hf_comments_text, tvb, 0, -1,",
          "",
          "[Added Lines]",
          "231:   item = proto_tree_add_item(tree, proto_pkt_comment, tvb, 0, 0, ENC_NA);",
          "233:   comment_item = proto_tree_add_string_format(comments_tree, hf_comments_text, tvb, 0, 0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:   cap_plurality = plurality(cap_len, \"\", \"s\");",
          "260:   frame_plurality = plurality(frame_len, \"\", \"s\");",
          "263:       \"Frame %u: %u byte%s on wire\",",
          "264:       pinfo->fd->num, frame_len, frame_plurality);",
          "265:   if (generate_bits_field)",
          "",
          "[Removed Lines]",
          "262:   ti = proto_tree_add_protocol_format(tree, proto_frame, tvb, 0, -1,",
          "",
          "[Added Lines]",
          "262:   ti = proto_tree_add_protocol_format(tree, proto_frame, tvb, 0, tvb_length(tvb),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:  if (pinfo->fd->flags.ignored) {",
          "460:   col_set_str(pinfo->cinfo, COL_INFO, \"<Ignored>\");",
          "462:   return;",
          "463:  }",
          "",
          "[Removed Lines]",
          "461:   proto_tree_add_text (tree, tvb, 0, -1, \"This frame is marked as ignored\");",
          "",
          "[Added Lines]",
          "461:   proto_tree_add_text (tree, tvb, 0, 0, \"This frame is marked as ignored\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}