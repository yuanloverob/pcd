{
  "cve_id": "CVE-2018-20748",
  "cve_desc": "LibVNC before 0.9.12 contains multiple heap out-of-bounds write vulnerabilities in libvncclient/rfbproto.c. The fix for CVE-2018-20019 was incomplete.",
  "repo": "LibVNC/libvncserver",
  "patch_hash": "e34bcbb759ca5bef85809967a268fdf214c1ad2c",
  "patch_info": {
    "commit_hash": "e34bcbb759ca5bef85809967a268fdf214c1ad2c",
    "repo": "LibVNC/libvncserver",
    "commit_url": "https://github.com/LibVNC/libvncserver/commit/e34bcbb759ca5bef85809967a268fdf214c1ad2c",
    "files": [
      "libvncclient/rfbproto.c"
    ],
    "message": "LibVNCClient: ignore server-sent reason strings longer than 1MB\n\nFixes #273",
    "before_after_code_files": [
      "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
    ]
  },
  "patch_diff": {
    "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
      "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "412: extern void rfbClientEncryptBytes(unsigned char* bytes, char* passwd);",
      "413: extern void rfbClientEncryptBytes2(unsigned char *where, const int length, unsigned char *key);",
      "415: rfbBool",
      "416: rfbHandleAuthResult(rfbClient* client)",
      "417: {",
      "421:     if (!ReadFromRFBServer(client, (char *)&authResult, 4)) return FALSE;",
      "",
      "[Removed Lines]",
      "418:     uint32_t authResult=0, reasonLen=0;",
      "419:     char *reason=NULL;",
      "",
      "[Added Lines]",
      "415: static void",
      "416: ReadReason(rfbClient* client)",
      "417: {",
      "418:     uint32_t reasonLen;",
      "419:     char *reason;",
      "421:     if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return;",
      "422:     reasonLen = rfbClientSwap32IfLE(reasonLen);",
      "423:     if(reasonLen > 1<<20) {",
      "424:       rfbClientLog(\"VNC connection failed, but sent reason length of %u exceeds limit of 1MB\",(unsigned int)reasonLen);",
      "425:       return;",
      "426:     }",
      "427:     reason = malloc(reasonLen+1);",
      "428:     if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
      "429:     reason[reasonLen]=0;",
      "430:     rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
      "431:     free(reason);",
      "432: }",
      "437:     uint32_t authResult=0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "431:       if (client->major==3 && client->minor>7)",
      "432:       {",
      "441:         return FALSE;",
      "442:       }",
      "443:       rfbClientLog(\"VNC authentication failed\\n\");",
      "",
      "[Removed Lines]",
      "434:         if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return FALSE;",
      "435:         reasonLen = rfbClientSwap32IfLE(reasonLen);",
      "436:         reason = malloc((uint64_t)reasonLen+1);",
      "437:         if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return FALSE; }",
      "438:         reason[reasonLen]=0;",
      "439:         rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
      "440:         free(reason);",
      "",
      "[Added Lines]",
      "452:         ReadReason(client);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "452:     return FALSE;",
      "453: }",
      "471: static rfbBool",
      "472: ReadSupportedSecurityType(rfbClient* client, uint32_t *result, rfbBool subAuth)",
      "",
      "[Removed Lines]",
      "455: static void",
      "456: ReadReason(rfbClient* client)",
      "457: {",
      "458:     uint32_t reasonLen;",
      "459:     char *reason;",
      "462:     if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return;",
      "463:     reasonLen = rfbClientSwap32IfLE(reasonLen);",
      "464:     reason = malloc((uint64_t)reasonLen+1);",
      "465:     if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
      "466:     reason[reasonLen]=0;",
      "467:     rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
      "468:     free(reason);",
      "469: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a83439b9fbe0f03c48eb94ed05729cb016f8b72f",
      "candidate_info": {
        "commit_hash": "a83439b9fbe0f03c48eb94ed05729cb016f8b72f",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/a83439b9fbe0f03c48eb94ed05729cb016f8b72f",
        "files": [
          "libvncclient/rfbproto.c"
        ],
        "message": "LibVNCClient: fix three possible heap buffer overflows\n\nAn attacker could feed `0xffffffff`, causing a `malloc(0)` for the\nbuffers which are subsequently written to.\n\nCloses #247",
        "before_after_code_files": [
          "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ],
          "candidate": [
            "libvncclient/rfbproto.c||libvncclient/rfbproto.c"
          ]
        }
      },
      "candidate_diff": {
        "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
          "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:         if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return FALSE;",
          "435:         reasonLen = rfbClientSwap32IfLE(reasonLen);",
          "437:         if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return FALSE; }",
          "438:         reason[reasonLen]=0;",
          "439:         rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
          "",
          "[Removed Lines]",
          "436:         reason = malloc(reasonLen+1);",
          "",
          "[Added Lines]",
          "436:         reason = malloc((uint64_t)reasonLen+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:     if (!ReadFromRFBServer(client, (char *)&reasonLen, 4)) return;",
          "463:     reasonLen = rfbClientSwap32IfLE(reasonLen);",
          "465:     if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
          "466:     reason[reasonLen]=0;",
          "467:     rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
          "",
          "[Removed Lines]",
          "464:     reason = malloc(reasonLen+1);",
          "",
          "[Added Lines]",
          "464:     reason = malloc((uint64_t)reasonLen+1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2188:     msg.sct.length = rfbClientSwap32IfLE(msg.sct.length);",
          "2193:       return FALSE;",
          "2195:     buffer[msg.sct.length] = 0;",
          "",
          "[Removed Lines]",
          "2190:     buffer = malloc(msg.sct.length+1);",
          "2192:     if (!ReadFromRFBServer(client, buffer, msg.sct.length))",
          "",
          "[Added Lines]",
          "2190:     buffer = malloc((uint64_t)msg.sct.length+1);",
          "2192:     if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {",
          "2193:       free(buffer);",
          "2195:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}