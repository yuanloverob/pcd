{
  "cve_id": "CVE-2017-9434",
  "cve_desc": "Crypto++ (aka cryptopp) through 5.6.5 contains an out-of-bounds read vulnerability in zinflate.cpp in the Inflator filter.",
  "repo": "weidai11/cryptopp",
  "patch_hash": "07dbcc3d9644b18e05c1776db2a57fe04d780965",
  "patch_info": {
    "commit_hash": "07dbcc3d9644b18e05c1776db2a57fe04d780965",
    "repo": "weidai11/cryptopp",
    "commit_url": "https://github.com/weidai11/cryptopp/commit/07dbcc3d9644b18e05c1776db2a57fe04d780965",
    "files": [
      "validat1.cpp",
      "zinflate.cpp",
      "zinflate.h"
    ],
    "message": "Add Inflator::BadDistanceErr exception (Issue 414) The improved validation and excpetion clears the Address Sanitizer and Undefined Behavior Sanitizer findings",
    "before_after_code_files": [
      "validat1.cpp||validat1.cpp",
      "zinflate.cpp||zinflate.cpp",
      "zinflate.h||zinflate.h"
    ]
  },
  "patch_diff": {
    "validat1.cpp||validat1.cpp": [
      "File: validat1.cpp -> validat1.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:    std::cout << \"FAILED:\";",
      "624:   else",
      "625:    std::cout << \"passed:\";",
      "627:  }",
      "629: #if !defined(NO_OS_DEPENDENCE)",
      "",
      "[Removed Lines]",
      "626:   std::cout << \"  GenerateWord32 and Crop\\n\";",
      "",
      "[Added Lines]",
      "626:   std::cout << \"  GenerateWord32 and Crop\\n\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "711:    std::cout << \"FAILED:\";",
      "712:   else",
      "713:    std::cout << \"passed:\";",
      "715:  }",
      "716: #endif",
      "",
      "[Removed Lines]",
      "714:   std::cout << \"  GenerateWord32 and Crop\\n\";",
      "",
      "[Added Lines]",
      "714:   std::cout << \"  GenerateWord32 and Crop\\n\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "808:   std::cout << \"FAILED:\";",
      "809:  else",
      "810:   std::cout << \"passed:\";",
      "813:  std::cout.flush();",
      "814:  return pass;",
      "",
      "[Removed Lines]",
      "811:  std::cout << \"  GenerateWord32 and Crop\\n\";",
      "",
      "[Added Lines]",
      "811:  std::cout << \"  GenerateWord32 and Crop\\n\";",
      "",
      "---------------"
    ],
    "zinflate.cpp||zinflate.cpp": [
      "File: zinflate.cpp -> zinflate.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "552:   case DISTANCE_BITS:",
      "554:      CRYPTOPP_ASSERT(m_distance < COUNTOF(distanceExtraBits));",
      "556:      if (!m_reader.FillBuffer(bits))",
      "557:      {",
      "558:       m_nextDecode = DISTANCE_BITS;",
      "559:       break;",
      "560:      }",
      "561:      m_distance = m_reader.GetBits(bits) + distanceStarts[m_distance];",
      "562:      OutputPast(m_literal, m_distance);",
      "563:     }",
      "",
      "[Removed Lines]",
      "555:      bits = (m_distance >= COUNTOF(distanceExtraBits)) ? distanceExtraBits[29] : distanceExtraBits[m_distance];",
      "",
      "[Added Lines]",
      "555:      if (m_distance >= COUNTOF(distanceExtraBits))",
      "556:       throw BadDistanceErr();",
      "557:      bits = distanceExtraBits[m_distance];",
      "564:      CRYPTOPP_ASSERT(m_distance < COUNTOF(distanceStarts));",
      "565:      if (m_distance >= COUNTOF(distanceStarts))",
      "566:       throw BadDistanceErr();",
      "",
      "---------------"
    ],
    "zinflate.h||zinflate.h": [
      "File: zinflate.h -> zinflate.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "98:   Err(ErrorType e, const std::string &s)",
      "99:    : Exception(e, s) {}",
      "100:  };",
      "101:  class UnexpectedEndErr : public Err {public: UnexpectedEndErr() : Err(INVALID_DATA_FORMAT, \"Inflator: unexpected end of compressed block\") {}};",
      "102:  class BadBlockErr : public Err {public: BadBlockErr() : Err(INVALID_DATA_FORMAT, \"Inflator: error in compressed block\") {}};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:  class BadDistanceErr : public Err {public: BadDistanceErr() : Err(INVALID_DATA_FORMAT, \"Inflator: error in bit distance\") {}};",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b383e8a07ca323d95f1bd378698d1f2e2c37db9",
      "candidate_info": {
        "commit_hash": "9b383e8a07ca323d95f1bd378698d1f2e2c37db9",
        "repo": "weidai11/cryptopp",
        "commit_url": "https://github.com/weidai11/cryptopp/commit/9b383e8a07ca323d95f1bd378698d1f2e2c37db9",
        "files": [
          "zinflate.cpp"
        ],
        "message": "Clear out-of-bounds read when fuzzing zinflate.cpp:553:41: runtime error: index 30 out of bounds for type 'unsigned int [30]' zinflate.cpp:553:11: runtime error: load of address 0x0000011806b8 with insufficient space for an object of type 'const unsigned int' zinflate.cpp:32:32: runtime error: shift exponent 64 is too large for 64-bit type 'long unsigned int'",
        "before_after_code_files": [
          "zinflate.cpp||zinflate.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "zinflate.cpp||zinflate.cpp"
          ],
          "candidate": [
            "zinflate.cpp||zinflate.cpp"
          ]
        }
      },
      "candidate_diff": {
        "zinflate.cpp||zinflate.cpp": [
          "File: zinflate.cpp -> zinflate.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:       break;",
          "551:      }",
          "552:   case DISTANCE_BITS:",
          "554:      if (!m_reader.FillBuffer(bits))",
          "555:      {",
          "556:       m_nextDecode = DISTANCE_BITS;",
          "",
          "[Removed Lines]",
          "553:      bits = distanceExtraBits[m_distance];",
          "",
          "[Added Lines]",
          "554:      CRYPTOPP_ASSERT(m_distance < COUNTOF(distanceExtraBits));",
          "555:      bits = (m_distance >= COUNTOF(distanceExtraBits)) ? distanceExtraBits[29] : distanceExtraBits[m_distance];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36aeb1617161f47c2c5b3cee98a5b5e20b1a1ffe",
      "candidate_info": {
        "commit_hash": "36aeb1617161f47c2c5b3cee98a5b5e20b1a1ffe",
        "repo": "weidai11/cryptopp",
        "commit_url": "https://github.com/weidai11/cryptopp/commit/36aeb1617161f47c2c5b3cee98a5b5e20b1a1ffe",
        "files": [
          "validat1.cpp",
          "validat2.cpp",
          "validat3.cpp"
        ],
        "message": "Cleared \"warning: unused variable \u2018hasPadlockRNG\u2019\". Whitespace cleanup",
        "before_after_code_files": [
          "validat1.cpp||validat1.cpp",
          "validat2.cpp||validat2.cpp",
          "validat3.cpp||validat3.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "validat1.cpp||validat1.cpp"
          ],
          "candidate": [
            "validat1.cpp||validat1.cpp"
          ]
        }
      },
      "candidate_diff": {
        "validat1.cpp||validat1.cpp": [
          "File: validat1.cpp -> validat1.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:  bool hasSSSE3 = HasSSSE3();",
          "300:  bool hasSSE4 = HasSSE4();",
          "301:  bool isP4 = IsP4();",
          "303:  int cacheLineSize = GetCacheLineSize();",
          "305:  if ((isP4 && (!hasMMX || !hasSSE2)) || (hasSSE2 && !hasMMX) || (cacheLineSize < 16 || cacheLineSize > 256 || !IsPowerOf2(cacheLineSize)))",
          "",
          "[Removed Lines]",
          "302:  bool hasPadlockRNG = HasPadlockRNG();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "929: }",
          "930: #else",
          "931: bool TestAutoSeeded()",
          "934:  cout << \"\\nTesting AutoSeeded generator...\\n\\n\";",
          "",
          "[Removed Lines]",
          "932: {",
          "",
          "[Added Lines]",
          "931: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "989:   cout << \"passed:\";",
          "990:  cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\" << endl;",
          "993: }",
          "995: bool TestAutoSeededX917()",
          "",
          "[Removed Lines]",
          "992:  return generate && discard && incorporate;",
          "",
          "[Added Lines]",
          "991:  return generate && discard && incorporate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1053:   cout << \"passed:\";",
          "1054:  cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\" << endl;",
          "1057: }",
          "1058: #endif // NO_OS_DEPENDENCE",
          "",
          "[Removed Lines]",
          "1056:  return generate && discard && incorporate;",
          "",
          "[Added Lines]",
          "1055:  return generate && discard && incorporate;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1430:  {",
          "1432:   const byte encrypted[] = {",
          "1435:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6};",
          "1437:   CBC_Mode_ExternalCipher::Encryption modeE(desE, iv);",
          "",
          "[Removed Lines]",
          "1433:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1434:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F,",
          "",
          "[Added Lines]",
          "1432:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1433:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1456:   const byte encrypted[] = {",
          "1460:    0x62, 0xC1, 0x6A, 0x27, 0xE4, 0xFC, 0xF2, 0x77};",
          "1462:   CBC_Mode_ExternalCipher::Encryption modeE(desE, iv);",
          "",
          "[Removed Lines]",
          "1457:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1458:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F,",
          "1459:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6,",
          "",
          "[Added Lines]",
          "1456:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1457:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F,",
          "1458:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1477:   const byte encrypted[] = {",
          "1481:    0xcf, 0xb7, 0xc7, 0x64, 0x0e, 0x7c, 0xd9, 0xa7};",
          "1483:   CBC_Mode_ExternalCipher::Encryption modeE(desE, iv);",
          "",
          "[Removed Lines]",
          "1478:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1479:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F,",
          "1480:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6,",
          "",
          "[Added Lines]",
          "1477:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1478:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F,",
          "1479:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1516:   const byte encrypted[] = {",
          "1519:    0x43, 0xE9, 0x34, 0x00, 0x8C, 0x38, 0x9C, 0x0F};",
          "1521:   CBC_CTS_Mode_ExternalCipher::Encryption modeE(desE, iv);",
          "",
          "[Removed Lines]",
          "1517:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1518:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6,",
          "",
          "[Added Lines]",
          "1516:    0xE5, 0xC7, 0xCD, 0xDE, 0x87, 0x2B, 0xF2, 0x7C,",
          "1517:    0x68, 0x37, 0x88, 0x49, 0x9A, 0x7C, 0x05, 0xF6,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1623:  }",
          "1624:  {",
          "1625:   const byte encrypted[] = { // generated with Crypto++",
          "1628:    0xFA, 0x2F, 0x80, 0xF4, 0x80, 0xB8, 0x6F, 0x75};",
          "1630:   CTR_Mode_ExternalCipher::Encryption modeE(desE, iv);",
          "",
          "[Removed Lines]",
          "1626:    0xF3, 0x09, 0x62, 0x49, 0xC7, 0xF4, 0x6E, 0x51,",
          "1627:    0x16, 0x3A, 0x8C, 0xA0, 0xFF, 0xC9, 0x4C, 0x27,",
          "",
          "[Added Lines]",
          "1625:    0xF3, 0x09, 0x62, 0x49, 0xC7, 0xF4, 0x6E, 0x51,",
          "1626:    0x16, 0x3A, 0x8C, 0xA0, 0xFF, 0xC9, 0x4C, 0x27,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1645:  }",
          "1646:  {",
          "1647:   const byte plain_3[] = { // \"7654321 Now is the time for \"",
          "1651:    0x66, 0x6f, 0x72, 0x20};",
          "1652:   const byte mac1[] = { // from FIPS 113",
          "1653:    0xf1, 0xd3, 0x0f, 0x68, 0x49, 0x31, 0x2c, 0xa4};",
          "",
          "[Removed Lines]",
          "1648:    0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x20,",
          "1649:    0x4e, 0x6f, 0x77, 0x20, 0x69, 0x73, 0x20, 0x74,",
          "1650:    0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,",
          "",
          "[Added Lines]",
          "1647:    0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x20,",
          "1648:    0x4e, 0x6f, 0x77, 0x20, 0x69, 0x73, 0x20, 0x74,",
          "1649:    0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2127:  byte data[255];",
          "2128:  for (unsigned int i=0; i<255; i++)",
          "2129:   data[i] = byte(i);",
          "2131: \"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627\"",
          "2132: \"28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F\"",
          "2133: \"505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677\"",
          "",
          "[Removed Lines]",
          "2130:  static const char hexEncoded[] =",
          "",
          "[Added Lines]",
          "2129:  static const char hexEncoded[] =",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2135: \"A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7\"",
          "2136: \"C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF\"",
          "2137: \"F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE\";",
          "2139: \"AAASEA2EAWDAQCAJBIFS2DIQB6IBCESVCSKTNF22DEPBYHA7D2RUAIJCENUCKJTHFAWUWK3NFWZC8NBT\"",
          "2140: \"GI3VIPJYG66DUQT5HS8V6R4AIFBEGTCFI3DWSUKKJPGE4VURKBIXEW4WKXMFQYC3MJPX2ZK8M7SGC2VD\"",
          "2141: \"NTUYN35IPFXGY5DPP3ZZA6MUQP4HK7VZRB6ZW856RX9H9AEBSKB2JBNGS8EIVCWMTUG27D6SUGJJHFEX\"",
          "2142: \"U4M3TGN4VQQJ5HW9WCS4FI7EWYVKRKFJXKX43MPQX82MDNXVYU45PP72ZG7MZRF7Z496BSQC2RCNMTYH\"",
          "2143: \"3DE6XU8N3ZHN9WGT4MJ7JXQY49NPVYY55VQ77Z9A6HTQH3HF65V8T4RK7RYQ55ZR8D29F69W8Z5RR8H3\"",
          "2144: \"9M7939R8\";",
          "2146: \"41414543417751464267634943516F4C4441304F4478415245684D554652595847426B6147787764\"",
          "2147: \"486838674953496A4A43556D4A7967704B6973734C5334764D4445794D7A51310A4E6A63344F546F\"",
          "2148: \"375044302B50304242516B4E4552555A4853456C4B5330784E546B395155564A5456465657563168\"",
          "",
          "[Removed Lines]",
          "2138:  static const char base32Encoded[] =",
          "2145:  const char *base64AndHexEncoded =",
          "",
          "[Added Lines]",
          "2137:  static const char base32Encoded[] =",
          "2144:  const char *base64AndHexEncoded =",
          "",
          "---------------"
        ],
        "validat2.cpp||validat2.cpp": [
          "File: validat2.cpp -> validat2.cpp"
        ],
        "validat3.cpp||validat3.cpp": [
          "File: validat3.cpp -> validat3.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: bool ValidateCRC32()",
          "99: {",
          "101:  {",
          "102:   HashTestTuple(\"\", \"\\x00\\x00\\x00\\x00\"),",
          "103:   HashTestTuple(\"a\", \"\\x43\\xbe\\xb7\\xe8\"),",
          "",
          "[Removed Lines]",
          "100:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "100:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: bool ValidateCRC32C()",
          "119: {",
          "121:  {",
          "122:   HashTestTuple(\"\", \"\\x00\\x00\\x00\\x00\"),",
          "123:   HashTestTuple(\"a\", \"\\x30\\x43\\xd0\\xc1\"),",
          "",
          "[Removed Lines]",
          "120:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "120:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138: bool ValidateAdler32()",
          "139: {",
          "141:  {",
          "142:   HashTestTuple(\"\", \"\\x00\\x00\\x00\\x01\"),",
          "143:   HashTestTuple(\"a\", \"\\x00\\x62\\x00\\x62\"),",
          "",
          "[Removed Lines]",
          "140:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "140:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157: bool ValidateMD2()",
          "158: {",
          "160:  {",
          "161:   HashTestTuple(\"\", \"\\x83\\x50\\xe5\\xa3\\xe2\\x4c\\x15\\x3d\\xf2\\x27\\x5c\\x9f\\x80\\x69\\x27\\x73\"),",
          "162:   HashTestTuple(\"a\", \"\\x32\\xec\\x01\\xec\\x4a\\x6d\\xac\\x72\\xc0\\xab\\x96\\xfb\\x34\\xc0\\xb5\\xd1\"),",
          "",
          "[Removed Lines]",
          "159:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "159:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176: bool ValidateMD4()",
          "177: {",
          "179:  {",
          "180:   HashTestTuple(\"\", \"\\x31\\xd6\\xcf\\xe0\\xd1\\x6a\\xe9\\x31\\xb7\\x3c\\x59\\xd7\\xe0\\xc0\\x89\\xc0\"),",
          "181:   HashTestTuple(\"a\", \"\\xbd\\xe5\\x2c\\xb3\\x1d\\xe3\\x3e\\x46\\x24\\x5e\\x05\\xfb\\xdb\\xd6\\xfb\\x24\"),",
          "",
          "[Removed Lines]",
          "178:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "178:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195: bool ValidateMD5()",
          "196: {",
          "198:  {",
          "199:   HashTestTuple(\"\", \"\\xd4\\x1d\\x8c\\xd9\\x8f\\x00\\xb2\\x04\\xe9\\x80\\x09\\x98\\xec\\xf8\\x42\\x7e\"),",
          "200:   HashTestTuple(\"a\", \"\\x0c\\xc1\\x75\\xb9\\xc0\\xf1\\xb6\\xa8\\x31\\xc3\\x99\\xe2\\x69\\x77\\x26\\x61\"),",
          "",
          "[Removed Lines]",
          "197:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "197:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "248: bool ValidateRIPEMD()",
          "249: {",
          "251:  {",
          "252:   HashTestTuple(\"\", \"\\xcd\\xf2\\x62\\x13\\xa1\\x50\\xdc\\x3e\\xcb\\x61\\x0f\\x18\\xf6\\xb3\\x8b\\x46\"),",
          "253:   HashTestTuple(\"a\", \"\\x86\\xbe\\x7a\\xfa\\x33\\x9d\\x0f\\xc7\\xcf\\xc7\\x85\\xe7\\x2f\\x57\\x8d\\x33\"),",
          "",
          "[Removed Lines]",
          "250:  HashTestTuple testSet128[] =",
          "",
          "[Added Lines]",
          "250:  HashTestTuple testSet128[] =",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:   HashTestTuple(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"\\x4a\\x7f\\x57\\x23\\xf9\\x54\\xeb\\xa1\\x21\\x6c\\x9d\\x8f\\x63\\x20\\x43\\x1f\", 15625)",
          "261:  };",
          "264:  {",
          "265:   HashTestTuple(\"\", \"\\x9c\\x11\\x85\\xa5\\xc5\\xe9\\xfc\\x54\\x61\\x28\\x08\\x97\\x7e\\xe8\\xf5\\x48\\xb2\\x25\\x8d\\x31\"),",
          "266:   HashTestTuple(\"a\", \"\\x0b\\xdc\\x9d\\x2d\\x25\\x6b\\x3e\\xe9\\xda\\xae\\x34\\x7b\\xe6\\xf4\\xdc\\x83\\x5a\\x46\\x7f\\xfe\"),",
          "",
          "[Removed Lines]",
          "263:  HashTestTuple testSet160[] =",
          "",
          "[Added Lines]",
          "263:  HashTestTuple testSet160[] =",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "273:   HashTestTuple(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"\\x52\\x78\\x32\\x43\\xc1\\x69\\x7b\\xdb\\xe1\\x6d\\x37\\xf9\\x7f\\x68\\xf0\\x83\\x25\\xdc\\x15\\x28\", 15625)",
          "274:  };",
          "277:  {",
          "278:   HashTestTuple(\"\", \"\\x02\\xba\\x4c\\x4e\\x5f\\x8e\\xcd\\x18\\x77\\xfc\\x52\\xd6\\x4d\\x30\\xe3\\x7a\\x2d\\x97\\x74\\xfb\\x1e\\x5d\\x02\\x63\\x80\\xae\\x01\\x68\\xe3\\xc5\\x52\\x2d\"),",
          "279:   HashTestTuple(\"a\", \"\\xf9\\x33\\x3e\\x45\\xd8\\x57\\xf5\\xd9\\x0a\\x91\\xba\\xb7\\x0a\\x1e\\xba\\x0c\\xfb\\x1b\\xe4\\xb0\\x78\\x3c\\x9a\\xcf\\xcd\\x88\\x3a\\x91\\x34\\x69\\x29\\x25\"),",
          "",
          "[Removed Lines]",
          "276:  HashTestTuple testSet256[] =",
          "",
          "[Added Lines]",
          "276:  HashTestTuple testSet256[] =",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:   HashTestTuple(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"\\xac\\x95\\x37\\x44\\xe1\\x0e\\x31\\x51\\x4c\\x15\\x0d\\x4d\\x8d\\x7b\\x67\\x73\\x42\\xe3\\x33\\x99\\x78\\x82\\x96\\xe4\\x3a\\xe4\\x85\\x0c\\xe4\\xf9\\x79\\x78\", 15625)",
          "287:  };",
          "290:  {",
          "291:   HashTestTuple(\"\", \"\\x22\\xd6\\x5d\\x56\\x61\\x53\\x6c\\xdc\\x75\\xc1\\xfd\\xf5\\xc6\\xde\\x7b\\x41\\xb9\\xf2\\x73\\x25\\xeb\\xc6\\x1e\\x85\\x57\\x17\\x7d\\x70\\x5a\\x0e\\xc8\\x80\\x15\\x1c\\x3a\\x32\\xa0\\x08\\x99\\xb8\"),",
          "292:   HashTestTuple(\"a\", \"\\xce\\x78\\x85\\x06\\x38\\xf9\\x26\\x58\\xa5\\xa5\\x85\\x09\\x75\\x79\\x92\\x6d\\xda\\x66\\x7a\\x57\\x16\\x56\\x2c\\xfc\\xf6\\xfb\\xe7\\x7f\\x63\\x54\\x2f\\x99\\xb0\\x47\\x05\\xd6\\x97\\x0d\\xff\\x5d\"),",
          "",
          "[Removed Lines]",
          "289:  HashTestTuple testSet320[] =",
          "",
          "[Added Lines]",
          "289:  HashTestTuple testSet320[] =",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "323: #ifdef CRYPTOPP_REMOVED",
          "324: bool ValidateHAVAL()",
          "325: {",
          "327:  {",
          "328:   HashTestTuple(\"\", \"\\xC6\\x8F\\x39\\x91\\x3F\\x90\\x1F\\x3D\\xDF\\x44\\xC7\\x07\\x35\\x7A\\x7D\\x70\"),",
          "329:   HashTestTuple(\"a\", \"\\x4D\\xA0\\x8F\\x51\\x4A\\x72\\x75\\xDB\\xC4\\xCE\\xCE\\x4A\\x34\\x73\\x85\\x98\\x39\\x83\\xA8\\x30\"),",
          "",
          "[Removed Lines]",
          "326:  HashTestTuple testSet[] =",
          "",
          "[Added Lines]",
          "326:  HashTestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "609:  {",
          "612:  {",
          "613:   {1, 1, \"0073006D006500670000\", \"0A58CF64530D823F\", \"8AAAE6297B6CB04642AB5B077851284EB7128F1A2A7FBCA3\"},",
          "614:   {2, 1, \"0073006D006500670000\", \"0A58CF64530D823F\", \"79993DFE048D3B76\"},",
          "",
          "[Removed Lines]",
          "611:  PBKDF_TestTuple testSet[] =",
          "",
          "[Added Lines]",
          "611:  PBKDF_TestTuple testSet[] =",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "631:  {",
          "634:  {",
          "635:   {0, 5, \"70617373776f7264\", \"1234567878563412\", \"D1DAA78615F287E6\"},",
          "636:   {0, 500, \"416C6C206E2D656E746974696573206D75737420636F6D6D756E69636174652077697468206F74686572206E2d656E74697469657320766961206E2D3120656E746974656568656568656573\", \"1234567878563412\",\"6A8970BF68C92CAEA84A8DF28510858607126380CC47AB2D\"}",
          "",
          "[Removed Lines]",
          "633:  PBKDF_TestTuple testSet[] =",
          "",
          "[Added Lines]",
          "633:  PBKDF_TestTuple testSet[] =",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "374b8a419f69291ebc13302aa10bc773194129e4",
      "candidate_info": {
        "commit_hash": "374b8a419f69291ebc13302aa10bc773194129e4",
        "repo": "weidai11/cryptopp",
        "commit_url": "https://github.com/weidai11/cryptopp/commit/374b8a419f69291ebc13302aa10bc773194129e4",
        "files": [
          "validat1.cpp"
        ],
        "message": "Added additional tests",
        "before_after_code_files": [
          "validat1.cpp||validat1.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "validat1.cpp||validat1.cpp"
          ],
          "candidate": [
            "validat1.cpp||validat1.cpp"
          ]
        }
      },
      "candidate_diff": {
        "validat1.cpp||validat1.cpp": [
          "File: validat1.cpp -> validat1.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:   else",
          "454:    std::cout << \"passed:\";",
          "455:   std::cout << \"  \" << total << \" generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "456:  }",
          "457:  else",
          "458:   std::cout << \"\\nNo operating system provided blocking random number generator, skipping test.\" << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:   try",
          "458:   {",
          "460:    RandomNumberGenerator& prng = *rng.get();",
          "461:    (void)prng.AlgorithmName();",
          "462:    word32 result = prng.GenerateWord32();",
          "463:    result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "464:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "465:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "466:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "467:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "468:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "469:    pass = true;",
          "470:   }",
          "471:   catch (const Exception&)",
          "472:   {",
          "473:    pass = false;",
          "474:   }",
          "476:   if (!pass)",
          "477:    std::cout << \"FAILED:\";",
          "478:   else",
          "479:    std::cout << \"passed:\";",
          "480:   std::cout << \"  GenerateWord32 and Crop\\n\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:   else",
          "479:    std::cout << \"passed:\";",
          "480:   std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "481:  }",
          "482:  else",
          "483:   std::cout << \"\\nNo operating system provided nonblocking random number generator, skipping test.\" << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:   try",
          "508:   {",
          "510:    RandomNumberGenerator& prng = *rng.get();",
          "511:    (void)prng.AlgorithmName();",
          "512:    word32 result = prng.GenerateWord32();",
          "513:    result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "514:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "515:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "516:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "517:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "518:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "519:    pass = true;",
          "520:   }",
          "521:   catch (const Exception&)",
          "522:   {",
          "523:    pass = false;",
          "524:   }",
          "526:   if (!pass)",
          "527:    std::cout << \"FAILED:\";",
          "528:   else",
          "529:    std::cout << \"passed:\";",
          "530:   std::cout << \"  GenerateWord32 and Crop\\n\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:  AutoSeededRandomPool prng;",
          "504:  static const unsigned int ENTROPY_SIZE = 32;",
          "507:  MeterFilter meter(new Redirector(TheBitBucket()));",
          "508:  RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "",
          "[Removed Lines]",
          "505:  bool generate = true, discard = true, incorporate = false;",
          "",
          "[Added Lines]",
          "555:  bool generate = true, discard = true, incorporate = false, crop = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "554:   std::cout << \"FAILED:\";",
          "555:  else",
          "556:   std::cout << \"passed:\";",
          "560: }",
          "562: bool TestAutoSeededX917()",
          "",
          "[Removed Lines]",
          "557:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\" << std::endl;",
          "559:  return generate && discard && incorporate;",
          "",
          "[Added Lines]",
          "607:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";",
          "609:  try",
          "610:  {",
          "612:   (void)prng.AlgorithmName();",
          "613:   word32 result = prng.GenerateWord32();",
          "614:   result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "615:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "616:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "617:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "618:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "619:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "620:   crop = true;",
          "621:  }",
          "622:  catch (const Exception&)",
          "623:  {",
          "624:   crop = false;",
          "625:  }",
          "627:  if (!crop)",
          "628:   std::cout << \"FAILED:\";",
          "629:  else",
          "630:   std::cout << \"passed:\";",
          "631:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "633:  return generate && discard && incorporate && crop;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:  AutoSeededX917RNG<AES> prng;",
          "568:  static const unsigned int ENTROPY_SIZE = 32;",
          "571:  MeterFilter meter(new Redirector(TheBitBucket()));",
          "572:  RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "",
          "[Removed Lines]",
          "569:  bool generate = true, discard = true, incorporate = false;",
          "",
          "[Added Lines]",
          "643:  bool generate = true, discard = true, incorporate = false, crop = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:   std::cout << \"FAILED:\";",
          "619:  else",
          "620:   std::cout << \"passed:\";",
          "624: }",
          "625: #endif // NO_OS_DEPENDENCE",
          "",
          "[Removed Lines]",
          "621:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\" << std::endl;",
          "623:  return generate && discard && incorporate;",
          "",
          "[Added Lines]",
          "695:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";",
          "697:  try",
          "698:  {",
          "700:   (void)prng.AlgorithmName();",
          "701:   word32 result = prng.GenerateWord32();",
          "702:   result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "703:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "704:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "705:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "706:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "707:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "708:   crop = true;",
          "709:  }",
          "710:  catch (const Exception&)",
          "711:  {",
          "712:   crop = false;",
          "713:  }",
          "715:  if (!crop)",
          "716:   std::cout << \"FAILED:\";",
          "717:  else",
          "718:   std::cout << \"passed:\";",
          "719:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "721:  return generate && discard && incorporate && crop;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "630:  std::cout << \"\\nTesting Mersenne Twister...\\n\\n\";",
          "632:  static const unsigned int ENTROPY_SIZE = 32;",
          "636:  word32 result[10], expected[10] = {0xD091BB5C, 0x22AE9EF6,",
          "",
          "[Removed Lines]",
          "633:  bool equal = true, generate = true, discard = true, incorporate = false;",
          "",
          "[Added Lines]",
          "731:  bool equal = true, generate = true, discard = true, incorporate = false, crop = false;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "702:   std::cout << \"FAILED:\";",
          "703:  else",
          "704:   std::cout << \"passed:\";",
          "708: }",
          "709: #endif",
          "",
          "[Removed Lines]",
          "705:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\" << std::endl;",
          "707:  return equal && generate && discard && incorporate;",
          "",
          "[Added Lines]",
          "803:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";",
          "805:  try",
          "806:  {",
          "808:   (void)prng.AlgorithmName();",
          "809:   result[0] = prng.GenerateWord32();",
          "810:   result[0] = prng.GenerateWord32(21, 0xffffffff - 21);",
          "811:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 4);",
          "812:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 3);",
          "813:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 2);",
          "814:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 1);",
          "815:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 0);",
          "816:   crop = true;",
          "817:  }",
          "818:  catch (const Exception&)",
          "819:  {",
          "820:   crop = false;",
          "821:  }",
          "823:  if (!crop)",
          "824:   std::cout << \"FAILED:\";",
          "825:  else",
          "826:   std::cout << \"passed:\";",
          "827:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "829:  return equal && generate && discard && incorporate && crop;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "713: {",
          "715:  RDRAND rdrand;",
          "717:  static const unsigned int SIZE = 10000;",
          "719:  if (HasRDRAND())",
          "",
          "[Removed Lines]",
          "716:  bool entropy = true, compress = true, discard = true;",
          "",
          "[Added Lines]",
          "838:  bool entropy = true, compress = true, discard = true, crop = true;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "773:  else",
          "774:   std::cout << \"\\nRDRAND generator not available, skipping test.\\n\";",
          "782: }",
          "783: #endif",
          "",
          "[Removed Lines]",
          "777:  (void)rdrand.AlgorithmName();",
          "778:  (void)rdrand.CanIncorporateEntropy();",
          "779:  rdrand.IncorporateEntropy(NULLPTR, 0);",
          "781:  return entropy && compress && discard;",
          "",
          "[Added Lines]",
          "898:  try",
          "899:  {",
          "901:   (void)rdrand.AlgorithmName();",
          "902:   (void)rdrand.CanIncorporateEntropy();",
          "903:   rdrand.IncorporateEntropy(NULLPTR, 0);",
          "905:   word32 result = rdrand.GenerateWord32();",
          "906:   result = rdrand.GenerateWord32(21, 0xffffffff - 21);",
          "907:   rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "908:   rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "909:   rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "910:   rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "911:   rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "912:   crop = true;",
          "913:  }",
          "914:  catch (const Exception&)",
          "915:  {",
          "916:   crop = false;",
          "917:  }",
          "919:  if (!crop)",
          "920:   std::cout << \"FAILED:\";",
          "921:  else",
          "922:   std::cout << \"passed:\";",
          "923:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "925:  return entropy && compress && discard && crop;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "790:  RDSEED rdseed;",
          "792:  static const unsigned int SIZE = 10000;",
          "794:  if (HasRDSEED())",
          "",
          "[Removed Lines]",
          "791:  bool entropy = true, compress = true, discard = true;",
          "",
          "[Added Lines]",
          "935:  bool entropy = true, compress = true, discard = true, crop = true;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "848:  else",
          "849:   std::cout << \"\\nRDSEED generator not available, skipping test.\\n\";",
          "856:  return entropy && compress && discard;",
          "857: }",
          "",
          "[Removed Lines]",
          "852:  (void)rdseed.AlgorithmName();",
          "853:  (void)rdseed.CanIncorporateEntropy();",
          "854:  rdseed.IncorporateEntropy(NULLPTR, 0);",
          "",
          "[Added Lines]",
          "995:  try",
          "996:  {",
          "998:   (void)rdseed.AlgorithmName();",
          "999:   (void)rdseed.CanIncorporateEntropy();",
          "1000:   rdseed.IncorporateEntropy(NULLPTR, 0);",
          "1002:   word32 result = rdseed.GenerateWord32();",
          "1003:   result = rdseed.GenerateWord32(21, 0xffffffff - 21);",
          "1004:   rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "1005:   rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "1006:   rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "1007:   rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "1008:   rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "1009:   crop = true;",
          "1010:  }",
          "1011:  catch (const Exception&)",
          "1012:  {",
          "1013:   crop = false;",
          "1014:  }",
          "1016:  if (!crop)",
          "1017:   std::cout << \"FAILED:\";",
          "1018:  else",
          "1019:   std::cout << \"passed:\";",
          "1020:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "151ec518e8fe5341c916af070079597d17f960a6",
      "candidate_info": {
        "commit_hash": "151ec518e8fe5341c916af070079597d17f960a6",
        "repo": "weidai11/cryptopp",
        "commit_url": "https://github.com/weidai11/cryptopp/commit/151ec518e8fe5341c916af070079597d17f960a6",
        "files": [
          "validat0.cpp",
          "validat1.cpp",
          "validate.h"
        ],
        "message": "Add additional tests",
        "before_after_code_files": [
          "validat0.cpp||validat0.cpp",
          "validat1.cpp||validat1.cpp",
          "validate.h||validate.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "validat1.cpp||validat1.cpp"
          ],
          "candidate": [
            "validat1.cpp||validat1.cpp"
          ]
        }
      },
      "candidate_diff": {
        "validat0.cpp||validat0.cpp": [
          "File: validat0.cpp -> validat0.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: bool TestEncryptors()",
          "234: {",
          "235:     std::cout << \"\\nTesting Default Encryptors and Decryptors...\\n\\n\";",
          "236:     bool fail1 = false, fail2 = false, fail3 = false, fail4 = false;",
          "238:     try",
          "239:     {",
          "241:         {",
          "242:             std::string pwd, src, dest, rec;",
          "245:             src.resize(len);",
          "246:             GlobalRNG().GenerateBlock(reinterpret_cast<byte*>(&src[0]), src.size());",
          "",
          "[Removed Lines]",
          "240:         for (unsigned int i=0; i<128; ++i)",
          "243:             unsigned int len = GlobalRNG().GenerateWord32(0, 0xffff) + 8;",
          "",
          "[Added Lines]",
          "236:     static const unsigned int ENCRYPT_COUNT = 128, ENCRYPT_MAC_COUNT = 64;",
          "241:         for (unsigned int i=0; i<ENCRYPT_COUNT; ++i)",
          "244:             unsigned int len = GlobalRNG().GenerateWord32(16, 0xffff);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:        std::cout << \"passed:\";",
          "265:     else",
          "266:        std::cout << \"FAILED:\";",
          "271:     try",
          "272:     {",
          "274:         {",
          "275:             std::string pwd, src, dest, rec;",
          "278:             src.resize(len);",
          "279:             GlobalRNG().GenerateBlock(reinterpret_cast<byte*>(&src[0]), src.size());",
          "",
          "[Removed Lines]",
          "267:     std::cout << \"  128 default encryptions and decryptions\" << std::endl;",
          "273:         for (unsigned int i=0; i<128; ++i)",
          "276:             unsigned int len = GlobalRNG().GenerateWord32(0, 0xffff) + 8;",
          "",
          "[Added Lines]",
          "268:     std::cout << \"  \" << ENCRYPT_COUNT << \" default encryptions and decryptions\" << std::endl;",
          "274:         for (unsigned int i=0; i<ENCRYPT_MAC_COUNT; ++i)",
          "277:             unsigned int len = GlobalRNG().GenerateWord32(16, 0xffff);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:        std::cout << \"passed:\";",
          "330:     else",
          "331:        std::cout << \"FAILED:\";",
          "336:     try",
          "337:     {",
          "339:         {",
          "340:             std::string pwd, src, dest, rec;",
          "343:             src.resize(len);",
          "344:             GlobalRNG().GenerateBlock(reinterpret_cast<byte*>(&src[0]), src.size());",
          "",
          "[Removed Lines]",
          "332:     std::cout << \"  128 default encryptions and decryptions with MAC\" << std::endl;",
          "338:         for (unsigned int i=0; i<128; ++i)",
          "341:             unsigned int len = GlobalRNG().GenerateWord32(0, 0xffff) + 8;",
          "",
          "[Added Lines]",
          "333:     std::cout << \"  \" << ENCRYPT_MAC_COUNT << \" default encryptions and decryptions with MAC\" << std::endl;",
          "339:         for (unsigned int i=0; i<ENCRYPT_COUNT; ++i)",
          "342:             unsigned int len = GlobalRNG().GenerateWord32(16, 0xffff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:        std::cout << \"passed:\";",
          "363:     else",
          "364:        std::cout << \"FAILED:\";",
          "369:     try",
          "370:     {",
          "372:         {",
          "373:             std::string pwd, src, dest, rec;",
          "376:             src.resize(len);",
          "377:             GlobalRNG().GenerateBlock(reinterpret_cast<byte*>(&src[0]), src.size());",
          "",
          "[Removed Lines]",
          "365:     std::cout << \"  128 legacy encryptions and decryptions\" << std::endl;",
          "371:         for (unsigned int i=0; i<128; ++i)",
          "374:             unsigned int len = GlobalRNG().GenerateWord32(0, 0xffff) + 8;",
          "",
          "[Added Lines]",
          "366:     std::cout << \"  \" << ENCRYPT_COUNT << \" legacy encryptions and decryptions\" << std::endl;",
          "372:         for (unsigned int i=0; i<ENCRYPT_MAC_COUNT; ++i)",
          "375:             unsigned int len = GlobalRNG().GenerateWord32(16, 0xffff);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "427:        std::cout << \"passed:\";",
          "428:     else",
          "429:        std::cout << \"FAILED:\";",
          "432:     return !fail1 && !fail2 && !fail3 && !fail4;",
          "433: }",
          "",
          "[Removed Lines]",
          "430:     std::cout << \"  128 legacy encryptions and decryptions with MAC\" << std::endl;",
          "",
          "[Added Lines]",
          "431:     std::cout << \"  \" << ENCRYPT_MAC_COUNT << \" legacy encryptions and decryptions with MAC\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "508:         pass &= !fail;",
          "509:     }",
          "",
          "[Removed Lines]",
          "511:     std::cout << (fail ? \"FAILED:\" : \"passed:\") << \"  64 information dispersals\\n\";",
          "",
          "[Added Lines]",
          "512:     std::cout << (fail ? \"FAILED:\" : \"passed:\") << \"  \" << INFORMATION_SHARES << \" information dispersals\\n\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "577:         pass &= !fail;",
          "578:     }",
          "582:     return pass;",
          "583: }",
          "",
          "[Removed Lines]",
          "580:     std::cout << (fail ? \"FAILED:\" : \"passed:\") << \"  64 secret sharings\\n\";",
          "",
          "[Added Lines]",
          "581:     std::cout << (fail ? \"FAILED:\" : \"passed:\") << \"  \" << SECRET_SHARES << \" secret sharings\\n\";",
          "",
          "---------------"
        ],
        "validat1.cpp||validat1.cpp": [
          "File: validat1.cpp -> validat1.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: {",
          "71:  bool pass=TestSettings();",
          "72:  pass=TestOS_RNG() && pass;",
          "74:  pass=TestAutoSeededX917() && pass;",
          "76: #if defined(CRYPTOPP_EXTENDED_VALIDATION)",
          "",
          "[Removed Lines]",
          "73:  pass=TestAutoSeeded() && pass;",
          "",
          "[Added Lines]",
          "73:  pass=TestRandomPool() && pass;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:    RandomNumberGenerator& prng = *rng.get();",
          "460:    (void)prng.AlgorithmName();",
          "461:    word32 result = prng.GenerateWord32();",
          "463:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "464:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "465:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "",
          "[Removed Lines]",
          "462:    result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "",
          "[Added Lines]",
          "462:    result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "509:    RandomNumberGenerator& prng = *rng.get();",
          "510:    (void)prng.AlgorithmName();",
          "511:    word32 result = prng.GenerateWord32();",
          "513:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "514:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "515:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "",
          "[Removed Lines]",
          "512:    result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "",
          "[Added Lines]",
          "512:    result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:  return pass;",
          "535: }",
          "539: {",
          "586:   {",
          "596:   }",
          "597:  }",
          "599:  {",
          "633: }",
          "635: bool TestAutoSeededX917()",
          "",
          "[Removed Lines]",
          "537: #if defined(NO_OS_DEPENDENCE) || !defined(OS_RNG_AVAILABLE)",
          "538: bool TestAutoSeeded()",
          "540:  return true;",
          "541: }",
          "542: bool TestAutoSeededX917()",
          "543: {",
          "544:  return true;",
          "545: }",
          "546: #else",
          "547: bool TestAutoSeeded()",
          "548: {",
          "550:  std::cout << \"\\nTesting AutoSeeded generator...\\n\\n\";",
          "552:  AutoSeededRandomPool prng;",
          "553:  static const unsigned int ENTROPY_SIZE = 32;",
          "554:  bool generate = true, discard = true, incorporate = false, crop = false;",
          "556:  MeterFilter meter(new Redirector(TheBitBucket()));",
          "557:  RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "559:  if (meter.GetTotalBytes() < 100000)",
          "560:  {",
          "561:   std::cout << \"FAILED:\";",
          "562:   generate = false;",
          "563:  }",
          "564:  else",
          "565:   std::cout << \"passed:\";",
          "566:  std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "568:  try",
          "569:  {",
          "570:   prng.DiscardBytes(100000);",
          "571:  }",
          "572:  catch (const Exception&)",
          "573:  {",
          "574:   discard = false;",
          "575:  }",
          "577:  if (!discard)",
          "578:   std::cout << \"FAILED:\";",
          "579:  else",
          "580:   std::cout << \"passed:\";",
          "581:  std::cout << \"  discarded 10000 bytes\" << std::endl;",
          "583:  try",
          "584:  {",
          "585:   if(prng.CanIncorporateEntropy())",
          "587:    SecByteBlock entropy(ENTROPY_SIZE);",
          "588:    GlobalRNG().GenerateBlock(entropy, entropy.SizeInBytes());",
          "590:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "591:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "592:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "593:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "595:    incorporate = true;",
          "598:  catch (const Exception& /*ex*/)",
          "600:  }",
          "602:  if (!incorporate)",
          "603:   std::cout << \"FAILED:\";",
          "604:  else",
          "605:   std::cout << \"passed:\";",
          "606:  std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";",
          "608:  try",
          "609:  {",
          "611:   (void)prng.AlgorithmName();",
          "612:   word32 result = prng.GenerateWord32();",
          "613:   result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "614:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "615:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "616:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "617:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "618:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "619:   crop = true;",
          "620:  }",
          "621:  catch (const Exception&)",
          "622:  {",
          "623:   crop = false;",
          "624:  }",
          "626:  if (!crop)",
          "627:   std::cout << \"FAILED:\";",
          "628:  else",
          "629:   std::cout << \"passed:\";",
          "630:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "632:  return generate && discard && incorporate && crop;",
          "",
          "[Added Lines]",
          "537: #if !defined(NO_OS_DEPENDENCE)",
          "538: bool TestRandomPool()",
          "540:  std::cout << \"\\nTesting RandomPool generator...\\n\\n\";",
          "541:  bool pass=true, fail;",
          "542:  {",
          "543:   RandomPool prng;",
          "544:   static const unsigned int ENTROPY_SIZE = 32;",
          "546:   MeterFilter meter(new Redirector(TheBitBucket()));",
          "547:   RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "549:   fail = false;",
          "550:   if (meter.GetTotalBytes() < 100000)",
          "551:    fail = true;",
          "553:   pass &= !fail;",
          "554:   if (fail)",
          "555:    std::cout << \"FAILED:\";",
          "556:   else",
          "557:    std::cout << \"passed:\";",
          "558:   std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "560:   try",
          "561:   {",
          "562:    fail = false;",
          "563:    prng.DiscardBytes(100000);",
          "564:   }",
          "565:   catch (const Exception&)",
          "566:   {",
          "567:    fail = true;",
          "568:   }",
          "570:   pass &= !fail;",
          "571:   if (fail)",
          "572:    std::cout << \"FAILED:\";",
          "573:   else",
          "574:    std::cout << \"passed:\";",
          "575:   std::cout << \"  discarded 10000 bytes\" << std::endl;",
          "577:   try",
          "579:    fail = false;",
          "580:    if(prng.CanIncorporateEntropy())",
          "581:    {",
          "582:     SecByteBlock entropy(ENTROPY_SIZE);",
          "583:     GlobalRNG().GenerateBlock(entropy, entropy.SizeInBytes());",
          "585:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "586:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "587:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "588:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "589:    }",
          "590:   }",
          "591:   catch (const Exception& /*ex*/)",
          "592:   {",
          "593:    fail = true;",
          "594:   }",
          "596:   pass &= !fail;",
          "597:   if (fail)",
          "598:    std::cout << \"FAILED:\";",
          "599:   else",
          "600:    std::cout << \"passed:\";",
          "601:   std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";",
          "603:   try",
          "604:   {",
          "606:    (void)prng.AlgorithmName();  // \"unknown\"",
          "607:    word32 result = prng.GenerateWord32();",
          "608:    result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "609:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "610:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "611:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "612:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "613:   }",
          "614:   catch (const Exception&)",
          "615:   {",
          "616:    fail = true;",
          "619:   pass &= !fail;",
          "620:   if (fail)",
          "621:    std::cout << \"FAILED:\";",
          "622:   else",
          "623:    std::cout << \"passed:\";",
          "624:   std::cout << \"  GenerateWord32 and Crop\\n\";",
          "627:  std::cout << \"\\nTesting AutoSeeded RandomPool generator...\\n\\n\";",
          "629:   AutoSeededRandomPool prng;",
          "630:   static const unsigned int ENTROPY_SIZE = 32;",
          "632:   MeterFilter meter(new Redirector(TheBitBucket()));",
          "633:   RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "635:   fail = false;",
          "636:   if (meter.GetTotalBytes() < 100000)",
          "637:    fail = true;",
          "639:   pass &= !fail;",
          "640:   if (fail)",
          "641:    std::cout << \"FAILED:\";",
          "642:   else",
          "643:    std::cout << \"passed:\";",
          "644:   std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "646:   try",
          "647:   {",
          "648:    fail = false;",
          "649:    prng.DiscardBytes(100000);",
          "650:   }",
          "651:   catch (const Exception&)",
          "652:   {",
          "653:    fail = true;",
          "654:   }",
          "656:   pass &= !fail;",
          "657:   if (fail)",
          "658:    std::cout << \"FAILED:\";",
          "659:   else",
          "660:    std::cout << \"passed:\";",
          "661:   std::cout << \"  discarded 10000 bytes\" << std::endl;",
          "663:   try",
          "664:   {",
          "665:    fail = false;",
          "666:    if(prng.CanIncorporateEntropy())",
          "667:    {",
          "668:     SecByteBlock entropy(ENTROPY_SIZE);",
          "669:     GlobalRNG().GenerateBlock(entropy, entropy.SizeInBytes());",
          "671:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "672:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "673:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "674:     prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "675:    }",
          "676:   }",
          "677:   catch (const Exception& /*ex*/)",
          "678:   {",
          "679:    fail = true;",
          "680:   }",
          "682:   pass &= !fail;",
          "683:   if (fail)",
          "684:    std::cout << \"FAILED:\";",
          "685:   else",
          "686:    std::cout << \"passed:\";",
          "687:   std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";",
          "689:   try",
          "690:   {",
          "692:    fail = false;",
          "693:    (void)prng.AlgorithmName();  // \"unknown\"",
          "694:    word32 result = prng.GenerateWord32();",
          "695:    result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "696:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "697:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "698:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "699:    prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "700:   }",
          "701:   catch (const Exception&)",
          "702:   {",
          "703:    fail = true;",
          "704:   }",
          "706:   pass &= !fail;",
          "707:   if (fail)",
          "708:    std::cout << \"FAILED:\";",
          "709:   else",
          "710:    std::cout << \"passed:\";",
          "711:   std::cout << \"  GenerateWord32 and Crop\\n\";",
          "712:  }",
          "714:  std::cout.flush();",
          "715:  return pass;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "638:  std::cout << \"\\nTesting AutoSeeded X917 generator...\\n\\n\";",
          "640:  AutoSeededX917RNG<AES> prng;",
          "641:  static const unsigned int ENTROPY_SIZE = 32;",
          "644:  MeterFilter meter(new Redirector(TheBitBucket()));",
          "645:  RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "647:  if (meter.GetTotalBytes() < 100000)",
          "649:   std::cout << \"FAILED:\";",
          "652:  else",
          "653:   std::cout << \"passed:\";",
          "654:  std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "656:  try",
          "657:  {",
          "658:   prng.DiscardBytes(100000);",
          "659:  }",
          "660:  catch (const Exception&)",
          "661:  {",
          "663:  }",
          "666:   std::cout << \"FAILED:\";",
          "667:  else",
          "668:   std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "642:  bool generate = true, discard = true, incorporate = false, crop = false;",
          "648:  {",
          "650:   generate = false;",
          "651:  }",
          "662:   discard = false;",
          "665:  if (!discard)",
          "",
          "[Added Lines]",
          "724:  bool pass = true, fail;",
          "730:  fail = false;",
          "732:   fail = true;",
          "734:  pass &= !fail;",
          "735:  if (fail)",
          "743:   fail = false;",
          "748:   fail = true;",
          "751:  pass &= !fail;",
          "752:  if (fail)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "671:  try",
          "672:  {",
          "673:   if(prng.CanIncorporateEntropy())",
          "674:   {",
          "675:    SecByteBlock entropy(ENTROPY_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:   fail = false;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "679:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "680:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "681:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "684:   }",
          "685:  }",
          "686:  catch (const Exception& /*ex*/)",
          "687:  {",
          "688:  }",
          "691:   std::cout << \"FAILED:\";",
          "692:  else",
          "693:   std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "683:    incorporate = true;",
          "690:  if (!incorporate)",
          "",
          "[Added Lines]",
          "774:   fail = true;",
          "777:  pass &= !fail;",
          "778:  if (fail)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "696:  try",
          "697:  {",
          "700:   word32 result = prng.GenerateWord32();",
          "702:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "703:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "704:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "705:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "708:  }",
          "709:  catch (const Exception&)",
          "710:  {",
          "712:  }",
          "715:   std::cout << \"FAILED:\";",
          "716:  else",
          "717:   std::cout << \"passed:\";",
          "721: }",
          "722: #endif // NO_OS_DEPENDENCE",
          "",
          "[Removed Lines]",
          "699:   (void)prng.AlgorithmName();",
          "701:   result = prng.GenerateWord32(21, 0xffffffff - 21);",
          "706:   prng.GenerateBlock(reinterpret_cast<byte*>(&result), 0);",
          "707:   crop = true;",
          "711:   crop = false;",
          "714:  if (!crop)",
          "718:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "720:  return generate && discard && incorporate && crop;",
          "",
          "[Added Lines]",
          "787:   fail = false;",
          "788:   (void)prng.AlgorithmName();  // \"unknown\"",
          "790:   result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "798:   fail = true;",
          "801:  pass &= !fail;",
          "802:  if (fail)",
          "806:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "808:  std::cout.flush();",
          "809:  return pass;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "727:  std::cout << \"\\nTesting Mersenne Twister...\\n\\n\";",
          "729:  static const unsigned int ENTROPY_SIZE = 32;",
          "733:  word32 result[10], expected[10] = {0xD091BB5C, 0x22AE9EF6,",
          "",
          "[Removed Lines]",
          "730:  bool equal = true, generate = true, discard = true, incorporate = false, crop = false;",
          "",
          "[Added Lines]",
          "819:  bool pass = true, fail = false;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "737:  MT19937ar prng;",
          "738:  prng.GenerateBlock(reinterpret_cast<byte*>(result), sizeof(result));",
          "747:   std::cout << \"FAILED:\";",
          "750:  std::cout << \"  Expected sequence from MT19937ar (2002 version)\\n\";",
          "752:  MeterFilter meter(new Redirector(TheBitBucket()));",
          "753:  RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));",
          "755:  if (meter.GetTotalBytes() < 100000)",
          "757:   std::cout << \"FAILED:\";",
          "760:  else",
          "761:   std::cout << \"passed:\";",
          "762:  std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "764:  try",
          "765:  {",
          "766:   prng.DiscardBytes(100000);",
          "767:  }",
          "768:  catch (const Exception&)",
          "769:  {",
          "771:  }",
          "774:   std::cout << \"FAILED:\";",
          "775:  else",
          "776:   std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "739:  equal = (0 == ::memcmp(result, expected, sizeof(expected)));",
          "741:  if (equal)",
          "742:  {",
          "743:   std::cout << \"passed:\";",
          "744:  }",
          "745:  else",
          "746:  {",
          "748:   equal = false;",
          "749:  }",
          "756:  {",
          "758:   generate = false;",
          "759:  }",
          "770:   discard = false;",
          "773:  if (!discard)",
          "",
          "[Added Lines]",
          "828:  fail = (0 != ::memcmp(result, expected, sizeof(expected)));",
          "830:  pass &= !fail;",
          "831:  if (fail)",
          "833:  else",
          "834:   std::cout << \"passed:\";",
          "840:  fail = false;",
          "842:   fail = true;",
          "844:  pass &= !fail;",
          "845:  if (fail)",
          "853:   fail = false;",
          "858:   fail = true;",
          "861:  pass &= !fail;",
          "862:  if (fail)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "779:  try",
          "780:  {",
          "781:   if(prng.CanIncorporateEntropy())",
          "782:   {",
          "783:    SecByteBlock entropy(ENTROPY_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "870:   fail = false;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "787:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "788:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "789:    prng.IncorporateEntropy(entropy, entropy.SizeInBytes());",
          "792:   }",
          "793:  }",
          "794:  catch (const Exception& /*ex*/)",
          "795:  {",
          "796:  }",
          "799:   std::cout << \"FAILED:\";",
          "800:  else",
          "801:   std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "791:    incorporate = true;",
          "798:  if (!incorporate)",
          "",
          "[Added Lines]",
          "884:   fail = true;",
          "887:  pass &= !fail;",
          "888:  if (fail)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "805:  {",
          "807:   (void)prng.AlgorithmName();",
          "810:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 4);",
          "811:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 3);",
          "812:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 2);",
          "813:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 1);",
          "814:   prng.GenerateBlock(reinterpret_cast<byte*>(&result[0]), 0);",
          "816:  }",
          "817:  catch (const Exception&)",
          "818:  {",
          "820:  }",
          "823:   std::cout << \"FAILED:\";",
          "824:  else",
          "825:   std::cout << \"passed:\";",
          "826:  std::cout << \"  GenerateWord32 and Crop\\n\";",
          "829: }",
          "830: #endif",
          "",
          "[Removed Lines]",
          "808:   result[0] = prng.GenerateWord32();",
          "809:   result[0] = prng.GenerateWord32(21, 0xffffffff - 21);",
          "815:   crop = true;",
          "819:   crop = false;",
          "822:  if (!crop)",
          "828:  return equal && generate && discard && incorporate && crop;",
          "",
          "[Added Lines]",
          "898:   word32 temp = prng.GenerateWord32();",
          "899:   temp = prng.GenerateWord32((temp & 0xff), 0xffffffff - (temp & 0xff));",
          "905:   fail = false;",
          "909:   fail = true;",
          "912:  pass &= !fail;",
          "913:  if (fail)",
          "919:  std::cout.flush();",
          "920:  return pass;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "834: {",
          "835:  std::cout << \"\\nTesting RDRAND generator...\\n\\n\";",
          "838:  member_ptr<RandomNumberGenerator> rng;",
          "840:  try {rng.reset(new RDRAND);}",
          "",
          "[Removed Lines]",
          "837:  bool entropy = true, compress = true, discard = true, crop = true;",
          "",
          "[Added Lines]",
          "929:  bool pass = true, fail = false;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "858:   CRYPTOPP_ASSERT(0 == maurer.BytesNeeded());",
          "859:   const double mv = maurer.GetTestValue();",
          "860:   if (mv < 0.98f)",
          "869:   StreamState ss(std::cout);",
          "870:   std::cout << std::setiosflags(std::ios::fixed) << std::setprecision(6);",
          "871:   std::cout << \"  Maurer Randomness Test returned value \" << mv << \"\\n\";",
          "873:   if (meter.GetTotalBytes() < SIZE)",
          "875:    std::cout << \"FAILED:\";",
          "878:   else",
          "879:    std::cout << \"passed:\";",
          "880:   std::cout << \"  \" << SIZE << \" generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "882:   try",
          "883:   {",
          "884:    rdrand.DiscardBytes(SIZE);",
          "885:   }",
          "886:   catch (const Exception&)",
          "887:   {",
          "889:   }",
          "892:    std::cout << \"FAILED:\";",
          "893:   else",
          "894:    std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "861:   {",
          "862:    std::cout << \"FAILED:\";",
          "863:    entropy = false;",
          "864:   }",
          "865:   else",
          "866:    std::cout << \"passed:\";",
          "874:   {",
          "876:    compress = false;",
          "877:   }",
          "888:    discard = false;",
          "891:   if (!discard)",
          "",
          "[Added Lines]",
          "953:    fail = true;",
          "959:   pass &= !fail;",
          "960:   if (fail)",
          "961:    std::cout << \"FAILED:\";",
          "962:   else",
          "963:    std::cout << \"passed:\";",
          "966:   fail = false;",
          "968:    fail = true;",
          "970:   pass &= !fail;",
          "971:   if (fail)",
          "979:    fail = false;",
          "984:    fail = true;",
          "987:   pass &= !fail;",
          "988:   if (fail)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "902:    rdrand.IncorporateEntropy(NULLPTR, 0);",
          "904:    word32 result = rdrand.GenerateWord32();",
          "906:    rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "907:    rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "908:    rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "909:    rdrand.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "911:   }",
          "912:   catch (const Exception&)",
          "913:   {",
          "915:   }",
          "918:    std::cout << \"FAILED:\";",
          "919:   else",
          "920:    std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "905:    result = rdrand.GenerateWord32(21, 0xffffffff - 21);",
          "910:    crop = true;",
          "914:    crop = false;",
          "917:   if (!crop)",
          "",
          "[Added Lines]",
          "1002:    result = rdrand.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "1007:    fail = false;",
          "1011:    fail = true;",
          "1014:   pass &= !fail;",
          "1015:   if (fail)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "923:  else",
          "924:   std::cout << \"RDRAND generator not available, skipping test.\\n\";",
          "927: }",
          "928: #endif",
          "",
          "[Removed Lines]",
          "926:  return entropy && compress && discard && crop;",
          "",
          "[Added Lines]",
          "1024:  std::cout.flush();",
          "1025:  return pass;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "932: {",
          "933:  std::cout << \"\\nTesting RDSEED generator...\\n\\n\";",
          "936:  member_ptr<RandomNumberGenerator> rng;",
          "938:  try {rng.reset(new RDSEED);}",
          "",
          "[Removed Lines]",
          "935:  bool entropy = true, compress = true, discard = true, crop = true;",
          "",
          "[Added Lines]",
          "1034:  bool pass = true, fail = false;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "956:   CRYPTOPP_ASSERT(0 == maurer.BytesNeeded());",
          "957:   const double mv = maurer.GetTestValue();",
          "958:   if (mv < 0.98f)",
          "967:   StreamState ss(std::cout);",
          "968:   std::cout << std::setiosflags(std::ios::fixed) << std::setprecision(6);",
          "969:   std::cout << \"  Maurer Randomness Test returned value \" << mv << \"\\n\";",
          "971:   if (meter.GetTotalBytes() < SIZE)",
          "973:    std::cout << \"FAILED:\";",
          "976:   else",
          "977:    std::cout << \"passed:\";",
          "978:   std::cout << \"  \" << SIZE << \" generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";",
          "980:   try",
          "981:   {",
          "982:    rdseed.DiscardBytes(SIZE);",
          "983:   }",
          "984:   catch (const Exception&)",
          "985:   {",
          "987:   }",
          "990:    std::cout << \"FAILED:\";",
          "991:   else",
          "992:    std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "959:   {",
          "960:    std::cout << \"FAILED:\";",
          "961:    entropy = false;",
          "962:   }",
          "963:   else",
          "964:    std::cout << \"passed:\";",
          "972:   {",
          "974:    compress = false;",
          "975:   }",
          "986:    discard = false;",
          "989:   if (!discard)",
          "",
          "[Added Lines]",
          "1058:    fail = true;",
          "1064:   pass &= !fail;",
          "1065:   if (fail)",
          "1066:    std::cout << \"FAILED:\";",
          "1067:   else",
          "1068:    std::cout << \"passed:\";",
          "1071:   fail = false;",
          "1073:    fail = true;",
          "1075:   pass &= !fail;",
          "1076:   if (fail)",
          "1084:    fail = false;",
          "1089:    fail = true;",
          "1092:   pass &= !fail;",
          "1093:   if (fail)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1000:    rdseed.IncorporateEntropy(NULLPTR, 0);",
          "1002:    word32 result = rdseed.GenerateWord32();",
          "1004:    rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 4);",
          "1005:    rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 3);",
          "1006:    rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 2);",
          "1007:    rdseed.GenerateBlock(reinterpret_cast<byte*>(&result), 1);",
          "1009:   }",
          "1010:   catch (const Exception&)",
          "1011:   {",
          "1013:   }",
          "1016:    std::cout << \"FAILED:\";",
          "1017:   else",
          "1018:    std::cout << \"passed:\";",
          "",
          "[Removed Lines]",
          "1003:    result = rdseed.GenerateWord32(21, 0xffffffff - 21);",
          "1008:    crop = true;",
          "1012:    crop = false;",
          "1015:   if (!crop)",
          "",
          "[Added Lines]",
          "1107:    result = rdseed.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));",
          "1112:    fail = false;",
          "1116:    fail = true;",
          "1119:   pass &= !fail;",
          "1120:   if (fail)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1021:  else",
          "1022:   std::cout << \"RDSEED generator not available, skipping test.\\n\";",
          "1025: }",
          "1026: #endif",
          "",
          "[Removed Lines]",
          "1024:  return entropy && compress && discard && crop;",
          "",
          "[Added Lines]",
          "1129:  std::cout.flush();",
          "1130:  return pass;",
          "",
          "---------------"
        ],
        "validate.h||validate.h": [
          "File: validate.h -> validate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: bool TestSettings();",
          "19: bool TestOS_RNG();",
          "22: bool TestAutoSeededX917();",
          "24: #if (CRYPTOPP_BOOL_X86 || CRYPTOPP_BOOL_X32 || CRYPTOPP_BOOL_X64)",
          "",
          "[Removed Lines]",
          "21: bool TestAutoSeeded();",
          "",
          "[Added Lines]",
          "21: bool TestRandomPool();",
          "",
          "---------------"
        ]
      }
    }
  ]
}