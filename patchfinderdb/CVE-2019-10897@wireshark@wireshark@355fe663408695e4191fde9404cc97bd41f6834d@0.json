{
  "cve_id": "CVE-2019-10897",
  "cve_desc": "In Wireshark 3.0.0, the IEEE 802.11 dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-ieee80211.c by detecting cases in which the bit offset does not advance.",
  "repo": "wireshark/wireshark",
  "patch_hash": "355fe663408695e4191fde9404cc97bd41f6834d",
  "patch_info": {
    "commit_hash": "355fe663408695e4191fde9404cc97bd41f6834d",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/355fe663408695e4191fde9404cc97bd41f6834d",
    "files": [
      "epan/dissectors/packet-ieee80211.c"
    ],
    "message": "IEEE 802.11: Fix an infinite loop.\n\nIn dissect_compressed_beamforming_and_cqi, break out of a loop if our\nbit offset doesn't advance.\n\nBug: 15553\nChange-Id: I6212be4c08c42ef1969c1302e85a8e08f1d7547f\nReviewed-on: https://code.wireshark.org/review/32677\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
    "before_after_code_files": [
      "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
      "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "12335: static guint",
      "12337: {",
      "12338:   int byte_count = 0;",
      "12339:   guint64 mimo_cntl = tvb_get_letoh40(tvb, offset);",
      "",
      "[Removed Lines]",
      "12336: dissect_compressed_beamforming_and_cqi(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
      "",
      "[Added Lines]",
      "12336: dissect_compressed_beamforming_and_cqi(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12411:   scidx = SCIDX_END_SENTINAL;",
      "12412:   while ((scidx = next_he_scidx(scidx, bw, grouping, feedback,",
      "12413:           ru_start_index, ru_end_index)) != (int)SCIDX_END_SENTINAL) {",
      "12414:     bit_offset = dissect_he_feedback_matrix(feedback_tree, tvb, offset,",
      "12415:                         bit_offset, scidx, nr, nc, phi_bits, psi_bits);",
      "12416:     offset = bit_offset / 8;",
      "12417:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12414:     int prev_bit_offset = bit_offset;",
      "12417:     if (bit_offset <= prev_bit_offset) {",
      "12418:       expert_add_info(pinfo, tree, &ei_ieee80211_bad_length);",
      "12419:       break;",
      "12420:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "13693: }",
      "13695: static int",
      "13697: {",
      "13698:   guint8 ssid_len;",
      "",
      "[Removed Lines]",
      "13696: dissect_owe_transition_mode(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
      "",
      "[Added Lines]",
      "13702: dissect_owe_transition_mode(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ad6eb33684950e1d3fec9cac7b513d592bd70aa6",
      "candidate_info": {
        "commit_hash": "ad6eb33684950e1d3fec9cac7b513d592bd70aa6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ad6eb33684950e1d3fec9cac7b513d592bd70aa6",
        "files": [
          "epan/dissectors/packet-ieee80211.c"
        ],
        "message": "WIP:ieee80211.c: Add support for D3.0 of 802.11ax\n\nThis changeset merges in the changes that have been tested in a resent\ntest event at the WFA. It will not dissect older D2.x packet captures.\n\nChange-Id: Id38a27a61a6a2a083575448e5c59a8e190827e6d\nReviewed-on: https://code.wireshark.org/review/29512\nPetri-Dish: Richard Sharpe <realrichardsharpe@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "718:   { ETAG_FILS_PUBLIC_KEY,                     \"FILS Public Key\" },",
          "719:   { ETAG_FILS_NONCE,                          \"FILS Nonce\" },",
          "720:   { ETAG_FUTURE_CHANNEL_GUIDANCE,             \"Future Channel Guidance\" },",
          "723:   { ETAG_UORA_PARAMETER_SET,                  \"UORA Parameter Set\" },",
          "724:   { ETAG_MU_EDCA_PARAMETER_SET,               \"MU EDCA Parameter Set\" },",
          "725:   { ETAG_SPATIAL_REUSE_PARAMETER_SET,         \"Spatial Reuse Parameter Set\" },",
          "",
          "[Removed Lines]",
          "721:   { ETAG_HE_CAPABILITIES,                     \"HE Capabilities (IEEE Std 802.11ax/D2.0)\" },",
          "722:   { ETAG_HE_OPERATION,                        \"HE Operation (IEEE Std 802.11ax/D2.0)\" },",
          "",
          "[Added Lines]",
          "721:   { ETAG_HE_CAPABILITIES,                     \"HE Capabilities (IEEE Std 802.11ax/D3.0)\" },",
          "722:   { ETAG_HE_OPERATION,                        \"HE Operation (IEEE Std 802.11ax/D3.0)\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:   {CTRL_TRIGGER,              \"Trigger\"},",
          "1031:   {CTRL_BEAMFORM_RPT_POLL,    \"Beamforming Report Poll\"},",
          "1033:   {CTRL_CONTROL_WRAPPER,      \"Control Wrapper\"},",
          "1034:   {CTRL_BLOCK_ACK_REQ,        \"802.11 Block Ack Req\"},",
          "1035:   {CTRL_BLOCK_ACK,            \"802.11 Block Ack\"},",
          "",
          "[Removed Lines]",
          "1032:   {CTRL_VHT_NDP_ANNC,         \"VHT NDP Announcement\"},",
          "",
          "[Added Lines]",
          "1032:   {CTRL_VHT_NDP_ANNC,         \"VHT/HE NDP Announcement\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2039:   {0x80 | CAT_FAST_SESSION_TRANSFER,     \"Fast Session Transfer (error)\"},",
          "2040:   {0x80 | CAT_ROBUST_AV_STREAMING,       \"Robust AV Streaming (error)\"},",
          "2041:   {0x80 | CAT_UNPROTECTED_DMG,           \"Unprotected DMG (error)\"},",
          "2043:   {0x80 | CAT_VENDOR_SPECIFIC_PROTECTED, \"Vendor-specific Protected (error)\"},",
          "2044:   {0x80 | CAT_VENDOR_SPECIFIC,           \"Vendor Specific (error)\"},",
          "2045:   {0, NULL}",
          "",
          "[Removed Lines]",
          "2042:   {0x80 | CAT_VHT,                       \"VHT\"},",
          "",
          "[Added Lines]",
          "2042:   {0x80 | CAT_VHT,                       \"VHT (error)\"},",
          "2043:   {0x80 | CAT_HE,                        \"HE (error)\"},",
          "2044:   {0x80 | CAT_PROTECTED_HE,              \"Protected HE (error)\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3158: static int hf_ieee80211_he_btc_reserved = -1;",
          "3159: static int hf_ieee80211_he_trigger_common_info = -1;",
          "3160: static int hf_ieee80211_he_trigger_type = -1;",
          "3163: static int hf_ieee80211_he_trigger_cs_required = -1;",
          "3165: static int hf_ieee80211_he_trigger_gi_and_ltf_type = -1;",
          "3166: static int hf_ieee80211_he_trigger_mu_mimo_ltf_mode = -1;",
          "3167: static int hf_ieee80211_he_trigger_num_he_ltf_syms_etc = -1;",
          "3169: static int hf_ieee80211_he_trigger_ldpc_extra_sym_seg = -1;",
          "3170: static int hf_ieee80211_he_trigger_ap_tx_power = -1;",
          "3173: static int hf_ieee80211_he_trigger_doppler = -1;",
          "3175: static int hf_ieee80211_he_trigger_reserved = -1;",
          "3176: static int hf_ieee80211_he_trigger_bar_ctrl = -1;",
          "3177: static int hf_ieee80211_he_trigger_bar_ctrl_ba_ack_policy = -1;",
          "3178: static int hf_ieee80211_he_trigger_bar_ctrl_ba_type = -1;",
          "",
          "[Removed Lines]",
          "3161: static int hf_ieee80211_he_trigger_length = -1;",
          "3162: static int hf_ieee80211_he_trigger_cascade_indication = -1;",
          "3164: static int hf_ieee80211_he_trigger_bw = -1;",
          "3168: static int hf_ieee80211_he_trigger_stbc = -1;",
          "3171: static int hf_ieee80211_he_trigger_packet_extension = -1;",
          "3172: static int hf_ieee80211_he_trigger_spatial_reuse = -1;",
          "3174: static int hf_ieee80211_he_trigger_he_sig_a_reserved = -1;",
          "",
          "[Added Lines]",
          "3163: static int hf_ieee80211_he_trigger_ul_length = -1;",
          "3164: static int hf_ieee80211_he_trigger_more_tf = -1;",
          "3166: static int hf_ieee80211_he_trigger_ul_bw = -1;",
          "3170: static int hf_ieee80211_he_trigger_ul_stbc = -1;",
          "3173: static int hf_ieee80211_he_trigger_ul_packet_extension = -1;",
          "3174: static int hf_ieee80211_he_trigger_ul_spatial_reuse = -1;",
          "3176: static int hf_ieee80211_he_trigger_ul_he_sig_a_reserved = -1;",
          "3178: static int hf_ieee80211_he_trigger_user_info = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3184: static int hf_ieee80211_he_trigger_tid_aggregation_limit = -1;",
          "3185: static int hf_ieee80211_he_trigger_dependent_reserved1 = -1;",
          "3186: static int hf_ieee80211_he_trigger_preferred_ac = -1;",
          "3188: static int hf_ieee80211_he_trigger_starting_aid = -1;",
          "3189: static int hf_ieee80211_he_trigger_dependent_reserved2 = -1;",
          "3190: static int hf_ieee80211_he_trigger_feedback_type = -1;",
          "",
          "[Removed Lines]",
          "3187: static int hf_ieee80211_he_trigger_user_info = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3195: static int hf_ieee80211_he_trigger_feedback_seg_retrans_bm = -1;",
          "3196: static int hf_ieee80211_he_trigger_aid12 = -1;",
          "3197: static int hf_ieee80211_he_trigger_ru_allocation = -1;",
          "3203: static int hf_ieee80211_he_trigger_user_reserved = -1;",
          "3204: static int hf_ieee80211_he_trigger_dep_basic_user_info = -1;",
          "3205: static int hf_ieee80211_he_ndp_annc_token = -1;",
          "",
          "[Removed Lines]",
          "3198: static int hf_ieee80211_he_trigger_coding_type = -1;",
          "3199: static int hf_ieee80211_he_trigger_mcs = -1;",
          "3200: static int hf_ieee80211_he_trigger_dcm = -1;",
          "3201: static int hf_ieee80211_he_trigger_ss_allocation = -1;",
          "3202: static int hf_ieee80211_he_trigger_target_rssi = -1;",
          "",
          "[Added Lines]",
          "3200: static int hf_ieee80211_he_trigger_ru_allocation_region = -1;",
          "3201: static int hf_ieee80211_he_trigger_ru_starting_spatial_stream = -1;",
          "3202: static int hf_ieee80211_he_trigger_ru_number_spatial_streams = -1;",
          "3203: static int hf_ieee80211_he_trigger_ru_number_ra_ru = -1;",
          "3204: static int hf_ieee80211_he_trigger_ru_no_more_ra_ru = -1;",
          "3205: static int hf_ieee80211_he_trigger_ul_fec_coding_type = -1;",
          "3206: static int hf_ieee80211_he_trigger_ul_mcs = -1;",
          "3207: static int hf_ieee80211_he_trigger_ul_dcm = -1;",
          "3208: static int hf_ieee80211_he_trigger_ul_target_rssi = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3208: static int hf_he_ndp_annc_he_subfield = -1;",
          "3209: static int hf_he_ndp_annc_reserved = -1;",
          "3210: static int hf_he_ndp_annc_aid11 = -1;",
          "3212: static int hf_he_ndp_annc_feedback_type_and_ng = -1;",
          "3213: static int hf_he_ndp_annc_disambiguation = -1;",
          "3214: static int hf_he_ndp_annc_codebook_size = -1;",
          "3215: static int hf_he_ndp_annc_nc = -1;",
          "3216: static int hf_ieee80211_htc_ht_lac = -1;",
          "3217: static int hf_ieee80211_htc_lac_trq = -1;",
          "3218: static int hf_ieee80211_htc_lac_mai_aseli = -1;",
          "",
          "[Removed Lines]",
          "3211: static int hf_he_ndp_annc_partial_bw_info = -1;",
          "",
          "[Added Lines]",
          "3217: static int hf_he_ndp_annc_ru_start = -1;",
          "3218: static int hf_he_ndp_annc_ru_end = -1;",
          "3223: static int hf_he_qtp_control = -1;",
          "3224: static int hf_he_qtp_setup_quiet_period_duration = -1;",
          "3225: static int hf_he_qtp_setup_srv_specific_identif = -1;",
          "3226: static int hf_he_qtp_request_dialog_token = -1;",
          "3227: static int hf_he_qtp_request_quiet_period_offset = -1;",
          "3228: static int hf_he_qtp_request_quiet_period_duration = -1;",
          "3229: static int hf_he_qtp_request_quiet_period_interval = -1;",
          "3230: static int hf_he_qtp_request_repetition_count = -1;",
          "3231: static int hf_he_qtp_request_srv_specific_identif = -1;",
          "3232: static int hf_he_qtp_response_dialog_token = -1;",
          "3233: static int hf_he_qtp_response_status_code = -1;",
          "3234: static int hf_he_qtp_response_quiet_period_offset = -1;",
          "3235: static int hf_he_qtp_response_quiet_period_duration = -1;",
          "3236: static int hf_he_qtp_response_quiet_period_interval = -1;",
          "3237: static int hf_he_qtp_response_repetition_count = -1;",
          "3238: static int hf_he_qtp_response_srv_specific_identif = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3770: static int hf_ieee80211_block_ack_control_type = -1;",
          "3771: static int hf_ieee80211_block_ack_control_reserved = -1;",
          "3772: static int hf_ieee80211_block_ack_control_tid_info = -1;",
          "3780: static int hf_ieee80211_block_ack_multi_tid_reserved = -1;",
          "3781: static int hf_ieee80211_block_ack_multi_tid_value = -1;",
          "",
          "[Removed Lines]",
          "3773: static int hf_ieee80211_block_ack_multi_sta_aid11 = -1;",
          "3774: static int hf_ieee80211_block_ack_multi_sta_ack_type = -1;",
          "3775: static int hf_ieee80211_block_ack_multi_sta_tid = -1;",
          "3776: static int hf_ieee80211_block_ack_multi_sta_aid_tid = -1;",
          "3777: static int hf_ieee80211_block_ack_multi_sta_reserved = -1;",
          "3778: static int hf_ieee80211_block_ack_multi_sta_ra = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3783: static int hf_ieee80211_block_ack_bitmap_missing_frame = -1;",
          "3784: static int hf_ieee80211_block_ack_gcr_addr = -1;",
          "3786: static int hf_ieee80211_tag_measure_request_measurement_mode = -1;",
          "3787: static int hf_ieee80211_tag_measure_request_bssid = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3803: static int hf_ieee80211_block_ack_multi_sta_aid11 = -1;",
          "3804: static int hf_ieee80211_block_ack_multi_sta_ack_type = -1;",
          "3805: static int hf_ieee80211_block_ack_multi_sta_tid = -1;",
          "3806: static int hf_ieee80211_block_ack_multi_sta_aid_tid = -1;",
          "3807: static int hf_ieee80211_block_ack_multi_sta_reserved = -1;",
          "3808: static int hf_ieee80211_block_ack_multi_sta_ra = -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4117: static int hf_ieee80211_tag_dfs_channel_map = -1;",
          "4118: static int hf_ieee80211_tag_dfs_channel_number = -1;",
          "4119: static int hf_ieee80211_tag_dfs_map = -1;",
          "4127: static int hf_ieee80211_tag_erp_info = -1;",
          "4128: static int hf_ieee80211_tag_erp_info_erp_present = -1;",
          "",
          "[Removed Lines]",
          "4120: static int hf_ieee80211_tag_dfs_map_bss = -1;",
          "4121: static int hf_ieee80211_tag_dfs_map_ofdm_preamble = -1;",
          "4122: static int hf_ieee80211_tag_dfs_map_unidentified_signal = -1;",
          "4123: static int hf_ieee80211_tag_dfs_map_radar = -1;",
          "4124: static int hf_ieee80211_tag_dfs_map_unmeasured = -1;",
          "4125: static int hf_ieee80211_tag_dfs_map_reserved = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4260: static int hf_ieee80211_vht_mcsset_rx_max_mcs_for_8_ss = -1;",
          "4262: static int hf_ieee80211_vht_mcsset_max_nsts_total = -1;",
          "4266: static int hf_ieee80211_vht_mcsset_rx_highest_long_gi = -1;",
          "4268: static int hf_ieee80211_vht_mcsset_tx_mcs_map = -1;",
          "4269: static int hf_ieee80211_vht_mcsset_tx_max_mcs_for_1_ss = -1;",
          "",
          "[Removed Lines]",
          "4263: static int hf_ieee80211_vht_mcsset_ext_nss_bw_cap = -1;",
          "4264: static int hf_ieee80211_vht_mcsset_reserved = -1;",
          "",
          "[Added Lines]",
          "4282: static int hf_ieee80211_vht_mcsset_extended_nss_bw_capable = -1;",
          "4283: static int hf_ieee80211_vht_mcsset_reserved = -1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4349: static int hf_ieee80211_vht_membership_status_field = -1;",
          "4350: static int hf_ieee80211_vht_user_position_field = -1;",
          "4351: static int hf_ieee80211_vht_mu_exclusive_beamforming_report = -1;",
          "4353: static int hf_ieee80211_vht_compressed_beamforming_phi_angle = -1;",
          "4354: static int hf_ieee80211_vht_compressed_beamforming_psi_angle = -1;",
          "4356: static int hf_ieee80211_ff_he_action = -1;",
          "4357: static int hf_he_mimo_control_nc_index = -1;",
          "4358: static int hf_he_mimo_control_nr_index = -1;",
          "4359: static int hf_he_mimo_control_bw = -1;",
          "",
          "[Removed Lines]",
          "4352: static int hf_ieee80211_vht_mu_Exclusive_beamforming_delta_snr = -1;",
          "",
          "[Added Lines]",
          "4369: static int hf_ieee80211_vht_mu_exclusive_beamforming_delta_snr = -1;",
          "4374: static int hf_ieee80211_ff_protected_he_action = -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4367: static int hf_he_mimo_control_sounding_dialog_token_num = -1;",
          "4368: static int hf_he_mimo_control_reserved = -1;",
          "4369: static int hf_ieee80211_he_mimo_control_field = -1;",
          "4371: static int hf_ieee80211_tag_neighbor_report_bssid = -1;",
          "4372: static int hf_ieee80211_tag_neighbor_report_bssid_info = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4388: static int hf_ieee80211_he_compressed_beamforming_report_snr = -1;",
          "4389: static int hf_ieee80211_he_compressed_beamform_scidx = -1;",
          "4390: static int hf_ieee80211_beamforming_report_len = -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5343: static int hf_he_multi_tid_aggregation_support = -1;",
          "5344: static int hf_he_he_link_adaptation_support = -1;",
          "5345: static int hf_he_all_ack_support = -1;",
          "5347: static int hf_he_bsr_support = -1;",
          "5348: static int hf_he_broadcast_twt_support = -1;",
          "5349: static int hf_he_32_bit_ba_bitmap_support = -1;",
          "5350: static int hf_he_mu_cascading_support = -1;",
          "5351: static int hf_he_ack_enabled_aggregation_support = -1;",
          "5353: static int hf_he_om_control_support = -1;",
          "5354: static int hf_he_ofdma_ra_support = -1;",
          "5356: static int hf_he_a_msdu_fragmentation_support = -1;",
          "5357: static int hf_he_flexible_twt_schedule_support = -1;",
          "5358: static int hf_he_rx_control_frame_to_multibss = -1;",
          "5359: static int hf_he_bsrp_bqrp_a_mpdu_aggregation = -1;",
          "5360: static int hf_he_qtp_support = -1;",
          "5361: static int hf_he_bqr_support = -1;",
          "5363: static int hf_he_ndp_feedback_report_support = -1;",
          "5364: static int hf_he_ops_support = -1;",
          "5365: static int hf_he_a_msdu_in_a_mpdu_support = -1;",
          "5366: static int hf_he_reserved = -1;",
          "5367: static int hf_he_reserved_bit_18 = -1;",
          "5368: static int hf_he_reserved_bit_19 = -1;",
          "",
          "[Removed Lines]",
          "5346: static int hf_he_umrs_support = -1;",
          "5352: static int hf_he_group_addressed_multi_sta_blkack_support = -1;",
          "5355: static int hf_he_max_a_mpdu_length_exponent = -1;",
          "5362: static int hf_he_sr_responder = -1;",
          "",
          "[Added Lines]",
          "5367: static int hf_he_trs_support = -1;",
          "5373: static int hf_he_reserved_b24 = -1;",
          "5376: static int hf_he_max_a_mpdu_length_exponent_ext = -1;",
          "5383: static int hf_he_srp_responder = -1;",
          "5387: static int hf_he_multi_tid_aggregation_tx_support = -1;",
          "5388: static int hf_he_subchannel_selective_trans_support = -1;",
          "5389: static int hf_he_2_996_tone_ru_support = -1;",
          "5390: static int hf_he_om_control_ul_mu_data_disable_rx_support = -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5370: static int hf_he_reserved_bits_5_7 = -1;",
          "5371: static int hf_he_reserved_bits_8_9 = -1;",
          "5372: static int hf_he_reserved_bits_15_16 = -1;",
          "5373: static int hf_he_phy_chan_width_set = -1;",
          "5374: static int hf_he_40mhz_channel_2_4ghz = -1;",
          "5375: static int hf_he_40_and_80_mhz_5ghz = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5398: static int hf_he_phy_reserved_b0 = -1;",
          "5399: static int hf_he_phy_cap_reserved_b0 = -1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5436: static int hf_he_ppe_thresholds_ru_index_bitmask = -1;",
          "5437: static int hf_he_ppe_ppet16 = -1;",
          "5438: static int hf_he_ppe_ppet8 = -1;",
          "5441: static int hf_he_phy_b8_to_b23 = -1;",
          "5442: static int hf_he_phy_cap_punctured_preamble_rx = -1;",
          "5443: static int hf_he_phy_cap_device_class = -1;",
          "",
          "[Removed Lines]",
          "5439: static int hf_he_phy_dual_band_support = -1;",
          "5440: static int hf_he_phy_cap_dual_band_support = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5488: static int hf_he_phy_cap_80mgz_in_160_80p80_ppdu = -1;",
          "5489: static int hf_he_phy_cap_he_er_su_ppdu_1xxx_gi = -1;",
          "5490: static int hf_he_phy_cap_midamble_rx_2x_xxx_ltf = -1;",
          "5492: static int hf_he_operation_parameter = -1;",
          "5494: static int hf_he_operation_default_pe_duration = -1;",
          "5495: static int hf_he_operation_twt_required = -1;",
          "5496: static int hf_he_operation_txop_duration_rts_threshold = -1;",
          "5498: static int hf_he_operation_vht_operation_information_present = -1;",
          "5504: static int hf_he_operation_basic_mcs = -1;",
          "5505: static int hf_he_oper_max_he_mcs_for_1_ss = -1;",
          "5506: static int hf_he_oper_max_he_mcs_for_2_ss = -1;",
          "",
          "[Removed Lines]",
          "5491: static int hf_he_phy_cap_b70_b71_reserved = -1;",
          "5493: static int hf_he_operation_bss_color = -1;",
          "5497: static int hf_he_operation_partial_bss_color = -1;",
          "5499: static int hf_he_operation_reserved_b22_b27 = -1;",
          "5500: static int hf_he_operation_multiple_bssid_ap = -1;",
          "5501: static int hf_he_operation_txbssid_indicator = -1;",
          "5502: static int hf_he_operation_bss_color_disabled = -1;",
          "5503: static int hf_he_operation_reserved_b31 = -1;",
          "",
          "[Added Lines]",
          "5516: static int hf_he_phy_b72_to_b87 = -1;",
          "5517: static int hf_he_phy_cap_dcm_max_bw = -1;",
          "5518: static int hf_he_phy_cap_longer_than_16_he_sigb_ofdm_symbol_support = -1;",
          "5519: static int hf_he_phy_cap_non_triggered_cqi_feedback = -1;",
          "5520: static int hf_he_phy_cap_tx_1024_qam_242_tone_ru_support = -1;",
          "5521: static int hf_he_phy_cap_rx_1024_qam_242_tone_ru_support = -1;",
          "5522: static int hf_rx_full_bw_su_using_he_muppdu_w_compressed_sigb = -1;",
          "5523: static int hf_rx_full_bw_su_using_he_muppdu_w_non_compressed_sigb = -1;",
          "5524: static int hf_he_phy_cap_b78_b87_reserved = -1;",
          "5530: static int hf_he_operation_co_located_bss = -1;",
          "5531: static int hf_he_operation_er_su_disable = -1;",
          "5532: static int hf_he_operation_reserved_b17_b23 = -1;",
          "5533: static int hf_he_bss_color_information = -1;",
          "5534: static int hf_he_bss_color_info_bss_color = -1;",
          "5535: static int hf_he_bss_color_partial_bss_color = -1;",
          "5536: static int hf_he_bss_color_bss_color_disabled = -1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5513: static int hf_he_operation_channel_width = -1;",
          "5514: static int hf_he_operation_channel_center_freq_0 = -1;",
          "5515: static int hf_he_operation_channel_center_freq_1 = -1;",
          "5517: static int hf_he_muac_aci_aifsn = -1;",
          "5518: static int hf_he_mu_edca_timer = -1;",
          "5519: static int hf_he_muac_ecwmin_ecwmax = -1;",
          "5520: static int hf_he_srp_disallowed = -1;",
          "",
          "[Removed Lines]",
          "5516: static int hf_he_operation_max_bssid_indicator = -1;",
          "",
          "[Added Lines]",
          "5549: static int hf_he_operation_max_colocated_bssid_indicator = -1;",
          "5551: static int hf_he_muac_aifsn = -1;",
          "5552: static int hf_he_muac_acm = -1;",
          "5553: static int hf_he_muac_aci = -1;",
          "5554: static int hf_he_muac_reserved = -1;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5639: static gint ett_htc_he_a_control = -1;",
          "5640: static gint ett_mfb_subtree = -1;",
          "5641: static gint ett_lac_subtree = -1;",
          "5645: static gint ett_ieee80211_buffer_status_report = -1;",
          "5646: static gint ett_ieee80211_control_uph = -1;",
          "5648: static gint ett_ieee80211_control_cci = -1;",
          "5650: static gint ett_vht_cap_tree = -1;",
          "",
          "[Removed Lines]",
          "5642: static gint ett_ieee80211_umrs_control = -1;",
          "5643: static gint ett_ieee80211_om_control = -1;",
          "5644: static gint ett_ieee80211_hla_control = -1;",
          "5647: static gint ett_ieee80211_bqr_control = -1;",
          "",
          "[Added Lines]",
          "5680: static gint ett_ieee80211_ul_mu_response_schedule = -1;",
          "5681: static gint ett_ieee80211_control_om = -1;",
          "5682: static gint ett_ieee80211_hla_control = -1;",
          "5684: static gint ett_ieee80211_buffer_control_bqr = -1;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5659: static gint ett_vht_ndp_annc_sta_info_tree = -1;",
          "5660: static gint ett_vht_ndp_annc_sta_list = -1;",
          "5664: static gint ett_ff_vhtmimo_cntrl = -1;",
          "5665: static gint ett_ff_vhtmimo_beamforming_report = -1;",
          "",
          "[Removed Lines]",
          "5662: static gint ett_he_mimo_control = -1;",
          "",
          "[Added Lines]",
          "5699: static gint ett_ff_he_action = -1;",
          "5700: static gint ett_ff_protected_he_action = -1;",
          "5701: static gint ett_ff_he_mimo_control = -1;",
          "5702: static gint ett_ff_he_mimo_beamforming_report_snr = -1;",
          "5703: static gint ett_ff_he_mimo_feedback_matrices = -1;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5872: static gint ett_he_phy_cap_b24_to_b39 = -1;",
          "5873: static gint ett_he_phy_cap_b40_to_b55 = -1;",
          "5874: static gint ett_he_phy_cap_b56_to_b71 = -1;",
          "5875: static gint ett_he_mcs_and_nss_set = -1;",
          "5876: static gint ett_he_rx_tx_he_mcs_map_lte_80 = -1;",
          "5877: static gint ett_he_rx_mcs_map_lte_80 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5916: static gint ett_he_phy_cap_b72_to_b87 = -1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5886: static gint ett_he_ppe_nss = -1;",
          "5887: static gint ett_he_ppe_ru_alloc = -1;",
          "5888: static gint ett_he_uora_tree = -1;",
          "5889: static gint ett_he_spatial_reuse_control = -1;",
          "5890: static gint ett_he_bss_new_color_info = -1;",
          "5891: static gint ett_he_ess_report_info_field = -1;",
          "5892: static gint ett_he_operation_params = -1;",
          "5893: static gint ett_he_oper_basic_mcs = -1;",
          "5894: static gint ett_he_operation_vht_op_info = -1;",
          "5895: static gint ett_he_mu_edca_param = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5931: static gint ett_he_aic_aifsn = -1;",
          "5936: static gint ett_he_bss_color_information = -1;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "11313:           pos = 1;",
          "11314:           len = 0;",
          "11315:         }",
          "11317:                                       offset - pos, 1, \"Delta SNR for space-time stream %d for subcarrier %d\", ic, sscidx);",
          "11318:         offset += len;",
          "11319:         carry ++;",
          "",
          "[Removed Lines]",
          "11316:         proto_tree_add_none_format(vht_excl_beam_tree, hf_ieee80211_vht_mu_Exclusive_beamforming_delta_snr, tvb,",
          "",
          "[Added Lines]",
          "11360:         proto_tree_add_none_format(vht_excl_beam_tree, hf_ieee80211_vht_mu_exclusive_beamforming_delta_snr, tvb,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "11514: #define HE_COMPRESSED_BEAMFORMING_AND_CQI 0",
          "11515: #define HE_QUIET_TIME_PERIOD              1",
          "11520:   { 0, NULL }",
          "11521: };",
          "11526: {",
          "11533: }",
          "11535: static const int *he_mimo_control_headers[] = {",
          "",
          "[Removed Lines]",
          "11517: static const value_string he_action_vals[] = {",
          "11518:   { HE_COMPRESSED_BEAMFORMING_AND_CQI, \"HE Compressed Beamforming And CQI\" },",
          "11519:   { HE_QUIET_TIME_PERIOD,              \"Quiet Time Period\" },",
          "11523: static guint",
          "11524: add_ff_he_action(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_,",
          "11525:   int offset)",
          "11527:   guint8 he_action = tvb_get_guint8(tvb, offset);",
          "11529:   proto_tree_add_uint_format(tree, hf_ieee80211_ff_he_action, tvb, offset, 1,",
          "11530:                       he_action, \"%s\", val_to_str(he_action, he_action_vals,",
          "11531:                                                 \"Reserved\"));",
          "11532:   return 1;",
          "",
          "[Added Lines]",
          "11561: static const range_string he_action_rvals[] = {",
          "11562:   { HE_COMPRESSED_BEAMFORMING_AND_CQI, HE_COMPRESSED_BEAMFORMING_AND_CQI,",
          "11563:         \"HE Compressed Beamforming And CQI\" },",
          "11564:   { HE_QUIET_TIME_PERIOD, HE_QUIET_TIME_PERIOD,",
          "11565:         \"Quiet Time Period\" },",
          "11566:   { HE_QUIET_TIME_PERIOD + 1, 255, \"Reserved\" },",
          "11567:   { 0, 0, NULL }",
          "11568: };",
          "11570: #define HE_BSS_COLOR_CHANGE_ANNOUNCEMENT  0",
          "11572: static const value_string protected_he_action_vals[] = {",
          "11573:   { HE_BSS_COLOR_CHANGE_ANNOUNCEMENT, \"HE BSS Color Change Announcement\" },",
          "11580: struct scidx_start_end {",
          "11581:   int start;",
          "11582:   int end;",
          "11583: };",
          "11585: static const struct scidx_start_end scidx_20MHz_Ng4[9] = {",
          "11586:   { -122, -96 },",
          "11587:   { -96, -68 },",
          "11588:   { -68, -40 },",
          "11589:   { -44, -16 },",
          "11590:   { -16, 16 },",
          "11591:   { 16, 44 },",
          "11592:   { 40, 68 },",
          "11593:   { 68, 96 },",
          "11594:   { 96, 122 }",
          "11595: };",
          "11597: static const struct scidx_start_end scidx_20MHz_Ng16[9] = {",
          "11598:   { -122, -84 },",
          "11599:   { -96, -64 },",
          "11600:   { -80, -32 },",
          "11601:   { -52, -4 },",
          "11602:   { -20, 20 },",
          "11603:   { 4, 52 },",
          "11604:   { 32, 80 },",
          "11605:   { 64, 96 },",
          "11606:   { 84, 122 }",
          "11607: };",
          "11609: static const struct scidx_start_end scidx_40MHz_Ng4[18] = {",
          "11610:   { -500 + 256, -472 + 256 },",
          "11611:   { -476 + 256, -448 + 256 },",
          "11612:   { -488 + 256, -420 + 256 },",
          "11613:   { -420 + 256, -392 + 256 },",
          "11614:   { -392 + 256, -364 + 256 },",
          "11615:   { -368 + 256, -340 + 256 },",
          "11616:   { -340 + 256, -312 + 256 },",
          "11617:   { -312 + 256, -284 + 256 },",
          "11618:   { -288 + 256, -260 + 256 },",
          "11619:   {  260 - 256,  288 - 256 },",
          "11620:   {  284 - 256,  312 - 256 },",
          "11621:   {  312 - 256,  340 - 256 },",
          "11622:   {  340 - 256,  368 - 256 },",
          "11623:   {  364 - 256,  392 - 256 },",
          "11624:   {  392 - 256,  420 - 256 },",
          "11625:   {  420 - 256,  448 - 256 },",
          "11626:   {  448 - 256,  476 - 256 },",
          "11627:   {  472 - 256,  500 - 256 }",
          "11628: };",
          "11630: static const struct scidx_start_end scidx_40MHz_Ng16[18] = {",
          "11631:   { -500 + 256, -468 + 256 },",
          "11632:   { -484 + 256, -436 + 256 },",
          "11633:   { -452 + 256, -420 + 256 },",
          "11634:   { -420 + 256, -388 + 256 },",
          "11635:   { -404 + 256, -356 + 256 },",
          "11636:   { -372 + 256, -340 + 256 },",
          "11637:   { -340 + 256, -308 + 256 },",
          "11638:   { -324 + 256, -276 + 256 },",
          "11639:   { -292 + 256, -260 + 245 },",
          "11640:   {  260 - 256,  292 - 256 },",
          "11641:   {  276 - 256,  324 - 256 },",
          "11642:   {  308 - 256,  340 - 256 },",
          "11643:   {  340 - 256,  322 - 256 },",
          "11644:   {  356 - 256,  404 - 256 },",
          "11645:   {  388 - 256,  420 - 256 },",
          "11646:   {  420 - 256,  452 - 256 },",
          "11647:   {  436 - 256,  484 - 256 },",
          "11648:   {  468 - 256,  500 - 256 }",
          "11649: };",
          "11651: static const struct scidx_start_end scidx_80MHz_Ng4[37] = {",
          "11652:   { -500, -472 },",
          "11653:   { -476, -448 },",
          "11654:   { -448, -420 },",
          "11655:   { -420, -392 },",
          "11656:   { -392, -364 },",
          "11657:   { -368, -340 },",
          "11658:   { -340, -312 },",
          "11659:   { -312, -284 },",
          "11660:   { -288, -260 },",
          "11661:   { -260, -232 },",
          "11662:   { -232, -204 },",
          "11663:   { -204, -176 },",
          "11664:   { -180, -152 },",
          "11665:   { -152, -124 },",
          "11666:   { -124,  -96 },",
          "11667:   { -100,  -72 },",
          "11668:   {  -72,  -44 },",
          "11669:   {  -44,  -16 },",
          "11670:   {  -16,   16 },",
          "11671:   {   16,   44 },",
          "11672:   {   44,   72 },",
          "11673:   {   72,  100 },",
          "11674:   {   96,  124 },",
          "11675:   {  124,  152 },",
          "11676:   {  152,  180 },",
          "11677:   {  176,  204 },",
          "11678:   {  204,  232 },",
          "11679:   {  232,  260 },",
          "11680:   {  260,  288 },",
          "11681:   {  284,  312 },",
          "11682:   {  312,  340 },",
          "11683:   {  340,  368 },",
          "11684:   {  364,  392 },",
          "11685:   {  392,  420 },",
          "11686:   {  420,  448 },",
          "11687:   {  448,  476 },",
          "11688:   {  472,  500 }",
          "11689: };",
          "11691: static const struct scidx_start_end scidx_80MHz_Ng16[37] = {",
          "11692:   { -500, -468 },",
          "11693:   { -484, -436 },",
          "11694:   { -452, -420 },",
          "11695:   { -420, -388 },",
          "11696:   { -404, -356 },",
          "11697:   { -372, -340 },",
          "11698:   { -340, -308 },",
          "11699:   { -324, -276 },",
          "11700:   { -292, -260 },",
          "11701:   { -260, -228 },",
          "11702:   { -244, -196 },",
          "11703:   { -212, -164 },",
          "11704:   { -180, -148 },",
          "11705:   { -164, -116 },",
          "11706:   { -132,  -84 },",
          "11707:   { -100,  -68 },",
          "11708:   {  -84,  -36 },",
          "11709:   {  -52,   -4 },",
          "11710:   {  -20,   20 },",
          "11711:   {    4,   52 },",
          "11712:   {   36,   84 },",
          "11713:   {   68,  100 },",
          "11714:   {   84,  132 },",
          "11715:   {  116,  164 },",
          "11716:   {  148,  180 },",
          "11717:   {  164,  212 },",
          "11718:   {  196,  244 },",
          "11719:   {  228,  260 },",
          "11720:   {  260,  292 },",
          "11721:   {  276,  324 },",
          "11722:   {  308,  340 },",
          "11723:   {  340,  372 },",
          "11724:   {  356,  404 },",
          "11725:   {  388,  420 },",
          "11726:   {  420,  452 },",
          "11727:   {  436,  484 },",
          "11728:   {  468,  500 },",
          "11729: };",
          "11731: #define SU_FEEDBACK (0)",
          "11732: #define MU_FEEDBACK (1)",
          "11733: #define CQI_FEEDBACK (2)",
          "11734: #define RESERVED_FEEDBACK (3)",
          "11736: #define BW_20MHz (0)",
          "11737: #define BW_40MHz (1)",
          "11738: #define BW_80MHz (2)",
          "11739: #define BW_160MHz (3)",
          "11741: #define SCIDX_END_SENTINAL (0x80000000)",
          "11743: static int",
          "11744: next_he_scidx(int scidx, int bw _U_, int grouping _U_, int feedback _U_,",
          "11745:               int ru_start_index, int ru_end_index)",
          "11747:   int incr = 4;",
          "11753:   switch (bw) {",
          "11754:   case BW_20MHz:",
          "11755:     if (grouping == 0) {",
          "11757:         return SCIDX_END_SENTINAL;",
          "11758:     } else {",
          "11759:       if (scidx == scidx_20MHz_Ng16[ru_end_index].end)",
          "11760:         return SCIDX_END_SENTINAL;",
          "11761:     }",
          "11762:     break;",
          "11763:   case BW_40MHz:",
          "11764:     if (grouping == 0) {",
          "11765:       if (scidx == scidx_40MHz_Ng4[ru_end_index].end)",
          "11766:         return SCIDX_END_SENTINAL;",
          "11767:     } else {",
          "11768:       if (scidx == scidx_40MHz_Ng16[ru_end_index].end)",
          "11769:         return SCIDX_END_SENTINAL;",
          "11770:     }",
          "11771:     break;",
          "11772:   case BW_80MHz:",
          "11773:     if (grouping == 0) {",
          "11774:       if (scidx == scidx_80MHz_Ng4[ru_end_index].end)",
          "11775:         return SCIDX_END_SENTINAL;",
          "11776:     } else {",
          "11777:       if (scidx == scidx_80MHz_Ng16[ru_end_index].end)",
          "11778:         return SCIDX_END_SENTINAL;",
          "11779:     }",
          "11780:     break;",
          "11781:   case BW_160MHz:",
          "11782:     return SCIDX_END_SENTINAL;",
          "11783:   }",
          "11789:   if (scidx == (int)SCIDX_END_SENTINAL)",
          "11790:     switch (bw) {",
          "11791:     case BW_20MHz:",
          "11792:       if (grouping == 0)",
          "11793:         return scidx_20MHz_Ng4[ru_start_index].start;",
          "11794:       else",
          "11795:         return scidx_20MHz_Ng16[ru_start_index].start;",
          "11796:     case BW_40MHz:",
          "11797:       if (grouping == 0)",
          "11798:         return scidx_40MHz_Ng4[ru_start_index].start;",
          "11799:       else",
          "11800:         return scidx_40MHz_Ng16[ru_start_index].start;",
          "11801:     case BW_80MHz:",
          "11802:       if (grouping == 0)",
          "11803:         return scidx_80MHz_Ng4[ru_start_index].start;",
          "11804:       else",
          "11805:         return scidx_80MHz_Ng16[ru_start_index].start;;",
          "11806:     case BW_160MHz:",
          "11807:       return SCIDX_END_SENTINAL;",
          "11808:   }",
          "11814:   if (bw == BW_20MHz) {",
          "11815:     if (grouping == 0) {",
          "11816:       if (scidx == -122)",
          "11817:         return -120;",
          "11818:       if (scidx == -4)",
          "11819:         return -2;",
          "11820:       if (scidx == 2)",
          "11821:         return 4;",
          "11822:       if (scidx == 120)",
          "11823:         return 122;",
          "11824:     } else {",
          "11825:       if (scidx == -122)",
          "11826:         return -116;",
          "11827:       if (scidx == -4)",
          "11828:         return -2;",
          "11829:       if (scidx == -2)",
          "11830:         return 2;",
          "11831:       if (scidx == 2)",
          "11832:         return 4;",
          "11833:       if (scidx == 116)",
          "11834:         return 122;",
          "11835:     }",
          "11836:   }",
          "11838:   if (grouping == 1)",
          "11839:     incr = 16;",
          "11841:   scidx += incr;",
          "11844:     scidx += incr;",
          "11846:   return scidx;",
          "11847: }",
          "11853: static guint16",
          "11854: he_get_bits(tvbuff_t *tvb, int bit_offset, int bit_len)",
          "11855: {",
          "11856:   guint32 bits;",
          "11857:   int byte_offset = bit_offset / 8;",
          "11858:   int bit_start = bit_offset % 8;",
          "11860:   int remaining_length = tvb_reported_length_remaining(tvb, byte_offset);",
          "11862:   if (remaining_length >= 3)",
          "11863:     bits = tvb_get_letoh24(tvb, byte_offset);",
          "11864:   else if (remaining_length == 2)",
          "11865:     bits = tvb_get_letohs(tvb, byte_offset);",
          "11866:   else",
          "11867:     bits = tvb_get_guint8(tvb, byte_offset);",
          "11869:   bits = bits >> bit_start;",
          "11871:   return bits & bit_mask;",
          "11872: }",
          "11874: static int",
          "11875: dissect_he_feedback_matrix(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "11876:                            int bit_offset, int scidx, int nr, int nc,",
          "11877:                            int phi_bits, int psi_bits)",
          "11878: {",
          "11879:   int ri, ci;",
          "11880:   proto_item *pi = NULL;",
          "11881:   int start_bit_offset = bit_offset;",
          "11884:     nc -= 1;",
          "11889:   for (ci = 1; ci <= nc; ci++) {",
          "11890:     for (ri = ci; ri < nr; ri++) {",
          "11891:       bit_offset += phi_bits;",
          "11892:     }",
          "11893:     for (ri = ci + 1; ri <= nr; ri++) {",
          "11894:       bit_offset += psi_bits;",
          "11895:     }",
          "11896:   }",
          "11898:   pi = proto_tree_add_int_format(tree, hf_ieee80211_he_compressed_beamform_scidx,",
          "11899:                 tvb, offset, ((bit_offset + 7) / 8) - offset, scidx,",
          "11900:                 \"SCIDX: %d\", scidx);",
          "11903:   bit_offset = start_bit_offset;",
          "11905:   for (ci = 1; ci <= nc; ci++) {",
          "11906:     for (ri = ci; ri < nr; ri++) {",
          "11907:       int angle = he_get_bits(tvb, bit_offset, phi_bits);",
          "11908:       proto_item_append_text(pi, \", phi%d%d:%d\", ri, ci, angle);",
          "11909:       bit_offset += phi_bits;",
          "11910:     }",
          "11911:     for (ri = ci + 1; ri <= nr; ri++) {",
          "11912:       int angle = he_get_bits(tvb, bit_offset, psi_bits);",
          "11913:       proto_item_append_text(pi, \", psi%d%d:%d\", ri, ci, angle);",
          "11914:       bit_offset += psi_bits;",
          "11915:     }",
          "11916:   }",
          "11918:   return bit_offset;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "11548:   NULL",
          "11549: };",
          "11551: static guint",
          "11552: add_ff_action_he(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset)",
          "11553: {",
          "11554:   guint start = offset;",
          "11555:   guint8 he_action;",
          "11557:   offset += add_ff_category_code(tree, tvb, pinfo, offset);",
          "11559:   he_action = tvb_get_guint8(tvb, offset);",
          "11562:   switch (he_action) {",
          "11563:   case HE_COMPRESSED_BEAMFORMING_AND_CQI:",
          "11569:     break;",
          "11570:   case HE_QUIET_TIME_PERIOD:",
          "11572:     break;",
          "11573:   default:",
          "11574:     break;",
          "11575:   }",
          "11576:   return offset - start;",
          "11577: }",
          "",
          "[Removed Lines]",
          "11560:   offset += add_ff_he_action(tree, tvb, pinfo, offset);",
          "11564:     proto_tree_add_bitmask_with_flags(tree, tvb, offset,",
          "11565:                         hf_ieee80211_he_mimo_control_field, ett_he_mimo_control,",
          "11566:                         he_mimo_control_headers, ENC_LITTLE_ENDIAN,",
          "11567:                         BMT_NO_APPEND);",
          "11568:     offset += 5;",
          "",
          "[Added Lines]",
          "11937: static guint",
          "11938: dissect_compressed_beamforming_and_cqi(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "11939: {",
          "11940:   int byte_count = 0;",
          "11941:   guint64 mimo_cntl = tvb_get_letoh40(tvb, offset);",
          "11942:   int nc = 0, nr = 0, i;",
          "11943:   int bw, grouping, codebook, feedback, bit_offset, scidx;",
          "11944:   int phi_bits = 0, psi_bits = 0;",
          "11945:   proto_tree *snr_tree = NULL, *feedback_tree = NULL;",
          "11946:   int start_offset;",
          "11947:   int ru_start_index, ru_end_index;",
          "11949:   nc = (mimo_cntl & 0x07) + 1;",
          "11950:   nr = ((mimo_cntl >> 3) & 0x07) + 1;",
          "11951:   bw = (mimo_cntl >> 6) & 0x03;",
          "11952:   grouping = (mimo_cntl >> 8) & 0x01;",
          "11953:   codebook = (mimo_cntl >> 9) & 0x01;",
          "11954:   feedback = (mimo_cntl >> 10) & 0x03;",
          "11955:   ru_start_index = (mimo_cntl >> 16) & 0x7F;",
          "11956:   ru_end_index = (mimo_cntl >> 23) & 0x7F;",
          "11958:   proto_tree_add_bitmask_with_flags(tree, tvb, offset,",
          "11959:     hf_ieee80211_he_mimo_control_field, ett_ff_he_mimo_control,",
          "11960:     he_mimo_control_headers, ENC_LITTLE_ENDIAN,",
          "11961:     BMT_NO_APPEND);",
          "11962:   offset += 5;",
          "11964:   snr_tree = proto_tree_add_subtree(tree, tvb, offset, nc,",
          "11965:                 ett_ff_he_mimo_beamforming_report_snr, NULL,",
          "11966:                 \"Average Signal to Noise Ratio\");",
          "11968:   for (i = 0; i < nc; i++) {",
          "11969:     gint8 snr = tvb_get_guint8(tvb, offset);",
          "11971:     proto_tree_add_uint_format(snr_tree,",
          "11972:         hf_ieee80211_he_compressed_beamforming_report_snr, tvb, offset, 1,",
          "11973:         snr, \"Stream %d: %s%0.2fdB (0x%02x)\", i, (snr == 127 ? \">=\" :",
          "11974:                                                   (snr == -128 ? \"<=\" : \"\")),",
          "11975:                                              (float)((float)88 + snr)/4,",
          "11976:                                              (guint8)snr);",
          "11977:     offset++;",
          "11978:   }",
          "11990:     if (codebook == 0) {",
          "11991:       phi_bits = 2; psi_bits = 4;",
          "11992:     } else {",
          "11993:       phi_bits = 4; psi_bits = 6;",
          "11994:     }",
          "11996:     if (grouping == 1) {",
          "11997:       phi_bits = 9; psi_bits = 7;",
          "11998:     } else {",
          "11999:       if (codebook == 0) {",
          "12000:         phi_bits = 5; psi_bits = 7;",
          "12001:       } else {",
          "12002:         phi_bits = 7; psi_bits = 9;",
          "12003:       }",
          "12004:     }",
          "12007:   feedback_tree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "12008:                         ett_ff_he_mimo_feedback_matrices, NULL,",
          "12009:                         \"Feedback Matrices\");",
          "12011:   start_offset = offset;",
          "12012:   bit_offset = offset * 8;",
          "12013:   scidx = SCIDX_END_SENTINAL;",
          "12014:   while ((scidx = next_he_scidx(scidx, bw, grouping, feedback,",
          "12015:           ru_start_index, ru_end_index)) != (int)SCIDX_END_SENTINAL) {",
          "12016:     bit_offset = dissect_he_feedback_matrix(feedback_tree, tvb, offset,",
          "12017:                         bit_offset, scidx, nr, nc, phi_bits, psi_bits);",
          "12018:     offset = bit_offset / 8;",
          "12019:   }",
          "12021:   offset = (bit_offset + 7) / 8;",
          "12022:   proto_item_set_len(feedback_tree, offset - start_offset);",
          "12025:   byte_count = tvb_reported_length_remaining(tvb, offset);",
          "12026:   if (byte_count > 0)",
          "12029:   return offset;",
          "12030: }",
          "12032: enum quiet_time_period_control {",
          "12033:   QTP_CONTROL_SETUP = 0,",
          "12034:   QTP_CONTROL_REQUEST = 1,",
          "12035:   QTP_CONTROL_RESPONSE = 2,",
          "12036: };",
          "12038: static const range_string quiet_time_period_control_rvals[] = {",
          "12039:   { QTP_CONTROL_SETUP,    QTP_CONTROL_SETUP,    \"Quiet Time Period Setup\" },",
          "12040:   { QTP_CONTROL_REQUEST,  QTP_CONTROL_REQUEST,  \"Quiet Time Period Request\" },",
          "12041:   { QTP_CONTROL_RESPONSE, QTP_CONTROL_RESPONSE, \"Quiet Time Period Response\" },",
          "12042:   { QTP_CONTROL_RESPONSE +1 , 255, \"Reserved\" },",
          "12043:   { 0, 0, NULL }",
          "12044: };",
          "12046: static void",
          "12047: dissect_bss_color_change(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "12048: proto_tree *tree, int offset, int len _U_);",
          "12050: static guint",
          "12051: dissect_quiet_time_period(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "12052: proto_tree *tree, int offset, int len _U_)",
          "12053: {",
          "12054:   guint8 control = tvb_get_guint8(tvb, offset);",
          "12056:   proto_tree_add_item(tree, hf_he_qtp_control, tvb, offset, 1, ENC_NA);",
          "12057:   offset += 1;",
          "12059:   switch (control)",
          "12060:   {",
          "12061:   case QTP_CONTROL_SETUP:",
          "12062:     proto_tree_add_item(tree, hf_he_qtp_setup_quiet_period_duration, tvb, offset,",
          "12063:                 1, ENC_NA);",
          "12064:     offset += 1;",
          "12065:     proto_tree_add_item(tree, hf_he_qtp_setup_srv_specific_identif, tvb, offset,",
          "12066:                 2, ENC_LITTLE_ENDIAN);",
          "12067:     offset += 2;",
          "12068:     break;",
          "12070:   case QTP_CONTROL_REQUEST:",
          "12071:     proto_tree_add_item(tree, hf_he_qtp_request_dialog_token, tvb, offset, 2,",
          "12072:                 ENC_LITTLE_ENDIAN);",
          "12073:     offset += 2;",
          "12074:     proto_tree_add_item(tree, hf_he_qtp_request_quiet_period_offset, tvb, offset,",
          "12075:                 1, ENC_NA);",
          "12076:     offset += 1;",
          "12077:     proto_tree_add_item(tree, hf_he_qtp_request_quiet_period_duration, tvb, offset,",
          "12078:                 2, ENC_LITTLE_ENDIAN);",
          "12079:     offset += 2;",
          "12080:     proto_tree_add_item(tree, hf_he_qtp_request_quiet_period_interval, tvb, offset,",
          "12081:                 1, ENC_NA);",
          "12082:     offset += 1;",
          "12083:     proto_tree_add_item(tree, hf_he_qtp_request_repetition_count, tvb, offset, 1,",
          "12084:                 ENC_NA);",
          "12085:     offset += 1;",
          "12086:     proto_tree_add_item(tree, hf_he_qtp_request_srv_specific_identif, tvb, offset,",
          "12087:                 2, ENC_LITTLE_ENDIAN);",
          "12088:     offset += 2;",
          "12089:     break;",
          "12091:   case QTP_CONTROL_RESPONSE:",
          "12092:     proto_tree_add_item(tree, hf_he_qtp_response_dialog_token, tvb, offset, 2,",
          "12093:                 ENC_LITTLE_ENDIAN);",
          "12094:     offset += 2;",
          "12095:     proto_tree_add_item(tree, hf_he_qtp_response_status_code, tvb, offset, 1,",
          "12096:                 ENC_NA);",
          "12097:     offset += 1;",
          "12098:     proto_tree_add_item(tree, hf_he_qtp_response_quiet_period_offset, tvb, offset,",
          "12099:                 1, ENC_NA);",
          "12100:     offset += 1;",
          "12101:     proto_tree_add_item(tree, hf_he_qtp_response_quiet_period_duration, tvb, offset,",
          "12102:                 2, ENC_LITTLE_ENDIAN);",
          "12103:     offset += 2;",
          "12104:     proto_tree_add_item(tree, hf_he_qtp_response_quiet_period_interval, tvb, offset,",
          "12105:                 1, ENC_NA);",
          "12106:     offset += 1;",
          "12107:     proto_tree_add_item(tree, hf_he_qtp_response_repetition_count, tvb, offset,",
          "12108:                 1, ENC_NA);",
          "12109:     offset += 1;",
          "12110:     proto_tree_add_item(tree, hf_he_qtp_response_srv_specific_identif, tvb, offset,",
          "12111:                 2, ENC_LITTLE_ENDIAN);",
          "12112:     offset += 2;",
          "12113:     break;",
          "12115:   default:",
          "12117:     break;",
          "12118:   }",
          "12120:   return offset;",
          "12121: }",
          "12128:   guint8 length;",
          "12130:   proto_item *item;",
          "12131:   proto_tree *subtree;",
          "12132:   unsigned int len = tvb_reported_length_remaining(tvb, offset);",
          "12138:   item = proto_tree_add_item(tree, hf_ieee80211_ff_he_action, tvb, offset, 1, ENC_NA);",
          "12139:   offset += 1;",
          "12141:   subtree = proto_item_add_subtree(item, ett_ff_he_action);",
          "12146:     proto_tree_add_uint_format(subtree, hf_ieee80211_beamforming_report_len,",
          "12147:         tvb, offset, 0, len, \"Total length: %u\", len);",
          "12148:     offset = dissect_compressed_beamforming_and_cqi(subtree, tvb, pinfo, offset);",
          "12153:     length = tvb_get_guint8(tvb, offset + 1);",
          "12158:     offset = dissect_quiet_time_period(tvb, pinfo, subtree, offset + 3, length);",
          "12159:     break;",
          "12161:   default:",
          "12163:   }",
          "12164:   return offset - start;",
          "12165: }",
          "12167: static guint",
          "12168: add_ff_action_protected_he(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset)",
          "12169: {",
          "12170:   guint start = offset;",
          "12171:   guint8 protected_he_action;",
          "12172:   guint8 length;",
          "12174:   proto_item *item;",
          "12175:   proto_tree *subtree;",
          "12177:   offset += add_ff_category_code(tree, tvb, pinfo, offset);",
          "12179:   protected_he_action = tvb_get_guint8(tvb, offset);",
          "12181:   item = proto_tree_add_item(tree, hf_ieee80211_ff_protected_he_action, tvb, offset,",
          "12182:         1, ENC_NA);",
          "12183:   offset += 1;",
          "12185:   subtree = proto_item_add_subtree(item, ett_ff_protected_he_action);",
          "12188:   switch (protected_he_action) {",
          "12189:   case HE_BSS_COLOR_CHANGE_ANNOUNCEMENT:",
          "12191:     length = tvb_get_guint8(tvb, offset + 1);",
          "12196:     dissect_bss_color_change(tvb, pinfo, subtree, offset + 3, length);",
          "12197:     offset += 5;",
          "12198:     break;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11775:     return add_ff_action_s1g(tree, tvb, pinfo, offset);",
          "11776:   case CAT_HE:",
          "11777:     return add_ff_action_he(tree, tvb, pinfo, offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12406:   case CAT_PROTECTED_HE:",
          "12407:     return add_ff_action_protected_he(tree, tvb, pinfo, offset);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "12189:     guint8 aci_aifsn, ecw, ecwmin, ecwmax;",
          "12190:     guint16 cwmin, cwmax;",
          "12191:     static const int *ieee80211_wfa_ie_wme[] = {",
          "12194:         &hf_ieee80211_wfa_ie_wme_acp_aifsn,",
          "12195:         &hf_ieee80211_wfa_ie_wme_acp_reserved,",
          "12196:         NULL",
          "12197:     };",
          "",
          "[Removed Lines]",
          "12192:         &hf_ieee80211_wfa_ie_wme_acp_aci,",
          "12193:         &hf_ieee80211_wfa_ie_wme_acp_acm,",
          "",
          "[Added Lines]",
          "12823:         &hf_ieee80211_wfa_ie_wme_acp_acm,",
          "12824:         &hf_ieee80211_wfa_ie_wme_acp_aci,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "13760:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_rx_highest_long_gi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13765:   offset += 2;",
          "",
          "[Removed Lines]",
          "13763:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_max_nsts_total, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Added Lines]",
          "14394:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_max_nsts_total, tvb, offset,",
          "14395:                                 2, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "13771:   offset += 2;",
          "13773:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_tx_highest_long_gi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13782:   return offset;",
          "13783: }",
          "",
          "[Removed Lines]",
          "13776:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_ext_nss_bw_cap, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13779:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_reserved, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "13781:   offset += 2;",
          "",
          "[Added Lines]",
          "14406:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_extended_nss_bw_capable,",
          "14407:                                 tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "14410:   proto_tree_add_item(mcs_tree, hf_ieee80211_vht_mcsset_reserved, tvb, offset, 2,",
          "14411:                                 ENC_LITTLE_ENDIAN);offset += 2;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "15950:   umrs_tree = proto_tree_add_subtree_format(tree, tvb, offset, 4,",
          "15952:                                 NULL, \"UMRS Control: 0x%08x\", the_bits);",
          "15954:   proto_tree_add_uint(umrs_tree, hf_ieee80211_he_umrs_he_tb_ppdu_len, tvb,",
          "",
          "[Removed Lines]",
          "15951:                                 ett_ieee80211_umrs_control,",
          "",
          "[Added Lines]",
          "16581:                                 ett_ieee80211_ul_mu_response_schedule,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "15970:   guint32 bits _U_, guint32 start_bit)",
          "15971: {",
          "15972:   proto_tree *om_tree = NULL;",
          "15978:   om_tree = proto_tree_add_subtree_format(tree, tvb, offset, 4,",
          "15980:                                 NULL, \"OM Control: 0x%04x\", the_bits);",
          "15982:   proto_tree_add_uint(om_tree, hf_ieee80211_he_om_rx_nss, tvb,",
          "",
          "[Removed Lines]",
          "15973:   guint the_bits = (tvb_get_letohl(tvb, offset) >> start_bit) & 0x000000FFF;",
          "15979:                                 ett_ieee80211_om_control,",
          "",
          "[Added Lines]",
          "16603:   guint the_bits = (tvb_get_letohl(tvb, offset) >> start_bit) & 0x0000003FF;",
          "16609:                                 ett_ieee80211_control_om,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "15991:                         offset, 4, the_bits);",
          "15992: }",
          "15994: static void",
          "15995: dissect_a_control_hla(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "15996:   guint32 bits _U_, guint32 start_bit)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16624: static const true_false_string he_hla_tx_bf_tfs = {",
          "16625:   \"beamformed PPDU\",",
          "16626:   \"non-beamformed PPDU\"",
          "16627: };",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "16082:   guint32 bits _U_, guint32 start_bit)",
          "16083: {",
          "16084:   proto_tree *bqr_tree = NULL;",
          "16090:   bqr_tree = proto_tree_add_subtree_format(tree, tvb, offset, 4,",
          "16092:                                 NULL, \"BQR Control: 0x%04x\", the_bits);",
          "16094:   proto_tree_add_uint(bqr_tree, hf_ieee80211_he_btc_avail_chan, tvb,",
          "",
          "[Removed Lines]",
          "16085:   guint the_bits = (tvb_get_letohl(tvb, offset) >> start_bit) & 0x000003FF;",
          "16091:                                 ett_ieee80211_bqr_control,",
          "",
          "[Added Lines]",
          "16720:   guint the_bits = (tvb_get_letohl(tvb, offset) >> start_bit) & 0x03FF;",
          "16726:                                 ett_ieee80211_buffer_control_bqr,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "18358:   int offset = 0;",
          "18359:   proto_item *ti_sup_map;",
          "18360:   proto_tree *sub_map_tree;",
          "18371:   if (tag_len < 7)",
          "18372:   {",
          "18373:     expert_add_info_format(pinfo, field_data->item_tag_length, &ei_ieee80211_tag_length, \"Tag Length %u wrong, must be >= 7\", tag_len);",
          "",
          "[Removed Lines]",
          "18361:   static const int *ieee80211_tag_dfs_map_flags[] = {",
          "18362:     &hf_ieee80211_tag_dfs_map_bss,",
          "18363:     &hf_ieee80211_tag_dfs_map_ofdm_preamble,",
          "18364:     &hf_ieee80211_tag_dfs_map_unidentified_signal,",
          "18365:     &hf_ieee80211_tag_dfs_map_radar,",
          "18366:     &hf_ieee80211_tag_dfs_map_unmeasured,",
          "18367:     &hf_ieee80211_tag_dfs_map_reserved,",
          "18368:     NULL",
          "18369:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "18385:   {",
          "18386:     ti_sup_map = proto_tree_add_item(tree, hf_ieee80211_tag_dfs_channel_map, tvb, offset, 2, ENC_NA);",
          "18387:     sub_map_tree = proto_item_add_subtree(ti_sup_map, ett_tag_dfs_map_tree);",
          "18389:     proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_channel_number, tvb, offset, 1, ENC_NA);",
          "18396:   }",
          "18397:   return tvb_captured_length(tvb);",
          "18398: }",
          "",
          "[Removed Lines]",
          "18390:     offset += 1;",
          "18392:     proto_tree_add_bitmask_with_flags(sub_map_tree, tvb, offset, hf_ieee80211_tag_dfs_map,",
          "18393:                                       ett_tag_dfs_map_flags_tree, ieee80211_tag_dfs_map_flags,",
          "18394:                                       ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "18395:     offset += 1;",
          "",
          "[Added Lines]",
          "19014:     proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_map, tvb, offset, 1, ENC_NA);",
          "19015:     offset += 2;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "18649:   { 0, NULL }",
          "18650: };",
          "18652: static const val64_string he_link_adaptation_support_vals[] = {",
          "18653:   { 0, \"No feedback if the STA does not provide HE MFB\" },",
          "18654:   { 1, \"Reserved\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19272: static void",
          "19273: max_frag_msdus_base_custom(gchar *result, guint32 max_frag_msdus_value)",
          "19274: {",
          "19275:   if (max_frag_msdus_value == 7)",
          "19276:     g_snprintf(result, ITEM_LABEL_LENGTH, \"No restriction\");",
          "19277:   else",
          "19278:     g_snprintf(result, ITEM_LABEL_LENGTH, \"%u\", 1 << max_frag_msdus_value);",
          "19279: }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "18657:   { 0, NULL }",
          "18658: };",
          "18660: static const int *he_mac_headers[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19289: static const val64_string he_mimo_cntrl_nc_index_vals[] = {",
          "19290:   {0x00, \"1 Column\"},",
          "19291:   {0x01, \"2 Columns\"},",
          "19292:   {0x02, \"3 Columns\"},",
          "19293:   {0x03, \"4 Columns\"},",
          "19294:   {0x04, \"5 Columns\"},",
          "19295:   {0x05, \"6 Columns\"},",
          "19296:   {0x06, \"7 Columns\"},",
          "19297:   {0x07, \"8 Columns\"},",
          "19298:   {0, NULL}",
          "19299: };",
          "19301: static const val64_string he_mimo_cntrl_nr_index_vals[] = {",
          "19302:   {0x00, \"1 Row\"},",
          "19303:   {0x01, \"2 Rows\"},",
          "19304:   {0x02, \"3 Rows\"},",
          "19305:   {0x03, \"4 Rows\"},",
          "19306:   {0x04, \"5 Rows\"},",
          "19307:   {0x05, \"6 Rows\"},",
          "19308:   {0x06, \"7 Rows\"},",
          "19309:   {0x07, \"8 Rows\"},",
          "19310:   {0, NULL}",
          "19311: };",
          "19313: static const val64_string he_mimo_cntrl_grouping_flags[] = {",
          "19314:   { 0x00, \"Carrier Groups of 4\" },",
          "19315:   { 0x01, \"Carrier Groups of 16\" },",
          "19316:   { 0, NULL }",
          "19317: };",
          "19319: static const val64_string he_mimo_cntrl_feedback_vals[] = {",
          "19320:   { 0x00, \"SU\" },",
          "19321:   { 0x01, \"MU\" },",
          "19322:   { 0x02, \"CQI feedback\" },",
          "19323:   { 0x03, \"Reserved\" },",
          "19324:   { 0, NULL }",
          "19325: };",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "18692:   NULL",
          "18693: };",
          "18695: static const int *he_phy_first_byte_headers[] = {",
          "18697:   NULL,",
          "18698: };",
          "",
          "[Removed Lines]",
          "18696:   &hf_he_phy_cap_dual_band_support,",
          "",
          "[Added Lines]",
          "19367:   &hf_he_phy_cap_reserved_b0,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "18767:   &hf_he_phy_cap_80mgz_in_160_80p80_ppdu,",
          "18768:   &hf_he_phy_cap_he_er_su_ppdu_1xxx_gi,",
          "18769:   &hf_he_phy_cap_midamble_rx_2x_xxx_ltf,",
          "18771:   NULL",
          "18772: };",
          "",
          "[Removed Lines]",
          "18770:   &hf_he_phy_cap_b70_b71_reserved,",
          "",
          "[Added Lines]",
          "19441:   &hf_he_phy_cap_dcm_max_bw,",
          "19442:   NULL",
          "19443: };",
          "19445: static const int *he_phy_b72_to_b87_headers[] = {",
          "19446:   &hf_he_phy_cap_longer_than_16_he_sigb_ofdm_symbol_support,",
          "19447:   &hf_he_phy_cap_non_triggered_cqi_feedback,",
          "19448:   &hf_he_phy_cap_tx_1024_qam_242_tone_ru_support,",
          "19449:   &hf_he_phy_cap_rx_1024_qam_242_tone_ru_support,",
          "19450:   &hf_rx_full_bw_su_using_he_muppdu_w_compressed_sigb,",
          "19451:   &hf_rx_full_bw_su_using_he_muppdu_w_non_compressed_sigb,",
          "19452:   &hf_he_phy_cap_b78_b87_reserved,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "18894:   proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_he_mac_capabilities,",
          "18895:                         ett_he_mac_capabilities, he_mac_headers,",
          "18896:                         ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "18900:   phy_channel_width_set = tvb_get_guint8(tvb, offset) >> 1;",
          "",
          "[Removed Lines]",
          "18897:   offset += 5;",
          "",
          "[Added Lines]",
          "19579:   offset += 6;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "18902:                         NULL,",
          "18903:                         \"HE Phy Capabilities Information\");",
          "18904:   proto_tree_add_bitmask_with_flags(phy_cap_tree, tvb, offset,",
          "18906:                         he_phy_first_byte_headers, ENC_NA, BMT_NO_APPEND);",
          "18907:   proto_tree_add_bitmask_with_flags(phy_cap_tree, tvb, offset,",
          "18908:                         hf_he_phy_chan_width_set,  ett_he_phy_cap_chan_width_set,",
          "",
          "[Removed Lines]",
          "18905:                         hf_he_phy_dual_band_support, ett_he_phy_cap_first_byte,",
          "",
          "[Added Lines]",
          "19587:                         hf_he_phy_reserved_b0, ett_he_phy_cap_first_byte,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "18924:                         hf_he_phy_b56_to_b71, ett_he_phy_cap_b56_to_b71,",
          "18925:                         he_phy_b56_to_b71_headers, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "18926:   offset += 2;",
          "18929:   if (phy_channel_width_set & HE_CHANNEL_WIDTH_SET_B2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19609:   proto_tree_add_bitmask_with_flags(phy_cap_tree, tvb, offset,",
          "19610:                         hf_he_phy_b72_to_b87, ett_he_phy_cap_b72_to_b87,",
          "19611:                         he_phy_b72_to_b87_headers, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "19612:   offset += 2;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "18935:   sup_he_mcs_and_nss_tree = proto_tree_add_subtree(tree, tvb, offset,",
          "18936:                         he_mcs_and_nss_len, ett_he_mcs_and_nss_set, NULL,",
          "18938:   rx_tx_he_mcs_map_80 = proto_tree_add_subtree(sup_he_mcs_and_nss_tree, tvb,",
          "18939:                         offset, 4, ett_he_rx_tx_he_mcs_map_lte_80, NULL,",
          "18940:                         \"Rx and Tx MCS Maps <= 80 MHz\");",
          "",
          "[Removed Lines]",
          "18937:                         \"Tx Rx HE-MCS NSS Support\");",
          "",
          "[Added Lines]",
          "19623:                         \"Supported HE-MCS and NSS Set\");",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "19061: }",
          "19063: static const int *he_operation_headers[] = {",
          "19065:   &hf_he_operation_default_pe_duration,",
          "19066:   &hf_he_operation_twt_required,",
          "19067:   &hf_he_operation_txop_duration_rts_threshold,",
          "19069:   &hf_he_operation_vht_operation_information_present,",
          "19075:   NULL",
          "19076: };",
          "",
          "[Removed Lines]",
          "19064:   &hf_he_operation_bss_color,",
          "19068:   &hf_he_operation_partial_bss_color,",
          "19070:   &hf_he_operation_reserved_b22_b27,",
          "19071:   &hf_he_operation_multiple_bssid_ap,",
          "19072:   &hf_he_operation_txbssid_indicator,",
          "19073:   &hf_he_operation_bss_color_disabled,",
          "19074:   &hf_he_operation_reserved_b31,",
          "",
          "[Added Lines]",
          "19754:   &hf_he_operation_co_located_bss,",
          "19755:   &hf_he_operation_er_su_disable,",
          "19756:   &hf_he_operation_reserved_b17_b23,",
          "19757:   NULL",
          "19758: };",
          "19760: static const int *he_bss_color_info_headers[] = {",
          "19761:   &hf_he_bss_color_info_bss_color,",
          "19762:   &hf_he_bss_color_partial_bss_color,",
          "19763:   &hf_he_bss_color_bss_color_disabled,",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "19095:   NULL",
          "19096: };",
          "19101: static const value_string channel_width_vals[] = {",
          "19102:   { 0, \"20 MHz or 40 MHz BSS Bandwidth\" },",
          "",
          "[Removed Lines]",
          "19098: #define VHT_OPERATION_INFORMATION_PRESENT 0x00200000",
          "19099: #define MULTIPLE_BSSID_AP                 0x10000000",
          "",
          "[Added Lines]",
          "19787: #define VHT_OPERATION_INFORMATION_PRESENT 0x004000",
          "19788: #define CO_LOCATED_BSS                    0x008000",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "19110: dissect_he_operation(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "19111:   int offset, int len _U_)",
          "19112: {",
          "19115:     proto_tree_add_bitmask_with_flags(tree, tvb, offset,",
          "19116:                         hf_he_operation_parameter, ett_he_operation_params,",
          "19117:                         he_operation_headers, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "19120:     proto_tree_add_bitmask_with_flags(tree, tvb, offset,",
          "19121:                         hf_he_operation_basic_mcs, ett_he_oper_basic_mcs,",
          "",
          "[Removed Lines]",
          "19113:     guint32 op_params = tvb_get_letohl(tvb, offset);",
          "19118:     offset += 4;",
          "",
          "[Added Lines]",
          "19802:     guint32 op_params = tvb_get_letoh24(tvb, offset);",
          "19807:     offset += 3;",
          "19809:     proto_tree_add_bitmask_with_flags(tree, tvb, offset,",
          "19810:                         hf_he_bss_color_information, ett_he_bss_color_information,",
          "19811:                         he_bss_color_info_headers, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "19812:     offset += 1;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "19146:       offset++;",
          "19147:     }",
          "19152:       offset++;",
          "19153:     }",
          "19154: }",
          "",
          "[Removed Lines]",
          "19149:     if (op_params & MULTIPLE_BSSID_AP) {",
          "19150:       proto_tree_add_item(tree, hf_he_operation_max_bssid_indicator, tvb, offset,",
          "19151:                         1, ENC_NA);",
          "",
          "[Added Lines]",
          "19843:     if (op_params & CO_LOCATED_BSS) {",
          "19844:       proto_tree_add_item(tree, hf_he_operation_max_colocated_bssid_indicator,",
          "19845:                         tvb, offset, 1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "19170:   offset++;",
          "19171: }",
          "19173: static int",
          "19174: dissect_muac_param_record(tvbuff_t *tvb, proto_tree *tree, int offset)",
          "19175: {",
          "19177:   offset++;",
          "19179:   proto_tree_add_item(tree, hf_he_muac_ecwmin_ecwmax, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "19176:   proto_tree_add_item(tree, hf_he_muac_aci_aifsn, tvb, offset, 1, ENC_NA);",
          "",
          "[Added Lines]",
          "19867: static const int *muac_aci_aifsn_headers[] = {",
          "19868:   &hf_he_muac_aifsn,",
          "19869:   &hf_he_muac_acm,",
          "19870:   &hf_he_muac_aci,",
          "19871:   &hf_he_muac_reserved,",
          "19872:   NULL",
          "19873: };",
          "19878:   proto_tree_add_bitmask_with_flags(tree, tvb, offset,",
          "19879:                         hf_he_muac_aci_aifsn, ett_he_aic_aifsn,",
          "19880:                         muac_aci_aifsn_headers, ENC_NA, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "19575:       dissect_bss_color_change(tvb, pinfo, tree, offset, ext_tag_len);",
          "19576:       break;",
          "19577:     case ETAG_QUIET_TIME_PERIOD_SETUP:",
          "19579:       break;",
          "19580:     case ETAG_ESS_REPORT:",
          "19581:       dissect_ess_report(tvb, pinfo, tree, offset, ext_tag_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20282:       dissect_quiet_time_period(tvb, pinfo, tree, offset, ext_tag_len);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "21017:   proto_tree     *ba_mtid_tree, *ba_mtid_sub_tree;",
          "21018:   guint16         ssn;",
          "21019:   guint64         bmap;",
          "21021:   proto_item     *ba_bitmap_item;",
          "21022:   proto_tree     *ba_bitmap_tree;",
          "21023:   guint16         aid_tid;",
          "",
          "[Removed Lines]",
          "21020:   int             f;",
          "",
          "[Added Lines]",
          "21723:   guint           f;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "21083:                           (ssn + f) & 0x0fff);",
          "21084:         }",
          "21085:         offset += 8;",
          "21089:                         offset, 32, ENC_NA);",
          "21090:         offset += 32;",
          "21091:       } else {",
          "",
          "[Removed Lines]",
          "21086:       } else if ((frag_num & 0x06) == 2) {",
          "21088:         proto_tree_add_item(ba_tree, hf_ieee80211_block_ack_bitmap, tvb,",
          "",
          "[Added Lines]",
          "21789:       } else if (((frag_num & 0x06) >> 1) == 2) {",
          "21791:         ba_bitmap_item = proto_tree_add_item(ba_tree,",
          "21792:                         hf_ieee80211_block_ack_bitmap, tvb,",
          "21794:         ba_bitmap_tree = proto_item_add_subtree(ba_bitmap_item,",
          "21795:                             ett_block_ack_bitmap);",
          "21796:         for (i = 0; i < 256; i += 64) {",
          "21797:           bmap = tvb_get_letoh64(tvb, offset + i/8);",
          "21798:           for (f = i; f <  i + 64; f++) {",
          "21799:             if (bmap & (G_GUINT64_CONSTANT(1) << f))",
          "21800:               continue;",
          "21801:             proto_tree_add_uint_format_value(ba_bitmap_tree,",
          "21802:                           hf_ieee80211_block_ack_bitmap_missing_frame,",
          "21803:                           tvb, offset + (f/8), 1, ssn + f, \"%u\",",
          "21804:                           (ssn + f) & 0x0fff);",
          "21805:           }",
          "21806:         }",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "21210:         offset += 2;",
          "21212:         if ((aid_tid & 0x07ff) != 2045) {",
          "21216:             offset += add_ff_block_ack_ssc(ba_multi_sta_tree, tvb, pinfo, offset);",
          "21220:                         offset, bitmap_size, ENC_NA);",
          "21221:             offset += bitmap_size;",
          "21222:           }",
          "21223:         } else {",
          "",
          "[Removed Lines]",
          "21213:           if (((aid_tid & 0x0800) == 0) && (aid_tid & 0xf000) <= 7) {",
          "21214:             guint8 bitmap_size;",
          "21215:             frag_num = tvb_get_guint8(tvb, offset);",
          "21219:             proto_tree_add_item(ba_multi_sta_tree, hf_ieee80211_block_ack_bitmap, tvb,",
          "",
          "[Added Lines]",
          "21930:           if (((aid_tid & 0x0800) == 0) && ((aid_tid & 0xf000) >> 12) <= 7) {",
          "21931:             guint bitmap_size;",
          "21932:             ssn = tvb_get_letohs(tvb, offset);",
          "21933:             frag_num = ssn & 0x0F;",
          "21934:             ssn >>= 4;",
          "21938:             ba_bitmap_item = proto_tree_add_item(ba_multi_sta_tree,",
          "21939:                         hf_ieee80211_block_ack_bitmap, tvb,",
          "21941:             ba_bitmap_tree = proto_item_add_subtree(ba_bitmap_item,",
          "21942:                                 ett_block_ack_bitmap);",
          "21943:             for (i = 0; i < bitmap_size * 8; i += 64) {",
          "21944:               bmap = tvb_get_letoh64(tvb, offset + i/8);",
          "21945:               for (f = i; f <  i + ((bitmap_size == 4 ? 4 : 8) * 8); f++) {",
          "21946:                 if (bmap & (G_GUINT64_CONSTANT(1) << f))",
          "21947:                   continue;",
          "21948:                 proto_tree_add_uint_format_value(ba_bitmap_tree,",
          "21949:                               hf_ieee80211_block_ack_bitmap_missing_frame,",
          "21950:                               tvb, offset + (f/8), 1, ssn + f, \"%u\",",
          "21951:                               (ssn + f) & 0x0fff);",
          "21952:               }",
          "21953:             }",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "21238:   return offset;",
          "21239: }",
          "21242: dissect_ieee80211_block_ack(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "21243:   proto_tree *tree, int offset, gboolean isDMG, gboolean is_req, gboolean has_fcs)",
          "21244: {",
          "",
          "[Removed Lines]",
          "21241: static int",
          "",
          "[Added Lines]",
          "21974: static void",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "21257:   PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "21258:   offset += 6;",
          "21261: }",
          "",
          "[Removed Lines]",
          "21260:   return dissect_ieee80211_block_ack_details(tvb, pinfo, tree, offset, isDMG, is_req, has_fcs);",
          "",
          "[Added Lines]",
          "21993:   dissect_ieee80211_block_ack_details(tvb, pinfo, tree, offset, isDMG, is_req, has_fcs);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "21320:   NULL",
          "21321: };",
          "21323: static void",
          "21324: add_gcr_mu_bar_trigger_frame_common_info(proto_tree *tree, tvbuff_t *tvb,",
          "21325:   int offset)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22056: #define PRE_FEC_PADDING_FACTOR 0x3",
          "22057: #define PE_DISAMBIGUITY 0x4",
          "22059: static void",
          "22060: ul_packet_extension_base_custom(gchar *result, guint32 ul_packet_extension)",
          "22061: {",
          "22062:   int pre_fec_padding = ul_packet_extension & PRE_FEC_PADDING_FACTOR;",
          "22064:   if (pre_fec_padding == 0) pre_fec_padding = 4;",
          "22066:   if (ul_packet_extension & PE_DISAMBIGUITY) {",
          "22067:     g_snprintf(result, ITEM_LABEL_LENGTH,",
          "22068:                \"PE disambiguity & pre-FEC padding factor of %d\",",
          "22069:                pre_fec_padding);",
          "22071:   } else {",
          "22072:     g_snprintf(result, ITEM_LABEL_LENGTH,",
          "22073:                \"no PE disambiguity & pre-FEC padding factor of %d\",",
          "22074:                pre_fec_padding);",
          "22075:   }",
          "22076: }",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "21342: static const int *common_info_headers[] = {",
          "21343:   &hf_ieee80211_he_trigger_type,",
          "21346:   &hf_ieee80211_he_trigger_cs_required,",
          "21348:   &hf_ieee80211_he_trigger_gi_and_ltf_type,",
          "21349:   &hf_ieee80211_he_trigger_mu_mimo_ltf_mode,",
          "21350:   &hf_ieee80211_he_trigger_num_he_ltf_syms_etc,",
          "21352:   &hf_ieee80211_he_trigger_ldpc_extra_sym_seg,",
          "21353:   &hf_ieee80211_he_trigger_ap_tx_power,",
          "21356:   &hf_ieee80211_he_trigger_doppler,",
          "21358:   &hf_ieee80211_he_trigger_reserved,",
          "21359:   NULL",
          "21360: };",
          "21362: static int",
          "21363: add_he_trigger_common_info(proto_tree *tree, tvbuff_t *tvb, int offset,",
          "21364:   packet_info *pinfo _U_, guint8 trigger_type, int *frame_len)",
          "",
          "[Removed Lines]",
          "21344:   &hf_ieee80211_he_trigger_length,",
          "21345:   &hf_ieee80211_he_trigger_cascade_indication,",
          "21347:   &hf_ieee80211_he_trigger_bw,",
          "21351:   &hf_ieee80211_he_trigger_stbc,",
          "21354:   &hf_ieee80211_he_trigger_packet_extension,",
          "21355:   &hf_ieee80211_he_trigger_spatial_reuse,",
          "21357:   &hf_ieee80211_he_trigger_he_sig_a_reserved,",
          "",
          "[Added Lines]",
          "22099:   &hf_ieee80211_he_trigger_ul_length,",
          "22100:   &hf_ieee80211_he_trigger_more_tf,",
          "22102:   &hf_ieee80211_he_trigger_ul_bw,",
          "22106:   &hf_ieee80211_he_trigger_ul_stbc,",
          "22109:   &hf_ieee80211_he_trigger_ul_packet_extension,",
          "22110:   &hf_ieee80211_he_trigger_ul_spatial_reuse,",
          "22112:   &hf_ieee80211_he_trigger_ul_he_sig_a_reserved,",
          "22120: static guint8 global_he_trigger_bw = 0;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "21367:   proto_tree     *common_info = NULL;",
          "21368:   int            length = 0;",
          "21369:   int            start_offset = offset;",
          "21371:   common_info = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "21372:                         ett_he_trigger_common_info, &pi, \"Common Info\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22130:   guint32         bw_etc = tvb_get_letoh24(tvb, offset);",
          "22132:   global_he_trigger_bw = (bw_etc >> 18) & 0x03;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "21397:   return length;",
          "21398: }",
          "21401:   \"LDPC\",",
          "21402:   \"BCC\"",
          "21403: };",
          "",
          "[Removed Lines]",
          "21400: static const true_false_string he_trigger_coding_type_tfs = {",
          "",
          "[Added Lines]",
          "22163: static const char * he_trigger_ru_allocation_region_values[] = {",
          "22164:   \"primary 80MHz channel for 80+80 and 160MHz\",",
          "22165:   \"secondary 80MHz channel for 80+80 and 160MHz\",",
          "22166: };",
          "22171: static void",
          "22172: he_trigger_ru_allocation_region_custom(gchar *result, guint32 ru_alloc_val)",
          "22173: {",
          "22174:   if (global_he_trigger_bw == 3) {",
          "22175:     g_snprintf(result, ITEM_LABEL_LENGTH, \"%s\",",
          "22176:       he_trigger_ru_allocation_region_values[ru_alloc_val & 0x01]);",
          "22177:   } else {",
          "22178:     g_snprintf(result, ITEM_LABEL_LENGTH, \"Not used for 20, 40 or 80MHz\");",
          "22179:   }",
          "22180: }",
          "22182: static void",
          "22183: he_trigger_minus_one_custom(gchar *result, guint ss_alloc_value)",
          "22184: {",
          "22185:   g_snprintf(result, ITEM_LABEL_LENGTH, \"%d\", ss_alloc_value + 1);",
          "22186: }",
          "22188: static const true_false_string he_trigger_ul_fec_coding_type_tfs = {",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "21495:   }",
          "21496: }",
          "21499:   &hf_ieee80211_he_trigger_aid12,",
          "21500:   &hf_ieee80211_he_trigger_ru_allocation,",
          "21506:   &hf_ieee80211_he_trigger_user_reserved,",
          "21507:   NULL",
          "21508: };",
          "",
          "[Removed Lines]",
          "21498: static const int *user_info_headers[] = {",
          "21501:   &hf_ieee80211_he_trigger_coding_type,",
          "21502:   &hf_ieee80211_he_trigger_mcs,",
          "21503:   &hf_ieee80211_he_trigger_dcm,",
          "21504:   &hf_ieee80211_he_trigger_ss_allocation,",
          "21505:   &hf_ieee80211_he_trigger_target_rssi,",
          "",
          "[Added Lines]",
          "22286: static const int *user_info_headers_no_2045[] = {",
          "22287:   &hf_ieee80211_he_trigger_aid12,",
          "22288:   &hf_ieee80211_he_trigger_ru_allocation_region,",
          "22289:   &hf_ieee80211_he_trigger_ru_allocation,",
          "22290:   &hf_ieee80211_he_trigger_ul_fec_coding_type,",
          "22291:   &hf_ieee80211_he_trigger_ul_mcs,",
          "22292:   &hf_ieee80211_he_trigger_ul_dcm,",
          "22293:   &hf_ieee80211_he_trigger_ru_starting_spatial_stream,",
          "22294:   &hf_ieee80211_he_trigger_ru_number_spatial_streams,",
          "22295:   &hf_ieee80211_he_trigger_ul_target_rssi,",
          "22296:   &hf_ieee80211_he_trigger_user_reserved,",
          "22297:   NULL",
          "22298: };",
          "22300: static const int *user_info_headers_2045[] = {",
          "22302:   &hf_ieee80211_he_trigger_ru_allocation_region,",
          "22304:   &hf_ieee80211_he_trigger_ul_fec_coding_type,",
          "22305:   &hf_ieee80211_he_trigger_ul_mcs,",
          "22306:   &hf_ieee80211_he_trigger_ul_dcm,",
          "22307:   &hf_ieee80211_he_trigger_ru_number_ra_ru,",
          "22308:   &hf_ieee80211_he_trigger_ru_no_more_ra_ru,",
          "22309:   &hf_ieee80211_he_trigger_ul_target_rssi,",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "21524:   user_info = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "21525:                         ett_he_trigger_user_info, &pi, \"User Info\");",
          "21528:   while (aid12_subfield != 4095) {",
          "21534:     offset += 5;",
          "21535:     length += 5;",
          "",
          "[Removed Lines]",
          "21526:   aid12_subfield = tvb_get_letohs(tvb, offset) >> 4;",
          "21529:     proto_tree_add_bitmask_with_flags(user_info, tvb, offset,",
          "21530:                         hf_ieee80211_he_trigger_user_info,",
          "21531:                         ett_he_trigger_base_user_info,",
          "21532:                         user_info_headers,",
          "21533:                         ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "[Added Lines]",
          "22330:   aid12_subfield = tvb_get_letohs(tvb, offset) & 0xFFF;",
          "22334:     if (aid12_subfield != 0 && aid12_subfield != 2045)",
          "22335:       proto_tree_add_bitmask_with_flags(user_info, tvb, offset,",
          "22336:                           hf_ieee80211_he_trigger_user_info,",
          "22337:                           ett_he_trigger_base_user_info,",
          "22338:                           user_info_headers_no_2045,",
          "22339:                           ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "22340:     else",
          "22341:       proto_tree_add_bitmask_with_flags(user_info, tvb, offset,",
          "22342:                           hf_ieee80211_he_trigger_user_info,",
          "22343:                           ett_he_trigger_base_user_info,",
          "22344:                           user_info_headers_2045,",
          "22345:                           ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "21550:         break;",
          "21551:       case TRIGGER_TYPE_MU_BAR:",
          "21554:                                 offset, pinfo, &length);",
          "21555:         break;",
          "21556:       case TRIGGER_TYPE_NFRP:",
          "",
          "[Removed Lines]",
          "21553:         offset += add_mu_bar_trigger_dependent_user_info(user_info, tvb,",
          "",
          "[Added Lines]",
          "22365:         offset = add_mu_bar_trigger_dependent_user_info(user_info, tvb,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "21562:         break;",
          "21563:     }",
          "21566:   }",
          "21568:   proto_item_set_len(pi, offset - start_offset);",
          "",
          "[Removed Lines]",
          "21565:     aid12_subfield = tvb_get_letohs(tvb, offset) >> 4;",
          "",
          "[Added Lines]",
          "22377:     if (tvb_reported_length_remaining(tvb, offset) < 5)",
          "22378:       aid12_subfield = 4095;",
          "22379:     else",
          "22380:       aid12_subfield = tvb_get_letohs(tvb, offset) & 0xFFF;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "21604:                         trigger_type, &length);",
          "21610:                         trigger_type, &length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22424:   offset = add_he_trigger_user_info(tree, tvb, offset, pinfo,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "21683:   return offset;",
          "21684: }",
          "21697: static const int *he_ndp_headers[] = {",
          "21698:   &hf_he_ndp_annc_reserved,",
          "21699:   &hf_he_ndp_annc_he_subfield,",
          "",
          "[Removed Lines]",
          "21689: static void",
          "21690: partial_bw_info_base_custom(gchar *result, guint32 partial_bw)",
          "21691: {",
          "21692:     g_snprintf(result, ITEM_LABEL_LENGTH,",
          "21693:                 \"RU Start Index:0x%0x, RU End Index:0x%0x\",",
          "21694:                 partial_bw >> 7, partial_bw & 0x7F);",
          "21695: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "21704: static const int *he_ndp_sta_headers[] = {",
          "21705:   &hf_he_ndp_annc_aid11,",
          "21707:   &hf_he_ndp_annc_feedback_type_and_ng,",
          "21708:   &hf_he_ndp_annc_disambiguation,",
          "21709:   &hf_he_ndp_annc_codebook_size,",
          "",
          "[Removed Lines]",
          "21706:   &hf_he_ndp_annc_partial_bw_info,",
          "",
          "[Added Lines]",
          "22510:   &hf_he_ndp_annc_ru_start,",
          "22511:   &hf_he_ndp_annc_ru_end,",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "22410:         case CTRL_BLOCK_ACK_REQ:",
          "22411:           set_src_addr_cols(pinfo, tvb, offset, \"TA\");",
          "22414:           break;",
          "22416:         case CTRL_BLOCK_ACK:",
          "22417:           set_src_addr_cols(pinfo, tvb, offset, \"TA\");",
          "22420:           break;",
          "22421:       }",
          "",
          "[Removed Lines]",
          "22413:           offset = dissect_ieee80211_block_ack(tvb, pinfo, hdr_tree, offset, isDMG, TRUE, has_fcs);",
          "22419:           offset = dissect_ieee80211_block_ack(tvb, pinfo, hdr_tree, offset, isDMG, FALSE, has_fcs);",
          "",
          "[Added Lines]",
          "23218:           dissect_ieee80211_block_ack(tvb, pinfo, hdr_tree, offset, isDMG, TRUE, has_fcs);",
          "23224:           dissect_ieee80211_block_ack(tvb, pinfo, hdr_tree, offset, isDMG, FALSE, has_fcs);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "25973:        FT_NONE, BASE_NONE, NULL, 0,",
          "25974:        NULL, HFILL }},",
          "25977:       {\"Delta SNR for space-time stream Nc for subcarrier k\", \"wlan.vht.exclusive_beamforming_report.delta_snr\",",
          "25978:        FT_NONE, BASE_NONE, NULL, 0,",
          "25979:        NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "25976:     {&hf_ieee80211_vht_mu_Exclusive_beamforming_delta_snr,",
          "",
          "[Added Lines]",
          "26781:     {&hf_ieee80211_vht_mu_exclusive_beamforming_delta_snr,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "26011:     {&hf_ieee80211_ff_he_action,",
          "26012:       {\"HE Action\", \"wlan.he.action\",",
          "26014:        NULL, HFILL }},",
          "26016:     {&hf_he_mimo_control_nc_index,",
          "26017:      {\"Nc Index\", \"wlan.he.mimo.nc_index\",",
          "26020:     {&hf_he_mimo_control_nr_index,",
          "26021:      {\"Nr Index\", \"wlan.he.mimo.nr_index\",",
          "26024:     {&hf_he_mimo_control_bw,",
          "26025:      {\"BW\", \"wlan.he.mimo.bw\",",
          "",
          "[Removed Lines]",
          "26013:        FT_UINT8, BASE_DEC, VALS(he_action_vals), 0,",
          "26018:       FT_UINT40, BASE_DEC, NULL, 0x0000000007, NULL, HFILL }},",
          "26022:       FT_UINT40, BASE_DEC, NULL, 0x0000000038, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "26818:        FT_UINT8, BASE_RANGE_STRING | BASE_DEC, RVALS(he_action_rvals), 0,",
          "26819:        NULL, HFILL }},",
          "26821:     {&hf_ieee80211_ff_protected_he_action,",
          "26822:       {\"Protected HE Action\", \"wlan.he.protected_action\",",
          "26823:        FT_UINT8, BASE_RANGE_STRING | BASE_DEC, RVALS(he_action_rvals), 0,",
          "26828:       FT_UINT40, BASE_DEC, VALS(he_mimo_cntrl_nc_index_vals),",
          "26829:       0x0000000007, NULL, HFILL }},",
          "26833:       FT_UINT40, BASE_DEC, VALS(he_mimo_cntrl_nr_index_vals),",
          "26834:       0x0000000038, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "26028:     {&hf_he_mimo_control_grouping,",
          "26029:      {\"Grouping\", \"wlan.he.mimo.grouping\",",
          "26032:     {&hf_he_mimo_control_codebook_info,",
          "26033:      {\"Codebook Information\", \"wlan.he.mimo.codebook_info\",",
          "",
          "[Removed Lines]",
          "26030:       FT_UINT40, BASE_DEC, NULL, 0x0000000100, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "26842:       FT_UINT40, BASE_DEC, VALS(he_mimo_cntrl_grouping_flags),",
          "26843:       0x0000000100, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "26036:     {&hf_he_mimo_control_feedback_type,",
          "26037:      {\"Feedback Type\", \"wlan.he.mimo.feedback_type\",",
          "26040:     {&hf_he_mimo_control_remaining_feedback_segs,",
          "26041:      {\"Remaining Feedback Segments\", \"wlan.he.mimo.remaining_feedback_segs\",",
          "",
          "[Removed Lines]",
          "26038:       FT_UINT40, BASE_DEC, NULL, 0x0000000C00, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "26851:       FT_UINT40, BASE_DEC, VALS(he_mimo_cntrl_feedback_vals),",
          "26852:       0x0000000C00, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "26065:      {\"HE MIMO Control\", \"wlan.he.action.he_mimo_control\",",
          "26066:       FT_UINT40, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "26068:     {&hf_ieee80211_tag_tspec_allocation_id,",
          "26069:       {\"Allocation ID\", \"wlan.dmg_tspec.allocation_id\",",
          "26070:        FT_UINT24, BASE_DEC, NULL, 0x00000f,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26882:     {&hf_ieee80211_he_compressed_beamforming_report_snr,",
          "26883:      {\"AgvSNR\", \"wlan.he.mimo.beamforming_report.avgsnr\",",
          "26884:       FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "26886:     {&hf_ieee80211_he_compressed_beamform_scidx,",
          "26887:      {\"SCIDX\", \"wlan.he.action.he_mimo_control.scidx\",",
          "26888:       FT_INT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "26890:     {&hf_ieee80211_beamforming_report_len,",
          "26891:      {\"Report Len\", \"wlan.he.action.he_mimo_control.report_len\",",
          "26892:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "29120:       FT_UINT16, BASE_HEX, NULL, 0x1fff,",
          "29121:       NULL, HFILL }},",
          "29124:      {\"Extended NSS BW Capable\", \"wlan.vht.ncsset.ext_nss_bw_cap\",",
          "29125:       FT_BOOLEAN, 16, TFS(&tfs_capable_not_capable), 0x2000, NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "29123:     {&hf_ieee80211_vht_mcsset_ext_nss_bw_cap,",
          "",
          "[Added Lines]",
          "29949:     {&hf_ieee80211_vht_mcsset_extended_nss_bw_capable,",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "30476:       FT_UINT8, BASE_HEX, NULL, 0,",
          "30477:       NULL, HFILL  }},",
          "30509:     {&hf_ieee80211_tag_erp_info,",
          "30510:      {\"ERP Information\", \"wlan.erp_info\",",
          "30511:       FT_UINT8, BASE_HEX, NULL, 0,",
          "",
          "[Removed Lines]",
          "30479:     {&hf_ieee80211_tag_dfs_map_bss,",
          "30480:      {\"BSS\", \"wlan.dfs.map.bss\",",
          "30481:       FT_BOOLEAN, 8, TFS(&ieee80211_tag_measure_map_field_bss_flag), 0x01,",
          "30482:       NULL, HFILL }},",
          "30484:     {&hf_ieee80211_tag_dfs_map_ofdm_preamble,",
          "30485:      {\"Orthogonal Frequency Division Multiplexing (ODFM) Preamble\", \"wlan.dfs.map.ofdm_preamble\",",
          "30486:       FT_BOOLEAN, 8, TFS(&tfs_detected_not_detected), 0x02,",
          "30487:       NULL, HFILL }},",
          "30489:     {&hf_ieee80211_tag_dfs_map_unidentified_signal,",
          "30490:      {\"Unidentified Signal\", \"wlan.dfs.map.unidentsig\",",
          "30491:       FT_BOOLEAN, 8, TFS(&tfs_detected_not_detected), 0x04,",
          "30492:       NULL, HFILL }},",
          "30494:     {&hf_ieee80211_tag_dfs_map_radar,",
          "30495:      {\"Radar\", \"wlan.dfs.map.radar\",",
          "30496:       FT_BOOLEAN, 8, TFS(&tfs_detected_not_detected), 0x08,",
          "30497:       NULL, HFILL }},",
          "30499:     {&hf_ieee80211_tag_dfs_map_unmeasured,",
          "30500:      {\"Unmeasured\", \"wlan.dfs.map.unmeasured\",",
          "30501:       FT_BOOLEAN, 8, TFS(&tfs_true_false), 0x10,",
          "30502:       NULL, HFILL }},",
          "30504:     {&hf_ieee80211_tag_dfs_map_reserved,",
          "30505:      {\"Reserved\", \"wlan.dfs.map.reserved\",",
          "30506:       FT_UINT8, BASE_HEX, NULL, 0xE0,",
          "30507:       NULL, HFILL }},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "32170:     {&hf_ieee80211_he_hla_tx_bf,",
          "32171:      {\"Tx BF\", \"wlan.htc.he.a_control.hla.tx_bf\",",
          "32174:     {&hf_ieee80211_he_hla_reserved,",
          "32175:      {\"Reserved\", \"wlan.htc.he.a_control.hla.reserved\",",
          "",
          "[Removed Lines]",
          "32172:       FT_BOOLEAN, 32, NULL, 0x00800000, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "32968:       FT_BOOLEAN, 32, TFS(&he_hla_tx_bf_tfs), 0x00800000, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "32244:       FT_UINT64, BASE_DEC|BASE_VAL64_STRING, VALS64(trigger_type_vals),",
          "32245:         0x000000000000000F, NULL, HFILL }},",
          "32249:       FT_UINT64, BASE_DEC, NULL, 0x000000000000FFF0, NULL, HFILL }},",
          "32253:       FT_BOOLEAN, 64, NULL, 0x0000000000010000, NULL, HFILL }},",
          "32255:     {&hf_ieee80211_he_trigger_cs_required,",
          "32256:      {\"CS Required\", \"wlan.trigger.he.cs_required\",",
          "32257:       FT_BOOLEAN, 64, NULL, 0x0000000000020000, NULL, HFILL }},",
          "32261:       FT_UINT64, BASE_DEC|BASE_VAL64_STRING, VALS64(bw_subfield_vals), 0x00000000000C0000, NULL, HFILL }},",
          "32263:     {&hf_ieee80211_he_trigger_gi_and_ltf_type,",
          "",
          "[Removed Lines]",
          "32247:     {&hf_ieee80211_he_trigger_length,",
          "32248:      {\"L-SIG Length\", \"wlan.trigger.he.l_sig_length\",",
          "32251:     {&hf_ieee80211_he_trigger_cascade_indication,",
          "32252:      {\"Cascade Indication\", \"wlan.trigger.he.cascade_indication\",",
          "32259:     {&hf_ieee80211_he_trigger_bw,",
          "32260:      {\"BW\", \"wlan.trigger.he.bw\",",
          "",
          "[Added Lines]",
          "33043:     {&hf_ieee80211_he_trigger_ul_length,",
          "33044:      {\"UL Length\", \"wlan.trigger.he.ul_length\",",
          "33047:     {&hf_ieee80211_he_trigger_more_tf,",
          "33048:      {\"More TF\", \"wlan.trigger.he.more_tf\",",
          "33055:     {&hf_ieee80211_he_trigger_ul_bw,",
          "33056:      {\"UL BW\", \"wlan.trigger.he.ul_bw\",",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "32274:         \"wlan.trigger.he.num_he_ltf_syms_and_midamble_per\",",
          "32275:       FT_UINT64, BASE_HEX, NULL, 0x0000000003800000, NULL, HFILL }},",
          "32279:       FT_BOOLEAN, 64, NULL, 0x0000000004000000, NULL, HFILL }},",
          "32281:     {&hf_ieee80211_he_trigger_ldpc_extra_sym_seg,",
          "",
          "[Removed Lines]",
          "32277:     {&hf_ieee80211_he_trigger_stbc,",
          "32278:      {\"STBC\", \"wlan.trigger.he.stbc\",",
          "",
          "[Added Lines]",
          "33073:     {&hf_ieee80211_he_trigger_ul_stbc,",
          "33074:      {\"UL STBC\", \"wlan.trigger.he.ul_stbc\",",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "32286:      {\"AP TX Power\", \"wlan.trigger.he.ap_tx_power\",",
          "32287:       FT_UINT64, BASE_DEC, NULL, 0x00000003F0000000, NULL, HFILL }},",
          "32290:      {\"Packet Extension\", \"wlan.trigger.he.packet_extension\",",
          "32294:      {\"Spatial Reuse\", \"wlan.trigger.he.spatial_reuse\",",
          "32295:       FT_UINT64, BASE_HEX, NULL, 0x001FFFE000000000, NULL, HFILL }},",
          "32297:     {&hf_ieee80211_he_trigger_doppler,",
          "32298:      {\"Doppler\", \"wlan.trigger.he.doppler\",",
          "32299:       FT_BOOLEAN, 64, NULL, 0x0020000000000000, NULL, HFILL }},",
          "32305:     {&hf_ieee80211_he_trigger_reserved,",
          "32306:      {\"Reserved\", \"wlan.trigger.he.reserved\",",
          "32307:       FT_UINT64, BASE_HEX, NULL, 0x8000000000000000, NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "32289:     {&hf_ieee80211_he_trigger_packet_extension,",
          "32291:       FT_UINT64, BASE_HEX, NULL, 0x0000001C00000000, NULL, HFILL }},",
          "32293:     {&hf_ieee80211_he_trigger_spatial_reuse,",
          "32301:     {&hf_ieee80211_he_trigger_he_sig_a_reserved,",
          "32302:      {\"HE-SIG-A Reserved\", \"wlan.trigger.he.he_sig_a_reserved\",",
          "32303:       FT_UINT64, BASE_HEX, NULL, 0x7FC0000000000000, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "33085:     {&hf_ieee80211_he_trigger_ul_packet_extension,",
          "33087:       FT_UINT64, BASE_CUSTOM, CF_FUNC(ul_packet_extension_base_custom),",
          "33088:       0x0000001C00000000, NULL, HFILL }},",
          "33090:     {&hf_ieee80211_he_trigger_ul_spatial_reuse,",
          "33094:     {&hf_ieee80211_he_trigger_ul_he_sig_a_reserved,",
          "33095:      {\"UL HE-SIG-A2 Reserved\", \"wlan.trigger.he.ul_he_sig_a2_reserved\",",
          "33096:       FT_UINT64, BASE_HEX, NULL, 0x7FC0000000000000, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "32397:      {\"AID12\", \"wlan.trigger.he.user_info.aid12\",",
          "32398:       FT_UINT40, BASE_HEX, NULL, 0x0000000FFF, NULL, HFILL }},",
          "32400:     {&hf_ieee80211_he_trigger_ru_allocation,",
          "32401:      {\"RU Allocation\", \"wlan.trigger.he.ru_allocation\",",
          "32405:      {\"Coding Type\", \"wlan.trigger.he.coding_type\",",
          "32407:         NULL, HFILL }},",
          "32410:      {\"MCS\", \"wlan.trigger.he.mcs\",",
          "32411:       FT_UINT40, BASE_HEX, NULL, 0x0001E00000, NULL, HFILL }},",
          "32414:      {\"DCM\", \"wlan.trigger.he.dcm\",",
          "32415:       FT_BOOLEAN, 40, NULL, 0x0002000000, NULL, HFILL }},",
          "32422:      {\"Target RSSI\", \"wlan.trigger.he.target_rssi\",",
          "32423:       FT_UINT40, BASE_CUSTOM, CF_FUNC(target_rssi_base_custom), 0x7F00000000,",
          "32424:        NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "32402:       FT_UINT40, BASE_HEX, NULL, 0x00000FF000, NULL, HFILL }},",
          "32404:     {&hf_ieee80211_he_trigger_coding_type,",
          "32406:       FT_BOOLEAN, 40, TFS(&he_trigger_coding_type_tfs), 0x0000100000,",
          "32409:     {&hf_ieee80211_he_trigger_mcs,",
          "32413:     {&hf_ieee80211_he_trigger_dcm,",
          "32417:     {&hf_ieee80211_he_trigger_ss_allocation,",
          "32418:      {\"SS Alloc/Random Access RU Info\", \"wlan.trigger.he.ss_alloc\",",
          "32419:       FT_UINT40, BASE_HEX, NULL, 0x00FC000000, NULL, HFILL }},",
          "32421:     {&hf_ieee80211_he_trigger_target_rssi,",
          "",
          "[Added Lines]",
          "33197:     {&hf_ieee80211_he_trigger_ru_allocation_region,",
          "33198:      {\"RU Allocation Region\", \"wlan.trigger.he.ru_allocation_region\",",
          "33199:       FT_UINT40, BASE_CUSTOM, CF_FUNC(he_trigger_ru_allocation_region_custom),",
          "33200:       0x0000001000, NULL, HFILL }},",
          "33204:       FT_UINT40, BASE_HEX, NULL, 0x00000FE000, NULL, HFILL }},",
          "33206:     {&hf_ieee80211_he_trigger_ul_fec_coding_type,",
          "33208:       FT_BOOLEAN, 40, TFS(&he_trigger_ul_fec_coding_type_tfs), 0x0000100000,",
          "33211:     {&hf_ieee80211_he_trigger_ul_mcs,",
          "33215:     {&hf_ieee80211_he_trigger_ul_dcm,",
          "33219:     {&hf_ieee80211_he_trigger_ru_starting_spatial_stream,",
          "33220:      {\"Starting Spatial Stream\", \"wlan.trigger.he.ru_starting_spatial_stream\",",
          "33221:       FT_UINT40, BASE_CUSTOM, CF_FUNC(he_trigger_minus_one_custom),",
          "33222:       0x001c000000, NULL, HFILL }},",
          "33224:     {&hf_ieee80211_he_trigger_ru_number_spatial_streams,",
          "33225:      {\"Number Of Spatial Streams\", \"wlan.trigger.he.ru_number_of_spatial_stream\",",
          "33226:       FT_UINT40, BASE_CUSTOM, CF_FUNC(he_trigger_minus_one_custom),",
          "33227:       0x00E0000000, NULL, HFILL }},",
          "33229:     {&hf_ieee80211_he_trigger_ru_number_ra_ru,",
          "33230:      {\"Number of RA-RU\", \"wlan.trigger.he.ru_number_of_ra_ru\",",
          "33231:       FT_UINT40, BASE_CUSTOM, CF_FUNC(he_trigger_minus_one_custom),",
          "33232:       0x003C000000, NULL, HFILL }},",
          "33234:     {&hf_ieee80211_he_trigger_ru_no_more_ra_ru,",
          "33235:      {\"No More RA-RU\", \"wlan.trigger.he.ru_no_more_ra_ru\",",
          "33236:       FT_BOOLEAN, 40, NULL, 0x0040000000, NULL, HFILL }},",
          "33238:     {&hf_ieee80211_he_trigger_ul_target_rssi,",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "32427:      {\"Reserved\", \"wlan.trigger.he.user_reserved\",",
          "32428:       FT_UINT40, BASE_HEX, NULL, 0x8000000000, NULL, HFILL }},",
          "32430:     {&hf_he_ndp_sounding_dialog_token_number,",
          "32431:      {\"Sounding Dialog Token Number\", \"wlan.he_ndp.token.number\",",
          "32432:       FT_UINT8, BASE_DEC, NULL, 0xFC,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33247:     {&hf_he_qtp_control,",
          "33248:      {\"Control\", \"wlan.ext_tag.quiet_time_period.control\",",
          "33249:       FT_UINT8, BASE_RANGE_STRING | BASE_HEX, RVALS(quiet_time_period_control_rvals), 0,",
          "33250:       \"Type of Quiet Time Period Element\", HFILL } },",
          "33252:     {&hf_he_qtp_setup_quiet_period_duration,",
          "33253:      {\"Quiet Period Duration\", \"wlan.ext_tag.quiet_time_period.setup.duration\",",
          "33254:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33255:       \"Quiet Period Duration in units of 32us\", HFILL } },",
          "33257:     {&hf_he_qtp_setup_srv_specific_identif,",
          "33258:      {\"Service Specific Identifier\", \"wlan.ext_tag.quiet_time_period.setup.srv_specific_identif\",",
          "33259:       FT_UINT16, BASE_HEX, NULL, 0,",
          "33260:       \"Service Specific peer-to-peer operation\", HFILL } },",
          "33262:     {&hf_he_qtp_request_dialog_token,",
          "33263:      {\"Dialog Token\", \"wlan.ext_tag.quiet_time_period.request.dialog_token\",",
          "33264:       FT_UINT16, BASE_DEC, NULL, 0,",
          "33265:       \"Quite Time Periords Response suptype to which request subtype corresponds\",",
          "33266:       HFILL } },",
          "33268:     {&hf_he_qtp_request_quiet_period_offset,",
          "33269:      {\"Quiet Period Offset\", \"wlan.ext_tag.quiet_time_period.request.offset\",",
          "33270:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33271:       \"Offset of the first quiet period from the TBTT in TUs\", HFILL } },",
          "33273:     {&hf_he_qtp_request_quiet_period_duration,",
          "33274:      {\"Quiet Period Duration\", \"wlan.ext_tag.quiet_time_period.request.duration\",",
          "33275:       FT_UINT16, BASE_DEC, NULL, 0,",
          "33276:       \"Quiet Period Duration in units of 32us\", HFILL } },",
          "33278:     {&hf_he_qtp_request_quiet_period_interval,",
          "33279:      {\"Quiet Period Interval\", \"wlan.ext_tag.quiet_time_period.request.interval\",",
          "33280:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33281:       \"Interval between the start of two consecutive quite time periods, in TUs\",",
          "33282:       HFILL } },",
          "33284:     {&hf_he_qtp_request_repetition_count,",
          "33285:      {\"Repetition Count\", \"wlan.ext_tag.quiet_time_period.request.repetition_count\",",
          "33286:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33287:       \"Number of requested quiet time periods\", HFILL } },",
          "33289:     {&hf_he_qtp_request_srv_specific_identif,",
          "33290:      {\"Service Specific Identifier\", \"wlan.ext_tag.quiet_time_period.request.srv_specific_identif\",",
          "33291:       FT_UINT16, BASE_HEX, NULL, 0,",
          "33292:       \"Specified peer-to-peer operation for which participating HE STAs might transmit frames during the quiet time period\", HFILL } },",
          "33294:     {&hf_he_qtp_response_dialog_token,",
          "33295:      {\"Dialog Token\", \"wlan.ext_tag.quiet_time_period.response.dialog_token\",",
          "33296:       FT_UINT16, BASE_DEC, NULL, 0,",
          "33297:       \"The quiet time period request subtype to which this response corresponds\",",
          "33298:       HFILL } },",
          "33300:     {&hf_he_qtp_response_status_code,",
          "33301:      {\"Status Code\", \"wlan.ext_tag.quiet_time_period.response.status_code\",",
          "33302:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33303:       \"Status of the requested operation\", HFILL } },",
          "33305:     {&hf_he_qtp_response_quiet_period_offset,",
          "33306:      {\"Quiet Period Offset\", \"wlan.ext_tag.quiet_time_period.response.offset\",",
          "33307:        FT_UINT8, BASE_DEC, NULL, 0,",
          "33308:       \"Offset of the start of the first quiet time period\", HFILL } },",
          "33310:     {&hf_he_qtp_response_quiet_period_duration,",
          "33311:      {\"Quiet Period Duration\", \"wlan.ext_tag.quiet_time_period.response.duration\",",
          "33312:       FT_UINT16, BASE_DEC, NULL, 0,",
          "33313:       \"Quiet Period Duration in units of 32us\", HFILL } },",
          "33315:     {&hf_he_qtp_response_quiet_period_interval,",
          "33316:      {\"Quiet Period Interval\", \"wlan.ext_tag.quiet_time_period.response.interval\",",
          "33317:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33318:       \"Interval between the start of two consequtive quiet time periods\", HFILL } },",
          "33320:     {&hf_he_qtp_response_repetition_count,",
          "33321:      {\"Repetition Count\", \"wlan.ext_tag.quiet_time_period.response.repetition_count\",",
          "33322:       FT_UINT8, BASE_DEC, NULL, 0,",
          "33323:       \"Number of requested quiet time periods\", HFILL } },",
          "33325:     {&hf_he_qtp_response_srv_specific_identif,",
          "33326:      {\"Service Specific Identifier\", \"wlan.ext_tag.quiet_time_period.response.srv_specific_identif\",",
          "33327:       FT_UINT16, BASE_HEX, NULL, 0,",
          "33328:       \"Identifier of a peer-to-peer operation for which participating HE STAs might transmit frames\",",
          "33329:       HFILL } },",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "32453:      {\"AID11\", \"wlan.he_ndp.sta_info.aid11\",",
          "32454:       FT_UINT32, BASE_HEX, NULL, 0x000007FF, NULL, HFILL }},",
          "32461:     {&hf_he_ndp_annc_feedback_type_and_ng,",
          "32462:      {\"Feedback Type and Ng\", \"wlan.he_ndp.sta_info.feedback_type_and_ng\",",
          "",
          "[Removed Lines]",
          "32456:     {&hf_he_ndp_annc_partial_bw_info,",
          "32457:      {\"Partial BW Info\", \"wlan.he_ndp.sta_info.partial_bw_info\",",
          "32458:       FT_UINT32, BASE_CUSTOM, CF_FUNC(partial_bw_info_base_custom), 0x01FFF800,",
          "32459:        NULL, HFILL }},",
          "",
          "[Added Lines]",
          "33357:     {&hf_he_ndp_annc_ru_start,",
          "33358:      {\"RU Start Index\", \"wlan.he_ndp.sta_info.ru_start\",",
          "33359:       FT_UINT32, BASE_HEX, NULL, 0x3F800,",
          "33360:       \"26-tone RU start index of the target STA\", HFILL }},",
          "33362:     {&hf_he_ndp_annc_ru_end,",
          "33363:      {\"RU End Index\", \"wlan.he_ndp.sta_info.ru_end\",",
          "33364:       FT_UINT32, BASE_HEX, NULL, 0x1FC0000,",
          "33365:       \"26-tone RU end index  of the target STA\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "33459:     {&hf_he_mac_capabilities,",
          "33460:      {\"HE MAC Capabilities Information\", \"wlan.ext_tag.he_mac_caps\",",
          "33463:     {&hf_he_htc_he_support,",
          "33464:      {\"+HTC HE Support\", \"wlan.ext_tag.he_mac_cap.htc_he_support\",",
          "33466:       NULL, HFILL }},",
          "33468:     {&hf_he_twt_requester_support,",
          "33469:      {\"TWT Requester Support\", \"wlan.ext_tag.he_mac_cap.twt_req_support\",",
          "33471:       NULL, HFILL }},",
          "33473:     {&hf_he_twt_responder_support,",
          "33474:      {\"TWT Responder Support\", \"wlan.ext_tag.he_mac_cap.twt_rsp_support\",",
          "33476:       NULL, HFILL }},",
          "33478:     {&hf_he_fragmentation_support,",
          "33479:      {\"Fragmentation Support\", \"wlan.ext_tag.he_mac_cap.fragmentation_support\",",
          "33482:       NULL, HFILL }},",
          "33484:     {&hf_he_max_number_fragmented_msdus,",
          "33485:      {\"Maximum Number of Fragmented MSDUs\", \"wlan.ext_tag.he_mac_cap.max_frag_msdus\",",
          "33487:       NULL, HFILL }},",
          "33489:     {&hf_he_min_fragment_size,",
          "33490:      {\"Minimum Fragment Size\", \"wlan.ext_tag.he_mac_cap.min_frag_size\",",
          "33493:       NULL, HFILL }},",
          "33495:     {&hf_he_trigger_frame_mac_padding_dur,",
          "",
          "[Removed Lines]",
          "33461:       FT_UINT40, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "33465:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000000001,",
          "33470:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000000002,",
          "33475:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000000004,",
          "33480:       FT_UINT40, BASE_DEC|BASE_VAL64_STRING,",
          "33481:       VALS64(he_fragmentation_support_vals), 0x0000000018,",
          "33486:       FT_UINT40, BASE_DEC, NULL, 0x00000000E0,",
          "33491:       FT_UINT40, BASE_DEC|BASE_VAL64_STRING,",
          "33492:       VALS64(he_minimum_fragmentation_size_vals), 0x0000000300,",
          "",
          "[Added Lines]",
          "34367:       FT_UINT48, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "34371:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000000001,",
          "34376:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000000002,",
          "34381:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000000004,",
          "34386:       FT_UINT48, BASE_DEC|BASE_VAL64_STRING,",
          "34387:       VALS64(he_fragmentation_support_vals), 0x000000000018,",
          "34392:       FT_UINT48, BASE_CUSTOM, CF_FUNC(max_frag_msdus_base_custom), 0x0000000000E0,",
          "34397:       FT_UINT48, BASE_DEC|BASE_VAL64_STRING,",
          "34398:       VALS64(he_minimum_fragmentation_size_vals), 0x000000000300,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "33499:     {&hf_he_multi_tid_aggregation_support,",
          "33500:      {\"Multi-TID Aggregation Support\", \"wlan.ext_tag.he_mac_cap.multi_tid_agg_support\",",
          "33503:     {&hf_he_he_link_adaptation_support,",
          "33504:      {\"HE Link Adaptation Support\", \"wlan.ext_tag.he_mac_cap.he_link_adaptation_support\",",
          "33507:       NULL, HFILL }},",
          "33509:     {&hf_he_all_ack_support,",
          "33510:      {\"All Ack Support\", \"wlan.ext_tag.he_mac_cap.all_ack_support\",",
          "33512:       NULL, HFILL }},",
          "33517:       NULL, HFILL }},",
          "33519:     {&hf_he_bsr_support,",
          "33520:      {\"BSR Support\", \"wlan.ext_tag.he_mac_cap.bsr_support\",",
          "33522:       NULL, HFILL }},",
          "33524:     {&hf_he_broadcast_twt_support,",
          "33525:      {\"Broadcast TWT Support\", \"wlan.ext_tag.he_mac_cap.broadcast_twt_support\",",
          "33527:       NULL, HFILL }},",
          "33529:     {&hf_he_32_bit_ba_bitmap_support,",
          "33530:      {\"32-bit BA Bitmap Support\", \"wlan.ext_tag.he_mac_cap.32_bit_ba_bitmap_support\",",
          "33532:       NULL, HFILL }},",
          "33534:     {&hf_he_mu_cascading_support,",
          "33535:      {\"MU Cascading Support\", \"wlan.ext_tag.he_mac_cap.mu_cascading_support\",",
          "33537:       NULL, HFILL }},",
          "33539:     {&hf_he_ack_enabled_aggregation_support,",
          "33540:      {\"Ack-Enabled Aggregation Support\", \"wlan.ext_tag.he_mac_cap.ack_enabled_agg_support\",",
          "33542:       NULL, HFILL }},",
          "33547:       NULL, HFILL }},",
          "33549:     {&hf_he_om_control_support,",
          "33550:      {\"OM Control Support\", \"wlan.ext_tag.he_mac_cap.om_control_support\",",
          "33552:       NULL, HFILL }},",
          "33554:     {&hf_he_ofdma_ra_support,",
          "33555:      {\"OFDMA RA Support\", \"wlan.ext_tag.he_mac_cap.ofdma_ra_support\",",
          "33557:       NULL, HFILL }},",
          "33563:     {&hf_he_a_msdu_fragmentation_support,",
          "33564:      {\"A-MSDU Fragmentation Support\", \"wlan.ext_tag.he_mac_cap.a_msdu_frag_support\",",
          "33566:       NULL, HFILL }},",
          "33568:     {&hf_he_flexible_twt_schedule_support,",
          "33569:      {\"Flexible TWT Schedule Support\", \"wlan.ext_tag.he_mac_cap.flexible_twt_sched_support\",",
          "33571:       NULL, HFILL }},",
          "33573:     {&hf_he_rx_control_frame_to_multibss,",
          "33574:      {\"Rx Control Frame to MultiBSS\", \"wlan.ext_tag.he_mac_cap.rx_ctl_frm_multibss\",",
          "33576:       NULL, HFILL }},",
          "33578:     {&hf_he_bsrp_bqrp_a_mpdu_aggregation,",
          "33579:      {\"BSRP BQRP A-MPDU Aggregation\", \"wlan.ext_tag.he_mac_cap.bsrp_bqrp_a_mpdu_agg\",",
          "33581:       NULL, HFILL }},",
          "33583:     {&hf_he_qtp_support,",
          "33584:      {\"QTP Support\", \"wlan.ext_tag.he_mac_cap.qtp_support\",",
          "33586:       NULL, HFILL }},",
          "33588:     {&hf_he_bqr_support,",
          "33589:      {\"BQR Support\", \"wlan.ext_tag.he_mac_cap.bqr_support\",",
          "33591:       NULL, HFILL }},",
          "33596:       NULL, HFILL }},",
          "33598:     {&hf_he_ndp_feedback_report_support,",
          "33599:      {\"NDP Feedback Report Support\", \"wlan.ext_tag.he_mac_cap.ndp_feedback_report_support\",",
          "33601:       NULL, HFILL }},",
          "33603:     {&hf_he_ops_support,",
          "33604:      {\"OPS Support\", \"wlan.ext_tag.he_mac_cap.ops_support\",",
          "33606:       NULL, HFILL }},",
          "33608:     {&hf_he_a_msdu_in_a_mpdu_support,",
          "33609:      {\"A-MSDU in A-MPDU Support\", \"wlan.ext_tag.he_mac_cap.a_msdu_in_a_mpdu_support\",",
          "33611:       NULL, HFILL }},",
          "33613:     {&hf_he_reserved,",
          "33614:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bit_39\",",
          "33617:     {&hf_he_reserved_bits_5_7,",
          "33618:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bits_5_7\",",
          "33621:     {&hf_he_reserved_bits_8_9,",
          "33622:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bits_8_9\",",
          "33625:     {&hf_he_reserved_bits_15_16,",
          "33626:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bits_15_16\",",
          "33629:     {&hf_he_reserved_bit_18,",
          "33630:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bit_18\",",
          "33633:     {&hf_he_reserved_bit_19,",
          "33634:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bit_19\",",
          "33637:     {&hf_he_reserved_bit_25,",
          "33638:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_bit_25\",",
          "33643:       FT_UINT8, BASE_HEX, NULL, 0x01, NULL, HFILL }},",
          "33648:       NULL, HFILL }},",
          "33650:     {&hf_he_phy_chan_width_set,",
          "",
          "[Removed Lines]",
          "33501:       FT_UINT40, BASE_DEC, NULL, 0x0000007000, NULL, HFILL }},",
          "33505:       FT_UINT40, BASE_DEC|BASE_VAL64_STRING,",
          "33506:       VALS64(he_link_adaptation_support_vals), 0x0000018000,",
          "33511:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000020000,",
          "33514:     {&hf_he_umrs_support,",
          "33515:      {\"UMRS Support\", \"wlan.ext_tag.he_mac_cap.umrs_support\",",
          "33516:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000040000,",
          "33521:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000080000,",
          "33526:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000100000,",
          "33531:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000200000,",
          "33536:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000400000,",
          "33541:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0000800000,",
          "33544:     {&hf_he_group_addressed_multi_sta_blkack_support,",
          "33545:      {\"Group Addressed Multi-STA BlockAck in DL MU Support\", \"wlan.ext_tag.he_mac_cap.i_give_up\",",
          "33546:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0001000000,",
          "33551:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0002000000,",
          "33556:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0004000000,",
          "33559:     {&hf_he_max_a_mpdu_length_exponent,",
          "33560:      {\"Maximum A-MPDU Length Exponent\", \"wlan.ext_tag.he_mac_cap.max_a_mpdu_len_exp\",",
          "33561:       FT_UINT40, BASE_DEC, NULL, 0x0018000000, NULL, HFILL }},",
          "33565:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0020000000,",
          "33570:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0040000000,",
          "33575:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0080000000,",
          "33580:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0100000000,",
          "33585:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0200000000,",
          "33590:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0400000000,",
          "33593:     {&hf_he_sr_responder,",
          "33594:      {\"SR Responder Role\", \"wlan.ext_tag.he_mac_cap.sr_responder\",",
          "33595:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x0800000000,",
          "33600:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x1000000000,",
          "33605:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x2000000000,",
          "33610:       FT_BOOLEAN, 40, TFS(&tfs_supported_not_supported), 0x4000000000,",
          "33615:       FT_UINT40, BASE_HEX, NULL, 0x8000000000, NULL, HFILL }},",
          "33619:       FT_UINT40, BASE_HEX, NULL, 0x00000000E0, NULL, HFILL }},",
          "33623:       FT_UINT40, BASE_HEX, NULL, 0x0000000300, NULL, HFILL }},",
          "33627:       FT_UINT40, BASE_HEX, NULL, 0x0000018000, NULL, HFILL }},",
          "33631:       FT_UINT40, BASE_HEX, NULL, 0x0000040000, NULL, HFILL }},",
          "33635:       FT_UINT40, BASE_HEX, NULL, 0x0000080000, NULL, HFILL }},",
          "33639:       FT_UINT40, BASE_HEX, NULL, 0x0002000000, NULL, HFILL }},",
          "33641:     {&hf_he_phy_dual_band_support,",
          "33642:      {\"Dual Band Support\", \"wlan.ext_tag.he_phy_cap.fbytes\",",
          "33645:     {&hf_he_phy_cap_dual_band_support,",
          "33646:      {\"Dual Band Support\", \"wlan.ext_tag.he_phy_cap.fbyte.dbs\",",
          "33647:       FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,",
          "",
          "[Added Lines]",
          "34407:       FT_UINT48, BASE_DEC, NULL, 0x000000007000, NULL, HFILL }},",
          "34411:       FT_UINT48, BASE_DEC|BASE_VAL64_STRING,",
          "34412:       VALS64(he_link_adaptation_support_vals), 0x000000018000,",
          "34417:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000020000,",
          "34420:     {&hf_he_trs_support,",
          "34421:      {\"TRS Support\", \"wlan.ext_tag.he_mac_cap.Trs_support\",",
          "34422:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x0000040000,",
          "34427:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000080000,",
          "34432:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000100000,",
          "34437:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000200000,",
          "34442:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000400000,",
          "34447:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000000800000,",
          "34450:     {&hf_he_reserved_b24,",
          "34451:      {\"Reserved\", \"wlan.ext_tag.he_mac_cap.reserved_b24\",",
          "34452:       FT_UINT48, BASE_HEX, NULL, 0x000001000000,",
          "34457:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000002000000,",
          "34462:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000004000000,",
          "34465:     {&hf_he_max_a_mpdu_length_exponent_ext,",
          "34466:      {\"Maximum A-MPDU Length Exponent Extension\",",
          "34467:       \"wlan.ext_tag.he_mac_cap.max_a_mpdu_len_exp_ext\",",
          "34468:       FT_UINT48, BASE_DEC, NULL, 0x000018000000, NULL, HFILL }},",
          "34472:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000020000000,",
          "34477:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000040000000,",
          "34482:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000080000000,",
          "34487:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000100000000,",
          "34492:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000200000000,",
          "34497:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x000400000000,",
          "34500:     {&hf_he_srp_responder,",
          "34501:      {\"SRP Responder Role\", \"wlan.ext_tag.he_mac_cap.sr_responder\",",
          "34502:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x0800000000,",
          "34507:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x001000000000,",
          "34512:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x002000000000,",
          "34517:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported), 0x004000000000,",
          "34520:     {&hf_he_multi_tid_aggregation_tx_support,",
          "34521:      {\"Multi-TID Aggregation TX Support\", \"wlan.ext_tag.he_mac_cap.multi_tid_agg_support\",",
          "34522:        FT_UINT48, BASE_DEC, NULL, 0x38000000000, NULL, HFILL }},",
          "34524:     {&hf_he_subchannel_selective_trans_support,",
          "34525:      {\"HE Subchannel Selective Transmission Support\", \"wlan.ext_tag.he_mac_cap.subchannel_selective_xmit_support\",",
          "34526:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported),",
          "34527:       0x40000000000, NULL, HFILL }},",
          "34529:     {&hf_he_2_996_tone_ru_support,",
          "34530:      {\"UL 2x996-tone RU Support\", \"wlan.ext_tag.he_mac_cap.ul_2_996_tone_ru_support\",",
          "34531:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported),",
          "34532:       0x80000000000, NULL, HFILL }},",
          "34534:     {&hf_he_om_control_ul_mu_data_disable_rx_support,",
          "34535:      {\"OM Control UL MU Data Disable RX Support\", \"wlan.ext_tag.he_mac_cap.om_cntl_ul_mu_data_disble_rx_support\",",
          "34536:       FT_BOOLEAN, 48, TFS(&tfs_supported_not_supported),",
          "34537:       0x100000000000, NULL, HFILL }},",
          "34541:       FT_UINT48, BASE_HEX, NULL, 0x008000000000, NULL, HFILL }},",
          "34545:       FT_UINT48, BASE_HEX, NULL, 0x0000000000E0, NULL, HFILL }},",
          "34549:       FT_UINT48, BASE_HEX, NULL, 0x000000000300, NULL, HFILL }},",
          "34553:       FT_UINT48, BASE_HEX, NULL, 0x000000018000, NULL, HFILL }},",
          "34557:       FT_UINT48, BASE_HEX, NULL, 0x000000040000, NULL, HFILL }},",
          "34561:       FT_UINT48, BASE_HEX, NULL, 0x000000080000, NULL, HFILL }},",
          "34565:       FT_UINT48, BASE_HEX, NULL, 0x000002000000, NULL, HFILL }},",
          "34567:     {&hf_he_phy_reserved_b0,",
          "34568:      {\"Reserved\", \"wlan.ext_tag.he_phy_cap.reserved_b0\",",
          "34571:     {&hf_he_phy_cap_reserved_b0,",
          "34572:      {\"Reserved\", \"wlan.ext_tag.he_phy_cap.fbyte.reserved_b0\",",
          "34573:       FT_UINT8, BASE_HEX, NULL, 0x01,",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "33881:      {\"Midamble Rx 2x & 1x HE-LTF\", \"wlan.ext_tag.he_phy_cap.nbytes.midamble_rx_2x_1x_he_ltf\",",
          "33882:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x2000, NULL, HFILL }},",
          "33886:       FT_UINT16, BASE_HEX, NULL, 0xC000, NULL, HFILL }},",
          "33888:     {&hf_he_mcs_max_he_mcs_80_rx_1_ss,",
          "33889:      {\"Max HE-MCS for 1 SS\", \"wlan.ext_tag.he_mcs_map.max_he_mcs_80_rx_1_ss\",",
          "33890:       FT_UINT16, BASE_HEX, VALS(he_mcs_map_vals), 0x0003, NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "33884:     {&hf_he_phy_cap_b70_b71_reserved,",
          "33885:      {\"Reserved\", \"wlan.ext_tag.he_phy_cap.nbytes.reserved_b70_b71\",",
          "",
          "[Added Lines]",
          "34810:     {&hf_he_phy_b72_to_b87,",
          "34811:      {\"Bits 72 to 87\", \"wlan.ext_tag.he_phy_cap.bits_72_to_87\",",
          "34812:       FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "34814:     {&hf_he_phy_cap_dcm_max_bw,",
          "34815:      {\"DCM Max BW\", \"wlan.ext_tag.he_phy_cap.nbytes.dcm_max_bw\",",
          "34818:     {&hf_he_phy_cap_longer_than_16_he_sigb_ofdm_symbol_support,",
          "34819:      {\"Longer Than 16 HE SIG-B OFDM Symbols Support\", \"wlan.ext_tag.he_phy_cap.nbyes.longer_than_16_he_sigb_ofdm_sym_support\",",
          "34820:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0001, NULL, HFILL }},",
          "34822:     {&hf_he_phy_cap_non_triggered_cqi_feedback,",
          "34823:      {\"Non-Triggered CQI Feedback\", \"wlan.ext_tag.he_phy_cap.nbytes.non_triggered_feedback\",",
          "34824:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0002, NULL, HFILL }},",
          "34826:     {&hf_he_phy_cap_tx_1024_qam_242_tone_ru_support,",
          "34827:      {\"Tx 1024-QAM Support < 242-tone RU\", \"wlan.ext_tag.he_phy_cap.nbytes.tx_1024_qam_support_lt_242_tone_ru\",",
          "34828:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0004, NULL, HFILL }},",
          "34830:     {&hf_he_phy_cap_rx_1024_qam_242_tone_ru_support,",
          "34831:      {\"Rx 1024-QAM Support < 242-tone RU\", \"wlan.ext_tag.he_phy_cap.nbytes.rx_1024_qam_support_lt_242_tone_ru\",",
          "34832:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0008, NULL, HFILL }},",
          "34834:     {&hf_rx_full_bw_su_using_he_muppdu_w_compressed_sigb,",
          "34835:      {\"Rx Full BW SU Using HE MU PPDU With Compressed SIGB\", \"wlan.ext_tag.he_phy_cap.nbytes.rx_full_bw_su_using_he_mu_ppdu_with_compressed_sigb\",",
          "34836:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0010, NULL, HFILL }},",
          "34838:     {&hf_rx_full_bw_su_using_he_muppdu_w_non_compressed_sigb,",
          "34839:      {\"Rx Full BW SU Using HE MU PPDU With Non-Compressed SIGB\", \"wlan.ext_tag.he_phy_cap.nbytes.rx_full_bw_su_using_he_mu_ppdu_with_non_compressed_sigb\",",
          "34840:       FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0020, NULL, HFILL }},",
          "34842:     {&hf_he_phy_cap_b78_b87_reserved,",
          "34843:      {\"Reserved\", \"wlan.ext_tag.he_phy_cap.nbytes.reserved_b78_b87\",",
          "34844:       FT_UINT16, BASE_HEX, NULL, 0xFFC0, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "34120:     {&hf_he_operation_parameter,",
          "34121:      {\"HE Operation Parameters\", \"wlan.ext_tag.he_operation.params\",",
          "34128:     {&hf_he_operation_default_pe_duration,",
          "34129:      {\"Default PE Duration\", \"wlan.ext_tag.he_operation.default_pe_duration\",",
          "34132:     {&hf_he_operation_twt_required,",
          "34133:      {\"TWT Required\", \"wlan.ext_tag.he_operation.twt_required\",",
          "34136:     {&hf_he_operation_txop_duration_rts_threshold,",
          "34137:      {\"TXOP Duration RTS Threshold\", \"wlan.ext_tag.he_operation.txop_duration_rts_thresh\",",
          "34144:     {&hf_he_operation_vht_operation_information_present,",
          "34145:      {\"VHT Operation Information Present\", \"wlan.ext_tag.he_operation.vht_op_info_present\",",
          "34168:     {&hf_he_operation_basic_mcs,",
          "34169:      {\"Basic HE-MCS and NSS Set\", \"wlan.ext_tag.he_operation.basic_he_mcs_and_nss\",",
          "",
          "[Removed Lines]",
          "34122:       FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "34124:     {&hf_he_operation_bss_color,",
          "34125:      {\"BSS Color\", \"wlan.ext_tag.he_operation.he_color\",",
          "34126:       FT_UINT32, BASE_DEC, NULL, 0x0000003f, NULL, HFILL }},",
          "34130:       FT_UINT32, BASE_DEC, NULL, 0x000001C0, NULL, HFILL }},",
          "34134:       FT_BOOLEAN, 32, TFS(&tfs_required_not_required), 0x00000200, NULL, HFILL }},",
          "34138:       FT_UINT32, BASE_DEC, NULL, 0x000FFC00, NULL, HFILL }},",
          "34140:     {&hf_he_operation_partial_bss_color,",
          "34141:      {\"Partial BSS Color\", \"wlan.ext_tag.he_operation.partial_bss_color\",",
          "34142:       FT_BOOLEAN, 32, NULL, 0x00100000, NULL, HFILL }},",
          "34146:       FT_BOOLEAN, 32, NULL, 0x00200000, NULL, HFILL }},",
          "34148:     {&hf_he_operation_reserved_b22_b27,",
          "34149:      {\"Reserved\", \"wlan.ext_tag.he_operation.reserved_b22_b27\",",
          "34150:       FT_UINT32, BASE_HEX, NULL, 0x0FC00000, NULL, HFILL }},",
          "34152:     {&hf_he_operation_multiple_bssid_ap,",
          "34153:      {\"Multiple BSSID AP\", \"wlan.ext_tag.he_operation.multiple_bssid_ap\",",
          "34154:       FT_BOOLEAN, 32, NULL, 0x10000000, NULL, HFILL }},",
          "34156:     {&hf_he_operation_txbssid_indicator,",
          "34157:      {\"TX BSSID Indicator\", \"wlan.ext_tag.he_operation.tx_bssid_indicator\",",
          "34158:       FT_BOOLEAN, 32, NULL, 0x20000000, NULL, HFILL }},",
          "34160:     {&hf_he_operation_bss_color_disabled,",
          "34161:      {\"BSS Color Disabled\", \"wlan.ext_tag.he_operation.bss_color_disabled\",",
          "34162:       FT_BOOLEAN, 32, TFS(&tfs_disabled_enabled), 0x40000000, NULL, HFILL }},",
          "34164:     {&hf_he_operation_reserved_b31,",
          "34165:      {\"Reserved\", \"wlan.ext_tag.he_operation.reserved_b31\",",
          "34166:       FT_UINT32, BASE_HEX, NULL, 0x80000000, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "35080:       FT_UINT24, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "35084:       FT_UINT24, BASE_DEC, NULL, 0x000007, NULL, HFILL }},",
          "35088:       FT_BOOLEAN, 24, TFS(&tfs_required_not_required), 0x000008, NULL, HFILL }},",
          "35092:       FT_UINT24, BASE_DEC, NULL, 0x0003FF, NULL, HFILL }},",
          "35096:       FT_BOOLEAN, 24, NULL, 0x004000, NULL, HFILL }},",
          "35098:     {&hf_he_operation_co_located_bss,",
          "35099:      {\"Co-Located BSS\", \"wlan.ext_tag.he_operation.co_located_bss\",",
          "35100:       FT_BOOLEAN, 24, NULL, 0x008000, NULL, HFILL }},",
          "35102:     {&hf_he_operation_er_su_disable,",
          "35103:      {\"ER SU Disable\", \"wlan.ext_tag.he_operation.er_su_disable\",",
          "35104:       FT_BOOLEAN, 24, NULL, 0x010000, NULL, HFILL }},",
          "35106:     {&hf_he_operation_reserved_b17_b23,",
          "35107:      {\"Reserved\", \"wlan.ext_tag.he_operation.reserved_b17_b32\",",
          "35108:       FT_UINT24, BASE_HEX, NULL, 0xFE0000, NULL, HFILL }},",
          "35110:     {&hf_he_bss_color_information,",
          "35111:      {\"BSS Color Information\", \"wlan.ext_tag.bss_color_information\",",
          "35112:       FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "35114:     {&hf_he_bss_color_info_bss_color,",
          "35115:      {\"BSS Color\", \"wlan.ext_tag.bss_color_information.bss_color\",",
          "35116:       FT_UINT8, BASE_HEX, NULL, 0x3F, NULL, HFILL }},",
          "35118:     {&hf_he_bss_color_partial_bss_color,",
          "35119:      {\"Partial BSS Color\", \"wlan.ext_tag.bss_color_information.partial_bss_color\",",
          "35120:       FT_BOOLEAN, 8, NULL, 0x40, NULL, HFILL }},",
          "35122:     {&hf_he_bss_color_bss_color_disabled,",
          "35123:      {\"BSS Color Disabled\", \"wlan.ext_tag.bss_color_information.bss_color_disabled\",",
          "35124:       FT_BOOLEAN, 8, NULL, 0x80, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "34213:      {\"Channel Center Frequency Segment 1\", \"wlan.ext_tag.he_operatoon.vht_op_info.chan_center_freq_seg_1\",",
          "34214:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "34218:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "34220:     {&hf_he_muac_aci_aifsn,",
          "34221:      {\"AIC/AIFSN\",\"wlan.ext_tag.mu_edca_parameter_set.aic_aifsn\",",
          "34222:       FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "34224:     {&hf_he_mu_edca_timer,",
          "34225:      {\"MU EDCA Timer\",\"wlan.ext_tag.mu_edca_parameter_set.mu_edca_timer\",",
          "34226:       FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "34216:     {&hf_he_operation_max_bssid_indicator,",
          "34217:      {\"MaxBSSID Indicator\", \"wlan.ext_tag.he_operation.maxbssid_indicator\",",
          "",
          "[Added Lines]",
          "35174:     {&hf_he_operation_max_colocated_bssid_indicator,",
          "35175:      {\"Max Co-Located BSSID Indicator\", \"wlan.ext_tag.he_operation.max_colocated_bssid_indicator\",",
          "35182:     {&hf_he_muac_aifsn,",
          "35183:      {\"AIFSN\", \"wlan.ext_tag.mu_edca_parameter_set.aifsn\",",
          "35184:       FT_UINT8, BASE_DEC, NULL, 0x0F,",
          "35185:       NULL, HFILL }},",
          "35187:     {&hf_he_muac_acm,",
          "35188:      {\"Admission Control Mandatory\", \"wlan.ext_tag.mu_edca_parameter_set.acm\",",
          "35189:       FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x10,",
          "35190:       NULL, HFILL }},",
          "35192:     {&hf_he_muac_aci,",
          "35193:      {\"ACI\", \"wlan.ext_tag.mu_edca_parameter_set.aci\",",
          "35194:       FT_UINT8, BASE_DEC, VALS(ieee80211_wfa_ie_wme_acs_vals), 0x60,",
          "35195:       NULL, HFILL }},",
          "35197:     {&hf_he_muac_reserved,",
          "35198:      {\"Reserved\", \"wlan.ext_tag.mu_edca_parameter_set.reserved\",",
          "35199:       FT_UINT8, BASE_DEC, NULL, 0x80,",
          "35200:       \"Must be Zero\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "34516:     &ett_htc_he_a_control,",
          "34517:     &ett_mfb_subtree,",
          "34518:     &ett_lac_subtree,",
          "34521:     &ett_ieee80211_hla_control,",
          "34522:     &ett_ieee80211_buffer_status_report,",
          "34523:     &ett_ieee80211_control_uph,",
          "34525:     &ett_ieee80211_control_cci,",
          "34527:     &ett_vht_cap_tree,",
          "",
          "[Removed Lines]",
          "34519:     &ett_ieee80211_umrs_control,",
          "34520:     &ett_ieee80211_om_control,",
          "34524:     &ett_ieee80211_bqr_control,",
          "",
          "[Added Lines]",
          "35497:     &ett_ieee80211_ul_mu_response_schedule,",
          "35498:     &ett_ieee80211_control_om,",
          "35502:     &ett_ieee80211_buffer_control_bqr,",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "34536:     &ett_vht_ndp_annc_sta_info_tree,",
          "34537:     &ett_vht_ndp_annc_sta_list,",
          "34541:     &ett_ff_vhtmimo_cntrl,",
          "34542:     &ett_ff_vhtmimo_beamforming_report,",
          "34543:     &ett_ff_vhtmimo_beamforming_report_snr,",
          "",
          "[Removed Lines]",
          "34539:     &ett_he_mimo_control,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "34709:     &ett_he_phy_cap_b24_to_b39,",
          "34710:     &ett_he_phy_cap_b40_to_b55,",
          "34711:     &ett_he_phy_cap_b56_to_b71,",
          "34712:     &ett_he_mcs_and_nss_set,",
          "34713:     &ett_he_rx_tx_he_mcs_map_lte_80,",
          "34714:     &ett_he_rx_mcs_map_lte_80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35688:     &ett_he_phy_cap_b72_to_b87,",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "34723:     &ett_he_ppe_nss,",
          "34724:     &ett_he_ppe_ru_alloc,",
          "34725:     &ett_he_operation_params,",
          "34726:     &ett_he_oper_basic_mcs,",
          "34727:     &ett_he_operation_vht_op_info,",
          "34728:     &ett_he_mu_edca_param,",
          "34729:     &ett_he_uora_tree,",
          "34730:     &ett_he_spatial_reuse_control,",
          "34731:     &ett_he_ess_report_info_field,",
          "34732:     &ett_he_bss_new_color_info,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35703:     &ett_he_bss_color_information,",
          "35708:     &ett_he_aic_aifsn,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00d5e9e9fb377f52ab7696f25c1dbc011ef0244d",
      "candidate_info": {
        "commit_hash": "00d5e9e9fb377f52ab7696f25c1dbc011ef0244d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/00d5e9e9fb377f52ab7696f25c1dbc011ef0244d",
        "files": [
          "epan/dissectors/packet-ieee80211.c"
        ],
        "message": "IEEE 802.11: Fix an infinite loop.\n\nIn dissect_compressed_beamforming_and_cqi, break out of a loop if our\nbit offset doesn't advance.\n\nBug: 15553\nChange-Id: I6212be4c08c42ef1969c1302e85a8e08f1d7547f\nReviewed-on: https://code.wireshark.org/review/32679\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211.c||epan/dissectors/packet-ieee80211.c": [
          "File: epan/dissectors/packet-ieee80211.c -> epan/dissectors/packet-ieee80211.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12308: static guint",
          "12310: {",
          "12311:   int byte_count = 0;",
          "12312:   guint64 mimo_cntl = tvb_get_letoh40(tvb, offset);",
          "",
          "[Removed Lines]",
          "12309: dissect_compressed_beamforming_and_cqi(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo _U_, int offset)",
          "",
          "[Added Lines]",
          "12309: dissect_compressed_beamforming_and_cqi(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12384:   scidx = SCIDX_END_SENTINAL;",
          "12385:   while ((scidx = next_he_scidx(scidx, bw, grouping, feedback,",
          "12386:           ru_start_index, ru_end_index)) != (int)SCIDX_END_SENTINAL) {",
          "12387:     bit_offset = dissect_he_feedback_matrix(feedback_tree, tvb, offset,",
          "12388:                         bit_offset, scidx, nr, nc, phi_bits, psi_bits);",
          "12389:     offset = bit_offset / 8;",
          "12390:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12387:     int prev_bit_offset = bit_offset;",
          "12390:     if (bit_offset <= prev_bit_offset) {",
          "12391:       expert_add_info(pinfo, tree, &ei_ieee80211_bad_length);",
          "12392:       break;",
          "12393:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13665: }",
          "13667: static int",
          "13669: {",
          "13670:   guint8 ssid_len;",
          "",
          "[Removed Lines]",
          "13668: dissect_owe_transition_mode(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void* data _U_)",
          "",
          "[Added Lines]",
          "13674: dissect_owe_transition_mode(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "",
          "---------------"
        ]
      }
    }
  ]
}