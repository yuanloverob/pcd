{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd56985837fdfc076a1ee3d6407ac5e81171e2d5",
      "candidate_info": {
        "commit_hash": "dd56985837fdfc076a1ee3d6407ac5e81171e2d5",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/dd56985837fdfc076a1ee3d6407ac5e81171e2d5",
        "files": [
          "arch/X86/X86GenDisassemblerTables_reduce.inc"
        ],
        "message": "x86: Fix the operand encoding in the test instruction for reduce set, issue #702",
        "before_after_code_files": [
          "arch/X86/X86GenDisassemblerTables_reduce.inc||arch/X86/X86GenDisassemblerTables_reduce.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86GenDisassemblerTables_reduce.inc||arch/X86/X86GenDisassemblerTables_reduce.inc": [
          "File: arch/X86/X86GenDisassemblerTables_reduce.inc -> arch/X86/X86GenDisassemblerTables_reduce.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "8841:   },",
          "8845:   },",
          "",
          "[Removed Lines]",
          "8843:     53,",
          "",
          "[Added Lines]",
          "8843:     57,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8869:   },",
          "8873:   },",
          "",
          "[Removed Lines]",
          "8871:     53,",
          "",
          "[Added Lines]",
          "8871:     57,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8897:   },",
          "8901:   },",
          "",
          "[Removed Lines]",
          "8899:     33,",
          "",
          "[Added Lines]",
          "8899:     60,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8929:   },",
          "8933:   },",
          "",
          "[Removed Lines]",
          "8931:     73,",
          "",
          "[Added Lines]",
          "8931:     72,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a799790147dad8363f72669d50cda8579cb98b05",
      "candidate_info": {
        "commit_hash": "a799790147dad8363f72669d50cda8579cb98b05",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a799790147dad8363f72669d50cda8579cb98b05",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: print out core version",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static void usage(char *prog)",
          "75: {",
          "77:  printf(\"Syntax: %s [-d:print all detail information] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "78:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "",
          "[Removed Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\\n\", VERSION);",
          "",
          "[Added Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (core v%u.%u)\\n\\n\", VERSION, CS_API_MAJOR, CS_API_MINOR);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "640bf3814ef472122967386f203127cbbdbb3411",
      "candidate_info": {
        "commit_hash": "640bf3814ef472122967386f203127cbbdbb3411",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/640bf3814ef472122967386f203127cbbdbb3411",
        "files": [
          "bindings/java/capstone/X86_const.java",
          "bindings/ocaml/x86_const.ml",
          "bindings/python/capstone/x86_const.py"
        ],
        "message": "bindings: update FPU flags & FPU group for x86 after the last merge",
        "before_after_code_files": [
          "bindings/javcapstone/X86_const.java||bindings/java/capstone/X86_const.java",
          "bindings/ocaml/x86_const.ml||bindings/ocaml/x86_const.ml",
          "bindings/python/capstone/x86_const.py||bindings/python/capstone/x86_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/X86_const.java||bindings/java/capstone/X86_const.java": [
          "File: bindings/javcapstone/X86_const.java -> bindings/java/capstone/X86_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:  public static final int X86_EFLAGS_RESET_RF = 1<<46;",
          "300:  public static final int X86_EFLAGS_TEST_RF = 1<<47;",
          "301:  public static final int X86_EFLAGS_TEST_IF = 1<<48;",
          "302:  public static final int X86_EFLAGS_TEST_TF = 1<<49;",
          "303:  public static final int X86_EFLAGS_TEST_AF = 1<<50;",
          "304:  public static final int X86_EFLAGS_RESET_ZF = 1<<51;",
          "305:  public static final int X86_EFLAGS_SET_OF = 1<<52;",
          "306:  public static final int X86_EFLAGS_SET_SF = 1<<53;",
          "307:  public static final int X86_EFLAGS_SET_ZF = 1<<54;",
          "308:  public static final int X86_EFLAGS_SET_AF = 1<<55;",
          "309:  public static final int X86_EFLAGS_SET_PF = 1<<56;",
          "310:  public static final int X86_EFLAGS_RESET_0F = 1<<57;",
          "311:  public static final int X86_EFLAGS_RESET_AC = 1<<58;",
          "312:  public static final int X86_FPU_FLAGS_MODIFY_C0 = (1ULL<<0);",
          "313:  public static final int X86_FPU_FLAGS_MODIFY_C1 = (1ULL<<1);",
          "314:  public static final int X86_FPU_FLAGS_MODIFY_C2 = (1ULL<<2);",
          "315:  public static final int X86_FPU_FLAGS_MODIFY_C3 = (1ULL<<3);",
          "316:  public static final int X86_FPU_FLAGS_RESET_C0 = (1ULL<<4);",
          "317:  public static final int X86_FPU_FLAGS_RESET_C1 = (1ULL<<5);",
          "318:  public static final int X86_FPU_FLAGS_RESET_C2 = (1ULL<<6);",
          "319:  public static final int X86_FPU_FLAGS_RESET_C3 = (1ULL<<7);",
          "320:  public static final int X86_FPU_FLAGS_SET_C0 = (1ULL<<8);",
          "321:  public static final int X86_FPU_FLAGS_SET_C1 = (1ULL<<9);",
          "322:  public static final int X86_FPU_FLAGS_SET_C2 = (1ULL<<10);",
          "323:  public static final int X86_FPU_FLAGS_SET_C3 = (1ULL<<11);",
          "324:  public static final int X86_FPU_FLAGS_UNDEFINED_C0 = (1ULL<<12);",
          "325:  public static final int X86_FPU_FLAGS_UNDEFINED_C1 = (1ULL<<13);",
          "326:  public static final int X86_FPU_FLAGS_UNDEFINED_C2 = (1ULL<<14);",
          "327:  public static final int X86_FPU_FLAGS_UNDEFINED_C3 = (1ULL<<15);",
          "328:  public static final int X86_FPU_FLAGS_TEST_C0 = (1ULL<<16);",
          "329:  public static final int X86_FPU_FLAGS_TEST_C1 = (1ULL<<17);",
          "330:  public static final int X86_FPU_FLAGS_TEST_C2 = (1ULL<<18);",
          "331:  public static final int X86_FPU_FLAGS_TEST_C3 = (1ULL<<19);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1987:  public static final int X86_GRP_FPU = 169;",
          "1988:  public static final int X86_GRP_ENDING = 170;",
          "",
          "---------------"
        ],
        "bindings/ocaml/x86_const.ml||bindings/ocaml/x86_const.ml": [
          "File: bindings/ocaml/x86_const.ml -> bindings/ocaml/x86_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: let _X86_EFLAGS_UNDEFINED_PF = 1 lsl 43;;",
          "294: let _X86_EFLAGS_UNDEFINED_AF = 1 lsl 44;;",
          "295: let _X86_EFLAGS_UNDEFINED_CF = 1 lsl 45;;",
          "297: (* Operand type for instruction's operands *)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: let _X86_EFLAGS_RESET_RF = 1 lsl 46;;",
          "297: let _X86_EFLAGS_TEST_RF = 1 lsl 47;;",
          "298: let _X86_EFLAGS_TEST_IF = 1 lsl 48;;",
          "299: let _X86_EFLAGS_TEST_TF = 1 lsl 49;;",
          "300: let _X86_EFLAGS_TEST_AF = 1 lsl 50;;",
          "301: let _X86_EFLAGS_RESET_ZF = 1 lsl 51;;",
          "302: let _X86_EFLAGS_SET_OF = 1 lsl 52;;",
          "303: let _X86_EFLAGS_SET_SF = 1 lsl 53;;",
          "304: let _X86_EFLAGS_SET_ZF = 1 lsl 54;;",
          "305: let _X86_EFLAGS_SET_AF = 1 lsl 55;;",
          "306: let _X86_EFLAGS_SET_PF = 1 lsl 56;;",
          "307: let _X86_EFLAGS_RESET_0F = 1 lsl 57;;",
          "308: let _X86_EFLAGS_RESET_AC = 1 lsl 58;;",
          "309: let _X86_FPU_FLAGS_MODIFY_C0 = (1ULL lsl 0);;",
          "310: let _X86_FPU_FLAGS_MODIFY_C1 = (1ULL lsl 1);;",
          "311: let _X86_FPU_FLAGS_MODIFY_C2 = (1ULL lsl 2);;",
          "312: let _X86_FPU_FLAGS_MODIFY_C3 = (1ULL lsl 3);;",
          "313: let _X86_FPU_FLAGS_RESET_C0 = (1ULL lsl 4);;",
          "314: let _X86_FPU_FLAGS_RESET_C1 = (1ULL lsl 5);;",
          "315: let _X86_FPU_FLAGS_RESET_C2 = (1ULL lsl 6);;",
          "316: let _X86_FPU_FLAGS_RESET_C3 = (1ULL lsl 7);;",
          "317: let _X86_FPU_FLAGS_SET_C0 = (1ULL lsl 8);;",
          "318: let _X86_FPU_FLAGS_SET_C1 = (1ULL lsl 9);;",
          "319: let _X86_FPU_FLAGS_SET_C2 = (1ULL lsl 10);;",
          "320: let _X86_FPU_FLAGS_SET_C3 = (1ULL lsl 11);;",
          "321: let _X86_FPU_FLAGS_UNDEFINED_C0 = (1ULL lsl 12);;",
          "322: let _X86_FPU_FLAGS_UNDEFINED_C1 = (1ULL lsl 13);;",
          "323: let _X86_FPU_FLAGS_UNDEFINED_C2 = (1ULL lsl 14);;",
          "324: let _X86_FPU_FLAGS_UNDEFINED_C3 = (1ULL lsl 15);;",
          "325: let _X86_FPU_FLAGS_TEST_C0 = (1ULL lsl 16);;",
          "326: let _X86_FPU_FLAGS_TEST_C1 = (1ULL lsl 17);;",
          "327: let _X86_FPU_FLAGS_TEST_C2 = (1ULL lsl 18);;",
          "328: let _X86_FPU_FLAGS_TEST_C3 = (1ULL lsl 19);;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1948: let _X86_GRP_VLX = 166;;",
          "1949: let _X86_GRP_SMAP = 167;;",
          "1950: let _X86_GRP_NOVLX = 168;;",
          "",
          "[Removed Lines]",
          "1951: let _X86_GRP_ENDING = 169;;",
          "",
          "[Added Lines]",
          "1984: let _X86_GRP_FPU = 169;;",
          "1985: let _X86_GRP_ENDING = 170;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/x86_const.py||bindings/python/capstone/x86_const.py": [
          "File: bindings/python/capstone/x86_const.py -> bindings/python/capstone/x86_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: X86_EFLAGS_UNDEFINED_PF = 1<<43",
          "294: X86_EFLAGS_UNDEFINED_AF = 1<<44",
          "295: X86_EFLAGS_UNDEFINED_CF = 1<<45",
          "297: # Operand type for instruction's operands",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: X86_EFLAGS_RESET_RF = 1<<46",
          "297: X86_EFLAGS_TEST_RF = 1<<47",
          "298: X86_EFLAGS_TEST_IF = 1<<48",
          "299: X86_EFLAGS_TEST_TF = 1<<49",
          "300: X86_EFLAGS_TEST_AF = 1<<50",
          "301: X86_EFLAGS_RESET_ZF = 1<<51",
          "302: X86_EFLAGS_SET_OF = 1<<52",
          "303: X86_EFLAGS_SET_SF = 1<<53",
          "304: X86_EFLAGS_SET_ZF = 1<<54",
          "305: X86_EFLAGS_SET_AF = 1<<55",
          "306: X86_EFLAGS_SET_PF = 1<<56",
          "307: X86_EFLAGS_RESET_0F = 1<<57",
          "308: X86_EFLAGS_RESET_AC = 1<<58",
          "309: X86_FPU_FLAGS_MODIFY_C0 = (1ULL<<0)",
          "310: X86_FPU_FLAGS_MODIFY_C1 = (1ULL<<1)",
          "311: X86_FPU_FLAGS_MODIFY_C2 = (1ULL<<2)",
          "312: X86_FPU_FLAGS_MODIFY_C3 = (1ULL<<3)",
          "313: X86_FPU_FLAGS_RESET_C0 = (1ULL<<4)",
          "314: X86_FPU_FLAGS_RESET_C1 = (1ULL<<5)",
          "315: X86_FPU_FLAGS_RESET_C2 = (1ULL<<6)",
          "316: X86_FPU_FLAGS_RESET_C3 = (1ULL<<7)",
          "317: X86_FPU_FLAGS_SET_C0 = (1ULL<<8)",
          "318: X86_FPU_FLAGS_SET_C1 = (1ULL<<9)",
          "319: X86_FPU_FLAGS_SET_C2 = (1ULL<<10)",
          "320: X86_FPU_FLAGS_SET_C3 = (1ULL<<11)",
          "321: X86_FPU_FLAGS_UNDEFINED_C0 = (1ULL<<12)",
          "322: X86_FPU_FLAGS_UNDEFINED_C1 = (1ULL<<13)",
          "323: X86_FPU_FLAGS_UNDEFINED_C2 = (1ULL<<14)",
          "324: X86_FPU_FLAGS_UNDEFINED_C3 = (1ULL<<15)",
          "325: X86_FPU_FLAGS_TEST_C0 = (1ULL<<16)",
          "326: X86_FPU_FLAGS_TEST_C1 = (1ULL<<17)",
          "327: X86_FPU_FLAGS_TEST_C2 = (1ULL<<18)",
          "328: X86_FPU_FLAGS_TEST_C3 = (1ULL<<19)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1948: X86_GRP_VLX = 166",
          "1949: X86_GRP_SMAP = 167",
          "1950: X86_GRP_NOVLX = 168",
          "",
          "[Removed Lines]",
          "1951: X86_GRP_ENDING = 169",
          "",
          "[Added Lines]",
          "1984: X86_GRP_FPU = 169",
          "1985: X86_GRP_ENDING = 170",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32b6346c2c923c81369badb95317f05b7a0cb6fc",
      "candidate_info": {
        "commit_hash": "32b6346c2c923c81369badb95317f05b7a0cb6fc",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/32b6346c2c923c81369badb95317f05b7a0cb6fc",
        "files": [
          "bindings/python/test_arm.py",
          "bindings/python/test_basic.py",
          "bindings/python/test_detail.py",
          "bindings/python/test_lite.py",
          "bindings/python/test_skipdata.py",
          "bindings/python/test_x86.py"
        ],
        "message": "Use and test syntax against None in all_tests.\n\nComparing against 0 or just testing the truthiness is suboptimal, as you\nlose the ability to explicitly set the syntax to CS_OPT_SYNTAX_DEFAULT\nor 0.\n\nAlso, using None to mean \"don't change\" or other \"here is no value\"\ninterpretations is much more pythonic than the C-idiomatic 0.",
        "before_after_code_files": [
          "bindings/python/test_arm.py||bindings/python/test_arm.py",
          "bindings/python/test_basic.py||bindings/python/test_basic.py",
          "bindings/python/test_detail.py||bindings/python/test_detail.py",
          "bindings/python/test_lite.py||bindings/python/test_lite.py",
          "bindings/python/test_skipdata.py||bindings/python/test_skipdata.py",
          "bindings/python/test_x86.py||bindings/python/test_x86.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/test_arm.py||bindings/python/test_arm.py": [
          "File: bindings/python/test_arm.py -> bindings/python/test_arm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"Thumb\", None),",
          "21:         (CS_ARCH_ARM, CS_MODE_THUMB, ARM_CODE2, \"Thumb-mixed\", None),",
          "22:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"Thumb-2 & register named with numbers\", CS_OPT_SYNTAX_NOREGNAME),",
          "25:         )",
          "",
          "[Removed Lines]",
          "23:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", 0),",
          "24:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", 0),",
          "",
          "[Added Lines]",
          "23:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "24:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:         try:",
          "139:             md = Cs(arch, mode)",
          "141:                 md.syntax = syntax",
          "142:             md.detail = True",
          "143:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "140:             if syntax:",
          "",
          "[Added Lines]",
          "140:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_basic.py||bindings/python/test_basic.py": [
          "File: bindings/python/test_basic.py -> bindings/python/test_basic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: XCORE_CODE = b\"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\"",
          "35: all_tests = (",
          "37:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "39:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (MASM syntax)\", CS_OPT_SYNTAX_MASM),",
          "53:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64, print register with number only\", CS_OPT_SYNTAX_NOREGNAME),",
          "54:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", CS_OPT_SYNTAX_NOREGNAME),",
          "59: )",
          "61: # ## Test cs_disasm_quick()",
          "",
          "[Removed Lines]",
          "36:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "38:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "40:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "41:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", 0),",
          "42:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", 0),",
          "43:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0),",
          "44:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", 0),",
          "45:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", 0),",
          "46:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", 0),",
          "47:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", 0),",
          "48:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0),",
          "49:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", 0),",
          "50:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", 0),",
          "51:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", 0),",
          "52:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", 0),",
          "55:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", 0),",
          "56:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", 0),",
          "57:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", 0),",
          "58:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", 0),",
          "",
          "[Added Lines]",
          "36:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "38:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "40:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "41:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "42:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "43:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "44:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "45:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "46:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "47:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "48:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "49:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", None),",
          "50:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", None),",
          "51:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "52:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "55:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", None),",
          "56:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", None),",
          "57:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", None),",
          "58:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         try:",
          "82:             md = Cs(arch, mode)",
          "85:                 md.syntax = syntax",
          "87:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "84:             if syntax != 0:",
          "",
          "[Added Lines]",
          "84:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_detail.py||bindings/python/test_detail.py": [
          "File: bindings/python/test_detail.py -> bindings/python/test_detail.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: XCORE_CODE = b\"\\xfe\\x0f\\xfe\\x17\\x13\\x17\\xc6\\xfe\\xec\\x17\\x97\\xf8\\xec\\x4f\\x1f\\xfd\\xec\\x37\\x07\\xf2\\x45\\x5b\\xf9\\xfa\\x02\\x06\\x1b\\x10\"",
          "29: all_tests = (",
          "31:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "51: )",
          "",
          "[Removed Lines]",
          "30:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "32:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "33:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "34:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", 0),",
          "35:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0),",
          "36:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", 0),",
          "37:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", 0),",
          "38:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", 0),",
          "39:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", 0),",
          "40:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", 0),",
          "41:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", 0),",
          "42:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0),",
          "43:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", 0),",
          "44:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", 0),",
          "45:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", 0),",
          "46:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", 0),",
          "47:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", 0),",
          "48:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", 0),",
          "49:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", 0),",
          "50:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", 0),",
          "",
          "[Added Lines]",
          "30:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "32:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "33:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "34:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "35:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "36:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "37:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "38:         (CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_MCLASS, THUMB_MCLASS, \"Thumb-MClass\", None),",
          "39:         (CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_V8, ARMV8, \"Arm-V8\", None),",
          "40:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "41:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "42:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "43:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_MICRO + CS_MODE_BIG_ENDIAN, MIPS_32R6M, \"MIPS-32R6 | Micro (Big-endian)\", None),",
          "44:         (CS_ARCH_MIPS, CS_MODE_MIPS32R6 + CS_MODE_BIG_ENDIAN, MIPS_32R6, \"MIPS-32R6 (Big-endian)\", None),",
          "45:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "46:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN + CS_MODE_QPX, PPC_CODE2, \"PPC-64 + QPX\", None),",
          "47:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, SPARC_CODE, \"Sparc\", None),",
          "48:         (CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN + CS_MODE_V9, SPARCV9_CODE, \"SparcV9\", None),",
          "49:         (CS_ARCH_SYSZ, 0, SYSZ_CODE, \"SystemZ\", None),",
          "50:         (CS_ARCH_XCORE, 0, XCORE_CODE, \"XCore\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:             md = Cs(arch, mode)",
          "91:             md.detail = True",
          "94:                 md.syntax = syntax",
          "96:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "93:             if syntax != 0:",
          "",
          "[Added Lines]",
          "93:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_lite.py||bindings/python/test_lite.py": [
          "File: bindings/python/test_lite.py -> bindings/python/test_lite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: PPC_CODE = b\"\\x80\\x20\\x00\\x00\\x80\\x3f\\x00\\x00\\x10\\x43\\x23\\x0e\\xd0\\x44\\x00\\x80\\x4c\\x43\\x22\\x02\\x2d\\x03\\x00\\x80\\x7c\\x43\\x20\\x14\\x7c\\x43\\x20\\x93\\x4f\\x20\\x00\\x21\\x4c\\xc8\\x00\\x21\"",
          "21: all_tests = (",
          "23:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32bit (ATT syntax)\", CS_OPT_SYNTAX_ATT),",
          "34:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64, print register with number only\", CS_OPT_SYNTAX_NOREGNAME),",
          "35:         )",
          "",
          "[Removed Lines]",
          "22:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "24:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "25:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "26:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", 0),",
          "27:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", 0),",
          "28:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", 0),",
          "29:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", 0),",
          "30:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", 0),",
          "31:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", 0),",
          "32:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", 0),",
          "33:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", 0),",
          "",
          "[Added Lines]",
          "22:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "24:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "25:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "26:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, \"ARM\", None),",
          "27:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE2, \"THUMB-2\", None),",
          "28:         (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE2, \"ARM: Cortex-A15 + NEON\", None),",
          "29:         (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, \"THUMB\", None),",
          "30:         (CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, MIPS_CODE, \"MIPS-32 (Big-endian)\", None),",
          "31:         (CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_LITTLE_ENDIAN, MIPS_CODE2, \"MIPS-64-EL (Little-endian)\", None),",
          "32:         (CS_ARCH_ARM64, CS_MODE_ARM, ARM64_CODE, \"ARM-64\", None),",
          "33:         (CS_ARCH_PPC, CS_MODE_BIG_ENDIAN, PPC_CODE, \"PPC-64\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         try:",
          "59:             md = Cs(arch, mode)",
          "62:                 md.syntax = syntax",
          "64:             for (addr, size, mnemonic, op_str) in md.disasm_lite(code, 0x1000):",
          "",
          "[Removed Lines]",
          "61:             if syntax != 0:",
          "",
          "[Added Lines]",
          "61:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_skipdata.py||bindings/python/test_skipdata.py": [
          "File: bindings/python/test_skipdata.py -> bindings/python/test_skipdata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: RANDOM_CODE = b\"\\xed\\x00\\x00\\x00\\x00\\x1a\\x5a\\x0f\\x1f\\xff\\xc2\\x09\\x80\\x00\\x00\\x00\\x07\\xf7\\xeb\\x2a\\xff\\xff\\x7f\\x57\\xe3\\x01\\xff\\xff\\x7f\\x57\\xeb\\x00\\xf0\\x00\\x00\\x24\\xb2\\x4f\\x00\\x78\"",
          "14: all_tests = (",
          "17: )",
          "",
          "[Removed Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "16:         (CS_ARCH_ARM, CS_MODE_ARM, RANDOM_CODE, \"Arm\", 0),",
          "",
          "[Added Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "16:         (CS_ARCH_ARM, CS_MODE_ARM, RANDOM_CODE, \"Arm\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         try:",
          "35:             md = Cs(arch, mode)",
          "38:                 md.syntax = syntax",
          "40:             md.skipdata = True",
          "",
          "[Removed Lines]",
          "37:             if syntax != 0:",
          "",
          "[Added Lines]",
          "37:             if syntax is not None:",
          "",
          "---------------"
        ],
        "bindings/python/test_x86.py||bindings/python/test_x86.py": [
          "File: bindings/python/test_x86.py -> bindings/python/test_x86.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: X86_CODE32 = b\"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\\x05\\x23\\x01\\x00\\x00\\x36\\x8b\\x84\\x91\\x23\\x01\\x00\\x00\\x41\\x8d\\x84\\x39\\x89\\x67\\x00\\x00\\x8d\\x87\\x89\\x67\\x00\\x00\\xb4\\xc6\"",
          "14: all_tests = (",
          "16:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (AT&T syntax)\", CS_OPT_SYNTAX_ATT),",
          "19:         )",
          "",
          "[Removed Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", 0),",
          "17:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", 0),",
          "18:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", 0),",
          "",
          "[Added Lines]",
          "15:         (CS_ARCH_X86, CS_MODE_16, X86_CODE16, \"X86 16bit (Intel syntax)\", None),",
          "17:         (CS_ARCH_X86, CS_MODE_32, X86_CODE32, \"X86 32 (Intel syntax)\", None),",
          "18:         (CS_ARCH_X86, CS_MODE_64, X86_CODE64, \"X86 64 (Intel syntax)\", None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             md = Cs(arch, mode)",
          "158:             md.detail = True",
          "161:                 md.syntax = syntax",
          "163:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Removed Lines]",
          "160:             if syntax != 0:",
          "",
          "[Added Lines]",
          "160:             if syntax is not None:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7869831044deb0995bf26fc7730f33d5cb9eaa1",
      "candidate_info": {
        "commit_hash": "d7869831044deb0995bf26fc7730f33d5cb9eaa1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d7869831044deb0995bf26fc7730f33d5cb9eaa1",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: support armbe mode",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  if (cs_support(CS_ARCH_ARM)) {",
          "87:   printf(\"        arm:       arm\\n\");",
          "90:   printf(\"        thumb:     thumb mode\\n\");",
          "91:   printf(\"        thumbbe:   thumb + big endian\\n\");",
          "93:  }",
          "95:  if (cs_support(CS_ARCH_ARM64)) {",
          "",
          "[Removed Lines]",
          "88:   printf(\"        armb:      arm + big endian\\n\");",
          "89:   printf(\"        arml:      arm + little endian\\n\");",
          "92:   printf(\"        thumble:   thumb + billtle endian\\n\");",
          "",
          "[Added Lines]",
          "88:   printf(\"        armbe:     arm + big endian\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "187:  }",
          "190:   arch = CS_ARCH_ARM;",
          "191:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "192:  }",
          "",
          "[Removed Lines]",
          "189:  if (!strcmp(mode, \"armb\")) {",
          "",
          "[Added Lines]",
          "187:  if (!strcmp(mode, \"armb\") || !strcmp(mode, \"armbe\") ) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}