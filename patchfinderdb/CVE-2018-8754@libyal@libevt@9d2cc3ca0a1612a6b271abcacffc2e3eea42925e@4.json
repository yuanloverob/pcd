{
  "cve_id": "CVE-2018-8754",
  "cve_desc": "The libevt_record_values_read_event() function in libevt_record_values.c in libevt before 2018-03-17 does not properly check for out-of-bounds values of user SID data size, strings size, or data size. NOTE: the vendor has disputed this as described in libyal/libevt issue 5 on GitHub",
  "repo": "libyal/libevt",
  "patch_hash": "9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
  "patch_info": {
    "commit_hash": "9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
    "repo": "libyal/libevt",
    "commit_url": "https://github.com/libyal/libevt/commit/9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
    "files": [
      "configure.ac",
      "libevt.nuspec",
      "libevt/libevt_libfvalue.h",
      "libevt/libevt_record_values.c",
      "m4/libcdata.m4",
      "m4/libcsplit.m4",
      "m4/libfdata.m4",
      "runtests.sh"
    ],
    "message": "Applied updates and addition boundary checks for corrupted data",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "libevt.nuspec||libevt.nuspec",
      "libevt/libevt_libfvalue.h||libevt/libevt_libfvalue.h",
      "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
      "m4/libcdata.m4||m4/libcdata.m4",
      "m4/libcsplit.m4||m4/libcsplit.m4",
      "m4/libfdata.m4||m4/libfdata.m4",
      "runtests.sh||runtests.sh"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_INIT(",
      "4:  [libevt],",
      "6:  [joachim.metz@gmail.com])",
      "8: AC_CONFIG_SRCDIR(",
      "",
      "[Removed Lines]",
      "5:  [20180125],",
      "",
      "[Added Lines]",
      "5:  [20180317],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: dnl Check if wide character type should be enabled",
      "49: AX_COMMON_CHECK_ENABLE_WIDE_CHARACTER_TYPE",
      "51: dnl Check for type definitions",
      "52: AX_TYPES_CHECK_LOCAL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: dnl Check if verbose output should be enabled",
      "52: AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT",
      "54: dnl Check if debug output should be enabled",
      "55: AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "146: dnl Check if evttools required headers and functions are available",
      "147: AX_EVTTOOLS_CHECK_LOCAL",
      "155: dnl Check if tests required headers and functions are available",
      "156: AX_TESTS_CHECK_LOCAL",
      "",
      "[Removed Lines]",
      "149: dnl Check if libevt should be build with verbose output",
      "150: AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT",
      "152: dnl Check if libevt should be build with debug output",
      "153: AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libevt.nuspec||libevt.nuspec": [
      "File: libevt.nuspec -> libevt.nuspec",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: <package >",
      "3:   <metadata>",
      "4:     <id>libevt</id>",
      "6:     <authors>Joachim Metz</authors>",
      "7:     <owners>joachimmetz</owners>",
      "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
      "",
      "[Removed Lines]",
      "5:     <version>20180125</version>",
      "",
      "[Added Lines]",
      "5:     <version>20180317</version>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
      "11:     <title>libevt</title>",
      "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
      "14:     <copyright>Copyright (C) 2011-2018</copyright>",
      "15:     <tags>native</tags>",
      "16:   </metadata>",
      "",
      "[Removed Lines]",
      "13:     <releaseNotes>Release of libevt 20180125</releaseNotes>",
      "",
      "[Added Lines]",
      "13:     <releaseNotes>Release of libevt 20180317</releaseNotes>",
      "",
      "---------------"
    ],
    "libevt/libevt_libfvalue.h||libevt/libevt_libfvalue.h": [
      "File: libevt/libevt_libfvalue.h -> libevt/libevt_libfvalue.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #if defined( HAVE_LOCAL_LIBFVALUE )",
      "31: #include <libfvalue_codepage.h>",
      "32: #include <libfvalue_definitions.h>",
      "33: #include <libfvalue_floating_point.h>",
      "34: #include <libfvalue_integer.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include <libfvalue_data_handle.h>",
      "",
      "---------------"
    ],
    "libevt/libevt_record_values.c||libevt/libevt_record_values.c": [
      "File: libevt/libevt_record_values.c -> libevt/libevt_record_values.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1157:  }",
      "1158:  if( user_sid_size != 0 )",
      "1159:  {",
      "1160:   if( libfvalue_value_type_initialize(",
      "1161:        &( record_values->user_security_identifier ),",
      "1162:        LIBFVALUE_VALUE_TYPE_NT_SECURITY_IDENTIFIER,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1160:   if( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) )",
      "1161:   {",
      "1162:    libcerror_error_set(",
      "1163:     error,",
      "1164:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1165:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1166:     \"%s: user SID data size value out of bounds.\",",
      "1167:     function );",
      "1169:    goto on_error;",
      "1170:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1218:  }",
      "1219:  if( strings_size != 0 )",
      "1220:  {",
      "1221: #if defined( HAVE_DEBUG_OUTPUT )",
      "1222:   if( libcnotify_verbose != 0 )",
      "1223:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1232:   if( strings_size > ( ( record_data_size - 4 ) - strings_offset ) )",
      "1233:   {",
      "1234:    libcerror_error_set(",
      "1235:     error,",
      "1236:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1237:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1238:     \"%s: strings size value out of bounds.\",",
      "1239:     function );",
      "1241:    goto on_error;",
      "1242:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1285:  }",
      "1286:  if( data_size != 0 )",
      "1287:  {",
      "1288: #if defined( HAVE_DEBUG_OUTPUT )",
      "1289:   if( libcnotify_verbose != 0 )",
      "1290:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1310:   if( data_size > ( ( record_data_size - 4 ) - record_data_offset ) )",
      "1311:   {",
      "1312:    libcerror_error_set(",
      "1313:     error,",
      "1314:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1315:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1316:     \"%s: data size value out of bounds.\",",
      "1317:     function );",
      "1319:    goto on_error;",
      "1320:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1292:     \"%s: data:\\n\",",
      "1293:     function );",
      "1294:    libcnotify_print_data(",
      "1296:     (size_t) data_size,",
      "1297:     LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA );",
      "1298:   }",
      "",
      "[Removed Lines]",
      "1295:     &( record_data[ data_offset ] ),",
      "",
      "[Added Lines]",
      "1328:     &( record_data[ record_data_offset ] ),",
      "",
      "---------------"
    ],
    "m4/libcdata.m4||m4/libcdata.m4": [
      "File: m4/libcdata.m4 -> m4/libcdata.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Checks for libcdata or required headers and functions",
      "2: dnl",
      "5: dnl Function to detect if libcdata is available",
      "6: dnl ac_libcdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170904",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180316",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:           [ac_cv_libcdata_dummy=yes],",
      "124:           [ac_cv_libcdata=no])",
      "126:         dnl List functions",
      "127:         AC_CHECK_LIB(",
      "128:           cdata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:         dnl Balanced tree functions",
      "127:         AC_CHECK_LIB(",
      "128:           cdata,",
      "129:           libfdata_btree_initialize,",
      "130:           [ac_cv_libcdata_dummy=yes],",
      "131:           [ac_cv_libcdata=no])",
      "132:         AC_CHECK_LIB(",
      "133:           cdata,",
      "134:           libcdata_btree_free,",
      "135:           [ac_cv_libcdata_dummy=yes],",
      "136:           [ac_cv_libcdata=no])",
      "137:         AC_CHECK_LIB(",
      "138:           cdata,",
      "139:           libcdata_btree_get_number_of_values,",
      "140:           [ac_cv_libcdata_dummy=yes],",
      "141:           [ac_cv_libcdata=no])",
      "142:         AC_CHECK_LIB(",
      "143:           cdata,",
      "144:           libcdata_btree_get_value_by_index,",
      "145:           [ac_cv_libcdata_dummy=yes],",
      "146:           [ac_cv_libcdata=no])",
      "147:         AC_CHECK_LIB(",
      "148:           cdata,",
      "149:           libcdata_btree_get_value_by_value,",
      "150:           [ac_cv_libcdata_dummy=yes],",
      "151:           [ac_cv_libcdata=no])",
      "152:         AC_CHECK_LIB(",
      "153:           cdata,",
      "154:           libcdata_btree_insert_value,",
      "155:           [ac_cv_libcdata_dummy=yes],",
      "156:           [ac_cv_libcdata=no])",
      "157:         AC_CHECK_LIB(",
      "158:           cdata,",
      "159:           libcdata_btree_replace_value,",
      "160:           [ac_cv_libcdata_dummy=yes],",
      "161:           [ac_cv_libcdata=no])",
      "162:         AC_CHECK_LIB(",
      "163:           cdata,",
      "164:           libcdata_btree_remove_value,",
      "165:           [ac_cv_libcdata_dummy=yes],",
      "166:           [ac_cv_libcdata=no])",
      "",
      "---------------"
    ],
    "m4/libcsplit.m4||m4/libcsplit.m4": [
      "File: m4/libcsplit.m4 -> m4/libcsplit.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Checks for libcsplit or required headers and functions",
      "2: dnl",
      "5: dnl Function to detect if libcsplit is available",
      "6: dnl ac_libcsplit_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170903",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180217",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:         AS_IF(",
      "112:           [test \"x$ac_cv_enable_wide_character_type\" != xno],",
      "113:           [AC_CHECK_LIB(",
      "115:             libcsplit_wide_string_split,",
      "116:             [ac_cv_libcsplit_dummy=yes],",
      "117:             [ac_cv_libcsplit=no])",
      "",
      "[Removed Lines]",
      "114:           csplit,",
      "",
      "[Added Lines]",
      "114:             csplit,",
      "",
      "---------------"
    ],
    "m4/libfdata.m4||m4/libfdata.m4": [
      "File: m4/libfdata.m4 -> m4/libfdata.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Functions for libfdata",
      "2: dnl",
      "5: dnl Function to detect if libfdata is available",
      "6: dnl ac_libfdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170905",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180316",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:           [ac_cv_libfdata=no])",
      "51:         dnl Area functions",
      "54:         dnl Balanced tree functions",
      "55:         dnl TODO: add functions",
      "",
      "[Removed Lines]",
      "52:         dnl TODO: add functions",
      "",
      "[Added Lines]",
      "52:         AC_CHECK_LIB(",
      "53:           fdata,",
      "54:           libfdata_area_initialize,",
      "55:           [ac_cv_libfdata_dummy=yes],",
      "56:           [ac_cv_libfdata=no])",
      "57:         AC_CHECK_LIB(",
      "58:           fdata,",
      "59:           libfdata_area_free,",
      "60:           [ac_cv_libfdata_dummy=yes],",
      "61:           [ac_cv_libfdata=no])",
      "62:         AC_CHECK_LIB(",
      "63:           fdata,",
      "64:           libfdata_area_clone,",
      "65:           [ac_cv_libfdata_dummy=yes],",
      "66:           [ac_cv_libfdata=no])",
      "67:         AC_CHECK_LIB(",
      "68:           fdata,",
      "69:           libfdata_area_empty,",
      "70:           [ac_cv_libfdata_dummy=yes],",
      "71:           [ac_cv_libfdata=no])",
      "72:         AC_CHECK_LIB(",
      "73:           fdata,",
      "74:           libfdata_area_resize,",
      "75:           [ac_cv_libfdata_dummy=yes],",
      "76:           [ac_cv_libfdata=no])",
      "77:         AC_CHECK_LIB(",
      "78:           fdata,",
      "79:           libfdata_area_get_number_of_segments,",
      "80:           [ac_cv_libfdata_dummy=yes],",
      "81:           [ac_cv_libfdata=no])",
      "82:         AC_CHECK_LIB(",
      "83:           fdata,",
      "84:           libfdata_area_get_segment_by_index,",
      "85:           [ac_cv_libfdata_dummy=yes],",
      "86:           [ac_cv_libfdata=no])",
      "87:         AC_CHECK_LIB(",
      "88:           fdata,",
      "89:           libfdata_area_set_segment_by_index,",
      "90:           [ac_cv_libfdata_dummy=yes],",
      "91:           [ac_cv_libfdata=no])",
      "92:         AC_CHECK_LIB(",
      "93:           fdata,",
      "94:           libfdata_area_prepend_segment,",
      "95:           [ac_cv_libfdata_dummy=yes],",
      "96:           [ac_cv_libfdata=no])",
      "97:         AC_CHECK_LIB(",
      "98:           fdata,",
      "99:           libfdata_area_append_segment,",
      "100:           [ac_cv_libfdata_dummy=yes],",
      "101:           [ac_cv_libfdata=no])",
      "102:         AC_CHECK_LIB(",
      "103:           fdata,",
      "104:           libfdata_area_get_element_data_size,",
      "105:           [ac_cv_libfdata_dummy=yes],",
      "106:           [ac_cv_libfdata=no])",
      "107:         AC_CHECK_LIB(",
      "108:           fdata,",
      "109:           libfdata_area_get_element_value_at_offset,",
      "110:           [ac_cv_libfdata_dummy=yes],",
      "111:           [ac_cv_libfdata=no])",
      "112:         AC_CHECK_LIB(",
      "113:           fdata,",
      "114:           libfdata_area_set_element_value_at_offset,",
      "115:           [ac_cv_libfdata_dummy=yes],",
      "116:           [ac_cv_libfdata=no])",
      "117:         AC_CHECK_LIB(",
      "118:           fdata,",
      "119:           libfdata_area_get_size,",
      "120:           [ac_cv_libfdata_dummy=yes],",
      "121:           [ac_cv_libfdata=no])",
      "",
      "---------------"
    ],
    "runtests.sh||runtests.sh": [
      "File: runtests.sh -> runtests.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #!/bin/bash",
      "2: # Script that runs the tests",
      "3: #",
      "6: EXIT_SUCCESS=0;",
      "7: EXIT_FAILURE=1;",
      "",
      "[Removed Lines]",
      "4: # Version: 20171210",
      "",
      "[Added Lines]",
      "4: # Version: 20180214",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202: HAVE_ENABLE_WIDE_CHARACTER_TYPE=$?;",
      "204: echo \"${CONFIGURE_HELP}\" | grep -- '--with-zlib' > /dev/null;",
      "206: HAVE_WITH_ZLIB=$?;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204: echo \"${CONFIGURE_HELP}\" | grep -- '--enable-verbose-output' > /dev/null;",
      "206: HAVE_ENABLE_VERBOSE_OUTPUT=$?;",
      "208: echo \"${CONFIGURE_HELP}\" | grep -- '--enable-debug-output' > /dev/null;",
      "210: HAVE_ENABLE_DEBUG_OUTPUT=$?;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "230:  exit ${EXIT_FAILURE};",
      "231: fi",
      "233: if test ${HAVE_WITH_ZLIB} -eq 0;",
      "234: then",
      "235:  # Test \"./configure && make && make check\" with fallback zlib implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241: if test ${HAVE_ENABLE_VERBOSE_OUTPUT} -eq 0 && test ${HAVE_ENABLE_DEBUG_OUTPUT} -eq 0;",
      "242: then",
      "243:  # Test \"./configure && make && make check\" with verbose and debug output.",
      "245:  run_configure_make_check \"--enable-verbose-output --enable-debug-output\";",
      "246:  RESULT=$?;",
      "248:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
      "249:  then",
      "250:   exit ${EXIT_FAILURE};",
      "251:  fi",
      "252: fi",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e965da4d3b14fdb3825d9d198c4c541f29116c0",
      "candidate_info": {
        "commit_hash": "7e965da4d3b14fdb3825d9d198c4c541f29116c0",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/7e965da4d3b14fdb3825d9d198c4c541f29116c0",
        "files": [
          "configure.ac",
          "evttools/evttools_libuna.h",
          "libevt/libevt_libuna.h",
          "tests/evt_test_file.c",
          "tests/evt_test_io_handle.c",
          "tests/evt_test_libuna.h",
          "tests/evt_test_macros.h",
          "tests/evt_test_memory.c",
          "tests/evt_test_memory.h",
          "tests/evt_test_record_values.c"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "evttools/evttools_libuna.h||evttools/evttools_libuna.h",
          "libevt/libevt_libuna.h||libevt/libevt_libuna.h",
          "tests/evt_test_file.c||tests/evt_test_file.c",
          "tests/evt_test_io_handle.c||tests/evt_test_io_handle.c",
          "tests/evt_test_libuna.h||tests/evt_test_libuna.h",
          "tests/evt_test_macros.h||tests/evt_test_macros.h",
          "tests/evt_test_memory.c||tests/evt_test_memory.c",
          "tests/evt_test_memory.h||tests/evt_test_memory.h",
          "tests/evt_test_record_values.c||tests/evt_test_record_values.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170120],",
          "",
          "[Added Lines]",
          "5:  [20170407],",
          "",
          "---------------"
        ],
        "evttools/evttools_libuna.h||evttools/evttools_libuna.h": [
          "File: evttools/evttools_libuna.h -> evttools/evttools_libuna.h"
        ],
        "libevt/libevt_libuna.h||libevt/libevt_libuna.h": [
          "File: libevt/libevt_libuna.h -> libevt/libevt_libuna.h"
        ],
        "tests/evt_test_file.c||tests/evt_test_file.c": [
          "File: tests/evt_test_file.c -> tests/evt_test_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1793: #if !defined( __BORLANDC__ ) || ( __BORLANDC__ >= 0x0560 )",
          "1794:  if( source != NULL )",
          "1795:  {",
          "1796:   EVT_TEST_RUN_WITH_ARGS(",
          "1797:    \"libevt_file_open\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1795:  {",
          "1796: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "1797:   result = libevt_check_file_signature_wide(",
          "1798:             source,",
          "1799:             &error );",
          "1800: #else",
          "1801:   result = libevt_check_file_signature(",
          "1802:             source,",
          "1803:             &error );",
          "1804: #endif",
          "1806:   EVT_TEST_ASSERT_NOT_EQUAL_INT(",
          "1807:    \"result\",",
          "1808:    result,",
          "1809:    -1 );",
          "1811:          EVT_TEST_ASSERT_IS_NULL(",
          "1812:           \"error\",",
          "1813:           error );",
          "1814:  }",
          "1815:  if( result != 0 )",
          "",
          "---------------"
        ],
        "tests/evt_test_io_handle.c||tests/evt_test_io_handle.c": [
          "File: tests/evt_test_io_handle.c -> tests/evt_test_io_handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:  return( 0 );",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: int evt_test_io_handle_clear(",
          "277:      void )",
          "278: {",
          "279:  libcerror_error_t *error      = NULL;",
          "280:  libevt_io_handle_t *io_handle = NULL;",
          "281:  int result                    = 0;",
          "285:  result = libevt_io_handle_initialize(",
          "286:            &io_handle,",
          "287:            &error );",
          "289:  EVT_TEST_ASSERT_EQUAL_INT(",
          "290:   \"result\",",
          "291:   result,",
          "292:   1 );",
          "294:         EVT_TEST_ASSERT_IS_NOT_NULL(",
          "295:          \"io_handle\",",
          "296:          io_handle );",
          "298:         EVT_TEST_ASSERT_IS_NULL(",
          "299:          \"error\",",
          "300:          error );",
          "304:  result = libevt_io_handle_clear(",
          "305:            io_handle,",
          "306:            &error );",
          "308:  EVT_TEST_ASSERT_EQUAL_INT(",
          "309:   \"result\",",
          "310:   result,",
          "311:   1 );",
          "313:         EVT_TEST_ASSERT_IS_NULL(",
          "314:          \"error\",",
          "315:          error );",
          "319:  result = libevt_io_handle_clear(",
          "320:            NULL,",
          "321:            &error );",
          "323:  EVT_TEST_ASSERT_EQUAL_INT(",
          "324:   \"result\",",
          "325:   result,",
          "326:   -1 );",
          "328:         EVT_TEST_ASSERT_IS_NOT_NULL(",
          "329:          \"error\",",
          "330:          error );",
          "332:  libcerror_error_free(",
          "333:   &error );",
          "337:  result = libevt_io_handle_free(",
          "338:            &io_handle,",
          "339:            &error );",
          "341:  EVT_TEST_ASSERT_EQUAL_INT(",
          "342:   \"result\",",
          "343:   result,",
          "344:   1 );",
          "346:         EVT_TEST_ASSERT_IS_NULL(",
          "347:          \"io_handle\",",
          "348:          io_handle );",
          "350:         EVT_TEST_ASSERT_IS_NULL(",
          "351:          \"error\",",
          "352:          error );",
          "354:  return( 1 );",
          "356: on_error:",
          "357:  if( error != NULL )",
          "358:  {",
          "359:   libcerror_error_free(",
          "360:    &error );",
          "361:  }",
          "362:  if( io_handle != NULL )",
          "363:  {",
          "364:   libevt_io_handle_free(",
          "365:    &io_handle,",
          "366:    NULL );",
          "367:  }",
          "368:  return( 0 );",
          "369: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:   \"libevt_io_handle_free\",",
          "298:   evt_test_io_handle_free );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:  EVT_TEST_RUN(",
          "399:   \"libevt_io_handle_clear\",",
          "400:   evt_test_io_handle_clear );",
          "",
          "---------------"
        ],
        "tests/evt_test_libuna.h||tests/evt_test_libuna.h": [
          "File: tests/evt_test_libuna.h -> tests/evt_test_libuna.h"
        ],
        "tests/evt_test_macros.h||tests/evt_test_macros.h": [
          "File: tests/evt_test_macros.h -> tests/evt_test_macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   goto on_error; \\",
          "72:  }",
          "74: #define EVT_TEST_ASSERT_EQUAL_INT32( name, value, expected_value ) \\",
          "75:  if( value != expected_value ) \\",
          "76:  { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #define EVT_TEST_ASSERT_EQUAL_INT8( name, value, expected_value ) \\",
          "75:  if( value != expected_value ) \\",
          "76:  { \\",
          "77:   fprintf( stdout, \"%s:%d %s (%\" PRIi8 \") != %\" PRIi8 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "78:   goto on_error; \\",
          "79:  }",
          "81: #define EVT_TEST_ASSERT_NOT_EQUAL_INT8( name, value, expected_value ) \\",
          "82:  if( value == expected_value ) \\",
          "83:  { \\",
          "84:   fprintf( stdout, \"%s:%d %s (%\" PRIi8 \") == %\" PRIi8 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "85:   goto on_error; \\",
          "86:  }",
          "88: #define EVT_TEST_ASSERT_EQUAL_UINT8( name, value, expected_value ) \\",
          "89:  if( value != expected_value ) \\",
          "90:  { \\",
          "91:   fprintf( stdout, \"%s:%d %s (%\" PRIi8 \") != %\" PRIu8 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "92:   goto on_error; \\",
          "93:  }",
          "95: #define EVT_TEST_ASSERT_LESS_THAN_UINT8( name, value, expected_value ) \\",
          "96:  if( value >= expected_value ) \\",
          "97:  { \\",
          "98:   fprintf( stdout, \"%s:%d %s (%\" PRIi8 \") >= %\" PRIu8 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "99:   goto on_error; \\",
          "100:  }",
          "102: #define EVT_TEST_ASSERT_EQUAL_INT16( name, value, expected_value ) \\",
          "103:  if( value != expected_value ) \\",
          "104:  { \\",
          "105:   fprintf( stdout, \"%s:%d %s (%\" PRIi16 \") != %\" PRIi16 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "106:   goto on_error; \\",
          "107:  }",
          "109: #define EVT_TEST_ASSERT_NOT_EQUAL_INT16( name, value, expected_value ) \\",
          "110:  if( value == expected_value ) \\",
          "111:  { \\",
          "112:   fprintf( stdout, \"%s:%d %s (%\" PRIi16 \") == %\" PRIi16 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "113:   goto on_error; \\",
          "114:  }",
          "116: #define EVT_TEST_ASSERT_EQUAL_UINT16( name, value, expected_value ) \\",
          "117:  if( value != expected_value ) \\",
          "118:  { \\",
          "119:   fprintf( stdout, \"%s:%d %s (%\" PRIi16 \") != %\" PRIu16 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "120:   goto on_error; \\",
          "121:  }",
          "123: #define EVT_TEST_ASSERT_LESS_THAN_UINT16( name, value, expected_value ) \\",
          "124:  if( value >= expected_value ) \\",
          "125:  { \\",
          "126:   fprintf( stdout, \"%s:%d %s (%\" PRIi16 \") >= %\" PRIu16 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "127:   goto on_error; \\",
          "128:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   goto on_error; \\",
          "79:  }",
          "81: #define EVT_TEST_ASSERT_EQUAL_UINT32( name, value, expected_value ) \\",
          "82:  if( value != expected_value ) \\",
          "83:  { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #define EVT_TEST_ASSERT_NOT_EQUAL_INT32( name, value, expected_value ) \\",
          "138:  if( value == expected_value ) \\",
          "139:  { \\",
          "140:   fprintf( stdout, \"%s:%d %s (%\" PRIi32 \") == %\" PRIi32 \"\\n\", __FILE__, __LINE__, name, value, expected_value ); \\",
          "141:   goto on_error; \\",
          "142:  }",
          "",
          "---------------"
        ],
        "tests/evt_test_memory.c||tests/evt_test_memory.c": [
          "File: tests/evt_test_memory.c -> tests/evt_test_memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <stdlib.h>",
          "26: #endif",
          "29: #define __USE_GNU",
          "30: #include <dlfcn.h>",
          "31: #undef __USE_GNU",
          "32: #endif",
          "36: static void *(*evt_test_real_malloc)(size_t)                 = NULL;",
          "37: static void *(*evt_test_real_memcpy)(void *, void *, size_t) = NULL;",
          "",
          "[Removed Lines]",
          "28: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ ) && !defined( __clang__ )",
          "34: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ ) && !defined( __clang__ )",
          "",
          "[Added Lines]",
          "28: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ )",
          "34: #include \"evt_test_memory.h\"",
          "36: #if defined( HAVE_EVT_TEST_MEMORY )",
          "",
          "---------------"
        ],
        "tests/evt_test_memory.h||tests/evt_test_memory.h": [
          "File: tests/evt_test_memory.h -> tests/evt_test_memory.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: extern \"C\" {",
          "29: #endif",
          "33: #define HAVE_EVT_TEST_MEMORY  1",
          "35: extern int evt_test_malloc_attempts_before_fail;",
          "",
          "[Removed Lines]",
          "31: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ ) && !defined( __clang__ )",
          "",
          "[Added Lines]",
          "31: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ ) && !defined( __clang__ ) && !defined( __arm__ ) && !defined( __mips__ ) && !defined( __hppa__ ) && !defined( __sparc__ )",
          "33: #endif",
          "35: #if defined( HAVE_EVT_TEST_MEMORY )",
          "",
          "---------------"
        ],
        "tests/evt_test_record_values.c||tests/evt_test_record_values.c": [
          "File: tests/evt_test_record_values.c -> tests/evt_test_record_values.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:  return( 0 );",
          "417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422: int evt_test_record_values_read(",
          "423:      void )",
          "424: {",
          "425:  libcerror_error_t *error              = NULL;",
          "426:  libevt_record_values_t *record_values = NULL;",
          "427:  int result                            = 0;",
          "431:  result = libevt_record_values_initialize(",
          "432:            &record_values,",
          "433:            &error );",
          "435:  EVT_TEST_ASSERT_EQUAL_INT(",
          "436:   \"result\",",
          "437:   result,",
          "438:   1 );",
          "440:         EVT_TEST_ASSERT_IS_NOT_NULL(",
          "441:          \"record_values\",",
          "442:          record_values );",
          "444:         EVT_TEST_ASSERT_IS_NULL(",
          "445:          \"error\",",
          "446:          error );",
          "450:  result = libevt_record_values_read(",
          "451:            NULL,",
          "452:            NULL,",
          "453:            NULL,",
          "454:            NULL,",
          "455:            0,",
          "456:            &error );",
          "458:  EVT_TEST_ASSERT_EQUAL_INT(",
          "459:   \"result\",",
          "460:   result,",
          "461:   -1 );",
          "463:         EVT_TEST_ASSERT_IS_NOT_NULL(",
          "464:          \"error\",",
          "465:          error );",
          "467:  libcerror_error_free(",
          "468:   &error );",
          "470:  result = libevt_record_values_read(",
          "471:            record_values,",
          "472:            NULL,",
          "473:            NULL,",
          "474:            NULL,",
          "475:            0,",
          "476:            &error );",
          "478:  EVT_TEST_ASSERT_EQUAL_INT(",
          "479:   \"result\",",
          "480:   result,",
          "481:   -1 );",
          "483:         EVT_TEST_ASSERT_IS_NOT_NULL(",
          "484:          \"error\",",
          "485:          error );",
          "487:  libcerror_error_free(",
          "488:   &error );",
          "490:  return( 1 );",
          "494:  result = libevt_record_values_free(",
          "495:            &record_values,",
          "496:            &error );",
          "498:  EVT_TEST_ASSERT_EQUAL_INT(",
          "499:   \"result\",",
          "500:   result,",
          "501:   1 );",
          "503:         EVT_TEST_ASSERT_IS_NULL(",
          "504:          \"record_values\",",
          "505:          record_values );",
          "507:         EVT_TEST_ASSERT_IS_NULL(",
          "508:          \"error\",",
          "509:          error );",
          "511:  return( 1 );",
          "513: on_error:",
          "514:  if( error != NULL )",
          "515:  {",
          "516:   libcerror_error_free(",
          "517:    &error );",
          "518:  }",
          "519:  if( record_values != NULL )",
          "520:  {",
          "521:   libevt_record_values_free(",
          "522:    &record_values,",
          "523:    NULL );",
          "524:  }",
          "525:  return( 0 );",
          "526: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:   \"libevt_record_values_clone\",",
          "571:   evt_test_record_values_clone );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:  EVT_TEST_RUN(",
          "683:   \"libevt_record_values_read\",",
          "684:   evt_test_record_values_read );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb6d7cf15c49ff939e6c745d571edba936c79eac",
      "candidate_info": {
        "commit_hash": "fb6d7cf15c49ff939e6c745d571edba936c79eac",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/fb6d7cf15c49ff939e6c745d571edba936c79eac",
        "files": [
          "acinclude.m4",
          "appveyor.yml",
          "configure.ac",
          "libevt.nuspec",
          "m4/libbfio.m4",
          "tests/test_evtinfo.ps1",
          "tests/test_library.ps1"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "acinclude.m4||acinclude.m4",
          "configure.ac||configure.ac",
          "libevt.nuspec||libevt.nuspec",
          "m4/libbfio.m4||m4/libbfio.m4",
          "tests/test_evtinfo.ps1||tests/test_evtinfo.ps1",
          "tests/test_library.ps1||tests/test_library.ps1"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ]
        }
      },
      "candidate_diff": {
        "acinclude.m4||acinclude.m4": [
          "File: acinclude.m4 -> acinclude.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:      [1])",
          "40:   ])",
          "42:   dnl Check if tools should be build as static executables",
          "43:   AX_COMMON_CHECK_ENABLE_STATIC_EXECUTABLES",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   dnl Headers included in evttools/log_handle.c",
          "43:   AC_CHECK_HEADERS([stdarg.h varargs.h])",
          "45:   AS_IF(",
          "46:     [test \"x$ac_cv_header_stdarg_h\" != xyes && test \"x$ac_cv_header_varargs_h\" != xyes],",
          "47:     [AC_MSG_FAILURE(",
          "48:       [Missing headers: stdarg.h and varargs.h],",
          "49:       [1])",
          "50:   ])",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170910],",
          "",
          "[Added Lines]",
          "5:  [20170911],",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20170910</version>",
          "",
          "[Added Lines]",
          "5:     <version>20170911</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2017</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "17:   <files>",
          "18:     <file src=\"include\\*.h\" target=\"lib\\native\\include\\\" />",
          "19:     <file src=\"include\\libevt\\*.h\" target=\"lib\\native\\include\\libevt\\\" />",
          "24:   </files>",
          "25: </package>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20170910</releaseNotes>",
          "20:     <file src=\"msvscpp\\Release\\libevt.dll\" target=\"build\\x86\\\" />",
          "21:     <file src=\"msvscpp\\Release\\libevt.lib\" target=\"lib\\native\\lib\\libevt32.lib\" />",
          "22:     <file src=\"msvscpp\\x64\\Release\\libevt.dll\" target=\"build\\x64\\\" />",
          "23:     <file src=\"msvscpp\\x64\\Release\\libevt.lib\" target=\"lib\\native\\lib\\libevt64.lib\" />",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20170911</releaseNotes>",
          "20:     <file src=\"msvscpp\\Release\\Win32\\libevt.dll\" target=\"lib\\native\\lib\\Win32\\\" />",
          "21:     <file src=\"msvscpp\\Release\\Win32\\libevt.lib\" target=\"lib\\native\\lib\\Win32\\\" />",
          "22:     <file src=\"msvscpp\\Release\\Win32\\libevt.pdb\" target=\"lib\\native\\lib\\Win32\\\" />",
          "23:     <file src=\"msvscpp\\Release\\x64\\libevt.dll\" target=\"lib\\native\\lib\\x64\\\" />",
          "24:     <file src=\"msvscpp\\Release\\x64\\libevt.lib\" target=\"lib\\native\\lib\\x64\\\" />",
          "25:     <file src=\"msvscpp\\Release\\x64\\libevt.pdb\" target=\"lib\\native\\lib\\x64\\\" />",
          "",
          "---------------"
        ],
        "m4/libbfio.m4||m4/libbfio.m4": [
          "File: m4/libbfio.m4 -> m4/libbfio.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libbfio is available",
          "6: AC_DEFUN([AX_LIBBFIO_CHECK_LIB],",
          "22:   AS_IF(",
          "31:   AS_IF(",
          "40:     [ac_cv_libbfio=no],",
          "140:     AS_IF(",
          "259:     ])",
          "279:   ])",
          "282: dnl Function to detect how to enable libbfio",
          "283: AC_DEFUN([AX_LIBBFIO_CHECK_ENABLE],",
          "342:   ])",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libbfio",
          "3: dnl Version: 20160108",
          "7:  [dnl Check if parameters were provided",
          "8:  AS_IF(",
          "9:   [test \"x$ac_cv_with_libbfio\" != x && test \"x$ac_cv_with_libbfio\" != xno && test \"x$ac_cv_with_libbfio\" != xauto-detect],",
          "10:   [AS_IF(",
          "11:    [test -d \"$ac_cv_with_libbfio\"],",
          "12:    [CFLAGS=\"$CFLAGS -I${ac_cv_with_libbfio}/include\"",
          "13:    LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libbfio}/lib\"],",
          "14:    [AC_MSG_WARN([no such directory: $ac_cv_with_libbfio])",
          "15:    ])",
          "16:   ])",
          "18:  AS_IF(",
          "19:   [test \"x$ac_cv_with_libbfio\" = xno],",
          "20:   [ac_cv_libbfio=no],",
          "21:   [dnl Check for a pkg-config file",
          "23:    [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "24:    [PKG_CHECK_MODULES(",
          "25:     [libbfio],",
          "26:     [libbfio >= 20160108],",
          "27:     [ac_cv_libbfio=yes],",
          "28:     [ac_cv_libbfio=no])",
          "29:    ])",
          "32:    [test \"x$ac_cv_libbfio\" = xyes],",
          "33:    [ac_cv_libbfio_CPPFLAGS=\"$pkg_cv_libbfio_CFLAGS\"",
          "34:    ac_cv_libbfio_LIBADD=\"$pkg_cv_libbfio_LIBS\"],",
          "35:    [dnl Check for headers",
          "36:    AC_CHECK_HEADERS([libbfio.h])",
          "38:    AS_IF(",
          "39:     [test \"x$ac_cv_header_libbfio_h\" = xno],",
          "41:     [dnl Check for the individual functions",
          "42:     ac_cv_libbfio=yes",
          "44:     AC_CHECK_LIB(",
          "45:      bfio,",
          "46:      libbfio_get_version,",
          "47:      [ac_cv_libbfio_dummy=yes],",
          "48:      [ac_cv_libbfio=no])",
          "50:     dnl Handle functions",
          "51:     AC_CHECK_LIB(",
          "52:      bfio,",
          "53:      libbfio_handle_free,",
          "54:      [ac_cv_libbfio_dummy=yes],",
          "55:      [ac_cv_libbfio=no])",
          "56:     AC_CHECK_LIB(",
          "57:      bfio,",
          "58:      libbfio_handle_open,",
          "59:      [ac_cv_libbfio_dummy=yes],",
          "60:      [ac_cv_libbfio=no])",
          "61:     AC_CHECK_LIB(",
          "62:      bfio,",
          "63:      libbfio_handle_close,",
          "64:      [ac_cv_libbfio_dummy=yes],",
          "65:      [ac_cv_libbfio=no])",
          "66:     AC_CHECK_LIB(",
          "67:      bfio,",
          "68:      libbfio_handle_exists,",
          "69:      [ac_cv_libbfio_dummy=yes],",
          "70:      [ac_cv_libbfio=no])",
          "71:     AC_CHECK_LIB(",
          "72:      bfio,",
          "73:      libbfio_handle_read_buffer,",
          "74:      [ac_cv_libbfio_dummy=yes],",
          "75:      [ac_cv_libbfio=no])",
          "76:     AC_CHECK_LIB(",
          "77:      bfio,",
          "78:      libbfio_handle_write_buffer,",
          "79:      [ac_cv_libbfio_dummy=yes],",
          "80:      [ac_cv_libbfio=no])",
          "81:     AC_CHECK_LIB(",
          "82:      bfio,",
          "83:      libbfio_handle_seek_offset,",
          "84:      [ac_cv_libbfio_dummy=yes],",
          "85:      [ac_cv_libbfio=no])",
          "87:     AC_CHECK_LIB(",
          "88:      bfio,",
          "89:      libbfio_handle_is_open,",
          "90:      [ac_cv_libbfio_dummy=yes],",
          "91:      [ac_cv_libbfio=no])",
          "92:     AC_CHECK_LIB(",
          "93:      bfio,",
          "94:      libbfio_handle_get_offset,",
          "95:      [ac_cv_libbfio_dummy=yes],",
          "96:      [ac_cv_libbfio=no])",
          "97:     AC_CHECK_LIB(",
          "98:      bfio,",
          "99:      libbfio_handle_get_size,",
          "100:      [ac_cv_libbfio_dummy=yes],",
          "101:      [ac_cv_libbfio=no])",
          "102:     AC_CHECK_LIB(",
          "103:      bfio,",
          "104:      libbfio_handle_set_track_offsets_read,",
          "105:      [ac_cv_libbfio_dummy=yes],",
          "106:      [ac_cv_libbfio=no])",
          "107:     AC_CHECK_LIB(",
          "108:      bfio,",
          "109:      libbfio_handle_get_number_of_offsets_read,",
          "110:      [ac_cv_libbfio_dummy=yes],",
          "111:      [ac_cv_libbfio=no])",
          "112:     AC_CHECK_LIB(",
          "113:      bfio,",
          "114:      libbfio_handle_get_offset_read,",
          "115:      [ac_cv_libbfio_dummy=yes],",
          "116:      [ac_cv_libbfio=no])",
          "118:     dnl File functions",
          "119:     AC_CHECK_LIB(",
          "120:      bfio,",
          "121:      libbfio_file_initialize,",
          "122:      [ac_cv_libbfio_dummy=yes],",
          "123:      [ac_cv_libbfio=no])",
          "124:     AC_CHECK_LIB(",
          "125:      bfio,",
          "126:      libbfio_file_get_name_size,",
          "127:      [ac_cv_libbfio_dummy=yes],",
          "128:      [ac_cv_libbfio=no])",
          "129:     AC_CHECK_LIB(",
          "130:      bfio,",
          "131:      libbfio_file_get_name,",
          "132:      [ac_cv_libbfio_dummy=yes],",
          "133:      [ac_cv_libbfio=no])",
          "134:     AC_CHECK_LIB(",
          "135:      bfio,",
          "136:      libbfio_file_set_name,",
          "137:      [ac_cv_libbfio_dummy=yes],",
          "138:      [ac_cv_libbfio=no])",
          "141:      [test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "142:      [AC_CHECK_LIB(",
          "143:       bfio,",
          "144:       libbfio_file_get_name_size_wide,",
          "145:       [ac_cv_libbfio_dummy=yes],",
          "146:       [ac_cv_libbfio=no])",
          "147:      AC_CHECK_LIB(",
          "148:       bfio,",
          "149:       libbfio_file_get_name_wide,",
          "150:       [ac_cv_libbfio_dummy=yes],",
          "151:       [ac_cv_libbfio=no])",
          "152:      AC_CHECK_LIB(",
          "153:       bfio,",
          "154:       libbfio_file_set_name_wide,",
          "155:       [ac_cv_libbfio_dummy=yes],",
          "156:       [ac_cv_libbfio=no])",
          "157:      ])",
          "159:     dnl Pool functions",
          "160:     AC_CHECK_LIB(",
          "161:      bfio,",
          "162:      libbfio_pool_initialize,",
          "163:      [ac_cv_libbfio_dummy=yes],",
          "164:      [ac_cv_libbfio=no])",
          "165:     AC_CHECK_LIB(",
          "166:      bfio,",
          "167:      libbfio_pool_free,",
          "168:      [ac_cv_libbfio_dummy=yes],",
          "169:      [ac_cv_libbfio=no])",
          "170:     AC_CHECK_LIB(",
          "171:      bfio,",
          "172:      libbfio_pool_clone,",
          "173:      [ac_cv_libbfio_dummy=yes],",
          "174:      [ac_cv_libbfio=no])",
          "176:     AC_CHECK_LIB(",
          "177:      bfio,",
          "178:      libbfio_pool_get_number_of_handles,",
          "179:      [ac_cv_libbfio_dummy=yes],",
          "180:      [ac_cv_libbfio=no])",
          "181:     AC_CHECK_LIB(",
          "182:      bfio,",
          "183:      libbfio_pool_get_handle,",
          "184:      [ac_cv_libbfio_dummy=yes],",
          "185:      [ac_cv_libbfio=no])",
          "186:     AC_CHECK_LIB(",
          "187:      bfio,",
          "188:      libbfio_pool_set_handle,",
          "189:      [ac_cv_libbfio_dummy=yes],",
          "190:      [ac_cv_libbfio=no])",
          "191:     AC_CHECK_LIB(",
          "192:      bfio,",
          "193:      libbfio_pool_append_handle,",
          "194:      [ac_cv_libbfio_dummy=yes],",
          "195:      [ac_cv_libbfio=no])",
          "196:     AC_CHECK_LIB(",
          "197:      bfio,",
          "198:      libbfio_pool_remove_handle,",
          "199:      [ac_cv_libbfio_dummy=yes],",
          "200:      [ac_cv_libbfio=no])",
          "201:     AC_CHECK_LIB(",
          "202:      bfio,",
          "203:      libbfio_pool_get_maximum_number_of_open_handles,",
          "204:      [ac_cv_libbfio_dummy=yes],",
          "205:      [ac_cv_libbfio=no])",
          "206:     AC_CHECK_LIB(",
          "207:      bfio,",
          "208:      libbfio_pool_set_maximum_number_of_open_handles,",
          "209:      [ac_cv_libbfio_dummy=yes],",
          "210:      [ac_cv_libbfio=no])",
          "212:     AC_CHECK_LIB(",
          "213:      bfio,",
          "214:      libbfio_pool_open,",
          "215:      [ac_cv_libbfio_dummy=yes],",
          "216:      [ac_cv_libbfio=no])",
          "217:     AC_CHECK_LIB(",
          "218:      bfio,",
          "219:      libbfio_pool_reopen,",
          "220:      [ac_cv_libbfio_dummy=yes],",
          "221:      [ac_cv_libbfio=no])",
          "222:     AC_CHECK_LIB(",
          "223:      bfio,",
          "224:      libbfio_pool_close,",
          "225:      [ac_cv_libbfio_dummy=yes],",
          "226:      [ac_cv_libbfio=no])",
          "227:     AC_CHECK_LIB(",
          "228:      bfio,",
          "229:      libbfio_pool_close_all,",
          "230:      [ac_cv_libbfio_dummy=yes],",
          "231:      [ac_cv_libbfio=no])",
          "232:     AC_CHECK_LIB(",
          "233:      bfio,",
          "234:      libbfio_pool_read_buffer,",
          "235:      [ac_cv_libbfio_dummy=yes],",
          "236:      [ac_cv_libbfio=no])",
          "237:     AC_CHECK_LIB(",
          "238:      bfio,",
          "239:      libbfio_pool_write_buffer,",
          "240:      [ac_cv_libbfio_dummy=yes],",
          "241:      [ac_cv_libbfio=no])",
          "242:     AC_CHECK_LIB(",
          "243:      bfio,",
          "244:      libbfio_pool_seek_offset,",
          "245:      [ac_cv_libbfio_dummy=yes],",
          "246:      [ac_cv_libbfio=no])",
          "247:     AC_CHECK_LIB(",
          "248:      bfio,",
          "249:      libbfio_pool_get_offset,",
          "250:      [ac_cv_libbfio_dummy=yes],",
          "251:      [ac_cv_libbfio=no])",
          "252:     AC_CHECK_LIB(",
          "253:      bfio,",
          "254:      libbfio_pool_get_size,",
          "255:      [ac_cv_libbfio_dummy=yes],",
          "256:      [ac_cv_libbfio=no])",
          "258:     ac_cv_libbfio_LIBADD=\"-lbfio\"",
          "260:    ])",
          "261:   ])",
          "263:  AS_IF(",
          "264:   [test \"x$ac_cv_libbfio\" = xyes],",
          "265:   [AC_DEFINE(",
          "266:    [HAVE_LIBBFIO],",
          "267:    [1],",
          "268:    [Define to 1 if you have the `bfio' library (-lbfio).])",
          "269:   ])",
          "271:  AS_IF(",
          "272:   [test \"x$ac_cv_libbfio\" = xyes],",
          "273:   [AC_SUBST(",
          "274:    [HAVE_LIBBFIO],",
          "275:    [1]) ],",
          "276:   [AC_SUBST(",
          "277:    [HAVE_LIBBFIO],",
          "278:    [0])",
          "280:  ])",
          "284:  [AX_COMMON_ARG_WITH(",
          "285:   [libbfio],",
          "286:   [libbfio],",
          "287:   [search for libbfio in includedir and libdir or in the specified DIR, or no if to use local version],",
          "288:   [auto-detect],",
          "289:   [DIR])",
          "291:  dnl Check for a shared library version",
          "292:  AX_LIBBFIO_CHECK_LIB",
          "294:  dnl Check if the dependencies for the local library version",
          "295:  AS_IF(",
          "296:   [test \"x$ac_cv_libbfio\" != xyes],",
          "297:   [AC_DEFINE(",
          "298:    [HAVE_LOCAL_LIBBFIO],",
          "299:    [1],",
          "300:    [Define to 1 if the local version of libbfio is used.])",
          "301:   AC_SUBST(",
          "302:    [HAVE_LOCAL_LIBBFIO],",
          "303:    [1])",
          "305:   ac_cv_libbfio_CPPFLAGS=\"-I../libbfio\";",
          "306:   ac_cv_libbfio_LIBADD=\"../libbfio/libbfio.la\";",
          "308:   ac_cv_libbfio=local",
          "309:   ])",
          "311:  AM_CONDITIONAL(",
          "312:   [HAVE_LOCAL_LIBBFIO],",
          "313:   [test \"x$ac_cv_libbfio\" = xlocal])",
          "314:  AS_IF(",
          "315:   [test \"x$ac_cv_libbfio_CPPFLAGS\" != \"x\"],",
          "316:   [AC_SUBST(",
          "317:    [LIBBFIO_CPPFLAGS],",
          "318:    [$ac_cv_libbfio_CPPFLAGS])",
          "319:   ])",
          "320:  AS_IF(",
          "321:   [test \"x$ac_cv_libbfio_LIBADD\" != \"x\"],",
          "322:   [AC_SUBST(",
          "323:    [LIBBFIO_LIBADD],",
          "324:    [$ac_cv_libbfio_LIBADD])",
          "325:   ])",
          "327:  AS_IF(",
          "328:   [test \"x$ac_cv_libbfio\" = xyes],",
          "329:   [AC_SUBST(",
          "330:    [ax_libbfio_pc_libs_private],",
          "331:    [-lbfio])",
          "332:   ])",
          "334:  AS_IF(",
          "335:   [test \"x$ac_cv_libbfio\" = xyes],",
          "336:   [AC_SUBST(",
          "337:    [ax_libbfio_spec_requires],",
          "338:    [libbfio])",
          "339:   AC_SUBST(",
          "340:    [ax_libbfio_spec_build_requires],",
          "341:    [libbfio-devel])",
          "343:  ])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libbfio or required headers and functions",
          "3: dnl Version: 20170911",
          "7:   [dnl Check if parameters were provided",
          "9:     [test \"x$ac_cv_with_libbfio\" != x && test \"x$ac_cv_with_libbfio\" != xno && test \"x$ac_cv_with_libbfio\" != xauto-detect],",
          "10:     [AS_IF(",
          "11:       [test -d \"$ac_cv_with_libbfio\"],",
          "12:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libbfio}/include\"",
          "13:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libbfio}/lib\"],",
          "14:       [AC_MSG_WARN([no such directory: $ac_cv_with_libbfio])",
          "15:       ])",
          "16:     ])",
          "19:     [test \"x$ac_cv_with_libbfio\" = xno],",
          "21:     [dnl Check for a pkg-config file",
          "22:     AS_IF(",
          "23:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "24:       [PKG_CHECK_MODULES(",
          "25:         [libbfio],",
          "26:         [libbfio >= 20160108],",
          "27:         [ac_cv_libbfio=yes],",
          "28:         [ac_cv_libbfio=check])",
          "29:       ])",
          "31:     AS_IF(",
          "32:       [test \"x$ac_cv_libbfio\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "33:       [AC_CACHE_CHECK(",
          "34:        [whether libbfio/features.h defines LIBBFIO_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "35:        [ac_cv_header_libbfio_features_h_have_wide_character_type],",
          "36:        [AC_LANG_PUSH(C)",
          "37:        AC_COMPILE_IFELSE(",
          "38:          [AC_LANG_PROGRAM(",
          "39:            [[#include <libbfio/features.h>]],",
          "40:            [[#if !defined( LIBBFIO_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBBFIO_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "41: #error LIBBFIO_HAVE_WIDE_CHARACTER_TYPE not defined",
          "42: ##endif]] )],",
          "43:          [ac_cv_header_libbfio_features_h_have_wide_character_type=yes],",
          "44:          [ac_cv_header_libbfio_features_h_have_wide_character_type=no])",
          "45:        AC_LANG_POP(C)],",
          "46:        [ac_cv_header_libbfio_features_h_have_wide_character_type=no])",
          "48:       AS_IF(",
          "49:         [test \"x$ac_cv_header_libbfio_features_h_have_wide_character_type\" = xno],",
          "50:         [ac_cv_libbfio=no])",
          "51:     ])",
          "53:     AS_IF(",
          "54:       [test \"x$ac_cv_libbfio\" = xyes],",
          "55:       [ac_cv_libbfio_CPPFLAGS=\"$pkg_cv_libbfio_CFLAGS\"",
          "56:       ac_cv_libbfio_LIBADD=\"$pkg_cv_libbfio_LIBS\"])",
          "59:       [test \"x$ac_cv_libbfio\" = xcheck],",
          "60:       [dnl Check for headers",
          "61:       AC_CHECK_HEADERS([libbfio.h])",
          "63:       AS_IF(",
          "64:         [test \"x$ac_cv_header_libbfio_h\" = xno],",
          "65:         [ac_cv_libbfio=no],",
          "66:         [dnl Check for the individual functions",
          "67:         ac_cv_libbfio=yes",
          "69:         AC_CHECK_LIB(",
          "70:           bfio,",
          "71:           libbfio_get_version,",
          "72:           [ac_cv_libbfio_dummy=yes],",
          "73:           [ac_cv_libbfio=no])",
          "75:         dnl Handle functions",
          "76:         AC_CHECK_LIB(",
          "77:           bfio,",
          "78:           libbfio_handle_free,",
          "79:           [ac_cv_libbfio_dummy=yes],",
          "80:           [ac_cv_libbfio=no])",
          "81:         AC_CHECK_LIB(",
          "82:           bfio,",
          "83:           libbfio_handle_open,",
          "84:           [ac_cv_libbfio_dummy=yes],",
          "85:           [ac_cv_libbfio=no])",
          "86:         AC_CHECK_LIB(",
          "87:           bfio,",
          "88:           libbfio_handle_close,",
          "89:           [ac_cv_libbfio_dummy=yes],",
          "90:           [ac_cv_libbfio=no])",
          "91:         AC_CHECK_LIB(",
          "92:           bfio,",
          "93:           libbfio_handle_exists,",
          "94:           [ac_cv_libbfio_dummy=yes],",
          "95:           [ac_cv_libbfio=no])",
          "96:         AC_CHECK_LIB(",
          "97:           bfio,",
          "98:           libbfio_handle_read_buffer,",
          "99:           [ac_cv_libbfio_dummy=yes],",
          "100:           [ac_cv_libbfio=no])",
          "101:         AC_CHECK_LIB(",
          "102:           bfio,",
          "103:           libbfio_handle_write_buffer,",
          "104:           [ac_cv_libbfio_dummy=yes],",
          "105:           [ac_cv_libbfio=no])",
          "106:         AC_CHECK_LIB(",
          "107:           bfio,",
          "108:           libbfio_handle_seek_offset,",
          "109:           [ac_cv_libbfio_dummy=yes],",
          "110:           [ac_cv_libbfio=no])",
          "112:         AC_CHECK_LIB(",
          "113:           bfio,",
          "114:           libbfio_handle_is_open,",
          "115:           [ac_cv_libbfio_dummy=yes],",
          "116:           [ac_cv_libbfio=no])",
          "117:         AC_CHECK_LIB(",
          "118:           bfio,",
          "119:           libbfio_handle_get_offset,",
          "120:           [ac_cv_libbfio_dummy=yes],",
          "121:           [ac_cv_libbfio=no])",
          "122:         AC_CHECK_LIB(",
          "123:           bfio,",
          "124:           libbfio_handle_get_size,",
          "125:           [ac_cv_libbfio_dummy=yes],",
          "126:           [ac_cv_libbfio=no])",
          "127:         AC_CHECK_LIB(",
          "128:           bfio,",
          "129:           libbfio_handle_set_track_offsets_read,",
          "130:           [ac_cv_libbfio_dummy=yes],",
          "131:           [ac_cv_libbfio=no])",
          "132:         AC_CHECK_LIB(",
          "133:           bfio,",
          "134:           libbfio_handle_get_number_of_offsets_read,",
          "135:           [ac_cv_libbfio_dummy=yes],",
          "136:           [ac_cv_libbfio=no])",
          "137:         AC_CHECK_LIB(",
          "138:           bfio,",
          "139:           libbfio_handle_get_offset_read,",
          "140:           [ac_cv_libbfio_dummy=yes],",
          "141:           [ac_cv_libbfio=no])",
          "143:         dnl File functions",
          "144:         AC_CHECK_LIB(",
          "145:           bfio,",
          "146:           libbfio_file_initialize,",
          "147:           [ac_cv_libbfio_dummy=yes],",
          "148:           [ac_cv_libbfio=no])",
          "149:         AC_CHECK_LIB(",
          "150:           bfio,",
          "151:           libbfio_file_get_name_size,",
          "152:           [ac_cv_libbfio_dummy=yes],",
          "153:           [ac_cv_libbfio=no])",
          "154:         AC_CHECK_LIB(",
          "155:           bfio,",
          "156:           libbfio_file_get_name,",
          "157:           [ac_cv_libbfio_dummy=yes],",
          "158:           [ac_cv_libbfio=no])",
          "159:         AC_CHECK_LIB(",
          "160:           bfio,",
          "161:           libbfio_file_set_name,",
          "162:           [ac_cv_libbfio_dummy=yes],",
          "163:           [ac_cv_libbfio=no])",
          "165:         AS_IF(",
          "166:           [test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "167:           [AC_CHECK_LIB(",
          "168:             bfio,",
          "169:             libbfio_file_get_name_size_wide,",
          "170:             [ac_cv_libbfio_dummy=yes],",
          "171:             [ac_cv_libbfio=no])",
          "172:           AC_CHECK_LIB(",
          "173:             bfio,",
          "174:             libbfio_file_get_name_wide,",
          "175:             [ac_cv_libbfio_dummy=yes],",
          "176:             [ac_cv_libbfio=no])",
          "177:           AC_CHECK_LIB(",
          "178:             bfio,",
          "179:             libbfio_file_set_name_wide,",
          "180:             [ac_cv_libbfio_dummy=yes],",
          "181:             [ac_cv_libbfio=no])",
          "182:           ])",
          "184:         dnl Pool functions",
          "185:         AC_CHECK_LIB(",
          "186:           bfio,",
          "187:           libbfio_pool_initialize,",
          "188:           [ac_cv_libbfio_dummy=yes],",
          "189:           [ac_cv_libbfio=no])",
          "190:         AC_CHECK_LIB(",
          "191:           bfio,",
          "192:           libbfio_pool_free,",
          "193:           [ac_cv_libbfio_dummy=yes],",
          "194:           [ac_cv_libbfio=no])",
          "195:         AC_CHECK_LIB(",
          "196:           bfio,",
          "197:           libbfio_pool_clone,",
          "198:           [ac_cv_libbfio_dummy=yes],",
          "199:           [ac_cv_libbfio=no])",
          "201:         AC_CHECK_LIB(",
          "202:           bfio,",
          "203:           libbfio_pool_get_number_of_handles,",
          "204:           [ac_cv_libbfio_dummy=yes],",
          "205:           [ac_cv_libbfio=no])",
          "206:         AC_CHECK_LIB(",
          "207:           bfio,",
          "208:           libbfio_pool_get_handle,",
          "209:           [ac_cv_libbfio_dummy=yes],",
          "210:           [ac_cv_libbfio=no])",
          "211:         AC_CHECK_LIB(",
          "212:           bfio,",
          "213:           libbfio_pool_set_handle,",
          "214:           [ac_cv_libbfio_dummy=yes],",
          "215:           [ac_cv_libbfio=no])",
          "216:         AC_CHECK_LIB(",
          "217:           bfio,",
          "218:           libbfio_pool_append_handle,",
          "219:           [ac_cv_libbfio_dummy=yes],",
          "220:           [ac_cv_libbfio=no])",
          "221:         AC_CHECK_LIB(",
          "222:           bfio,",
          "223:           libbfio_pool_remove_handle,",
          "224:           [ac_cv_libbfio_dummy=yes],",
          "225:           [ac_cv_libbfio=no])",
          "226:         AC_CHECK_LIB(",
          "227:           bfio,",
          "228:           libbfio_pool_get_maximum_number_of_open_handles,",
          "229:           [ac_cv_libbfio_dummy=yes],",
          "230:           [ac_cv_libbfio=no])",
          "231:         AC_CHECK_LIB(",
          "232:           bfio,",
          "233:           libbfio_pool_set_maximum_number_of_open_handles,",
          "234:           [ac_cv_libbfio_dummy=yes],",
          "235:           [ac_cv_libbfio=no])",
          "237:         AC_CHECK_LIB(",
          "238:           bfio,",
          "239:           libbfio_pool_open,",
          "240:           [ac_cv_libbfio_dummy=yes],",
          "241:           [ac_cv_libbfio=no])",
          "242:         AC_CHECK_LIB(",
          "243:           bfio,",
          "244:           libbfio_pool_reopen,",
          "245:           [ac_cv_libbfio_dummy=yes],",
          "246:           [ac_cv_libbfio=no])",
          "247:         AC_CHECK_LIB(",
          "248:           bfio,",
          "249:           libbfio_pool_close,",
          "250:           [ac_cv_libbfio_dummy=yes],",
          "251:           [ac_cv_libbfio=no])",
          "252:         AC_CHECK_LIB(",
          "253:           bfio,",
          "254:           libbfio_pool_close_all,",
          "255:           [ac_cv_libbfio_dummy=yes],",
          "256:           [ac_cv_libbfio=no])",
          "257:         AC_CHECK_LIB(",
          "258:           bfio,",
          "259:           libbfio_pool_read_buffer,",
          "260:           [ac_cv_libbfio_dummy=yes],",
          "261:           [ac_cv_libbfio=no])",
          "262:         AC_CHECK_LIB(",
          "263:           bfio,",
          "264:           libbfio_pool_write_buffer,",
          "265:           [ac_cv_libbfio_dummy=yes],",
          "266:           [ac_cv_libbfio=no])",
          "267:         AC_CHECK_LIB(",
          "268:           bfio,",
          "269:           libbfio_pool_seek_offset,",
          "270:           [ac_cv_libbfio_dummy=yes],",
          "271:           [ac_cv_libbfio=no])",
          "272:         AC_CHECK_LIB(",
          "273:           bfio,",
          "274:           libbfio_pool_get_offset,",
          "275:           [ac_cv_libbfio_dummy=yes],",
          "276:           [ac_cv_libbfio=no])",
          "277:         AC_CHECK_LIB(",
          "278:           bfio,",
          "279:           libbfio_pool_get_size,",
          "280:           [ac_cv_libbfio_dummy=yes],",
          "281:           [ac_cv_libbfio=no])",
          "283:         ac_cv_libbfio_LIBADD=\"-lbfio\"",
          "284:         ])",
          "285:       ])",
          "288:   AS_IF(",
          "289:     [test \"x$ac_cv_libbfio\" = xyes],",
          "290:     [AC_DEFINE(",
          "291:       [HAVE_LIBBFIO],",
          "292:       [1],",
          "293:       [Define to 1 if you have the `bfio' library (-lbfio).])",
          "294:     ])",
          "296:   AS_IF(",
          "297:     [test \"x$ac_cv_libbfio\" = xyes],",
          "298:     [AC_SUBST(",
          "299:       [HAVE_LIBBFIO],",
          "300:       [1]) ],",
          "301:     [AC_SUBST(",
          "302:       [HAVE_LIBBFIO],",
          "303:       [0])",
          "304:     ])",
          "309:   [AX_COMMON_ARG_WITH(",
          "310:     [libbfio],",
          "311:     [libbfio],",
          "312:     [search for libbfio in includedir and libdir or in the specified DIR, or no if to use local version],",
          "313:     [auto-detect],",
          "314:     [DIR])",
          "316:   dnl Check for a shared library version",
          "317:   AX_LIBBFIO_CHECK_LIB",
          "319:   dnl Check if the dependencies for the local library version",
          "320:   AS_IF(",
          "321:     [test \"x$ac_cv_libbfio\" != xyes],",
          "322:     [AC_DEFINE(",
          "323:       [HAVE_LOCAL_LIBBFIO],",
          "324:       [1],",
          "325:       [Define to 1 if the local version of libbfio is used.])",
          "326:     AC_SUBST(",
          "327:       [HAVE_LOCAL_LIBBFIO],",
          "328:       [1])",
          "330:     ac_cv_libbfio_CPPFLAGS=\"-I../libbfio\";",
          "331:     ac_cv_libbfio_LIBADD=\"../libbfio/libbfio.la\";",
          "333:     ac_cv_libbfio=local",
          "334:     ])",
          "336:   AM_CONDITIONAL(",
          "337:     [HAVE_LOCAL_LIBBFIO],",
          "338:     [test \"x$ac_cv_libbfio\" = xlocal])",
          "339:   AS_IF(",
          "340:     [test \"x$ac_cv_libbfio_CPPFLAGS\" != \"x\"],",
          "341:     [AC_SUBST(",
          "342:       [LIBBFIO_CPPFLAGS],",
          "343:       [$ac_cv_libbfio_CPPFLAGS])",
          "344:     ])",
          "345:   AS_IF(",
          "346:     [test \"x$ac_cv_libbfio_LIBADD\" != \"x\"],",
          "347:     [AC_SUBST(",
          "348:       [LIBBFIO_LIBADD],",
          "349:       [$ac_cv_libbfio_LIBADD])",
          "350:     ])",
          "352:   AS_IF(",
          "353:     [test \"x$ac_cv_libbfio\" = xyes],",
          "354:     [AC_SUBST(",
          "355:       [ax_libbfio_pc_libs_private],",
          "356:       [-lbfio])",
          "357:     ])",
          "359:   AS_IF(",
          "360:     [test \"x$ac_cv_libbfio\" = xyes],",
          "361:     [AC_SUBST(",
          "362:       [ax_libbfio_spec_requires],",
          "363:       [libbfio])",
          "364:     AC_SUBST(",
          "365:       [ax_libbfio_spec_build_requires],",
          "366:       [libbfio-devel])",
          "367:     ])",
          "",
          "---------------"
        ],
        "tests/test_evtinfo.ps1||tests/test_evtinfo.ps1": [
          "File: tests/test_evtinfo.ps1 -> tests/test_evtinfo.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Info tool testing script",
          "2: #",
          "5: $ExitSuccess = 0",
          "6: $ExitFailure = 1",
          "",
          "[Removed Lines]",
          "3: # Version: 20170910",
          "",
          "[Added Lines]",
          "3: # Version: 20170911",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: $InputGlob = \"*\"",
          "14: {",
          "24:   {",
          "27:    If (Test-Path ${TestToolDirectory})",
          "28:    {",
          "30:    }",
          "31:   }",
          "32:  }",
          "33: }",
          "34: If (-Not (Test-Path ${TestToolDirectory}))",
          "35: {",
          "36:  Write-Host \"Missing test tool directory.\" -foreground Red",
          "",
          "[Removed Lines]",
          "11: $TestToolDirectory = \"\"",
          "13: ForEach (${VSDirectory} in \"msvscpp vs2008 vs2010 vs2012 vs2013 vs2015 vs2017\" -split \" \")",
          "15:  ForEach (${VSConfiguration} in \"Release VSDebug\" -split \" \")",
          "16:  {",
          "17:   $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\"",
          "19:   If (Test-Path ${TestToolDirectory})",
          "20:   {",
          "21:    Break",
          "22:   }",
          "23:   ForEach (${VSPlatform} in \"Win32 x64\" -split \" \")",
          "25:    $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\\${VSPlatform}\"",
          "29:     Break",
          "",
          "[Added Lines]",
          "11: Function GetTestToolDirectory",
          "13:  $TestToolDirectory = \"\"",
          "15:  ForEach (${VSDirectory} in \"msvscpp vs2008 vs2010 vs2012 vs2013 vs2015 vs2017\" -split \" \")",
          "16:  {",
          "17:   ForEach (${VSConfiguration} in \"Release VSDebug\" -split \" \")",
          "19:    $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\"",
          "23:     Return ${TestToolDirectory}",
          "24:    }",
          "25:    ForEach (${VSPlatform} in \"Win32 x64\" -split \" \")",
          "26:    {",
          "27:     $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\\${VSPlatform}\"",
          "29:     If (Test-Path ${TestToolDirectory})",
          "30:     {",
          "31:      Return ${TestToolDirectory}",
          "32:     }",
          "36:  Return ${TestToolDirectory}",
          "39: $TestToolDirectory = GetTestToolDirectory",
          "",
          "---------------"
        ],
        "tests/test_library.ps1||tests/test_library.ps1": [
          "File: tests/test_library.ps1 -> tests/test_library.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Tests C library functions and types.",
          "2: #",
          "5: $ExitSuccess = 0",
          "6: $ExitFailure = 1",
          "",
          "[Removed Lines]",
          "3: # Version: 20170910",
          "",
          "[Added Lines]",
          "3: # Version: 20170911",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: $LibraryTests = \"error io_handle notify record record_values\"",
          "10: $LibraryTestsWithInput = \"file support\"",
          "12: Function RunTest",
          "13: {",
          "14:  param( [string]$TestType )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: Function GetTestToolDirectory",
          "13: {",
          "14:  $TestToolDirectory = \"\"",
          "16:  ForEach (${VSDirectory} in \"msvscpp vs2008 vs2010 vs2012 vs2013 vs2015 vs2017\" -split \" \")",
          "17:  {",
          "18:   ForEach (${VSConfiguration} in \"Release VSDebug\" -split \" \")",
          "19:   {",
          "20:    $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\"",
          "22:    If (Test-Path ${TestToolDirectory})",
          "23:    {",
          "24:     Return ${TestToolDirectory}",
          "25:    }",
          "26:    ForEach (${VSPlatform} in \"Win32 x64\" -split \" \")",
          "27:    {",
          "28:     $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\\${VSPlatform}\"",
          "30:     If (Test-Path ${TestToolDirectory})",
          "31:     {",
          "32:      Return ${TestToolDirectory}",
          "33:     }",
          "34:    }",
          "35:   }",
          "36:  }",
          "37:  Return ${TestToolDirectory}",
          "38: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:  Return ${Result}",
          "37: }",
          "62: If (-Not (Test-Path ${TestToolDirectory}))",
          "63: {",
          "64:  Write-Host \"Missing test tool directory.\" -foreground Red",
          "",
          "[Removed Lines]",
          "39: $TestToolDirectory = \"\"",
          "41: ForEach (${VSDirectory} in \"msvscpp vs2008 vs2010 vs2012 vs2013 vs2015 vs2017\" -split \" \")",
          "42: {",
          "43:  ForEach (${VSConfiguration} in \"Release VSDebug\" -split \" \")",
          "44:  {",
          "45:   $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\"",
          "47:   If (Test-Path ${TestToolDirectory})",
          "48:   {",
          "49:    Break",
          "50:   }",
          "51:   ForEach (${VSPlatform} in \"Win32 x64\" -split \" \")",
          "52:   {",
          "53:    $TestToolDirectory = \"..\\${VSDirectory}\\${VSConfiguration}\\${VSPlatform}\"",
          "55:    If (Test-Path ${TestToolDirectory})",
          "56:    {",
          "57:     Break",
          "58:    }",
          "59:   }",
          "60:  }",
          "61: }",
          "",
          "[Added Lines]",
          "67: $TestToolDirectory = GetTestToolDirectory",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfb4449463b02e07eff7e566d0c4bdc0260b5370",
      "candidate_info": {
        "commit_hash": "dfb4449463b02e07eff7e566d0c4bdc0260b5370",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/dfb4449463b02e07eff7e566d0c4bdc0260b5370",
        "files": [
          ".codecov.yml",
          ".travis.yml",
          "appveyor.yml",
          "configure.ac",
          "evttools/export_handle.c",
          "evttools/export_handle.h",
          "libevt.nuspec",
          "libevt.spec.in",
          "libevt/libevt_debug.c",
          "libevt/libevt_debug.h",
          "libevt/libevt_record_values.c",
          "synclibs.sh",
          "syncsharedlibs.sh",
          "tests/evt_test_file.c"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "evttools/export_handle.c||evttools/export_handle.c",
          "evttools/export_handle.h||evttools/export_handle.h",
          "libevt.nuspec||libevt.nuspec",
          "libevt.spec.in||libevt.spec.in",
          "libevt/libevt_debug.c||libevt/libevt_debug.c",
          "libevt/libevt_debug.h||libevt/libevt_debug.h",
          "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
          "synclibs.sh||synclibs.sh",
          "syncsharedlibs.sh||syncsharedlibs.sh",
          "tests/evt_test_file.c||tests/evt_test_file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "libevt/libevt_record_values.c||libevt/libevt_record_values.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "libevt/libevt_record_values.c||libevt/libevt_record_values.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170924],",
          "",
          "[Added Lines]",
          "5:  [20171017],",
          "",
          "---------------"
        ],
        "evttools/export_handle.c||evttools/export_handle.c": [
          "File: evttools/export_handle.c -> evttools/export_handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:  return( result );",
          "895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900: int export_handle_posix_time_value_fprint(",
          "901:      export_handle_t *export_handle,",
          "902:      const char *value_name,",
          "903:      uint32_t value_32bit,",
          "904:      libcerror_error_t **error )",
          "905: {",
          "906:  system_character_t date_time_string[ 32 ];",
          "908:  libfdatetime_posix_time_t *posix_time = NULL;",
          "909:  static char *function                 = \"export_handle_posix_time_fprint\";",
          "910:  int result                            = 0;",
          "912:  if( export_handle == NULL )",
          "913:  {",
          "914:   libcerror_error_set(",
          "915:    error,",
          "916:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "917:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "918:    \"%s: invalid export handle.\",",
          "919:    function );",
          "921:   return( -1 );",
          "922:  }",
          "923:  if( value_32bit == 0 )",
          "924:  {",
          "925:   fprintf(",
          "926:    export_handle->notify_stream,",
          "927:    \"%s: Not set (0)\\n\",",
          "928:    value_name );",
          "929:  }",
          "930:  else",
          "931:  {",
          "932:   if( libfdatetime_posix_time_initialize(",
          "933:        &posix_time,",
          "934:        error ) != 1 )",
          "935:   {",
          "936:    libcerror_error_set(",
          "937:     error,",
          "938:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "939:     LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED,",
          "940:     \"%s: unable to create POSIX time.\",",
          "941:     function );",
          "943:    goto on_error;",
          "944:   }",
          "945:   if( libfdatetime_posix_time_copy_from_32bit(",
          "946:        posix_time,",
          "947:        value_32bit,",
          "948:        LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED,",
          "949:        error ) != 1 )",
          "950:   {",
          "951:    libcerror_error_set(",
          "952:     error,",
          "953:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "954:     LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "955:     \"%s: unable to copy POSIX time from 32-bit.\",",
          "956:     function );",
          "958:    goto on_error;",
          "959:   }",
          "960: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "961:   result = libfdatetime_posix_time_copy_to_utf16_string(",
          "962:      posix_time,",
          "963:      (uint16_t *) date_time_string,",
          "964:      32,",
          "965:      LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "966:      error );",
          "967: #else",
          "968:   result = libfdatetime_posix_time_copy_to_utf8_string(",
          "969:      posix_time,",
          "970:      (uint8_t *) date_time_string,",
          "971:      32,",
          "972:      LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "973:      error );",
          "974: #endif",
          "975:   if( result != 1 )",
          "976:   {",
          "977:    libcerror_error_set(",
          "978:     error,",
          "979:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "980:     LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "981:     \"%s: unable to copy POSIX time to string.\",",
          "982:     function );",
          "984:    goto on_error;",
          "985:   }",
          "986:   fprintf(",
          "987:    export_handle->notify_stream,",
          "988:    \"%s: %\" PRIs_SYSTEM \" UTC\\n\",",
          "989:    value_name,",
          "990:    date_time_string );",
          "992:   if( libfdatetime_posix_time_free(",
          "993:        &posix_time,",
          "994:        error ) != 1 )",
          "995:   {",
          "996:    libcerror_error_set(",
          "997:     error,",
          "998:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "999:     LIBCERROR_RUNTIME_ERROR_FINALIZE_FAILED,",
          "1000:     \"%s: unable to free POSIX time.\",",
          "1001:     function );",
          "1003:    goto on_error;",
          "1004:   }",
          "1005:  }",
          "1006:  return( 1 );",
          "1008: on_error:",
          "1009:  if( posix_time != NULL )",
          "1010:  {",
          "1011:   libfdatetime_posix_time_free(",
          "1012:    &posix_time,",
          "1013:    NULL );",
          "1014:  }",
          "1015:  return( -1 );",
          "1016: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1274:      log_handle_t *log_handle,",
          "1275:      libcerror_error_t **error )",
          "1276: {",
          "1279:  system_character_t *source_name       = NULL;",
          "1280:  system_character_t *value_string      = NULL;",
          "1282:  static char *function                 = \"export_handle_export_record\";",
          "1283:  size_t source_name_size               = 0;",
          "1284:  size_t value_string_size              = 0;",
          "",
          "[Removed Lines]",
          "1277:  system_character_t posix_time_string[ 32 ];",
          "1281:  libfdatetime_posix_time_t *posix_time = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1299:   return( -1 );",
          "1300:  }",
          "1314:  if( libevt_record_get_identifier(",
          "1315:       record,",
          "1316:       &value_32bit,",
          "",
          "[Removed Lines]",
          "1301:  if( libfdatetime_posix_time_initialize(",
          "1302:       &posix_time,",
          "1303:       error ) != 1 )",
          "1304:  {",
          "1305:   libcerror_error_set(",
          "1306:    error,",
          "1307:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "1308:    LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED,",
          "1309:    \"%s: unable to create POSIX time.\",",
          "1310:    function );",
          "1312:   goto on_error;",
          "1313:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1345:   goto on_error;",
          "1346:  }",
          "1349:       value_32bit,",
          "1351:       error ) != 1 )",
          "1352:  {",
          "1353:   libcerror_error_set(",
          "1354:    error,",
          "1355:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "1358:    function );",
          "1360:   goto on_error;",
          "1361:  }",
          "1393:  if( libevt_record_get_written_time(",
          "1394:       record,",
          "1395:       &value_32bit,",
          "",
          "[Removed Lines]",
          "1347:  if( libfdatetime_posix_time_copy_from_32bit(",
          "1348:       posix_time,",
          "1350:       LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED,",
          "1356:    LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "1357:    \"%s: unable to copy POSIX time from 32-bit.\",",
          "1362: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "1363:  result = libfdatetime_posix_time_copy_to_utf16_string(",
          "1364:     posix_time,",
          "1365:     (uint16_t *) posix_time_string,",
          "1366:     32,",
          "1367:     LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "1368:     error );",
          "1369: #else",
          "1370:  result = libfdatetime_posix_time_copy_to_utf8_string(",
          "1371:     posix_time,",
          "1372:     (uint8_t *) posix_time_string,",
          "1373:     32,",
          "1374:     LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "1375:     error );",
          "1376: #endif",
          "1377:  if( result != 1 )",
          "1378:  {",
          "1379:   libcerror_error_set(",
          "1380:    error,",
          "1381:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "1382:    LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "1383:    \"%s: unable to copy POSIX time to string.\",",
          "1384:    function );",
          "1386:   goto on_error;",
          "1387:  }",
          "1388:  fprintf(",
          "1389:   export_handle->notify_stream,",
          "1390:   \"Creation time\\t\\t\\t: %\" PRIs_SYSTEM \" UTC\\n\",",
          "1391:   posix_time_string );",
          "",
          "[Added Lines]",
          "1453:  if( export_handle_posix_time_value_fprint(",
          "1454:       export_handle,",
          "1455:       \"Creation time\\t\\t\\t\",",
          "1462:    LIBCERROR_RUNTIME_ERROR_PRINT_FAILED,",
          "1463:    \"%s: unable to print POSIX time value.\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1405:   goto on_error;",
          "1406:  }",
          "1409:       value_32bit,",
          "1455:       error ) != 1 )",
          "1456:  {",
          "1457:   libcerror_error_set(",
          "1458:    error,",
          "1459:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "1462:    function );",
          "1464:   goto on_error;",
          "",
          "[Removed Lines]",
          "1407:  if( libfdatetime_posix_time_copy_from_32bit(",
          "1408:       posix_time,",
          "1410:       LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED,",
          "1411:       error ) != 1 )",
          "1412:  {",
          "1413:   libcerror_error_set(",
          "1414:    error,",
          "1415:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "1416:    LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "1417:    \"%s: unable to copy POSIX time from 32-bit.\",",
          "1418:    function );",
          "1420:   goto on_error;",
          "1421:  }",
          "1422: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "1423:  result = libfdatetime_posix_time_copy_to_utf16_string(",
          "1424:     posix_time,",
          "1425:     (uint16_t *) posix_time_string,",
          "1426:     32,",
          "1427:     LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "1428:     error );",
          "1429: #else",
          "1430:  result = libfdatetime_posix_time_copy_to_utf8_string(",
          "1431:     posix_time,",
          "1432:     (uint8_t *) posix_time_string,",
          "1433:     32,",
          "1434:     LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "1435:     error );",
          "1436: #endif",
          "1437:  if( result != 1 )",
          "1438:  {",
          "1439:   libcerror_error_set(",
          "1440:    error,",
          "1441:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "1442:    LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "1443:    \"%s: unable to copy POSIX time to string.\",",
          "1444:    function );",
          "1446:   goto on_error;",
          "1447:  }",
          "1448:  fprintf(",
          "1449:   export_handle->notify_stream,",
          "1450:   \"Written time\\t\\t\\t: %\" PRIs_SYSTEM \" UTC\\n\",",
          "1451:   posix_time_string );",
          "1453:  if( libfdatetime_posix_time_free(",
          "1454:       &posix_time,",
          "1460:    LIBCERROR_RUNTIME_ERROR_FINALIZE_FAILED,",
          "1461:    \"%s: unable to free POSIX time.\",",
          "",
          "[Added Lines]",
          "1482:  if( export_handle_posix_time_value_fprint(",
          "1483:       export_handle,",
          "1484:       \"Written time\\t\\t\\t\",",
          "1491:    LIBCERROR_RUNTIME_ERROR_PRINT_FAILED,",
          "1492:    \"%s: unable to print POSIX time value.\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1777:   memory_free(",
          "1778:    value_string );",
          "1779:  }",
          "1786:  return( -1 );",
          "1787: }",
          "",
          "[Removed Lines]",
          "1780:  if( posix_time != NULL )",
          "1781:  {",
          "1782:   libfdatetime_posix_time_free(",
          "1783:    &posix_time,",
          "1784:    NULL );",
          "1785:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "evttools/export_handle.h||evttools/export_handle.h": [
          "File: evttools/export_handle.h -> evttools/export_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:      export_handle_t *export_handle,",
          "153:      libcerror_error_t **error );",
          "157: int export_handle_export_record_event_category(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: int export_handle_posix_time_value_fprint(",
          "156:      export_handle_t *export_handle,",
          "157:      const char *value_name,",
          "158:      uint32_t value_32bit,",
          "159:      libcerror_error_t **error );",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20170924</version>",
          "",
          "[Added Lines]",
          "5:     <version>20171017</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2017</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20170924</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20171017</releaseNotes>",
          "",
          "---------------"
        ],
        "libevt.spec.in||libevt.spec.in": [
          "File: libevt.spec.in -> libevt.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: Group: System Environment/Libraries",
          "6: License: LGPL",
          "7: Source: %{name}-%{version}.tar.gz",
          "9: BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)",
          "10: @libevt_spec_requires@ @ax_libbfio_spec_requires@ @ax_libcdata_spec_requires@ @ax_libcerror_spec_requires@ @ax_libcfile_spec_requires@ @ax_libclocale_spec_requires@ @ax_libcnotify_spec_requires@ @ax_libcpath_spec_requires@ @ax_libcsplit_spec_requires@ @ax_libcthreads_spec_requires@ @ax_libfcache_spec_requires@ @ax_libfdata_spec_requires@ @ax_libfdatetime_spec_requires@ @ax_libfguid_spec_requires@ @ax_libfvalue_spec_requires@ @ax_libfwnt_spec_requires@ @ax_libuna_spec_requires@",
          "11: @libevt_spec_build_requires@ @ax_libbfio_spec_build_requires@ @ax_libcdata_spec_build_requires@ @ax_libcerror_spec_build_requires@ @ax_libcfile_spec_build_requires@ @ax_libclocale_spec_build_requires@ @ax_libcnotify_spec_build_requires@ @ax_libcpath_spec_build_requires@ @ax_libcsplit_spec_build_requires@ @ax_libcthreads_spec_build_requires@ @ax_libfcache_spec_build_requires@ @ax_libfdata_spec_build_requires@ @ax_libfdatetime_spec_build_requires@ @ax_libfguid_spec_build_requires@ @ax_libfvalue_spec_build_requires@ @ax_libfwnt_spec_build_requires@ @ax_libuna_spec_build_requires@",
          "13: %description",
          "16: %package devel",
          "17: Summary: Header files and libraries for developing applications for libevt",
          "",
          "[Removed Lines]",
          "8: URL: https://github.com/libyal/libevt/",
          "14: libevt is a library to access the Windows Event Log (EVT) format",
          "",
          "[Added Lines]",
          "8: URL: https://github.com/libyal/libevt",
          "14: Library to access the Windows Event Log (EVT) format",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: %description devel",
          "22: Header files and libraries for developing applications for libevt.",
          "33: %package python",
          "34: Summary: Python 2 bindings for libevt",
          "35: Group: System Environment/Libraries",
          "",
          "[Removed Lines]",
          "24: %package tools",
          "25: Summary: Several tools for reading Windows Event Log (EVT) files",
          "26: Group: Applications/System",
          "27: Requires: libevt = %{version}-%{release} @ax_libcdirectory_spec_requires@ @ax_libexe_spec_requires@ @ax_libfwevt_spec_requires@ @ax_libregf_spec_requires@ @ax_libwrc_spec_requires@",
          "28: @libevt_spec_tools_build_requires@ @ax_libcdirectory_spec_build_requires@ @ax_libexe_spec_build_requires@ @ax_libfwevt_spec_build_requires@ @ax_libregf_spec_build_requires@ @ax_libwrc_spec_build_requires@",
          "30: %description tools",
          "31: Several tools for reading Windows Event Log (EVT) files",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48: %description python3",
          "49: Python 3 bindings for libevt",
          "51: %prep",
          "52: %setup -q",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: %package tools",
          "43: Summary: Several tools for reading Windows Event Log (EVT) files",
          "44: Group: Applications/System",
          "45: Requires: libevt = %{version}-%{release} @ax_libcdirectory_spec_requires@ @ax_libexe_spec_requires@ @ax_libfwevt_spec_requires@ @ax_libregf_spec_requires@ @ax_libwrc_spec_requires@",
          "46: @libevt_spec_tools_build_requires@ @ax_libcdirectory_spec_build_requires@ @ax_libexe_spec_build_requires@ @ax_libfwevt_spec_build_requires@ @ax_libregf_spec_build_requires@ @ax_libwrc_spec_build_requires@",
          "48: %description tools",
          "49: Several tools for reading Windows Event Log (EVT) files",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69: %files",
          "70: %defattr(644,root,root,755)",
          "72: %attr(755,root,root) %{_libdir}/*.so.*",
          "74: %files devel",
          "75: %defattr(644,root,root,755)",
          "77: %{_libdir}/*.a",
          "78: %{_libdir}/*.la",
          "79: %{_libdir}/*.so",
          "",
          "[Removed Lines]",
          "71: %doc AUTHORS COPYING NEWS README",
          "76: %doc AUTHORS COPYING NEWS README ChangeLog",
          "",
          "[Added Lines]",
          "71: %license COPYING",
          "72: %doc AUTHORS README",
          "77: %license COPYING",
          "78: %doc AUTHORS README ChangeLog",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81: %{_includedir}/*",
          "82: %{_mandir}/man3/*",
          "91: %files python",
          "92: %defattr(644,root,root,755)",
          "94: %{_libdir}/python2*/site-packages/*.a",
          "95: %{_libdir}/python2*/site-packages/*.la",
          "96: %{_libdir}/python2*/site-packages/*.so",
          "98: %files python3",
          "99: %defattr(644,root,root,755)",
          "101: %{_libdir}/python3*/site-packages/*.a",
          "102: %{_libdir}/python3*/site-packages/*.la",
          "103: %{_libdir}/python3*/site-packages/*.so",
          "105: %changelog",
          "107: - Auto-generated",
          "",
          "[Removed Lines]",
          "84: %files tools",
          "85: %defattr(644,root,root,755)",
          "86: %doc AUTHORS COPYING NEWS README",
          "87: %attr(755,root,root) %{_bindir}/evtexport",
          "88: %attr(755,root,root) %{_bindir}/evtinfo",
          "89: %{_mandir}/man1/*",
          "93: %doc AUTHORS COPYING NEWS README",
          "100: %doc AUTHORS COPYING NEWS README",
          "",
          "[Added Lines]",
          "88: %license COPYING",
          "89: %doc AUTHORS README",
          "96: %license COPYING",
          "97: %doc AUTHORS README",
          "102: %files tools",
          "103: %defattr(644,root,root,755)",
          "104: %license COPYING",
          "105: %doc AUTHORS README",
          "106: %attr(755,root,root) %{_bindir}/*",
          "107: %{_mandir}/man1/*",
          "",
          "---------------"
        ],
        "libevt/libevt_debug.c||libevt/libevt_debug.c": [
          "File: libevt/libevt_debug.c -> libevt/libevt_debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"libevt_libbfio.h\"",
          "28: #include \"libevt_libcerror.h\"",
          "29: #include \"libevt_libcnotify.h\"",
          "31: #if defined( HAVE_DEBUG_OUTPUT )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"libevt_libfdatetime.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  }",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: int libevt_debug_print_posix_time_value(",
          "134:      const char *function_name,",
          "135:      const char *value_name,",
          "136:      const uint8_t *byte_stream,",
          "137:      size_t byte_stream_size,",
          "138:      int byte_order,",
          "139:      uint8_t value_type,",
          "140:      uint32_t string_format_flags,",
          "141:      libcerror_error_t **error )",
          "142: {",
          "143:  char date_time_string[ 32 ];",
          "145:  libfdatetime_posix_time_t *posix_time = NULL;",
          "146:  static char *function                 = \"libevt_debug_print_posix_time_value\";",
          "148:  if( libfdatetime_posix_time_initialize(",
          "149:       &posix_time,",
          "150:       error ) != 1 )",
          "151:  {",
          "152:   libcerror_error_set(",
          "153:    error,",
          "154:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "155:    LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED,",
          "156:    \"%s: unable to create posix time.\",",
          "157:    function );",
          "159:   goto on_error;",
          "160:  }",
          "161:  if( libfdatetime_posix_time_copy_from_byte_stream(",
          "162:       posix_time,",
          "163:       byte_stream,",
          "164:       byte_stream_size,",
          "165:       byte_order,",
          "166:       value_type,",
          "167:       error ) != 1 )",
          "168:  {",
          "169:   libcerror_error_set(",
          "170:    error,",
          "171:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "172:    LIBCERROR_RUNTIME_ERROR_COPY_FAILED,",
          "173:    \"%s: unable to copy byte stream to posix time.\",",
          "174:    function );",
          "176:   goto on_error;",
          "177:  }",
          "178:  if( libfdatetime_posix_time_copy_to_utf8_string(",
          "179:       posix_time,",
          "180:       (uint8_t *) date_time_string,",
          "181:       32,",
          "182:       string_format_flags,",
          "183:       error ) != 1 )",
          "184:  {",
          "185:   libcerror_error_set(",
          "186:    error,",
          "187:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "188:    LIBCERROR_RUNTIME_ERROR_COPY_FAILED,",
          "189:    \"%s: unable to copy posix_time to string.\",",
          "190:    function );",
          "192:   goto on_error;",
          "193:  }",
          "194:  libcnotify_printf(",
          "195:   \"%s: %s: %s UTC\\n\",",
          "196:   function_name,",
          "197:   value_name,",
          "198:   date_time_string );",
          "200:  if( libfdatetime_posix_time_free(",
          "201:       &posix_time,",
          "202:       error ) != 1 )",
          "203:  {",
          "204:   libcerror_error_set(",
          "205:    error,",
          "206:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "207:    LIBCERROR_RUNTIME_ERROR_FINALIZE_FAILED,",
          "208:    \"%s: unable to free posix time.\",",
          "209:    function );",
          "211:   goto on_error;",
          "212:  }",
          "213:  return( 1 );",
          "215: on_error:",
          "216:  if( posix_time != NULL )",
          "217:  {",
          "218:   libfdatetime_posix_time_free(",
          "219:    &posix_time,",
          "220:    NULL );",
          "221:  }",
          "222:  return( -1 );",
          "223: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:  return( 1 );",
          "203: }",
          "",
          "[Removed Lines]",
          "205: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libevt/libevt_debug.h||libevt/libevt_debug.h": [
          "File: libevt/libevt_debug.h -> libevt/libevt_debug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: void libevt_debug_print_event_type(",
          "44:       uint16_t event_type );",
          "46: int libevt_debug_print_read_offsets(",
          "47:      libbfio_handle_t *file_io_handle,",
          "48:      libcerror_error_t **error );",
          "52: #if defined( __cplusplus )",
          "53: }",
          "",
          "[Removed Lines]",
          "50: #endif",
          "",
          "[Added Lines]",
          "46: int libevt_debug_print_posix_time_value(",
          "47:      const char *function_name,",
          "48:      const char *value_name,",
          "49:      const uint8_t *byte_stream,",
          "50:      size_t byte_stream_size,",
          "51:      int byte_order,",
          "52:      uint8_t value_type,",
          "53:      uint32_t string_format_flags,",
          "54:      libcerror_error_t **error );",
          "",
          "---------------"
        ],
        "libevt/libevt_record_values.c||libevt/libevt_record_values.c": [
          "File: libevt/libevt_record_values.c -> libevt/libevt_record_values.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:      uint8_t strict_mode,",
          "602:      libcerror_error_t **error )",
          "603: {",
          "618: #if defined( HAVE_DEBUG_OUTPUT )",
          "625: #endif",
          "627:  if( record_values == NULL )",
          "",
          "[Removed Lines]",
          "604:  static char *function                 = \"libevt_record_values_read_event\";",
          "605:  size_t record_data_offset             = 0;",
          "606:  size_t strings_data_offset            = 0;",
          "607:  ssize_t value_data_size               = 0;",
          "608:  uint32_t data_offset                  = 0;",
          "609:  uint32_t data_size                    = 0;",
          "610:  uint32_t members_data_size            = 0;",
          "611:  uint32_t size                         = 0;",
          "612:  uint32_t size_copy                    = 0;",
          "613:  uint32_t strings_offset               = 0;",
          "614:  uint32_t strings_size                 = 0;",
          "615:  uint32_t user_sid_offset              = 0;",
          "616:  uint32_t user_sid_size                = 0;",
          "619:  system_character_t posix_time_string[ 32 ];",
          "621:  libfdatetime_posix_time_t *posix_time = NULL;",
          "622:  uint32_t value_32bit                  = 0;",
          "623:  uint16_t value_16bit                  = 0;",
          "624:  int result                            = 0;",
          "",
          "[Added Lines]",
          "604:  static char *function      = \"libevt_record_values_read_event\";",
          "605:  size_t record_data_offset  = 0;",
          "606:  size_t strings_data_offset = 0;",
          "607:  ssize_t value_data_size    = 0;",
          "608:  uint32_t data_offset       = 0;",
          "609:  uint32_t data_size         = 0;",
          "610:  uint32_t members_data_size = 0;",
          "611:  uint32_t size              = 0;",
          "612:  uint32_t size_copy         = 0;",
          "613:  uint32_t strings_offset    = 0;",
          "614:  uint32_t strings_size      = 0;",
          "615:  uint32_t user_sid_offset   = 0;",
          "616:  uint32_t user_sid_size     = 0;",
          "619:  uint32_t value_32bit       = 0;",
          "620:  uint16_t value_16bit       = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "741:    function,",
          "742:    record_values->number );",
          "759:        ( (evt_record_event_header_t *) record_data )->creation_time,",
          "760:        4,",
          "761:        LIBFDATETIME_ENDIAN_LITTLE,",
          "762:        LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED,",
          "763:        error ) != 1 )",
          "764:   {",
          "765:    libcerror_error_set(",
          "766:     error,",
          "767:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "770:     function );",
          "772:    goto on_error;",
          "773:   }",
          "807:        ( (evt_record_event_header_t *) record_data )->written_time,",
          "808:        4,",
          "809:        LIBFDATETIME_ENDIAN_LITTLE,",
          "810:        LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED,",
          "811:        error ) != 1 )",
          "812:   {",
          "813:    libcerror_error_set(",
          "814:     error,",
          "815:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "862:     function );",
          "864:    goto on_error;",
          "",
          "[Removed Lines]",
          "744:   if( libfdatetime_posix_time_initialize(",
          "745:        &posix_time,",
          "746:        error ) != 1 )",
          "747:   {",
          "748:    libcerror_error_set(",
          "749:     error,",
          "750:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "751:     LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED,",
          "752:     \"%s: unable to create POSIX time.\",",
          "753:     function );",
          "755:    goto on_error;",
          "756:   }",
          "757:   if( libfdatetime_posix_time_copy_from_byte_stream(",
          "758:        posix_time,",
          "768:     LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "769:     \"%s: unable to copy POSIX time from byte stream.\",",
          "774: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "775:   result = libfdatetime_posix_time_copy_to_utf16_string(",
          "776:      posix_time,",
          "777:      (uint16_t *) posix_time_string,",
          "778:      32,",
          "779:      LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "780:      error );",
          "781: #else",
          "782:   result = libfdatetime_posix_time_copy_to_utf8_string(",
          "783:      posix_time,",
          "784:      (uint8_t *) posix_time_string,",
          "785:      32,",
          "786:      LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "787:      error );",
          "788: #endif",
          "789:   if( result != 1 )",
          "790:   {",
          "791:    libcerror_error_set(",
          "792:     error,",
          "793:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "794:     LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "795:     \"%s: unable to copy POSIX time to string.\",",
          "796:     function );",
          "798:    goto on_error;",
          "799:   }",
          "800:   libcnotify_printf(",
          "801:    \"%s: creation time\\t\\t\\t\\t: %\" PRIs_SYSTEM \" UTC\\n\",",
          "802:    function,",
          "803:    posix_time_string );",
          "805:   if( libfdatetime_posix_time_copy_from_byte_stream(",
          "806:        posix_time,",
          "816:     LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "817:     \"%s: unable to copy POSIX time from byte stream.\",",
          "818:     function );",
          "820:    goto on_error;",
          "821:   }",
          "822: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "823:   result = libfdatetime_posix_time_copy_to_utf16_string(",
          "824:      posix_time,",
          "825:      (uint16_t *) posix_time_string,",
          "826:      32,",
          "827:      LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "828:      error );",
          "829: #else",
          "830:   result = libfdatetime_posix_time_copy_to_utf8_string(",
          "831:      posix_time,",
          "832:      (uint8_t *) posix_time_string,",
          "833:      32,",
          "834:      LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "835:      error );",
          "836: #endif",
          "837:   if( result != 1 )",
          "838:   {",
          "839:    libcerror_error_set(",
          "840:     error,",
          "841:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "842:     LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "843:     \"%s: unable to copy POSIX time to string.\",",
          "844:     function );",
          "846:    goto on_error;",
          "847:   }",
          "848:   libcnotify_printf(",
          "849:    \"%s: written time\\t\\t\\t\\t: %\" PRIs_SYSTEM \" UTC\\n\",",
          "850:    function,",
          "851:    posix_time_string );",
          "853:   if( libfdatetime_posix_time_free(",
          "854:        &posix_time,",
          "855:        error ) != 1 )",
          "856:   {",
          "857:    libcerror_error_set(",
          "858:     error,",
          "859:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "860:     LIBCERROR_RUNTIME_ERROR_FINALIZE_FAILED,",
          "861:     \"%s: unable to free POSIX time.\",",
          "",
          "[Added Lines]",
          "740:   if( libevt_debug_print_posix_time_value(",
          "741:        function,",
          "742:        \"creation time\\t\\t\\t\\t\",",
          "747:        LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "753:     LIBCERROR_RUNTIME_ERROR_PRINT_FAILED,",
          "754:     \"%s: unable to print posix time value.\",",
          "759:   if( libevt_debug_print_posix_time_value(",
          "760:        function,",
          "761:        \"written time\\t\\t\\t\\t\",",
          "766:        LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,",
          "772:     LIBCERROR_RUNTIME_ERROR_PRINT_FAILED,",
          "773:     \"%s: unable to print posix time value.\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1472:  return( 1 );",
          "1474: on_error:",
          "1483:  if( record_values->data != NULL )",
          "1484:  {",
          "1485:   libfvalue_value_free(",
          "",
          "[Removed Lines]",
          "1475: #if defined( HAVE_DEBUG_OUTPUT )",
          "1476:  if( posix_time != NULL )",
          "1477:  {",
          "1478:   libfdatetime_posix_time_free(",
          "1479:    &posix_time,",
          "1480:    NULL );",
          "1481:  }",
          "1482: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "synclibs.sh||synclibs.sh": [
          "File: synclibs.sh -> synclibs.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/sh",
          "2: # Script that synchronizes the local library dependencies",
          "3: #",
          "6: GIT_URL_PREFIX=\"https://github.com/libyal\";",
          "7: LOCAL_LIBS=\"libbfio libcdata libcdirectory libcerror libcfile libclocale libcnotify libcpath libcsplit libcthreads libexe libfcache libfdata libfdatetime libfguid libfvalue libfwevt libfwnt libregf libuna libwrc\";",
          "",
          "[Removed Lines]",
          "4: # Version: 20161212",
          "",
          "[Added Lines]",
          "4: # Version: 20171003",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: for LOCAL_LIB in ${LOCAL_LIBS};",
          "13: do",
          "16:  if ! test -d ${LOCAL_LIB}-$$;",
          "17:  then",
          "19:  fi",
          "21:  rm -rf ${LOCAL_LIB};",
          "",
          "[Removed Lines]",
          "14:  git clone ${GIT_URL_PREFIX}/${LOCAL_LIB}.git ${LOCAL_LIB}-$$;",
          "18:   continue",
          "",
          "[Added Lines]",
          "17:  GIT_URL=\"${GIT_URL_PREFIX}/${LOCAL_LIB}.git\";",
          "19:  git clone --quiet ${GIT_URL} ${LOCAL_LIB}-$$;",
          "23:   echo \"Unable to git clone: ${GIT_URL}\";",
          "25:   IFS=$OLDIFS;",
          "27:   exit ${EXIT_FAILURE};",
          "28:  fi",
          "29:  (cd ${LOCAL_LIB}-$$ && git fetch --quiet --all --tags --prune)",
          "31:  LATEST_TAG=`cd ${LOCAL_LIB}-$$ && git describe --tags --abbrev=0`;",
          "33:  if test -n ${LATEST_TAG} && test \"$1\" != \"--use-head\";",
          "34:  then",
          "35:   echo \"Synchronizing: ${LOCAL_LIB} from ${GIT_URL} tag ${LATEST_TAG}\";",
          "37:   (cd ${LOCAL_LIB}-$$ && git checkout --quiet tags/${LATEST_TAG});",
          "38:  else",
          "39:   echo \"Synchronizing: ${LOCAL_LIB} from ${GIT_URL} HEAD\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24:  if ! test -d ${LOCAL_LIB};",
          "25:  then",
          "27:  fi",
          "29:  LOCAL_LIB_UPPER=`echo \"${LOCAL_LIB}\" | tr \"[a-z]\" \"[A-Z]\"`;",
          "",
          "[Removed Lines]",
          "26:   continue",
          "",
          "[Added Lines]",
          "47:   echo \"Missing directory: ${LOCAL_LIB}\";",
          "49:   IFS=$OLDIFS;",
          "51:   exit ${EXIT_FAILURE};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151: IFS=$OLDIFS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: exit ${EXIT_SUCCESS};",
          "",
          "---------------"
        ],
        "syncsharedlibs.sh||syncsharedlibs.sh": [
          "File: syncsharedlibs.sh -> syncsharedlibs.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/sh",
          "2: # Script that synchronizes the shared library dependencies",
          "3: #",
          "6: GIT_URL_PREFIX=\"https://github.com/libyal\";",
          "9: if test ${TRAVIS_OS_NAME} != \"linux\";",
          "10: then",
          "",
          "[Removed Lines]",
          "4: # Version: 20170903",
          "7: SHARED_LIBS=\"libbfio libcdata libcdirectory libcerror libcfile libclocale libcnotify libcpath libcsplit libcthreads libexe libfcache libfdata libfdatetime libfguid libfvalue libfwevt libfwnt libregf libuna libwrc\";",
          "",
          "[Added Lines]",
          "4: # Version: 20170905",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "10: SHARED_LIBS=\"libcerror libcthreads libcdata libclocale libcnotify libcsplit libuna libcfile libcpath libbfio libfcache libfdata libfdatetime libfguid libfvalue libfwnt libfwevt libexe libregf libwrc libcdirectory\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:  exit 1;",
          "14: fi",
          "16: OLDIFS=$IFS;",
          "17: IFS=\" \";",
          "19: for SHARED_LIB in ${SHARED_LIBS};",
          "20: do",
          "23:  if ! test -d ${SHARED_LIB}-$$;",
          "24:  then",
          "26:  fi",
          "30:  rm -rf ${SHARED_LIB}-$$;",
          "31: done",
          "33: IFS=$OLDIFS;",
          "",
          "[Removed Lines]",
          "21:  git clone ${GIT_URL_PREFIX}/${SHARED_LIB}.git ${SHARED_LIB}-$$;",
          "25:   continue",
          "28:  (cd ${SHARED_LIB}-$$ && ./synclibs.sh && ./autogen.sh && ./configure --prefix=/usr && make && sudo make install);",
          "",
          "[Added Lines]",
          "19: USE_HEAD=\"\";",
          "21: if test \"$1\" = \"--use-head\";",
          "22: then",
          "23:  USE_HEAD=\"--use-head\";",
          "24: fi",
          "31:  GIT_URL=\"${GIT_URL_PREFIX}/${SHARED_LIB}.git\";",
          "33:  git clone --quiet ${GIT_URL} ${SHARED_LIB}-$$;",
          "37:   echo \"Unable to git clone: ${GIT_URL}\";",
          "39:   IFS=$OLDIFS;",
          "41:   exit ${EXIT_FAILURE};",
          "42:  fi",
          "43:  (cd ${SHARED_LIB}-$$ && git fetch --quiet --all --tags --prune)",
          "45:  LATEST_TAG=`cd ${SHARED_LIB}-$$ && git describe --tags --abbrev=0`;",
          "47:  if test -n ${LATEST_TAG} && test -z ${USE_HEAD};",
          "48:  then",
          "49:   echo \"Synchronizing: ${SHARED_LIB} from ${GIT_URL} tag ${LATEST_TAG}\";",
          "51:   (cd ${SHARED_LIB}-$$ && git checkout --quiet tags/${LATEST_TAG});",
          "52:  else",
          "53:   echo \"Synchronizing: ${SHARED_LIB} from ${GIT_URL} HEAD\";",
          "54:  fi",
          "56:  (cd ${SHARED_LIB}-$$ && ./synclibs.sh ${USE_HEAD} && ./autogen.sh);",
          "58:  CONFIGURE_OPTIONS=\"\";",
          "60:  (cd ${SHARED_LIB}-$$ && ./configure --help | grep -- '--enable-wide-character-type' > /dev/null);",
          "62:  if test $? -eq 0;",
          "63:  then",
          "64:   CONFIGURE_OPTIONS=\"${CONFIGURE_OPTIONS} --enable-wide-character-type\";",
          "67:  (cd ${SHARED_LIB}-$$ && ./configure --prefix=/usr ${CONFIGURE_OPTIONS} && make && sudo make install);",
          "74: exit ${EXIT_SUCCESS};",
          "",
          "---------------"
        ],
        "tests/evt_test_file.c||tests/evt_test_file.c": [
          "File: tests/evt_test_file.c -> tests/evt_test_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:  return( result );",
          "579: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581: #include \"../libevt/libevt_file.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1428:    result,",
          "1429:    1 );",
          "1434:  }",
          "",
          "[Removed Lines]",
          "1431:          EVT_TEST_ASSERT_IS_NULL(",
          "1432:           \"error\",",
          "1433:           error );",
          "",
          "[Added Lines]",
          "1433:   EVT_TEST_ASSERT_IS_NULL(",
          "1434:    \"error\",",
          "1435:    error );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1467:    result,",
          "1468:    -1 );",
          "1474:   libcerror_error_free(",
          "1475:    &error );",
          "",
          "[Removed Lines]",
          "1470:          EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1471:           \"error\",",
          "1472:           error );",
          "",
          "[Added Lines]",
          "1472:   EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1473:    \"error\",",
          "1474:    error );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1808:    result,",
          "1809:    -1 );",
          "1814:  }",
          "1815:  if( result != 0 )",
          "1816:  {",
          "",
          "[Removed Lines]",
          "1811:          EVT_TEST_ASSERT_IS_NULL(",
          "1812:           \"error\",",
          "1813:           error );",
          "",
          "[Added Lines]",
          "1813:   EVT_TEST_ASSERT_IS_NULL(",
          "1814:    \"error\",",
          "1815:    error );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1855:    result,",
          "1856:    1 );",
          "1866:   EVT_TEST_RUN_WITH_ARGS(",
          "1867:    \"libevt_file_signal_abort\",",
          "",
          "[Removed Lines]",
          "1858:          EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1859:           \"file\",",
          "1860:           file );",
          "1862:          EVT_TEST_ASSERT_IS_NULL(",
          "1863:           \"error\",",
          "1864:           error );",
          "",
          "[Added Lines]",
          "1860:   EVT_TEST_ASSERT_IS_NOT_NULL(",
          "1861:    \"file\",",
          "1862:    file );",
          "1864:   EVT_TEST_ASSERT_IS_NULL(",
          "1865:    \"error\",",
          "1866:    error );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1921:    0 );",
          "1923:   EVT_TEST_ASSERT_IS_NULL(",
          "1930:  }",
          "",
          "[Removed Lines]",
          "1924:           \"file\",",
          "1925:           file );",
          "1927:          EVT_TEST_ASSERT_IS_NULL(",
          "1928:           \"error\",",
          "1929:           error );",
          "",
          "[Added Lines]",
          "1926:    \"file\",",
          "1927:    file );",
          "1929:   EVT_TEST_ASSERT_IS_NULL(",
          "1930:    \"error\",",
          "1931:    error );",
          "",
          "---------------"
        ]
      }
    }
  ]
}