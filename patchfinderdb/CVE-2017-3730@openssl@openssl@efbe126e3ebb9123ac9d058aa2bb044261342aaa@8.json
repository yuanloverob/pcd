{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "992b3740a1f7b24771ccf29a52b0141c51b95933",
      "candidate_info": {
        "commit_hash": "992b3740a1f7b24771ccf29a52b0141c51b95933",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/992b3740a1f7b24771ccf29a52b0141c51b95933",
        "files": [
          "ssl/statem/statem_lib.c"
        ],
        "message": "Always ensure that init_msg is initialised for a CCS\n\nWe read it later in grow_init_buf(). If CCS is the first thing received in\na flight, then it will use the init_msg from the last flight we received. If\nthe init_buf has been grown in the meantime then it will point to some\narbitrary other memory location. This is likely to result in grow_init_buf()\nattempting to grow to some excessively large amount which is likely to\nfail. In practice this should never happen because the only time we receive\na CCS as the first thing in a flight is in an abbreviated handshake. None\nof the preceding messages from the server flight would be large enough to\ntrigger this.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit c437757466e7bef632b26eaaf429a9e693330999)",
        "before_after_code_files": [
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                 }",
          "371:                 s->s3->tmp.message_type = *mt = SSL3_MT_CHANGE_CIPHER_SPEC;",
          "372:                 s->init_num = i - 1;",
          "373:                 s->s3->tmp.message_size = i;",
          "374:                 return 1;",
          "375:             } else if (recvd_type != SSL3_RT_HANDSHAKE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:                 s->init_msg = s->init_buf->data;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e6b83f608b7a4b315146895ac911e8c06d40db1",
      "candidate_info": {
        "commit_hash": "2e6b83f608b7a4b315146895ac911e8c06d40db1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2e6b83f608b7a4b315146895ac911e8c06d40db1",
        "files": [
          "crypto/init.c"
        ],
        "message": "Implement GET_MODULE_HANDLE_EX_FLAG_PIN for windows\n\nRather than leaking a reference, just call GetModuleHandleEx and pin the\nmodule on Windows.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 2b59d1beaad43d9cf8eb916a437db63bc8ce1d3a)",
        "before_after_code_files": [
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     base_inited = 1;",
          "84: #ifndef OPENSSL_USE_NODELETE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # ifdef DSO_WIN32",
          "86:     {",
          "87:         HMODULE handle = NULL;",
          "88:         BOOL ret;",
          "91:         ret = GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS",
          "92:                                 | GET_MODULE_HANDLE_EX_FLAG_PIN,",
          "93:                                 (void *)&base_inited, &handle);",
          "95:         return (ret == TRUE) ? 1 : 0;",
          "96:     }",
          "97: # else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:         dso = DSO_dsobyaddr(&base_inited, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "93:         DSO_free(dso);",
          "94:     }",
          "95: #endif",
          "97:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "591:     OPENSSL_INIT_STOP *newhand;",
          "593: #ifndef OPENSSL_USE_NODELETE",
          "599:     {",
          "601:         union {",
          "602:             void *sym;",
          "603:             void (*func)(void);",
          "604:         } handlersym;",
          "606:         handlersym.func = handler;",
          "610:     }",
          "611: #endif",
          "",
          "[Removed Lines]",
          "600:         DSO *dso = NULL;",
          "608:         dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "609:         DSO_free(dso);",
          "",
          "[Added Lines]",
          "615: # ifdef DSO_WIN32",
          "616:         {",
          "617:             HMODULE handle = NULL;",
          "618:             BOOL ret;",
          "624:             ret = GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS",
          "625:                                     | GET_MODULE_HANDLE_EX_FLAG_PIN,",
          "626:                                     handlersym.sym, &handle);",
          "628:             if (!ret)",
          "629:                 return 0;",
          "630:         }",
          "631: # else",
          "638:         {",
          "639:             DSO *dso = NULL;",
          "641:             dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "642:             DSO_free(dso);",
          "643:         }",
          "644: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8114d7d775b5802f283a9325635f9f2732e0341",
      "candidate_info": {
        "commit_hash": "f8114d7d775b5802f283a9325635f9f2732e0341",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f8114d7d775b5802f283a9325635f9f2732e0341",
        "files": [
          "crypto/bn/bn_lcl.h"
        ],
        "message": "bn: fix BN_DEBUG + BN_DEBUG_RAND support\n\nCouple of updates to make this code work properly again;\n* use OPENSSL_assert() instead of assert() (and #include <assert.h>)\n* the circular-dependency-avoidance uses RAND_bytes() (not pseudo)\n\nChange-Id: Iefb5a9dd73f71fd81c1268495c54a64378955354\nSigned-off-by: Geoff Thorpe <geoff@openssl.org>\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1672)\n(cherry picked from commit 0b50ac1a0fe907f4effcf3f2f36dac32523938c5)",
        "before_after_code_files": [
          "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h": [
          "File: crypto/bn/bn_lcl.h -> crypto/bn/bn_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: # ifdef BN_DEBUG",
          "152: #  ifdef BN_DEBUG_RAND",
          "156: #    define BN_DEBUG_TRIX",
          "157: #   endif",
          "158: #   define bn_pollute(a) \\",
          "",
          "[Removed Lines]",
          "150: #  include <assert.h>",
          "154: #   ifndef RAND_pseudo_bytes",
          "155: int RAND_pseudo_bytes(unsigned char *buf, int num);",
          "",
          "[Added Lines]",
          "151: #   ifndef RAND_bytes",
          "152: int RAND_bytes(unsigned char *buf, int num);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:             } \\",
          "172:         } while(0)",
          "173: #   ifdef BN_DEBUG_TRIX",
          "175: #   endif",
          "176: #  else",
          "177: #   define bn_pollute(a)",
          "",
          "[Removed Lines]",
          "174: #    undef RAND_pseudo_bytes",
          "",
          "[Added Lines]",
          "171: #    undef RAND_bytes",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:         do { \\",
          "181:                 const BIGNUM *_bnum2 = (a); \\",
          "182:                 if (_bnum2 != NULL) { \\",
          "184:                                 (_bnum2->d[_bnum2->top - 1] != 0)); \\",
          "185:                         bn_pollute(_bnum2); \\",
          "186:                 } \\",
          "",
          "[Removed Lines]",
          "183:                         assert((_bnum2->top == 0) || \\",
          "",
          "[Added Lines]",
          "180:                         OPENSSL_assert((_bnum2->top == 0) || \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192: #  define bn_wcheck_size(bn, words) \\",
          "193:         do { \\",
          "194:                 const BIGNUM *_bnum2 = (bn); \\",
          "197:                 (void)(_bnum2); \\",
          "198:         } while(0)",
          "",
          "[Removed Lines]",
          "195:                 assert((words) <= (_bnum2)->dmax && (words) >= (_bnum2)->top); \\",
          "",
          "[Added Lines]",
          "192:                 OPENSSL_assert((words) <= (_bnum2)->dmax && \\",
          "193:                         (words) >= (_bnum2)->top); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aff927e84c3bce5b7ebc2cc72f99a571ea89c2b1",
      "candidate_info": {
        "commit_hash": "aff927e84c3bce5b7ebc2cc72f99a571ea89c2b1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/aff927e84c3bce5b7ebc2cc72f99a571ea89c2b1",
        "files": [
          "crypto/ui/ui_err.c",
          "crypto/ui/ui_lib.c",
          "include/openssl/ui.h"
        ],
        "message": "UI_process() didn't generate errors\n\nSince there are many parts of UI_process() that can go wrong, it isn't\nvery helpful to only return -1 with no further explanation.  With this\nchange, the error message will at least show which part went wrong.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2037)\n(cherry picked from commit 0a687ab0a92d2d68289364a6e232028c229f44bb)",
        "before_after_code_files": [
          "crypto/ui/ui_err.c||crypto/ui/ui_err.c",
          "crypto/ui/ui_lib.c||crypto/ui/ui_lib.c",
          "include/openssl/ui.h||include/openssl/ui.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ui/ui_err.c||crypto/ui/ui_err.c": [
          "File: crypto/ui/ui_err.c -> crypto/ui/ui_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     {ERR_FUNC(UI_F_UI_DUP_VERIFY_STRING), \"UI_dup_verify_string\"},",
          "31:     {ERR_FUNC(UI_F_UI_GET0_RESULT), \"UI_get0_result\"},",
          "32:     {ERR_FUNC(UI_F_UI_NEW_METHOD), \"UI_new_method\"},",
          "33:     {ERR_FUNC(UI_F_UI_SET_RESULT), \"UI_set_result\"},",
          "34:     {0, NULL}",
          "35: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     {ERR_FUNC(UI_F_UI_PROCESS), \"UI_process\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     {ERR_REASON(UI_R_INDEX_TOO_LARGE), \"index too large\"},",
          "41:     {ERR_REASON(UI_R_INDEX_TOO_SMALL), \"index too small\"},",
          "42:     {ERR_REASON(UI_R_NO_RESULT_BUFFER), \"no result buffer\"},",
          "43:     {ERR_REASON(UI_R_RESULT_TOO_LARGE), \"result too large\"},",
          "44:     {ERR_REASON(UI_R_RESULT_TOO_SMALL), \"result too small\"},",
          "45:     {ERR_REASON(UI_R_UNKNOWN_CONTROL_COMMAND), \"unknown control command\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     {ERR_REASON(UI_R_PROCESSING_ERROR), \"processing error\"},",
          "",
          "---------------"
        ],
        "crypto/ui/ui_lib.c||crypto/ui/ui_lib.c": [
          "File: crypto/ui/ui_lib.c -> crypto/ui/ui_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: int UI_process(UI *ui)",
          "424: {",
          "425:     int i, ok = 0;",
          "430:     if (ui->flags & UI_FLAG_PRINT_ERRORS)",
          "431:         ERR_print_errors_cb((int (*)(const char *, size_t, void *))",
          "",
          "[Removed Lines]",
          "427:     if (ui->meth->ui_open_session && !ui->meth->ui_open_session(ui))",
          "428:         return -1;",
          "",
          "[Added Lines]",
          "426:     const char *state = \"processing\";",
          "428:     if (ui->meth->ui_open_session && !ui->meth->ui_open_session(ui)) {",
          "429:         state = \"opening session\";",
          "430:         ok = -1;",
          "431:         goto err;",
          "432:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:             && !ui->meth->ui_write_string(ui,",
          "437:                                           sk_UI_STRING_value(ui->strings, i)))",
          "438:         {",
          "439:             ok = -1;",
          "440:             goto err;",
          "441:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:             state = \"writing strings\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:             ok = -2;",
          "448:             goto err;",
          "450:             ok = -1;",
          "451:             goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:             state = \"flushing\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:                 ok = -2;",
          "464:                 goto err;",
          "466:                 ok = -1;",
          "467:                 goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:                 state = \"reading strings\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "472:         }",
          "473:     }",
          "474:  err:",
          "477:     return ok;",
          "478: }",
          "",
          "[Removed Lines]",
          "475:     if (ui->meth->ui_close_session && !ui->meth->ui_close_session(ui))",
          "476:         return -1;",
          "",
          "[Added Lines]",
          "482:     if (ui->meth->ui_close_session && !ui->meth->ui_close_session(ui)) {",
          "483:         if (state == NULL)",
          "484:             state = \"closing session\";",
          "485:         ok = -1;",
          "486:     }",
          "488:     if (ok == -1) {",
          "489:         UIerr(UI_F_UI_PROCESS, UI_R_PROCESSING_ERROR);",
          "490:         ERR_add_error_data(2, \"while \", state);",
          "491:     }",
          "",
          "---------------"
        ],
        "include/openssl/ui.h||include/openssl/ui.h": [
          "File: include/openssl/ui.h -> include/openssl/ui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: # define UI_F_UI_DUP_VERIFY_STRING                        106",
          "351: # define UI_F_UI_GET0_RESULT                              107",
          "352: # define UI_F_UI_NEW_METHOD                               104",
          "353: # define UI_F_UI_SET_RESULT                               105",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353: # define UI_F_UI_PROCESS                                  113",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357: # define UI_R_INDEX_TOO_LARGE                             102",
          "358: # define UI_R_INDEX_TOO_SMALL                             103",
          "359: # define UI_R_NO_RESULT_BUFFER                            105",
          "360: # define UI_R_RESULT_TOO_LARGE                            100",
          "361: # define UI_R_RESULT_TOO_SMALL                            101",
          "362: # define UI_R_UNKNOWN_CONTROL_COMMAND                     106",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361: # define UI_R_PROCESSING_ERROR                            107",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db2fed4443042db3e7921810d944cfd15d347d08",
      "candidate_info": {
        "commit_hash": "db2fed4443042db3e7921810d944cfd15d347d08",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/db2fed4443042db3e7921810d944cfd15d347d08",
        "files": [
          "crypto/rsa/rsa_oaep.c"
        ],
        "message": "Fix a memory leak in RSA_padding_add_PKCS1_OAEP_mgf1\n\nSigned-off-by: Kurt Roeckx <kurt@roeckx.be>\nReviewed-by: Matt Caswell <matt@openssl.org>\nGH: #2140\n(cherry picked from commit c6d215e0d278fcd51ad474a3647b61e1b67290bb)",
        "before_after_code_files": [
          "crypto/rsrsa_oaep.c||crypto/rsa/rsa_oaep.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rsrsa_oaep.c||crypto/rsa/rsa_oaep.c": [
          "File: crypto/rsrsa_oaep.c -> crypto/rsa/rsa_oaep.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:         goto err;",
          "99:         goto err;",
          "106:  err:",
          "107:     OPENSSL_free(dbmask);",
          "108:     return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}