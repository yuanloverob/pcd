{
  "cve_id": "CVE-2016-3724",
  "cve_desc": "Jenkins before 2.3 and LTS before 1.651.2 allow remote authenticated users with extended read access to obtain sensitive password information by reading a job configuration.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "82b42359797e42fa4b2428d5e390e7ce91b74998",
  "patch_info": {
    "commit_hash": "82b42359797e42fa4b2428d5e390e7ce91b74998",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/82b42359797e42fa4b2428d5e390e7ce91b74998",
    "files": [
      "core/src/main/java/hudson/Functions.java",
      "test/src/test/java/lib/form/PasswordTest.java",
      "test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly"
    ],
    "message": "[SECURITY-266] Conceal ciphertext from the web UI for a user who has no Item.CONFIGURE permission.",
    "before_after_code_files": [
      "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
      "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java",
      "test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly||test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java": [
      "File: core/src/main/java/hudson/Functions.java -> core/src/main/java/hudson/Functions.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1716:     public String getPasswordValue(Object o) {",
      "1717:         if (o==null)    return null;",
      "1719:         if (getIsUnitTest()) {",
      "1720:             throw new SecurityException(\"attempted to render plaintext \u2018\" + o + \"\u2019 in password field; use a getter of type Secret instead\");",
      "1721:         }",
      "",
      "[Removed Lines]",
      "1718:         if (o instanceof Secret)    return ((Secret)o).getEncryptedValue();",
      "",
      "[Added Lines]",
      "1718:         if (o instanceof Secret) {",
      "1719:             StaplerRequest req = Stapler.getCurrentRequest();",
      "1720:             if (req != null) {",
      "1721:                 Item item = req.findAncestorObject(Item.class);",
      "1722:                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {",
      "1723:                     return \"<some secret>\";",
      "1724:                 }",
      "1725:             }",
      "1726:             return ((Secret) o).getEncryptedValue();",
      "1727:         }",
      "",
      "---------------"
    ],
    "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
      "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import hudson.Extension;",
      "29: import hudson.model.Describable;",
      "30: import hudson.model.Descriptor;",
      "31: import hudson.util.Secret;",
      "32: import org.jvnet.hudson.test.HudsonTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import hudson.model.FreeStyleProject;",
      "32: import hudson.model.Item;",
      "33: import hudson.model.JobProperty;",
      "34: import hudson.model.JobPropertyDescriptor;",
      "35: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "37: import jenkins.model.Jenkins;",
      "38: import static org.hamcrest.Matchers.containsString;",
      "39: import static org.hamcrest.Matchers.not;",
      "40: import static org.junit.Assert.assertThat;",
      "42: import org.jvnet.hudson.test.Issue;",
      "43: import org.jvnet.hudson.test.TestExtension;",
      "44: import org.kohsuke.stapler.DataBoundConstructor;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:             return null;",
      "56:         }",
      "57:     }",
      "58: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:     @Issue(\"SECURITY-266\")",
      "72:     public void testExposedCiphertext() throws Exception {",
      "73:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
      "74:         try {",
      "75:             jenkins.setSecurityRealm(createDummySecurityRealm());",
      "77:             GlobalMatrixAuthorizationStrategy pmas = new GlobalMatrixAuthorizationStrategy();",
      "78:             pmas.add(Jenkins.ADMINISTER, \"admin\");",
      "79:             pmas.add(Jenkins.READ, \"dev\");",
      "80:             pmas.add(Item.READ, \"dev\");",
      "81:             Item.EXTENDED_READ.setEnabled(true);",
      "82:             pmas.add(Item.EXTENDED_READ, \"dev\");",
      "83:             jenkins.setAuthorizationStrategy(pmas);",
      "84:             Secret secret = Secret.fromString(\"s3cr3t\");",
      "85:             FreeStyleProject p = createFreeStyleProject(\"p\");",
      "86:             p.addProperty(new VulnerableProperty(secret));",
      "87:             WebClient wc = createWebClient();",
      "88:             wc.login(\"admin\");",
      "89:             HtmlPage configure = wc.getPage(p, \"configure\");",
      "90:             assertThat(configure.getWebResponse().getContentAsString(), containsString(secret.getEncryptedValue()));",
      "91:             submit(configure.getFormByName(\"config\"));",
      "92:             VulnerableProperty vp = p.getProperty(VulnerableProperty.class);",
      "93:             assertNotNull(vp);",
      "94:             assertEquals(secret, vp.secret);",
      "95:             wc.login(\"dev\");",
      "96:             configure = wc.getPage(p, \"configure\");",
      "97:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(secret.getEncryptedValue())));",
      "98:         } finally {",
      "99:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
      "100:         }",
      "101:     }",
      "102:     public static class VulnerableProperty extends JobProperty<FreeStyleProject> {",
      "103:         public final Secret secret;",
      "104:         @DataBoundConstructor",
      "105:         public VulnerableProperty(Secret secret) {",
      "106:             this.secret = secret;",
      "107:         }",
      "108:         @TestExtension(\"testExposedCiphertext\")",
      "109:         public static class DescriptorImpl extends JobPropertyDescriptor {",
      "110:             @Override // TODO delete in 1.635+",
      "111:             public String getDisplayName() {",
      "112:                 return \"VulnerableProperty\";",
      "113:             }",
      "114:         }",
      "115:     }",
      "",
      "---------------"
    ],
    "test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly||test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly": [
      "File: test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly -> test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "2: <!--",
      "3: The MIT License",
      "5: Copyright 2016 CloudBees, Inc.",
      "7: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "8: of this software and associated documentation files (the \"Software\"), to deal",
      "9: in the Software without restriction, including without limitation the rights",
      "10: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "11: copies of the Software, and to permit persons to whom the Software is",
      "12: furnished to do so, subject to the following conditions:",
      "14: The above copyright notice and this permission notice shall be included in",
      "15: all copies or substantial portions of the Software.",
      "17: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "18: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "19: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "20: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "21: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "22: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "23: THE SOFTWARE.",
      "24: -->",
      "26: <?jelly escape-by-default='true'?>",
      "27: <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">",
      "28:     <f:entry field=\"secret\" title=\"secret\">",
      "29:         <f:password/>",
      "30:     </f:entry>",
      "31: </j:jelly>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc2aa07e582a3ff5d427c3546634c70686268714",
      "candidate_info": {
        "commit_hash": "dc2aa07e582a3ff5d427c3546634c70686268714",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/dc2aa07e582a3ff5d427c3546634c70686268714",
        "files": [
          "core/src/main/java/hudson/Functions.java",
          "core/src/main/java/hudson/cli/GetJobCommand.java",
          "core/src/main/java/hudson/model/AbstractItem.java",
          "test/src/test/java/lib/form/PasswordTest.java"
        ],
        "message": "[SECURITY-266] Protecting GetJobCommand.",
        "before_after_code_files": [
          "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
          "core/src/main/java/hudson/cli/GetJobCommand.java||core/src/main/java/hudson/cli/GetJobCommand.java",
          "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java": [
          "File: core/src/main/java/hudson/Functions.java -> core/src/main/java/hudson/Functions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:             if (req != null) {",
          "1721:                 Item item = req.findAncestorObject(Item.class);",
          "1722:                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {",
          "1724:                 }",
          "1725:             }",
          "1726:             return ((Secret) o).getEncryptedValue();",
          "",
          "[Removed Lines]",
          "1723:                     return \"(some secret)\";",
          "",
          "[Added Lines]",
          "1723:                     return \"********\";",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/cli/GetJobCommand.java||core/src/main/java/hudson/cli/GetJobCommand.java": [
          "File: core/src/main/java/hudson/cli/GetJobCommand.java -> core/src/main/java/hudson/cli/GetJobCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import hudson.Extension;",
          "27: import hudson.model.AbstractItem;",
          "30: import org.kohsuke.args4j.Argument;",
          "",
          "[Removed Lines]",
          "28: import hudson.model.Item;",
          "29: import hudson.util.IOUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     }",
          "45:     protected int run() throws Exception {",
          "50:         return 0;",
          "51:     }",
          "52: }",
          "",
          "[Removed Lines]",
          "46:         job.checkPermission(Item.EXTENDED_READ);",
          "47:         IOUtils.copy(",
          "48:             job.getConfigFile().getFile(),",
          "49:             stdout);",
          "",
          "[Added Lines]",
          "44:         job.writeConfigDotXml(stdout);",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java": [
          "File: core/src/main/java/hudson/model/AbstractItem.java -> core/src/main/java/hudson/model/AbstractItem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: import java.io.File;",
          "58: import java.io.IOException;",
          "59: import java.util.Collection;",
          "60: import java.util.List;",
          "61: import java.util.ListIterator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import java.io.OutputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: import org.xml.sax.SAXException;",
          "77: import javax.servlet.ServletException;",
          "78: import javax.xml.transform.Source;",
          "79: import javax.xml.transform.TransformerException;",
          "80: import javax.xml.transform.stream.StreamResult;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: import javax.servlet.ServletOutputStream;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;",
          "84: import org.apache.commons.io.FileUtils;",
          "85: import org.kohsuke.stapler.Ancestor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: import org.kohsuke.accmod.Restricted;",
          "88: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607:             throws IOException {",
          "608:         if (req.getMethod().equals(\"GET\")) {",
          "611:             rsp.setContentType(\"application/xml\");",
          "629:             return;",
          "630:         }",
          "631:         if (req.getMethod().equals(\"POST\")) {",
          "",
          "[Removed Lines]",
          "610:             checkPermission(EXTENDED_READ);",
          "612:             XmlFile configFile = getConfigFile();",
          "613:             if (hasPermission(CONFIGURE)) {",
          "614:                 IOUtils.copy(configFile.getFile(), rsp.getOutputStream());",
          "615:             } else {",
          "616:                 String encoding = configFile.sniffEncoding();",
          "617:                 String xml = FileUtils.readFileToString(configFile.getFile(), encoding);",
          "618:                 Matcher matcher = SECRET_PATTERN.matcher(xml);",
          "619:                 StringBuffer cleanXml = new StringBuffer();",
          "620:                 while (matcher.find()) {",
          "621:                     String text = matcher.group(1);",
          "622:                     if (Secret.decrypt(text) != null) {",
          "623:                         matcher.appendReplacement(cleanXml, \">(some secret)<\");",
          "624:                     }",
          "625:                 }",
          "626:                 matcher.appendTail(cleanXml);",
          "627:                 org.apache.commons.io.IOUtils.write(cleanXml.toString(), rsp.getOutputStream(), encoding);",
          "628:             }",
          "",
          "[Added Lines]",
          "615:             writeConfigDotXml(rsp.getOutputStream());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "638:         rsp.sendError(SC_BAD_REQUEST);",
          "639:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:     @Restricted(NoExternalUse.class)",
          "634:     public void writeConfigDotXml(OutputStream os) throws IOException {",
          "635:         checkPermission(EXTENDED_READ);",
          "636:         XmlFile configFile = getConfigFile();",
          "637:         if (hasPermission(CONFIGURE)) {",
          "638:             IOUtils.copy(configFile.getFile(), os);",
          "639:         } else {",
          "640:             String encoding = configFile.sniffEncoding();",
          "641:             String xml = FileUtils.readFileToString(configFile.getFile(), encoding);",
          "642:             Matcher matcher = SECRET_PATTERN.matcher(xml);",
          "643:             StringBuffer cleanXml = new StringBuffer();",
          "644:             while (matcher.find()) {",
          "645:                 String text = matcher.group(1);",
          "646:                 if (Secret.decrypt(text) != null) {",
          "647:                     matcher.appendReplacement(cleanXml, \">********<\");",
          "648:                 }",
          "649:             }",
          "650:             matcher.appendTail(cleanXml);",
          "651:             org.apache.commons.io.IOUtils.write(cleanXml.toString(), os, encoding);",
          "652:         }",
          "653:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "29: import hudson.Extension;",
          "30: import hudson.model.Describable;",
          "31: import hudson.model.Descriptor;",
          "32: import hudson.model.FreeStyleProject;",
          "33: import hudson.model.Item;",
          "34: import hudson.model.JobProperty;",
          "35: import hudson.model.JobPropertyDescriptor;",
          "36: import hudson.security.GlobalMatrixAuthorizationStrategy;",
          "37: import hudson.util.Secret;",
          "38: import jenkins.model.Jenkins;",
          "39: import static org.hamcrest.Matchers.containsString;",
          "40: import static org.hamcrest.Matchers.not;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import hudson.cli.GetJobCommand;",
          "37: import hudson.model.User;",
          "40: import java.io.ByteArrayOutputStream;",
          "41: import java.io.PrintStream;",
          "42: import java.util.Collections;",
          "43: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:             assertThat(xmlAdmin, containsString(\"<secret>\" + sEnc + \"</secret>\"));",
          "102:             assertThat(xmlAdmin, containsString(\"<displayName>\" + p.getDisplayName() + \"</displayName>\"));",
          "103:             assertThat(xmlAdmin, containsString(\"<description>\" + p.getDescription() + \"</description>\"));",
          "104:             wc.login(\"dev\");",
          "105:             configure = wc.getPage(p, \"configure\");",
          "106:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(sEnc)));",
          "107:             configXml = wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");",
          "108:             String xmlDev = configXml.getWebResponse().getContentAsString();",
          "109:             assertThat(xmlDev, not(containsString(sEnc)));",
          "111:         } finally {",
          "112:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
          "113:         }",
          "",
          "[Removed Lines]",
          "110:             assertEquals(xmlAdmin.replace(sEnc, \"(some secret)\"), xmlDev);",
          "",
          "[Added Lines]",
          "111:             GetJobCommand getJobCommand = new GetJobCommand();",
          "112:             getJobCommand.setTransportAuth(User.get(\"admin\").impersonate());",
          "113:             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "114:             getJobCommand.main(Collections.singletonList(p.getFullName()), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "115:             assertEquals(xmlAdmin, baos.toString(configXml.getWebResponse().getContentCharset()));",
          "122:             assertEquals(xmlAdmin.replace(sEnc, \"********\"), xmlDev);",
          "123:             getJobCommand = new GetJobCommand();",
          "124:             getJobCommand.setTransportAuth(User.get(\"dev\").impersonate());",
          "125:             baos = new ByteArrayOutputStream();",
          "126:             getJobCommand.main(Collections.singletonList(p.getFullName()), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "127:             assertEquals(xmlDev, baos.toString(configXml.getWebResponse().getContentCharset()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6aa166246d1734f4798a9e31f78842f4c85c28b",
      "candidate_info": {
        "commit_hash": "e6aa166246d1734f4798a9e31f78842f4c85c28b",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/e6aa166246d1734f4798a9e31f78842f4c85c28b",
        "files": [
          "core/src/main/java/hudson/model/Item.java",
          "core/src/main/java/hudson/util/HistoricalSecrets.java",
          "core/src/main/java/hudson/util/Secret.java",
          "core/src/main/java/hudson/util/SecretRewriter.java",
          "core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
          "core/src/test/groovy/hudson/util/SecretRewriterTest.groovy",
          "core/src/test/groovy/hudson/util/SecretTest.groovy",
          "test/src/test/java/hudson/util/SecretCompatTest.java",
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "test/src/test/java/lib/form/PasswordTest.java",
          "test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/config.xml",
          "test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/jobs/OldSecret/config.xml",
          "test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/hudson.util.Secret",
          "test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key"
        ],
        "message": "Merge pull request #105 from jenkinsci-cert/SECURITY-304-t3\n\n[SECURITY-304] Encrypt new secrets with CBC and random IV instead of ECB",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Item.java||core/src/main/java/hudson/model/Item.java",
          "core/src/main/java/hudson/util/HistoricalSecrets.java||core/src/main/java/hudson/util/HistoricalSecrets.java",
          "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
          "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java",
          "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
          "core/src/test/groovy/hudson/util/SecretRewriterTest.groovy||core/src/test/groovy/hudson/util/SecretRewriterTest.groovy",
          "core/src/test/groovy/hudson/util/SecretTest.groovy||core/src/test/groovy/hudson/util/SecretTest.groovy",
          "test/src/test/java/hudson/util/SecretCompatTest.java||test/src/test/java/hudson/util/SecretCompatTest.java",
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java",
          "test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key||test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Item.java||core/src/main/java/hudson/model/Item.java": [
          "File: core/src/main/java/hudson/model/Item.java -> core/src/main/java/hudson/model/Item.java"
        ],
        "core/src/main/java/hudson/util/HistoricalSecrets.java||core/src/main/java/hudson/util/HistoricalSecrets.java": [
          "File: core/src/main/java/hudson/util/HistoricalSecrets.java -> core/src/main/java/hudson/util/HistoricalSecrets.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.util;",
          "27: import com.trilead.ssh2.crypto.Base64;",
          "28: import hudson.Util;",
          "29: import jenkins.model.Jenkins;",
          "30: import jenkins.security.CryptoConfidentialKey;",
          "31: import org.kohsuke.accmod.Restricted;",
          "32: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "34: import javax.crypto.Cipher;",
          "35: import javax.crypto.SecretKey;",
          "36: import java.io.IOException;",
          "37: import java.security.GeneralSecurityException;",
          "39: import static java.nio.charset.StandardCharsets.UTF_8;",
          "44: @Restricted(NoExternalUse.class)",
          "45: public class HistoricalSecrets {",
          "48:         byte[] in = Base64.decode(data.toCharArray());",
          "49:         Secret s = tryDecrypt(key.decrypt(), in);",
          "50:         if (s!=null)    return s;",
          "53:         Cipher cipher = Secret.getCipher(\"AES\");",
          "54:         cipher.init(Cipher.DECRYPT_MODE, getLegacyKey());",
          "55:         return tryDecrypt(cipher, in);",
          "56:     }",
          "59:         try {",
          "60:             String plainText = new String(cipher.doFinal(in), UTF_8);",
          "61:             if(plainText.endsWith(MAGIC))",
          "62:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
          "63:             return null;",
          "64:         } catch (GeneralSecurityException e) {",
          "65:             return null; // if the key doesn't match with the bytes, it can result in BadPaddingException",
          "66:         }",
          "67:     }",
          "76:     @Deprecated",
          "78:         String secret = Secret.SECRET;",
          "79:         if(secret==null)    return Jenkins.getInstance().getSecretKeyAsAES128();",
          "80:         return Util.toAes128Key(secret);",
          "81:     }",
          "83:     private static final String MAGIC = \"::::MAGIC::::\";",
          "84: }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
          "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import com.thoughtworks.xstream.io.HierarchicalStreamReader;",
          "30: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;",
          "31: import com.trilead.ssh2.crypto.Base64;",
          "32: import jenkins.model.Jenkins;",
          "33: import hudson.Util;",
          "34: import jenkins.security.CryptoConfidentialKey;",
          "35: import org.kohsuke.stapler.Stapler;",
          "38: import javax.crypto.Cipher;",
          "39: import java.io.Serializable;",
          "40: import java.io.UnsupportedEncodingException;",
          "",
          "[Removed Lines]",
          "37: import javax.crypto.SecretKey;",
          "",
          "[Added Lines]",
          "33: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import org.kohsuke.accmod.Restricted;",
          "45: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import static java.nio.charset.StandardCharsets.UTF_8;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: public final class Secret implements Serializable {",
          "64:     private final String value;",
          "67:         this.value = value;",
          "68:     }",
          "",
          "[Removed Lines]",
          "66:     private Secret(String value) {",
          "",
          "[Added Lines]",
          "64:     private static final byte PAYLOAD_V1 = 1;",
          "69:     private byte[] iv;",
          "72:         this.value = value;",
          "73:     }",
          "77:         this.iv = iv;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         return value.hashCode();",
          "101:     }",
          "",
          "[Removed Lines]",
          "110:     @Deprecated",
          "112:         String secret = SECRET;",
          "113:         if(secret==null)    return Jenkins.getInstance().getSecretKeyAsAES128();",
          "114:         return Util.toAes128Key(secret);",
          "115:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:     public String getEncryptedValue() {",
          "123:         try {",
          "127:         } catch (GeneralSecurityException e) {",
          "128:             throw new Error(e); // impossible",
          "131:         }",
          "132:     }",
          "139:     @Restricted(NoExternalUse.class)",
          "146:     public static Secret decrypt(String data) {",
          "174:         }",
          "175:     }",
          "",
          "[Removed Lines]",
          "124:             Cipher cipher = KEY.encrypt();",
          "126:             return new String(Base64.encode(cipher.doFinal((value+MAGIC).getBytes(\"UTF-8\"))));",
          "129:         } catch (UnsupportedEncodingException e) {",
          "130:             throw new Error(e); // impossible",
          "140:     public static final Pattern ENCRYPTED_VALUE_PATTERN = Pattern.compile(\"[A-Za-z0-9+/]+={0,2}\");",
          "147:         if(data==null)      return null;",
          "148:         try {",
          "149:             byte[] in = Base64.decode(data.toCharArray());",
          "150:             Secret s = tryDecrypt(KEY.decrypt(), in);",
          "151:             if (s!=null)    return s;",
          "154:             Cipher cipher = getCipher(\"AES\");",
          "155:             cipher.init(Cipher.DECRYPT_MODE, getLegacyKey());",
          "156:             return tryDecrypt(cipher, in);",
          "157:         } catch (GeneralSecurityException e) {",
          "158:             return null;",
          "159:         } catch (UnsupportedEncodingException e) {",
          "160:             throw new Error(e); // impossible",
          "161:         } catch (IOException e) {",
          "162:             return null;",
          "163:         }",
          "164:     }",
          "167:         try {",
          "168:             String plainText = new String(cipher.doFinal(in), \"UTF-8\");",
          "169:             if(plainText.endsWith(MAGIC))",
          "170:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
          "171:             return null;",
          "172:         } catch (GeneralSecurityException e) {",
          "173:             return null; // if the key doesn't match with the bytes, it can result in BadPaddingException",
          "",
          "[Added Lines]",
          "120:             synchronized (this) {",
          "121:                 if (iv == null) { //if we were created from plain text or other reason without iv",
          "122:                     iv = KEY.newIv();",
          "123:                 }",
          "124:             }",
          "125:             Cipher cipher = KEY.encrypt(iv);",
          "126:             byte[] encrypted = cipher.doFinal(this.value.getBytes(UTF_8));",
          "127:             byte[] payload = new byte[1 + 8 + iv.length + encrypted.length];",
          "128:             int pos = 0;",
          "130:             payload[pos++] = PAYLOAD_V1;",
          "131:             payload[pos++] = (byte)(iv.length >> 24);",
          "132:             payload[pos++] = (byte)(iv.length >> 16);",
          "133:             payload[pos++] = (byte)(iv.length >> 8);",
          "134:             payload[pos++] = (byte)(iv.length);",
          "135:             payload[pos++] = (byte)(encrypted.length >> 24);",
          "136:             payload[pos++] = (byte)(encrypted.length >> 16);",
          "137:             payload[pos++] = (byte)(encrypted.length >> 8);",
          "138:             payload[pos++] = (byte)(encrypted.length);",
          "139:             System.arraycopy(iv, 0, payload, pos, iv.length);",
          "140:             pos+=iv.length;",
          "141:             System.arraycopy(encrypted, 0, payload, pos, encrypted.length);",
          "142:             return \"{\"+new String(Base64.encode(payload))+\"}\";",
          "155:     public static final Pattern ENCRYPTED_VALUE_PATTERN = Pattern.compile(\"\\\\{?[A-Za-z0-9+/]+={0,2}}?\");",
          "162:         if (data == null) return null;",
          "164:         if (data.startsWith(\"{\") && data.endsWith(\"}\")) { //likely CBC encrypted/containing metadata but could be plain text",
          "165:             byte[] payload;",
          "166:             try {",
          "167:                 payload = Base64.decode(data.substring(1, data.length()-1).toCharArray());",
          "168:             } catch (IOException e) {",
          "169:                 return null;",
          "170:             }",
          "171:             switch (payload[0]) {",
          "172:                 case PAYLOAD_V1:",
          "174:                     int ivLength = ((payload[1] & 0xff) << 24)",
          "175:                             | ((payload[2] & 0xff) << 16)",
          "176:                             | ((payload[3] & 0xff) << 8)",
          "177:                             | (payload[4] & 0xff);",
          "178:                     int dataLength = ((payload[5] & 0xff) << 24)",
          "179:                             | ((payload[6] & 0xff) << 16)",
          "180:                             | ((payload[7] & 0xff) << 8)",
          "181:                             | (payload[8] & 0xff);",
          "182:                     if (payload.length != 1 + 8 + ivLength + dataLength) {",
          "184:                         return null;",
          "185:                     }",
          "186:                     byte[] iv = Arrays.copyOfRange(payload, 9, 9 + ivLength);",
          "187:                     byte[] code = Arrays.copyOfRange(payload, 9+ivLength, payload.length);",
          "188:                     String text;",
          "189:                     try {",
          "190:                         text = new String(KEY.decrypt(iv).doFinal(code), UTF_8);",
          "191:                     } catch (GeneralSecurityException e) {",
          "193:                         return null;",
          "194:                     }",
          "195:                     return new Secret(text, iv);",
          "196:                 default:",
          "197:                     return null;",
          "198:             }",
          "199:         } else {",
          "200:             try {",
          "201:                 return HistoricalSecrets.decrypt(data, KEY);",
          "202:             } catch (GeneralSecurityException e) {",
          "203:                 return null;",
          "204:             } catch (UnsupportedEncodingException e) {",
          "205:                 throw new Error(e); // impossible",
          "206:             } catch (IOException e) {",
          "207:                 return null;",
          "208:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:         }",
          "229:     }",
          "",
          "[Removed Lines]",
          "231:     private static final String MAGIC = \"::::MAGIC::::\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "247:     private static final CryptoConfidentialKey KEY = new CryptoConfidentialKey(Secret.class.getName());",
          "249:     private static final long serialVersionUID = 1L;",
          "251:     static {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:     @Restricted(NoExternalUse.class)",
          "287:         KEY.resetForTest();",
          "288:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java": [
          "File: core/src/main/java/hudson/util/SecretRewriter.java -> core/src/main/java/hudson/util/SecretRewriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     public SecretRewriter() throws GeneralSecurityException {",
          "42:         cipher = Secret.getCipher(\"AES\");",
          "44:     }",
          "",
          "[Removed Lines]",
          "43:         key = Secret.getLegacyKey();",
          "",
          "[Added Lines]",
          "43:         key = HistoricalSecrets.getLegacyKey();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:             return s;   // not a valid base64",
          "63:         }",
          "64:         cipher.init(Cipher.DECRYPT_MODE, key);",
          "66:         if(sec!=null) // matched",
          "67:             return sec.getEncryptedValue(); // replace by the new encrypted value",
          "68:         else // not encrypted with the legacy key. leave it unmodified",
          "",
          "[Removed Lines]",
          "65:         Secret sec = Secret.tryDecrypt(cipher, in);",
          "",
          "[Added Lines]",
          "65:         Secret sec = HistoricalSecrets.tryDecrypt(cipher, in);",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java": [
          "File: core/src/main/java/jenkins/security/CryptoConfidentialKey.java -> core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.security;",
          "3: import hudson.util.Secret;",
          "5: import javax.crypto.Cipher;",
          "6: import javax.crypto.SecretKey;",
          "7: import javax.crypto.spec.SecretKeySpec;",
          "8: import java.io.IOException;",
          "9: import java.security.GeneralSecurityException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import hudson.Main;",
          "5: import jenkins.model.Jenkins;",
          "6: import org.kohsuke.accmod.Restricted;",
          "7: import org.kohsuke.accmod.restrictions.DoNotUse;",
          "8: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "12: import javax.crypto.spec.IvParameterSpec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: public class CryptoConfidentialKey extends ConfidentialKey {",
          "18:     private volatile SecretKey secret;",
          "19:     public CryptoConfidentialKey(String id) {",
          "20:         super(id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "25:     public static final int DEFAULT_IV_LENGTH = 16;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:                             store(payload);",
          "36:                         }",
          "39:                     }",
          "40:                 }",
          "41:             }",
          "",
          "[Removed Lines]",
          "38:                         secret = new SecretKeySpec(payload,0,128/8, ALGORITHM);",
          "",
          "[Added Lines]",
          "47:                         secret = new SecretKeySpec(payload,0,128/8, KEY_ALGORITHM);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "51:     public Cipher encrypt() {",
          "52:         try {",
          "54:             cipher.init(Cipher.ENCRYPT_MODE, getKey());",
          "55:             return cipher;",
          "56:         } catch (GeneralSecurityException e) {",
          "",
          "[Removed Lines]",
          "53:             Cipher cipher = Secret.getCipher(ALGORITHM);",
          "",
          "[Added Lines]",
          "61:     @Deprecated",
          "64:             Cipher cipher = Secret.getCipher(KEY_ALGORITHM);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "58:         }",
          "59:     }",
          "64:     public Cipher decrypt() {",
          "65:         try {",
          "67:             cipher.init(Cipher.DECRYPT_MODE, getKey());",
          "68:             return cipher;",
          "69:         } catch (GeneralSecurityException e) {",
          "",
          "[Removed Lines]",
          "66:             Cipher cipher = Secret.getCipher(ALGORITHM);",
          "",
          "[Added Lines]",
          "77:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "78:     public Cipher encrypt(byte[] iv) {",
          "79:         try {",
          "80:             Cipher cipher = Secret.getCipher(ALGORITHM);",
          "81:             cipher.init(Cipher.ENCRYPT_MODE, getKey(), new IvParameterSpec(iv));",
          "82:             return cipher;",
          "83:         } catch (GeneralSecurityException e) {",
          "84:             throw new AssertionError(e);",
          "85:         }",
          "86:     }",
          "93:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "94:     public Cipher decrypt(byte[] iv) {",
          "95:         try {",
          "96:             Cipher cipher = Secret.getCipher(ALGORITHM);",
          "97:             cipher.init(Cipher.DECRYPT_MODE, getKey(), new IvParameterSpec(iv));",
          "98:             return cipher;",
          "99:         } catch (GeneralSecurityException e) {",
          "100:             throw new AssertionError(e);",
          "101:         }",
          "102:     }",
          "110:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "111:     public byte[] newIv(int length) {",
          "112:         return ConfidentialStore.get().randomBytes(length);",
          "113:     }",
          "121:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "122:     public byte[] newIv() {",
          "123:         return newIv(DEFAULT_IV_LENGTH);",
          "124:     }",
          "130:     @Deprecated",
          "133:             Cipher cipher = Secret.getCipher(KEY_ALGORITHM);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "72:     }",
          "76: }",
          "",
          "[Removed Lines]",
          "75:     private static final String ALGORITHM = \"AES\";",
          "",
          "[Added Lines]",
          "142:     private static final String KEY_ALGORITHM = \"AES\";",
          "143:     private static final String ALGORITHM = \"AES/CBC/PKCS5Padding\";",
          "148:     @Restricted(NoExternalUse.class)",
          "149:     public void resetForTest() {",
          "150:         if (Main.isUnitTest) {",
          "151:             this.secret = null;",
          "152:         } else {",
          "153:             throw new IllegalStateException(\"Only for testing\");",
          "154:         }",
          "155:     }",
          "",
          "---------------"
        ],
        "core/src/test/groovy/hudson/util/SecretRewriterTest.groovy||core/src/test/groovy/hudson/util/SecretRewriterTest.groovy": [
          "File: core/src/test/groovy/hudson/util/SecretRewriterTest.groovy -> core/src/test/groovy/hudson/util/SecretRewriterTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     @Rule public TemporaryFolder tmp = new TemporaryFolder()",
          "26:     @Test",
          "27:     void singleFileRewrite() {",
          "28:         def o = encryptOld('foobar') // old",
          "29:         def n = encryptNew('foobar') // new",
          "30:         roundtrip \"<foo>${o}</foo>\",",
          "33:         roundtrip \"<foo>${o}</foo><foo>${o}</foo>\",",
          "36:         roundtrip \"<foo>${n}</foo>\",",
          "39:         roundtrip \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \",",
          "48:     }",
          "51:         def sr = new SecretRewriter(null);",
          "52:         def f = File.createTempFile(\"test\", \"xml\", tmp.root)",
          "53:         f.text = before",
          "54:         sr.rewrite(f,null)",
          "56:     }",
          "58:     String encryptOld(str) {",
          "59:         def cipher = Secret.getCipher(\"AES\");",
          "62:     }",
          "64:     String encryptNew(str) {",
          "",
          "[Removed Lines]",
          "31:                   \"<foo>${n}</foo>\"",
          "34:                   \"<foo>${n}</foo><foo>${n}</foo>\"",
          "37:                   \"<foo>${n}</foo>\"",
          "40:                   \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \"",
          "43:         roundtrip \"<foo>$o\", \"<foo>$o\"",
          "44:         roundtrip \"$o</foo>\", \"$o</foo>\"",
          "47:         roundtrip \"<abc>\\n<foo>$o</foo>\\n</abc>\", \"<abc>\\n<foo>$n</foo>\\n</abc>\"",
          "50:     void roundtrip(String before, String after) {",
          "55:         assert after.replaceAll(System.getProperty(\"line.separator\"), \"\\n\").trim()==f.text.replaceAll(System.getProperty(\"line.separator\"), \"\\n\").trim()",
          "60:         cipher.init(Cipher.ENCRYPT_MODE, Secret.legacyKey);",
          "61:         return new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
          "",
          "[Added Lines]",
          "26:     def FOO_PATTERN = /<foo>\\{[A-Za-z0-9+\\/]+={0,2}}<\\/foo>/",
          "27:     def MSG_PATTERN = /<msg>\\{[A-Za-z0-9+\\/]+={0,2}}<\\/msg>/",
          "28:     def FOO_PATTERN2 = /(<foo>\\{[A-Za-z0-9+\\/]+={0,2}}<\\/foo>){2}/",
          "29:     def ABC_FOO_PATTERN = /<abc>\\s<foo>\\{[A-Za-z0-9+\\/]+={0,2}}<\\/foo>\\s<\\/abc>/",
          "36:                 {assert it ==~ FOO_PATTERN}",
          "40:                 {assert it ==~ FOO_PATTERN2}",
          "43:                 {assert it == \"<foo>${n}</foo>\"}",
          "46:                 {assert it == \"<foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>\"}",
          "49:         roundtrip \"<foo>$o\", {assert it == \"<foo>$o\"}",
          "50:         roundtrip \"$o</foo>\", {assert it == \"$o</foo>\"}",
          "53:         roundtrip \"<abc>\\n<foo>$o</foo>\\n</abc>\", {assert it ==~ ABC_FOO_PATTERN}",
          "56:     void roundtrip(String before, Closure check) {",
          "61:         check(f.text.replaceAll(System.getProperty(\"line.separator\"), \"\\n\").trim())",
          "67:         cipher.init(Cipher.ENCRYPT_MODE, HistoricalSecrets.legacyKey);",
          "68:         return new String(Base64.encode(cipher.doFinal((str + HistoricalSecrets.MAGIC).getBytes(\"UTF-8\"))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         assert 6==sw.rewriteRecursive(t, st)",
          "101:         dirs.each { p->",
          "103:         }",
          "107:     }",
          "109: }",
          "",
          "[Removed Lines]",
          "102:             assert new File(t,\"$p/foo.xml\").text.trim()==answer",
          "106:         assert new File(t2,\"foo.xml\").text.trim()==answer.trim();",
          "",
          "[Added Lines]",
          "109:             assert new File(t,\"$p/foo.xml\").text.trim() ==~ MSG_PATTERN",
          "113:         assert new File(t2,\"foo.xml\").text.trim() ==~ MSG_PATTERN",
          "",
          "---------------"
        ],
        "core/src/test/groovy/hudson/util/SecretTest.groovy||core/src/test/groovy/hudson/util/SecretTest.groovy": [
          "File: core/src/test/groovy/hudson/util/SecretTest.groovy -> core/src/test/groovy/hudson/util/SecretTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.junit.Test",
          "33: import java.util.Random;",
          "",
          "[Removed Lines]",
          "34: import javax.crypto.Cipher;",
          "",
          "[Added Lines]",
          "34: import javax.crypto.Cipher",
          "35: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     @Rule",
          "44:     public MockSecretRule mockSecretRule = new MockSecretRule()",
          "46:     @Test",
          "47:     void testEncrypt() {",
          "48:         def secret = Secret.fromString(\"abc\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     static final Pattern ENCRYPTED_VALUE_PATTERN = Pattern.compile(\"\\\\{?[A-Za-z0-9+/]+={0,2}}?\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         assert secret==Secret.fromString(secret.encryptedValue);",
          "57:     }",
          "59:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         assert secret.encryptedValue == secret.encryptedValue",
          "64:         assert secret.encryptedValue != Secret.fromString(secret.plainText).encryptedValue",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:             String plaintext = RandomStringUtils.random(new Random().nextInt(i));",
          "63:             String ciphertext = Secret.fromString(plaintext).getEncryptedValue();",
          "66:         }",
          "68:     }",
          "70:     @Test",
          "",
          "[Removed Lines]",
          "65:             assert Secret.ENCRYPTED_VALUE_PATTERN.matcher(ciphertext).matches();",
          "67:         assert !Secret.ENCRYPTED_VALUE_PATTERN.matcher(\"hello world\").matches();",
          "",
          "[Added Lines]",
          "73:             assert ENCRYPTED_VALUE_PATTERN.matcher(ciphertext).matches();",
          "76:         assert !ENCRYPTED_VALUE_PATTERN.matcher(\"hello world\").matches();",
          "78:         assert !ENCRYPTED_VALUE_PATTERN.matcher(\"helloworld!\").matches();",
          "80:         assert ENCRYPTED_VALUE_PATTERN.matcher(\"abcdefghijklmnopqr0123456789\").matches();",
          "82:         assert ENCRYPTED_VALUE_PATTERN.matcher(\"abcdefghijklmnopqr012345678==\").matches();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:         def s = Secret.fromString(\"Mr.Jenkins\");",
          "78:         def xml = Jenkins.XSTREAM.toXML(s);",
          "79:         assert !xml.contains(s.plainText)",
          "82:         def o = Jenkins.XSTREAM.fromXML(xml);",
          "83:         assert o==s : xml;",
          "",
          "[Removed Lines]",
          "80:         assert xml.contains(s.encryptedValue)",
          "",
          "[Added Lines]",
          "95:         assert xml ==~ /<hudson\\.util\\.Secret>\\{[A-Za-z0-9+\\/]+={0,2}}<\\/hudson\\.util\\.Secret>/",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "105:     @Test",
          "106:     void migrationFromLegacyKeyToConfidentialStore() {",
          "108:         [\"Hello world\",\"\",\"\\u0000unprintable\"].each { str ->",
          "109:             def cipher = Secret.getCipher(\"AES\");",
          "110:             cipher.init(Cipher.ENCRYPT_MODE, legacy);",
          "112:             def s = Secret.fromString(old)",
          "113:             assert s.plainText==str : \"secret by the old key should decrypt\"",
          "114:             assert s.encryptedValue!=old : \"but when encrypting, ConfidentialKey should be in use\"",
          "",
          "[Removed Lines]",
          "107:         def legacy = Secret.legacyKey",
          "111:             def old = new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
          "",
          "[Added Lines]",
          "122:         def legacy = HistoricalSecrets.legacyKey",
          "126:             def old = new String(Base64.encode(cipher.doFinal((str + HistoricalSecrets.MAGIC).getBytes(\"UTF-8\"))))",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/util/SecretCompatTest.java||test/src/test/java/hudson/util/SecretCompatTest.java": [
          "File: test/src/test/java/hudson/util/SecretCompatTest.java -> test/src/test/java/hudson/util/SecretCompatTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.util;",
          "27: import hudson.model.FreeStyleProject;",
          "28: import hudson.model.ParameterDefinition;",
          "29: import hudson.model.ParametersDefinitionProperty;",
          "30: import hudson.model.PasswordParameterDefinition;",
          "31: import org.hamcrest.core.Is;",
          "32: import org.junit.After;",
          "33: import org.junit.Before;",
          "34: import org.junit.Rule;",
          "35: import org.junit.Test;",
          "36: import org.jvnet.hudson.test.Issue;",
          "37: import org.jvnet.hudson.test.JenkinsRule;",
          "38: import org.jvnet.hudson.test.recipes.LocalData;",
          "40: import java.io.IOException;",
          "41: import java.util.regex.Pattern;",
          "43: import static org.hamcrest.core.Is.isA;",
          "44: import static org.hamcrest.core.IsNot.not;",
          "45: import static org.hamcrest.core.StringContains.containsString;",
          "46: import static org.junit.Assert.*;",
          "51: public class SecretCompatTest {",
          "53:     @Rule",
          "54:     public JenkinsRule j = new JenkinsRule() {",
          "55:         @Override",
          "56:         public void before() throws Throwable {",
          "57:             Secret.resetKeyForTest();  //As early as possible",
          "58:             super.before();",
          "59:         }",
          "60:     };",
          "62:     @After",
          "63:     public void after() {",
          "64:         Secret.resetKeyForTest();",
          "65:     }",
          "68:     @Test",
          "69:     @Issue(\"SECURITY-304\")",
          "70:     public void encryptedValueStaysTheSameAfterRoundtrip() throws Exception {",
          "71:         FreeStyleProject project = j.createFreeStyleProject();",
          "72:         project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition(\"p\", \"s3cr37\", \"Keep this a secret\")));",
          "73:         project = j.configRoundtrip(project);",
          "74:         String round1 = project.getConfigFile().asString();",
          "75:         project = j.configRoundtrip(project);",
          "76:         String round2 = project.getConfigFile().asString();",
          "77:         assertEquals(round1, round2);",
          "81:         project = j.jenkins.getItemByFullName(project.getFullName(), FreeStyleProject.class);",
          "82:         project.removeProperty(ParametersDefinitionProperty.class);",
          "83:         project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition(\"p\", \"s3cr37\", \"Keep this a secret\")));",
          "84:         project = j.configRoundtrip(project);",
          "85:         String round3 = project.getConfigFile().asString();",
          "86:         assertNotEquals(round2, round3);",
          "88:         project = j.configRoundtrip(project);",
          "89:         String round4 = project.getConfigFile().asString();",
          "90:         assertEquals(round3, round4);",
          "91:     }",
          "93:     @Test",
          "94:     @Issue(\"SECURITY-304\")",
          "95:     @LocalData",
          "96:     public void canReadPreSec304Secrets() throws Exception {",
          "97:         FreeStyleProject project = j.jenkins.getItemByFullName(\"OldSecret\", FreeStyleProject.class);",
          "98:         String oldxml = project.getConfigFile().asString();",
          "100:         assertThat(oldxml, containsString(\"<defaultValue>z/Dd3qrHdQ6/C5lR7uEafM/jD3nQDrGprw3XsfZ/0vo=</defaultValue>\"));",
          "101:         ParametersDefinitionProperty property = project.getProperty(ParametersDefinitionProperty.class);",
          "102:         ParameterDefinition definition = property.getParameterDefinitions().get(0);",
          "103:         assertTrue(definition instanceof PasswordParameterDefinition);",
          "104:         Secret secret = ((PasswordParameterDefinition) definition).getDefaultValueAsSecret();",
          "105:         assertEquals(\"theSecret\", secret.getPlainText());",
          "109:         project = j.configRoundtrip(project);",
          "110:         String newXml = project.getConfigFile().asString();",
          "111:         assertNotEquals(oldxml, newXml); //This could have changed because Jenkins has moved on, so not really a good check",
          "112:         assertThat(newXml, not(containsString(\"<defaultValue>z/Dd3qrHdQ6/C5lR7uEafM/jD3nQDrGprw3XsfZ/0vo=</defaultValue>\")));",
          "113:         Pattern p = Pattern.compile(\"<defaultValue>\\\\{[A-Za-z0-9+/]+={0,2}}</defaultValue>\");",
          "114:         assertTrue(p.matcher(newXml).find());",
          "117:         project = j.configRoundtrip(project);",
          "118:         String round2 = project.getConfigFile().asString();",
          "119:         assertEquals(newXml, round2);",
          "120:     }",
          "121: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java": [
          "File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java -> test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.util.Secret;",
          "12: import hudson.util.SecretHelper;",
          "13: import org.apache.commons.io.FileUtils;",
          "14: import org.jvnet.hudson.test.HudsonTestCase;",
          "15: import org.jvnet.hudson.test.recipes.Recipe.Runner;",
          "16: import org.xml.sax.SAXException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import org.hamcrest.CoreMatchers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: import java.io.File;",
          "21: import java.io.IOException;",
          "22: import java.lang.annotation.Annotation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.regex.Pattern;",
          "26: import static org.junit.Assert.assertThat;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:     @Inject",
          "29:     RekeySecretAdminMonitor monitor;",
          "31:     @Override",
          "32:     protected void setUp() throws Exception {",
          "33:         SecretHelper.set(TEST_KEY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     final String plain_regex_match = \".*\\\\{[A-Za-z0-9+/]+={0,2}}.*\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     private void verifyRewrite(File dir) throws Exception {",
          "78:         File xml = new File(dir, \"foo.xml\");",
          "81:     }",
          "",
          "[Removed Lines]",
          "79:         assertEquals(\"<foo>\" + encryptNew(TEST_KEY) + \"</foo>\".trim(),",
          "80:                 FileUtils.readFileToString(xml).trim());",
          "",
          "[Added Lines]",
          "85:         Pattern pattern = Pattern.compile(\"<foo>\"+plain_regex_match+\"</foo>\");",
          "86:         assertTrue(pattern.matcher(FileUtils.readFileToString(xml).trim()).matches());",
          "",
          "---------------"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import java.util.Arrays;",
          "44: import java.util.Collections;",
          "45: import java.util.Locale;",
          "46: import jenkins.model.Jenkins;",
          "47: import org.acegisecurity.Authentication;",
          "48: import static org.hamcrest.Matchers.containsString;",
          "49: import static org.hamcrest.Matchers.not;",
          "50: import static org.junit.Assert.assertThat;",
          "51: import org.jvnet.hudson.test.HudsonTestCase;",
          "52: import org.jvnet.hudson.test.Issue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import java.util.regex.Pattern;",
          "52: import static org.hamcrest.core.Is.is;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         }",
          "79:     }",
          "82:     public void testExposedCiphertext() throws Exception {",
          "83:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
          "84:         try {",
          "85:             jenkins.setSecurityRealm(createDummySecurityRealm());",
          "87:             GlobalMatrixAuthorizationStrategy pmas = new GlobalMatrixAuthorizationStrategy();",
          "",
          "[Removed Lines]",
          "81:     @Issue(\"SECURITY-266\")",
          "",
          "[Added Lines]",
          "85:     @Issue(\"SECURITY-266, SECURITY-304\")",
          "91:             final String xml_regex_match = \"\\\\{[A-Za-z0-9+/]+={0,2}}\";",
          "92:             final Pattern xml_regex_pattern = Pattern.compile(xml_regex_match);",
          "93:             final String staticTest = \"\\n\\nvalue=\\\"{AQAAABAAAAAgXhXgopokysZkduhl+v1gm0UhUBBbjKDVpKz7bGk3mIO53cNTRdlu7LC4jZYEc+vF}\\\"\\n\";",
          "95:             assertThat(xml_regex_pattern.matcher(staticTest).find(), is(true));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:             pmas.add(Item.CREATE, \"dev\"); // so we can show CopyJobCommand would barf; more realistic would be to grant it only in a subfolder",
          "94:             jenkins.setAuthorizationStrategy(pmas);",
          "95:             Secret s = Secret.fromString(\"s3cr3t\");",
          "97:             FreeStyleProject p = createFreeStyleProject(\"p\");",
          "98:             p.setDisplayName(\"Unicode here \u2190\");",
          "99:             p.setDescription(\"This+looks+like+Base64+but+is+not+a+secret\");",
          "",
          "[Removed Lines]",
          "96:             String sEnc = s.getEncryptedValue();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:             wc.login(\"admin\");",
          "104:             HtmlPage configure = wc.getPage(p, \"configure\");",
          "106:             submit(configure.getFormByName(\"config\"));",
          "107:             VulnerableProperty vp = p.getProperty(VulnerableProperty.class);",
          "108:             assertNotNull(vp);",
          "109:             assertEquals(s, vp.secret);",
          "110:             Page configXml = wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");",
          "111:             String xmlAdmin = configXml.getWebResponse().getContentAsString();",
          "113:             assertThat(xmlAdmin, containsString(\"<displayName>\" + p.getDisplayName() + \"</displayName>\"));",
          "114:             assertThat(xmlAdmin, containsString(\"<description>\" + p.getDescription() + \"</description>\"));",
          "",
          "[Removed Lines]",
          "105:             assertThat(configure.getWebResponse().getContentAsString(), containsString(sEnc));",
          "112:             assertThat(xmlAdmin, containsString(\"<secret>\" + sEnc + \"</secret>\"));",
          "",
          "[Added Lines]",
          "117:             assertThat(xml_regex_pattern.matcher(configure.getWebResponse().getContentAsString()).find(), is(true));",
          "125:             assertThat(Pattern.compile(\"<secret>\" + xml_regex_match + \"</secret>\").matcher(xmlAdmin).find(), is(true));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:             wc.login(\"dev\");",
          "133:             configure = wc.getPage(p, \"configure\");",
          "135:             configXml = wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");",
          "136:             String xmlDev = configXml.getWebResponse().getContentAsString();",
          "139:             getJobCommand = new GetJobCommand();",
          "140:             Authentication devAuth = User.get(\"dev\").impersonate();",
          "141:             getJobCommand.setTransportAuth(devAuth);",
          "",
          "[Removed Lines]",
          "134:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(sEnc)));",
          "137:             assertThat(xmlDev, not(containsString(sEnc)));",
          "138:             assertEquals(xmlAdmin.replace(sEnc, \"********\"), xmlDev);",
          "",
          "[Added Lines]",
          "147:             assertThat(xml_regex_pattern.matcher(configure.getWebResponse().getContentAsString()).find(), is(false));",
          "150:             assertThat(xml_regex_pattern.matcher(xmlDev).find(), is(false));",
          "151:             assertEquals(xmlAdmin.replaceAll(xml_regex_match, \"********\"), xmlDev);",
          "",
          "---------------"
        ],
        "test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key||test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key": [
          "File: test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key -> test/src/test/resources/hudson/util/SecretCompatTest/canReadPreSec304Secrets/secrets/master.key",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 4311ab5e95e3da7b9b1360b52cac6f0f666db7b48f9f701296cc07c8f00612b451f1874e584d49560810619e8a6ff6b19f8f58ae1305c515fc62a7b60ea3a69e6058cad16b2c8df317952b749fdaaecab013431da55bb4ea4b8eee754fa043261b51a99a2b537fd57f867cdcb1e209f3bba735a8672dbfc3f10b0e2209a81683",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a6c679c9e74f70f8e33cf97fc90bac5ffbd0733",
      "candidate_info": {
        "commit_hash": "3a6c679c9e74f70f8e33cf97fc90bac5ffbd0733",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/3a6c679c9e74f70f8e33cf97fc90bac5ffbd0733",
        "files": [
          "core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
          "test/src/test/java/lib/form/PasswordTest.java"
        ],
        "message": "Updated some TODO comments.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java": [
          "File: core/src/main/java/jenkins/security/CryptoConfidentialKey.java -> core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: public class CryptoConfidentialKey extends ConfidentialKey {",
          "25:     public static final int DEFAULT_IV_LENGTH = 16;",
          "27:     private volatile SecretKey secret;",
          "",
          "[Removed Lines]",
          "24:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "",
          "[Added Lines]",
          "24:     @Restricted(NoExternalUse.class) // TODO pending API",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     public Cipher encrypt(byte[] iv) {",
          "79:         try {",
          "80:             Cipher cipher = Secret.getCipher(ALGORITHM);",
          "",
          "[Removed Lines]",
          "77:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "",
          "[Added Lines]",
          "77:     @Restricted(NoExternalUse.class) // TODO pending API",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     public Cipher decrypt(byte[] iv) {",
          "95:         try {",
          "96:             Cipher cipher = Secret.getCipher(ALGORITHM);",
          "",
          "[Removed Lines]",
          "93:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "",
          "[Added Lines]",
          "93:     @Restricted(NoExternalUse.class) // TODO pending ApI",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:     public byte[] newIv(int length) {",
          "112:         return ConfidentialStore.get().randomBytes(length);",
          "113:     }",
          "",
          "[Removed Lines]",
          "110:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "",
          "[Added Lines]",
          "110:     @Restricted(NoExternalUse.class) // TODO pending API",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:     public byte[] newIv() {",
          "123:         return newIv(DEFAULT_IV_LENGTH);",
          "124:     }",
          "",
          "[Removed Lines]",
          "121:     @Restricted(NoExternalUse.class) //TODO remove when in mainline",
          "",
          "[Added Lines]",
          "121:     @Restricted(NoExternalUse.class) // TODO pending API",
          "",
          "---------------"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     @Extension",
          "78:     public static final class DescriptorImpl extends Descriptor<PasswordTest> {}",
          "82:     public void testExposedCiphertext() throws Exception {",
          "83:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
          "84:         try {",
          "",
          "[Removed Lines]",
          "81:     @Issue(\"SECURITY-266, SECURITY-304\")",
          "",
          "[Added Lines]",
          "80:     @Issue({\"SECURITY-266\", \"SECURITY-304\"})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8f6410793b418be3786b38dbe4fddfbb23db4cf",
      "candidate_info": {
        "commit_hash": "e8f6410793b418be3786b38dbe4fddfbb23db4cf",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/e8f6410793b418be3786b38dbe4fddfbb23db4cf",
        "files": [
          "core/src/main/java/hudson/Functions.java",
          "core/src/main/java/hudson/model/AbstractItem.java",
          "core/src/main/java/hudson/util/Secret.java",
          "core/src/test/groovy/hudson/util/SecretTest.groovy",
          "test/src/test/java/lib/form/PasswordTest.java"
        ],
        "message": "[SECURITY-266] Conceal ciphertext from REST config.xml.",
        "before_after_code_files": [
          "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
          "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java",
          "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
          "core/src/test/groovy/hudson/util/SecretTest.groovy||core/src/test/groovy/hudson/util/SecretTest.groovy",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java": [
          "File: core/src/main/java/hudson/Functions.java -> core/src/main/java/hudson/Functions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:             if (req != null) {",
          "1721:                 Item item = req.findAncestorObject(Item.class);",
          "1722:                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {",
          "1724:                 }",
          "1725:             }",
          "1726:             return ((Secret) o).getEncryptedValue();",
          "",
          "[Removed Lines]",
          "1723:                     return \"<some secret>\";",
          "",
          "[Added Lines]",
          "1723:                     return \"(some secret)\";",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java": [
          "File: core/src/main/java/hudson/model/AbstractItem.java -> core/src/main/java/hudson/model/AbstractItem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import hudson.util.AlternativeUiTextProvider.Message;",
          "42: import hudson.util.AtomicFileWriter;",
          "43: import hudson.util.IOUtils;",
          "44: import jenkins.model.DirectlyModifiableTopLevelItemGroup;",
          "45: import jenkins.model.Jenkins;",
          "46: import jenkins.security.NotReallyRoleSensitiveCallable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: import java.util.ListIterator;",
          "61: import java.util.logging.Level;",
          "62: import java.util.logging.Logger;",
          "63: import javax.annotation.Nonnull;",
          "65: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: import java.util.regex.Matcher;",
          "65: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: import javax.xml.transform.stream.StreamSource;",
          "80: import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;",
          "81: import org.kohsuke.stapler.Ancestor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: import org.apache.commons.io.FileUtils;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "594:         Util.deleteRecursive(getRootDir());",
          "595:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:     private static final Pattern SECRET_PATTERN = Pattern.compile(\">(\" + Secret.ENCRYPTED_VALUE_PATTERN + \")<\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "605:             checkPermission(EXTENDED_READ);",
          "606:             rsp.setContentType(\"application/xml\");",
          "608:             return;",
          "609:         }",
          "610:         if (req.getMethod().equals(\"POST\")) {",
          "",
          "[Removed Lines]",
          "607:             IOUtils.copy(getConfigFile().getFile(),rsp.getOutputStream());",
          "",
          "[Added Lines]",
          "612:             XmlFile configFile = getConfigFile();",
          "613:             if (hasPermission(CONFIGURE)) {",
          "614:                 IOUtils.copy(configFile.getFile(), rsp.getOutputStream());",
          "615:             } else {",
          "616:                 String encoding = configFile.sniffEncoding();",
          "617:                 String xml = FileUtils.readFileToString(configFile.getFile(), encoding);",
          "618:                 Matcher matcher = SECRET_PATTERN.matcher(xml);",
          "619:                 StringBuffer cleanXml = new StringBuffer();",
          "620:                 while (matcher.find()) {",
          "621:                     String text = matcher.group(1);",
          "622:                     if (Secret.decrypt(text) != null) {",
          "623:                         matcher.appendReplacement(cleanXml, \">(some secret)<\");",
          "624:                     }",
          "625:                 }",
          "626:                 matcher.appendTail(cleanXml);",
          "627:                 org.apache.commons.io.IOUtils.write(cleanXml.toString(), rsp.getOutputStream(), encoding);",
          "628:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
          "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import java.io.UnsupportedEncodingException;",
          "41: import java.io.IOException;",
          "42: import java.security.GeneralSecurityException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.regex.Pattern;",
          "44: import org.kohsuke.accmod.Restricted;",
          "45: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         }",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     @Restricted(NoExternalUse.class)",
          "138:     public static final Pattern ENCRYPTED_VALUE_PATTERN = Pattern.compile(\"[A-Za-z0-9+/]+={0,2}\");",
          "",
          "---------------"
        ],
        "core/src/test/groovy/hudson/util/SecretTest.groovy||core/src/test/groovy/hudson/util/SecretTest.groovy": [
          "File: core/src/test/groovy/hudson/util/SecretTest.groovy -> core/src/test/groovy/hudson/util/SecretTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import com.trilead.ssh2.crypto.Base64;",
          "27: import jenkins.model.Jenkins",
          "28: import jenkins.security.ConfidentialStoreRule;",
          "29: import org.junit.Rule",
          "30: import org.junit.Test",
          "32: import javax.crypto.Cipher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.commons.lang.RandomStringUtils;",
          "33: import java.util.Random;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         assert secret==Secret.fromString(secret.encryptedValue);",
          "55:     }",
          "57:     @Test",
          "58:     void testDecrypt() {",
          "59:         assert \"abc\"==Secret.toString(Secret.fromString(\"abc\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     @Test",
          "60:     void testEncryptedValuePattern() {",
          "61:         for (int i = 1; i < 100; i++) {",
          "62:             String plaintext = RandomStringUtils.random(new Random().nextInt(i));",
          "63:             String ciphertext = Secret.fromString(plaintext).getEncryptedValue();",
          "65:             assert Secret.ENCRYPTED_VALUE_PATTERN.matcher(ciphertext).matches();",
          "66:         }",
          "67:         assert !Secret.ENCRYPTED_VALUE_PATTERN.matcher(\"hello world\").matches();",
          "68:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package lib.form;",
          "26: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "28: import hudson.Extension;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import com.gargoylesoftware.htmlunit.Page;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:             Item.EXTENDED_READ.setEnabled(true);",
          "82:             pmas.add(Item.EXTENDED_READ, \"dev\");",
          "83:             jenkins.setAuthorizationStrategy(pmas);",
          "85:             FreeStyleProject p = createFreeStyleProject(\"p\");",
          "87:             WebClient wc = createWebClient();",
          "88:             wc.login(\"admin\");",
          "89:             HtmlPage configure = wc.getPage(p, \"configure\");",
          "91:             submit(configure.getFormByName(\"config\"));",
          "92:             VulnerableProperty vp = p.getProperty(VulnerableProperty.class);",
          "93:             assertNotNull(vp);",
          "95:             wc.login(\"dev\");",
          "96:             configure = wc.getPage(p, \"configure\");",
          "98:         } finally {",
          "99:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
          "100:         }",
          "",
          "[Removed Lines]",
          "84:             Secret secret = Secret.fromString(\"s3cr3t\");",
          "86:             p.addProperty(new VulnerableProperty(secret));",
          "90:             assertThat(configure.getWebResponse().getContentAsString(), containsString(secret.getEncryptedValue()));",
          "94:             assertEquals(secret, vp.secret);",
          "97:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(secret.getEncryptedValue())));",
          "",
          "[Added Lines]",
          "85:             Secret s = Secret.fromString(\"s3cr3t\");",
          "86:             String sEnc = s.getEncryptedValue();",
          "88:             p.setDisplayName(\"Unicode here \u2190\");",
          "89:             p.setDescription(\"This+looks+like+Base64+but+is+not+a+secret\");",
          "90:             p.addProperty(new VulnerableProperty(s));",
          "94:             assertThat(configure.getWebResponse().getContentAsString(), containsString(sEnc));",
          "98:             assertEquals(s, vp.secret);",
          "99:             Page configXml = wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");",
          "100:             String xmlAdmin = configXml.getWebResponse().getContentAsString();",
          "101:             assertThat(xmlAdmin, containsString(\"<secret>\" + sEnc + \"</secret>\"));",
          "102:             assertThat(xmlAdmin, containsString(\"<displayName>\" + p.getDisplayName() + \"</displayName>\"));",
          "103:             assertThat(xmlAdmin, containsString(\"<description>\" + p.getDescription() + \"</description>\"));",
          "106:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(sEnc)));",
          "107:             configXml = wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");",
          "108:             String xmlDev = configXml.getWebResponse().getContentAsString();",
          "109:             assertThat(xmlDev, not(containsString(sEnc)));",
          "110:             assertEquals(xmlAdmin.replace(sEnc, \"(some secret)\"), xmlDev);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "214f1b9bb74cbe0f557c367cefa9a1214f0e08b4",
      "candidate_info": {
        "commit_hash": "214f1b9bb74cbe0f557c367cefa9a1214f0e08b4",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/214f1b9bb74cbe0f557c367cefa9a1214f0e08b4",
        "files": [
          "test/src/test/java/lib/form/PasswordTest.java"
        ],
        "message": "Non-Serializable SecurityRealm, and simplifying with MockAuthorizationStrategy.",
        "before_after_code_files": [
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import hudson.model.JobProperty;",
          "37: import hudson.model.JobPropertyDescriptor;",
          "38: import hudson.model.User;",
          "40: import hudson.util.Secret;",
          "41: import java.io.ByteArrayOutputStream;",
          "42: import java.io.PrintStream;",
          "",
          "[Removed Lines]",
          "39: import hudson.security.GlobalMatrixAuthorizationStrategy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: import static org.junit.Assert.assertThat;",
          "54: import org.jvnet.hudson.test.HudsonTestCase;",
          "55: import org.jvnet.hudson.test.Issue;",
          "56: import org.jvnet.hudson.test.TestExtension;",
          "57: import org.kohsuke.stapler.DataBoundConstructor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: import org.jvnet.hudson.test.JenkinsRule;",
          "56: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     @Issue({\"SECURITY-266\", \"SECURITY-304\"})",
          "81:     public void testExposedCiphertext() throws Exception {",
          "82:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
          "83:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         Item.EXTENDED_READ.setEnabled(true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:             assertThat(xml_regex_pattern.matcher(staticTest).find(), is(true));",
          "102:             Secret s = Secret.fromString(\"s3cr3t\");",
          "104:             FreeStyleProject p = createFreeStyleProject(\"p\");",
          "",
          "[Removed Lines]",
          "92:             jenkins.setSecurityRealm(createDummySecurityRealm());",
          "94:             GlobalMatrixAuthorizationStrategy pmas = new GlobalMatrixAuthorizationStrategy();",
          "95:             pmas.add(Jenkins.ADMINISTER, \"admin\");",
          "96:             pmas.add(Jenkins.READ, \"dev\");",
          "97:             pmas.add(Item.READ, \"dev\");",
          "98:             Item.EXTENDED_READ.setEnabled(true);",
          "99:             pmas.add(Item.EXTENDED_READ, \"dev\");",
          "100:             pmas.add(Item.CREATE, \"dev\"); // so we can show CopyJobCommand would barf; more realistic would be to grant it only in a subfolder",
          "101:             jenkins.setAuthorizationStrategy(pmas);",
          "",
          "[Added Lines]",
          "94:             jenkins.setSecurityRealm(new JenkinsRule().createDummySecurityRealm());",
          "95:             jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().",
          "96:                 grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").",
          "97:                 grant(Jenkins.READ, Item.READ, Item.EXTENDED_READ,",
          "98:                     Item.CREATE // so we can show CopyJobCommand would barf; more realistic would be to grant it only in a subfolder",
          "99:                 ).everywhere().to(\"dev\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}