{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6ce71bd265314f65ad95ecdb2735af54121a4dd",
      "candidate_info": {
        "commit_hash": "b6ce71bd265314f65ad95ecdb2735af54121a4dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6ce71bd265314f65ad95ecdb2735af54121a4dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/affinity2.test"
        ],
        "message": "Retain the affinity of an expression in a WHERE clause when it is transformed to a reference to an index column on the same expression. Fix for [f043b113].\n\nFossilOrigin-Name: 511da0815673ca4a176aa61dc23a8231b2ab77e8363fc184a78b6e17dba64d49",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec4c63e00c957f98d61ddc1b9d20406c7e1072d6ab0c12ac6939db6c63d90cb8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117: static int whereIndexExprTransNode(Walker *p, Expr *pExpr){",
          "1118:   IdxExprTrans *pX = p->u.pIdxTrans;",
          "1119:   if( sqlite3ExprCompare(0, pExpr, pX->pIdxExpr, pX->iTabCur)==0 ){",
          "1120:     pExpr->op = TK_COLUMN;",
          "1121:     pExpr->iTable = pX->iIdxCur;",
          "1122:     pExpr->iColumn = pX->iIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:     pExpr->affExpr = sqlite3ExprAffinity(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: do_execsql_test affinity2-100 {",
          "19:   CREATE TABLE t1(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: set testprefix affinity2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   SELECT rowid, xt==+xi, xt==xi, xt==xb FROM t1 ORDER BY rowid;",
          "59: } {1 1 1 0 2 1 1 1 3 0 1 1}",
          "61: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #-------------------------------------------------------------------------",
          "63: do_execsql_test 400 {",
          "64:   CREATE TABLE ttt(c0, c1);",
          "65:   CREATE INDEX ii ON ttt(CAST(c0 AS NUMERIC));",
          "66:   INSERT INTO ttt VALUES('abc', '-1');",
          "67: }",
          "68: do_execsql_test 410 {",
          "69:   SELECT * FROM ttt WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "70: } {abc -1}",
          "71: do_execsql_test 420 {",
          "72:   SELECT * FROM ttt INDEXED BY ii WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "73: } {abc -1}",
          "75: do_execsql_test 430 {",
          "76:   CREATE TABLE t3(a, b, c INTEGER);",
          "77:   CREATE INDEX t3ac ON t3(a, c-1);",
          "78:   INSERT INTO t3 VALUES(1, 1, 1);",
          "79:   INSERT INTO t3 VALUES(2, 1, 0);",
          "80:   INSERT INTO t3 VALUES(3, 1, 1);",
          "81:   INSERT INTO t3 VALUES(4, 1, 0);",
          "82:   INSERT INTO t3 VALUES(5, 1, 1);",
          "83: }",
          "84: do_execsql_test 440 {",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f76ccb7d5486a2664127dec004dd52835f600a81",
      "candidate_info": {
        "commit_hash": "f76ccb7d5486a2664127dec004dd52835f600a81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f76ccb7d5486a2664127dec004dd52835f600a81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Remove an unreachable branch in the NULLS LAST logic of RANGE window functions.\n\nFossilOrigin-Name: 47cd634c98b502d40a493455ba6d73cbd0dae74944f9cf06fcbcd025f4b49d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 616f5663b3dbd0929128c0990fc6d8bba1513c7ae196b87c450ac0b3b3203ecd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:     switch( op ){",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1910:       case OP_Gt:",
          "1913:         break;",
          "1917:         break;",
          "1919:     }",
          "1920:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1921:     sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Removed Lines]",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "1912:         VdbeCoverage(v);",
          "1914:       case OP_Le:",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "1916:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "1913:       default:",
          "1914:         assert( op==OP_Le );",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b15f19c75e74a939f13fe86e57820571aaa2295b",
      "candidate_info": {
        "commit_hash": "b15f19c75e74a939f13fe86e57820571aaa2295b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b15f19c75e74a939f13fe86e57820571aaa2295b",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5aa.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an fts5 problem with interleaving reads and writes in a single transaction.\n\nFossilOrigin-Name: 45c73deb440496e848cb24d4c1326d4105dacfee8bbafb115e567051855e6518",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "584: int sqlite3Fts5HashQuery(",
          "589: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:   int nPre,",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:   return SQLITE_OK;",
          "188: }",
          "191:   if( p->iSzPoslist ){",
          "193:     if( pHash->eDetail==FTS5_DETAIL_NONE ){",
          "195:       if( p->bDel ){",
          "197:         if( p->bContent ){",
          "199:         }",
          "200:       }",
          "201:     }else{",
          "205:       assert( p->bDel==0 || p->bDel==1 );",
          "",
          "[Removed Lines]",
          "190: static void fts5HashAddPoslistSize(Fts5Hash *pHash, Fts5HashEntry *p){",
          "192:     u8 *pPtr = (u8*)p;",
          "194:       assert( p->nData==p->iSzPoslist );",
          "196:         pPtr[p->nData++] = 0x00;",
          "198:           pPtr[p->nData++] = 0x00;",
          "",
          "[Added Lines]",
          "190: static int fts5HashAddPoslistSize(",
          "191:   Fts5Hash *pHash,",
          "192:   Fts5HashEntry *p,",
          "193:   Fts5HashEntry *p2",
          "194: ){",
          "195:   int nRet = 0;",
          "197:     u8 *pPtr = p2 ? (u8*)p2 : (u8*)p;",
          "198:     int nData = p->nData;",
          "200:       assert( nData==p->iSzPoslist );",
          "202:         pPtr[nData++] = 0x00;",
          "204:           pPtr[nData++] = 0x00;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:         int nByte = sqlite3Fts5GetVarintLen((u32)nPos);",
          "210:         memmove(&pPtr[p->iSzPoslist + nByte], &pPtr[p->iSzPoslist + 1], nSz);",
          "211:         sqlite3Fts5PutVarint(&pPtr[p->iSzPoslist], nPos);",
          "213:       }",
          "214:     }",
          "219:   }",
          "220: }",
          "",
          "[Removed Lines]",
          "212:         p->nData += (nByte-1);",
          "216:     p->iSzPoslist = 0;",
          "217:     p->bDel = 0;",
          "218:     p->bContent = 0;",
          "",
          "[Added Lines]",
          "218:         nData += (nByte-1);",
          "222:     nRet = nData - p->nData;",
          "223:     if( p2==0 ){",
          "224:       p->iSzPoslist = 0;",
          "225:       p->bDel = 0;",
          "226:       p->bContent = 0;",
          "227:       p->nData = nData;",
          "228:     }",
          "230:   return nRet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:   if( iRowid!=p->iRowid ){",
          "332:     p->nData += sqlite3Fts5PutVarint(&pPtr[p->nData], iRowid - p->iRowid);",
          "333:     p->iRowid = iRowid;",
          "334:     bNew = 1;",
          "",
          "[Removed Lines]",
          "331:     fts5HashAddPoslistSize(pHash, p);",
          "",
          "[Added Lines]",
          "342:     fts5HashAddPoslistSize(pHash, p, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474: int sqlite3Fts5HashQuery(",
          "479: ){",
          "480:   unsigned int iHash = fts5HashKey(pHash->nSlot, (const u8*)pTerm, nTerm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:   int nPre,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:   }",
          "490:   if( p ){",
          "494:   }else{",
          "497:   }",
          "",
          "[Removed Lines]",
          "491:     fts5HashAddPoslistSize(pHash, p);",
          "",
          "[Added Lines]",
          "503:     int nHashPre = sizeof(Fts5HashEntry) + nTerm + 1;",
          "504:     int nList = p->nData - nHashPre;",
          "505:     u8 *pRet = (u8*)(*ppOut = sqlite3_malloc64(nPre + nList + 10));",
          "506:     if( pRet ){",
          "507:       Fts5HashEntry *pFaux = (Fts5HashEntry*)&pRet[nPre-nHashPre];",
          "508:       memcpy(&pRet[nPre], &((u8*)p)[nHashPre], nList);",
          "509:       nList += fts5HashAddPoslistSize(pHash, p, pFaux);",
          "511:     }else{",
          "513:       return SQLITE_NOMEM;",
          "514:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "525:   if( (p = pHash->pScan) ){",
          "526:     char *zKey = fts5EntryKey(p);",
          "527:     int nTerm = (int)strlen(zKey);",
          "",
          "[Removed Lines]",
          "528:     fts5HashAddPoslistSize(pHash, p);",
          "",
          "[Added Lines]",
          "549:     fts5HashAddPoslistSize(pHash, p, 0);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2459: ){",
          "2461:   int nList = 0;",
          "2462:   const u8 *z = 0;",
          "2463:   int n = 0;",
          "2465:   assert( p->pHash );",
          "2466:   assert( p->rc==SQLITE_OK );",
          "2468:   if( pTerm==0 || (flags & FTS5INDEX_QUERY_SCAN) ){",
          "2469:     p->rc = sqlite3Fts5HashScanInit(p->pHash, (const char*)pTerm, nTerm);",
          "2470:     sqlite3Fts5HashScanEntry(p->pHash, (const char**)&z, &pList, &nList);",
          "2471:     n = (z ? (int)strlen((const char*)z) : 0);",
          "2472:   }else{",
          "2475:     z = pTerm;",
          "2476:     n = nTerm;",
          "2477:   }",
          "2481:     sqlite3Fts5BufferSet(&p->rc, &pIter->term, n, z);",
          "2485:     pLeaf->nn = pLeaf->szLeaf = nList;",
          "2486:     pIter->pLeaf = pLeaf;",
          "2487:     pIter->iLeafOffset = fts5GetVarint(pLeaf->p, (u64*)&pIter->iRowid);",
          "",
          "[Removed Lines]",
          "2460:   const u8 *pList = 0;",
          "2473:     pIter->flags |= FTS5_SEGITER_ONETERM;",
          "2474:     sqlite3Fts5HashQuery(p->pHash, (const char*)pTerm, nTerm, &pList, &nList);",
          "2479:   if( pList ){",
          "2480:     Fts5Data *pLeaf;",
          "2482:     pLeaf = fts5IdxMalloc(p, sizeof(Fts5Data));",
          "2483:     if( pLeaf==0 ) return;",
          "2484:     pLeaf->p = (u8*)pList;",
          "",
          "[Added Lines]",
          "2463:   Fts5Data *pLeaf = 0;",
          "2469:     const u8 *pList = 0;",
          "2474:     if( pList ){",
          "2475:       pLeaf = fts5IdxMalloc(p, sizeof(Fts5Data));",
          "2476:       if( pLeaf ){",
          "2477:         pLeaf->p = pList;",
          "2478:       }",
          "2479:     }",
          "2481:     p->rc = sqlite3Fts5HashQuery(p->pHash, sizeof(Fts5Data),",
          "2482:         (const char*)pTerm, nTerm, (void**)&pLeaf, &nList",
          "2483:     );",
          "2484:     if( pLeaf ){",
          "2485:       pLeaf->p = (u8*)&pLeaf[1];",
          "2486:     }",
          "2489:     pIter->flags |= FTS5_SEGITER_ONETERM;",
          "2492:   if( pLeaf ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test": [
          "File: ext/fts5/test/fts5aa.test -> ext/fts5/test/fts5aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:   db eval { UPDATE n1_config SET v=50 WHERE k='version' }",
          "428:   set fd [db incrblob main n1_data block 10]",
          "429:   fconfigure $fd -encoding binary -translation binary",
          "431:   close $fd",
          "432: }",
          "433: db func funk funk",
          "",
          "[Removed Lines]",
          "430:   puts -nonewline $fd \"\\x44\\x45\"",
          "",
          "[Added Lines]",
          "430: #  puts -nonewline $fd \"\\x44\\x45\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "603:   SELECT * FROM t11, t10 WHERE t10.rowid IS NULL;",
          "604: }",
          "606: }",
          "608: expand_all_sql db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: #-------------------------------------------------------------------------",
          "607: do_execsql_test 24.0 {",
          "608:   CREATE VIRTUAL TABLE t12 USING fts5(x, detail=%DETAIL%);",
          "609:   INSERT INTO t12 VALUES('aaaa');",
          "610: }",
          "611: do_execsql_test 24.1 {",
          "612:   BEGIN;",
          "613:     DELETE FROM t12 WHERE rowid=1;",
          "614:     SELECT * FROM t12('aaaa');",
          "615:     INSERT INTO t12 VALUES('aaaa');",
          "616:   END;",
          "617: }",
          "618: do_execsql_test 24.2 {",
          "619:   INSERT INTO t12(t12) VALUES('integrity-check');",
          "620: }",
          "621: do_execsql_test 24.3 {",
          "622:     SELECT * FROM t12('aaaa');",
          "623: } {aaaa}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2f50aa4e7bad8821e91a7490283dd53e44047d10a8cfebc3e2da26c770a5218",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d4589014a71960310af35a8a3412b2930eb84a2",
      "candidate_info": {
        "commit_hash": "5d4589014a71960310af35a8a3412b2930eb84a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5d4589014a71960310af35a8a3412b2930eb84a2",
        "files": [
          "ext/fts5/fts5_index.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improved detection of shadow table corruption in the fts5_decode() SQL function.\n\nFossilOrigin-Name: b74e5f3f3057ee7a98ebcb14ca0751048eacbec8fca3e11e241883029a57ecdf",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6398:     }else{",
          "6399:       iOff = szLeaf;",
          "6400:     }",
          "6401:     fts5DecodePoslist(&rc, &s, &a[4], iOff-4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6401:     if( iOff>n ){",
          "6402:       rc = FTS5_CORRUPT;",
          "6403:       goto decode_out;",
          "6404:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6434:         term.n = nByte;",
          "6435:       }",
          "6436:       iOff += fts5GetVarint32(&a[iOff], nByte);",
          "6437:       fts5BufferAppendBlob(&rc, &term, nByte, &a[iOff]);",
          "6438:       iOff += nByte;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6441:       if( iOff+nByte>n ){",
          "6442:         rc = FTS5_CORRUPT;",
          "6443:         break;",
          "6444:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 567be3bb1e8b6477f3bf1c7b4cd6ec066fba69d0dcf8785632e244ce25db639f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9378818d898c09aa1eb075a337c1d3b12388baac",
      "candidate_info": {
        "commit_hash": "9378818d898c09aa1eb075a337c1d3b12388baac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9378818d898c09aa1eb075a337c1d3b12388baac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Do not use the insert-overwrite optimization if the cell might overwrite the page header.\n\nFossilOrigin-Name: f60a83069168899dcfd706b4d0901084c7ce92d85277950317e962a8a98ec668",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e46b2afc99329c43de08d4a2e6ade4d2239d7409c5d5626bf272a3e0dd24d1b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8730:       memcpy(oldCell, newCell, szNew);",
          "8731:       return SQLITE_OK;",
          "8732:     }",
          "",
          "[Removed Lines]",
          "8729:       if( oldCell+szNew > pPage->aDataEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "8729:       if( oldCell < pPage->aData+pPage->hdrOffset+10 ){",
          "8730:         return SQLITE_CORRUPT_BKPT;",
          "8731:       }",
          "8732:       if( oldCell+szNew > pPage->aDataEnd ){",
          "8733:         return SQLITE_CORRUPT_BKPT;",
          "8734:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}