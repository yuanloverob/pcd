{
  "cve_id": "CVE-2020-13164",
  "cve_desc": "In Wireshark 3.2.0 to 3.2.3, 3.0.0 to 3.0.10, and 2.6.0 to 2.6.16, the NFS dissector could crash. This was addressed in epan/dissectors/packet-nfs.c by preventing excessive recursion, such as for a cycle in the directory graph on a filesystem.",
  "repo": "wireshark/wireshark",
  "patch_hash": "fc6763989c7a7c4e4b0522b12b955e5a285d388a",
  "patch_info": {
    "commit_hash": "fc6763989c7a7c4e4b0522b12b955e5a285d388a",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/fc6763989c7a7c4e4b0522b12b955e5a285d388a",
    "files": [
      "epan/dissectors/packet-nfs.c"
    ],
    "message": "NFS: Add filesystem cycle detection.\n\nDetect cycles and large depths when snooping full names.\n\nBug: 16476\nChange-Id: I4cddf3d6e6c58d1d382a3ea3b3ed09644562c352\nReviewed-on: https://code.wireshark.org/review/36847\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
      "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: #include \"config.h\"",
      "17: #include <stdio.h>",
      "19: #include <epan/packet.h>",
      "20: #include <epan/prefs.h>",
      "21: #include <epan/exceptions.h>",
      "22: #include <epan/expert.h>",
      "23: #include <epan/to_str.h>",
      "24: #include <epan/decode_as.h>",
      "25: #include <epan/crc16-tvb.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include <stdbool.h>",
      "24: #include <epan/proto_data.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "924: static expert_field ei_nfs_bitmap_skip_value = EI_INIT;",
      "925: static expert_field ei_nfs_bitmap_undissected_data = EI_INIT;",
      "926: static expert_field ei_nfs4_stateid_deprecated = EI_INIT;",
      "928: static const true_false_string tfs_read_write = { \"Read\", \"Write\" };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "929: static expert_field ei_nfs_file_system_cycle = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1005:  unsigned char *parent;",
      "1006:  int        full_name_len;",
      "1007:  char       *full_name;",
      "1008: } nfs_name_snoop_t;",
      "1010: typedef struct nfs_name_snoop_key {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:  bool        fs_cycle;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1268:  g_hash_table_replace(nfs_name_snoop_matched, key, nns);",
      "1269: }",
      "1272: static void",
      "1274: {",
      "1275:  nfs_name_snoop_t     *parent_nns = NULL;",
      "1276:  nfs_name_snoop_key_t  key;",
      "",
      "[Removed Lines]",
      "1273: nfs_full_name_snoop(nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
      "",
      "[Added Lines]",
      "1275: #define NFS_MAX_FS_DEPTH 100",
      "1278: nfs_full_name_snoop(packet_info *pinfo, nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1299:  parent_nns = (nfs_name_snoop_t *)g_hash_table_lookup(nfs_name_snoop_matched, &key);",
      "1301:  if (parent_nns) {",
      "1303:   if (*name) {",
      "1306:         ((*pos)[-1] != '/')?\"/\":\"\", nns->name);",
      "1307:    DISSECTOR_ASSERT((*pos-*name) <= *len);",
      "1308:   }",
      "1309:   return;",
      "1310:  }",
      "",
      "[Removed Lines]",
      "1302:   nfs_full_name_snoop(parent_nns, len, name, pos);",
      "",
      "[Added Lines]",
      "1307:   unsigned fs_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_nfs, 0));",
      "1308:   if (++fs_depth >= NFS_MAX_FS_DEPTH) {",
      "1309:    nns->fs_cycle = true;",
      "1310:    return;",
      "1311:   }",
      "1312:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
      "1314:   nfs_full_name_snoop(pinfo, parent_nns, len, name, pos);",
      "1321:   fs_depth--;",
      "1322:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1347:     char *name = NULL, *pos = NULL;",
      "1348:     int len = 0;",
      "1351:     if (name) {",
      "1352:      nns->full_name = name;",
      "1353:      nns->full_name_len = len;",
      "",
      "[Removed Lines]",
      "1350:     nfs_full_name_snoop(nns, &len, &name, &pos);",
      "",
      "[Added Lines]",
      "1364:     nfs_full_name_snoop(pinfo, nns, &len, &name, &pos);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1399:    }",
      "1400:    proto_item_set_generated(fh_item);",
      "1401:   }",
      "1402:  }",
      "1403: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1417:   if (nns->fs_cycle) {",
      "1418:    proto_tree_add_expert(tree, pinfo, &ei_nfs_file_system_cycle, tvb, 0, 0);",
      "1419:   }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14519:   { &ei_nfs_bitmap_undissected_data, { \"nfs.bitmap_undissected_data\", PI_PROTOCOL, PI_WARN,",
      "14520:    \"There is some bitmap data left undissected\", EXPFILL }},",
      "14521:   { &ei_nfs4_stateid_deprecated, { \"nfs.stateid.deprecated\", PI_PROTOCOL, PI_WARN, \"State ID deprecated in CLOSE responses [RFC7530 16.2.5]\", EXPFILL }},",
      "14522:  };",
      "14524:  module_t *nfs_module;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14540:   { &ei_nfs_file_system_cycle, { \"nfs.file_system_cycle\", PI_PROTOCOL, PI_WARN, \"Possible file system cycle detected\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b2844bfb7412e715d3a1366c2b80eba1766eae7",
      "candidate_info": {
        "commit_hash": "6b2844bfb7412e715d3a1366c2b80eba1766eae7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6b2844bfb7412e715d3a1366c2b80eba1766eae7",
        "files": [
          "epan/dissectors/packet-nfs.c"
        ],
        "message": "NFS: Add filesystem cycle detection.\n\nDetect cycles and large depths when snooping full names.\n\nBug: 16476\nChange-Id: I4cddf3d6e6c58d1d382a3ea3b3ed09644562c352\nReviewed-on: https://code.wireshark.org/review/36847\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit fc6763989c7a7c4e4b0522b12b955e5a285d388a)\nReviewed-on: https://code.wireshark.org/review/36854",
        "before_after_code_files": [
          "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
          "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <epan/prefs.h>",
          "21: #include <epan/exceptions.h>",
          "22: #include <epan/expert.h>",
          "23: #include <epan/to_str.h>",
          "24: #include <epan/decode_as.h>",
          "25: #include <epan/crc16-tvb.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "899: static expert_field ei_protocol_violation = EI_INIT;",
          "900: static expert_field ei_nfs_too_many_bitmaps = EI_INIT;",
          "901: static expert_field ei_nfs4_stateid_deprecated = EI_INIT;",
          "903: static const true_false_string tfs_read_write = { \"Read\", \"Write\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: static expert_field ei_nfs_file_system_cycle = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "936:  unsigned char *parent;",
          "937:  int        full_name_len;",
          "938:  char       *full_name;",
          "939: } nfs_name_snoop_t;",
          "941: typedef struct nfs_name_snoop_key {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:  gboolean       fs_cycle;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1199:  g_hash_table_replace(nfs_name_snoop_matched, key, nns);",
          "1200: }",
          "1203: static void",
          "1205: {",
          "1206:  nfs_name_snoop_t     *parent_nns = NULL;",
          "1207:  nfs_name_snoop_key_t  key;",
          "",
          "[Removed Lines]",
          "1204: nfs_full_name_snoop(nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
          "",
          "[Added Lines]",
          "1205: #define NFS_MAX_FS_DEPTH 100",
          "1208: nfs_full_name_snoop(packet_info *pinfo, nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1230:  parent_nns = (nfs_name_snoop_t *)g_hash_table_lookup(nfs_name_snoop_matched, &key);",
          "1232:  if (parent_nns) {",
          "1234:   if (*name) {",
          "1237:         ((*pos)[-1] != '/')?\"/\":\"\", nns->name);",
          "1238:    DISSECTOR_ASSERT((*pos-*name) <= *len);",
          "1239:   }",
          "1240:   return;",
          "1241:  }",
          "",
          "[Removed Lines]",
          "1233:   nfs_full_name_snoop(parent_nns, len, name, pos);",
          "",
          "[Added Lines]",
          "1237:   unsigned fs_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_nfs, 0));",
          "1238:   if (++fs_depth >= NFS_MAX_FS_DEPTH) {",
          "1239:    nns->fs_cycle = TRUE;",
          "1240:    return;",
          "1241:   }",
          "1242:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "1244:   nfs_full_name_snoop(pinfo, parent_nns, len, name, pos);",
          "1251:   fs_depth--;",
          "1252:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1278:     char *name = NULL, *pos = NULL;",
          "1279:     int len = 0;",
          "1282:     if (name) {",
          "1283:      nns->full_name = name;",
          "1284:      nns->full_name_len = len;",
          "",
          "[Removed Lines]",
          "1281:     nfs_full_name_snoop(nns, &len, &name, &pos);",
          "",
          "[Added Lines]",
          "1294:     nfs_full_name_snoop(pinfo, nns, &len, &name, &pos);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1330:    }",
          "1331:    PROTO_ITEM_SET_GENERATED(fh_item);",
          "1332:   }",
          "1333:  }",
          "1334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1347:   if (nns->fs_cycle) {",
          "1348:    proto_tree_add_expert(tree, pinfo, &ei_nfs_file_system_cycle, tvb, 0, 0);",
          "1349:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "14246:    \"Per RFCs 3530 and 5661 an attribute mask is required but was not provided.\", EXPFILL }},",
          "14247:   { &ei_nfs_too_many_bitmaps, { \"nfs.too_many_bitmaps\", PI_PROTOCOL, PI_NOTE, \"Too many bitmap array items\", EXPFILL }},",
          "14248:   { &ei_nfs4_stateid_deprecated, { \"nfs.stateid.deprecated\", PI_PROTOCOL, PI_WARN, \"State ID deprecated in CLOSE responses [RFC7530 16.2.5]\", EXPFILL }},",
          "14249:  };",
          "14251:  module_t *nfs_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14266:   { &ei_nfs_file_system_cycle, { \"nfs.file_system_cycle\", PI_PROTOCOL, PI_WARN, \"Possible file system cycle detected\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6e98eab8e5e0bbc982cfdc808f2469d7cab6c5a",
      "candidate_info": {
        "commit_hash": "e6e98eab8e5e0bbc982cfdc808f2469d7cab6c5a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e6e98eab8e5e0bbc982cfdc808f2469d7cab6c5a",
        "files": [
          "epan/dissectors/packet-nfs.c"
        ],
        "message": "NFS: Add filesystem cycle detection.\n\nDetect cycles and large depths when snooping full names.\n\nBug: 16476\nChange-Id: I4cddf3d6e6c58d1d382a3ea3b3ed09644562c352\nReviewed-on: https://code.wireshark.org/review/36847\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit fc6763989c7a7c4e4b0522b12b955e5a285d388a)\nReviewed-on: https://code.wireshark.org/review/36855",
        "before_after_code_files": [
          "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
          "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <epan/prefs.h>",
          "21: #include <epan/exceptions.h>",
          "22: #include <epan/expert.h>",
          "23: #include <epan/to_str.h>",
          "24: #include <epan/decode_as.h>",
          "25: #include <epan/crc16-tvb.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "899: static expert_field ei_protocol_violation = EI_INIT;",
          "900: static expert_field ei_nfs_too_many_bitmaps = EI_INIT;",
          "901: static expert_field ei_nfs4_stateid_deprecated = EI_INIT;",
          "903: static const true_false_string tfs_read_write = { \"Read\", \"Write\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: static expert_field ei_nfs_file_system_cycle = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "936:  unsigned char *parent;",
          "937:  int        full_name_len;",
          "938:  char       *full_name;",
          "939: } nfs_name_snoop_t;",
          "941: typedef struct nfs_name_snoop_key {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:  gboolean       fs_cycle;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1199:  g_hash_table_replace(nfs_name_snoop_matched, key, nns);",
          "1200: }",
          "1203: static void",
          "1205: {",
          "1206:  nfs_name_snoop_t     *parent_nns = NULL;",
          "1207:  nfs_name_snoop_key_t  key;",
          "",
          "[Removed Lines]",
          "1204: nfs_full_name_snoop(nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
          "",
          "[Added Lines]",
          "1205: #define NFS_MAX_FS_DEPTH 100",
          "1208: nfs_full_name_snoop(packet_info *pinfo, nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1230:  parent_nns = (nfs_name_snoop_t *)g_hash_table_lookup(nfs_name_snoop_matched, &key);",
          "1232:  if (parent_nns) {",
          "1234:   if (*name) {",
          "1237:         ((*pos)[-1] != '/')?\"/\":\"\", nns->name);",
          "1238:    DISSECTOR_ASSERT((*pos-*name) <= *len);",
          "1239:   }",
          "1240:   return;",
          "1241:  }",
          "",
          "[Removed Lines]",
          "1233:   nfs_full_name_snoop(parent_nns, len, name, pos);",
          "",
          "[Added Lines]",
          "1237:   unsigned fs_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_nfs, 0));",
          "1238:   if (++fs_depth >= NFS_MAX_FS_DEPTH) {",
          "1239:    nns->fs_cycle = TRUE;",
          "1240:    return;",
          "1241:   }",
          "1242:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "1244:   nfs_full_name_snoop(pinfo, parent_nns, len, name, pos);",
          "1251:   fs_depth--;",
          "1252:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1278:     char *name = NULL, *pos = NULL;",
          "1279:     int len = 0;",
          "1282:     if (name) {",
          "1283:      nns->full_name = name;",
          "1284:      nns->full_name_len = len;",
          "",
          "[Removed Lines]",
          "1281:     nfs_full_name_snoop(nns, &len, &name, &pos);",
          "",
          "[Added Lines]",
          "1294:     nfs_full_name_snoop(pinfo, nns, &len, &name, &pos);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1330:    }",
          "1331:    PROTO_ITEM_SET_GENERATED(fh_item);",
          "1332:   }",
          "1333:  }",
          "1334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1347:   if (nns->fs_cycle) {",
          "1348:    proto_tree_add_expert(tree, pinfo, &ei_nfs_file_system_cycle, tvb, 0, 0);",
          "1349:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "14236:    \"Per RFCs 3530 and 5661 an attribute mask is required but was not provided.\", EXPFILL }},",
          "14237:   { &ei_nfs_too_many_bitmaps, { \"nfs.too_many_bitmaps\", PI_PROTOCOL, PI_NOTE, \"Too many bitmap array items\", EXPFILL }},",
          "14238:   { &ei_nfs4_stateid_deprecated, { \"nfs.stateid.deprecated\", PI_PROTOCOL, PI_WARN, \"State ID deprecated in CLOSE responses [RFC7530 16.2.5]\", EXPFILL }},",
          "14239:  };",
          "14241:  module_t *nfs_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14256:   { &ei_nfs_file_system_cycle, { \"nfs.file_system_cycle\", PI_PROTOCOL, PI_WARN, \"Possible file system cycle detected\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84afe20cb3ec19f13a290a91798f15533acc68a8",
      "candidate_info": {
        "commit_hash": "84afe20cb3ec19f13a290a91798f15533acc68a8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/84afe20cb3ec19f13a290a91798f15533acc68a8",
        "files": [
          "epan/dissectors/packet-nfs.c"
        ],
        "message": "NFS: Add filesystem cycle detection.\n\nDetect cycles and large depths when snooping full names.\n\nBug: 16476\nChange-Id: I4cddf3d6e6c58d1d382a3ea3b3ed09644562c352\nReviewed-on: https://code.wireshark.org/review/36847\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit fc6763989c7a7c4e4b0522b12b955e5a285d388a)\nReviewed-on: https://code.wireshark.org/review/36853",
        "before_after_code_files": [
          "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
          "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"config.h\"",
          "17: #include <stdio.h>",
          "19: #include <epan/packet.h>",
          "20: #include <epan/prefs.h>",
          "21: #include <epan/exceptions.h>",
          "22: #include <epan/expert.h>",
          "23: #include <epan/to_str.h>",
          "24: #include <epan/decode_as.h>",
          "25: #include <epan/crc16-tvb.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <stdbool.h>",
          "24: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "924: static expert_field ei_nfs_bitmap_skip_value = EI_INIT;",
          "925: static expert_field ei_nfs_bitmap_undissected_data = EI_INIT;",
          "926: static expert_field ei_nfs4_stateid_deprecated = EI_INIT;",
          "928: static const true_false_string tfs_read_write = { \"Read\", \"Write\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "929: static expert_field ei_nfs_file_system_cycle = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1005:  unsigned char *parent;",
          "1006:  int        full_name_len;",
          "1007:  char       *full_name;",
          "1008: } nfs_name_snoop_t;",
          "1010: typedef struct nfs_name_snoop_key {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:  bool        fs_cycle;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1268:  g_hash_table_replace(nfs_name_snoop_matched, key, nns);",
          "1269: }",
          "1272: static void",
          "1274: {",
          "1275:  nfs_name_snoop_t     *parent_nns = NULL;",
          "1276:  nfs_name_snoop_key_t  key;",
          "",
          "[Removed Lines]",
          "1273: nfs_full_name_snoop(nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
          "",
          "[Added Lines]",
          "1275: #define NFS_MAX_FS_DEPTH 100",
          "1278: nfs_full_name_snoop(packet_info *pinfo, nfs_name_snoop_t *nns, int *len, char **name, char **pos)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1299:  parent_nns = (nfs_name_snoop_t *)g_hash_table_lookup(nfs_name_snoop_matched, &key);",
          "1301:  if (parent_nns) {",
          "1303:   if (*name) {",
          "1306:         ((*pos)[-1] != '/')?\"/\":\"\", nns->name);",
          "1307:    DISSECTOR_ASSERT((*pos-*name) <= *len);",
          "1308:   }",
          "1309:   return;",
          "1310:  }",
          "",
          "[Removed Lines]",
          "1302:   nfs_full_name_snoop(parent_nns, len, name, pos);",
          "",
          "[Added Lines]",
          "1307:   unsigned fs_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_nfs, 0));",
          "1308:   if (++fs_depth >= NFS_MAX_FS_DEPTH) {",
          "1309:    nns->fs_cycle = true;",
          "1310:    return;",
          "1311:   }",
          "1312:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "1314:   nfs_full_name_snoop(pinfo, parent_nns, len, name, pos);",
          "1321:   fs_depth--;",
          "1322:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1347:     char *name = NULL, *pos = NULL;",
          "1348:     int len = 0;",
          "1351:     if (name) {",
          "1352:      nns->full_name = name;",
          "1353:      nns->full_name_len = len;",
          "",
          "[Removed Lines]",
          "1350:     nfs_full_name_snoop(nns, &len, &name, &pos);",
          "",
          "[Added Lines]",
          "1364:     nfs_full_name_snoop(pinfo, nns, &len, &name, &pos);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1399:    }",
          "1400:    proto_item_set_generated(fh_item);",
          "1401:   }",
          "1402:  }",
          "1403: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:   if (nns->fs_cycle) {",
          "1418:    proto_tree_add_expert(tree, pinfo, &ei_nfs_file_system_cycle, tvb, 0, 0);",
          "1419:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "14519:   { &ei_nfs_bitmap_undissected_data, { \"nfs.bitmap_undissected_data\", PI_PROTOCOL, PI_WARN,",
          "14520:    \"There is some bitmap data left undissected\", EXPFILL }},",
          "14521:   { &ei_nfs4_stateid_deprecated, { \"nfs.stateid.deprecated\", PI_PROTOCOL, PI_WARN, \"State ID deprecated in CLOSE responses [RFC7530 16.2.5]\", EXPFILL }},",
          "14522:  };",
          "14524:  module_t *nfs_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14540:   { &ei_nfs_file_system_cycle, { \"nfs.file_system_cycle\", PI_PROTOCOL, PI_WARN, \"Possible file system cycle detected\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "251b16bb933a61b649eadff816bd48bccaa1b6cd",
      "candidate_info": {
        "commit_hash": "251b16bb933a61b649eadff816bd48bccaa1b6cd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/251b16bb933a61b649eadff816bd48bccaa1b6cd",
        "files": [
          "epan/dissectors/packet-nfs.c"
        ],
        "message": "NFS: Switch to p_[gs]et_proto_depth.\n\nChange-Id: I9cb13a787568a71e384830be39ecae359f0560ee\nReviewed-on: https://code.wireshark.org/review/36856\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ],
          "candidate": [
            "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
          "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1304:  parent_nns = (nfs_name_snoop_t *)g_hash_table_lookup(nfs_name_snoop_matched, &key);",
          "1306:  if (parent_nns) {",
          "1308:   if (++fs_depth >= NFS_MAX_FS_DEPTH) {",
          "1309:    nns->fs_cycle = true;",
          "1310:    return;",
          "1311:   }",
          "1314:   nfs_full_name_snoop(pinfo, parent_nns, len, name, pos);",
          "1315:   if (*name) {",
          "",
          "[Removed Lines]",
          "1307:   unsigned fs_depth = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_nfs, 0));",
          "1312:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "",
          "[Added Lines]",
          "1307:   unsigned fs_depth = p_get_proto_depth(pinfo, proto_nfs);",
          "1312:   p_set_proto_depth(pinfo, proto_nfs, fs_depth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1318:         ((*pos)[-1] != '/')?\"/\":\"\", nns->name);",
          "1319:    DISSECTOR_ASSERT((*pos-*name) <= *len);",
          "1320:   }",
          "1323:   return;",
          "1324:  }",
          "",
          "[Removed Lines]",
          "1321:   fs_depth--;",
          "1322:   p_add_proto_data(pinfo->pool, pinfo, proto_nfs, 0, GUINT_TO_POINTER(fs_depth));",
          "",
          "[Added Lines]",
          "1321:   p_set_proto_depth(pinfo, proto_nfs, fs_depth - 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}