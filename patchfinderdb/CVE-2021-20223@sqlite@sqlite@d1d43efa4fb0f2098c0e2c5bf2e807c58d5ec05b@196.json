{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15f3eacfc0e9cfe6ebd4e71a342fab18c6d5eee0",
      "candidate_info": {
        "commit_hash": "15f3eacfc0e9cfe6ebd4e71a342fab18c6d5eee0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/15f3eacfc0e9cfe6ebd4e71a342fab18c6d5eee0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c"
        ],
        "message": "Provide the -innocuous option to the \"db func\" method in the TCL interface.\n\nFossilOrigin-Name: 0138652b6c2f21fd67e59a23a396a5b9d6a16ee9b44701cddfc49b23fddfce5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a679122ca8ec95d5c8afba3a1a50170db9dd519a3810e56877b8f56e858d0175",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2854:       if( n>1 && strncmp(z, \"-directonly\",n)==0 ){",
          "2855:         flags |= SQLITE_DIRECTONLY;",
          "2856:       }else",
          "2857:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2858:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2859:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2858:       if( n>1 && strncmp(z, \"-innocuous\",n)==0 ){",
          "2859:         flags |= SQLITE_INNOCUOUS;",
          "2860:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2870:       }else{",
          "2871:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2872:             \"\\\": must be -argcount, -deterministic, -directonly,\"",
          "2874:         );",
          "2875:         return TCL_ERROR;",
          "2876:       }",
          "",
          "[Removed Lines]",
          "2873:             \" or -returntype\", (char*)0",
          "",
          "[Added Lines]",
          "2877:             \" -innocuous, or -returntype\", (char*)0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11a8182e5c6868a275531315c71f167a410ea86c",
      "candidate_info": {
        "commit_hash": "11a8182e5c6868a275531315c71f167a410ea86c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/11a8182e5c6868a275531315c71f167a410ea86c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/walsetlk.test"
        ],
        "message": "Fix an error that could occur if the first transaction executed by a connection configured to use blocking locks is a write-transaction for which the WRITER lock cannot be obtained.\n\nFossilOrigin-Name: 49e4dc72f7a4b28e4b49d7b91030bc986aea3ff44dac38cb6e68305800cd1de5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/walsetlk.test||test/walsetlk.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac4ee69664278a828e0a64c5be3b96fdb6eb6acc95646a9425c667aea328791c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3435:   pBt->btsFlags &= ~BTS_INITIALLY_EMPTY;",
          "3436:   if( pBt->nPage==0 ) pBt->btsFlags |= BTS_INITIALLY_EMPTY;",
          "3438:   do {",
          "3440: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "",
          "[Removed Lines]",
          "3437:   sqlite3PagerWalDb(pPager, p->db);",
          "",
          "[Added Lines]",
          "3438:     sqlite3PagerWalDb(pPager, p->db);",
          "",
          "---------------"
        ],
        "test/walsetlk.test||test/walsetlk.test": [
          "File: test/walsetlk.test -> test/walsetlk.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   do_test 2.$tn.14 {",
          "177:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "179:     expr $us>1000000 && $us<4000000",
          "180:   } {1}",
          "182: }",
          "184: finish_test",
          "",
          "[Removed Lines]",
          "178:     puts $us",
          "",
          "[Added Lines]",
          "182: #-------------------------------------------------------------------------",
          "183: reset_db",
          "184: sqlite3 db2 test.db",
          "185: db2 timeout 1000",
          "186: do_execsql_test 3.0 {",
          "187:   PRAGMA journal_mode = wal;",
          "188:   CREATE TABLE x1(x, y);",
          "189:   BEGIN;",
          "190:     INSERT INTO x1 VALUES(1, 2);",
          "191: } {wal}",
          "193: do_test 3.1 {",
          "194:   list [catch { db2 eval {BEGIN EXCLUSIVE} } msg] $msg",
          "195: } {1 {database is locked}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e3f135c62422bb3e2ad0df53541c09449065099",
      "candidate_info": {
        "commit_hash": "7e3f135c62422bb3e2ad0df53541c09449065099",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e3f135c62422bb3e2ad0df53541c09449065099",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/gencol1.test"
        ],
        "message": "When a generated column expression is initially parsed, if it contains errors convert the expression to a simple NULL.  This prevents additional pieces of the expression tree that are allocated from lookaside from leaking into the schema, where lookaside allocations are not allowed.\n\nFossilOrigin-Name: a89b38605661e36d192df1d074383b704b34a959fcbc169837c0d4f6848f3208",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5b4a88cd3b3a32b1242e0eb733cc0bc4becb830a887b8e6604a4c7452050e163",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2252:     for(ii=0; ii<p->nCol; ii++){",
          "2253:       u32 colFlags = p->aCol[ii].colFlags;",
          "2254:       if( (colFlags & COLFLAG_GENERATED)!=0 ){",
          "2255:         testcase( colFlags & COLFLAG_VIRTUAL );",
          "2256:         testcase( colFlags & COLFLAG_STORED );",
          "2259:       }else{",
          "2260:         nNG++;",
          "2261:       }",
          "",
          "[Removed Lines]",
          "2257:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2258:                                     p->aCol[ii].pDflt, 0);",
          "",
          "[Added Lines]",
          "2255:         Expr *pX = p->aCol[ii].pDflt;",
          "2258:         if( sqlite3ResolveSelfReference(pParse, p, NC_GenCol, pX, 0) ){",
          "2265:           sqlite3ExprDelete(db, pX);",
          "2266:           p->aCol[ii].pDflt = sqlite3ExprAlloc(db, TK_NULL, 0, 0);",
          "2267:         }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:   INSERT INTO t0 VALUES(2);",
          "383: } {1 {UNIQUE constraint failed: t0.c1}}",
          "387: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: # 2019-12-14 gramfuzz1 find",
          "386: # The schema is malformed in that it has a subquery on a generated",
          "387: # column expression.  This will be loaded if writable_schema=ON.  SQLite",
          "388: # must not use such an expression during code generation as the code generator",
          "389: # will add bits of content to the expression tree that might be allocated",
          "390: # from lookaside.  But the schema is not tied to a particular database",
          "391: # connection, so the use of lookaside memory is prohibited.  The fix",
          "392: # is to change the generated column expression to NULL before adding it",
          "393: # to the schema.",
          "394: #",
          "395: reset_db",
          "396: do_test gencol1-15.10 {",
          "397:   sqlite3 db {}",
          "398:   db deserialize [decode_hexdb {",
          "399: | size 8192 pagesize 4096 filename c27.db",
          "400: | page 1 offset 0",
          "401: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "402: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 02   .....@  ........",
          "403: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................",
          "404: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "405: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "406: |     96: 00 2e 3f d8 0d 00 00 00 01 0f ba 00 0f ba 00 00   ..?.............",
          "407: |   4016: 00 00 00 00 00 00 00 00 00 00 44 01 06 17 11 11   ..........D.....",
          "408: |   4032: 01 75 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .utablet1t1.CREA",
          "409: |   4048: 54 45 20 54 41 42 4c 45 20 74 31 28 61 20 49 4e   TE TABLE t1(a IN",
          "410: |   4064: 54 2c 20 62 20 41 53 28 28 56 41 4c 55 45 53 28   T, b AS((VALUES(",
          "411: |   4080: 31 29 29 20 49 53 20 75 6e 6b 6e 6f 77 6e 29 29   1)) IS unknown))",
          "412: | page 2 offset 4096",
          "413: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "414: | end c27.db",
          "415: }]} {}",
          "416: do_execsql_test gencol1-15.20 {",
          "417:   PRAGMA writable_schema=ON;",
          "418:   REPLACE INTO t1 VALUES(9);",
          "419:   SELECT a, quote(b) FROM t1",
          "420: } {9 NULL}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ca06329c9c8d231ffe59eb1b2bd76056fc252b8",
      "candidate_info": {
        "commit_hash": "5ca06329c9c8d231ffe59eb1b2bd76056fc252b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5ca06329c9c8d231ffe59eb1b2bd76056fc252b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/utf.c",
          "src/vdbe.c",
          "src/vdbeInt.h"
        ],
        "message": "Rewrite the (debugging use only) sqlite3VdbeMemPrettyPrint() function to use the safer StrAccum interface rather than writing directly into a static string buffer.  Perhaps this will address ticket [bbd55a97e66ff50d], which we are unable to reproduce.\n\nFossilOrigin-Name: 69f6a7e42f42116d29514239575ee1dc381b5b673da012cb5f3e8cf17922d493",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/utf.c||src/utf.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3f2696705cc3e7b038f156423f808432a4680ea7e313dc15e34bdf6b1845655",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: #if defined(TRANSLATE_TRACE) && defined(SQLITE_DEBUG)",
          "217:   {",
          "221:   }",
          "222: #endif",
          "",
          "[Removed Lines]",
          "218:     char zBuf[100];",
          "219:     sqlite3VdbeMemPrettyPrint(pMem, zBuf);",
          "220:     fprintf(stderr, \"INPUT:  %s\\n\", zBuf);",
          "",
          "[Added Lines]",
          "218:     StrAccum acc;",
          "219:     char zBuf[1000];",
          "220:     sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "221:     sqlite3VdbeMemPrettyPrint(pMem, &acc);",
          "222:     fprintf(stderr, \"INPUT:  %s\\n\", sqlite3StrAccumFinish(&acc));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325: translate_out:",
          "326: #if defined(TRANSLATE_TRACE) && defined(SQLITE_DEBUG)",
          "327:   {",
          "331:   }",
          "332: #endif",
          "333:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "328:     char zBuf[100];",
          "329:     sqlite3VdbeMemPrettyPrint(pMem, zBuf);",
          "330:     fprintf(stderr, \"OUTPUT: %s\\n\", zBuf);",
          "",
          "[Added Lines]",
          "330:     StrAccum acc;",
          "331:     char zBuf[1000];",
          "332:     sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "333:     sqlite3VdbeMemPrettyPrint(pMem, &acc);",
          "334:     fprintf(stderr, \"OUTPUT: %s\\n\", sqlite3StrAccumFinish(&acc));",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:   int f = pMem->flags;",
          "488:   static const char *const encnames[] = {\"(X)\", \"(8)\", \"(16LE)\", \"(16BE)\"};",
          "490:   if( f&MEM_Blob ){",
          "491:     int i;",
          "492:     char c;",
          "",
          "[Removed Lines]",
          "484: void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){",
          "485:   char *zCsr = zBuf;",
          "",
          "[Added Lines]",
          "484: void sqlite3VdbeMemPrettyPrint(Mem *pMem, StrAccum *pStr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:     }else{",
          "503:       c = 's';",
          "504:     }",
          "509:     for(i=0; i<25 && i<pMem->n; i++){",
          "512:     }",
          "514:     for(i=0; i<25 && i<pMem->n; i++){",
          "515:       char z = pMem->z[i];",
          "518:     }",
          "520:     if( f & MEM_Zero ){",
          "523:     }",
          "525:   }else if( f & MEM_Str ){",
          "528:     if( f & MEM_Dyn ){",
          "530:       assert( (f & (MEM_Static|MEM_Ephem))==0 );",
          "531:     }else if( f & MEM_Static ){",
          "533:       assert( (f & (MEM_Dyn|MEM_Ephem))==0 );",
          "534:     }else if( f & MEM_Ephem ){",
          "536:       assert( (f & (MEM_Static|MEM_Dyn))==0 );",
          "537:     }else{",
          "539:     }",
          "544:     for(j=0; j<25 && j<pMem->n; j++){",
          "545:       u8 c = pMem->z[j];",
          "551:     }",
          "556:   }",
          "557: }",
          "558: #endif",
          "",
          "[Removed Lines]",
          "507:     sqlite3_snprintf(100, zCsr, \"%d[\", pMem->n);",
          "508:     zCsr += sqlite3Strlen30(zCsr);",
          "510:       sqlite3_snprintf(100, zCsr, \"%02X\", ((int)pMem->z[i] & 0xFF));",
          "511:       zCsr += sqlite3Strlen30(zCsr);",
          "516:       if( z<32 || z>126 ) *zCsr++ = '.';",
          "517:       else *zCsr++ = z;",
          "521:       sqlite3_snprintf(100, zCsr,\"+%dz\",pMem->u.nZero);",
          "522:       zCsr += sqlite3Strlen30(zCsr);",
          "526:     int j, k;",
          "527:     zBuf[0] = ' ';",
          "529:       zBuf[1] = 'z';",
          "532:       zBuf[1] = 't';",
          "535:       zBuf[1] = 'e';",
          "538:       zBuf[1] = 's';",
          "540:     k = 2;",
          "541:     sqlite3_snprintf(100, &zBuf[k], \"%d\", pMem->n);",
          "542:     k += sqlite3Strlen30(&zBuf[k]);",
          "543:     zBuf[k++] = '[';",
          "546:       if( c>=0x20 && c<0x7f ){",
          "547:         zBuf[k++] = c;",
          "548:       }else{",
          "549:         zBuf[k++] = '.';",
          "550:       }",
          "552:     zBuf[k++] = ']';",
          "553:     sqlite3_snprintf(100,&zBuf[k], encnames[pMem->enc]);",
          "554:     k += sqlite3Strlen30(&zBuf[k]);",
          "555:     zBuf[k++] = 0;",
          "",
          "[Added Lines]",
          "502:     sqlite3_str_appendf(pStr, \"%cx\", c);",
          "504:       sqlite3_str_appendf(pStr, \"%02X\", ((int)pMem->z[i] & 0xFF));",
          "506:     sqlite3_str_appendf(pStr, \"|\");",
          "509:       sqlite3_str_appendchar(pStr, 1, (z<32||z>126)?'.':z);",
          "511:     sqlite3_str_appendf(pStr,\"]\");",
          "513:       sqlite3_str_appendf(pStr, \"+%dz\",pMem->u.nZero);",
          "516:     int j;",
          "517:     int c;",
          "519:       c = 'z';",
          "522:       c = 't';",
          "525:       c = 'e';",
          "528:       c = 's';",
          "530:     sqlite3_str_appendf(pStr, \" %c%d[\", c, pMem->n);",
          "533:       sqlite3_str_appendchar(pStr, 1, (c>=0x20&&c<=0x7f) ? c : '.');",
          "535:     sqlite3_str_appendf(pStr, \"]%s\", encnames[pMem->enc]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "579:   }else if( sqlite3VdbeMemIsRowSet(p) ){",
          "580:     printf(\" (rowset)\");",
          "581:   }else{",
          "585:   }",
          "586:   if( p->flags & MEM_Subtype ) printf(\" subtype=0x%02x\", p->eSubtype);",
          "587: }",
          "",
          "[Removed Lines]",
          "582:     char zBuf[200];",
          "583:     sqlite3VdbeMemPrettyPrint(p, zBuf);",
          "584:     printf(\" %s\", zBuf);",
          "",
          "[Added Lines]",
          "562:     StrAccum acc;",
          "563:     char zBuf[1000];",
          "564:     sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "565:     sqlite3VdbeMemPrettyPrint(p, &acc);",
          "566:     printf(\" %s\", sqlite3StrAccumFinish(&acc));",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "597: #ifdef SQLITE_DEBUG",
          "598:   void sqlite3VdbePrintSql(Vdbe*);",
          "600: #endif",
          "601: #ifndef SQLITE_OMIT_UTF16",
          "602:   int sqlite3VdbeMemTranslate(Mem*, u8);",
          "",
          "[Removed Lines]",
          "599:   void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf);",
          "",
          "[Added Lines]",
          "599:   void sqlite3VdbeMemPrettyPrint(Mem *pMem, StrAccum *pStr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e065a18a4b691765e1e8ddb117d46f7d4cf41c69",
      "candidate_info": {
        "commit_hash": "e065a18a4b691765e1e8ddb117d46f7d4cf41c69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e065a18a4b691765e1e8ddb117d46f7d4cf41c69",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/date.c",
          "src/main.c",
          "src/malloc.c",
          "src/os_unix.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/wal.c"
        ],
        "message": "Merge enhancements from trunk.\n\nFossilOrigin-Name: d1731385c077f298b0cf654d6183ed40f7e5c07e4e2ab7f69109cf951ce99d9e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/date.c||src/date.c",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/os_unix.c||src/os_unix.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6283c677d57220e54375a6463f453c6d068e042263558df16cff1055d1b0d3f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9533:   while( rc==SQLITE_OK && !db->u1.isInterrupted ){",
          "",
          "[Added Lines]",
          "9533:   while( rc==SQLITE_OK && !AtomicLoad(&db->u1.isInterrupted) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9656:     checkAppendMsg(pCheck, \"2nd reference to page %d\", iPage);",
          "9657:     return 1;",
          "9658:   }",
          "9660:   setPageReferenced(pCheck, iPage);",
          "9661:   return 0;",
          "9662: }",
          "",
          "[Removed Lines]",
          "9659:   if( pCheck->db->u1.isInterrupted ) return 1;",
          "",
          "[Added Lines]",
          "9659:   if( AtomicLoad(&pCheck->db->u1.isInterrupted) ) return 1;",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623: } aXformType[] = {",
          "630: };",
          "",
          "[Removed Lines]",
          "624:   { 0, 6, \"second\", 464269060800.0, 86400000.0/(24.0*60.0*60.0) },",
          "625:   { 0, 6, \"minute\", 7737817680.0,   86400000.0/(24.0*60.0)      },",
          "626:   { 0, 4, \"hour\",   128963628.0,    86400000.0/24.0             },",
          "627:   { 0, 3, \"day\",    5373485.0,      86400000.0                  },",
          "628:   { 1, 5, \"month\",  176546.0,       30.0*86400000.0             },",
          "629:   { 2, 4, \"year\",   14713.0,        365.0*86400000.0            },",
          "",
          "[Added Lines]",
          "624:   { 0, 6, \"second\", 464269060800.0, 1000.0         },",
          "625:   { 0, 6, \"minute\", 7737817680.0,   60000.0        },",
          "626:   { 0, 4, \"hour\",   128963628.0,    3600000.0      },",
          "627:   { 0, 3, \"day\",    5373485.0,      86400000.0     },",
          "628:   { 1, 5, \"month\",  176546.0,       2592000000.0   },",
          "629:   { 2, 4, \"year\",   14713.0,        31536000000.0  },",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1569: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1570:   if( sqlite3OsFileControl(pFile,SQLITE_FCNTL_LOCK_TIMEOUT,&tmout)==SQLITE_OK ){",
          "1571:     if( count ){",
          "1575:     }else{",
          "1576:       return 1;",
          "1577:     }",
          "",
          "[Removed Lines]",
          "1572:       tmout = 0;",
          "1573:       sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1574:       return 0;",
          "",
          "[Added Lines]",
          "1582:       if( tmout ){",
          "1583:         tmout = 0;",
          "1584:         sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1585:         return 0;",
          "1586:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1721:     return;",
          "1722:   }",
          "1723: #endif",
          "1725: }",
          "",
          "[Removed Lines]",
          "1724:   db->u1.isInterrupted = 1;",
          "",
          "[Added Lines]",
          "1736:   AtomicStore(&db->u1.isInterrupted, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2345:   if( db->nVdbeActive==0 ){",
          "2347:   }",
          "2349:   sqlite3_mutex_leave(db->mutex);",
          "",
          "[Removed Lines]",
          "2346:     db->u1.isInterrupted = 0;",
          "",
          "[Added Lines]",
          "2358:     AtomicStore(&db->u1.isInterrupted, 0);",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:   if( db->mallocFailed==0 && db->bBenignMalloc==0 ){",
          "761:     db->mallocFailed = 1;",
          "762:     if( db->nVdbeExec>0 ){",
          "764:     }",
          "765:     DisableLookaside;",
          "766:     if( db->pParse ){",
          "",
          "[Removed Lines]",
          "763:       db->u1.isInterrupted = 1;",
          "",
          "[Added Lines]",
          "763:       AtomicStore(&db->u1.isInterrupted, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779: void sqlite3OomClear(sqlite3 *db){",
          "780:   if( db->mallocFailed && db->nVdbeExec==0 ){",
          "781:     db->mallocFailed = 0;",
          "783:     assert( db->lookaside.bDisable>0 );",
          "784:     EnableLookaside;",
          "785:   }",
          "",
          "[Removed Lines]",
          "782:     db->u1.isInterrupted = 0;",
          "",
          "[Added Lines]",
          "782:     AtomicStore(&db->u1.isInterrupted, 0);",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3995:     }",
          "3996: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3997:     case SQLITE_FCNTL_LOCK_TIMEOUT: {",
          "3998:       pFile->iBusyTimeout = *(int*)pArg;",
          "3999:       return SQLITE_OK;",
          "4000:     }",
          "4001: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3998:       int iOld = pFile->iBusyTimeout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4817:   assert( pShmNode->hShm>=0 || pDbFd->pInode->bProcessLock==1 );",
          "4818:   assert( pShmNode->hShm<0 || pDbFd->pInode->bProcessLock==0 );",
          "4820:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "4821:   assert( n>1 || mask==(1<<ofst) );",
          "4822:   sqlite3_mutex_enter(pShmNode->pShmMutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4833: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "4834:   assert( pDbFd->iBusyTimeout==0",
          "4835:        || (flags & SQLITE_SHM_UNLOCK) || ofst==0",
          "4836:        || ((p->exclMask|p->sharedMask)&~((1<<ofst)-2))==0",
          "4837:   );",
          "4838: #endif",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: #ifndef __has_feature",
          "195: #endif",
          "196: #if GCC_VERSION>=4007000 || __has_feature(c_atomic)",
          "197: # define AtomicLoad(PTR)       __atomic_load_n((PTR),__ATOMIC_RELAXED)",
          "198: # define AtomicStore(PTR,VAL)  __atomic_store_n((PTR),(VAL),__ATOMIC_RELAXED)",
          "199: #else",
          "200: # define AtomicLoad(PTR)       (*(PTR))",
          "201: # define AtomicStore(PTR,VAL)  (*(PTR) = (VAL))",
          "202: #endif",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:   assert( zSql!=0 );",
          "569:   mxSqlLen = db->aLimit[SQLITE_LIMIT_SQL_LENGTH];",
          "570:   if( db->nVdbeActive==0 ){",
          "572:   }",
          "573:   pParse->rc = SQLITE_OK;",
          "574:   pParse->zTail = zSql;",
          "",
          "[Removed Lines]",
          "571:     db->u1.isInterrupted = 0;",
          "",
          "[Added Lines]",
          "571:     AtomicStore(&db->u1.isInterrupted, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:     if( tokenType>=TK_SPACE ){",
          "614:       assert( tokenType==TK_SPACE || tokenType==TK_ILLEGAL );",
          "617:         pParse->rc = SQLITE_INTERRUPT;",
          "618:         break;",
          "619:       }",
          "",
          "[Removed Lines]",
          "616:       if( db->u1.isInterrupted ){",
          "",
          "[Added Lines]",
          "616:       if( AtomicLoad(&db->u1.isInterrupted) ){",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:   assert( p->explain==0 );",
          "708:   p->pResultSet = 0;",
          "709:   db->busyHandler.nBusy = 0;",
          "711:   sqlite3VdbeIOTraceSql(p);",
          "712: #ifdef SQLITE_DEBUG",
          "713:   sqlite3BeginBenignMalloc();",
          "",
          "[Removed Lines]",
          "710:   if( db->u1.isInterrupted ) goto abort_due_to_interrupt;",
          "",
          "[Added Lines]",
          "710:   if( AtomicLoad(&db->u1.isInterrupted) ) goto abort_due_to_interrupt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893: check_for_interrupt:",
          "895: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "[Removed Lines]",
          "894:   if( db->u1.isInterrupted ) goto abort_due_to_interrupt;",
          "",
          "[Added Lines]",
          "894:   if( AtomicLoad(&db->u1.isInterrupted) ) goto abort_due_to_interrupt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8001: abort_due_to_interrupt:",
          "8003:   rc = db->mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_INTERRUPT;",
          "8004:   p->rc = rc;",
          "8005:   sqlite3VdbeError(p, \"%s\", sqlite3ErrStr(rc));",
          "",
          "[Removed Lines]",
          "8002:   assert( db->u1.isInterrupted );",
          "",
          "[Added Lines]",
          "8002:   assert( AtomicLoad(&db->u1.isInterrupted) );",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "665:     if( db->nVdbeActive==0 ){",
          "667:     }",
          "669:     assert( db->nVdbeWrite>0 || db->autoCommit==0",
          "",
          "[Removed Lines]",
          "666:       db->u1.isInterrupted = 0;",
          "",
          "[Added Lines]",
          "666:       AtomicStore(&db->u1.isInterrupted, 0);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2141:   if( rc==SQLITE_OK ){",
          "2142:     pOp = aOp + i;",
          "2144:       p->rc = SQLITE_INTERRUPT;",
          "2145:       rc = SQLITE_ERROR;",
          "2146:       sqlite3VdbeError(p, sqlite3ErrStr(p->rc));",
          "",
          "[Removed Lines]",
          "2143:     if( db->u1.isInterrupted ){",
          "",
          "[Added Lines]",
          "2143:     if( AtomicLoad(&db->u1.isInterrupted) ){",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: # define WALTRACE(X)",
          "259: #endif",
          "",
          "[Removed Lines]",
          "265: #if GCC_VESRION>=5004000",
          "266: # define AtomicLoad(PTR)       __atomic_load_n((PTR),__ATOMIC_RELAXED)",
          "267: # define AtomicStore(PTR,VAL)  __atomic_store_n((PTR),(VAL),__ATOMIC_RELAXED)",
          "268: #else",
          "269: # define AtomicLoad(PTR)       (*(PTR))",
          "270: # define AtomicStore(PTR,VAL)  (*(PTR) = (VAL))",
          "271: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1140:   u32 aFrameCksum[2] = {0, 0};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1131: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1132:   int tmout = 0;",
          "1133:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1134: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1886:       while( rc==SQLITE_OK && 0==walIteratorNext(pIter, &iDbpage, &iFrame) ){",
          "1887:         i64 iOffset;",
          "1888:         assert( walFramePgno(pWal, iFrame)==iDbpage );",
          "1890:           rc = db->mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_INTERRUPT;",
          "1891:           break;",
          "1892:         }",
          "",
          "[Removed Lines]",
          "1889:         if( db->u1.isInterrupted ){",
          "",
          "[Added Lines]",
          "1882:         if( AtomicLoad(&db->u1.isInterrupted) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2599:     for(i=1; i<WAL_NREADER; i++){",
          "2600:       rc = walLockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "2601:       if( rc==SQLITE_OK ){",
          "2603:         mxI = i;",
          "2604:         walUnlockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "2605:         break;",
          "",
          "[Removed Lines]",
          "2602:         mxReadMark = AtomicStore(pInfo->aReadMark+i,mxFrame);",
          "",
          "[Added Lines]",
          "2595:         AtomicStore(pInfo->aReadMark+i,mxFrame);",
          "2596:         mxReadMark = mxFrame;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2758: int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){",
          "2762: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2763:   int bChanged = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2755: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2756:   int tmout = 0;",
          "2757: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2767:   }",
          "2768: #endif",
          "2770:   do{",
          "2771:     rc = walTryBeginRead(pWal, pChanged, 0, ++cnt);",
          "2772:   }while( rc==WAL_RETRY );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2767: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2770:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2771: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2775:   testcase( rc==SQLITE_PROTOCOL );",
          "2776:   testcase( rc==SQLITE_OK );",
          "2778: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2779:   if( rc==SQLITE_OK ){",
          "2780:     if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2781: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2786:   if( rc==SQLITE_OK ){",
          "2787:     sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2788:   }",
          "2789: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}