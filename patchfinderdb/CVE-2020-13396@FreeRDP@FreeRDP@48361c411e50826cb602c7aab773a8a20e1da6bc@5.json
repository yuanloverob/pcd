{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11eb374ef4306bec43213b5589e70995f236adc3",
      "candidate_info": {
        "commit_hash": "11eb374ef4306bec43213b5589e70995f236adc3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/11eb374ef4306bec43213b5589e70995f236adc3",
        "files": [
          "libfreerdp/codec/rfx_dwt.c"
        ],
        "message": "improve RFX DWT algorithm\n\nmerge multiple loops into the one loop for vertical DWT inverse\n\n(cherry picked from commit fff9eba34af8a54bd93b1a7ccdda0a6a6898f755)",
        "before_after_code_files": [
          "libfreerdp/codec/rfx_dwt.c||libfreerdp/codec/rfx_dwt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/rfx_dwt.c||libfreerdp/codec/rfx_dwt.c": [
          "File: libfreerdp/codec/rfx_dwt.c -> libfreerdp/codec/rfx_dwt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  for (x = 0; x < total_width; x++)",
          "89:  {",
          "102:   {",
          "109:   }",
          "110:  }",
          "111: }",
          "",
          "[Removed Lines]",
          "91:   for (n = 0; n < subband_width; n++)",
          "92:   {",
          "93:    y = n << 1;",
          "94:    dst = buffer + y * total_width + x;",
          "95:    l = idwt + n * total_width + x;",
          "96:    h = l + subband_width * total_width;",
          "97:    dst[0] = *l - (((n > 0 ? *(h - total_width) : *h) + (*h) + 1) >> 1);",
          "98:   }",
          "101:   for (n = 0; n < subband_width; n++)",
          "103:    y = n << 1;",
          "104:    dst = buffer + y * total_width + x;",
          "105:    l = idwt + n * total_width + x;",
          "106:    h = l + subband_width * total_width;",
          "107:    dst[total_width] =",
          "108:        (*h << 1) + ((dst[0] + dst[n < subband_width - 1 ? 2 * total_width : 0]) >> 1);",
          "",
          "[Added Lines]",
          "90:   l = idwt + x;",
          "91:   h = idwt + x + subband_width * total_width;",
          "92:   dst = buffer + x;",
          "96:   for (n = 1; n < subband_width; n++)",
          "98:    l += total_width;",
          "99:    h += total_width;",
          "102:    dst[2 * total_width] = *l - ((*(h - total_width) + *h + 1) >> 1);",
          "105:    dst[total_width] = (*(h - total_width) << 1) + ((*dst + dst[2 * total_width]) >> 1);",
          "107:    dst += 2 * total_width;",
          "110:   dst[total_width] = (*h << 1) + ((*dst * 2) >> 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6bcfb0736834be867a746f6f4dc345a47de4fb9",
      "candidate_info": {
        "commit_hash": "c6bcfb0736834be867a746f6f4dc345a47de4fb9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c6bcfb0736834be867a746f6f4dc345a47de4fb9",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed #6200: Arraysize check\n\n(cherry picked from commit 06c48df0dfd228646fed00c554a20ae9bcaa5e5e)",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:   goto fail;",
          "2554:  cache_brush->bpp = BMF_BPP[iBitmapFormat];",
          "",
          "[Removed Lines]",
          "2551:  if (iBitmapFormat > ARRAYSIZE(BMF_BPP))",
          "",
          "[Added Lines]",
          "2551:  if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
      "candidate_info": {
        "commit_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8",
        "files": [
          "libfreerdp/core/security.c"
        ],
        "message": "Fixed GHSL-2020-101 missing NULL check\n\n(cherry picked from commit b207dbba35c505bbc3ad5aadc10b34980c6b7e8e)",
        "before_after_code_files": [
          "libfreerdp/core/security.c||libfreerdp/core/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/security.c||libfreerdp/core/security.c": [
          "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816: {",
          "817:  size_t olen;",
          "819:  if (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))",
          "820:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "819:  if (!rdp || !rdp->fips_decrypt)",
          "820:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2d836cd94c79f14542ef8e7dec7aa969fbead08",
      "candidate_info": {
        "commit_hash": "f2d836cd94c79f14542ef8e7dec7aa969fbead08",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f2d836cd94c79f14542ef8e7dec7aa969fbead08",
        "files": [
          "libfreerdp/core/test/TestConnect.c"
        ],
        "message": "Fixed memory leak in test\n\n(cherry picked from commit 2d630cccf7b1e566f99b74a224805fc25f85d6c1)",
        "before_after_code_files": [
          "libfreerdp/core/test/TestConnect.c||libfreerdp/core/test/TestConnect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/test/TestConnect.c||libfreerdp/core/test/TestConnect.c": [
          "File: libfreerdp/core/test/TestConnect.c -> libfreerdp/core/test/TestConnect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  path = GetCombinedPath(exe, \"Sample\");",
          "182:  wpath = GetCombinedPath(wexe, \"Sample\");",
          "184:  if (!path || !wpath)",
          "185:   goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:  free(exe);",
          "184:  exe = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227: fail:",
          "228:  free(exe);",
          "229:  free(path);",
          "230:  free(wpath);",
          "231:  free(commandLine);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:  free(wexe);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c2dde246a654240d517d280a184860f680be9f9",
      "candidate_info": {
        "commit_hash": "2c2dde246a654240d517d280a184860f680be9f9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2c2dde246a654240d517d280a184860f680be9f9",
        "files": [
          "winpr/libwinpr/utils/collections/StreamPool.c"
        ],
        "message": "Fixed missing label",
        "before_after_code_files": [
          "winpr/libwinpr/utils/collections/StreamPool.c||winpr/libwinpr/utils/collections/StreamPool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/collections/StreamPool.c||winpr/libwinpr/utils/collections/StreamPool.c": [
          "File: winpr/libwinpr/utils/collections/StreamPool.c -> winpr/libwinpr/utils/collections/StreamPool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:  pool->aArray[(pool->aSize)++] = s;",
          "233:  StreamPool_RemoveUsed(pool, s);",
          "235:  if (pool->synchronized)",
          "236:   LeaveCriticalSection(&pool->lock);",
          "237: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: out_fail:",
          "",
          "---------------"
        ]
      }
    }
  ]
}