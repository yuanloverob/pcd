{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34fe9d46e0752fd4a0c9a357e762446a82ee8470",
      "candidate_info": {
        "commit_hash": "34fe9d46e0752fd4a0c9a357e762446a82ee8470",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/34fe9d46e0752fd4a0c9a357e762446a82ee8470",
        "files": [
          "ChangeLog",
          "README.md",
          "auth_openidc.conf",
          "configure.ac",
          "src/cache/cache.h",
          "src/config.c",
          "src/metadata.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c"
        ],
        "message": "add support for RFC 8414 OAuth 2.0 server metadata\n\nwith new directive OIDCOAuthServerMetadataURL\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/cache/cache.h||src/cache/cache.h",
          "src/config.c||src/config.c",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "270: #",
          "271: ########################################################################################",
          "273: # (Mandatory when introspecting opaque access tokens, Optional when performing local JWT access token validation)",
          "274: # OAuth 2.0 Authorization Server token introspection endpoint (e.g. https://localhost:9031/as/token.oauth2)",
          "275: #OIDCOAuthIntrospectionEndpoint <token-introspection-endpoint>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: # URL where Authorization Provider Provider metadata can be found (e.g. https://example.com/.well-known/oauth-authorization-server)",
          "274: # as defined in RFC 8414. The obtained metadata will be cached and refreshed every 24 hours.",
          "275: # If set, individual entries below will not have to be configured but can be used to add",
          "276: # extra entries/endpoints to settings obtained from the metadata.",
          "277: # If OIDCOAuthServerMetadataURL is not set, the endpoint entries below it will have to be configured.",
          "278: #OIDCOAuthServerMetadataURL <url>",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/cache.h||src/cache/cache.h": [
          "File: src/cache/cache.h -> src/cache/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: apr_byte_t oidc_cache_set(request_rec *r, const char *section, const char *key,",
          "99:   const char *value, apr_time_t expiry);",
          "109: #define oidc_cache_get_session(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_SESSION, key, value)",
          "110: #define oidc_cache_get_nonce(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_NONCE, key, value)",
          "111: #define oidc_cache_get_jwks(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_JWKS, key, value)",
          "112: #define oidc_cache_get_access_token(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_ACCESS_TOKEN, key, value)",
          "113: #define oidc_cache_get_provider(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_PROVIDER, key, value)",
          "114: #define oidc_cache_get_jti(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_JTI, key, value)",
          "115: #define oidc_cache_get_request_uri(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_REQUEST_URI, key, value)",
          "",
          "[Removed Lines]",
          "101: #define OIDC_CACHE_SECTION_SESSION      \"s\"",
          "102: #define OIDC_CACHE_SECTION_NONCE        \"n\"",
          "103: #define OIDC_CACHE_SECTION_JWKS         \"j\"",
          "104: #define OIDC_CACHE_SECTION_ACCESS_TOKEN \"a\"",
          "105: #define OIDC_CACHE_SECTION_PROVIDER     \"p\"",
          "106: #define OIDC_CACHE_SECTION_JTI          \"t\"",
          "107: #define OIDC_CACHE_SECTION_REQUEST_URI  \"r\"",
          "",
          "[Added Lines]",
          "101: #define OIDC_CACHE_SECTION_SESSION           \"s\"",
          "102: #define OIDC_CACHE_SECTION_NONCE             \"n\"",
          "103: #define OIDC_CACHE_SECTION_JWKS              \"j\"",
          "104: #define OIDC_CACHE_SECTION_ACCESS_TOKEN      \"a\"",
          "105: #define OIDC_CACHE_SECTION_PROVIDER          \"p\"",
          "106: #define OIDC_CACHE_SECTION_OAUTH_PROVIDER    \"o\"",
          "107: #define OIDC_CACHE_SECTION_JTI               \"t\"",
          "108: #define OIDC_CACHE_SECTION_REQUEST_URI       \"r\"",
          "115: #define oidc_cache_get_oauth_provider(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_OAUTH_PROVIDER, key, value)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119: #define oidc_cache_set_jwks(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_JWKS, key, value, expiry)",
          "120: #define oidc_cache_set_access_token(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_ACCESS_TOKEN, key, value, expiry)",
          "121: #define oidc_cache_set_provider(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_PROVIDER, key, value, expiry)",
          "122: #define oidc_cache_set_jti(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_JTI, key, value, expiry)",
          "123: #define oidc_cache_set_request_uri(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_REQUEST_URI, key, value, expiry)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: #define oidc_cache_set_oauth_provider(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_OAUTH_PROVIDER, key, value, expiry)",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255: #define OIDCProviderMetadataRefreshInterval  \"OIDCProviderMetadataRefreshInterval\"",
          "256: #define OIDCProviderAuthRequestMethod        \"OIDCProviderAuthRequestMethod\"",
          "257: #define OIDCBlackListedClaims                \"OIDCBlackListedClaims\"",
          "259: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #define OIDCOAuthServerMetadataURL           \"OIDCOAuthServerMetadataURL\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1048:  c->provider.auth_request_method = OIDC_DEFAULT_AUTH_REQUEST_METHOD;",
          "1050:  c->oauth.ssl_validate_server = OIDC_DEFAULT_SSL_VALIDATE_SERVER;",
          "1051:  c->oauth.client_id = NULL;",
          "1052:  c->oauth.client_secret = NULL;",
          "1053:  c->oauth.introspection_endpoint_tls_client_cert = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:  c->oauth.metadata_url = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1317:    add->oauth.ssl_validate_server != OIDC_DEFAULT_SSL_VALIDATE_SERVER ?",
          "1318:      add->oauth.ssl_validate_server :",
          "1319:      base->oauth.ssl_validate_server;",
          "1320:  c->oauth.client_id =",
          "1321:    add->oauth.client_id != NULL ?",
          "1322:      add->oauth.client_id : base->oauth.client_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1322:  c->oauth.metadata_url =",
          "1323:    add->oauth.metadata_url != NULL ?",
          "1324:      add->oauth.metadata_url : base->oauth.metadata_url;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1899: static int oidc_check_config_oauth(server_rec *s, oidc_cfg *c) {",
          "1901:  if (c->oauth.introspection_endpoint_url == NULL) {",
          "1903:   if ((c->oauth.verify_jwks_uri == NULL)",
          "1904:     && (c->oauth.verify_public_keys == NULL)",
          "1905:     && (c->oauth.verify_shared_keys == NULL)) {",
          "1906:    oidc_serror(s,",
          "1908:    return HTTP_INTERNAL_SERVER_ERROR;",
          "1909:   }",
          "",
          "[Removed Lines]",
          "1907:      \"one of '\" OIDCOAuthIntrospectionEndpoint \"', '\" OIDCOAuthVerifyJwksUri \"', '\" OIDCOAuthVerifySharedKeys \"' or '\" OIDCOAuthVerifyCertFiles \"' must be set\");",
          "",
          "[Added Lines]",
          "1906:  apr_uri_t r_uri;",
          "1908:  if (c->oauth.metadata_url != NULL) {",
          "1909:   apr_uri_parse(s->process->pconf, c->oauth.metadata_url, &r_uri);",
          "1910:   if ((r_uri.scheme == NULL)",
          "1911:     || (apr_strnatcmp(r_uri.scheme, \"https\") != 0)) {",
          "1912:    oidc_swarn(s,",
          "1913:      \"the URL scheme (%s) of the configured \" OIDCOAuthServerMetadataURL \" SHOULD be \\\"https\\\" for security reasons!\",",
          "1914:      r_uri.scheme);",
          "1915:   }",
          "1916:   return TRUE;",
          "1917:  }",
          "1925:      \"one of '\" OIDCOAuthServerMetadataURL \"', '\" OIDCOAuthIntrospectionEndpoint \"', '\" OIDCOAuthVerifyJwksUri \"', '\" OIDCOAuthVerifySharedKeys \"' or '\" OIDCOAuthVerifyCertFiles \"' must be set\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1936:    return HTTP_INTERNAL_SERVER_ERROR;",
          "1937:  }",
          "1940:    || (cfg->oauth.introspection_endpoint_url != NULL)",
          "1941:    || (cfg->oauth.verify_jwks_uri != NULL)",
          "1942:    || (cfg->oauth.verify_public_keys != NULL)",
          "",
          "[Removed Lines]",
          "1939:  if ((cfg->oauth.client_id != NULL) || (cfg->oauth.client_secret != NULL)",
          "",
          "[Added Lines]",
          "1957:  if ((cfg->oauth.metadata_url != NULL) || (cfg->oauth.client_id != NULL)",
          "1958:    || (cfg->oauth.client_secret != NULL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2791:     (void *) APR_OFFSETOF(oidc_cfg, white_listed_claims),",
          "2792:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "2793:     \"Specify claims from the userinfo and/or id_token that should be stored in the session (all other claims will be discarded).\"),",
          "2794:   { NULL }",
          "2795: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2813:   AP_INIT_TAKE1(OIDCOAuthServerMetadataURL,",
          "2814:     oidc_set_url_slot,",
          "2815:     (void*)APR_OFFSETOF(oidc_cfg, oauth.metadata_url),",
          "2816:     RSRC_CONF,",
          "2817:     \"Authorization Server metadata URL.\"),",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #define OIDC_METADATA_SUFFIX_CLIENT                         \"client\"",
          "69: #define OIDC_METADATA_SUFFIX_CONF                           \"conf\"",
          "83: #define OIDC_METADATA_CLIENT_ID                             \"client_id\"",
          "84: #define OIDC_METADATA_CLIENT_SECRET                         \"client_secret\"",
          "",
          "[Removed Lines]",
          "71: #define OIDC_METADATA_ISSUER                                \"issuer\"",
          "72: #define OIDC_METADATA_RESPONSE_TYPES_SUPPORTED              \"response_types_supported\"",
          "73: #define OIDC_METADATA_RESPONSE_MODES_SUPPORTED              \"response_modes_supported\"",
          "74: #define OIDC_METADATA_AUTHORIZATION_ENDPOINT                \"authorization_endpoint\"",
          "75: #define OIDC_METADATA_TOKEN_ENDPOINT                        \"token_endpoint\"",
          "76: #define OIDC_METADATA_USERINFO_ENDPOINT                     \"userinfo_endpoint\"",
          "77: #define OIDC_METADATA_JWKS_URI                              \"jwks_uri\"",
          "78: #define OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED \"token_endpoint_auth_methods_supported\"",
          "79: #define OIDC_METADATA_REGISTRATION_ENDPOINT                 \"registration_endpoint\"",
          "80: #define OIDC_METADATA_CHECK_SESSION_IFRAME                  \"check_session_iframe\"",
          "81: #define OIDC_METADATA_END_SESSION_ENDPOINT                  \"end_session_endpoint\"",
          "",
          "[Added Lines]",
          "71: #define OIDC_METADATA_ISSUER                                       \"issuer\"",
          "72: #define OIDC_METADATA_RESPONSE_TYPES_SUPPORTED                     \"response_types_supported\"",
          "73: #define OIDC_METADATA_RESPONSE_MODES_SUPPORTED                     \"response_modes_supported\"",
          "74: #define OIDC_METADATA_AUTHORIZATION_ENDPOINT                       \"authorization_endpoint\"",
          "75: #define OIDC_METADATA_TOKEN_ENDPOINT                               \"token_endpoint\"",
          "76: #define OIDC_METADATA_INTROSPECTION_ENDPOINT                       \"introspection_endpoint\"",
          "77: #define OIDC_METADATA_USERINFO_ENDPOINT                            \"userinfo_endpoint\"",
          "78: #define OIDC_METADATA_JWKS_URI                                     \"jwks_uri\"",
          "79: #define OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED        \"token_endpoint_auth_methods_supported\"",
          "80: #define OIDC_METADATA_INTROSPECTON_NDPOINT_AUTH_METHODS_SUPPORTED  \"introspection_endpoint_auth_methods_supported\"",
          "81: #define OIDC_METADATA_REGISTRATION_ENDPOINT                        \"registration_endpoint\"",
          "82: #define OIDC_METADATA_CHECK_SESSION_IFRAME                         \"check_session_iframe\"",
          "83: #define OIDC_METADATA_END_SESSION_ENDPOINT                         \"end_session_endpoint\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1025:  return TRUE;",
          "1026: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030: apr_byte_t oidc_oauth_metadata_provider_parse(request_rec *r, oidc_cfg *c,",
          "1031:   json_t *j_provider) {",
          "1033:  char *issuer = NULL;",
          "1036:  oidc_json_object_get_string(r->pool, j_provider, OIDC_METADATA_ISSUER,",
          "1037:    &issuer, NULL);",
          "1039:  if (c->oauth.introspection_endpoint_url == NULL) {",
          "1041:   oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER, issuer,",
          "1042:     j_provider,",
          "1043:     OIDC_METADATA_INTROSPECTION_ENDPOINT,",
          "1044:     &c->oauth.introspection_endpoint_url,",
          "1045:     NULL);",
          "1046:  }",
          "1048:  if (c->oauth.verify_jwks_uri == NULL) {",
          "1050:   oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER, issuer,",
          "1051:     j_provider,",
          "1052:     OIDC_METADATA_JWKS_URI, &c->oauth.verify_jwks_uri,",
          "1053:     NULL);",
          "1054:  }",
          "1056:  if (c->oauth.introspection_endpoint_auth == NULL) {",
          "1057:   if (oidc_valid_string_in_array(r->pool, j_provider,",
          "1058:     OIDC_METADATA_INTROSPECTON_NDPOINT_AUTH_METHODS_SUPPORTED,",
          "1059:     oidc_cfg_get_valid_endpoint_auth_function(c),",
          "1060:     &c->oauth.introspection_endpoint_auth,",
          "1061:     TRUE) != NULL) {",
          "1062:    oidc_error(r,",
          "1063:      \"could not find a supported token endpoint authentication method in provider metadata (%s) for entry \\\"\" OIDC_METADATA_INTROSPECTON_NDPOINT_AUTH_METHODS_SUPPORTED \"\\\"\",",
          "1064:      issuer);",
          "1065:    return FALSE;",
          "1066:   }",
          "1067:  }",
          "1069:  return TRUE;",
          "1070: }",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:  int ssl_validate_server;",
          "302:  char *client_id;",
          "303:  char *client_secret;",
          "304:  char *introspection_endpoint_tls_client_key;",
          "305:  char *introspection_endpoint_tls_client_cert;",
          "306:  char *introspection_endpoint_url;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:  char *metadata_url;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "792: apr_byte_t oidc_metadata_list(request_rec *r, oidc_cfg *cfg, apr_array_header_t **arr);",
          "793: apr_byte_t oidc_metadata_get(request_rec *r, oidc_cfg *cfg, const char *selected, oidc_provider_t **provider, apr_byte_t allow_discovery);",
          "794: apr_byte_t oidc_metadata_jwks_get(request_rec *r, oidc_cfg *cfg, const oidc_jwks_uri_t *jwks_uri, json_t **j_jwks, apr_byte_t *refresh);",
          "797: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796: apr_byte_t oidc_oauth_metadata_provider_parse(request_rec *r, oidc_cfg *c, json_t *j_provider);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"mod_auth_openidc.h\"",
          "60: #include \"parse.h\"",
          "65: static apr_byte_t oidc_oauth_validate_access_token(request_rec *r, oidc_cfg *c,",
          "66:   const char *token, char **response) {",
          "68:  oidc_debug(r, \"enter\");",
          "70:  char *basic_auth = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: apr_byte_t oidc_oauth_metadata_provider_retrieve(request_rec *r, oidc_cfg *cfg,",
          "63:   const char *issuer, const char *url, json_t **j_metadata,",
          "64:   char **response) {",
          "67:  if (oidc_util_http_get(r, url, NULL, NULL, NULL,",
          "68:    cfg->oauth.ssl_validate_server, response, cfg->http_timeout_short,",
          "69:    cfg->outgoing_proxy, oidc_dir_cfg_pass_cookies(r),",
          "70:    NULL, NULL) == FALSE)",
          "71:   return FALSE;",
          "74:  if (oidc_util_decode_json_and_check_error(r, *response, j_metadata) == FALSE) {",
          "75:   oidc_error(r, \"JSON parsing of retrieved Discovery document failed\");",
          "76:   return FALSE;",
          "77:  }",
          "82:   if (oidc_oauth_metadata_provider_is_valid(r, cfg, *j_metadata, issuer) == FALSE)",
          "83:   return FALSE;",
          "87:  return TRUE;",
          "88: }",
          "90: static apr_byte_t oidc_oauth_provider_config(request_rec *r, oidc_cfg *c) {",
          "92:  json_t *j_provider = NULL;",
          "93:  char *s_json = NULL;",
          "96:  if (c->oauth.metadata_url == NULL)",
          "97:   return TRUE;",
          "99:  oidc_cache_get_oauth_provider(r, c->oauth.metadata_url, &s_json);",
          "101:  if (s_json == NULL) {",
          "103:   if (oidc_oauth_metadata_provider_retrieve(r, c, NULL,",
          "104:     c->oauth.metadata_url, &j_provider, &s_json) == FALSE) {",
          "105:    oidc_error(r, \"could not retrieve metadata from url: %s\",",
          "106:      c->oauth.metadata_url);",
          "107:    return FALSE;",
          "108:   }",
          "110:   oidc_cache_set_provider(r, c->oauth.metadata_url, s_json,",
          "111:     apr_time_now() + (c->provider_metadata_refresh_interval <= 0 ? apr_time_from_sec( OIDC_CACHE_PROVIDER_METADATA_EXPIRY_DEFAULT) : c->provider_metadata_refresh_interval));",
          "113:  } else {",
          "115:   oidc_util_decode_json_object(r, s_json, &j_provider);",
          "119:    if (oidc_oauth_metadata_provider_is_valid(r, c, j_provider, NULL) == FALSE) {",
          "120:    oidc_error(r,",
          "121:    \"cache corruption detected: invalid metadata from url: %s\",",
          "122:    c->provider.metadata_url);",
          "123:    return FALSE;",
          "124:    }",
          "126:  }",
          "128:  if (oidc_oauth_metadata_provider_parse(r, c, j_provider) == FALSE) {",
          "129:   oidc_error(r, \"could not parse metadata from url: %s\",",
          "130:     c->oauth.metadata_url);",
          "131:   if (j_provider)",
          "132:    json_decref(j_provider);",
          "133:   return FALSE;",
          "134:  }",
          "136:  json_decref(j_provider);",
          "138:  return TRUE;",
          "139: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  if ((accept_header)",
          "132:    || (accept_token_in & OIDC_OAUTH_ACCEPT_TOKEN_IN_BASIC)) {",
          "",
          "[Removed Lines]",
          "129:  const bool accept_header = (accept_token_in & OIDC_OAUTH_ACCEPT_TOKEN_IN_HEADER) || (accept_token_in == OIDC_OAUTH_ACCEPT_TOKEN_IN_DEFAULT);",
          "",
          "[Added Lines]",
          "208:  const apr_byte_t accept_header = (accept_token_in",
          "209:    & OIDC_OAUTH_ACCEPT_TOKEN_IN_HEADER)",
          "210:      || (accept_token_in == OIDC_OAUTH_ACCEPT_TOKEN_IN_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:   if (auth_line) {",
          "137:    oidc_debug(r, \"authorization header found\");",
          "142:    if ((apr_strnatcasecmp(",
          "143:      ap_getword(r->pool, &auth_line, OIDC_CHAR_SPACE),",
          "148:     while (apr_isspace(*auth_line)) {",
          "",
          "[Removed Lines]",
          "139:    bool known_scheme = false;",
          "144:      OIDC_PROTO_BEARER) == 0) &&",
          "145:      accept_header) {",
          "",
          "[Added Lines]",
          "220:    apr_byte_t known_scheme = 0;",
          "225:      OIDC_PROTO_BEARER) == 0) && accept_header) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:    } else if (accept_token_in & OIDC_OAUTH_ACCEPT_TOKEN_IN_BASIC) {",
          "159:     char *decoded_line;",
          "160:     int decoded_len;",
          "162:      decoded_line[decoded_len] = '\\0';",
          "164:      if (strchr(decoded_line, ':') != NULL) {",
          "170:      }",
          "171:     }",
          "172:    }",
          "175:     oidc_warn(r,",
          "176:       \"client used unsupported authentication scheme: %s\",",
          "177:       r->uri);",
          "",
          "[Removed Lines]",
          "155:     known_scheme = true;",
          "161:     if (oidc_parse_base64(r->pool, auth_line, &decoded_line, &decoded_len) == NULL) {",
          "166:       ap_getword_nulls(r->pool, (const char**)&decoded_line, ':');",
          "169:       known_scheme = true;",
          "174:    if (!known_scheme) {",
          "",
          "[Added Lines]",
          "235:     known_scheme = 1;",
          "241:     if (oidc_parse_base64(r->pool, auth_line, &decoded_line,",
          "242:       &decoded_len) == NULL) {",
          "247:       ap_getword_nulls(r->pool, (const char**) &decoded_line,",
          "248:         ':');",
          "251:       known_scheme = 1;",
          "256:    if (known_scheme == 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "601:  char *remote_user = NULL;",
          "603:  if (oidc_get_remote_user(r, c->oauth.remote_user_claim.claim_name,",
          "605:   oidc_error(r,",
          "606:     \"\" OIDCOAuthRemoteUserClaim \" is set to \\\"%s\\\", but could not set the remote user based the available claims for the user\",",
          "607:     c->oauth.remote_user_claim.claim_name);",
          "",
          "[Removed Lines]",
          "604:    c->oauth.remote_user_claim.reg_exp, c->oauth.remote_user_claim.replace, token, &remote_user) == FALSE) {",
          "",
          "[Added Lines]",
          "686:    c->oauth.remote_user_claim.reg_exp,",
          "687:    c->oauth.remote_user_claim.replace, token, &remote_user) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "609:  }",
          "611:  r->user = apr_pstrdup(r->pool, remote_user);",
          "618:  return TRUE;",
          "619: }",
          "",
          "[Removed Lines]",
          "612:     oidc_debug(r, \"set user to \\\"%s\\\" based on claim: \\\"%s\\\"%s\", r->user,",
          "613:                c->oauth.remote_user_claim.claim_name,",
          "614:                c->oauth.remote_user_claim.reg_exp ?",
          "615:                apr_psprintf(r->pool, \" and expression: \\\"%s\\\" and replace string: \\\"%s\\\"\",",
          "616:                             c->oauth.remote_user_claim.reg_exp, c->oauth.remote_user_claim.replace) :",
          "617:                \"\");",
          "",
          "[Added Lines]",
          "695:  oidc_debug(r, \"set user to \\\"%s\\\" based on claim: \\\"%s\\\"%s\", r->user,",
          "696:    c->oauth.remote_user_claim.claim_name,",
          "697:    c->oauth.remote_user_claim.reg_exp ?",
          "698:      apr_psprintf(r->pool,",
          "699:        \" and expression: \\\"%s\\\" and replace string: \\\"%s\\\"\",",
          "700:        c->oauth.remote_user_claim.reg_exp,",
          "701:        c->oauth.remote_user_claim.replace) :",
          "702:        \"\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "662:  const char *access_token = NULL;",
          "663:  if (oidc_oauth_get_bearer_token(r, &access_token) == FALSE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:  oidc_oauth_provider_config(r, c);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3497104a2cc260e6de5a36550038ab904acc7262",
      "candidate_info": {
        "commit_hash": "3497104a2cc260e6de5a36550038ab904acc7262",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/3497104a2cc260e6de5a36550038ab904acc7262",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/metadata.c",
          "src/mod_auth_openidc.h",
          "src/proto.c"
        ],
        "message": "add per-provider key configuration in a multi-provider setup\n\nlimitations:\n- for request object signing and id_token decryption only\n- take the first configured key, no kid specification\n- no publishing of key information on client endpoints\n- no private_key_jwt token endpoint authentication\n- no userinfo JWT decryption\n- no composite claims decryption\n\nbump to 2.4.0rc12\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc11],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc12],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105:  c->provider.pkce = NULL;",
          "1107:  c->provider.client_jwks_uri = NULL;",
          "1108:  c->provider.id_token_signed_response_alg = NULL;",
          "1109:  c->provider.id_token_encrypted_response_alg = NULL;",
          "1110:  c->provider.id_token_encrypted_response_enc = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:  c->provider.client_signing_keys = NULL;",
          "1109:  c->provider.client_encryption_keys = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1361:    add->provider.client_jwks_uri != NULL ?",
          "1362:      add->provider.client_jwks_uri :",
          "1363:      base->provider.client_jwks_uri;",
          "1364:  c->provider.id_token_signed_response_alg =",
          "1365:    add->provider.id_token_signed_response_alg != NULL ?",
          "1366:      add->provider.id_token_signed_response_alg :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1367:  c->provider.client_signing_keys =",
          "1368:    add->provider.client_signing_keys != NULL ?",
          "1369:      add->provider.client_signing_keys :",
          "1370:      base->provider.client_signing_keys;",
          "1371:  c->provider.client_encryption_keys =",
          "1372:    add->provider.client_encryption_keys != NULL ?",
          "1373:      add->provider.client_encryption_keys :",
          "1374:      base->provider.client_encryption_keys;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2005:  apr_uri_t r_uri;",
          "2009:  if (c->oauth.metadata_url != NULL) {",
          "2010:   apr_uri_parse(s->process->pconf, c->oauth.metadata_url, &r_uri);",
          "",
          "[Removed Lines]",
          "2007:  oidc_swarn(s, \"The OAuth 2.0 Resource Server functionality is deprecated and superseded by a new module, see: https://github.com/zmartzone/mod_oauth2!\");",
          "",
          "[Added Lines]",
          "2019:  oidc_swarn(s,",
          "2020:    \"The OAuth 2.0 Resource Server functionality is deprecated and superseded by a new module, see: https://github.com/zmartzone/mod_oauth2!\");",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:        issuer : apr_psprintf(r->pool, \"https://%s\", issuer));",
          "770:  url = apr_psprintf(r->pool, \"%s%s.well-known/openid-configuration\", url,",
          "771:    url[strlen(url) - 1] != OIDC_CHAR_FORWARD_SLASH ?",
          "775:  if (oidc_metadata_provider_retrieve(r, cfg, issuer, url, j_provider,",
          "",
          "[Removed Lines]",
          "772:      OIDC_STR_FORWARD_SLASH : \"\");",
          "",
          "[Added Lines]",
          "772:      OIDC_STR_FORWARD_SLASH :",
          "773:      \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1133: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136: void oidc_metadata_get_jwks(request_rec *r, json_t *json, const char *s_use,",
          "1137:   apr_hash_t **jwk_list) {",
          "1138:  json_t *keys = NULL;",
          "1139:  int i = 0;",
          "1140:  oidc_jose_error_t err;",
          "1141:  oidc_jwk_t *jwk = NULL;",
          "1142:  json_t *elem = NULL;",
          "1143:  const char *use = NULL;",
          "1145:  keys = json_object_get(json, OIDC_JWK_KEYS);",
          "1146:  if (keys == NULL)",
          "1147:   return;",
          "1149:  if (!json_is_array(keys)) {",
          "1150:   oidc_error(r,",
          "1151:     \"trying to parse a list of JWKs but the value for key \\\"%s\\\" is not a JSON array\",",
          "1152:     OIDC_JWK_KEYS);",
          "1153:   return;",
          "1154:  }",
          "1156:  for (i = 0; i < json_array_size(keys); i++) {",
          "1158:   elem = json_array_get(keys, i);",
          "1160:   use = json_string_value(json_object_get(elem, OIDC_JWK_USE));",
          "1161:   if ((use != NULL) && (strcmp(use, s_use) != 0)) {",
          "1162:    oidc_debug(r,",
          "1163:      \"skipping key because of non-matching \\\"%s\\\": \\\"%s\\\" != \\\"%s\\\"\",",
          "1164:      OIDC_JWK_USE, use, s_use);",
          "1165:    continue;",
          "1166:   }",
          "1168:   if (oidc_jwk_parse_json(r->pool, elem, &jwk, &err) == FALSE) {",
          "1169:    oidc_warn(r, \"oidc_jwk_parse_json failed: %s\",",
          "1170:      oidc_jose_e2s(r->pool, err));",
          "1171:    continue;",
          "1172:   }",
          "1174:   if (*jwk_list == NULL)",
          "1176:   apr_hash_set(*jwk_list, jwk->kid, APR_HASH_KEY_STRING, jwk);",
          "1177:  }",
          "1178: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1143:    OIDC_METADATA_CLIENT_JWKS_URI, &provider->client_jwks_uri,",
          "1144:    cfg->provider.client_jwks_uri);",
          "1147:  oidc_metadata_get_valid_string(r, j_conf,",
          "1150:    &provider->id_token_signed_response_alg,",
          "1151:    cfg->provider.id_token_signed_response_alg);",
          "1152:  oidc_metadata_get_valid_string(r, j_conf,",
          "",
          "[Removed Lines]",
          "1148:    OIDC_METADATA_ID_TOKEN_SIGNED_RESPONSE_ALG,",
          "1149:    oidc_valid_signed_response_alg,",
          "",
          "[Added Lines]",
          "1191:  oidc_metadata_get_jwks(r, j_conf,",
          "1192:    OIDC_JWK_SIG, &provider->client_signing_keys);",
          "1193:  oidc_metadata_get_jwks(r, j_conf,",
          "1194:    OIDC_JWK_ENC, &provider->client_encryption_keys);",
          "1198:    OIDC_METADATA_ID_TOKEN_SIGNED_RESPONSE_ALG, oidc_valid_signed_response_alg,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1164:  oidc_metadata_get_valid_string(r, j_conf,",
          "1167:    &provider->userinfo_signed_response_alg,",
          "1168:    cfg->provider.userinfo_signed_response_alg);",
          "1169:  oidc_metadata_get_valid_string(r, j_conf,",
          "",
          "[Removed Lines]",
          "1165:    OIDC_METADATA_USERINFO_SIGNED_RESPONSE_ALG,",
          "1166:    oidc_valid_signed_response_alg,",
          "",
          "[Added Lines]",
          "1214:    OIDC_METADATA_USERINFO_SIGNED_RESPONSE_ALG, oidc_valid_signed_response_alg,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1211:  oidc_json_object_get_string(r->pool, j_conf,",
          "1214:    cfg->provider.token_endpoint_params);",
          "",
          "[Removed Lines]",
          "1212:    OIDC_METADATA_TOKEN_ENDPOINT_PARAMS,",
          "1213:    &provider->token_endpoint_params,",
          "",
          "[Added Lines]",
          "1260:    OIDC_METADATA_TOKEN_ENDPOINT_PARAMS, &provider->token_endpoint_params,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1279:  char *method = NULL;",
          "1280:  oidc_metadata_get_valid_string(r, j_conf,",
          "1283:    NULL);",
          "1284:  if (method != NULL)",
          "1285:   oidc_parse_userinfo_token_method(r->pool, method,",
          "",
          "[Removed Lines]",
          "1281:    OIDC_METADATA_USERINFO_TOKEN_METHOD,",
          "1282:    oidc_valid_userinfo_token_method, &method,",
          "",
          "[Added Lines]",
          "1328:    OIDC_METADATA_USERINFO_TOKEN_METHOD, oidc_valid_userinfo_token_method,",
          "1329:    &method,",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  oidc_proto_pkce_t *pkce;",
          "284:  int userinfo_refresh_interval;",
          "286:  char *client_jwks_uri;",
          "287:  char *id_token_signed_response_alg;",
          "288:  char *id_token_encrypted_response_alg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:  apr_hash_t *client_signing_keys;",
          "287:  apr_hash_t *client_encryption_keys;",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:   return FALSE;",
          "253:  }",
          "256:  if ((keys == NULL) || !(json_is_array(keys))) {",
          "258:   return FALSE;",
          "259:  }",
          "",
          "[Removed Lines]",
          "255:  json_t *keys = json_object_get(j_jwks, \"keys\");",
          "257:   oidc_error(r, \"\\\"keys\\\" array element is not a JSON array\");",
          "",
          "[Added Lines]",
          "255:  json_t *keys = json_object_get(j_jwks, OIDC_JWK_KEYS);",
          "257:   oidc_error(r, \"\\\"%s\\\" array element is not a JSON array\",",
          "258:     OIDC_JWK_KEYS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:   struct oidc_provider_t *provider, json_t * request_object_config,",
          "303:   apr_table_t *params) {",
          "305:  oidc_debug(r, \"enter\");",
          "307:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:  apr_ssize_t klen = 0;",
          "307:  oidc_jwk_t *jwk = NULL;",
          "308:  int jwk_needs_destroy = 0;",
          "309:  apr_hash_index_t *hi = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:  if (strcmp(request_object->header.alg, \"none\") != 0) {",
          "352:   switch (oidc_jwt_alg2kty(request_object)) {",
          "353:   case CJOSE_JWK_KTY_RSA:",
          "358:     apr_hash_this(hi, (const void **) &request_object->header.kid,",
          "359:       &klen, (void **) &jwk);",
          "360:    } else {",
          "361:     oidc_error(r,",
          "363:    }",
          "364:    break;",
          "365:   case CJOSE_JWK_KTY_OCT:",
          "",
          "[Removed Lines]",
          "349:   oidc_jwk_t *jwk = NULL;",
          "350:   int jwk_needs_destroy = 0;",
          "354:    if (cfg->private_keys != NULL) {",
          "355:     apr_ssize_t klen = 0;",
          "356:     apr_hash_index_t *hi = apr_hash_first(r->pool,",
          "357:       cfg->private_keys);",
          "362:       \"no private keys have been configured to use for private_key_jwt client authentication (\" OIDCPrivateKeyFiles \")\");",
          "",
          "[Added Lines]",
          "355:   jwk = NULL;",
          "356:   jwk_needs_destroy = 0;",
          "357:   klen = 0;",
          "361:    if ((provider->client_signing_keys != NULL)",
          "362:      || (cfg->private_keys != NULL)) {",
          "363:     hi = provider->client_signing_keys ?",
          "364:       apr_hash_first(r->pool, provider->client_signing_keys) :",
          "365:       apr_hash_first(r->pool, cfg->private_keys);",
          "370:       \"no global or per-provider private keys have been configured to use for request object signing\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1603:  char *alg = NULL;",
          "1604:  oidc_debug(r, \"enter: id_token header=%s\",",
          "1605:    oidc_proto_peek_jwt_header(r, id_token, &alg));",
          "1607:  char buf[APR_RFC822_DATE_LEN + 1];",
          "1608:  oidc_jose_error_t err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1614:  apr_hash_t *decryption_keys = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1612:    TRUE, &jwk) == FALSE)",
          "1613:   return FALSE;",
          "1618:   oidc_error(r, \"oidc_jwt_parse failed: %s\", oidc_jose_e2s(r->pool, err));",
          "1619:   oidc_jwt_destroy(*jwt);",
          "",
          "[Removed Lines]",
          "1615:  if (oidc_jwt_parse(r->pool, id_token, jwt,",
          "1616:    oidc_util_merge_symmetric_key(r->pool, cfg->private_keys, jwk),",
          "1617:    &err) == FALSE) {",
          "",
          "[Added Lines]",
          "1624:  if (cfg->private_keys)",
          "1625:   decryption_keys = oidc_util_merge_symmetric_key(r->pool,",
          "1626:     cfg->private_keys, jwk);",
          "1627:  if (provider->client_encryption_keys)",
          "1628:   decryption_keys = oidc_util_merge_key_sets(r->pool, decryption_keys,",
          "1629:     provider->client_encryption_keys);",
          "1631:  if (oidc_jwt_parse(r->pool, id_token, jwt, decryption_keys, &err) == FALSE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "700c9a9031778e571e42f8acfa1ff1ec7a7e8bf4",
      "candidate_info": {
        "commit_hash": "700c9a9031778e571e42f8acfa1ff1ec7a7e8bf4",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/700c9a9031778e571e42f8acfa1ff1ec7a7e8bf4",
        "files": [
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/session.c"
        ],
        "message": "also revoke tokens on backchannel logout\n\nbump to 2.4.0rc9\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc9],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2701: static void oidc_revoke_tokens(request_rec *r, oidc_cfg *c,",
          "2704:  char *response = NULL;",
          "2705:  char *basic_auth = NULL;",
          "2706:  char *bearer_auth = NULL;",
          "2707:  apr_table_t *params = NULL;",
          "2708:  const char *token = NULL;",
          "2711:    provider->revocation_endpoint_url ?",
          "2712:      provider->revocation_endpoint_url : \"(null)\");",
          "2714:  if (provider->revocation_endpoint_url == NULL)",
          "2717:  params = apr_table_make(r->pool, 4);",
          "",
          "[Removed Lines]",
          "2702:   oidc_session_t *session, oidc_provider_t *provider) {",
          "2710:  oidc_debug(r, \"enter: revocation_endpoint=%s\",",
          "2715:   return;",
          "",
          "[Added Lines]",
          "2702:   oidc_session_t *session) {",
          "2709:  oidc_provider_t *provider = NULL;",
          "2711:  oidc_debug(r, \"enter\");",
          "2713:  if (oidc_get_provider_from_session(r, c, session, &provider) == FALSE)",
          "2714:   goto out;",
          "2716:  oidc_debug(r, \"revocation_endpoint=%s\",",
          "2721:   goto out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2721:    provider->client_id, provider->client_secret,",
          "2722:    provider->token_endpoint_url, params, NULL, &basic_auth,",
          "2723:    &bearer_auth) == FALSE)",
          "2727:  token = oidc_session_get_refresh_token(r, session);",
          "",
          "[Removed Lines]",
          "2724:   return;",
          "",
          "[Added Lines]",
          "2730:   goto out;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2752:    oidc_warn(r, \"revoking access token failed\");",
          "2753:   }",
          "2754:  }",
          "2755: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2762: out:",
          "2764:  oidc_debug(r, \"leave\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2760: static int oidc_handle_logout_request(request_rec *r, oidc_cfg *c,",
          "2761:   oidc_session_t *session, const char *url) {",
          "2765:  oidc_debug(r, \"enter (url=%s)\", url);",
          "2768:  if (session->remote_user != NULL) {",
          "2776:   oidc_session_kill(r, session);",
          "",
          "[Removed Lines]",
          "2763:  oidc_provider_t *provider = NULL;",
          "2770:   if (oidc_get_provider_from_session(r, c, session, &provider) == FALSE)",
          "2771:    return HTTP_INTERNAL_SERVER_ERROR;",
          "2773:   oidc_revoke_tokens(r, c, session, provider);",
          "",
          "[Added Lines]",
          "2778:   oidc_revoke_tokens(r, c, session);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2828:  oidc_jwk_t *jwk = NULL;",
          "2829:  oidc_provider_t *provider = NULL;",
          "2830:  char *sid = NULL, *uuid = NULL;",
          "2831:  int rc = HTTP_BAD_REQUEST;",
          "2833:  apr_table_t *params = apr_table_make(r->pool, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2836:  oidc_session_t session;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2973:   goto out;",
          "2974:  }",
          "2981:  oidc_cache_set_sid(r, sid, NULL, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2983:  if (cfg->session_type != OIDC_SESSION_TYPE_CLIENT_COOKIE) {",
          "2984:   if (oidc_session_load_cache_by_uuid(r, cfg, uuid, &session) != FALSE)",
          "2985:    if (oidc_session_extract(r, &session) != FALSE)",
          "2986:     oidc_revoke_tokens(r, cfg, &session);",
          "2987:  }",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "837: apr_byte_t oidc_session_save(request_rec *r, oidc_session_t *z, apr_byte_t first_time);",
          "838: apr_byte_t oidc_session_kill(request_rec *r, oidc_session_t *z);",
          "839: apr_byte_t oidc_session_free(request_rec *r, oidc_session_t *z);",
          "841: void oidc_session_set_userinfo_jwt(request_rec *r, oidc_session_t *z, const char *userinfo_jwt);",
          "842: const char * oidc_session_get_userinfo_jwt(request_rec *r, oidc_session_t *z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840: apr_byte_t oidc_session_extract(request_rec *r, oidc_session_t *z);",
          "841: apr_byte_t oidc_session_load_cache_by_uuid(request_rec *r, oidc_cfg *c, const char *uuid, oidc_session_t *z);",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  }",
          "129: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: apr_byte_t oidc_session_load_cache_by_uuid(request_rec *r, oidc_cfg *c, const char *uuid, oidc_session_t *z) {",
          "132:  const char *stored_uuid = NULL;",
          "133:  char *s_json = NULL;",
          "134:  apr_byte_t rc = FALSE;",
          "136:  rc = oidc_cache_get_session(r, uuid, &s_json);",
          "138:  if ((rc == TRUE) && (s_json != NULL)) {",
          "139:   rc = oidc_session_decode(r, c, z, s_json, FALSE);",
          "140:   if (rc == TRUE) {",
          "141:    strncpy(z->uuid, uuid, strlen(uuid));",
          "144:    oidc_session_get(r, z, OIDC_SESSION_SESSION_ID, &stored_uuid);",
          "145:    if ((stored_uuid == NULL)",
          "146:      || (apr_strnatcmp(stored_uuid, uuid) != 0)) {",
          "147:     oidc_error(r,",
          "148:       \"cache corruption detected: stored session id (%s) is not equal to requested session id (%s)\",",
          "149:       stored_uuid, uuid);",
          "152:     oidc_cache_set_session(r, z->uuid, NULL, 0);",
          "154:     oidc_session_clear(r, z);",
          "156:     rc = FALSE;",
          "157:    }",
          "158:   }",
          "159:  }",
          "161:  return rc;",
          "162: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "136:    &auth_openidc_module);",
          "139:  apr_byte_t rc = FALSE;",
          "",
          "[Removed Lines]",
          "138:  const char *stored_uuid = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:  if (uuid != NULL) {",
          "174:  }",
          "176:  return rc;",
          "",
          "[Removed Lines]",
          "146:   char *s_json = NULL;",
          "147:   rc = oidc_cache_get_session(r, uuid, &s_json);",
          "148:   if ((rc == TRUE) && (s_json != NULL)) {",
          "149:    rc = oidc_session_decode(r, c, z, s_json, FALSE);",
          "150:    if (rc == TRUE) {",
          "151:     strncpy(z->uuid, uuid, strlen(uuid));",
          "154:     oidc_session_get(r, z, OIDC_SESSION_SESSION_ID, &stored_uuid);",
          "155:     if ((stored_uuid == NULL)",
          "156:       || (apr_strnatcmp(stored_uuid, uuid) != 0)) {",
          "157:      oidc_error(r,",
          "158:        \"cache corruption detected: stored session id (%s) is not equal to requested session id (%s)\",",
          "159:        stored_uuid, uuid);",
          "162:      oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "163:        NULL);",
          "165:      rc = oidc_cache_set_session(r, z->uuid, NULL, 0);",
          "167:      oidc_session_clear(r, z);",
          "169:      rc = FALSE;",
          "170:     }",
          "171:    }",
          "172:   }",
          "",
          "[Added Lines]",
          "179:   rc = oidc_session_load_cache_by_uuid(r, c, uuid, z);",
          "181:   if (rc == FALSE) {",
          "183:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "184:      NULL);",
          "185:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:  return TRUE;",
          "269: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: apr_byte_t oidc_session_extract(request_rec *r, oidc_session_t *z) {",
          "284:  apr_byte_t rc = FALSE;",
          "285:  const char *ses_p_tb_id = NULL, *env_p_tb_id = NULL;",
          "287:  if (z->state == NULL)",
          "288:   goto out;",
          "290:  json_t *j_expires = json_object_get(z->state, OIDC_SESSION_EXPIRY_KEY);",
          "291:  if (j_expires)",
          "292:   z->expiry = apr_time_from_sec(json_integer_value(j_expires));",
          "295:  if (apr_time_now() > z->expiry) {",
          "297:   oidc_warn(r, \"session restored from cache has expired\");",
          "298:   oidc_session_clear(r, z);",
          "300:   goto out;",
          "301:  }",
          "303:  oidc_session_get(r, z, OIDC_SESSION_PROVIDED_TOKEN_BINDING_KEY,",
          "304:    &ses_p_tb_id);",
          "306:  if (ses_p_tb_id != NULL) {",
          "307:   env_p_tb_id = oidc_util_get_provided_token_binding_id(r);",
          "308:   if ((env_p_tb_id == NULL)",
          "309:     || (apr_strnatcmp(env_p_tb_id, ses_p_tb_id) != 0)) {",
          "310:    oidc_error(r,",
          "311:      \"the Provided Token Binding ID stored in the session doesn't match the one presented by the user agent\");",
          "312:    oidc_session_clear(r, z);",
          "313:   }",
          "314:  }",
          "316:  oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY,",
          "317:    &z->remote_user);",
          "318:  oidc_session_get(r, z, OIDC_SESSION_SID_KEY,",
          "319:    &z->sid);",
          "321:  rc = TRUE;",
          "323: out:",
          "325:  return rc;",
          "326: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:    &auth_openidc_module);",
          "278:  apr_byte_t rc = FALSE;",
          "282:  oidc_session_t *z = (*zz = apr_pcalloc(r->pool, sizeof(oidc_session_t)));",
          "",
          "[Removed Lines]",
          "279:  const char *ses_p_tb_id = NULL, *env_p_tb_id = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "294:   rc = oidc_session_load_cookie(r, c, z);",
          "331:  return rc;",
          "332: }",
          "",
          "[Removed Lines]",
          "296:  if ((rc == TRUE) && (z->state != NULL)) {",
          "298:   json_t *j_expires = json_object_get(z->state, OIDC_SESSION_EXPIRY_KEY);",
          "299:   if (j_expires)",
          "300:    z->expiry = apr_time_from_sec(json_integer_value(j_expires));",
          "303:   if (apr_time_now() > z->expiry) {",
          "305:    oidc_warn(r, \"session restored from cache has expired\");",
          "306:    oidc_session_clear(r, z);",
          "308:   } else {",
          "310:    oidc_session_get(r, z, OIDC_SESSION_PROVIDED_TOKEN_BINDING_KEY,",
          "311:      &ses_p_tb_id);",
          "313:    if (ses_p_tb_id != NULL) {",
          "314:     env_p_tb_id = oidc_util_get_provided_token_binding_id(r);",
          "315:     if ((env_p_tb_id == NULL)",
          "316:       || (apr_strnatcmp(env_p_tb_id, ses_p_tb_id) != 0)) {",
          "317:      oidc_error(r,",
          "318:        \"the Provided Token Binding ID stored in the session doesn't match the one presented by the user agent\");",
          "319:      oidc_session_clear(r, z);",
          "320:     }",
          "321:    }",
          "323:    oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY,",
          "324:      &z->remote_user);",
          "325:    oidc_session_get(r, z, OIDC_SESSION_SID_KEY,",
          "326:      &z->sid);",
          "328:   }",
          "329:  }",
          "",
          "[Added Lines]",
          "352:  if (rc == TRUE)",
          "353:   rc = oidc_session_extract(r, z);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d361569ed3da447d78467ecaaa7889722156645e",
      "candidate_info": {
        "commit_hash": "d361569ed3da447d78467ecaaa7889722156645e",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d361569ed3da447d78467ecaaa7889722156645e",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "URL encode logout url in session management JS; thanks Paolo Battino\n\nbump to 2.4.1rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3254:    \"            }\\n\"",
          "3255:    \"     } else {\\n\"",
          "3256:    \"              // either 'changed' + active session, or 'error': enforce a logout\\n\"",
          "3258:    \"          }\\n\"",
          "3259:    \"        }\\n\"",
          "3260:    \"      }\\n\"",
          "",
          "[Removed Lines]",
          "3257:    \"              window.top.location.replace('%s?logout=' + window.top.location.href);\\n\"",
          "",
          "[Added Lines]",
          "3257:    \"              window.top.location.replace('%s?logout=' + encodeURIComponent(window.top.location.href));\\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b3bfd757da970b9b11c5304c4498145de60683c",
      "candidate_info": {
        "commit_hash": "1b3bfd757da970b9b11c5304c4498145de60683c",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/1b3bfd757da970b9b11c5304c4498145de60683c",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/parse.c"
        ],
        "message": "fix parsing of cookie name in OIDCOAuthAcceptTokenAs\n\nwhen the cookie option is not listed last; bump to 2.3.9rc7\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/parse.c||src/parse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858:  } else {",
          "859:   p = OIDC_OAUTH_ACCEPT_TOKEN_IN_COOKIE_NAME_DEFAULT;",
          "860:  }",
          "864:  rv = oidc_valid_string_option(pool, s, options);",
          "865:  if (rv != NULL)",
          "",
          "[Removed Lines]",
          "861:  apr_hash_set(list_options, OIDC_OAUTH_ACCEPT_TOKEN_IN_OPTION_COOKIE_NAME,",
          "862:    APR_HASH_KEY_STRING, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "871:  else",
          "874:  return NULL;",
          "875: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:  if (v == OIDC_OAUTH_ACCEPT_TOKEN_IN_COOKIE) {",
          "873:   apr_hash_set(list_options, OIDC_OAUTH_ACCEPT_TOKEN_IN_OPTION_COOKIE_NAME,",
          "874:     APR_HASH_KEY_STRING, p);",
          "875:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}