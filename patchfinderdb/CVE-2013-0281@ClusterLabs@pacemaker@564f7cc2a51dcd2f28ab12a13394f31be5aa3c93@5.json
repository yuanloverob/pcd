{
  "cve_id": "CVE-2013-0281",
  "cve_desc": "Pacemaker 1.1.10, when remote Cluster Information Base (CIB) configuration or resource management is enabled, does not limit the duration of connections to the blocking sockets, which allows remote attackers to cause a denial of service (connection blocking).",
  "repo": "ClusterLabs/pacemaker",
  "patch_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
  "patch_info": {
    "commit_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "repo": "ClusterLabs/pacemaker",
    "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "files": [
      "cib/callbacks.c",
      "cib/callbacks.h",
      "cib/notify.c",
      "cib/remote.c",
      "include/crm_internal.h",
      "lib/cib/cib_remote.c",
      "lib/common/mainloop.c",
      "lib/common/remote.c",
      "tools/crm_mon.c"
    ],
    "message": "High: core: Internal tls api improvements for reuse with future LRMD tls backend.",
    "before_after_code_files": [
      "cib/callbacks.c||cib/callbacks.c",
      "cib/callbacks.h||cib/callbacks.h",
      "cib/notify.c||cib/notify.c",
      "cib/remote.c||cib/remote.c",
      "include/crm_internal.h||include/crm_internal.h",
      "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
      "lib/common/mainloop.c||lib/common/mainloop.c",
      "lib/common/remote.c||lib/common/remote.c",
      "tools/crm_mon.c||tools/crm_mon.c"
    ]
  },
  "patch_diff": {
    "cib/callbacks.c||cib/callbacks.c": [
      "File: cib/callbacks.c -> cib/callbacks.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "347:         int rid = 0;",
      "349:         if(sync_reply) {",
      "356:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "358:         } else {",
      "359:             crm_trace(\"Sending an event to %s %s\",",
      "",
      "[Removed Lines]",
      "350:             CRM_LOG_ASSERT(client_obj->request_id);",
      "352:             rid = client_obj->request_id;",
      "353:             client_obj->request_id = 0;",
      "355:             crm_trace(\"Sending response %d to %s %s\",",
      "",
      "[Added Lines]",
      "350:             if (client_obj->ipc) {",
      "351:                 CRM_LOG_ASSERT(client_obj->request_id);",
      "353:                 rid = client_obj->request_id;",
      "354:                 client_obj->request_id = 0;",
      "356:                 crm_trace(\"Sending response %d to %s %s\",",
      "358:             } else {",
      "359:                 crm_trace(\"Sending response to %s %s\",",
      "360:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "361:             }",
      "",
      "---------------"
    ],
    "cib/callbacks.h||cib/callbacks.h": [
      "File: cib/callbacks.h -> cib/callbacks.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     char *name;",
      "42:     char *callback_id;",
      "43:     char *user;",
      "44:     int request_id;",
      "46:     qb_ipcs_connection_t *ipc;",
      "48: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "49:     gnutls_session *session;",
      "50: #else",
      "51:     void *session;",
      "52: #endif",
      "53:     gboolean encrypted;",
      "54:     mainloop_io_t *remote;",
      "56:     unsigned long num_calls;",
      "58:     int pre_notify;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     char *recv_buf;",
      "51:     gboolean handshake_complete;",
      "56:     gboolean remote_auth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     int confirmations;",
      "61:     int replace;",
      "62:     int diffs;",
      "64:     GList *delegated_calls;",
      "65: } cib_client_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     int remote_auth_timeout;",
      "",
      "---------------"
    ],
    "cib/notify.c||cib/notify.c": [
      "File: cib/notify.c -> cib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     CRM_CHECK(client != NULL, return TRUE);",
      "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
      "87:         crm_warn(\"Skipping client with NULL channel\");",
      "88:         return FALSE;",
      "89:     }",
      "",
      "[Removed Lines]",
      "86:     if (client->ipc == NULL) {",
      "",
      "[Added Lines]",
      "86:     if (client->ipc == NULL && client->session == NULL) {",
      "",
      "---------------"
    ],
    "cib/remote.c||cib/remote.c": [
      "File: cib/remote.c -> cib/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: #  endif",
      "61: #endif",
      "67: extern int remote_tls_fd;",
      "68: extern gboolean cib_shutdown_flag;",
      "",
      "[Removed Lines]",
      "63: #ifdef HAVE_DECL_NANOSLEEP",
      "64: #  include <time.h>",
      "65: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "74: #  define DH_BITS 1024",
      "75: gnutls_dh_params dh_params;",
      "77: static void",
      "78: debug_log(int level, const char *str)",
      "79: {",
      "80:     fputs(str, stderr);",
      "81: }",
      "85: #endif",
      "87: int num_clients;",
      "88: int authenticate_user(const char *user, const char *passwd);",
      "89: int cib_remote_listen(gpointer data);",
      "",
      "[Removed Lines]",
      "76: extern gnutls_anon_server_credentials anon_cred_s;",
      "83: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "72: gnutls_anon_server_credentials anon_cred_s;",
      "80: #define REMOTE_AUTH_TIMEOUT 10000",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:     return FALSE;",
      "216: }",
      "218: int",
      "219: cib_remote_listen(gpointer data)",
      "220: {",
      "222:     int csock = 0;",
      "223:     unsigned laddr;",
      "226:     struct sockaddr_in addr;",
      "227:     int ssock = *(int *)data;",
      "229: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "230:     gnutls_session *session = NULL;",
      "231: #endif",
      "232:     cib_client_t *new_client = NULL;",
      "243:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
      "244:         {",
      "245:             .dispatch = cib_remote_msg,",
      "246:             .destroy = cib_remote_connection_destroy,",
      "250:     laddr = sizeof(addr);",
      "251:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
      "",
      "[Removed Lines]",
      "221:     int lpc = 0;",
      "224:     time_t now = 0;",
      "225:     time_t start = time(NULL);",
      "234:     xmlNode *login = NULL;",
      "235:     const char *user = NULL;",
      "236:     const char *pass = NULL;",
      "237:     const char *tmp = NULL;",
      "239: #ifdef HAVE_DECL_NANOSLEEP",
      "241: #endif",
      "247:         };",
      "",
      "[Added Lines]",
      "213: static gboolean",
      "214: cib_remote_auth(xmlNode *login)",
      "215: {",
      "216:     const char *user = NULL;",
      "217:     const char *pass = NULL;",
      "218:     const char *tmp = NULL;",
      "220:     crm_log_xml_info(login, \"Login: \");",
      "221:     if (login == NULL) {",
      "222:         return FALSE;",
      "223:     }",
      "225:     tmp = crm_element_name(login);",
      "226:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "227:         crm_err(\"Wrong tag: %s\", tmp);",
      "228:         return FALSE;",
      "229:     }",
      "231:     tmp = crm_element_value(login, \"op\");",
      "232:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "233:         crm_err(\"Wrong operation: %s\", tmp);",
      "234:         return FALSE;",
      "235:     }",
      "237:     user = crm_element_value(login, \"user\");",
      "238:     pass = crm_element_value(login, \"password\");",
      "240:     if (!user || !pass) {",
      "241:         crm_err(\"missing auth credentials\");",
      "242:         return FALSE;",
      "243:     }",
      "248:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "249:         crm_err(\"User is not a member of the required group\");",
      "250:         return FALSE;",
      "252:     } else if (authenticate_user(user, pass) == FALSE) {",
      "253:         crm_err(\"PAM auth failed\");",
      "254:         return FALSE;",
      "255:     }",
      "257:     return TRUE;",
      "258: }",
      "260: static gboolean",
      "261: remote_auth_timeout_cb(gpointer data)",
      "262: {",
      "263:     cib_client_t *client = data;",
      "265:     client->remote_auth_timeout = 0;",
      "267:     if (client->remote_auth == TRUE) {",
      "268:         return FALSE;",
      "269:     }",
      "271:     mainloop_del_fd(client->remote);",
      "272:     crm_err(\"Remote client authentication timed out\");",
      "274:     return FALSE;",
      "275: }",
      "283:     int flag;",
      "294:         };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "257:         return TRUE;",
      "258:     }",
      "260:     if (ssock == remote_tls_fd) {",
      "261: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "264:         if (session == NULL) {",
      "265:             crm_err(\"TLS session creation failed\");",
      "266:             close(csock);",
      "",
      "[Removed Lines]",
      "263:         session = create_tls_session(csock, GNUTLS_SERVER);",
      "",
      "[Added Lines]",
      "307:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
      "308:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "309:             crm_err( \"fcntl() write failed\");",
      "310:             close(csock);",
      "311:             return TRUE;",
      "312:         }",
      "313:     } else {",
      "314:         crm_err( \"fcntl() read failed\");",
      "315:         close(csock);",
      "316:         return TRUE;",
      "317:     }",
      "322:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "269: #endif",
      "270:     }",
      "327:     num_clients++;",
      "328:     new_client = calloc(1, sizeof(cib_client_t));",
      "332:     new_client->id = crm_generate_uuid();",
      "338:     new_client->callback_id = NULL;",
      "339:     if (ssock == remote_tls_fd) {",
      "340: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "341:         new_client->encrypted = TRUE;",
      "",
      "[Removed Lines]",
      "272:     do {",
      "273:         crm_trace(\"Iter: %d\", lpc++);",
      "274:         if (ssock == remote_tls_fd) {",
      "275: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "276:             login = crm_recv_remote_msg(session, TRUE);",
      "277: #endif",
      "278:         } else {",
      "279:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
      "280:         }",
      "281:         if (login != NULL) {",
      "282:             break;",
      "283:         }",
      "284: #ifdef HAVE_DECL_NANOSLEEP",
      "285:         nanosleep(&sleepfast, NULL);",
      "286: #else",
      "287:         sleep(1);",
      "288: #endif",
      "289:         now = time(NULL);",
      "292:     } while (login == NULL && (start - now) < 4);",
      "294:     crm_log_xml_info(login, \"Login: \");",
      "295:     if (login == NULL) {",
      "296:         goto bail;",
      "297:     }",
      "299:     tmp = crm_element_name(login);",
      "300:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "301:         crm_err(\"Wrong tag: %s\", tmp);",
      "302:         goto bail;",
      "303:     }",
      "305:     tmp = crm_element_value(login, \"op\");",
      "306:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "307:         crm_err(\"Wrong operation: %s\", tmp);",
      "308:         goto bail;",
      "309:     }",
      "311:     user = crm_element_value(login, \"user\");",
      "312:     pass = crm_element_value(login, \"password\");",
      "317:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "318:         crm_err(\"User is not a member of the required group\");",
      "319:         goto bail;",
      "321:     } else if (authenticate_user(user, pass) == FALSE) {",
      "322:         crm_err(\"PAM auth failed\");",
      "323:         goto bail;",
      "324:     }",
      "329:     new_client->name = crm_element_value_copy(login, \"name\");",
      "331:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
      "334: #if ENABLE_ACL",
      "335:     new_client->user = strdup(user);",
      "336: #endif",
      "",
      "[Added Lines]",
      "336:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "345:         new_client->session = GINT_TO_POINTER(csock);",
      "346:     }",
      "355:     new_client->remote = mainloop_add_fd(",
      "356:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
      "358:     g_hash_table_insert(client_list, new_client->id, new_client);",
      "360:     return TRUE;",
      "373: }",
      "375: void",
      "376: cib_remote_connection_destroy(gpointer user_data)",
      "377: {",
      "378:     cib_client_t *client = user_data;",
      "380:     if (client == NULL) {",
      "381:         return;",
      "",
      "[Removed Lines]",
      "348:     free_xml(login);",
      "349:     login = create_xml_node(NULL, \"cib_result\");",
      "350:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "351:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
      "352:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
      "353:     free_xml(login);",
      "362:   bail:",
      "363:     if (ssock == remote_tls_fd) {",
      "364: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "365:         gnutls_bye(*session, GNUTLS_SHUT_RDWR);",
      "366:         gnutls_deinit(*session);",
      "367:         gnutls_free(session);",
      "368: #endif",
      "369:     }",
      "370:     close(csock);",
      "371:     free_xml(login);",
      "372:     return TRUE;",
      "",
      "[Added Lines]",
      "359:     int csock = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "393:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
      "394:     num_clients--;",
      "395:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
      "396:     free(client->name);",
      "397:     free(client->callback_id);",
      "398:     free(client->id);",
      "399:     free(client->user);",
      "400:     free(client);",
      "401:     crm_trace(\"Freed the cib client\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     if (client->remote_auth_timeout) {",
      "378:         g_source_remove(client->remote_auth_timeout);",
      "379:     }",
      "381:     if (client->encrypted) {",
      "382: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "383:         if (client->session) {",
      "384:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
      "385:             csock = GPOINTER_TO_INT(sock_ptr);",
      "386:             if (client->handshake_complete) {",
      "387:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
      "388:             }",
      "389:             gnutls_deinit(*client->session);",
      "390:             gnutls_free(client->session);",
      "391:         }",
      "392: #endif",
      "393:     } else {",
      "394:         csock = GPOINTER_TO_INT(client->session);",
      "395:     }",
      "396:     client->session = NULL;",
      "398:     if (csock > 0) {",
      "399:         close(csock);",
      "400:     }",
      "406:     free(client->recv_buf);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "406:     return;",
      "407: }",
      "411: {",
      "412:     const char *value = NULL;",
      "423:     value = crm_element_name(command);",
      "424:     if (safe_str_neq(value, \"cib_command\")) {",
      "425:         crm_log_xml_trace(command, \"Bad command: \");",
      "427:     }",
      "429:     if (client->name == NULL) {",
      "",
      "[Removed Lines]",
      "409: int",
      "410: cib_remote_msg(gpointer data)",
      "413:     xmlNode *command = NULL;",
      "414:     cib_client_t *client = data;",
      "416:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "418:     command = crm_recv_remote_msg(client->session, client->encrypted);",
      "419:     if (command == NULL) {",
      "420:         return -1;",
      "421:     }",
      "426:         goto bail;",
      "",
      "[Added Lines]",
      "416: static void",
      "417: cib_handle_remote_msg(cib_client_t *client, xmlNode *command)",
      "424:         return;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "473:     crm_log_xml_trace(command, \"Remote command: \");",
      "474:     cib_common_callback_worker(0, 0, command, client, TRUE);",
      "478:     return 0;",
      "479: }",
      "",
      "[Removed Lines]",
      "475:   bail:",
      "476:     free_xml(command);",
      "477:     command = NULL;",
      "",
      "[Added Lines]",
      "473: }",
      "475: int",
      "476: cib_remote_msg(gpointer data)",
      "477: {",
      "478:     xmlNode *command = NULL;",
      "479:     cib_client_t *client = data;",
      "480:     int disconnected = 0;",
      "481:     int timeout = client->remote_auth ? -1 : 1000;",
      "483:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "485: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "486:     if (client->encrypted && (client->handshake_complete == FALSE)) {",
      "487:         int rc = 0;",
      "491:         do {",
      "492:             rc = gnutls_handshake(*client->session);",
      "494:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
      "495:                 crm_err(\"Remote cib tls handshake failed\");",
      "496:                 return -1;",
      "497:             }",
      "498:         } while (rc == GNUTLS_E_INTERRUPTED);",
      "500:         if (rc == 0) {",
      "501:             crm_debug(\"Remote cib tls handshake completed\");",
      "502:             client->handshake_complete = TRUE;",
      "503:             if (client->remote_auth_timeout) {",
      "504:                 g_source_remove(client->remote_auth_timeout);",
      "505:             }",
      "507:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
      "508:         }",
      "509:         return 0;",
      "510:     }",
      "511: #endif",
      "513:     crm_recv_remote_msg(client->session, &client->recv_buf, client->encrypted, timeout, &disconnected);",
      "516:     if (client->remote_auth == FALSE) {",
      "517:         xmlNode *reg;",
      "518: #if ENABLE_ACL",
      "519:         const char *user = NULL;",
      "520: #endif",
      "521:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "522:         if (cib_remote_auth(command) == FALSE) {",
      "523:             free_xml(command);",
      "524:             return -1;",
      "525:         }",
      "527:         crm_debug(\"remote connection authenticated successfully\");",
      "528:         client->remote_auth = TRUE;",
      "529:         g_source_remove(client->remote_auth_timeout);",
      "530:         client->remote_auth_timeout = 0;",
      "531:         client->name = crm_element_value_copy(command, \"name\");",
      "533: #if ENABLE_ACL",
      "534:         user = crm_element_value(command, \"user\");",
      "535:         if (user) {",
      "536:            new_client->user = strdup(user);",
      "537:         }",
      "538: #endif",
      "541:         reg = create_xml_node(NULL, \"cib_result\");",
      "542:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "543:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
      "544:         crm_send_remote_msg(client->session, reg, client->encrypted);",
      "545:         free_xml(reg);",
      "546:         free_xml(command);",
      "547:     }",
      "549:     command = crm_parse_remote_buffer(&client->recv_buf);",
      "550:     while (command) {",
      "551:         crm_trace(\"command received\");",
      "552:         cib_handle_remote_msg(client, command);",
      "553:         free_xml(command);",
      "554:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "555:     }",
      "557:     if (disconnected) {",
      "558:         crm_trace(\"disconnected while receiving remote cib msg.\");",
      "559:         return -1;",
      "560:     }",
      "",
      "---------------"
    ],
    "include/crm_internal.h||include/crm_internal.h": [
      "File: include/crm_internal.h -> include/crm_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "199: long long crm_int_helper(const char *text, char **end_text);",
      "200: char *crm_concat(const char *prefix, const char *suffix, char join);",
      "201: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
      "205: const char *daemon_option(const char *option);",
      "206: void set_daemon_option(const char *option, const char *value);",
      "",
      "[Removed Lines]",
      "202: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
      "203: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "",
      "[Added Lines]",
      "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
      "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
      "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
      "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
      "210: int crm_remote_tcp_connect(const char *host, int port);",
      "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
      "232: void *crm_create_anon_tls_session(int sock, int type, void *credentials);",
      "233: #endif",
      "235: #define REMOTE_MSG_TERMINATOR \"\\r\\n\\r\\n\"",
      "",
      "---------------"
    ],
    "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
      "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "39: #  undef KEYFILE",
      "40: #  include <gnutls/gnutls.h>",
      "44: const int kx_prio[] = {",
      "45:     GNUTLS_KX_ANON_DH,",
      "46:     0",
      "47: };",
      "49: #else",
      "50: typedef void gnutls_session;",
      "51: #endif",
      "",
      "[Removed Lines]",
      "41: extern gnutls_anon_client_credentials anon_cred_c;",
      "42: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "41: gnutls_anon_client_credentials anon_cred_c;",
      "49: static gboolean remote_gnutls_credentials_init = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     gnutls_session *session;",
      "62:     mainloop_io_t *source;",
      "63:     char *token;",
      "64: };",
      "66: typedef struct cib_remote_opaque_s {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     char *recv_buf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76: } cib_remote_opaque_t;",
      "78: void cib_remote_connection_destroy(gpointer user_data);",
      "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
      "81: int cib_remote_signoff(cib_t * cib);",
      "82: int cib_remote_free(cib_t * cib);",
      "",
      "[Removed Lines]",
      "79: int cib_remote_dispatch(gpointer user_data);",
      "",
      "[Added Lines]",
      "81: int cib_remote_callback_dispatch(gpointer user_data);",
      "82: int cib_remote_command_dispatch(gpointer user_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158: {",
      "159:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "166: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "167:     if (private->command.encrypted) {",
      "178:     }",
      "179: #endif",
      "180:     return 0;",
      "181: }",
      "183: static int",
      "185: {",
      "186:     int sock;",
      "187:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "189:     int rc = 0;",
      "196:     xmlNode *answer = NULL;",
      "197:     xmlNode *login = NULL;",
      "205:     connection->socket = 0;",
      "206:     connection->session = NULL;",
      "259:     }",
      "261:     if (connection->encrypted) {",
      "263: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "272:             cib_tls_close(cib);",
      "273:             return -1;",
      "274:         }",
      "",
      "[Removed Lines]",
      "163:     close(private->command.socket);",
      "164:     close(private->callback.socket);",
      "168:         gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "169:         gnutls_deinit(*(private->command.session));",
      "170:         gnutls_free(private->command.session);",
      "172:         gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "173:         gnutls_deinit(*(private->callback.session));",
      "174:         gnutls_free(private->callback.session);",
      "176:         gnutls_anon_free_client_credentials(anon_cred_c);",
      "177:         gnutls_global_deinit();",
      "184: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection)",
      "188:     struct sockaddr_in addr;",
      "190:     char *server = private->server;",
      "192:     int ret_ga;",
      "193:     struct addrinfo *res;",
      "194:     struct addrinfo hints;",
      "199:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
      "200:         {",
      "201:             .dispatch = cib_remote_dispatch,",
      "202:             .destroy = cib_remote_connection_destroy,",
      "203:         };",
      "209:     sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);",
      "210:     if (sock == -1) {",
      "211:         crm_perror(LOG_ERR, \"Socket creation failed\");",
      "212:         return -1;",
      "213:     }",
      "216:     bzero(&hints, sizeof(struct addrinfo));",
      "217:     hints.ai_flags = AI_CANONNAME;",
      "218:     hints.ai_family = AF_INET;",
      "219:     hints.ai_socktype = SOCK_RAW;",
      "221:     if (hints.ai_family == AF_INET6) {",
      "222:         hints.ai_protocol = IPPROTO_ICMPV6;",
      "223:     } else {",
      "224:         hints.ai_protocol = IPPROTO_ICMP;",
      "225:     }",
      "227:     crm_debug(\"Looking up %s\", server);",
      "228:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "229:     if (ret_ga) {",
      "230:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "231:         close(sock);",
      "232:         return -1;",
      "233:     }",
      "235:     if (res->ai_canonname) {",
      "236:         server = res->ai_canonname;",
      "237:     }",
      "239:     crm_debug(\"Got address %s for %s\", server, private->server);",
      "241:     if (!res->ai_addr) {",
      "242:         fprintf(stderr, \"getaddrinfo failed\");",
      "243:         crm_exit(1);",
      "244:     }",
      "245: #if 1",
      "246:     memcpy(&addr, res->ai_addr, res->ai_addrlen);",
      "247: #else",
      "249:     memset(&addr, 0, sizeof(addr));",
      "250:     addr.sin_family = AF_INET;",
      "251:     addr.sin_addr.s_addr = inet_addr(server);",
      "252: #endif",
      "253:     addr.sin_port = htons(private->port);",
      "255:     if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {",
      "256:         crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);",
      "257:         close(sock);",
      "258:         return -1;",
      "264:         gnutls_global_init();",
      "265:         gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "268:         connection->session = create_tls_session(sock, GNUTLS_CLIENT);",
      "269:         if (connection->session == NULL) {",
      "270:             crm_perror(LOG_ERR, \"Session creation for %s:%d failed\", server, private->port);",
      "271:             close(sock);",
      "",
      "[Added Lines]",
      "166:         if (private->command.session) {",
      "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "168:             gnutls_deinit(*(private->command.session));",
      "169:             gnutls_free(private->command.session);",
      "170:         }",
      "172:         if (private->callback.session) {",
      "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "174:             gnutls_deinit(*(private->callback.session));",
      "175:             gnutls_free(private->callback.session);",
      "176:         }",
      "177:         private->command.session = NULL;",
      "178:         private->callback.session = NULL;",
      "179:         if (remote_gnutls_credentials_init) {",
      "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
      "181:             gnutls_global_deinit();",
      "182:             remote_gnutls_credentials_init = FALSE;",
      "183:         }",
      "187:     if (private->command.socket) {",
      "189:         close(private->command.socket);",
      "190:     }",
      "191:     if (private->callback.socket) {",
      "193:         close(private->callback.socket);",
      "194:     }",
      "195:     private->command.socket = 0;",
      "196:     private->callback.socket = 0;",
      "198:     free(private->command.recv_buf);",
      "199:     free(private->callback.recv_buf);",
      "200:     private->command.recv_buf = NULL;",
      "201:     private->callback.recv_buf = NULL;",
      "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
      "212:     int disconnected = 0;",
      "217:     static struct mainloop_fd_callbacks cib_fd_callbacks = { 0, };",
      "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
      "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
      "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
      "226:     if (sock <= 0) {",
      "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
      "230:     connection->socket = sock;",
      "234:         if (remote_gnutls_credentials_init == FALSE) {",
      "235:             gnutls_global_init();",
      "236:             gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "237:             remote_gnutls_credentials_init = TRUE;",
      "238:         }",
      "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
      "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
      "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
      "246:             gnutls_deinit(*connection->session);",
      "247:             gnutls_free(connection->session);",
      "248:             connection->session = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "289:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
      "290:     free_xml(login);",
      "293:     crm_log_xml_trace(answer, \"Reply\");",
      "294:     if (answer == NULL) {",
      "295:         rc = -EPROTO;",
      "",
      "[Removed Lines]",
      "292:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
      "",
      "[Added Lines]",
      "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
      "271:     if (disconnected) {",
      "272:         rc = -ENOTCONN;",
      "273:     }",
      "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "310:             connection->token = strdup(tmp_ticket);",
      "311:         }",
      "312:     }",
      "314:     if (rc != 0) {",
      "315:         cib_tls_close(cib);",
      "316:     }",
      "319:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
      "320:     return rc;",
      "321: }",
      "",
      "[Removed Lines]",
      "318:     connection->socket = sock;",
      "",
      "[Added Lines]",
      "297:     free_xml(answer);",
      "298:     answer = NULL;",
      "302:         return rc;",
      "305:     crm_trace(\"remote client connection established\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "331: }",
      "333: int",
      "335: {",
      "336:     cib_t *cib = user_data;",
      "337:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "339:     xmlNode *msg = NULL;",
      "342:     crm_info(\"Message on callback channel\");",
      "359:         free_xml(msg);",
      "361:     }",
      "363: }",
      "365: int",
      "",
      "[Removed Lines]",
      "334: cib_remote_dispatch(gpointer user_data)",
      "340:     const char *type = NULL;",
      "343:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
      "345:     type = crm_element_value(msg, F_TYPE);",
      "346:     crm_trace(\"Activating %s callbacks...\", type);",
      "348:     if (safe_str_eq(type, T_CIB)) {",
      "349:         cib_native_callback(cib, msg, 0, 0);",
      "351:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "352:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "354:     } else {",
      "355:         crm_err(\"Unknown message type: %s\", type);",
      "356:     }",
      "358:     if (msg != NULL) {",
      "360:         return 0;",
      "362:     return -1;",
      "",
      "[Added Lines]",
      "321: cib_remote_command_dispatch(gpointer user_data)",
      "322: {",
      "323:     int disconnected = 0;",
      "324:     cib_t *cib = user_data;",
      "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
      "329:     free(private->command.recv_buf);",
      "330:     private->command.recv_buf = NULL;",
      "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
      "333:     if (disconnected) {",
      "334:         return -1;",
      "335:     }",
      "336:     return 0;",
      "337: }",
      "339: int",
      "340: cib_remote_callback_dispatch(gpointer user_data)",
      "346:     int disconnected = 0;",
      "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
      "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "353:     while (msg) {",
      "354:         const char *type = crm_element_value(msg, F_TYPE);",
      "355:         crm_trace(\"Activating %s callbacks...\", type);",
      "357:         if (safe_str_eq(type, T_CIB)) {",
      "358:             cib_native_callback(cib, msg, 0, 0);",
      "360:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "361:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "363:         } else {",
      "364:             crm_err(\"Unknown message type: %s\", type);",
      "365:         }",
      "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "369:     }",
      "371:     if (disconnected) {",
      "372:         return -1;",
      "375:     return 0;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "394:     }",
      "396:     if (rc == pcmk_ok) {",
      "398:     }",
      "400:     if (rc == pcmk_ok) {",
      "402:     }",
      "404:     if (rc == pcmk_ok) {",
      "",
      "[Removed Lines]",
      "397:         rc = cib_tls_signon(cib, &(private->command));",
      "401:         rc = cib_tls_signon(cib, &(private->callback));",
      "",
      "[Added Lines]",
      "410:         rc = cib_tls_signon(cib, &(private->command), FALSE);",
      "414:         rc = cib_tls_signon(cib, &(private->callback), TRUE);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "463:     return rc;",
      "464: }",
      "482: int",
      "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
      "484:                       xmlNode * data, xmlNode ** output_data, int call_options, const char *name)",
      "485: {",
      "486:     int rc = pcmk_ok;",
      "488:     xmlNode *op_msg = NULL;",
      "489:     xmlNode *op_reply = NULL;",
      "491:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "497:     if (cib->state == cib_disconnected) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "",
      "[Removed Lines]",
      "466: static gboolean timer_expired = FALSE;",
      "467: static struct timer_rec_s *sync_timer = NULL;",
      "468: static gboolean",
      "469: cib_timeout_handler(gpointer data)",
      "470: {",
      "471:     struct timer_rec_s *timer = data;",
      "473:     timer_expired = TRUE;",
      "474:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
      "479:     return TRUE;",
      "480: }",
      "493:     if (sync_timer == NULL) {",
      "494:         sync_timer = calloc(1, sizeof(struct timer_rec_s));",
      "495:     }",
      "",
      "[Added Lines]",
      "484:     int disconnected = 0;",
      "485:     int remaining_time = 0;",
      "486:     time_t start_time;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "524:     }",
      "526:     crm_trace(\"Sending %s message to CIB service\", op);",
      "528:     free_xml(op_msg);",
      "530:     if ((call_options & cib_discard_reply)) {",
      "",
      "[Removed Lines]",
      "527:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "",
      "[Added Lines]",
      "523:     if (!(call_options & cib_sync_call)) {",
      "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
      "525:     } else {",
      "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "527:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "538:     crm_trace(\"Waiting for a syncronous reply\");",
      "551:         int reply_id = -1;",
      "552:         int msg_id = cib->call_id;",
      "556:             break;",
      "557:         }",
      "559:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
      "565:         if (reply_id == msg_id) {",
      "566:             break;",
      "",
      "[Removed Lines]",
      "540:     if (cib->call_timeout > 0) {",
      "544:         timer_expired = FALSE;",
      "545:         sync_timer->call_id = cib->call_id;",
      "546:         sync_timer->timeout = cib->call_timeout * 1000;",
      "547:         sync_timer->ref = g_timeout_add(sync_timer->timeout, cib_timeout_handler, sync_timer);",
      "548:     }",
      "550:     while (timer_expired == FALSE) {",
      "554:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
      "555:         if (op_reply == NULL) {",
      "560:         CRM_CHECK(reply_id > 0, free_xml(op_reply);",
      "561:                   if (sync_timer->ref > 0) {",
      "562:                   g_source_remove(sync_timer->ref); sync_timer->ref = 0;}",
      "563:                   return -ENOMSG) ;",
      "",
      "[Added Lines]",
      "540:     start_time = time(NULL);",
      "541:     remaining_time = cib->call_timeout ? cib->call_timeout : 60;",
      "543:     while (remaining_time > 0 && !disconnected) {",
      "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
      "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
      "550:         if (!op_reply) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "580:         free_xml(op_reply);",
      "581:         op_reply = NULL;",
      "591:     }",
      "",
      "[Removed Lines]",
      "582:     }",
      "584:     if (sync_timer->ref > 0) {",
      "585:         g_source_remove(sync_timer->ref);",
      "586:         sync_timer->ref = 0;",
      "587:     }",
      "589:     if (timer_expired) {",
      "590:         return -ETIME;",
      "",
      "[Added Lines]",
      "575:         remaining_time = time(NULL) - start_time;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "600:         crm_err(\"No reply message - empty\");",
      "601:         return -ENOMSG;",
      "602:     }",
      "",
      "[Removed Lines]",
      "599:     if (op_reply == NULL) {",
      "",
      "[Added Lines]",
      "584:     if (disconnected) {",
      "585:         crm_err(\"Disconnected while waiting for reply.\");",
      "586:         return -ENOTCONN;",
      "587:     } else if (op_reply == NULL) {",
      "",
      "---------------"
    ],
    "lib/common/mainloop.c||lib/common/mainloop.c": [
      "File: lib/common/mainloop.c -> lib/common/mainloop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     source->trigger = FALSE;",
      "179:     if (source->id > 0) {",
      "180:         g_source_remove(source->id);",
      "181:     }",
      "182:     return TRUE;",
      "183: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         source->id = 0;",
      "",
      "---------------"
    ],
    "lib/common/remote.c||lib/common/remote.c": [
      "File: lib/common/remote.c -> lib/common/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <sys/stat.h>",
      "26: #include <unistd.h>",
      "27: #include <sys/socket.h>",
      "29: #include <netinet/ip.h>",
      "31: #include <stdlib.h>",
      "32: #include <errno.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <arpa/inet.h>",
      "30: #include <netdb.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: #endif",
      "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "46:     GNUTLS_KX_ANON_DH,",
      "47:     GNUTLS_KX_DHE_RSA,",
      "48:     GNUTLS_KX_DHE_DSS,",
      "",
      "[Removed Lines]",
      "45: const int tls_kx_order[] = {",
      "",
      "[Added Lines]",
      "47: const int anon_tls_kx_order[] = {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     0",
      "51: };",
      "67: {",
      "69:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
      "71:     gnutls_init(session, type);",
      "",
      "[Removed Lines]",
      "53: gnutls_anon_client_credentials anon_cred_c;",
      "54: gnutls_anon_server_credentials anon_cred_s;",
      "55: static char *cib_send_tls(gnutls_session * session, xmlNode * msg);",
      "56: static char *cib_recv_tls(gnutls_session * session);",
      "57: #endif",
      "59: char *cib_recv_plaintext(int sock);",
      "60: char *cib_send_plaintext(int sock, xmlNode * msg);",
      "62: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "63: gnutls_session *create_tls_session(int csock, int type);",
      "65: gnutls_session *",
      "66: create_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */ )",
      "68:     int rc = 0;",
      "",
      "[Added Lines]",
      "55: int",
      "56: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
      "57: {",
      "58:     int rc = 0;",
      "59:     int pollrc = 0;",
      "60:     time_t start = time(NULL);",
      "61:     gnutls_session *session = session_data;",
      "63:     do {",
      "64:         rc = gnutls_handshake(*session);",
      "65:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "66:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
      "67:             if (pollrc < 0) {",
      "69:                 rc = -1;",
      "70:             }",
      "71:         }",
      "72:     } while (((time(NULL) - start) < (timeout_ms/1000)) &&",
      "73:             (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN));",
      "75:     return rc;",
      "76: }",
      "78: void *",
      "79: crm_create_anon_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: #  else",
      "77:     gnutls_set_default_priority(*session);",
      "79: #  endif",
      "80:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
      "81:     switch (type) {",
      "88:     }",
      "100:     return session;",
      "101: }",
      "105: {",
      "113:     }",
      "142:         }",
      "144:     }",
      "148: }",
      "150: static char *",
      "152: {",
      "153:     char *buf = NULL;",
      "155:     int rc = 0;",
      "159:     if (session == NULL) {",
      "161:     }",
      "165:     while (TRUE) {",
      "182:             len += rc;",
      "198:         }",
      "199:     }",
      "204: }",
      "205: #endif",
      "209: {",
      "236:             goto retry;",
      "240:         }",
      "241:     }",
      "245: }",
      "249: {",
      "250:     char *buf = NULL;",
      "252:     ssize_t rc = 0;",
      "253:     ssize_t len = 0;",
      "280:             CRM_ASSERT(buf != NULL);",
      "285:             len += rc;",
      "291:         }",
      "292:     }",
      "297: }",
      "301: {",
      "302:     if (encrypted) {",
      "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "305: #else",
      "306:         CRM_ASSERT(encrypted == FALSE);",
      "307: #endif",
      "308:     } else {",
      "310:     }",
      "311: }",
      "313: xmlNode *",
      "315: {",
      "317:     xmlNode *xml = NULL;",
      "319:     if (encrypted) {",
      "320: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "322: #else",
      "323:         CRM_ASSERT(encrypted == FALSE);",
      "324: #endif",
      "325:     } else {",
      "327:     }",
      "328:     if (reply == NULL || strlen(reply) == 0) {",
      "329:         crm_trace(\"Empty reply\");",
      "335:         }",
      "336:     }",
      "340: }",
      "",
      "[Removed Lines]",
      "78:     gnutls_kx_set_priority(*session, tls_kx_order);",
      "82:         case GNUTLS_SERVER:",
      "83:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_s);",
      "84:             break;",
      "85:         case GNUTLS_CLIENT:",
      "86:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_c);",
      "87:             break;",
      "90:     do {",
      "91:         rc = gnutls_handshake(*session);",
      "92:     } while (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN);",
      "94:     if (rc < 0) {",
      "95:         crm_err(\"Handshake failed: %s\", gnutls_strerror(rc));",
      "96:         gnutls_deinit(*session);",
      "97:         gnutls_free(session);",
      "98:         return NULL;",
      "99:     }",
      "103: static char *",
      "104: cib_send_tls(gnutls_session * session, xmlNode * msg)",
      "106:     char *xml_text = NULL;",
      "108: #  if 0",
      "109:     const char *name = crm_element_name(msg);",
      "111:     if (safe_str_neq(name, \"cib_command\")) {",
      "112:         xmlNodeSetName(msg, \"cib_result\");",
      "114: #  endif",
      "115:     xml_text = dump_xml_unformatted(msg);",
      "116:     if (xml_text != NULL) {",
      "117:         char *unsent = xml_text;",
      "118:         int len = strlen(xml_text);",
      "119:         int rc = 0;",
      "122:         crm_trace(\"Message size: %d\", len);",
      "124:         while (TRUE) {",
      "125:             rc = gnutls_record_send(*session, unsent, len);",
      "126:             crm_debug(\"Sent %d bytes\", rc);",
      "128:             if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "129:                 crm_debug(\"Retry\");",
      "131:             } else if (rc < 0) {",
      "132:                 crm_debug(\"Connection terminated\");",
      "133:                 break;",
      "135:             } else if (rc < len) {",
      "136:                 crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "137:                 len -= rc;",
      "138:                 unsent += rc;",
      "139:             } else {",
      "140:                 break;",
      "141:             }",
      "145:     free(xml_text);",
      "146:     return NULL;",
      "151: cib_recv_tls(gnutls_session * session)",
      "156:     int len = 0;",
      "157:     int chunk_size = 1024;",
      "160:         return NULL;",
      "163:     buf = calloc(1, chunk_size);",
      "166:         errno = 0;",
      "167:         rc = gnutls_record_recv(*session, buf + len, chunk_size);",
      "168:         crm_trace(\"Got %d more bytes. errno=%d\", rc, errno);",
      "170:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "171:             crm_trace(\"Retry\");",
      "173:         } else if (rc == GNUTLS_E_UNEXPECTED_PACKET_LENGTH) {",
      "174:             crm_trace(\"Session disconnected\");",
      "175:             goto bail;",
      "177:         } else if (rc < 0) {",
      "178:             crm_err(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "179:             goto bail;",
      "181:         } else if (rc == chunk_size) {",
      "183:             chunk_size *= 2;",
      "184:             buf = realloc(buf, len + chunk_size);",
      "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "186:             CRM_ASSERT(buf != NULL);",
      "188:         } else if (buf[len + rc - 1] != 0) {",
      "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "191:             len += rc;",
      "192:             buf = realloc(buf, len + chunk_size);",
      "193:             CRM_ASSERT(buf != NULL);",
      "195:         } else {",
      "196:             crm_trace(\"Got %d more bytes\", (int)rc);",
      "197:             return buf;",
      "200:   bail:",
      "201:     free(buf);",
      "202:     return NULL;",
      "207: char *",
      "208: cib_send_plaintext(int sock, xmlNode * msg)",
      "210:     char *xml_text = dump_xml_unformatted(msg);",
      "212:     if (xml_text != NULL) {",
      "213:         int rc = 0;",
      "214:         char *unsent = xml_text;",
      "215:         int len = strlen(xml_text);",
      "218:         crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "219:   retry:",
      "220:         rc = write(sock, unsent, len);",
      "221:         if (rc < 0) {",
      "222:             switch (errno) {",
      "223:                 case EINTR:",
      "224:                 case EAGAIN:",
      "225:                     crm_trace(\"Retry\");",
      "226:                     goto retry;",
      "227:                 default:",
      "228:                     crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, len);",
      "229:                     break;",
      "230:             }",
      "232:         } else if (rc < len) {",
      "233:             crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "234:             len -= rc;",
      "235:             unsent += rc;",
      "238:         } else {",
      "239:             crm_trace(\"Sent %d bytes: %.100s\", rc, xml_text);",
      "242:     free(xml_text);",
      "243:     return NULL;",
      "247: char *",
      "248: cib_recv_plaintext(int sock)",
      "254:     ssize_t chunk_size = 512;",
      "256:     buf = calloc(1, chunk_size);",
      "258:     while (1) {",
      "259:         errno = 0;",
      "260:         rc = read(sock, buf + len, chunk_size);",
      "261:         crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "263:         if (errno == EINTR || errno == EAGAIN) {",
      "264:             crm_trace(\"Retry: %d\", (int)rc);",
      "265:             if (rc > 0) {",
      "266:                 len += rc;",
      "267:                 buf = realloc(buf, len + chunk_size);",
      "268:                 CRM_ASSERT(buf != NULL);",
      "269:             }",
      "271:         } else if (rc < 0) {",
      "272:             crm_perror(LOG_ERR, \"Error receiving message: %d\", (int)rc);",
      "273:             goto bail;",
      "275:         } else if (rc == chunk_size) {",
      "276:             len += rc;",
      "277:             chunk_size *= 2;",
      "278:             buf = realloc(buf, len + chunk_size);",
      "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "282:         } else if (buf[len + rc - 1] != 0) {",
      "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "286:             buf = realloc(buf, len + chunk_size);",
      "287:             CRM_ASSERT(buf != NULL);",
      "289:         } else {",
      "290:             return buf;",
      "293:   bail:",
      "294:     free(buf);",
      "295:     return NULL;",
      "299: void",
      "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "304:         cib_send_tls(session, msg);",
      "309:         cib_send_plaintext(GPOINTER_TO_INT(session), msg);",
      "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
      "316:     char *reply = NULL;",
      "321:         reply = cib_recv_tls(session);",
      "326:         reply = cib_recv_plaintext(GPOINTER_TO_INT(session));",
      "331:     } else {",
      "332:         xml = string2xml(reply);",
      "333:         if (xml == NULL) {",
      "334:             crm_err(\"Couldn't parse: '%.120s'\", reply);",
      "338:     free(reply);",
      "339:     return xml;",
      "",
      "[Added Lines]",
      "90:     gnutls_kx_set_priority(*session, anon_tls_kx_order);",
      "94:     case GNUTLS_SERVER:",
      "95:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_server_credentials_t) credentials);",
      "96:         break;",
      "97:     case GNUTLS_CLIENT:",
      "98:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_client_credentials_t) credentials);",
      "99:         break;",
      "105: static int",
      "106: crm_send_tls(gnutls_session * session, const char *buf, size_t len)",
      "108:     const char *unsent = buf;",
      "109:     int rc = 0;",
      "110:     int total_send;",
      "112:     if (buf == NULL) {",
      "113:         return -1;",
      "116:     total_send = len;",
      "117:     crm_trace(\"Message size: %d\", len);",
      "119:     while (TRUE) {",
      "120:         rc = gnutls_record_send(*session, unsent, len);",
      "122:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "123:             crm_debug(\"Retry\");",
      "125:         } else if (rc < 0) {",
      "126:             crm_err(\"Connection terminated rc = %d\", rc);",
      "127:             break;",
      "129:         } else if (rc < len) {",
      "130:             crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "131:             len -= rc;",
      "132:             unsent += rc;",
      "133:         } else {",
      "134:             crm_debug(\"Sent %d bytes\", rc);",
      "135:             break;",
      "139:     return rc < 0 ? rc : total_send;",
      "157: crm_recv_tls(gnutls_session * session, size_t max_size, size_t *recv_len, int *disconnected)",
      "161:     size_t len = 0;",
      "162:     size_t chunk_size = max_size ? max_size : 1024;",
      "163:     size_t buf_size = 0;",
      "164:     size_t read_size = 0;",
      "167:         if (disconnected) {",
      "169:         }",
      "170:         goto done;",
      "173:     buf = calloc(1, chunk_size + 1);",
      "174:     buf_size = chunk_size;",
      "177:         read_size = buf_size - len;",
      "180:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "181:             buf_size += chunk_size;",
      "182:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "183:             buf = realloc(buf, buf_size + 1);",
      "184:             CRM_ASSERT(buf != NULL);",
      "186:             read_size = buf_size - len;",
      "187:         }",
      "189:         rc = gnutls_record_recv(*session, buf + len, read_size);",
      "191:         if (rc > 0) {",
      "192:             crm_trace(\"Got %d more bytes.\", rc);",
      "195:             buf[len] = '\\0';",
      "196:         }",
      "197:         if (max_size && (max_size == read_size)) {",
      "198:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "199:             goto done;",
      "200:         }",
      "203:         if (rc == GNUTLS_E_INTERRUPTED) {",
      "204:             crm_trace(\"EINTR encoutered, retry tls read\");",
      "205:         } else if (rc == GNUTLS_E_AGAIN) {",
      "206:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "207:             goto done;",
      "208:         } else if (rc <= 0) {",
      "209:             if (rc == 0) {",
      "210:                 crm_debug(\"EOF encoutered during TLS read\");",
      "211:             } else {",
      "212:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "213:             }",
      "214:             if (disconnected) {",
      "216:             }",
      "217:             goto done;",
      "221: done:",
      "222:     if (recv_len) {",
      "224:     }",
      "225:     if (!len) {",
      "226:         free(buf);",
      "227:         buf = NULL;",
      "228:     }",
      "229:     return buf;",
      "234: static int",
      "235: crm_send_plaintext(int sock, const char *buf, size_t len)",
      "238:     int rc = 0;",
      "239:     const char *unsent = buf;",
      "240:     int total_send;",
      "242:     if (buf == NULL) {",
      "243:         return -1;",
      "244:     }",
      "245:     total_send = len;",
      "247:     crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "248:   retry:",
      "249:     rc = write(sock, unsent, len);",
      "250:     if (rc < 0) {",
      "251:         switch (errno) {",
      "252:         case EINTR:",
      "253:         case EAGAIN:",
      "254:             crm_trace(\"Retry\");",
      "256:         default:",
      "257:             crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, (int) len);",
      "258:             break;",
      "261:     } else if (rc < len) {",
      "262:         crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "263:         len -= rc;",
      "264:         unsent += rc;",
      "265:         goto retry;",
      "267:      } else {",
      "268:         crm_trace(\"Sent %d bytes: %.100s\", rc, buf);",
      "271:     return rc < 0 ? rc : total_send;",
      "288: static char *",
      "289: crm_recv_plaintext(int sock, size_t max_size, size_t *recv_len, int *disconnected)",
      "294:     ssize_t chunk_size = max_size ? max_size : 1024;",
      "295:     size_t buf_size = 0;",
      "296:     size_t read_size = 0;",
      "298:     if (sock <= 0) {",
      "299:         if (disconnected) {",
      "301:         }",
      "302:         goto done;",
      "303:     }",
      "305:     buf = calloc(1, chunk_size + 1);",
      "306:     buf_size = chunk_size;",
      "308:     while (TRUE) {",
      "309:         errno = 0;",
      "310:         read_size = buf_size - len;",
      "313:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "314:             buf_size += chunk_size;",
      "315:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "316:             buf = realloc(buf, buf_size + 1);",
      "319:             read_size = buf_size - len;",
      "320:         }",
      "322:         rc = read(sock, buf + len, chunk_size);",
      "324:         if (rc > 0) {",
      "325:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "328:             buf[len] = '\\0';",
      "329:         }",
      "330:         if (max_size && (max_size == read_size)) {",
      "331:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "332:             goto done;",
      "333:         }",
      "335:         if (rc > 0) {",
      "336:             continue;",
      "337:         } else if (rc == 0) {",
      "338:             if (disconnected) {",
      "340:             }",
      "341:             crm_trace(\"EOF encoutered during read\");",
      "342:             goto done;",
      "343:         }",
      "346:         if (errno == EINTR) {",
      "347:             crm_trace(\"EINTER encoutered, retry socket read.\");",
      "348:         } else if (errno == EAGAIN) {",
      "349:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "350:             goto done;",
      "351:         } else if (errno <= 0) {",
      "352:             if (disconnected) {",
      "354:             }",
      "355:             crm_debug(\"Error receiving message: %d\", (int)rc);",
      "356:             goto done;",
      "360: done:",
      "361:     if (recv_len) {",
      "363:     }",
      "364:     if (!len) {",
      "365:         free(buf);",
      "366:         buf = NULL;",
      "367:     }",
      "368:     return buf;",
      "371: static int",
      "372: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
      "374:     int rc = -1;",
      "377:         rc = crm_send_tls(session, buf, len);",
      "382:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
      "384:     return rc;",
      "387: int",
      "388: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "389: {",
      "390:     int rc = -1;",
      "391:     char *xml_text = NULL;",
      "392:     int len = 0;",
      "394:     xml_text = dump_xml_unformatted(msg);",
      "395:     if (xml_text) {",
      "396:         len = strlen(xml_text);",
      "397:     } else {",
      "398:         crm_err(\"Invalid XML, can not send msg\");",
      "399:         return -1;",
      "400:     }",
      "402:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
      "403:     if (rc < 0) {",
      "404:         goto done;",
      "405:     }",
      "406:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
      "408: done:",
      "409:     if (rc < 0) {",
      "410:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
      "411:     }",
      "413:     free(xml_text);",
      "414:     return rc;",
      "415: }",
      "423: crm_parse_remote_buffer(char **msg_buf)",
      "425:     char *buf = NULL;",
      "426:     char *start = NULL;",
      "427:     char *end = NULL;",
      "430:     if (*msg_buf == NULL) {",
      "431:         return NULL;",
      "432:     }",
      "435:     buf = *msg_buf;",
      "439:     start = buf;",
      "440:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "442:     while (!xml && end) {",
      "445:         end[0] = '\\0';",
      "446:         end += strlen(REMOTE_MSG_TERMINATOR);",
      "448:         xml = string2xml(start);",
      "449:         if (xml == NULL) {",
      "450:             crm_err(\"Couldn't parse: '%.120s'\", start);",
      "451:         }",
      "452:         start = end;",
      "453:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "454:     }",
      "456:     if (xml && start) {",
      "459:         free(buf);",
      "460:     } else if (!xml) {",
      "463:     }",
      "465:     return xml;",
      "466: }",
      "476: int",
      "477: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
      "478: {",
      "479:     struct pollfd fds = { 0, };",
      "480:     int sock = 0;",
      "481:     void *sock_ptr = NULL;",
      "482:     int rc = 0;",
      "483:     time_t start;",
      "485:     if (encrypted) {",
      "486: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "487:         gnutls_session *tls_session = session;",
      "488:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
      "489: #else",
      "490:         CRM_ASSERT(encrypted == FALSE);",
      "491: #endif",
      "492:     } else {",
      "493:         sock_ptr = session;",
      "494:     }",
      "496:     sock = GPOINTER_TO_INT(sock_ptr);",
      "497:     if (sock <= 0) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "501:     start = time(NULL);",
      "502:     errno = 0;",
      "503:     do {",
      "504:         fds.fd = sock;",
      "505:         fds.events = POLLIN;",
      "510:         if (errno == EINTR && (timeout > 0)) {",
      "511:             timeout = timeout - ((time(NULL) - start) * 1000);",
      "512:             if (timeout < 1000) {",
      "513:                 timeout = 1000;",
      "514:             }",
      "515:         }",
      "517:         rc = poll(&fds, 1, timeout);",
      "518:     } while (rc < 0 && errno == EINTR);",
      "520:     return rc;",
      "521: }",
      "523: char *",
      "524: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
      "525: {",
      "526:     char *reply = NULL;",
      "527:     if (recv_len) {",
      "529:     }",
      "531:     if (disconnected) {",
      "533:     }",
      "537:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
      "542:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
      "546:     }",
      "548:     return reply;",
      "549: }",
      "558: gboolean",
      "559: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
      "560: {",
      "561:     int ret;",
      "562:     size_t request_len = 0;",
      "563:     time_t start = time(NULL);",
      "564:     char *raw_request = NULL;",
      "565:     int remaining_timeout = 0;",
      "567:     if (total_timeout == 0) {",
      "568:         total_timeout = 10000;",
      "569:     } else if (total_timeout < 0) {",
      "570:         total_timeout = 60000;",
      "571:     }",
      "574:     remaining_timeout = total_timeout;",
      "575:     while ((remaining_timeout > 0) && !(*disconnected)) {",
      "578:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
      "579:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
      "580:         raw_request = NULL;",
      "582:         if (ret == 0) {",
      "583:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
      "584:             return FALSE;",
      "586:         } else if (ret < 0) {",
      "587:             if (errno != EINTR) {",
      "588:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret, errno);",
      "590:                 return FALSE;",
      "591:             }",
      "592:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
      "593:         } else {",
      "594:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
      "595:         }",
      "597:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
      "599:         if (!raw_request) {",
      "600:             crm_debug(\"Empty msg received after poll\");",
      "601:             continue;",
      "602:         }",
      "604:         if (*recv_buf) {",
      "605:             int old_len = strlen(*recv_buf);",
      "607:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
      "610:             memcpy(*recv_buf + old_len, raw_request, request_len);",
      "612:             free(raw_request);",
      "613:         } else {",
      "615:         }",
      "617:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
      "618:             return TRUE;",
      "622:     return FALSE;",
      "631: int",
      "632: crm_remote_tcp_connect(const char *host, int port)",
      "633: {",
      "634:     struct addrinfo *res;",
      "635:     struct addrinfo *rp;",
      "636:     struct addrinfo hints;",
      "637:     const char *server = host;",
      "638:     int ret_ga;",
      "639:     int sock;",
      "642:     memset(&hints, 0, sizeof(struct addrinfo));",
      "644:     hints.ai_socktype = SOCK_STREAM;",
      "645:     hints.ai_flags = AI_CANONNAME;",
      "647:     crm_debug(\"Looking up %s\", server);",
      "648:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "649:     if (ret_ga) {",
      "650:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "651:         return -1;",
      "652:     }",
      "654:     if (!res || !res->ai_addr) {",
      "655:         crm_err(\"getaddrinfo failed\");",
      "656:         return -1;",
      "657:     }",
      "659:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
      "660:         struct sockaddr *addr = rp->ai_addr;",
      "661:         int flag = 0;",
      "662:         if (!addr) {",
      "663:             continue;",
      "664:         }",
      "666:         if (rp->ai_canonname) {",
      "667:             server = res->ai_canonname;",
      "668:         }",
      "669:         crm_debug(\"Got address %s for %s\", server, host);",
      "672:         sock = socket(rp->ai_family, SOCK_STREAM, IPPROTO_TCP);",
      "673:         if (sock == -1) {",
      "674:             crm_err(\"Socket creation failed for remote client connection.\");",
      "675:             continue;",
      "676:         }",
      "677:         if (addr->sa_family == AF_INET6) {",
      "678:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *) addr;",
      "679:             addr_in->sin6_port = htons(port);",
      "680:         } else {",
      "681:             struct sockaddr_in *addr_in = (struct sockaddr_in *) addr;",
      "682:             addr_in->sin_port = htons(port);",
      "683:             crm_info(\"Attempting to connect to remote server at %s:%d\", inet_ntoa(addr_in->sin_addr), port);",
      "684:         }",
      "686:         if (connect(sock, rp->ai_addr, rp->ai_addrlen) == 0) {",
      "687:             if ((flag = fcntl(sock, F_GETFL)) >= 0) {",
      "688:                 if (fcntl(sock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "689:                     crm_err( \"fcntl() write failed\");",
      "690:                     close(sock);",
      "691:                     sock = -1;",
      "692:                     continue;",
      "693:                 }",
      "694:             }",
      "696:         }",
      "698:         close(sock);",
      "699:         sock = -1;",
      "700:     }",
      "701:     freeaddrinfo(res);",
      "703:     return sock;",
      "704: }",
      "",
      "---------------"
    ],
    "tools/crm_mon.c||tools/crm_mon.c": [
      "File: tools/crm_mon.c -> tools/crm_mon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:             if (rc == pcmk_ok) {",
      "276:                 rc = cib->cmds->set_connection_dnotify(cib, mon_cib_connection_destroy);",
      "277:                 if (rc == -EPROTONOSUPPORT) {",
      "279:                     if (as_console) {",
      "280:                         sleep(2);",
      "281:                     }",
      "",
      "[Removed Lines]",
      "278:                     print_as(\"Notification setup failed, won't be able to reconnect after failure\");",
      "",
      "[Added Lines]",
      "278:                     print_as(\"Notification setup not supported, won't be able to reconnect after failure\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02e388ecbeb222165e159fe77d3c61c669d9a0d8",
      "candidate_info": {
        "commit_hash": "02e388ecbeb222165e159fe77d3c61c669d9a0d8",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/02e388ecbeb222165e159fe77d3c61c669d9a0d8",
        "files": [
          "include/crm_internal.h"
        ],
        "message": "Revert \"Low: Build: Mark private functions as internal\"\n\nThis reverts commit 61fa54d399676de9121b67adfba7476cfdaa6c4e.",
        "before_after_code_files": [
          "include/crm_internal.h||include/crm_internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/crm_internal.h||include/crm_internal.h"
          ],
          "candidate": [
            "include/crm_internal.h||include/crm_internal.h"
          ]
        }
      },
      "candidate_diff": {
        "include/crm_internal.h||include/crm_internal.h": [
          "File: include/crm_internal.h -> include/crm_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #  include <crm/lrmd.h>",
          "42: #  if ENABLE_ACL",
          "43: static inline gboolean",
          "",
          "[Removed Lines]",
          "35: G_GNUC_INTERNAL void *find_library_function(void **handle, const char *lib, const char *fn, int fatal);",
          "36: G_GNUC_INTERNAL void *convert_const_pointer(const void *ptr);",
          "39: G_GNUC_INTERNAL char *uid2username(uid_t uid);",
          "40: G_GNUC_INTERNAL void determine_request_user(char *user, xmlNode * request, const char *field);",
          "",
          "[Added Lines]",
          "35: void *find_library_function(void **handle, const char *lib, const char *fn, int fatal);",
          "36: void *convert_const_pointer(const void *ptr);",
          "39: char *uid2username(uid_t uid);",
          "40: void determine_request_user(char *user, xmlNode * request, const char *field);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     long flags;",
          "87: };",
          "95: typedef struct pe_cluster_option_s {",
          "",
          "[Removed Lines]",
          "89: G_GNUC_INTERNAL void crm_set_options(const char *short_options, const char *usage, struct crm_option *long_options, const char *app_desc);",
          "90: G_GNUC_INTERNAL int crm_get_option(int argc, char **argv, int *index);",
          "91: G_GNUC_INTERNAL int crm_get_option_long(int argc, char **argv, int *index, const char **longname);",
          "92: G_GNUC_INTERNAL void crm_help(char cmd, int exit_code);",
          "",
          "[Added Lines]",
          "89: void crm_set_options(const char *short_options, const char *usage, struct crm_option *long_options, const char *app_desc);",
          "90: int crm_get_option(int argc, char **argv, int *index);",
          "91: int crm_get_option_long(int argc, char **argv, int *index, const char **longname);",
          "92: void crm_help(char cmd, int exit_code);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: } pe_cluster_option;",
          "116:                      const char *desc_long, pe_cluster_option * option_list, int len);",
          "134: extern int node_score_red;",
          "",
          "[Removed Lines]",
          "109: G_GNUC_INTERNAL const char *cluster_option(",
          "110:     GHashTable * options, gboolean(*validate) (const char *),",
          "111:     const char *name, const char *old_name, const char *def_value);",
          "113: G_GNUC_INTERNAL const char *get_cluster_pref(GHashTable * options, pe_cluster_option * option_list, int len, const char *name);",
          "115: G_GNUC_INTERNAL void config_metadata(const char *name, const char *version, const char *desc_short,",
          "118: G_GNUC_INTERNAL void verify_all_options(GHashTable * options, pe_cluster_option * option_list, int len);",
          "119: G_GNUC_INTERNAL gboolean check_time(const char *value);",
          "120: G_GNUC_INTERNAL gboolean check_timer(const char *value);",
          "121: G_GNUC_INTERNAL gboolean check_boolean(const char *value);",
          "122: G_GNUC_INTERNAL gboolean check_number(const char *value);",
          "125: G_GNUC_INTERNAL void filter_action_parameters(xmlNode * param_set, const char *version);",
          "126: G_GNUC_INTERNAL void filter_reload_parameters(xmlNode * param_set, const char *restart_string);",
          "129: G_GNUC_INTERNAL xmlNode *create_operation_update(",
          "130:     xmlNode * parent, lrmd_event_data_t *event, const char *caller_version,",
          "131:     int target_rc, const char *origin, int level);",
          "",
          "[Added Lines]",
          "109: const char *cluster_option(GHashTable * options, gboolean(*validate) (const char *),",
          "110:                            const char *name, const char *old_name, const char *def_value);",
          "112: const char *get_cluster_pref(GHashTable * options, pe_cluster_option * option_list, int len, const char *name);",
          "114: void config_metadata(const char *name, const char *version, const char *desc_short,",
          "117: void verify_all_options(GHashTable * options, pe_cluster_option * option_list, int len);",
          "118: gboolean check_time(const char *value);",
          "119: gboolean check_timer(const char *value);",
          "120: gboolean check_boolean(const char *value);",
          "121: gboolean check_number(const char *value);",
          "124: void filter_action_parameters(xmlNode * param_set, const char *version);",
          "125: void filter_reload_parameters(xmlNode * param_set, const char *restart_string);",
          "128: xmlNode *create_operation_update(xmlNode * parent, lrmd_event_data_t *event, const char *caller_version,",
          "129:                                  int target_rc, const char *origin, int level);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:     return !s || *s == '\\0';",
          "145: }",
          "160: #  define crm_config_err(fmt...) { crm_config_error = TRUE; crm_err(fmt); }",
          "161: #  define crm_config_warn(fmt...) { crm_config_warning = TRUE; crm_warn(fmt); }",
          "",
          "[Removed Lines]",
          "147: G_GNUC_INTERNAL char *generate_series_filename(const char *directory, const char *series, int sequence, gboolean bzip);",
          "148: G_GNUC_INTERNAL int get_last_sequence(const char *directory, const char *series);",
          "149: G_GNUC_INTERNAL void write_last_sequence(const char *directory, const char *series, int sequence, int max);",
          "151: G_GNUC_INTERNAL void crm_make_daemon(const char *name, gboolean daemonize, const char *pidfile);",
          "152: G_GNUC_INTERNAL gboolean crm_is_writable(const char *dir, const char *file, const char *user, const char *group, gboolean need_both);",
          "154: G_GNUC_INTERNAL long long crm_int_helper(const char *text, char **end_text);",
          "155: G_GNUC_INTERNAL char *crm_concat(const char *prefix, const char *suffix, char join);",
          "156: G_GNUC_INTERNAL char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "157: G_GNUC_INTERNAL xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
          "158: G_GNUC_INTERNAL void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "",
          "[Added Lines]",
          "145: char *generate_series_filename(const char *directory, const char *series, int sequence, gboolean bzip);",
          "146: int get_last_sequence(const char *directory, const char *series);",
          "147: void write_last_sequence(const char *directory, const char *series, int sequence, int max);",
          "149: void crm_make_daemon(const char *name, gboolean daemonize, const char *pidfile);",
          "150: gboolean crm_is_writable(const char *dir, const char *file, const char *user, const char *group, gboolean need_both);",
          "152: long long crm_int_helper(const char *text, char **end_text);",
          "153: char *crm_concat(const char *prefix, const char *suffix, char join);",
          "154: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "155: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
          "156: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b3dd850cd0cd9ffe8ecacb9d1882ba79ef8b6bf",
      "candidate_info": {
        "commit_hash": "7b3dd850cd0cd9ffe8ecacb9d1882ba79ef8b6bf",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/7b3dd850cd0cd9ffe8ecacb9d1882ba79ef8b6bf",
        "files": [
          "cib/callbacks.c",
          "cib/remote.c",
          "crmd/control.c",
          "lib/common/ipc.c",
          "tools/attrd.c"
        ],
        "message": "High: ACL: Fix compilation when \"--with-acl\" is enabled",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/remote.c||cib/remote.c",
          "crmd/control.c||crmd/control.c",
          "lib/common/ipc.c||lib/common/ipc.c",
          "tools/attrd.c||tools/attrd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/remote.c||cib/remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/remote.c||cib/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <stdio.h>",
          "23: #include <sys/types.h>",
          "24: #include <unistd.h>",
          "27: #include <stdlib.h>",
          "28: #include <errno.h>",
          "",
          "[Removed Lines]",
          "25: #include <grp.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     g_hash_table_insert(client_connections, new_client->id/* Should work */, new_client);",
          "346:     new_client->remote->auth_timeout = g_timeout_add(",
          "347:         REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
          "",
          "[Removed Lines]",
          "341: #if ENABLE_ACL",
          "342:     new_client->user = strdup(user);",
          "343: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528: #if ENABLE_ACL",
          "529:         user = crm_element_value(command, \"user\");",
          "530:         if (user) {",
          "532:         }",
          "533: #endif",
          "",
          "[Removed Lines]",
          "531:            new_client->user = strdup(user);",
          "",
          "[Added Lines]",
          "527:            client->user = strdup(user);",
          "",
          "---------------"
        ],
        "crmd/control.c||crmd/control.c": [
          "File: crmd/control.c -> crmd/control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <sys/types.h>",
          "40: #include <sys/stat.h>",
          "43: qb_ipcs_service_t *ipcs = NULL;",
          "",
          "[Removed Lines]",
          "41: #include <grp.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/ipc.c||lib/common/ipc.c": [
          "File: lib/common/ipc.c -> lib/common/ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <sys/types.h>",
          "25: #include <sys/stat.h>",
          "26: #include <unistd.h>",
          "28: #include <errno.h>",
          "29: #include <fcntl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <grp.h>",
          "",
          "---------------"
        ],
        "tools/attrd.c||tools/attrd.c": [
          "File: tools/attrd.c -> tools/attrd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <stdlib.h>",
          "28: #include <errno.h>",
          "29: #include <fcntl.h>",
          "32: #include <crm/crm.h>",
          "33: #include <crm/cib/internal.h>",
          "",
          "[Removed Lines]",
          "30: #include <grp.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6faf7ccb2845e1072163db797c8dff8485cc883",
      "candidate_info": {
        "commit_hash": "b6faf7ccb2845e1072163db797c8dff8485cc883",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/b6faf7ccb2845e1072163db797c8dff8485cc883",
        "files": [
          "cib/callbacks.c",
          "cib/notify.c",
          "cib/remote.c",
          "configure.ac",
          "include/crm/common/logging.h",
          "include/crm/common/util.h",
          "include/crm/crm.h",
          "include/crm/logging.h",
          "include/crm_config.h.in",
          "include/crm_internal.h",
          "include/portability.h",
          "lib/cib/cib_remote.c",
          "lib/common/ipc.c",
          "lib/common/remote.c",
          "lib/common/utils.c",
          "lib/pengine/rules.c"
        ],
        "message": "Low: Build: Move private function declarations to an internal header",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/notify.c||cib/notify.c",
          "cib/remote.c||cib/remote.c",
          "configure.ac||configure.ac",
          "include/crm/common/logging.h||include/crm/common/logging.h",
          "include/crm/common/util.h||include/crm/common/util.h",
          "include/crm/crm.h||include/crm/crm.h",
          "include/crm/logging.h||include/crm/logging.h",
          "include/crm_config.h.in||include/crm_config.h.in",
          "include/crm_internal.h||include/crm_internal.h",
          "include/portability.h||include/portability.h",
          "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
          "lib/common/ipc.c||lib/common/ipc.c",
          "lib/common/remote.c||lib/common/remote.c",
          "lib/common/utils.c||lib/common/utils.c",
          "lib/pengine/rules.c||lib/pengine/rules.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "include/crm_internal.h||include/crm_internal.h",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/remote.c||lib/common/remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "include/crm_internal.h||include/crm_internal.h",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/remote.c||lib/common/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "361:         } else if (client_obj->session) {",
          "363: #endif",
          "364:         } else if(client_obj->ipc == NULL) {",
          "365:             crm_err(\"Unknown transport for %s\", client_obj->name);",
          "",
          "[Removed Lines]",
          "362:             cib_send_remote_msg(client_obj->session, notify_src, client_obj->encrypted);",
          "",
          "[Added Lines]",
          "362:             crm_send_remote_msg(client_obj->session, notify_src, client_obj->encrypted);",
          "",
          "---------------"
        ],
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "117:         } else if (client->session) {",
          "118:             crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "121: #endif",
          "122:         } else {",
          "",
          "[Removed Lines]",
          "119:             cib_send_remote_msg(client->session, update_msg, client->encrypted);",
          "",
          "[Added Lines]",
          "119:             crm_send_remote_msg(client->session, update_msg, client->encrypted);",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         crm_trace(\"Iter: %d\", lpc++);",
          "264:         if (ssock == remote_tls_fd) {",
          "265: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "267: #endif",
          "268:         } else {",
          "270:         }",
          "271:         if (login != NULL) {",
          "272:             break;",
          "",
          "[Removed Lines]",
          "266:             login = cib_recv_remote_msg(session, TRUE);",
          "269:             login = cib_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
          "",
          "[Added Lines]",
          "266:             login = crm_recv_remote_msg(session, TRUE);",
          "269:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:     login = create_xml_node(NULL, \"cib_result\");",
          "340:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "341:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
          "343:     free_xml(login);",
          "345:     new_client->remote = mainloop_add_fd(",
          "",
          "[Removed Lines]",
          "342:     cib_send_remote_msg(new_client->session, login, new_client->encrypted);",
          "",
          "[Added Lines]",
          "342:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
          "409:     if (command == NULL) {",
          "410:         return -1;",
          "411:     }",
          "",
          "[Removed Lines]",
          "408:     command = cib_recv_remote_msg(client->session, client->encrypted);",
          "",
          "[Added Lines]",
          "408:     command = crm_recv_remote_msg(client->session, client->encrypted);",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: fi",
          "627: AC_MSG_RESULT(using $GLIBCONFIG)",
          "630: AC_CHECK_LIB(glib-2.0, g_hash_table_get_values)",
          "631: if test \"x$ac_cv_lib_glib_2_0_g_hash_table_get_values\" != x\"\"yes; then",
          "632:    AC_MSG_WARN(Your version of Glib is too old, you should have at least 2.14)",
          "634: fi",
          "639: if",
          "640:     $PKGCONFIG --exists systemd",
          "",
          "[Removed Lines]",
          "629: USE_GHASH_COMPAT=0",
          "633:    USE_GHASH_COMPAT=1",
          "635: AC_DEFINE_UNQUOTED(USE_GHASH_COMPAT, $USE_GHASH_COMPAT, Use g_hash_table compatibility functions)",
          "636: AC_SUBST(USE_GHASH_COMPAT)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm/common/logging.h||include/crm/common/logging.h": [
          "File: include/crm/common/logging.h -> include/crm/common/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: gboolean crm_is_callsite_active(struct qb_log_callsite *cs, int level);",
          "58: unsigned int set_crm_log_level(unsigned int level);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: int log_data_element(int log_level, const char *file, const char *function, int line,",
          "58:                      const char *prefix, xmlNode * data, int depth, gboolean formatted);",
          "",
          "---------------"
        ],
        "include/crm/common/util.h||include/crm/common/util.h": [
          "File: include/crm/common/util.h -> include/crm/common/util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #  endif",
          "81: char *crm_itoa(int an_int);",
          "89: int compare_version(const char *version1, const char *version2);",
          "93: void g_hash_destroy_str(gpointer data);",
          "95: gboolean crm_is_true(const char *s);",
          "",
          "[Removed Lines]",
          "47: #  ifdef HAVE_GETOPT_H",
          "48: #    include <getopt.h>",
          "49: #  else",
          "50: #    define no_argument 0",
          "51: #    define required_argument 1",
          "52: #  endif",
          "54: #  define pcmk_option_default 0x00000",
          "55: #  define pcmk_option_hidden 0x00001",
          "56: #  define pcmk_option_paragraph 0x00002",
          "57: #  define pcmk_option_example 0x00004",
          "59: struct crm_option {",
          "62:     const char *name;",
          "67:     int has_arg;",
          "69:     int *flag;",
          "71:     int val;",
          "74:     const char *desc;",
          "75:     long flags;",
          "76: };",
          "78: #  define crm_config_err(fmt...) { crm_config_error = TRUE; crm_err(fmt); }",
          "79: #  define crm_config_warn(fmt...) { crm_config_warning = TRUE; crm_warn(fmt); }",
          "83: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "85: char *generate_hash_value(const char *src_node, const char *src_subsys);",
          "87: gboolean decodeNVpair(const char *srcstring, char separator, char **name, char **value);",
          "91: char *generateReference(const char *custom1, const char *custom2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:                                         int *transition_id, int *action_id, int *op_status,",
          "114:                                         int *op_rc, int *target_rc);",
          "124: gboolean decode_op_key(const char *key, char **rsc_id, char **op_type, int *interval);",
          "135: #  define safe_str_eq(a, b) crm_str_eq(a, b, FALSE)",
          "",
          "[Removed Lines]",
          "116: char *generate_transition_key(int action, int transition_id, int target_rc,",
          "117:                                      const char *node);",
          "119: gboolean decode_transition_key(const char *key, char **uuid, int *action, int *transition_id,",
          "120:                                       int *target_rc);",
          "122: char *crm_concat(const char *prefix, const char *suffix, char join);",
          "126: void filter_action_parameters(xmlNode * param_set, const char *version);",
          "127: void filter_reload_parameters(xmlNode * param_set, const char *restart_string);",
          "129: static inline int",
          "130: crm_strlen_zero(const char *s)",
          "131: {",
          "132:     return !s || *s == '\\0';",
          "133: }",
          "",
          "[Added Lines]",
          "74: char *generate_transition_key(int action, int transition_id, int target_rc, const char *node);",
          "76: gboolean decode_transition_key(const char *key, char **uuid, int *action, int *transition_id, int *target_rc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139: gboolean safe_str_neq(const char *a, const char *b);",
          "140: int crm_parse_int(const char *text, const char *default_text);",
          "143: #  define crm_atoi(text, default_text) crm_parse_int(text, default_text)",
          "145: void crm_abort(const char *file, const char *function, int line,",
          "146:                       const char *condition, gboolean do_core, gboolean do_fork);",
          "189: int char2score(const char *score);",
          "190: char *score2char(int score);",
          "195: #  define set_bit(word, bit) word = crm_set_bit(__PRETTY_FUNCTION__, NULL, word, bit)",
          "196: #  define clear_bit(word, bit) word = crm_clear_bit(__PRETTY_FUNCTION__, NULL, word, bit)",
          "",
          "[Removed Lines]",
          "141: long long crm_int_helper(const char *text, char **end_text);",
          "148: char *generate_series_filename(const char *directory, const char *series, int sequence,",
          "149:                                       gboolean bzip);",
          "151: int get_last_sequence(const char *directory, const char *series);",
          "153: void write_last_sequence(const char *directory, const char *series, int sequence, int max);",
          "155: int crm_pid_active(long pid);",
          "156: int crm_read_pidfile(const char *filename);",
          "157: int crm_lock_pidfile(const char *filename);",
          "158: void crm_make_daemon(const char *name, gboolean daemonize, const char *pidfile);",
          "160: typedef struct pe_cluster_option_s {",
          "161:     const char *name;",
          "162:     const char *alt_name;",
          "163:     const char *type;",
          "164:     const char *values;",
          "165:     const char *default_value;",
          "167:      gboolean(*is_valid) (const char *);",
          "169:     const char *description_short;",
          "170:     const char *description_long;",
          "172: } pe_cluster_option;",
          "174: const char *cluster_option(GHashTable * options, gboolean(*validate) (const char *),",
          "175:                                   const char *name, const char *old_name, const char *def_value);",
          "177: const char *get_cluster_pref(GHashTable * options, pe_cluster_option * option_list, int len,",
          "178:                                     const char *name);",
          "180: void config_metadata(const char *name, const char *version, const char *desc_short,",
          "181:                             const char *desc_long, pe_cluster_option * option_list, int len);",
          "183: void verify_all_options(GHashTable * options, pe_cluster_option * option_list, int len);",
          "184: gboolean check_time(const char *value);",
          "185: gboolean check_timer(const char *value);",
          "186: gboolean check_boolean(const char *value);",
          "187: gboolean check_number(const char *value);",
          "192: gboolean crm_is_writable(const char *dir, const char *file,",
          "193:                                 const char *user, const char *group, gboolean need_both);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:     return ((word & bit) != 0);",
          "249: }",
          "253: char *crm_meta_name(const char *field);",
          "254: const char *crm_meta_value(GHashTable * hash, const char *field);",
          "262: int rsc_op_expected_rc(lrmd_event_data_t *event);",
          "263: gboolean did_rsc_op_fail(lrmd_event_data_t *event, int target_rc);",
          "369: char *crm_md5sum(const char *buffer);",
          "371: int crm_user_lookup(const char *name, uid_t * uid, gid_t * gid);",
          "373: #endif",
          "",
          "[Removed Lines]",
          "251: xmlNode *cib_recv_remote_msg(void *session, gboolean encrypted);",
          "252: void cib_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "256: void crm_set_options(const char *short_options, const char *usage,",
          "257:                             struct crm_option *long_options, const char *app_desc);",
          "258: int crm_get_option(int argc, char **argv, int *index);",
          "259: int crm_get_option_long(int argc, char **argv, int *index, const char **longname);",
          "260: void crm_help(char cmd, int exit_code);",
          "265: extern int node_score_red;",
          "266: extern int node_score_green;",
          "267: extern int node_score_yellow;",
          "268: extern int node_score_infinity;",
          "270: xmlNode *create_operation_update(xmlNode * parent, lrmd_event_data_t *event, const char *caller_version,",
          "271:                                         int target_rc, const char *origin, int level);",
          "273: #  if USE_GHASH_COMPAT",
          "275: typedef struct fake_ghi {",
          "276:     GHashTable *hash;",
          "279:     gpointer key;",
          "280:     gpointer value;",
          "281: } GHashTableIter;",
          "283: static inline void",
          "284: g_hash_prepend_value(gpointer key, gpointer value, gpointer user_data)",
          "285: {",
          "286:     GList **values = (GList **) user_data;",
          "289: }",
          "291: static inline GList *",
          "292: g_hash_table_get_values(GHashTable * hash_table)",
          "293: {",
          "294:     GList *values = NULL;",
          "296:     g_hash_table_foreach(hash_table, g_hash_prepend_value, &values);",
          "297:     return values;",
          "298: }",
          "300: static inline gboolean",
          "301: g_hash_table_nth_data(gpointer key, gpointer value, gpointer user_data)",
          "302: {",
          "303:     GHashTableIter *iter = (GHashTableIter *) user_data;",
          "305:     if (iter->lpc++ == iter->nth) {",
          "306:         iter->key = key;",
          "307:         iter->value = value;",
          "308:         return TRUE;",
          "309:     }",
          "310:     return FALSE;",
          "311: }",
          "313: static inline void",
          "314: g_hash_table_iter_init(GHashTableIter * iter, GHashTable * hash_table)",
          "315: {",
          "316:     iter->hash = hash_table;",
          "317:     iter->nth = 0;",
          "318:     iter->lpc = 0;",
          "319:     iter->key = NULL;",
          "320:     iter->value = NULL;",
          "321: }",
          "323: static inline gboolean",
          "324: g_hash_table_iter_next(GHashTableIter * iter, gpointer * key, gpointer * value)",
          "325: {",
          "326:     gboolean found = FALSE;",
          "328:     iter->lpc = 0;",
          "329:     iter->key = NULL;",
          "330:     iter->value = NULL;",
          "331:     if (iter->nth < g_hash_table_size(iter->hash)) {",
          "332:         found = ! !g_hash_table_find(iter->hash, g_hash_table_nth_data, iter);",
          "333:         iter->nth++;",
          "334:     }",
          "335:     if (key)",
          "337:     if (value)",
          "339:     return found;",
          "340: }",
          "344: #  if ENABLE_ACL",
          "345: static inline gboolean",
          "346: is_privileged(const char *user)",
          "347: {",
          "348:     if (user == NULL) {",
          "349:         return FALSE;",
          "350:     } else if (strcmp(user, CRM_DAEMON_USER) == 0) {",
          "351:         return TRUE;",
          "352:     } else if (strcmp(user, \"root\") == 0) {",
          "353:         return TRUE;",
          "354:     }",
          "355:     return FALSE;",
          "356: }",
          "358: char *uid2username(uid_t uid);",
          "359: void determine_request_user(char *user, xmlNode * request,",
          "360:                                    const char *field);",
          "361: #  endif",
          "363: void *find_library_function(void **handle, const char *lib, const char *fn, gboolean fatal);",
          "365: void *convert_const_pointer(const void *ptr);",
          "367: char *crm_generate_uuid(void);",
          "",
          "[Added Lines]",
          "160: char *crm_generate_uuid(void);",
          "",
          "---------------"
        ],
        "include/crm/crm.h||include/crm/crm.h": [
          "File: include/crm/crm.h -> include/crm/crm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #  include <libxml/tree.h>",
          "35: #  define CRM_FEATURE_SET  \"3.0.6\"",
          "36: #  define MINIMUM_SCHEMA_VERSION \"pacemaker-1.0\"",
          "37: #  define LATEST_SCHEMA_VERSION         \"pacemaker-\"CRM_DTD_VERSION",
          "",
          "[Removed Lines]",
          "32: int log_data_element(int log_level, const char *file, const char *function, int line,",
          "33:                             const char *prefix, xmlNode * data, int depth, gboolean formatted);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm/logging.h||include/crm/logging.h": [
          "File: include/crm/logging.h -> include/crm/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm_config.h.in||include/crm_config.h.in": [
          "File: include/crm_config.h.in -> include/crm_config.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #undef AIS_COROSYNC",
          "",
          "[Removed Lines]",
          "73: #undef USE_GHASH_COMPAT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm_internal.h||include/crm_internal.h": [
          "File: include/crm_internal.h -> include/crm_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #  include <config.h>",
          "26: #  include <portability.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #  include <glib.h>",
          "29: #  include <stdbool.h>",
          "30: #  include <libxml/tree.h>",
          "32: #  include <crm/lrmd.h>",
          "35: void *find_library_function(void **handle, const char *lib, const char *fn, int fatal);",
          "36: void *convert_const_pointer(const void *ptr);",
          "39: char *uid2username(uid_t uid);",
          "40: void determine_request_user(char *user, xmlNode * request, const char *field);",
          "42: #  if ENABLE_ACL",
          "43: static inline gboolean",
          "44: is_privileged(const char *user)",
          "45: {",
          "46:     if (user == NULL) {",
          "47:         return FALSE;",
          "48:     } else if (strcmp(user, CRM_DAEMON_USER) == 0) {",
          "49:         return TRUE;",
          "50:     } else if (strcmp(user, \"root\") == 0) {",
          "51:         return TRUE;",
          "52:     }",
          "53:     return FALSE;",
          "54: }",
          "55: #  endif",
          "58: #  ifdef HAVE_GETOPT_H",
          "59: #    include <getopt.h>",
          "60: #  else",
          "61: #    define no_argument 0",
          "62: #    define required_argument 1",
          "63: #  endif",
          "65: #  define pcmk_option_default 0x00000",
          "66: #  define pcmk_option_hidden 0x00001",
          "67: #  define pcmk_option_paragraph 0x00002",
          "68: #  define pcmk_option_example 0x00004",
          "70: struct crm_option {",
          "73:     const char *name;",
          "78:     int has_arg;",
          "80:     int *flag;",
          "82:     int val;",
          "85:     const char *desc;",
          "86:     long flags;",
          "87: };",
          "89: void crm_set_options(const char *short_options, const char *usage, struct crm_option *long_options, const char *app_desc);",
          "90: int crm_get_option(int argc, char **argv, int *index);",
          "91: int crm_get_option_long(int argc, char **argv, int *index, const char **longname);",
          "92: void crm_help(char cmd, int exit_code);",
          "95: typedef struct pe_cluster_option_s {",
          "96:     const char *name;",
          "97:     const char *alt_name;",
          "98:     const char *type;",
          "99:     const char *values;",
          "100:     const char *default_value;",
          "102:      gboolean(*is_valid) (const char *);",
          "104:     const char *description_short;",
          "105:     const char *description_long;",
          "107: } pe_cluster_option;",
          "109: const char *cluster_option(GHashTable * options, gboolean(*validate) (const char *),",
          "110:                            const char *name, const char *old_name, const char *def_value);",
          "112: const char *get_cluster_pref(GHashTable * options, pe_cluster_option * option_list, int len, const char *name);",
          "114: void config_metadata(const char *name, const char *version, const char *desc_short,",
          "115:                      const char *desc_long, pe_cluster_option * option_list, int len);",
          "117: void verify_all_options(GHashTable * options, pe_cluster_option * option_list, int len);",
          "118: gboolean check_time(const char *value);",
          "119: gboolean check_timer(const char *value);",
          "120: gboolean check_boolean(const char *value);",
          "121: gboolean check_number(const char *value);",
          "124: void filter_action_parameters(xmlNode * param_set, const char *version);",
          "125: void filter_reload_parameters(xmlNode * param_set, const char *restart_string);",
          "128: xmlNode *create_operation_update(xmlNode * parent, lrmd_event_data_t *event, const char *caller_version,",
          "129:                                  int target_rc, const char *origin, int level);",
          "132: extern int node_score_red;",
          "133: extern int node_score_green;",
          "134: extern int node_score_yellow;",
          "135: extern int node_score_infinity;",
          "139: static inline int",
          "140: crm_strlen_zero(const char *s)",
          "141: {",
          "142:     return !s || *s == '\\0';",
          "143: }",
          "145: char *generate_series_filename(const char *directory, const char *series, int sequence, gboolean bzip);",
          "146: int get_last_sequence(const char *directory, const char *series);",
          "147: void write_last_sequence(const char *directory, const char *series, int sequence, int max);",
          "149: void crm_make_daemon(const char *name, gboolean daemonize, const char *pidfile);",
          "150: gboolean crm_is_writable(const char *dir, const char *file, const char *user, const char *group, gboolean need_both);",
          "152: long long crm_int_helper(const char *text, char **end_text);",
          "153: char *crm_concat(const char *prefix, const char *suffix, char join);",
          "154: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "155: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
          "156: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "158: #  define crm_config_err(fmt...) { crm_config_error = TRUE; crm_err(fmt); }",
          "159: #  define crm_config_warn(fmt...) { crm_config_warning = TRUE; crm_warn(fmt); }",
          "",
          "---------------"
        ],
        "include/portability.h||include/portability.h": [
          "File: include/portability.h -> include/portability.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #     define USE_GNU",
          "70: #  endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #  if !HAVE_LIBGLIB_2_0",
          "74: typedef struct fake_ghi {",
          "75:     GHashTable *hash;",
          "78:     gpointer key;",
          "79:     gpointer value;",
          "80: } GHashTableIter;",
          "82: static inline void",
          "83: g_hash_prepend_value(gpointer key, gpointer value, gpointer user_data)",
          "84: {",
          "85:     GList **values = (GList **) user_data;",
          "88: }",
          "90: static inline GList *",
          "91: g_hash_table_get_values(GHashTable * hash_table)",
          "92: {",
          "93:     GList *values = NULL;",
          "95:     g_hash_table_foreach(hash_table, g_hash_prepend_value, &values);",
          "96:     return values;",
          "97: }",
          "99: static inline gboolean",
          "100: g_hash_table_nth_data(gpointer key, gpointer value, gpointer user_data)",
          "101: {",
          "102:     GHashTableIter *iter = (GHashTableIter *) user_data;",
          "104:     if (iter->lpc++ == iter->nth) {",
          "105:         iter->key = key;",
          "106:         iter->value = value;",
          "107:         return TRUE;",
          "108:     }",
          "109:     return FALSE;",
          "110: }",
          "112: static inline void",
          "113: g_hash_table_iter_init(GHashTableIter * iter, GHashTable * hash_table)",
          "114: {",
          "115:     iter->hash = hash_table;",
          "116:     iter->nth = 0;",
          "117:     iter->lpc = 0;",
          "118:     iter->key = NULL;",
          "119:     iter->value = NULL;",
          "120: }",
          "122: static inline gboolean",
          "123: g_hash_table_iter_next(GHashTableIter * iter, gpointer * key, gpointer * value)",
          "124: {",
          "125:     gboolean found = FALSE;",
          "127:     iter->lpc = 0;",
          "128:     iter->key = NULL;",
          "129:     iter->value = NULL;",
          "130:     if (iter->nth < g_hash_table_size(iter->hash)) {",
          "131:         found = ! !g_hash_table_find(iter->hash, g_hash_table_nth_data, iter);",
          "132:         iter->nth++;",
          "133:     }",
          "134:     if (key)",
          "136:     if (value)",
          "138:     return found;",
          "139: }",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
          "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     crm_xml_add(notify_msg, F_CIB_OPERATION, T_CIB_NOTIFY);",
          "109:     crm_xml_add(notify_msg, F_CIB_NOTIFY_TYPE, callback);",
          "110:     crm_xml_add_int(notify_msg, F_CIB_NOTIFY_ACTIVATE, enabled);",
          "112:     free_xml(notify_msg);",
          "113:     return pcmk_ok;",
          "114: }",
          "",
          "[Removed Lines]",
          "111:     cib_send_remote_msg(private->callback.session, notify_msg, private->callback.encrypted);",
          "",
          "[Added Lines]",
          "111:     crm_send_remote_msg(private->callback.session, notify_msg, private->callback.encrypted);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:     crm_xml_add(login, \"password\", private->passwd);",
          "288:     crm_xml_add(login, \"hidden\", \"password\");",
          "291:     free_xml(login);",
          "294:     crm_log_xml_trace(answer, \"Reply\");",
          "295:     if (answer == NULL) {",
          "296:         rc = -EPROTO;",
          "",
          "[Removed Lines]",
          "290:     cib_send_remote_msg(connection->session, login, connection->encrypted);",
          "293:     answer = cib_recv_remote_msg(connection->session, connection->encrypted);",
          "",
          "[Added Lines]",
          "290:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
          "293:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:     const char *type = NULL;",
          "343:     crm_info(\"Message on callback channel\");",
          "346:     type = crm_element_value(msg, F_TYPE);",
          "347:     crm_trace(\"Activating %s callbacks...\", type);",
          "",
          "[Removed Lines]",
          "344:     msg = cib_recv_remote_msg(private->callback.session, private->callback.encrypted);",
          "",
          "[Added Lines]",
          "344:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "406:         xmlNode *hello =",
          "407:             cib_create_op(0, private->callback.token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL);",
          "408:         crm_xml_add(hello, F_CIB_CLIENTNAME, name);",
          "410:         free_xml(hello);",
          "411:     }",
          "",
          "[Removed Lines]",
          "409:         cib_send_remote_msg(private->command.session, hello, private->command.encrypted);",
          "",
          "[Added Lines]",
          "409:         crm_send_remote_msg(private->command.session, hello, private->command.encrypted);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "525:     }",
          "527:     crm_trace(\"Sending %s message to CIB service\", op);",
          "529:     free_xml(op_msg);",
          "531:     if ((call_options & cib_discard_reply)) {",
          "",
          "[Removed Lines]",
          "528:     cib_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
          "",
          "[Added Lines]",
          "528:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "552:         int reply_id = -1;",
          "553:         int msg_id = cib->call_id;",
          "556:         if (op_reply == NULL) {",
          "557:             break;",
          "558:         }",
          "",
          "[Removed Lines]",
          "555:         op_reply = cib_recv_remote_msg(private->command.session, private->command.encrypted);",
          "",
          "[Added Lines]",
          "555:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
          "",
          "---------------"
        ],
        "lib/common/ipc.c||lib/common/ipc.c": [
          "File: lib/common/ipc.c -> lib/common/ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <crm/common/ipc.h>",
          "34: #include <crm/cluster.h>",
          "36: xmlNode *",
          "37: create_request_adv(const char *task, xmlNode * msg_data,",
          "38:                    const char *host_to, const char *sys_to,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: static char *",
          "37: generateReference(const char *custom1, const char *custom2)",
          "38: {",
          "39:     static uint ref_counter = 0;",
          "40:     const char *local_cust1 = custom1;",
          "41:     const char *local_cust2 = custom2;",
          "42:     int reference_len = 4;",
          "43:     char *since_epoch = NULL;",
          "48:     if (local_cust1 == NULL) {",
          "49:         local_cust1 = \"_empty_\";",
          "50:     }",
          "51:     reference_len += strlen(local_cust1);",
          "53:     if (local_cust2 == NULL) {",
          "54:         local_cust2 = \"_empty_\";",
          "55:     }",
          "56:     reference_len += strlen(local_cust2);",
          "58:     since_epoch = calloc(1, reference_len);",
          "60:     if (since_epoch != NULL) {",
          "61:         sprintf(since_epoch, \"%s-%s-%ld-%u\",",
          "62:                 local_cust1, local_cust2, (unsigned long)time(NULL), ref_counter++);",
          "63:     }",
          "65:     return since_epoch;",
          "66: }",
          "",
          "---------------"
        ],
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297: }",
          "299: void",
          "301: {",
          "302:     if (encrypted) {",
          "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Removed Lines]",
          "300: cib_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
          "",
          "[Added Lines]",
          "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311: }",
          "313: xmlNode *",
          "315: {",
          "316:     char *reply = NULL;",
          "317:     xmlNode *xml = NULL;",
          "",
          "[Removed Lines]",
          "314: cib_recv_remote_msg(void *session, gboolean encrypted)",
          "",
          "[Added Lines]",
          "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
          "",
          "---------------"
        ],
        "lib/common/utils.c||lib/common/utils.c": [
          "File: lib/common/utils.c -> lib/common/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: CRM_TRACE_INIT_DATA(common);",
          "73: gboolean crm_config_error = FALSE;",
          "74: gboolean crm_config_warning = FALSE;",
          "75: const char *crm_system_name = \"unknown\";",
          "",
          "[Removed Lines]",
          "72: static uint ref_counter = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:     }",
          "293: }",
          "383: char *",
          "384: crm_concat(const char *prefix, const char *suffix, char join)",
          "385: {",
          "",
          "[Removed Lines]",
          "295: char *",
          "296: generateReference(const char *custom1, const char *custom2)",
          "297: {",
          "299:     const char *local_cust1 = custom1;",
          "300:     const char *local_cust2 = custom2;",
          "301:     int reference_len = 4;",
          "302:     char *since_epoch = NULL;",
          "307:     if (local_cust1 == NULL) {",
          "308:         local_cust1 = \"_empty_\";",
          "309:     }",
          "310:     reference_len += strlen(local_cust1);",
          "312:     if (local_cust2 == NULL) {",
          "313:         local_cust2 = \"_empty_\";",
          "314:     }",
          "315:     reference_len += strlen(local_cust2);",
          "317:     since_epoch = calloc(1, reference_len);",
          "319:     if (since_epoch != NULL) {",
          "320:         sprintf(since_epoch, \"%s-%s-%ld-%u\",",
          "321:                 local_cust1, local_cust2, (unsigned long)time(NULL), ref_counter++);",
          "322:     }",
          "324:     return since_epoch;",
          "325: }",
          "327: gboolean",
          "328: decodeNVpair(const char *srcstring, char separator, char **name, char **value)",
          "329: {",
          "330:     int lpc = 0;",
          "331:     int len = 0;",
          "332:     const char *temp = NULL;",
          "334:     CRM_ASSERT(name != NULL && value != NULL);",
          "338:     crm_trace(\"Attempting to decode: [%s]\", srcstring);",
          "339:     if (srcstring != NULL) {",
          "340:         len = strlen(srcstring);",
          "341:         while (lpc <= len) {",
          "342:             if (srcstring[lpc] == separator) {",
          "344:                 if (*name == NULL) {",
          "346:                 }",
          "347:                 memcpy(*name, srcstring, lpc);",
          "348:                 (*name)[lpc] = '\\0';",
          "353:                 len = len - lpc;",
          "354:                 len--;",
          "355:                 if (len <= 0) {",
          "357:                 } else {",
          "360:                     if (*value == NULL) {",
          "362:                     }",
          "363:                     temp = srcstring + lpc + 1;",
          "364:                     memcpy(*value, temp, len);",
          "365:                     (*value)[len] = '\\0';",
          "366:                 }",
          "367:                 return TRUE;",
          "368:             }",
          "369:             lpc++;",
          "370:         }",
          "371:     }",
          "373:     if (*name != NULL) {",
          "374:         free(*name);",
          "376:     }",
          "380:     return FALSE;",
          "381: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405:     return hash_key;",
          "406: }",
          "428: char *",
          "429: crm_itoa(int an_int)",
          "430: {",
          "",
          "[Removed Lines]",
          "408: char *",
          "409: generate_hash_value(const char *src_node, const char *src_subsys)",
          "410: {",
          "411:     char *hash_value = NULL;",
          "413:     if (src_node == NULL || src_subsys == NULL) {",
          "414:         return NULL;",
          "415:     }",
          "417:     if (strcasecmp(CRM_SYSTEM_DC, src_subsys) == 0) {",
          "418:         hash_value = strdup(src_subsys);",
          "419:         CRM_ASSERT(hash_value);",
          "420:         return hash_value;",
          "421:     }",
          "423:     hash_value = crm_concat(src_node, src_subsys, '_');",
          "424:     crm_info(\"created hash value: (%s)\", hash_value);",
          "425:     return hash_value;",
          "426: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1315: #define LOCKSTRLEN 11",
          "1318: crm_pid_active(long pid)",
          "1319: {",
          "1320:     if (pid <= 0) {",
          "",
          "[Removed Lines]",
          "1317: int",
          "",
          "[Added Lines]",
          "1208: static int",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1359: #endif",
          "1360: }",
          "1363: crm_read_pidfile(const char *filename)",
          "1364: {",
          "1365:     int fd;",
          "",
          "[Removed Lines]",
          "1362: int",
          "",
          "[Added Lines]",
          "1253: static int",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1387:     return pid;",
          "1388: }",
          "1391: crm_lock_pidfile(const char *filename)",
          "1392: {",
          "1393:     struct stat sbuf;",
          "",
          "[Removed Lines]",
          "1390: int",
          "",
          "[Added Lines]",
          "1281: static int",
          "",
          "---------------"
        ],
        "lib/pengine/rules.c||lib/pengine/rules.c": [
          "File: lib/pengine/rules.c -> lib/pengine/rules.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:     return ((((((diy + epact) * 6) + 11) % 177) / 22) & 7);",
          "353: }",
          "355: #define cron_check(xml_field, time_field)    \\",
          "356:     value = crm_element_value(cron_spec, xml_field);   \\",
          "357:     if(value != NULL) {       \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: static gboolean",
          "356: decodeNVpair(const char *srcstring, char separator, char **name, char **value)",
          "357: {",
          "358:     int lpc = 0;",
          "359:     int len = 0;",
          "360:     const char *temp = NULL;",
          "362:     CRM_ASSERT(name != NULL && value != NULL);",
          "366:     crm_trace(\"Attempting to decode: [%s]\", srcstring);",
          "367:     if (srcstring != NULL) {",
          "368:         len = strlen(srcstring);",
          "369:         while (lpc <= len) {",
          "370:             if (srcstring[lpc] == separator) {",
          "372:                 if (*name == NULL) {",
          "374:                 }",
          "375:                 memcpy(*name, srcstring, lpc);",
          "376:                 (*name)[lpc] = '\\0';",
          "381:                 len = len - lpc;",
          "382:                 len--;",
          "383:                 if (len <= 0) {",
          "385:                 } else {",
          "388:                     if (*value == NULL) {",
          "390:                     }",
          "391:                     temp = srcstring + lpc + 1;",
          "392:                     memcpy(*value, temp, len);",
          "393:                     (*value)[len] = '\\0';",
          "394:                 }",
          "395:                 return TRUE;",
          "396:             }",
          "397:             lpc++;",
          "398:         }",
          "399:     }",
          "401:     if (*name != NULL) {",
          "402:         free(*name);",
          "404:     }",
          "408:     return FALSE;",
          "409: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "597bf90e8c19a04b2b485ce723ff5ebc84f76d7c",
      "candidate_info": {
        "commit_hash": "597bf90e8c19a04b2b485ce723ff5ebc84f76d7c",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/597bf90e8c19a04b2b485ce723ff5ebc84f76d7c",
        "files": [
          "cib/notify.c",
          "fencing/main.c",
          "lib/cib/cib_utils.c",
          "lib/cluster/corosync.c",
          "lib/fencing/st_client.c",
          "tools/crm_attribute.c"
        ],
        "message": "Low: Remove dead code identified by coverity",
        "before_after_code_files": [
          "cib/notify.c||cib/notify.c",
          "fencing/main.c||fencing/main.c",
          "lib/cib/cib_utils.c||lib/cib/cib_utils.c",
          "lib/cluster/corosync.c||lib/cluster/corosync.c",
          "lib/fencing/st_client.c||lib/fencing/st_client.c",
          "tools/crm_attribute.c||tools/crm_attribute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/notify.c||cib/notify.c"
          ],
          "candidate": [
            "cib/notify.c||cib/notify.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     CRM_CHECK(client != NULL, return TRUE);",
          "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
          "91:         crm_warn(\"Skipping client with NULL channel\");",
          "92:         return FALSE;",
          "93:     }",
          "",
          "[Removed Lines]",
          "86:     if (client == NULL) {",
          "87:         crm_warn(\"Skipping NULL client\");",
          "88:         return TRUE;",
          "90:     } else if (client->ipc == NULL) {",
          "",
          "[Added Lines]",
          "86:     if (client->ipc == NULL) {",
          "",
          "---------------"
        ],
        "fencing/main.c||fencing/main.c": [
          "File: fencing/main.c -> fencing/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:     type = crm_element_value(update_msg, F_SUBTYPE);",
          "332:     CRM_CHECK(type != NULL, crm_log_xml_err(update_msg, \"notify\"); return);",
          "339:  crm_trace(\"Skipping client with NULL channel\");",
          "340:  return;",
          "",
          "[Removed Lines]",
          "334:     if(client == NULL) {",
          "335:  crm_trace(\"Skipping NULL client\");",
          "336:  return;",
          "338:     } else if(client->channel == NULL) {",
          "",
          "[Added Lines]",
          "334:     if(client->channel == NULL) {",
          "",
          "---------------"
        ],
        "lib/cib/cib_utils.c||lib/cib/cib_utils.c": [
          "File: lib/cib/cib_utils.c -> lib/cib/cib_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755: cib_create_op(int call_id, const char *token, const char *op, const char *host, const char *section,",
          "756:               xmlNode * data, int call_options, const char *user_name)",
          "757: {",
          "759:     xmlNode *op_msg = create_xml_node(NULL, \"cib_command\");",
          "761:     CRM_CHECK(op_msg != NULL, return NULL);",
          "",
          "[Removed Lines]",
          "758:     int rc = HA_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:         add_message_xml(op_msg, F_CIB_CALLDATA, data);",
          "782:     }",
          "791:     if (call_options & cib_inhibit_bcast) {",
          "792:         CRM_CHECK((call_options & cib_scope_local), return NULL);",
          "793:     }",
          "",
          "[Removed Lines]",
          "784:     if (rc != HA_OK) {",
          "785:         crm_err(\"Failed to create CIB operation message\");",
          "786:         crm_log_xml_err(op_msg, \"op\");",
          "787:         free_xml(op_msg);",
          "788:         return NULL;",
          "789:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster/corosync.c||lib/cluster/corosync.c": [
          "File: lib/cluster/corosync.c -> lib/cluster/corosync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "754: check_message_sanity(const AIS_Message * msg, const char *data)",
          "755: {",
          "756:     gboolean sane = TRUE;",
          "758:     int dest = msg->host.type;",
          "759:     int tmp_size = msg->header.size - sizeof(AIS_Message);",
          "",
          "[Removed Lines]",
          "757:     gboolean repaired = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:                 ais_dest(&(msg->sender)), msg_type2text(msg->sender.type),",
          "804:                 msg->sender.pid, msg->is_compressed, ais_data_len(msg), msg->header.size);",
          "812:     } else {",
          "813:         crm_trace",
          "814:             (\"Verfied message %d: (dest=%s:%s, from=%s:%s.%d, compressed=%d, size=%d, total=%d)\",",
          "",
          "[Removed Lines]",
          "806:     } else if (repaired) {",
          "807:         crm_err",
          "808:             (\"Repaired message %d: (dest=%s:%s, from=%s:%s.%d, compressed=%d, size=%d, total=%d)\",",
          "809:              msg->id, ais_dest(&(msg->host)), msg_type2text(dest), ais_dest(&(msg->sender)),",
          "810:              msg_type2text(msg->sender.type), msg->sender.pid, msg->is_compressed,",
          "811:              ais_data_len(msg), msg->header.size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/fencing/st_client.c||lib/fencing/st_client.c": [
          "File: lib/fencing/st_client.c -> lib/fencing/st_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123: xmlNode *",
          "1124: stonith_create_op(int call_id, const char *token, const char *op, xmlNode * data, int call_options)",
          "1125: {",
          "1127:     xmlNode *op_msg = create_xml_node(NULL, \"stonith_command\");",
          "1129:     CRM_CHECK(op_msg != NULL, return NULL);",
          "",
          "[Removed Lines]",
          "1126:     int rc = HA_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1142:         add_message_xml(op_msg, F_STONITH_CALLDATA, data);",
          "1143:     }",
          "1152:     return op_msg;",
          "1153: }",
          "",
          "[Removed Lines]",
          "1145:     if (rc != HA_OK) {",
          "1146:         crm_err(\"Failed to create STONITH operation message\");",
          "1147:         crm_log_xml_err(op_msg, \"BadOp\");",
          "1148:         free_xml(op_msg);",
          "1149:         return NULL;",
          "1150:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1519:         local_blob.callback = NULL;",
          "1520:     }",
          "1526:     if (local_blob.callback != NULL && (rc == stonith_ok || local_blob.only_success == FALSE)) {",
          "1527:         crm_trace(\"Invoking callback %s for call %d\", crm_str(local_blob.id), call_id);",
          "1528:         local_blob.callback(stonith, msg, call_id, rc, output, local_blob.user_data);",
          "",
          "[Removed Lines]",
          "1522:     if (stonith == NULL) {",
          "1523:         crm_debug(\"No stonith object supplied\");",
          "1524:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/crm_attribute.c||tools/crm_attribute.c": [
          "File: tools/crm_attribute.c -> tools/crm_attribute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         determine_host(the_cib, &dest_uname, &dest_node);",
          "238:     }",
          "245:                && safe_str_eq(type, XML_CIB_TAG_STATUS)",
          "246:                && attrd_update_delegate(NULL, command, dest_uname, attr_name, attr_value, type, set_name, NULL, NULL)) {",
          "247:         crm_info(\"Update %s=%s sent via attrd\", attr_name, command == 'D' ? \"<none>\" : attr_value);",
          "",
          "[Removed Lines]",
          "240:     if (rc != cib_ok) {",
          "241:         crm_info(\"Error during setup of %s=%s update\", attr_name,",
          "242:                  command == 'D' ? \"<none>\" : attr_value);",
          "244:     } else if ((command == 'v' || command == 'D')",
          "",
          "[Added Lines]",
          "240:     if ((command == 'v' || command == 'D')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa024490a023bd0d0d5568f08b2c60b61adb15f5",
      "candidate_info": {
        "commit_hash": "aa024490a023bd0d0d5568f08b2c60b61adb15f5",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/aa024490a023bd0d0d5568f08b2c60b61adb15f5",
        "files": [
          "include/crm/common/ipcs.h",
          "lib/common/remote.c"
        ],
        "message": "Feature: remote: Properly version the remote connection protocol",
        "before_after_code_files": [
          "include/crm/common/ipcs.h||include/crm/common/ipcs.h",
          "lib/common/remote.c||lib/common/remote.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/common/remote.c||lib/common/remote.c"
          ],
          "candidate": [
            "lib/common/remote.c||lib/common/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "include/crm/common/ipcs.h||include/crm/common/ipcs.h": [
          "File: include/crm/common/ipcs.h -> include/crm/common/ipcs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: struct crm_remote_s {",
          "43:     char *buffer;",
          "44:     int auth_timeout;",
          "46:     mainloop_io_t *source;",
          "52: #  ifdef HAVE_GNUTLS_GNUTLS_H",
          "53:     gnutls_session_t *tls_session;",
          "54:     bool tls_handshake_complete;",
          "",
          "[Removed Lines]",
          "50:     int tcp_socket;",
          "",
          "[Added Lines]",
          "44:     size_t buffer_size;",
          "45:     size_t buffer_offset;",
          "47:     int tcp_socket;",
          "51:     bool authenticated;",
          "52:     char *token;",
          "",
          "---------------"
        ],
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <fcntl.h>",
          "36: #include <glib.h>",
          "38: #include <crm/common/ipcs.h>",
          "39: #include <crm/common/xml.h>",
          "40: #include <crm/common/mainloop.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <bzlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     0",
          "59: };",
          "61: int",
          "62: crm_initiate_client_tls_handshake(crm_remote_t * remote, int timeout_ms)",
          "63: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: struct crm_remote_header_v0",
          "64: {",
          "65:     uint64_t id;",
          "66:     uint64_t flags;",
          "67:     uint32_t error;",
          "68:     uint32_t version;",
          "69:     uint32_t size_total;",
          "70:     uint32_t payload_uncompressed;",
          "71:     uint32_t payload_compressed;",
          "72: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:     return rc < 0 ? rc : total_send;",
          "179: }",
          "271: #endif",
          "273: static int",
          "",
          "[Removed Lines]",
          "194: static char *",
          "195: crm_recv_tls(gnutls_session_t * session, size_t max_size, size_t * recv_len, int *disconnected)",
          "196: {",
          "197:     char *buf = NULL;",
          "198:     int rc = 0;",
          "199:     size_t len = 0;",
          "200:     size_t chunk_size = max_size ? max_size : 1024;",
          "201:     size_t buf_size = 0;",
          "202:     size_t read_size = 0;",
          "204:     if (session == NULL) {",
          "205:         if (disconnected) {",
          "207:         }",
          "208:         goto done;",
          "209:     }",
          "211:     buf = calloc(1, chunk_size + 1);",
          "212:     buf_size = chunk_size;",
          "214:     while (TRUE) {",
          "215:         read_size = buf_size - len;",
          "218:         if (!max_size && (read_size < (chunk_size / 2))) {",
          "219:             buf_size += chunk_size;",
          "220:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size,",
          "221:                       buf_size);",
          "222:             buf = realloc(buf, buf_size + 1);",
          "223:             CRM_ASSERT(buf != NULL);",
          "225:             read_size = buf_size - len;",
          "226:         }",
          "228:         rc = gnutls_record_recv(*session, buf + len, read_size);",
          "230:         if (rc > 0) {",
          "231:             crm_trace(\"Got %d more bytes.\", rc);",
          "232:             len += rc;",
          "234:             buf[len] = '\\0';",
          "235:         }",
          "236:         if (max_size && (max_size == read_size)) {",
          "237:             crm_trace(\"Buffer max read size %d met\", max_size);",
          "238:             goto done;",
          "239:         }",
          "242:         if (rc == GNUTLS_E_INTERRUPTED) {",
          "243:             crm_trace(\"EINTR encoutered, retry tls read\");",
          "244:         } else if (rc == GNUTLS_E_AGAIN) {",
          "245:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
          "246:             goto done;",
          "247:         } else if (rc <= 0) {",
          "248:             if (rc == 0) {",
          "249:                 crm_debug(\"EOF encoutered during TLS read\");",
          "250:             } else {",
          "251:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
          "252:             }",
          "253:             if (disconnected) {",
          "255:             }",
          "256:             goto done;",
          "257:         }",
          "258:     }",
          "260:   done:",
          "261:     if (recv_len) {",
          "263:     }",
          "264:     if (!len) {",
          "265:         free(buf);",
          "266:         buf = NULL;",
          "267:     }",
          "268:     return buf;",
          "270: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "312: }",
          "411: static int",
          "413: {",
          "414:     int rc = -ESOCKTNOSUPPORT;",
          "418: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "422: #endif",
          "425:     }",
          "426:     return rc;",
          "427: }",
          "429: int",
          "430: crm_remote_send(crm_remote_t * remote, xmlNode * msg)",
          "431: {",
          "432:     int rc = -1;",
          "440:         crm_err(\"Invalid XML, can not send msg\");",
          "441:         return -1;",
          "442:     }",
          "449:     if (rc < 0) {",
          "450:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
          "451:     }",
          "",
          "[Removed Lines]",
          "327: static char *",
          "328: crm_recv_plaintext(int sock, size_t max_size, size_t * recv_len, int *disconnected)",
          "329: {",
          "330:     char *buf = NULL;",
          "331:     ssize_t rc = 0;",
          "332:     ssize_t len = 0;",
          "333:     ssize_t chunk_size = max_size ? max_size : 1024;",
          "334:     size_t buf_size = 0;",
          "335:     size_t read_size = 0;",
          "337:     if (sock <= 0) {",
          "338:         if (disconnected) {",
          "340:         }",
          "341:         goto done;",
          "342:     }",
          "344:     buf = calloc(1, chunk_size + 1);",
          "345:     buf_size = chunk_size;",
          "347:     while (TRUE) {",
          "348:         errno = 0;",
          "349:         read_size = buf_size - len;",
          "352:         if (!max_size && (read_size < (chunk_size / 2))) {",
          "353:             buf_size += chunk_size;",
          "354:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size,",
          "355:                       buf_size);",
          "356:             buf = realloc(buf, buf_size + 1);",
          "357:             CRM_ASSERT(buf != NULL);",
          "359:             read_size = buf_size - len;",
          "360:         }",
          "362:         rc = read(sock, buf + len, chunk_size);",
          "364:         if (rc > 0) {",
          "365:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
          "366:             len += rc;",
          "368:             buf[len] = '\\0';",
          "369:         }",
          "370:         if (max_size && (max_size == read_size)) {",
          "371:             crm_trace(\"Buffer max read size %d met\", max_size);",
          "372:             goto done;",
          "373:         }",
          "375:         if (rc > 0) {",
          "376:             continue;",
          "377:         } else if (rc == 0) {",
          "378:             if (disconnected) {",
          "380:             }",
          "381:             crm_trace(\"EOF encoutered during read\");",
          "382:             goto done;",
          "383:         }",
          "386:         if (errno == EINTR) {",
          "387:             crm_trace(\"EINTER encoutered, retry socket read.\");",
          "388:         } else if (errno == EAGAIN) {",
          "389:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
          "390:             goto done;",
          "391:         } else if (errno <= 0) {",
          "392:             if (disconnected) {",
          "394:             }",
          "395:             crm_debug(\"Error receiving message: %d\", (int)rc);",
          "396:             goto done;",
          "397:         }",
          "398:     }",
          "400:   done:",
          "401:     if (recv_len) {",
          "403:     }",
          "404:     if (!len) {",
          "405:         free(buf);",
          "406:         buf = NULL;",
          "407:     }",
          "408:     return buf;",
          "409: }",
          "412: crm_remote_send_raw(crm_remote_t * remote, const char *buf, size_t len)",
          "416:     if (remote->tcp_socket) {",
          "417:         rc = crm_send_plaintext(remote->tcp_socket, buf, len);",
          "420:     } else if (remote->tls_session) {",
          "421:         rc = crm_send_tls(remote->tls_session, buf, len);",
          "423:     } else {",
          "424:         crm_err(\"Unsupported connection type\");",
          "433:     char *xml_text = NULL;",
          "434:     int len = 0;",
          "436:     xml_text = dump_xml_unformatted(msg);",
          "437:     if (xml_text) {",
          "438:         len = strlen(xml_text);",
          "439:     } else {",
          "444:     rc = crm_remote_send_raw(remote, xml_text, len);",
          "445:     if (rc >= 0) {",
          "446:         rc = crm_remote_send_raw(remote, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR));",
          "447:     }",
          "",
          "[Added Lines]",
          "237: crm_remote_sendv(crm_remote_t * remote, struct iovec * iov, int iovs)",
          "239:     int lpc = 0;",
          "242:     for(; lpc < iovs; lpc++) {",
          "243:         if (remote->tcp_socket) {",
          "244:             rc = crm_send_plaintext(remote->tcp_socket, iov[lpc].iov_base, iov[lpc].iov_len);",
          "247:         } else if (remote->tls_session) {",
          "248:             rc = crm_send_tls(remote->tls_session, iov[lpc].iov_base, iov[lpc].iov_len);",
          "250:         } else {",
          "251:             crm_err(\"Unsupported connection type\");",
          "252:         }",
          "257: #define PCMK_TLS_VERSION 1",
          "262:     static uint64_t id = 0;",
          "264:     char *xml_text = dump_xml_unformatted(msg);",
          "266:     struct iovec iov[2];",
          "267:     struct crm_remote_header_v0 *header = calloc(1, sizeof(struct crm_remote_header_v0));",
          "269:     if (xml_text == NULL) {",
          "274:     iov[0].iov_base = header;",
          "275:     iov[0].iov_len = sizeof(struct crm_remote_header_v0);",
          "277:     iov[1].iov_base = xml_text;",
          "278:     iov[1].iov_len = 1 + strlen(xml_text);",
          "280:     id++;",
          "281:     header->id = id;",
          "282:     header->version = PCMK_TLS_VERSION;",
          "283:     header->size_total = iov[0].iov_len + iov[1].iov_len;",
          "284:     header->payload_uncompressed = iov[1].iov_len;",
          "286:     rc = crm_remote_sendv(remote, iov, 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462: xmlNode *",
          "463: crm_remote_parse_buffer(crm_remote_t * remote)",
          "464: {",
          "468:     xmlNode *xml = NULL;",
          "470:     if (remote->buffer == NULL) {",
          "471:         return NULL;",
          "472:     }",
          "494:     }",
          "503:     }",
          "505:     return xml;",
          "",
          "[Removed Lines]",
          "465:     char *buf = NULL;",
          "466:     char *start = NULL;",
          "467:     char *end = NULL;",
          "475:     buf = remote->buffer;",
          "476:     remote->buffer = NULL;",
          "479:     start = buf;",
          "480:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
          "482:     while (!xml && end) {",
          "485:         end[0] = '\\0';",
          "486:         end += strlen(REMOTE_MSG_TERMINATOR);",
          "488:         xml = string2xml(start);",
          "489:         if (xml == NULL) {",
          "490:             crm_err(\"Couldn't parse: '%.120s'\", start);",
          "491:         }",
          "492:         start = end;",
          "493:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
          "496:     if (xml && start) {",
          "498:         remote->buffer = strdup(start);",
          "499:         free(buf);",
          "500:     } else if (!xml) {",
          "502:         remote->buffer = buf;",
          "",
          "[Added Lines]",
          "304:     size_t offset = sizeof(struct crm_remote_header_v0);",
          "305:     struct crm_remote_header_v0 *header = NULL;",
          "310:     } else if(remote->buffer_offset < sizeof(struct crm_remote_header_v0)) {",
          "311:         return NULL;",
          "315:     remote->buffer_offset = 0;",
          "317:     header = (struct crm_remote_header_v0 *)remote->buffer;",
          "319:     if (header->payload_compressed) {",
          "320:         int rc = 0;",
          "321:         unsigned int size_u = 1 + header->payload_uncompressed;",
          "322:         char *uncompressed = calloc(1, offset + size_u);",
          "324:         crm_trace(\"Decompressing message data %d bytes into %d bytes\",",
          "325:                  header->payload_compressed, size_u);",
          "327:         rc = BZ2_bzBuffToBuffDecompress(uncompressed + offset, &size_u,",
          "328:                                         remote->buffer + offset,",
          "329:                                         header->payload_compressed, 1, 0);",
          "331:         if (rc != BZ_OK) {",
          "332:             crm_err(\"Decompression failed: %s (%d)\", bz2_strerror(rc), rc);",
          "333:             free(uncompressed);",
          "334:             return NULL;",
          "335:         }",
          "337:         CRM_ASSERT(size_u == header->payload_uncompressed);",
          "340:         header = (struct crm_remote_header_v0 *)uncompressed;",
          "342:         free(remote->buffer);",
          "343:         remote->buffer_size = offset + size_u;",
          "344:         remote->buffer = uncompressed;",
          "347:     CRM_ASSERT(remote->buffer[sizeof(struct crm_remote_header_v0) + header->payload_uncompressed - 1] == 0);",
          "349:     xml = string2xml(remote->buffer + offset);",
          "350:     if (xml == NULL) {",
          "351:         crm_err(\"Couldn't parse: '%.120s'\", remote->buffer + offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "560:     return rc;",
          "561: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423: static size_t",
          "424: crm_remote_recv_once(crm_remote_t * remote)",
          "425: {",
          "426:     int rc = 0;",
          "427:     size_t read_len = sizeof(struct crm_remote_header_v0);",
          "429:     if(remote->buffer_offset >= sizeof(struct crm_remote_header_v0)) {",
          "430:         struct crm_remote_header_v0 *hdr = (struct crm_remote_header_v0 *)remote->buffer;",
          "432:         read_len = hdr->size_total;",
          "433:     }",
          "436:     if(remote->buffer_size < read_len) {",
          "437:         remote->buffer_size = 2 * read_len;",
          "438:         crm_trace(\"Expanding buffer to %u bytes\", remote->buffer_size);",
          "440:         remote->buffer = realloc(remote->buffer, remote->buffer_size + 1);",
          "441:         CRM_ASSERT(remote->buffer != NULL);",
          "442:     }",
          "444:     if (remote->tcp_socket) {",
          "445:         errno = 0;",
          "446:         rc = read(remote->tcp_socket,",
          "447:                   remote->buffer + remote->buffer_offset,",
          "448:                   remote->buffer_size - remote->buffer_offset);",
          "449:         if(rc < 0) {",
          "450:             rc = -errno;",
          "451:         }",
          "453: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "454:     } else if (remote->tls_session) {",
          "455:         rc = gnutls_record_recv(*(remote->tls_session),",
          "456:                                 remote->buffer + remote->buffer_offset,",
          "457:                                 remote->buffer_size - remote->buffer_offset);",
          "458:         if (rc == GNUTLS_E_INTERRUPTED) {",
          "459:             rc = -EINTR;",
          "460:         } else if (rc == GNUTLS_E_AGAIN) {",
          "461:             rc = -EAGAIN;",
          "462:         } else if (rc < 0) {",
          "463:             crm_info(\"TLS receive failed: %s (%d)\", gnutls_strerror(rc), rc);",
          "464:             rc = -pcmk_err_generic;",
          "465:         }",
          "466: #endif",
          "467:     } else {",
          "468:         crm_err(\"Unsupported connection type\");",
          "469:         return -ESOCKTNOSUPPORT;",
          "470:     }",
          "473:     if (rc > 0) {",
          "474:         remote->buffer_offset += rc;",
          "476:         remote->buffer[remote->buffer_offset] = '\\0';",
          "477:         crm_trace(\"Received %u more bytes, %u total\", rc, remote->buffer_offset);",
          "479:     } else if (rc == -EINTR || rc == -EAGAIN) {",
          "480:         crm_trace(\"non-blocking, exiting read: %s (%d)\", pcmk_strerror(rc), rc);",
          "482:     } else if (rc == 0) {",
          "483:         crm_debug(\"EOF encoutered after %u bytes\", remote->buffer_offset);",
          "484:         return -ENOTCONN;",
          "486:     } else if (rc <= 0) {",
          "487:         crm_debug(\"Error receiving message after %u bytes: %s (%d)\",",
          "488:                   remote->buffer_offset, gnutls_strerror(rc), rc);",
          "489:         return -ENOTCONN;",
          "490:     }",
          "492:     if(remote->buffer_offset < sizeof(struct crm_remote_header_v0)) {",
          "493:         crm_trace(\"Not enough data to fill header: %u < %u bytes\",",
          "494:                   remote->buffer_offset, sizeof(struct crm_remote_header_v0));",
          "495:         return -EAGAIN;",
          "497:     } else {",
          "498:         struct crm_remote_header_v0 *hdr = (struct crm_remote_header_v0 *)remote->buffer;",
          "500:         if(remote->buffer_offset < hdr->size_total) {",
          "501:             crm_trace(\"Read less than the advertised length: %u < %u bytes\",",
          "502:                       remote->buffer_offset, hdr->size_total);",
          "503:             return -EAGAIN;",
          "504:         }",
          "505:     }",
          "507:     crm_trace(\"Read full message of %u bytes\", remote->buffer_offset);",
          "508:     return remote->buffer_offset;",
          "509: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "570: gboolean",
          "571: crm_remote_recv(crm_remote_t * remote, int total_timeout /*ms */ , int *disconnected)",
          "572: {",
          "575:     time_t start = time(NULL);",
          "577:     int remaining_timeout = 0;",
          "579:     if (total_timeout == 0) {",
          "",
          "[Removed Lines]",
          "573:     int ret;",
          "574:     size_t request_len = 0;",
          "576:     char *raw_request = NULL;",
          "",
          "[Added Lines]",
          "521:     int rc;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "590:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\",",
          "591:                   total_timeout, remaining_timeout);",
          "596:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
          "597:             return FALSE;",
          "615:         } else {",
          "624:         }",
          "638:         }",
          "643:     }",
          "645:     return FALSE;",
          "",
          "[Removed Lines]",
          "592:         ret = crm_remote_ready(remote, remaining_timeout);",
          "593:         raw_request = NULL;",
          "595:         if (ret == 0) {",
          "599:         } else if (ret < 0) {",
          "600:             if (errno != EINTR) {",
          "601:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret,",
          "602:                           errno);",
          "604:                 return FALSE;",
          "605:             }",
          "606:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
          "608:         } else if (remote->tcp_socket) {",
          "609:             raw_request = crm_recv_plaintext(remote->tcp_socket, 0, &request_len, disconnected);",
          "611: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "612:         } else if (remote->tls_session) {",
          "613:             raw_request = crm_recv_tls(remote->tls_session, 0, &request_len, disconnected);",
          "614: #endif",
          "616:             crm_err(\"Unsupported connection type\");",
          "617:         }",
          "619:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
          "621:         if (!raw_request) {",
          "622:             crm_debug(\"Empty msg received after poll\");",
          "623:             continue;",
          "626:         if (remote->buffer) {",
          "627:             int old_len = strlen(remote->buffer);",
          "629:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len + request_len);",
          "631:             remote->buffer = realloc(remote->buffer, old_len + request_len + 1);",
          "632:             memcpy(remote->buffer + old_len, raw_request, request_len);",
          "634:             free(raw_request);",
          "636:         } else {",
          "637:             remote->buffer = raw_request;",
          "640:         if (strstr(remote->buffer, REMOTE_MSG_TERMINATOR)) {",
          "641:             return TRUE;",
          "642:         }",
          "",
          "[Added Lines]",
          "538:         rc = crm_remote_ready(remote, remaining_timeout);",
          "540:         if (rc == 0) {",
          "544:         } else if(rc < 0) {",
          "545:             crm_debug(\"poll() failed: %s (%d)\", pcmk_strerror(rc), rc);",
          "548:             rc = crm_remote_recv_once(remote);",
          "549:             if(rc > 0) {",
          "550:                 return TRUE;",
          "551:             } else if (rc < 0) {",
          "552:                 crm_debug(\"recv() failed: %s (%d)\", pcmk_strerror(rc), rc);",
          "553:             }",
          "556:         if(rc == -ENOTCONN) {",
          "558:             return FALSE;",
          "561:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
          "",
          "---------------"
        ]
      }
    }
  ]
}