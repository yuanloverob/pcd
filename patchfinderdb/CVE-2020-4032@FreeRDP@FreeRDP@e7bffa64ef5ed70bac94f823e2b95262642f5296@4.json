{
  "cve_id": "CVE-2020-4032",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an integer casting vulnerability in update_recv_secondary_order. All clients with +glyph-cache /relax-order-checks are affected. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
  "patch_info": {
    "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "files": [
      "libfreerdp/core/orders.c"
    ],
    "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3762:              name, end - start);",
      "3763:   return FALSE;",
      "3764:  }",
      "3766:  if (diff > 0)",
      "3767:  {",
      "3768:   WLog_Print(update->log, WLOG_DEBUG,",
      "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
      "3771:  }",
      "3772:  return rc;",
      "3773: }",
      "",
      "[Removed Lines]",
      "3765:  diff = start - end;",
      "3770:   Stream_Seek(s, diff);",
      "",
      "[Added Lines]",
      "3765:  diff = end - start;",
      "3770:   if (!Stream_SafeSeek(s, diff))",
      "3771:    return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
      "candidate_info": {
        "commit_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "files": [
          "libfreerdp/codec/include/bitmap.c"
        ],
        "message": "Fixed out of bound read in RLEDECOMPRESS\n\nCVE-2020-4033 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c": [
          "File: libfreerdp/codec/include/bitmap.c -> libfreerdp/codec/include/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     if (code == LITE_SET_FG_FG_RUN || code == MEGA_MEGA_SET_FG_RUN)",
          "203:     {",
          "204:      SRCREADPIXEL(fgPel, pbSrc);",
          "205:      SRCNEXTPIXEL(pbSrc);",
          "206:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:      if (pbSrc >= pbEnd)",
          "205:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:    case MEGA_MEGA_DITHERED_RUN:",
          "232:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "233:     pbSrc = pbSrc + advance;",
          "234:     SRCREADPIXEL(pixelA, pbSrc);",
          "235:     SRCNEXTPIXEL(pbSrc);",
          "236:     SRCREADPIXEL(pixelB, pbSrc);",
          "237:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     if (pbSrc >= pbEnd)",
          "237:      return FALSE;",
          "240:     if (pbSrc >= pbEnd)",
          "241:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:    case MEGA_MEGA_COLOR_RUN:",
          "253:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "254:     pbSrc = pbSrc + advance;",
          "255:     SRCREADPIXEL(pixelA, pbSrc);",
          "256:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     if (pbSrc >= pbEnd)",
          "262:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "273:     pbSrc = pbSrc + advance;",
          "275:     if (code == LITE_SET_FG_FGBG_IMAGE || code == MEGA_MEGA_SET_FGBG_IMAGE)",
          "276:     {",
          "277:      SRCREADPIXEL(fgPel, pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     if (pbSrc >= pbEnd)",
          "284:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:      return FALSE;",
          "340:     UNROLL(runLength, {",
          "341:      SRCREADPIXEL(temp, pbSrc);",
          "342:      SRCNEXTPIXEL(pbSrc);",
          "343:      DESTWRITEPIXEL(pbDest, temp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:      if (pbSrc >= pbEnd)",
          "352:       return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f7e475c1652c2b1e30e0406ec0bc7ea3f2330ff",
      "candidate_info": {
        "commit_hash": "9f7e475c1652c2b1e30e0406ec0bc7ea3f2330ff",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9f7e475c1652c2b1e30e0406ec0bc7ea3f2330ff",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fix seeking in Cache Brush and other Secondary Drawing Orders",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2623:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2624:  const INT32 bytesPerPixel = ((bpp + 1) / 8);",
          "2627:   return FALSE;",
          "2629:  for (y = 7; y >= 0; y--)",
          "",
          "[Removed Lines]",
          "2626:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "",
          "[Added Lines]",
          "2626:  if (Stream_GetRemainingLength(s) < 16 + bytesPerPixel * 4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3617: static BOOL update_recv_secondary_order(rdpUpdate* update, wStream* s, BYTE flags)",
          "3618: {",
          "3619:  BOOL rc = FALSE;",
          "3621:  BYTE orderType;",
          "3622:  UINT16 extraFlags;",
          "3623:  UINT16 orderLength;",
          "",
          "[Removed Lines]",
          "3620:  size_t start, end, diff;",
          "",
          "[Added Lines]",
          "3620:  size_t start, end, pos, diff;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3766:   WLog_Print(update->log, WLOG_ERROR, \"SECONDARY ORDER %s failed\", name);",
          "3767:  }",
          "3772:  {",
          "3773:   WLog_Print(update->log, WLOG_WARN, \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes too much\",",
          "3775:   return FALSE;",
          "3776:  }",
          "3778:  if (diff > 0)",
          "3779:  {",
          "3780:   WLog_Print(update->log, WLOG_DEBUG,",
          "",
          "[Removed Lines]",
          "3769:  start += orderLength + 7;",
          "3770:  end = Stream_GetPosition(s);",
          "3771:  if (start > end)",
          "3774:              name, end - start);",
          "3777:  diff = end - start;",
          "",
          "[Added Lines]",
          "3769:  end = start + orderLength + 7;",
          "3770:  pos = Stream_GetPosition(s);",
          "3771:  if (pos > end)",
          "3774:              name, pos - end);",
          "3777:  diff = end - pos;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97efff4e9008021515070c8434f7a6264fd50e48",
      "candidate_info": {
        "commit_hash": "97efff4e9008021515070c8434f7a6264fd50e48",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/97efff4e9008021515070c8434f7a6264fd50e48",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Refactored order stream manipulation\n\n* Use stream seek instead of setting pointer directly\n* Add log messages in case of inconsistencies\n* Fixed missing stream advance in update_decompress_brush",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686: static BOOL update_read_fast_glyph_order(wStream* s, const ORDER_INFO* orderInfo,",
          "1687:                                          FAST_GLYPH_ORDER* fastGlyph)",
          "1688: {",
          "1690:  GLYPH_DATA_V2* glyph = &fastGlyph->glyphData;",
          "1691:  ORDER_FIELD_BYTE(1, fastGlyph->cacheId);",
          "1692:  ORDER_FIELD_2BYTE(2, fastGlyph->ulCharInc, fastGlyph->flAccel);",
          "",
          "[Removed Lines]",
          "1689:  BYTE* phold;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1714:    return FALSE;",
          "1716:   CopyMemory(fastGlyph->data, Stream_Pointer(s), fastGlyph->cbData);",
          "1719:   if (!Stream_SafeSeek(s, 1))",
          "1720:    return FALSE;",
          "",
          "[Removed Lines]",
          "1717:   phold = Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "1716:   if (Stream_GetRemainingLength(s) < fastGlyph->cbData)",
          "1717:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1736:    new_cb = ((glyph->cx + 7) / 8) * glyph->cy;",
          "1737:    new_cb += ((new_cb % 4) > 0) ? 4 - (new_cb % 4) : 0;",
          "1740:     return FALSE;",
          "1742:    if (new_cb)",
          "",
          "[Removed Lines]",
          "1739:    if (Stream_GetRemainingLength(s) < new_cb)",
          "",
          "[Added Lines]",
          "1739:    if (fastGlyph->cbData < new_cb)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1751:     glyph->cb = new_cb;",
          "1752:     Stream_Read(s, glyph->aj, glyph->cb);",
          "1753:    }",
          "1754:   }",
          "1757:  }",
          "1759:  return TRUE;",
          "",
          "[Removed Lines]",
          "1756:   Stream_SetPointer(s, phold + fastGlyph->cbData);",
          "",
          "[Added Lines]",
          "1754:    Stream_Seek(s, fastGlyph->cbData - new_cb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2489: }",
          "2490: static BOOL update_decompress_brush(wStream* s, BYTE* output, BYTE bpp)",
          "2491: {",
          "2494:  BYTE byte = 0;",
          "2495:  BYTE* palette;",
          "2497:  palette = Stream_Pointer(s) + 16;",
          "2498:  bytesPerPixel = ((bpp + 1) / 8);",
          "2501:   return FALSE;",
          "2503:  for (y = 7; y >= 0; y--)",
          "",
          "[Removed Lines]",
          "2492:  int index;",
          "2493:  int x, y, k;",
          "2496:  int bytesPerPixel;",
          "2500:  if (Stream_GetRemainingLength(s) < 16) // 64 / 4",
          "",
          "[Added Lines]",
          "2491:  UINT32 index;",
          "2492:  UINT32 x, y, k;",
          "2495:  UINT32 bytesPerPixel;",
          "2499:  if (Stream_GetRemainingLength(s) < 16 + 7 * bytesPerPixel) // 64 / 4",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2516:   }",
          "2517:  }",
          "2519:  return TRUE;",
          "2520: }",
          "2521: static BOOL update_compress_brush(wStream* s, const BYTE* input, BYTE bpp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2519:  Stream_Seek(s, 7 * bytesPerPixel);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3477: static BOOL update_recv_secondary_order(rdpUpdate* update, wStream* s, BYTE flags)",
          "3478: {",
          "3479:  BOOL rc = FALSE;",
          "3481:  BYTE orderType;",
          "3482:  UINT16 extraFlags;",
          "3483:  UINT16 orderLength;",
          "",
          "[Removed Lines]",
          "3480:  BYTE* next;",
          "",
          "[Added Lines]",
          "3482:  size_t start, end, diff;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3502:   return FALSE;",
          "3503:  }",
          "3506:  name = secondary_order_string(orderType);",
          "3507:  WLog_Print(update->log, WLOG_DEBUG, \"Secondary Drawing Order %s\", name);",
          "",
          "[Removed Lines]",
          "3505:  next = Stream_Pointer(s) + orderLength + 7;",
          "",
          "[Added Lines]",
          "3507:  start = Stream_GetPosition(s);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3626:   WLog_Print(update->log, WLOG_ERROR, \"SECONDARY ORDER %s failed\", name);",
          "3627:  }",
          "3630:  return rc;",
          "3631: }",
          "",
          "[Removed Lines]",
          "3629:  Stream_SetPointer(s, next);",
          "",
          "[Added Lines]",
          "3631:  start += orderLength + 7;",
          "3632:  end = Stream_GetPosition(s);",
          "3633:  if (start > end)",
          "3634:  {",
          "3635:   WLog_Print(update->log, WLOG_WARN, \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes too much\",",
          "3636:              name, end - start);",
          "3637:   return FALSE;",
          "3638:  }",
          "3639:  diff = start - end;",
          "3640:  if (diff > 0)",
          "3641:  {",
          "3642:   WLog_Print(update->log, WLOG_DEBUG,",
          "3643:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
          "3644:   Stream_Seek(s, diff);",
          "3645:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}