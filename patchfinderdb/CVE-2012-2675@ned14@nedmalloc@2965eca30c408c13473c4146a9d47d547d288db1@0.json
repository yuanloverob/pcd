{
  "cve_id": "CVE-2012-2675",
  "cve_desc": "Multiple integer overflows in the (1) CallMalloc (malloc) and (2) nedpcalloc (calloc) functions in nedmalloc (nedmalloc.c) before 1.10 beta2 make it easier for context-dependent attackers to perform memory-related attacks such as buffer overflows via a large size value, which causes less memory to be allocated than expected.",
  "repo": "ned14/nedmalloc",
  "patch_hash": "2965eca30c408c13473c4146a9d47d547d288db1",
  "patch_info": {
    "commit_hash": "2965eca30c408c13473c4146a9d47d547d288db1",
    "repo": "ned14/nedmalloc",
    "commit_url": "https://github.com/ned14/nedmalloc/commit/2965eca30c408c13473c4146a9d47d547d288db1",
    "files": [
      "nedmalloc.c"
    ],
    "message": "Avoid overflowing allocation size in calloc()",
    "before_after_code_files": [
      "nedmalloc.c||nedmalloc.c"
    ]
  },
  "patch_diff": {
    "nedmalloc.c||nedmalloc.c": [
      "File: nedmalloc.c -> nedmalloc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2018: }",
      "2019: NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedpcalloc(nedpool *p, size_t no, size_t size) THROWSPEC",
      "2020: {",
      "2023: }",
      "2024: NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedprealloc(nedpool *p, void *mem, size_t size) THROWSPEC",
      "2025: {",
      "",
      "[Removed Lines]",
      "2021:  unsigned flags=NEDMALLOC_FORCERESERVE(p, 0, no*size);",
      "2022:  return nedpmalloc2(p, size*no, 0, M2_ZERO_MEMORY|flags);",
      "",
      "[Added Lines]",
      "2021:  size_t bytes=no*size;",
      "2023:  if(size && no!=bytes/size)",
      "2024:   return 0;",
      "2025:  unsigned flags=NEDMALLOC_FORCERESERVE(p, 0, bytes);",
      "2026:  return nedpmalloc2(p, bytes, 0, M2_ZERO_MEMORY|flags);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a759756639ab7543b650a10c2d77a0ffc7a2000",
      "candidate_info": {
        "commit_hash": "1a759756639ab7543b650a10c2d77a0ffc7a2000",
        "repo": "ned14/nedmalloc",
        "commit_url": "https://github.com/ned14/nedmalloc/commit/1a759756639ab7543b650a10c2d77a0ffc7a2000",
        "files": [
          "nedmalloc.c"
        ],
        "message": "Avoid overflowing allocation size in CallMalloc()\n\nThe wraparound could happen if USE_MAGIC_HEADERS is enabled.",
        "before_after_code_files": [
          "nedmalloc.c||nedmalloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ned14/nedmalloc/pull/6"
        ],
        "olp_code_files": {
          "patch": [
            "nedmalloc.c||nedmalloc.c"
          ],
          "candidate": [
            "nedmalloc.c||nedmalloc.c"
          ]
        }
      },
      "candidate_diff": {
        "nedmalloc.c||nedmalloc.c": [
          "File: nedmalloc.c -> nedmalloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328: #if USE_MAGIC_HEADERS",
          "329:  size_t _alignment=alignment;",
          "330:  size_t *_ret=0;",
          "332:  _alignment=0;",
          "333: #endif",
          "334: #if USE_ALLOCATOR==0",
          "",
          "[Removed Lines]",
          "331:  size+=alignment+3*sizeof(size_t);",
          "",
          "[Added Lines]",
          "331:  size_t bytes=size+alignment+3*sizeof(size_t);",
          "333:  if(bytes<size)",
          "334:   return 0;",
          "335:  size=bytes;",
          "",
          "---------------"
        ]
      }
    }
  ]
}