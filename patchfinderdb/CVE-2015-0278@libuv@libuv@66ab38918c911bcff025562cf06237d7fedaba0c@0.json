{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b6c19e21932df5d28f5761c31b7db203a305b21",
      "candidate_info": {
        "commit_hash": "8b6c19e21932df5d28f5761c31b7db203a305b21",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8b6c19e21932df5d28f5761c31b7db203a305b21",
        "files": [
          "include/uv-unix.h",
          "include/uv.h",
          "src/unix/stream.c"
        ],
        "message": "Revert \"pipe: allow queueing pending handles\"\n\nThe commit is quite broken and must be refactored before going into.\n\nThis reverts commit 08aeaf61935060e01f15cc1df2c9f09e892b0980.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv.h||include/uv.h",
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   uv_connection_cb connection_cb;                                             \\",
          "230:   int delayed_error;                                                          \\",
          "231:   int accepted_fd;                                                            \\",
          "233:   UV_STREAM_PRIVATE_PLATFORM_FIELDS                                           \\",
          "",
          "[Removed Lines]",
          "232:   int* queued_fds;                                                            \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   stream->connect_req = NULL;",
          "120:   stream->shutdown_req = NULL;",
          "121:   stream->accepted_fd = -1;",
          "123:   stream->delayed_error = 0;",
          "124:   QUEUE_INIT(&stream->write_queue);",
          "125:   QUEUE_INIT(&stream->write_completed_queue);",
          "",
          "[Removed Lines]",
          "122:   stream->queued_fds = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:   if (server->accepted_fd == -1)",
          "561:     return -EAGAIN;",
          "564:   switch (client->type) {",
          "565:     case UV_NAMED_PIPE:",
          "566:     case UV_TCP:",
          "",
          "[Removed Lines]",
          "563:   err = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "570:       if (err) {",
          "572:         uv__close(server->accepted_fd);",
          "574:       }",
          "575:       break;",
          "",
          "[Removed Lines]",
          "573:         goto done;",
          "",
          "[Added Lines]",
          "571:         server->accepted_fd = -1;",
          "572:         return err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "578:       err = uv_udp_open((uv_udp_t*) client, server->accepted_fd);",
          "579:       if (err) {",
          "580:         uv__close(server->accepted_fd);",
          "582:       }",
          "583:       break;",
          "",
          "[Removed Lines]",
          "581:         goto done;",
          "",
          "[Added Lines]",
          "580:         server->accepted_fd = -1;",
          "581:         return err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586:       assert(0);",
          "587:   }",
          "614: }",
          "",
          "[Removed Lines]",
          "589: done:",
          "591:   if (server->queued_fds != NULL) {",
          "593:     server->accepted_fd = server->queued_fds[2];",
          "596:     if (--server->queued_fds[0] == 0) {",
          "597:       free(server->queued_fds);",
          "598:       server->queued_fds = NULL;",
          "599:     } else {",
          "601:       memmove(server->queued_fds + 2,",
          "602:               server->queued_fds + 3,",
          "603:               server->queued_fds[0]);",
          "604:     }",
          "607:     uv__io_feed(server->loop, &server->io_watcher);",
          "608:   } else {",
          "609:     server->accepted_fd = -1;",
          "610:     if (err == 0)",
          "611:       uv__io_start(server->loop, &server->io_watcher, UV__POLLIN);",
          "612:   }",
          "613:   return err;",
          "",
          "[Added Lines]",
          "589:   uv__io_start(server->loop, &server->io_watcher, UV__POLLIN);",
          "590:   server->accepted_fd = -1;",
          "591:   return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "973: }",
          "1011: static void uv__read(uv_stream_t* stream) {",
          "1012:   uv_buf_t buf;",
          "1013:   ssize_t nread;",
          "",
          "[Removed Lines]",
          "976: static int uv__stream_queue_fd(uv_stream_t* stream, int fd) {",
          "977:   int queue_offset;",
          "978:   int queue_len;",
          "980:   if (stream->queued_fds == NULL) {",
          "981:     queue_offset = 0;",
          "982:     queue_len = 8;",
          "983:     stream->queued_fds = malloc((queue_len + 2) * sizeof(*stream->queued_fds));",
          "984:     if (stream->queued_fds == NULL)",
          "985:       return UV_ENOMEM;",
          "986:     stream->queued_fds[1] = queue_len;",
          "987:   } else {",
          "988:     queue_offset = stream->queued_fds[0];",
          "989:     queue_len = stream->queued_fds[1];",
          "992:     if (queue_offset == queue_len) {",
          "993:       queue_len += 8;",
          "994:       stream->queued_fds = realloc(stream->queued_fds,",
          "995:                                    (queue_len + 2) *",
          "996:                                        sizeof(*stream->queued_fds));",
          "997:       if (stream->queued_fds == NULL)",
          "998:         return UV_ENOMEM;",
          "999:       stream->queued_fds[1] = queue_len;",
          "1000:     }",
          "1001:   }",
          "1004:   stream->queued_fds[0] = queue_offset;",
          "1005:   stream->queued_fds[2 + queue_offset++] = fd;",
          "1007:   return 0;",
          "1008: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1015:   struct cmsghdr* cmsg;",
          "1016:   char cmsg_space[64];",
          "1017:   int count;",
          "1029:   stream->flags &= ~UV_STREAM_READ_PARTIAL;",
          "",
          "[Removed Lines]",
          "1018:   int err;",
          "1021:   if (stream->accepted_fd != -1) {",
          "1022:     static uv_buf_t buf = { NULL, 0 };",
          "1023:     stream->read2_cb((uv_pipe_t*) stream,",
          "1024:                      0,",
          "1025:                      &buf,",
          "1026:                      uv__handle_type(stream->accepted_fd));",
          "1027:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1113:              cmsg = CMSG_NXTHDR(&msg, cmsg)) {",
          "1115:           if (cmsg->cmsg_type == SCM_RIGHTS) {",
          "1121:             if (stream->accepted_fd != -1) {",
          "1128:               stream->accepted_fd = *pi;",
          "1129:             }",
          "1130:           } else {",
          "1131:             fprintf(stderr, \"ignoring non-SCM_RIGHTS ancillary data: %d\\n\",",
          "1132:                 cmsg->cmsg_type);",
          "",
          "[Removed Lines]",
          "1117:             void* pv = CMSG_DATA(cmsg);",
          "1118:             int* pi = pv;",
          "1122:               err = uv__stream_queue_fd(stream, *pi);",
          "1123:               if (err != 0) {",
          "1124:                 uv__stream_read_cb(stream, err, NULL, UV_UNKNOWN_HANDLE);",
          "1125:                 return;",
          "1126:               }",
          "1127:             } else {",
          "",
          "[Added Lines]",
          "1050:               fprintf(stderr, \"(libuv) ignoring extra FD received\\n\");",
          "1051:             }",
          "1054:             {",
          "1055:               void* pv = CMSG_DATA(cmsg);",
          "1056:               int* pi = pv;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1563:     handle->accepted_fd = -1;",
          "1564:   }",
          "1568:   assert(!uv__io_active(&handle->io_watcher, UV__POLLIN | UV__POLLOUT));",
          "1569: }",
          "",
          "[Removed Lines]",
          "1566:   free(handle->queued_fds);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85b92ad5bf59567a29387f89639de85d7faf068f",
      "candidate_info": {
        "commit_hash": "85b92ad5bf59567a29387f89639de85d7faf068f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/85b92ad5bf59567a29387f89639de85d7faf068f",
        "files": [
          "src/win/tcp.c"
        ],
        "message": "windows: fix uninitialized local variable warning\n\nPass the user-returned buffer to the read calback. Fixes the following\nwarning:\n\n    src\\win\\tcp.c(439): warning C4700: uninitialized local variable\n    'buf'",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     handle->flags &= ~UV_HANDLE_ZERO_READ;",
          "437:     handle->read_buffer = handle->alloc_cb((uv_handle_t*) handle, 65536);",
          "438:     if (handle->read_buffer.len == 0) {",
          "440:       return;",
          "441:     }",
          "442:     assert(handle->read_buffer.base != NULL);",
          "",
          "[Removed Lines]",
          "439:       handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, buf);",
          "",
          "[Added Lines]",
          "439:       handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, handle->read_buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fa24a2b70cdffb0e19c7fe9d294bbd3acd9ffba",
      "candidate_info": {
        "commit_hash": "3fa24a2b70cdffb0e19c7fe9d294bbd3acd9ffba",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3fa24a2b70cdffb0e19c7fe9d294bbd3acd9ffba",
        "files": [
          "configure.ac"
        ],
        "message": "unix: fix warnings about dollar symbol usage in identifiers",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: AC_ENABLE_STATIC",
          "24: AC_PROG_CC",
          "25: AM_PROG_CC_C_O",
          "26: # AM_PROG_AR is not available in automake v0.11 but it's essential in v0.12.",
          "27: m4_ifdef([AM_PROG_AR], [AM_PROG_AR])",
          "28: m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: CC_CHECK_CFLAGS_APPEND([-Wno-dollar-in-identifier-extension])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c43e8516b105b8bcbbd0a2d591dd1e520bb22357",
      "candidate_info": {
        "commit_hash": "c43e8516b105b8bcbbd0a2d591dd1e520bb22357",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c43e8516b105b8bcbbd0a2d591dd1e520bb22357",
        "files": [
          "src/version.c"
        ],
        "message": "src: bump version to 0.11.1-pre",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define UV_VERSION_MAJOR 0",
          "32: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Removed Lines]",
          "30: #define UV_VERSION_MINOR 10",
          "31: #define UV_VERSION_PATCH 4",
          "",
          "[Added Lines]",
          "30: #define UV_VERSION_MINOR 11",
          "31: #define UV_VERSION_PATCH 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f8130a21ba8aaeecc12aa00ebc201e5acf67405",
      "candidate_info": {
        "commit_hash": "7f8130a21ba8aaeecc12aa00ebc201e5acf67405",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7f8130a21ba8aaeecc12aa00ebc201e5acf67405",
        "files": [
          "config-unix.mk",
          "include/uv.h",
          "src/unix/cygwin.c"
        ],
        "message": "unix: remove src/unix/cygwin.c\n\nThe cygwin build has been broken for a long time now and no one is\ncomplaining, which strongly suggests that no one actually uses it.\nRemove it.",
        "before_after_code_files": [
          "config-unix.mk||config-unix.mk",
          "include/uv.h||include/uv.h",
          "src/unix/cygwin.c||src/unix/cygwin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "config-unix.mk||config-unix.mk": [
          "File: config-unix.mk -> config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: OBJS += src/unix/kqueue.o",
          "135: endif",
          "144: ifeq (sunos,$(PLATFORM))",
          "145: RUNNER_LDFLAGS += -pthreads",
          "146: else",
          "",
          "[Removed Lines]",
          "137: ifneq (,$(findstring cygwin,$(PLATFORM)))",
          "138: # We drop the --std=c89, it hides CLOCK_MONOTONIC on cygwin",
          "139: CSTDFLAG = -D_GNU_SOURCE",
          "140: LDFLAGS+=",
          "141: OBJS += src/unix/cygwin.o",
          "142: endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ],
        "src/unix/cygwin.c||src/unix/cygwin.c": [
          "File: src/unix/cygwin.c -> src/unix/cygwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}