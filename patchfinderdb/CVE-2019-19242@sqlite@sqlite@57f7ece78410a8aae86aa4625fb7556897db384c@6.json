{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47bcc34271435e376b57a8482e06803f4a7a6c4f",
      "candidate_info": {
        "commit_hash": "47bcc34271435e376b57a8482e06803f4a7a6c4f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47bcc34271435e376b57a8482e06803f4a7a6c4f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a potential NULL pointer dereference on a RENAME TABLE that references a VIEW with a logic error in a window function in the ORDER BY clause.\n\nFossilOrigin-Name: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8f4a3750b7d272daf96831655ffee80d457875ee121fc4537008046b9a00d0e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1246: void sqlite3WindowLink(Select *pSel, Window *pWin){",
          "1249:   ){",
          "1250:     pWin->pNextWin = pSel->pWin;",
          "1251:     if( pSel->pWin ){",
          "",
          "[Removed Lines]",
          "1247:   if( 0==pSel->pWin",
          "1248:    || 0==sqlite3WindowCompare(0, pSel->pWin, pWin, 0)",
          "",
          "[Added Lines]",
          "1247:   if( pSel!=0",
          "1248:    && (0==pSel->pWin || 0==sqlite3WindowCompare(0, pSel->pWin, pWin, 0))",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1234:   );",
          "1235: } {1 {frame ending offset must be a non-negative integer}}",
          "1237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237: # 2019-11-16 chromium issue 1025467",
          "1238: db close",
          "1239: sqlite3 db :memory:",
          "1240: do_catchsql_test 32.10 {",
          "1241:   CREATE VIEW a AS SELECT NULL INTERSECT SELECT NULL ORDER BY s() OVER R;",
          "1242:   CREATE TABLE a0 AS SELECT 0;",
          "1243:   ALTER TABLE a0 RENAME TO S;",
          "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c51cf8642f867050c8cb9e330582605dabeff76c",
      "candidate_info": {
        "commit_hash": "c51cf8642f867050c8cb9e330582605dabeff76c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c51cf8642f867050c8cb9e330582605dabeff76c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "A new implementation for the sqlite3ExprImpliesExpr() theorem prover that does a better job of answering TRUE to \"(NOT A) OR B\" when B is a NOT NULL expression.\n\nFossilOrigin-Name: b3413197f57711f04102d8cc6ff1e8ddbe0f5f2bcb6e1989cf314fa97f0ff7f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b24303220b7b4f59520176a0150fc619c668865450b4fdaa9ce4113a56e9687",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4908:              iTab);",
          "4909: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4914: static int exprImpliesNotNull(",
          "4920: ){",
          "4921:   assert( p );",
          "4922:   assert( pNN );",
          "4923:   if( sqlite3ExprCompare(pParse, p, pNN, iTab)==0 ) return 1;",
          "4924:   switch( p->op ){",
          "4925:     case TK_IN: {",
          "4926:       if( seenNot && ExprHasProperty(p, EP_xIsSelect) ) return 0;",
          "4927:       assert( ExprHasProperty(p,EP_xIsSelect)",
          "4928:            || (p->x.pList!=0 && p->x.pList->nExpr>0) );",
          "4929:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4930:     }",
          "4931:     case TK_BETWEEN: {",
          "4932:       ExprList *pList = p->x.pList;",
          "4933:       assert( pList!=0 );",
          "4934:       assert( pList->nExpr==2 );",
          "4935:       if( seenNot ) return 0;",
          "4936:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, seenNot)",
          "4937:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, seenNot)",
          "4938:       ){",
          "4939:         return 1;",
          "4940:       }",
          "4941:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4942:     }",
          "4943:     case TK_EQ:",
          "4944:     case TK_NE:",
          "4945:     case TK_LT:",
          "4946:     case TK_LE:",
          "4947:     case TK_GT:",
          "4948:     case TK_GE:",
          "4949:     case TK_PLUS:",
          "4950:     case TK_MINUS:",
          "4951:     case TK_STAR:",
          "4952:     case TK_REM:",
          "4953:     case TK_BITAND:",
          "4954:     case TK_BITOR:",
          "4955:     case TK_SLASH:",
          "4956:     case TK_LSHIFT:",
          "4957:     case TK_RSHIFT:",
          "4958:     case TK_CONCAT: {",
          "4959:       if( exprImpliesNotNull(pParse, p->pRight, pNN, iTab, seenNot) ) return 1;",
          "4961:     }",
          "4962:     case TK_SPAN:",
          "4963:     case TK_COLLATE:",
          "4964:     case TK_BITNOT:",
          "4965:     case TK_UPLUS:",
          "4966:     case TK_UMINUS: {",
          "4967:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4968:     }",
          "4969:     case TK_TRUTH: {",
          "4970:       if( seenNot ) return 0;",
          "4971:       if( p->op2!=TK_IS ) return 0;",
          "4972:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4973:     }",
          "4974:     case TK_NOT: {",
          "4975:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "4976:     }",
          "4977:   }",
          "4978:   return 0;",
          "4979: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4944:     return 1;",
          "4945:   }",
          "4946:   if( pE2->op==TK_NOTNULL",
          "4952:   ){",
          "4956:   }",
          "4957:   return 0;",
          "4958: }",
          "",
          "[Removed Lines]",
          "4947:    && pE1->op!=TK_ISNULL",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_ISNOT",
          "4950:    && pE1->op!=TK_OR",
          "4951:    && pE1->op!=TK_CASE",
          "4953:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "4954:     testcase( pX!=pE1->pLeft );",
          "4955:     if( sqlite3ExprCompare(pParse, pX, pE2->pLeft, iTab)==0 ) return 1;",
          "",
          "[Added Lines]",
          "5017:    && exprImpliesNotNull(pParse, pE1, pE2->pLeft, iTab, 0)",
          "5019:     return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a1bfc9a6d5b2367a84d367290d3bf5dba708a16",
      "candidate_info": {
        "commit_hash": "6a1bfc9a6d5b2367a84d367290d3bf5dba708a16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a1bfc9a6d5b2367a84d367290d3bf5dba708a16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Changes to the unix VFS that allegedly enable it to build of Fuchsia. We have no way of testing this.\n\nFossilOrigin-Name: be21a6416d47ff7db995006a0422b745044d9b8bb5bad3c53342aa6e2e524771",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af84774d1eebcfe6a61b564b4edf280ad3c3a93f39b7f70b6fcc56f7bbdfb9eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7822:     UNIXVFS(\"unix\",          autolockIoFinder ),",
          "7823: #elif OS_VXWORKS",
          "7824:     UNIXVFS(\"unix\",          vxworksIoFinder ),",
          "7825: #else",
          "7826:     UNIXVFS(\"unix\",          posixIoFinder ),",
          "7827: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7825: #elif __Fuchsia__",
          "7827:     UNIXVFS(\"unix\",          dotlockIoFinder ),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9942ef0d95c5a34bec24b669f454fc157bbf8eee",
      "candidate_info": {
        "commit_hash": "9942ef0d95c5a34bec24b669f454fc157bbf8eee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9942ef0d95c5a34bec24b669f454fc157bbf8eee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "STORED columns can now reference other STORED columns, in any order, as long as there are not loops.\n\nFossilOrigin-Name: 0d236698e64b2a4b46f91a25279c406e0bf392fe66116678456f0a034c11d7b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ad66af04a654d92711d2d056ce8f35cd21eac4b99fb8d78be1a314620b6d29e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:       }",
          "3578:       if( iTab<0 ){",
          "3579:         if( pParse->iSelfTab<0 ){",
          "3582:           assert( pExpr->iColumn>=XN_ROWID );",
          "3583:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3589:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3590:             return target;",
          "3591:           }else{",
          "3593:           }",
          "3594:         }else{",
          "",
          "[Removed Lines]",
          "3581:           assert( pExpr->y.pTab!=0 );",
          "3584:           if( pExpr->iColumn>=0",
          "3585:             && pExpr->y.pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "3586:           ){",
          "3587:             sqlite3VdbeAddOp2(v, OP_SCopy, pExpr->iColumn - pParse->iSelfTab,",
          "3588:                               target);",
          "3592:             return pExpr->iColumn - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3586:           Column *pCol;",
          "3587:           Table *pTab = pExpr->y.pTab;",
          "3588:           int iSrc;",
          "3589:           assert( pTab!=0 );",
          "3592:           if( pExpr->iColumn<0 ){",
          "3593:             return -1-pParse->iSelfTab;",
          "3594:           }",
          "3595:           pCol = pTab->aCol + pExpr->iColumn;",
          "3596:           iSrc = sqlite3ColumnOfTable(pTab, pExpr->iColumn) - pParse->iSelfTab;",
          "3597: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3598:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3599:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3600:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3601:                               pCol->zName);",
          "3602:               return 0;",
          "3603:             }",
          "3604:             pCol->colFlags |= COLFLAG_BUSY;",
          "3605:             if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "3606:               target = sqlite3ExprCodeTarget(pParse, pCol->pDflt, target);",
          "3607:             }else{",
          "3608:               target = iSrc;",
          "3609:               if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3610:                 sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3611:               }",
          "3612:             }",
          "3613:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3614:             return target;",
          "3615:           }else",
          "3617:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3618:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "3622:             return iSrc;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "218:   pParse->iSelfTab = -iRegStore;",
          "219:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "220:     u32 colFlags = pTab->aCol[i].colFlags;",
          "221:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "223:       iRegStore--;",
          "226:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "227:     }",
          "228:   }",
          "229:   pParse->iSelfTab = 0;",
          "",
          "[Removed Lines]",
          "224:     }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "",
          "[Added Lines]",
          "222:   for(i=0; i<pTab->nCol; i++){",
          "223:     if( pTab->aCol[i].colFlags & COLFLAG_STORED ){",
          "224:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "225:     }",
          "226:   }",
          "238:     }else if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "241:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
      "candidate_info": {
        "commit_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a faulty testcase() macro.\n\nFossilOrigin-Name: 80124ae55246b79023d23d3f55487ac3c0b40e8ff301c5daf4dd0631de8ddb29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8e9f77d52974f6ba0a536d05837b280a996745deb3a2169bb29379f10e49df4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5112:     case TK_IN:",
          "5113:     case TK_FUNCTION:",
          "5114:       testcase( pExpr->op==TK_ISNOT );",
          "5116:       testcase( pExpr->op==TK_ISNULL );",
          "5117:       testcase( pExpr->op==TK_NOTNULL );",
          "5118:       testcase( pExpr->op==TK_IS );",
          "",
          "[Removed Lines]",
          "5115:       testcase( pExpr->op==TK_NOT );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}