{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ac921bb6a81875b1913227a22e960629461dbac",
      "candidate_info": {
        "commit_hash": "5ac921bb6a81875b1913227a22e960629461dbac",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5ac921bb6a81875b1913227a22e960629461dbac",
        "files": [
          "src/win/fs.c",
          "test/test-fs.c"
        ],
        "message": "windows: fix fs_read with nbufs > 1 and offset\n\nReadFile() does not seem to update the offset at all.",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:   if (offset != -1) {",
          "559:     memset(&overlapped, 0, sizeof overlapped);",
          "565:     overlapped_ptr = &overlapped;",
          "566:   } else {",
          "567:     overlapped_ptr = NULL;",
          "",
          "[Removed Lines]",
          "561:     offset_.QuadPart = offset;",
          "562:     overlapped.Offset = offset_.LowPart;",
          "563:     overlapped.OffsetHigh = offset_.HighPart;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:   bytes = 0;",
          "572:   do {",
          "573:     DWORD incremental_bytes;",
          "574:     result = ReadFile(handle,",
          "575:                       req->bufs[index].base,",
          "576:                       req->bufs[index].len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:     if (offset != -1) {",
          "571:       offset_.QuadPart = offset + bytes;",
          "572:       overlapped.Offset = offset_.LowPart;",
          "573:       overlapped.OffsetHigh = offset_.HighPart;",
          "574:     }",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static uv_fs_t futime_req;",
          "111: static char buf[32];",
          "112: static char test_buf[] = \"test-buffer\\n\";",
          "113: static char test_buf2[] = \"second-buffer\\n\";",
          "114: static uv_buf_t iov;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: static char buf2[32];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2200:   uv_fs_req_cleanup(&open_req1);",
          "2202:   memset(buf, 0, sizeof(buf));",
          "2205:   ASSERT(r >= 0);",
          "2206:   ASSERT(read_req.result >= 0);",
          "2209:   uv_fs_req_cleanup(&read_req);",
          "2211:   iov = uv_buf_init(buf, sizeof(buf));",
          "",
          "[Removed Lines]",
          "2203:   iov = uv_buf_init(buf, sizeof(buf));",
          "2204:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "2207:   ASSERT(memcmp(buf, test_buf, sizeof(test_buf)) == 0);",
          "2208:   ASSERT(strcmp(buf + sizeof(test_buf), test_buf2) == 0);",
          "",
          "[Added Lines]",
          "2204:   memset(buf2, 0, sizeof(buf2));",
          "2206:   iovs[0] = uv_buf_init(buf, sizeof(test_buf));",
          "2207:   iovs[1] = uv_buf_init(buf2, sizeof(test_buf2));",
          "2208:   r = uv_fs_read(loop, &read_req, open_req1.result, iovs, 2, 0, NULL);",
          "2211:   ASSERT(strcmp(buf, test_buf) == 0);",
          "2212:   ASSERT(strcmp(buf2, test_buf2) == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f54947b72170bc0bd19c8b4fafa3131bc8fb316",
      "candidate_info": {
        "commit_hash": "2f54947b72170bc0bd19c8b4fafa3131bc8fb316",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2f54947b72170bc0bd19c8b4fafa3131bc8fb316",
        "files": [
          "src/unix/fs.c",
          "test/test-fs.c"
        ],
        "message": "fs: fix readdir on empty directory\n\n`uv_fd_readdir()` should initialize all fields even if there are no\nfiles. Fix the implementation and fix the test that should have been\ncovered it.",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:   dents = NULL;",
          "313:   n = scandir(req->path, &dents, uv__fs_readdir_filter, alphasort);",
          "315:   if (n == 0)",
          "317:   else if (n == -1)",
          "318:     return n;",
          "321:   req->ptr = dents;",
          "324:   return n;",
          "",
          "[Removed Lines]",
          "322:   req->nbufs = 0;",
          "",
          "[Added Lines]",
          "316:   req->nbufs = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:   }",
          "335:   errno = saved_errno;",
          "337:   return n;",
          "338: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:   req->ptr = NULL;",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438: static void empty_readdir_cb(uv_fs_t* req) {",
          "439:   ASSERT(req == &readdir_req);",
          "440:   ASSERT(req->fs_type == UV_FS_READDIR);",
          "441:   ASSERT(req->result == 0);",
          "442:   ASSERT(req->ptr == NULL);",
          "443:   uv_fs_req_cleanup(req);",
          "444:   readdir_cb_count++;",
          "445: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:   uv_dirent_t dent;",
          "445:   ASSERT(UV_EOF == uv_fs_readdir_next(req, &dent));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1805: TEST_IMPL(fs_readdir_empty_dir) {",
          "1806:   const char* path;",
          "1807:   uv_fs_t req;",
          "1808:   int r;",
          "1810:   path = \"./empty_dir/\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1811:   uv_dirent_t dent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1813:   uv_fs_mkdir(loop, &req, path, 0777, NULL);",
          "1814:   uv_fs_req_cleanup(&req);",
          "1816:   r = uv_fs_readdir(loop, &req, path, 0, NULL);",
          "1817:   ASSERT(r == 0);",
          "1818:   ASSERT(req.result == 0);",
          "1819:   ASSERT(req.ptr == NULL);",
          "1820:   uv_fs_req_cleanup(&req);",
          "1822:   r = uv_fs_readdir(loop, &readdir_req, path, 0, empty_readdir_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1821:   memset(&req, 0xdb, sizeof(req));",
          "1827:   ASSERT(UV_EOF == uv_fs_readdir_next(&req, &dent));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "adc79ba28245e1e9cba8a9330b6e0e1115f7c4e1",
      "candidate_info": {
        "commit_hash": "adc79ba28245e1e9cba8a9330b6e0e1115f7c4e1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/adc79ba28245e1e9cba8a9330b6e0e1115f7c4e1",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "Now working on v0.11.4",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 3",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 4",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15af49a7a0caa37516aa05c31fd84b0c1e952623",
      "candidate_info": {
        "commit_hash": "15af49a7a0caa37516aa05c31fd84b0c1e952623",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/15af49a7a0caa37516aa05c31fd84b0c1e952623",
        "files": [
          "Makefile.am",
          "src/unix/core.c",
          "src/win/core.c",
          "test/test-list.h",
          "test/test-loop-time.c",
          "uv.gyp"
        ],
        "message": "unix, windows: always update loop time\n\nFixes #846",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/core.c||src/unix/core.c",
          "src/win/core.c||src/win/core.c",
          "test/test-list.h||test/test-list.h",
          "test/test-loop-time.c||test/test-loop-time.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:                          test/test-list.h \\",
          "146:                          test/test-loop-handles.c \\",
          "147:                          test/test-loop-stop.c \\",
          "148:                          test/test-multiple-listen.c \\",
          "149:                          test/test-mutexes.c \\",
          "150:                          test/test-osx-select.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:                          test/test-loop-time.c \\",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:   int r;",
          "262:   r = uv__loop_alive(loop);",
          "263:   while (r != 0 && loop->stop_flag == 0) {",
          "264:     UV_TICK_START(loop, mode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:   if (!r)",
          "264:     uv__update_time(loop);",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     poll = &uv_poll;",
          "275:   r = uv__loop_alive(loop);",
          "276:   while (r != 0 && loop->stop_flag == 0) {",
          "277:     uv_update_time(loop);",
          "278:     uv_process_timers(loop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   if (!r)",
          "277:     uv_update_time(loop);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: TEST_DECLARE   (run_once)",
          "26: TEST_DECLARE   (run_nowait)",
          "27: TEST_DECLARE   (loop_stop)",
          "28: TEST_DECLARE   (barrier_1)",
          "29: TEST_DECLARE   (barrier_2)",
          "30: TEST_DECLARE   (barrier_3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: TEST_DECLARE   (loop_update_time)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   TEST_ENTRY  (run_once)",
          "252:   TEST_ENTRY  (run_nowait)",
          "253:   TEST_ENTRY  (loop_stop)",
          "254:   TEST_ENTRY  (barrier_1)",
          "255:   TEST_ENTRY  (barrier_2)",
          "256:   TEST_ENTRY  (barrier_3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:   TEST_ENTRY  (loop_update_time)",
          "",
          "---------------"
        ],
        "test/test-loop-time.c||test/test-loop-time.c": [
          "File: test/test-loop-time.c -> test/test-loop-time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "26: TEST_IMPL(loop_update_time) {",
          "27:   uint64_t start;",
          "29:   start = uv_now(uv_default_loop());",
          "30:   while (uv_now(uv_default_loop()) - start < 1000)",
          "31:     ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_NOWAIT));",
          "33:   return 0;",
          "34: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:         'test/test-list.h',",
          "325:         'test/test-loop-handles.c',",
          "326:         'test/test-loop-stop.c',",
          "327:         'test/test-walk-handles.c',",
          "328:         'test/test-watcher-cross-stop.c',",
          "329:         'test/test-multiple-listen.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:         'test/test-loop-time.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "150b6a71c9f65d410b9755df79e7a7733e6cafeb",
      "candidate_info": {
        "commit_hash": "150b6a71c9f65d410b9755df79e7a7733e6cafeb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/150b6a71c9f65d410b9755df79e7a7733e6cafeb",
        "files": [
          "Makefile.am",
          "src/unix/spinlock.h",
          "uv.gyp"
        ],
        "message": "unix: add spinlock.h\n\nAdd an atomic, non-blocking spinlock type.  The primary use case is to\nhave a mutex type that we can use while inside a signal handler.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/spinlock.h||src/unix/spinlock.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:                    src/unix/poll.c \\",
          "93:                    src/unix/process.c \\",
          "94:                    src/unix/signal.c \\",
          "95:                    src/unix/stream.c \\",
          "96:                    src/unix/tcp.c \\",
          "97:                    src/unix/thread.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:                    src/unix/spinlock.h \\",
          "",
          "---------------"
        ],
        "src/unix/spinlock.h||src/unix/spinlock.h": [
          "File: src/unix/spinlock.h -> src/unix/spinlock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #ifndef UV_SPINLOCK_H_",
          "17: #define UV_SPINLOCK_H_",
          "20: #include \"atomic-ops.h\"",
          "22: #define UV_SPINLOCK_INITIALIZER { 0 }",
          "24: typedef struct {",
          "25:   int lock;",
          "26: } uv_spinlock_t;",
          "28: UV_UNUSED(static void uv_spinlock_init(uv_spinlock_t* spinlock));",
          "29: UV_UNUSED(static void uv_spinlock_lock(uv_spinlock_t* spinlock));",
          "30: UV_UNUSED(static void uv_spinlock_unlock(uv_spinlock_t* spinlock));",
          "31: UV_UNUSED(static int uv_spinlock_trylock(uv_spinlock_t* spinlock));",
          "33: UV_UNUSED(static void uv_spinlock_init(uv_spinlock_t* spinlock)) {",
          "34:   ACCESS_ONCE(int, spinlock->lock) = 0;",
          "35: }",
          "37: UV_UNUSED(static void uv_spinlock_lock(uv_spinlock_t* spinlock)) {",
          "38:   while (!uv_spinlock_trylock(spinlock)) cpu_relax();",
          "39: }",
          "41: UV_UNUSED(static void uv_spinlock_unlock(uv_spinlock_t* spinlock)) {",
          "42:   ACCESS_ONCE(int, spinlock->lock) = 0;",
          "43: }",
          "45: UV_UNUSED(static int uv_spinlock_trylock(uv_spinlock_t* spinlock)) {",
          "50:   return 0 == cmpxchgi(&spinlock->lock, 0, 1);",
          "51: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:             'src/unix/poll.c',",
          "147:             'src/unix/process.c',",
          "148:             'src/unix/signal.c',",
          "149:             'src/unix/stream.c',",
          "150:             'src/unix/tcp.c',",
          "151:             'src/unix/thread.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:             'src/unix/spinlock.h',",
          "",
          "---------------"
        ]
      }
    }
  ]
}