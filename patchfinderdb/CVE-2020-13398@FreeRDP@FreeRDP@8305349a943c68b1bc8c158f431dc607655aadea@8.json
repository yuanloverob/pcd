{
  "cve_id": "CVE-2020-13398",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) write vulnerability has been detected in crypto_rsa_common in libfreerdp/crypto/crypto.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
  "patch_info": {
    "commit_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8305349a943c68b1bc8c158f431dc607655aadea",
    "files": [
      "libfreerdp/crypto/crypto.c"
    ],
    "message": "Fixed  GHSL-2020-102 heap overflow\n\n(cherry picked from commit 197b16cc15a12813c2e4fa2d6ae9cd9c4a57e581)",
    "before_after_code_files": [
      "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
      "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "96: static int crypto_rsa_common(const BYTE* input, int length, UINT32 key_length, const BYTE* modulus,",
      "97:                              const BYTE* exponent, int exponent_size, BYTE* output)",
      "98: {",
      "100:  int output_length = -1;",
      "107:  if (!input_reverse)",
      "108:   return -1;",
      "",
      "[Removed Lines]",
      "99:  BN_CTX* ctx;",
      "101:  BYTE* input_reverse;",
      "102:  BYTE* modulus_reverse;",
      "103:  BYTE* exponent_reverse;",
      "104:  BIGNUM *mod, *exp, *x, *y;",
      "105:  input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);",
      "",
      "[Added Lines]",
      "99:  BN_CTX* ctx = NULL;",
      "101:  BYTE* input_reverse = NULL;",
      "102:  BYTE* modulus_reverse = NULL;",
      "103:  BYTE* exponent_reverse = NULL;",
      "104:  BIGNUM* mod = NULL;",
      "105:  BIGNUM* exp = NULL;",
      "106:  BIGNUM* x = NULL;",
      "107:  BIGNUM* y = NULL;",
      "108:  size_t bufferSize = 2 * key_length + exponent_size;",
      "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
      "111:   return -1;",
      "113:  if (length > bufferSize)",
      "114:   bufferSize = length;",
      "116:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:  if (!(y = BN_new()))",
      "132:   goto fail_bn_y;",
      "138:  output_length = BN_bn2bin(y, output);",
      "139:  crypto_reverse(output, output_length);",
      "142:   memset(output + output_length, 0, key_length - output_length);",
      "144:  BN_free(y);",
      "145: fail_bn_y:",
      "146:  BN_clear_free(x);",
      "",
      "[Removed Lines]",
      "134:  BN_bin2bn(modulus_reverse, key_length, mod);",
      "135:  BN_bin2bn(exponent_reverse, exponent_size, exp);",
      "136:  BN_bin2bn(input_reverse, length, x);",
      "137:  BN_mod_exp(y, x, exp, mod, ctx);",
      "141:  if (output_length < (int)key_length)",
      "",
      "[Added Lines]",
      "145:  if (!BN_bin2bn(modulus_reverse, key_length, mod))",
      "146:   goto fail;",
      "148:  if (!BN_bin2bn(exponent_reverse, exponent_size, exp))",
      "149:   goto fail;",
      "150:  if (!BN_bin2bn(input_reverse, length, x))",
      "151:   goto fail;",
      "152:  if (BN_mod_exp(y, x, exp, mod, ctx) != 1)",
      "153:   goto fail;",
      "155:  if (output_length < 0)",
      "156:   goto fail;",
      "159:  if (output_length < key_length)",
      "162: fail:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e8f883e7cdc09353c62d294e95e1b720f6ca944",
      "candidate_info": {
        "commit_hash": "5e8f883e7cdc09353c62d294e95e1b720f6ca944",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5e8f883e7cdc09353c62d294e95e1b720f6ca944",
        "files": [
          "server/proxy/pf_client.c"
        ],
        "message": "server: proxy: use peer load balance info when host is fetched from config\n\n(cherry picked from commit 6f4682a043d20b794540827fe8604354477bb7af)",
        "before_after_code_files": [
          "server/proxy/pf_client.c||server/proxy/pf_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/proxy/pf_client.c||server/proxy/pf_client.c": [
          "File: server/proxy/pf_client.c -> server/proxy/pf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  freerdp_send_error_info(ps->context.rdp);",
          "73: }",
          "76: {",
          "77:  rdpContext* context = (rdpContext*)pc;",
          "78:  pServerContext* ps = pc->pdata->ps;",
          "",
          "[Removed Lines]",
          "75: static BOOL pf_client_load_rdpsnd(pClientContext* pc, proxyConfig* config)",
          "",
          "[Added Lines]",
          "75: static BOOL pf_client_load_rdpsnd(pClientContext* pc)",
          "79:  proxyConfig* config = pc->pdata->config;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  return TRUE;",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: static BOOL pf_client_passthrough_channels_init(pClientContext* pc)",
          "103: {",
          "104:  pServerContext* ps = pc->pdata->ps;",
          "105:  rdpSettings* settings = pc->context.settings;",
          "106:  proxyConfig* config = pc->pdata->config;",
          "107:  size_t i;",
          "109:  if (settings->ChannelCount + config->PassthroughCount >= settings->ChannelDefArraySize)",
          "110:  {",
          "111:   LOG_ERR(TAG, pc, \"too many channels\");",
          "112:   return FALSE;",
          "113:  }",
          "115:  for (i = 0; i < config->PassthroughCount; i++)",
          "116:  {",
          "117:   const char* channel_name = config->Passthrough[i];",
          "118:   CHANNEL_DEF channel = { 0 };",
          "121:   if (!WTSVirtualChannelManagerIsChannelJoined(ps->vcm, channel_name))",
          "122:   {",
          "123:    LOG_INFO(TAG, ps, \"client did not connected with channel %s, skipping passthrough\",",
          "124:             channel_name);",
          "126:    continue;",
          "127:   }",
          "130:   strncpy(channel.name, channel_name, CHANNEL_NAME_LEN);",
          "132:   settings->ChannelDefArray[settings->ChannelCount++] = channel;",
          "133:  }",
          "135:  return TRUE;",
          "136: }",
          "138: static BOOL pf_client_use_peer_load_balance_info(pClientContext* pc)",
          "139: {",
          "140:  pServerContext* ps = pc->pdata->ps;",
          "141:  rdpSettings* settings = pc->context.settings;",
          "142:  DWORD lb_info_len;",
          "143:  const char* lb_info = freerdp_nego_get_routing_token(&ps->context, &lb_info_len);",
          "144:  if (!lb_info)",
          "145:   return TRUE;",
          "147:  free(settings->LoadBalanceInfo);",
          "149:  settings->LoadBalanceInfoLength = lb_info_len;",
          "150:  settings->LoadBalanceInfo = malloc(settings->LoadBalanceInfoLength);",
          "152:  if (!settings->LoadBalanceInfo)",
          "153:   return FALSE;",
          "155:  CopyMemory(settings->LoadBalanceInfo, lb_info, settings->LoadBalanceInfoLength);",
          "156:  return TRUE;",
          "157: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  PubSub_SubscribeChannelDisconnected(instance->context->pubSub,",
          "145:                                      pf_channels_on_client_channel_disconnect);",
          "146:  PubSub_SubscribeErrorInfo(instance->context->pubSub, pf_client_on_error_info);",
          "152:  LOG_INFO(TAG, pc, \"Loading addins\");",
          "154:  {",
          "161:    return FALSE;",
          "183:  }",
          "186:  {",
          "187:   LOG_ERR(TAG, pc, \"Failed to load rdpsnd client\");",
          "188:   return FALSE;",
          "",
          "[Removed Lines]",
          "156:   size_t i;",
          "158:   if (settings->ChannelCount + config->PassthroughCount >= settings->ChannelDefArraySize)",
          "159:   {",
          "160:    LOG_ERR(TAG, pc, \"too many channels\");",
          "162:   }",
          "164:   for (i = 0; i < config->PassthroughCount; i++)",
          "165:   {",
          "166:    const char* channel_name = config->Passthrough[i];",
          "167:    CHANNEL_DEF channel = { 0 };",
          "170:    if (!WTSVirtualChannelManagerIsChannelJoined(ps->vcm, channel_name))",
          "171:    {",
          "172:     LOG_INFO(TAG, ps, \"client did not connected with channel %s, skipping passthrough\",",
          "173:              channel_name);",
          "175:     continue;",
          "176:    }",
          "179:    strncpy(channel.name, channel_name, CHANNEL_NAME_LEN);",
          "181:    settings->ChannelDefArray[settings->ChannelCount++] = channel;",
          "182:   }",
          "185:  if (!pf_client_load_rdpsnd(pc, config))",
          "",
          "[Added Lines]",
          "212:  if (!config->UseLoadBalanceInfo)",
          "218:   if (!pf_client_use_peer_load_balance_info(pc))",
          "222:  if (!pf_client_passthrough_channels_init(pc))",
          "223:   return FALSE;",
          "225:  if (!pf_client_load_rdpsnd(pc))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f75c4ac8de7bc4532b4059342521c755b2245d5",
      "candidate_info": {
        "commit_hash": "2f75c4ac8de7bc4532b4059342521c755b2245d5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2f75c4ac8de7bc4532b4059342521c755b2245d5",
        "files": [
          "libfreerdp/core/transport.c"
        ],
        "message": "Ensure all NLA structs are freed up\n\n(cherry picked from commit 477ad675f31a1965833304f79406599e0ad97b82)",
        "before_after_code_files": [
          "libfreerdp/core/transport.c||libfreerdp/core/transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/transport.c||libfreerdp/core/transport.c": [
          "File: libfreerdp/core/transport.c -> libfreerdp/core/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:  if (!settings->Authentication)",
          "326:   return TRUE;",
          "328:  rdp->nla = nla_new(instance, transport, settings);",
          "330:  if (!rdp->nla)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:  nla_free(rdp->nla);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1214:  if (transport->ReceiveBuffer)",
          "1215:   Stream_Release(transport->ReceiveBuffer);",
          "1217:  StreamPool_Free(transport->ReceivePool);",
          "1218:  CloseHandle(transport->connectedEvent);",
          "1219:  CloseHandle(transport->rereadEvent);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218:  nla_free(transport->nla);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "865239967e8e95b84d1811fc884bf2a22792c1a8",
      "candidate_info": {
        "commit_hash": "865239967e8e95b84d1811fc884bf2a22792c1a8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/865239967e8e95b84d1811fc884bf2a22792c1a8",
        "files": [
          "winpr/libwinpr/crt/test/TestAlignment.c"
        ],
        "message": "Fixed issues with clang sanitizers and alignemt offsets.\n\n(cherry picked from commit 4c1011fec37459ecc11f6c4453bcd693ed614e5d)",
        "before_after_code_files": [
          "winpr/libwinpr/crt/test/TestAlignment.c||winpr/libwinpr/crt/test/TestAlignment.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/test/TestAlignment.c||winpr/libwinpr/crt/test/TestAlignment.c": [
          "File: winpr/libwinpr/crt/test/TestAlignment.c -> winpr/libwinpr/crt/test/TestAlignment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  alignment = 16;",
          "",
          "[Removed Lines]",
          "15:  offset = 5;",
          "",
          "[Added Lines]",
          "15:  offset = 8;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e24cca0568115bf683507841882b475e689a3d7",
      "candidate_info": {
        "commit_hash": "4e24cca0568115bf683507841882b475e689a3d7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/4e24cca0568115bf683507841882b475e689a3d7",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Fixed rdp_read_info_packet unaligned access and size checks\n\n(cherry picked from commit c75d08d70e878d35cd12ffac2aefcda405576092)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:  return ret;",
          "477: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: static BOOL rdp_read_info_string(UINT32 flags, wStream* s, size_t cbLenNonNull, CHAR** dst,",
          "480:                                  size_t max)",
          "481: {",
          "482:  union",
          "483:  {",
          "484:   char c;",
          "485:   WCHAR w;",
          "486:   BYTE b[2];",
          "487:  } terminator;",
          "488:  CHAR* ret = NULL;",
          "490:  const BOOL unicode = flags & INFO_UNICODE;",
          "491:  const size_t nullSize = unicode ? sizeof(WCHAR) : sizeof(CHAR);",
          "493:  if (Stream_GetRemainingLength(s) < (size_t)(cbLenNonNull + nullSize))",
          "494:   return FALSE;",
          "496:  if (cbLenNonNull > 0)",
          "497:  {",
          "498:   WCHAR domain[512 / sizeof(WCHAR) + sizeof(WCHAR)] = { 0 };",
          "503:   if ((cbLenNonNull % 2) || (cbLenNonNull > (max - nullSize)))",
          "504:   {",
          "505:    WLog_ERR(TAG, \"protocol error: invalid value: %\" PRIuz \"\", cbLenNonNull);",
          "506:    return FALSE;",
          "507:   }",
          "509:   Stream_Read(s, domain, cbLenNonNull);",
          "511:   if (unicode)",
          "512:   {",
          "513:    if (ConvertFromUnicode(CP_UTF8, 0, domain, cbLenNonNull, &ret, 0, NULL, NULL) < 1)",
          "514:    {",
          "515:     WLog_ERR(TAG, \"failed to convert Domain string\");",
          "516:     return FALSE;",
          "517:    }",
          "518:   }",
          "519:   else",
          "520:   {",
          "521:    ret = calloc(cbLenNonNull + 1, nullSize);",
          "522:    if (!ret)",
          "523:     return FALSE;",
          "524:    memcpy(ret, domain, cbLenNonNull);",
          "525:   }",
          "526:  }",
          "528:  terminator.w = L'\\0';",
          "529:  Stream_Read(s, terminator.b, nullSize);",
          "531:  if (terminator.w != L'\\0')",
          "532:  {",
          "533:   WLog_ERR(TAG, \"protocol error: Domain must be null terminated\");",
          "534:   free(ret);",
          "535:   return FALSE;",
          "536:  }",
          "539:  return TRUE;",
          "540: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486: static BOOL rdp_read_info_packet(rdpRdp* rdp, wStream* s, UINT16 tpktlength)",
          "487: {",
          "488:  UINT32 flags;",
          "489:  UINT16 cbDomain;",
          "490:  UINT16 cbUserName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:  BOOL small = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:  UINT16 cbWorkingDir;",
          "494:  UINT32 CompressionLevel;",
          "495:  rdpSettings* settings = rdp->settings;",
          "501:  if (Stream_GetRemainingLength(s) < 18)",
          "502:   return FALSE;",
          "",
          "[Removed Lines]",
          "496:  union {",
          "497:   BYTE* bp;",
          "498:   WCHAR* wp;",
          "499:  } ptrconv;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:   settings->CompressionLevel = CompressionLevel;",
          "523:  }",
          "",
          "[Removed Lines]",
          "525:  if (!(flags & INFO_UNICODE))",
          "526:  {",
          "527:   WLog_ERR(TAG, \"Client without INFO_UNICODE flag: this is currently not supported\");",
          "528:   return FALSE;",
          "529:  }",
          "",
          "[Added Lines]",
          "586:  if (settings->RdpVersion < RDP_VERSION_5_PLUS)",
          "587:   small = TRUE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "538:   return FALSE;",
          "572:   return FALSE;",
          "606:   return FALSE;",
          "640:   return FALSE;",
          "676:   return FALSE;",
          "710:  if (settings->RdpVersion >= RDP_VERSION_5_PLUS)",
          "",
          "[Removed Lines]",
          "537:  if (Stream_GetRemainingLength(s) < (size_t)(cbDomain + 2))",
          "540:  if (cbDomain > 0)",
          "541:  {",
          "546:   if ((cbDomain % 2) || cbDomain > 512)",
          "547:   {",
          "548:    WLog_ERR(TAG, \"protocol error: invalid cbDomain value: %\" PRIu16 \"\", cbDomain);",
          "549:    return FALSE;",
          "550:   }",
          "552:   ptrconv.bp = Stream_Pointer(s);",
          "554:   if (ptrconv.wp[cbDomain / 2])",
          "555:   {",
          "556:    WLog_ERR(TAG, \"protocol error: Domain must be null terminated\");",
          "557:    return FALSE;",
          "558:   }",
          "560:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->Domain, 0, NULL, NULL) < 1)",
          "561:   {",
          "562:    WLog_ERR(TAG, \"failed to convert Domain string\");",
          "563:    return FALSE;",
          "564:   }",
          "566:   Stream_Seek(s, cbDomain);",
          "567:  }",
          "569:  Stream_Seek(s, 2);",
          "571:  if (Stream_GetRemainingLength(s) < (size_t)(cbUserName + 2))",
          "574:  if (cbUserName > 0)",
          "575:  {",
          "580:   if ((cbUserName % 2) || cbUserName > 512)",
          "581:   {",
          "582:    WLog_ERR(TAG, \"protocol error: invalid cbUserName value: %\" PRIu16 \"\", cbUserName);",
          "583:    return FALSE;",
          "584:   }",
          "586:   ptrconv.bp = Stream_Pointer(s);",
          "588:   if (ptrconv.wp[cbUserName / 2])",
          "589:   {",
          "590:    WLog_ERR(TAG, \"protocol error: UserName must be null terminated\");",
          "591:    return FALSE;",
          "592:   }",
          "594:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->Username, 0, NULL, NULL) < 1)",
          "595:   {",
          "596:    WLog_ERR(TAG, \"failed to convert UserName string\");",
          "597:    return FALSE;",
          "598:   }",
          "600:   Stream_Seek(s, cbUserName);",
          "601:  }",
          "603:  Stream_Seek(s, 2);",
          "605:  if (Stream_GetRemainingLength(s) < (size_t)(cbPassword + 2))",
          "608:  if (cbPassword > 0)",
          "609:  {",
          "614:   if ((cbPassword % 2) || cbPassword > LB_PASSWORD_MAX_LENGTH)",
          "615:   {",
          "616:    WLog_ERR(TAG, \"protocol error: invalid cbPassword value: %\" PRIu16 \"\", cbPassword);",
          "617:    return FALSE;",
          "618:   }",
          "620:   ptrconv.bp = Stream_Pointer(s);",
          "622:   if (ptrconv.wp[cbPassword / 2])",
          "623:   {",
          "624:    WLog_ERR(TAG, \"protocol error: Password must be null terminated\");",
          "625:    return FALSE;",
          "626:   }",
          "628:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->Password, 0, NULL, NULL) < 1)",
          "629:   {",
          "630:    WLog_ERR(TAG, \"failed to convert Password string\");",
          "631:    return FALSE;",
          "632:   }",
          "634:   Stream_Seek(s, cbPassword);",
          "635:  }",
          "637:  Stream_Seek(s, 2);",
          "639:  if (Stream_GetRemainingLength(s) < (size_t)(cbAlternateShell + 2))",
          "642:  if (cbAlternateShell > 0)",
          "643:  {",
          "648:   if ((cbAlternateShell % 2) || cbAlternateShell > 512)",
          "649:   {",
          "650:    WLog_ERR(TAG, \"protocol error: invalid cbAlternateShell value: %\" PRIu16 \"\",",
          "651:             cbAlternateShell);",
          "652:    return FALSE;",
          "653:   }",
          "655:   ptrconv.bp = Stream_Pointer(s);",
          "657:   if (ptrconv.wp[cbAlternateShell / 2])",
          "658:   {",
          "659:    WLog_ERR(TAG, \"protocol error: AlternateShell must be null terminated\");",
          "660:    return FALSE;",
          "661:   }",
          "663:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->AlternateShell, 0, NULL,",
          "664:                          NULL) < 1)",
          "665:   {",
          "666:    WLog_ERR(TAG, \"failed to convert AlternateShell string\");",
          "667:    return FALSE;",
          "668:   }",
          "670:   Stream_Seek(s, cbAlternateShell);",
          "671:  }",
          "673:  Stream_Seek(s, 2);",
          "675:  if (Stream_GetRemainingLength(s) < (size_t)(cbWorkingDir + 2))",
          "678:  if (cbWorkingDir > 0)",
          "679:  {",
          "684:   if ((cbWorkingDir % 2) || cbWorkingDir > 512)",
          "685:   {",
          "686:    WLog_ERR(TAG, \"protocol error: invalid cbWorkingDir value: %\" PRIu16 \"\", cbWorkingDir);",
          "687:    return FALSE;",
          "688:   }",
          "690:   ptrconv.bp = Stream_Pointer(s);",
          "692:   if (ptrconv.wp[cbWorkingDir / 2])",
          "693:   {",
          "694:    WLog_ERR(TAG, \"protocol error: WorkingDir must be null terminated\");",
          "695:    return FALSE;",
          "696:   }",
          "698:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->ShellWorkingDirectory, 0,",
          "699:                          NULL, NULL) < 1)",
          "700:   {",
          "701:    WLog_ERR(TAG, \"failed to convert AlternateShell string\");",
          "702:    return FALSE;",
          "703:   }",
          "705:   Stream_Seek(s, cbWorkingDir);",
          "706:  }",
          "708:  Stream_Seek(s, 2);",
          "",
          "[Added Lines]",
          "595:  if (!rdp_read_info_string(flags, s, cbDomain, &settings->Domain, small ? 52 : 512))",
          "598:  if (!rdp_read_info_string(flags, s, cbUserName, &settings->Username, small ? 44 : 512))",
          "601:  if (!rdp_read_info_string(flags, s, cbPassword, &settings->Password, small ? 32 : 512))",
          "604:  if (!rdp_read_info_string(flags, s, cbAlternateShell, &settings->AlternateShell, 512))",
          "607:  if (!rdp_read_info_string(flags, s, cbWorkingDir, &settings->ShellWorkingDirectory, 512))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f975fe27469ca9bf06e4f752b39da6cbc32f3bc9",
      "candidate_info": {
        "commit_hash": "f975fe27469ca9bf06e4f752b39da6cbc32f3bc9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f975fe27469ca9bf06e4f752b39da6cbc32f3bc9",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Abort on first possible certificate validation error\n\nOnly retry certificate validation if the purpose was wrong.\n\n(cherry picked from commit de619e9964684eced5fb3108de81440b979aace0)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ],
          "candidate": [
            "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:  for (i = 0; i < ARRAYSIZE(purposes); i++)",
          "858:  {",
          "860:   int purpose = purposes[i];",
          "861:   csc = X509_STORE_CTX_new();",
          "",
          "[Removed Lines]",
          "859:   int rc = -1;",
          "",
          "[Added Lines]",
          "859:   int err = -1, rc = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:   X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "871:   rc = X509_verify_cert(csc);",
          "872:  skip:",
          "873:   X509_STORE_CTX_free(csc);",
          "874:   if (rc == 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:   err = X509_STORE_CTX_get_error(csc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "876:    status = TRUE;",
          "877:    break;",
          "878:   }",
          "879:  }",
          "881:  X509_STORE_free(cert_ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "880:   else if (err != X509_V_ERR_INVALID_PURPOSE)",
          "881:    break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}