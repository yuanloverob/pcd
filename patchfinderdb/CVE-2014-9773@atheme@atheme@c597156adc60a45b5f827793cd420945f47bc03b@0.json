{
  "cve_id": "CVE-2014-9773",
  "cve_desc": "modules/chanserv/flags.c in Atheme before 7.2.7 allows remote attackers to modify the Anope FLAGS behavior by registering and dropping the (1) LIST, (2) CLEAR, or (3) MODIFY keyword nicks.",
  "repo": "atheme/atheme",
  "patch_hash": "c597156adc60a45b5f827793cd420945f47bc03b",
  "patch_info": {
    "commit_hash": "c597156adc60a45b5f827793cd420945f47bc03b",
    "repo": "atheme/atheme",
    "commit_url": "https://github.com/atheme/atheme/commit/c597156adc60a45b5f827793cd420945f47bc03b",
    "files": [
      "modules/chanserv/flags.c"
    ],
    "message": "chanserv/flags: make Anope FLAGS compatibility an option\n\nPreviously, ChanServ FLAGS behavior could be modified by registering or\ndropping the keyword nicks \"LIST\", \"CLEAR\", and \"MODIFY\".\nNow, a configuration option is available that when turned on (default),\ndisables registration of these keyword nicks and enables this\ncompatibility feature. When turned off, registration of these keyword\nnicks is possible, and compatibility to Anope's FLAGS command is\ndisabled.\n\nFixes atheme/atheme#397",
    "before_after_code_files": [
      "modules/chanserv/flags.c||modules/chanserv/flags.c"
    ]
  },
  "patch_diff": {
    "modules/chanserv/flags.c||modules/chanserv/flags.c": [
      "File: modules/chanserv/flags.c -> modules/chanserv/flags.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: );",
      "19: static void cs_cmd_flags(sourceinfo_t *si, int parc, char *parv[]);",
      "21: command_t cs_flags = { \"FLAGS\", N_(\"Manipulates specific permissions on a channel.\"),",
      "22:                         AC_NONE, 3, cs_cmd_flags, { .path = \"cservice/flags\" } };",
      "24: void _modinit(module_t *m)",
      "25: {",
      "26:  service_named_bind_command(\"chanserv\", &cs_flags);",
      "27: }",
      "29: void _moddeinit(module_unload_intent_t intent)",
      "30: {",
      "31:  service_named_unbind_command(\"chanserv\", &cs_flags);",
      "32: }",
      "34: typedef struct {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: static void check_registration_keywords(hook_user_register_check_t *hdata);",
      "25: static bool anope_flags_compat = true;",
      "31:  add_bool_conf_item(\"ANOPE_FLAGS_COMPAT\", &chansvs.me->conf_table, 0, &anope_flags_compat, true);",
      "33:  hook_add_event(\"nick_can_register\");",
      "34:  hook_add_nick_can_register(check_registration_keywords);",
      "36:  hook_add_event(\"user_can_register\");",
      "37:  hook_add_user_can_register(check_registration_keywords);",
      "44:  hook_del_nick_can_register(check_registration_keywords);",
      "46:  hook_del_user_can_register(check_registration_keywords);",
      "48:  del_conf_item(\"ANOPE_FLAGS_COMPAT\", &chansvs.me->conf_table);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "150:   logcommand(si, CMDLOG_GET, \"FLAGS: \\2%s\\2\", mc->name);",
      "151: }",
      "154: static void cs_cmd_flags(sourceinfo_t *si, int parc, char *parv[])",
      "155: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "170: static void check_registration_keywords(hook_user_register_check_t *hdata)",
      "171: {",
      "172:  if (hdata->approved || !anope_flags_compat)",
      "173:  {",
      "174:   return;",
      "175:  }",
      "177:  if (!strcasecmp(hdata->account, \"LIST\") || !strcasecmp(hdata->account, \"CLEAR\") || !strcasecmp(hdata->account, \"MODIFY\"))",
      "178:  {",
      "179:   command_fail(hdata->si, fault_badparams, \"The nick \\2%s\\2 is reserved and cannot be registered.\", hdata->account);",
      "180:   hdata->approved = 1;",
      "181:  }",
      "182: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:  {",
      "223:   do_list(si, mc, 0);",
      "224:   free(target);",
      "226:   return;",
      "227:  }",
      "229:  {",
      "230:   free(target);",
      "",
      "[Removed Lines]",
      "221:  else if (!strcasecmp(target, \"LIST\") && myentity_find_ext(target) == NULL)",
      "228:  else if (!strcasecmp(target, \"CLEAR\") && myentity_find_ext(target) == NULL)",
      "",
      "[Added Lines]",
      "252:  else if (anope_flags_compat && !strcasecmp(target, \"LIST\") && myentity_find_ext(target) == NULL)",
      "259:  else if (anope_flags_compat && !strcasecmp(target, \"CLEAR\") && myentity_find_ext(target) == NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "251:   command_success_nodata(si, _(\"Cleared flags in \\2%s\\2.\"), mc->name);",
      "252:   return;",
      "253:  }",
      "255:  {",
      "256:   free(target);",
      "",
      "[Removed Lines]",
      "254:  else if (!strcasecmp(target, \"MODIFY\") && myentity_find_ext(target) == NULL)",
      "",
      "[Added Lines]",
      "285:  else if (anope_flags_compat && !strcasecmp(target, \"MODIFY\") && myentity_find_ext(target) == NULL)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2ad8b65eb7c5d4d80356fed4e929a1952894303",
      "candidate_info": {
        "commit_hash": "a2ad8b65eb7c5d4d80356fed4e929a1952894303",
        "repo": "atheme/atheme",
        "commit_url": "https://github.com/atheme/atheme/commit/a2ad8b65eb7c5d4d80356fed4e929a1952894303",
        "files": [
          "modules/chanserv/flags.c",
          "modules/nickserv/enforce.c"
        ],
        "message": "Wrap messages about nick being reserved in _() for i18n",
        "before_after_code_files": [
          "modules/chanserv/flags.c||modules/chanserv/flags.c",
          "modules/nickserv/enforce.c||modules/nickserv/enforce.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/chanserv/flags.c||modules/chanserv/flags.c"
          ],
          "candidate": [
            "modules/chanserv/flags.c||modules/chanserv/flags.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/chanserv/flags.c||modules/chanserv/flags.c": [
          "File: modules/chanserv/flags.c -> modules/chanserv/flags.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:  if (!strcasecmp(hdata->account, \"LIST\") || !strcasecmp(hdata->account, \"CLEAR\") || !strcasecmp(hdata->account, \"MODIFY\"))",
          "178:  {",
          "180:   hdata->approved = 1;",
          "181:  }",
          "182: }",
          "",
          "[Removed Lines]",
          "179:   command_fail(hdata->si, fault_badparams, \"The nick \\2%s\\2 is reserved and cannot be registered.\", hdata->account);",
          "",
          "[Added Lines]",
          "179:   command_fail(hdata->si, fault_badparams, _(\"The nick \\2%s\\2 is reserved and cannot be registered.\"), hdata->account);",
          "",
          "---------------"
        ],
        "modules/nickserv/enforce.c||modules/nickserv/enforce.c": [
          "File: modules/nickserv/enforce.c -> modules/nickserv/enforce.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:  if (!strncasecmp(hdata->account, nicksvs.enforce_prefix, prefixlen) && isdigit((unsigned char)hdata->account[prefixlen]))",
          "533:  {",
          "535:   hdata->approved = 1;",
          "536:  }",
          "537: }",
          "",
          "[Removed Lines]",
          "534:   command_fail(hdata->si, fault_badparams, \"The nick \\2%s\\2 is reserved and cannot be registered.\", hdata->account);",
          "",
          "[Added Lines]",
          "534:   command_fail(hdata->si, fault_badparams, _(\"The nick \\2%s\\2 is reserved and cannot be registered.\"), hdata->account);",
          "",
          "---------------"
        ]
      }
    }
  ]
}