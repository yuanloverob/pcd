{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00a77bc32d5ab62063a61295a3a4e00a34231be1",
      "candidate_info": {
        "commit_hash": "00a77bc32d5ab62063a61295a3a4e00a34231be1",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/00a77bc32d5ab62063a61295a3a4e00a34231be1",
        "files": [
          "lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/web/jsi.js",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiRegexp.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "tests/sqlite.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.20\": Add sqlite REGEXP operator. matchObj now accepts spaces.\n\nFossilOrigin-Name: 7f478e625cf04fe397c78577872417e2a29624a76856938af2d26670ed5ffb59",
        "before_after_code_files": [
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "tests/sqlite.jsi||tests/sqlite.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:     function showPos(file:string, line:number, func:string) {",
          "331:         var linestr = self.filedata[file][line-1];",
          "332:         var lev = (self.curlev?self.curlev:self.level);",
          "333:         if (func.length)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:         if (!self.filedata[file])",
          "332:             return;",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:     function listFile(file:string, line:number, num:number) {",
          "326:         var find = addFile(file);",
          "327:         var data = self.filedata[file];",
          "328:         printf(\"FILE: %s:%d\\n\", file, line);",
          "329:         for (var i=line; i<line+num && data[i-1] !== undefined; i++)",
          "330:                 printf(\"%-5d: %s\\n\", i, data[i-1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:         if (!data) return;",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:             if (typeof(match) !== 'string')",
          "686:                 throw('arg 2: expected string');",
          "688:             if (pat === match)",
          "689:                 return;",
          "690:             if (!partial)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:             match = match.replace(/\\s/g,'');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 19",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 20",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3870:     Jsi_DSInit(&dStr);",
          "3871:     Jsi_RC rc = JSI_OK;",
          "3872:     if (!arg2) {",
          "3873:         jsi_sysTypeGet(interp, arg1, &dStr);",
          "",
          "[Removed Lines]",
          "3869:     Jsi_DString dStr;",
          "",
          "[Added Lines]",
          "3869:     Jsi_DString dStr, sStr;",
          "3871:     Jsi_DSInit(&sStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3890:     }",
          "3891:     jsi_sysTypeGet(interp, arg1, &dStr);",
          "3892:     cp = Jsi_DSValue(&dStr);",
          "3920:             }",
          "3921: mismatch:",
          "3922:             ok = 0;",
          "3923:             if (interp->asserts && !noerror)",
          "",
          "[Removed Lines]",
          "3893:     if (sp) {",
          "3894:         if (Jsi_Strcmp(cp, sp)) {",
          "3895:             if (partial && *cp && *sp) {",
          "3897:                 char *ss = Jsi_AppendLen(&eStr, sp+1, Jsi_Strlen(sp)-2);",
          "3898:                 int vargc; char **vargv;",
          "3900:                 cs=cp+1; ss=sp;",
          "3901:                 while (*cs) {",
          "3902:                     Jsi_DString eStr = {};",
          "3903:                     ce=Jsi_Strchr(cs,',');",
          "3904:                     if (!ce) ce = cs+Jsi_Strlen(cs);",
          "3905:                     Jsi_DSAppend(&eStr, \",\", NULL);",
          "3906:                     int elen = ce-cs;",
          "3907:                     cc = Jsi_DSAppendLen(&eStr, cs, elen); // obj key.",
          "3908:                     int dlen = Jsi_Strlen(cc);",
          "3909:                     if (dlen>1 && cc[dlen-1]=='}')",
          "3910:                         cc[--dlen] = 0;",
          "3911:                     if (*ss=='{' && !Jsi_Strncmp(ss+1, cc+1, dlen-1))",
          "3912:                         ss = ss+dlen;",
          "3913:                     else",
          "3914:                         ss = Jsi_Strstr(ss, cc);",
          "3915:                     Jsi_DSFree(&eStr);",
          "3916:                     if (!ss) goto mismatch;",
          "3917:                     cs=(*ce?ce+1:ce);",
          "3918:                 }",
          "3919:                 goto done;",
          "",
          "[Added Lines]",
          "3894:     if (Jsi_Strchr(sp, ' ')) {",
          "3895:         Jsi_DSAppend(&sStr, sp, NULL);",
          "3896:         char *cp = Jsi_DSValue(&sStr), *ep = cp;",
          "3897:         while (*cp) {",
          "3898:             while (isspace(*cp)) cp++;",
          "3900:         }",
          "3902:     }",
          "3903:     if (Jsi_Strcmp(cp, sp)) {",
          "3904:         if (partial && *cp && *sp) {",
          "3906:             char *ss = Jsi_AppendLen(&eStr, sp+1, Jsi_Strlen(sp)-2);",
          "3907:             int vargc; char **vargv;",
          "3909:             cs=cp+1; ss=sp;",
          "3910:             while (*cs) {",
          "3911:                 Jsi_DString eStr = {};",
          "3912:                 ce=Jsi_Strchr(cs,',');",
          "3913:                 if (!ce) ce = cs+Jsi_Strlen(cs);",
          "3914:                 Jsi_DSAppend(&eStr, \",\", NULL);",
          "3915:                 int elen = ce-cs;",
          "3916:                 cc = Jsi_DSAppendLen(&eStr, cs, elen); // obj key.",
          "3917:                 int dlen = Jsi_Strlen(cc);",
          "3918:                 if (dlen>1 && cc[dlen-1]=='}')",
          "3919:                     cc[--dlen] = 0;",
          "3920:                 if (*ss=='{' && !Jsi_Strncmp(ss+1, cc+1, dlen-1))",
          "3921:                     ss = ss+dlen;",
          "3922:                 else",
          "3923:                     ss = Jsi_Strstr(ss, cc);",
          "3924:                 Jsi_DSFree(&eStr);",
          "3925:                 if (!ss) goto mismatch;",
          "3926:                 cs=(*ce?ce+1:ce);",
          "3928:             goto done;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3925:             else",
          "3926:                 Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3927:         }",
          "3929:     }",
          "3930: done:",
          "3931:     Jsi_DSFree(&dStr);",
          "3932:     if (rc == JSI_OK)",
          "3933:         Jsi_ValueMakeBool(interp, ret, ok);",
          "3934:     return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3939:     Jsi_DSFree(&sStr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4862:     { \"load\",       jsi_LoadLoadCmd, 1,  1, \"shlib:string\", .help=\"Load a shared executable and invoke its _Init call\", .retType=(uint)JSI_TT_VOID },",
          "4863: #endif",
          "4864:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4866:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "4867:     { \"parseInt\",   parseIntCmd,     1,  2, \"val:any, base:number=10\", .help=\"Convert string to an integer\", .retType=(uint)JSI_TT_NUMBER },",
          "4868:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "",
          "[Removed Lines]",
          "4865:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Object field names/types matching. Single arg generates string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "4873:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     return JSI_OK;",
          "105: }",
          "108: static Jsi_RC RegExp_constructor(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "109:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: Jsi_Value* Jsi_ValueNewRegExp(Jsi_Interp *interp, const char *regtxt) {",
          "108:     Jsi_DString dStr = {};",
          "109:     Jsi_DSAppend(&dStr, \"/\", regtxt, \"/\", NULL);",
          "110:     Jsi_Regex *re = Jsi_RegExpNew(interp, Jsi_DSValue(&dStr), 0);",
          "111:     Jsi_DSFree(&dStr);",
          "112:     if (re == NULL)",
          "113:         return NULL;",
          "114:     Jsi_Obj *o = Jsi_ObjNewType(interp, JSI_OT_REGEXP);",
          "115:     Jsi_Value *ret = Jsi_ValueNew(interp);",
          "116:     Jsi_ValueMakeObject(interp, &ret, o);",
          "117:     ret->d.obj->d.robj = re;",
          "118:     ret->d.obj->ot = JSI_OT_REGEXP;",
          "119:     return ret;",
          "120: }",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1373:     sqlite3_result_double(context, (double)d);",
          "1374: }",
          "1376: static void jsiSqlFunc(sqlite3_context *context, int argc, sqlite3_value**argv) {",
          "1377:     SqlFunc *p = (SqlFunc*)sqlite3_user_data(context);",
          "1378:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1376: static void jsiSqlFuncRegexp(sqlite3_context *context, int argc, sqlite3_value**argv) {",
          "1377:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1378:     SQLSIGASSERT(jdb,DB);",
          "1379:     Jsi_Interp *interp = jdb->interp;",
          "1380:     if (argc!=2) {",
          "1381:         Jsi_LogWarn(\"sqlite regex, expected: str pattern\");",
          "1382:         return;",
          "1383:     }",
          "1384:     const char *str = (char *)sqlite3_value_text(argv[1]);",
          "1385:     char *spat = (char *)sqlite3_value_text(argv[0]);",
          "1386:     int rc = 0;",
          "1387:     Jsi_Value *pat = Jsi_ValueNewRegExp(interp, spat);",
          "1388:     if (!pat)",
          "1389:         return;",
          "1390:     Jsi_IncrRefCount(interp, pat);",
          "1391:     if (Jsi_RegExpMatch(interp, pat, str, &rc, NULL)==JSI_OK)",
          "1392:         sqlite3_result_int(context, rc);",
          "1393:     Jsi_DecrRefCount(interp, pat);",
          "1394: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3789:         toacc = *ret;",
          "3790:     }",
          "3791:     sqlite3_create_function(db->db, \"unixtime\", -1, SQLITE_UTF8, db, jsiSqlFuncUnixTime, 0, 0);",
          "3793:     fobj = Jsi_ValueGetObj(interp, toacc /* constructor obj*/);",
          "3794:     if ((db->objId = Jsi_UserObjNew(interp, &sqliteobject, fobj, db))<0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3812:     sqlite3_create_function(db->db, \"regexp\", -1, SQLITE_UTF8, db, jsiSqlFuncRegexp, 0, 0);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"245bfc701de9f6aaafbe9462645dc362\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"37fc6a9753c3414663cd55c6d7135e39\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     bool(*_Jsi_StrIsAlnum)(const char *cp);",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     void *endPtr;",
          "451: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "873:     Jsi_StrIsAlnum,\\",
          "874:     Jsi_SqlObjBinds,\\",
          "875:     Jsi_UserObjName,\\",
          "876:     NULL",
          "878: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     Jsi_ValueNewRegExp,\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1295: #define Jsi_StrIsAlnum(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_StrIsAlnum(n0))",
          "1296: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6))",
          "1297: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1299: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300: #define Jsi_ValueNewRegExp(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1))",
          "",
          "---------------"
        ],
        "tests/sqlite.jsi||tests/sqlite.jsi": [
          "File: tests/sqlite.jsi -> tests/sqlite.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: ;binds = [91,3];",
          "61: ;db.query('insert into foo values(?,?);', binds);",
          "62: ;db.query('insert into foo values(?,?);', {values:binds});",
          "65: ;db.func('bar',function(n) { return n+'.000'; });",
          "",
          "[Removed Lines]",
          "63: ;db.query('insert into foo values(?,?);', {values:[91,3]});",
          "",
          "[Added Lines]",
          "63: ;db.query('insert into foo values(?,?);', {values:[91,'dog']});",
          "64: ;db.query('insert into foo values(?,?);', {values:[91,'door']});",
          "66: ;db.query('select * from foo where b REGEXP \"^do\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158: binds = [91,3] ==> [ 91, 3 ]",
          "159: db.query('insert into foo values(?,?);', binds) ==> []",
          "160: db.query('insert into foo values(?,?);', {values:binds}) ==> []",
          "162: db.func('bar',function(n) { return n+'.000'; }) ==> undefined",
          "163: db.onecolumn('select bar(a) from foo where b == 2;') ==> 95.000",
          "164: db.conf({onTrace:null}) ==> undefined",
          "",
          "[Removed Lines]",
          "161: db.query('insert into foo values(?,?);', {values:[91,3]}) ==> []",
          "",
          "[Added Lines]",
          "164: db.query('insert into foo values(?,?);', {values:[91,'dog']}) ==> []",
          "165: db.query('insert into foo values(?,?);', {values:[91,'door']}) ==> []",
          "166: db.query('select * from foo where b REGEXP \"^do\"') ==> [ { a:91, b:\"dog\" }, { a:91, b:\"door\" } ]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1349: <tr><td>isNaN</td><td>isNaN(val):boolean </td><td>Return true if not a number.</td></tr>",
          "1350: <tr><td>load</td><td>load(shlib:string):void </td><td>Load a shared executable and invoke its _Init call.</td></tr>",
          "1351: <tr><td>log</td><td>log(val, ...):void </td><td>Same as puts, but includes file:line.</td></tr>",
          "1353: <tr><td>noOp</td><td>noOp() </td><td>A No-Op. A zero overhead command call that is useful for debugging.</td></tr>",
          "1354: <tr><td>parseFloat</td><td>parseFloat(val):number </td><td>Convert string to a double.</td></tr>",
          "1355: <tr><td>parseInt</td><td>parseInt(val:any, base:number=10):number </td><td>Convert string to an integer.</td></tr>",
          "",
          "[Removed Lines]",
          "1352: <tr><td>matchObj</td><td>matchObj(obj:object, match:string=void, partial=false, noerror=false):string|boolean </td><td>Object field names/types matching. Single arg generates string.</td></tr>",
          "",
          "[Added Lines]",
          "1352: <tr><td>matchObj</td><td>matchObj(obj:object, match:string=void, partial=false, noerror=false):string|boolean </td><td>Validate that object matches given name:type string. With single arg returns generated string.</td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc29c8c17fb4551f13a45115004b75c73d2123bc",
      "candidate_info": {
        "commit_hash": "cc29c8c17fb4551f13a45115004b75c73d2123bc",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/cc29c8c17fb4551f13a45115004b75c73d2123bc",
        "files": [
          "lib/web/jsi.js",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiUtils.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.10\": Fix utf encode of JSON stringify.\n\nFossilOrigin-Name: d3144ff96fb1ab62b2d996461ca68b12fd707a45a51c399b7a05f0bacdc88c61",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     debug: function(){},",
          "13:     trace : function(){},",
          "14:     test : function(){},",
          "16:     warn : console.warn.bind(console.window,'WARN: '),",
          "17:     error : console.error.bind(console.window,'ERROR: '),",
          "18:     conf: function(typ, on) {",
          "20:         if (!typ) typ = 'debug';",
          "21:         switch (typ) {",
          "25:             default: puts('unknown log type, not one of: debug,trace,test');",
          "26:         }",
          "27:     }",
          "",
          "[Removed Lines]",
          "15:     info : console.warn.bind(console.window,'INFO: '),",
          "22:             case 'debug': LogDebug = Log.debug = (on?console.error.bind(console.window,'DEBUG: '):function(){}); break;",
          "23:             case 'trace': LogTrace = Log.trace = (on?console.warn.bind(console.window,'TRACE: '):function(){}); break;",
          "24:             case 'test': LogTest = Log.test = (on?console.error.bind(console.window,'TEST: '):function(){}); break;",
          "",
          "[Added Lines]",
          "15:     info : console.log.bind(console.window,'INFO: '),",
          "22:             case 'debug': LogDebug = Log.debug = (on?console.log.bind(console.window,'DEBUG: '):function(){}); break;",
          "23:             case 'trace': LogTrace = Log.trace = (on?console.log.bind(console.window,'TRACE: '):function(){}); break;",
          "24:             case 'test':  LogTest  = Log.test  = (on?console.log.bind(console.window,'TEST: ') :function(){}); break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3920: mismatch:",
          "3921:             ok = 0;",
          "3922:             if (interp->asserts && !noerror)",
          "3924:             else",
          "3926:         }",
          "3928:     }",
          "",
          "[Removed Lines]",
          "3923:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "3925:                 Jsi_LogWarn(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "",
          "[Added Lines]",
          "3923:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3925:                 Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     MKDBL(\"mtime\",st.st_mtime); MKDBL(\"size\",st.st_size);",
          "121:     MKDBL(\"uid\",st.st_uid); MKDBL(\"gid\",st.st_gid);",
          "123:     char smode[30];",
          "124:     getFileTypeCh(st.st_mode, smode);",
          "125:     Jsi_Value *nv = Jsi_ValueNewStringDup(interp, smode);",
          "126:     Jsi_ObjInsert(interp, ores, \"perms\", nv, 0);",
          "127:     if (!isshort) {",
          "128:         MKDBL(\"dev\",st.st_dev); MKDBL(\"ino\",st.st_ino);",
          "129:         MKDBL(\"nlink\",st.st_nlink); MKDBL(\"rdev\",st.st_rdev);",
          "130: #ifndef __WIN32",
          "",
          "[Removed Lines]",
          "122:     MKDBL(\"mode\",st.st_mode);",
          "",
          "[Added Lines]",
          "127:         MKDBL(\"mode\",st.st_mode);",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:             code = chan->fsPtr->putsProc(chan, str);",
          "1032:     }",
          "1034:         Jsi_Puts(interp, chan, \"\\\\0\", -1);",
          "1035:         Jsi_Puts(interp, chan, str+len+1, size-len-1);",
          "1036:     }",
          "",
          "[Removed Lines]",
          "1033:     if (size>=0 && len < size) {",
          "",
          "[Added Lines]",
          "1033:     if (size>=0 && len>0 && len < size) {",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:     Jsi_DSInit(&eStr);",
          "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
          "632:         return Jsi_LogError(\"recursive ToString\");",
          "634:     int isjson = owPtr->quote&JSI_OUTPUT_JSON;",
          "635:     Jsi_Number num;",
          "636:     switch(v->vt) {",
          "",
          "[Removed Lines]",
          "633:     int quote = owPtr->quote;",
          "",
          "[Added Lines]",
          "633:     int quote = owPtr->quote, len = -1, i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "672:         case JSI_VT_STRING:",
          "673:             str = v->d.s.str;",
          "674: outstr:",
          "675:             if (!quote) {",
          "677:                 return JSI_OK;",
          "678:             }",
          "679:             Jsi_DSAppend(dStr,\"\\\"\", NULL);",
          "681:                 if ((*str == '\\'' && (!isjson)) || *str == '\\\\'|| *str == '\\\"'|| (*str == '\\n'",
          "682:                     && (!(owPtr->quote&JSI_OUTPUT_NEWLINES)))",
          "683:                     || *str == '\\r' || *str == '\\t' || *str == '\\f' || *str == '\\b'  ) {",
          "",
          "[Removed Lines]",
          "676:                 Jsi_DSAppend(dStr, str, NULL);",
          "680:             while (*str) {",
          "",
          "[Added Lines]",
          "675:             if (len == -1)",
          "676:                 len = Jsi_Strlen(str);",
          "678:                 Jsi_DSAppendLen(dStr, str, len);",
          "682:             i = 0;",
          "683:             while (i++<len) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "700:                     int l = Jsi_UtfEncode(str, ubuf);",
          "701:                     Jsi_DSAppend(dStr,ubuf, NULL);",
          "702:                     str += l-1;",
          "703:                 }",
          "704:                 str++;",
          "705:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "706:                     i += l-1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "718:                     return JSI_OK;",
          "719:                 case JSI_OT_STRING:",
          "720:                     str = o->d.s.str;",
          "721:                     goto outstr;",
          "722:                 case JSI_OT_FUNCTION:",
          "723:                     Jsi_FuncObjToString(interp, o->d.fobj->func, &eStr, 3 | ((owPtr->depth==0 && owPtr->quote)?8:0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:                     len = o->d.s.len;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "0396ea209e3faddcc2807d3d3daf0ebf340792a9",
      "candidate_info": {
        "commit_hash": "0396ea209e3faddcc2807d3d3daf0ebf340792a9",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0396ea209e3faddcc2807d3d3daf0ebf340792a9",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiLexer.c",
          "src/jsiPstate.c",
          "src/jsiUtils.c",
          "tests/info.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.29\": refactor file refs\n\nFossilOrigin-Name: d7399d5384c36db0153897075f9cd7123d013c2cd41ff1bb070f97ad6d037efe",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiLexer.c||src/jsiLexer.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tests/info.jsi||tests/info.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 28",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 29",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             goto done;",
          "689:     }",
          "692:         if ((cp = Jsi_Strrchr(path, '/'))) {",
          "693:             len = (cp-path);",
          "694:             rc = jsi_PkgLoadOne(interp, name, path, len, &fval, ver);",
          "",
          "[Removed Lines]",
          "691:     if ((path = interp->framePtr->fileName) || (interp->argv0 && (path = Jsi_ValueString(interp, interp->argv0, NULL)))) {",
          "",
          "[Added Lines]",
          "691:     if (*(path = interp->framePtr->filePtr->fileName) || (interp->argv0 && (path = Jsi_ValueString(interp, interp->argv0, NULL)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "991:             if (popts->info)",
          "992:                 Jsi_IncrRefCount(interp, popts->info);",
          "993:         }",
          "996:         Jsi_HashSet(interp->packageHash, (void*)name, ptr);",
          "997:         if (initProc && interp->parent) { // Provide C extensions to topInterp.",
          "998:             ptr = jsi_PkgGet(interp->topInterp, name);",
          "",
          "[Removed Lines]",
          "994:         if (interp->framePtr->fileName && !initProc)",
          "995:             ptr->loadFile = Jsi_KeyAdd(interp->topInterp, interp->framePtr->fileName);",
          "",
          "[Added Lines]",
          "994:         if (interp->framePtr->filePtr->fileName[0] && !initProc)",
          "995:             ptr->loadFile = Jsi_KeyAdd(interp->topInterp, interp->framePtr->filePtr->fileName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1554: void jsi_SysPutsCmdPrefix(Jsi_Interp *interp, jsi_LogOptions *popts,Jsi_DString *dStr, int* quote, const char **fnPtr) {",
          "1555:     int didx = 0;",
          "1556:     const char *cp;",
          "1558:     if (fn && !popts->full && (cp=Jsi_Strrchr(fn, '/')))",
          "1559:         fn = cp +1;",
          "1560:     if (popts->time || (didx=popts->date)) {",
          "",
          "[Removed Lines]",
          "1557:     const char *fn = interp->curIp->fname;",
          "",
          "[Added Lines]",
          "1557:     const char *fn = interp->curIp->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2379:     if (func->retType)",
          "2380:         Jsi_ObjInsert(interp, nobj, \"retType\", Jsi_ValueNewStringKey(interp, jsi_typeName(interp, func->retType, &dStr)), 0);",
          "2381:     Jsi_DSFree(&dStr);",
          "2384:         Jsi_ObjInsert(interp, nobj, \"script\", lval, 0);",
          "2386:         if (!func->opcodes) {",
          "2387:             ftype = (func->callback == jsi_AliasInvoke ? \"alias\" : \"builtin\");",
          "2388:         } else {",
          "",
          "[Removed Lines]",
          "2382:     if (func->script) {",
          "2383:         lval = Jsi_ValueNewStringKey(interp, func->script);",
          "2385:         const char *ftype = (func->scriptFile?\"script\":\"eval\");",
          "",
          "[Added Lines]",
          "2382:     if (func->scriptData) {",
          "2383:         lval = Jsi_ValueNewStringKey(interp, func->scriptData);",
          "2385:         const char *ftype = (func->scriptData?\"eval\":\"script\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2462:     int line = (f->line ? f->line : (interp->curIp ? interp->curIp->Line : 0));",
          "2463:     snprintf(buf, sizeof(buf), \"{funcName:\\\"%s\\\", fileName:\\\"%s\\\", line:%d, level:%d, tryDepth:%d, withDepth:%d}\",",
          "2465:         );",
          "2467:     Jsi_RC rc = Jsi_JSONParse(interp, buf, ret, 0);",
          "",
          "[Removed Lines]",
          "2464:         f->funcName?f->funcName:\"\", f->fileName?f->fileName:\"\", line, f->level, f->tryDepth, f->withDepth",
          "",
          "[Added Lines]",
          "2464:         f->funcName?f->funcName:\"\", f->filePtr->fileName, line, f->level, f->tryDepth, f->withDepth",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2632: static bool jsi_isMain(Jsi_Interp *interp) {",
          "2633:     int isi = (interp->isMain);",
          "2634:     if (isi == 0) {",
          "2636:         Jsi_Value *v1 = interp->argv0;",
          "2637:         if (c2 && v1 && Jsi_ValueIsString(interp, v1)) {",
          "2638:             char *c1 = Jsi_ValueString(interp, v1, NULL);",
          "",
          "[Removed Lines]",
          "2635:         const char *c2 = interp->curFile;",
          "",
          "[Added Lines]",
          "2635:         const char *c2 = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2679:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, 0);",
          "2680:     if (Jsi_ValueGetNumber(interp, v, &vnum) == JSI_OK) {",
          "2681:         bp.line = (int)vnum;",
          "2683:     } else {",
          "2684:         const char *val = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2685:         const char *cp;",
          "",
          "[Removed Lines]",
          "2682:         bp.file = interp->curFile;",
          "",
          "[Added Lines]",
          "2682:         bp.file = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2687:         if (isdigit(val[0])) {",
          "2688:             if (Jsi_GetInt(interp, val, &bp.line, 0) != JSI_OK)",
          "2689:                 return Jsi_LogError(\"bad number\");",
          "2691:         } else if ((cp = Jsi_Strchr(val, ':'))) {",
          "2692:             if (Jsi_GetInt(interp, cp+1, &bp.line, 0) != JSI_OK)",
          "2693:                 return Jsi_LogError(\"bad number\");",
          "",
          "[Removed Lines]",
          "2690:             bp.file = interp->curFile;",
          "",
          "[Added Lines]",
          "2690:             bp.file = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2802:     } else {",
          "2803:         if (arg->vt == JSI_VT_OBJECT) {",
          "2804:             switch (arg->d.obj->ot) {",
          "2806:                 case JSI_OT_REGEXP: isreg = 1; break;",
          "2807:                 default: break;",
          "2808:             }",
          "",
          "[Removed Lines]",
          "2805:                 case JSI_OT_FUNCTION: name = arg->d.obj->d.fobj->func->script; break;",
          "",
          "[Added Lines]",
          "2805:                 case JSI_OT_FUNCTION: name = arg->d.obj->d.fobj->func->filePtr->fileName; break;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3650:     }",
          "3651:     if (f->argnames==NULL && cmdSpec->argStr) {",
          "3654:         jsi_Pline *opl = interp->parseLine, pline;",
          "3655:         interp->parseLine = &pline;",
          "3656:         pline.first_line = 1;",
          "3658:         f->argnames = jsi_ParseArgStr(interp, cmdSpec->argStr);",
          "3660:         interp->parseLine = opl;",
          "3661:     }",
          "3662:     return rc;",
          "",
          "[Removed Lines]",
          "3653:         const char *ocfile = interp->curFile;",
          "3657:         interp->curFile = cmdSpec->name;",
          "3659:         interp->curFile = ocfile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4415:     if (v2 && !Jsi_ValueIsObjType(interp, v2, JSI_OT_ARRAY))",
          "4416:         return Jsi_LogError(\"arg 2: expected array|undefined\");",
          "4417:     if (!v1 || Jsi_ValueIsNull(interp, v1)) {",
          "4421:         mod++;",
          "4422:         cp = Jsi_Strrchr(mod, '.');",
          "4423:         int len = (cp?(cp-mod):(int)Jsi_Strlen(mod));",
          "",
          "[Removed Lines]",
          "4418:         mod = interp->framePtr->fileName;",
          "4419:         if (mod) mod = Jsi_Strrchr(mod, '/');",
          "4420:         if (!mod) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "4415:         mod = interp->framePtr->filePtr->fileName;",
          "4416:         if (*mod) mod = Jsi_Strrchr(mod, '/');",
          "4417:         if (!*mod) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4625:             if (cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "4626:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4628:                 Jsi_TreeSearchDone(&search);",
          "4629:                 if (fname) {",
          "4630:                     jsi_FileInfo  *fi = (typeof(fi))Jsi_HashGet(interp->fileTbl, fname, 0);",
          "",
          "[Removed Lines]",
          "4627:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = interp->framePtr->ip->fname;",
          "",
          "[Added Lines]",
          "4624:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = interp->framePtr->ip->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4640:                     help = Jsi_DSAppendLen(&hStr, fstr+1, es-fstr-1);",
          "4641:                     fstr = es;",
          "4642:                 }",
          "4644:                 if (mod && (mod = Jsi_Strrchr(mod, '/')))",
          "4645:                     mod++;",
          "4646:                 while (help && isspace(help[0])) help++;",
          "",
          "[Removed Lines]",
          "4643:                 const char *mod = (fname?fname:interp->framePtr->fileName);",
          "",
          "[Added Lines]",
          "4640:                 const char *mod = (fname?fname:interp->framePtr->filePtr->fileName);",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     c->codes[c->code_len].data = extra;",
          "156:     c->codes[c->code_len].Line = line->first_line;",
          "157:     c->codes[c->code_len].Lofs = line->first_column;",
          "159:     c->codes[c->code_len].alloc = doalloc;",
          "160:     c->code_len ++;",
          "161:     return 0;",
          "",
          "[Removed Lines]",
          "158:     c->codes[c->code_len].fname = jsi_PstateGetFilename(pstate);",
          "",
          "[Added Lines]",
          "158:     c->codes[c->code_len].filePtr = pstate->filePtr;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "24: {",
          "25:     bool isNew;",
          "26:     Jsi_HashEntry *hPtr = NULL;",
          "",
          "[Removed Lines]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval)",
          "",
          "[Added Lines]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval, jsi_FileInfo *fi)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         return ps;",
          "34:     }",
          "35:     ps = jsi_PstateNew(interp);",
          "36:     ps->eval_flag = iseval;",
          "37:     if (codeStr)",
          "38:         jsi_PstateSetString(ps, codeStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     ps->filePtr = fi;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:                        jsi_ScopeChain *scope, Jsi_Value *currentScope, Jsi_Value *_this, Jsi_Value **ret)",
          "65: {",
          "66:     Jsi_RC r = JSI_OK;",
          "68:     if (newps) {",
          "69:         int oef = newps->eval_flag;",
          "70:         newps->eval_flag = 1;",
          "",
          "[Removed Lines]",
          "67:     jsi_Pstate *newps = jsiNewParser(interp, program, NULL, 1);",
          "",
          "[Added Lines]",
          "68:     jsi_Pstate *newps = jsiNewParser(interp, program, NULL, 1, interp->framePtr->filePtr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "411:     }",
          "412:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "415:         if (cp) fn = cp+1;",
          "416:         Jsi_Printf(interp, jsi_Stderr, \", %s:%d\", fn, ip->Line);",
          "417:     }",
          "",
          "[Removed Lines]",
          "413:     if (ip->fname) {",
          "414:         const char *fn = ip->fname,  *cp = Jsi_Strrchr(fn, '/');",
          "",
          "[Added Lines]",
          "414:     if (ip->filePtr->fileName[0]) {",
          "415:         const char *fn = ip->filePtr->fileName,  *cp = Jsi_Strrchr(fn, '/');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "578:     Jsi_DString dStr = {};",
          "579:     Jsi_Value *v;",
          "580:     int i;",
          "583:     for (i=0; i<2; i++) {",
          "584:         Jsi_DSAppend(&dStr, \"Jsi_Auto.\", str, NULL);",
          "585:         Jsi_VarLookup(interp, Jsi_DSValue(&dStr));",
          "",
          "[Removed Lines]",
          "581:     const char *curFile = interp->curFile;",
          "582:     interp->curFile = \"<jsiLoadFunction>\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:             interp->autoLoaded++;",
          "619:         }",
          "620:     }",
          "622:     return tret;",
          "623: }",
          "",
          "[Removed Lines]",
          "621:     interp->curFile = curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "628:     jsi_OpCode *ip = (iPtr ? iPtr : interp->curIp);",
          "629:     if (!ip)",
          "630:         return;",
          "632:     if ((tc&jsi_callTraceFullPath)==0 && ((ff=Jsi_Strrchr(fname,'/'))))",
          "633:         fname = ff+1;",
          "634:     if (interp->traceHook)",
          "636:     else {",
          "637:         const char *fp = ((tc&jsi_callTraceNoParent)?NULL:fstatic->parentName);",
          "638:         if (fp && !*fp)",
          "",
          "[Removed Lines]",
          "631:     const char *ff, *fname = ip->fname?ip->fname:\"\";",
          "635:         (*interp->traceHook)(interp, fstatic->name, ip->fname, ip->Line, fstatic->cmdSpec, _this, args, ret);",
          "",
          "[Added Lines]",
          "632:     const char *ff, *fname = ip->filePtr->fileName;",
          "636:         (*interp->traceHook)(interp, fstatic->name, fname, ip->Line, fstatic->cmdSpec, _this, args, ret);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1141:             ip->Line = curLine;",
          "1142:         else",
          "1143:             curLine = ip->Line;",
          "1148:         if (interp->debugOpts.hook) {",
          "1150:             interp->framePtr->line = curLine;",
          "1151:             if ((rc = (*interp->debugOpts.hook)(interp, curFile, curLine, interp->framePtr->level, interp->curFunction, jsi_opcode_string(ip->op), ip, NULL)) != JSI_OK)",
          "1152:                 break;",
          "",
          "[Removed Lines]",
          "1144:         if (!ip->fname)",
          "1145:             ip->fname = curFile;",
          "1146:         else",
          "1147:             curFile = ip->fname;",
          "1149:             interp->framePtr->fileName = curFile;",
          "",
          "[Added Lines]",
          "1145:         if (!ip->filePtr)",
          "1146:             ip->filePtr = interp->framePtr->filePtr;",
          "1147:         curFile = ip->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2033:     frame.inthis = _this;",
          "2034:     frame.opcodes = opcodes;",
          "2035:     frame.filePtr = fi;",
          "2037:     frame.funcName = interp->curFunction;",
          "2038:     frame.dirName = interp->curDir;",
          "2039:     frame.level = frame.parent->level+1;",
          "",
          "[Removed Lines]",
          "2036:     frame.fileName = ((func && func->script)?func->script:interp->curFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2159:     int oldef = interp->evalFlags;",
          "2160:     jsi_Pstate *oldps = interp->ps;",
          "2161:     jsi_FileInfo *fi = interp->framePtr->filePtr;",
          "2163:     char *origFile = Jsi_ValueString(interp, path, &fnLen);",
          "2164:     const char *fname = origFile;",
          "2165:     char *oldDir = interp->curDir, *cp;",
          "",
          "[Removed Lines]",
          "2162:     const char *oldFile = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2266:                 }",
          "2267:                 fi = (jsi_FileInfo *)Jsi_HashValueGet(hPtr);",
          "2268:                 if (!fi) goto bail;",
          "2270:                 interp->curDir = fi->dirName;",
          "2272:             } else {",
          "",
          "[Removed Lines]",
          "2269:                 interp->curFile = fi->fileName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2274:                 if (!fi) goto bail;",
          "2275:                 Jsi_HashValueSet(hPtr, fi);",
          "2276:                 fi->origFile = (char*)Jsi_KeyAdd(interp, origFile);",
          "2278:                 char *dfname = Jsi_Strdup(fname);",
          "2279:                 if ((cp = Jsi_Strrchr(dfname,'/')))",
          "",
          "[Removed Lines]",
          "2277:                 interp->curFile = fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "",
          "[Added Lines]",
          "2278:                 fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2282:                 Jsi_Free(dfname);",
          "2283:             }",
          "2284:             if (!input->fname)",
          "2287:             int cnt = 0, noncmt = 0, jppOpts[4]={};",
          "2288:             uint ilen;",
          "",
          "[Removed Lines]",
          "2285:                 input->fname = interp->curFile;",
          "",
          "[Added Lines]",
          "2286:                 input->fname = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2348:     oldSp = interp->framePtr->Sp;",
          "2350:     rc = JSI_OK;",
          "2352:     interp->evalFlags = flags;",
          "2353:     if (!ps)",
          "2354:         rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "2351:     ps = jsiNewParser(interp, str, input, 0);",
          "",
          "[Added Lines]",
          "2352:     ps = jsiNewParser(interp, str, input, 0, fi);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2358:         Jsi_Value *retValue = interp->retValue;",
          "2359:         if (!interp->strict)",
          "2360:             interp->strict = (jsi_GetDirective(interp, ps->opcodes, \"use strict\")!=NULL);",
          "2363:         if (level <= 0)",
          "2364:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue, fi);",
          "",
          "[Removed Lines]",
          "2361:         const char *curFile = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2371:             else",
          "2372:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue, fi);",
          "2373:         }",
          "2375:         if (rc != JSI_OK)",
          "2376:             rc = (ignore?JSI_OK:JSI_ERROR);",
          "2377:         else if (ps->last_exception || oldps->last_exception)",
          "",
          "[Removed Lines]",
          "2374:         interp->curFile = curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2383:     }",
          "2385: bail:",
          "2387:     interp->curDir = oldDir;",
          "2388:     interp->framePtr->Sp = oldSp;",
          "2389:     interp->isMain = oisi;",
          "",
          "[Removed Lines]",
          "2386:     interp->curFile = oldFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:         Jsi_DSPrintf(dStr, \", in call to '%s'\", func->name);",
          "173:     else",
          "174:         Jsi_DSPrintf(dStr, \", in call to function\");",
          "177:         if (cp)",
          "178:             cp++;",
          "179:         else",
          "181:         Jsi_DSPrintf(dStr, \" declared at %s:%d.%d\", cp, func->bodyline.first_line, func->bodyline.first_column);",
          "182:     }",
          "184:         Jsi_DSAppend(dStr, \" <\", NULL);",
          "185:         Jsi_ValueGetDString(interp, arg, dStr, 0);",
          "186:         Jsi_DSAppend(dStr, \">.\", NULL);",
          "",
          "[Removed Lines]",
          "175:     if (func->script) {",
          "176:         const char *cp = Jsi_Strrchr(func->script, '/');",
          "180:             cp = func->script;",
          "183:         if (arg) {",
          "",
          "[Added Lines]",
          "175:     const char *file = interp->framePtr->filePtr->fileName;",
          "176:     if (file[0]) {",
          "177:         const char *cp = Jsi_Strrchr(file, '/');",
          "181:             cp = file;",
          "184:     if (arg) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:     f->opcodes = ops;",
          "509:     f->argnames = args;",
          "510:     f->localnames = localvar;",
          "512:     f->bodyline = *line;",
          "513:     f->retType = (Jsi_otype)args->retType;",
          "515:         f->scriptFile = f->script;",
          "517:     if (l->ltype == LT_STRING)",
          "518:         f->bodyStr = l->d.str;",
          "519:     f->endPos = l->cur;",
          "",
          "[Removed Lines]",
          "511:     f->script = interp->curFile;",
          "514:     if (!pstate->eval_flag) {",
          "516:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "579:                         if (line)",
          "580:                             interp->parseLine = line;",
          "582:                         if (line)",
          "583:                             interp->parseLine = NULL;",
          "584:                         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "581:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->script, fo->bodyline.first_line);",
          "",
          "[Added Lines]",
          "582:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->filePtr->fileName, fo->bodyline.first_line);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "719:         if (name)",
          "720:             f->cmdSpec->name = (char*)Jsi_KeyAdd(interp, name);",
          "721:     }",
          "723:     f->callback = callback;",
          "724:     return Jsi_ValueMakeObject(interp, toVal, o);",
          "725: }",
          "",
          "[Removed Lines]",
          "722:     f->script = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "734:     f->callback = cmdSpec->proc;",
          "735:     f->privData = privData;",
          "736:     f->f.flags = (cmdSpec->flags & JSI_CMD_MASK);",
          "738:     o->d.fobj = jsi_FuncObjNew(interp, f);",
          "739:     return Jsi_ValueMakeObject(interp, NULL, o);",
          "740: }",
          "",
          "[Removed Lines]",
          "737:     f->script = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "969:     if (profile || cover) {",
          "970:         Jsi_DString dStr;",
          "971:         Jsi_DSInit(&dStr);",
          "973:         if (!file)",
          "974:             file = \"\";",
          "975:         int line = func->bodyline.last_line;",
          "",
          "[Removed Lines]",
          "972:         const char *file = func->script;",
          "",
          "[Added Lines]",
          "973:         const char *file = func->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1076:      SIGINIT(func, FUNC);",
          "1077:      func->hPtr = Jsi_HashSet(interp->funcsTbl, func, func);",
          "1078:      func->refCnt = 1;",
          "1080:      interp->funcCnt++;",
          "1081:      return func;",
          "1082: }",
          "",
          "[Removed Lines]",
          "1079:      func->filePtr = interp->framePtr->filePtr;",
          "",
          "[Added Lines]",
          "1080:      func->filePtr = (interp->inParse? interp->parsePs->filePtr: interp->framePtr->filePtr);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: #endif",
          "340: } Jsi_InterpDebug;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: typedef struct {",
          "347:     int useCnt;",
          "348:     int logflag;",
          "349: } jsi_FileInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:     unsigned char isof:1;",
          "435:     unsigned char local:1;",
          "436:     jsi_OpLogFlags logflag:3;",
          "438: } jsi_OpCode;",
          "",
          "[Removed Lines]",
          "437:     const char *fname;",
          "",
          "[Added Lines]",
          "446:     jsi_FileInfo* filePtr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680:     int retType;",
          "681: } Jsi_ScopeStrs;",
          "693: typedef struct jsi_Frame {",
          "694:     int level;",
          "696:     const char *funcName;",
          "697:     const char *dirName;",
          "698:     jsi_FileInfo *filePtr;",
          "",
          "[Removed Lines]",
          "683: typedef struct {",
          "688:     int useCnt;",
          "689:     int logflag;",
          "690: } jsi_FileInfo;",
          "695:     const char *fileName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "731:     Jsi_Hash *strTbl;",
          "732:     int argType;                // Used during parsing to aggregate type.",
          "733:     Jsi_ScopeStrs *args;        // Last push.",
          "734: } jsi_Pstate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734:     jsi_FileInfo *filePtr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "849:     Jsi_CmdSpec *parentSpec;",
          "851:     int callCnt;",
          "854:     const char *bodyStr; // Non-builtin func script body.",
          "855:     int endPos, startPos;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     const char *scriptData;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1193:     const char *scriptStr;",
          "1194:     jsi_Frame topFrame;",
          "1195:     jsi_FileInfo topFile;",
          "1197:     const char *curFunction;",
          "1198:     const char *homeDir;",
          "1199:     const char *historyFile;",
          "",
          "[Removed Lines]",
          "1196:     const char *curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2835:     } else {",
          "2837:         if (sinterp->scriptStr != 0) {",
          "2840:             rc = Jsi_EvalString(sinterp, sinterp->scriptStr, JSI_EVAL_ISMAIN);",
          "2841:         } else if (sinterp->scriptFile && !sinterp->debugOpts.debugCallback) {",
          "2842:             int len;",
          "",
          "[Removed Lines]",
          "2838:             if (sinterp->scriptFile && !interp->curFile)",
          "2839:                 sinterp->curFile = Jsi_ValueString(sinterp, sinterp->scriptFile, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiLexer.c||src/jsiLexer.c": [
          "File: src/jsiLexer.c -> src/jsiLexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     Jsi_Interp *interp = ps->interp;",
          "515:     interp->errLine = yylloc->first_line;",
          "516:     interp->errCol = yylloc->first_column;",
          "518:         yylloc->first_column, msg);",
          "520:         fprintf(stderr, \"%s:%d.%d: %s\\n\",  interp->curFile, yylloc->first_line, yylloc->first_column, msg);",
          "",
          "[Removed Lines]",
          "517:     Jsi_LogParse(\"%s:%d.%d: error: %s\", interp->curFile?interp->curFile:\"@\", yylloc->first_line,",
          "",
          "[Added Lines]",
          "517:     Jsi_LogParse(\"%s:%d.%d: error: %s\", interp->framePtr->filePtr->fileName, yylloc->first_line,",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return ps;",
          "205: }",
          "213: void jsi_PstateClear(jsi_Pstate *ps)",
          "214: {",
          "215:     jsi_Lexer* l = ps->lexer;",
          "",
          "[Removed Lines]",
          "207: const char *jsi_PstateGetFilename(jsi_Pstate *ps)",
          "208: {",
          "209:     Jsi_Interp *interp = ps->interp;",
          "210:     return interp->curFile;",
          "211: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: int jsi_fatalexit = JSI_LOG_BUG;",
          "88: const char *jsi_GetCurFile(Jsi_Interp *interp)",
          "89: {",
          "91:     if (!interp)",
          "93:     if (interp->inParse)",
          "100: }",
          "101: extern void jsi_TypeMismatch(Jsi_Interp* interp)",
          "102: {",
          "",
          "[Removed Lines]",
          "90:     const char *curFile = NULL;",
          "92:         return NULL;",
          "94:         curFile = interp->curFile;",
          "95:     else",
          "96:         curFile = (interp->curIp && interp->curIp->fname? interp->curIp->fname:interp->curFile);",
          "97:     if (!curFile) curFile = interp->framePtr->fileName;",
          "98:     if (!curFile) curFile = \"\";",
          "99:     return curFile;",
          "",
          "[Added Lines]",
          "91:         return \"\";",
          "93:         return interp->parsePs->filePtr->fileName;",
          "94:     return interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:             jsi_Frame *fptr = interp->framePtr->parent;",
          "225:             line = fptr->line;",
          "226:             lofs = 0;",
          "228:         } else {",
          "229:             line = interp->curIp->Line;",
          "230:             lofs = interp->curIp->Lofs;",
          "",
          "[Removed Lines]",
          "227:             curFile = fptr->fileName;",
          "",
          "[Added Lines]",
          "222:             curFile = fptr->filePtr->fileName;",
          "",
          "---------------"
        ],
        "tests/info.jsi||tests/info.jsi": [
          "File: tests/info.jsi -> tests/info.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: K = {} ==> {}",
          "58: K.f(1) ==> 'F'",
          "59: undefined",
          "62: [ \"z\" ]",
          "63: Info.funcs(K) ==> [ \"f\", \"g\" ]",
          "",
          "[Removed Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' <function (z) {...}>.    (at or near \"f\")",
          "",
          "[Added Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' declared at info.jsi:0.0 <function (z) {...}>.    (at or near \"f\")",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "81da5d1618b3f5b28ee43b40a3c652061be72af0",
      "candidate_info": {
        "commit_hash": "81da5d1618b3f5b28ee43b40a3c652061be72af0",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/81da5d1618b3f5b28ee43b40a3c652061be72af0",
        "files": [
          "src/jsi.h",
          "src/jsiUtils.c"
        ],
        "message": "Release \"3.0.32\": fix non-quoting after using \"help\" interactive\n\nFossilOrigin-Name: e8c5da2a2023e21f020cf76d5151b6700bd461e765c946147d58bfb759b4298b",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiUtils.c||src/jsiUtils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 31",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 32",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:         if (rc == JSI_OK) {",
          "1206:              if (interp->retValue->vt != JSI_VT_UNDEF || interp->subOpts.outUndef) {",
          "1207:                 Jsi_DString eStr = {};",
          "1209:                 Jsi_DSFree(&eStr);",
          "1210:                 fputs(\"\\n\", stdout);",
          "1211:              }",
          "",
          "[Removed Lines]",
          "1208:                 fputs(Jsi_ValueGetDString(interp, interp->retValue, &eStr, hasHelp?0:quote), stdout);",
          "",
          "[Added Lines]",
          "1208:                 fputs(Jsi_ValueGetDString(interp, interp->retValue, &eStr, wantHelp?0:quote), stdout);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac6cd81ba9063bae1f90eb712d9f277324ac1fe3",
      "candidate_info": {
        "commit_hash": "ac6cd81ba9063bae1f90eb712d9f277324ac1fe3",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/ac6cd81ba9063bae1f90eb712d9f277324ac1fe3",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "tests/obj.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.30\": add Object.values\n\nFossilOrigin-Name: 7993ce38b554220bc03b368262900f03203851cde87de38a29bf822985ebdf2b",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "tests/obj.jsi||tests/obj.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 29",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 30",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     } while (interp->delRBCnt);",
          "113: }",
          "115: void Jsi_IterObjFree(Jsi_IterObj *iobj)",
          "116: {",
          "117:     if (!iobj->isArrayList) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: static Jsi_RC ObjListifyValuesCallback(Jsi_Tree *tree, Jsi_TreeEntry *hPtr, void *data)",
          "116: {",
          "117:     Jsi_Interp *interp = tree->opts.interp;",
          "118:     Jsi_Obj *obj = (Jsi_Obj*)data;",
          "119:     Jsi_Value *val = Jsi_TreeValueGet(hPtr);",
          "120:     if (!val || Jsi_ObjArrayAdd(interp, obj, val) != JSI_OK)",
          "121:         return JSI_ERROR;",
          "122:     return JSI_OK;",
          "123: }",
          "125: Jsi_RC Jsi_ObjGetValues(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *val)",
          "126: {",
          "127:     if (!Jsi_ValueIsObjType(interp, val, JSI_OT_ARRAY))",
          "128:         return Jsi_LogError(\"Dest is not an array\");",
          "130:     Jsi_TreeWalk(obj->tree, ObjListifyValuesCallback, Jsi_ValueGetObj(interp, val), 0);",
          "131:     return JSI_OK;",
          "132: }",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:     return rc;",
          "372: }",
          "374: Jsi_RC jsi_ObjectToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "375:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "376: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: static Jsi_RC ObjectValuesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "375:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "376: {",
          "377:    int argc = Jsi_ValueGetLength(interp, args);",
          "378:    Jsi_Value *val = _this;",
          "380:    if (argc>0)",
          "381:         val = Jsi_ValueArrayIndex(interp, args, 0);",
          "383:     Jsi_RC rc = Jsi_ValueGetKeys(interp, val, *ret);",
          "384:     if (!Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "385:         Jsi_LogError(\"can not call values() with non-object\");",
          "386:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "387:     Jsi_ObjGetValues(interp, Jsi_ValueGetObj(interp, val), *ret);",
          "388:     return rc;",
          "389: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659: #endif",
          "660:     { \"toLocaleString\", ObjectToLocaleStringCmd,0, 1, \"quote:boolean=false\", .help=\"Convert to string\", .retType=(uint)JSI_TT_STRING },",
          "661:     { \"toString\",       jsi_ObjectToStringCmd,  0, 1, \"quote:boolean=false\", .help=\"Convert to string\", .retType=(uint)JSI_TT_STRING },",
          "662:     { \"valueOf\",        ObjectValueOfCmd,       0, 0, \"\", .help=\"Returns primitive value\", .retType=(uint)JSI_TT_ANY },",
          "663:     { NULL, 0,0,0,0, .help=\"Commands for accessing Objects\" }",
          "664: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:     { \"values\",         ObjectValuesCmd,        0, 1, \"obj:object=void\", .help=\"Return the  values of an object\", .retType=(uint)JSI_TT_ARRAY },",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"ca3a4cfb7a94f409f278b34d5a6d8606\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"d977e4091854ba810b69d2f9aba2c778\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, Jsi_SqlObjOpts*opts);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "451:     void *endPtr;",
          "452: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "875:     Jsi_SqlObjBinds,\\",
          "876:     Jsi_UserObjName,\\",
          "877:     Jsi_ValueNewRegExp,\\",
          "878:     NULL",
          "880: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:     Jsi_ObjGetValues,\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1298: #define Jsi_SqlObjBinds(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2))",
          "1299: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1300: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "1302: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1303: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "",
          "---------------"
        ],
        "tests/obj.jsi||tests/obj.jsi": [
          "File: tests/obj.jsi -> tests/obj.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: ;o.f(1);",
          "9: ;Object.keys(o);",
          "10: ;o.keys();",
          "13: =!EXPECTSTART!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: ;Object.values(O);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: o.f(1) ==> 2",
          "18: Object.keys(o) ==> [ \"f\", \"x\", \"y\" ]",
          "19: o.keys() ==> [ \"f\", \"x\", \"y\" ]",
          "20: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: Object.values(O) ==> [ \"function (n) {...}\", 1, 2 ]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "222: Object.prototype.toLocaleString = function(quote:boolean=false):string {};",
          "223: Object.prototype.toString = function(quote:boolean=false):string {};",
          "224: Object.prototype.valueOf = function():any {};",
          "225: var RegExp = function(cmd,args) {};",
          "226: RegExp.prototype.exec = function(val:string):array|object|null {};",
          "227: RegExp.prototype.test = function(val:string):boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: Object.prototype.values = function(obj:object=void):array {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "979: <tr><td>toLocaleString</td><td>toLocaleString(quote:boolean=false):string </td><td>Convert to string.</td></tr>",
          "980: <tr><td>toString</td><td>toString(quote:boolean=false):string </td><td>Convert to string.</td></tr>",
          "981: <tr><td>valueOf</td><td>valueOf() </td><td>Returns primitive value.</td></tr>",
          "982: </table>",
          "983: <a name=\"Objectend\"></a>",
          "984: <p><a href=\"#TOC\">Return to top</a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982: <tr><td>values</td><td>values(obj:object=void):array </td><td>Return the  values of an object.</td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}