{
  "cve_id": "CVE-2012-3552",
  "cve_desc": "Race condition in the IP implementation in the Linux kernel before 3.0 might allow remote attackers to cause a denial of service (slab corruption and system crash) by sending packets to an application that sets socket options during the handling of network traffic.",
  "repo": "torvalds/linux",
  "patch_hash": "f6d8bd051c391c1c0458a30b2a7abcd939329259",
  "patch_info": {
    "commit_hash": "f6d8bd051c391c1c0458a30b2a7abcd939329259",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f6d8bd051c391c1c0458a30b2a7abcd939329259",
    "files": [
      "include/net/inet_sock.h",
      "include/net/ip.h",
      "net/dccp/ipv4.c",
      "net/dccp/ipv6.c",
      "net/ipv4/af_inet.c",
      "net/ipv4/cipso_ipv4.c",
      "net/ipv4/icmp.c",
      "net/ipv4/inet_connection_sock.c",
      "net/ipv4/ip_options.c",
      "net/ipv4/ip_output.c",
      "net/ipv4/ip_sockglue.c",
      "net/ipv4/raw.c",
      "net/ipv4/syncookies.c",
      "net/ipv4/tcp_ipv4.c",
      "net/ipv4/udp.c",
      "net/ipv6/tcp_ipv6.c",
      "net/l2tp/l2tp_ip.c"
    ],
    "message": "inet: add RCU protection to inet->opt\n\nWe lack proper synchronization to manipulate inet->opt ip_options\n\nProblem is ip_make_skb() calls ip_setup_cork() and\nip_setup_cork() possibly makes a copy of ipc->opt (struct ip_options),\nwithout any protection against another thread manipulating inet->opt.\n\nAnother thread can change inet->opt pointer and free old one under us.\n\nUse RCU to protect inet->opt (changed to inet->inet_opt).\n\nInstead of handling atomic refcounts, just copy ip_options when\nnecessary, to avoid cache line dirtying.\n\nWe cant insert an rcu_head in struct ip_options since its included in\nskb->cb[], so this patch is large because I had to introduce a new\nip_options_rcu structure.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/net/inet_sock.h||include/net/inet_sock.h",
      "include/net/ip.h||include/net/ip.h",
      "net/dccp/ipv4.c||net/dccp/ipv4.c",
      "net/dccp/ipv6.c||net/dccp/ipv6.c",
      "net/ipv4/af_inet.c||net/ipv4/af_inet.c",
      "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c",
      "net/ipv4/icmp.c||net/ipv4/icmp.c",
      "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c",
      "net/ipv4/ip_options.c||net/ipv4/ip_options.c",
      "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
      "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c",
      "net/ipv4/raw.c||net/ipv4/raw.c",
      "net/ipv4/syncookies.c||net/ipv4/syncookies.c",
      "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c",
      "net/ipv4/udp.c||net/ipv4/udp.c",
      "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
      "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c"
    ]
  },
  "patch_diff": {
    "include/net/inet_sock.h||include/net/inet_sock.h": [
      "File: include/net/inet_sock.h -> include/net/inet_sock.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  unsigned char __data[0];",
      "58: };",
      "62: struct inet_request_sock {",
      "63:  struct request_sock req;",
      "",
      "[Removed Lines]",
      "60: #define optlength(opt) (sizeof(struct ip_options) + opt->optlen)",
      "",
      "[Added Lines]",
      "60: struct ip_options_rcu {",
      "61:  struct rcu_head rcu;",
      "62:  struct ip_options opt;",
      "63: };",
      "65: struct ip_options_data {",
      "66:  struct ip_options_rcu opt;",
      "67:  char   data[40];",
      "68: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:     acked    : 1,",
      "79:     no_srccheck: 1;",
      "80:  kmemcheck_bitfield_end(flags);",
      "82: };",
      "84: static inline struct inet_request_sock *inet_rsk(const struct request_sock *sk)",
      "",
      "[Removed Lines]",
      "81:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "89:  struct ip_options_rcu *opt;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140:  __be16   inet_sport;",
      "141:  __u16   inet_id;",
      "144:  __u8   tos;",
      "145:  __u8   min_ttl;",
      "146:  __u8   mc_ttl;",
      "",
      "[Removed Lines]",
      "143:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "151:  struct ip_options_rcu __rcu *inet_opt;",
      "",
      "---------------"
    ],
    "include/net/ip.h||include/net/ip.h": [
      "File: include/net/ip.h -> include/net/ip.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: struct ipcm_cookie {",
      "53:  __be32   addr;",
      "54:  int   oif;",
      "56:  __u8   tx_flags;",
      "57: };",
      "",
      "[Removed Lines]",
      "55:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "55:  struct ip_options_rcu *opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93: extern int  ip_build_and_send_pkt(struct sk_buff *skb, struct sock *sk,",
      "94:            __be32 saddr, __be32 daddr,",
      "96: extern int  ip_rcv(struct sk_buff *skb, struct net_device *dev,",
      "97:           struct packet_type *pt, struct net_device *orig_dev);",
      "98: extern int  ip_local_deliver(struct sk_buff *skb);",
      "",
      "[Removed Lines]",
      "95:            struct ip_options *opt);",
      "",
      "[Added Lines]",
      "95:            struct ip_options_rcu *opt);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "420: extern int ip_options_echo(struct ip_options *dopt, struct sk_buff *skb);",
      "421: extern void ip_options_fragment(struct sk_buff *skb);",
      "422: extern int ip_options_compile(struct net *net,",
      "423:          struct ip_options *opt, struct sk_buff *skb);",
      "425:      unsigned char *data, int optlen);",
      "427:         unsigned char __user *data, int optlen);",
      "428: extern void ip_options_undo(struct ip_options * opt);",
      "429: extern void ip_forward_options(struct sk_buff *skb);",
      "",
      "[Removed Lines]",
      "419: extern void ip_options_build(struct sk_buff *skb, struct ip_options *opt, __be32 daddr, struct rtable *rt, int is_frag);",
      "424: extern int ip_options_get(struct net *net, struct ip_options **optp,",
      "426: extern int ip_options_get_from_user(struct net *net, struct ip_options **optp,",
      "",
      "[Added Lines]",
      "419: extern void ip_options_build(struct sk_buff *skb, struct ip_options *opt,",
      "420:         __be32 daddr, struct rtable *rt, int is_frag);",
      "425: extern int ip_options_get(struct net *net, struct ip_options_rcu **optp,",
      "427: extern int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,",
      "",
      "---------------"
    ],
    "net/dccp/ipv4.c||net/dccp/ipv4.c": [
      "File: net/dccp/ipv4.c -> net/dccp/ipv4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:  struct flowi4 fl4;",
      "49:  struct rtable *rt;",
      "50:  int err;",
      "52:  dp->dccps_role = DCCP_ROLE_CLIENT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:   return -EAFNOSUPPORT;",
      "60:  nexthop = daddr = usin->sin_addr.s_addr;",
      "62:   if (daddr == 0)",
      "63:    return -EINVAL;",
      "65:  }",
      "67:  orig_sport = inet->inet_sport;",
      "",
      "[Removed Lines]",
      "61:  if (inet->opt != NULL && inet->opt->srr) {",
      "64:   nexthop = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "63:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "64:           sock_owned_by_user(sk));",
      "65:  if (inet_opt != NULL && inet_opt->opt.srr) {",
      "68:   nexthop = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:   return -ENETUNREACH;",
      "79:  }",
      "82:   daddr = rt->rt_dst;",
      "84:  if (inet->inet_saddr == 0)",
      "",
      "[Removed Lines]",
      "81:  if (inet->opt == NULL || !inet->opt->srr)",
      "",
      "[Added Lines]",
      "85:  if (inet_opt == NULL || !inet_opt->opt.srr)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "89:  inet->inet_daddr = daddr;",
      "91:  inet_csk(sk)->icsk_ext_hdr_len = 0;",
      "",
      "[Removed Lines]",
      "92:  if (inet->opt != NULL)",
      "93:   inet_csk(sk)->icsk_ext_hdr_len = inet->opt->optlen;",
      "",
      "[Added Lines]",
      "96:  if (inet_opt)",
      "97:   inet_csk(sk)->icsk_ext_hdr_len = inet_opt->opt.optlen;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "405:  newinet->inet_daddr = ireq->rmt_addr;",
      "406:  newinet->inet_rcv_saddr = ireq->loc_addr;",
      "407:  newinet->inet_saddr = ireq->loc_addr;",
      "409:  ireq->opt    = NULL;",
      "410:  newinet->mc_index  = inet_iif(skb);",
      "411:  newinet->mc_ttl    = ip_hdr(skb)->ttl;",
      "",
      "[Removed Lines]",
      "408:  newinet->opt    = ireq->opt;",
      "",
      "[Added Lines]",
      "412:  newinet->inet_opt = ireq->opt;",
      "",
      "---------------"
    ],
    "net/dccp/ipv6.c||net/dccp/ipv6.c": [
      "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "574:     First: no IPv4 options.",
      "579:  newnp->rxopt.all = np->rxopt.all;",
      "",
      "[Removed Lines]",
      "576:  newinet->opt = NULL;",
      "",
      "[Added Lines]",
      "576:  newinet->inet_opt = NULL;",
      "",
      "---------------"
    ],
    "net/ipv4/af_inet.c||net/ipv4/af_inet.c": [
      "File: net/ipv4/af_inet.c -> net/ipv4/af_inet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:  WARN_ON(sk->sk_wmem_queued);",
      "154:  WARN_ON(sk->sk_forward_alloc);",
      "157:  dst_release(rcu_dereference_check(sk->sk_dst_cache, 1));",
      "158:  sk_refcnt_debug_dec(sk);",
      "159: }",
      "",
      "[Removed Lines]",
      "156:  kfree(inet->opt);",
      "",
      "[Added Lines]",
      "156:  kfree(rcu_dereference_protected(inet->inet_opt, 1));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1106:  struct flowi4 fl4;",
      "1107:  struct rtable *rt;",
      "1108:  __be32 new_saddr;",
      "1114:  rt = ip_route_connect(&fl4, daddr, 0, RT_CONN_FLAGS(sk),",
      "",
      "[Removed Lines]",
      "1110:  if (inet->opt && inet->opt->srr)",
      "1111:   daddr = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "1109:  struct ip_options_rcu *inet_opt;",
      "1111:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "1112:           sock_owned_by_user(sk));",
      "1113:  if (inet_opt && inet_opt->opt.srr)",
      "1114:   daddr = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1148:  struct inet_sock *inet = inet_sk(sk);",
      "1149:  struct rtable *rt = (struct rtable *)__sk_dst_check(sk, 0);",
      "1150:  __be32 daddr;",
      "1151:  int err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1154:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1155:   return 0;",
      "1158:  daddr = inet->inet_daddr;",
      "1161:  rt = ip_route_output_ports(sock_net(sk), sk, daddr, inet->inet_saddr,",
      "1162:        inet->inet_dport, inet->inet_sport,",
      "1163:        sk->sk_protocol, RT_CONN_FLAGS(sk),",
      "",
      "[Removed Lines]",
      "1159:  if (inet->opt && inet->opt->srr)",
      "1160:   daddr = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "1162:  rcu_read_lock();",
      "1163:  inet_opt = rcu_dereference(inet->inet_opt);",
      "1165:  if (inet_opt && inet_opt->opt.srr)",
      "1166:   daddr = inet_opt->opt.faddr;",
      "1167:  rcu_read_unlock();",
      "",
      "---------------"
    ],
    "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c": [
      "File: net/ipv4/cipso_ipv4.c -> net/ipv4/cipso_ipv4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1857:  return CIPSO_V4_HDR_LEN + ret_val;",
      "1858: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1860: static void opt_kfree_rcu(struct rcu_head *head)",
      "1861: {",
      "1862:  kfree(container_of(head, struct ip_options_rcu, rcu));",
      "1863: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1879:  unsigned char *buf = NULL;",
      "1880:  u32 buf_len;",
      "1881:  u32 opt_len;",
      "1883:  struct inet_sock *sk_inet;",
      "1884:  struct inet_connection_sock *sk_conn;",
      "",
      "[Removed Lines]",
      "1882:  struct ip_options *opt = NULL;",
      "",
      "[Added Lines]",
      "1887:  struct ip_options_rcu *old, *opt = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1915:   ret_val = -ENOMEM;",
      "1916:   goto socket_setattr_failure;",
      "1917:  }",
      "1921:  kfree(buf);",
      "1922:  buf = NULL;",
      "1924:  sk_inet = inet_sk(sk);",
      "1925:  if (sk_inet->is_icsk) {",
      "1926:   sk_conn = inet_csk(sk);",
      "1930:   sk_conn->icsk_sync_mss(sk, sk_conn->icsk_pmtu_cookie);",
      "1931:  }",
      "1935:  return 0;",
      "",
      "[Removed Lines]",
      "1918:  memcpy(opt->__data, buf, buf_len);",
      "1919:  opt->optlen = opt_len;",
      "1920:  opt->cipso = sizeof(struct iphdr);",
      "1927:   if (sk_inet->opt)",
      "1928:    sk_conn->icsk_ext_hdr_len -= sk_inet->opt->optlen;",
      "1929:   sk_conn->icsk_ext_hdr_len += opt->optlen;",
      "1932:  opt = xchg(&sk_inet->opt, opt);",
      "1933:  kfree(opt);",
      "",
      "[Added Lines]",
      "1923:  memcpy(opt->opt.__data, buf, buf_len);",
      "1924:  opt->opt.optlen = opt_len;",
      "1925:  opt->opt.cipso = sizeof(struct iphdr);",
      "1931:  old = rcu_dereference_protected(sk_inet->inet_opt, sock_owned_by_user(sk));",
      "1934:   if (old)",
      "1935:    sk_conn->icsk_ext_hdr_len -= old->opt.optlen;",
      "1936:   sk_conn->icsk_ext_hdr_len += opt->opt.optlen;",
      "1939:  rcu_assign_pointer(sk_inet->inet_opt, opt);",
      "1940:  if (old)",
      "1941:   call_rcu(&old->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1960:  unsigned char *buf = NULL;",
      "1961:  u32 buf_len;",
      "1962:  u32 opt_len;",
      "1964:  struct inet_request_sock *req_inet;",
      "",
      "[Removed Lines]",
      "1963:  struct ip_options *opt = NULL;",
      "",
      "[Added Lines]",
      "1971:  struct ip_options_rcu *opt = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1988:   ret_val = -ENOMEM;",
      "1989:   goto req_setattr_failure;",
      "1990:  }",
      "1994:  kfree(buf);",
      "1995:  buf = NULL;",
      "1997:  req_inet = inet_rsk(req);",
      "1998:  opt = xchg(&req_inet->opt, opt);",
      "2001:  return 0;",
      "",
      "[Removed Lines]",
      "1991:  memcpy(opt->__data, buf, buf_len);",
      "1992:  opt->optlen = opt_len;",
      "1993:  opt->cipso = sizeof(struct iphdr);",
      "1999:  kfree(opt);",
      "",
      "[Added Lines]",
      "1999:  memcpy(opt->opt.__data, buf, buf_len);",
      "2000:  opt->opt.optlen = opt_len;",
      "2001:  opt->opt.cipso = sizeof(struct iphdr);",
      "2007:  if (opt)",
      "2008:   call_rcu(&opt->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2020: {",
      "2021:  int hdr_delta = 0;",
      "2025:   u8 cipso_len;",
      "2026:   u8 cipso_off;",
      "2027:   unsigned char *cipso_ptr;",
      "2028:   int iter;",
      "2029:   int optlen_new;",
      "2033:   cipso_len = cipso_ptr[1];",
      "2045:   memmove(cipso_ptr, cipso_ptr + cipso_len,",
      "",
      "[Removed Lines]",
      "2019: static int cipso_v4_delopt(struct ip_options **opt_ptr)",
      "2022:  struct ip_options *opt = *opt_ptr;",
      "2024:  if (opt->srr || opt->rr || opt->ts || opt->router_alert) {",
      "2031:   cipso_off = opt->cipso - sizeof(struct iphdr);",
      "2032:   cipso_ptr = &opt->__data[cipso_off];",
      "2035:   if (opt->srr > opt->cipso)",
      "2036:    opt->srr -= cipso_len;",
      "2037:   if (opt->rr > opt->cipso)",
      "2038:    opt->rr -= cipso_len;",
      "2039:   if (opt->ts > opt->cipso)",
      "2040:    opt->ts -= cipso_len;",
      "2041:   if (opt->router_alert > opt->cipso)",
      "2042:    opt->router_alert -= cipso_len;",
      "2043:   opt->cipso = 0;",
      "2046:    opt->optlen - cipso_off - cipso_len);",
      "",
      "[Added Lines]",
      "2028: static int cipso_v4_delopt(struct ip_options_rcu **opt_ptr)",
      "2031:  struct ip_options_rcu *opt = *opt_ptr;",
      "2033:  if (opt->opt.srr || opt->opt.rr || opt->opt.ts || opt->opt.router_alert) {",
      "2040:   cipso_off = opt->opt.cipso - sizeof(struct iphdr);",
      "2041:   cipso_ptr = &opt->opt.__data[cipso_off];",
      "2044:   if (opt->opt.srr > opt->opt.cipso)",
      "2045:    opt->opt.srr -= cipso_len;",
      "2046:   if (opt->opt.rr > opt->opt.cipso)",
      "2047:    opt->opt.rr -= cipso_len;",
      "2048:   if (opt->opt.ts > opt->opt.cipso)",
      "2049:    opt->opt.ts -= cipso_len;",
      "2050:   if (opt->opt.router_alert > opt->opt.cipso)",
      "2051:    opt->opt.router_alert -= cipso_len;",
      "2052:   opt->opt.cipso = 0;",
      "2055:    opt->opt.optlen - cipso_off - cipso_len);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2053:   iter = 0;",
      "2054:   optlen_new = 0;",
      "2058:     optlen_new = iter;",
      "2059:    } else",
      "2060:     iter++;",
      "2064:  } else {",
      "2070:  }",
      "2072:  return hdr_delta;",
      "",
      "[Removed Lines]",
      "2055:   while (iter < opt->optlen)",
      "2056:    if (opt->__data[iter] != IPOPT_NOP) {",
      "2057:     iter += opt->__data[iter + 1];",
      "2061:   hdr_delta = opt->optlen;",
      "2062:   opt->optlen = (optlen_new + 3) & ~3;",
      "2063:   hdr_delta -= opt->optlen;",
      "2068:   hdr_delta = opt->optlen;",
      "2069:   kfree(opt);",
      "",
      "[Added Lines]",
      "2064:   while (iter < opt->opt.optlen)",
      "2065:    if (opt->opt.__data[iter] != IPOPT_NOP) {",
      "2066:     iter += opt->opt.__data[iter + 1];",
      "2070:   hdr_delta = opt->opt.optlen;",
      "2071:   opt->opt.optlen = (optlen_new + 3) & ~3;",
      "2072:   hdr_delta -= opt->opt.optlen;",
      "2077:   hdr_delta = opt->opt.optlen;",
      "2078:   call_rcu(&opt->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2083: void cipso_v4_sock_delattr(struct sock *sk)",
      "2084: {",
      "2085:  int hdr_delta;",
      "2087:  struct inet_sock *sk_inet;",
      "2089:  sk_inet = inet_sk(sk);",
      "2092:   return;",
      "2095:  if (sk_inet->is_icsk && hdr_delta > 0) {",
      "2096:   struct inet_connection_sock *sk_conn = inet_csk(sk);",
      "2097:   sk_conn->icsk_ext_hdr_len -= hdr_delta;",
      "",
      "[Removed Lines]",
      "2086:  struct ip_options *opt;",
      "2090:  opt = sk_inet->opt;",
      "2091:  if (opt == NULL || opt->cipso == 0)",
      "2094:  hdr_delta = cipso_v4_delopt(&sk_inet->opt);",
      "",
      "[Added Lines]",
      "2095:  struct ip_options_rcu *opt;",
      "2099:  opt = rcu_dereference_protected(sk_inet->inet_opt, 1);",
      "2100:  if (opt == NULL || opt->opt.cipso == 0)",
      "2103:  hdr_delta = cipso_v4_delopt(&sk_inet->inet_opt);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2110: void cipso_v4_req_delattr(struct request_sock *req)",
      "2111: {",
      "2113:  struct inet_request_sock *req_inet;",
      "2115:  req_inet = inet_rsk(req);",
      "2116:  opt = req_inet->opt;",
      "2118:   return;",
      "2120:  cipso_v4_delopt(&req_inet->opt);",
      "",
      "[Removed Lines]",
      "2112:  struct ip_options *opt;",
      "2117:  if (opt == NULL || opt->cipso == 0)",
      "",
      "[Added Lines]",
      "2121:  struct ip_options_rcu *opt;",
      "2126:  if (opt == NULL || opt->opt.cipso == 0)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2185: int cipso_v4_sock_getattr(struct sock *sk, struct netlbl_lsm_secattr *secattr)",
      "2186: {",
      "2195: }",
      "",
      "[Removed Lines]",
      "2187:  struct ip_options *opt;",
      "2189:  opt = inet_sk(sk)->opt;",
      "2190:  if (opt == NULL || opt->cipso == 0)",
      "2191:   return -ENOMSG;",
      "2193:  return cipso_v4_getattr(opt->__data + opt->cipso - sizeof(struct iphdr),",
      "2194:     secattr);",
      "",
      "[Added Lines]",
      "2196:  struct ip_options_rcu *opt;",
      "2197:  int res = -ENOMSG;",
      "2199:  rcu_read_lock();",
      "2200:  opt = rcu_dereference(inet_sk(sk)->inet_opt);",
      "2201:  if (opt && opt->opt.cipso)",
      "2202:   res = cipso_v4_getattr(opt->opt.__data +",
      "2203:       opt->opt.cipso -",
      "2204:       sizeof(struct iphdr),",
      "2205:            secattr);",
      "2206:  rcu_read_unlock();",
      "2207:  return res;",
      "",
      "---------------"
    ],
    "net/ipv4/icmp.c||net/ipv4/icmp.c": [
      "File: net/ipv4/icmp.c -> net/ipv4/icmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:   __be32        times[3];",
      "109:  } data;",
      "110:  int head_len;",
      "113: };",
      "",
      "[Removed Lines]",
      "111:  struct ip_options replyopts;",
      "112:  unsigned char  optbuf[40];",
      "",
      "[Added Lines]",
      "111:  struct ip_options_data replyopts;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "333:  struct inet_sock *inet;",
      "334:  __be32 daddr;",
      "337:   return;",
      "339:  sk = icmp_xmit_lock(net);",
      "",
      "[Removed Lines]",
      "336:  if (ip_options_echo(&icmp_param->replyopts, skb))",
      "",
      "[Added Lines]",
      "335:  if (ip_options_echo(&icmp_param->replyopts.opt.opt, skb))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "347:  daddr = ipc.addr = rt->rt_src;",
      "348:  ipc.opt = NULL;",
      "349:  ipc.tx_flags = 0;",
      "354:  }",
      "355:  {",
      "356:   struct flowi4 fl4 = {",
      "",
      "[Removed Lines]",
      "350:  if (icmp_param->replyopts.optlen) {",
      "351:   ipc.opt = &icmp_param->replyopts;",
      "352:   if (ipc.opt->srr)",
      "353:    daddr = icmp_param->replyopts.faddr;",
      "",
      "[Added Lines]",
      "349:  if (icmp_param->replyopts.opt.opt.optlen) {",
      "350:   ipc.opt = &icmp_param->replyopts.opt;",
      "351:   if (ipc.opt->opt.srr)",
      "352:    daddr = icmp_param->replyopts.opt.opt.faddr;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "379:      struct icmp_bxm *param)",
      "380: {",
      "381:  struct flowi4 fl4 = {",
      "384:   .saddr = saddr,",
      "385:   .flowi4_tos = RT_TOS(tos),",
      "386:   .flowi4_proto = IPPROTO_ICMP,",
      "",
      "[Removed Lines]",
      "382:   .daddr = (param->replyopts.srr ?",
      "383:      param->replyopts.faddr : iph->saddr),",
      "",
      "[Added Lines]",
      "381:   .daddr = (param->replyopts.opt.opt.srr ?",
      "382:      param->replyopts.opt.opt.faddr : iph->saddr),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "581:         IPTOS_PREC_INTERNETCONTROL) :",
      "582:        iph->tos;",
      "585:   goto out_unlock;",
      "",
      "[Removed Lines]",
      "584:  if (ip_options_echo(&icmp_param.replyopts, skb_in))",
      "",
      "[Added Lines]",
      "583:  if (ip_options_echo(&icmp_param.replyopts.opt.opt, skb_in))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "597:  icmp_param.offset = skb_network_offset(skb_in);",
      "598:  inet_sk(sk)->tos = tos;",
      "599:  ipc.addr = iph->saddr;",
      "601:  ipc.tx_flags = 0;",
      "603:  rt = icmp_route_lookup(net, skb_in, iph, saddr, tos,",
      "",
      "[Removed Lines]",
      "600:  ipc.opt = &icmp_param.replyopts;",
      "",
      "[Added Lines]",
      "599:  ipc.opt = &icmp_param.replyopts.opt;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "613:  room = dst_mtu(&rt->dst);",
      "614:  if (room > 576)",
      "615:   room = 576;",
      "617:  room -= sizeof(struct icmphdr);",
      "619:  icmp_param.data_len = skb_in->len - icmp_param.offset;",
      "",
      "[Removed Lines]",
      "616:  room -= sizeof(struct iphdr) + icmp_param.replyopts.optlen;",
      "",
      "[Added Lines]",
      "615:  room -= sizeof(struct iphdr) + icmp_param.replyopts.opt.opt.optlen;",
      "",
      "---------------"
    ],
    "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c": [
      "File: net/ipv4/inet_connection_sock.c -> net/ipv4/inet_connection_sock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "354: {",
      "355:  struct rtable *rt;",
      "356:  const struct inet_request_sock *ireq = inet_rsk(req);",
      "358:  struct net *net = sock_net(sk);",
      "359:  struct flowi4 fl4;",
      "361:  flowi4_init_output(&fl4, sk->sk_bound_dev_if, sk->sk_mark,",
      "362:       RT_CONN_FLAGS(sk), RT_SCOPE_UNIVERSE,",
      "363:       sk->sk_protocol, inet_sk_flowi_flags(sk),",
      "365:       ireq->loc_addr, ireq->rmt_port, inet_sk(sk)->inet_sport);",
      "366:  security_req_classify_flow(req, flowi4_to_flowi(&fl4));",
      "367:  rt = ip_route_output_flow(net, &fl4, sk);",
      "368:  if (IS_ERR(rt))",
      "369:   goto no_route;",
      "371:   goto route_err;",
      "372:  return &rt->dst;",
      "",
      "[Removed Lines]",
      "357:  struct ip_options *opt = inet_rsk(req)->opt;",
      "364:       (opt && opt->srr) ? opt->faddr : ireq->rmt_addr,",
      "370:  if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "",
      "[Added Lines]",
      "357:  struct ip_options_rcu *opt = inet_rsk(req)->opt;",
      "364:       (opt && opt->opt.srr) ? opt->opt.faddr : ireq->rmt_addr,",
      "370:  if (opt && opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "",
      "---------------"
    ],
    "net/ipv4/ip_options.c||net/ipv4/ip_options.c": [
      "File: net/ipv4/ip_options.c -> net/ipv4/ip_options.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:        __be32 daddr, struct rtable *rt, int is_frag)",
      "41: {",
      "42:  unsigned char *iph = skb_network_header(skb);",
      "",
      "[Removed Lines]",
      "39: void ip_options_build(struct sk_buff * skb, struct ip_options * opt,",
      "",
      "[Added Lines]",
      "39: void ip_options_build(struct sk_buff *skb, struct ip_options *opt,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87: {",
      "89:  unsigned char *sptr, *dptr;",
      "90:  int soffset, doffset;",
      "91:  int optlen;",
      "",
      "[Removed Lines]",
      "86: int ip_options_echo(struct ip_options * dopt, struct sk_buff * skb)",
      "88:  struct ip_options *sopt;",
      "",
      "[Added Lines]",
      "86: int ip_options_echo(struct ip_options *dopt, struct sk_buff *skb)",
      "88:  const struct ip_options *sopt;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:  sopt = &(IPCB(skb)->opt);",
      "100:   return 0;",
      "103:  sptr = skb_network_header(skb);",
      "104:  dptr = dopt->__data;",
      "",
      "[Removed Lines]",
      "98:  if (sopt->optlen == 0) {",
      "99:   dopt->optlen = 0;",
      "101:  }",
      "",
      "[Added Lines]",
      "98:  if (sopt->optlen == 0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "157:   dopt->optlen += optlen;",
      "158:  }",
      "159:  if (sopt->srr) {",
      "161:   __be32 faddr;",
      "163:   optlen  = start[1];",
      "",
      "[Removed Lines]",
      "160:   unsigned char * start = sptr+sopt->srr;",
      "",
      "[Added Lines]",
      "158:   unsigned char *start = sptr+sopt->srr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "499:  }",
      "500: }",
      "503: {",
      "505:          GFP_KERNEL);",
      "506: }",
      "510: {",
      "511:  while (optlen & 3)",
      "515:   kfree(opt);",
      "516:   return -EINVAL;",
      "517:  }",
      "",
      "[Removed Lines]",
      "502: static struct ip_options *ip_options_get_alloc(const int optlen)",
      "504:  return kzalloc(sizeof(struct ip_options) + ((optlen + 3) & ~3),",
      "508: static int ip_options_get_finish(struct net *net, struct ip_options **optp,",
      "509:      struct ip_options *opt, int optlen)",
      "512:   opt->__data[optlen++] = IPOPT_END;",
      "513:  opt->optlen = optlen;",
      "514:  if (optlen && ip_options_compile(net, opt, NULL)) {",
      "",
      "[Added Lines]",
      "500: static struct ip_options_rcu *ip_options_get_alloc(const int optlen)",
      "502:  return kzalloc(sizeof(struct ip_options_rcu) + ((optlen + 3) & ~3),",
      "506: static int ip_options_get_finish(struct net *net, struct ip_options_rcu **optp,",
      "507:      struct ip_options_rcu *opt, int optlen)",
      "510:   opt->opt.__data[optlen++] = IPOPT_END;",
      "511:  opt->opt.optlen = optlen;",
      "512:  if (optlen && ip_options_compile(net, &opt->opt, NULL)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "520:  return 0;",
      "521: }",
      "524:         unsigned char __user *data, int optlen)",
      "525: {",
      "528:  if (!opt)",
      "529:   return -ENOMEM;",
      "531:   kfree(opt);",
      "532:   return -EFAULT;",
      "533:  }",
      "534:  return ip_options_get_finish(net, optp, opt, optlen);",
      "535: }",
      "538:      unsigned char *data, int optlen)",
      "539: {",
      "542:  if (!opt)",
      "543:   return -ENOMEM;",
      "544:  if (optlen)",
      "546:  return ip_options_get_finish(net, optp, opt, optlen);",
      "547: }",
      "",
      "[Removed Lines]",
      "523: int ip_options_get_from_user(struct net *net, struct ip_options **optp,",
      "526:  struct ip_options *opt = ip_options_get_alloc(optlen);",
      "530:  if (optlen && copy_from_user(opt->__data, data, optlen)) {",
      "537: int ip_options_get(struct net *net, struct ip_options **optp,",
      "540:  struct ip_options *opt = ip_options_get_alloc(optlen);",
      "545:   memcpy(opt->__data, data, optlen);",
      "",
      "[Added Lines]",
      "521: int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,",
      "524:  struct ip_options_rcu *opt = ip_options_get_alloc(optlen);",
      "528:  if (optlen && copy_from_user(opt->opt.__data, data, optlen)) {",
      "535: int ip_options_get(struct net *net, struct ip_options_rcu **optp,",
      "538:  struct ip_options_rcu *opt = ip_options_get_alloc(optlen);",
      "543:   memcpy(opt->opt.__data, data, optlen);",
      "",
      "---------------"
    ],
    "net/ipv4/ip_output.c||net/ipv4/ip_output.c": [
      "File: net/ipv4/ip_output.c -> net/ipv4/ip_output.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "142: int ip_build_and_send_pkt(struct sk_buff *skb, struct sock *sk,",
      "144: {",
      "145:  struct inet_sock *inet = inet_sk(sk);",
      "146:  struct rtable *rt = skb_rtable(skb);",
      "147:  struct iphdr *iph;",
      "151:  skb_reset_network_header(skb);",
      "152:  iph = ip_hdr(skb);",
      "153:  iph->version  = 4;",
      "",
      "[Removed Lines]",
      "143:      __be32 saddr, __be32 daddr, struct ip_options *opt)",
      "150:  skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));",
      "",
      "[Added Lines]",
      "143:      __be32 saddr, __be32 daddr, struct ip_options_rcu *opt)",
      "150:  skb_push(skb, sizeof(struct iphdr) + (opt ? opt->opt.optlen : 0));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "163:  iph->protocol = sk->sk_protocol;",
      "164:  ip_select_ident(iph, &rt->dst, sk);",
      "169:  }",
      "171:  skb->priority = sk->sk_priority;",
      "",
      "[Removed Lines]",
      "166:  if (opt && opt->optlen) {",
      "167:   iph->ihl += opt->optlen>>2;",
      "168:   ip_options_build(skb, opt, daddr, rt, 0);",
      "",
      "[Added Lines]",
      "166:  if (opt && opt->opt.optlen) {",
      "167:   iph->ihl += opt->opt.optlen>>2;",
      "168:   ip_options_build(skb, &opt->opt, daddr, rt, 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "316: {",
      "317:  struct sock *sk = skb->sk;",
      "318:  struct inet_sock *inet = inet_sk(sk);",
      "320:  struct rtable *rt;",
      "321:  struct iphdr *iph;",
      "322:  int res;",
      "",
      "[Removed Lines]",
      "319:  struct ip_options *opt = inet->opt;",
      "",
      "[Added Lines]",
      "319:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "327:  rcu_read_lock();",
      "328:  rt = skb_rtable(skb);",
      "329:  if (rt != NULL)",
      "330:   goto packet_routed;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "328:  inet_opt = rcu_dereference(inet->inet_opt);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "338:   daddr = inet->inet_daddr;",
      "",
      "[Removed Lines]",
      "339:   if(opt && opt->srr)",
      "340:    daddr = opt->faddr;",
      "",
      "[Added Lines]",
      "340:   if (inet_opt && inet_opt->opt.srr)",
      "341:    daddr = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "357:  skb_dst_set_noref(skb, &rt->dst);",
      "359: packet_routed:",
      "361:   goto no_route;",
      "365:  skb_reset_network_header(skb);",
      "366:  iph = ip_hdr(skb);",
      "",
      "[Removed Lines]",
      "360:  if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "364:  skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));",
      "",
      "[Added Lines]",
      "361:  if (inet_opt && inet_opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "365:  skb_push(skb, sizeof(struct iphdr) + (inet_opt ? inet_opt->opt.optlen : 0));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "375:  iph->daddr    = rt->rt_dst;",
      "381:  }",
      "383:  ip_select_ident_more(iph, &rt->dst, sk,",
      "",
      "[Removed Lines]",
      "378:  if (opt && opt->optlen) {",
      "379:   iph->ihl += opt->optlen >> 2;",
      "380:   ip_options_build(skb, opt, inet->inet_daddr, rt, 0);",
      "",
      "[Added Lines]",
      "379:  if (inet_opt && inet_opt->opt.optlen) {",
      "380:   iph->ihl += inet_opt->opt.optlen >> 2;",
      "381:   ip_options_build(skb, &inet_opt->opt, inet->inet_daddr, rt, 0);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1033:     struct ipcm_cookie *ipc, struct rtable **rtp)",
      "1034: {",
      "1035:  struct inet_sock *inet = inet_sk(sk);",
      "1037:  struct rtable *rt;",
      "",
      "[Removed Lines]",
      "1036:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "1037:  struct ip_options_rcu *opt;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1047:    if (unlikely(cork->opt == NULL))",
      "1048:     return -ENOBUFS;",
      "1049:   }",
      "1051:   cork->flags |= IPCORK_OPT;",
      "1052:   cork->addr = ipc->addr;",
      "1053:  }",
      "",
      "[Removed Lines]",
      "1050:   memcpy(cork->opt, opt, sizeof(struct ip_options) + opt->optlen);",
      "",
      "[Added Lines]",
      "1051:   memcpy(cork->opt, &opt->opt, sizeof(struct ip_options) + opt->opt.optlen);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1451:      unsigned int len)",
      "1452: {",
      "1453:  struct inet_sock *inet = inet_sk(sk);",
      "1458:  struct ipcm_cookie ipc;",
      "1459:  __be32 daddr;",
      "1460:  struct rtable *rt = skb_rtable(skb);",
      "1463:   return;",
      "1465:  daddr = ipc.addr = rt->rt_src;",
      "1466:  ipc.opt = NULL;",
      "1467:  ipc.tx_flags = 0;",
      "1470:   ipc.opt = &replyopts.opt;",
      "1474:  }",
      "1476:  {",
      "",
      "[Removed Lines]",
      "1454:  struct {",
      "1455:   struct ip_options opt;",
      "1456:   char   data[40];",
      "1457:  } replyopts;",
      "1462:  if (ip_options_echo(&replyopts.opt, skb))",
      "1469:  if (replyopts.opt.optlen) {",
      "1472:   if (ipc.opt->srr)",
      "1473:    daddr = replyopts.opt.faddr;",
      "",
      "[Added Lines]",
      "1455:  struct ip_options_data replyopts;",
      "1460:  if (ip_options_echo(&replyopts.opt.opt, skb))",
      "1467:  if (replyopts.opt.opt.optlen) {",
      "1470:   if (replyopts.opt.opt.srr)",
      "1471:    daddr = replyopts.opt.opt.faddr;",
      "",
      "---------------"
    ],
    "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c": [
      "File: net/ipv4/ip_sockglue.c -> net/ipv4/ip_sockglue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "451: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "454: static void opt_kfree_rcu(struct rcu_head *head)",
      "455: {",
      "456:  kfree(container_of(head, struct ip_options_rcu, rcu));",
      "457: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "497:  switch (optname) {",
      "498:  case IP_OPTIONS:",
      "499:  {",
      "501:   if (optlen > 40)",
      "502:    goto e_inval;",
      "503:   err = ip_options_get_from_user(sock_net(sk), &opt,",
      "504:             optval, optlen);",
      "505:   if (err)",
      "506:    break;",
      "507:   if (inet->is_icsk) {",
      "508:    struct inet_connection_sock *icsk = inet_csk(sk);",
      "509: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
      "",
      "[Removed Lines]",
      "500:   struct ip_options *opt = NULL;",
      "",
      "[Added Lines]",
      "505:   struct ip_options_rcu *old, *opt = NULL;",
      "513:   old = rcu_dereference_protected(inet->inet_opt,",
      "514:       sock_owned_by_user(sk));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "512:           (TCPF_LISTEN | TCPF_CLOSE)) &&",
      "513:         inet->inet_daddr != LOOPBACK4_IPV6)) {",
      "514: #endif",
      "517:     if (opt)",
      "519:     icsk->icsk_sync_mss(sk, icsk->icsk_pmtu_cookie);",
      "520: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
      "521:    }",
      "522: #endif",
      "523:   }",
      "526:   break;",
      "527:  }",
      "528:  case IP_PKTINFO:",
      "",
      "[Removed Lines]",
      "515:     if (inet->opt)",
      "516:      icsk->icsk_ext_hdr_len -= inet->opt->optlen;",
      "518:      icsk->icsk_ext_hdr_len += opt->optlen;",
      "524:   opt = xchg(&inet->opt, opt);",
      "525:   kfree(opt);",
      "",
      "[Added Lines]",
      "523:     if (old)",
      "524:      icsk->icsk_ext_hdr_len -= old->opt.optlen;",
      "526:      icsk->icsk_ext_hdr_len += opt->opt.optlen;",
      "532:   rcu_assign_pointer(inet->inet_opt, opt);",
      "533:   if (old)",
      "534:    call_rcu(&old->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1081:  case IP_OPTIONS:",
      "1082:  {",
      "1083:   unsigned char optbuf[sizeof(struct ip_options)+40];",
      "1085:   opt->optlen = 0;",
      "1090:   release_sock(sk);",
      "1092:   if (opt->optlen == 0)",
      "",
      "[Removed Lines]",
      "1084:   struct ip_options * opt = (struct ip_options *)optbuf;",
      "1086:   if (inet->opt)",
      "1087:    memcpy(optbuf, inet->opt,",
      "1088:           sizeof(struct ip_options)+",
      "1089:           inet->opt->optlen);",
      "",
      "[Added Lines]",
      "1093:   struct ip_options *opt = (struct ip_options *)optbuf;",
      "1094:   struct ip_options_rcu *inet_opt;",
      "1096:   inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "1097:            sock_owned_by_user(sk));",
      "1099:   if (inet_opt)",
      "1100:    memcpy(optbuf, &inet_opt->opt,",
      "1101:           sizeof(struct ip_options) +",
      "1102:           inet_opt->opt.optlen);",
      "",
      "---------------"
    ],
    "net/ipv4/raw.c||net/ipv4/raw.c": [
      "File: net/ipv4/raw.c -> net/ipv4/raw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "460:  __be32 saddr;",
      "461:  u8  tos;",
      "462:  int err;",
      "464:  err = -EMSGSIZE;",
      "465:  if (len > 0xFFFF)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "463:  struct ip_options_data opt_copy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "520:  saddr = ipc.addr;",
      "521:  ipc.addr = daddr;",
      "526:  if (ipc.opt) {",
      "527:   err = -EINVAL;",
      "",
      "[Removed Lines]",
      "523:  if (!ipc.opt)",
      "524:   ipc.opt = inet->opt;",
      "",
      "[Added Lines]",
      "524:  if (!ipc.opt) {",
      "525:   struct ip_options_rcu *inet_opt;",
      "527:   rcu_read_lock();",
      "528:   inet_opt = rcu_dereference(inet->inet_opt);",
      "529:   if (inet_opt) {",
      "530:    memcpy(&opt_copy, inet_opt,",
      "531:           sizeof(*inet_opt) + inet_opt->opt.optlen);",
      "532:    ipc.opt = &opt_copy.opt;",
      "533:   }",
      "534:   rcu_read_unlock();",
      "535:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "531:   if (inet->hdrincl)",
      "532:    goto done;",
      "534:    if (!daddr)",
      "535:     goto done;",
      "537:   }",
      "538:  }",
      "539:  tos = RT_CONN_FLAGS(sk);",
      "",
      "[Removed Lines]",
      "533:   if (ipc.opt->srr) {",
      "536:    daddr = ipc.opt->faddr;",
      "",
      "[Added Lines]",
      "544:   if (ipc.opt->opt.srr) {",
      "547:    daddr = ipc.opt->opt.faddr;",
      "",
      "---------------"
    ],
    "net/ipv4/syncookies.c||net/ipv4/syncookies.c": [
      "File: net/ipv4/syncookies.c -> net/ipv4/syncookies.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "323:  if (opt && opt->optlen) {",
      "326:   ireq->opt = kmalloc(opt_size, GFP_ATOMIC);",
      "328:    kfree(ireq->opt);",
      "329:    ireq->opt = NULL;",
      "330:   }",
      "",
      "[Removed Lines]",
      "324:   int opt_size = sizeof(struct ip_options) + opt->optlen;",
      "327:   if (ireq->opt != NULL && ip_options_echo(ireq->opt, skb)) {",
      "",
      "[Added Lines]",
      "324:   int opt_size = sizeof(struct ip_options_rcu) + opt->optlen;",
      "327:   if (ireq->opt != NULL && ip_options_echo(&ireq->opt->opt, skb)) {",
      "",
      "---------------"
    ],
    "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
      "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "154:  struct flowi4 fl4;",
      "155:  struct rtable *rt;",
      "156:  int err;",
      "158:  if (addr_len < sizeof(struct sockaddr_in))",
      "159:   return -EINVAL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162:   return -EAFNOSUPPORT;",
      "164:  nexthop = daddr = usin->sin_addr.s_addr;",
      "166:   if (!daddr)",
      "167:    return -EINVAL;",
      "169:  }",
      "171:  orig_sport = inet->inet_sport;",
      "",
      "[Removed Lines]",
      "165:  if (inet->opt && inet->opt->srr) {",
      "168:   nexthop = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "166:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "167:           sock_owned_by_user(sk));",
      "168:  if (inet_opt && inet_opt->opt.srr) {",
      "171:   nexthop = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "186:   return -ENETUNREACH;",
      "187:  }",
      "190:   daddr = rt->rt_dst;",
      "192:  if (!inet->inet_saddr)",
      "",
      "[Removed Lines]",
      "189:  if (!inet->opt || !inet->opt->srr)",
      "",
      "[Added Lines]",
      "192:  if (!inet_opt || !inet_opt->opt.srr)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222:  inet->inet_daddr = daddr;",
      "224:  inet_csk(sk)->icsk_ext_hdr_len = 0;",
      "228:  tp->rx_opt.mss_clamp = TCP_MSS_DEFAULT;",
      "",
      "[Removed Lines]",
      "225:  if (inet->opt)",
      "226:   inet_csk(sk)->icsk_ext_hdr_len = inet->opt->optlen;",
      "",
      "[Added Lines]",
      "228:  if (inet_opt)",
      "229:   inet_csk(sk)->icsk_ext_hdr_len = inet_opt->opt.optlen;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "825: {",
      "829:  if (opt && opt->optlen) {",
      "831:   dopt = kmalloc(opt_size, GFP_ATOMIC);",
      "832:   if (dopt) {",
      "834:     kfree(dopt);",
      "835:     dopt = NULL;",
      "836:    }",
      "",
      "[Removed Lines]",
      "823: static struct ip_options *tcp_v4_save_options(struct sock *sk,",
      "824:            struct sk_buff *skb)",
      "826:  struct ip_options *opt = &(IPCB(skb)->opt);",
      "827:  struct ip_options *dopt = NULL;",
      "830:   int opt_size = optlength(opt);",
      "833:    if (ip_options_echo(dopt, skb)) {",
      "",
      "[Added Lines]",
      "826: static struct ip_options_rcu *tcp_v4_save_options(struct sock *sk,",
      "827:         struct sk_buff *skb)",
      "829:  const struct ip_options *opt = &(IPCB(skb)->opt);",
      "830:  struct ip_options_rcu *dopt = NULL;",
      "833:   int opt_size = sizeof(*dopt) + opt->optlen;",
      "837:    if (ip_options_echo(&dopt->opt, skb)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1411: #ifdef CONFIG_TCP_MD5SIG",
      "1412:  struct tcp_md5sig_key *key;",
      "1413: #endif",
      "1415:  if (sk_acceptq_is_full(sk))",
      "1416:   goto exit_overflow;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1418:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1431:  newinet->inet_daddr   = ireq->rmt_addr;",
      "1432:  newinet->inet_rcv_saddr = ireq->loc_addr;",
      "1433:  newinet->inet_saddr       = ireq->loc_addr;",
      "1435:  ireq->opt       = NULL;",
      "1436:  newinet->mc_index     = inet_iif(skb);",
      "1437:  newinet->mc_ttl       = ip_hdr(skb)->ttl;",
      "1438:  inet_csk(newsk)->icsk_ext_hdr_len = 0;",
      "1441:  newinet->inet_id = newtp->write_seq ^ jiffies;",
      "1443:  tcp_mtup_init(newsk);",
      "",
      "[Removed Lines]",
      "1434:  newinet->opt       = ireq->opt;",
      "1439:  if (newinet->opt)",
      "1440:   inet_csk(newsk)->icsk_ext_hdr_len = newinet->opt->optlen;",
      "",
      "[Added Lines]",
      "1439:  inet_opt       = ireq->opt;",
      "1440:  rcu_assign_pointer(newinet->inet_opt, inet_opt);",
      "1445:  if (inet_opt)",
      "1446:   inet_csk(newsk)->icsk_ext_hdr_len = inet_opt->opt.optlen;",
      "",
      "---------------"
    ],
    "net/ipv4/udp.c||net/ipv4/udp.c": [
      "File: net/ipv4/udp.c -> net/ipv4/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "804:  int corkreq = up->corkflag || msg->msg_flags&MSG_MORE;",
      "805:  int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);",
      "806:  struct sk_buff *skb;",
      "808:  if (len > 0xFFFF)",
      "809:   return -EMSGSIZE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "807:  struct ip_options_data opt_copy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "877:    free = 1;",
      "878:   connected = 0;",
      "879:  }",
      "883:  saddr = ipc.addr;",
      "884:  ipc.addr = faddr = daddr;",
      "887:   if (!daddr)",
      "888:    return -EINVAL;",
      "890:   connected = 0;",
      "891:  }",
      "892:  tos = RT_TOS(inet->tos);",
      "893:  if (sock_flag(sk, SOCK_LOCALROUTE) ||",
      "894:      (msg->msg_flags & MSG_DONTROUTE) ||",
      "896:   tos |= RTO_ONLINK;",
      "897:   connected = 0;",
      "898:  }",
      "",
      "[Removed Lines]",
      "880:  if (!ipc.opt)",
      "881:   ipc.opt = inet->opt;",
      "886:  if (ipc.opt && ipc.opt->srr) {",
      "889:   faddr = ipc.opt->faddr;",
      "895:      (ipc.opt && ipc.opt->is_strictroute)) {",
      "",
      "[Added Lines]",
      "881:  if (!ipc.opt) {",
      "882:   struct ip_options_rcu *inet_opt;",
      "884:   rcu_read_lock();",
      "885:   inet_opt = rcu_dereference(inet->inet_opt);",
      "886:   if (inet_opt) {",
      "887:    memcpy(&opt_copy, inet_opt,",
      "888:           sizeof(*inet_opt) + inet_opt->opt.optlen);",
      "889:    ipc.opt = &opt_copy.opt;",
      "890:   }",
      "891:   rcu_read_unlock();",
      "892:  }",
      "897:  if (ipc.opt && ipc.opt->opt.srr) {",
      "900:   faddr = ipc.opt->opt.faddr;",
      "906:      (ipc.opt && ipc.opt->opt.is_strictroute)) {",
      "",
      "---------------"
    ],
    "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
      "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1470:     First: no IPv4 options.",
      "1473:  newnp->ipv6_fl_list = NULL;",
      "",
      "[Removed Lines]",
      "1472:  newinet->opt = NULL;",
      "",
      "[Added Lines]",
      "1472:  newinet->inet_opt = NULL;",
      "",
      "---------------"
    ],
    "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c": [
      "File: net/l2tp/l2tp_ip.c -> net/l2tp/l2tp_ip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "416:  int rc;",
      "417:  struct l2tp_ip_sock *lsa = l2tp_ip_sk(sk);",
      "418:  struct inet_sock *inet = inet_sk(sk);",
      "420:  struct rtable *rt = NULL;",
      "421:  int connected = 0;",
      "422:  __be32 daddr;",
      "",
      "[Removed Lines]",
      "419:  struct ip_options *opt = inet->opt;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "471:   rt = (struct rtable *) __sk_dst_check(sk, 0);",
      "473:  if (rt == NULL) {",
      "",
      "[Removed Lines]",
      "475:   if (opt && opt->srr)",
      "476:    daddr = opt->faddr;",
      "",
      "[Added Lines]",
      "473:   struct ip_options_rcu *inet_opt;",
      "475:   inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "476:            sock_owned_by_user(sk));",
      "479:   if (inet_opt && inet_opt->opt.srr)",
      "480:    daddr = inet_opt->opt.faddr;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "605b4afec8e51d0603089eac01a3ca9dd919e909",
      "candidate_info": {
        "commit_hash": "605b4afec8e51d0603089eac01a3ca9dd919e909",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/605b4afec8e51d0603089eac01a3ca9dd919e909",
        "files": [
          "net/ipv4/ip_sockglue.c"
        ],
        "message": "ipv4: Convert call_rcu() to kfree_rcu(), drop opt_kfree_rcu\n\nThe call_rcu() in do_ip_setsockopt() invokes opt_kfree_rcu(), which just\ncalls kfree().  So convert the call_rcu() to kfree_rcu(), which allows\nopt_kfree_rcu() to be eliminated.\n\nSigned-off-by: Paul E. McKenney <paul.mckenney@linaro.org>\nSigned-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>\nAcked-by: David S. Miller <davem@davemloft.net>\nCc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>\nCc: James Morris <jmorris@namei.org>\nCc: Hideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>\nCc: Patrick McHardy <kaber@trash.net>\nCc: netdev@vger.kernel.org",
        "before_after_code_files": [
          "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c"
          ],
          "candidate": [
            "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c": [
          "File: net/ipv4/ip_sockglue.c -> net/ipv4/ip_sockglue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: }",
          "",
          "[Removed Lines]",
          "448: static void opt_kfree_rcu(struct rcu_head *head)",
          "449: {",
          "450:  kfree(container_of(head, struct ip_options_rcu, rcu));",
          "451: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:   }",
          "526:   rcu_assign_pointer(inet->inet_opt, opt);",
          "527:   if (old)",
          "529:   break;",
          "530:  }",
          "531:  case IP_PKTINFO:",
          "",
          "[Removed Lines]",
          "528:    call_rcu(&old->rcu, opt_kfree_rcu);",
          "",
          "[Added Lines]",
          "523:    kfree_rcu(old, rcu);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2244d07bfa2097cb00600da91c715a8aa547917e",
      "candidate_info": {
        "commit_hash": "2244d07bfa2097cb00600da91c715a8aa547917e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2244d07bfa2097cb00600da91c715a8aa547917e",
        "files": [
          "Documentation/networking/timestamping.txt",
          "drivers/net/bfin_mac.c",
          "drivers/net/gianfar.c",
          "drivers/net/igb/igb.h",
          "drivers/net/igb/igb_main.c",
          "include/linux/skbuff.h",
          "include/net/ip.h",
          "include/net/sock.h",
          "net/can/raw.c",
          "net/core/dev.c",
          "net/core/skbuff.c",
          "net/ipv4/icmp.c",
          "net/ipv4/ip_output.c",
          "net/ipv4/raw.c",
          "net/ipv4/udp.c",
          "net/packet/af_packet.c",
          "net/socket.c"
        ],
        "message": "net: simplify flags for tx timestamping\n\nThis patch removes the abstraction introduced by the union skb_shared_tx in\nthe shared skb data.\n\nThe access of the different union elements at several places led to some\nconfusion about accessing the shared tx_flags e.g. in skb_orphan_try().\n\n    http://marc.info/?l=linux-netdev&m=128084897415886&w=2\n\nSigned-off-by: Oliver Hartkopp <socketcan@hartkopp.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/bfin_mac.c||drivers/net/bfin_mac.c",
          "drivers/net/gianfar.c||drivers/net/gianfar.c",
          "drivers/net/igb/igb.h||drivers/net/igb/igb.h",
          "drivers/net/igb/igb_main.c||drivers/net/igb/igb_main.c",
          "include/linux/skbuff.h||include/linux/skbuff.h",
          "include/net/ip.h||include/net/ip.h",
          "include/net/sock.h||include/net/sock.h",
          "net/can/raw.c||net/can/raw.c",
          "net/core/dev.c||net/core/dev.c",
          "net/core/skbuff.c||net/core/skbuff.c",
          "net/ipv4/icmp.c||net/ipv4/icmp.c",
          "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
          "net/ipv4/raw.c||net/ipv4/raw.c",
          "net/ipv4/udp.c||net/ipv4/udp.c",
          "net/packet/af_packet.c||net/packet/af_packet.c",
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/ip.h||include/net/ip.h",
            "net/ipv4/icmp.c||net/ipv4/icmp.c",
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
            "net/ipv4/raw.c||net/ipv4/raw.c",
            "net/ipv4/udp.c||net/ipv4/udp.c"
          ],
          "candidate": [
            "include/net/ip.h||include/net/ip.h",
            "net/ipv4/icmp.c||net/ipv4/icmp.c",
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
            "net/ipv4/raw.c||net/ipv4/raw.c",
            "net/ipv4/udp.c||net/ipv4/udp.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/bfin_mac.c||drivers/net/bfin_mac.c": [
          "File: drivers/net/bfin_mac.c -> drivers/net/bfin_mac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "803: static void bfin_tx_hwtstamp(struct net_device *netdev, struct sk_buff *skb)",
          "804: {",
          "805:  struct bfin_mac_local *lp = netdev_priv(netdev);",
          "809:   int timeout_cnt = MAX_TIMEOUT_CNT;",
          "",
          "[Removed Lines]",
          "806:  union skb_shared_tx *shtx = skb_tx(skb);",
          "808:  if (shtx->hardware) {",
          "814:   shtx->in_progress = 1;",
          "",
          "[Added Lines]",
          "807:  if (skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) {",
          "813:   skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "991:  struct bfin_mac_local *lp = netdev_priv(dev);",
          "992:  u16 *data;",
          "993:  u32 data_align = (unsigned long)(skb->data) & 0x3;",
          "996:  current_tx_ptr->skb = skb;",
          "",
          "[Removed Lines]",
          "994:  union skb_shared_tx *shtx = skb_tx(skb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1011:   current_tx_ptr->desc_a.start_addr = (u32)data;",
          "",
          "[Removed Lines]",
          "1008:   if (shtx->hardware)",
          "",
          "[Added Lines]",
          "1006:   if (skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1015:  } else {",
          "1020:   memcpy((u8 *)(current_tx_ptr->packet + 2), skb->data,",
          "1021:    skb->len);",
          "",
          "[Removed Lines]",
          "1018:   if (shtx->hardware)",
          "",
          "[Added Lines]",
          "1016:   if (skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP)",
          "",
          "---------------"
        ],
        "drivers/net/gianfar.c||drivers/net/gianfar.c": [
          "File: drivers/net/gianfar.c -> drivers/net/gianfar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2048:  u32 bufaddr;",
          "2049:  unsigned long flags;",
          "2050:  unsigned int nr_frags, nr_txbds, length;",
          "",
          "[Removed Lines]",
          "2051:  union skb_shared_tx *shtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2069:  txq = netdev_get_tx_queue(dev, rq);",
          "2070:  base = tx_queue->tx_bd_base;",
          "2071:  regs = tx_queue->grp->regs;",
          "2076:   do_tstamp = 1;",
          "",
          "[Removed Lines]",
          "2072:  shtx = skb_tx(skb);",
          "2075:  if (unlikely(shtx->hardware && priv->hwts_tx_en))",
          "",
          "[Added Lines]",
          "2073:  if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP &&",
          "2074:        priv->hwts_tx_en))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2176:  if (unlikely(do_tstamp)) {",
          "2178:   if (fcb == NULL)",
          "2179:    fcb = gfar_add_fcb(skb);",
          "2180:   fcb->ptp = 1;",
          "",
          "[Removed Lines]",
          "2177:   shtx->in_progress = 1;",
          "",
          "[Added Lines]",
          "2176:   skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2446:  int howmany = 0;",
          "2447:  u32 lstatus;",
          "2448:  size_t buflen;",
          "2451:  rx_queue = priv->rx_queue[tx_queue->qindex];",
          "2452:  bdp = tx_queue->dirty_tx;",
          "",
          "[Removed Lines]",
          "2449:  union skb_shared_tx *shtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2466:    nr_txbds = frags + 2;",
          "2467:   else",
          "2468:    nr_txbds = frags + 1;",
          "",
          "[Removed Lines]",
          "2464:   shtx = skb_tx(skb);",
          "2465:   if (unlikely(shtx->in_progress))",
          "",
          "[Added Lines]",
          "2462:   if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2476:     (lstatus & BD_LENGTH_MASK))",
          "2477:    break;",
          "2480:    next = next_txbd(bdp, base, tx_ring_size);",
          "2481:    buflen = next->length + GMAC_FCB_LEN;",
          "2482:   } else",
          "",
          "[Removed Lines]",
          "2479:   if (unlikely(shtx->in_progress)) {",
          "",
          "[Added Lines]",
          "2476:   if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2485:   dma_unmap_single(&priv->ofdev->dev, bdp->bufPtr,",
          "2486:     buflen, DMA_TO_DEVICE);",
          "2489:    struct skb_shared_hwtstamps shhwtstamps;",
          "2490:    u64 *ns = (u64*) (((u32)skb->data + 0x10) & ~0x7);",
          "2491:    memset(&shhwtstamps, 0, sizeof(shhwtstamps));",
          "",
          "[Removed Lines]",
          "2488:   if (unlikely(shtx->in_progress)) {",
          "",
          "[Added Lines]",
          "2485:   if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS)) {",
          "",
          "---------------"
        ],
        "drivers/net/igb/igb.h||drivers/net/igb/igb.h": [
          "File: drivers/net/igb/igb.h -> drivers/net/igb/igb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:    u16 next_to_watch;",
          "144:    unsigned int bytecount;",
          "145:    u16 gso_segs;",
          "147:    u8 mapped_as_page;",
          "148:   };",
          "",
          "[Removed Lines]",
          "146:    union skb_shared_tx shtx;",
          "",
          "[Added Lines]",
          "146:    u8 tx_flags;",
          "",
          "---------------"
        ],
        "drivers/net/igb/igb_main.c||drivers/net/igb/igb_main.c": [
          "File: drivers/net/igb/igb_main.c -> drivers/net/igb/igb_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3954:  }",
          "3956:  tx_ring->buffer_info[i].skb = skb;",
          "3959:  tx_ring->buffer_info[i].bytecount = ((gso_segs - 1) * hlen) + skb->len;",
          "3960:  tx_ring->buffer_info[i].gso_segs = gso_segs;",
          "",
          "[Removed Lines]",
          "3957:  tx_ring->buffer_info[i].shtx = skb_shinfo(skb)->tx_flags;",
          "",
          "[Added Lines]",
          "3957:  tx_ring->buffer_info[i].tx_flags = skb_shinfo(skb)->tx_flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4088:  u32 tx_flags = 0;",
          "4089:  u16 first;",
          "4090:  u8 hdr_len = 0;",
          "",
          "[Removed Lines]",
          "4091:  union skb_shared_tx *shtx = skb_tx(skb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4100:   return NETDEV_TX_BUSY;",
          "4101:  }",
          "4105:   tx_flags |= IGB_TX_FLAGS_TSTAMP;",
          "4106:  }",
          "",
          "[Removed Lines]",
          "4103:  if (unlikely(shtx->hardware)) {",
          "4104:   shtx->in_progress = 1;",
          "",
          "[Added Lines]",
          "4102:  if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP)) {",
          "4103:   skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5319:  u64 regval;",
          "5323:      !(rd32(E1000_TSYNCTXCTL) & E1000_TSYNCTXCTL_VALID))",
          "5324:   return;",
          "",
          "[Removed Lines]",
          "5322:  if (likely(!buffer_info->shtx.hardware) ||",
          "",
          "[Added Lines]",
          "5321:  if (likely(!(buffer_info->tx_flags & SKBTX_HW_TSTAMP)) ||",
          "",
          "---------------"
        ],
        "include/linux/skbuff.h||include/linux/skbuff.h": [
          "File: include/linux/skbuff.h -> include/linux/skbuff.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:  ktime_t syststamp;",
          "164: };",
          "186: };",
          "",
          "[Removed Lines]",
          "178: union skb_shared_tx {",
          "179:  struct {",
          "180:   __u8 hardware:1,",
          "181:    software:1,",
          "182:    in_progress:1,",
          "183:    prevent_sk_orphan:1;",
          "184:  };",
          "185:  __u8 flags;",
          "",
          "[Added Lines]",
          "167: enum {",
          "169:  SKBTX_HW_TSTAMP = 1 << 0,",
          "172:  SKBTX_SW_TSTAMP = 1 << 1,",
          "175:  SKBTX_IN_PROGRESS = 1 << 2,",
          "178:  SKBTX_DRV_NEEDS_SK_REF = 1 << 3,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:  unsigned short gso_segs;",
          "196:  unsigned short  gso_type;",
          "197:  __be32          ip6_frag_id;",
          "199:  struct sk_buff *frag_list;",
          "200:  struct skb_shared_hwtstamps hwtstamps;",
          "",
          "[Removed Lines]",
          "198:  union skb_shared_tx tx_flags;",
          "",
          "[Added Lines]",
          "191:  __u8  tx_flags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "587:  return &skb_shinfo(skb)->hwtstamps;",
          "588: }",
          "",
          "[Removed Lines]",
          "590: static inline union skb_shared_tx *skb_tx(struct sk_buff *skb)",
          "591: {",
          "592:  return &skb_shinfo(skb)->tx_flags;",
          "593: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1997: static inline void sw_tx_timestamp(struct sk_buff *skb)",
          "1998: {",
          "2001:   skb_tstamp_tx(skb, NULL);",
          "2002: }",
          "",
          "[Removed Lines]",
          "1999:  union skb_shared_tx *shtx = skb_tx(skb);",
          "2000:  if (shtx->software && !shtx->in_progress)",
          "",
          "[Added Lines]",
          "1987:  if (skb_shinfo(skb)->tx_flags & SKBTX_SW_TSTAMP &&",
          "1988:      !(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS))",
          "",
          "---------------"
        ],
        "include/net/ip.h||include/net/ip.h": [
          "File: include/net/ip.h -> include/net/ip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  __be32   addr;",
          "54:  int   oif;",
          "55:  struct ip_options *opt;",
          "57: };",
          "59: #define IPCB(skb) ((struct inet_skb_parm*)((skb)->cb))",
          "",
          "[Removed Lines]",
          "56:  union skb_shared_tx shtx;",
          "",
          "[Added Lines]",
          "56:  __u8   tx_flags;",
          "",
          "---------------"
        ],
        "include/net/sock.h||include/net/sock.h": [
          "File: include/net/sock.h -> include/net/sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1679: extern int sock_tx_timestamp(struct msghdr *msg,",
          "1680:         struct sock *sk,",
          "1681:         union skb_shared_tx *shtx);",
          "",
          "[Added Lines]",
          "1678: extern int sock_tx_timestamp(struct sock *sk, __u8 *tx_flags);",
          "",
          "---------------"
        ],
        "net/can/raw.c||net/can/raw.c": [
          "File: net/can/raw.c -> net/can/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:  err = memcpy_fromiovec(skb_put(skb, size), msg->msg_iov, size);",
          "648:  if (err < 0)",
          "649:   goto free_skb;",
          "651:  if (err < 0)",
          "652:   goto free_skb;",
          "657:  skb->dev = dev;",
          "658:  skb->sk  = sk;",
          "",
          "[Removed Lines]",
          "650:  err = sock_tx_timestamp(msg, sk, skb_tx(skb));",
          "655:  skb_tx(skb)->prevent_sk_orphan = 1;",
          "",
          "[Added Lines]",
          "650:  err = sock_tx_timestamp(sk, &skb_shinfo(skb)->tx_flags);",
          "655:  skb_shinfo(skb)->tx_flags |= SKBTX_DRV_NEEDS_SK_REF;",
          "",
          "---------------"
        ],
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908: static inline void skb_orphan_try(struct sk_buff *skb)",
          "1909: {",
          "1910:  struct sock *sk = skb->sk;",
          "",
          "[Removed Lines]",
          "1912:  if (sk && !skb_tx(skb)->flags) {",
          "",
          "[Added Lines]",
          "1912:  if (sk && !skb_shinfo(skb)->tx_flags) {",
          "",
          "---------------"
        ],
        "net/core/skbuff.c||net/core/skbuff.c": [
          "File: net/core/skbuff.c -> net/core/skbuff.c"
        ],
        "net/ipv4/icmp.c||net/ipv4/icmp.c": [
          "File: net/ipv4/icmp.c -> net/ipv4/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:  inet->tos = ip_hdr(skb)->tos;",
          "380:  daddr = ipc.addr = rt->rt_src;",
          "381:  ipc.opt = NULL;",
          "383:  if (icmp_param->replyopts.optlen) {",
          "384:   ipc.opt = &icmp_param->replyopts;",
          "385:   if (ipc.opt->srr)",
          "",
          "[Removed Lines]",
          "382:  ipc.shtx.flags = 0;",
          "",
          "[Added Lines]",
          "382:  ipc.tx_flags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:  inet_sk(sk)->tos = tos;",
          "539:  ipc.addr = iph->saddr;",
          "540:  ipc.opt = &icmp_param.replyopts;",
          "543:  {",
          "544:   struct flowi fl = {",
          "",
          "[Removed Lines]",
          "541:  ipc.shtx.flags = 0;",
          "",
          "[Added Lines]",
          "541:  ipc.tx_flags = 0;",
          "",
          "---------------"
        ],
        "net/ipv4/ip_output.c||net/ipv4/ip_output.c": [
          "File: net/ipv4/ip_output.c -> net/ipv4/ip_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:     else",
          "957:    }",
          "958:    if (skb == NULL)",
          "959:     goto error;",
          "",
          "[Removed Lines]",
          "956:      ipc->shtx.flags = 0;",
          "",
          "[Added Lines]",
          "956:      ipc->tx_flags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "964:    skb->ip_summed = csummode;",
          "965:    skb->csum = 0;",
          "966:    skb_reserve(skb, hh_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "967:    skb_shinfo(skb)->tx_flags = ipc->tx_flags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1385:  daddr = ipc.addr = rt->rt_src;",
          "1386:  ipc.opt = NULL;",
          "1389:  if (replyopts.opt.optlen) {",
          "1390:   ipc.opt = &replyopts.opt;",
          "",
          "[Removed Lines]",
          "1387:  ipc.shtx.flags = 0;",
          "",
          "[Added Lines]",
          "1387:  ipc.tx_flags = 0;",
          "",
          "---------------"
        ],
        "net/ipv4/raw.c||net/ipv4/raw.c": [
          "File: net/ipv4/raw.c -> net/ipv4/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:  ipc.addr = inet->inet_saddr;",
          "507:  ipc.opt = NULL;",
          "509:  ipc.oif = sk->sk_bound_dev_if;",
          "511:  if (msg->msg_controllen) {",
          "",
          "[Removed Lines]",
          "508:  ipc.shtx.flags = 0;",
          "",
          "[Added Lines]",
          "508:  ipc.tx_flags = 0;",
          "",
          "---------------"
        ],
        "net/ipv4/udp.c||net/ipv4/udp.c": [
          "File: net/ipv4/udp.c -> net/ipv4/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:   return -EOPNOTSUPP;",
          "799:  ipc.opt = NULL;",
          "802:  if (up->pending) {",
          "",
          "[Removed Lines]",
          "800:  ipc.shtx.flags = 0;",
          "",
          "[Added Lines]",
          "800:  ipc.tx_flags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845:  ipc.addr = inet->inet_saddr;",
          "847:  ipc.oif = sk->sk_bound_dev_if;",
          "849:  if (err)",
          "850:   return err;",
          "851:  if (msg->msg_controllen) {",
          "",
          "[Removed Lines]",
          "848:  err = sock_tx_timestamp(msg, sk, &ipc.shtx);",
          "",
          "[Added Lines]",
          "848:  err = sock_tx_timestamp(sk, &ipc.tx_flags);",
          "",
          "---------------"
        ],
        "net/packet/af_packet.c||net/packet/af_packet.c": [
          "File: net/packet/af_packet.c -> net/packet/af_packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:  skb->dev = dev;",
          "489:  skb->priority = sk->sk_priority;",
          "490:  skb->mark = sk->sk_mark;",
          "492:  if (err < 0)",
          "493:   goto out_unlock;",
          "",
          "[Removed Lines]",
          "491:  err = sock_tx_timestamp(msg, sk, skb_tx(skb));",
          "",
          "[Added Lines]",
          "491:  err = sock_tx_timestamp(sk, &skb_shinfo(skb)->tx_flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1209:  err = skb_copy_datagram_from_iovec(skb, offset, msg->msg_iov, 0, len);",
          "1210:  if (err)",
          "1211:   goto out_free;",
          "1213:  if (err < 0)",
          "1214:   goto out_free;",
          "",
          "[Removed Lines]",
          "1212:  err = sock_tx_timestamp(msg, sk, skb_tx(skb));",
          "",
          "[Added Lines]",
          "1212:  err = sock_tx_timestamp(sk, &skb_shinfo(skb)->tx_flags);",
          "",
          "---------------"
        ],
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535: }",
          "536: EXPORT_SYMBOL(sock_release);",
          "540: {",
          "542:  if (sock_flag(sk, SOCK_TIMESTAMPING_TX_HARDWARE))",
          "544:  if (sock_flag(sk, SOCK_TIMESTAMPING_TX_SOFTWARE))",
          "546:  return 0;",
          "547: }",
          "548: EXPORT_SYMBOL(sock_tx_timestamp);",
          "",
          "[Removed Lines]",
          "538: int sock_tx_timestamp(struct msghdr *msg, struct sock *sk,",
          "539:         union skb_shared_tx *shtx)",
          "541:  shtx->flags = 0;",
          "543:   shtx->hardware = 1;",
          "545:   shtx->software = 1;",
          "",
          "[Added Lines]",
          "538: int sock_tx_timestamp(struct sock *sk, __u8 *tx_flags)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "072d8c94142a3a95151774975f6c1fd1dc1f1e1b",
      "candidate_info": {
        "commit_hash": "072d8c94142a3a95151774975f6c1fd1dc1f1e1b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/072d8c94142a3a95151774975f6c1fd1dc1f1e1b",
        "files": [
          "net/ipv4/inet_connection_sock.c"
        ],
        "message": "ipv4: Get route daddr from flow key in inet_csk_route_req().\n\nNow that output route lookups update the flow with\ndestination address selection, we can fetch it from\nfl4->daddr instead of rt->rt_dst\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c"
          ],
          "candidate": [
            "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c": [
          "File: net/ipv4/inet_connection_sock.c -> net/ipv4/inet_connection_sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:  rt = ip_route_output_flow(net, &fl4, sk);",
          "368:  if (IS_ERR(rt))",
          "369:   goto no_route;",
          "371:   goto route_err;",
          "372:  return &rt->dst;",
          "",
          "[Removed Lines]",
          "370:  if (opt && opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)",
          "",
          "[Added Lines]",
          "370:  if (opt && opt->opt.is_strictroute && fl4.daddr != rt->rt_gateway)",
          "",
          "---------------"
        ]
      }
    }
  ]
}