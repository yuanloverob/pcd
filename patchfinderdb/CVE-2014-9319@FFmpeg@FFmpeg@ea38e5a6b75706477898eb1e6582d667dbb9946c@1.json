{
  "cve_id": "CVE-2014-9319",
  "cve_desc": "The ff_hevc_decode_nal_sps function in libavcodec/hevc_ps.c in FFMpeg before 2.1.6, 2.2.x through 2.3.x, and 2.4.x before 2.4.4 allows remote attackers to cause a denial of service (out-of-bounds access) via a crafted .bit file.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "ea38e5a6b75706477898eb1e6582d667dbb9946c",
  "patch_info": {
    "commit_hash": "ea38e5a6b75706477898eb1e6582d667dbb9946c",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ea38e5a6b75706477898eb1e6582d667dbb9946c",
    "files": [
      "libavcodec/hevc_ps.c"
    ],
    "message": "avcodec/hevc_ps: Check num_long_term_ref_pics_sps\n\nFixes out of array access\nFixes: signal_sigsegv_35bd0f0_1182_cov_791726764_STRUCT_B_Samsung_4.bit\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/hevc_ps.c||libavcodec/hevc_ps.c"
    ]
  },
  "patch_diff": {
    "libavcodec/hevc_ps.c||libavcodec/hevc_ps.c": [
      "File: libavcodec/hevc_ps.c -> libavcodec/hevc_ps.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "951:     sps->long_term_ref_pics_present_flag = get_bits1(gb);",
      "952:     if (sps->long_term_ref_pics_present_flag) {",
      "953:         sps->num_long_term_ref_pics_sps = get_ue_golomb_long(gb);",
      "954:         for (i = 0; i < sps->num_long_term_ref_pics_sps; i++) {",
      "955:             sps->lt_ref_pic_poc_lsb_sps[i]       = get_bits(gb, sps->log2_max_poc_lsb);",
      "956:             sps->used_by_curr_pic_lt_sps_flag[i] = get_bits1(gb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "954:         if (sps->num_long_term_ref_pics_sps > 31U) {",
      "955:             av_log(0, AV_LOG_ERROR, \"num_long_term_ref_pics_sps %d is out of range.\\n\",",
      "956:                    sps->num_long_term_ref_pics_sps);",
      "957:             goto err;",
      "958:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15893adbdb6a7000f59207bcb88def6e7b4812b9",
      "candidate_info": {
        "commit_hash": "15893adbdb6a7000f59207bcb88def6e7b4812b9",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/15893adbdb6a7000f59207bcb88def6e7b4812b9",
        "files": [
          "libavcodec/hevc_ps.c"
        ],
        "message": "avcodec/hevc_ps: Remove gotos from ff_hevc_parse_sps()\n\nThey are currently unnecessary\n\nFound-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/hevc_ps.c||libavcodec/hevc_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/hevc_ps.c||libavcodec/hevc_ps.c"
          ],
          "candidate": [
            "libavcodec/hevc_ps.c||libavcodec/hevc_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/hevc_ps.c||libavcodec/hevc_ps.c": [
          "File: libavcodec/hevc_ps.c -> libavcodec/hevc_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756:     sps->vps_id = get_bits(gb, 4);",
          "757:     if (sps->vps_id >= MAX_VPS_COUNT) {",
          "758:         av_log(avctx, AV_LOG_ERROR, \"VPS id out of range: %d\\n\", sps->vps_id);",
          "761:     }",
          "763:     if (vps_list && !vps_list[sps->vps_id]) {",
          "764:         av_log(avctx, AV_LOG_ERROR, \"VPS %d does not exist\\n\",",
          "765:                sps->vps_id);",
          "768:     }",
          "770:     sps->max_sub_layers = get_bits(gb, 3) + 1;",
          "771:     if (sps->max_sub_layers > MAX_SUB_LAYERS) {",
          "772:         av_log(avctx, AV_LOG_ERROR, \"sps_max_sub_layers out of range: %d\\n\",",
          "773:                sps->max_sub_layers);",
          "776:     }",
          "778:     skip_bits1(gb); // temporal_id_nesting_flag",
          "780:     if ((ret = parse_ptl(gb, avctx, &sps->ptl, sps->max_sub_layers)) < 0)",
          "784:     if (*sps_id >= MAX_SPS_COUNT) {",
          "785:         av_log(avctx, AV_LOG_ERROR, \"SPS id out of range: %d\\n\", *sps_id);",
          "788:     }",
          "790:     sps->chroma_format_idc = get_ue_golomb_long(gb);",
          "",
          "[Removed Lines]",
          "759:         ret = AVERROR_INVALIDDATA;",
          "760:         goto err;",
          "766:         ret = AVERROR_INVALIDDATA;",
          "767:         goto err;",
          "774:         ret = AVERROR_INVALIDDATA;",
          "775:         goto err;",
          "781:         goto err;",
          "786:         ret = AVERROR_INVALIDDATA;",
          "787:         goto err;",
          "",
          "[Added Lines]",
          "759:         return AVERROR_INVALIDDATA;",
          "765:         return AVERROR_INVALIDDATA;",
          "772:         return AVERROR_INVALIDDATA;",
          "778:         return ret;",
          "783:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "799:     sps->height = get_ue_golomb_long(gb);",
          "800:     if ((ret = av_image_check_size(sps->width,",
          "801:                                    sps->height, 0, avctx)) < 0)",
          "804:     if (get_bits1(gb)) { // pic_conformance_flag",
          "",
          "[Removed Lines]",
          "802:         goto err;",
          "",
          "[Added Lines]",
          "798:         return ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:                \"Luma bit depth (%d) is different from chroma bit depth (%d), \"",
          "833:                \"this is unsupported.\\n\",",
          "834:                sps->bit_depth, bit_depth_chroma);",
          "837:     }",
          "839:     switch (sps->bit_depth) {",
          "",
          "[Removed Lines]",
          "835:         ret = AVERROR_INVALIDDATA;",
          "836:         goto err;",
          "",
          "[Added Lines]",
          "831:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "864:     default:",
          "865:         av_log(avctx, AV_LOG_ERROR,",
          "866:                \"4:2:0, 4:2:2, 4:4:4 supports are currently specified for 8, 10 and 12 bits.\\n\");",
          "869:     }",
          "871:     desc = av_pix_fmt_desc_get(sps->pix_fmt);",
          "872:     if (!desc) {",
          "875:     }",
          "877:     sps->hshift[0] = sps->vshift[0] = 0;",
          "",
          "[Removed Lines]",
          "867:         ret = AVERROR_PATCHWELCOME;",
          "868:         goto err;",
          "873:         ret = AVERROR(EINVAL);",
          "874:         goto err;",
          "",
          "[Added Lines]",
          "862:         return AVERROR_INVALIDDATA;",
          "867:         return AVERROR(EINVAL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "884:     if (sps->log2_max_poc_lsb > 16) {",
          "885:         av_log(avctx, AV_LOG_ERROR, \"log2_max_pic_order_cnt_lsb_minus4 out range: %d\\n\",",
          "886:                sps->log2_max_poc_lsb - 4);",
          "889:     }",
          "891:     sublayer_ordering_info = get_bits1(gb);",
          "",
          "[Removed Lines]",
          "887:         ret = AVERROR_INVALIDDATA;",
          "888:         goto err;",
          "",
          "[Added Lines]",
          "880:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "897:         if (sps->temporal_layer[i].max_dec_pic_buffering > MAX_DPB_SIZE) {",
          "898:             av_log(avctx, AV_LOG_ERROR, \"sps_max_dec_pic_buffering_minus1 out of range: %d\\n\",",
          "899:                    sps->temporal_layer[i].max_dec_pic_buffering - 1);",
          "902:         }",
          "903:         if (sps->temporal_layer[i].num_reorder_pics > sps->temporal_layer[i].max_dec_pic_buffering - 1) {",
          "904:             av_log(avctx, AV_LOG_WARNING, \"sps_max_num_reorder_pics out of range: %d\\n\",",
          "905:                    sps->temporal_layer[i].num_reorder_pics);",
          "906:             if (avctx->err_recognition & AV_EF_EXPLODE ||",
          "907:                 sps->temporal_layer[i].num_reorder_pics > MAX_DPB_SIZE - 1) {",
          "910:             }",
          "911:             sps->temporal_layer[i].max_dec_pic_buffering = sps->temporal_layer[i].num_reorder_pics + 1;",
          "912:         }",
          "",
          "[Removed Lines]",
          "900:             ret = AVERROR_INVALIDDATA;",
          "901:             goto err;",
          "908:                 ret = AVERROR_INVALIDDATA;",
          "909:                 goto err;",
          "",
          "[Added Lines]",
          "892:             return AVERROR_INVALIDDATA;",
          "899:                 return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "930:     if (sps->log2_min_cb_size < 3 || sps->log2_min_cb_size > 30) {",
          "931:         av_log(avctx, AV_LOG_ERROR, \"Invalid value %d for log2_min_cb_size\", sps->log2_min_cb_size);",
          "934:     }",
          "936:     if (sps->log2_diff_max_min_coding_block_size > 30) {",
          "937:         av_log(avctx, AV_LOG_ERROR, \"Invalid value %d for log2_diff_max_min_coding_block_size\", sps->log2_diff_max_min_coding_block_size);",
          "940:     }",
          "942:     if (sps->log2_min_tb_size >= sps->log2_min_cb_size || sps->log2_min_tb_size < 2) {",
          "943:         av_log(avctx, AV_LOG_ERROR, \"Invalid value for log2_min_tb_size\");",
          "946:     }",
          "948:     if (log2_diff_max_min_transform_block_size < 0 || log2_diff_max_min_transform_block_size > 30) {",
          "949:         av_log(avctx, AV_LOG_ERROR, \"Invalid value %d for log2_diff_max_min_transform_block_size\", log2_diff_max_min_transform_block_size);",
          "952:     }",
          "954:     sps->max_transform_hierarchy_depth_inter = get_ue_golomb_long(gb);",
          "",
          "[Removed Lines]",
          "932:         ret = AVERROR_INVALIDDATA;",
          "933:         goto err;",
          "938:         ret = AVERROR_INVALIDDATA;",
          "939:         goto err;",
          "944:         ret = AVERROR_INVALIDDATA;",
          "945:         goto err;",
          "950:         ret = AVERROR_INVALIDDATA;",
          "951:         goto err;",
          "",
          "[Added Lines]",
          "922:         return AVERROR_INVALIDDATA;",
          "927:         return AVERROR_INVALIDDATA;",
          "932:         return AVERROR_INVALIDDATA;",
          "937:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "961:         if (get_bits1(gb)) {",
          "962:             ret = scaling_list_data(gb, avctx, &sps->scaling_list, sps);",
          "963:             if (ret < 0)",
          "965:         }",
          "966:     }",
          "",
          "[Removed Lines]",
          "964:                 goto err;",
          "",
          "[Added Lines]",
          "950:                 return ret;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "979:             av_log(avctx, AV_LOG_ERROR,",
          "980:                    \"PCM bit depth (%d) is greater than normal bit depth (%d)\\n\",",
          "981:                    sps->pcm.bit_depth, sps->bit_depth);",
          "984:         }",
          "986:         sps->pcm.loop_filter_disable_flag = get_bits1(gb);",
          "",
          "[Removed Lines]",
          "982:             ret = AVERROR_INVALIDDATA;",
          "983:             goto err;",
          "",
          "[Added Lines]",
          "968:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "990:     if (sps->nb_st_rps > MAX_SHORT_TERM_RPS_COUNT) {",
          "991:         av_log(avctx, AV_LOG_ERROR, \"Too many short term RPS: %d.\\n\",",
          "992:                sps->nb_st_rps);",
          "995:     }",
          "996:     for (i = 0; i < sps->nb_st_rps; i++) {",
          "997:         if ((ret = ff_hevc_decode_short_term_rps(gb, avctx, &sps->st_rps[i],",
          "998:                                                  sps, 0)) < 0)",
          "1000:     }",
          "1003:     sps->long_term_ref_pics_present_flag = get_bits1(gb);",
          "1004:     if (sps->long_term_ref_pics_present_flag) {",
          "",
          "[Removed Lines]",
          "993:         ret = AVERROR_INVALIDDATA;",
          "994:         goto err;",
          "999:             goto err;",
          "1001:     ret = AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "978:         return AVERROR_INVALIDDATA;",
          "983:             return ret;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1006:         if (sps->num_long_term_ref_pics_sps > 31U) {",
          "1007:             av_log(avctx, AV_LOG_ERROR, \"num_long_term_ref_pics_sps %d is out of range.\\n\",",
          "1008:                    sps->num_long_term_ref_pics_sps);",
          "1010:         }",
          "1011:         for (i = 0; i < sps->num_long_term_ref_pics_sps; i++) {",
          "1012:             sps->lt_ref_pic_poc_lsb_sps[i]       = get_bits(gb, sps->log2_max_poc_lsb);",
          "",
          "[Removed Lines]",
          "1009:             goto err;",
          "",
          "[Added Lines]",
          "992:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1078:         av_log(avctx, AV_LOG_WARNING, \"Invalid visible frame dimensions: %dx%d.\\n\",",
          "1079:                sps->output_width, sps->output_height);",
          "1080:         if (avctx->err_recognition & AV_EF_EXPLODE) {",
          "1083:         }",
          "1084:         av_log(avctx, AV_LOG_WARNING,",
          "1085:                \"Displaying the whole video surface.\\n\");",
          "",
          "[Removed Lines]",
          "1081:             ret = AVERROR_INVALIDDATA;",
          "1082:             goto err;",
          "",
          "[Added Lines]",
          "1064:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1097:     if (sps->log2_ctb_size > MAX_LOG2_CTB_SIZE) {",
          "1098:         av_log(avctx, AV_LOG_ERROR, \"CTB size out of range: 2^%d\\n\", sps->log2_ctb_size);",
          "1100:     }",
          "1101:     if (sps->log2_ctb_size < 4) {",
          "1102:         av_log(avctx,",
          "",
          "[Removed Lines]",
          "1099:         goto err;",
          "",
          "[Added Lines]",
          "1081:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1104:                \"log2_ctb_size %d differs from the bounds of any known profile\\n\",",
          "1105:                sps->log2_ctb_size);",
          "1106:         avpriv_request_sample(avctx, \"log2_ctb_size %d\", sps->log2_ctb_size);",
          "1108:     }",
          "1110:     sps->ctb_width  = (sps->width  + (1 << sps->log2_ctb_size) - 1) >> sps->log2_ctb_size;",
          "",
          "[Removed Lines]",
          "1107:         goto err;",
          "",
          "[Added Lines]",
          "1089:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1124:     if (av_mod_uintp2(sps->width, sps->log2_min_cb_size) ||",
          "1125:         av_mod_uintp2(sps->height, sps->log2_min_cb_size)) {",
          "1126:         av_log(avctx, AV_LOG_ERROR, \"Invalid coded frame dimensions.\\n\");",
          "1128:     }",
          "1130:     if (sps->max_transform_hierarchy_depth_inter > sps->log2_ctb_size - sps->log2_min_tb_size) {",
          "1131:         av_log(avctx, AV_LOG_ERROR, \"max_transform_hierarchy_depth_inter out of range: %d\\n\",",
          "1132:                sps->max_transform_hierarchy_depth_inter);",
          "1134:     }",
          "1135:     if (sps->max_transform_hierarchy_depth_intra > sps->log2_ctb_size - sps->log2_min_tb_size) {",
          "1136:         av_log(avctx, AV_LOG_ERROR, \"max_transform_hierarchy_depth_intra out of range: %d\\n\",",
          "1137:                sps->max_transform_hierarchy_depth_intra);",
          "1139:     }",
          "1140:     if (sps->log2_max_trafo_size > FFMIN(sps->log2_ctb_size, 5)) {",
          "1141:         av_log(avctx, AV_LOG_ERROR,",
          "1142:                \"max transform block size out of range: %d\\n\",",
          "1143:                sps->log2_max_trafo_size);",
          "1145:     }",
          "1147:     if (get_bits_left(gb) < 0) {",
          "1148:         av_log(avctx, AV_LOG_ERROR,",
          "1149:                \"Overread SPS by %d bits\\n\", -get_bits_left(gb));",
          "1151:     }",
          "1153:     return 0;",
          "1157: }",
          "1159: int ff_hevc_decode_nal_sps(HEVCContext *s)",
          "",
          "[Removed Lines]",
          "1127:         goto err;",
          "1133:         goto err;",
          "1138:         goto err;",
          "1144:         goto err;",
          "1150:         goto err;",
          "1155: err:",
          "1156:     return ret;",
          "",
          "[Added Lines]",
          "1109:         return AVERROR_INVALIDDATA;",
          "1115:         return AVERROR_INVALIDDATA;",
          "1120:         return AVERROR_INVALIDDATA;",
          "1126:         return AVERROR_INVALIDDATA;",
          "1132:         return AVERROR_INVALIDDATA;",
          "",
          "---------------"
        ]
      }
    }
  ]
}