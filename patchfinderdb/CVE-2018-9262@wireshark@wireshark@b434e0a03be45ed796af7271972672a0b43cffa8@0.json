{
  "cve_id": "CVE-2018-9262",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5 and 2.2.0 to 2.2.13, the VLAN dissector could crash. This was addressed in epan/dissectors/packet-vlan.c by limiting VLAN tag nesting to restrict the recursion depth.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b434e0a03be45ed796af7271972672a0b43cffa8",
  "patch_info": {
    "commit_hash": "b434e0a03be45ed796af7271972672a0b43cffa8",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b434e0a03be45ed796af7271972672a0b43cffa8",
    "files": [
      "epan/dissectors/packet-vlan.c"
    ],
    "message": "VLAN: define a recursion depth limit\n\nAltough the dissection consumes 4 bytes each time it is called, it can\ntrigger a stack overflow for big packets. Let's limmit the number of\nallowed VLAN tags for a given packet.\n\nBug: 14469\nChange-Id: Ieb6834ab3350dc7e8c301e6479577855a253897e\nReviewed-on: https://code.wireshark.org/review/26270\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c": [
      "File: epan/dissectors/packet-vlan.c -> epan/dissectors/packet-vlan.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: #include <epan/prefs.h>",
      "24: #include <epan/to_str.h>",
      "25: #include <epan/addr_resolv.h>",
      "27: void proto_register_vlan(void);",
      "28: void proto_reg_handoff_vlan(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: #include <epan/proto_data.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: static capture_dissector_handle_t llc_cap_handle;",
      "55: static capture_dissector_handle_t ipx_cap_handle;",
      "57: static header_field_info *hfi_vlan = NULL;",
      "59: #define VLAN_HFI_INIT HFI_INIT(proto_vlan)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58: static int proto_vlan;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "184: static gint ett_vlan = -1;",
      "186: static expert_field ei_vlan_len = EI_INIT;",
      "188: static gboolean",
      "189: capture_vlan(const guchar *pd, int offset, int len, capture_packet_info_t *cpinfo, const union wtap_pseudo_header *pseudo_header _U_ ) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "190: static expert_field ei_vlan_too_many_tags = EI_INIT;",
      "192: #define VLAN_MAX_NESTED_TAGS 10",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "231:   gboolean is_802_2;",
      "232:   proto_tree *vlan_tree;",
      "233:   proto_item *item;",
      "235:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"VLAN\");",
      "236:   col_clear(pinfo->cinfo, COL_INFO);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "240:   guint vlan_nested_count;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "247:   vlan_tree = NULL;",
      "249:   if (tree) {",
      "252:     if (vlan_summary_in_tree) {",
      "253:       if (vlan_version < IEEE_8021Q_2011) {",
      "",
      "[Removed Lines]",
      "250:     ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
      "",
      "[Added Lines]",
      "256:   ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
      "257:   vlan_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_vlan, 0));",
      "258:   if (++vlan_nested_count > VLAN_MAX_NESTED_TAGS) {",
      "259:     expert_add_info(pinfo, ti, &ei_vlan_too_many_tags);",
      "260:     return tvb_captured_length(tvb);",
      "261:   }",
      "262:   p_add_proto_data(pinfo->pool, pinfo, proto_vlan, 0, GUINT_TO_POINTER(vlan_nested_count));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "365:   static ei_register_info ei[] = {",
      "366:      { &ei_vlan_len, { \"vlan.len.past_end\", PI_MALFORMED, PI_ERROR, \"Length field value goes past the end of the payload\", EXPFILL }},",
      "367:   };",
      "369:   static const enum_val_t version_vals[] = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "381:      { &ei_vlan_too_many_tags, { \"vlan.too_many_tags\", PI_UNDECODED, PI_WARN, \"Too many nested VLAN tags\", EXPFILL }},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "384:   module_t *vlan_module;",
      "385:   expert_module_t* expert_vlan;",
      "388:   proto_vlan = proto_register_protocol(\"802.1Q Virtual LAN\", \"VLAN\", \"vlan\");",
      "389:   hfi_vlan = proto_registrar_get_nth(proto_vlan);",
      "",
      "[Removed Lines]",
      "386:   int proto_vlan;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7929700033eb41fc49fc637ec039ad0a262443e3",
      "candidate_info": {
        "commit_hash": "7929700033eb41fc49fc637ec039ad0a262443e3",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7929700033eb41fc49fc637ec039ad0a262443e3",
        "files": [
          "epan/dissectors/packet-vlan.c"
        ],
        "message": "VLAN: define a recursion depth limit\n\nAltough the dissection consumes 4 bytes each time it is called, it can\ntrigger a stack overflow for big packets. Let's limmit the number of\nallowed VLAN tags for a given packet.\n\nBug: 14469\nChange-Id: Ieb6834ab3350dc7e8c301e6479577855a253897e\nReviewed-on: https://code.wireshark.org/review/26270\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\n(cherry picked from commit b434e0a03be45ed796af7271972672a0b43cffa8)\nReviewed-on: https://code.wireshark.org/review/26272\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
          ],
          "candidate": [
            "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c": [
          "File: epan/dissectors/packet-vlan.c -> epan/dissectors/packet-vlan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <epan/prefs.h>",
          "36: #include <epan/to_str.h>",
          "37: #include <epan/addr_resolv.h>",
          "39: void proto_register_vlan(void);",
          "40: void proto_reg_handoff_vlan(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: static capture_dissector_handle_t llc_cap_handle;",
          "67: static capture_dissector_handle_t ipx_cap_handle;",
          "69: static header_field_info *hfi_vlan = NULL;",
          "71: #define VLAN_HFI_INIT HFI_INIT(proto_vlan)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: static int proto_vlan;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196: static gint ett_vlan = -1;",
          "198: static expert_field ei_vlan_len = EI_INIT;",
          "200: static gboolean",
          "201: capture_vlan(const guchar *pd, int offset, int len, capture_packet_info_t *cpinfo, const union wtap_pseudo_header *pseudo_header _U_ ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: static expert_field ei_vlan_too_many_tags = EI_INIT;",
          "204: #define VLAN_MAX_NESTED_TAGS 10",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:   gboolean is_802_2;",
          "244:   proto_tree *vlan_tree;",
          "245:   proto_item *item;",
          "247:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"VLAN\");",
          "248:   col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   guint vlan_nested_count;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:   vlan_tree = NULL;",
          "261:   if (tree) {",
          "264:     if (vlan_summary_in_tree) {",
          "265:       if (vlan_version < IEEE_8021Q_2011) {",
          "",
          "[Removed Lines]",
          "262:     ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
          "",
          "[Added Lines]",
          "268:   ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
          "269:   vlan_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_vlan, 0));",
          "270:   if (++vlan_nested_count > VLAN_MAX_NESTED_TAGS) {",
          "271:     expert_add_info(pinfo, ti, &ei_vlan_too_many_tags);",
          "272:     return tvb_captured_length(tvb);",
          "273:   }",
          "274:   p_add_proto_data(pinfo->pool, pinfo, proto_vlan, 0, GUINT_TO_POINTER(vlan_nested_count));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:   static ei_register_info ei[] = {",
          "378:      { &ei_vlan_len, { \"vlan.len.past_end\", PI_MALFORMED, PI_ERROR, \"Length field value goes past the end of the payload\", EXPFILL }},",
          "379:   };",
          "381:   static const enum_val_t version_vals[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:      { &ei_vlan_too_many_tags, { \"vlan.too_many_tags\", PI_UNDECODED, PI_WARN, \"Too many nested VLAN tags\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:   module_t *vlan_module;",
          "397:   expert_module_t* expert_vlan;",
          "400:   proto_vlan = proto_register_protocol(\"802.1Q Virtual LAN\", \"VLAN\", \"vlan\");",
          "401:   hfi_vlan = proto_registrar_get_nth(proto_vlan);",
          "",
          "[Removed Lines]",
          "398:   int proto_vlan;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f05c3b91f9571210b86576ee6284e71a3306109d",
      "candidate_info": {
        "commit_hash": "f05c3b91f9571210b86576ee6284e71a3306109d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f05c3b91f9571210b86576ee6284e71a3306109d",
        "files": [
          "epan/dissectors/packet-vlan.c"
        ],
        "message": "VLAN: define a recursion depth limit\n\nAltough the dissection consumes 4 bytes each time it is called, it can\ntrigger a stack overflow for big packets. Let's limmit the number of\nallowed VLAN tags for a given packet.\n\nBug: 14469\nChange-Id: Ieb6834ab3350dc7e8c301e6479577855a253897e\nReviewed-on: https://code.wireshark.org/review/26270\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\n(cherry picked from commit b434e0a03be45ed796af7271972672a0b43cffa8)\nConflicts:\n\tepan/dissectors/packet-vlan.c\nReviewed-on: https://code.wireshark.org/review/26274\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
          ],
          "candidate": [
            "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-vlan.c||epan/dissectors/packet-vlan.c": [
          "File: epan/dissectors/packet-vlan.c -> epan/dissectors/packet-vlan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <epan/prefs.h>",
          "36: #include <epan/to_str.h>",
          "37: #include <epan/addr_resolv.h>",
          "39: void proto_register_vlan(void);",
          "40: void proto_reg_handoff_vlan(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: static dissector_handle_t vlan_handle;",
          "48: static dissector_handle_t ethertype_handle;",
          "50: static header_field_info *hfi_vlan = NULL;",
          "52: #define VLAN_HFI_INIT HFI_INIT(proto_vlan)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: static int proto_vlan;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102: static gint ett_vlan = -1;",
          "104: static expert_field ei_vlan_len = EI_INIT;",
          "106: static gboolean",
          "107: capture_vlan(const guchar *pd, int offset, int len, capture_packet_info_t *cpinfo, const union wtap_pseudo_header *pseudo_header _U_ ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: static expert_field ei_vlan_too_many_tags = EI_INIT;",
          "110: #define VLAN_MAX_NESTED_TAGS 10",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:   gboolean is_802_2;",
          "148:   proto_tree *vlan_tree;",
          "149:   proto_item *item;",
          "151:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"VLAN\");",
          "152:   col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   guint vlan_nested_count;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:   vlan_tree = NULL;",
          "165:   if (tree) {",
          "168:     if (vlan_summary_in_tree) {",
          "169:         proto_item_append_text(ti, \", PRI: %u, CFI: %u, ID: %u\",",
          "",
          "[Removed Lines]",
          "166:     ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
          "",
          "[Added Lines]",
          "172:   ti = proto_tree_add_item(tree, hfi_vlan, tvb, 0, 4, ENC_NA);",
          "173:   vlan_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_vlan, 0));",
          "174:   if (++vlan_nested_count > VLAN_MAX_NESTED_TAGS) {",
          "175:     expert_add_info(pinfo, ti, &ei_vlan_too_many_tags);",
          "176:     return tvb_captured_length(tvb);",
          "177:   }",
          "178:   p_add_proto_data(pinfo->pool, pinfo, proto_vlan, 0, GUINT_TO_POINTER(vlan_nested_count));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:   static ei_register_info ei[] = {",
          "243:      { &ei_vlan_len, { \"vlan.len.past_end\", PI_MALFORMED, PI_ERROR, \"Length field value goes past the end of the payload\", EXPFILL }},",
          "244:   };",
          "246:   module_t *vlan_module;",
          "247:   expert_module_t* expert_vlan;",
          "250:   proto_vlan = proto_register_protocol(\"802.1Q Virtual LAN\", \"VLAN\", \"vlan\");",
          "251:   hfi_vlan = proto_registrar_get_nth(proto_vlan);",
          "",
          "[Removed Lines]",
          "248:   int proto_vlan;",
          "",
          "[Added Lines]",
          "258:      { &ei_vlan_too_many_tags, { \"vlan.too_many_tags\", PI_UNDECODED, PI_WARN, \"Too many nested VLAN tags\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}