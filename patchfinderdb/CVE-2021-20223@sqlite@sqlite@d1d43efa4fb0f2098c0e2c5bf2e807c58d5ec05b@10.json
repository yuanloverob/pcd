{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
      "candidate_info": {
        "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/join.test"
        ],
        "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
          "3798:     isLeftJoin = 1;",
          "3801:       return 0;",
          "3802:     }",
          "3803:   }",
          "",
          "[Removed Lines]",
          "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
          "",
          "[Added Lines]",
          "3804:     ){",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
          "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
          "978: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
          "979: # Detected by Yongheng and Rui.",
          "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
          "981: # on 2017-04-18",
          "982: #",
          "983: reset_db",
          "984: do_execsql_test join-22.10 {",
          "985:   CREATE TABLE t0(a, b);",
          "986:   CREATE INDEX t0a ON t0(a);",
          "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
          "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
          "989: } {11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56c65c92cb922039fe3edb4f624a79acdcc7a5c2",
      "candidate_info": {
        "commit_hash": "56c65c92cb922039fe3edb4f624a79acdcc7a5c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56c65c92cb922039fe3edb4f624a79acdcc7a5c2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/cost.test",
          "test/index7.test"
        ],
        "message": "When the sqlite_stat1 data is missing for some indexes of a table but is present for the table itself or for other indexes in the same table, then do not let the estimated number of rows in that table get too small, as doing so can deceive the query planner into ignoring a perfectly good index.\n\nFossilOrigin-Name: 98d4262018a81a9a36dd8beb4b02ff0e75cdcbb8a121d143157ffb37b228d60d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/cost.test||test/cost.test",
          "test/index7.test||test/index7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eeb53e219551d8a05a87f1de9a7cd9af295d08a296f1f435a8509ea1252ccdcc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4049: void sqlite3DefaultRowEst(Index *pIdx){",
          "4052:   LogEst *a = pIdx->aiRowLogEst;",
          "4053:   int nCopy = MIN(ArraySize(aVal), pIdx->nKeyCol);",
          "4054:   int i;",
          "",
          "[Removed Lines]",
          "4051:   LogEst aVal[] = { 33, 32, 30, 28, 26 };",
          "",
          "[Added Lines]",
          "4051:   static const LogEst aVal[] = { 33, 32, 30, 28, 26 };",
          "4053:   LogEst x;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4062:   a[0] = pIdx->pTable->nRowLogEst;",
          "4063:   if( pIdx->pPartIdxWhere!=0 ) a[0] -= 10;  assert( 10==sqlite3LogEst(2) );",
          "4064:   if( a[0]<33 ) a[0] = 33;                  assert( 33==sqlite3LogEst(10) );",
          "",
          "[Added Lines]",
          "4070:   x = pIdx->pTable->nRowLogEst;",
          "4071:   assert( 99==sqlite3LogEst(1000) );",
          "4072:   if( x<99 ){",
          "4073:     pIdx->pTable->nRowLogEst = x = 99;",
          "4074:   }",
          "4075:   if( pIdx->pPartIdxWhere!=0 ) x -= 10;  assert( 10==sqlite3LogEst(2) );",
          "4076:   a[0] = x;",
          "",
          "---------------"
        ],
        "test/cost.test||test/cost.test": [
          "File: test/cost.test -> test/cost.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: set L [list a=? b=? c=? d=? e=? f=? g=? h=? i=? j=?]",
          "231: foreach {tn nTerm nRow} {",
          "232:   1   1 10",
          "234:   3   3  8",
          "235:   4   4  7",
          "237:   6   6  5",
          "238:   7   7  5",
          "239:   8   8  5",
          "",
          "[Removed Lines]",
          "233:   2   2  9",
          "236:   5   5  6",
          "",
          "[Added Lines]",
          "233:   2   2 10",
          "236:   5   5  7",
          "",
          "---------------"
        ],
        "test/index7.test||test/index7.test": [
          "File: test/index7.test -> test/index7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "340: } {1 1}",
          "343: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: # 2020-05-27.  tag-20200527-1.",
          "343: # Incomplete stat1 information on a table with few rows should still use the",
          "344: # index.",
          "345: reset_db",
          "346: do_execsql_test index7-8.1 {",
          "347:   CREATE TABLE t1(x INTEGER PRIMARY KEY, y);",
          "348:   CREATE INDEX t1y ON t1(y) WHERE y IS NOT NULL;",
          "349:   INSERT INTO t1(x) VALUES(1),(2);",
          "350:   ANALYZE;",
          "351:   EXPLAIN QUERY PLAN SELECT 1 FROM t1 WHERE y=5;",
          "352: } {/SEARCH TABLE t1 USING COVERING INDEX t1y/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2ec2e48435c3c945f8c77b50f9386161846531a",
      "candidate_info": {
        "commit_hash": "a2ec2e48435c3c945f8c77b50f9386161846531a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2ec2e48435c3c945f8c77b50f9386161846531a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Fix a faulty assert() statement in the stale-register detection logic. Ticket [da5a09be6dabbf42].\n\nFossilOrigin-Name: 219c296cc8cab13fa12b64c297bc4a98d8e21491309d97a031edf89ae77fce75",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 704bb9a39acbee420c1d6ac9eb1466a02dd77d3334b938bfddf235973129b5fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "975:       assert( (mFlags&MEM_Str)==0  || (pMem->n==pX->n && pMem->z==pX->z) );",
          "976:       assert( (mFlags&MEM_Blob)==0  || sqlite3BlobCompare(pMem,pX)==0 );",
          "",
          "[Added Lines]",
          "975:       assert( (mFlags&(MEM_Str|MEM_Blob))==0",
          "976:               || (pMem->n==pX->n && pMem->z==pX->z) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e6d90fe15e0c8be357008f9e5ff6afba0662c0b",
      "candidate_info": {
        "commit_hash": "5e6d90fe15e0c8be357008f9e5ff6afba0662c0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e6d90fe15e0c8be357008f9e5ff6afba0662c0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h"
        ],
        "message": "Experimental change to try to get some DELETE operations to access values using the index rather than the main table, so as to avoid unnecessary main table seeks.\n\nFossilOrigin-Name: 2f7cb6ab39e54fd6eb3a280d3022c3d4f4ed92e83af7226e63e0199a96397a6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fca8dc8b578f215a969cd899336378966156154710873e68b3d9ac5881b0ff3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5248:   VdbeModuleComment((v, \"Begin WHERE-core\"));",
          "5249:   return pWInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5249:   pWInfo->iEndWhere = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5484:       pIdx = pLevel->u.pCovidx;",
          "5485:     }",
          "5486:     if( pIdx",
          "5488:      && !db->mallocFailed",
          "5489:     ){",
          "5491:       k = pLevel->addrBody;",
          "5492: #ifdef SQLITE_DEBUG",
          "5493:       if( db->flags & SQLITE_VdbeAddopTrace ){",
          "",
          "[Removed Lines]",
          "5487:      && (pWInfo->eOnePass==ONEPASS_OFF || !HasRowid(pIdx->pTable))",
          "5490:       last = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Added Lines]",
          "5490:       if( pWInfo->eOnePass==ONEPASS_OFF || !HasRowid(pIdx->pTable) ){",
          "5491:         last = sqlite3VdbeCurrentAddr(v);",
          "5492:       }else{",
          "5493:         last = pWInfo->iEndWhere;",
          "5494:       }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ]
      }
    },
    {
      "candidate_hash": "95dca8d0cff5d7dcdcadbc964ee6243ddbb8c499",
      "candidate_info": {
        "commit_hash": "95dca8d0cff5d7dcdcadbc964ee6243ddbb8c499",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95dca8d0cff5d7dcdcadbc964ee6243ddbb8c499",
        "files": [
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5trigram.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "FTS5 does not handle tokens that contain embedded nul characters. Prevent the trigram tokenizer from returning such tokens. Fix for [2ba5930b2].\n\nFossilOrigin-Name: b1d048748c054575425a4bebf0c5d09962f9329d5ce6a978cf54e508b238584c",
        "before_after_code_files": [
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1333:     const unsigned char *zNext;",
          "1335:     READ_UTF8(zIn, zEof, iCode);",
          "1336:     zNext = zIn;",
          "1337:     if( zIn<zEof ){",
          "1338:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1339:       WRITE_UTF8(zOut, iCode);",
          "1340:       READ_UTF8(zIn, zEof, iCode);",
          "1341:     }else{",
          "1342:       break;",
          "1343:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1336:     if( iCode==0 ) break;",
          "1342:       if( iCode==0 ) break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1345:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1346:       WRITE_UTF8(zOut, iCode);",
          "1347:       READ_UTF8(zIn, zEof, iCode);",
          "1348:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1349:       WRITE_UTF8(zOut, iCode);",
          "1350:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1350:       if( iCode==0 ) break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test": [
          "File: ext/fts5/test/fts5trigram.test -> ext/fts5/test/fts5trigram.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   CREATE VIRTUAL TABLE ttt USING fts5(c, \"tokenize=trigram case_sensitive 1\");",
          "130: } {0 {}}",
          "133: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #-------------------------------------------------------------------------",
          "133: reset_db",
          "134: do_execsql_test 4.0 {",
          "135:   CREATE VIRTUAL TABLE t0 USING fts5(b, tokenize = \"trigram\");",
          "136: }",
          "137: do_execsql_test 4.1 {",
          "138:   INSERT INTO t0 VALUES (x'000b01');",
          "139: }",
          "140: do_execsql_test 4.2 {",
          "141:   INSERT INTO t0(t0) VALUES('integrity-check');",
          "142: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dd009cd7aec3598e930806907601f4f0f9b0021ea99fa6c5e29e88f1246066ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}