{
  "cve_id": "CVE-2014-9652",
  "cve_desc": "The mconvert function in softmagic.c in file before 5.21, as used in the Fileinfo component in PHP before 5.4.37, 5.5.x before 5.5.21, and 5.6.x before 5.6.5, does not properly handle a certain string-length field during a copy of a truncated version of a Pascal string, which might allow remote attackers to cause a denial of service (out-of-bounds memory access and application crash) via a crafted file.",
  "repo": "file/file",
  "patch_hash": "59e63838913eee47f5c120a6c53d4565af638158",
  "patch_info": {
    "commit_hash": "59e63838913eee47f5c120a6c53d4565af638158",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/59e63838913eee47f5c120a6c53d4565af638158",
    "files": [
      "src/softmagic.c"
    ],
    "message": "PR/398: Correctly truncate pascal strings (fixes out of bounds read of 1, 2, or 4 bytes).",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.195 2014/09/24 19:49:07 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.196 2014/11/07 15:24:14 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "964:   size_t sz = file_pstring_length_size(m);",
      "965:   char *ptr1 = p->s, *ptr2 = ptr1 + sz;",
      "966:   size_t len = file_pstring_get_length(m, ptr1);",
      "975:   }",
      "976:   while (len--)",
      "",
      "[Removed Lines]",
      "967:   if (len >= sizeof(p->s)) {",
      "974:    len = sizeof(p->s) - sz;",
      "",
      "[Added Lines]",
      "968:   if (len >= sz) {",
      "977:    len = sz;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
      "candidate_info": {
        "commit_hash": "cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/cc9e74dfeca5265ad725acc926ef0b8d2a18ee70",
        "files": [
          "src/ascmagic.c",
          "src/file.h",
          "src/funcs.c",
          "src/softmagic.c"
        ],
        "message": "count indirect recursion as recursion.",
        "before_after_code_files": [
          "src/ascmagic.c||src/ascmagic.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.86 2013/06/08 14:13:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.87 2013/09/17 15:51:22 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:       == NULL)",
          "148:    goto done;",
          "149:   if ((rv = file_softmagic(ms, utf8_buf,",
          "151:    rv = -1;",
          "152:  }",
          "",
          "[Removed Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), TEXTTEST, text)) == 0)",
          "",
          "[Added Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), 0, TEXTTEST, text)) == 0)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:     unichar **, size_t *, const char **, const char **, const char **);",
          "440: protected int file_is_tar(struct magic_set *, const unsigned char *, size_t);",
          "441: protected int file_softmagic(struct magic_set *, const unsigned char *, size_t,",
          "443: protected int file_apprentice(struct magic_set *, const char *, int);",
          "444: protected int file_magicfind(struct magic_set *, const char *, struct mlist *);",
          "445: protected uint64_t file_signextend(struct magic_set *, struct magic *,",
          "",
          "[Removed Lines]",
          "442:     int, int);",
          "",
          "[Added Lines]",
          "442:     size_t, int, int);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.65 2013/12/05 17:02:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.66 2014/01/07 03:15:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  if ((ms->flags & MAGIC_NO_CHECK_SOFT) == 0)",
          "234:       looks_text)) != 0) {",
          "235:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "236:     (void)fprintf(stderr, \"softmagic %d\\n\", m);",
          "",
          "[Removed Lines]",
          "233:   if ((m = file_softmagic(ms, ubuf, nb, BINTEST,",
          "",
          "[Added Lines]",
          "233:   if ((m = file_softmagic(ms, ubuf, nb, 0, BINTEST,",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.172 2014/01/08 22:22:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.173 2014/02/11 15:41:25 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: protected int",
          "81: file_softmagic(struct magic_set *ms, const unsigned char *buf, size_t nbytes,",
          "83: {",
          "84:  struct mlist *ml;",
          "85:  int rv, printed_something = 0, need_separator = 0;",
          "86:  for (ml = ms->mlist[0]->next; ml != ms->mlist[0]; ml = ml->next)",
          "87:   if ((rv = match(ms, ml->magic, ml->nmagic, buf, nbytes, 0, mode,",
          "89:       NULL)) != 0)",
          "90:    return rv;",
          "",
          "[Removed Lines]",
          "82:     int mode, int text)",
          "88:       text, 0, 0, &printed_something, &need_separator,",
          "",
          "[Added Lines]",
          "82:     size_t level, int mode, int text)",
          "88:       text, 0, level, &printed_something, &need_separator,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:   ms->o.buf = NULL;",
          "1748:   ms->offset = 0;",
          "1749:   rv = file_softmagic(ms, s + offset, nbytes - offset,",
          "1751:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1752:    fprintf(stderr, \"indirect @offs=%u[%d]\\n\", offset, rv);",
          "1753:   rbuf = ms->o.buf;",
          "",
          "[Removed Lines]",
          "1750:       BINTEST, text);",
          "",
          "[Added Lines]",
          "1750:       recursion_level, BINTEST, text);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de2333662c2c9841703408e0061a6abdeebff3bc",
      "candidate_info": {
        "commit_hash": "de2333662c2c9841703408e0061a6abdeebff3bc",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/de2333662c2c9841703408e0061a6abdeebff3bc",
        "files": [
          "src/softmagic.c"
        ],
        "message": "PR/479: Protect against 0-divide and offset out of bounds reads.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.217 2015/07/27 09:08:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.218 2015/09/11 17:24:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: private int mconvert(struct magic_set *, struct magic *, int);",
          "58: private int print_sep(struct magic_set *, int);",
          "59: private int handle_annotation(struct magic_set *, struct magic *);",
          "65: #define OFFSET_OOB(n, o, i) ((n) < (o) || (i) > ((n) - (o)))",
          "66: #define BE64(p) (((uint64_t)(p)->hq[0]<<56)|((uint64_t)(p)->hq[1]<<48)| \\",
          "",
          "[Removed Lines]",
          "60: private void cvt_8(union VALUETYPE *, const struct magic *);",
          "61: private void cvt_16(union VALUETYPE *, const struct magic *);",
          "62: private void cvt_32(union VALUETYPE *, const struct magic *);",
          "63: private void cvt_64(union VALUETYPE *, const struct magic *);",
          "",
          "[Added Lines]",
          "60: private int cvt_8(union VALUETYPE *, const struct magic *);",
          "61: private int cvt_16(union VALUETYPE *, const struct magic *);",
          "62: private int cvt_32(union VALUETYPE *, const struct magic *);",
          "63: private int cvt_64(union VALUETYPE *, const struct magic *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "858:    p->fld *= cast m->num_mask; \\",
          "859:    break; \\",
          "860:   case FILE_OPDIVIDE: \\",
          "861:    p->fld /= cast m->num_mask; \\",
          "862:    break; \\",
          "863:   case FILE_OPMODULO: \\",
          "864:    p->fld %= cast m->num_mask; \\",
          "865:    break; \\",
          "866:   } \\",
          "867:  if (m->mask_op & FILE_OPINVERSE) \\",
          "868:   p->fld = ~p->fld \\",
          "871: cvt_8(union VALUETYPE *p, const struct magic *m)",
          "872: {",
          "873:  DO_CVT(b, (uint8_t));",
          "874: }",
          "877: cvt_16(union VALUETYPE *p, const struct magic *m)",
          "878: {",
          "879:  DO_CVT(h, (uint16_t));",
          "880: }",
          "883: cvt_32(union VALUETYPE *p, const struct magic *m)",
          "884: {",
          "885:  DO_CVT(l, (uint32_t));",
          "886: }",
          "889: cvt_64(union VALUETYPE *p, const struct magic *m)",
          "890: {",
          "891:  DO_CVT(q, (uint64_t));",
          "892: }",
          "894: #define DO_CVT2(fld, cast) \\",
          "",
          "[Removed Lines]",
          "870: private void",
          "876: private void",
          "882: private void",
          "888: private void",
          "",
          "[Added Lines]",
          "861:    if (cast m->num_mask == 0) \\",
          "862:     return -1; \\",
          "866:    if (cast m->num_mask == 0) \\",
          "867:     return -1; \\",
          "874: private int",
          "878:  return 0;",
          "881: private int",
          "885:  return 0;",
          "888: private int",
          "892:  return 0;",
          "895: private int",
          "899:  return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "904:    p->fld *= cast m->num_mask; \\",
          "905:    break; \\",
          "906:   case FILE_OPDIVIDE: \\",
          "907:    p->fld /= cast m->num_mask; \\",
          "908:    break; \\",
          "909:   } \\",
          "912: cvt_float(union VALUETYPE *p, const struct magic *m)",
          "913: {",
          "914:  DO_CVT2(f, (float));",
          "915: }",
          "918: cvt_double(union VALUETYPE *p, const struct magic *m)",
          "919: {",
          "920:  DO_CVT2(d, (double));",
          "921: }",
          "",
          "[Removed Lines]",
          "911: private void",
          "917: private void",
          "",
          "[Added Lines]",
          "915:    if (cast m->num_mask == 0) \\",
          "916:     return -1; \\",
          "921: private int",
          "925:  return 0;",
          "928: private int",
          "932:  return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "934:  switch (type = cvt_flip(m->type, flip)) {",
          "935:  case FILE_BYTE:",
          "937:   return 1;",
          "938:  case FILE_SHORT:",
          "940:   return 1;",
          "941:  case FILE_LONG:",
          "942:  case FILE_DATE:",
          "943:  case FILE_LDATE:",
          "945:   return 1;",
          "946:  case FILE_QUAD:",
          "947:  case FILE_QDATE:",
          "948:  case FILE_QLDATE:",
          "949:  case FILE_QWDATE:",
          "951:   return 1;",
          "952:  case FILE_STRING:",
          "953:  case FILE_BESTRING16:",
          "",
          "[Removed Lines]",
          "936:   cvt_8(p, m);",
          "939:   cvt_16(p, m);",
          "944:   cvt_32(p, m);",
          "950:   cvt_64(p, m);",
          "",
          "[Added Lines]",
          "948:   if (cvt_8(p, m) == -1)",
          "949:    goto out;",
          "952:   if (cvt_16(p, m) == -1)",
          "953:    goto out;",
          "958:   if (cvt_32(p, m) == -1)",
          "959:    goto out;",
          "965:   if (cvt_64(p, m) == -1)",
          "966:    goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "979:  }",
          "980:  case FILE_BESHORT:",
          "981:   p->h = (short)BE16(p);",
          "983:   return 1;",
          "984:  case FILE_BELONG:",
          "985:  case FILE_BEDATE:",
          "986:  case FILE_BELDATE:",
          "987:   p->l = (int32_t)BE32(p);",
          "989:   return 1;",
          "990:  case FILE_BEQUAD:",
          "991:  case FILE_BEQDATE:",
          "992:  case FILE_BEQLDATE:",
          "993:  case FILE_BEQWDATE:",
          "994:   p->q = (uint64_t)BE64(p);",
          "996:   return 1;",
          "997:  case FILE_LESHORT:",
          "998:   p->h = (short)LE16(p);",
          "1000:   return 1;",
          "1001:  case FILE_LELONG:",
          "1002:  case FILE_LEDATE:",
          "1003:  case FILE_LELDATE:",
          "1004:   p->l = (int32_t)LE32(p);",
          "1006:   return 1;",
          "1007:  case FILE_LEQUAD:",
          "1008:  case FILE_LEQDATE:",
          "1009:  case FILE_LEQLDATE:",
          "1010:  case FILE_LEQWDATE:",
          "1011:   p->q = (uint64_t)LE64(p);",
          "1013:   return 1;",
          "1014:  case FILE_MELONG:",
          "1015:  case FILE_MEDATE:",
          "1016:  case FILE_MELDATE:",
          "1017:   p->l = (int32_t)ME32(p);",
          "1019:   return 1;",
          "1020:  case FILE_FLOAT:",
          "1022:   return 1;",
          "1023:  case FILE_BEFLOAT:",
          "1024:   p->l = BE32(p);",
          "1026:   return 1;",
          "1027:  case FILE_LEFLOAT:",
          "1028:   p->l = LE32(p);",
          "1030:   return 1;",
          "1031:  case FILE_DOUBLE:",
          "1033:   return 1;",
          "1034:  case FILE_BEDOUBLE:",
          "1035:   p->q = BE64(p);",
          "1037:   return 1;",
          "1038:  case FILE_LEDOUBLE:",
          "1039:   p->q = LE64(p);",
          "1041:   return 1;",
          "1042:  case FILE_REGEX:",
          "1043:  case FILE_SEARCH:",
          "",
          "[Removed Lines]",
          "982:   cvt_16(p, m);",
          "988:   cvt_32(p, m);",
          "995:   cvt_64(p, m);",
          "999:   cvt_16(p, m);",
          "1005:   cvt_32(p, m);",
          "1012:   cvt_64(p, m);",
          "1018:   cvt_32(p, m);",
          "1021:   cvt_float(p, m);",
          "1025:   cvt_float(p, m);",
          "1029:   cvt_float(p, m);",
          "1032:   cvt_double(p, m);",
          "1036:   cvt_double(p, m);",
          "1040:   cvt_double(p, m);",
          "",
          "[Added Lines]",
          "998:   if (cvt_16(p, m) == -1)",
          "999:    goto out;",
          "1005:   if (cvt_32(p, m) == -1)",
          "1006:    goto out;",
          "1013:   if (cvt_64(p, m) == -1)",
          "1014:    goto out;",
          "1018:   if (cvt_16(p, m) == -1)",
          "1019:    goto out;",
          "1025:   if (cvt_32(p, m) == -1)",
          "1026:    goto out;",
          "1033:   if (cvt_64(p, m) == -1)",
          "1034:    goto out;",
          "1040:   if (cvt_32(p, m) == -1)",
          "1041:    goto out;",
          "1044:   if (cvt_float(p, m) == -1)",
          "1045:    goto out;",
          "1049:   if (cvt_float(p, m) == -1)",
          "1050:    goto out;",
          "1054:   if (cvt_float(p, m) == -1)",
          "1055:    goto out;",
          "1058:   if (cvt_double(p, m) == -1)",
          "1059:    goto out;",
          "1063:   if (cvt_double(p, m) == -1)",
          "1064:    goto out;",
          "1068:   if (cvt_double(p, m) == -1)",
          "1069:    goto out;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1050:   file_magerror(ms, \"invalid type %d in mconvert()\", m->type);",
          "1051:   return 0;",
          "1052:  }",
          "1053: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082: out:",
          "1083:  file_magerror(ms, \"zerodivide in mconvert()\");",
          "1084:  return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1066: mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,",
          "1067:     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)",
          "1068: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:  if (offset >= nbytes) {",
          "1102:   file_magerror(ms,",
          "1103:       \"offset in magic %u greater than buffer size %zu\",",
          "1104:       offset, nbytes);",
          "1105:   return -1;",
          "1106:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1230:   if (m->in_op & FILE_OPINDIRECT) {",
          "1231:    const union VALUETYPE *q = CAST(const union VALUETYPE *,",
          "1232:        ((const void *)(s + offset + off)));",
          "1233:    switch (cvt_flip(m->in_type, flip)) {",
          "1234:    case FILE_BYTE:",
          "1235:     off = q->b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:    if (OFFSET_OOB(offset + off, nbytes, sizeof(*q)))",
          "1272:     return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
      "candidate_info": {
        "commit_hash": "4a284c89d6ef11aca34da65da7d673050a5ea320",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4a284c89d6ef11aca34da65da7d673050a5ea320",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/android",
          "magic/Magdir/fortran",
          "magic/Magdir/graphviz",
          "magic/Magdir/marc21",
          "magic/Magdir/scientific",
          "magic/Magdir/troff",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "* Enforce limit of 8K on regex searches that have no limits * Allow the l modifier for regex to mean line count. Default   to byte count. If line count is specified, assume a max   of 80 characters per line to limit the byte count. * Don't allow conversions to be used for dates, allowing   the mask field to be used as an offset. * Bump the version of the magic format so that regex changes   are visible.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.209 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.210 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1382:  if ((ms->flags & MAGIC_CHECK) == 0)",
          "1383:   return 0;",
          "1386:   file_magwarn(ms,",
          "1387:       \"'/BHhLl' modifiers are only allowed for pascal strings\\n\");",
          "1388:   return -1;",
          "",
          "[Removed Lines]",
          "1385:  if (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0) {",
          "",
          "[Added Lines]",
          "1385:  if ((m->type != FILE_REGEX || (m->str_flags & REGEX_LINE_COUNT) == 0) &&",
          "1386:      (m->type != FILE_PSTRING && (m->str_flags & PSTRING_LEN) != 0)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1875:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1876:      break;",
          "1877:     case CHAR_PSTRING_4_LE:",
          "1879:       goto bad;",
          "1880:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1881:      break;",
          "1882:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "",
          "[Removed Lines]",
          "1878:      if (m->type != FILE_PSTRING)",
          "",
          "[Added Lines]",
          "1879:      switch (m->type) {",
          "1880:      case FILE_PSTRING:",
          "1881:      case FILE_REGEX:",
          "1882:       break;",
          "1883:      default:",
          "1885:      }",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: #define MAGICNO  0xF11E041C",
          "137: #define FILE_MAGICSIZE 248",
          "139: #define FILE_LOAD 0",
          "",
          "[Removed Lines]",
          "136: #define VERSIONNO 11",
          "",
          "[Added Lines]",
          "136: #define VERSIONNO 12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321: #define PSTRING_2_LE    BIT(9)",
          "322: #define PSTRING_4_BE    BIT(10)",
          "323: #define PSTRING_4_LE    BIT(11)",
          "324: #define PSTRING_LEN \\",
          "325:     (PSTRING_1_BE|PSTRING_2_LE|PSTRING_2_BE|PSTRING_4_LE|PSTRING_4_BE)",
          "326: #define PSTRING_LENGTH_INCLUDES_ITSELF  BIT(12)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: #define REGEX_LINE_COUNT   BIT(11)",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: private int32_t moffset(struct magic_set *, struct magic *);",
          "58: private void mdebug(uint32_t, const char *, size_t);",
          "59: private int mcopy(struct magic_set *, union VALUETYPE *, int, int,",
          "61: private int mconvert(struct magic_set *, struct magic *, int);",
          "62: private int print_sep(struct magic_set *, int);",
          "63: private int handle_annotation(struct magic_set *, struct magic *);",
          "",
          "[Removed Lines]",
          "60:     const unsigned char *, uint32_t, size_t, size_t);",
          "",
          "[Added Lines]",
          "60:     const unsigned char *, uint32_t, size_t, struct magic *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  case FILE_LEDATE:",
          "541:  case FILE_MEDATE:",
          "542:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "544:    return -1;",
          "545:   t = ms->offset + sizeof(uint32_t);",
          "546:   break;",
          "",
          "[Removed Lines]",
          "543:       file_fmttime(p->l, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "543:       file_fmttime(p->l + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:  case FILE_LELDATE:",
          "551:  case FILE_MELDATE:",
          "552:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "554:    return -1;",
          "555:   t = ms->offset + sizeof(uint32_t);",
          "556:   break;",
          "",
          "[Removed Lines]",
          "553:       file_fmttime(p->l, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "553:       file_fmttime(p->l + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559:  case FILE_BEQDATE:",
          "560:  case FILE_LEQDATE:",
          "561:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "563:    return -1;",
          "564:   t = ms->offset + sizeof(uint64_t);",
          "565:   break;",
          "",
          "[Removed Lines]",
          "562:       file_fmttime(p->q, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "562:       file_fmttime(p->q + m->num_mask, FILE_T_LOCAL, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:  case FILE_BEQLDATE:",
          "569:  case FILE_LEQLDATE:",
          "570:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "572:    return -1;",
          "573:   t = ms->offset + sizeof(uint64_t);",
          "574:   break;",
          "",
          "[Removed Lines]",
          "571:       file_fmttime(p->q, 0, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "571:       file_fmttime(p->q + m->num_mask, 0, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "577:  case FILE_BEQWDATE:",
          "578:  case FILE_LEQWDATE:",
          "579:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "581:    return -1;",
          "582:   t = ms->offset + sizeof(uint64_t);",
          "583:   break;",
          "",
          "[Removed Lines]",
          "580:       file_fmttime(p->q, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "[Added Lines]",
          "580:       file_fmttime(p->q + m->num_mask, FILE_T_WINDOWS, tbuf)) == -1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "912: mconvert(struct magic_set *ms, struct magic *m, int flip)",
          "913: {",
          "914:  union VALUETYPE *p = &ms->ms_value;",
          "917:  case FILE_BYTE:",
          "918:   cvt_8(p, m);",
          "919:   return 1;",
          "",
          "[Removed Lines]",
          "916:  switch (cvt_flip(m->type, flip)) {",
          "",
          "[Added Lines]",
          "915:  uint8_t type;",
          "917:  switch (type = cvt_flip(m->type, flip)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "957:  case FILE_BELDATE:",
          "958:   p->l = (int32_t)",
          "959:       ((p->hl[0]<<24)|(p->hl[1]<<16)|(p->hl[2]<<8)|(p->hl[3]));",
          "961:   return 1;",
          "962:  case FILE_BEQUAD:",
          "963:  case FILE_BEQDATE:",
          "",
          "[Removed Lines]",
          "960:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "961:   if (type == FILE_BELONG)",
          "962:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "968:        ((uint64_t)p->hq[2]<<40)|((uint64_t)p->hq[3]<<32)|",
          "969:        ((uint64_t)p->hq[4]<<24)|((uint64_t)p->hq[5]<<16)|",
          "970:        ((uint64_t)p->hq[6]<<8)|((uint64_t)p->hq[7]));",
          "972:   return 1;",
          "973:  case FILE_LESHORT:",
          "974:   p->h = (short)((p->hs[1]<<8)|(p->hs[0]));",
          "",
          "[Removed Lines]",
          "971:   cvt_64(p, m);",
          "",
          "[Added Lines]",
          "973:   if (type == FILE_BEQUAD)",
          "974:    cvt_64(p, m);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "979:  case FILE_LELDATE:",
          "980:   p->l = (int32_t)",
          "981:       ((p->hl[3]<<24)|(p->hl[2]<<16)|(p->hl[1]<<8)|(p->hl[0]));",
          "983:   return 1;",
          "984:  case FILE_LEQUAD:",
          "985:  case FILE_LEQDATE:",
          "",
          "[Removed Lines]",
          "982:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "985:   if (type == FILE_LELONG)",
          "986:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "990:        ((uint64_t)p->hq[5]<<40)|((uint64_t)p->hq[4]<<32)|",
          "991:        ((uint64_t)p->hq[3]<<24)|((uint64_t)p->hq[2]<<16)|",
          "992:        ((uint64_t)p->hq[1]<<8)|((uint64_t)p->hq[0]));",
          "994:   return 1;",
          "995:  case FILE_MELONG:",
          "996:  case FILE_MEDATE:",
          "997:  case FILE_MELDATE:",
          "998:   p->l = (int32_t)",
          "999:       ((p->hl[1]<<24)|(p->hl[0]<<16)|(p->hl[3]<<8)|(p->hl[2]));",
          "1001:   return 1;",
          "1002:  case FILE_FLOAT:",
          "1003:   cvt_float(p, m);",
          "",
          "[Removed Lines]",
          "993:   cvt_64(p, m);",
          "1000:   cvt_32(p, m);",
          "",
          "[Added Lines]",
          "997:   if (type == FILE_LEQUAD)",
          "998:    cvt_64(p, m);",
          "1005:   if (type == FILE_MELONG)",
          "1006:    cvt_32(p, m);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1055: private int",
          "1056: mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,",
          "1058: {",
          "",
          "[Removed Lines]",
          "1057:     const unsigned char *s, uint32_t offset, size_t nbytes, size_t linecnt)",
          "",
          "[Added Lines]",
          "1063:     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1076:    const char *end;",
          "1079:    if (s == NULL) {",
          "1080:     ms->search.s_len = 0;",
          "1081:     ms->search.s = NULL;",
          "1082:     return 0;",
          "1083:    }",
          "1084:    buf = RCAST(const char *, s) + offset;",
          "1087:    for (lines = linecnt, b = buf; lines && b < end &&",
          "1088:         ((b = CAST(const char *,",
          "",
          "[Removed Lines]",
          "1077:    size_t lines;",
          "1085:    end = last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1083:    size_t lines, linecnt, bytecnt;",
          "1091:    if (m->str_flags & REGEX_LINE_COUNT) {",
          "1092:     linecnt = m->str_range;",
          "1093:     bytecnt = linecnt * 80;",
          "1094:    } else {",
          "1095:     linecnt = 0;",
          "1096:     bytecnt = m->str_range;",
          "1097:    }",
          "1099:    if (bytecnt == 0)",
          "1100:     bytecnt = 8192;",
          "1101:    if (bytecnt > nbytes)",
          "1102:     bytecnt = nbytes;",
          "1105:    end = last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1095:      b++;",
          "1096:    }",
          "1097:    if (lines)",
          "1100:    ms->search.s = buf;",
          "1101:    ms->search.s_len = last - buf;",
          "",
          "[Removed Lines]",
          "1098:     last = RCAST(const char *, s) + nbytes;",
          "",
          "[Added Lines]",
          "1118:     last = RCAST(const char *, s) + bytecnt;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1166:     int *need_separator, int *returnval)",
          "1167: {",
          "1168:  uint32_t soffset, offset = ms->offset;",
          "1170:  uint32_t lhs;",
          "1171:  int rv, oneed_separator, in_type;",
          "1172:  char *sbuf, *rbuf;",
          "",
          "[Removed Lines]",
          "1169:  uint32_t count = m->str_range;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1179:  }",
          "1181:  if (mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),",
          "1183:   return -1;",
          "1185:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1186:   fprintf(stderr, \"mget(type=%d, flag=%x, offset=%u, o=%zu, \"",
          "1189:   mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));",
          "1190: #ifndef COMPILE_ONLY",
          "1191:   file_mdump(m);",
          "",
          "[Removed Lines]",
          "1182:      (uint32_t)nbytes, count) == -1)",
          "1187:       \"nbytes=%zu, count=%u)\\n\", m->type, m->flag, offset, o,",
          "1188:       nbytes, count);",
          "",
          "[Added Lines]",
          "1201:      (uint32_t)nbytes, m) == -1)",
          "1206:       \"nbytes=%zu)\\n\", m->type, m->flag, offset, o, nbytes);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1550:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1551:     fprintf(stderr, \"indirect +offs=%u\\n\", offset);",
          "1552:   }",
          "1554:    return -1;",
          "1555:   ms->offset = offset;",
          "",
          "[Removed Lines]",
          "1553:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, count) == -1)",
          "",
          "[Added Lines]",
          "1571:   if (mcopy(ms, p, m->type, 0, s, offset, nbytes, m) == -1)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1906:    if (slen + idx > ms->search.s_len)",
          "1907:     break;",
          "1911:     ms->search.offset += idx;",
          "1912:     break;",
          "",
          "[Removed Lines]",
          "1909:    v = file_strncmp(m->value.s, ms->search.s + idx, slen, m->str_flags);",
          "",
          "[Added Lines]",
          "1927:    v = file_strncmp(m->value.s, ms->search.s + idx, slen,",
          "1928:        m->str_flags);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1929:    file_regerror(&rx, rc, ms);",
          "1930:    v = (uint64_t)-1;",
          "1931:   } else {",
          "1935:    regmatch_t pmatch[1];",
          "1936:    size_t slen = ms->search.s_len;",
          "1940: #ifndef REG_STARTEND",
          "1941: #define REG_STARTEND 0",
          "1942:    if (slen != 0)",
          "1943:     slen--;",
          "1944:    c = ms->search.s[slen];",
          "",
          "[Removed Lines]",
          "1932: #ifndef REG_STARTEND",
          "1933:    char c;",
          "1934: #endif",
          "1938:    if (m->str_range > 0)",
          "1939:     slen = MIN(slen, m->str_range);",
          "",
          "[Added Lines]",
          "1955:    char c;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e6b2129a45b5d5d6bf5928ffd76b99169497c9e",
      "candidate_info": {
        "commit_hash": "9e6b2129a45b5d5d6bf5928ffd76b99169497c9e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9e6b2129a45b5d5d6bf5928ffd76b99169497c9e",
        "files": [
          "src/softmagic.c"
        ],
        "message": "Move the annotation code back and add similar code to the mime code that checks if there is a string to be printed and skips otherwise.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.220 2015/09/16 22:17:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.221 2015/09/16 22:37:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:    continue;",
          "229:   }",
          "235:   if (*m->desc) {",
          "244:    if (print_sep(ms, firstline) == -1)",
          "",
          "[Removed Lines]",
          "236:    if ((e = handle_annotation(ms, m)) != 0) {",
          "240:     return e;",
          "241:    }",
          "",
          "[Added Lines]",
          "231:   if ((e = handle_annotation(ms, m)) != 0) {",
          "235:    return e;",
          "236:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:       break;",
          "319:     } else",
          "320:      ms->c.li[cont_level].got_match = 1;",
          "325:     if (*m->desc) {",
          "332:      if (!*printed_something) {",
          "334:       if (print_sep(ms, firstline)",
          "",
          "[Removed Lines]",
          "326:      if ((e = handle_annotation(ms, m)) != 0) {",
          "330:       return e;",
          "331:      }",
          "",
          "[Added Lines]",
          "323:     if ((e = handle_annotation(ms, m)) != 0) {",
          "327:      return e;",
          "328:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2160: private int",
          "2161: handle_annotation(struct magic_set *ms, struct magic *m)",
          "2162: {",
          "2164:   if (file_printf(ms, \"%.8s\", m->apple) == -1)",
          "2165:    return -1;",
          "2166:   return 1;",
          "2167:  }",
          "2169:   if (file_printf(ms, \"%s\", m->ext) == -1)",
          "2170:    return -1;",
          "2171:   return 1;",
          "",
          "[Removed Lines]",
          "2163:  if (ms->flags & MAGIC_APPLE) {",
          "2168:  if (ms->flags & MAGIC_EXTENSION) {",
          "",
          "[Added Lines]",
          "2165:  if ((ms->flags & MAGIC_APPLE) && m->apple[0]) {",
          "2170:  if ((ms->flags & MAGIC_EXTENSION) && m->ext[0]) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
      "candidate_info": {
        "commit_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "files": [
          "ChangeLog",
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "* change printable -> file_printable and use it in more places for safety * in ELF, instead of \"(uses dynamic libraries)\" when PT_INTERP   is present print the interpreter name.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     size_t *);",
          "477: protected size_t file_pstring_length_size(const struct magic *);",
          "478: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "479: #ifdef __EMX__",
          "480: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "481:     size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: protected char * file_printable(char *, size_t, const char *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.76 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: protected char *",
          "539: file_printable(char *buf, size_t bufsiz, const char *str)",
          "540: {",
          "541:  char *ptr, *eptr;",
          "542:  const unsigned char *s = (const unsigned char *)str;",
          "544:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "545:   if (isprint(*s)) {",
          "547:    continue;",
          "548:   }",
          "549:   if (ptr >= eptr + 4)",
          "550:    break;",
          "555:  }",
          "557:  return buf;",
          "558: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "493:  if (xnh_sizeof + offset > size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:    if (file_printf(ms, \", from '%.31s'\",",
          "742:     return size;",
          "",
          "[Removed Lines]",
          "741:        &nbuf[doff + 0x7c]) == -1)",
          "",
          "[Added Lines]",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  Elf32_Phdr ph32;",
          "1164:  Elf64_Phdr ph64;",
          "1165:  const char *linking_style = \"statically\";",
          "1167:  unsigned char nbuf[BUFSIZ];",
          "1168:  ssize_t bufsize;",
          "1169:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1166:  const char *shared_libraries = \"\";",
          "",
          "[Added Lines]",
          "1168:  const char *interp = \"\";",
          "1170:  char ibuf[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1181:   }",
          "1183:   off += size;",
          "1186:   switch (xph_type) {",
          "1187:   case PT_DYNAMIC:",
          "1188:    linking_style = \"dynamically\";",
          "1189:    break;",
          "1190:   case PT_INTERP:",
          "1192:    break;",
          "1193:   default:",
          "1194:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "",
          "[Removed Lines]",
          "1191:    shared_libraries = \" (uses shared libs)\";",
          "",
          "[Added Lines]",
          "1187:   bufsize = 0;",
          "1188:   align = 4;",
          "1195:   case PT_NOTE:",
          "1197:     continue;",
          "1198:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1199:        align < 4) {",
          "1200:     if (file_printf(ms,",
          "1201:         \", invalid note alignment 0x%lx\",",
          "1202:         (unsigned long)align) == -1)",
          "1203:      return -1;",
          "1204:     align = 4;",
          "1205:    }",
          "1208:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1209:        : sizeof(nbuf);",
          "1210:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1211:    if (bufsize == -1) {",
          "1212:     file_badread(ms);",
          "1213:     return -1;",
          "1214:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1202:   switch (xph_type) {",
          "1211:    }",
          "1225:    offset = 0;",
          "1226:    for (;;) {",
          "1227:     if (offset >= (size_t)bufsize)",
          "",
          "[Removed Lines]",
          "1203:   case PT_NOTE:",
          "1204:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1205:        align < 4) {",
          "1206:     if (file_printf(ms,",
          "1207:         \", invalid note alignment 0x%lx\",",
          "1208:         (unsigned long)align) == -1)",
          "1209:      return -1;",
          "1210:     align = 4;",
          "1212:    if (sh_num)",
          "1213:     break;",
          "1218:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1219:        : sizeof(nbuf);",
          "1220:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1221:    if (bufsize == -1) {",
          "1222:     file_badread(ms);",
          "1223:     return -1;",
          "1224:    }",
          "",
          "[Added Lines]",
          "1226:   case PT_INTERP:",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1237:    break;",
          "1238:   }",
          "1239:  }",
          "1241:      == -1)",
          "1243:  return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1240:  if (file_printf(ms, \", %s linked%s\", linking_style, shared_libraries)",
          "1242:      return -1;",
          "",
          "[Added Lines]",
          "1252:  if (file_printf(ms, \", %s linked\", linking_style)",
          "1254:   return -1;",
          "1255:  if (interp[0])",
          "1256:   if (file_printf(ms, \", interpreter %s\",",
          "1257:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "1258:    return -1;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.202 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: }",
          "429: private int32_t",
          "430: mprint(struct magic_set *ms, struct magic *m)",
          "431: {",
          "",
          "[Removed Lines]",
          "407: static char *",
          "408: printable(char *buf, size_t bufsiz, const char *str)",
          "409: {",
          "410:  char *ptr, *eptr;",
          "411:  const unsigned char *s = (const unsigned char *)str;",
          "413:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "414:   if (isprint(*s)) {",
          "416:    continue;",
          "417:   }",
          "418:   if (ptr >= eptr + 4)",
          "419:    break;",
          "424:  }",
          "426:  return buf;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  float vf;",
          "434:  double vd;",
          "435:  int64_t t = 0;",
          "437:  union VALUETYPE *p = &ms->ms_value;",
          "439:    switch (m->type) {",
          "",
          "[Removed Lines]",
          "436:   char buf[128], tbuf[26];",
          "",
          "[Added Lines]",
          "414:   char buf[128], tbuf[26], sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:    case FILE_BESTRING16:",
          "528:    case FILE_LESTRING16:",
          "529:   if (m->reln == '=' || m->reln == '!') {",
          "531:     return -1;",
          "532:    t = ms->offset + m->vallen;",
          "533:   }",
          "534:   else {",
          "536:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "530:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "535:    char sbuf[512];",
          "",
          "[Added Lines]",
          "508:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "509:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "510:        == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "555:    }",
          "557:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "559:     return -1;",
          "561:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "558:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "537:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:    file_oomem(ms, ms->search.rm_len);",
          "660:    return -1;",
          "661:   }",
          "663:   free(cp);",
          "665:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "662:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "641:   rval = file_printf(ms, F(ms, m, \"%s\"),",
          "642:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:  }",
          "675:  case FILE_SEARCH:",
          "677:    return -1;",
          "678:   if ((m->str_flags & REGEX_OFFSET_START))",
          "679:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "676:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}