{
  "cve_id": "CVE-2014-5355",
  "cve_desc": "MIT Kerberos 5 (aka krb5) through 1.13.1 incorrectly expects that a krb5_read_message data field is represented as a string ending with a '\\0' character, which allows remote attackers to (1) cause a denial of service (NULL pointer dereference) via a zero-byte version string or (2) cause a denial of service (out-of-bounds read) by omitting the '\\0' character, related to appl/user_user/server.c and lib/krb5/krb/recvauth.c.",
  "repo": "krb5/krb5",
  "patch_hash": "102bb6ebf20f9174130c85c3b052ae104e5073ec",
  "patch_info": {
    "commit_hash": "102bb6ebf20f9174130c85c3b052ae104e5073ec",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/102bb6ebf20f9174130c85c3b052ae104e5073ec",
    "files": [
      "src/appl/user_user/server.c",
      "src/lib/krb5/krb/recvauth.c"
    ],
    "message": "Fix krb5_read_message handling [CVE-2014-5355]\n\nIn recvauth_common, do not use strcmp against the data fields of\nkrb5_data objects populated by krb5_read_message(), as there is no\nguarantee that they are C strings.  Instead, create an expected\nkrb5_data value and use data_eq().\n\nIn the sample user-to-user server application, check that the received\nclient principal name is null-terminated before using it with printf\nand krb5_parse_name.\n\nCVE-2014-5355:\n\nIn MIT krb5, when a server process uses the krb5_recvauth function, an\nunauthenticated remote attacker can cause a NULL dereference by\nsending a zero-byte version string, or a read beyond the end of\nallocated storage by sending a non-null-terminated version string.\nThe example user-to-user server application (uuserver) is similarly\nvulnerable to a zero-length or non-null-terminated principal name\nstring.\n\nThe krb5_recvauth function reads two version strings from the client\nusing krb5_read_message(), which produces a krb5_data structure\ncontaining a length and a pointer to an octet sequence.  krb5_recvauth\nassumes that the data pointer is a valid C string and passes it to\nstrcmp() to verify the versions.  If the client sends an empty octet\nsequence, the data pointer will be NULL and strcmp() will dereference\na NULL pointer, causing the process to crash.  If the client sends a\nnon-null-terminated octet sequence, strcmp() will read beyond the end\nof the allocated storage, possibly causing the process to crash.\n\nuuserver similarly uses krb5_read_message() to read a client principal\nname, and then passes it to printf() and krb5_parse_name() without\nverifying that it is a valid C string.\n\nThe krb5_recvauth function is used by kpropd and the Kerberized\nversions of the BSD rlogin and rsh daemons.  These daemons are usually\nrun out of inetd or in a mode which forks before processing incoming\nconnections, so a process crash will generally not result in a\ncomplete denial of service.\n\nThanks to Tim Uglow for discovering this issue.\n\nCVSSv2: AV:N/AC:L/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C\n\n[tlyu@mit.edu: CVSS score]\n\nticket: 8050 (new)\ntarget_version: 1.13.1\ntags: pullup",
    "before_after_code_files": [
      "src/appl/user_user/server.c||src/appl/user_user/server.c",
      "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
    ]
  },
  "patch_diff": {
    "src/appl/user_user/server.c||src/appl/user_user/server.c": [
      "File: src/appl/user_user/server.c -> src/appl/user_user/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:     }",
      "112: #endif",
      "114:     retval = krb5_read_message(context, (krb5_pointer) &sock, &pname_data);",
      "116:         com_err (\"uu-server\", retval, \"reading pname\");",
      "117:         return 2;",
      "118:     }",
      "",
      "[Removed Lines]",
      "115:     if (retval) {",
      "",
      "[Added Lines]",
      "116:     if (retval || pname_data.length == 0 ||",
      "117:         pname_data.data[pname_data.length - 1] != '\\0') {",
      "",
      "---------------"
    ],
    "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c": [
      "File: src/lib/krb5/krb/recvauth.c -> src/lib/krb5/krb/recvauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:     krb5_rcache           rcache = 0;",
      "60:     krb5_octet            response;",
      "61:     krb5_data             null_server;",
      "62:     int                   need_error_free = 0;",
      "63:     int                   local_rcache = 0, local_authcon = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     krb5_data             d;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:         if ((retval = krb5_read_message(context, fd, &inbuf)))",
      "79:             return(retval);",
      "81:             problem = KRB5_SENDAUTH_BADAUTHVERS;",
      "82:             response = 1;",
      "83:         }",
      "",
      "[Removed Lines]",
      "80:         if (strcmp(inbuf.data, sendauth_version)) {",
      "",
      "[Added Lines]",
      "81:         d = make_data((char *)sendauth_version, strlen(sendauth_version) + 1);",
      "82:         if (!data_eq(inbuf, d)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:     if ((retval = krb5_read_message(context, fd, &inbuf)))",
      "95:         return(retval);",
      "98:             problem = KRB5_SENDAUTH_BADAPPLVERS;",
      "99:             response = 2;",
      "100:         }",
      "",
      "[Removed Lines]",
      "96:     if (appl_version && strcmp(inbuf.data, appl_version)) {",
      "97:         if (!problem) {",
      "",
      "[Added Lines]",
      "98:     if (appl_version != NULL && !problem) {",
      "99:         d = make_data(appl_version, strlen(appl_version) + 1);",
      "100:         if (!data_eq(inbuf, d)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "88a0d9cb69d9e9a4442e66e536ac7346e06b0021",
      "candidate_info": {
        "commit_hash": "88a0d9cb69d9e9a4442e66e536ac7346e06b0021",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/88a0d9cb69d9e9a4442e66e536ac7346e06b0021",
        "files": [
          "src/appl/user_user/server.c",
          "src/lib/krb5/krb/recvauth.c"
        ],
        "message": "Fix krb5_read_message handling [CVE-2014-5355]\n\nIn recvauth_common, do not use strcmp against the data fields of\nkrb5_data objects populated by krb5_read_message(), as there is no\nguarantee that they are C strings.  Instead, create an expected\nkrb5_data value and use data_eq().\n\nIn the sample user-to-user server application, check that the received\nclient principal name is null-terminated before using it with printf\nand krb5_parse_name.\n\nCVE-2014-5355:\n\nIn MIT krb5, when a server process uses the krb5_recvauth function, an\nunauthenticated remote attacker can cause a NULL dereference by\nsending a zero-byte version string, or a read beyond the end of\nallocated storage by sending a non-null-terminated version string.\nThe example user-to-user server application (uuserver) is similarly\nvulnerable to a zero-length or non-null-terminated principal name\nstring.\n\nThe krb5_recvauth function reads two version strings from the client\nusing krb5_read_message(), which produces a krb5_data structure\ncontaining a length and a pointer to an octet sequence.  krb5_recvauth\nassumes that the data pointer is a valid C string and passes it to\nstrcmp() to verify the versions.  If the client sends an empty octet\nsequence, the data pointer will be NULL and strcmp() will dereference\na NULL pointer, causing the process to crash.  If the client sends a\nnon-null-terminated octet sequence, strcmp() will read beyond the end\nof the allocated storage, possibly causing the process to crash.\n\nuuserver similarly uses krb5_read_message() to read a client principal\nname, and then passes it to printf() and krb5_parse_name() without\nverifying that it is a valid C string.\n\nThe krb5_recvauth function is used by kpropd and the Kerberized\nversions of the BSD rlogin and rsh daemons.  These daemons are usually\nrun out of inetd or in a mode which forks before processing incoming\nconnections, so a process crash will generally not result in a\ncomplete denial of service.\n\nThanks to Tim Uglow for discovering this issue.\n\nCVSSv2: AV:N/AC:L/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C\n\n[tlyu@mit.edu: CVSS score]\n\n(cherry picked from commit 102bb6ebf20f9174130c85c3b052ae104e5073ec)\n(cherry picked from commit 21e4e653d8258d525f4b6ca87797d42a8bccc282)\n\nticket: 8180 (new)\nversion_fixed: 1.12.4\nstatus: resolved",
        "before_after_code_files": [
          "src/appl/user_user/server.c||src/appl/user_user/server.c",
          "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/appl/user_user/server.c||src/appl/user_user/server.c",
            "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
          ],
          "candidate": [
            "src/appl/user_user/server.c||src/appl/user_user/server.c",
            "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/appl/user_user/server.c||src/appl/user_user/server.c": [
          "File: src/appl/user_user/server.c -> src/appl/user_user/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     }",
          "114: #endif",
          "116:     retval = krb5_read_message(context, (krb5_pointer) &sock, &pname_data);",
          "118:         com_err (\"uu-server\", retval, \"reading pname\");",
          "119:         return 2;",
          "120:     }",
          "",
          "[Removed Lines]",
          "117:     if (retval) {",
          "",
          "[Added Lines]",
          "118:     if (retval || pname_data.length == 0 ||",
          "119:         pname_data.data[pname_data.length - 1] != '\\0') {",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c": [
          "File: src/lib/krb5/krb/recvauth.c -> src/lib/krb5/krb/recvauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     krb5_rcache           rcache = 0;",
          "60:     krb5_octet            response;",
          "61:     krb5_data             null_server;",
          "62:     int                   need_error_free = 0;",
          "63:     int                   local_rcache = 0, local_authcon = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     krb5_data             d;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         if ((retval = krb5_read_message(context, fd, &inbuf)))",
          "79:             return(retval);",
          "81:             problem = KRB5_SENDAUTH_BADAUTHVERS;",
          "82:             response = 1;",
          "83:         }",
          "",
          "[Removed Lines]",
          "80:         if (strcmp(inbuf.data, sendauth_version)) {",
          "",
          "[Added Lines]",
          "81:         d = make_data((char *)sendauth_version, strlen(sendauth_version) + 1);",
          "82:         if (!data_eq(inbuf, d)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     if ((retval = krb5_read_message(context, fd, &inbuf)))",
          "95:         return(retval);",
          "98:             problem = KRB5_SENDAUTH_BADAPPLVERS;",
          "99:             response = 2;",
          "100:         }",
          "",
          "[Removed Lines]",
          "96:     if (appl_version && strcmp(inbuf.data, appl_version)) {",
          "97:         if (!problem) {",
          "",
          "[Added Lines]",
          "98:     if (appl_version != NULL && !problem) {",
          "99:         d = make_data(appl_version, strlen(appl_version) + 1);",
          "100:         if (!data_eq(inbuf, d)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21e4e653d8258d525f4b6ca87797d42a8bccc282",
      "candidate_info": {
        "commit_hash": "21e4e653d8258d525f4b6ca87797d42a8bccc282",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/21e4e653d8258d525f4b6ca87797d42a8bccc282",
        "files": [
          "src/appl/user_user/server.c",
          "src/lib/krb5/krb/recvauth.c"
        ],
        "message": "Fix krb5_read_message handling [CVE-2014-5355]\n\nIn recvauth_common, do not use strcmp against the data fields of\nkrb5_data objects populated by krb5_read_message(), as there is no\nguarantee that they are C strings.  Instead, create an expected\nkrb5_data value and use data_eq().\n\nIn the sample user-to-user server application, check that the received\nclient principal name is null-terminated before using it with printf\nand krb5_parse_name.\n\nCVE-2014-5355:\n\nIn MIT krb5, when a server process uses the krb5_recvauth function, an\nunauthenticated remote attacker can cause a NULL dereference by\nsending a zero-byte version string, or a read beyond the end of\nallocated storage by sending a non-null-terminated version string.\nThe example user-to-user server application (uuserver) is similarly\nvulnerable to a zero-length or non-null-terminated principal name\nstring.\n\nThe krb5_recvauth function reads two version strings from the client\nusing krb5_read_message(), which produces a krb5_data structure\ncontaining a length and a pointer to an octet sequence.  krb5_recvauth\nassumes that the data pointer is a valid C string and passes it to\nstrcmp() to verify the versions.  If the client sends an empty octet\nsequence, the data pointer will be NULL and strcmp() will dereference\na NULL pointer, causing the process to crash.  If the client sends a\nnon-null-terminated octet sequence, strcmp() will read beyond the end\nof the allocated storage, possibly causing the process to crash.\n\nuuserver similarly uses krb5_read_message() to read a client principal\nname, and then passes it to printf() and krb5_parse_name() without\nverifying that it is a valid C string.\n\nThe krb5_recvauth function is used by kpropd and the Kerberized\nversions of the BSD rlogin and rsh daemons.  These daemons are usually\nrun out of inetd or in a mode which forks before processing incoming\nconnections, so a process crash will generally not result in a\ncomplete denial of service.\n\nThanks to Tim Uglow for discovering this issue.\n\nCVSSv2: AV:N/AC:L/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C\n\n[tlyu@mit.edu: CVSS score]\n\n(cherry picked from commit 102bb6ebf20f9174130c85c3b052ae104e5073ec)\n\nticket: 8050\nversion_fixed: 1.13.2\nstatus: resolved",
        "before_after_code_files": [
          "src/appl/user_user/server.c||src/appl/user_user/server.c",
          "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/appl/user_user/server.c||src/appl/user_user/server.c",
            "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
          ],
          "candidate": [
            "src/appl/user_user/server.c||src/appl/user_user/server.c",
            "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/appl/user_user/server.c||src/appl/user_user/server.c": [
          "File: src/appl/user_user/server.c -> src/appl/user_user/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     }",
          "112: #endif",
          "114:     retval = krb5_read_message(context, (krb5_pointer) &sock, &pname_data);",
          "116:         com_err (\"uu-server\", retval, \"reading pname\");",
          "117:         return 2;",
          "118:     }",
          "",
          "[Removed Lines]",
          "115:     if (retval) {",
          "",
          "[Added Lines]",
          "116:     if (retval || pname_data.length == 0 ||",
          "117:         pname_data.data[pname_data.length - 1] != '\\0') {",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/recvauth.c||src/lib/krb5/krb/recvauth.c": [
          "File: src/lib/krb5/krb/recvauth.c -> src/lib/krb5/krb/recvauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     krb5_rcache           rcache = 0;",
          "60:     krb5_octet            response;",
          "61:     krb5_data             null_server;",
          "62:     int                   need_error_free = 0;",
          "63:     int                   local_rcache = 0, local_authcon = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     krb5_data             d;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         if ((retval = krb5_read_message(context, fd, &inbuf)))",
          "79:             return(retval);",
          "81:             problem = KRB5_SENDAUTH_BADAUTHVERS;",
          "82:             response = 1;",
          "83:         }",
          "",
          "[Removed Lines]",
          "80:         if (strcmp(inbuf.data, sendauth_version)) {",
          "",
          "[Added Lines]",
          "81:         d = make_data((char *)sendauth_version, strlen(sendauth_version) + 1);",
          "82:         if (!data_eq(inbuf, d)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     if ((retval = krb5_read_message(context, fd, &inbuf)))",
          "95:         return(retval);",
          "98:             problem = KRB5_SENDAUTH_BADAPPLVERS;",
          "99:             response = 2;",
          "100:         }",
          "",
          "[Removed Lines]",
          "96:     if (appl_version && strcmp(inbuf.data, appl_version)) {",
          "97:         if (!problem) {",
          "",
          "[Added Lines]",
          "98:     if (appl_version != NULL && !problem) {",
          "99:         d = make_data(appl_version, strlen(appl_version) + 1);",
          "100:         if (!data_eq(inbuf, d)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}