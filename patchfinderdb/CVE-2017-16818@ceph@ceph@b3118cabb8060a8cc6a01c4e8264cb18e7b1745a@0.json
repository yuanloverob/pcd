{
  "cve_id": "CVE-2017-16818",
  "cve_desc": "RADOS Gateway in Ceph 12.1.0 through 12.2.1 allows remote authenticated users to cause a denial of service (assertion failure and application exit) by leveraging \"full\" (not necessarily admin) privileges to post an invalid profile to the admin API, related to rgw/rgw_iam_policy.cc, rgw/rgw_basic_types.h, and rgw/rgw_iam_types.h.",
  "repo": "ceph/ceph",
  "patch_hash": "b3118cabb8060a8cc6a01c4e8264cb18e7b1745a",
  "patch_info": {
    "commit_hash": "b3118cabb8060a8cc6a01c4e8264cb18e7b1745a",
    "repo": "ceph/ceph",
    "commit_url": "https://github.com/ceph/ceph/commit/b3118cabb8060a8cc6a01c4e8264cb18e7b1745a",
    "files": [
      "src/rgw/rgw_basic_types.h",
      "src/rgw/rgw_iam_policy.cc",
      "src/rgw/rgw_iam_policy.h"
    ],
    "message": "rgw: Remove assertions in IAM Policy\n\nA couple of them could be triggered by user input.\n\nSigned-off-by: Adam C. Emerson <aemerson@redhat.com>",
    "before_after_code_files": [
      "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
      "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
      "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
    ]
  },
  "patch_diff": {
    "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h": [
      "File: src/rgw/rgw_basic_types.h -> src/rgw/rgw_basic_types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "160:   }",
      "162:   const std::string& get_tenant() const {",
      "164:     return u.tenant;",
      "165:   }",
      "167:   const std::string& get_id() const {",
      "169:     return u.id;",
      "170:   }",
      "",
      "[Removed Lines]",
      "163:     ceph_assert(t != Wildcard);",
      "168:     ceph_assert(t != Wildcard && t != Tenant);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc": [
      "File: src/rgw/rgw_iam_policy.cc -> src/rgw/rgw_iam_policy.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "221:   if ((s == \"*\") && wildcards) {",
      "222:     return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");",
      "223:   } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {",
      "226:     ARN a;",
      "227:     {",
      "",
      "[Removed Lines]",
      "224:     ceph_assert(match.size() == 6);",
      "",
      "[Added Lines]",
      "224:     if (match.size() != 6) {",
      "225:       return boost::none;",
      "226:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "771:      ECMAScript | optimize);",
      "772:     smatch match;",
      "773:     if (regex_match(a->resource, match, rx)) {",
      "776:       if (match[1] == \"user\") {",
      "777:  return Principal::user(std::move(a->account),",
      "",
      "[Removed Lines]",
      "774:       ceph_assert(match.size() == 3);",
      "",
      "[Added Lines]",
      "776:       if (match.size() != 3) {",
      "777:  return boost::none;",
      "778:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "845:   } else if (w->kind == TokenKind::princ_type) {",
      "847:     auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?",
      "848:       t->princ : t->noprinc;",
      "",
      "[Removed Lines]",
      "846:     ceph_assert(pp->s.size() > 1);",
      "",
      "[Added Lines]",
      "850:     if (pp->s.size() <= 1) {",
      "851:       return false;",
      "852:     }",
      "",
      "---------------"
    ],
    "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h": [
      "File: src/rgw/rgw_iam_policy.h -> src/rgw/rgw_iam_policy.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #include \"rgw_iam_policy_keywords.h\"",
      "30: #include \"rgw_string.h\"",
      "34: class RGWRados;",
      "35: namespace rgw {",
      "36: namespace auth {",
      "",
      "[Removed Lines]",
      "32: #include \"include/assert.h\" // razzin' frazzin' ...grrr.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "254: inline bool operator ==(const MaskedIP& l, const MaskedIP& r) {",
      "255:   auto shift = std::max((l.v6 ? 128 : 32) - l.prefix,",
      "256:    (r.v6 ? 128 : 32) - r.prefix);",
      "258:   return (l.addr >> shift) == (r.addr >> shift);",
      "259: }",
      "",
      "[Removed Lines]",
      "257:   ceph_assert(shift > 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8452d28ae0e4b59e85f93cee320a39a0ca655020",
      "candidate_info": {
        "commit_hash": "8452d28ae0e4b59e85f93cee320a39a0ca655020",
        "repo": "ceph/ceph",
        "commit_url": "https://github.com/ceph/ceph/commit/8452d28ae0e4b59e85f93cee320a39a0ca655020",
        "files": [
          "src/rgw/rgw_basic_types.h",
          "src/rgw/rgw_iam_policy.cc",
          "src/rgw/rgw_iam_policy.h"
        ],
        "message": "rgw: Remove assertions in IAM Policy\n\nA couple of them could be triggered by user input.\n\nSigned-off-by: Adam C. Emerson <aemerson@redhat.com>\n(cherry picked from commit b3118cabb8060a8cc6a01c4e8264cb18e7b1745a)",
        "before_after_code_files": [
          "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
          "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
          "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
            "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
          ],
          "candidate": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
            "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
          ]
        }
      },
      "candidate_diff": {
        "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h": [
          "File: src/rgw/rgw_basic_types.h -> src/rgw/rgw_basic_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   }",
          "162:   const std::string& get_tenant() const {",
          "164:     return u.tenant;",
          "165:   }",
          "167:   const std::string& get_id() const {",
          "169:     return u.id;",
          "170:   }",
          "",
          "[Removed Lines]",
          "163:     ceph_assert(t != Wildcard);",
          "168:     ceph_assert(t != Wildcard && t != Tenant);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc": [
          "File: src/rgw/rgw_iam_policy.cc -> src/rgw/rgw_iam_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   if ((s == \"*\") && wildcards) {",
          "222:     return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");",
          "223:   } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {",
          "226:     ARN a;",
          "227:     {",
          "",
          "[Removed Lines]",
          "224:     ceph_assert(match.size() == 6);",
          "",
          "[Added Lines]",
          "224:     if (match.size() != 6) {",
          "225:       return boost::none;",
          "226:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:      ECMAScript | optimize);",
          "772:     smatch match;",
          "773:     if (regex_match(a->resource, match, rx)) {",
          "776:       if (match[1] == \"user\") {",
          "777:  return Principal::user(std::move(a->account),",
          "",
          "[Removed Lines]",
          "774:       ceph_assert(match.size() == 3);",
          "",
          "[Added Lines]",
          "776:       if (match.size() != 3) {",
          "777:  return boost::none;",
          "778:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841:   } else if (w->kind == TokenKind::princ_type) {",
          "843:     auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?",
          "844:       t->princ : t->noprinc;",
          "",
          "[Removed Lines]",
          "842:     ceph_assert(pp->s.size() > 1);",
          "",
          "[Added Lines]",
          "846:     if (pp->s.size() <= 1) {",
          "847:       return false;",
          "848:     }",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h": [
          "File: src/rgw/rgw_iam_policy.h -> src/rgw/rgw_iam_policy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"rgw_iam_policy_keywords.h\"",
          "30: #include \"rgw_string.h\"",
          "34: class RGWRados;",
          "35: namespace rgw {",
          "36: namespace auth {",
          "",
          "[Removed Lines]",
          "32: #include \"include/assert.h\" // razzin' frazzin' ...grrr.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254: inline bool operator ==(const MaskedIP& l, const MaskedIP& r) {",
          "255:   auto shift = std::max((l.v6 ? 128 : 32) - l.prefix,",
          "256:    (r.v6 ? 128 : 32) - r.prefix);",
          "258:   return (l.addr >> shift) == (r.addr >> shift);",
          "259: }",
          "",
          "[Removed Lines]",
          "257:   ceph_assert(shift > 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d2b7e8e3113daf40fd56d8258294d45b854ca55",
      "candidate_info": {
        "commit_hash": "7d2b7e8e3113daf40fd56d8258294d45b854ca55",
        "repo": "ceph/ceph",
        "commit_url": "https://github.com/ceph/ceph/commit/7d2b7e8e3113daf40fd56d8258294d45b854ca55",
        "files": [
          "src/rgw/rgw_basic_types.h",
          "src/rgw/rgw_iam_policy.cc",
          "src/rgw/rgw_iam_policy.h"
        ],
        "message": "rgw: Remove assertions in IAM Policy\n\nA couple of them could be triggered by user input.\n\nSigned-off-by: Adam C. Emerson <aemerson@redhat.com>\n(cherry picked from commit b3118cabb8060a8cc6a01c4e8264cb18e7b1745a)",
        "before_after_code_files": [
          "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
          "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
          "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
            "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
          ],
          "candidate": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
            "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
          ]
        }
      },
      "candidate_diff": {
        "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h": [
          "File: src/rgw/rgw_basic_types.h -> src/rgw/rgw_basic_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   }",
          "162:   const std::string& get_tenant() const {",
          "164:     return u.tenant;",
          "165:   }",
          "167:   const std::string& get_id() const {",
          "169:     return u.id;",
          "170:   }",
          "",
          "[Removed Lines]",
          "163:     ceph_assert(t != Wildcard);",
          "168:     ceph_assert(t != Wildcard && t != Tenant);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc": [
          "File: src/rgw/rgw_iam_policy.cc -> src/rgw/rgw_iam_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   if ((s == \"*\") && wildcards) {",
          "222:     return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");",
          "223:   } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {",
          "226:     ARN a;",
          "227:     {",
          "",
          "[Removed Lines]",
          "224:     ceph_assert(match.size() == 6);",
          "",
          "[Added Lines]",
          "224:     if (match.size() != 6) {",
          "225:       return boost::none;",
          "226:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:      ECMAScript | optimize);",
          "772:     smatch match;",
          "773:     if (regex_match(a->resource, match, rx)) {",
          "776:       if (match[1] == \"user\") {",
          "777:  return Principal::user(std::move(a->account),",
          "",
          "[Removed Lines]",
          "774:       ceph_assert(match.size() == 3);",
          "",
          "[Added Lines]",
          "776:       if (match.size() != 3) {",
          "777:  return boost::none;",
          "778:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841:   } else if (w->kind == TokenKind::princ_type) {",
          "843:     auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?",
          "844:       t->princ : t->noprinc;",
          "",
          "[Removed Lines]",
          "842:     ceph_assert(pp->s.size() > 1);",
          "",
          "[Added Lines]",
          "846:     if (pp->s.size() <= 1) {",
          "847:       return false;",
          "848:     }",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h": [
          "File: src/rgw/rgw_iam_policy.h -> src/rgw/rgw_iam_policy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"rgw_iam_policy_keywords.h\"",
          "30: #include \"rgw_string.h\"",
          "34: class RGWRados;",
          "35: namespace rgw {",
          "36: namespace auth {",
          "",
          "[Removed Lines]",
          "32: #include \"include/assert.h\" // razzin' frazzin' ...grrr.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254: inline bool operator ==(const MaskedIP& l, const MaskedIP& r) {",
          "255:   auto shift = std::max((l.v6 ? 128 : 32) - l.prefix,",
          "256:    (r.v6 ? 128 : 32) - r.prefix);",
          "258:   return (l.addr >> shift) == (r.addr >> shift);",
          "259: }",
          "",
          "[Removed Lines]",
          "257:   ceph_assert(shift > 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69a5eebd8a45d68cd67566545d741029a4399858",
      "candidate_info": {
        "commit_hash": "69a5eebd8a45d68cd67566545d741029a4399858",
        "repo": "ceph/ceph",
        "commit_url": "https://github.com/ceph/ceph/commit/69a5eebd8a45d68cd67566545d741029a4399858",
        "files": [
          "ceph.spec.in",
          "debian/control",
          "install-deps.sh",
          "src/CMakeLists.txt",
          "src/rgw/CMakeLists.txt",
          "src/rgw/rgw_basic_types.cc",
          "src/rgw/rgw_basic_types.h",
          "src/rgw/rgw_common.cc",
          "src/rgw/rgw_common.h",
          "src/rgw/rgw_iam_policy.cc",
          "src/rgw/rgw_iam_policy.h",
          "src/rgw/rgw_iam_policy_keywords.gperf",
          "src/rgw/rgw_iam_policy_keywords.h",
          "src/test/rgw/CMakeLists.txt",
          "src/test/rgw/test_rgw_iam_policy.cc"
        ],
        "message": "rgw: Add basic support for IAM policies\n\nThis support is currently incomplete but should provide a starting\npoint.\n\nSigned-off-by: Adam C. Emerson <aemerson@redhat.com>",
        "before_after_code_files": [
          "ceph.spec.in||ceph.spec.in",
          "install-deps.sh||install-deps.sh",
          "src/rgw/rgw_basic_types.cc||src/rgw/rgw_basic_types.cc",
          "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
          "src/rgw/rgw_common.cc||src/rgw/rgw_common.cc",
          "src/rgw/rgw_common.h||src/rgw/rgw_common.h",
          "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
          "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h",
          "src/rgw/rgw_iam_policy_keywords.gperf||src/rgw/rgw_iam_policy_keywords.gperf",
          "src/rgw/rgw_iam_policy_keywords.h||src/rgw/rgw_iam_policy_keywords.h",
          "src/test/rgw/test_rgw_iam_policy.cc||src/test/rgw/test_rgw_iam_policy.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
            "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
          ],
          "candidate": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h",
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc",
            "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h"
          ]
        }
      },
      "candidate_diff": {
        "ceph.spec.in||ceph.spec.in": [
          "File: ceph.spec.in -> ceph.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: BuildRequires: /usr/share/selinux/devel/policyhelp",
          "98: %endif",
          "99: BuildRequires: bc",
          "100: BuildRequires:  cmake",
          "101: BuildRequires: cryptsetup",
          "102: BuildRequires: fuse-devel",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: BuildRequires: gperf",
          "",
          "---------------"
        ],
        "install-deps.sh||install-deps.sh": [
          "File: install-deps.sh -> install-deps.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: if [ x`uname`x = xFreeBSDx ]; then",
          "23:     $SUDO pkg install -yq \\",
          "24:         devel/git \\",
          "25:         devel/gmake \\",
          "26:         devel/cmake \\",
          "27:         devel/yasm \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:         devel/gperf \\",
          "",
          "---------------"
        ],
        "src/rgw/rgw_basic_types.cc||src/rgw/rgw_basic_types.cc": [
          "File: src/rgw/rgw_basic_types.cc -> src/rgw/rgw_basic_types.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"rgw_basic_types.h\"",
          "2: #include \"common/ceph_json.h\"",
          "4: void decode_json_obj(rgw_user& val, JSONObj *obj)",
          "5: {",
          "6:   string s = obj->get_data();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <iostream>",
          "2: #include <sstream>",
          "3: #include <string>",
          "8: using std::string;",
          "9: using std::stringstream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:   string s = val.to_str();",
          "13:   f->dump_string(name, s);",
          "14: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: namespace rgw {",
          "24: namespace auth {",
          "25: ostream& operator <<(ostream& m, const Principal& p) {",
          "26:   if (p.is_wildcard()) {",
          "27:     return m << \"*\";",
          "28:   }",
          "30:   m << \"arn:aws:iam:\" << p.get_tenant() << \":\";",
          "31:   if (p.is_tenant()) {",
          "32:     return m << \"root\";",
          "33:   }",
          "34:   return m << (p.is_user() ? \"user/\" : \"role/\") << p.get_id();",
          "35: }",
          "36: string to_string(const Principal& p) {",
          "37:   stringstream s;",
          "38:   s << p;",
          "39:   return s.str();",
          "40: }",
          "41: }",
          "42: }",
          "",
          "---------------"
        ],
        "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h": [
          "File: src/rgw/rgw_basic_types.h -> src/rgw/rgw_basic_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     return (t < o.t) || ((t == o.t) && (u < o.u));",
          "178:   }",
          "179: };",
          "180: }",
          "181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: std::ostream& operator <<(std::ostream& m, const Principal& p);",
          "182: std::string to_string(const Principal& p);",
          "",
          "---------------"
        ],
        "src/rgw/rgw_common.cc||src/rgw/rgw_common.cc": [
          "File: src/rgw/rgw_common.cc -> src/rgw/rgw_common.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1756:     string substr_pattern = pattern.substr(last_pos_pattern, cur_pos_pattern);",
          "1758:     int res;",
          "1760:       res = match_internal(substr_pattern, substr_input, &matchignorecase);",
          "1761:     } else {",
          "1762:       res = match_internal(substr_pattern, substr_input, &matchcase);",
          "",
          "[Removed Lines]",
          "1759:     if (flag & MATCH_POLICY_ACTION || flag & MATCH_POLICY_ARN) {",
          "",
          "[Added Lines]",
          "1759:     if (substr_pattern == \"*\") {",
          "1760:       res = 1;",
          "1761:     } else if (flag & MATCH_POLICY_ACTION || flag & MATCH_POLICY_ARN) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1767:     if (cur_pos_pattern == string::npos && cur_pos_input == string::npos)",
          "1768:       return 1;",
          "1769:     else if ((cur_pos_pattern == string::npos && cur_pos_input != string::npos) ||",
          "1771:       return 0;",
          "1773:     last_pos_pattern = cur_pos_pattern + 1;",
          "",
          "[Removed Lines]",
          "1770:              (cur_pos_pattern != string::npos && cur_pos_input == string::npos))",
          "",
          "[Added Lines]",
          "1772:       (cur_pos_pattern != string::npos && cur_pos_input == string::npos))",
          "",
          "---------------"
        ],
        "src/rgw/rgw_common.h||src/rgw/rgw_common.h": [
          "File: src/rgw/rgw_common.h -> src/rgw/rgw_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1349:     namespace s3 {",
          "1350:       class RGWGetPolicyV2Extractor;",
          "1351:     }",
          "1352:   }",
          "1353:   namespace io {",
          "1354:     class BasicClient;",
          "1355:   }",
          "1356: }",
          "1358: struct req_info {",
          "1359:   RGWEnv *env;",
          "1360:   RGWHTTPArgs args;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1352:     class Completer;",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc": [
          "File: src/rgw/rgw_iam_policy.cc -> src/rgw/rgw_iam_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <cstring>",
          "6: #include <regex>",
          "7: #include <sstream>",
          "8: #include <stack>",
          "9: #include <utility>",
          "11: #include \"rapidjson/reader.h\"",
          "13: #include \"rgw_auth.h\"",
          "14: #include \"rgw_iam_policy.h\"",
          "16: namespace {",
          "17: constexpr int dout_subsys = ceph_subsys_rgw;",
          "18: }",
          "20: using std::bitset;",
          "21: using std::find;",
          "22: using std::int64_t;",
          "23: using std::move;",
          "24: using std::pair;",
          "25: using std::regex;",
          "26: using std::regex_match;",
          "27: using std::size_t;",
          "28: using std::smatch;",
          "29: using std::string;",
          "30: using std::stringstream;",
          "31: using std::ostream;",
          "32: using std::uint16_t;",
          "33: using std::uint64_t;",
          "34: using std::unordered_map;",
          "36: using boost::container::flat_set;",
          "37: using boost::none;",
          "38: using boost::optional;",
          "40: using rapidjson::BaseReaderHandler;",
          "41: using rapidjson::UTF8;",
          "42: using rapidjson::SizeType;",
          "43: using rapidjson::Reader;",
          "44: using rapidjson::kParseCommentsFlag;",
          "45: using rapidjson::kParseNumbersAsStringsFlag;",
          "46: using rapidjson::StringStream;",
          "47: using rapidjson::ParseResult;",
          "49: using rgw::auth::Principal;",
          "51: namespace rgw {",
          "52: namespace IAM {",
          "53: #include \"rgw_iam_policy_keywords.frag.cc\"",
          "55: struct actpair {",
          "56:   const char* name;",
          "57:   const uint64_t bit;",
          "58: };",
          "60: namespace {",
          "61: optional<Partition> to_partition(const smatch::value_type& p,",
          "62:      bool wildcards) {",
          "63:   if (p == \"aws\") {",
          "64:     return Partition::aws;",
          "65:   } else if (p == \"aws-cn\") {",
          "66:     return Partition::aws_cn;",
          "67:   } else if (p == \"aws-us-gov\") {",
          "68:     return Partition::aws_us_gov;",
          "69:   } else if (p == \"*\" && wildcards) {",
          "70:     return Partition::wildcard;",
          "71:   } else {",
          "72:     return none;",
          "73:   }",
          "75:   ceph_abort();",
          "76: }",
          "78: optional<Service> to_service(const smatch::value_type& s,",
          "79:         bool wildcards) {",
          "80:   static const unordered_map<string, Service> services = {",
          "81:     { \"acm\", Service::acm },",
          "82:     { \"apigateway\", Service::apigateway },",
          "83:     { \"appstream\", Service::appstream },",
          "84:     { \"artifact\", Service::artifact },",
          "85:     { \"autoscaling\", Service::autoscaling },",
          "86:     { \"aws-marketplace\", Service::aws_marketplace },",
          "87:     { \"aws-marketplace-management\",",
          "88:       Service::aws_marketplace_management },",
          "89:     { \"aws-portal\", Service::aws_portal },",
          "90:     { \"cloudformation\", Service::cloudformation },",
          "91:     { \"cloudfront\", Service::cloudfront },",
          "92:     { \"cloudhsm\", Service::cloudhsm },",
          "93:     { \"cloudsearch\", Service::cloudsearch },",
          "94:     { \"cloudtrail\", Service::cloudtrail },",
          "95:     { \"cloudwatch\", Service::cloudwatch },",
          "96:     { \"codebuild\", Service::codebuild },",
          "97:     { \"codecommit\", Service::codecommit },",
          "98:     { \"codedeploy\", Service::codedeploy },",
          "99:     { \"codepipeline\", Service::codepipeline },",
          "100:     { \"cognito-identity\", Service::cognito_identity },",
          "101:     { \"cognito-idp\", Service::cognito_idp },",
          "102:     { \"cognito-sync\", Service::cognito_sync },",
          "103:     { \"config\", Service::config },",
          "104:     { \"datapipeline\", Service::datapipeline },",
          "105:     { \"devicefarm\", Service::devicefarm },",
          "106:     { \"directconnect\", Service::directconnect },",
          "107:     { \"dms\", Service::dms },",
          "108:     { \"ds\", Service::ds },",
          "109:     { \"dynamodb\", Service::dynamodb },",
          "110:     { \"ec2\", Service::ec2 },",
          "111:     { \"ecr\", Service::ecr },",
          "112:     { \"ecs\", Service::ecs },",
          "113:     { \"elasticache\", Service::elasticache },",
          "114:     { \"elasticbeanstalk\", Service::elasticbeanstalk },",
          "115:     { \"elasticfilesystem\", Service::elasticfilesystem },",
          "116:     { \"elasticloadbalancing\", Service::elasticloadbalancing },",
          "117:     { \"elasticmapreduce\", Service::elasticmapreduce },",
          "118:     { \"elastictranscoder\", Service::elastictranscoder },",
          "119:     { \"es\", Service::es },",
          "120:     { \"events\", Service::events },",
          "121:     { \"firehose\", Service::firehose },",
          "122:     { \"gamelift\", Service::gamelift },",
          "123:     { \"glacier\", Service::glacier },",
          "124:     { \"health\", Service::health },",
          "125:     { \"iam\", Service::iam },",
          "126:     { \"importexport\", Service::importexport },",
          "127:     { \"inspector\", Service::inspector },",
          "128:     { \"iot\", Service::iot },",
          "129:     { \"kinesis\", Service::kinesis },",
          "130:     { \"kinesisanalytics\", Service::kinesisanalytics },",
          "131:     { \"kms\", Service::kms },",
          "132:     { \"lambda\", Service::lambda },",
          "133:     { \"lightsail\", Service::lightsail },",
          "134:     { \"logs\", Service::logs },",
          "135:     { \"machinelearning\", Service::machinelearning },",
          "136:     { \"mobileanalytics\", Service::mobileanalytics },",
          "137:     { \"mobilehub\", Service::mobilehub },",
          "138:     { \"opsworks\", Service::opsworks },",
          "139:     { \"opsworks-cm\", Service::opsworks_cm },",
          "140:     { \"polly\", Service::polly },",
          "141:     { \"rds\", Service::rds },",
          "142:     { \"redshift\", Service::redshift },",
          "143:     { \"route53\", Service::route53 },",
          "144:     { \"route53domains\", Service::route53domains },",
          "145:     { \"s3\", Service::s3 },",
          "146:     { \"sdb\", Service::sdb },",
          "147:     { \"servicecatalog\", Service::servicecatalog },",
          "148:     { \"ses\", Service::ses },",
          "149:     { \"sns\", Service::sns },",
          "150:     { \"sqs\", Service::sqs },",
          "151:     { \"ssm\", Service::ssm },",
          "152:     { \"states\", Service::states },",
          "153:     { \"storagegateway\", Service::storagegateway },",
          "154:     { \"sts\", Service::sts },",
          "155:     { \"support\", Service::support },",
          "156:     { \"swf\", Service::swf },",
          "157:     { \"trustedadvisor\", Service::trustedadvisor },",
          "158:     { \"waf\", Service::waf },",
          "159:     { \"workmail\", Service::workmail },",
          "160:     { \"workspaces\", Service::workspaces }};",
          "162:   if (wildcards && s == \"*\") {",
          "163:     return Service::wildcard;",
          "164:   }",
          "166:   auto i = services.find(s);",
          "167:   if (i == services.end()) {",
          "168:     return none;",
          "169:   } else {",
          "170:     return i->second;",
          "171:   }",
          "172: }",
          "173: }",
          "175: ARN::ARN(const rgw_obj& o)",
          "176:   : partition(Partition::aws),",
          "177:     service(Service::s3),",
          "178:     region(),",
          "179:     account(o.bucket.tenant),",
          "180:     resource(o.bucket.name)",
          "181: {",
          "182:   resource.push_back('/');",
          "183:   resource.append(o.key.name);",
          "184: }",
          "186: ARN::ARN(const rgw_bucket& b)",
          "187:   : partition(Partition::aws),",
          "188:     service(Service::s3),",
          "189:     region(),",
          "190:     account(b.tenant),",
          "191:     resource(b.name) { }",
          "193: ARN::ARN(const rgw_bucket& b, const string& o)",
          "194:   : partition(Partition::aws),",
          "195:     service(Service::s3),",
          "196:     region(),",
          "197:     account(b.tenant),",
          "198:     resource(b.name) {",
          "199:   resource.push_back('/');",
          "200:   resource.append(o);",
          "201: }",
          "203: optional<ARN> ARN::parse(const string& s, bool wildcards) {",
          "204:   static const regex rx_wild(\"arn:([^:]*):([^:]*):([^:]*):([^:]*):([^:]*)\",",
          "205:         std::regex_constants::ECMAScript |",
          "206:         std::regex_constants::optimize);",
          "207:   static const regex rx_no_wild(",
          "208:     \"arn:([^:*]*):([^:*]*):([^:*]*):([^:*]*):([^:*]*)\",",
          "209:     std::regex_constants::ECMAScript |",
          "210:     std::regex_constants::optimize);",
          "212:   smatch match;",
          "214:   if ((s == \"*\") && wildcards) {",
          "215:     return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");",
          "216:   } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {",
          "217:     ceph_assert(match.size() == 6);",
          "219:     ARN a;",
          "220:     {",
          "221:       auto p = to_partition(match[1], wildcards);",
          "222:       if (!p)",
          "223:  return none;",
          "225:       a.partition = *p;",
          "226:     }",
          "227:     {",
          "228:       auto s = to_service(match[2], wildcards);",
          "229:       if (!s) {",
          "230:  return none;",
          "231:       }",
          "232:       a.service = *s;",
          "233:     }",
          "235:     a.region = match[3];",
          "236:     a.account = match[4];",
          "237:     a.resource = match[5];",
          "239:     return a;",
          "240:   }",
          "241:   return none;",
          "242: }",
          "244: string ARN::to_string() const {",
          "245:   string s;",
          "247:   if (partition == Partition::aws) {",
          "248:     s.append(\"aws:\");",
          "249:   } else if (partition == Partition::aws_cn) {",
          "250:     s.append(\"aws-cn:\");",
          "251:   } else if (partition == Partition::aws_us_gov) {",
          "252:     s.append(\"aws-us-gov:\");",
          "253:   } else {",
          "254:     s.append(\"*:\");",
          "255:   }",
          "257:   static const unordered_map<Service, string> services = {",
          "258:     { Service::acm, \"acm\" },",
          "259:     { Service::apigateway, \"apigateway\" },",
          "260:     { Service::appstream, \"appstream\" },",
          "261:     { Service::artifact, \"artifact\" },",
          "262:     { Service::autoscaling, \"autoscaling\" },",
          "263:     { Service::aws_marketplace, \"aws-marketplace\" },",
          "264:     { Service::aws_marketplace_management, \"aws-marketplace-management\" },",
          "265:     { Service::aws_portal, \"aws-portal\" },",
          "266:     { Service::cloudformation, \"cloudformation\" },",
          "267:     { Service::cloudfront, \"cloudfront\" },",
          "268:     { Service::cloudhsm, \"cloudhsm\" },",
          "269:     { Service::cloudsearch, \"cloudsearch\" },",
          "270:     { Service::cloudtrail, \"cloudtrail\" },",
          "271:     { Service::cloudwatch, \"cloudwatch\" },",
          "272:     { Service::codebuild, \"codebuild\" },",
          "273:     { Service::codecommit, \"codecommit\" },",
          "274:     { Service::codedeploy, \"codedeploy\" },",
          "275:     { Service::codepipeline, \"codepipeline\" },",
          "276:     { Service::cognito_identity, \"cognito-identity\" },",
          "277:     { Service::cognito_idp, \"cognito-idp\" },",
          "278:     { Service::cognito_sync, \"cognito-sync\" },",
          "279:     { Service::config, \"config\" },",
          "280:     { Service::datapipeline, \"datapipeline\" },",
          "281:     { Service::devicefarm, \"devicefarm\" },",
          "282:     { Service::directconnect, \"directconnect\" },",
          "283:     { Service::dms, \"dms\" },",
          "284:     { Service::ds, \"ds\" },",
          "285:     { Service::dynamodb, \"dynamodb\" },",
          "286:     { Service::ec2, \"ec2\" },",
          "287:     { Service::ecr, \"ecr\" },",
          "288:     { Service::ecs, \"ecs\" },",
          "289:     { Service::elasticache, \"elasticache\" },",
          "290:     { Service::elasticbeanstalk, \"elasticbeanstalk\" },",
          "291:     { Service::elasticfilesystem, \"elasticfilesystem\" },",
          "292:     { Service::elasticloadbalancing, \"elasticloadbalancing\" },",
          "293:     { Service::elasticmapreduce, \"elasticmapreduce\" },",
          "294:     { Service::elastictranscoder, \"elastictranscoder\" },",
          "295:     { Service::es, \"es\" },",
          "296:     { Service::events, \"events\" },",
          "297:     { Service::firehose, \"firehose\" },",
          "298:     { Service::gamelift, \"gamelift\" },",
          "299:     { Service::glacier, \"glacier\" },",
          "300:     { Service::health, \"health\" },",
          "301:     { Service::iam, \"iam\" },",
          "302:     { Service::importexport, \"importexport\" },",
          "303:     { Service::inspector, \"inspector\" },",
          "304:     { Service::iot, \"iot\" },",
          "305:     { Service::kinesis, \"kinesis\" },",
          "306:     { Service::kinesisanalytics, \"kinesisanalytics\" },",
          "307:     { Service::kms, \"kms\" },",
          "308:     { Service::lambda, \"lambda\" },",
          "309:     { Service::lightsail, \"lightsail\" },",
          "310:     { Service::logs, \"logs\" },",
          "311:     { Service::machinelearning, \"machinelearning\" },",
          "312:     { Service::mobileanalytics, \"mobileanalytics\" },",
          "313:     { Service::mobilehub, \"mobilehub\" },",
          "314:     { Service::opsworks, \"opsworks\" },",
          "315:     { Service::opsworks_cm, \"opsworks-cm\" },",
          "316:     { Service::polly, \"polly\" },",
          "317:     { Service::rds, \"rds\" },",
          "318:     { Service::redshift, \"redshift\" },",
          "319:     { Service::route53, \"route53\" },",
          "320:     { Service::route53domains, \"route53domains\" },",
          "321:     { Service::s3, \"s3\" },",
          "322:     { Service::sdb, \"sdb\" },",
          "323:     { Service::servicecatalog, \"servicecatalog\" },",
          "324:     { Service::ses, \"ses\" },",
          "325:     { Service::sns, \"sns\" },",
          "326:     { Service::sqs, \"sqs\" },",
          "327:     { Service::ssm, \"ssm\" },",
          "328:     { Service::states, \"states\" },",
          "329:     { Service::storagegateway, \"storagegateway\" },",
          "330:     { Service::sts, \"sts\" },",
          "331:     { Service::support, \"support\" },",
          "332:     { Service::swf, \"swf\" },",
          "333:     { Service::trustedadvisor, \"trustedadvisor\" },",
          "334:     { Service::waf, \"waf\" },",
          "335:     { Service::workmail, \"workmail\" },",
          "336:     { Service::workspaces, \"workspaces\" }};",
          "338:   auto i = services.find(service);",
          "339:   if (i != services.end()) {",
          "340:     s.append(i->second);",
          "341:   } else {",
          "342:     s.push_back('*');",
          "343:   }",
          "344:   s.push_back(':');",
          "346:   s.append(region);",
          "347:   s.push_back(':');",
          "349:   s.append(account);",
          "350:   s.push_back(':');",
          "352:   s.append(resource);",
          "354:   return s;",
          "355: }",
          "357: bool operator ==(const ARN& l, const ARN& r) {",
          "358:   return ((l.partition == r.partition) &&",
          "359:    (l.service == r.service) &&",
          "360:    (l.region == r.region) &&",
          "361:    (l.account == r.account) &&",
          "362:    (l.resource == r.resource));",
          "363: }",
          "364: bool operator <(const ARN& l, const ARN& r) {",
          "365:   return ((l.partition < r.partition) ||",
          "366:    (l.service < r.service) ||",
          "367:    (l.region < r.region) ||",
          "368:    (l.account < r.account) ||",
          "369:    (l.resource < r.resource));",
          "370: }",
          "374: bool ARN::match(const ARN& candidate) const {",
          "375:   if ((candidate.partition == Partition::wildcard) ||",
          "376:       (partition != candidate.partition && partition",
          "377:        != Partition::wildcard)) {",
          "378:     return false;",
          "379:   }",
          "381:   if ((candidate.service == Service::wildcard) ||",
          "382:       (service != candidate.service && service != Service::wildcard)) {",
          "383:     return false;",
          "384:   }",
          "386:   if (!::match(region, candidate.region, MATCH_POLICY_ARN)) {",
          "387:     return false;",
          "388:   }",
          "390:   if (!::match(account, candidate.account, MATCH_POLICY_ARN)) {",
          "391:     return false;",
          "392:   }",
          "394:   if (!::match(resource, candidate.resource, MATCH_POLICY_ARN)) {",
          "395:     return false;",
          "396:   }",
          "398:   return true;",
          "399: }",
          "401: static const actpair actpairs[] =",
          "402: {{ \"s3:AbortMultipartUpload\", s3AbortMultipartUpload },",
          "403:  { \"s3:CreateBucket\", s3CreateBucket },",
          "404:  { \"s3:DeleteBucketPolicy\", s3DeleteBucketPolicy },",
          "405:  { \"s3:DeleteBucket\", s3DeleteBucket },",
          "406:  { \"s3:DeleteBucketWebsite\", s3DeleteBucketWebsite },",
          "407:  { \"s3:DeleteObject\", s3DeleteObject },",
          "408:  { \"s3:DeleteObjectVersion\", s3DeleteObjectVersion },",
          "409:  { \"s3:DeleteReplicationConfiguration\", s3DeleteReplicationConfiguration },",
          "410:  { \"s3:GetAccelerateConfiguration\", s3GetAccelerateConfiguration },",
          "411:  { \"s3:GetBucketAcl\", s3GetBucketAcl },",
          "412:  { \"s3:GetBucketCORS\", s3GetBucketCORS },",
          "413:  { \"s3:GetBucketLocation\", s3GetBucketLocation },",
          "414:  { \"s3:GetBucketLogging\", s3GetBucketLogging },",
          "415:  { \"s3:GetBucketNotification\", s3GetBucketNotification },",
          "416:  { \"s3:GetBucketPolicy\", s3GetBucketPolicy },",
          "417:  { \"s3:GetBucketRequestPayment\", s3GetBucketRequestPayment },",
          "418:  { \"s3:GetBucketTagging\", s3GetBucketTagging },",
          "419:  { \"s3:GetBucketVersioning\", s3GetBucketVersioning },",
          "420:  { \"s3:GetBucketWebsite\", s3GetBucketWebsite },",
          "421:  { \"s3:GetLifecycleConfiguration\", s3GetLifecycleConfiguration },",
          "422:  { \"s3:GetObjectAcl\", s3GetObjectAcl },",
          "423:  { \"s3:GetObject\", s3GetObject },",
          "424:  { \"s3:GetObjectTorrent\", s3GetObjectTorrent },",
          "425:  { \"s3:GetObjectVersionAcl\", s3GetObjectVersionAcl },",
          "426:  { \"s3:GetObjectVersion\", s3GetObjectVersion },",
          "427:  { \"s3:GetObjectVersionTorrent\", s3GetObjectVersionTorrent },",
          "428:  { \"s3:GetReplicationConfiguration\", s3GetReplicationConfiguration },",
          "429:  { \"s3:ListAllMyBuckets\", s3ListAllMyBuckets },",
          "430:  { \"s3:ListBucketMultiPartUploads\", s3ListBucketMultiPartUploads },",
          "431:  { \"s3:ListBucket\", s3ListBucket },",
          "432:  { \"s3:ListBucketVersions\", s3ListBucketVersions },",
          "433:  { \"s3:ListMultipartUploadParts\", s3ListMultipartUploadParts },",
          "434:  { \"s3:PutAccelerateConfiguration\", s3PutAccelerateConfiguration },",
          "435:  { \"s3:PutBucketAcl\", s3PutBucketAcl },",
          "436:  { \"s3:PutBucketCORS\", s3PutBucketCORS },",
          "437:  { \"s3:PutBucketLogging\", s3PutBucketLogging },",
          "438:  { \"s3:PutBucketNotification\", s3PutBucketNotification },",
          "439:  { \"s3:PutBucketPolicy\", s3PutBucketPolicy },",
          "440:  { \"s3:PutBucketRequestPayment\", s3PutBucketRequestPayment },",
          "441:  { \"s3:PutBucketTagging\", s3PutBucketTagging },",
          "442:  { \"s3:PutBucketVersioning\", s3PutBucketVersioning },",
          "443:  { \"s3:PutBucketWebsite\", s3PutBucketWebsite },",
          "444:  { \"s3:PutLifecycleConfiguration\", s3PutLifecycleConfiguration },",
          "445:  { \"s3:PutObjectAcl\",  s3PutObjectAcl },",
          "446:  { \"s3:PutObject\", s3PutObject },",
          "447:  { \"s3:PutObjectVersionAcl\", s3PutObjectVersionAcl },",
          "448:  { \"s3:PutReplicationConfiguration\", s3PutReplicationConfiguration },",
          "449:  { \"s3:RestoreObject\", s3RestoreObject }};",
          "451: struct PolicyParser;",
          "453: const Keyword top[1]{\"<Top>\", TokenKind::pseudo, TokenID::Top, 0, false,",
          "454:     false};",
          "455: const Keyword cond_key[1]{\"<Condition Key>\", TokenKind::cond_key,",
          "456:     TokenID::CondKey, 0, true, false};",
          "458: struct ParseState {",
          "459:   PolicyParser* pp;",
          "460:   const Keyword* w;",
          "462:   bool arraying = false;",
          "463:   bool objecting = false;",
          "465:   void reset();",
          "467:   ParseState(PolicyParser* pp, const Keyword* w)",
          "468:     : pp(pp), w(w) {}",
          "470:   bool obj_start();",
          "472:   bool obj_end();",
          "474:   bool array_start() {",
          "475:     if (w->arrayable && !arraying) {",
          "476:       arraying = true;",
          "477:       return true;",
          "478:     }",
          "479:     return false;",
          "480:   }",
          "482:   bool array_end();",
          "484:   bool key(const char* s, size_t l);",
          "485:   bool do_string(CephContext* cct, const char* s, size_t l);",
          "486:   bool number(const char* str, size_t l);",
          "487: };",
          "490: struct PolicyParser : public BaseReaderHandler<UTF8<>, PolicyParser> {",
          "491:   keyword_hash tokens;",
          "492:   std::vector<ParseState> s;",
          "493:   CephContext* cct;",
          "494:   const string& tenant;",
          "495:   Policy& policy;",
          "497:   uint32_t seen = 0;",
          "499:   uint32_t dex(TokenID in) const {",
          "500:     switch (in) {",
          "501:     case TokenID::Version:",
          "502:       return 0x1;",
          "503:     case TokenID::Id:",
          "504:       return 0x2;",
          "505:     case TokenID::Statement:",
          "506:       return 0x4;",
          "507:     case TokenID::Sid:",
          "508:       return 0x8;",
          "509:     case TokenID::Effect:",
          "510:       return 0x10;",
          "511:     case TokenID::Principal:",
          "512:       return 0x20;",
          "513:     case TokenID::NotPrincipal:",
          "514:       return 0x40;",
          "515:     case TokenID::Action:",
          "516:       return 0x80;",
          "517:     case TokenID::NotAction:",
          "518:       return 0x100;",
          "519:     case TokenID::Resource:",
          "520:       return 0x200;",
          "521:     case TokenID::NotResource:",
          "522:       return 0x400;",
          "523:     case TokenID::Condition:",
          "524:       return 0x800;",
          "525:     case TokenID::AWS:",
          "526:       return 0x1000;",
          "527:     case TokenID::Federated:",
          "528:       return 0x2000;",
          "529:     case TokenID::Service:",
          "530:       return 0x4000;",
          "531:     case TokenID::CanonicalUser:",
          "532:       return 0x8000;",
          "533:     default:",
          "534:       ceph_abort();",
          "535:     }",
          "536:   }",
          "537:   bool test(TokenID in) {",
          "538:     return seen & dex(in);",
          "539:   }",
          "540:   void set(TokenID in) {",
          "541:     seen |= dex(in);",
          "542:   }",
          "543:   void set(std::initializer_list<TokenID> l) {",
          "544:     for (auto in : l) {",
          "545:       seen |= dex(in);",
          "546:     }",
          "547:   }",
          "548:   void reset(TokenID in) {",
          "549:     seen &= ~dex(in);",
          "550:   }",
          "551:   void reset(std::initializer_list<TokenID> l) {",
          "552:     for (auto in : l) {",
          "553:       seen &= ~dex(in);",
          "554:     }",
          "555:   }",
          "557:   PolicyParser(CephContext* cct, const string& tenant, Policy& policy)",
          "558:     : cct(cct), tenant(tenant), policy(policy) {}",
          "559:   PolicyParser(const PolicyParser& policy) = delete;",
          "561:   bool StartObject() {",
          "562:     if (s.empty()) {",
          "563:       s.push_back({this, top});",
          "564:       s.back().objecting = true;",
          "565:       return true;",
          "566:     }",
          "568:     return s.back().obj_start();",
          "569:   }",
          "570:   bool EndObject(SizeType memberCount) {",
          "571:     if (s.empty()) {",
          "572:       return false;",
          "573:     }",
          "575:     return s.back().obj_end();",
          "576:   }",
          "577:   bool Key(const char* str, SizeType length, bool copy) {",
          "578:     if (s.empty()) {",
          "579:       return false;",
          "580:     }",
          "582:     return s.back().key(str, length);",
          "583:   }",
          "585:   bool String(const char* str, SizeType length, bool copy) {",
          "586:     if (s.empty()) {",
          "587:       return false;",
          "588:     }",
          "590:     return s.back().do_string(cct, str, length);",
          "591:   }",
          "592:   bool RawNumber(const char* str, SizeType length, bool copy) {",
          "593:     if (s.empty()) {",
          "594:       return false;",
          "595:     }",
          "597:     return s.back().number(str, length);",
          "598:   }",
          "599:   bool StartArray() {",
          "600:     if (s.empty()) {",
          "601:       return false;",
          "602:     }",
          "604:     return s.back().array_start();",
          "605:   }",
          "606:   bool EndArray(SizeType) {",
          "607:     if (s.empty()) {",
          "608:       return false;",
          "609:     }",
          "611:     return s.back().array_end();",
          "612:   }",
          "614:   bool Default() {",
          "615:     return false;",
          "616:   }",
          "617: };",
          "622: bool ParseState::obj_end() {",
          "623:   if (objecting) {",
          "624:     objecting = false;",
          "625:     if (!arraying) {",
          "626:       pp->s.pop_back();",
          "627:     } else {",
          "628:       reset();",
          "629:     }",
          "630:     return true;",
          "631:   }",
          "632:   return false;",
          "633: }",
          "635: bool ParseState::key(const char* s, size_t l) {",
          "636:   auto k = pp->tokens.lookup(s, l);",
          "638:   if (!k) {",
          "639:     if (w->kind == TokenKind::cond_op) {",
          "640:       auto& t = pp->policy.statements.back();",
          "641:       pp->s.emplace_back(pp, cond_key);",
          "642:       t.conditions.emplace_back(w->id, s, l);",
          "643:       return true;",
          "644:     } else {",
          "645:       return false;",
          "646:     }",
          "647:   }",
          "654:   if ((((w->id == TokenID::Top) && (k->kind == TokenKind::top)) ||",
          "656:        ((w->id == TokenID::Statement) && (k->kind == TokenKind::statement)) ||",
          "659:        ((w->id == TokenID::Principal || w->id == TokenID::NotPrincipal) &&",
          "660:  (k->kind == TokenKind::princ_type))) &&",
          "664:       !pp->test(k->id)) {",
          "665:     pp->set(k->id);",
          "666:     pp->s.emplace_back(pp, k);",
          "667:     return true;",
          "668:   } else if ((w->id == TokenID::Condition) &&",
          "669:       (k->kind == TokenKind::cond_op)) {",
          "670:     pp->s.emplace_back(pp, k);",
          "671:     return true;",
          "672:   }",
          "673:   return false;",
          "674: }",
          "678: static optional<Principal> parse_principal(CephContext* cct, TokenID t,",
          "679:         string&& s) {",
          "681:   if ((t == TokenID::AWS) && (s == \"*\")) {",
          "682:     return Principal::wildcard();",
          "685:   } else if (t == TokenID::CanonicalUser) {",
          "688:   } else if (t == TokenID::AWS) {",
          "689:     auto a = ARN::parse(s);",
          "690:     if (!a) {",
          "691:       if (std::none_of(s.begin(), s.end(),",
          "692:          [](const char& c) {",
          "693:     return (c == ':') || (c == '/');",
          "694:          })) {",
          "698:  return Principal::tenant(std::move(s));",
          "699:       }",
          "700:     }",
          "702:     if (a->resource == \"root\") {",
          "703:       return Principal::tenant(std::move(a->account));",
          "704:     }",
          "706:     static const regex rx(\"([^/]*)/(.*)\",",
          "707:      std::regex_constants::ECMAScript |",
          "708:      std::regex_constants::optimize);",
          "709:     smatch match;",
          "710:     if (regex_match(a->resource, match, rx)) {",
          "711:       ceph_assert(match.size() == 2);",
          "713:       if (match[1] == \"user\") {",
          "714:  return Principal::user(std::move(a->account),",
          "715:           match[2]);",
          "716:       }",
          "718:       if (match[1] == \"role\") {",
          "719:  return Principal::role(std::move(a->account),",
          "720:           match[2]);",
          "721:       }",
          "722:     }",
          "723:   }",
          "725:   ldout(cct, 0) << \"Supplied principal is discarded: \" << s << dendl;",
          "726:   return boost::none;",
          "727: }",
          "729: bool ParseState::do_string(CephContext* cct, const char* s, size_t l) {",
          "730:   auto k = pp->tokens.lookup(s, l);",
          "731:   Policy& p = pp->policy;",
          "732:   Statement* t = p.statements.empty() ? nullptr : &(p.statements.back());",
          "735:   if ((w->id == TokenID::Version) && k &&",
          "736:       k->kind == TokenKind::version_key) {",
          "737:     p.version = static_cast<Version>(k->specific);",
          "738:   } else if (w->id == TokenID::Id) {",
          "739:     p.id = string(s, l);",
          "743:   } else if (w->id == TokenID::Sid) {",
          "744:     t->sid.emplace(s, l);",
          "745:   } else if ((w->id == TokenID::Effect) &&",
          "746:       k->kind == TokenKind::effect_key) {",
          "747:     t->effect = static_cast<Effect>(k->specific);",
          "748:   } else if (w->id == TokenID::Principal && s && *s == '*') {",
          "749:     t->princ.emplace(Principal::wildcard());",
          "750:   } else if (w->id == TokenID::NotPrincipal && s && *s == '*') {",
          "751:     t->noprinc.emplace(Principal::wildcard());",
          "752:   } else if ((w->id == TokenID::Action) ||",
          "753:       (w->id == TokenID::NotAction)) {",
          "754:     for (auto& p : actpairs) {",
          "755:       if (match({s, l}, p.name, MATCH_POLICY_ACTION)) {",
          "756:  (w->id == TokenID::Action ? t->action : t->notaction) |= p.bit;",
          "757:       }",
          "758:     }",
          "759:   } else if (w->id == TokenID::Resource || w->id == TokenID::NotResource) {",
          "760:     auto a = ARN::parse({s, l}, true);",
          "762:     if (a && (a->account.empty() || a->account == pp->tenant ||",
          "763:        a->account == \"*\")) {",
          "764:       if (a->account.empty() || a->account == \"*\")",
          "765:  a->account = pp->tenant;",
          "766:       (w->id == TokenID::Resource ? t->resource : t->notresource)",
          "767:  .emplace(std::move(*a));",
          "768:     }",
          "769:     else",
          "770:       ldout(cct, 0) << \"Supplied resource is discarded: \" << string(s, l)",
          "771:       << dendl;",
          "772:   } else if (w->kind == TokenKind::cond_key) {",
          "773:     auto& t = pp->policy.statements.back();",
          "774:     t.conditions.back().vals.emplace_back(s, l);",
          "778:   } else if (w->kind == TokenKind::princ_type) {",
          "779:     ceph_assert(pp->s.size() > 1);",
          "780:     auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?",
          "781:       t->princ : t->noprinc;",
          "783:     auto o = parse_principal(pp->cct, w->id, string(s, l));",
          "784:     if (o)",
          "785:       pri.emplace(std::move(*o));",
          "789:   } else {",
          "790:     return false;",
          "791:   }",
          "793:   if (!arraying) {",
          "794:     pp->s.pop_back();",
          "795:   }",
          "797:   return true;",
          "798: }",
          "800: bool ParseState::number(const char* s, size_t l) {",
          "802:   if (w->kind == TokenKind::cond_key) {",
          "803:     auto& t = pp->policy.statements.back();",
          "804:     t.conditions.back().vals.emplace_back(s, l);",
          "808:   } else {",
          "809:     return false;",
          "810:   }",
          "812:   if (!arraying) {",
          "813:     pp->s.pop_back();",
          "814:   }",
          "816:   return true;",
          "817: }",
          "819: void ParseState::reset() {",
          "820:   pp->reset({TokenID::Sid, TokenID::Effect, TokenID::Principal,",
          "821:  TokenID::NotPrincipal, TokenID::Action, TokenID::NotAction,",
          "822:  TokenID::Resource, TokenID::NotResource, TokenID::Condition});",
          "823: }",
          "825: bool ParseState::obj_start() {",
          "826:   if (w->objectable && !objecting) {",
          "827:     objecting = true;",
          "828:     if (w->id == TokenID::Statement) {",
          "829:       pp->policy.statements.push_back({});",
          "830:     }",
          "832:     return true;",
          "833:   }",
          "835:   return false;",
          "836: }",
          "839: bool ParseState::array_end() {",
          "840:   if (arraying && !objecting) {",
          "841:     pp->s.pop_back();",
          "842:     return true;",
          "843:   }",
          "845:   return false;",
          "846: }",
          "848: ostream& operator <<(ostream& m, const MaskedIP& ip) {",
          "850:   if (ip.v6) {",
          "851:     for (int i = 15; i >= 0; --i) {",
          "852:       uint8_t b = 0;",
          "853:       for (int j = 7; j >= 0; --j) {",
          "854:  b |= (ip.addr[(i * 8) + j] << j);",
          "855:       }",
          "856:       m << hex << b;",
          "857:       if (i != 0) {",
          "858:  m << \"::\";",
          "859:       }",
          "860:     }",
          "861:   } else {",
          "863:     for (int i = 3; i >= 0; --i) {",
          "864:       uint8_t b = 0;",
          "865:       for (int j = 7; j >= 0; --j) {",
          "866:  b |= (ip.addr[(i * 8) + j] << j);",
          "867:       }",
          "868:       m << b;",
          "869:       if (i != 0) {",
          "870:  m << \".\";",
          "871:       }",
          "872:     }",
          "873:   }",
          "874:   m << \"/\" << ip.prefix;",
          "876:   return m;",
          "877: }",
          "879: string to_string(const MaskedIP& m) {",
          "880:   stringstream ss;",
          "881:   ss << m;",
          "882:   return ss.str();",
          "883: }",
          "885: bool Condition::eval(const Environment& env) const {",
          "886:   auto i = env.find(key);",
          "887:   if (op == TokenID::Null) {",
          "888:     return i == env.end() ? true : false;",
          "889:   }",
          "891:   if (i == env.end()) {",
          "892:     return false;",
          "893:   }",
          "894:   const auto& s = i->second;",
          "896:   switch (op) {",
          "898:   case TokenID::StringEquals:",
          "899:     return orrible(std::equal_to<std::string>(), s, vals);",
          "901:   case TokenID::StringNotEquals:",
          "902:     return orrible(std::not2(std::equal_to<std::string>()),",
          "903:      s, vals);",
          "905:   case TokenID::StringEqualsIgnoreCase:",
          "906:     return orrible(ci_equal_to(), s, vals);",
          "908:   case TokenID::StringNotEqualsIgnoreCase:",
          "909:     return orrible(std::not2(ci_equal_to()), s, vals);",
          "912:   case TokenID::StringLike:",
          "913:     return orrible(std::equal_to<std::string>(), s, vals);",
          "914:   case TokenID::StringNotLike:",
          "915:     return orrible(std::not2(std::equal_to<std::string>()),",
          "916:      s, vals);",
          "919:   case TokenID::NumericEquals:",
          "920:     return shortible(std::equal_to<double>(), as_number, s, vals);",
          "922:   case TokenID::NumericNotEquals:",
          "923:     return shortible(std::not2(std::equal_to<double>()),",
          "924:        as_number, s, vals);",
          "927:   case TokenID::NumericLessThan:",
          "928:     return shortible(std::less<double>(), as_number, s, vals);",
          "931:   case TokenID::NumericLessThanEquals:",
          "932:     return shortible(std::less_equal<double>(), as_number, s, vals);",
          "934:   case TokenID::NumericGreaterThan:",
          "935:     return shortible(std::greater<double>(), as_number, s, vals);",
          "937:   case TokenID::NumericGreaterThanEquals:",
          "938:     return shortible(std::greater_equal<double>(), as_number, s, vals);",
          "941:   case TokenID::DateEquals:",
          "942:     return shortible(std::equal_to<ceph::real_time>(), as_date, s, vals);",
          "944:   case TokenID::DateNotEquals:",
          "945:     return shortible(std::not2(std::equal_to<ceph::real_time>()),",
          "946:        as_date, s, vals);",
          "948:   case TokenID::DateLessThan:",
          "949:     return shortible(std::less<ceph::real_time>(), as_date, s, vals);",
          "952:   case TokenID::DateLessThanEquals:",
          "953:     return shortible(std::less_equal<ceph::real_time>(), as_date, s, vals);",
          "955:   case TokenID::DateGreaterThan:",
          "956:     return shortible(std::greater<ceph::real_time>(), as_date, s, vals);",
          "958:   case TokenID::DateGreaterThanEquals:",
          "959:     return shortible(std::greater_equal<ceph::real_time>(), as_date, s,",
          "960:        vals);",
          "963:   case TokenID::Bool:",
          "964:     return shortible(std::equal_to<bool>(), as_bool, s, vals);",
          "967:   case TokenID::BinaryEquals:",
          "968:     return shortible(std::equal_to<ceph::bufferlist>(), as_binary, s,",
          "969:        vals);",
          "972:   case TokenID::IpAddress:",
          "973:     return shortible(std::equal_to<MaskedIP>(), as_network, s, vals);",
          "975:   case TokenID::NotIpAddress:",
          "976:     return shortible(std::not2(std::equal_to<MaskedIP>()), as_network, s,",
          "977:        vals);",
          "979: #if 0",
          "981:     TokenID::ArnEquals, TokenID::ArnNotEquals, TokenID::ArnLike,",
          "982:       TokenID::ArnNotLike,",
          "983: #endif",
          "985:   default:",
          "986:     return false;",
          "987:   }",
          "988: }",
          "990: optional<MaskedIP> Condition::as_network(const string& s) {",
          "991:   MaskedIP m;",
          "992:   if (s.empty()) {",
          "993:     return none;",
          "994:   }",
          "996:   m.v6 = s.find(':');",
          "997:   auto slash = s.find('/');",
          "998:   if (slash == string::npos) {",
          "999:     m.prefix = m.v6 ? 128 : 32;",
          "1000:   } else {",
          "1001:     char* end = 0;",
          "1002:     m.prefix = strtoul(s.data() + slash + 1, &end, 10);",
          "1003:     if (*end != 0 || (m.v6 && m.prefix > 128) ||",
          "1004:  (!m.v6 && m.prefix > 32)) {",
          "1005:       return none;",
          "1006:     }",
          "1007:   }",
          "1009:   string t;",
          "1010:   auto p = &s;",
          "1012:   if (slash != string::npos) {",
          "1013:     t.assign(s, 0, slash);",
          "1014:     p = &t;",
          "1015:   }",
          "1017:   if (m.v6) {",
          "1018:     struct sockaddr_in6 a;",
          "1019:     if (inet_pton(AF_INET6, p->c_str(), static_cast<void*>(&a)) != 1) {",
          "1020:       return none;",
          "1021:     }",
          "1023:     m.addr |= Address(a.sin6_addr.s6_addr[0]) << 0;",
          "1024:     m.addr |= Address(a.sin6_addr.s6_addr[1]) << 8;",
          "1025:     m.addr |= Address(a.sin6_addr.s6_addr[2]) << 16;",
          "1026:     m.addr |= Address(a.sin6_addr.s6_addr[3]) << 24;",
          "1027:     m.addr |= Address(a.sin6_addr.s6_addr[4]) << 32;",
          "1028:     m.addr |= Address(a.sin6_addr.s6_addr[5]) << 40;",
          "1029:     m.addr |= Address(a.sin6_addr.s6_addr[6]) << 48;",
          "1030:     m.addr |= Address(a.sin6_addr.s6_addr[7]) << 56;",
          "1031:     m.addr |= Address(a.sin6_addr.s6_addr[8]) << 64;",
          "1032:     m.addr |= Address(a.sin6_addr.s6_addr[9]) << 72;",
          "1033:     m.addr |= Address(a.sin6_addr.s6_addr[10]) << 80;",
          "1034:     m.addr |= Address(a.sin6_addr.s6_addr[11]) << 88;",
          "1035:     m.addr |= Address(a.sin6_addr.s6_addr[12]) << 96;",
          "1036:     m.addr |= Address(a.sin6_addr.s6_addr[13]) << 104;",
          "1037:     m.addr |= Address(a.sin6_addr.s6_addr[14]) << 112;",
          "1038:     m.addr |= Address(a.sin6_addr.s6_addr[15]) << 120;",
          "1039:   } else {",
          "1040:     struct sockaddr_in a;",
          "1041:     if (inet_pton(AF_INET, p->c_str(), static_cast<void*>(&a)) != 1) {",
          "1042:       return none;",
          "1043:     }",
          "1044:     m.addr = ntohl(a.sin_addr.s_addr);",
          "1045:   }",
          "1047:   return none;",
          "1048: }",
          "1050: namespace {",
          "1051: const char* condop_string(const TokenID t) {",
          "1052:   switch (t) {",
          "1053:   case TokenID::StringEquals:",
          "1054:     return \"StringEquals\";",
          "1056:   case TokenID::StringNotEquals:",
          "1057:     return \"StringNotEquals\";",
          "1059:   case TokenID::StringEqualsIgnoreCase:",
          "1060:     return \"StringEqualsIgnoreCase\";",
          "1062:   case TokenID::StringNotEqualsIgnoreCase:",
          "1063:     return \"StringNotEqualsIgnoreCase\";",
          "1065:   case TokenID::StringLike:",
          "1066:     return \"StringLike\";",
          "1068:   case TokenID::StringNotLike:",
          "1069:     return \"StringNotLike\";",
          "1072:   case TokenID::NumericEquals:",
          "1073:     return \"NumericEquals\";",
          "1075:   case TokenID::NumericNotEquals:",
          "1076:     return \"NumericNotEquals\";",
          "1078:   case TokenID::NumericLessThan:",
          "1079:     return \"NumericLessThan\";",
          "1081:   case TokenID::NumericLessThanEquals:",
          "1082:     return \"NumericLessThanEquals\";",
          "1084:   case TokenID::NumericGreaterThan:",
          "1085:     return \"NumericGreaterThan\";",
          "1087:   case TokenID::NumericGreaterThanEquals:",
          "1088:     return \"NumericGreaterThanEquals\";",
          "1090:   case TokenID::DateEquals:",
          "1091:     return \"DateEquals\";",
          "1093:   case TokenID::DateNotEquals:",
          "1094:     return \"DateNotEquals\";",
          "1096:   case TokenID::DateLessThan:",
          "1097:     return \"DateLessThan\";",
          "1099:   case TokenID::DateLessThanEquals:",
          "1100:     return \"DateLessThanEquals\";",
          "1102:   case TokenID::DateGreaterThan:",
          "1103:     return \"DateGreaterThan\";",
          "1105:   case TokenID::DateGreaterThanEquals:",
          "1106:     return \"DateGreaterThanEquals\";",
          "1108:   case TokenID::Bool:",
          "1109:     return \"Bool\";",
          "1111:   case TokenID::BinaryEquals:",
          "1112:     return \"BinaryEquals\";",
          "1114:   case TokenID::IpAddress:",
          "1115:     return \"case TokenID::IpAddress\";",
          "1117:   case TokenID::NotIpAddress:",
          "1118:     return \"NotIpAddress\";",
          "1120:   case TokenID::ArnEquals:",
          "1121:     return \"ArnEquals\";",
          "1123:   case TokenID::ArnNotEquals:",
          "1124:     return \"ArnNotEquals\";",
          "1126:   case TokenID::ArnLike:",
          "1127:     return \"ArnLike\";",
          "1129:   case TokenID::ArnNotLike:",
          "1130:     return \"ArnNotLike\";",
          "1132:   case TokenID::Null:",
          "1133:     return \"Null\";",
          "1135:   default:",
          "1136:     return \"InvalidConditionOperator\";",
          "1137:   }",
          "1138: }",
          "1140: template<typename Iterator>",
          "1141: ostream& print_array(ostream& m, Iterator begin, Iterator end) {",
          "1142:   if (begin == end) {",
          "1143:     m << \"[\";",
          "1144:   } else {",
          "1145:     auto beforelast = end - 1;",
          "1146:     m << \"[ \";",
          "1147:     for (auto i = begin; i != end; ++i) {",
          "1148:       m << *i;",
          "1149:       if (i != beforelast) {",
          "1150:  m << \", \";",
          "1151:       } else {",
          "1152:  m << \" \";",
          "1153:       }",
          "1154:     }",
          "1155:   }",
          "1156:   m << \"]\";",
          "1157:   return m;",
          "1158: }",
          "1159: }",
          "1161: ostream& operator <<(ostream& m, const Condition& c) {",
          "1162:   m << \"{ \" << condop_string(c.op) << \": { \" << c.key;",
          "1163:   if (c.ifexists) {",
          "1164:     m << \"IfExists\";",
          "1165:   }",
          "1166:   print_array(m, c.vals.cbegin(), c.vals.cend());",
          "1167:   return m << \"}\";",
          "1168: }",
          "1170: string to_string(const Condition& c) {",
          "1171:   stringstream ss;",
          "1172:   ss << c;",
          "1173:   return ss.str();",
          "1174: }",
          "1176: Effect Statement::eval(const Environment& e,",
          "1177:          optional<const rgw::auth::Identity&> ida,",
          "1178:          uint64_t act, const ARN& res) const {",
          "1179:   if (ida && (!ida->is_identity(princ) || ida->is_identity(noprinc))) {",
          "1180:     return Effect::Pass;",
          "1181:   }",
          "1184:   if (!std::any_of(resource.begin(), resource.end(),",
          "1185:      [&res](const ARN& pattern) {",
          "1186:        return pattern.match(res);",
          "1187:      }) ||",
          "1188:       (std::any_of(notresource.begin(), notresource.end(),",
          "1189:      [&res](const ARN& pattern) {",
          "1190:        return pattern.match(res);",
          "1191:      }))) {",
          "1192:     return Effect::Pass;",
          "1193:   }",
          "1195:   if (!(action & act) || (notaction & act)) {",
          "1196:     return Effect::Pass;",
          "1197:   }",
          "1199:   if (std::all_of(conditions.begin(),",
          "1200:     conditions.end(),",
          "1201:     [&e](const Condition& c) { return c.eval(e);})) {",
          "1202:     return effect;",
          "1203:   }",
          "1205:   return Effect::Pass;",
          "1206: }",
          "1208: namespace {",
          "1209: const char* action_bit_string(uint64_t action) {",
          "1210:   switch (action) {",
          "1211:   case s3GetObject:",
          "1212:     return \"s3:GetObject\";",
          "1214:   case s3GetObjectVersion:",
          "1215:     return \"s3:GetObjectVersion\";",
          "1217:   case s3PutObject:",
          "1218:     return \"s3:PutObject\";",
          "1220:   case s3GetObjectAcl:",
          "1221:     return \"s3:GetObjectAcl\";",
          "1223:   case s3GetObjectVersionAcl:",
          "1224:     return \"s3:GetObjectVersionAcl\";",
          "1226:   case s3PutObjectAcl:",
          "1227:     return \"s3:PutObjectAcl\";",
          "1229:   case s3PutObjectVersionAcl:",
          "1230:     return \"s3:PutObjectVersionAcl\";",
          "1232:   case s3DeleteObject:",
          "1233:     return \"s3:DeleteObject\";",
          "1235:   case s3DeleteObjectVersion:",
          "1236:     return \"s3:DeleteObjectVersion\";",
          "1238:   case s3ListMultipartUploadParts:",
          "1239:     return \"s3:ListMultipartUploadParts\";",
          "1241:   case s3AbortMultipartUpload:",
          "1242:     return \"s3:AbortMultipartUpload\";",
          "1244:   case s3GetObjectTorrent:",
          "1245:     return \"s3:GetObjectTorrent\";",
          "1247:   case s3GetObjectVersionTorrent:",
          "1248:     return \"s3:GetObjectVersionTorrent\";",
          "1250:   case s3RestoreObject:",
          "1251:     return \"s3:RestoreObject\";",
          "1253:   case s3CreateBucket:",
          "1254:     return \"s3:CreateBucket\";",
          "1256:   case s3DeleteBucket:",
          "1257:     return \"s3:DeleteBucket\";",
          "1259:   case s3ListBucket:",
          "1260:     return \"s3:ListBucket\";",
          "1262:   case s3ListBucketVersions:",
          "1263:     return \"s3:ListBucketVersions\";",
          "1264:   case s3ListAllMyBuckets:",
          "1265:     return \"s3:ListAllMyBuckets\";",
          "1267:   case s3ListBucketMultiPartUploads:",
          "1268:     return \"s3:ListBucketMultiPartUploads\";",
          "1270:   case s3GetAccelerateConfiguration:",
          "1271:     return \"s3:GetAccelerateConfiguration\";",
          "1273:   case s3PutAccelerateConfiguration:",
          "1274:     return \"s3:PutAccelerateConfiguration\";",
          "1276:   case s3GetBucketAcl:",
          "1277:     return \"s3:GetBucketAcl\";",
          "1279:   case s3PutBucketAcl:",
          "1280:     return \"s3:PutBucketAcl\";",
          "1282:   case s3GetBucketCORS:",
          "1283:     return \"s3:GetBucketCORS\";",
          "1285:   case s3PutBucketCORS:",
          "1286:     return \"s3:PutBucketCORS\";",
          "1288:   case s3GetBucketVersioning:",
          "1289:     return \"s3:GetBucketVersioning\";",
          "1291:   case s3PutBucketVersioning:",
          "1292:     return \"s3:PutBucketVersioning\";",
          "1294:   case s3GetBucketRequestPayment:",
          "1295:     return \"s3:GetBucketRequestPayment\";",
          "1297:   case s3PutBucketRequestPayment:",
          "1298:     return \"s3:PutBucketRequestPayment\";",
          "1300:   case s3GetBucketLocation:",
          "1301:     return \"s3:GetBucketLocation\";",
          "1303:   case s3GetBucketPolicy:",
          "1304:     return \"s3:GetBucketPolicy\";",
          "1306:   case s3DeleteBucketPolicy:",
          "1307:     return \"s3:DeleteBucketPolicy\";",
          "1309:   case s3PutBucketPolicy:",
          "1310:     return \"s3:PutBucketPolicy\";",
          "1312:   case s3GetBucketNotification:",
          "1313:     return \"s3:GetBucketNotification\";",
          "1315:   case s3PutBucketNotification:",
          "1316:     return \"s3:PutBucketNotification\";",
          "1318:   case s3GetBucketLogging:",
          "1319:     return \"s3:GetBucketLogging\";",
          "1321:   case s3PutBucketLogging:",
          "1322:     return \"s3:PutBucketLogging\";",
          "1324:   case s3GetBucketTagging:",
          "1325:     return \"s3:GetBucketTagging\";",
          "1327:   case s3PutBucketTagging:",
          "1328:     return \"s3:PutBucketTagging\";",
          "1330:   case s3GetBucketWebsite:",
          "1331:     return \"s3:GetBucketWebsite\";",
          "1333:   case s3PutBucketWebsite:",
          "1334:     return \"s3:PutBucketWebsite\";",
          "1336:   case s3DeleteBucketWebsite:",
          "1337:     return \"s3:DeleteBucketWebsite\";",
          "1339:   case s3GetLifecycleConfiguration:",
          "1340:     return \"s3:GetLifecycleConfiguration\";",
          "1342:   case s3PutLifecycleConfiguration:",
          "1343:     return \"s3:PutLifecycleConfiguration\";",
          "1345:   case s3PutReplicationConfiguration:",
          "1346:     return \"s3:PutReplicationConfiguration\";",
          "1348:   case s3GetReplicationConfiguration:",
          "1349:     return \"s3:GetReplicationConfiguration\";",
          "1351:   case s3DeleteReplicationConfiguration:",
          "1352:     return \"s3:DeleteReplicationConfiguration\";",
          "1353:   }",
          "1354:   return \"s3Invalid\";",
          "1355: }",
          "1357: ostream& print_actions(ostream& m, const uint64_t a) {",
          "1358:   bool begun = false;",
          "1359:   m << \"[ \";",
          "1360:   for (auto i = 0U; i < s3Count; ++i) {",
          "1361:     if (a & (1 << i)) {",
          "1362:       if (begun) {",
          "1363:  m << \", \";",
          "1364:       } else {",
          "1365:  begun = true;",
          "1366:       }",
          "1367:       m << action_bit_string(1 << i);",
          "1368:     }",
          "1369:   }",
          "1370:   if (begun) {",
          "1371:     m << \" ]\";",
          "1372:   } else {",
          "1373:     m << \"]\";",
          "1374:   }",
          "1375:   return m;",
          "1376: }",
          "1377: }",
          "1379: ostream& operator <<(ostream& m, const Statement& s) {",
          "1380:   m << \"{ \";",
          "1381:   if (s.sid) {",
          "1382:     m << \"Sid: \" << *s.sid << \", \";",
          "1383:   }",
          "1384:   if (!s.princ.empty()) {",
          "1385:     m << \"Principal: \";",
          "1386:     print_array(m, s.princ.cbegin(), s.princ.cend());",
          "1387:     m << \", \";",
          "1388:   }",
          "1389:   if (!s.noprinc.empty()) {",
          "1390:     m << \"NotPrincipal: \";",
          "1391:     print_array(m, s.noprinc.cbegin(), s.noprinc.cend());",
          "1392:     m << \", \";",
          "1393:   }",
          "1395:   m << \"Effect: \" <<",
          "1396:     (s.effect == Effect::Allow ?",
          "1397:      (const char*) \"Allow\" :",
          "1398:      (const char*) \"Deny\");",
          "1400:   if (s.action || s.notaction || !s.resource.empty() ||",
          "1401:       !s.notresource.empty() || !s.conditions.empty()) {",
          "1402:     m << \", \";",
          "1403:   }",
          "1405:   if (s.action) {",
          "1406:     m << \"Action: \";",
          "1407:     print_actions(m, s.action);",
          "1409:     if (s.notaction || !s.resource.empty() ||",
          "1410:  !s.notresource.empty() || !s.conditions.empty()) {",
          "1411:       m << \", \";",
          "1412:     }",
          "1413:   }",
          "1415:   if (s.notaction) {",
          "1416:     m << \"NotAction: \";",
          "1417:     print_actions(m, s.notaction);",
          "1419:     if (!s.resource.empty() || !s.notresource.empty() ||",
          "1420:  !s.conditions.empty()) {",
          "1421:       m << \", \";",
          "1422:     }",
          "1423:   }",
          "1425:   if (!s.resource.empty()) {",
          "1426:     m << \"Resource: \";",
          "1427:     print_array(m, s.resource.cbegin(), s.resource.cend());",
          "1429:     if (!s.notresource.empty() || !s.conditions.empty()) {",
          "1430:       m << \", \";",
          "1431:     }",
          "1432:   }",
          "1434:   if (!s.notresource.empty()) {",
          "1435:     m << \"NotResource: \";",
          "1436:     print_array(m, s.notresource.cbegin(), s.notresource.cend());",
          "1438:     if (!s.conditions.empty()) {",
          "1439:       m << \", \";",
          "1440:     }",
          "1441:   }",
          "1443:   if (!s.conditions.empty()) {",
          "1444:     m << \"Condition: \";",
          "1445:     print_array(m, s.conditions.cbegin(), s.conditions.cend());",
          "1446:   }",
          "1448:   return m << \" }\";",
          "1449: }",
          "1451: string to_string(const Statement& s) {",
          "1452:   stringstream m;",
          "1453:   m << s;",
          "1454:   return m.str();",
          "1455: }",
          "1457: Policy::Policy(CephContext* cct, const string& tenant,",
          "1458:         const bufferlist& _text)",
          "1459:   : text(_text.to_str()) {",
          "1460:   StringStream ss(text.data());",
          "1461:   PolicyParser pp(cct, tenant, *this);",
          "1462:   auto pr = Reader{}.Parse<kParseNumbersAsStringsFlag |",
          "1463:       kParseCommentsFlag>(ss, pp);",
          "1464:   if (!pr) {",
          "1465:     throw PolicyParseException(std::move(pr));",
          "1466:   }",
          "1467: }",
          "1469: Effect Policy::eval(const Environment& e,",
          "1470:       optional<const rgw::auth::Identity&> ida,",
          "1471:       std::uint64_t action, const ARN& resource) const {",
          "1472:   auto allowed = false;",
          "1473:   for (auto& s : statements) {",
          "1474:     auto g = s.eval(e, ida, action, resource);",
          "1475:     if (g == Effect::Deny) {",
          "1476:       return g;",
          "1477:     } else if (g == Effect::Allow) {",
          "1478:       allowed = true;",
          "1479:     }",
          "1480:   }",
          "1481:   return allowed ? Effect::Allow : Effect::Pass;",
          "1482: }",
          "1484: ostream& operator <<(ostream& m, const Policy& p) {",
          "1485:   m << \"{ Version: \"",
          "1486:     << (p.version == Version::v2008_10_17 ? \"2008-10-17\" : \"2012-10-17\");",
          "1488:   if (p.id || !p.statements.empty()) {",
          "1489:     m << \", \";",
          "1490:   }",
          "1492:   if (p.id) {",
          "1493:     m << \"Id: \" << *p.id;",
          "1494:     if (!p.statements.empty()) {",
          "1495:       m << \", \";",
          "1496:     }",
          "1497:   }",
          "1499:   if (!p.statements.empty()) {",
          "1500:     m << \"Statements: \";",
          "1501:     print_array(m, p.statements.cbegin(), p.statements.cend());",
          "1502:     m << \", \";",
          "1503:   }",
          "1504:   return m << \" }\";",
          "1505: }",
          "1507: string to_string(const Policy& p) {",
          "1508:   stringstream s;",
          "1509:   s << p;",
          "1510:   return s.str();",
          "1511: }",
          "1513: }",
          "1514: }",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy.h||src/rgw/rgw_iam_policy.h": [
          "File: src/rgw/rgw_iam_policy.h -> src/rgw/rgw_iam_policy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef CEPH_RGW_IAM_POLICY_H",
          "5: #define CEPH_RGW_IAM_POLICY_H",
          "7: #include <bitset>",
          "8: #include <chrono>",
          "9: #include <cstdint>",
          "10: #include <iostream>",
          "11: #include <string>",
          "13: #include <boost/algorithm/string/predicate.hpp>",
          "14: #include <boost/container/flat_map.hpp>",
          "15: #include <boost/container/flat_set.hpp>",
          "16: #include <boost/optional.hpp>",
          "17: #include <boost/thread/shared_mutex.hpp>",
          "18: #include <boost/utility/string_ref.hpp>",
          "19: #include <boost/variant.hpp>",
          "21: #include \"common/ceph_time.h\"",
          "22: #include \"common/iso_8601.h\"",
          "24: #include \"rapidjson/error/error.h\"",
          "25: #include \"rapidjson/error/en.h\"",
          "27: #include \"fnmatch.h\"",
          "29: #include \"rgw_basic_types.h\"",
          "30: #include \"rgw_iam_policy_keywords.h\"",
          "32: #include \"include/assert.h\" // razzin' frazzin' ...grrr.",
          "34: class RGWRados;",
          "35: namespace rgw {",
          "36: namespace auth {",
          "37: class Identity;",
          "38: }",
          "39: }",
          "40: struct rgw_obj;",
          "41: struct rgw_bucket;",
          "43: namespace rgw {",
          "44: namespace IAM {",
          "45: static constexpr std::uint64_t s3None = 0;",
          "46: static constexpr std::uint64_t s3GetObject = 1ULL << 0;",
          "47: static constexpr std::uint64_t s3GetObjectVersion = 1ULL << 1;",
          "48: static constexpr std::uint64_t s3PutObject = 1ULL << 2;",
          "49: static constexpr std::uint64_t s3GetObjectAcl = 1ULL << 3;",
          "50: static constexpr std::uint64_t s3GetObjectVersionAcl = 1ULL << 4;",
          "51: static constexpr std::uint64_t s3PutObjectAcl = 1ULL << 5;",
          "52: static constexpr std::uint64_t s3PutObjectVersionAcl = 1ULL << 6;",
          "53: static constexpr std::uint64_t s3DeleteObject = 1ULL << 7;",
          "54: static constexpr std::uint64_t s3DeleteObjectVersion = 1ULL << 8;",
          "55: static constexpr std::uint64_t s3ListMultipartUploadParts = 1ULL << 9;",
          "56: static constexpr std::uint64_t s3AbortMultipartUpload = 1ULL << 10;",
          "57: static constexpr std::uint64_t s3GetObjectTorrent = 1ULL << 11;",
          "58: static constexpr std::uint64_t s3GetObjectVersionTorrent = 1ULL << 12;",
          "59: static constexpr std::uint64_t s3RestoreObject = 1ULL << 13;",
          "60: static constexpr std::uint64_t s3CreateBucket = 1ULL << 14;",
          "61: static constexpr std::uint64_t s3DeleteBucket = 1ULL << 15;",
          "62: static constexpr std::uint64_t s3ListBucket = 1ULL << 16;",
          "63: static constexpr std::uint64_t s3ListBucketVersions = 1ULL << 17;",
          "64: static constexpr std::uint64_t s3ListAllMyBuckets = 1ULL << 18;",
          "65: static constexpr std::uint64_t s3ListBucketMultiPartUploads = 1ULL << 19;",
          "66: static constexpr std::uint64_t s3GetAccelerateConfiguration = 1ULL << 20;",
          "67: static constexpr std::uint64_t s3PutAccelerateConfiguration = 1ULL << 21;",
          "68: static constexpr std::uint64_t s3GetBucketAcl = 1ULL << 22;",
          "69: static constexpr std::uint64_t s3PutBucketAcl = 1ULL << 23;",
          "70: static constexpr std::uint64_t s3GetBucketCORS = 1ULL << 24;",
          "71: static constexpr std::uint64_t s3PutBucketCORS = 1ULL << 25;",
          "72: static constexpr std::uint64_t s3GetBucketVersioning = 1ULL << 26;",
          "73: static constexpr std::uint64_t s3PutBucketVersioning = 1ULL << 27;",
          "74: static constexpr std::uint64_t s3GetBucketRequestPayment = 1ULL << 28;",
          "75: static constexpr std::uint64_t s3PutBucketRequestPayment = 1ULL << 29;",
          "76: static constexpr std::uint64_t s3GetBucketLocation = 1ULL << 30;",
          "77: static constexpr std::uint64_t s3GetBucketPolicy = 1ULL << 31;",
          "78: static constexpr std::uint64_t s3DeleteBucketPolicy = 1ULL << 32;",
          "79: static constexpr std::uint64_t s3PutBucketPolicy = 1ULL << 33;",
          "80: static constexpr std::uint64_t s3GetBucketNotification = 1ULL << 34;",
          "81: static constexpr std::uint64_t s3PutBucketNotification = 1ULL << 35;",
          "82: static constexpr std::uint64_t s3GetBucketLogging = 1ULL << 36;",
          "83: static constexpr std::uint64_t s3PutBucketLogging = 1ULL << 37;",
          "84: static constexpr std::uint64_t s3GetBucketTagging = 1ULL << 38;",
          "85: static constexpr std::uint64_t s3PutBucketTagging = 1ULL << 39;",
          "86: static constexpr std::uint64_t s3GetBucketWebsite = 1ULL << 40;",
          "87: static constexpr std::uint64_t s3PutBucketWebsite = 1ULL << 41;",
          "88: static constexpr std::uint64_t s3DeleteBucketWebsite = 1ULL << 42;",
          "89: static constexpr std::uint64_t s3GetLifecycleConfiguration = 1ULL << 43;",
          "90: static constexpr std::uint64_t s3PutLifecycleConfiguration = 1ULL << 44;",
          "91: static constexpr std::uint64_t s3PutReplicationConfiguration = 1ULL << 45;",
          "92: static constexpr std::uint64_t s3GetReplicationConfiguration = 1ULL << 46;",
          "93: static constexpr std::uint64_t s3DeleteReplicationConfiguration = 1ULL << 47;",
          "94: static constexpr std::uint64_t s3Count = 48;",
          "95: static constexpr std::uint64_t s3All = (1ULL << s3Count) - 1;",
          "97: namespace {",
          "98: inline int op_to_perm(std::uint64_t op) {",
          "99:   switch (op) {",
          "100:   case s3GetObject:",
          "101:   case s3GetObjectTorrent:",
          "102:   case s3GetObjectVersion:",
          "103:   case s3GetObjectVersionTorrent:",
          "104:   case s3ListAllMyBuckets:",
          "105:   case s3ListBucket:",
          "106:   case s3ListBucketMultiPartUploads:",
          "107:   case s3ListBucketVersions:",
          "108:   case s3ListMultipartUploadParts:",
          "109:     return RGW_PERM_READ;",
          "111:   case s3AbortMultipartUpload:",
          "112:   case s3CreateBucket:",
          "113:   case s3DeleteBucket:",
          "114:   case s3DeleteObject:",
          "115:   case s3DeleteObjectVersion:",
          "116:   case s3PutObject:",
          "117:   case s3RestoreObject:",
          "118:     return RGW_PERM_WRITE;",
          "120:   case s3GetAccelerateConfiguration:",
          "121:   case s3GetBucketAcl:",
          "122:   case s3GetBucketCORS:",
          "123:   case s3GetBucketLocation:",
          "124:   case s3GetBucketLogging:",
          "125:   case s3GetBucketNotification:",
          "126:   case s3GetBucketPolicy:",
          "127:   case s3GetBucketRequestPayment:",
          "128:   case s3GetBucketTagging:",
          "129:   case s3GetBucketVersioning:",
          "130:   case s3GetBucketWebsite:",
          "131:   case s3GetLifecycleConfiguration:",
          "132:   case s3GetObjectAcl:",
          "133:   case s3GetObjectVersionAcl:",
          "134:   case s3GetReplicationConfiguration:",
          "135:     return RGW_PERM_READ_ACP;",
          "137:   case s3DeleteBucketPolicy:",
          "138:   case s3DeleteBucketWebsite:",
          "139:   case s3DeleteReplicationConfiguration:",
          "140:   case s3PutAccelerateConfiguration:",
          "141:   case s3PutBucketAcl:",
          "142:   case s3PutBucketCORS:",
          "143:   case s3PutBucketLogging:",
          "144:   case s3PutBucketNotification:",
          "145:   case s3PutBucketPolicy:",
          "146:   case s3PutBucketRequestPayment:",
          "147:   case s3PutBucketTagging:",
          "148:   case s3PutBucketVersioning:",
          "149:   case s3PutBucketWebsite:",
          "150:   case s3PutLifecycleConfiguration:",
          "151:   case s3PutObjectAcl:",
          "152:   case s3PutObjectVersionAcl:",
          "153:   case s3PutReplicationConfiguration:",
          "154:     return RGW_PERM_WRITE_ACP;",
          "156:   case s3All:",
          "157:     return RGW_PERM_FULL_CONTROL;",
          "158:   }",
          "159:   return RGW_PERM_INVALID;",
          "160: }",
          "161: }",
          "163: using Environment = boost::container::flat_map<std::string, std::string>;",
          "165: enum struct Partition {",
          "166:   aws, aws_cn, aws_us_gov, wildcard",
          "171: };",
          "173: enum struct Service {",
          "174:   apigateway, appstream, artifact, autoscaling, aws_portal, acm,",
          "175:   cloudformation, cloudfront, cloudhsm, cloudsearch, cloudtrail,",
          "176:   cloudwatch, events, logs, codebuild, codecommit, codedeploy,",
          "177:   codepipeline, cognito_idp, cognito_identity, cognito_sync,",
          "178:   config, datapipeline, dms, devicefarm, directconnect,",
          "179:   ds, dynamodb, ec2, ecr, ecs, ssm, elasticbeanstalk, elasticfilesystem,",
          "180:   elasticloadbalancing, elasticmapreduce, elastictranscoder, elasticache,",
          "181:   es, gamelift, glacier, health, iam, importexport, inspector, iot,",
          "182:   kms, kinesisanalytics, firehose, kinesis, lambda, lightsail,",
          "183:   machinelearning, aws_marketplace, aws_marketplace_management,",
          "184:   mobileanalytics, mobilehub, opsworks, opsworks_cm, polly,",
          "185:   redshift, rds, route53, route53domains, sts, servicecatalog,",
          "186:   ses, sns, sqs, s3, swf, sdb, states, storagegateway, support,",
          "187:   trustedadvisor, waf, workmail, workspaces, wildcard",
          "188: };",
          "190: struct ARN {",
          "191:   Partition partition;",
          "192:   Service service;",
          "193:   std::string region;",
          "196:   std::string account;",
          "197:   std::string resource;",
          "199:   ARN()",
          "200:     : partition(Partition::wildcard), service(Service::wildcard) {}",
          "201:   ARN(Partition partition, Service service, std::string region,",
          "202:       std::string account, std::string resource)",
          "203:     : partition(partition), service(service), region(std::move(region)),",
          "204:       account(std::move(account)), resource(std::move(resource)) {}",
          "205:   ARN(const rgw_obj& o);",
          "206:   ARN(const rgw_bucket& b);",
          "207:   ARN(const rgw_bucket& b, const std::string& o);",
          "209:   static boost::optional<ARN> parse(const std::string& s,",
          "210:         bool wildcard = false);",
          "211:   std::string to_string() const;",
          "214:   bool match(const ARN& candidate) const;",
          "215: };",
          "217: inline std::string to_string(const ARN& a) {",
          "218:   return a.to_string();",
          "219: }",
          "221: inline std::ostream& operator <<(std::ostream& m, const ARN& a) {",
          "222:   return m << to_string(a);",
          "223: }",
          "225: bool operator ==(const ARN& l, const ARN& r);",
          "226: bool operator <(const ARN& l, const ARN& r);",
          "228: using Address = std::bitset<128>;",
          "229: struct MaskedIP {",
          "230:   bool v6;",
          "231:   Address addr;",
          "236:   unsigned int prefix;",
          "237: };",
          "239: std::ostream& operator <<(std::ostream& m, const MaskedIP& ip);",
          "240: string to_string(const MaskedIP& m);",
          "242: inline bool operator ==(const MaskedIP& l, const MaskedIP& r) {",
          "243:   auto shift = std::max((l.v6 ? 128 : 32) - l.prefix,",
          "244:    (r.v6 ? 128 : 32) - r.prefix);",
          "245:   ceph_assert(shift > 0);",
          "246:   return (l.addr >> shift) == (r.addr >> shift);",
          "247: }",
          "249: struct Condition {",
          "250:   TokenID op;",
          "255:   std::string key;",
          "256:   bool ifexists = false;",
          "261:   std::vector<std::string> vals;",
          "263:   Condition() = default;",
          "264:   Condition(TokenID op, const char* s, std::size_t len) : op(op) {",
          "265:     static constexpr char ifexistr[] = \"IfExists\";",
          "266:     auto l = static_cast<const char*>(memmem(static_cast<const void*>(s), len,",
          "267:           static_cast<const void*>(ifexistr),",
          "268:           sizeof(ifexistr) -1));",
          "269:     if (l && ((l + sizeof(ifexistr) - 1 == (s + len)))) {",
          "270:       ifexists = true;",
          "271:       key.assign(s, static_cast<const char*>(l) - s);",
          "272:     } else {",
          "273:       key.assign(s, len);",
          "274:     }",
          "275:   }",
          "277:   bool eval(const Environment& e) const;",
          "279:   static boost::optional<double> as_number(const std::string& s) {",
          "280:     std::size_t p = 0;",
          "282:     try {",
          "283:       double d = std::stod(s, &p);",
          "284:       if (p < s.length()) {",
          "285:  return boost::none;",
          "286:       }",
          "288:       return d;",
          "289:     } catch (const std::logic_error& e) {",
          "290:       return boost::none;",
          "291:     }",
          "292:   }",
          "294:   static boost::optional<ceph::real_time> as_date(const std::string& s) {",
          "295:     std::size_t p = 0;",
          "297:     try {",
          "298:       double d = std::stod(s, &p);",
          "299:       if (p == s.length()) {",
          "300:  return ceph::real_time(",
          "301:    std::chrono::seconds(static_cast<uint64_t>(d)) +",
          "302:    std::chrono::nanoseconds(",
          "303:      static_cast<uint64_t>((d - static_cast<uint64_t>(d))",
          "305:       }",
          "307:       return from_iso_8601(boost::string_ref(s), false);",
          "308:     } catch (const std::logic_error& e) {",
          "309:       return boost::none;",
          "310:     }",
          "311:   }",
          "313:   static boost::optional<bool> as_bool(const std::string& s) {",
          "314:     std::size_t p = 0;",
          "316:     if (s.empty() || boost::iequals(s, \"false\")) {",
          "317:       return false;",
          "318:     }",
          "320:     try {",
          "321:       double d = std::stod(s, &p);",
          "322:       if (p == s.length()) {",
          "323:  return !((d == +0.0) || (d = -0.0) || std::isnan(d));",
          "324:       }",
          "325:     } catch (const std::logic_error& e) {",
          "327:     }",
          "329:     return true;",
          "330:   }",
          "332:   static boost::optional<ceph::bufferlist> as_binary(const std::string& s) {",
          "334:     ceph::bufferlist base64;",
          "336:     base64.push_back(buffer::create_static(",
          "337:          s.length(),",
          "338:          const_cast<char*>(s.data()))); // Yuck",
          "340:     ceph::bufferlist bin;",
          "342:     try {",
          "343:       base64.decode_base64(bin);",
          "344:     } catch (const ceph::buffer::malformed_input& e) {",
          "345:       return boost::none;",
          "346:     }",
          "347:     return bin;",
          "348:   }",
          "350:   static boost::optional<MaskedIP> as_network(const std::string& s);",
          "353:   struct ci_equal_to : public std::binary_function<const std::string,",
          "354:          const std::string,",
          "355:          bool> {",
          "356:     bool operator ()(const std::string& s1,",
          "357:        const std::string& s2) const {",
          "358:       return boost::iequals(s1, s2);",
          "359:     }",
          "360:   };",
          "363:   template<typename F>",
          "364:   static bool orrible(F&& f, const std::string& c,",
          "365:         const std::vector<std::string>& v) {",
          "366:     for (const auto& d : v) {",
          "367:       if (std::forward<F>(f)(c, d)) {",
          "368:  return true;",
          "369:       }",
          "370:     }",
          "371:     return false;",
          "372:   }",
          "374:   template<typename F, typename X>",
          "375:   static bool shortible(F&& f, X& x, const std::string& c,",
          "376:    const std::vector<std::string>& v) {",
          "377:     auto xc = std::forward<X>(x)(c);",
          "378:     if (!xc) {",
          "379:       return false;",
          "380:     }",
          "382:     for (const auto& d : v) {",
          "383:       auto xd = std::forward<X>(x)(d);",
          "384:       if (!xd) {",
          "385:  continue;",
          "386:       }",
          "388:       if (std::forward<F>(f)(*xc, *xd)) {",
          "389:  return true;",
          "390:       }",
          "391:     }",
          "392:     return false;",
          "393:   }",
          "394: };",
          "396: std::ostream& operator <<(std::ostream& m, const Condition& c);",
          "398: std::string to_string(const Condition& c);",
          "400: struct Statement {",
          "401:   boost::optional<std::string> sid = boost::none;",
          "403:   boost::container::flat_set<rgw::auth::Principal> princ;",
          "404:   boost::container::flat_set<rgw::auth::Principal> noprinc;",
          "408:   Effect effect = Effect::Deny;",
          "410:   std::uint64_t action = 0;",
          "411:   std::uint64_t notaction = 0;",
          "413:   boost::container::flat_set<ARN> resource;",
          "414:   boost::container::flat_set<ARN> notresource;",
          "416:   std::vector<Condition> conditions;",
          "418:   Effect eval(const Environment& e,",
          "419:        boost::optional<const rgw::auth::Identity&> ida,",
          "420:        std::uint64_t action, const ARN& resource) const;",
          "421: };",
          "423: std::ostream& operator <<(ostream& m, const Statement& s);",
          "424: std::string to_string(const Statement& s);",
          "426: struct PolicyParseException : public std::exception {",
          "427:   rapidjson::ParseResult pr;",
          "429:   PolicyParseException(rapidjson::ParseResult&& pr)",
          "430:     : pr(pr) { }",
          "431:   const char* what() const noexcept override {",
          "432:     return rapidjson::GetParseError_En(pr.Code());",
          "433:   }",
          "434: };",
          "436: struct Policy {",
          "437:   std::string text;",
          "438:   Version version = Version::v2008_10_17;",
          "439:   boost::optional<std::string> id = boost::none;",
          "441:   std::vector<Statement> statements;",
          "443:   Policy(CephContext* cct, const std::string& tenant,",
          "444:   const bufferlist& text);",
          "446:   Effect eval(const Environment& e,",
          "447:        boost::optional<const rgw::auth::Identity&> ida,",
          "448:        std::uint64_t action, const ARN& resource) const;",
          "449: };",
          "451: std::ostream& operator <<(ostream& m, const Policy& p);",
          "452: std::string to_string(const Policy& p);",
          "453: }",
          "454: }",
          "456: namespace std {",
          "457: template<>",
          "458: struct hash<::rgw::IAM::Service> {",
          "459:   size_t operator()(const ::rgw::IAM::Service& s) const noexcept {",
          "461:     return hash<int>()(static_cast<int>(s));",
          "462:   }",
          "463: };",
          "464: }",
          "466: #endif",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy_keywords.gperf||src/rgw/rgw_iam_policy_keywords.gperf": [
          "File: src/rgw/rgw_iam_policy_keywords.gperf -> src/rgw/rgw_iam_policy_keywords.gperf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: %language=C++",
          "4: %define class-name keyword_hash",
          "5: %define lookup-function-name lookup",
          "6: %struct-type",
          "7: struct Keyword {",
          "8:   const char* name;",
          "9:   TokenKind kind;",
          "10:   TokenID id;",
          "11:   uint64_t specific;",
          "12:   bool arrayable;",
          "13:   bool objectable;",
          "14: };",
          "15: %%",
          "16: # Top-level",
          "17: #",
          "18: Version, TokenKind::top, TokenID::Version, 0, false, false",
          "19: Id, TokenKind::top, TokenID::Id, 0, false, false",
          "20: Statement, TokenKind::top, TokenID::Statement, 0, true, true",
          "21: #",
          "22: # Statement level",
          "23: #",
          "24: Sid, TokenKind::statement, TokenID::Sid, 0, false, false",
          "25: Effect, TokenKind::statement, TokenID::Effect, 0, false, false",
          "26: Principal, TokenKind::statement, TokenID::Principal, 0, false, true",
          "27: NotPrincipal, TokenKind::statement, TokenID::NotPrincipal, 0, true, true",
          "28: Action, TokenKind::statement, TokenID::Action, 0, true, false",
          "29: NotAction, TokenKind::statement, TokenID::NotAction, 0, true, false",
          "30: Resource, TokenKind::statement, TokenID::Resource, 0, true, false",
          "31: NotResource, TokenKind::statement, TokenID::NotResource, 0, true, false",
          "32: Condition, TokenKind::statement, TokenID::Condition, 0, true, true",
          "33: #",
          "34: # Condition operators",
          "35: #",
          "36: # String",
          "37: StringEquals, TokenKind::cond_op, TokenID::StringEquals, (uint64_t) Type::string, true, true",
          "38: StringNotEquals, TokenKind::cond_op, TokenID::StringNotEquals, (uint64_t) Type::string, true, true",
          "39: StringEqualsIgnoreCase, TokenKind::cond_op, TokenID::StringEqualsIgnoreCase, (uint64_t) Type::string, true, true",
          "40: StringNotEqualsIgnoreCase, TokenKind::cond_op, TokenID::StringNotEqualsIgnoreCase, (uint64_t) Type::string, true, true",
          "41: StringLike, TokenKind::cond_op, TokenID::StringLike, (uint64_t) Type::string, true, true,",
          "42: StringNotLike, TokenKind::cond_op, TokenID::StringNotLike, (uint64_t) Type::string, true, true",
          "43: # Numeric",
          "44: NumericEquals, TokenKind::cond_op, TokenID::NumericEquals, (uint64_t) Type::number, true, true",
          "45: NumericNotEquals, TokenKind::cond_op, TokenID::NumericNotEquals, (uint64_t) Type::number, true, true",
          "46: NumericLessThan, TokenKind::cond_op, TokenID::NumericLessThan, (uint64_t) Type::number, true, true",
          "47: NumericLessThanEquals, TokenKind::cond_op, TokenID::NumericLessThanEquals, (uint64_t) Type::number, true, true",
          "48: NumericGreaterThan, TokenKind::cond_op, TokenID::NumericGreaterThan, (uint64_t) Type::number, true, true",
          "49: NumericGreaterThanEquals, TokenKind::cond_op, TokenID::NumericGreaterThanEquals, (uint64_t) Type::number, true, true",
          "50: # Date",
          "51: DateEquals, TokenKind::cond_op, TokenID::DateEquals, (uint64_t) Type::date, true, true",
          "52: DateNotEquals, TokenKind::cond_op, TokenID::DateNotEquals, (uint64_t) Type::date, true, true",
          "53: DateLessThan, TokenKind::cond_op, TokenID::DateLessThan, (uint64_t) Type::date, true, true",
          "54: DateLessThanEquals, TokenKind::cond_op, TokenID::DateLessThanEquals, (uint64_t) Type::date, true, true",
          "55: DateGreaterThan, TokenKind::cond_op, TokenID::DateGreaterThan, (uint64_t) Type::date, true, true",
          "56: DateGreaterThanEquals, TokenKind::cond_op, TokenID::DateGreaterThanEquals, (uint64_t) Type::date, true, true",
          "57: # Bool",
          "58: Bool, TokenKind::cond_op, TokenID::Bool, (uint64_t) Type::boolean, true, true",
          "59: # Binary",
          "60: BinaryEquals, TokenKind::cond_op, TokenID::BinaryEquals, (uint64_t) Type::binary, true, true",
          "61: # IP Address",
          "62: IpAddress, TokenKind::cond_op, TokenID::IpAddress, (uint64_t) Type::ipaddr, true, true",
          "63: NotIpAddress, TokenKind::cond_op, TokenID::NotIpAddress, (uint64_t) Type::ipaddr, true, true",
          "64: # Amazon Resource Names",
          "65: ArnEquals, TokenKind::cond_op, TokenID::ArnEquals, (uint64_t) Type::arn, true, true",
          "66: ArnNotEquals, TokenKind::cond_op, TokenID::ArnNotEquals, (uint64_t) Type::arn, true, true",
          "67: ArnLike, TokenKind::cond_op, TokenID::ArnLike, (uint64_t) Type::arn, true, true",
          "68: ArnNotLike, TokenKind::cond_op, TokenID::ArnNotLike, (uint64_t) Type::arn, true, true",
          "69: # Null",
          "70: Null, TokenKind::cond_op, TokenID::Null, (uint64_t) Type::null, true, true",
          "71: #",
          "72: # Condition keys",
          "73: #",
          "74: # AWS",
          "75: #aws:CurrentTime, TokenKind::cond_key, TokenID::awsCurrentTime, (uint64_t) Type::date, true, false",
          "76: #aws:EpochTime, TokenKind::cond_key, TokenID::awsEpochTime, (uint64_t) Type::date, true, false",
          "77: #aws:TokenIssueTime, TokenKind::cond_key, TokenID::awsTokenIssueTime, (uint64_t) Type::date, true, false",
          "78: #aws:MultiFactorAuthPresent, TokenKind::cond_key, TokenID::awsMultiFactorAuthPresent, (uint64_t) Type::boolean, true, false",
          "79: #aws:MultiFactorAuthAge, TokenKind::cond_key, TokenID::awsMultiFactorAuthAge, (uint64_t) Type::number, true, false",
          "80: #aws:PrincipalType, TokenKind::cond_key, TokenID::awsPrincipalType, (uint64_t) Type::string, true, false",
          "81: #aws:Referer, TokenKind::cond_key, TokenID::awsReferer, (uint64_t) Type::string, true, false",
          "82: #aws:SecureTransport, TokenKind::cond_key, TokenID::awsSecureTransport, (uint64_t) Type::boolean, true, false",
          "83: #aws:SourceArn, TokenKind::cond_key, TokenID::awsSourceArn, (uint64_t) Type::arn, true, false",
          "84: #aws:SourceIp, TokenKind::cond_key, TokenID::awsSourceIp, (uint64_t) Type::ipaddr, true, false",
          "85: #aws:SourceVpc, TokenKind::cond_key, TokenID::awsSourceVpc, (uint64_t) Type::string, true, false",
          "86: #aws:SourceVpce, TokenKind::cond_key, TokenID::awsSourceVpce, (uint64_t) Type::string, true, false",
          "87: #aws:UserAgent, TokenKind::cond_key, TokenID::awsUserAgent, (uint64_t) Type::string, true, false",
          "88: #aws:userid, TokenKind::cond_key, TokenID::awsuserid, (uint64_t) Type::string, true, false",
          "89: #aws:username, TokenKind::cond_key, TokenID::awsusername, (uint64_t) Type::string, true, false",
          "90: # S3",
          "91: #s3:x-amz-acl, TokenKind::cond_key, TokenID::s3x_amz_acl, (uint64_t) Type::string, true, false",
          "92: #s3:x-amz-grant-read, TokenKind::cond_key, TokenID::s3x_amz_grant_permission, (uint64_t) Type::boolean, true, false",
          "93: #s3:x-amz-grant-write, TokenKind::cond_key, TokenID::s3x_amz_grant_permission, (uint64_t) Type::boolean, true, false",
          "94: #s3:x-amz-grant-read-acp, TokenKind::cond_key, TokenID::s3x_amz_grant_permission, (uint64_t) Type::boolean, true, false",
          "95: #s3:x-amz-grant-write-acp, TokenKind::cond_key, TokenID::s3x_amz_grant_permission, (uint64_t) Type::boolean, true, false",
          "96: #s3:x-amz-grant-full-control, TokenKind::cond_key, TokenID::s3x_amz_grant_permission, (uint64_t) Type::boolean, true, false",
          "97: #s3:x-amz-copy-source, TokenKind::cond_key, TokenID::s3x_amz_copy_source, (uint64_t) Type::string, true, false",
          "98: #s3:x-amz-server-side-encryption, TokenKind::cond_key, TokenID::s3x_amz_server_side_encryption, (uint64_t) Type::boolean, true, false",
          "99: #s3:x-amz-server-side-encryption-aws-kms-key-id, TokenKind::cond_key, TokenID::s3x_amz_server_side_encryption_aws_kms_key_id, (uint64_t) Type::arn, true, false",
          "100: #s3:x-amz-metadata-directive, TokenKind::cond_key, TokenID::s3x_amz_metadata_directive, (uint64_t) Type::string, true, false",
          "101: #s3:x-amz-storage-class, TokenKind::cond_key, TokenID::s3x_amz_storage_class, (uint64_t) Type::string, true, false",
          "102: #s3:VersionId, TokenKind::cond_key, TokenID::s3VersionId, (uint64_t) Type::string, true, false",
          "103: #s3:LocationConstraint, TokenKind::cond_key, TokenID::s3LocationConstraint, (uint64_t) Type::string, true, false",
          "104: #s3:prefix, TokenKind::cond_key, TokenID::s3prefix, (uint64_t) Type::string, true, false",
          "105: #s3:delimiter, TokenKind::cond_key, TokenID::s3delimiter, (uint64_t) Type::string, true, false",
          "106: #s3:max-keys, TokenKind::cond_key, TokenID::s3max_keys, (uint64_t) Type::number, true, false",
          "107: #s3:signatureversion, TokenKind::cond_key, TokenID::s3signatureversion, (uint64_t) Type::string, true, false",
          "108: #s3:authType, TokenKind::cond_key, TokenID::s3authType, (uint64_t) Type::string, true, false",
          "109: #s3:signatureAge, TokenKind::cond_key, TokenID::s3signatureAge, (uint64_t) Type::number, true, false",
          "110: #s3:x-amz-content-sha256, TokenKind::cond_key, TokenID::s3x_amz_content_sha256, (uint64_t) Type::string, true, false",
          "111: #",
          "112: # Version Keywords",
          "113: #",
          "114: 2008-10-17, TokenKind::version_key, TokenID::v2008_10_17, (uint64_t) Version::v2008_10_17, false, false",
          "115: 2012-10-17, TokenKind::version_key, TokenID::v2012_10_17, (uint64_t) Version::v2012_10_17, false, false",
          "116: #",
          "117: # Effect Keywords",
          "118: #",
          "119: Allow, TokenKind::effect_key, TokenID::Allow, (uint64_t) Effect::Allow, false, false",
          "120: Deny, TokenKind::effect_key, TokenID::Deny, (uint64_t) Effect::Deny, false, false",
          "121: #",
          "122: # Principal types",
          "123: #",
          "124: AWS, TokenKind::princ_type, TokenID::AWS, 0, true, false",
          "125: Federated, TokenKind::princ_type, TokenID::Federated, 0, true, false",
          "126: Service, TokenKind::princ_type, TokenID::Service, 0, true, false",
          "127: CanonicalUser, TokenKind::princ_type, TokenID::CanonicalUser, 0, true, false",
          "",
          "---------------"
        ],
        "src/rgw/rgw_iam_policy_keywords.h||src/rgw/rgw_iam_policy_keywords.h": [
          "File: src/rgw/rgw_iam_policy_keywords.h -> src/rgw/rgw_iam_policy_keywords.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef CEPH_RGW_POLICY_S3V2_KEYWORDS_H",
          "5: #define CEPH_RGW_POLICY_S3V2_KEYWORDS_H",
          "7: namespace rgw {",
          "8: namespace IAM {",
          "10: enum class TokenKind {",
          "11:   pseudo, top, statement, cond_op, cond_key, version_key, effect_key,",
          "12:   princ_type",
          "13: };",
          "15: enum class TokenID {",
          "17:   Top,",
          "20:   Version, Id, Statement,",
          "23:   Sid, Effect, Principal, NotPrincipal, Action, NotAction,",
          "24:   Resource, NotResource, Condition,",
          "30:   StringEquals, StringNotEquals, StringEqualsIgnoreCase,",
          "31:   StringNotEqualsIgnoreCase, StringLike, StringNotLike,",
          "34:   NumericEquals, NumericNotEquals, NumericLessThan, NumericLessThanEquals,",
          "35:   NumericGreaterThan, NumericGreaterThanEquals,",
          "38:   DateEquals, DateNotEquals, DateLessThan, DateLessThanEquals,",
          "39:   DateGreaterThan, DateGreaterThanEquals,",
          "42:   Bool,",
          "45:   BinaryEquals,",
          "48:   IpAddress, NotIpAddress,",
          "51:   ArnEquals, ArnNotEquals, ArnLike, ArnNotLike,",
          "54:   Null,",
          "56: #if 0 // Keys are done at runtime now",
          "59:   awsCurrentTime,",
          "60:   awsEpochTime,",
          "61:   awsTokenIssueTime,",
          "62:   awsMultiFactorAuthPresent,",
          "63:   awsMultiFactorAuthAge,",
          "64:   awsPrincipalType,",
          "65:   awsReferer,",
          "66:   awsSecureTransport,",
          "67:   awsSourceArn,",
          "68:   awsSourceIp,",
          "69:   awsSourceVpc,",
          "70:   awsSourceVpce,",
          "71:   awsUserAgent,",
          "72:   awsuserid,",
          "73:   awsusername,",
          "74:   s3x_amz_acl,",
          "75:   s3x_amz_grant_permission,",
          "76:   s3x_amz_copy_source,",
          "77:   s3x_amz_server_side_encryption,",
          "78:   s3x_amz_server_side_encryption_aws_kms_key_id,",
          "79:   s3x_amz_metadata_directive,",
          "80:   s3x_amz_storage_class,",
          "81:   s3VersionId,",
          "82:   s3LocationConstraint,",
          "83:   s3prefix,",
          "84:   s3delimiter,",
          "85:   s3max_keys,",
          "86:   s3signatureversion,",
          "87:   s3authType,",
          "88:   s3signatureAge,",
          "89:   s3x_amz_content_sha256,",
          "90: #else",
          "91:   CondKey,",
          "92: #endif",
          "97:   v2008_10_17,",
          "98:   v2012_10_17,",
          "103:   Allow,",
          "104:   Deny,",
          "107:   AWS,",
          "108:   Federated,",
          "109:   Service,",
          "110:   CanonicalUser",
          "111: };",
          "114: enum class Version {",
          "115:   v2008_10_17,",
          "116:   v2012_10_17",
          "117: };",
          "120: enum class Effect {",
          "121:   Allow,",
          "122:   Deny,",
          "123:   Pass",
          "124: };",
          "126: enum class Type {",
          "127:   string,",
          "128:   number,",
          "129:   date,",
          "130:   boolean,",
          "131:   binary,",
          "132:   ipaddr,",
          "133:   arn,",
          "134:   null",
          "135: };",
          "136: }",
          "137: }",
          "139: #endif // CEPH_RGW_POLICY_S3V2_KEYWORDS_H",
          "",
          "---------------"
        ],
        "src/test/rgw/test_rgw_iam_policy.cc||src/test/rgw/test_rgw_iam_policy.cc": [
          "File: src/test/rgw/test_rgw_iam_policy.cc -> src/test/rgw/test_rgw_iam_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <string>",
          "17: #include <boost/intrusive_ptr.hpp>",
          "18: #include <boost/optional.hpp>",
          "20: #include <gtest/gtest.h>",
          "22: #include \"common/code_environment.h\"",
          "23: #include \"common/ceph_context.h\"",
          "24: #include \"global/global_init.h\"",
          "25: #include \"rgw/rgw_auth.h\"",
          "26: #include \"rgw/rgw_iam_policy.h\"",
          "29: using std::string;",
          "30: using std::vector;",
          "32: using boost::container::flat_set;",
          "33: using boost::intrusive_ptr;",
          "34: using boost::make_optional;",
          "35: using boost::none;",
          "36: using boost::optional;",
          "38: using rgw::auth::Identity;",
          "39: using rgw::auth::Principal;",
          "41: using rgw::IAM::ARN;",
          "42: using rgw::IAM::Effect;",
          "43: using rgw::IAM::Environment;",
          "44: using rgw::IAM::Partition;",
          "45: using rgw::IAM::Policy;",
          "46: using rgw::IAM::s3All;",
          "47: using rgw::IAM::s3Count;",
          "48: using rgw::IAM::s3GetAccelerateConfiguration;",
          "49: using rgw::IAM::s3GetBucketAcl;",
          "50: using rgw::IAM::s3GetBucketCORS;",
          "51: using rgw::IAM::s3GetBucketLocation;",
          "52: using rgw::IAM::s3GetBucketLogging;",
          "53: using rgw::IAM::s3GetBucketNotification;",
          "54: using rgw::IAM::s3GetBucketPolicy;",
          "55: using rgw::IAM::s3GetBucketRequestPayment;",
          "56: using rgw::IAM::s3GetBucketTagging;",
          "57: using rgw::IAM::s3GetBucketVersioning;",
          "58: using rgw::IAM::s3GetBucketWebsite;",
          "59: using rgw::IAM::s3GetLifecycleConfiguration;",
          "60: using rgw::IAM::s3GetObject;",
          "61: using rgw::IAM::s3GetObjectAcl;",
          "62: using rgw::IAM::s3GetObjectVersionAcl;",
          "63: using rgw::IAM::s3GetObjectTorrent;",
          "64: using rgw::IAM::s3GetObjectVersion;",
          "65: using rgw::IAM::s3GetObjectVersionTorrent;",
          "66: using rgw::IAM::s3GetReplicationConfiguration;",
          "67: using rgw::IAM::s3ListAllMyBuckets;",
          "68: using rgw::IAM::s3ListBucket;",
          "69: using rgw::IAM::s3ListBucket;",
          "70: using rgw::IAM::s3ListBucketMultiPartUploads;",
          "71: using rgw::IAM::s3ListBucketVersions;",
          "72: using rgw::IAM::s3ListMultipartUploadParts;",
          "73: using rgw::IAM::s3None;",
          "74: using rgw::IAM::s3PutBucketAcl;",
          "75: using rgw::IAM::s3PutBucketPolicy;",
          "76: using rgw::IAM::Service;",
          "77: using rgw::IAM::TokenID;",
          "78: using rgw::IAM::Version;",
          "80: class FakeIdentity : public Identity {",
          "81:   const Principal id;",
          "82: public:",
          "84:   FakeIdentity(Principal&& id) : id(std::move(id)) {}",
          "85:   uint32_t get_perms_from_aclspec(const aclspec_t& aclspec) const override {",
          "86:     abort();",
          "87:     return 0;",
          "88:   };",
          "90:   bool is_admin_of(const rgw_user& uid) const override {",
          "91:     abort();",
          "92:     return false;",
          "93:   }",
          "95:   bool is_owner_of(const rgw_user& uid) const override {",
          "96:     abort();",
          "97:     return false;",
          "98:   }",
          "100:   virtual uint32_t get_perm_mask() const override {",
          "101:     abort();",
          "102:     return 0;",
          "103:   }",
          "105:   void to_str(std::ostream& out) const override {",
          "106:     abort();",
          "107:   }",
          "109:   bool is_identity(const flat_set<Principal>& ids) const override {",
          "110:     return ids.find(id) != ids.end();",
          "111:   }",
          "112: };",
          "114: class PolicyTest : public ::testing::Test {",
          "115: protected:",
          "116:   intrusive_ptr<CephContext> cct;",
          "117:   static const string arbitrary_tenant;",
          "118:   static string example1;",
          "119:   static string example2;",
          "120:   static string example3;",
          "121: public:",
          "122:   PolicyTest() {",
          "123:     cct = new CephContext(CEPH_ENTITY_TYPE_CLIENT);",
          "124:   }",
          "125: };",
          "127: TEST_F(PolicyTest, Parse1) {",
          "128:   optional<Policy> p;",
          "130:   ASSERT_NO_THROW(p = Policy(cct.get(), arbitrary_tenant,",
          "131:         bufferlist::static_from_string(example1)));",
          "132:   ASSERT_TRUE(p);",
          "134:   EXPECT_EQ(p->text, example1);",
          "135:   EXPECT_EQ(p->version, Version::v2012_10_17);",
          "136:   EXPECT_FALSE(p->id);",
          "137:   EXPECT_FALSE(p->statements[0].sid);",
          "138:   EXPECT_FALSE(p->statements.empty());",
          "139:   EXPECT_EQ(p->statements.size(), 1U);",
          "140:   EXPECT_TRUE(p->statements[0].princ.empty());",
          "141:   EXPECT_TRUE(p->statements[0].noprinc.empty());",
          "142:   EXPECT_EQ(p->statements[0].effect, Effect::Allow);",
          "143:   EXPECT_EQ(p->statements[0].action, s3ListBucket);",
          "144:   EXPECT_EQ(p->statements[0].notaction, s3None);",
          "145:   ASSERT_FALSE(p->statements[0].resource.empty());",
          "146:   ASSERT_EQ(p->statements[0].resource.size(), 1U);",
          "147:   EXPECT_EQ(p->statements[0].resource.begin()->partition, Partition::aws);",
          "148:   EXPECT_EQ(p->statements[0].resource.begin()->service, Service::s3);",
          "149:   EXPECT_TRUE(p->statements[0].resource.begin()->region.empty());",
          "150:   EXPECT_EQ(p->statements[0].resource.begin()->account, arbitrary_tenant);",
          "151:   EXPECT_EQ(p->statements[0].resource.begin()->resource, \"example_bucket\");",
          "152:   EXPECT_TRUE(p->statements[0].notresource.empty());",
          "153:   EXPECT_TRUE(p->statements[0].conditions.empty());",
          "154: }",
          "156: TEST_F(PolicyTest, Eval1) {",
          "157:   auto p  = Policy(cct.get(), arbitrary_tenant,",
          "158:      bufferlist::static_from_string(example1));",
          "159:   Environment e;",
          "161:   EXPECT_EQ(p.eval(e, none, s3ListBucket,",
          "162:      ARN(Partition::aws, Service::s3,",
          "163:          \"\", arbitrary_tenant, \"example_bucket\")),",
          "164:      Effect::Allow);",
          "166:   EXPECT_EQ(p.eval(e, none, s3PutBucketAcl,",
          "167:      ARN(Partition::aws, Service::s3,",
          "168:          \"\", arbitrary_tenant, \"example_bucket\")),",
          "169:      Effect::Pass);",
          "171:   EXPECT_EQ(p.eval(e, none, s3ListBucket,",
          "172:      ARN(Partition::aws, Service::s3,",
          "173:          \"\", arbitrary_tenant, \"erroneous_bucket\")),",
          "174:      Effect::Pass);",
          "176: }",
          "178: TEST_F(PolicyTest, Parse2) {",
          "179:   optional<Policy> p;",
          "181:   ASSERT_NO_THROW(p = Policy(cct.get(), arbitrary_tenant,",
          "182:         bufferlist::static_from_string(example2)));",
          "183:   ASSERT_TRUE(p);",
          "185:   EXPECT_EQ(p->text, example2);",
          "186:   EXPECT_EQ(p->version, Version::v2012_10_17);",
          "187:   EXPECT_EQ(*p->id, \"S3-Account-Permissions\");",
          "188:   ASSERT_FALSE(p->statements.empty());",
          "189:   EXPECT_EQ(p->statements.size(), 1U);",
          "190:   EXPECT_EQ(*p->statements[0].sid, \"1\");",
          "191:   EXPECT_FALSE(p->statements[0].princ.empty());",
          "192:   EXPECT_EQ(p->statements[0].princ.size(), 1U);",
          "193:   EXPECT_EQ(*p->statements[0].princ.begin(),",
          "194:      Principal::tenant(\"ACCOUNT-ID-WITHOUT-HYPHENS\"));",
          "195:   EXPECT_TRUE(p->statements[0].noprinc.empty());",
          "196:   EXPECT_EQ(p->statements[0].effect, Effect::Allow);",
          "197:   EXPECT_EQ(p->statements[0].action, s3All);",
          "198:   EXPECT_EQ(p->statements[0].notaction, s3None);",
          "199:   ASSERT_FALSE(p->statements[0].resource.empty());",
          "200:   ASSERT_EQ(p->statements[0].resource.size(), 2U);",
          "201:   EXPECT_EQ(p->statements[0].resource.begin()->partition, Partition::aws);",
          "202:   EXPECT_EQ(p->statements[0].resource.begin()->service, Service::s3);",
          "203:   EXPECT_TRUE(p->statements[0].resource.begin()->region.empty());",
          "204:   EXPECT_EQ(p->statements[0].resource.begin()->account, arbitrary_tenant);",
          "205:   EXPECT_EQ(p->statements[0].resource.begin()->resource, \"mybucket\");",
          "206:   EXPECT_EQ((p->statements[0].resource.begin() + 1)->partition,",
          "207:      Partition::aws);",
          "208:   EXPECT_EQ((p->statements[0].resource.begin() + 1)->service,",
          "209:      Service::s3);",
          "210:   EXPECT_TRUE((p->statements[0].resource.begin() + 1)->region.empty());",
          "211:   EXPECT_EQ((p->statements[0].resource.begin() + 1)->account,",
          "212:      arbitrary_tenant);",
          "213:   EXPECT_EQ((p->statements[0].resource.begin() + 1)->resource, \"mybucket/*\");",
          "214:   EXPECT_TRUE(p->statements[0].notresource.empty());",
          "215:   EXPECT_TRUE(p->statements[0].conditions.empty());",
          "216: }",
          "218: TEST_F(PolicyTest, Eval2) {",
          "219:   auto p  = Policy(cct.get(), arbitrary_tenant,",
          "220:      bufferlist::static_from_string(example2));",
          "221:   Environment e;",
          "223:   auto trueacct = FakeIdentity(",
          "224:     Principal::tenant(\"ACCOUNT-ID-WITHOUT-HYPHENS\"));",
          "226:   auto notacct = FakeIdentity(",
          "227:     Principal::tenant(\"some-other-account\"));",
          "228:   for (auto i = 0ULL; i < s3Count; ++i) {",
          "229:     EXPECT_EQ(p.eval(e, trueacct, 1ULL << i,",
          "230:        ARN(Partition::aws, Service::s3,",
          "231:     \"\", arbitrary_tenant, \"mybucket\")),",
          "232:        Effect::Allow);",
          "233:     EXPECT_EQ(p.eval(e, trueacct, 1ULL << i,",
          "234:        ARN(Partition::aws, Service::s3,",
          "235:     \"\", arbitrary_tenant, \"mybucket/myobject\")),",
          "236:        Effect::Allow);",
          "238:     EXPECT_EQ(p.eval(e, notacct, 1ULL << i,",
          "239:        ARN(Partition::aws, Service::s3,",
          "240:     \"\", arbitrary_tenant, \"mybucket\")),",
          "241:        Effect::Pass);",
          "242:     EXPECT_EQ(p.eval(e, notacct, 1ULL << i,",
          "243:        ARN(Partition::aws, Service::s3,",
          "244:     \"\", arbitrary_tenant, \"mybucket/myobject\")),",
          "245:        Effect::Pass);",
          "247:     EXPECT_EQ(p.eval(e, trueacct, 1ULL << i,",
          "248:        ARN(Partition::aws, Service::s3,",
          "249:     \"\", arbitrary_tenant, \"notyourbucket\")),",
          "250:        Effect::Pass);",
          "251:     EXPECT_EQ(p.eval(e, trueacct, 1ULL << i,",
          "252:        ARN(Partition::aws, Service::s3,",
          "253:     \"\", arbitrary_tenant, \"notyourbucket/notyourobject\")),",
          "254:        Effect::Pass);",
          "256:   }",
          "257: }",
          "259: TEST_F(PolicyTest, Parse3) {",
          "260:   optional<Policy> p;",
          "262:   ASSERT_NO_THROW(p = Policy(cct.get(), arbitrary_tenant,",
          "263:         bufferlist::static_from_string(example3)));",
          "264:   ASSERT_TRUE(p);",
          "266:   EXPECT_EQ(p->text, example3);",
          "267:   EXPECT_EQ(p->version, Version::v2012_10_17);",
          "268:   EXPECT_FALSE(p->id);",
          "269:   ASSERT_FALSE(p->statements.empty());",
          "270:   EXPECT_EQ(p->statements.size(), 3U);",
          "272:   EXPECT_EQ(*p->statements[0].sid, \"FirstStatement\");",
          "273:   EXPECT_TRUE(p->statements[0].princ.empty());",
          "274:   EXPECT_TRUE(p->statements[0].noprinc.empty());",
          "275:   EXPECT_EQ(p->statements[0].effect, Effect::Allow);",
          "276:   EXPECT_EQ(p->statements[0].action, s3PutBucketPolicy);",
          "277:   EXPECT_EQ(p->statements[0].notaction, s3None);",
          "278:   ASSERT_FALSE(p->statements[0].resource.empty());",
          "279:   ASSERT_EQ(p->statements[0].resource.size(), 1U);",
          "280:   EXPECT_EQ(p->statements[0].resource.begin()->partition, Partition::wildcard);",
          "281:   EXPECT_EQ(p->statements[0].resource.begin()->service, Service::wildcard);",
          "282:   EXPECT_EQ(p->statements[0].resource.begin()->region, \"*\");",
          "283:   EXPECT_EQ(p->statements[0].resource.begin()->account, arbitrary_tenant);",
          "284:   EXPECT_EQ(p->statements[0].resource.begin()->resource, \"*\");",
          "285:   EXPECT_TRUE(p->statements[0].notresource.empty());",
          "286:   EXPECT_TRUE(p->statements[0].conditions.empty());",
          "288:   EXPECT_EQ(*p->statements[1].sid, \"SecondStatement\");",
          "289:   EXPECT_TRUE(p->statements[1].princ.empty());",
          "290:   EXPECT_TRUE(p->statements[1].noprinc.empty());",
          "291:   EXPECT_EQ(p->statements[1].effect, Effect::Allow);",
          "292:   EXPECT_EQ(p->statements[1].action, s3ListAllMyBuckets);",
          "293:   EXPECT_EQ(p->statements[1].notaction, s3None);",
          "294:   ASSERT_FALSE(p->statements[1].resource.empty());",
          "295:   ASSERT_EQ(p->statements[1].resource.size(), 1U);",
          "296:   EXPECT_EQ(p->statements[1].resource.begin()->partition, Partition::wildcard);",
          "297:   EXPECT_EQ(p->statements[1].resource.begin()->service, Service::wildcard);",
          "298:   EXPECT_EQ(p->statements[1].resource.begin()->region, \"*\");",
          "299:   EXPECT_EQ(p->statements[1].resource.begin()->account, arbitrary_tenant);",
          "300:   EXPECT_EQ(p->statements[1].resource.begin()->resource, \"*\");",
          "301:   EXPECT_TRUE(p->statements[1].notresource.empty());",
          "302:   EXPECT_TRUE(p->statements[1].conditions.empty());",
          "304:   EXPECT_EQ(*p->statements[2].sid, \"ThirdStatement\");",
          "305:   EXPECT_TRUE(p->statements[2].princ.empty());",
          "306:   EXPECT_TRUE(p->statements[2].noprinc.empty());",
          "307:   EXPECT_EQ(p->statements[2].effect, Effect::Allow);",
          "308:   EXPECT_EQ(p->statements[2].action, (s3ListMultipartUploadParts |",
          "309:           s3ListBucket | s3ListBucketVersions |",
          "310:           s3ListAllMyBuckets |",
          "311:           s3ListBucketMultiPartUploads |",
          "312:           s3GetObject | s3GetObjectVersion |",
          "313:           s3GetObjectAcl | s3GetObjectVersionAcl |",
          "314:           s3GetObjectTorrent |",
          "315:           s3GetObjectVersionTorrent |",
          "316:           s3GetAccelerateConfiguration |",
          "317:           s3GetBucketAcl | s3GetBucketCORS |",
          "318:           s3GetBucketVersioning |",
          "319:           s3GetBucketRequestPayment |",
          "320:           s3GetBucketLocation |",
          "321:           s3GetBucketPolicy |",
          "322:           s3GetBucketNotification |",
          "323:           s3GetBucketLogging |",
          "324:           s3GetBucketTagging |",
          "325:           s3GetBucketWebsite |",
          "326:           s3GetLifecycleConfiguration |",
          "327:           s3GetReplicationConfiguration));",
          "328:   EXPECT_EQ(p->statements[2].notaction, s3None);",
          "329:   ASSERT_FALSE(p->statements[2].resource.empty());",
          "330:   ASSERT_EQ(p->statements[2].resource.size(), 2U);",
          "331:   EXPECT_EQ(p->statements[2].resource.begin()->partition, Partition::aws);",
          "332:   EXPECT_EQ(p->statements[2].resource.begin()->service, Service::s3);",
          "333:   EXPECT_TRUE(p->statements[2].resource.begin()->region.empty());",
          "334:   EXPECT_EQ(p->statements[2].resource.begin()->account, arbitrary_tenant);",
          "335:   EXPECT_EQ(p->statements[2].resource.begin()->resource, \"confidential-data\");",
          "336:   EXPECT_EQ((p->statements[2].resource.begin() + 1)->partition,",
          "337:      Partition::aws);",
          "338:   EXPECT_EQ((p->statements[2].resource.begin() + 1)->service, Service::s3);",
          "339:   EXPECT_TRUE((p->statements[2].resource.begin() + 1)->region.empty());",
          "340:   EXPECT_EQ((p->statements[2].resource.begin() + 1)->account,",
          "341:      arbitrary_tenant);",
          "342:   EXPECT_EQ((p->statements[2].resource.begin() + 1)->resource,",
          "343:      \"confidential-data/*\");",
          "344:   EXPECT_TRUE(p->statements[2].notresource.empty());",
          "345:   ASSERT_FALSE(p->statements[2].conditions.empty());",
          "346:   ASSERT_EQ(p->statements[2].conditions.size(), 1U);",
          "347:   EXPECT_EQ(p->statements[2].conditions[0].op, TokenID::Bool);",
          "348:   EXPECT_EQ(p->statements[2].conditions[0].key, \"aws:MultiFactorAuthPresent\");",
          "349:   EXPECT_FALSE(p->statements[2].conditions[0].ifexists);",
          "350:   ASSERT_FALSE(p->statements[2].conditions[0].vals.empty());",
          "351:   EXPECT_EQ(p->statements[2].conditions[0].vals.size(), 1U);",
          "352:   EXPECT_EQ(p->statements[2].conditions[0].vals[0], \"true\");",
          "353: }",
          "355: TEST_F(PolicyTest, Eval3) {",
          "356:   auto p  = Policy(cct.get(), arbitrary_tenant,",
          "357:      bufferlist::static_from_string(example3));",
          "358:   Environment em;",
          "359:   Environment tr = { { \"aws:MultiFactorAuthPresent\", \"true\" } };",
          "360:   Environment fa = { { \"aws:MultiFactorAuthPresent\", \"false\" } };",
          "362:   auto s3allow = (s3ListMultipartUploadParts | s3ListBucket |",
          "363:     s3ListBucketVersions | s3ListAllMyBuckets |",
          "364:     s3ListBucketMultiPartUploads | s3GetObject |",
          "365:     s3GetObjectVersion | s3GetObjectAcl | s3GetObjectVersionAcl |",
          "366:     s3GetObjectTorrent | s3GetObjectVersionTorrent |",
          "367:     s3GetAccelerateConfiguration | s3GetBucketAcl |",
          "368:     s3GetBucketCORS | s3GetBucketVersioning |",
          "369:     s3GetBucketRequestPayment | s3GetBucketLocation |",
          "370:     s3GetBucketPolicy | s3GetBucketNotification |",
          "371:     s3GetBucketLogging | s3GetBucketTagging |",
          "372:     s3GetBucketWebsite | s3GetLifecycleConfiguration |",
          "373:     s3GetReplicationConfiguration);",
          "375:   EXPECT_EQ(p.eval(em, none, s3PutBucketPolicy,",
          "376:      ARN(Partition::aws, Service::s3,",
          "377:          \"\", arbitrary_tenant, \"mybucket\")),",
          "378:      Effect::Allow);",
          "380:   EXPECT_EQ(p.eval(em, none, s3PutBucketPolicy,",
          "381:      ARN(Partition::aws, Service::s3,",
          "382:          \"\", arbitrary_tenant, \"mybucket\")),",
          "383:      Effect::Allow);",
          "386:   for (auto i = 0ULL; i < s3Count; ++i) {",
          "387:     auto op = 1ULL << i;",
          "388:     if ((op == s3ListAllMyBuckets) || (op == s3PutBucketPolicy)) {",
          "389:       continue;",
          "390:     }",
          "392:     EXPECT_EQ(p.eval(em, none, op,",
          "393:        ARN(Partition::aws, Service::s3,",
          "394:     \"\", arbitrary_tenant, \"confidential-data\")),",
          "395:        Effect::Pass);",
          "396:     EXPECT_EQ(p.eval(tr, none, op,",
          "397:        ARN(Partition::aws, Service::s3,",
          "398:     \"\", arbitrary_tenant, \"confidential-data\")),",
          "399:        op & s3allow ? Effect::Allow : Effect::Pass);",
          "400:     EXPECT_EQ(p.eval(fa, none, op,",
          "401:        ARN(Partition::aws, Service::s3,",
          "402:     \"\", arbitrary_tenant, \"confidential-data\")),",
          "403:        Effect::Pass);",
          "405:     EXPECT_EQ(p.eval(em, none, op,",
          "406:        ARN(Partition::aws, Service::s3,",
          "407:     \"\", arbitrary_tenant, \"confidential-data/moo\")),",
          "408:        Effect::Pass);",
          "409:     EXPECT_EQ(p.eval(tr, none, op,",
          "410:        ARN(Partition::aws, Service::s3,",
          "411:     \"\", arbitrary_tenant, \"confidential-data/moo\")),",
          "412:        op & s3allow ? Effect::Allow : Effect::Pass);",
          "413:     EXPECT_EQ(p.eval(fa, none, op,",
          "414:        ARN(Partition::aws, Service::s3,",
          "415:     \"\", arbitrary_tenant, \"confidential-data/moo\")),",
          "416:        Effect::Pass);",
          "418:     EXPECT_EQ(p.eval(em, none, op,",
          "419:        ARN(Partition::aws, Service::s3,",
          "420:     \"\", arbitrary_tenant, \"really-confidential-data\")),",
          "421:        Effect::Pass);",
          "422:     EXPECT_EQ(p.eval(tr, none, op,",
          "423:        ARN(Partition::aws, Service::s3,",
          "424:     \"\", arbitrary_tenant, \"really-confidential-data\")),",
          "425:        Effect::Pass);",
          "426:     EXPECT_EQ(p.eval(fa, none, op,",
          "427:        ARN(Partition::aws, Service::s3,",
          "428:     \"\", arbitrary_tenant, \"really-confidential-data\")),",
          "429:        Effect::Pass);",
          "431:     EXPECT_EQ(p.eval(em, none, op,",
          "432:        ARN(Partition::aws, Service::s3,",
          "433:     \"\", arbitrary_tenant,",
          "434:     \"really-confidential-data/moo\")), Effect::Pass);",
          "435:     EXPECT_EQ(p.eval(tr, none, op,",
          "436:        ARN(Partition::aws, Service::s3,",
          "437:     \"\", arbitrary_tenant,",
          "438:     \"really-confidential-data/moo\")), Effect::Pass);",
          "439:     EXPECT_EQ(p.eval(fa, none, op,",
          "440:        ARN(Partition::aws, Service::s3,",
          "441:     \"\", arbitrary_tenant,",
          "442:     \"really-confidential-data/moo\")), Effect::Pass);",
          "444:   }",
          "445: }",
          "447: const string PolicyTest::arbitrary_tenant = \"arbitrary_tenant\";",
          "448: string PolicyTest::example1 = R\"(",
          "449: {",
          "450:   \"Version\": \"2012-10-17\",",
          "451:   \"Statement\": {",
          "452:     \"Effect\": \"Allow\",",
          "453:     \"Action\": \"s3:ListBucket\",",
          "454:     \"Resource\": \"arn:aws:s3:::example_bucket\"",
          "455:   }",
          "456: }",
          "457: )\";",
          "459: string PolicyTest::example2 = R\"(",
          "460: {",
          "461:   \"Version\": \"2012-10-17\",",
          "462:   \"Id\": \"S3-Account-Permissions\",",
          "463:   \"Statement\": [{",
          "464:     \"Sid\": \"1\",",
          "465:     \"Effect\": \"Allow\",",
          "466:     \"Principal\": {\"AWS\": [\"arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:root\"]},",
          "467:     \"Action\": \"s3:*\",",
          "468:     \"Resource\": [",
          "469:       \"arn:aws:s3:::mybucket\",",
          "470:       \"arn:aws:s3:::mybucket/*\"",
          "471:     ]",
          "472:   }]",
          "473: }",
          "474: )\";",
          "476: string PolicyTest::example3 = R\"(",
          "477: {",
          "478:   \"Version\": \"2012-10-17\",",
          "479:   \"Statement\": [",
          "480:     {",
          "481:       \"Sid\": \"FirstStatement\",",
          "482:       \"Effect\": \"Allow\",",
          "483:       \"Action\": [\"s3:PutBucketPolicy\"],",
          "484:       \"Resource\": \"*\"",
          "485:     },",
          "486:     {",
          "487:       \"Sid\": \"SecondStatement\",",
          "488:       \"Effect\": \"Allow\",",
          "489:       \"Action\": \"s3:ListAllMyBuckets\",",
          "490:       \"Resource\": \"*\"",
          "491:     },",
          "492:     {",
          "493:       \"Sid\": \"ThirdStatement\",",
          "494:       \"Effect\": \"Allow\",",
          "495:       \"Action\": [",
          "496:  \"s3:List*\",",
          "497:  \"s3:Get*\"",
          "498:       ],",
          "499:       \"Resource\": [",
          "500:  \"arn:aws:s3:::confidential-data\",",
          "501:  \"arn:aws:s3:::confidential-data/*\"",
          "502:       ],",
          "503:       \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}",
          "504:     }",
          "505:   ]",
          "506: }",
          "507: )\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56167d19f8ef1f718c7f6660739db08cc7346c05",
      "candidate_info": {
        "commit_hash": "56167d19f8ef1f718c7f6660739db08cc7346c05",
        "repo": "ceph/ceph",
        "commit_url": "https://github.com/ceph/ceph/commit/56167d19f8ef1f718c7f6660739db08cc7346c05",
        "files": [
          "src/rgw/rgw_auth.cc",
          "src/rgw/rgw_auth.h",
          "src/rgw/rgw_auth_filters.h",
          "src/rgw/rgw_basic_types.h"
        ],
        "message": "rgw: Add is_identity to AuthApplier class\n\nEventually this will allow us to match all authentication information\nagainst all specified principals in a policy.\n\nRight now it handles users and wildcards.\n\nSigned-off-by: Adam C. Emerson <aemerson@redhat.com>",
        "before_after_code_files": [
          "src/rgw/rgw_auth.cc||src/rgw/rgw_auth.cc",
          "src/rgw/rgw_auth.h||src/rgw/rgw_auth.h",
          "src/rgw/rgw_auth_filters.h||src/rgw/rgw_auth_filters.h",
          "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h"
          ],
          "candidate": [
            "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h"
          ]
        }
      },
      "candidate_diff": {
        "src/rgw/rgw_auth.cc||src/rgw/rgw_auth.cc": [
          "File: src/rgw/rgw_auth.cc -> src/rgw/rgw_auth.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:       return id == acct_id;",
          "57:     }",
          "59:     uint32_t get_perm_mask() const override {",
          "60:       return perm_mask;",
          "61:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     bool is_identity(const idset_t& ids) const override {",
          "60:       for (auto& p : ids) {",
          "61:  if (p.is_wildcard()) {",
          "62:    return true;",
          "63:  } else if (p.is_tenant() && p.get_tenant() == id.tenant) {",
          "64:    return true;",
          "65:  } else if (p.is_user() &&",
          "66:      (p.get_tenant() == id.tenant) &&",
          "67:      (p.get_id() == id.id)) {",
          "68:    return true;",
          "69:  }",
          "70:       }",
          "71:       return false;",
          "72:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:   return info.acct_user == uid;",
          "292: }",
          "294: void rgw::auth::RemoteApplier::to_str(std::ostream& out) const",
          "295: {",
          "296:   out << \"rgw::auth::RemoteApplier(acct_user=\" << info.acct_user",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: bool rgw::auth::RemoteApplier::is_identity(const idset_t& ids) const {",
          "310:   for (auto& id : ids) {",
          "311:     if (id.is_wildcard()) {",
          "312:       return true;",
          "316:     } else if (id.is_tenant() &&",
          "317:         (info.acct_user.tenant.empty() ?",
          "318:   info.acct_user.id :",
          "319:   info.acct_user.tenant) == id.get_tenant()) {",
          "320:       return true;",
          "321:     } else if (id.is_user() &&",
          "322:         info.acct_user.id == id.get_id() &&",
          "323:         (info.acct_user.tenant.empty() ?",
          "324:   info.acct_user.id :",
          "325:   info.acct_user.tenant) == id.get_tenant()) {",
          "326:       return true;",
          "327:     }",
          "328:   }",
          "329:   return false;",
          "330: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:   return uid == user_info.user_id;",
          "384: }",
          "388:   out << \"rgw::auth::LocalApplier(acct_user=\" << user_info.user_id",
          "389:       << \", acct_name=\" << user_info.display_name",
          "390:       << \", subuser=\" << subuser",
          "",
          "[Removed Lines]",
          "386: void rgw::auth::LocalApplier::to_str(std::ostream& out) const",
          "387: {",
          "",
          "[Added Lines]",
          "424: bool rgw::auth::LocalApplier::is_identity(const idset_t& ids) const {",
          "425:   for (auto& id : ids) {",
          "426:     if (id.is_wildcard()) {",
          "427:       return true;",
          "428:     } else if (id.is_tenant() &&",
          "429:         id.get_tenant() == user_info.user_id.tenant) {",
          "430:       return true;",
          "431:     } else if (id.is_user() &&",
          "432:         (id.get_tenant() == user_info.user_id.tenant) &&",
          "433:         (id.get_id() == user_info.user_id.id)) {",
          "434:       return true;",
          "435:     }",
          "436:   }",
          "437:   return false;",
          "438: }",
          "440: void rgw::auth::LocalApplier::to_str(std::ostream& out) const {",
          "",
          "---------------"
        ],
        "src/rgw/rgw_auth.h||src/rgw/rgw_auth.h": [
          "File: src/rgw/rgw_auth.h -> src/rgw/rgw_auth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: class Identity {",
          "29: public:",
          "30:   typedef std::map<std::string, int> aclspec_t;",
          "32:   virtual ~Identity() = default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   using idset_t = boost::container::flat_set<Principal>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   }",
          "66:   virtual void to_str(std::ostream& out) const = 0;",
          "67: };",
          "69: inline std::ostream& operator<<(std::ostream& out,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   virtual bool is_identity(const idset_t& ids) const = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:   uint32_t get_perms_from_aclspec(const aclspec_t& aclspec) const override;",
          "405:   bool is_admin_of(const rgw_user& uid) const override;",
          "406:   bool is_owner_of(const rgw_user& uid) const override;",
          "407:   uint32_t get_perm_mask() const override { return info.perm_mask; }",
          "408:   void to_str(std::ostream& out) const override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:   bool is_identity(const idset_t& ids) const override;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:   uint32_t get_perms_from_aclspec(const aclspec_t& aclspec) const override;",
          "450:   bool is_admin_of(const rgw_user& uid) const override;",
          "451:   bool is_owner_of(const rgw_user& uid) const override;",
          "452:   uint32_t get_perm_mask() const override {",
          "453:     return get_perm_mask(subuser, user_info);",
          "454:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:   bool is_identity(const idset_t& ids) const override;",
          "",
          "---------------"
        ],
        "src/rgw/rgw_auth_filters.h||src/rgw/rgw_auth_filters.h": [
          "File: src/rgw/rgw_auth_filters.h -> src/rgw/rgw_auth_filters.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     return get_decoratee().get_perm_mask();",
          "81:   }",
          "83:   void to_str(std::ostream& out) const override {",
          "84:     get_decoratee().to_str(out);",
          "85:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   bool is_identity(",
          "84:     const boost::container::flat_set<Principal>& ids) const override {",
          "85:     return get_decoratee().is_identity(ids);",
          "86:   }",
          "",
          "---------------"
        ],
        "src/rgw/rgw_basic_types.h||src/rgw/rgw_basic_types.h": [
          "File: src/rgw/rgw_basic_types.h -> src/rgw/rgw_basic_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     : tenant(tenant),",
          "19:       id(id) {",
          "20:   }",
          "22:   void encode(bufferlist& bl) const {",
          "23:     ENCODE_START(1, 1, bl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   rgw_user(std::string&& tenant, std::string&& id)",
          "24:     : tenant(std::move(tenant)),",
          "25:       id(std::move(id)) {",
          "26:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: };",
          "101: WRITE_CLASS_ENCODER(rgw_user)",
          "104: class JSONObj;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: namespace rgw {",
          "116: namespace auth {",
          "117: class Principal {",
          "118:   enum types { User, Role, Tenant, Wildcard };",
          "119:   types t;",
          "120:   rgw_user u;",
          "122:   Principal(types t)",
          "123:     : t(t) {}",
          "125:   Principal(types t, std::string&& n, std::string i)",
          "126:     : t(t), u(std::move(n), std::move(i)) {}",
          "128: public:",
          "130:   static Principal wildcard() {",
          "131:     return Principal(Wildcard);",
          "132:   }",
          "134:   static Principal user(std::string&& t, std::string&& u) {",
          "135:     return Principal(User, std::move(t), std::move(u));",
          "136:   }",
          "138:   static Principal role(std::string&& t, std::string&& u) {",
          "139:     return Principal(Role, std::move(t), std::move(u));",
          "140:   }",
          "142:   static Principal tenant(std::string&& t) {",
          "143:     return Principal(Tenant, std::move(t), {});",
          "144:   }",
          "146:   bool is_wildcard() const {",
          "147:     return t == Wildcard;",
          "148:   }",
          "150:   bool is_user() const {",
          "151:     return t == User;",
          "152:   }",
          "154:   bool is_role() const {",
          "155:     return t == Role;",
          "156:   }",
          "158:   bool is_tenant() const {",
          "159:     return t == Tenant;",
          "160:   }",
          "162:   const std::string& get_tenant() const {",
          "163:     ceph_assert(t != Wildcard);",
          "164:     return u.tenant;",
          "165:   }",
          "167:   const std::string& get_id() const {",
          "168:     ceph_assert(t != Wildcard && t != Tenant);",
          "169:     return u.id;",
          "170:   }",
          "172:   bool operator ==(const Principal& o) const {",
          "173:     return (t == o.t) && (u == o.u);",
          "174:   }",
          "176:   bool operator <(const Principal& o) const {",
          "177:     return (t < o.t) || ((t == o.t) && (u < o.u));",
          "178:   }",
          "179: };",
          "180: }",
          "181: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5249139be7a2748eabbf898cf340989875bfa509",
      "candidate_info": {
        "commit_hash": "5249139be7a2748eabbf898cf340989875bfa509",
        "repo": "ceph/ceph",
        "commit_url": "https://github.com/ceph/ceph/commit/5249139be7a2748eabbf898cf340989875bfa509",
        "files": [
          "src/rgw/rgw_iam_policy.cc"
        ],
        "message": "rgw: Fix dereference of empty optional\n\nDue to the lack of a return, there was a case where an invalid ARN\ncould cause a dereference of an uninitialized boost::optional.\n\nAs a bit of defensive programming, restructure a couple functions to\nmake that kind of error impossible by ensuring the optional is only in\nscope when it is initialized and relying less in early return on\nerror.\n\nFixes: http://tracker.ceph.com/issues/21962\n\nSigned-off-by: Adam C. Emerson <aemerson@redhat.com>",
        "before_after_code_files": [
          "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc"
          ],
          "candidate": [
            "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/rgw/rgw_iam_policy.cc||src/rgw/rgw_iam_policy.cc": [
          "File: src/rgw/rgw_iam_policy.cc -> src/rgw/rgw_iam_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   if ((s == \"*\") && wildcards) {",
          "222:     return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");",
          "240:       }",
          "242:     }",
          "249:   }",
          "250:   return none;",
          "251: }",
          "",
          "[Removed Lines]",
          "223:   } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {",
          "224:     if (match.size() != 6) {",
          "225:       return boost::none;",
          "226:     }",
          "228:     ARN a;",
          "229:     {",
          "230:       auto p = to_partition(match[1], wildcards);",
          "231:       if (!p)",
          "232:  return none;",
          "234:       a.partition = *p;",
          "235:     }",
          "236:     {",
          "237:       auto s = to_service(match[2], wildcards);",
          "238:       if (!s) {",
          "239:  return none;",
          "241:       a.service = *s;",
          "244:     a.region = match[3];",
          "245:     a.account = match[4];",
          "246:     a.resource = match[5];",
          "248:     return a;",
          "",
          "[Added Lines]",
          "223:   } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild) &&",
          "224:       match.size() == 6) {",
          "225:     if (auto p = to_partition(match[1], wildcards)) {",
          "226:       if (auto s = to_service(match[2], wildcards)) {",
          "227:  return ARN(*p, *s, match[3], match[4], match[5]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743: static optional<Principal> parse_principal(CephContext* cct, TokenID t,",
          "746:   if ((t == TokenID::AWS) && (s == \"*\")) {",
          "747:     return Principal::wildcard();",
          "",
          "[Removed Lines]",
          "744:         string&& s) {",
          "",
          "[Added Lines]",
          "725:         string&& s) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:   } else if (t == TokenID::AWS) {",
          "756:       if (std::none_of(s.begin(), s.end(),",
          "757:          [](const char& c) {",
          "758:     return (c == ':') || (c == '/');",
          "",
          "[Removed Lines]",
          "754:     auto a = ARN::parse(s);",
          "755:     if (!a) {",
          "",
          "[Added Lines]",
          "735:     if (auto a = ARN::parse(s)) {",
          "736:       if (a->resource == \"root\") {",
          "737:  return Principal::tenant(std::move(a->account));",
          "738:       }",
          "740:       static const char rx_str[] = \"([^/]*)/(.*)\";",
          "741:       static const regex rx(rx_str, sizeof(rx_str) - 1,",
          "742:        ECMAScript | optimize);",
          "743:       smatch match;",
          "744:       if (regex_match(a->resource, match, rx) && match.size() == 3) {",
          "745:  if (match[1] == \"user\") {",
          "746:    return Principal::user(std::move(a->account),",
          "747:      match[2]);",
          "748:  }",
          "750:  if (match[1] == \"role\") {",
          "751:    return Principal::role(std::move(a->account),",
          "752:      match[2]);",
          "753:  }",
          "754:       }",
          "755:     } else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "763:  return Principal::tenant(std::move(s));",
          "764:       }",
          "765:     }",
          "790:   }",
          "792:   ldout(cct, 0) << \"Supplied principal is discarded: \" << s << dendl;",
          "",
          "[Removed Lines]",
          "767:     if (a->resource == \"root\") {",
          "768:       return Principal::tenant(std::move(a->account));",
          "769:     }",
          "771:     static const char rx_str[] = \"([^/]*)/(.*)\";",
          "772:     static const regex rx(rx_str, sizeof(rx_str) - 1,",
          "773:      ECMAScript | optimize);",
          "774:     smatch match;",
          "775:     if (regex_match(a->resource, match, rx)) {",
          "776:       if (match.size() != 3) {",
          "777:  return boost::none;",
          "778:       }",
          "780:       if (match[1] == \"user\") {",
          "781:  return Principal::user(std::move(a->account),",
          "782:           match[2]);",
          "783:       }",
          "785:       if (match[1] == \"role\") {",
          "786:  return Principal::role(std::move(a->account),",
          "787:           match[2]);",
          "788:       }",
          "789:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "853:     auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?",
          "854:       t->princ : t->noprinc;",
          "858:       pri.emplace(std::move(*o));",
          "",
          "[Removed Lines]",
          "856:     auto o = parse_principal(pp->cct, w->id, string(s, l));",
          "857:     if (o)",
          "",
          "[Added Lines]",
          "833:     if (auto o = parse_principal(pp->cct, w->id, string(s, l))) {",
          "835:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}