{
  "cve_id": "CVE-2017-5473",
  "cve_desc": "Cross-site request forgery (CSRF) vulnerability in ntopng through 2.4 allows remote attackers to hijack the authentication of arbitrary users, as demonstrated by admin/add_user.lua, admin/change_user_prefs.lua, admin/delete_user.lua, and admin/password_reset.lua.",
  "repo": "ntop/ntopng",
  "patch_hash": "f91fbe3d94c8346884271838ae3406ae633f6f15",
  "patch_info": {
    "commit_hash": "f91fbe3d94c8346884271838ae3406ae633f6f15",
    "repo": "ntop/ntopng",
    "commit_url": "https://github.com/ntop/ntopng/commit/f91fbe3d94c8346884271838ae3406ae633f6f15",
    "files": [
      "src/Lua.cpp"
    ],
    "message": "Check for presence of crsf in admin scripts",
    "before_after_code_files": [
      "src/Lua.cpp||src/Lua.cpp"
    ]
  },
  "patch_diff": {
    "src/Lua.cpp||src/Lua.cpp": [
      "File: src/Lua.cpp -> src/Lua.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5680:   char *_cookies, user[64] = { '\\0' }, outbuf[FILENAME_MAX];",
      "5681:   AddressTree ptree;",
      "5682:   int rc;",
      "5684:   if(!L) return(-1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5683:   bool csrf_found = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5759:         msg, PAGE_ERROR, query_string, msg));",
      "5760:   } else",
      "5761:     ntop->getRedis()->delKey(decoded_buf);",
      "5762:        }",
      "5764:        lua_push_str_table_entry(L, tok, decoded_buf);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5764:   csrf_found = true;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5777:     } else",
      "5778:       ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");",
      "5779:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5784:   if(strstr(request_info->uri, \"/admin/\") && (!csrf_found)) {",
      "5785:     const char *msg = \"Missing CSRF parameter\";",
      "5787:     return(send_error(conn, 500 /* Internal server error */, msg, PAGE_ERROR, request_info->uri, msg));",
      "5788:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58a1e6a9149e2118eb8bac3befe3e82d7482d9bd",
      "candidate_info": {
        "commit_hash": "58a1e6a9149e2118eb8bac3befe3e82d7482d9bd",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/58a1e6a9149e2118eb8bac3befe3e82d7482d9bd",
        "files": [
          "include/ntop_defines.h",
          "src/Lua.cpp"
        ],
        "message": "Improvements and fixes to handle of POST data",
        "before_after_code_files": [
          "include/ntop_defines.h||include/ntop_defines.h",
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/ntop_defines.h||include/ntop_defines.h": [
          "File: include/ntop_defines.h -> include/ntop_defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "702: #define HTTP_MAX_CONTENT_TYPE_LENGTH    63",
          "703: #define HTTP_MAX_HEADER_LINES           20",
          "705: #define HTTP_CONTENT_TYPE_HEADER \"Content-Type: \"",
          "706: #define CONST_HELLO_HOST         \"hello\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704: #define HTTP_MAX_POST_DATA_LEN          4096",
          "",
          "---------------"
        ],
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6314:   char buf[64], key[64], ifname[MAX_INTERFACE_NAME_LEN];",
          "6315:   char *_cookies, user[64] = { '\\0' };",
          "6316:   AddressTree ptree;",
          "6318:   const char * content_type;",
          "6320:   if(!L) return(-1);",
          "",
          "[Removed Lines]",
          "6317:   int rc;",
          "",
          "[Added Lines]",
          "6317:   int rc, post_data_len;",
          "6319:   u_int8_t valid_csrf = 1;",
          "6320:   char *post_data = NULL;",
          "6321:   char rsp[32];",
          "6322:   char csrf[64] = { '\\0' };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6331:   if((strcmp(request_info->request_method, \"POST\") == 0) &&",
          "6348: #if 0",
          "6357: #else",
          "6359: #endif",
          "6363:     }",
          "6367:     else",
          "6368:       setParamsTable(L, \"_POST\", NULL /* Empty */);",
          "6369:   } else",
          "",
          "[Removed Lines]",
          "6332:       ((content_type != NULL) && (strstr(content_type, \"application/x-www-form-urlencoded\") == content_type))) {",
          "6333:     char post_data[1024] = { '\\0' };",
          "6334:     char rsp[32];",
          "6335:     char csrf[64] = { '\\0' };",
          "6336:     char user[64] = { '\\0' };",
          "6337:     int post_data_len = mg_read(conn, post_data, sizeof(post_data));",
          "6338:     u_int8_t valid_csrf = 1;",
          "6340:     post_data[sizeof(post_data)-1] = '\\0';",
          "6343:     mg_get_var(post_data, post_data_len, \"csrf\", csrf, sizeof(csrf));",
          "6344:     mg_get_cookie(conn, \"user\", user, sizeof(user));",
          "6346:     if((ntop->getRedis()->get(csrf, rsp, sizeof(rsp)) == -1)",
          "6347:        || (strcmp(rsp, user) != 0)) {",
          "6349:       const char *msg = \"The submitted form is expired. Please reload the page and try again. <p>[ <A HREF=/>Home</A> ]\";",
          "6351:       ntop->getTrace()->traceEvent(TRACE_WARNING,",
          "6352:           \"Invalid CSRF parameter specified [%s][%s][%s][%s]: page expired?\",",
          "6353:           csrf, rsp, user, \"csrf\");",
          "6355:       return(send_error(conn, 500 /* Internal server error */,",
          "6356:           msg, PAGE_ERROR, script_path, msg));",
          "6358:       valid_csrf = 0;",
          "6360:     } else {",
          "6362:       ntop->getRedis()->del(csrf);",
          "6365:     if(valid_csrf)",
          "",
          "[Added Lines]",
          "6336:      ((content_type != NULL) && (strstr(content_type, \"application/x-www-form-urlencoded\") == content_type))) {",
          "6338:     if((post_data = (char*)malloc(HTTP_MAX_POST_DATA_LEN * sizeof(char))) == NULL",
          "6339:        || (post_data_len = mg_read(conn, post_data, HTTP_MAX_POST_DATA_LEN)) == 0) {",
          "6340:       valid_csrf = 0;",
          "6342:     } else if(post_data_len > HTTP_MAX_POST_DATA_LEN - 1) {",
          "6343:       ntop->getTrace()->traceEvent(TRACE_WARNING, \"Too much data submitted with the form. [post_data_len: %u]\", post_data_len);",
          "6344:       valid_csrf = 0;",
          "6345:     } else {",
          "6346:       post_data[post_data_len + 1] = '\\0';",
          "6349:       mg_get_var(post_data, post_data_len, \"csrf\", csrf, sizeof(csrf));",
          "6350:       mg_get_cookie(conn, \"user\", user, sizeof(user));",
          "6352:       if((ntop->getRedis()->get(csrf, rsp, sizeof(rsp)) == -1)",
          "6353:   || (strcmp(rsp, user) != 0)) {",
          "6355:  const char *msg = \"The submitted form is expired. Please reload the page and try again. <p>[ <A HREF=/>Home</A> ]\";",
          "6357:  ntop->getTrace()->traceEvent(TRACE_WARNING,",
          "6358:          \"Invalid CSRF parameter specified [%s][%s][%s][%s]: page expired?\",",
          "6359:          csrf, rsp, user, \"csrf\");",
          "6361:  return(send_error(conn, 500 /* Internal server error */,",
          "6362:      msg, PAGE_ERROR, script_path, msg));",
          "6364:  valid_csrf = 0;",
          "6366:       } else {",
          "6368:  ntop->getRedis()->del(csrf);",
          "6369:       }",
          "6372:     if(valid_csrf) {",
          "6374:       if(post_data) {",
          "6375:  free(post_data);",
          "6376:       }",
          "6377:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c115271c5d11f6a75853193772378057d68ab9a3",
      "candidate_info": {
        "commit_hash": "c115271c5d11f6a75853193772378057d68ab9a3",
        "repo": "ntop/ntopng",
        "commit_url": "https://github.com/ntop/ntopng/commit/c115271c5d11f6a75853193772378057d68ab9a3",
        "files": [
          "doc/README.grafana",
          "include/ntop_defines.h",
          "scripts/lua/modules/grafana/index.lua",
          "scripts/lua/modules/grafana/query.lua",
          "scripts/lua/modules/grafana/search.lua",
          "scripts/lua/modules/grafana_utils.lua",
          "scripts/lua/modules/graph_utils.lua",
          "scripts/lua/modules/lua_utils.lua",
          "src/HTTPserver.cpp",
          "src/Lua.cpp"
        ],
        "message": "Implements grafana support for interfaces",
        "before_after_code_files": [
          "include/ntop_defines.h||include/ntop_defines.h",
          "scripts/lumodules/grafanindex.lua||scripts/lua/modules/grafana/index.lua",
          "scripts/lumodules/grafanquery.lua||scripts/lua/modules/grafana/query.lua",
          "scripts/lumodules/grafansearch.lua||scripts/lua/modules/grafana/search.lua",
          "scripts/lumodules/grafana_utils.lua||scripts/lua/modules/grafana_utils.lua",
          "scripts/lumodules/graph_utils.lua||scripts/lua/modules/graph_utils.lua",
          "scripts/lumodules/lua_utils.lua||scripts/lua/modules/lua_utils.lua",
          "src/HTTPserver.cpp||src/HTTPserver.cpp",
          "src/Lua.cpp||src/Lua.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Lua.cpp||src/Lua.cpp"
          ],
          "candidate": [
            "src/Lua.cpp||src/Lua.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/ntop_defines.h||include/ntop_defines.h": [
          "File: include/ntop_defines.h -> include/ntop_defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #define HOTSPOT_DETECT_LUA_URL    \"/lua/hotspot-detect.lua\"",
          "96: #define CHANGE_PASSWORD_ULR       \"/lua/change_password.lua\"",
          "97: #define HTTP_SESSION_DURATION     43200",
          "98: #define CONST_HTTPS_CERT_NAME     \"ntopng-cert.pem\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: #define GRAFANA_URL               \"/lua/modules/grafana/\"",
          "",
          "---------------"
        ],
        "scripts/lumodules/grafanindex.lua||scripts/lua/modules/grafana/index.lua": [
          "File: scripts/lumodules/grafanindex.lua -> scripts/lua/modules/grafana/index.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- (C) 2013-17 - ntop.org",
          "3: --",
          "5: -- This page is requested by grafana Simple JSON plugin when testing the datasource",
          "6: -- datasource test involes a request to / that is mapped by ntopng to index.lua",
          "8: dirs = ntop.getDirs()",
          "9: package.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path",
          "11: require \"lua_utils\"",
          "12: require \"grafana_utils\"",
          "14: local json = require(\"dkjson\")",
          "16: if isCORSpreflight() then",
          "17:    processCORSpreflight()",
          "18: else",
          "19:    local corsr = {}",
          "20:    corsr[\"Access-Control-Allow-Origin\"] = _SERVER[\"Origin\"]",
          "21:    sendHTTPHeader('application/json', nil, corsr)",
          "22:    print(json.encode({status=\"OK\"}, nil))",
          "23: end",
          "",
          "---------------"
        ],
        "scripts/lumodules/grafanquery.lua||scripts/lua/modules/grafana/query.lua": [
          "File: scripts/lumodules/grafanquery.lua -> scripts/lua/modules/grafana/query.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- (C) 2013-17 - ntop.org",
          "3: --",
          "5: dirs = ntop.getDirs()",
          "6: package.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path",
          "8: require \"lua_utils\"",
          "9: require \"graph_utils\"",
          "10: require \"grafana_utils\"",
          "12: interface.select(ifname)",
          "13: local ifnames = interface.getIfNames()",
          "15: if isCORSpreflight() then",
          "16:    processCORSpreflight()",
          "17: else",
          "18:    local corsr = {}",
          "19:    corsr[\"Access-Control-Allow-Origin\"] = _SERVER[\"Origin\"]",
          "20:    sendHTTPHeader('application/json', nil, corsr)",
          "22:    local epoch_begin = toEpoch(_GRAFANA[\"payload\"][\"range\"][\"from\"])",
          "23:    local epoch_end   = toEpoch(_GRAFANA[\"payload\"][\"range\"][\"to\"])",
          "25:    -- override max_num_points in singlerrd2json",
          "26:    global_max_num_points = _GRAFANA[\"payload\"][\"maxDataPoints\"]",
          "28:    local res = {}",
          "29:    for _, t in pairs(_GRAFANA[\"payload\"][\"targets\"]) do",
          "30:       local is_interface = string.starts(t[\"target\"], \"interface_\")",
          "31:       local is_bytes = string.ends(t[\"target\"], \"_bytes\") or string.ends(t[\"target\"], \"_bytestotal\")",
          "32:       local is_packets = string.ends(t[\"target\"], \"_packets\") or string.ends(t[\"target\"], \"_packetstotal\")",
          "34:       local target = string.gsub(t[\"target\"], \"^(.-)_\", \"\") -- lazy match to remove up to the first underscore",
          "35:       target = string.gsub(target, \"_(.-)$\", \"\") -- lazy match to remove up to the last underscore",
          "37:       local rrdfile = \"\"",
          "38:       if is_bytes   then rrdfile = \"bytes.rrd\" end",
          "39:       if is_packets then rrdfile = \"packets.rrd\" end",
          "41:       local datapoints = {}",
          "43:       if is_interface then",
          "44:   local rr = singlerrd2json(getInterfaceId(target), nil, rrdfile, epoch_begin, epoch_end)",
          "46:   if string.ends(t[\"target\"], \"total\") then",
          "47:      local totalval = rr[\"totalval\"]",
          "48:      datapoints = {{totalval, 0 --[[ it's an integral, an instant is not meaningful here --]]}}",
          "49:   else",
          "50:      rr = json.decode(rr[\"json\"])",
          "52:      for _, point in ipairs(rr[\"values\"]) do",
          "53:         local instant = point[1]",
          "54:         local val     = point[2]",
          "55:         datapoints[#datapoints + 1] = {val, instant*1000}",
          "56:      end",
          "57:   end",
          "58:       end",
          "61:       res[#res + 1] = {target=target, datapoints = datapoints}",
          "62:       -- tprint({target=target, is_bytes=is_bytes, is_packets=is_packets, entity_name=entity_name})",
          "63:    end",
          "65:    --tprint(_GRAFANA[\"payload\"])",
          "67:    -- tprint(\"QUERY\")",
          "68:    -- tprint(_GRAFANA)",
          "70:    print(json.encode(res, nil))",
          "71: end",
          "",
          "---------------"
        ],
        "scripts/lumodules/grafansearch.lua||scripts/lua/modules/grafana/search.lua": [
          "File: scripts/lumodules/grafansearch.lua -> scripts/lua/modules/grafana/search.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- (C) 2013-17 - ntop.org",
          "3: --",
          "5: dirs = ntop.getDirs()",
          "6: package.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path",
          "8: require \"lua_utils\"",
          "9: require \"grafana_utils\"",
          "13: if isCORSpreflight() then",
          "14:    processCORSpreflight()",
          "15: else",
          "16:    interface.select(ifname)",
          "19:    local corsr = {}",
          "20:    corsr[\"Access-Control-Allow-Origin\"] = _SERVER[\"Origin\"]",
          "21:    sendHTTPHeader('application/json', nil, corsr)",
          "23:    -- tprint(\"SEARCH\")",
          "24:    -- tprint(_GRAFANA)",
          "26:    local target = _GRAFANA[\"payload\"][\"target\"]",
          "27:    if target == nil then",
          "28:       target = \"\"",
          "29:    end",
          "31:    local res = {}",
          "33:    if isEmptyString(target) or string.starts(\"interface_\", target) or string.starts(target, \"interface_\") then",
          "34:       local ifnames = interface.getIfNames()",
          "35:       for _, n in pairs(ifnames) do",
          "36:   local tb  = \"interface_\"..n..\"_bytes\"",
          "37:   local tp  = \"interface_\"..n..\"_packets\"",
          "38:   local tbt = \"interface_\"..n..\"_bytestotal\"",
          "39:   local tpt = \"interface_\"..n..\"_packetstotal\"",
          "41:   for _, t in pairs({tb, tp, tbt, tpt}) do",
          "42:      if isEmptyString(target) or string.starts(t, target) or string.starts(target, t) then",
          "43:         res[#res +1] = t",
          "44:      end",
          "45:   end",
          "47:       end",
          "48:    end",
          "50:    print(json.encode(res, nil))",
          "51: end",
          "",
          "---------------"
        ],
        "scripts/lumodules/grafana_utils.lua||scripts/lua/modules/grafana_utils.lua": [
          "File: scripts/lumodules/grafana_utils.lua -> scripts/lua/modules/grafana_utils.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- (C) 2013-17 - ntop.org",
          "3: --",
          "5: dirs = ntop.getDirs()",
          "6: package.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path",
          "7: require \"lua_utils\"",
          "9: json = require(\"dkjson\")",
          "11: function isCORSpreflight()",
          "12:    if _SERVER[\"REQUEST_METHOD\"] == \"OPTIONS\"",
          "13:      and isEmptyString(_SERVER[\"Access-Control-Request-Method\"]) == false",
          "14:      and isEmptyString(_SERVER[\"Access-Control-Request-Headers\"]) == false then",
          "15:  return true",
          "16:    end",
          "17:    return false",
          "18: end",
          "20: function processCORSpreflight()",
          "21:    local corsh = {}",
          "22:    corsh[\"Access-Control-Allow-Origin\"] = \"*\"",
          "23:    corsh[\"Access-Control-Allow-Methods\"] = \"POST, OPTIONS\"",
          "24:    corsh[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\"",
          "25:    sendHTTPHeader('text/plain', nil, corsh)",
          "26: end",
          "28: function toEpoch(datestring)",
          "29:    -- parse",
          "30:    local pattern = \"(%d+)%-(%d+)%-(%d+)%a(%d+)%:(%d+)%:([%d%.]+)([Z%p])\"",
          "31:    local year, month, day, hour, minute, seconds, tzoffset = datestring:match(pattern)",
          "32:    assert(tzoffset == \"Z\")",
          "33:    local timestamp = os.time( { year=year, month=month, day=day, hour=hour, min=minute, sec=seconds })",
          "35:    -- convert to localtime",
          "36:    -- for this conversion we need precalculated value \"zone_diff\"",
          "37:    local d1 = os.date(\"*t\",  timestamp)",
          "38:    local d2 = os.date(\"!*t\", timestamp)",
          "39:    d1.isdst = false",
          "40:    local zone_diff = os.difftime(os.time(d1), os.time(d2))",
          "42:    -- now we can perform the conversion (dt -> ux_time):",
          "43:    timestamp = timestamp + zone_diff",
          "45:    -- tprint({datestring=datestring, year=year, month=month, day=day, hour=hour, minute=minute, seconds=seconds, tzoffset=tzoffset, timestamp=timestamp})",
          "47:    return timestamp",
          "48: end",
          "50: if _GRAFANA == nil then",
          "51:    _GRAFANA = {}",
          "52: end",
          "54: if not isEmptyString(_GRAFANA[\"payload\"]) then",
          "55:    _GRAFANA[\"payload\"] = json.decode(_GRAFANA[\"payload\"])",
          "56: else",
          "57:    _GRAFANA[\"payload\"] = {}",
          "58: end",
          "",
          "---------------"
        ],
        "scripts/lumodules/graph_utils.lua||scripts/lua/modules/graph_utils.lua": [
          "File: scripts/lumodules/graph_utils.lua -> scripts/lua/modules/graph_utils.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1159:    if tonumber(global_max_num_points) ~= nil then",
          "1160:       max_num_points = global_max_num_points",
          "1161:    end",
          "",
          "---------------"
        ],
        "scripts/lumodules/lua_utils.lua||scripts/lua/modules/lua_utils.lua": [
          "File: scripts/lumodules/lua_utils.lua -> scripts/lua/modules/lua_utils.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: function sendHTTPHeaderIfName(mime, ifname, maxage, content_disposition, extra_headers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   if type(extra_headers) == \"table\" then",
          "107:      for hname, hval in pairs(extra_headers) do",
          "108:  print(hname..': '..hval..'\\r\\n')",
          "109:      end",
          "110:   end",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: function sendHTTPHeader(mime, content_disposition, extra_headers)",
          "124:   sendHTTPHeaderIfName(mime, nil, 3600, content_disposition, extra_headers)",
          "",
          "---------------"
        ],
        "src/HTTPserver.cpp||src/HTTPserver.cpp": [
          "File: src/HTTPserver.cpp -> src/HTTPserver.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: static int isWhitelistedURI(char *uri) {",
          "205:   if((!strcmp(uri,    LOGIN_URL))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: static int checkGrafana(const struct mg_connection *conn,",
          "204:    const struct mg_request_info *request_info) {",
          "207:     && !strncmp(request_info->uri, GRAFANA_URL, strlen(GRAFANA_URL)))",
          "209:     return(1);",
          "211:   return(0);",
          "212: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     && checkCaptive(conn, request_info, username, password));",
          "256:   }",
          "258:   if(user_login_disabled) {",
          "259:     mg_get_cookie(conn, \"user\", username, username_len);",
          "260:     if(strncmp(username, NTOP_NOLOGIN_USER, username_len)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   if(checkGrafana(conn, request_info) == 1) {",
          "272:     return(1);",
          "273:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650:       redirect_to_login(conn, request_info, (referer[0] == '\\0') ? NULL : referer);",
          "651:       return(0);",
          "652:     } else {",
          "657:       ntop->fixPath(path);",
          "658:       found = ((stat(path, &buf) == 0) && (S_ISREG(buf.st_mode))) ? true : false;",
          "659:     }",
          "",
          "[Removed Lines]",
          "653:       snprintf(path, sizeof(path), \"%s%s\", httpserver->get_scripts_dir(),",
          "654:         Utils::getURL(len == 1 ? (char*)\"/lua/index.lua\" : request_info->uri,",
          "655:         uri, sizeof(uri)));",
          "",
          "[Added Lines]",
          "670:       snprintf(path, sizeof(path), \"%s%s%s\",",
          "671:         httpserver->get_scripts_dir(),",
          "672:         Utils::getURL(len == 1 ? (char*)\"/lua/index.lua\" : request_info->uri, uri, sizeof(uri)),",
          "673:         len > 1 && request_info->uri[len-1] == '/' ? (char*)\"index.lua\" : (char*)\"\");",
          "675:       if(strlen(path) > 4 && strncmp(&path[strlen(path) - 4], \".lua\", 4))",
          "676:  snprintf(&path[strlen(path)], sizeof(path) - strlen(path) - 1, \"%s\", (char*)\".lua\");",
          "",
          "---------------"
        ],
        "src/Lua.cpp||src/Lua.cpp": [
          "File: src/Lua.cpp -> src/Lua.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6323:   char buf[64], key[64], ifname[MAX_INTERFACE_NAME_LEN];",
          "6324:   char *_cookies, user[64] = { '\\0' };",
          "6325:   AddressTree ptree;",
          "6327:   const char * content_type;",
          "6329:   if(!L) return(-1);",
          "",
          "[Removed Lines]",
          "6326:   int rc;",
          "",
          "[Added Lines]",
          "6326:   int rc, post_data_len;",
          "6328:   u_int8_t valid_csrf = 1;",
          "6329:   char post_data[1024] = { '\\0' };",
          "6330:   char rsp[32];",
          "6331:   char csrf[64] = { '\\0' };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6340:   if((strcmp(request_info->request_method, \"POST\") == 0) &&",
          "6341:       ((content_type != NULL) && (strstr(content_type, \"application/x-www-form-urlencoded\") == content_type))) {",
          "6349:     post_data[sizeof(post_data)-1] = '\\0';",
          "",
          "[Removed Lines]",
          "6342:     char post_data[1024] = { '\\0' };",
          "6343:     char rsp[32];",
          "6344:     char csrf[64] = { '\\0' };",
          "6345:     char user[64] = { '\\0' };",
          "6346:     int post_data_len = mg_read(conn, post_data, sizeof(post_data));",
          "6347:     u_int8_t valid_csrf = 1;",
          "",
          "[Added Lines]",
          "6347:     post_data_len = mg_read(conn, post_data, sizeof(post_data));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6378:   } else",
          "6379:     setParamsTable(L, \"_POST\", NULL /* Empty */);",
          "6382:   if(request_info->query_string)",
          "6383:     setParamsTable(L, \"_GET\", request_info->query_string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6381:   if(!strcmp(request_info->request_method, \"POST\")",
          "6382:      && ((content_type != NULL) && (strstr(content_type, \"application/json\") == content_type))",
          "6383:      && !strncmp(request_info->uri, GRAFANA_URL, strlen(GRAFANA_URL))) {",
          "6384:     lua_newtable(L);",
          "6385:     post_data_len = mg_read(conn, post_data, sizeof(post_data));",
          "6386:     post_data[sizeof(post_data)-1] = '\\0';",
          "6387:     lua_push_str_table_entry(L, \"payload\", post_data);",
          "6388:     lua_setglobal(L, \"_GRAFANA\");",
          "6389:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}