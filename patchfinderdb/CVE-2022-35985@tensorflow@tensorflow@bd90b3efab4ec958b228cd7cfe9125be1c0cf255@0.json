{
  "cve_id": "CVE-2022-35985",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `LRNGrad` is given an `output_image` input tensor that is not 4-D, it results in a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit bd90b3efab4ec958b228cd7cfe9125be1c0cf255. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "bd90b3efab4ec958b228cd7cfe9125be1c0cf255",
  "patch_info": {
    "commit_hash": "bd90b3efab4ec958b228cd7cfe9125be1c0cf255",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/bd90b3efab4ec958b228cd7cfe9125be1c0cf255",
    "files": [
      "tensorflow/core/kernels/lrn_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
    ],
    "message": "Fix security vulnerability with LRNGradOp\n\nPiperOrigin-RevId: 460738938",
    "before_after_code_files": [
      "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc": [
      "File: tensorflow/core/kernels/lrn_op.cc -> tensorflow/core/kernels/lrn_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "668:         in_image.dim_size(0) == batch && in_image.dim_size(1) == rows &&",
      "669:             in_image.dim_size(2) == cols && in_image.dim_size(3) == depth &&",
      "670:             out_image.dim_size(0) == batch && out_image.dim_size(1) == rows &&",
      "672:         errors::InvalidArgument(",
      "673:             \"input_grads, input_image, and out_image should have the same \"",
      "674:             \"shape\"));",
      "",
      "[Removed Lines]",
      "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth,",
      "",
      "[Added Lines]",
      "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth &&",
      "672:             out_image.dims() == 4,",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py -> tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: from tensorflow.python.framework import constant_op",
      "22: from tensorflow.python.framework import dtypes",
      "23: from tensorflow.python.framework import test_util",
      "24: from tensorflow.python.ops import array_ops",
      "25: from tensorflow.python.ops import gradient_checker",
      "26: from tensorflow.python.ops import gradients_impl",
      "27: from tensorflow.python.ops import nn",
      "28: import tensorflow.python.ops.nn_grad  # pylint: disable=unused-import",
      "29: from tensorflow.python.platform import test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: from tensorflow.python.framework import errors_impl",
      "29: from tensorflow.python.ops import random_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:     self.assertAllClose(r, expected)",
      "112:     self.assertShapeEqual(expected, grad)",
      "114:   def _RunAndVerifyGradients(self, dtype):",
      "115:     with self.cached_session():",
      "116:       # random shape",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:   @test_util.run_in_graph_and_eager_modes",
      "117:   def testIncompatibleInputAndOutputImageShapes(self):",
      "118:     depth_radius = 1",
      "119:     bias = 1.59018219",
      "120:     alpha = 0.117728651",
      "121:     beta = 0.404427052",
      "122:     input_grads = random_ops.random_uniform(",
      "123:         shape=[4, 4, 4, 4],",
      "124:         minval=-10000,",
      "125:         maxval=10000,",
      "126:         dtype=dtypes.float32,",
      "127:         seed=-2033)",
      "128:     input_image = random_ops.random_uniform(",
      "129:         shape=[4, 4, 4, 4],",
      "130:         minval=-10000,",
      "131:         maxval=10000,",
      "132:         dtype=dtypes.float32,",
      "133:         seed=-2033)",
      "134:     invalid_output_image = random_ops.random_uniform(",
      "135:         shape=[4, 4, 4, 4, 4, 4],",
      "136:         minval=-10000,",
      "137:         maxval=10000,",
      "138:         dtype=dtypes.float32,",
      "139:         seed=-2033)",
      "140:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
      "141:       self.evaluate(",
      "142:           nn.lrn_grad(",
      "143:               input_grads=input_grads,",
      "144:               input_image=input_image,",
      "145:               output_image=invalid_output_image,",
      "146:               depth_radius=depth_radius,",
      "147:               bias=bias,",
      "148:               alpha=alpha,",
      "149:               beta=beta))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d7f1f1c175ab90941a1946780a2c68bb08c3e40",
      "candidate_info": {
        "commit_hash": "8d7f1f1c175ab90941a1946780a2c68bb08c3e40",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8d7f1f1c175ab90941a1946780a2c68bb08c3e40",
        "files": [
          "tensorflow/core/kernels/lrn_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
        ],
        "message": "Fix security vulnerability with LRNGradOp\n\nPiperOrigin-RevId: 460738938",
        "before_after_code_files": [
          "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc": [
          "File: tensorflow/core/kernels/lrn_op.cc -> tensorflow/core/kernels/lrn_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:         in_image.dim_size(0) == batch && in_image.dim_size(1) == rows &&",
          "669:             in_image.dim_size(2) == cols && in_image.dim_size(3) == depth &&",
          "670:             out_image.dim_size(0) == batch && out_image.dim_size(1) == rows &&",
          "672:         errors::InvalidArgument(",
          "673:             \"input_grads, input_image, and out_image should have the same \"",
          "674:             \"shape\"));",
          "",
          "[Removed Lines]",
          "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth,",
          "",
          "[Added Lines]",
          "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth &&",
          "672:             out_image.dims() == 4,",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py -> tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from tensorflow.python.framework import constant_op",
          "22: from tensorflow.python.framework import dtypes",
          "23: from tensorflow.python.framework import test_util",
          "24: from tensorflow.python.ops import array_ops",
          "25: from tensorflow.python.ops import gradient_checker",
          "26: from tensorflow.python.ops import gradients_impl",
          "27: from tensorflow.python.ops import nn",
          "28: import tensorflow.python.ops.nn_grad  # pylint: disable=unused-import",
          "29: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import errors_impl",
          "29: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     self.assertAllClose(r, expected)",
          "112:     self.assertShapeEqual(expected, grad)",
          "114:   def _RunAndVerifyGradients(self, dtype):",
          "115:     with self.cached_session():",
          "116:       # random shape",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   @test_util.run_in_graph_and_eager_modes",
          "117:   def testIncompatibleInputAndOutputImageShapes(self):",
          "118:     depth_radius = 1",
          "119:     bias = 1.59018219",
          "120:     alpha = 0.117728651",
          "121:     beta = 0.404427052",
          "122:     input_grads = random_ops.random_uniform(",
          "123:         shape=[4, 4, 4, 4],",
          "124:         minval=-10000,",
          "125:         maxval=10000,",
          "126:         dtype=dtypes.float32,",
          "127:         seed=-2033)",
          "128:     input_image = random_ops.random_uniform(",
          "129:         shape=[4, 4, 4, 4],",
          "130:         minval=-10000,",
          "131:         maxval=10000,",
          "132:         dtype=dtypes.float32,",
          "133:         seed=-2033)",
          "134:     invalid_output_image = random_ops.random_uniform(",
          "135:         shape=[4, 4, 4, 4, 4, 4],",
          "136:         minval=-10000,",
          "137:         maxval=10000,",
          "138:         dtype=dtypes.float32,",
          "139:         seed=-2033)",
          "140:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "141:       self.evaluate(",
          "142:           nn.lrn_grad(",
          "143:               input_grads=input_grads,",
          "144:               input_image=input_image,",
          "145:               output_image=invalid_output_image,",
          "146:               depth_radius=depth_radius,",
          "147:               bias=bias,",
          "148:               alpha=alpha,",
          "149:               beta=beta))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5e77ca68f312c53032771f274d9a3059ca7bd4",
      "candidate_info": {
        "commit_hash": "9c5e77ca68f312c53032771f274d9a3059ca7bd4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9c5e77ca68f312c53032771f274d9a3059ca7bd4",
        "files": [
          "tensorflow/core/kernels/lrn_op.cc",
          "tensorflow/python/kernel_tests/lrn_op_test.py"
        ],
        "message": "Fix security vulnerability with LRNGradOp\n\nPiperOrigin-RevId: 460738938",
        "before_after_code_files": [
          "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
          "tensorflow/python/kernel_tests/lrn_op_test.py||tensorflow/python/kernel_tests/lrn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc": [
          "File: tensorflow/core/kernels/lrn_op.cc -> tensorflow/core/kernels/lrn_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:         in_image.dim_size(0) == batch && in_image.dim_size(1) == rows &&",
          "669:             in_image.dim_size(2) == cols && in_image.dim_size(3) == depth &&",
          "670:             out_image.dim_size(0) == batch && out_image.dim_size(1) == rows &&",
          "672:         errors::InvalidArgument(",
          "673:             \"input_grads, input_image, and out_image should have the same \"",
          "674:             \"shape\"));",
          "",
          "[Removed Lines]",
          "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth,",
          "",
          "[Added Lines]",
          "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth &&",
          "672:             out_image.dims() == 4,",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/lrn_op_test.py||tensorflow/python/kernel_tests/lrn_op_test.py": [
          "File: tensorflow/python/kernel_tests/lrn_op_test.py -> tensorflow/python/kernel_tests/lrn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.framework import constant_op",
          "26: from tensorflow.python.framework import dtypes",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gradient_checker",
          "30: from tensorflow.python.ops import gradients_impl",
          "31: from tensorflow.python.ops import nn",
          "32: import tensorflow.python.ops.nn_grad  # pylint: disable=unused-import",
          "33: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors_impl",
          "33: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     self.assertAllClose(r, expected)",
          "116:     self.assertShapeEqual(expected, grad)",
          "118:   def _RunAndVerifyGradients(self, dtype):",
          "119:     with self.cached_session():",
          "120:       # random shape",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   @test_util.run_in_graph_and_eager_modes",
          "121:   def testIncompatibleInputAndOutputImageShapes(self):",
          "122:     depth_radius = 1",
          "123:     bias = 1.59018219",
          "124:     alpha = 0.117728651",
          "125:     beta = 0.404427052",
          "126:     input_grads = random_ops.random_uniform(",
          "127:         shape=[4, 4, 4, 4],",
          "128:         minval=-10000,",
          "129:         maxval=10000,",
          "130:         dtype=dtypes.float32,",
          "131:         seed=-2033)",
          "132:     input_image = random_ops.random_uniform(",
          "133:         shape=[4, 4, 4, 4],",
          "134:         minval=-10000,",
          "135:         maxval=10000,",
          "136:         dtype=dtypes.float32,",
          "137:         seed=-2033)",
          "138:     invalid_output_image = random_ops.random_uniform(",
          "139:         shape=[4, 4, 4, 4, 4, 4],",
          "140:         minval=-10000,",
          "141:         maxval=10000,",
          "142:         dtype=dtypes.float32,",
          "143:         seed=-2033)",
          "144:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "145:       self.evaluate(",
          "146:           nn.lrn_grad(",
          "147:               input_grads=input_grads,",
          "148:               input_image=input_image,",
          "149:               output_image=invalid_output_image,",
          "150:               depth_radius=depth_radius,",
          "151:               bias=bias,",
          "152:               alpha=alpha,",
          "153:               beta=beta))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2219b7084e5ad6357227d897e2eacc6489a0f86",
      "candidate_info": {
        "commit_hash": "e2219b7084e5ad6357227d897e2eacc6489a0f86",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e2219b7084e5ad6357227d897e2eacc6489a0f86",
        "files": [
          "tensorflow/core/kernels/lrn_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
        ],
        "message": "Fix security vulnerability with LRNGradOp\n\nPiperOrigin-RevId: 460738938",
        "before_after_code_files": [
          "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/lrn_op.cc||tensorflow/core/kernels/lrn_op.cc": [
          "File: tensorflow/core/kernels/lrn_op.cc -> tensorflow/core/kernels/lrn_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:         in_image.dim_size(0) == batch && in_image.dim_size(1) == rows &&",
          "669:             in_image.dim_size(2) == cols && in_image.dim_size(3) == depth &&",
          "670:             out_image.dim_size(0) == batch && out_image.dim_size(1) == rows &&",
          "672:         errors::InvalidArgument(",
          "673:             \"input_grads, input_image, and out_image should have the same \"",
          "674:             \"shape\"));",
          "",
          "[Removed Lines]",
          "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth,",
          "",
          "[Added Lines]",
          "671:             out_image.dim_size(2) == cols && out_image.dim_size(3) == depth &&",
          "672:             out_image.dims() == 4,",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py||tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py -> tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from tensorflow.python.framework import constant_op",
          "22: from tensorflow.python.framework import dtypes",
          "23: from tensorflow.python.framework import test_util",
          "24: from tensorflow.python.ops import array_ops",
          "25: from tensorflow.python.ops import gradient_checker",
          "26: from tensorflow.python.ops import gradients_impl",
          "27: from tensorflow.python.ops import nn",
          "28: import tensorflow.python.ops.nn_grad  # pylint: disable=unused-import",
          "29: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import errors_impl",
          "29: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     self.assertAllClose(r, expected)",
          "112:     self.assertShapeEqual(expected, grad)",
          "114:   def _RunAndVerifyGradients(self, dtype):",
          "115:     with self.cached_session():",
          "116:       # random shape",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   @test_util.run_in_graph_and_eager_modes",
          "117:   def testIncompatibleInputAndOutputImageShapes(self):",
          "118:     depth_radius = 1",
          "119:     bias = 1.59018219",
          "120:     alpha = 0.117728651",
          "121:     beta = 0.404427052",
          "122:     input_grads = random_ops.random_uniform(",
          "123:         shape=[4, 4, 4, 4],",
          "124:         minval=-10000,",
          "125:         maxval=10000,",
          "126:         dtype=dtypes.float32,",
          "127:         seed=-2033)",
          "128:     input_image = random_ops.random_uniform(",
          "129:         shape=[4, 4, 4, 4],",
          "130:         minval=-10000,",
          "131:         maxval=10000,",
          "132:         dtype=dtypes.float32,",
          "133:         seed=-2033)",
          "134:     invalid_output_image = random_ops.random_uniform(",
          "135:         shape=[4, 4, 4, 4, 4, 4],",
          "136:         minval=-10000,",
          "137:         maxval=10000,",
          "138:         dtype=dtypes.float32,",
          "139:         seed=-2033)",
          "140:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "141:       self.evaluate(",
          "142:           nn.lrn_grad(",
          "143:               input_grads=input_grads,",
          "144:               input_image=input_image,",
          "145:               output_image=invalid_output_image,",
          "146:               depth_radius=depth_radius,",
          "147:               bias=bias,",
          "148:               alpha=alpha,",
          "149:               beta=beta))",
          "",
          "---------------"
        ]
      }
    }
  ]
}