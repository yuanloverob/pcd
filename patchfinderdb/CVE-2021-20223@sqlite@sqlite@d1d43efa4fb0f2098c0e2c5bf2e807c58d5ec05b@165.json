{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07066d90f6931445e365b48543e63a2124f0860d",
      "candidate_info": {
        "commit_hash": "07066d90f6931445e365b48543e63a2124f0860d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07066d90f6931445e365b48543e63a2124f0860d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/busy2.test"
        ],
        "message": "Fix test script busy2.test so that it works with the inmemory-journal permutation.\n\nFossilOrigin-Name: b412d1d175fde9c6402b6fda7c73ac2db2471f2c9416d5c5073549732dea6d98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/busy2.test||test/busy2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d62d1711e2b0f18bb4dfb8899299c8e5b4c8205989b719699da60bcfe1884cf3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/busy2.test||test/busy2.test": [
          "File: test/busy2.test -> test/busy2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   # Configure all connections to use a 1000 ms timeout.",
          "61:   #",
          "62:   do_test 2.$tn.0 {",
          "63:     sql1 {",
          "64:       PRAGMA auto_vacuum = off;",
          "65:       PRAGMA journal_mode = wal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     code1 {",
          "64:       sqlite3 db1.2 test.db",
          "65:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:       db2 timeout 1000",
          "71:     }",
          "72:     code1 {",
          "74:       db1.2 timeout 1000",
          "75:       db    timeout 1000",
          "76:       db1.2 eval {SELECT * FROM t1}",
          "",
          "[Removed Lines]",
          "73:       sqlite3 db1.2 test.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4b36306576fcc053f3e7f9fcfd990340bdb96e8",
      "candidate_info": {
        "commit_hash": "b4b36306576fcc053f3e7f9fcfd990340bdb96e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b4b36306576fcc053f3e7f9fcfd990340bdb96e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/window1.test"
        ],
        "message": "Remove a NEVER() that is no longer true. Fix for [36ffedcb9].\n\nFossilOrigin-Name: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3b5fc05c00fc58be7a7c94ce1d97a5b05113f39aba03df64aab08364f85616b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5451: static int exprSrcCount(Walker *pWalker, Expr *pExpr){",
          "5458:     int i;",
          "5459:     struct SrcCount *p = pWalker->u.pSrcCount;",
          "5460:     SrcList *pSrc = p->pSrc;",
          "",
          "[Removed Lines]",
          "5457:   if( pExpr->op==TK_COLUMN || NEVER(pExpr->op==TK_AGG_COLUMN) ){",
          "",
          "[Added Lines]",
          "5458:   if( pExpr->op==TK_COLUMN || pExpr->op==TK_AGG_COLUMN ){",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1491:   SELECT a, 1+sum(b) OVER (ORDER BY a) AS abc FROM t1 ORDER BY (SELECT abc)",
          "1492: } {1 {misuse of aliased window function abc}}",
          "1494: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1494: #-------------------------------------------------------------------------",
          "1495: reset_db",
          "1496: do_execsql_test 44.1 {",
          "1497:   CREATE TABLE t0(c0);",
          "1498: }",
          "1500: do_catchsql_test 44.2.1 {",
          "1501:   SELECT ntile(0) OVER ();",
          "1502: } {1 {argument of ntile must be a positive integer}}",
          "1503: do_catchsql_test 44.2.2 {",
          "1504:   SELECT (0, 0) IN(SELECT MIN(c0), NTILE(0) OVER()) FROM t0;",
          "1505: } {1 {argument of ntile must be a positive integer}}",
          "1507: do_execsql_test 44.3.1 {",
          "1508:   SELECT ntile(1) OVER ();",
          "1509: } {1}",
          "1510: do_execsql_test 44.3.2 {",
          "1511:   SELECT (0, 0) IN(SELECT MIN(c0), NTILE(1) OVER()) FROM t0;",
          "1512: } {0}",
          "1514: do_execsql_test 44.4.2 {",
          "1515:   INSERT INTO t0 VALUES(2), (1), (0);",
          "1516:   SELECT (0, 1) IN(SELECT MIN(c0), NTILE(1) OVER()) FROM t0;",
          "1517: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bde3a4f680b7c99ae918aa0477e81541ebdafbe5",
      "candidate_info": {
        "commit_hash": "bde3a4f680b7c99ae918aa0477e81541ebdafbe5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bde3a4f680b7c99ae918aa0477e81541ebdafbe5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Minor simplification to the changes from check-in [36c11ad51f].\n\nFossilOrigin-Name: 7bc8205dd9c1657c736a9c6a1a90dd9dad442accfbb77d296eaae2c09ab46bd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36c11ad51fe9ab1bde0b98d0ea9b8588e07d168cd8027486749372894941ad93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:         x1 = pIdx->aiColumn[i];",
          "1060:         x2 = sqlite3TableColumnToStorage(pTab, x1);",
          "1061:         testcase( x1!=x2 );",
          "1063:       }",
          "1064:       sqlite3VdbeChangeP4(v, -1, (char*)ai, P4_INTARRAY);",
          "1065:     }",
          "",
          "[Removed Lines]",
          "1062:         if( pIdx->aiColumn[i]>=0 ) ai[x2+1] = i+1;",
          "",
          "[Added Lines]",
          "1062:         if( x1>=0 ) ai[x2+1] = i+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d8c287309d5d7a50c134630d504c2d8886cc783",
      "candidate_info": {
        "commit_hash": "9d8c287309d5d7a50c134630d504c2d8886cc783",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d8c287309d5d7a50c134630d504c2d8886cc783",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/vdbe.c",
          "src/where.c",
          "src/window.c",
          "test/in6.test",
          "test/window4.tcl",
          "test/window4.test",
          "test/window9.test"
        ],
        "message": "Merge changes from trunk.\n\nFossilOrigin-Name: 93d710262eb046e2370660b1096ac634373755f92a2e9b1220df3b2bda5f9eeb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "test/in6.test||test/in6.test",
          "test/window4.tcl||test/window4.tcl",
          "test/window4.test||test/window4.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4945a66237fa3861bc691d5fbef0d40286b596a0902b4f4c032d1d6528bb1a1b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     if( OK_IF_ALWAYS_TRUE(p->pWinDefn) ){",
          "104:       sqlite3WindowListDelete(db, p->pWinDefn);",
          "105:     }",
          "107: #endif",
          "108:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "109:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "",
          "[Removed Lines]",
          "106:     assert( p->pWin==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3830:   assert( OPFLAG_BULKCSR==BTREE_BULKLOAD );",
          "3831:   assert( OPFLAG_SEEKEQ==BTREE_SEEK_EQ );",
          "3832:   testcase( pOp->p5 & OPFLAG_BULKCSR );",
          "3834:   testcase( pOp->p2 & OPFLAG_SEEKEQ );",
          "3836:   sqlite3BtreeCursorHintFlags(pCur->uc.pCursor,",
          "3837:                                (pOp->p5 & (OPFLAG_BULKCSR|OPFLAG_SEEKEQ)));",
          "3838:   if( rc ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "3833: #ifdef SQLITE_ENABLE_CURSOR_HINTS",
          "3835: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4253:       goto abort_due_to_error;",
          "4254:     }",
          "4255:   }else{",
          "4260:     if( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ) ){",
          "4261:       eqOnly = 1;",
          "4262:       assert( pOp->opcode==OP_SeekGE || pOp->opcode==OP_SeekLE );",
          "4263:       assert( pOp[1].opcode==OP_IdxLT || pOp[1].opcode==OP_IdxGT );",
          "4264:       assert( pOp[1].p1==pOp[0].p1 );",
          "4265:       assert( pOp[1].p2==pOp[0].p2 );",
          "4266:       assert( pOp[1].p3==pOp[0].p3 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4267:       assert( pOp->opcode==OP_SeekGE || pOp[1].opcode==OP_IdxLT );",
          "4268:       assert( pOp->opcode==OP_SeekLE || pOp[1].opcode==OP_IdxGT );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5178:          && (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0",
          "5179:          && pWInfo->eDistinct!=WHERE_DISTINCT_ORDERED",
          "5180:         ){",
          "5182:         }",
          "5183:         VdbeComment((v, \"%s\", pIx->zName));",
          "5184: #ifdef SQLITE_ENABLE_COLUMN_USED_MASK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5181:           sqlite3VdbeChangeP5(v, OPFLAG_SEEKEQ);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5336:         if( pIn->eEndLoopOp!=OP_Noop ){",
          "5337:           if( pIn->nPrefix ){",
          "5338:             assert( pLoop->wsFlags & WHERE_IN_EARLYOUT );",
          "5345:             if( pLevel->iLeftJoin ){",
          "",
          "[Removed Lines]",
          "5339:             if( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "5340:               sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5341:                   sqlite3VdbeCurrentAddr(v)+2+(pLevel->iLeftJoin!=0),",
          "5342:                   pIn->iBase, pIn->nPrefix);",
          "5343:               VdbeCoverage(v);",
          "5344:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5354:               sqlite3VdbeAddOp2(v, OP_IfNotOpen, pIn->iCur,",
          "5356:               );",
          "5357:               VdbeCoverage(v);",
          "5358:             }",
          "5359:           }",
          "5360:           sqlite3VdbeAddOp2(v, pIn->eEndLoopOp, pIn->iCur, pIn->addrInTop);",
          "5361:           VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "5355:                   sqlite3VdbeCurrentAddr(v) + 2",
          "",
          "[Added Lines]",
          "5349:                   sqlite3VdbeCurrentAddr(v) + 2 +",
          "5350:                      ((pLoop->wsFlags & WHERE_VIRTUALTABLE)==0)",
          "5354:             if( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "5355:               sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5356:                   sqlite3VdbeCurrentAddr(v)+2,",
          "5357:                   pIn->iBase, pIn->nPrefix);",
          "5358:               VdbeCoverage(v);",
          "5359:             }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     Table *pTab;",
          "937:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
          "938:     if( pTab==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "936:     u32 selFlags = p->selFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1022:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "1023:       pSub->selFlags |= SF_Expanded;",
          "1024:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_NONE);",
          "1025:       if( pTab2==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1026:       pSub->selFlags |= (selFlags & SF_Aggregate);",
          "",
          "---------------"
        ],
        "test/in6.test||test/in6.test": [
          "File: test/in6.test -> test/in6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   ORDER BY +d;",
          "78: } {1 {} 2 {} 3 {} 4 {} 5 {} 8 {} 9 {}}",
          "80: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: # 2020-03-16 ticket 82b588d342d515d1",
          "81: # Ensure that the IN-early-out optimization works with LEFT JOINs",
          "82: #",
          "83: reset_db",
          "84: do_execsql_test in6-3.100 {",
          "85:   CREATE TABLE t1(a);",
          "86:   INSERT INTO t1 VALUES(0);",
          "87:   CREATE TABLE t2(b, c, d);",
          "88:   INSERT INTO t2(b,c,d) VALUES(4,5,3),(4,5,4),(4,5,8);",
          "89:   CREATE INDEX t2bcd ON t2(b, c, d);",
          "90:   SELECT * FROM t1 LEFT JOIN t2 ON b=NULL AND c=5 AND d IN (2,3,4);",
          "91: } {0 {} {} {}}",
          "92: do_execsql_test in6-3.110 {",
          "93:   CREATE TABLE v0(v1);",
          "94:   CREATE TABLE v3(v5, v4);",
          "95:   INSERT INTO v0 VALUES(0);",
          "96:   CREATE INDEX v9 ON v3(v4, v4, v5);",
          "97:   SELECT quote(v5) FROM v0 LEFT JOIN v3 ON v4 = NULL AND v5 IN(0);",
          "98: } {NULL}",
          "",
          "---------------"
        ],
        "test/window4.tcl||test/window4.tcl": [
          "File: test/window4.tcl -> test/window4.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:   ) sub;",
          "386: }",
          "388: execsql_test 12.0 {",
          "389:   DROP TABLE IF EXISTS t2;",
          "390:   CREATE TABLE t2(a INTEGER);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388: execsql_test 11.5 {",
          "389:   SELECT sum( min(t) ) OVER () FROM t8 GROUP BY total;",
          "390: }",
          "391: execsql_test 11.5 {",
          "392:   SELECT sum( max(t) ) OVER () FROM t8 GROUP BY total;",
          "393: }",
          "395: execsql_test 11.7 {",
          "396:   SELECT sum( min(t) ) OVER () FROM t8;",
          "397: }",
          "398: execsql_test 11.8 {",
          "399:   SELECT sum( max(t) ) OVER () FROM t8;",
          "400: }",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1324:   ) sub;",
          "1325: } {0   1   2}",
          "1327: do_execsql_test 12.0 {",
          "1328:   DROP TABLE IF EXISTS t2;",
          "1329:   CREATE TABLE t2(a INTEGER);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327: do_execsql_test 11.5 {",
          "1328:   SELECT sum( min(t) ) OVER () FROM t8 GROUP BY total;",
          "1329: } {5   5}",
          "1331: do_execsql_test 11.5 {",
          "1332:   SELECT sum( max(t) ) OVER () FROM t8 GROUP BY total;",
          "1333: } {10   10}",
          "1335: do_execsql_test 11.7 {",
          "1336:   SELECT sum( min(t) ) OVER () FROM t8;",
          "1337: } {0}",
          "1339: do_execsql_test 11.8 {",
          "1340:   SELECT sum( max(t) ) OVER () FROM t8;",
          "1341: } {10}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:   7.2 8.75 10.0 11.0 15.0",
          "233: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #-------------------------------------------------------------------------",
          "236: reset_db",
          "237: do_execsql_test 8.1.1 {",
          "238:   CREATE TABLE t1(a, b);",
          "239:   INSERT INTO t1 VALUES(1, 2), (3, 4);",
          "240:   SELECT min( sum(a) ) OVER () FROM t1;",
          "241: } {4}",
          "243: do_execsql_test 8.1.2 {",
          "244:   SELECT min( sum(a) ) OVER () FROM t1 GROUP BY a;",
          "245: } {1 1}",
          "247: do_execsql_test 8.2 {",
          "248:   CREATE VIEW v1 AS",
          "249:     SELECT 0 AS x",
          "250:       UNION",
          "251:     SELECT count() OVER() FROM (SELECT 0)",
          "252:     ORDER BY 1",
          "253:   ;",
          "254: }",
          "256: do_catchsql_test 8.3 {",
          "257:   SELECT min( max((SELECT x FROM v1)) ) OVER()",
          "258: } {1 {misuse of aggregate: max()}}",
          "260: do_execsql_test 8.4 {",
          "261:   SELECT(",
          "262:       SELECT x UNION",
          "263:       SELECT sum( avg((SELECT x FROM v1)) ) OVER()",
          "264:   )",
          "265:   FROM v1;",
          "266: } {0.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dc90d43e5c330324f311282879cd82eb96d0651",
      "candidate_info": {
        "commit_hash": "0dc90d43e5c330324f311282879cd82eb96d0651",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0dc90d43e5c330324f311282879cd82eb96d0651",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test case added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 14a5cbddc887e23a684fabab1a213cce261bd6cffa0663d4f138b92d0b65b9c2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a4a40c45feb2bb89020dc7711b4753479112ceae7ce2a44521d72afeddfac83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}