{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "759e9cc0647c9c802572eef4835dfb967fdbe302",
      "candidate_info": {
        "commit_hash": "759e9cc0647c9c802572eef4835dfb967fdbe302",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/759e9cc0647c9c802572eef4835dfb967fdbe302",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Add a test case for commit [ffd8bb93].\n\nFossilOrigin-Name: bcd5b37b8ebd67537f60c0061fcbc70b2aebebb88d6fb842ccf321a3e20c122c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffd8bb9351fbd8c1285491d4e10734f6816689de6042d640c178a5ecda75a5ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:     INSERT INTO t1(b,c) SELECT last_insert_rowid(), x FROM c;",
          "1139: } {1 {database disk image is malformed}}",
          "1142: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141: #-------------------------------------------------------------------------",
          "1142: reset_db",
          "1143: do_test 14.0 {",
          "1144:   sqlite3 db {}",
          "1145:   db deserialize [decode_hexdb {",
          "1146: | size 512 pagesize 65536 filename clusterfuzz-testcase-minimized-sqlite3_dbfuzz2_fuzzer-4806406219825152",
          "1147: | page 1 offset 0",
          "1148: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1149: |     16: 00 01 02 01 00 40 20 20 00 63 2e 78 00 00 00 07   .....@  .c.x....",
          "1150: |     32: 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 04   ................",
          "1151: |     48: 00 00 00 00 00 00 01 00 35 05 43 00 04 00 00 00   ........5.C.....",
          "1152: |     80: 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 0c   ................",
          "1153: |     96: 00 2e 2c 50 0d 00 00 00 03 00 00 00 01 da 01 b0   ..,P............",
          "1154: |    112: 01 56 01 86 01 2a 01 02 00 00 00 00 00 00 00 1c   .V...*..........",
          "1155: |    128: 00 38 80 b2 e6 0e 00 00 00 00 00 00 00 00 00 10   .8..............",
          "1156: |    144: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "1157: |    160: 00 00 00 00 00 00 00 00 00 00 00 00 45 20 54 41   ............E TA",
          "1158: |    256: 00 00 00 00 00 00 22 07 06 17 11 11 01 35 74 61   .............5ta",
          "1159: |    272: 62 6c 00 10 00 00 34 07 43 52 54 45 20 54 41 42   bl....4.CRTE TAB",
          "1160: |    288: 4c 45 20 74 33 28 63 2e 78 2c 65 2c 66 15 28 3a   LE t3(c.x,e,f.(:",
          "1161: |    304: 06 17 11 11 01 65 78 8c cc 87 85 35 05 43 72 45   .....ex....5.CrE",
          "1162: |    320: 41 54 48 20 49 4e 44 45 58 20 74 33 78 20 4f 4e   ATH INDEX t3x ON",
          "1163: |    336: 20 74 33 28 78 39 2e 04 06 17 15 11 01 45 69 6e    t3(x9.......Ein",
          "1164: |    352: 64 65 78 74 32 63 64 74 32 05 43 52 45 41 54 45   dext2cdt2.CREATE",
          "1165: |    368: 20 49 4e 44 45 58 20 74 32 63 64 20 4f 4e 20 74    INDEX t2cd ON t",
          "1166: |    384: 32 28 63 2a 44 29 28 05 fa e8 ee ed 01 3d 74 63   2(c*D)(......=tc",
          "1167: |    400: 62 6c 65 74 33 74 33 07 43 52 45 41 54 45 20 54   blet3t3.CREATE T",
          "1168: |    416: 41 42 4c 45 20 74 33 28 63 2e 78 2c 65 2c 66 15   ABLE t3(c.x,e,f.",
          "1169: |    432: 28 3a 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (:.....=tablet2t",
          "1170: |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "1171: |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "1172: |    480: 01 35 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .5tablet1t1.CREA",
          "1173: |    496: 54 45 20 54 41 42 4c 45 20 74 31 28 61 2c 63 29   TE TABLE t1(a,c)",
          "1174: | end clusterfuzz-testcase-minimized-sqlite3_dbfuzz2_fuzzer-4806406219825152",
          "1175: }]} {}",
          "1177: do_catchsql_test 14.1 {",
          "1178:   PRAGMA integrity_check;",
          "1179: } {1 {database disk image is malformed}}",
          "1181: do_catchsql_test 14.2 {",
          "1182:   ALTER TABLE t1 RENAME TO alkjalkjdfiiiwuer987lkjwer82mx97sf98788s9789s;",
          "1183: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05b32ee3c0788fbe3d210ade38e186c903678556",
      "candidate_info": {
        "commit_hash": "05b32ee3c0788fbe3d210ade38e186c903678556",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05b32ee3c0788fbe3d210ade38e186c903678556",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/trustschema1.test"
        ],
        "message": "Fix a problem that restricted edgy functions in TEMP tables. New test cases added.\n\nFossilOrigin-Name: 8878c40753566a8c4ccd1d413019cabde7569b947f730527d13bfc3db384e97d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/trustschema1.test||test/trustschema1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da434dc149786e4b1cd80b3b2b25f8b614d0dec62d5439f839a66b536999e398",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:         }else{",
          "878:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "880:         }",
          "881:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "882:          && pParse->nested==0",
          "",
          "[Removed Lines]",
          "879:           if( pExpr->op2 ) ExprSetProperty(pExpr, EP_FromDDL);",
          "",
          "[Added Lines]",
          "879:           if( pNC->ncFlags & NC_FromDDL ) ExprSetProperty(pExpr, EP_FromDDL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1884:     sSrc.a[0].zName = pTab->zName;",
          "1885:     sSrc.a[0].pTab = pTab;",
          "1886:     sSrc.a[0].iCursor = -1;",
          "1887:   }",
          "1888:   sNC.pParse = pParse;",
          "1889:   sNC.pSrcList = &sSrc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1887:     if( pTab->pSchema!=pParse->db->aDb[1].pSchema ){",
          "1890:       type |= NC_FromDDL;",
          "1891:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/trustschema1.test||test/trustschema1.test": [
          "File: test/trustschema1.test -> test/trustschema1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix trustschema1",
          "21: proc f1 {x} {return $x}",
          "22: do_test 1.100 {",
          "23:   db function f1 -innocuous -deterministic f1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: # edgy functions used in generated columns",
          "21: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: do_catchsql_test 1.140 {",
          "41:   SELECT a, b, c FROM t1;",
          "42: } {1 {unsafe use of f2()}}",
          "44: do_catchsql_test 1.200 {",
          "45:   CREATE TABLE t2(a,b,c,CHECK(f3(c)==c));",
          "46: } {1 {unsafe use of f3()}}",
          "47: do_catchsql_test 1.210 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: do_catchsql_test 1.150 {",
          "45:   PRAGMA trusted_schema=ON;",
          "46:   DROP TABLE t1;",
          "47:   CREATE TABLE t1(a, b AS (f3(a+1)));",
          "48: } {1 {unsafe use of f3()}}",
          "49: do_execsql_test 1.160 {",
          "50:   PRAGMA trusted_schema=OFF;",
          "51:   CREATE TEMP TABLE temp1(a,b AS (f3(a+1)));",
          "52:   INSERT INTO temp1(a) VALUES(100),(900);",
          "53:   SELECT * FROM temp1;",
          "54: } {100 101 900 901}",
          "56: # edgy functions used in CHECK constraints",
          "57: #",
          "59:   PRAGMA trusted_schema=ON;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: do_execsql_test 1.231 {",
          "64:   SELECT * FROM t2;",
          "65: } {1 2 3}",
          "67: do_catchsql_test 1.300 {",
          "68:   CREATE TABLE t3(a,b DEFAULT(f2(25)));",
          "69: } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: # Ok to put as many edgy functions as you want in a",
          "82: # TEMP table.",
          "83: do_execsql_test 1.240 {",
          "84:   PRAGMA trusted_schema=OFF;",
          "85:   CREATE TEMP TABLE temp2(a, b, CHECK(f3(b)==b));",
          "86:   INSERT INTO temp2(a,b) VALUES(1,2),('x','y');",
          "87:   SELECT * FROM temp2;",
          "88: } {1 2 x y}",
          "90: # edgy functions used in DEFAULT constraints",
          "91: #",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74: do_catchsql_test 1.311 {",
          "75:   INSERT INTO t3(a,b) VALUES(1,2);",
          "76: } {0 {}}",
          "78: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: do_execsql_test 1.320 {",
          "103:   CREATE TEMP TABLE temp3(a, b DEFAULT(f3(31)));",
          "104:   INSERT INTO temp3(a) VALUES(22);",
          "105:   SELECT * FROM temp3;",
          "106: } {22 31}",
          "108: # edgy functions used in partial indexes.",
          "109: #",
          "110: do_execsql_test 1.400 {",
          "111:   CREATE TABLE t4(a,b,c);",
          "112:   INSERT INTO t4 VALUES(1,2,3),('a','b','c'),(4,'d',0);",
          "113:   SELECT * FROM t4;",
          "114:   CREATE TEMP TABLE temp4(a,b,c);",
          "115:   INSERT INTO temp4 SELECT * FROM t4;",
          "116: } {1 2 3 a b c 4 d 0}",
          "117: do_catchsql_test 1.410 {",
          "118:   CREATE INDEX t4a ON t4(a) WHERE f3(c);",
          "119: } {1 {unsafe use of f3()}}",
          "120: do_catchsql_test 1.420 {",
          "121:   PRAGMA trusted_schema=OFF;",
          "122:   CREATE INDEX t4a ON t4(a) WHERE f2(c);",
          "123: } {1 {unsafe use of f2()}}",
          "124: do_execsql_test 1.421 {",
          "125:   CREATE INDEX t4a ON t4(a) WHERE f1(c);",
          "126:   SELECT a FROM t4 WHERE f1(c) ORDER BY a;",
          "127: } {1}",
          "128: do_execsql_test 1.430 {",
          "129:   PRAGMA trusted_schema=ON;",
          "130:   CREATE INDEX t4b ON t4(b) WHERE f2(c);",
          "131:   SELECT b FROM t4 WHERE f2(c) ORDER BY b;",
          "132: } {2}",
          "133: do_execsql_test 1.440 {",
          "134:   PRAGMA trusted_schema=OFF;",
          "135:   CREATE INDEX temp4a ON temp4(a) WHERE f3(c);",
          "136:   SELECT a FROM temp4 WHERE f2(c) ORDER BY a;",
          "137: } {1}",
          "139: # edgy functions used in index expressions",
          "140: #",
          "141: do_execsql_test 1.500 {",
          "142:   CREATE TABLE t5(a,b,c);",
          "143:   INSERT INTO t5 VALUES(1,2,3),(4,5,6),(7,0,-3);",
          "144:   SELECT * FROM t5;",
          "145:   CREATE TEMP TABLE temp5(a,b,c);",
          "146:   INSERT INTO temp5 SELECT * FROM t5;",
          "147: } {1 2 3 4 5 6 7 0 -3}",
          "148: do_catchsql_test 1.510 {",
          "149:   CREATE INDEX t5x1 ON t5(a+f3(b));",
          "150: } {1 {unsafe use of f3()}}",
          "151: do_catchsql_test 1.520 {",
          "152:   PRAGMA trusted_schema=OFF;",
          "153:   CREATE INDEX t5x1 ON t5(a+f2(b));",
          "154: } {1 {unsafe use of f2()}}",
          "155: do_execsql_test 1.521 {",
          "156:   CREATE INDEX t5x1 ON t5(a+f1(b));",
          "157:   SELECT * FROM t5 INDEXED BY t5x1 WHERE a+f1(b)=3;",
          "158: } {1 2 3}",
          "159: do_execsql_test 1.530 {",
          "160:   PRAGMA trusted_schema=ON;",
          "161:   CREATE INDEX t5x2 ON t5(b+f2(c));",
          "162:   SELECT * FROM t5 INDEXED BY t5x2 WHERE b+f2(c)=11;",
          "163: } {4 5 6}",
          "164: do_execsql_test 1.540 {",
          "165:   PRAGMA trusted_schema=OFF;",
          "166:   CREATE INDEX temp5x1 ON temp5(a+f3(b));",
          "167:   SELECT * FROM temp5 INDEXED BY temp5x1 WHERE a+f3(b)=7;",
          "168: } {7 0 -3}",
          "170: # edgy functions in VIEWs",
          "171: #",
          "172: reset_db",
          "173: db function f1 -innocuous -deterministic f1",
          "174: db function f2 -deterministic f1",
          "175: db function f3 -directonly -deterministic f1",
          "176: do_execsql_test 2.100 {",
          "177:   CREATE TABLE t1(a,b,c);",
          "178:   INSERT INTO t1 VALUES(1,2,3),(100,50,75),(-11,22,-33);",
          "179:   CREATE VIEW v1a AS SELECT f3(a+b) FROM t1;",
          "180:   SELECT f3(a+b) FROM t1;",
          "181: } {3 150 11}",
          "182: do_catchsql_test 2.110 {",
          "183:   PRAGMA trusted_schema=ON;",
          "184:   SELECT * FROM v1a;",
          "185: } {1 {unsafe use of f3()}}",
          "186: do_catchsql_test 2.111 {",
          "187:   PRAGMA trusted_schema=OFF;",
          "188:   SELECT * FROM v1a;",
          "189: } {1 {unsafe use of f3()}}",
          "190: do_execsql_test 2.120 {",
          "191:   DROP VIEW v1a;",
          "192:   CREATE TEMP VIEW v1a AS SELECT f3(a+b) FROM t1;",
          "193:   SELECT * FROM v1a;",
          "194: } {3 150 11}",
          "195: do_execsql_test 2.130 {",
          "196:   CREATE VIEW v1b AS SELECT f2(b+c) FROM t1;",
          "197:   SELECT f2(b+c) FROM t1;",
          "198: } {5 125 -11}",
          "199: do_catchsql_test 2.140 {",
          "200:   PRAGMA trusted_schema=ON;",
          "201:   SELECT * FROM v1b;",
          "202: } {0 {5 125 -11}}",
          "203: do_catchsql_test 2.141 {",
          "204:   PRAGMA trusted_schema=OFF;",
          "205:   SELECT * FROM v1b;",
          "206: } {1 {unsafe use of f2()}}",
          "207: do_execsql_test 2.150 {",
          "208:   DROP VIEW v1b;",
          "209:   CREATE TEMP VIEW v1b AS SELECT f2(b+c) FROM t1;",
          "210:   SELECT * FROM v1b;",
          "211: } {5 125 -11}",
          "213: # edgy functions inside of triggers",
          "214: #",
          "215: do_execsql_test 3.100 {",
          "216:   DELETE FROM t1;",
          "217:   CREATE TABLE t2(x);",
          "218:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "219:     INSERT INTO t2(x) SELECT f3(new.a);",
          "220:   END;",
          "221: } {}",
          "222: do_catchsql_test 3.110 {",
          "223:   INSERT INTO t1 VALUES(7,6,5);",
          "224: } {1 {unsafe use of f3()}}",
          "225: do_execsql_test 3.111 {",
          "226:   SELECT * FROM t1;",
          "227:   SELECT * FROM t2;",
          "228: } {}",
          "230: do_execsql_test 3.120 {",
          "231:   DROP TRIGGER r1;",
          "232:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "233:     INSERT INTO t2(x) SELECT f2(new.a)+100;",
          "234:   END;",
          "235:   PRAGMA trusted_schema=ON;",
          "236:   INSERT INTO t1 VALUES(7,6,5);",
          "237:   SELECT * FROM t1, t2;",
          "238: } {7 6 5 107}",
          "239: do_catchsql_test 3.130 {",
          "240:   DELETE FROM t1;",
          "241:   DELETE FROM t2;",
          "242:   PRAGMA trusted_schema=OFF;",
          "243:   INSERT INTO t1 VALUES(7,6,5);",
          "244: } {1 {unsafe use of f2()}}",
          "245: do_execsql_test 3.131 {",
          "246:   SELECT * FROM t1;",
          "247:   SELECT * FROM t2;",
          "248: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac4f7cf8d33cd751b150625560e53821f81375d8",
      "candidate_info": {
        "commit_hash": "ac4f7cf8d33cd751b150625560e53821f81375d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac4f7cf8d33cd751b150625560e53821f81375d8",
        "files": [
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Make sure the bbox object is fully initialized in geopoly, even if reading a corrupted database.\n\nFossilOrigin-Name: fd5abb1a7b5a55127d5c0d5ff448020d8bccab44e4f5afe1eb88fc19578af735",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "683:       aCoord[2].f = mnY;",
          "684:       aCoord[3].f = mxY;",
          "685:     }",
          "686:   }",
          "687:   return pOut;",
          "688: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:   }else{",
          "687:     memset(aCoord, 0, sizeof(RtreeCoord)*4);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 094dcfe779613301521e8bb990432df187b3686add75a3420b4a193f02f3467f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc705da15d0af088db099aa5c8c2b26fa63fe951",
      "candidate_info": {
        "commit_hash": "fc705da15d0af088db099aa5c8c2b26fa63fe951",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc705da15d0af088db099aa5c8c2b26fa63fe951",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/select1.test"
        ],
        "message": "When generating code for a subquery, make a copy of the Select object and generate the code out of the copy, in case the code generator makes modifications to expression and the Select object needs to be reused.\n\nFossilOrigin-Name: 4edddcc0bc8d71e9b8abac67bc3766f1d9143dddd1f59264859ce65e5aa9b8c6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ce1417325273aba866767349b55d9bbfb61a08e716bebda2122918a9657ee38c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3016:     pSel->pLimit = sqlite3PExpr(pParse, TK_LIMIT, pLimit, 0);",
          "3017:   }",
          "3018:   pSel->iLimit = 0;",
          "3022:   pExpr->iTable = rReg = dest.iSDParm;",
          "3023:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "3024:   if( addrOnce ){",
          "",
          "[Removed Lines]",
          "3019:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "3020:     return 0;",
          "3021:   }",
          "",
          "[Added Lines]",
          "3026:   pCopy = sqlite3SelectDup(pParse->db, pSel, 0);",
          "3027:   rc = sqlite3Select(pParse, pCopy, &dest);",
          "3028:   sqlite3SelectDelete(pParse->db, pCopy);",
          "3029:   if( rc ) return 0;",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1184:     ORDER BY 1;",
          "1185: } {1 {table t1 has 1 columns but 15 values were supplied}}",
          "1188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1187: # 2020-01-01 Found by Yongheng's fuzzer",
          "1188: #",
          "1189: reset_db",
          "1190: do_execsql_test select-20.10 {",
          "1191:   CREATE TABLE t1 (",
          "1192:     a INTEGER PRIMARY KEY,",
          "1193:     b AS('Y') UNIQUE",
          "1194:   );",
          "1195:   INSERT INTO t1(a) VALUES (10);",
          "1196:   SELECT * FROM t1 JOIN t1 USING(a,b)",
          "1197:    WHERE ((SELECT t1.a FROM t1 AS x GROUP BY b) AND b=0)",
          "1198:       OR a = 10;",
          "1199: } {10 Y}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e88d6364c80c88977911e303ed825c8d93dc72a",
      "candidate_info": {
        "commit_hash": "7e88d6364c80c88977911e303ed825c8d93dc72a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e88d6364c80c88977911e303ed825c8d93dc72a",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak in fts5 error handling code.\n\nFossilOrigin-Name: de6637e15d95b7aee2caea8b8d5b9865f276cbbf152ecf0401c4c7bfdf6dee6f",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1438:       rc = sqlite3_reset(pCsr->pStmt);",
          "1439:       if( rc==SQLITE_OK ){",
          "1440:         rc = FTS5_CORRUPT;",
          "1443:             \"%s\", sqlite3_errmsg(pTab->pConfig->db)",
          "1444:         );",
          "1445:       }",
          "",
          "[Removed Lines]",
          "1441:       }else{",
          "1442:         pTab->base.zErrMsg = sqlite3_mprintf(",
          "",
          "[Added Lines]",
          "1441:       }else if( pTab->pConfig->pzErrmsg ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2457:       }",
          "2458:     }",
          "2459:   }else if( !fts5IsContentless(pTab) ){",
          "2460:     rc = fts5SeekCursor(pCsr, 1);",
          "2461:     if( rc==SQLITE_OK ){",
          "2462:       sqlite3_result_value(pCtx, sqlite3_column_value(pCsr->pStmt, iCol+1));",
          "2463:     }",
          "2464:   }",
          "2465:   return rc;",
          "2466: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2460:     pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "2465:     pConfig->pzErrmsg = 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9774:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "9775: } {1 {database disk image is malformed}}",
          "9779: sqlite3_fts5_may_be_corrupt 0",
          "9780: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9777: #-------------------------------------------------------------------------",
          "9778: #",
          "9779: reset_db",
          "9780: do_test 67.0 {",
          "9781:   sqlite3 db {}",
          "9782:   db deserialize [decode_hexdb {",
          "9783: .open --hexdb",
          "9784: | size 24576 pagesize 4096 filename crash-43ed0ad79c0194.db",
          "9785: | page 1 offset 0",
          "9786: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "9787: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "9788: |     96: 00 00 00 00 0d 00 00 00 06 0d e2 00 0f c4 0f 6a   ...............j",
          "9789: |    112: 0e fc 0e 9d 0e 3d 0d e2 01 00 00 00 00 00 00 00   .....=..........",
          "9790: |   3552: 00 00 59 06 06 17 21 21 01 7f 74 61 62 6c 65 74   ..Y...!!..tablet",
          "9791: |   3568: 74 74 5f 63 6f 6e 66 69 67 74 74 74 5f 63 6f 6e   tt_configttt_con",
          "9792: |   3584: 66 69 67 06 43 52 45 41 54 45 20 54 41 42 4c 45   fig.CREATE TABLE",
          "9793: |   3600: 20 27 74 74 74 5f 63 6f 6e 66 69 67 27 28 6b 20    'ttt_config'(k",
          "9794: |   3616: 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20   PRIMARY KEY, v)",
          "9795: |   3632: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5e 05 07   WITHOUT ROWID^..",
          "9796: |   3648: 17 23 23 01 81 03 74 61 62 6c 65 74 74 74 5f 64   .##...tablettt_d",
          "9797: |   3664: 6f 63 73 69 7a 65 74 74 74 5f 64 6f 63 73 69 7a   ocsizettt_docsiz",
          "9798: |   3680: 65 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   e.CREATE TABLE '",
          "9799: |   3696: 74 74 74 5f 64 6f 63 73 69 7a 65 27 28 69 64 20   ttt_docsize'(id",
          "9800: |   3712: 49 4e 54 45 47 45 52 20 51 52 49 4d 41 52 59 20   INTEGER QRIMARY",
          "9801: |   3728: 4b 45 59 2c 20 73 7a 20 42 4c 4f 42 29 5d 04 07   KEY, sz BLOB)]..",
          "9802: |   3744: 17 23 23 01 81 01 74 61 62 6c 65 74 74 74 5f 63   .##...tablettt_c",
          "9803: |   3760: 6f 6e 74 65 6e 74 74 74 74 5f 63 6f 6e 74 65 6e   ontentttt_conten",
          "9804: |   3776: 74 04 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   t.CREATE TABLE '",
          "9805: |   3792: 74 74 74 5f 63 6f 6e 74 65 6e 74 27 28 69 64 20   ttt_content'(id",
          "9806: |   3808: 49 4e 54 45 47 45 52 20 50 52 49 4d 41 f1 59 20   INTEGER PRIMA.Y",
          "9807: |   3824: 4b 45 59 2c 20 63 30 2c 20 63 31 29 6c 03 07 17   KEY, c0, c1)l...",
          "9808: |   3840: 1b 1b 01 81 2f 74 61 62 6c 65 74 74 74 5f 69 64   ..../tablettt_id",
          "9809: |   3856: 78 74 74 74 5f 69 64 78 03 43 52 45 41 54 45 20   xttt_idx.CREATE",
          "9810: |   3872: 54 41 42 4c 45 20 27 74 74 74 5f 69 64 78 27 28   TABLE 'ttt_idx'(",
          "9811: |   3888: 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70 67 6e   segid, term, pgn",
          "9812: |   3904: 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59 28 73   o, PRIMARY KEY(s",
          "9813: |   3920: 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57 49 54   egid, term)) WIT",
          "9814: |   3936: 48 4f 55 54 20 52 4f 57 49 44 58 02 07 17 1d 1d   HOUT ROWIDX.....",
          "9815: |   3952: 01 81 03 74 61 62 6c 65 74 74 74 5f 64 61 74 61   ...tablettt_data",
          "9816: |   3968: 74 74 74 5f 64 61 74 61 02 43 52 45 41 54 45 20   ttt_data.CREATE",
          "9817: |   3984: 54 41 42 4c 45 20 27 74 74 74 5f 64 61 74 61 27   TABLE 'ttt_data'",
          "9818: |   4000: 28 69 64 20 49 4e 54 45 47 55 52 20 50 52 49 4d   (id INTEGUR PRIM",
          "9819: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "9820: |   4032: 4c 50 42 29 3a 02 06 17 13 13 08 5f 74 61 62 6c   LPB):......_tabl",
          "9821: |   4048: 65 74 74 74 74 74 74 43 52 45 41 54 45 20 56 49   ettttttCREATE VI",
          "9822: |   4064: 52 54 55 41 4c 20 54 41 42 4c 45 20 74 74 74 20   RTUAL TABLE ttt",
          "9823: |   4080: 55 53 49 4e 47 20 66 74 73 35 28 61 2c 20 62 29   USING fts5(a, b)",
          "9824: | page 2 offset 4096",
          "9825: |      0: 0d 0f 44 00 05 0e 71 00 0f e7 0e 81 0f af 0f 58   ..D...q........X",
          "9826: |     16: 0e 98 01 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "9827: |   3712: 00 15 0a 03 00 30 00 00 00 00 01 03 03 00 03 01   .....0..........",
          "9828: |   3728: 01 01 02 01 01 03 01 01 81 24 8c 80 80 80 80 01   .........$......",
          "9829: |   3744: 04 00 82 4c 00 00 00 9b 02 30 65 03 1a 12 05 05   ...L.....0e.....",
          "9830: |   3760: 07 05 01 01 04 03 03 08 04 03 01 2e 02 05 f7 07   ................",
          "9831: |   3776: 01 e6 f5 07 05 01 01 04 03 03 01 22 03 18 03 03   ................",
          "9832: |   3792: 08 03 03 02 01 65 03 1e 03 05 05 04 05 05 01 01   .....e..........",
          "9833: |   3808: 03 06 03 f4 06 04 03 00 36 03 ff 05 04 05 05 04   ........6.......",
          "9834: |   3824: 05 05 04 05 04 f1 01 03 06 04 04 06 04 04 06 04   ................",
          "9835: |   3840: 04 07 04 03 03 01 65 03 14 04 05 07 05 05 01 01   ......e.........",
          "9836: |   3856: 02 08 a5 01 20 04 05 01 94 f7 05 07 05 05 01 01   .... ...........",
          "9837: |   3872: 02 08 0a 0a 0a 04 01 65 03 02 0a 00 06 0a 0a 0a   .......e........",
          "9838: |   3888: 05 01 65 03 06 a7 01 0a 01 0a 01 01 0a 0a 0a 04   ..e.............",
          "9839: |   3904: 2b 31 21 0b 0f ef 00 14 2a 00 00 00 00 01 02 02   +1!.....*.......",
          "9840: |   3920: 00 02 01 01 01 02 11 01 50 88 80 80 80 80 01 04   ........P.......",
          "9841: |   3936: 00 81 24 00 00 00 47 02 30 65 02 1a 02 05 05 07   ..$...G.0e......",
          "9842: |   3952: 05 e6 01 07 aa e3 08 03 03 02 01 65 02 1e 03 05   ...........e....",
          "9843: |   3968: 05 05 04 f5 01 01 03 06 04 04 06 04 13 03 01 65   ...............e",
          "9844: |   3984: 02 14 04 05 07 05 05 01 f7 f2 08 0a 04 01 65 02   ..............e.",
          "9845: |   4000: 02 0a 05 01 65 02 06 00 f1 0a 04 12 14 0f 06 31   ....e..........1",
          "9846: |   4016: 84 80 80 80 80 01 03 00 68 00 00 00 2b 02 30 65   ........h...+.0e",
          "9847: |   4032: 01 10 02 05 05 00 01 04 03 03 02 01 65 01 12 03   ............e...",
          "9848: |   4048: 05 05 01 01 03 06 04 03 03 01 65 01 0e 04 05 04   ..........e.....",
          "9849: |   4064: 01 01 02 08 04 0d 0e 06 01 03 00 12 04 4c 4c 00   .............LL.",
          "9850: |   4080: 00 00 11 24 00 00 00 00 01 01 01 00 01 01 01 02   ...$............",
          "9851: | page 3 offset 8192",
          "9852: |      0: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "9853: | page 4 offset 12288",
          "9854: |   3600: 00 00 00 00 00 00 00 00 00 00 81 52 04 06 00 81   ...........R....",
          "9855: |   3616: 5d 81 55 65 20 65 65 20 65 65 65 20 65 20 65 65   ].Ue ee eee e ee",
          "9856: |   3632: 20 65 65 65 28 15 20 65 65 20 65 65 65 65 20 65    eee(. ee eeee e",
          "9857: |   3648: 65 20 65 65 65 20 65 20 65 65 20 65 65 65 20 65   e eee e ee eee e",
          "9858: |   3664: 20 65 65 20 65 65 65 65 20 65 66 20 65 65 55 20    ee eeee ef eeU",
          "9859: |   3680: 65 20 65 55 20 65 65 65 20 65 20 65 65 20 65 65   e eU eee e ee ee",
          "9860: |   3696: 65 64 20 65 61 c0 65 65 65 20 65 20 65 65 20 65   ed ea.eee e ee e",
          "9861: |   3712: 65 65 20 79 20 65 65 20 65 65 65 65 65 65 20 65   ee y ee eeeeee e",
          "9862: |   3728: 65 1f 65 20 65 20 65 20 65 65 20 65 65 65 20 65   e.e e e ee eee e",
          "9863: |   3744: 65 20 65 65 65 65 65 20 65 65 20 65 20 65 20 65   e eeeee ee e e e",
          "9864: |   3760: 20 65 65 20 65 65 65 20 6b 85 20 65 65 65 66 65    ee eee k. eeefe",
          "9865: |   3776: 20 65 65 10 65 20 65 20 65 20 65 65 20 65 65 65    ee.e e e ee eee",
          "9866: |   3792: 20 65 65 20 65 65 65 65 65 20 65 65 20 65 20 65    ee eeeee ee e e",
          "9867: |   3808: 20 65 20 65 65 20 65 65 65 20 65 65 20 65 65 6a    e ee eee ee eej",
          "9868: |   3824: 03 04 00 75 71 65 20 65 65 20 65 65 65 20 65 30   ...uqe ee eee e0",
          "9869: |   3840: 65 65 20 65 65 65 20 65 20 65 65 20 65 65 65 65   ee eee e ee eeee",
          "9870: |   3856: 20 65 65 20 65 65 65 20 65 1f 65 65 20 65 65 65    ee eee e.ee eee",
          "9871: |   3872: 20 65 20 65 65 20 65 65 65 65 65 66 20 65 65 20    e ee eeeeef ee",
          "9872: |   3888: 65 21 27 20 65 20 55 65 20 66 65 64 20 65 65 00   e!' e Ue fed ee.",
          "9873: | page 5 offset 16384",
          "9874: |   4064: 00 00 00 00 05 04 03 00 10 11 20 05 03 03 00 10   .......... .....",
          "9875: |   4080: 11 11 05 02 03 00 00 11 11 05 01 03 00 10 09 09   ................",
          "9876: | page 6 offset 20480",
          "9877: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 01 00 00 00 00   ................",
          "9878: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "9879: | end crash-43ed0ad79c0194.db",
          "9880: }]} {}",
          "9882: do_catchsql_test 67.1 {",
          "9883:   SELECT snippet(ttt, null,null,",
          "9884:       EXISTS(SELECT 1 FROM ttt('e NuOT ee*e*\u00cfNuOY ee*') ) , '',",
          "9885:       (SELECT 1 FROM ttt('eu NuOT ee*e* NuOY ee*'))",
          "9886:   ), * FROM ttt('e')",
          "9887: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}