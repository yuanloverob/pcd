{
  "cve_id": "CVE-2015-8961",
  "cve_desc": "The __ext4_journal_stop function in fs/ext4/ext4_jbd2.c in the Linux kernel before 4.3.3 allows local users to gain privileges or cause a denial of service (use-after-free) by leveraging improper access to a certain error field.",
  "repo": "torvalds/linux",
  "patch_hash": "6934da9238da947628be83635e365df41064b09b",
  "patch_info": {
    "commit_hash": "6934da9238da947628be83635e365df41064b09b",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6934da9238da947628be83635e365df41064b09b",
    "files": [
      "fs/ext4/ext4_jbd2.c"
    ],
    "message": "ext4: fix potential use after free in __ext4_journal_stop\n\nThere is a use-after-free possibility in __ext4_journal_stop() in the\ncase that we free the handle in the first jbd2_journal_stop() because\nwe're referencing handle->h_err afterwards. This was introduced in\n9705acd63b125dee8b15c705216d7186daea4625 and it is wrong. Fix it by\nstoring the handle->h_err value beforehand and avoid referencing\npotentially freed handle.\n\nFixes: 9705acd63b125dee8b15c705216d7186daea4625\nSigned-off-by: Lukas Czerner <lczerner@redhat.com>\nReviewed-by: Andreas Dilger <adilger@dilger.ca>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c": [
      "File: fs/ext4/ext4_jbd2.c -> fs/ext4/ext4_jbd2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:   return 0;",
      "89:  }",
      "91:  if (!handle->h_transaction) {",
      "94:  }",
      "96:  sb = handle->h_transaction->t_journal->j_private;",
      "98:  rc = jbd2_journal_stop(handle);",
      "100:  if (!err)",
      "",
      "[Removed Lines]",
      "92:   err = jbd2_journal_stop(handle);",
      "93:   return handle->h_err ? handle->h_err : err;",
      "97:  err = handle->h_err;",
      "",
      "[Added Lines]",
      "91:  err = handle->h_err;",
      "93:   rc = jbd2_journal_stop(handle);",
      "94:   return err ? err : rc;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d506594069355d1fb2de3f9104667312ff08ed3",
      "candidate_info": {
        "commit_hash": "9d506594069355d1fb2de3f9104667312ff08ed3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9d506594069355d1fb2de3f9104667312ff08ed3",
        "files": [
          "fs/ext4/ext4_jbd2.c",
          "fs/jbd2/transaction.c"
        ],
        "message": "ext4: fix NULL pointer dereference when journal restart fails\n\nCurrently when journal restart fails, we'll have the h_transaction of\nthe handle set to NULL to indicate that the handle has been effectively\naborted. We handle this situation quietly in the jbd2_journal_stop() and just\nfree the handle and exit because everything else has been done before we\nattempted (and failed) to restart the journal.\n\nUnfortunately there are a number of problems with that approach\nintroduced with commit\n\n41a5b913197c \"jbd2: invalidate handle if jbd2_journal_restart()\nfails\"\n\nFirst of all in ext4 jbd2_journal_stop() will be called through\n__ext4_journal_stop() where we would try to get a hold of the superblock\nby dereferencing h_transaction which in this case would lead to NULL\npointer dereference and crash.\n\nIn addition we're going to free the handle regardless of the refcount\nwhich is bad as well, because others up the call chain will still\nreference the handle so we might potentially reference already freed\nmemory.\n\nMoreover it's expected that we'll get aborted handle as well as detached\nhandle in some of the journalling function as the error propagates up\nthe stack, so it's unnecessary to call WARN_ON every time we get\ndetached handle.\n\nAnd finally we might leak some memory by forgetting to free reserved\nhandle in jbd2_journal_stop() in the case where handle was detached from\nthe transaction (h_transaction is NULL).\n\nFix the NULL pointer dereference in __ext4_journal_stop() by just\ncalling jbd2_journal_stop() quietly as suggested by Jan Kara. Also fix\nthe potential memory leak in jbd2_journal_stop() and use proper\nhandle refcounting before we attempt to free it to avoid use-after-free\nissues.\n\nAnd finally remove all WARN_ON(!transaction) from the code so that we do\nnot get random traces when something goes wrong because when journal\nrestart fails we will get to some of those functions.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Lukas Czerner <lczerner@redhat.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nReviewed-by: Jan Kara <jack@suse.cz>",
        "before_after_code_files": [
          "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c",
          "fs/jbd2/transaction.c||fs/jbd2/transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c"
          ],
          "candidate": [
            "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c": [
          "File: fs/ext4/ext4_jbd2.c -> fs/ext4/ext4_jbd2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   ext4_put_nojournal(handle);",
          "88:   return 0;",
          "89:  }",
          "90:  sb = handle->h_transaction->t_journal->j_private;",
          "91:  err = handle->h_err;",
          "92:  rc = jbd2_journal_stop(handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  if (!handle->h_transaction) {",
          "92:   err = jbd2_journal_stop(handle);",
          "93:   return handle->h_err ? handle->h_err : err;",
          "94:  }",
          "",
          "---------------"
        ],
        "fs/jbd2/transaction.c||fs/jbd2/transaction.c": [
          "File: fs/jbd2/transaction.c -> fs/jbd2/transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:  int result;",
          "552:  int wanted;",
          "555:  if (is_handle_aborted(handle))",
          "556:   return -EROFS;",
          "557:  journal = transaction->t_journal;",
          "",
          "[Removed Lines]",
          "554:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627:  tid_t  tid;",
          "628:  int  need_to_start, ret;",
          "633:  if (is_handle_aborted(handle))",
          "",
          "[Removed Lines]",
          "630:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "785:  int need_copy = 0;",
          "786:  unsigned long start_lock, time_lock;",
          "789:  if (is_handle_aborted(handle))",
          "790:   return -EROFS;",
          "791:  journal = transaction->t_journal;",
          "",
          "[Removed Lines]",
          "788:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1051:  int err;",
          "1053:  jbd_debug(5, \"journal_head %p\\n\", jh);",
          "1055:  err = -EROFS;",
          "1056:  if (is_handle_aborted(handle))",
          "1057:   goto out;",
          "",
          "[Removed Lines]",
          "1054:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1266:  struct journal_head *jh;",
          "1267:  int ret = 0;",
          "1270:  if (is_handle_aborted(handle))",
          "1271:   return -EROFS;",
          "1272:  journal = transaction->t_journal;",
          "",
          "[Removed Lines]",
          "1269:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1397:  int err = 0;",
          "1398:  int was_modified = 0;",
          "1401:  if (is_handle_aborted(handle))",
          "1402:   return -EROFS;",
          "1403:  journal = transaction->t_journal;",
          "",
          "[Removed Lines]",
          "1400:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1530:  tid_t tid;",
          "1531:  pid_t pid;",
          "1535:  journal = transaction->t_journal;",
          "1537:  J_ASSERT(journal_current_handle() == handle);",
          "",
          "[Removed Lines]",
          "1533:  if (!transaction)",
          "1534:   goto free_and_exit;",
          "",
          "[Added Lines]",
          "1527:  if (!transaction) {",
          "1533:   if (--handle->h_ref > 0) {",
          "1534:    jbd_debug(4, \"h_ref %d -> %d\\n\", handle->h_ref + 1,",
          "1535:         handle->h_ref);",
          "1536:    return err;",
          "1537:   } else {",
          "1538:    if (handle->h_rsv_handle)",
          "1539:     jbd2_free_handle(handle->h_rsv_handle);",
          "1540:    goto free_and_exit;",
          "1541:   }",
          "1542:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2373:  transaction_t *transaction = handle->h_transaction;",
          "2374:  journal_t *journal;",
          "2377:  if (is_handle_aborted(handle))",
          "2378:   return -EROFS;",
          "2379:  journal = transaction->t_journal;",
          "",
          "[Removed Lines]",
          "2376:  WARN_ON(!transaction);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}