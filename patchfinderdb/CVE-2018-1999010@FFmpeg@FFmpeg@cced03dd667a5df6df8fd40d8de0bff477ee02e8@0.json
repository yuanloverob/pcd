{
  "cve_id": "CVE-2018-1999010",
  "cve_desc": "FFmpeg before commit cced03dd667a5df6df8fd40d8de0bff477ee02e8 contains multiple out of array access vulnerabilities in the mms protocol that can result in attackers accessing out of bound data. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in cced03dd667a5df6df8fd40d8de0bff477ee02e8 and later.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "cced03dd667a5df6df8fd40d8de0bff477ee02e8",
  "patch_info": {
    "commit_hash": "cced03dd667a5df6df8fd40d8de0bff477ee02e8",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/cced03dd667a5df6df8fd40d8de0bff477ee02e8",
    "files": [
      "libavformat/mms.c"
    ],
    "message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavformat/mms.c||libavformat/mms.c"
    ]
  },
  "patch_diff": {
    "libavformat/mms.c||libavformat/mms.c": [
      "File: libavformat/mms.c -> libavformat/mms.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:                 }",
      "95:             }",
      "96:         } else if (!memcmp(p, ff_asf_stream_header, sizeof(ff_asf_guid))) {",
      "115:             }",
      "116:         } else if (!memcmp(p, ff_asf_ext_stream_header, sizeof(ff_asf_guid))) {",
      "117:             if (end - p >= 88) {",
      "",
      "[Removed Lines]",
      "97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
      "98:             stream_id = flags & 0x7F;",
      "102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
      "103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
      "104:                 mms->streams = av_fast_realloc(mms->streams,",
      "105:                                    &mms->nb_streams_allocated,",
      "106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
      "107:                 if (!mms->streams)",
      "108:                     return AVERROR(ENOMEM);",
      "109:                 mms->streams[mms->stream_num].id = stream_id;",
      "110:                 mms->stream_num++;",
      "111:             } else {",
      "112:                 av_log(NULL, AV_LOG_ERROR,",
      "113:                        \"Corrupt stream (too many A/V streams)\\n\");",
      "114:                 return AVERROR_INVALIDDATA;",
      "",
      "[Added Lines]",
      "97:             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {",
      "98:                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
      "99:                 stream_id = flags & 0x7F;",
      "103:                 if (mms->stream_num < MMS_MAX_STREAMS &&",
      "104:                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
      "105:                     mms->streams = av_fast_realloc(mms->streams,",
      "106:                                        &mms->nb_streams_allocated,",
      "107:                                        (mms->stream_num + 1) * sizeof(MMSStream));",
      "108:                     if (!mms->streams)",
      "109:                         return AVERROR(ENOMEM);",
      "110:                     mms->streams[mms->stream_num].id = stream_id;",
      "111:                     mms->stream_num++;",
      "112:                 } else {",
      "113:                     av_log(NULL, AV_LOG_ERROR,",
      "114:                            \"Corrupt stream (too many A/V streams)\\n\");",
      "115:                     return AVERROR_INVALIDDATA;",
      "116:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:             }",
      "144:         } else if (!memcmp(p, ff_asf_head1_guid, sizeof(ff_asf_guid))) {",
      "145:             chunksize = 46; // see references [2] section 3.4. This should be set 46.",
      "146:         }",
      "147:         p += chunksize;",
      "148:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:             if (chunksize > end - p) {",
      "149:                 av_log(NULL, AV_LOG_ERROR,",
      "150:                     \"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\",",
      "151:                     chunksize);",
      "152:                 return AVERROR_INVALIDDATA;",
      "153:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6d992a51c75aafba6e21bff95cddae9d717bc7e3",
      "candidate_info": {
        "commit_hash": "6d992a51c75aafba6e21bff95cddae9d717bc7e3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6d992a51c75aafba6e21bff95cddae9d717bc7e3",
        "files": [
          "libavformat/mms.c"
        ],
        "message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit cced03dd667a5df6df8fd40d8de0bff477ee02e8)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/mms.c||libavformat/mms.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mms.c||libavformat/mms.c"
          ],
          "candidate": [
            "libavformat/mms.c||libavformat/mms.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mms.c||libavformat/mms.c": [
          "File: libavformat/mms.c -> libavformat/mms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 }",
          "95:             }",
          "96:         } else if (!memcmp(p, ff_asf_stream_header, sizeof(ff_asf_guid))) {",
          "115:             }",
          "116:         } else if (!memcmp(p, ff_asf_ext_stream_header, sizeof(ff_asf_guid))) {",
          "117:             if (end - p >= 88) {",
          "",
          "[Removed Lines]",
          "97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "98:             stream_id = flags & 0x7F;",
          "102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
          "103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "104:                 mms->streams = av_fast_realloc(mms->streams,",
          "105:                                    &mms->nb_streams_allocated,",
          "106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
          "107:                 if (!mms->streams)",
          "108:                     return AVERROR(ENOMEM);",
          "109:                 mms->streams[mms->stream_num].id = stream_id;",
          "110:                 mms->stream_num++;",
          "111:             } else {",
          "112:                 av_log(NULL, AV_LOG_ERROR,",
          "113:                        \"Corrupt stream (too many A/V streams)\\n\");",
          "114:                 return AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "97:             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {",
          "98:                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "99:                 stream_id = flags & 0x7F;",
          "103:                 if (mms->stream_num < MMS_MAX_STREAMS &&",
          "104:                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "105:                     mms->streams = av_fast_realloc(mms->streams,",
          "106:                                        &mms->nb_streams_allocated,",
          "107:                                        (mms->stream_num + 1) * sizeof(MMSStream));",
          "108:                     if (!mms->streams)",
          "109:                         return AVERROR(ENOMEM);",
          "110:                     mms->streams[mms->stream_num].id = stream_id;",
          "111:                     mms->stream_num++;",
          "112:                 } else {",
          "113:                     av_log(NULL, AV_LOG_ERROR,",
          "114:                            \"Corrupt stream (too many A/V streams)\\n\");",
          "115:                     return AVERROR_INVALIDDATA;",
          "116:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:             }",
          "144:         } else if (!memcmp(p, ff_asf_head1_guid, sizeof(ff_asf_guid))) {",
          "145:             chunksize = 46; // see references [2] section 3.4. This should be set 46.",
          "146:         }",
          "147:         p += chunksize;",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             if (chunksize > end - p) {",
          "149:                 av_log(NULL, AV_LOG_ERROR,",
          "150:                     \"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\",",
          "151:                     chunksize);",
          "152:                 return AVERROR_INVALIDDATA;",
          "153:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feb31c7ade15719d292c20da60763173e2ba3991",
      "candidate_info": {
        "commit_hash": "feb31c7ade15719d292c20da60763173e2ba3991",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/feb31c7ade15719d292c20da60763173e2ba3991",
        "files": [
          "libavformat/mms.c"
        ],
        "message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit cced03dd667a5df6df8fd40d8de0bff477ee02e8)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/mms.c||libavformat/mms.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mms.c||libavformat/mms.c"
          ],
          "candidate": [
            "libavformat/mms.c||libavformat/mms.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mms.c||libavformat/mms.c": [
          "File: libavformat/mms.c -> libavformat/mms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 }",
          "95:             }",
          "96:         } else if (!memcmp(p, ff_asf_stream_header, sizeof(ff_asf_guid))) {",
          "115:             }",
          "116:         } else if (!memcmp(p, ff_asf_ext_stream_header, sizeof(ff_asf_guid))) {",
          "117:             if (end - p >= 88) {",
          "",
          "[Removed Lines]",
          "97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "98:             stream_id = flags & 0x7F;",
          "102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
          "103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "104:                 mms->streams = av_fast_realloc(mms->streams,",
          "105:                                    &mms->nb_streams_allocated,",
          "106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
          "107:                 if (!mms->streams)",
          "108:                     return AVERROR(ENOMEM);",
          "109:                 mms->streams[mms->stream_num].id = stream_id;",
          "110:                 mms->stream_num++;",
          "111:             } else {",
          "112:                 av_log(NULL, AV_LOG_ERROR,",
          "113:                        \"Corrupt stream (too many A/V streams)\\n\");",
          "114:                 return AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "97:             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {",
          "98:                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "99:                 stream_id = flags & 0x7F;",
          "103:                 if (mms->stream_num < MMS_MAX_STREAMS &&",
          "104:                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "105:                     mms->streams = av_fast_realloc(mms->streams,",
          "106:                                        &mms->nb_streams_allocated,",
          "107:                                        (mms->stream_num + 1) * sizeof(MMSStream));",
          "108:                     if (!mms->streams)",
          "109:                         return AVERROR(ENOMEM);",
          "110:                     mms->streams[mms->stream_num].id = stream_id;",
          "111:                     mms->stream_num++;",
          "112:                 } else {",
          "113:                     av_log(NULL, AV_LOG_ERROR,",
          "114:                            \"Corrupt stream (too many A/V streams)\\n\");",
          "115:                     return AVERROR_INVALIDDATA;",
          "116:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:             }",
          "144:         } else if (!memcmp(p, ff_asf_head1_guid, sizeof(ff_asf_guid))) {",
          "145:             chunksize = 46; // see references [2] section 3.4. This should be set 46.",
          "146:         }",
          "147:         p += chunksize;",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             if (chunksize > end - p) {",
          "149:                 av_log(NULL, AV_LOG_ERROR,",
          "150:                     \"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\",",
          "151:                     chunksize);",
          "152:                 return AVERROR_INVALIDDATA;",
          "153:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5da77e7e9e91a1f2a6b80f64f4202c0a4534e307",
      "candidate_info": {
        "commit_hash": "5da77e7e9e91a1f2a6b80f64f4202c0a4534e307",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/5da77e7e9e91a1f2a6b80f64f4202c0a4534e307",
        "files": [
          "libavformat/mms.c"
        ],
        "message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit cced03dd667a5df6df8fd40d8de0bff477ee02e8)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/mms.c||libavformat/mms.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mms.c||libavformat/mms.c"
          ],
          "candidate": [
            "libavformat/mms.c||libavformat/mms.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mms.c||libavformat/mms.c": [
          "File: libavformat/mms.c -> libavformat/mms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 }",
          "95:             }",
          "96:         } else if (!memcmp(p, ff_asf_stream_header, sizeof(ff_asf_guid))) {",
          "115:             }",
          "116:         } else if (!memcmp(p, ff_asf_ext_stream_header, sizeof(ff_asf_guid))) {",
          "117:             if (end - p >= 88) {",
          "",
          "[Removed Lines]",
          "97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "98:             stream_id = flags & 0x7F;",
          "102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
          "103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "104:                 mms->streams = av_fast_realloc(mms->streams,",
          "105:                                    &mms->nb_streams_allocated,",
          "106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
          "107:                 if (!mms->streams)",
          "108:                     return AVERROR(ENOMEM);",
          "109:                 mms->streams[mms->stream_num].id = stream_id;",
          "110:                 mms->stream_num++;",
          "111:             } else {",
          "112:                 av_log(NULL, AV_LOG_ERROR,",
          "113:                        \"Corrupt stream (too many A/V streams)\\n\");",
          "114:                 return AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "97:             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {",
          "98:                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "99:                 stream_id = flags & 0x7F;",
          "103:                 if (mms->stream_num < MMS_MAX_STREAMS &&",
          "104:                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "105:                     mms->streams = av_fast_realloc(mms->streams,",
          "106:                                        &mms->nb_streams_allocated,",
          "107:                                        (mms->stream_num + 1) * sizeof(MMSStream));",
          "108:                     if (!mms->streams)",
          "109:                         return AVERROR(ENOMEM);",
          "110:                     mms->streams[mms->stream_num].id = stream_id;",
          "111:                     mms->stream_num++;",
          "112:                 } else {",
          "113:                     av_log(NULL, AV_LOG_ERROR,",
          "114:                            \"Corrupt stream (too many A/V streams)\\n\");",
          "115:                     return AVERROR_INVALIDDATA;",
          "116:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:             }",
          "144:         } else if (!memcmp(p, ff_asf_head1_guid, sizeof(ff_asf_guid))) {",
          "145:             chunksize = 46; // see references [2] section 3.4. This should be set 46.",
          "146:         }",
          "147:         p += chunksize;",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             if (chunksize > end - p) {",
          "149:                 av_log(NULL, AV_LOG_ERROR,",
          "150:                     \"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\",",
          "151:                     chunksize);",
          "152:                 return AVERROR_INVALIDDATA;",
          "153:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d77a4a54d2f5c34a9cc7d3b3424d16e24515a0f",
      "candidate_info": {
        "commit_hash": "4d77a4a54d2f5c34a9cc7d3b3424d16e24515a0f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4d77a4a54d2f5c34a9cc7d3b3424d16e24515a0f",
        "files": [
          "libavformat/mms.c"
        ],
        "message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit cced03dd667a5df6df8fd40d8de0bff477ee02e8)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/mms.c||libavformat/mms.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mms.c||libavformat/mms.c"
          ],
          "candidate": [
            "libavformat/mms.c||libavformat/mms.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mms.c||libavformat/mms.c": [
          "File: libavformat/mms.c -> libavformat/mms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 }",
          "95:             }",
          "96:         } else if (!memcmp(p, ff_asf_stream_header, sizeof(ff_asf_guid))) {",
          "115:             }",
          "116:         } else if (!memcmp(p, ff_asf_ext_stream_header, sizeof(ff_asf_guid))) {",
          "117:             if (end - p >= 88) {",
          "",
          "[Removed Lines]",
          "97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "98:             stream_id = flags & 0x7F;",
          "102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
          "103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "104:                 mms->streams = av_fast_realloc(mms->streams,",
          "105:                                    &mms->nb_streams_allocated,",
          "106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
          "107:                 if (!mms->streams)",
          "108:                     return AVERROR(ENOMEM);",
          "109:                 mms->streams[mms->stream_num].id = stream_id;",
          "110:                 mms->stream_num++;",
          "111:             } else {",
          "112:                 av_log(NULL, AV_LOG_ERROR,",
          "113:                        \"Corrupt stream (too many A/V streams)\\n\");",
          "114:                 return AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "97:             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {",
          "98:                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "99:                 stream_id = flags & 0x7F;",
          "103:                 if (mms->stream_num < MMS_MAX_STREAMS &&",
          "104:                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "105:                     mms->streams = av_fast_realloc(mms->streams,",
          "106:                                        &mms->nb_streams_allocated,",
          "107:                                        (mms->stream_num + 1) * sizeof(MMSStream));",
          "108:                     if (!mms->streams)",
          "109:                         return AVERROR(ENOMEM);",
          "110:                     mms->streams[mms->stream_num].id = stream_id;",
          "111:                     mms->stream_num++;",
          "112:                 } else {",
          "113:                     av_log(NULL, AV_LOG_ERROR,",
          "114:                            \"Corrupt stream (too many A/V streams)\\n\");",
          "115:                     return AVERROR_INVALIDDATA;",
          "116:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:             }",
          "144:         } else if (!memcmp(p, ff_asf_head1_guid, sizeof(ff_asf_guid))) {",
          "145:             chunksize = 46; // see references [2] section 3.4. This should be set 46.",
          "146:         }",
          "147:         p += chunksize;",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             if (chunksize > end - p) {",
          "149:                 av_log(NULL, AV_LOG_ERROR,",
          "150:                     \"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\",",
          "151:                     chunksize);",
          "152:                 return AVERROR_INVALIDDATA;",
          "153:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f65d6ff9ab06e2f4036a7e0f71072a216e66d239",
      "candidate_info": {
        "commit_hash": "f65d6ff9ab06e2f4036a7e0f71072a216e66d239",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f65d6ff9ab06e2f4036a7e0f71072a216e66d239",
        "files": [
          "libavformat/mms.c"
        ],
        "message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit cced03dd667a5df6df8fd40d8de0bff477ee02e8)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/mms.c||libavformat/mms.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/mms.c||libavformat/mms.c"
          ],
          "candidate": [
            "libavformat/mms.c||libavformat/mms.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/mms.c||libavformat/mms.c": [
          "File: libavformat/mms.c -> libavformat/mms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 }",
          "95:             }",
          "96:         } else if (!memcmp(p, ff_asf_stream_header, sizeof(ff_asf_guid))) {",
          "115:             }",
          "116:         } else if (!memcmp(p, ff_asf_ext_stream_header, sizeof(ff_asf_guid))) {",
          "117:             if (end - p >= 88) {",
          "",
          "[Removed Lines]",
          "97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "98:             stream_id = flags & 0x7F;",
          "102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
          "103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "104:                 mms->streams = av_fast_realloc(mms->streams,",
          "105:                                    &mms->nb_streams_allocated,",
          "106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
          "107:                 if (!mms->streams)",
          "108:                     return AVERROR(ENOMEM);",
          "109:                 mms->streams[mms->stream_num].id = stream_id;",
          "110:                 mms->stream_num++;",
          "111:             } else {",
          "112:                 av_log(NULL, AV_LOG_ERROR,",
          "113:                        \"Corrupt stream (too many A/V streams)\\n\");",
          "114:                 return AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "97:             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {",
          "98:                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
          "99:                 stream_id = flags & 0x7F;",
          "103:                 if (mms->stream_num < MMS_MAX_STREAMS &&",
          "104:                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
          "105:                     mms->streams = av_fast_realloc(mms->streams,",
          "106:                                        &mms->nb_streams_allocated,",
          "107:                                        (mms->stream_num + 1) * sizeof(MMSStream));",
          "108:                     if (!mms->streams)",
          "109:                         return AVERROR(ENOMEM);",
          "110:                     mms->streams[mms->stream_num].id = stream_id;",
          "111:                     mms->stream_num++;",
          "112:                 } else {",
          "113:                     av_log(NULL, AV_LOG_ERROR,",
          "114:                            \"Corrupt stream (too many A/V streams)\\n\");",
          "115:                     return AVERROR_INVALIDDATA;",
          "116:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:             }",
          "144:         } else if (!memcmp(p, ff_asf_head1_guid, sizeof(ff_asf_guid))) {",
          "145:             chunksize = 46; // see references [2] section 3.4. This should be set 46.",
          "146:         }",
          "147:         p += chunksize;",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             if (chunksize > end - p) {",
          "149:                 av_log(NULL, AV_LOG_ERROR,",
          "150:                     \"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\",",
          "151:                     chunksize);",
          "152:                 return AVERROR_INVALIDDATA;",
          "153:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}