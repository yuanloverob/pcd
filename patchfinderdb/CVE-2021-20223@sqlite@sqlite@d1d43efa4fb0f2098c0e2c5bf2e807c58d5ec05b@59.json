{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07f9e8f4f3a473e4efac5f421b59b945a79e22a5",
      "candidate_info": {
        "commit_hash": "07f9e8f4f3a473e4efac5f421b59b945a79e22a5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07f9e8f4f3a473e4efac5f421b59b945a79e22a5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "test/join2.test"
        ],
        "message": "Ensure affinity is not discarded from a view column if the view appears on the rhs of a LEFT JOIN. Fix for [45f4bf4e].\n\nFossilOrigin-Name: ac31edd3eeafcef46164a4506bbc32c711bb7cd78378aeaa4c9bb12524ac5ea1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "test/join2.test||test/join2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b4987a5ced0c0f2c606c040e0c1b8ee11175f40ae35a7446308a43e77b1f1db2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(const Expr *pExpr){",
          "46:   int op;",
          "47:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "49:     pExpr = pExpr->pLeft;",
          "50:     assert( pExpr!=0 );",
          "51:   }",
          "",
          "[Removed Lines]",
          "48:     assert( pExpr->op==TK_COLLATE );",
          "",
          "[Added Lines]",
          "48:     assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "114:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "116:     pExpr = pExpr->pLeft;",
          "117:   }",
          "118:   return pExpr;",
          "",
          "[Removed Lines]",
          "115:     assert( pExpr->op==TK_COLLATE );",
          "",
          "[Added Lines]",
          "115:     assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:       assert( pExpr->op==TK_FUNCTION );",
          "132:       pExpr = pExpr->x.pList->a[0].pExpr;",
          "133:     }else{",
          "135:       pExpr = pExpr->pLeft;",
          "136:     }",
          "137:   }",
          "",
          "[Removed Lines]",
          "134:       assert( pExpr->op==TK_COLLATE );",
          "",
          "[Added Lines]",
          "134:       assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3498:           ifNullRow.op = TK_IF_NULL_ROW;",
          "3499:           ifNullRow.pLeft = pCopy;",
          "3500:           ifNullRow.iTable = pSubst->iNewTable;",
          "3501:           pCopy = &ifNullRow;",
          "3502:         }",
          "3503:         testcase( ExprHasProperty(pCopy, EP_Subquery) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3501:           ifNullRow.flags = EP_Skip;",
          "",
          "---------------"
        ],
        "test/join2.test||test/join2.test": [
          "File: test/join2.test -> test/join2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   WHERE (t1.c0 BETWEEN 0 AND 0) > ('' AND t0.c0);",
          "294: }",
          "297: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: #-------------------------------------------------------------------------",
          "297: # Ticket [45f4bf4eb].",
          "298: #",
          "299: reset_db",
          "300: do_execsql_test 9.0 {",
          "301:   CREATE TABLE t0(c0 INT);",
          "302:   CREATE VIEW v0(c0) AS SELECT CAST(t0.c0 AS INTEGER) FROM t0;",
          "303:   INSERT INTO t0(c0) VALUES (0);",
          "304: }",
          "306: do_execsql_test 9.1 {",
          "307:   SELECT typeof(c0), c0 FROM v0 WHERE c0>='0'",
          "308: } {integer 0}",
          "310: do_execsql_test 9.2 {",
          "311:   SELECT * FROM t0, v0 WHERE v0.c0 >= '0';",
          "312: } {0 0}",
          "314: do_execsql_test 9.3 {",
          "315:   SELECT * FROM t0 LEFT JOIN v0 WHERE v0.c0 >= '0';",
          "316: } {0 0}",
          "318: do_execsql_test 9.4 {",
          "319:   SELECT * FROM t0 LEFT JOIN v0 ON v0.c0 >= '0';",
          "320: } {0 0}",
          "322: do_execsql_test 9.5 {",
          "323:   SELECT * FROM t0 LEFT JOIN v0 ON v0.c0 >= '0' WHERE TRUE",
          "324:   UNION SELECT 0,0 WHERE 0;",
          "325: } {0 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be284e4ecee23499b30f9c1f8f44ebf872e071ea",
      "candidate_info": {
        "commit_hash": "be284e4ecee23499b30f9c1f8f44ebf872e071ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be284e4ecee23499b30f9c1f8f44ebf872e071ea",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "src/select.c"
        ],
        "message": "Fix harmless compiler warnings from MSVC.\n\nFossilOrigin-Name: 951b39ca74c9bd933139e099d5555283278db475f410f202c162e5d1e6aef933",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 59726777934e201d94e99ca693f0fda4ebfb1c7883d0258ce542f63f9924c28c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6961: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "6963:   return (nullIfMemDb && pPager->memDb) ? &zFake[4] : pPager->zFilename;",
          "6964: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6962:   static const char zFake[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4468:   ExprList *pOrderBy;",
          "4471:   assert( *ppMinMax==0 );",
          "4472:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "",
          "[Removed Lines]",
          "4469:   u8 sortFlags;",
          "",
          "[Added Lines]",
          "4469:   u8 sortFlags = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bfd35b8d2871012f3061c89aef9cdb6ad7dbd94",
      "candidate_info": {
        "commit_hash": "2bfd35b8d2871012f3061c89aef9cdb6ad7dbd94",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2bfd35b8d2871012f3061c89aef9cdb6ad7dbd94",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/busy2.test"
        ],
        "message": "Add test script to verify busy-timeouts are working for SQLITE_ENABLE_SETLK_TIMEOUT builds.\n\nFossilOrigin-Name: ada43e7c490bf72a50ee84e1db994e149744b2a943260449076b83d1874813b2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/busy2.test||test/busy2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b426603f05033bcee0331c6f664cd5ed2ebf8f5d4cde8c6673c7a699ff53bb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/busy2.test||test/busy2.test": [
          "File: test/busy2.test -> test/busy2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 June 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file test the busy handler",
          "12: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: source $testdir/lock_common.tcl",
          "18: set testprefix busy2",
          "20: do_multiclient_test tn {",
          "21:   do_test 1.$tn.0 {",
          "22:     sql2 {",
          "23:       CREATE TABLE t1(a, b);",
          "24:       PRAGMA journal_mode = wal;",
          "25:       INSERT INTO t1 VALUES('A', 'B');",
          "26:     }",
          "27:   } {wal}",
          "29:   do_test 1.$tn.1 {",
          "30:     code1 { db timeout 1000 }",
          "31:     sql1 { SELECT * FROM t1 }",
          "32:   } {A B}",
          "34:   do_test 1.$tn.2 {",
          "35:     sql2 {",
          "36:       BEGIN;",
          "37:         INSERT INTO t1 VALUES('C', 'D');",
          "38:     }",
          "39:   } {}",
          "41:   do_test 1.$tn.3 {",
          "42:     set us [lindex [time { catch { sql1 { BEGIN EXCLUSIVE } } }] 0]",
          "43:     expr {$us>950000 && $us<1500000}",
          "44:   } {1}",
          "46:   do_test 1.$tn.4 {",
          "47:     sql2 {",
          "48:       COMMIT",
          "49:     }",
          "50:   } {}",
          "51: }",
          "53: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cff0e34e0ea461fbf1c25120956637e2e02bc53",
      "candidate_info": {
        "commit_hash": "7cff0e34e0ea461fbf1c25120956637e2e02bc53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7cff0e34e0ea461fbf1c25120956637e2e02bc53",
        "files": [
          "Makefile.in",
          "autoconf/Makefile.am",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "tool/mkautoconfamal.sh"
        ],
        "message": "Include 'sqlite3rc.h' in the amalgamation archive targets.\n\nFossilOrigin-Name: 3df579ca32e8250725957d1982897a43281c73e8373af49abd6e7bd674f30e74",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "autoconf/Makefile.am||autoconf/Makefile.am",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "tool/mkautoconfamal.sh||tool/mkautoconfamal.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid$(BEXE) $(TOP)/VERSION",
          "1068:  $(TCLSH_CMD) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "1070: keywordhash.h: $(TOP)/tool/mkkeywordhash.c",
          "1071:  $(BCC) -o mkkeywordhash$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) $(TOP)/tool/mkkeywordhash.c",
          "1072:  ./mkkeywordhash$(BEXE) >keywordhash.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070: sqlite3rc.h: $(TOP)/src/sqlite3.rc $(TOP)/VERSION",
          "1071:  echo '#ifndef SQLITE_RESOURCE_VERSION' >$@",
          "1072:  echo -n '#define SQLITE_RESOURCE_VERSION ' >>$@",
          "1073:  cat $(TOP)/VERSION | $(TCLSH_CMD) $(TOP)/tool/replace.tcl exact . , >>$@",
          "1074:  echo '#endif' >>sqlite3rc.h",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1391: # a tarball named for the version number.  Ex:  sqlite-autoconf-3110000.tar.gz.",
          "1392: # The snapshot-tarball target builds a tarball named by the SHA1 hash",
          "1393: #",
          "1395:  TOP=$(TOP) sh $(TOP)/tool/mkautoconfamal.sh --normal",
          "1398:  TOP=$(TOP) sh $(TOP)/tool/mkautoconfamal.sh --snapshot",
          "1400: # The next two rules are used to support the \"threadtest\" target. Building",
          "",
          "[Removed Lines]",
          "1394: amalgamation-tarball: sqlite3.c",
          "1397: snapshot-tarball: sqlite3.c",
          "",
          "[Added Lines]",
          "1400: amalgamation-tarball: sqlite3.c sqlite3rc.h",
          "1403: snapshot-tarball: sqlite3.c sqlite3rc.h",
          "",
          "---------------"
        ],
        "autoconf/Makefile.am||autoconf/Makefile.am": [
          "File: autoconf/Makefile.am -> autoconf/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: include_HEADERS = sqlite3.h sqlite3ext.h",
          "17: pkgconfigdir = ${libdir}/pkgconfig",
          "18: pkgconfig_DATA = sqlite3.pc",
          "",
          "[Removed Lines]",
          "16: EXTRA_DIST = sqlite3.1 tea Makefile.msc sqlite3.rc README.txt Replace.cs Makefile.fallback",
          "",
          "[Added Lines]",
          "16: EXTRA_DIST = sqlite3.1 tea Makefile.msc sqlite3.rc sqlite3rc.h README.txt Replace.cs Makefile.fallback",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "727: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid $(TOP)/VERSION $(TOP)/ext/rtree/sqlite3rtree.h",
          "728:  tclsh $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "730: keywordhash.h: $(TOP)/tool/mkkeywordhash.c",
          "731:  $(BCC) -o mkkeywordhash $(OPTS) $(TOP)/tool/mkkeywordhash.c",
          "732:  ./mkkeywordhash >keywordhash.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730: sqlite3rc.h: $(TOP)/src/sqlite3.rc $(TOP)/VERSION",
          "731:  echo '#ifndef SQLITE_RESOURCE_VERSION' >$@",
          "732:  echo -n '#define SQLITE_RESOURCE_VERSION ' >>$@",
          "733:  cat $(TOP)/VERSION | tclsh $(TOP)/tool/replace.tcl exact . , >>$@",
          "734:  echo '#endif' >>sqlite3rc.h",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1079: # a tarball named for the version number.  Ex:  sqlite-autoconf-3110000.tar.gz.",
          "1080: # The snapshot-tarball target builds a tarball named by the SHA1 hash",
          "1081: #",
          "1083:  TOP=$(TOP) sh $(TOP)/tool/mkautoconfamal.sh --normal",
          "1086:  TOP=$(TOP) sh $(TOP)/tool/mkautoconfamal.sh --snapshot",
          "",
          "[Removed Lines]",
          "1082: amalgamation-tarball: sqlite3.c",
          "1085: snapshot-tarball: sqlite3.c",
          "",
          "[Added Lines]",
          "1088: amalgamation-tarball: sqlite3.c sqlite3rc.h",
          "1091: snapshot-tarball: sqlite3.c sqlite3rc.h",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7a876209a678a34c198b54ceef9e3c041f128a14dc73357f6a57cadadaa6cf7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkautoconfamal.sh||tool/mkautoconfamal.sh": [
          "File: tool/mkautoconfamal.sh -> tool/mkautoconfamal.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # This script is used to build the amalgamation autoconf package.",
          "3: # It assumes the following:",
          "4: #",
          "7: #",
          "8: #   2. Variable $TOP is set to the full path of the root directory",
          "9: #      of the SQLite source tree.",
          "",
          "[Removed Lines]",
          "5: #   1. The files \"sqlite3.c\", \"sqlite3.h\" and \"sqlite3ext.h\"",
          "6: #      are available in the current directory.",
          "",
          "[Added Lines]",
          "5: #   1. The files \"sqlite3.c\", \"sqlite3.h\", \"sqlite3ext.h\", \"shell.c\",",
          "6: #      and \"sqlite3rc.h\" are available in the current directory.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: cp sqlite3.c              $TMPSPACE",
          "50: cp sqlite3.h              $TMPSPACE",
          "51: cp sqlite3ext.h           $TMPSPACE",
          "52: cp $TOP/sqlite3.1         $TMPSPACE",
          "53: cp $TOP/sqlite3.pc.in     $TMPSPACE",
          "54: cp shell.c                $TMPSPACE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: cp sqlite3rc.h            $TMPSPACE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: echo \"#else\"                        >> tea/generic/tclsqlite3.c",
          "73: echo \"#include \\\"sqlite3.c\\\"\"       >> tea/generic/tclsqlite3.c",
          "74: echo \"#endif\"                       >> tea/generic/tclsqlite3.c",
          "77: cat tea/configure.ac |",
          "78:   sed \"s/AC_INIT(\\[sqlite\\], .*)/AC_INIT([sqlite], [$VERSION])/\" > tmp",
          "",
          "[Removed Lines]",
          "75: cat  $TOP/src/tclsqlite.c           >> tea/generic/tclsqlite3.c",
          "",
          "[Added Lines]",
          "76: cat  $TOP/src/tclsqlite.c        >> tea/generic/tclsqlite3.c",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77318a3c3f22f34a3b88e2522f1be966bfb4073b",
      "candidate_info": {
        "commit_hash": "77318a3c3f22f34a3b88e2522f1be966bfb4073b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/77318a3c3f22f34a3b88e2522f1be966bfb4073b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Factor out the conditional (which is only true for rare errors) from the notValid() function in resolve.c, for a performance improvement and size reduction.  Also cause failures to set the Expr node to a NULL operator so that it does not cause problems later in case PRAGMA writable_schema=ON has been set.  Test cases in TH3.\n\nFossilOrigin-Name: c6af9f655b73200ecc0c4189698e421af6ca584babdc76e73a36d468b2eea1f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48ba5e5a2227257cebafacbb09e9dd91d9b89ab2d52a8b4e4113c1d017d95f41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652: ){",
          "657: #ifndef SQLITE_OMIT_CHECK",
          "659: #endif",
          "660: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "662: #endif",
          "665: }",
          "",
          "[Removed Lines]",
          "647: static void notValid(",
          "653:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "654:   if( (pNC->ncFlags & validMask)!=0 ){",
          "655:     const char *zIn = \"partial index WHERE clauses\";",
          "656:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "658:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "661:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "663:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "664:   }",
          "",
          "[Added Lines]",
          "659: static void notValidImpl(",
          "665:   const char *zIn = \"partial index WHERE clauses\";",
          "666:   if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "668:   else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "671:   else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "673:   sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "674:   if( pExpr ) pExpr->op = TK_NULL;",
          "676: #define sqlite3ResolveNotValid(P,N,M,X,E) \\",
          "677:   assert( ((X)&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 ); \\",
          "678:   if( ((N)->ncFlags & (X))!=0 ) notValidImpl(P,N,M,E);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:         zColumn = pExpr->u.zToken;",
          "752:       }else{",
          "753:         Expr *pLeft = pExpr->pLeft;",
          "755:         pRight = pExpr->pRight;",
          "756:         if( pRight->op==TK_ID ){",
          "757:           zDb = 0;",
          "",
          "[Removed Lines]",
          "754:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "767:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "768:         testcase( pNC->ncFlags & NC_GenCol );",
          "769:         sqlite3ResolveNotValid(pParse, pNC, \"the \\\".\\\" operator\",",
          "770:                                NC_IdxExpr|NC_GenCol, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "852:         }else{",
          "854:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "",
          "[Removed Lines]",
          "851:           notValid(pParse, pNC, \"non-deterministic functions\", NC_SelfRef);",
          "",
          "[Added Lines]",
          "867:           sqlite3ResolveNotValid(pParse, pNC, \"non-deterministic functions\",",
          "868:                                  NC_SelfRef, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "995:       testcase( pExpr->op==TK_IN );",
          "996:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "997:         int nRef = pNC->nRef;",
          "1000:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "1001:         assert( pNC->nRef>=nRef );",
          "1002:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "998:         notValid(pParse, pNC, \"subqueries\",",
          "999:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1015:         testcase( pNC->ncFlags & NC_IsCheck );",
          "1016:         testcase( pNC->ncFlags & NC_PartIdx );",
          "1017:         testcase( pNC->ncFlags & NC_IdxExpr );",
          "1018:         testcase( pNC->ncFlags & NC_GenCol );",
          "1019:         sqlite3ResolveNotValid(pParse, pNC, \"subqueries\",",
          "1020:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1007:       break;",
          "1008:     }",
          "1009:     case TK_VARIABLE: {",
          "1012:       break;",
          "1013:     }",
          "1014:     case TK_IS:",
          "",
          "[Removed Lines]",
          "1010:       notValid(pParse, pNC, \"parameters\",",
          "1011:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "[Added Lines]",
          "1031:       testcase( pNC->ncFlags & NC_IsCheck );",
          "1032:       testcase( pNC->ncFlags & NC_PartIdx );",
          "1033:       testcase( pNC->ncFlags & NC_IdxExpr );",
          "1034:       testcase( pNC->ncFlags & NC_GenCol );",
          "1035:       sqlite3ResolveNotValid(pParse, pNC, \"parameters\",",
          "1036:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}