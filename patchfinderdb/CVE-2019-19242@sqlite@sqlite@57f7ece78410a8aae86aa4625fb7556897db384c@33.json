{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21b9225ff595a1ec121ac18ebb5ab066257a9893",
      "candidate_info": {
        "commit_hash": "21b9225ff595a1ec121ac18ebb5ab066257a9893",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21b9225ff595a1ec121ac18ebb5ab066257a9893",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/normalize.test"
        ],
        "message": "Refactor the sqlite3_normalized_sql() implementation.\n\nFossilOrigin-Name: 06e955e5d2b857b9ce94a73fb174b620c101bdb160842f9a0e958bdb48e8c987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c878d741733a897d47a1a0b57b454bc9095ce302b48cc01089336d5d20e2a24c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   return rc;",
          "710: }",
          "",
          "[Removed Lines]",
          "712: #ifdef SQLITE_ENABLE_NORMALIZE",
          "721: static int estimateNormalizedSize(",
          "724: ){",
          "725:   int nOut = nSql + 4;",
          "726:   const char *z = zSql;",
          "727:   while( nOut<nSql*5 ){",
          "728:     while( z[0]!=0 && z[0]!='I' && z[0]!='i' ){ z++; }",
          "729:     if( z[0]==0 ) break;",
          "730:     z++;",
          "731:     if( z[0]!='N' && z[0]!='n' ) break;",
          "732:     z++;",
          "733:     while( sqlite3Isspace(z[0]) ){ z++; }",
          "734:     if( z[0]!='(' ) break;",
          "735:     z++;",
          "737:   }",
          "738:   return nOut;",
          "739: }",
          "747: static void copyNormalizedToken(",
          "754: ){",
          "755:   int bQuoted = tokenFlags & SQLITE_TOKEN_QUOTED;",
          "756:   int bKeyword = tokenFlags & SQLITE_TOKEN_KEYWORD;",
          "757:   int j = *piOut, k = 0;",
          "758:   for(; k<nToken; k++){",
          "759:     if( bQuoted ){",
          "760:       if( k==0 && iIn>0 ){",
          "761:         zOut[j++] = '\"';",
          "762:         continue;",
          "763:       }else if( k==nToken-1 ){",
          "764:         zOut[j++] = '\"';",
          "765:         continue;",
          "766:       }",
          "767:     }",
          "768:     if( bKeyword ){",
          "769:       zOut[j++] = sqlite3Toupper(zSql[iIn+k]);",
          "770:     }else{",
          "771:       zOut[j++] = sqlite3Tolower(zSql[iIn+k]);",
          "772:     }",
          "773:   }",
          "775: }",
          "782: char *sqlite3Normalize(",
          "786: ){",
          "799:   db = sqlite3VdbeDb(pVdbe);",
          "800:   assert( db!=0 );",
          "801:   if( zSql==0 ) return 0;",
          "802:   nZ = estimateNormalizedSize(zSql, nSql);",
          "803:   z = sqlite3DbMallocRawNN(db, nZ);",
          "804:   if( z==0 ) goto normalizeError;",
          "805:   for(i=j=0; i<nSql && zSql[i]; i+=n){",
          "806:     int flags = 0;",
          "807:     if( tokenType!=TK_SPACE ) prevTokenType = tokenType;",
          "808:     n = sqlite3GetTokenNormalized((unsigned char*)zSql+i, &tokenType, &flags);",
          "809:     switch( tokenType ){",
          "810:       case TK_SPACE: {",
          "811:         break;",
          "812:       }",
          "813:       case TK_ILLEGAL: {",
          "814:         goto normalizeError;",
          "815:       }",
          "816:       case TK_STRING:",
          "817:       case TK_INTEGER:",
          "818:       case TK_FLOAT:",
          "819:       case TK_VARIABLE:",
          "820:       case TK_BLOB: {",
          "821:         z[j++] = '?';",
          "822:         break;",
          "823:       }",
          "824:       case TK_LP:",
          "825:       case TK_RP: {",
          "826:         if( tokenType==TK_LP ){",
          "827:           nParen++;",
          "828:           if( prevTokenType==TK_IN ){",
          "829:             iStartIN = j;",
          "830:             nParenAtIN = nParen;",
          "831:           }",
          "832:         }else{",
          "833:           if( iStartIN>0 && nParen==nParenAtIN ){",
          "834:             assert( iStartIN+6<nZ );",
          "835:             memcpy(z+iStartIN+1, \"?,?,?\", 5);",
          "836:             j = iStartIN+6;",
          "837:             assert( nZ-1-j>=0 );",
          "838:             assert( nZ-1-j<nZ );",
          "839:             memset(z+j, 0, nZ-1-j);",
          "840:             iStartIN = 0;",
          "841:           }",
          "842:           nParen--;",
          "843:         }",
          "844:         assert( nParen>=0 );",
          "846:       }",
          "847:       case TK_MINUS:",
          "848:       case TK_SEMI:",
          "849:       case TK_PLUS:",
          "850:       case TK_STAR:",
          "851:       case TK_SLASH:",
          "852:       case TK_REM:",
          "853:       case TK_EQ:",
          "854:       case TK_LE:",
          "855:       case TK_NE:",
          "856:       case TK_LSHIFT:",
          "857:       case TK_LT:",
          "858:       case TK_RSHIFT:",
          "859:       case TK_GT:",
          "860:       case TK_GE:",
          "861:       case TK_BITOR:",
          "862:       case TK_CONCAT:",
          "863:       case TK_COMMA:",
          "864:       case TK_BITAND:",
          "865:       case TK_BITNOT:",
          "866:       case TK_DOT:",
          "867:       case TK_IN:",
          "868:       case TK_IS:",
          "869:       case TK_NOT:",
          "870:       case TK_NULL:",
          "871:       case TK_ID: {",
          "872:         if( tokenType==TK_NULL ){",
          "873:           if( prevTokenType==TK_IS || prevTokenType==TK_NOT ){",
          "875:           }else{",
          "877:             z[j++] = '?';",
          "878:             break;",
          "879:           }",
          "880:         }",
          "881:         if( j>0 && sqlite3IsIdChar(z[j-1]) && sqlite3IsIdChar(zSql[i]) ){",
          "882:           z[j++] = ' ';",
          "883:         }",
          "884:         if( tokenType==TK_ID ){",
          "885:           if( zSql[i]=='\"'",
          "886:            && sqlite3VdbeUsesDoubleQuotedString(db,pVdbe,zSql+i,n)",
          "887:           ){",
          "888:             z[j++] = '?';",
          "889:             break;",
          "890:           }",
          "891:           if( nParen==nParenAtIN ) iStartIN = 0;",
          "892:         }",
          "893:         copyNormalizedToken(zSql, i, n, flags, z, &j);",
          "894:         break;",
          "895:       }",
          "896:     }",
          "897:   }",
          "898:   assert( j<nZ && \"one\" );",
          "899:   while( j>0 && z[j-1]==' ' ){ j--; }",
          "900:   if( j>0 && z[j-1]!=';' ){ z[j++] = ';'; }",
          "901:   z[j] = 0;",
          "902:   assert( j<nZ && \"two\" );",
          "903:   return z;",
          "905: normalizeError:",
          "906:   sqlite3DbFree(db, z);",
          "907:   return 0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4255: void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);",
          "4256: void sqlite3AlterRenameColumn(Parse*, SrcList*, Token*, Token*);",
          "4257: int sqlite3GetToken(const unsigned char *, int *);",
          "4261: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4262: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4263: int sqlite3CodeSubselect(Parse*, Expr *, int, int);",
          "",
          "[Removed Lines]",
          "4258: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4259: int sqlite3GetTokenNormalized(const unsigned char *, int *, int *);",
          "4260: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:   return i;",
          "546: }",
          "",
          "[Removed Lines]",
          "548: #ifdef SQLITE_ENABLE_NORMALIZE",
          "560: int sqlite3GetTokenNormalized(",
          "561:   const unsigned char *z,",
          "562:   int *tokenType,",
          "563:   int *flags",
          "564: ){",
          "565:   int n;",
          "566:   unsigned char iClass = aiClass[*z];",
          "567:   if( iClass==CC_KYWD ){",
          "568:     int i;",
          "569:     for(i=1; aiClass[z[i]]<=CC_KYWD; i++){}",
          "570:     if( IdChar(z[i]) ){",
          "574:       i++;",
          "575:       while( IdChar(z[i]) ){ i++; }",
          "577:       return i;",
          "578:     }",
          "580:     n = keywordCode((char*)z, i, tokenType);",
          "585:     switch( *tokenType ){",
          "586:       case TK_ID: {",
          "588:         break;",
          "589:       }",
          "590:       case TK_IN:",
          "591:       case TK_IS:",
          "592:       case TK_NOT:",
          "593:       case TK_NULL: {",
          "595:         break;",
          "596:       }",
          "597:       default: {",
          "600:         break;",
          "601:       }",
          "602:     }",
          "603:   }else{",
          "604:     n = sqlite3GetToken(z, tokenType);",
          "607:     if( *tokenType==TK_ID && (iClass==CC_QUOTE || iClass==CC_QUOTE2) ){",
          "609:     }",
          "610:   }",
          "611:   return n;",
          "612: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:   assert( nErr==0 || pParse->rc!=SQLITE_OK );",
          "782:   return nErr;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: #ifdef SQLITE_ENABLE_NORMALIZE",
          "724: static void addSpaceSeparator(sqlite3_str *pStr){",
          "725:   if( pStr->nChar && sqlite3IsIdChar(pStr->zText[pStr->nChar-1]) ){",
          "726:     sqlite3_str_append(pStr, \" \", 1);",
          "727:   }",
          "728: }",
          "735: char *sqlite3Normalize(",
          "739: ){",
          "751:   if( zSql==0 || nSql==0 ) return 0;",
          "752:   db = sqlite3VdbeDb(pVdbe);",
          "753:   tokenType = -1;",
          "754:   nParen = iStartIN = nParenAtIN = 0;",
          "755:   pStr = sqlite3_str_new(db);",
          "756:   for(i=0; i<nSql && pStr->accError==0; i+=n){",
          "757:     if( tokenType!=TK_SPACE ){",
          "758:       prevType = tokenType;",
          "759:     }",
          "760:     n = sqlite3GetToken((unsigned char*)zSql+i, &tokenType);",
          "761:     if( NEVER(n<=0) ) break;",
          "762:     switch( tokenType ){",
          "763:       case TK_SPACE: {",
          "764:         break;",
          "765:       }",
          "766:       case TK_NULL: {",
          "767:         if( prevType==TK_IS || prevType==TK_NOT ){",
          "768:           sqlite3_str_append(pStr, \" NULL\", 5);",
          "769:           break;",
          "770:         }",
          "772:       }",
          "773:       case TK_STRING:",
          "774:       case TK_INTEGER:",
          "775:       case TK_FLOAT:",
          "776:       case TK_VARIABLE:",
          "777:       case TK_BLOB: {",
          "778:         sqlite3_str_append(pStr, \"?\", 1);",
          "779:         break;",
          "780:       }",
          "781:       case TK_LP: {",
          "782:         nParen++;",
          "783:         if( prevType==TK_IN ){",
          "784:           iStartIN = pStr->nChar;",
          "785:           nParenAtIN = nParen;",
          "786:         }",
          "787:         sqlite3_str_append(pStr, \"(\", 1);",
          "788:         break;",
          "789:       }",
          "790:       case TK_RP: {",
          "791:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "792:           assert( pStr->nChar>=iStartIN );",
          "793:           pStr->nChar = iStartIN+1;",
          "794:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "795:           iStartIN = 0;",
          "796:         }",
          "797:         nParen--;",
          "798:         sqlite3_str_append(pStr, \")\", 1);",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         iStartIN = 0;",
          "803:         j = pStr->nChar;",
          "804:         if( sqlite3Isquote(zSql[i]) ){",
          "805:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "806:           int nId;",
          "807:           int eType = 0;",
          "808:           if( zId==0 ) break;",
          "809:           sqlite3Dequote(zId);",
          "810:           if( zSql[i]=='\"' && sqlite3VdbeUsesDoubleQuotedString(pVdbe, zId) ){",
          "811:             sqlite3_str_append(pStr, \"?\", 1);",
          "812:             sqlite3DbFree(db, zId);",
          "813:             break;",
          "814:           }",
          "815:           nId = sqlite3Strlen30(zId);",
          "816:           if( sqlite3GetToken((u8*)zId, &eType)==nId && eType==TK_ID ){",
          "817:             addSpaceSeparator(pStr);",
          "818:             sqlite3_str_append(pStr, zId, nId);",
          "819:           }else{",
          "820:             sqlite3_str_appendf(pStr, \"\\\"%w\\\"\", zId);",
          "821:           }",
          "822:           sqlite3DbFree(db, zId);",
          "823:         }else{",
          "824:           addSpaceSeparator(pStr);",
          "825:           sqlite3_str_append(pStr, zSql+i, n);",
          "826:         }",
          "827:         while( j<pStr->nChar ){",
          "828:           pStr->zText[j] = sqlite3Tolower(pStr->zText[j]);",
          "829:           j++;",
          "830:         }",
          "831:         break;",
          "832:       }",
          "833:       case TK_SELECT: {",
          "834:         iStartIN = 0;",
          "836:       }",
          "837:       default: {",
          "838:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "839:         j = pStr->nChar;",
          "840:         sqlite3_str_append(pStr, zSql+i, n);",
          "841:         while( j<pStr->nChar ){",
          "842:           pStr->zText[j] = sqlite3Toupper(pStr->zText[j]);",
          "843:           j++;",
          "844:         }",
          "845:         break;",
          "846:       }",
          "847:     }",
          "848:   }",
          "849:   if( tokenType!=TK_SEMI ) sqlite3_str_append(pStr, \";\", 1);",
          "850:   return sqlite3_str_finish(pStr);",
          "851: }",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: void sqlite3VdbeSetSql(Vdbe*, const char *z, int n, u8);",
          "254: #ifdef SQLITE_ENABLE_NORMALIZE",
          "255: void sqlite3VdbeAddDblquoteStr(sqlite3*,Vdbe*,const char*);",
          "257: #endif",
          "258: void sqlite3VdbeSwap(Vdbe*,Vdbe*);",
          "259: VdbeOp *sqlite3VdbeTakeOpArray(Vdbe*, int*, int*);",
          "",
          "[Removed Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(sqlite3*,Vdbe*,const char*,int);",
          "",
          "[Added Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(Vdbe*,const char*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: int sqlite3VdbeUsesDoubleQuotedString(",
          "104: ){",
          "106:   DblquoteStr *pStr;",
          "107:   assert( zId!=0 );",
          "111:   if( pVdbe->pDblStr==0 ) return 0;",
          "115:   for(pStr=pVdbe->pDblStr; pStr; pStr=pStr->pNextStr){",
          "117:   }",
          "120: }",
          "121: #endif",
          "",
          "[Removed Lines]",
          "105:   char *z;",
          "108:   assert( zId[0]=='\"' );",
          "109:   assert( nId>=2 );",
          "110:   assert( zId[nId-1]=='\"' );",
          "112:   z = sqlite3DbStrNDup(db, zId, nId);",
          "113:   if( z==0 ) return 0;",
          "114:   sqlite3Dequote(z);",
          "116:     if( strcmp(z, pStr->z)==0 ) break;",
          "118:   sqlite3DbFree(db, z);",
          "119:   return pStr!=0;",
          "",
          "[Added Lines]",
          "107:     if( strcmp(zId, pStr->z)==0 ) return 1;",
          "109:   return 0;",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   430",
          "208:   {SELECT \"a\" FROM t1 WHERE \"x\" IN (\"1\",\"2\",'3');}",
          "209:   0x2",
          "212:   440",
          "213:   {SELECT 'a' FROM t1 WHERE 'x';}",
          "",
          "[Removed Lines]",
          "210:   {0 {SELECT\"a\"FROM t1 WHERE\"x\"IN(?,?,?);}}",
          "",
          "[Added Lines]",
          "210:   {0 {SELECT a FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   450",
          "218:   {SELECT [a] FROM t1 WHERE [x];}",
          "219:   0x2",
          "222:   460",
          "223:   {SELECT * FROM t1 WHERE x IN (x);}",
          "",
          "[Removed Lines]",
          "220:   {0 {SELECT\"a\"FROM t1 WHERE\"x\";}}",
          "",
          "[Added Lines]",
          "220:   {0 {SELECT a FROM t1 WHERE x;}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   480",
          "233:   {SELECT * FROM t1 WHERE x IN ([x],\"a\");}",
          "234:   0x2",
          "237:   500",
          "238:   {SELECT * FROM t1 WHERE x IN ([x],\"a\",'b',sqlite_version());}",
          "239:   0x2",
          "242:   520",
          "243:   {SELECT * FROM t1 WHERE x IN (SELECT x FROM t1);}",
          "",
          "[Removed Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\");}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\",?,sqlite_version());}}",
          "",
          "[Added Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(x,a);}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(x,a,?,sqlite_version());}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:   540",
          "248:   {SELECT * FROM t1 WHERE x IN ((SELECT x FROM t1));}",
          "249:   0x2",
          "252:   550",
          "253:   {SELECT a, a+1, a||'b', a+\"b\" FROM t1;}",
          "254:   0x2",
          "257:   570",
          "258:   {SELECT * FROM t1 WHERE x IN (1);}",
          "",
          "[Removed Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN(?,?,?);}}",
          "255:   {0 {SELECT a,a+?,a||?,a+\"b\"FROM t1;}}",
          "",
          "[Added Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN((SELECT x FROM t1));}}",
          "255:   {0 {SELECT a,a+?,a||?,a+b FROM t1;}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   680",
          "317:   {SELECT a, \"col f\" FROM t1 LEFT OUTER JOIN t2 ON [t1].[col f] == [t2].[col y];}",
          "318:   0x2",
          "321:   690",
          "322:   {SELECT * FROM ( WITH x AS ( SELECT * FROM t1 WHERE x IN ( 1)) SELECT 10);}",
          "",
          "[Removed Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON\"t1\".\"col f\"==\"t2\".\"col y\";}}",
          "",
          "[Added Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON t1.\"col f\"==t2.\"col y\";}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:   760",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(\"x\"IS NOT NULL,?,?,?,\"b\",?);}}",
          "",
          "[Added Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
      "candidate_info": {
        "commit_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "When values have real affinity and are converted into strings for CHECK constraints or index expressions, do the conversions into a real-number format even if the values are stored as integers for efficiency. This appears to fix ticket [ae0f637bddc5290b446].\n\nFossilOrigin-Name: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a77cd85b1a8b86e71b511f05f8c67faa046d24a48684139d2f64e51249203411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "517:   }else if( p->flags & MEM_Int ){",
          "518:     printf(\" i:%lld\", p->u.i);",
          "519: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2776:   assert( pOp->p2>0 );",
          "2777:   assert( zAffinity[pOp->p2]==0 );",
          "2778:   pIn1 = &aMem[pOp->p1];",
          "2780:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2781:     assert( memIsValid(pIn1) );",
          "2783:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2784:     pIn1++;",
          "2786:   break;",
          "2787: }",
          "",
          "[Removed Lines]",
          "2779:   do{",
          "2782:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2785:   }while( zAffinity[0] );",
          "",
          "[Added Lines]",
          "2781:   while( 1 /*edit-by-break*/ ){",
          "2784:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2785:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2788:       pIn1->flags |= MEM_IntReal;",
          "2789:     }",
          "2791:     zAffinity++;",
          "2792:     if( zAffinity[0]==0 ) break;",
          "2794:   }",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: }",
          "93: #endif",
          "95: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "110:   assert( acc.zText==zBuf && acc.mxAlloc<=0 );",
          "112: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   int i, j, incr;",
          "119:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "120:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "126:   z = p->z;",
          "127:   i = j = 0;",
          "128:   incr = 1;",
          "",
          "[Removed Lines]",
          "121:   if( p->flags & MEM_Int ){",
          "122:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%lld\",p->u.i);",
          "123:   }else{",
          "124:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%!.15g\",p->u.r);",
          "125:   }",
          "",
          "[Added Lines]",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:   }",
          "249:   assert( (pMem->flags & MEM_Dyn)==0 );",
          "250:   pMem->z = pMem->zMalloc;",
          "252:   return SQLITE_OK;",
          "253: }",
          "",
          "[Removed Lines]",
          "251:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "266:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351: int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){",
          "353:   const int nByte = 32;",
          "355:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "359:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "360:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "352:   int fg = pMem->flags;",
          "356:   assert( !(fg&MEM_Zero) );",
          "357:   assert( !(fg&(MEM_Str|MEM_Blob)) );",
          "358:   assert( fg&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "370:   assert( !(pMem->flags&MEM_Zero) );",
          "371:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "372:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:     return SQLITE_NOMEM_BKPT;",
          "366:   }",
          "380:   assert( pMem->z!=0 );",
          "381:   pMem->n = sqlite3Strlen30NN(pMem->z);",
          "382:   pMem->enc = SQLITE_UTF8;",
          "383:   pMem->flags |= MEM_Str|MEM_Term;",
          "385:   sqlite3VdbeChangeEncoding(pMem, enc);",
          "386:   return SQLITE_OK;",
          "387: }",
          "",
          "[Removed Lines]",
          "374:   if( fg & MEM_Int ){",
          "375:     sqlite3_snprintf(nByte, pMem->z, \"%lld\", pMem->u.i);",
          "376:   }else{",
          "377:     assert( fg & MEM_Real );",
          "378:     sqlite3_snprintf(nByte, pMem->z, \"%!.15g\", pMem->u.r);",
          "379:   }",
          "384:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "382:   vdbeMemRenderNum(nByte, pMem->z, pMem);",
          "387:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "741:       pMem->flags |= (pMem->flags&MEM_Blob)>>3;",
          "742:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "743:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "745:       break;",
          "746:     }",
          "747:   }",
          "",
          "[Removed Lines]",
          "744:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_Blob|MEM_Zero);",
          "",
          "[Added Lines]",
          "747:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
      "candidate_info": {
        "commit_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Update error detection logic in releasetest.tcl to account for new output formats in USAN.\n\nFossilOrigin-Name: 3f36b988360204628d5ad1df2db34818b9a2d6ba989018d4c17757229f4b0f65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb9470fc064aad72a4e42c6a021410401b3b1a32446ae8b9cd9c759f0a2a01ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:       # skip over \"value is outside range\" errors",
          "413:       if {[regexp {value .* is outside the range of representable} $line]} {",
          "414:          # noop",
          "415:       } else {",
          "416:         incr ::NERRCASE",
          "417:         if {$rc==0} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:       } elseif {[regexp {overflow: .* cannot be represented} $line]} {",
          "416:          # noop",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
      "candidate_info": {
        "commit_hash": "f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "If the \".open\" command fails in the CLI, reopen to :memory: so that at least some database is available for subsequent commands.\n\nFossilOrigin-Name: d7f55c62c3fa053b9b930a044b60076a8278cbf679d8e5116b95f2ff19247f6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 26275fc7e89eb2542a65d01fd271cef016a4a1815bc3845c599cf2f4fbf7513d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871:     if( p->db==0 || SQLITE_OK!=sqlite3_errcode(p->db) ){",
          "3872:       utf8_printf(stderr,\"Error: unable to open database \\\"%s\\\": %s\\n\",",
          "3873:           p->zDbFilename, sqlite3_errmsg(p->db));",
          "3875:       exit(1);",
          "3876:     }",
          "3877: #ifndef SQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "3874:       if( openFlags & OPEN_DB_KEEPALIVE ) return;",
          "",
          "[Added Lines]",
          "3874:       if( openFlags & OPEN_DB_KEEPALIVE ){",
          "3875:         sqlite3_open(\":memory:\", &p->db);",
          "3876:         return;",
          "3877:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14e3e22773e64c78f2184b78ce83734d06713c7f",
      "candidate_info": {
        "commit_hash": "14e3e22773e64c78f2184b78ce83734d06713c7f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/14e3e22773e64c78f2184b78ce83734d06713c7f",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an assert() in fts3 that could fail when accessing a corrupt database.\n\nFossilOrigin-Name: 601ce9532d34f97a5faa170b6d8a272e5c54f2eabff84660201a1840e0fd9929",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2474:     iWrite = *piPrev - iVal;",
          "2475:   }",
          "2476:   assert( *pbFirst || *piPrev==0 );",
          "",
          "[Removed Lines]",
          "2477:   assert( *pbFirst==0 || iWrite>0 );",
          "",
          "[Added Lines]",
          "2477:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "2478:   assert( *pbFirst==0 || iWrite>=0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b6f2a7f9cdb547c925f08306df82519e41a7a0dd2cabd9861a48917bb6eef845",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5329:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "5330: } {1 {database disk image is malformed}}",
          "5332: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5332: #-------------------------------------------------------------------------",
          "5333: #",
          "5334: reset_db",
          "5335: do_test 30.0 {",
          "5336:   sqlite3 db {}",
          "5337:   db deserialize [decode_hexdb {",
          "5338: | size 28672 pagesize 4096 filename crash-e6e3857edf9b26.db",
          "5339: | page 1 offset 0",
          "5340: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "5341: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "5342: |     96: 00 00 00 00 0d 0e b1 00 06 0d a4 00 0f 8d 0f 21   ...............!",
          "5343: |    112: 0e b9 0d c8 0e 7e 0d a4 00 00 00 00 00 00 00 00   .....~..........",
          "5344: |   3488: 00 00 00 00 22 07 06 17 11 11 01 31 74 61 62 6c   ...........1tabl",
          "5345: |   3504: 65 74 32 74 32 07 43 52 45 41 54 45 20 54 41 42   et2t2.CREATE TAB",
          "5346: |   3520: 4c 45 20 74 32 28 78 29 81 33 05 07 17 1f 1f 01   LE t2(x).3......",
          "5347: |   3536: 82 35 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72   .5tablet1_segdir",
          "5348: |   3552: 74 31 5f 73 65 67 64 69 72 05 43 52 45 41 54 45   t1_segdir.CREATE",
          "5349: |   3568: 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69    TABLE 't1_segdi",
          "5350: |   3584: 72 27 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52   r'(level INTEGER",
          "5351: |   3600: 2c 69 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61   ,idx INTEGER,sta",
          "5352: |   3616: 72 74 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52   rt_block INTEGER",
          "5353: |   3632: 2c 6c 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63   ,leaves_end_bloc",
          "5354: |   3648: 6b 20 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c   k INTEGER,end_bl",
          "5355: |   3664: 6f 63 6b 20 49 4e 54 45 47 45 62 2c 72 6f 6f 74   ock INTEGEb,root",
          "5356: |   3680: 20 42 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45    BLOB,PRIMARY KE",
          "5357: |   3696: 59 28 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 06   Y(level, idx))1.",
          "5358: |   3712: 06 17 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74   ..E...indexsqlit",
          "5359: |   3728: 65 5f 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73   e_autoindex_t1_s",
          "5360: |   3744: 65 67 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72   egdir_1t1_segdir",
          "5361: |   3760: 06 0f c7 00 08 00 00 00 00 66 04 07 17 23 23 01   .........f...##.",
          "5362: |   3776: 81 13 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e   ..tablet1_segmen",
          "5363: |   3792: 74 73 74 31 5f 73 65 67 6d 65 6e 74 73 04 43 52   tst1_segments.CR",
          "5364: |   3808: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73   EATE TABLE 't1_s",
          "5365: |   3824: 65 67 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64   egments'(blockid",
          "5366: |   3840: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "5367: |   3856: 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42    KEY, block BLOB",
          "5368: |   3872: 29 6a 03 07 17 21 21 01 81 1f 74 61 62 6c 65 74   )j...!!...tablet",
          "5369: |   3888: 31 5f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1_contentt1_cont",
          "5370: |   3904: 65 6e 74 03 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "5371: |   3920: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f    't1_content'(do",
          "5372: |   3936: 63 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   cid INTEGER PRIM",
          "5373: |   3952: 41 52 59 20 4b 45 59 2c 20 27 63 30 61 27 2c 20   ARY KEY, 'c0a',",
          "5374: |   3968: 27 63 31 62 27 2c 20 27 63 32 63 27 29 38 02 06   'c1b', 'c2c')8..",
          "5375: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "5376: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "5377: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "5378: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "5379: | page 3 offset 8192",
          "5380: |      0: 0d 00 00 00 25 0b 48 00 0f d8 0f af 0f 86 0f 74   ....%.H........t",
          "5381: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "5382: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 00 00   ...t.[.@.$......",
          "5383: |   2880: 00 00 00 00 00 00 00 00 81 3f 25 06 00 82 7e f0   .........?%...~.",
          "5384: |   2896: 00 43 4f 4d 50 49 4c 45 52 3d 67 63 63 2d 35 2e   .COMPILER=gcc-5.",
          "5385: |   2912: 34 23 00 20 32 30 31 36 30 36 30 39 20 44 45 42   4#. 20160609 DEB",
          "5386: |   2928: 55 47 20 45 4e 41 42 4c 45 20 44 42 53 54 41 54   UG ENABLE DBSTAT",
          "5387: |   2944: 20 56 54 41 42 20 45 4e 42 92 4c 45 20 46 54 53    VTAB ENB.LE FTS",
          "5388: |   2960: 34 20 45 4e 41 42 4c 45 20 46 54 53 35 20 45 4e   4 ENABLE FTS5 EN",
          "5389: |   2976: 41 42 4c 45 20 47 45 4f 50 4f 4c 59 20 45 4e 41   ABLE GEOPOLY ENA",
          "5390: |   2992: 42 4c 45 1f 4a 53 4f 4e 31 20 45 4e 41 42 4c 49   BLE.JSON1 ENABLI",
          "5391: |   3008: 00 4d 45 4d 53 59 53 35 20 45 4e 41 42 4c 45 20   .MEMSYS5 ENABLE",
          "5392: |   3024: 52 54 52 45 45 20 4d 41 58 20 4d 45 4d 4f 52 59   RTREE MAX MEMORY",
          "5393: |   3040: 3d 35 30 30 30 30 30 30 30 20 4f 4d 49 54 20 4c   =50000000 OMIT L",
          "5394: |   3056: 4f 41 44 20 45 58 54 45 4e 53 49 4f 4e 20 54 48   OAD EXTENSION TH",
          "5395: |   3072: 52 45 41 44 53 41 46 45 3d 30 18 24 05 00 25 0f   READSAFE=0.$..%.",
          "5396: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "5397: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "5398: |   3120: 44 53 41 46 45 3d 30 88 4e 4f 43 41 53 45 17 22   DSAFE=0.NOCASE..",
          "5399: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "5400: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 4f 4d   0XRTRIM.!..3..OM",
          "5401: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f   IT LOAD EXTENSIO",
          "5402: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "5403: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49   MIT LOAD EXTENSI",
          "5404: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 20 05 00 33 0f 17   ONXNOCASE. ..3..",
          "5405: |   3232: 4f 4d 49 54 20 4c 4f 41 54 20 45 58 54 45 4e 53   OMIT LOAT EXTENS",
          "5406: |   3248: 49 4f 4e 58 52 54 52 49 4d 1f 1e 04 00 33 0f 19   IONXRTRIM....3..",
          "5407: |   3264: 82 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   .AX MEMORY=50000",
          "5408: |   3280: 30 30 30 58 42 49 4e 41 52 59 1f 1d 05 00 33 0f   000XBINARY....3.",
          "5409: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "5410: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 33   0000XNOCASE....3",
          "5411: |   3328: 0f 17 4d 41 58 20 4d 45 4d fa 52 59 3d 35 30 20   ..MAX MEM.RY=50",
          "5412: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "5413: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 53 52 45 45 58 42   ..ENABLE RSREEXB",
          "5414: |   3376: 49 4e 41 52 59 18 1a 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "5415: |   3392: 4c 45 20 52 54 52 45 45 58 4e 4f 53 41 53 45 17   LE RTREEXNOSASE.",
          "5416: |   3408: 19 05 00 25 0f 17 45 4e 42 42 4c 45 20 52 54 52   ...%..ENBBLE RTR",
          "5417: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "5418: |   3440: 4e 41 42 4c 45 20 4d 45 4d 53 5a 53 35 58 42 49   NABLE MEMSZS5XBI",
          "5419: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 3c   NARY....)..ENAB<",
          "5420: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "5421: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "5422: |   3504: 4d 53 59 53 35 58 52 54 52 49 4d 18 15 05 00 25   MSYS5XRTRIM....%",
          "5423: |   3520: 0f 19 45 4e 41 42 4c 45 20 4a 53 4f 4e 31 58 42   ..ENABLE JSON1XB",
          "5424: |   3536: 49 4e 41 52 59 18 14 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "5425: |   3552: 4c 45 20 4a 53 4f 4e 31 58 4e 4f 43 41 53 45 17   LE JSON1XNOCASE.",
          "5426: |   3568: 13 05 00 25 0f 17 45 4e 41 42 4c 45 20 4a 53 4f   ...%..ENABLE JSO",
          "5427: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 00 29 0f 19 45   N1XRTRIM....)..E",
          "5428: |   3600: 4e 31 42 4c 45 20 47 45 4e 50 4f 4c 59 58 42 49   N1BLE GENPOLYXBI",
          "5429: |   3616: 4e 41 52 59 1a 11 05 00 29 0f 19 45 4e f2 1e 4c   NARY....)..EN..L",
          "5430: |   3632: 45 20 47 45 4f 50 4f 4c 59 58 4e 4f 43 41 53 45   E GEOPOLYXNOCASE",
          "5431: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "5432: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "5433: |   3680: 0f 19 45 4e 41 42 4c 45 20 46 54 53 35 58 42 49   ..ENABLE FTS5XBI",
          "5434: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 3c   NARY....#..ENAB<",
          "5435: |   3712: 45 20 46 54 53 35 58 4e 4f 43 41 53 45 16 0d 05   E FTS5XNOCASE...",
          "5436: |   3728: 00 23 0f 17 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "5437: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "5438: |   3760: 4c 45 20 46 54 53 34 58 42 49 4e 41 52 59 17 0b   LE FTS4XBINARY..",
          "5439: |   3776: 05 00 23 0f 19 45 4e 41 43 4c 45 20 46 54 53 35   ..#..ENACLE FTS5",
          "5440: |   3792: 58 4e 4f 43 40 53 45 16 0a 05 00 23 0f 17 45 4e   XNOC@SE....#..EN",
          "5441: |   3808: 41 42 4c 45 20 46 54 53 34 58 52 54 52 49 4d 1e   ABLE FTS4XRTRIM.",
          "5442: |   3824: 09 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "5443: |   3840: 54 41 55 20 56 54 41 42 58 42 49 4e 41 52 59 1e   TAU VTABXBINARY.",
          "5444: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "5445: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "5446: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "5447: |   3904: 54 41 54 20 56 54 41 42 58 52 54 62 49 4d 11 06   TAT VTABXRTbIM..",
          "5448: |   3920: 05 00 17 0f 19 44 45 42 54 47 58 42 49 4e 41 52   .....DEBTGXBINAR",
          "5449: |   3936: 59 11 05 05 00 17 0f 19 54 45 42 55 47 58 4e 4f   Y.......TEBUGXNO",
          "5450: |   3952: 43 41 53 45 10 04 05 00 17 0f 17 44 45 42 55 47   CASE.......DEBUG",
          "5451: |   3968: 68 52 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   hRTRIM'...C..COM",
          "5452: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "5453: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "5454: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3d 67   ...C..COMPILER=g",
          "5455: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "5456: |   4048: 39 58 4f 4f 43 41 53 45 26 01 05 00 43 0f 17 43   9XOOCASE&...C..C",
          "5457: |   4064: 4f 4d 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e   OMPILER=gcc-5.4.",
          "5458: |   4080: 30 20 32 30 31 36 30 36 30 39 58 52 54 52 49 4d   0 20160609XRTRIM",
          "5459: | page 4 offset 12288",
          "5460: |      0: 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "5461: | page 5 offset 16384",
          "5462: |      0: 0d 00 00 00 02 0b a0 00 0c ad 0b a0 00 00 00 00   ................",
          "5463: |   2976: 82 0a 02 08 08 09 08 08 17 84 06 30 20 32 35 33   ...........0 253",
          "5464: |   2992: 00 01 30 04 25 06 1b 00 00 08 32 30 31 36 30 36   ..0.%.....201606",
          "5465: |   3008: 30 39 03 25 07 00 00 01 34 03 25 05 00 00 01 35   09.%....4.%....5",
          "5466: |   3024: 03 25 04 00 01 07 30 30 30 30 30 30 30 03 25 1a   .%....0000000.%.",
          "5467: |   3040: 00 00 08 63 6f 6d 70 69 6c 65 72 03 25 02 00 00   ...compiler.%...",
          "5468: |   3056: 06 64 62 73 74 61 74 03 25 0a 00 01 04 65 62 75   .dbstat.%....ebu",
          "5469: |   3072: 67 03 25 08 00 00 06 65 6e 61 62 6c 65 09 25 09   g.%....enable.%.",
          "5470: |   3088: 05 04 04 04 04 04 00 01 08 78 74 65 6e 73 69 6f   .........xtensio",
          "5471: |   3104: 6e 03 25 1d 00 00 04 66 74 73 34 03 25 0d 00 03   n.%....fts4.%...",
          "5472: |   3120: 01 35 03 25 0f 00 00 03 67 63 63 03 25 03 00 01   .5.%....gcc.%...",
          "5473: |   3136: 06 65 6f 70 6f 6c 79 03 25 11 00 00 05 6a 73 6f   .eopoly.%....jso",
          "5474: |   3152: 6e 31 03 25 14 00 e8 04 6c 6f 61 64 03 25 1c 00   n1.%....load.%..",
          "5475: |   3168: 00 03 6d 61 78 03 25 18 00 01 05 65 6d 6f 72 79   ..max.%....emory",
          "5476: |   3184: 03 25 19 00 03 04 73 79 73 35 03 25 15 00 00 04   .%....sys5.%....",
          "5477: |   3200: 6f 6d 69 74 03 25 1b 00 00 05 72 74 72 65 65 03   omit.%....rtree.",
          "5478: |   3216: 25 17 00 00 0a 74 68 72 65 61 64 73 61 66 65 03   %....threadsafe.",
          "5479: |   3232: 25 1e 00 00 04 76 74 61 62 03 25 0b 00 86 50 01   %....vtab.%...P.",
          "5480: |   3248: 08 08 08 08 08 17 8d 12 30 20 38 33 35 00 01 30   ........0 835..0",
          "5481: |   3264: 12 01 06 00 01 06 00 01 06 00 1f 03 00 01 03 00   ................",
          "5482: |   3280: 01 03 00 00 08 32 30 31 36 30 36 30 39 09 01 07   .....20160609...",
          "5483: |   3296: 00 01 07 00 01 07 00 00 01 34 09 01 05 00 01 05   .........4......",
          "5484: |   3312: 00 01 05 00 00 01 35 09 01 04 00 01 04 00 01 04   ......5.........",
          "5485: |   3328: 00 01 07 30 30 30 30 30 30 30 09 1c 04 00 01 04   ...0000000......",
          "5486: |   3344: 00 01 04 00 00 06 62 69 6e 61 72 79 3c 03 01 02   ......binary<...",
          "5487: |   3360: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "5488: |   3376: 00 03 01 02 f2 00 03 01 02 02 00 03 01 02 02 00   ................",
          "5489: |   3392: 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00 03   ................",
          "5490: |   3408: 01 02 02 00 03 01 02 02 00 00 08 63 6f 6d 70 69   ...........compi",
          "5491: |   3424: 6c 65 72 09 01 02 00 01 02 00 01 02 00 00 06 64   ler............d",
          "5492: |   3440: 62 73 74 61 74 09 07 03 00 01 03 00 01 03 00 01   bstat...........",
          "5493: |   3456: 04 65 62 75 67 09 04 02 00 01 02 00 01 02 00 00   .ebug...........",
          "5494: |   3472: 06 65 6e 60 62 6c 65 3f 07 02 00 01 02 00 01 01   .en`ble?........",
          "5495: |   3488: ff f1 b1 00 00 02 3f 01 01 f0 f1 02 00 57 02 00   ......?......W..",
          "5496: |   3504: 01 02 00 01 02 00 01 02 00 01 02 00 01 02 10 01   ................",
          "5497: |   3520: 02 00 01 02 00 01 02 00 01 02 01 01 02 00 01 02   ................",
          "5498: |   3536: 00 01 02 00 00 f2 00 01 08 78 74 65 6e 73 69 6f   .........xtensio",
          "5499: |   3552: 6e 09 1f 04 00 01 04 00 01 04 00 00 04 66 74 73   n............fts",
          "5500: |   3568: 34 09 0a 03 00 01 03 00 01 03 00 03 01 35 09 0d   4............5..",
          "5501: |   3584: 03 00 01 03 00 01 03 00 00 03 67 63 63 09 01 03   ..........gcc...",
          "5502: |   3600: 00 01 03 00 01 03 00 01 06 65 6f 70 6f 6c 79 09   .........eopoly.",
          "5503: |   3616: 10 03 00 01 03 00 01 03 00 00 b3 6a 73 6f 6e 31   ...........json1",
          "5504: |   3632: 09 13 03 00 01 03 00 01 03 00 00 04 6c 6f 61 64   ............load",
          "5505: |   3648: 09 1f 03 00 01 03 00 01 03 00 00 03 6d 61 78 09   ............max.",
          "5506: |   3664: 1c 02 00 01 02 00 01 02 00 01 05 65 6d 6f 72 79   ...........emory",
          "5507: |   3680: 09 1c 03 00 01 03 00 01 03 00 03 04 73 79 73 35   ............sys5",
          "5508: |   3696: 09 16 03 00 01 03 00 01 03 cc 00 06 6e 6f 63 61   ............noca",
          "5509: |   3712: 73 65 3c 02 01 02 02 00 03 01 02 02 00 03 01 02   se<.............",
          "5510: |   3728: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "5511: |   3744: 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00   ................",
          "5512: |   3760: 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00 00   ................",
          "5513: |   3776: 04 6f 6d 69 74 09 1f 02 00 01 02 00 01 02 00 00   .omit...........",
          "5514: |   3792: 05 72 74 62 65 65 09 19 03 00 01 03 00 01 03 00   .rtbee..........",
          "5515: |   3808: 03 02 69 6d 3c 01 01 02 02 00 03 01 02 02 00 03   ..im<...........",
          "5516: |   3824: 01 02 02 00 03 01 02 02 00 03 01 02 02 00 03 01   ................",
          "5517: |   3840: 02 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02   ................",
          "5518: |   3856: 02 00 03 01 02 02 00 03 01 02 01 00 03 01 02 02   ................",
          "5519: |   3872: 00 00 0a 74 68 72 65 61 64 73 61 66 65 09 22 02   ...threadsafe...",
          "5520: |   3888: 00 01 02 00 02 02 00 00 04 76 74 61 62 09 07 04   .........vtab...",
          "5521: |   3904: 00 01 03 00 01 04 00 00 01 78 b4 01 01 01 01 02   .........x......",
          "5522: |   3920: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "5523: |   3936: 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01   ................",
          "5524: |   3952: 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01 01   ................",
          "5525: |   3968: 01 02 00 01 01 01 02 00 01 01 01 02 00 01 01 01   ................",
          "5526: |   3984: 02 01 01 01 01 02 00 01 01 01 02 00 01 01 01 02   ................",
          "5527: |   4000: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "5528: |   4016: 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01   ................",
          "5529: |   4032: 01 01 02 00 01 01 01 da 00 01 01 01 02 00 01 01   ................",
          "5530: |   4048: 01 02 00 01 01 01 01 ff ff 01 01 02 00 01 01 01   ................",
          "5531: |   4064: 02 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02   ................",
          "5532: |   4080: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "5533: | page 6 offset 20480",
          "5534: |      0: 0a 00 00 00 02 0f f5 00 0f fb 0f f5 01 00 00 00   ................",
          "5535: |   4080: 00 00 00 00 00 05 04 08 09 01 02 04 04 08 08 09   ................",
          "5536: | page 7 offset 24576",
          "5537: |      0: 01 6f 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .o..............",
          "5538: | end crash-e6e3857edf9b26.db",
          "5539: }]} {}",
          "5541: do_execsql_test 30.1 {",
          "5542:   UPDATE t1 SET b=a;",
          "5543: }",
          "5545: do_catchsql_test 30.2 {",
          "5546:   SELECT (matchinfo(null)) FROM t1 WHERE t1 MATCH 'ee*e*e*e*e*e*e*Re*e*e*e**'",
          "5547: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}