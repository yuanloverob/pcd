{
  "cve_id": "CVE-2014-6427",
  "cve_desc": "Off-by-one error in the is_rtsp_request_or_reply function in epan/dissectors/packet-rtsp.c in the RTSP dissector in Wireshark 1.10.x before 1.10.10 and 1.12.x before 1.12.1 allows remote attackers to cause a denial of service (application crash) via a crafted packet that triggers parsing of a token located one position beyond the current position.",
  "repo": "wireshark/wireshark",
  "patch_hash": "73959159dbf34b4a0b50fbd19e05cb1b470be9b0",
  "patch_info": {
    "commit_hash": "73959159dbf34b4a0b50fbd19e05cb1b470be9b0",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/73959159dbf34b4a0b50fbd19e05cb1b470be9b0",
    "files": [
      "epan/dissectors/packet-rtsp.c"
    ],
    "message": "rtsp: parse the correct token for the status code\n\nDon't call get_token_len on next_token *and* pass in next_token to store the\nsubsequent pointer - the token we want to parse is the *current* value of\nnext_token, not the next next token (which may be beyond the end of the buffer,\nif next_token happens to be the *last* token).\n\nBug: 10381\nChange-Id: I9fb27e8bdaf2f9556f61841de30cec04b98ffb96\nReviewed-on: https://code.wireshark.org/review/3663\nReviewed-by: Evan Huus <eapache@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
      "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "435: is_rtsp_request_or_reply(const guchar *line, size_t linelen, rtsp_type_t *type)",
      "436: {",
      "437:     guint         ii;",
      "439:     int           tokenlen;",
      "440:     gchar         response_chars[4];",
      "",
      "[Removed Lines]",
      "438:     const guchar *next_token;",
      "",
      "[Added Lines]",
      "438:     const guchar *token, *next_token;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "450:         if (tokenlen != 0) {",
      "453:             if (tokenlen >= 3) {",
      "455:                 response_chars[3] = '\\0';",
      "456:                 rtsp_stat_info->response_code = (guint)strtoul(response_chars, NULL, 10);",
      "457:             }",
      "",
      "[Removed Lines]",
      "449:         tokenlen = get_token_len(line, line+5, &next_token);",
      "452:             tokenlen = get_token_len(next_token, line+linelen, &next_token);",
      "454:                 memcpy(response_chars, next_token, 3);",
      "",
      "[Added Lines]",
      "449:         tokenlen = get_token_len(line, line+5, &token);",
      "452:             tokenlen = get_token_len(token, line+linelen, &next_token);",
      "454:                 memcpy(response_chars, token, 3);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d762bd3784097a88651e2b04d0b36047d3ea2b85",
      "candidate_info": {
        "commit_hash": "d762bd3784097a88651e2b04d0b36047d3ea2b85",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d762bd3784097a88651e2b04d0b36047d3ea2b85",
        "files": [
          "epan/dissectors/packet-rtsp.c"
        ],
        "message": "rtsp: parse the correct token for the status code\n\nDon't call get_token_len on next_token *and* pass in next_token to store the\nsubsequent pointer - the token we want to parse is the *current* value of\nnext_token, not the next next token (which may be beyond the end of the buffer,\nif next_token happens to be the *last* token).\n\nBug: 10381\nChange-Id: I9fb27e8bdaf2f9556f61841de30cec04b98ffb96\nReviewed-on: https://code.wireshark.org/review/3663\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 73959159dbf34b4a0b50fbd19e05cb1b470be9b0)\nReviewed-on: https://code.wireshark.org/review/3664\n(cherry picked from commit 949cca0810f7ed2f92adc16c57d2e4badb10a6a4)\nReviewed-on: https://code.wireshark.org/review/3665",
        "before_after_code_files": [
          "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
          "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: is_rtsp_request_or_reply(const guchar *line, size_t linelen, rtsp_type_t *type)",
          "443: {",
          "444:     guint         ii;",
          "446:     int           tokenlen;",
          "447:     gchar         response_chars[4];",
          "",
          "[Removed Lines]",
          "445:     const guchar *next_token;",
          "",
          "[Added Lines]",
          "445:     const guchar *token, *next_token;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:         if (tokenlen != 0) {",
          "460:             if (tokenlen >= 3) {",
          "462:                 response_chars[3] = '\\0';",
          "463:                 rtsp_stat_info->response_code = (guint)strtoul(response_chars, NULL, 10);",
          "464:             }",
          "",
          "[Removed Lines]",
          "456:         tokenlen = get_token_len(line, line+5, &next_token);",
          "459:             tokenlen = get_token_len(next_token, line+linelen, &next_token);",
          "461:                 memcpy(response_chars, next_token, 3);",
          "",
          "[Added Lines]",
          "456:         tokenlen = get_token_len(line, line+5, &token);",
          "459:             tokenlen = get_token_len(token, line+linelen, &next_token);",
          "461:                 memcpy(response_chars, token, 3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "441cf84b51466919e755e9d30ea5cc9e78ecdfc7",
      "candidate_info": {
        "commit_hash": "441cf84b51466919e755e9d30ea5cc9e78ecdfc7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/441cf84b51466919e755e9d30ea5cc9e78ecdfc7",
        "files": [
          "epan/dissectors/packet-rtsp.c"
        ],
        "message": "rtsp: parse the correct token for the status code\n\nDon't call get_token_len on next_token *and* pass in next_token to store the\nsubsequent pointer - the token we want to parse is the *current* value of\nnext_token, not the next next token (which may be beyond the end of the buffer,\nif next_token happens to be the *last* token).\n\nConflicts:\n\tepan/dissectors/packet-rtsp.c\n\nBug: 10381\nChange-Id: I9fb27e8bdaf2f9556f61841de30cec04b98ffb96\nReviewed-on: https://code.wireshark.org/review/3663\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 73959159dbf34b4a0b50fbd19e05cb1b470be9b0)\nReviewed-on: https://code.wireshark.org/review/3664\n(cherry picked from commit 949cca0810f7ed2f92adc16c57d2e4badb10a6a4)\nReviewed-on: https://code.wireshark.org/review/3665\nReviewed-on: https://code.wireshark.org/review/4424\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
          "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446: is_rtsp_request_or_reply(const guchar *line, size_t linelen, rtsp_type_t *type)",
          "447: {",
          "448:  unsigned ii;",
          "450:  int tokenlen;",
          "451:  gchar response_chars[4];",
          "",
          "[Removed Lines]",
          "449:  const guchar *next_token;",
          "",
          "[Added Lines]",
          "449:  const guchar *token, *next_token;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:   if (tokenlen != 0) {",
          "464:    if (tokenlen >= 3) {",
          "466:     response_chars[3] = '\\0';",
          "467:     rtsp_stat_info->response_code = strtoul(response_chars, NULL, 10);",
          "468:    }",
          "",
          "[Removed Lines]",
          "460:   tokenlen = get_token_len(line, line+5, &next_token);",
          "463:    tokenlen = get_token_len(next_token, line+linelen, &next_token);",
          "465:     memcpy(response_chars, next_token, 3);",
          "",
          "[Added Lines]",
          "460:   tokenlen = get_token_len(line, line+5, &token);",
          "463:    tokenlen = get_token_len(token, line+linelen, &next_token);",
          "465:     memcpy(response_chars, token, 3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "949cca0810f7ed2f92adc16c57d2e4badb10a6a4",
      "candidate_info": {
        "commit_hash": "949cca0810f7ed2f92adc16c57d2e4badb10a6a4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/949cca0810f7ed2f92adc16c57d2e4badb10a6a4",
        "files": [
          "epan/dissectors/packet-rtsp.c"
        ],
        "message": "rtsp: parse the correct token for the status code\n\nDon't call get_token_len on next_token *and* pass in next_token to store the\nsubsequent pointer - the token we want to parse is the *current* value of\nnext_token, not the next next token (which may be beyond the end of the buffer,\nif next_token happens to be the *last* token).\n\nBug: 10381\nChange-Id: I9fb27e8bdaf2f9556f61841de30cec04b98ffb96\nReviewed-on: https://code.wireshark.org/review/3663\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 73959159dbf34b4a0b50fbd19e05cb1b470be9b0)\nReviewed-on: https://code.wireshark.org/review/3664",
        "before_after_code_files": [
          "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
          "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: is_rtsp_request_or_reply(const guchar *line, size_t linelen, rtsp_type_t *type)",
          "436: {",
          "437:     guint         ii;",
          "439:     int           tokenlen;",
          "440:     gchar         response_chars[4];",
          "",
          "[Removed Lines]",
          "438:     const guchar *next_token;",
          "",
          "[Added Lines]",
          "438:     const guchar *token, *next_token;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:         if (tokenlen != 0) {",
          "453:             if (tokenlen >= 3) {",
          "455:                 response_chars[3] = '\\0';",
          "456:                 rtsp_stat_info->response_code = (guint)strtoul(response_chars, NULL, 10);",
          "457:             }",
          "",
          "[Removed Lines]",
          "449:         tokenlen = get_token_len(line, line+5, &next_token);",
          "452:             tokenlen = get_token_len(next_token, line+linelen, &next_token);",
          "454:                 memcpy(response_chars, next_token, 3);",
          "",
          "[Added Lines]",
          "449:         tokenlen = get_token_len(line, line+5, &token);",
          "452:             tokenlen = get_token_len(token, line+linelen, &next_token);",
          "454:                 memcpy(response_chars, token, 3);",
          "",
          "---------------"
        ]
      }
    }
  ]
}