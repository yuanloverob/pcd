{
  "cve_id": "CVE-2016-2190",
  "cve_desc": "Moodle through 2.6.11, 2.7.x before 2.7.13, 2.8.x before 2.8.11, 2.9.x before 2.9.5, and 3.0.x before 3.0.3 does not properly restrict links, which allows remote attackers to obtain sensitive URL information by reading a Referer log.",
  "repo": "moodle/moodle",
  "patch_hash": "1688564a6eee6000013f6e185f704049283ae375",
  "patch_info": {
    "commit_hash": "1688564a6eee6000013f6e185f704049283ae375",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/1688564a6eee6000013f6e185f704049283ae375",
    "files": [
      "lib/htmlpurifier/locallib.php",
      "lib/tests/htmlpurifier_test.php",
      "lib/weblib.php",
      "mod/data/field/url/field.class.php"
    ],
    "message": "MDL-52651 htmlpurifier: Append rel=noreferrer to links.\n\nThank you to Zachary Durber for originally working on this issue.",
    "before_after_code_files": [
      "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
      "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
      "lib/weblib.php||lib/weblib.php",
      "mod/data/field/url/field.class.php||mod/data/field/url/field.class.php"
    ]
  },
  "patch_diff": {
    "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php": [
      "File: lib/htmlpurifier/locallib.php -> lib/htmlpurifier/locallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "119:     }",
      "121: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "130: class HTMLPurifier_AttrTransform_Noreferrer extends HTMLPurifier_AttrTransform {",
      "132:     private $parser;",
      "137:     public function __construct() {",
      "138:         $this->parser = new HTMLPurifier_URIParser();",
      "139:     }",
      "152:     public function transform($attr, $config, $context) {",
      "154:         if (!empty($attr['rel']) && substr($attr['rel'], 'noreferrer') !== false) {",
      "155:             return $attr;",
      "156:         }",
      "159:         if (!empty($attr['target']) && $attr['target'] == '_blank') {",
      "160:             $attr['rel'] = !empty($attr['rel']) ? $attr['rel'] . ' noreferrer' : 'noreferrer';",
      "161:         }",
      "163:         return $attr;",
      "164:     }",
      "165: }",
      "174: class HTMLPurifier_HTMLModule_Noreferrer extends HTMLPurifier_HTMLModule {",
      "176:     public $name = 'Noreferrer';",
      "183:     public function setup($config) {",
      "184:         $a = $this->addBlankElement('a');",
      "185:         $a->attr_transform_post[] = new HTMLPurifier_AttrTransform_Noreferrer();",
      "186:     }",
      "187: }",
      "",
      "---------------"
    ],
    "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php": [
      "File: lib/tests/htmlpurifier_test.php -> lib/tests/htmlpurifier_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     public function test_allow_blank_target() {",
      "43:         $text = '<a href=\"http://moodle.org\" target=\"_blank\">Some link</a>';",
      "44:         $result = format_text($text, FORMAT_HTML);",
      "47:         $result = format_text('<a href=\"http://moodle.org\" target=\"some\">Some link</a>', FORMAT_HTML);",
      "48:         $this->assertSame('<a href=\"http://moodle.org\">Some link</a>', $result);",
      "",
      "[Removed Lines]",
      "45:         $this->assertSame($text, $result);",
      "",
      "[Added Lines]",
      "47:         $expected = '<a href=\"http://moodle.org\" target=\"_blank\" rel=\"noreferrer\">Some link</a>';",
      "49:         $this->assertSame($expected, $result);",
      "",
      "---------------"
    ],
    "lib/weblib.php||lib/weblib.php": [
      "File: lib/weblib.php -> lib/weblib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1754:         $config = HTMLPurifier_Config::createDefault();",
      "1756:         $config->set('HTML.DefinitionID', 'moodlehtml');",
      "1758:         $config->set('Cache.SerializerPath', $cachedir);",
      "1759:         $config->set('Cache.SerializerPermissions', $CFG->directorypermissions);",
      "1760:         $config->set('Core.NormalizeNewlines', false);",
      "",
      "[Removed Lines]",
      "1757:         $config->set('HTML.DefinitionRev', 3);",
      "",
      "[Added Lines]",
      "1757:         $config->set('HTML.DefinitionRev', 4);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1798:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Ruby());",
      "1799:         }",
      "1801:         $purifier = new HTMLPurifier($config);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1801:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Noreferrer());",
      "",
      "---------------"
    ],
    "mod/data/field/url/field.class.php||mod/data/field/url/field.class.php": [
      "File: mod/data/field/url/field.class.php -> mod/data/field/url/field.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:                 if ($this->field->param3) {",
      "145:                     $attributes['target'] = '_blank';",
      "146:                 }",
      "148:                 if (empty($text)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:                     $attributes['rel'] = 'noreferrer';",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "171b4563a09ff7e43c01549dc3b0cb99031ce7b5",
      "candidate_info": {
        "commit_hash": "171b4563a09ff7e43c01549dc3b0cb99031ce7b5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/171b4563a09ff7e43c01549dc3b0cb99031ce7b5",
        "files": [
          "lib/weblib.php"
        ],
        "message": "MDL-50868 weblib: add ruby support to purify_html",
        "before_after_code_files": [
          "lib/weblib.php||lib/weblib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/weblib.php||lib/weblib.php"
          ],
          "candidate": [
            "lib/weblib.php||lib/weblib.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/weblib.php||lib/weblib.php": [
          "File: lib/weblib.php -> lib/weblib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1704:         $config = HTMLPurifier_Config::createDefault();",
          "1706:         $config->set('HTML.DefinitionID', 'moodlehtml');",
          "1708:         $config->set('Cache.SerializerPath', $cachedir);",
          "1709:         $config->set('Cache.SerializerPermissions', $CFG->directorypermissions);",
          "1710:         $config->set('Core.NormalizeNewlines', false);",
          "",
          "[Removed Lines]",
          "1707:         $config->set('HTML.DefinitionRev', 2);",
          "",
          "[Added Lines]",
          "1707:         $config->set('HTML.DefinitionRev', 3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1743:             $def->addElement('algebra', 'Inline', 'Inline', array());                   // Algebra syntax, equivalent to @@xx@@.",
          "1744:             $def->addElement('lang', 'Block', 'Flow', array(), array('lang'=>'CDATA')); // Original multilang style - only our hacked lang attribute.",
          "1745:             $def->addAttribute('span', 'xxxlang', 'CDATA');                             // Current very problematic multilang.",
          "1746:         }",
          "1748:         $purifier = new HTMLPurifier($config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1748:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Ruby());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37c10287be8daf223a17bae39b2376392bf45591",
      "candidate_info": {
        "commit_hash": "37c10287be8daf223a17bae39b2376392bf45591",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/37c10287be8daf223a17bae39b2376392bf45591",
        "files": [
          "lib/tests/htmlpurifier_test.php",
          "lib/weblib.php"
        ],
        "message": "MDL-54847 MDL-54847 weblib: Support basic HTML media tags",
        "before_after_code_files": [
          "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
          "lib/weblib.php||lib/weblib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
            "lib/weblib.php||lib/weblib.php"
          ],
          "candidate": [
            "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
            "lib/weblib.php||lib/weblib.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php": [
          "File: lib/tests/htmlpurifier_test.php -> lib/tests/htmlpurifier_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:         $text = '<a href=\"hmmm://www.example.com\">link</a>';",
          "319:         $this->assertSame('<a>link</a>', purify_html($text));",
          "320:     }",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:     public function test_media_tags($mediatag, $expected) {",
          "330:         $actual = format_text($mediatag, FORMAT_MOODLE, ['filter' => false, 'noclean' => true]);",
          "331:         $this->assertEquals($expected, $actual);",
          "332:     }",
          "337:     public function media_tags_provider() {",
          "339:         $p = function(array $set) {",
          "340:             return array_reduce($set, function($carry, $element) {",
          "341:                 return array_merge($carry, array_map(function($subset) use ($element) {",
          "342:                     return array_merge([$element], $subset);",
          "343:                 }, $carry));",
          "344:             }, [[]]);",
          "345:         };",
          "351:         $generatetestcases = function($prefix, array $attrs, array $templates) use ($p) {",
          "352:             $attrcombinations = $p($attrs);",
          "353:             return array_reduce($attrcombinations, function($carry, $attrset) use ($prefix, $templates) {",
          "354:                 $testcase = [$prefix . '/' . join('/', $attrset) => [",
          "355:                     sprintf($templates[0], join(\" \", $attrset)),",
          "356:                     sprintf($templates[1], join(\" \", $attrset))",
          "357:                 ]];",
          "358:                 return empty(array_values($carry)[0]) ? $testcase : $carry + $testcase;",
          "359:             }, [[]]);",
          "360:         };",
          "362:         $audioattrs = [",
          "363:             'preload=\"auto\"', 'autoplay=\"\"', 'loop=\"\"', 'muted=\"\"', 'controls=\"\"',",
          "364:             'crossorigin=\"anonymous\"', 'crossorigin=\"use-credentials\"'",
          "365:         ];",
          "366:         $videoattrs = [",
          "367:             'crossorigin=\"anonymous\"', 'crossorigin=\"use-credentials\"',",
          "368:             'poster=\"https://upload.wikimedia.org/wikipedia/en/1/14/Space_jam.jpg\"',",
          "369:             'preload=\"\"', 'autoplay=\"\"', 'playsinline=\"\"', 'loop=\"\"', 'muted=\"\"',",
          "370:             'controls=\"\"', 'width=\"420px\"', 'height=\"69px\"'",
          "371:         ];",
          "372:         return $generatetestcases('Plain audio', $audioattrs + ['src=\"http://example.com/jam.wav\"'], [",
          "373:                 '<audio %1$s>Looks like you can\\'t slam the jams.</audio>',",
          "374:                 '<div class=\"text_to_html\"><audio %1$s>Looks like you can\\'t slam the jams.</audio></div>'",
          "375:             ]) + $generatetestcases('Audio with one source', $audioattrs, [",
          "376:                 '<audio %1$s><source src=\"http://example.com/getup.wav\">No tasty jams for you.</audio>',",
          "377:                 '<div class=\"text_to_html\">' .",
          "378:                     '<audio %1$s>' .",
          "379:                         '<source src=\"http://example.com/getup.wav\">' .",
          "380:                         'No tasty jams for you.' .",
          "381:                     '</audio>' .",
          "382:                 '</div>'",
          "383:             ]) + $generatetestcases('Audio with multiple sources', $audioattrs, [",
          "384:                 '<audio %1$s>' .",
          "385:                     '<source src=\"http://example.com/getup.wav\" type=\"audio/wav\">' .",
          "386:                     '<source src=\"http://example.com/getup.mp3\" type=\"audio/mpeg\">' .",
          "387:                     '<source src=\"http://example.com/getup.ogg\" type=\"audio/ogg\">' .",
          "388:                     'No tasty jams for you.' .",
          "389:                 '</audio>',",
          "390:                 '<div class=\"text_to_html\">' .",
          "391:                      '<audio %1$s>' .",
          "392:                         '<source src=\"http://example.com/getup.wav\" type=\"audio/wav\">' .",
          "393:                         '<source src=\"http://example.com/getup.mp3\" type=\"audio/mpeg\">' .",
          "394:                         '<source src=\"http://example.com/getup.ogg\" type=\"audio/ogg\">' .",
          "395:                         'No tasty jams for you.' .",
          "396:                     '</audio>' .",
          "397:                 '</div>'",
          "398:             ]) + $generatetestcases('Plain video', $videoattrs + ['src=\"http://example.com/prettygood.mp4'], [",
          "399:                 '<video %1$s>Oh, that\\'s pretty bad \ud83d\ude26</video>',",
          "400:                 '<div class=\"text_to_html\"><video %1$s>Oh, that\\'s pretty bad \ud83d\ude26</video></div>'",
          "401:             ]) + $generatetestcases('Video with one source', $videoattrs, [",
          "402:                 '<video %1$s><source src=\"http://example.com/prettygood.mp4\">Oh, that\\'s pretty bad \ud83d\ude26</video>',",
          "403:                 '<div class=\"text_to_html\">' .",
          "404:                     '<video %1$s>' .",
          "405:                         '<source src=\"http://example.com/prettygood.mp4\">' .",
          "406:                         'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "407:                     '</video>' .",
          "408:                 '</div>'",
          "409:             ]) + $generatetestcases('Video with multiple sources', $videoattrs, [",
          "410:                 '<video %1$s>' .",
          "411:                     '<source src=\"http://example.com/prettygood.mp4\" type=\"video/mp4\">' .",
          "412:                     '<source src=\"http://example.com/eljefe.mp4\" type=\"video/mp4\">' .",
          "413:                     '<source src=\"http://example.com/turnitup.mov type=\"video/mov\"' .",
          "414:                     'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "415:                 '</video>',",
          "416:                 '<div class=\"text_to_html\">' .",
          "417:                     '<video %1$s>' .",
          "418:                         '<source src=\"http://example.com/prettygood.mp4\" type=\"video/mp4\">' .",
          "419:                         '<source src=\"http://example.com/eljefe.mp4\" type=\"video/mp4\">' .",
          "420:                         '<source src=\"http://example.com/turnitup.mov type=\"video/mov\"' .",
          "421:                         'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "422:                     '</video>' .",
          "423:                 '</div>'",
          "424:             ] + [",
          "425:                 'Video with invalid crossorigin' => [",
          "426:                     '<video src=\"http://example.com/turnitup.mov type=\"video/mov crossorigin=\"can i pls hab?\">' .",
          "427:                         'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "428:                     '</video>',",
          "429:                     '<div class=\"text_to_html\">' .",
          "430:                        '<video src=\"http://example.com/turnitup.mov type=\"video/mov\">' .",
          "431:                            'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "432:                         '</video>',",
          "433:                     '</div>'",
          "434:                 ],",
          "435:                 'Audio with invalid crossorigin' => [",
          "436:                     '<audio src=\"http://example.com/getup.wav\" type=\"audio/wav\" crossorigin=\"give me. the jams.\">' .",
          "437:                         'nyemnyemnyem' .",
          "438:                     '</audio>',",
          "439:                     '<div class=\"text_to_html\">' .",
          "440:                         '<audio src=\"http://example.com/getup.wav\" type=\"audio/wav\" crossorigin=\"give me. the jams.\">' .",
          "441:                             'nyemnyemnyem' .",
          "442:                         '</audio>' .",
          "443:                     '</div>'",
          "444:                 ]",
          "445:             ]);",
          "446:     }",
          "",
          "---------------"
        ],
        "lib/weblib.php||lib/weblib.php": [
          "File: lib/weblib.php -> lib/weblib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1780:         $config = HTMLPurifier_Config::createDefault();",
          "1782:         $config->set('HTML.DefinitionID', 'moodlehtml');",
          "1784:         $config->set('Cache.SerializerPath', $cachedir);",
          "1785:         $config->set('Cache.SerializerPermissions', $CFG->directorypermissions);",
          "1786:         $config->set('Core.NormalizeNewlines', false);",
          "",
          "[Removed Lines]",
          "1783:         $config->set('HTML.DefinitionRev', 4);",
          "",
          "[Added Lines]",
          "1783:         $config->set('HTML.DefinitionRev', 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1820:             $def->addElement('lang', 'Block', 'Flow', array(), array('lang'=>'CDATA')); // Original multilang style - only our hacked lang attribute.",
          "1821:             $def->addAttribute('span', 'xxxlang', 'CDATA');                             // Current very problematic multilang.",
          "1824:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Ruby());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1825:             $def->addElement('video', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', [",
          "1826:                 'src' => 'URI',",
          "1827:                 'crossorigin' => 'Enum#anonymous,use-credentials',",
          "1828:                 'poster' => 'URI',",
          "1829:                 'preload' => 'Enum#auto,metadata,none',",
          "1830:                 'autoplay' => 'Bool',",
          "1831:                 'playsinline' => 'Bool',",
          "1832:                 'loop' => 'Bool',",
          "1833:                 'muted' => 'Bool',",
          "1834:                 'controls' => 'Bool',",
          "1835:                 'width' => 'Length',",
          "1836:                 'height' => 'Length',",
          "1837:             ]);",
          "1839:             $def->addElement('audio', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', [",
          "1840:                 'src' => 'URI',",
          "1841:                 'crossorigin' => 'Enum#anonymous,use-credentials',",
          "1842:                 'preload' => 'Enum#auto,metadata,none',",
          "1843:                 'autoplay' => 'Bool',",
          "1844:                 'loop' => 'Bool',",
          "1845:                 'muted' => 'Bool',",
          "1846:                 'controls' => 'Bool'",
          "1847:             ]);",
          "1849:             $def->addElement('source', 'Block', 'Flow', 'Common', [",
          "1850:                 'src' => 'URI',",
          "1851:                 'type' => 'Text'",
          "1852:             ]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f34d7af0ae89758ff4adb63730de42cb4dc923e7",
      "candidate_info": {
        "commit_hash": "f34d7af0ae89758ff4adb63730de42cb4dc923e7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f34d7af0ae89758ff4adb63730de42cb4dc923e7",
        "files": [
          "lib/htmlpurifier/locallib.php",
          "lib/htmlpurifier/readme_moodle.txt",
          "lib/thirdpartylibs.xml",
          "lib/weblib.php"
        ],
        "message": "MDL-55087 lib: Update to htmlpurifier lib.",
        "before_after_code_files": [
          "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
          "lib/weblib.php||lib/weblib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
            "lib/weblib.php||lib/weblib.php"
          ],
          "candidate": [
            "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
            "lib/weblib.php||lib/weblib.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php": [
          "File: lib/htmlpurifier/locallib.php -> lib/htmlpurifier/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "130: class HTMLPurifier_AttrTransform_Noreferrer extends HTMLPurifier_AttrTransform {",
          "132:     private $parser;",
          "137:     public function __construct() {",
          "138:         $this->parser = new HTMLPurifier_URIParser();",
          "139:     }",
          "152:     public function transform($attr, $config, $context) {",
          "154:         if (!empty($attr['rel']) && substr($attr['rel'], 'noreferrer') !== false) {",
          "155:             return $attr;",
          "156:         }",
          "159:         if (!empty($attr['target']) && $attr['target'] == '_blank') {",
          "160:             $attr['rel'] = !empty($attr['rel']) ? $attr['rel'] . ' noreferrer' : 'noreferrer';",
          "161:         }",
          "163:         return $attr;",
          "164:     }",
          "165: }",
          "174: class HTMLPurifier_HTMLModule_Noreferrer extends HTMLPurifier_HTMLModule {",
          "176:     public $name = 'Noreferrer';",
          "183:     public function setup($config) {",
          "184:         $a = $this->addBlankElement('a');",
          "185:         $a->attr_transform_post[] = new HTMLPurifier_AttrTransform_Noreferrer();",
          "186:     }",
          "187: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/weblib.php||lib/weblib.php": [
          "File: lib/weblib.php -> lib/weblib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1782:         $config = HTMLPurifier_Config::createDefault();",
          "1784:         $config->set('HTML.DefinitionID', 'moodlehtml');",
          "1786:         $config->set('Cache.SerializerPath', $cachedir);",
          "1787:         $config->set('Cache.SerializerPermissions', $CFG->directorypermissions);",
          "1788:         $config->set('Core.NormalizeNewlines', false);",
          "",
          "[Removed Lines]",
          "1785:         $config->set('HTML.DefinitionRev', 5);",
          "",
          "[Added Lines]",
          "1785:         $config->set('HTML.DefinitionRev', 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1865:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Ruby());",
          "1869:         }",
          "1871:         $purifier = new HTMLPurifier($config);",
          "",
          "[Removed Lines]",
          "1868:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Noreferrer());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "469aa911c12d1f90e9baf0ac99d3092c25ae6519",
      "candidate_info": {
        "commit_hash": "469aa911c12d1f90e9baf0ac99d3092c25ae6519",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/469aa911c12d1f90e9baf0ac99d3092c25ae6519",
        "files": [
          "lib/tests/htmlpurifier_test.php",
          "lib/weblib.php"
        ],
        "message": "MDL-54847 weblib: Support basic HTML media tags",
        "before_after_code_files": [
          "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
          "lib/weblib.php||lib/weblib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
            "lib/weblib.php||lib/weblib.php"
          ],
          "candidate": [
            "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
            "lib/weblib.php||lib/weblib.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php": [
          "File: lib/tests/htmlpurifier_test.php -> lib/tests/htmlpurifier_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:         $text = '<a href=\"hmmm://www.example.com\">link</a>';",
          "319:         $this->assertSame('<a>link</a>', purify_html($text));",
          "320:     }",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:     public function test_media_tags($mediatag, $expected) {",
          "330:         $actual = format_text($mediatag, FORMAT_MOODLE, ['filter' => false, 'noclean' => true]);",
          "331:         $this->assertEquals($expected, $actual);",
          "332:     }",
          "337:     public function media_tags_provider() {",
          "339:         $p = function(array $set) {",
          "340:             return array_reduce($set, function($carry, $element) {",
          "341:                 return array_merge($carry, array_map(function($subset) use ($element) {",
          "342:                     return array_merge([$element], $subset);",
          "343:                 }, $carry));",
          "344:             }, [[]]);",
          "345:         };",
          "351:         $generatetestcases = function($prefix, array $attrs, array $templates) use ($p) {",
          "352:             $attrcombinations = $p($attrs);",
          "353:             return array_reduce($attrcombinations, function($carry, $attrset) use ($prefix, $templates) {",
          "354:                 $testcase = [$prefix . '/' . join('/', $attrset) => [",
          "355:                     sprintf($templates[0], join(\" \", $attrset)),",
          "356:                     sprintf($templates[1], join(\" \", $attrset))",
          "357:                 ]];",
          "358:                 return empty(array_values($carry)[0]) ? $testcase : $carry + $testcase;",
          "359:             }, [[]]);",
          "360:         };",
          "362:         $audioattrs = [",
          "363:             'preload=\"auto\"', 'autoplay=\"\"', 'loop=\"\"', 'muted=\"\"', 'controls=\"\"',",
          "364:             'crossorigin=\"anonymous\"', 'crossorigin=\"use-credentials\"'",
          "365:         ];",
          "366:         $videoattrs = [",
          "367:             'crossorigin=\"anonymous\"', 'crossorigin=\"use-credentials\"',",
          "368:             'poster=\"https://upload.wikimedia.org/wikipedia/en/1/14/Space_jam.jpg\"',",
          "369:             'preload=\"\"', 'autoplay=\"\"', 'playsinline=\"\"', 'loop=\"\"', 'muted=\"\"',",
          "370:             'controls=\"\"', 'width=\"420px\"', 'height=\"69px\"'",
          "371:         ];",
          "372:         return $generatetestcases('Plain audio', $audioattrs + ['src=\"http://example.com/jam.wav\"'], [",
          "373:                 '<audio %1$s>Looks like you can\\'t slam the jams.</audio>',",
          "374:                 '<div class=\"text_to_html\"><audio %1$s>Looks like you can\\'t slam the jams.</audio></div>'",
          "375:             ]) + $generatetestcases('Audio with one source', $audioattrs, [",
          "376:                 '<audio %1$s><source src=\"http://example.com/getup.wav\">No tasty jams for you.</audio>',",
          "377:                 '<div class=\"text_to_html\">' .",
          "378:                     '<audio %1$s>' .",
          "379:                         '<source src=\"http://example.com/getup.wav\">' .",
          "380:                         'No tasty jams for you.' .",
          "381:                     '</audio>' .",
          "382:                 '</div>'",
          "383:             ]) + $generatetestcases('Audio with multiple sources', $audioattrs, [",
          "384:                 '<audio %1$s>' .",
          "385:                     '<source src=\"http://example.com/getup.wav\" type=\"audio/wav\">' .",
          "386:                     '<source src=\"http://example.com/getup.mp3\" type=\"audio/mpeg\">' .",
          "387:                     '<source src=\"http://example.com/getup.ogg\" type=\"audio/ogg\">' .",
          "388:                     'No tasty jams for you.' .",
          "389:                 '</audio>',",
          "390:                 '<div class=\"text_to_html\">' .",
          "391:                      '<audio %1$s>' .",
          "392:                         '<source src=\"http://example.com/getup.wav\" type=\"audio/wav\">' .",
          "393:                         '<source src=\"http://example.com/getup.mp3\" type=\"audio/mpeg\">' .",
          "394:                         '<source src=\"http://example.com/getup.ogg\" type=\"audio/ogg\">' .",
          "395:                         'No tasty jams for you.' .",
          "396:                     '</audio>' .",
          "397:                 '</div>'",
          "398:             ]) + $generatetestcases('Plain video', $videoattrs + ['src=\"http://example.com/prettygood.mp4'], [",
          "399:                 '<video %1$s>Oh, that\\'s pretty bad \ud83d\ude26</video>',",
          "400:                 '<div class=\"text_to_html\"><video %1$s>Oh, that\\'s pretty bad \ud83d\ude26</video></div>'",
          "401:             ]) + $generatetestcases('Video with one source', $videoattrs, [",
          "402:                 '<video %1$s><source src=\"http://example.com/prettygood.mp4\">Oh, that\\'s pretty bad \ud83d\ude26</video>',",
          "403:                 '<div class=\"text_to_html\">' .",
          "404:                     '<video %1$s>' .",
          "405:                         '<source src=\"http://example.com/prettygood.mp4\">' .",
          "406:                         'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "407:                     '</video>' .",
          "408:                 '</div>'",
          "409:             ]) + $generatetestcases('Video with multiple sources', $videoattrs, [",
          "410:                 '<video %1$s>' .",
          "411:                     '<source src=\"http://example.com/prettygood.mp4\" type=\"video/mp4\">' .",
          "412:                     '<source src=\"http://example.com/eljefe.mp4\" type=\"video/mp4\">' .",
          "413:                     '<source src=\"http://example.com/turnitup.mov type=\"video/mov\"' .",
          "414:                     'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "415:                 '</video>',",
          "416:                 '<div class=\"text_to_html\">' .",
          "417:                     '<video %1$s>' .",
          "418:                         '<source src=\"http://example.com/prettygood.mp4\" type=\"video/mp4\">' .",
          "419:                         '<source src=\"http://example.com/eljefe.mp4\" type=\"video/mp4\">' .",
          "420:                         '<source src=\"http://example.com/turnitup.mov type=\"video/mov\"' .",
          "421:                         'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "422:                     '</video>' .",
          "423:                 '</div>'",
          "424:             ] + [",
          "425:                 'Video with invalid crossorigin' => [",
          "426:                     '<video src=\"http://example.com/turnitup.mov type=\"video/mov crossorigin=\"can i pls hab?\">' .",
          "427:                         'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "428:                     '</video>',",
          "429:                     '<div class=\"text_to_html\">' .",
          "430:                        '<video src=\"http://example.com/turnitup.mov type=\"video/mov\">' .",
          "431:                            'Oh, that\\'s pretty bad \ud83d\ude26' .",
          "432:                         '</video>',",
          "433:                     '</div>'",
          "434:                 ],",
          "435:                 'Audio with invalid crossorigin' => [",
          "436:                     '<audio src=\"http://example.com/getup.wav\" type=\"audio/wav\" crossorigin=\"give me. the jams.\">' .",
          "437:                         'nyemnyemnyem' .",
          "438:                     '</audio>',",
          "439:                     '<div class=\"text_to_html\">' .",
          "440:                         '<audio src=\"http://example.com/getup.wav\" type=\"audio/wav\" crossorigin=\"give me. the jams.\">' .",
          "441:                             'nyemnyemnyem' .",
          "442:                         '</audio>' .",
          "443:                     '</div>'",
          "444:                 ]",
          "445:             ]);",
          "446:     }",
          "",
          "---------------"
        ],
        "lib/weblib.php||lib/weblib.php": [
          "File: lib/weblib.php -> lib/weblib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1780:         $config = HTMLPurifier_Config::createDefault();",
          "1782:         $config->set('HTML.DefinitionID', 'moodlehtml');",
          "1784:         $config->set('Cache.SerializerPath', $cachedir);",
          "1785:         $config->set('Cache.SerializerPermissions', $CFG->directorypermissions);",
          "1786:         $config->set('Core.NormalizeNewlines', false);",
          "",
          "[Removed Lines]",
          "1783:         $config->set('HTML.DefinitionRev', 4);",
          "",
          "[Added Lines]",
          "1783:         $config->set('HTML.DefinitionRev', 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1820:             $def->addElement('lang', 'Block', 'Flow', array(), array('lang'=>'CDATA')); // Original multilang style - only our hacked lang attribute.",
          "1821:             $def->addAttribute('span', 'xxxlang', 'CDATA');                             // Current very problematic multilang.",
          "1824:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Ruby());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1825:             $def->addElement('video', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', [",
          "1826:                 'src' => 'URI',",
          "1827:                 'crossorigin' => 'Enum#anonymous,use-credentials',",
          "1828:                 'poster' => 'URI',",
          "1829:                 'preload' => 'Enum#auto,metadata,none',",
          "1830:                 'autoplay' => 'Bool',",
          "1831:                 'playsinline' => 'Bool',",
          "1832:                 'loop' => 'Bool',",
          "1833:                 'muted' => 'Bool',",
          "1834:                 'controls' => 'Bool',",
          "1835:                 'width' => 'Length',",
          "1836:                 'height' => 'Length',",
          "1837:             ]);",
          "1839:             $def->addElement('audio', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', [",
          "1840:                 'src' => 'URI',",
          "1841:                 'crossorigin' => 'Enum#anonymous,use-credentials',",
          "1842:                 'preload' => 'Enum#auto,metadata,none',",
          "1843:                 'autoplay' => 'Bool',",
          "1844:                 'loop' => 'Bool',",
          "1845:                 'muted' => 'Bool',",
          "1846:                 'controls' => 'Bool'",
          "1847:             ]);",
          "1849:             $def->addElement('source', 'Block', 'Flow', 'Common', [",
          "1850:                 'src' => 'URI',",
          "1851:                 'type' => 'Text'",
          "1852:             ]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "314d105c169c67e3ce750f76b21d99983d4a9ff5",
      "candidate_info": {
        "commit_hash": "314d105c169c67e3ce750f76b21d99983d4a9ff5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/314d105c169c67e3ce750f76b21d99983d4a9ff5",
        "files": [
          "lib/htmlpurifier/locallib.php",
          "lib/tests/htmlpurifier_test.php",
          "lib/weblib.php",
          "mod/data/field/url/field.class.php"
        ],
        "message": "MDL-52651 htmlpurifier: Append rel=noreferrer to links.\n\nThank you to Zachary Durber for originally working on this issue.",
        "before_after_code_files": [
          "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
          "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
          "lib/weblib.php||lib/weblib.php",
          "mod/data/field/url/field.class.php||mod/data/field/url/field.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
            "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
            "lib/weblib.php||lib/weblib.php",
            "mod/data/field/url/field.class.php||mod/data/field/url/field.class.php"
          ],
          "candidate": [
            "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php",
            "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php",
            "lib/weblib.php||lib/weblib.php",
            "mod/data/field/url/field.class.php||mod/data/field/url/field.class.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/htmlpurifier/locallib.php||lib/htmlpurifier/locallib.php": [
          "File: lib/htmlpurifier/locallib.php -> lib/htmlpurifier/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: class HTMLPurifier_AttrTransform_Noreferrer extends HTMLPurifier_AttrTransform {",
          "132:     private $parser;",
          "137:     public function __construct() {",
          "138:         $this->parser = new HTMLPurifier_URIParser();",
          "139:     }",
          "152:     public function transform($attr, $config, $context) {",
          "154:         if (!empty($attr['rel']) && substr($attr['rel'], 'noreferrer') !== false) {",
          "155:             return $attr;",
          "156:         }",
          "159:         if (!empty($attr['target']) && $attr['target'] == '_blank') {",
          "160:             $attr['rel'] = !empty($attr['rel']) ? $attr['rel'] . ' noreferrer' : 'noreferrer';",
          "161:         }",
          "163:         return $attr;",
          "164:     }",
          "165: }",
          "174: class HTMLPurifier_HTMLModule_Noreferrer extends HTMLPurifier_HTMLModule {",
          "176:     public $name = 'Noreferrer';",
          "183:     public function setup($config) {",
          "184:         $a = $this->addBlankElement('a');",
          "185:         $a->attr_transform_post[] = new HTMLPurifier_AttrTransform_Noreferrer();",
          "186:     }",
          "187: }",
          "",
          "---------------"
        ],
        "lib/tests/htmlpurifier_test.php||lib/tests/htmlpurifier_test.php": [
          "File: lib/tests/htmlpurifier_test.php -> lib/tests/htmlpurifier_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public function test_allow_blank_target() {",
          "43:         $text = '<a href=\"http://moodle.org\" target=\"_blank\">Some link</a>';",
          "44:         $result = format_text($text, FORMAT_HTML);",
          "47:         $result = format_text('<a href=\"http://moodle.org\" target=\"some\">Some link</a>', FORMAT_HTML);",
          "48:         $this->assertSame('<a href=\"http://moodle.org\">Some link</a>', $result);",
          "",
          "[Removed Lines]",
          "45:         $this->assertSame($text, $result);",
          "",
          "[Added Lines]",
          "47:         $expected = '<a href=\"http://moodle.org\" target=\"_blank\" rel=\"noreferrer\">Some link</a>';",
          "49:         $this->assertSame($expected, $result);",
          "",
          "---------------"
        ],
        "lib/weblib.php||lib/weblib.php": [
          "File: lib/weblib.php -> lib/weblib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1708:         $config = HTMLPurifier_Config::createDefault();",
          "1710:         $config->set('HTML.DefinitionID', 'moodlehtml');",
          "1712:         $config->set('Cache.SerializerPath', $cachedir);",
          "1713:         $config->set('Cache.SerializerPermissions', $CFG->directorypermissions);",
          "1714:         $config->set('Core.NormalizeNewlines', false);",
          "",
          "[Removed Lines]",
          "1711:         $config->set('HTML.DefinitionRev', 3);",
          "",
          "[Added Lines]",
          "1711:         $config->set('HTML.DefinitionRev', 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1752:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Ruby());",
          "1753:         }",
          "1755:         $purifier = new HTMLPurifier($config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1755:             $def->manager->addModule(new HTMLPurifier_HTMLModule_Noreferrer());",
          "",
          "---------------"
        ],
        "mod/data/field/url/field.class.php||mod/data/field/url/field.class.php": [
          "File: mod/data/field/url/field.class.php -> mod/data/field/url/field.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:                 if ($this->field->param3) {",
          "145:                     $attributes['target'] = '_blank';",
          "146:                 }",
          "148:                 if (empty($text)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:                     $attributes['rel'] = 'noreferrer';",
          "",
          "---------------"
        ]
      }
    }
  ]
}