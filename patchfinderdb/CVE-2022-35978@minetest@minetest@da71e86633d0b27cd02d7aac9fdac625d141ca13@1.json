{
  "cve_id": "CVE-2022-35978",
  "cve_desc": "Minetest is a free open-source voxel game engine with easy modding and game creation. In **single player**, a mod can set a global setting that controls the Lua script loaded to display the main menu. The script is then loaded as soon as the game session is exited. The Lua environment the menu runs in is not sandboxed and can directly interfere with the user's system. There are currently no known workarounds.",
  "repo": "minetest/minetest",
  "patch_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
  "patch_info": {
    "commit_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
    "repo": "minetest/minetest",
    "commit_url": "https://github.com/minetest/minetest/commit/da71e86633d0b27cd02d7aac9fdac625d141ca13",
    "files": [
      "src/script/lua_api/l_settings.cpp"
    ],
    "message": "Protect a few more settings from being set from mods\n\nOf those settings main_menu_script has concrete security impact, the rest are added out of abundance of caution.",
    "before_after_code_files": [
      "src/script/lua_api/l_settings.cpp||src/script/lua_api/l_settings.cpp"
    ]
  },
  "patch_diff": {
    "src/script/lua_api/l_settings.cpp||src/script/lua_api/l_settings.cpp": [
      "File: src/script/lua_api/l_settings.cpp -> src/script/lua_api/l_settings.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: static inline int checkSettingSecurity(lua_State* L, const std::string &name)",
      "42: {",
      "43:  if (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)",
      "46:  bool is_mainmenu = false;",
      "47: #ifndef SERVER",
      "",
      "[Removed Lines]",
      "44:   throw LuaError(\"Attempt to set secure setting.\");",
      "",
      "[Added Lines]",
      "46:   throw LuaError(\"Attempted to set secure setting.\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:   return -1;",
      "55:  }",
      "57:  return 0;",
      "58: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  const char *disallowed[] = {",
      "60:   \"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",",
      "61:   \"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",",
      "62:  };",
      "63:  if (!is_mainmenu) {",
      "64:   for (const char *name2 : disallowed) {",
      "65:    if (name == name2)",
      "66:     throw LuaError(\"Attempted to set disallowed setting.\");",
      "67:   }",
      "68:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1d03695d4859ff4a531c31b6bddcd8f50384c41",
      "candidate_info": {
        "commit_hash": "c1d03695d4859ff4a531c31b6bddcd8f50384c41",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/c1d03695d4859ff4a531c31b6bddcd8f50384c41",
        "files": [
          "src/serverenvironment.cpp",
          "src/serverenvironment.h"
        ],
        "message": "Minor code improvements around active block keeping",
        "before_after_code_files": [
          "src/serverenvironment.cpp||src/serverenvironment.cpp",
          "src/serverenvironment.h||src/serverenvironment.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/serverenvironment.cpp||src/serverenvironment.cpp": [
          "File: src/serverenvironment.cpp -> src/serverenvironment.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:   Update m_list",
          "385: }",
          "",
          "[Removed Lines]",
          "381:  m_list.clear();",
          "382:  for (v3s16 p : newlist) {",
          "383:   m_list.insert(p);",
          "384:  }",
          "",
          "[Added Lines]",
          "381:  m_list = std::move(newlist);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1343:    Get player block positions",
          "1345:   std::vector<PlayerSAO*> players;",
          "1348:    if (player->getPeerId() == PEER_ID_INEXISTENT)",
          "1349:     continue;",
          "",
          "[Removed Lines]",
          "1346:   for (RemotePlayer *player: m_players) {",
          "",
          "[Added Lines]",
          "1343:   players.reserve(m_players.size());",
          "1344:   for (RemotePlayer *player : m_players) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1368:   m_active_blocks.update(players, active_block_range, active_object_range,",
          "1369:    blocks_removed, blocks_added);",
          "1374:    Handle removed blocks",
          "",
          "[Removed Lines]",
          "1371:   m_active_block_gauge->set(m_active_blocks.size());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1393:   for (const v3s16 &p: blocks_added) {",
          "1394:    MapBlock *block = m_map->getBlockOrEmerge(p);",
          "1395:    if (!block) {",
          "1398:     continue;",
          "1399:    }",
          "1401:    activateBlock(block);",
          "1402:   }",
          "1403:  }",
          "1404:  m_force_update_active_blocks = false;",
          "",
          "[Removed Lines]",
          "1396:     m_active_blocks.m_list.erase(p);",
          "1397:     m_active_blocks.m_abm_list.erase(p);",
          "",
          "[Added Lines]",
          "1396:     m_active_blocks.remove(p);",
          "1404:   m_active_block_gauge->set(m_active_blocks.size());",
          "",
          "---------------"
        ],
        "src/serverenvironment.h||src/serverenvironment.h": [
          "File: src/serverenvironment.h -> src/serverenvironment.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:   m_list.clear();",
          "181:  }",
          "183:  std::set<v3s16> m_list;",
          "184:  std::set<v3s16> m_abm_list;",
          "185:  std::set<v3s16> m_forceloaded_list;",
          "186: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:  void remove(v3s16 p) {",
          "184:   m_list.erase(p);",
          "185:   m_abm_list.erase(p);",
          "186:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b68fb768306ad591057b0941bc31460034a4976",
      "candidate_info": {
        "commit_hash": "1b68fb768306ad591057b0941bc31460034a4976",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/1b68fb768306ad591057b0941bc31460034a4976",
        "files": [
          "builtin/game/chat.lua"
        ],
        "message": "Don't allow banning in singleplayer\n\nfixes #11819",
        "before_after_code_files": [
          "builtin/game/chat.lua||builtin/game/chat.lua"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "builtin/game/chat.lua||builtin/game/chat.lua": [
          "File: builtin/game/chat.lua -> builtin/game/chat.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "1187:     return true, S(\"Ban list: @1\", ban_list)",
          "1188:    end",
          "1189:   end",
          "1190:   if not core.get_player_by_name(param) then",
          "1191:    return false, S(\"Player is not online.\")",
          "1192:   end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190:   if core.is_singleplayer() then",
          "1191:    return false, S(\"You cannot ban players in singleplayer!\")",
          "1192:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb671c308930dc4cb8d67e8eed3664a23499bd95",
      "candidate_info": {
        "commit_hash": "bb671c308930dc4cb8d67e8eed3664a23499bd95",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/bb671c308930dc4cb8d67e8eed3664a23499bd95",
        "files": [
          "src/script/cpp_api/s_security.cpp"
        ],
        "message": "Remove debug.get/setmetatable from security whitelist\n\nfixes #12216",
        "before_after_code_files": [
          "src/script/cpp_api/s_security.cpp||src/script/cpp_api/s_security.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/script/cpp_api/s_security.cpp||src/script/cpp_api/s_security.cpp": [
          "File: src/script/cpp_api/s_security.cpp -> src/script/cpp_api/s_security.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   \"gethook\",",
          "129:   \"traceback\",",
          "130:   \"getinfo\",",
          "133:   \"upvalueid\",",
          "134:   \"sethook\",",
          "135:   \"debug\",",
          "",
          "[Removed Lines]",
          "131:   \"getmetatable\",",
          "132:   \"setmetatable\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "303329f2d6bc96f7756c72845de1bd87f62174a1",
      "candidate_info": {
        "commit_hash": "303329f2d6bc96f7756c72845de1bd87f62174a1",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/303329f2d6bc96f7756c72845de1bd87f62174a1",
        "files": [
          "src/server/luaentity_sao.cpp",
          "src/server/luaentity_sao.h"
        ],
        "message": "Handle lua entity HP changes correctly (like punches)\n\nfixes #11975",
        "before_after_code_files": [
          "src/server/luaentity_sao.cpp||src/server/luaentity_sao.cpp",
          "src/server/luaentity_sao.h||src/server/luaentity_sao.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/server/luaentity_sao.cpp||src/server/luaentity_sao.cpp": [
          "File: src/server/luaentity_sao.cpp -> src/server/luaentity_sao.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   if (result.did_punch) {",
          "338:    setHP((s32)getHP() - result.damage,",
          "339:     PlayerHPChangeReason(PlayerHPChangeReason::PLAYER_PUNCH, puncher));",
          "343:   }",
          "344:  }",
          "353:  actionstream << puncher->getDescription() << \" (id=\" << puncher->getId() <<",
          "354:    \", hp=\" << puncher->getHP() << \") punched \" <<",
          "355:    getDescription() << \" (id=\" << m_id << \", hp=\" << m_hp <<",
          "",
          "[Removed Lines]",
          "342:    sendPunchCommand();",
          "346:  if (getHP() == 0 && !isGone()) {",
          "347:   clearParentAttachment();",
          "348:   clearChildAttachments();",
          "349:   m_env->getScriptIface()->luaentity_on_death(m_id, puncher);",
          "350:   markForRemoval();",
          "351:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402: void LuaEntitySAO::setHP(s32 hp, const PlayerHPChangeReason &reason)",
          "403: {",
          "404:  m_hp = rangelim(hp, 0, U16_MAX);",
          "405: }",
          "407: u16 LuaEntitySAO::getHP() const",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:  sendPunchCommand();",
          "398:  if (m_hp == 0 && !isGone()) {",
          "399:   clearParentAttachment();",
          "400:   clearChildAttachments();",
          "401:   if (m_registered) {",
          "402:    ServerActiveObject *killer = nullptr;",
          "403:    if (reason.type == PlayerHPChangeReason::PLAYER_PUNCH)",
          "404:     killer = reason.object;",
          "405:    m_env->getScriptIface()->luaentity_on_death(m_id, killer);",
          "406:   }",
          "407:   markForRemoval();",
          "408:  }",
          "",
          "---------------"
        ],
        "src/server/luaentity_sao.h||src/server/luaentity_sao.h": [
          "File: src/server/luaentity_sao.h -> src/server/luaentity_sao.h"
        ]
      }
    },
    {
      "candidate_hash": "8908a9101608d3343023b470743ef63f1c44b0b7",
      "candidate_info": {
        "commit_hash": "8908a9101608d3343023b470743ef63f1c44b0b7",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/8908a9101608d3343023b470743ef63f1c44b0b7",
        "files": [
          "games/devtest/mods/unittests/misc.lua",
          "src/script/lua_api/l_nodemeta.cpp",
          "src/script/lua_api/l_nodemeta.h"
        ],
        "message": "Get rid of node metadata when it becomes empty\n\nfixes #8943",
        "before_after_code_files": [
          "games/devtest/mods/unittests/misc.lua||games/devtest/mods/unittests/misc.lua",
          "src/script/lua_api/l_nodemeta.cpp||src/script/lua_api/l_nodemeta.cpp",
          "src/script/lua_api/l_nodemeta.h||src/script/lua_api/l_nodemeta.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "games/devtest/mods/unittests/misc.lua||games/devtest/mods/unittests/misc.lua": [
          "File: games/devtest/mods/unittests/misc.lua -> games/devtest/mods/unittests/misc.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  assert(vector.check(found_pos))",
          "49: end",
          "50: unittests.register(\"test_v3s16_metatable\", test_v3s16_metatable, {map=true})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: local function test_clear_meta(_, pos)",
          "53:  local ref = core.get_meta(pos)",
          "55:  for way = 1, 3 do",
          "56:   ref:set_string(\"foo\", \"bar\")",
          "57:   assert(ref:contains(\"foo\"))",
          "59:   if way == 1 then",
          "60:    ref:from_table({})",
          "61:   elseif way == 2 then",
          "62:    ref:from_table(nil)",
          "63:   else",
          "64:    ref:set_string(\"foo\", \"\")",
          "65:   end",
          "67:   assert(#core.find_nodes_with_meta(pos, pos) == 0, \"clearing failed \" .. way)",
          "68:  end",
          "69: end",
          "70: unittests.register(\"test_clear_meta\", test_clear_meta, {map=true})",
          "",
          "---------------"
        ],
        "src/script/lua_api/l_nodemeta.cpp||src/script/lua_api/l_nodemeta.cpp": [
          "File: src/script/lua_api/l_nodemeta.cpp -> src/script/lua_api/l_nodemeta.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: Metadata* NodeMetaRef::getmeta(bool auto_create)",
          "41: {",
          "42:  if (m_is_local)",
          "45:  NodeMetadata *meta = m_env->getMap().getNodeMetadata(m_p);",
          "46:  if (meta == NULL && auto_create) {",
          "",
          "[Removed Lines]",
          "43:   return m_meta;",
          "",
          "[Added Lines]",
          "43:   return m_local_meta;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: void NodeMetaRef::reportMetadataChange(const std::string *name)",
          "63: {",
          "64:  SANITY_CHECK(!m_is_local);",
          "69:  MapEditEvent event;",
          "70:  event.type = MEET_BLOCK_NODE_METADATA_CHANGED;",
          "",
          "[Removed Lines]",
          "67:  NodeMetadata *meta = dynamic_cast<NodeMetadata*>(m_meta);",
          "",
          "[Added Lines]",
          "66:  NodeMetadata *meta = dynamic_cast<NodeMetadata*>(getmeta(false));",
          "69:  if (meta && meta->empty())",
          "70:   clearMeta();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174: }",
          "176: NodeMetaRef::NodeMetaRef(Metadata *meta):",
          "179: {",
          "180: }",
          "",
          "[Removed Lines]",
          "177:  m_meta(meta),",
          "178:  m_is_local(true)",
          "",
          "[Added Lines]",
          "180:  m_is_local(true),",
          "181:  m_local_meta(meta)",
          "",
          "---------------"
        ],
        "src/script/lua_api/l_nodemeta.h||src/script/lua_api/l_nodemeta.h": [
          "File: src/script/lua_api/l_nodemeta.h -> src/script/lua_api/l_nodemeta.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: class NodeMetaRef : public MetaDataRef {",
          "35: private:",
          "36:  v3s16 m_p;",
          "37:  ServerEnvironment *m_env = nullptr;",
          "41:  static const char className[];",
          "42:  static const luaL_Reg methodsServer[];",
          "",
          "[Removed Lines]",
          "38:  Metadata *m_meta = nullptr;",
          "39:  bool m_is_local = false;",
          "",
          "[Added Lines]",
          "36:  bool m_is_local = false;",
          "41:  Metadata *m_local_meta = nullptr;",
          "",
          "---------------"
        ]
      }
    }
  ]
}