{
  "cve_id": "CVE-2015-1793",
  "cve_desc": "The X509_verify_cert function in crypto/x509/x509_vfy.c in OpenSSL 1.0.1n, 1.0.1o, 1.0.2b, and 1.0.2c does not properly process X.509 Basic Constraints cA values during identification of alternative certificate chains, which allows remote attackers to spoof a Certification Authority role and trigger unintended certificate verifications via a valid leaf certificate.",
  "repo": "openssl/openssl",
  "patch_hash": "2aacec8f4a5ba1b365620a7b17fcce311ada93ad",
  "patch_info": {
    "commit_hash": "2aacec8f4a5ba1b365620a7b17fcce311ada93ad",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/2aacec8f4a5ba1b365620a7b17fcce311ada93ad",
    "files": [
      "crypto/x509/x509_vfy.c"
    ],
    "message": "Fix alternate chains certificate forgery issue\n\nDuring certificate verfification, OpenSSL will attempt to find an\nalternative certificate chain if the first attempt to build such a chain\nfails. An error in the implementation of this logic can mean that an\nattacker could cause certain checks on untrusted certificates to be\nbypassed, such as the CA flag, enabling them to use a valid leaf\ncertificate to act as a CA and \"issue\" an invalid certificate.\n\nThis occurs where at least one cert is added to the first chain from the\ntrust store, but that chain still ends up being untrusted. In that case\nctx->last_untrusted is decremented in error.\n\nPatch provided by the BoringSSL project.\n\nCVE-2015-1793\n\nReviewed-by: Stephen Henson <steve@openssl.org>",
    "before_after_code_files": [
      "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
    ]
  },
  "patch_diff": {
    "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
      "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "392:                         xtmp = sk_X509_pop(ctx->chain);",
      "393:                         X509_free(xtmp);",
      "394:                         num--;",
      "396:                     }",
      "397:                     retry = 1;",
      "398:                     break;",
      "399:                 }",
      "",
      "[Removed Lines]",
      "395:                         ctx->last_untrusted--;",
      "",
      "[Added Lines]",
      "396:                     ctx->last_untrusted = sk_X509_num(ctx->chain);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05f0fb9f6acc34c82a082d7668572828925694e7",
      "candidate_info": {
        "commit_hash": "05f0fb9f6acc34c82a082d7668572828925694e7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/05f0fb9f6acc34c82a082d7668572828925694e7",
        "files": [
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_lib.c",
          "crypto/cms/cms_sd.c",
          "crypto/ocsp/ocsp_cl.c",
          "crypto/ocsp/ocsp_srv.c",
          "crypto/pkcs7/pk7_lib.c",
          "crypto/store/str_lib.c",
          "crypto/ts/ts_rsp_sign.c",
          "crypto/ts/ts_rsp_verify.c",
          "crypto/x509/x509_cmp.c",
          "crypto/x509/x509_lu.c",
          "crypto/x509/x509_set.c",
          "crypto/x509/x509_vfy.c",
          "crypto/x509v3/pcy_tree.c",
          "include/openssl/x509.h",
          "ssl/s3_clnt.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_rsa.c",
          "ssl/ssl_sess.c"
        ],
        "message": "Add X509_up_ref function.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c",
          "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c",
          "crypto/ocsp/ocsp_cl.c||crypto/ocsp/ocsp_cl.c",
          "crypto/ocsp/ocsp_srv.c||crypto/ocsp/ocsp_srv.c",
          "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c",
          "crypto/store/str_lib.c||crypto/store/str_lib.c",
          "crypto/ts/ts_rsp_sign.c||crypto/ts/ts_rsp_sign.c",
          "crypto/ts/ts_rsp_verify.c||crypto/ts/ts_rsp_verify.c",
          "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c",
          "crypto/x509/x509_lu.c||crypto/x509/x509_lu.c",
          "crypto/x509/x509_set.c||crypto/x509/x509_set.c",
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c",
          "crypto/x509v3/pcy_tree.c||crypto/x509v3/pcy_tree.c",
          "include/openssl/x509.h||include/openssl/x509.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c",
          "ssl/ssl_sess.c||ssl/ssl_sess.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     if (!cms_set1_SignerIdentifier(ktri->rid, recip, idtype))",
          "207:         return 0;",
          "210:     CRYPTO_add(&pk->references, 1, CRYPTO_LOCK_EVP_PKEY);",
          "211:     ktri->pkey = pk;",
          "212:     ktri->recip = recip;",
          "",
          "[Removed Lines]",
          "209:     CRYPTO_add(&recip->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "209:     X509_up_ref(recip);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c": [
          "File: crypto/cms/cms_lib.c -> crypto/cms/cms_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:     int r;",
          "458:     r = CMS_add0_cert(cms, cert);",
          "459:     if (r > 0)",
          "461:     return r;",
          "462: }",
          "",
          "[Removed Lines]",
          "460:         CRYPTO_add(&cert->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "460:         X509_up_ref(cert);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:                 sk_X509_pop_free(certs, X509_free);",
          "543:                 return NULL;",
          "544:             }",
          "546:         }",
          "547:     }",
          "548:     return certs;",
          "",
          "[Removed Lines]",
          "545:             CRYPTO_add(&cch->d.certificate->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "545:             X509_up_ref(cch->d.certificate);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c": [
          "File: crypto/cms/cms_sd.c -> crypto/cms/cms_sd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:     X509_check_purpose(signer, -1, -1);",
          "287:     CRYPTO_add(&pk->references, 1, CRYPTO_LOCK_EVP_PKEY);",
          "290:     si->pkey = pk;",
          "291:     si->signer = signer;",
          "",
          "[Removed Lines]",
          "288:     CRYPTO_add(&signer->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "288:     X509_up_ref(signer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485: void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)",
          "486: {",
          "487:     if (signer) {",
          "489:         EVP_PKEY_free(si->pkey);",
          "490:         si->pkey = X509_get_pubkey(signer);",
          "491:     }",
          "",
          "[Removed Lines]",
          "488:         CRYPTO_add(&signer->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "488:         X509_up_ref(signer);",
          "",
          "---------------"
        ],
        "crypto/ocsp/ocsp_cl.c||crypto/ocsp/ocsp_cl.c": [
          "File: crypto/ocsp/ocsp_cl.c -> crypto/ocsp/ocsp_cl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     if (!sk_X509_push(sig->certs, cert))",
          "140:         return 0;",
          "142:     return 1;",
          "143: }",
          "",
          "[Removed Lines]",
          "141:     CRYPTO_add(&cert->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "141:     X509_up_ref(cert);",
          "",
          "---------------"
        ],
        "crypto/ocsp/ocsp_srv.c||crypto/ocsp/ocsp_srv.c": [
          "File: crypto/ocsp/ocsp_srv.c -> crypto/ocsp/ocsp_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:     if (!sk_X509_push(resp->certs, cert))",
          "215:         return 0;",
          "217:     return 1;",
          "218: }",
          "",
          "[Removed Lines]",
          "216:     CRYPTO_add(&cert->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "216:     X509_up_ref(cert);",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c": [
          "File: crypto/pkcs7/pk7_lib.c -> crypto/pkcs7/pk7_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         PKCS7err(PKCS7_F_PKCS7_ADD_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "309:         return 0;",
          "310:     }",
          "312:     if (!sk_X509_push(*sk, x509)) {",
          "313:         X509_free(x509);",
          "314:         return 0;",
          "",
          "[Removed Lines]",
          "311:     CRYPTO_add(&x509->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "311:     X509_up_ref(x509);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "546:     EVP_PKEY_free(pkey);",
          "549:     p7i->cert = x509;",
          "551:     return 1;",
          "",
          "[Removed Lines]",
          "548:     CRYPTO_add(&x509->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "548:     X509_up_ref(x509);",
          "",
          "---------------"
        ],
        "crypto/store/str_lib.c||crypto/store/str_lib.c": [
          "File: crypto/store/str_lib.c -> crypto/store/str_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:                  STORE_R_FAILED_GETTING_CERTIFICATE);",
          "252:         return 0;",
          "253:     }",
          "256: #ifdef REF_PRINT",
          "257:     REF_PRINT(\"X509\", data);",
          "258: #endif",
          "",
          "[Removed Lines]",
          "254:     CRYPTO_add(&object->data.x509.certificate->references, 1,",
          "255:                CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "254:     X509_up_ref(object->data.x509.certificate);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:         return 0;",
          "277:     }",
          "280: #ifdef REF_PRINT",
          "281:     REF_PRINT(\"X509\", data);",
          "282: #endif",
          "",
          "[Removed Lines]",
          "279:     CRYPTO_add(&data->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "278:     X509_up_ref(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:                  STORE_R_FAILED_LISTING_CERTIFICATES);",
          "379:         return 0;",
          "380:     }",
          "383: #ifdef REF_PRINT",
          "384:     REF_PRINT(\"X509\", data);",
          "385: #endif",
          "",
          "[Removed Lines]",
          "381:     CRYPTO_add(&object->data.x509.certificate->references, 1,",
          "382:                CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "380:     X509_up_ref(object->data.x509.certificate);",
          "",
          "---------------"
        ],
        "crypto/ts/ts_rsp_sign.c||crypto/ts/ts_rsp_sign.c": [
          "File: crypto/ts/ts_rsp_sign.c -> crypto/ts/ts_rsp_sign.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     }",
          "210:     X509_free(ctx->signer_cert);",
          "211:     ctx->signer_cert = signer;",
          "213:     return 1;",
          "214: }",
          "",
          "[Removed Lines]",
          "212:     CRYPTO_add(&ctx->signer_cert->references, +1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "212:     X509_up_ref(ctx->signer_cert);",
          "",
          "---------------"
        ],
        "crypto/ts/ts_rsp_verify.c||crypto/ts/ts_rsp_verify.c": [
          "File: crypto/ts/ts_rsp_verify.c -> crypto/ts/ts_rsp_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:     if (signer_out) {",
          "216:     }",
          "218:     ret = 1;",
          "",
          "[Removed Lines]",
          "215:         CRYPTO_add(&signer->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "215:         X509_up_ref(signer);",
          "",
          "---------------"
        ],
        "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c": [
          "File: crypto/x509/x509_cmp.c -> crypto/x509/x509_cmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     ret = sk_X509_dup(chain);",
          "488:     for (i = 0; i < sk_X509_num(ret); i++) {",
          "489:         X509 *x = sk_X509_value(ret, i);",
          "491:     }",
          "492:     return ret;",
          "493: }",
          "",
          "[Removed Lines]",
          "490:         CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "490:         X509_up_ref(x);",
          "",
          "---------------"
        ],
        "crypto/x509/x509_lu.c||crypto/x509/x509_lu.c": [
          "File: crypto/x509/x509_lu.c -> crypto/x509/x509_lu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:     default:",
          "407:         break;",
          "408:     case X509_LU_X509:",
          "410:         break;",
          "411:     case X509_LU_CRL:",
          "412:         X509_CRL_up_ref(a->data.crl);",
          "",
          "[Removed Lines]",
          "409:         CRYPTO_add(&a->data.x509->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "409:         X509_up_ref(a->data.x509);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:     for (i = 0; i < cnt; i++, idx++) {",
          "522:         obj = sk_X509_OBJECT_value(ctx->ctx->objs, idx);",
          "523:         x = obj->data.x509;",
          "525:         if (!sk_X509_push(sk, x)) {",
          "526:             CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);",
          "527:             X509_free(x);",
          "",
          "[Removed Lines]",
          "524:         CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "524:         X509_up_ref(x);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "676:     }",
          "677:     CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);",
          "678:     if (*issuer)",
          "680:     return ret;",
          "681: }",
          "",
          "[Removed Lines]",
          "679:         CRYPTO_add(&(*issuer)->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "679:         X509_up_ref(*issuer);",
          "",
          "---------------"
        ],
        "crypto/x509/x509_set.c||crypto/x509/x509_set.c": [
          "File: crypto/x509/x509_set.c -> crypto/x509/x509_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         return (0);",
          "151:     return (X509_PUBKEY_set(&(x->cert_info->key), pkey));",
          "152: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: void X509_up_ref(X509 *x)",
          "155: {",
          "156:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "157: }",
          "",
          "---------------"
        ],
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:             break;",
          "173:     }",
          "174:     if (i < sk_X509_num(certs))",
          "176:     else",
          "177:         xtmp = NULL;",
          "178:     sk_X509_pop_free(certs, X509_free);",
          "",
          "[Removed Lines]",
          "175:         CRYPTO_add(&xtmp->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "175:         X509_up_ref(xtmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:         X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "213:         goto end;",
          "214:     }",
          "216:     ctx->last_untrusted = 1;",
          "",
          "[Removed Lines]",
          "215:     CRYPTO_add(&ctx->cert->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "215:     X509_up_ref(ctx->cert);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:                     X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "263:                     goto end;",
          "264:                 }",
          "266:                 (void)sk_X509_delete_ptr(sktmp, xtmp);",
          "267:                 ctx->last_untrusted++;",
          "268:                 x = xtmp;",
          "",
          "[Removed Lines]",
          "265:                 CRYPTO_add(&xtmp->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "265:                 X509_up_ref(xtmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "566: {",
          "568:     if (*issuer) {",
          "570:         return 1;",
          "571:     } else",
          "572:         return 0;",
          "",
          "[Removed Lines]",
          "569:         CRYPTO_add(&(*issuer)->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "569:         X509_up_ref(*issuer);",
          "",
          "---------------"
        ],
        "crypto/x509v3/pcy_tree.c||crypto/x509v3/pcy_tree.c": [
          "File: crypto/x509v3/pcy_tree.c -> crypto/x509v3/pcy_tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:         level++;",
          "250:         x = sk_X509_value(certs, i);",
          "251:         cache = policy_cache_set(x);",
          "253:         level->cert = x;",
          "255:         if (!cache->anyPolicy)",
          "",
          "[Removed Lines]",
          "252:         CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "252:         X509_up_ref(x);",
          "",
          "---------------"
        ],
        "include/openssl/x509.h||include/openssl/x509.h": [
          "File: include/openssl/x509.h -> include/openssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "798: int X509_set_notBefore(X509 *x, const ASN1_TIME *tm);",
          "799: int X509_set_notAfter(X509 *x, const ASN1_TIME *tm);",
          "800: int X509_set_pubkey(X509 *x, EVP_PKEY *pkey);",
          "801: EVP_PKEY *X509_get_pubkey(X509 *x);",
          "802: ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x);",
          "803: int X509_certificate_type(X509 *x, EVP_PKEY *pubkey /* optional */ );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801: void X509_up_ref(X509 *x);",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1359:     s->session->peer_type = i;",
          "1361:     X509_free(s->session->peer);",
          "1363:     s->session->peer = x;",
          "1364:     s->session->verify_result = s->verify_result;",
          "",
          "[Removed Lines]",
          "1362:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "1362:     X509_up_ref(x);",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:         CERT_PKEY *rpk = ret->pkeys + i;",
          "251:         if (cpk->x509 != NULL) {",
          "252:             rpk->x509 = cpk->x509;",
          "254:         }",
          "256:         if (cpk->privatekey != NULL) {",
          "",
          "[Removed Lines]",
          "253:             CRYPTO_add(&rpk->x509->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "253:             X509_up_ref(rpk->x509);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463: {",
          "464:     if (!ssl_cert_add0_chain_cert(s, ctx, x))",
          "465:         return 0;",
          "467:     return 1;",
          "468: }",
          "",
          "[Removed Lines]",
          "466:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "466:     X509_up_ref(x);",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "825:     if (r == NULL)",
          "826:         return (r);",
          "830:     return (r);",
          "831: }",
          "",
          "[Removed Lines]",
          "828:     CRYPTO_add(&r->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "828:     X509_up_ref(r);",
          "",
          "---------------"
        ],
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:     EVP_PKEY_free(pkey);",
          "417:     X509_free(c->pkeys[i].x509);",
          "419:     c->pkeys[i].x509 = x;",
          "420:     c->key = &(c->pkeys[i]);",
          "",
          "[Removed Lines]",
          "418:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "418:     X509_up_ref(x);",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     dest->references = 1;",
          "268:     if (src->peer != NULL)",
          "271:     if (src->peer_chain != NULL) {",
          "272:         dest->peer_chain = X509_chain_up_ref(src->peer_chain);",
          "",
          "[Removed Lines]",
          "269:         CRYPTO_add(&src->peer->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Added Lines]",
          "269:         X509_up_ref(src->peer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55500ea7c46c27a150a46832e1260891aaad8e52",
      "candidate_info": {
        "commit_hash": "55500ea7c46c27a150a46832e1260891aaad8e52",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/55500ea7c46c27a150a46832e1260891aaad8e52",
        "files": [
          "crypto/asn1/x_x509a.c",
          "crypto/pkcs7/pk7_smime.c",
          "crypto/x509/x509_vfy.c",
          "test/clienthellotest.c",
          "test/gost2814789test.c"
        ],
        "message": "GH354: Memory leak fixes\n\nFix more potential leaks in X509_verify_cert()\nFix memory leak in ClientHello test\nFix memory leak in gost2814789 test\nFix potential memory leak in PKCS7_verify()\nFix potential memory leaks in X509_add1_reject_object()\nRefactor to use \"goto err\" in cleanup.\n\nSigned-off-by: Rich Salz <rsalz@akamai.com>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/x_x509a.c||crypto/asn1/x_x509a.c",
          "crypto/pkcs7/pk7_smime.c||crypto/pkcs7/pk7_smime.c",
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c",
          "test/clienthellotest.c||test/clienthellotest.c",
          "test/gost2814789test.c||test/gost2814789test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/x_x509a.c||crypto/asn1/x_x509a.c": [
          "File: crypto/asn1/x_x509a.c -> crypto/asn1/x_x509a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     if ((objtmp = OBJ_dup(obj)) == NULL)",
          "173:         return 0;",
          "174:     if ((aux = aux_get(x)) == NULL)",
          "176:     if (aux->reject == NULL",
          "177:         && (aux->reject = sk_ASN1_OBJECT_new_null()) == NULL)",
          "179:     return sk_ASN1_OBJECT_push(aux->reject, objtmp);",
          "180: }",
          "182: void X509_trust_clear(X509 *x)",
          "",
          "[Removed Lines]",
          "175:         return 0;",
          "178:         return 0;",
          "",
          "[Added Lines]",
          "175:         goto err;",
          "178:         goto err;",
          "180:  err:",
          "181:     ASN1_OBJECT_free(objtmp);",
          "182:     return 0;",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_smime.c||crypto/pkcs7/pk7_smime.c": [
          "File: crypto/pkcs7/pk7_smime.c -> crypto/pkcs7/pk7_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:     X509_STORE_CTX cert_ctx;",
          "256:     char buf[4096];",
          "257:     int i, j = 0, k, ret = 0;",
          "261:     if (!p7) {",
          "262:         PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_INVALID_NULL_POINTER);",
          "",
          "[Removed Lines]",
          "258:     BIO *p7bio;",
          "259:     BIO *tmpin, *tmpout;",
          "",
          "[Added Lines]",
          "258:     BIO *p7bio = NULL;",
          "259:     BIO *tmpin = NULL, *tmpout = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:         return 0;",
          "275:     }",
          "284:     if (!PKCS7_get_detached(p7) && indata) {",
          "285:         PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_CONTENT_AND_DATA_PRESENT);",
          "286:         return 0;",
          "287:     }",
          "290:     sinfos = PKCS7_get_signer_info(p7);",
          "",
          "[Removed Lines]",
          "282: #ifdef OPENSSL_DONT_SUPPORT_OLD_NETSCAPE",
          "288: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:                 if (!X509_STORE_CTX_init(&cert_ctx, store, signer,",
          "309:                                          p7->d.sign->cert)) {",
          "310:                     PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_X509_LIB);",
          "313:                 }",
          "314:                 X509_STORE_CTX_set_default(&cert_ctx, \"smime_sign\");",
          "315:             } else if (!X509_STORE_CTX_init(&cert_ctx, store, signer, NULL)) {",
          "316:                 PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_X509_LIB);",
          "319:             }",
          "320:             if (!(flags & PKCS7_NOCRL))",
          "321:                 X509_STORE_CTX_set0_crls(&cert_ctx, p7->d.sign->crl);",
          "",
          "[Removed Lines]",
          "311:                     sk_X509_free(signers);",
          "312:                     return 0;",
          "317:                 sk_X509_free(signers);",
          "318:                 return 0;",
          "",
          "[Added Lines]",
          "303:                     goto err;",
          "308:                 goto err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:                          PKCS7_R_CERTIFICATE_VERIFY_ERROR);",
          "329:                 ERR_add_error_data(2, \"Verify error:\",",
          "330:                                    X509_verify_cert_error_string(j));",
          "333:             }",
          "335:         }",
          "",
          "[Removed Lines]",
          "331:                 sk_X509_free(signers);",
          "332:                 return 0;",
          "",
          "[Added Lines]",
          "321:                 goto err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "348:         tmpin = BIO_new_mem_buf(ptr, len);",
          "349:         if (tmpin == NULL) {",
          "350:             PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_MALLOC_FAILURE);",
          "352:         }",
          "353:     } else",
          "354:         tmpin = indata;",
          "",
          "[Removed Lines]",
          "351:             return 0;",
          "",
          "[Added Lines]",
          "340:             goto err;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:         if (ctx->param->flags & X509_V_FLAG_TRUSTED_FIRST) {",
          "244:             ok = ctx->get_issuer(&xtmp, ctx, x);",
          "245:             if (ok < 0)",
          "",
          "[Removed Lines]",
          "246:                 return ok;",
          "",
          "[Added Lines]",
          "246:                 goto end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:             ok = ctx->get_issuer(&xtmp, ctx, x);",
          "343:             if (ok < 0)",
          "345:             if (ok == 0)",
          "346:                 break;",
          "347:             x = xtmp;",
          "",
          "[Removed Lines]",
          "344:                 return ok;",
          "",
          "[Added Lines]",
          "344:                 goto end;",
          "",
          "---------------"
        ],
        "test/clienthellotest.c||test/clienthellotest.c": [
          "File: test/clienthellotest.c -> test/clienthellotest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:     EVP_cleanup();",
          "214:     CRYPTO_cleanup_all_ex_data();",
          "215:     CRYPTO_mem_leaks(err);",
          "217:     return testresult?0:1;",
          "218: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     BIO_free(err);",
          "",
          "---------------"
        ],
        "test/gost2814789test.c||test/gost2814789test.c": [
          "File: test/gost2814789test.c -> test/gost2814789test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1411:             }",
          "1412:             siglen = 4;",
          "1413:             OPENSSL_assert(EVP_DigestSignFinal(&mctx, bTest, &siglen));",
          "1414:             EVP_MD_CTX_cleanup(&mctx);",
          "1415:             enlu = (int)tcs[t].ullLen;",
          "1416:             enlf = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1414:             EVP_PKEY_free(mac_key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1434:     printf(\" passed\\n\");",
          "1435:     fflush(NULL);",
          "1437:     return EXIT_SUCCESS;",
          "1438: }",
          "1439: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1438:     NCONF_free(pConfig);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aae41f8c54257d9fa6904d3a9aa09c5db6cefd0d",
      "candidate_info": {
        "commit_hash": "aae41f8c54257d9fa6904d3a9aa09c5db6cefd0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/aae41f8c54257d9fa6904d3a9aa09c5db6cefd0d",
        "files": [
          "crypto/x509/x509_vfy.c",
          "doc/crypto/X509_STORE_CTX_new.pod",
          "doc/crypto/X509_verify_cert.pod"
        ],
        "message": "Reject calls to X509_verify_cert that have not been reinitialised\n\nThe function X509_verify_cert checks the value of |ctx->chain| at the\nbeginning, and if it is NULL then it initialises it, along with the value\nof ctx->untrusted. The normal way to use X509_verify_cert() is to first\ncall X509_STORE_CTX_init(); then set up various parameters etc; then call\nX509_verify_cert(); then check the results; and finally call\nX509_STORE_CTX_cleanup(). The initial call to X509_STORE_CTX_init() sets\n|ctx->chain| to NULL. The only place in the OpenSSL codebase  where\n|ctx->chain| is set to anything other than a non NULL value is in\nX509_verify_cert itself. Therefore the only ways that |ctx->chain| could be\nnon NULL on entry to X509_verify_cert is if one of the following occurs:\n1) An application calls X509_verify_cert() twice without re-initialising\nin between.\n2) An application reaches inside the X509_STORE_CTX structure and changes\nthe value of |ctx->chain| directly.\n\nWith regards to the second of these, we should discount this - it should\nnot be supported to allow this.\n\nWith regards to the first of these, the documentation is not exactly\ncrystal clear, but the implication is that you must call\nX509_STORE_CTX_init() before each call to X509_verify_cert(). If you fail\nto do this then, at best, the results would be undefined.\n\nCalling X509_verify_cert() with |ctx->chain| set to a non NULL value is\nlikely to have unexpected results, and could be dangerous. This commit\nchanges the behaviour of X509_verify_cert() so that it causes an error if\n|ctx->chain| is anything other than NULL (because this indicates that we\nhave not been initialised properly). It also clarifies the associated\ndocumentation. This is a follow up commit to CVE-2015-1793.\n\nReviewed-by: Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:         X509err(X509_F_X509_VERIFY_CERT, X509_R_NO_CERT_SET_FOR_US_TO_VERIFY);",
          "194:         return -1;",
          "195:     }",
          "197:     cb = ctx->verify_cb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     if (ctx->chain != NULL) {",
          "201:         X509err(X509_F_X509_VERIFY_CERT, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);",
          "202:         return -1;",
          "203:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:     }",
          "214:     if (ctx->untrusted != NULL",
          "",
          "[Removed Lines]",
          "203:     if (ctx->chain == NULL) {",
          "204:         if (((ctx->chain = sk_X509_new_null()) == NULL) ||",
          "205:             (!sk_X509_push(ctx->chain, ctx->cert))) {",
          "206:             X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "207:             goto end;",
          "208:         }",
          "209:         CRYPTO_add(&ctx->cert->references, 1, CRYPTO_LOCK_X509);",
          "210:         ctx->last_untrusted = 1;",
          "",
          "[Added Lines]",
          "211:     if (((ctx->chain = sk_X509_new_null()) == NULL) ||",
          "212:         (!sk_X509_push(ctx->chain, ctx->cert))) {",
          "213:         X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "214:         goto end;",
          "216:     CRYPTO_add(&ctx->cert->references, 1, CRYPTO_LOCK_X509);",
          "217:     ctx->last_untrusted = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc2829e6641092abed8360433dbe67e883fd1cc6",
      "candidate_info": {
        "commit_hash": "cc2829e6641092abed8360433dbe67e883fd1cc6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cc2829e6641092abed8360433dbe67e883fd1cc6",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "GH364: Free memory on an error path\n\nPart of RT 3997\nPer Ben, just jump to common exit code.\n\nSigned-off-by: Rich Salz <rsalz@akamai.com>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:             if (!sk_X509_push(ctx->chain, x)) {",
          "349:                 X509_free(xtmp);",
          "350:                 X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "352:             }",
          "353:             num++;",
          "354:         }",
          "",
          "[Removed Lines]",
          "351:                 return 0;",
          "",
          "[Added Lines]",
          "351:                 ok = 0;",
          "352:                 goto done;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da084a5ec6cebd67ae27f2463ebe4a50bb840fa5",
      "candidate_info": {
        "commit_hash": "da084a5ec6cebd67ae27f2463ebe4a50bb840fa5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/da084a5ec6cebd67ae27f2463ebe4a50bb840fa5",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "In certain situations the server provided certificate chain may no longer be valid. However the issuer of the leaf, or some intermediate cert is in fact in the trust store.\n\nWhen building a trust chain if the first attempt fails, then try to see if\nalternate chains could be constructed that are trusted.\n\nRT3637\nRT3621\n\nReviewed-by: Dr. Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ],
          "candidate": [
            "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: int X509_verify_cert(X509_STORE_CTX *ctx)",
          "184: {",
          "186:     int bad_chain = 0;",
          "187:     X509_VERIFY_PARAM *param = ctx->param;",
          "188:     int depth, i, ok = 0;",
          "190:     int (*cb) (int xok, X509_STORE_CTX *xctx);",
          "191:     STACK_OF(X509) *sktmp = NULL;",
          "192:     if (ctx->cert == NULL) {",
          "",
          "[Removed Lines]",
          "185:     X509 *x, *xtmp, *chain_ss = NULL;",
          "189:     int num;",
          "",
          "[Added Lines]",
          "185:     X509 *x, *xtmp, *xtmp2, *chain_ss = NULL;",
          "189:     int num, j, retry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:         break;",
          "272:     }",
          "305:             } else {",
          "314:             }",
          "323:         }",
          "348:         }",
          "",
          "[Removed Lines]",
          "284:     i = sk_X509_num(ctx->chain);",
          "285:     x = sk_X509_value(ctx->chain, i - 1);",
          "286:     if (cert_self_signed(x)) {",
          "288:         if (sk_X509_num(ctx->chain) == 1) {",
          "294:             ok = ctx->get_issuer(&xtmp, ctx, x);",
          "295:             if ((ok <= 0) || X509_cmp(x, xtmp)) {",
          "296:                 ctx->error = X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT;",
          "297:                 ctx->current_cert = x;",
          "298:                 ctx->error_depth = i - 1;",
          "299:                 if (ok == 1)",
          "300:                     X509_free(xtmp);",
          "301:                 bad_chain = 1;",
          "302:                 ok = cb(0, ctx);",
          "303:                 if (!ok)",
          "304:                     goto end;",
          "310:                 X509_free(x);",
          "311:                 x = xtmp;",
          "312:                 (void)sk_X509_set(ctx->chain, i - 1, x);",
          "313:                 ctx->last_untrusted = 0;",
          "315:         } else {",
          "319:             chain_ss = sk_X509_pop(ctx->chain);",
          "320:             ctx->last_untrusted--;",
          "321:             num--;",
          "322:             x = sk_X509_value(ctx->chain, num - 1);",
          "324:     }",
          "327:     for (;;) {",
          "329:         if (depth < num)",
          "330:             break;",
          "333:         if (cert_self_signed(x))",
          "334:             break;",
          "336:         ok = ctx->get_issuer(&xtmp, ctx, x);",
          "338:         if (ok < 0)",
          "339:             return ok;",
          "340:         if (ok == 0)",
          "341:             break;",
          "343:         x = xtmp;",
          "344:         if (!sk_X509_push(ctx->chain, x)) {",
          "345:             X509_free(xtmp);",
          "346:             X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "347:             return 0;",
          "349:         num++;",
          "350:     }",
          "354:     i = check_trust(ctx);",
          "357:     if (i == X509_TRUST_REJECTED)",
          "358:         goto end;",
          "",
          "[Added Lines]",
          "275:     j = num;",
          "282:     do {",
          "286:         i = sk_X509_num(ctx->chain);",
          "287:         x = sk_X509_value(ctx->chain, i - 1);",
          "288:         if (cert_self_signed(x)) {",
          "290:             if (sk_X509_num(ctx->chain) == 1) {",
          "296:                 ok = ctx->get_issuer(&xtmp, ctx, x);",
          "297:                 if ((ok <= 0) || X509_cmp(x, xtmp)) {",
          "298:                     ctx->error = X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT;",
          "299:                     ctx->current_cert = x;",
          "300:                     ctx->error_depth = i - 1;",
          "301:                     if (ok == 1)",
          "302:                         X509_free(xtmp);",
          "303:                     bad_chain = 1;",
          "304:                     ok = cb(0, ctx);",
          "305:                     if (!ok)",
          "306:                         goto end;",
          "307:                 } else {",
          "312:                     X509_free(x);",
          "313:                     x = xtmp;",
          "314:                     (void)sk_X509_set(ctx->chain, i - 1, x);",
          "315:                     ctx->last_untrusted = 0;",
          "316:                 }",
          "321:                 chain_ss = sk_X509_pop(ctx->chain);",
          "322:                 ctx->last_untrusted--;",
          "323:                 num--;",
          "324:                 j--;",
          "325:                 x = sk_X509_value(ctx->chain, num - 1);",
          "329:         for (;;) {",
          "331:             if (depth < num)",
          "332:                 break;",
          "334:             if (cert_self_signed(x))",
          "335:                 break;",
          "336:             ok = ctx->get_issuer(&xtmp, ctx, x);",
          "338:             if (ok < 0)",
          "339:                 return ok;",
          "340:             if (ok == 0)",
          "341:                 break;",
          "342:             x = xtmp;",
          "343:             if (!sk_X509_push(ctx->chain, x)) {",
          "344:                 X509_free(xtmp);",
          "345:                 X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);",
          "346:                 return 0;",
          "347:             }",
          "348:             num++;",
          "349:         }",
          "352:         i = check_trust(ctx);",
          "355:         if (i == X509_TRUST_REJECTED)",
          "356:             goto end;",
          "362:         retry = 0;",
          "363:         if (i != X509_TRUST_TRUSTED",
          "364:             && !(ctx->param->flags & X509_V_FLAG_TRUSTED_FIRST)) {",
          "365:             while (j-- > 1) {",
          "366:                 xtmp2 = sk_X509_value(ctx->chain, j - 1);",
          "367:                 ok = ctx->get_issuer(&xtmp, ctx, xtmp2);",
          "368:                 if (ok < 0)",
          "369:                     goto end;",
          "371:                 if (ok > 0) {",
          "375:                     X509_free(xtmp);",
          "381:                     while (num > j) {",
          "382:                         xtmp = sk_X509_pop(ctx->chain);",
          "383:                         X509_free(xtmp);",
          "384:                         num--;",
          "385:                         ctx->last_untrusted--;",
          "386:                     }",
          "387:                     retry = 1;",
          "388:                     break;",
          "389:                 }",
          "390:             }",
          "392:     } while (retry);",
          "",
          "---------------"
        ]
      }
    }
  ]
}