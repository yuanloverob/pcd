{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
      "candidate_info": {
        "commit_hash": "7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/index.test"
        ],
        "message": "Add a test case for ticket [ae0f637bddc5290b44669e066a].\n\nFossilOrigin-Name: ece481695fc3c959c3eba0fb485cdda43a10b06d17259b0121e15bfc5e8e8b9f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:   INSERT INTO t1(a,b) VALUES('a',1),('a',0);",
          "748:   SELECT a, b, '|' FROM t1;",
          "749: } {a 1 | a 0 |}",
          "752: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751: # 2019-05-10 ticket https://www.sqlite.org/src/info/ae0f637bddc5290b",
          "752: do_execsql_test index-23.0 {",
          "753:   DROP TABLE t1;",
          "754:   CREATE TABLE t1(a TEXT, b REAL);",
          "755:   CREATE UNIQUE INDEX t1x1 ON t1(a GLOB b);",
          "756:   INSERT INTO t1(a,b) VALUES('0.0','1'),('1.0','1');",
          "757:   SELECT * FROM t1;",
          "758:   REINDEX;",
          "759: } {0.0 1.0 1.0 1.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb224ab1394cc981cf85a9e5520714ca8221f38f",
      "candidate_info": {
        "commit_hash": "cb224ab1394cc981cf85a9e5520714ca8221f38f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb224ab1394cc981cf85a9e5520714ca8221f38f",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreeC.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Make sure the rowid of an RTREE virtual table has integer affinity. Ticket [9fe487ba3c064b4e]\n\nFossilOrigin-Name: 7ae8c0d52f6aa7f27537216f85456ef49dade040366cfb250c789206ecd4dc5a",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreeC.test||ext/rtree/rtreeC.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3731:     if( argv[ii][0]=='+' ){",
          "3732:       pRtree->nAux++;",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s\", argv[3]);",
          "",
          "[Added Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreeC.test||ext/rtree/rtreeC.test": [
          "File: ext/rtree/rtreeC.test -> ext/rtree/rtreeC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: #",
          "178: reset_db",
          "179: do_execsql_test 5.1 {",
          "181:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, +d1);",
          "183:   INSERT INTO t1(x) VALUES(1);",
          "",
          "[Removed Lines]",
          "180:   CREATE TABLE t1(x PRIMARY KEY, y);",
          "",
          "[Added Lines]",
          "180:   CREATE TABLE t1(x INT PRIMARY KEY, y);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e5ad8e0ab7ee91a5ccb19a9654d6a036233f74d2fdc45f7315feb3d9d035fd4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
      "candidate_info": {
        "commit_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Basic UPDATE functionality working for VIRTUAL tables.\n\nFossilOrigin-Name: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         }else if( pPk && (pTab->aCol[j].colFlags & COLFLAG_PRIMKEY)!=0 ){",
          "309:           chngPk = 1;",
          "310:         }",
          "311:         aXRef[j] = i;",
          "312:         break;",
          "313:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "312:         else if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "313:           sqlite3ErrorMsg(pParse,",
          "314:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "315:              pTab->aCol[j].zName);",
          "316:           goto update_cleanup;",
          "317:         }",
          "318: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:     oldmask |= sqlite3TriggerColmask(pParse,",
          "624:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "625:     );",
          "627:       if( oldmask==0xffffffff",
          "628:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "630:       ){",
          "631:         testcase(  oldmask!=0xffffffff && i==31 );",
          "633:       }else{",
          "635:       }",
          "636:     }",
          "637:     if( chngRowid==0 && pPk==0 ){",
          "",
          "[Removed Lines]",
          "626:     for(i=0; i<pTab->nCol; i++){",
          "629:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "634:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "",
          "[Added Lines]",
          "634:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "635:       u32 colFlags = pTab->aCol[i].colFlags;",
          "636:       if( colFlags & COLFLAG_VIRTUAL ){",
          "637:         k--;",
          "638:         continue;",
          "639:       }",
          "642:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "645:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "647:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:   newmask = sqlite3TriggerColmask(",
          "656:       pParse, pTrigger, pChanges, 1, TRIGGER_BEFORE, pTab, onError",
          "657:   );",
          "659:     if( i==pTab->iPKey ){",
          "661:     }else{",
          "662:       j = aXRef[i];",
          "663:       if( j>=0 ){",
          "665:       }else if( 0==(tmask&TRIGGER_BEFORE) || i>31 || (newmask & MASKBIT32(i)) ){",
          "",
          "[Removed Lines]",
          "658:   for(i=0; i<pTab->nCol; i++){",
          "660:       sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "664:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, regNew+i);",
          "",
          "[Added Lines]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "679:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, k);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:         testcase( i==31 );",
          "672:         testcase( i==32 );",
          "674:       }else{",
          "676:       }",
          "677:     }",
          "678:   }",
          "",
          "[Removed Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "675:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "",
          "[Added Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "690:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "714:       }",
          "715:     }",
          "716:   }",
          "",
          "[Removed Lines]",
          "711:     for(i=0; i<pTab->nCol; i++){",
          "712:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
      "candidate_info": {
        "commit_hash": "db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowA.test"
        ],
        "message": "Back out the change at [47cd634c98b502d4] which was incorrect.  Add a test case so that we don't accidently back out that change again.\n\nFossilOrigin-Name: 596ac2a4eab28b74f4050fb4eb71883f2a1421fdbccf302413e4653391bb52c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowA.test||test/windowA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 900464567b2a5ce0c278a3297e4be1968f609258608aa0fbe2fc67709aa22a4b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2016:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "2017:         break;",
          "2018:       case OP_Gt:",
          "2020:         break;",
          "2023:         break;",
          "2024:     }",
          "2025:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "",
          "[Removed Lines]",
          "2019:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "2021:       default: assert( op==OP_Le );",
          "2022:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2019:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "2020:         VdbeCoverage(v);",
          "2022:       case OP_Le:",
          "2023:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "2024:         VdbeCoverage(v);",
          "2026:       default: assert( op==OP_Lt ); /* no-op */ break;",
          "",
          "---------------"
        ],
        "test/windowA.test||test/windowA.test": [
          "File: test/windowA.test -> test/windowA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   1 A   5.4 A        \\",
          "290: ]",
          "292: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: do_execsql_test 4.0 {",
          "293:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "294:   WINDOW w1 AS",
          "295:      (ORDER BY d DESC NULLS FIRST",
          "296:       RANGE BETWEEN 2.50 PRECEDING AND 0.5 PRECEDING)",
          "297:   ORDER BY +d DESC NULLS FIRST, +a;",
          "298: } [list \\",
          "299:   6 N  NULL NN  \\",
          "300:   7 N  NULL NN  \\",
          "301:   5 E 10.26 {}  \\",
          "302:   4 D 10.25 {}  \\",
          "303:   3 C   8.0 ED  \\",
          "304:   2 B  5.55 C   \\",
          "305:   1 A   5.4 {}  \\",
          "306: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b47f5208247277ee6eaf532e547d4995f56114b",
      "candidate_info": {
        "commit_hash": "8b47f5208247277ee6eaf532e547d4995f56114b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b47f5208247277ee6eaf532e547d4995f56114b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix a bug in RANGE window functions that use \"ORDER BY <expr> DESC NULLS FIRST\" as the window-frame ORDER BY clause.\n\nFossilOrigin-Name: 39b4cad4a51bb5116d62ffb16ac36d96a9280321b049eb2d008605392f52a459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dd66134817ecbda01c59a05ad0d6ac44bee700ab10cd2119c869dd69af293fe2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1865: static void windowCodeRangeTest(",
          "1866:   WindowCodeArg *p,",
          "1872: ){",
          "1873:   Parse *pParse = p->pParse;",
          "1874:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1883:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1884:   assert( pOrderBy && pOrderBy->nExpr==1 );",
          "",
          "[Removed Lines]",
          "1868:   int csr1,",
          "1869:   int regVal,",
          "1870:   int csr2,",
          "1871:   int lbl",
          "1875:   int reg1 = sqlite3GetTempReg(pParse);",
          "1876:   int reg2 = sqlite3GetTempReg(pParse);",
          "1877:   int arith = OP_Add;",
          "1878:   int addrGe;",
          "1879:   ExprList *pOrderBy = p->pMWin->pOrderBy;",
          "1881:   int regString = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1891:     arith = OP_Subtract;",
          "1892:   }",
          "1894:   windowReadPeerValues(p, csr1, reg1);",
          "1895:   windowReadPeerValues(p, csr2, reg2);",
          "1900:   sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1901:   addrGe = sqlite3VdbeAddOp3(v, OP_Ge, regString, 0, reg1);",
          "1902:   VdbeCoverage(v);",
          "1903:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1904:   sqlite3VdbeJumpHere(v, addrGe);",
          "1905:   if( pOrderBy->a[0].sortFlags & KEYINFO_ORDER_BIGNULL ){",
          "1908:     switch( op ){",
          "1910:       case OP_Gt:",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "1912:         break;",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "1916:         break;",
          "1917:     }",
          "1919:     sqlite3VdbeJumpHere(v, addr);",
          "1920:     sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "1921:     if( op==OP_Gt || op==OP_Ge ){",
          "1922:       sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1923:     }",
          "1924:   }",
          "1925:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1926:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1927:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1928:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1929:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1930:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1931:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "1933:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1934:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1935: }",
          "",
          "[Removed Lines]",
          "1906:     int addr;",
          "1907:     addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1913:       default:",
          "1914:         assert( op==OP_Le );",
          "1918:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "",
          "[Added Lines]",
          "1909:   VdbeModuleComment((v, \"CodeRangeTest: if( R%d %s R%d %s R%d ) goto lbl\",",
          "1910:       reg1, (arith==OP_Add ? \"+\" : \"-\"), regVal,",
          "1911:       ((op==OP_Ge) ? \">=\" : (op==OP_Le) ? \"<=\" : (op==OP_Gt) ? \">\" : \"<\"), reg2",
          "1912:   ));",
          "1954:     int addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1956:       case OP_Ge:",
          "1957:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "1958:         break;",
          "1962:       default: assert( op==OP_Le );",
          "1966:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "1990:   VdbeModuleComment((v, \"CodeRangeTest: end\"));",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "248: }",
          "250: ==========",
          "252: execsql_test 5.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: execsql_test 4.5.1 {",
          "251:   SELECT sum(b) OVER (",
          "252:     ORDER BY a ASC  NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "253:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "254: }",
          "255: execsql_test 4.5.2 {",
          "256:   SELECT sum(b) OVER (",
          "257:     ORDER BY a DESC NULLS FIRST RANGE",
          "258:     BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "259:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "260: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:   FROM t2",
          "330: }",
          "334: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344: ==========",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3579:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3580: } {5   6   8   9   10}",
          "3582: #==========================================================================",
          "3584: do_execsql_test 5.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3582: do_execsql_test 4.5.1 {",
          "3583:   SELECT sum(b) OVER (",
          "3584:     ORDER BY a ASC  NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3585:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3586: } {9   9   15   15   15}",
          "3588: do_execsql_test 4.5.2 {",
          "3589:   SELECT sum(b) OVER (",
          "3590:     ORDER BY a DESC NULLS FIRST RANGE",
          "3591:     BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3592:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3593: } {6   6   6   15   15}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6190:   FROM t2",
          "6191: } {{}   A.B   A.B}",
          "6193: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6206: #==========================================================================",
          "",
          "---------------"
        ]
      }
    }
  ]
}