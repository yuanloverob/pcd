{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d9678890a9c3f0f4e56aa49ca7c5e41bc447e4f7",
      "candidate_info": {
        "commit_hash": "d9678890a9c3f0f4e56aa49ca7c5e41bc447e4f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d9678890a9c3f0f4e56aa49ca7c5e41bc447e4f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "New sqlite3_db_config() options: SQLITE_DBCONFIG_LEGACY_ALTER_TABLE, SQLITE_DBCONFIG_DQS_DML, and SQLITE_DBCONFIG_DQS_DDL.\n\nFossilOrigin-Name: a61db8ff6713d66778a0500ca4049229c081a3ae95991f05eba09729434444b3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54110870487f78013ab1b554413c18baa2bdc07d979bc65c110f32d30c3b53fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "848:       };",
          "849:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "849:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "850:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3071:   db->nextPagesize = 0;",
          "3072:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3073:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "3074: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3075:                  | SQLITE_AutoIndex",
          "3076: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:                  | SQLITE_DqsDML",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   return 1;",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: static int areDoubleQuotedStringsEnabled(sqlite3 *db, NameContext *pTopNC){",
          "156:   if( pTopNC->ncFlags & NC_IsDDL ){",
          "158:     if( sqlite3WritableSchema(db) && (db->flags & SQLITE_DqsDML)!=0 ){",
          "159:       return 1;",
          "160:     }",
          "161:     return (db->flags & SQLITE_DqsDDL)!=0;",
          "162:   }else{",
          "164:     return (db->flags & SQLITE_DqsDML)!=0;",
          "165:   }",
          "166: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "481:     ){",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "",
          "[Added Lines]",
          "496:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "497:      && areDoubleQuotedStringsEnabled(db, pTopNC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1770:   }",
          "1771:   sNC.pParse = pParse;",
          "1772:   sNC.pSrcList = &sSrc;",
          "1777:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1778:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1779:   return rc;",
          "",
          "[Removed Lines]",
          "1773:   sNC.ncFlags = type;",
          "1774:   if( !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NoDblQStr;",
          "1776:   }",
          "",
          "[Added Lines]",
          "1790:   sNC.ncFlags = type | NC_IsDDL;",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7075:       const char *zName;",
          "7076:       int op;",
          "7077:     } aDbConfig[] = {",
          "7087:     };",
          "7088:     int ii, v;",
          "7089:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7078:         { \"enable_fkey\",      SQLITE_DBCONFIG_ENABLE_FKEY            },",
          "7079:         { \"enable_trigger\",   SQLITE_DBCONFIG_ENABLE_TRIGGER         },",
          "7080:         { \"fts3_tokenizer\",   SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER  },",
          "7081:         { \"load_extension\",   SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION  },",
          "7082:         { \"no_ckpt_on_close\", SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE       },",
          "7083:         { \"enable_qpsg\",      SQLITE_DBCONFIG_ENABLE_QPSG            },",
          "7084:         { \"trigger_eqp\",      SQLITE_DBCONFIG_TRIGGER_EQP            },",
          "7085:         { \"reset_database\",   SQLITE_DBCONFIG_RESET_DATABASE         },",
          "7086:         { \"defensive\",        SQLITE_DBCONFIG_DEFENSIVE              },",
          "",
          "[Added Lines]",
          "7078:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7079:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7080:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7081:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7082:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7083:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7084:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7085:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7089:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7090:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2797: #define NC_NoDblQStr 0x10000 /* Do not allow double-quoted string hack.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7608:     const char *zName;",
          "7609:     int eVal;",
          "7610:   } aSetting[] = {",
          "7620:   };",
          "7621:   int i;",
          "7622:   int v;",
          "",
          "[Removed Lines]",
          "7611:     { \"FKEY\",            SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",         SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",  SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",  SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",            SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",     SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",        SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",       SQLITE_DBCONFIG_DEFENSIVE },",
          "",
          "[Added Lines]",
          "7611:     { \"FKEY\",               SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",            SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",               SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",        SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",           SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",          SQLITE_DBCONFIG_DEFENSIVE },",
          "7620:     { \"WRITABLE_SCHEMA\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA },",
          "7621:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7622:     { \"DQS_DML\",            SQLITE_DBCONFIG_DQS_DML },",
          "7623:     { \"DQS_DDL\",            SQLITE_DBCONFIG_DQS_DDL },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0660884ea02dd51864223f7c31e0293b9bbd7429",
      "candidate_info": {
        "commit_hash": "0660884ea02dd51864223f7c31e0293b9bbd7429",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0660884ea02dd51864223f7c31e0293b9bbd7429",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "Add missing VdbeCoverage() macro.  Fix an off-by-one error in partial index handling.  New test cases.  Ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: 41cc8e3dab998f7efc898d18837ca7fdac94ea3f89954990c5231456bf725fee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "",
          "[Removed Lines]",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "",
          "[Added Lines]",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx-1, lblRecheckOk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1925:               VdbeCoverageIf(v, p2!=pOp->p2 );",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "[Removed Lines]",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "",
          "[Added Lines]",
          "518:   REPLACE INTO p1 VALUES(3, 1);2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "547: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: do_execsql_test insert-17.5 {",
          "546:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b);",
          "547:   CREATE UNIQUE INDEX t2b ON t2(b);",
          "548:   INSERT INTO t2(a,b) VALUES(1,1),(2,2),(3,3),(4,4);",
          "549:   CREATE TABLE fire(x);",
          "550:   CREATE TRIGGER t2r1 AFTER DELETE ON t2 BEGIN",
          "551:     INSERT INTO fire VALUES(old.a);",
          "552:   END;",
          "553:   UPDATE OR REPLACE t2 SET a=4, b=3 WHERE a=1;",
          "554:   SELECT *, 'x' FROM t2 ORDER BY a;",
          "555: } {2 2 x 4 3 x}",
          "556: do_execsql_test insert-17.6 {",
          "557:   SELECT x FROM fire ORDER BY x;",
          "558: } {3 4}",
          "559: do_execsql_test insert-17.7 {",
          "560:   DELETE FROM t2;",
          "561:   DELETE FROM fire;",
          "562:   INSERT INTO t2(a,b) VALUES(1,1),(2,2),(3,3),(4,4);",
          "563:   UPDATE OR REPLACE t2 SET a=1, b=3 WHERE a=1;",
          "564:   SELECT *, 'x' FROM t2 ORDER BY a;",
          "565: } {1 3 x 2 2 x 4 4 x}",
          "566: do_execsql_test insert-17.8 {",
          "567:   SELECT x FROM fire ORDER BY x;",
          "568: } {3}",
          "569: do_execsql_test insert-17.10 {",
          "570:   CREATE TABLE t3(a INTEGER PRIMARY KEY, b INT, c INT, d INT);",
          "571:   CREATE UNIQUE INDEX t3bpi ON t3(b) WHERE c<=d;",
          "572:   CREATE UNIQUE INDEX t3d ON t3(d);",
          "573:   INSERT INTO t3(a,b,c,d) VALUES(1,1,1,1),(2,1,3,2),(3,4,5,6);",
          "574:   CREATE TRIGGER t3r1 AFTER DELETE ON t3 BEGIN",
          "575:     SELECT 'hi';",
          "576:   END;",
          "577:   REPLACE INTO t3(a,b,c,d) VALUES(4,4,8,9);",
          "578: } {}",
          "579: do_execsql_test insert-17.11 {",
          "580:   SELECT *, 'x' FROM t3 ORDER BY a;",
          "581: } {1 1 1 1 x 2 1 3 2 x 4 4 8 9 x}",
          "582: do_execsql_test insert-17.12 {",
          "583:   REPLACE INTO t3(a,b,c,d) VALUES(5,1,11,2);",
          "584:   SELECT *, 'x' FROM t3 ORDER BY a;",
          "585: } {1 1 1 1 x 4 4 8 9 x 5 1 11 2 x}",
          "587: do_execsql_test insert-17.13 {",
          "588:   DELETE FROM t3;",
          "589:   INSERT INTO t3(a,b,c,d) VALUES(1,1,1,1),(2,1,3,2),(3,4,5,6);",
          "590:   DROP TRIGGER t3r1;",
          "591:   CREATE TRIGGER t3r1 AFTER DELETE ON t3 BEGIN",
          "592:     INSERT INTO t3(b,c,d) VALUES(old.b,old.c,old.d);",
          "593:   END;",
          "594: } {}",
          "595: do_catchsql_test insert-17.14 {",
          "596:   REPLACE INTO t3(a,b,c,d) VALUES(4,4,8,9);",
          "597: } {1 {UNIQUE constraint failed: t3.b}}",
          "598: do_catchsql_test insert-17.15 {",
          "599:   REPLACE INTO t3(a,b,c,d) VALUES(5,1,11,2);",
          "600: } {1 {UNIQUE constraint failed: t3.d}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "477f1f12e2b9a13c663aab985d28ad589d37a1ea",
      "candidate_info": {
        "commit_hash": "477f1f12e2b9a13c663aab985d28ad589d37a1ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/477f1f12e2b9a13c663aab985d28ad589d37a1ea",
        "files": [
          "ext/misc/carray.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a typo in the carray extension header comment - the comment that serves as the documentation to this extension.\n\nFossilOrigin-Name: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
        "before_after_code_files": [
          "ext/misc/carray.c||ext/misc/carray.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/carray.c||ext/misc/carray.c": [
          "File: ext/misc/carray.c -> ext/misc/carray.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 090cd07d37904da4610d6a6787a3cc825c9a8bdcc5f051267d4608bba9b49d03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ebe59d6fffc2a4d6799d7c8e9c4071948291a33",
      "candidate_info": {
        "commit_hash": "9ebe59d6fffc2a4d6799d7c8e9c4071948291a33",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ebe59d6fffc2a4d6799d7c8e9c4071948291a33",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the configure-generated makekfile to generate a portable pkgIndex.tcl.\n\nFossilOrigin-Name: 35cbee7fe4a0b7ca06206ca2f69fc35abe3de4929070d6585ab765af82027438",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1424:  $(INSTALL) -m 0644 sqlite3.pc $(DESTDIR)$(pkgconfigdir)",
          "1426: pkgIndex.tcl:",
          "1428: tcl_install: lib_install libtclsqlite3.la pkgIndex.tcl",
          "1429:  $(INSTALL) -d $(DESTDIR)$(TCLLIBDIR)",
          "1430:  $(LTINSTALL) libtclsqlite3.la $(DESTDIR)$(TCLLIBDIR)",
          "",
          "[Removed Lines]",
          "1427:  echo 'package ifneeded sqlite3 $(RELEASE) [list load $(TCLLIBDIR)/libtclsqlite3$(SHLIB_SUFFIX) sqlite3]' > $@",
          "",
          "[Added Lines]",
          "1427:  echo 'package ifneeded sqlite3 $(RELEASE) [list load [file join $$dir libtclsqlite3[info sharedlibextension]] sqlite3]' > $@",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c941ce5bcc872ec92cbe0e409fd773f44a5ab1f814e689ad57f756b911e2b96",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aff0fd483c24ea83377824dbcbd17fad374594b2",
      "candidate_info": {
        "commit_hash": "aff0fd483c24ea83377824dbcbd17fad374594b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aff0fd483c24ea83377824dbcbd17fad374594b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() that might be false if the database is corrupt.  Also add a branch to have sqlite3PagerMovepage() return SQLITE_CORRUPT in that case.\n\nFossilOrigin-Name: b0d5cf40bba34e459caa7480bc84a1d75496c2ab52029f4bb0a31f2d9369a8ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3803e750384ec37091b0a6c350f8ef67720e316fd6f74c95e3c5f231c4a01ceb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7178:   pPg->flags &= ~PGHDR_NEED_SYNC;",
          "7179:   pPgOld = sqlite3PagerLookup(pPager, pgno);",
          "7181:   if( pPgOld ){",
          "7182:     pPg->flags |= (pPgOld->flags&PGHDR_NEED_SYNC);",
          "7183:     if( pPager->tempFile ){",
          "",
          "[Removed Lines]",
          "7180:   assert( !pPgOld || pPgOld->nRef==1 );",
          "",
          "[Added Lines]",
          "7180:   assert( !pPgOld || pPgOld->nRef==1 || CORRUPT_DB );",
          "7182:     if( pPgOld->nRef>1 ){",
          "7183:       sqlite3PagerUnrefNotNull(pPgOld);",
          "7184:       return SQLITE_CORRUPT_BKPT;",
          "7185:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}