{
  "cve_id": "CVE-2012-0858",
  "cve_desc": "The Shorten codec (shorten.c) in libavcodec in FFmpeg 0.7.x before 0.7.12 and 0.8.x before 0.8.11, and in Libav 0.5.x before 0.5.9, 0.6.x before 0.6.6, 0.7.x before 0.7.5, and 0.8.x before 0.8.1, allows remote attackers to cause a denial of service (application crash) and possibly execute arbitrary code via a crafted Shorten file, related to an \"invalid free\".",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "204cb29b3c84a74cbcd059d353c70c8bdc567d98",
  "patch_info": {
    "commit_hash": "204cb29b3c84a74cbcd059d353c70c8bdc567d98",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/204cb29b3c84a74cbcd059d353c70c8bdc567d98",
    "files": [
      "libavcodec/shorten.c"
    ],
    "message": "shorten: Use separate pointers for the allocated memory for decoded samples.\n\nFixes invalid free() if any of the buffers are not allocated due to either\nnot decoding a header or an error prior to allocating all buffers.\n\nFixes CVE-2012-0858\nCC: libav-stable@libav.org\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>",
    "before_after_code_files": [
      "libavcodec/shorten.c||libavcodec/shorten.c"
    ]
  },
  "patch_diff": {
    "libavcodec/shorten.c||libavcodec/shorten.c": [
      "File: libavcodec/shorten.c -> libavcodec/shorten.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:     int channels;",
      "88:     int32_t *decoded[MAX_CHANNELS];",
      "89:     int32_t *offset[MAX_CHANNELS];",
      "90:     int *coeffs;",
      "91:     uint8_t *bitstream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:     int32_t *decoded_base[MAX_CHANNELS];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:             return AVERROR(ENOMEM);",
      "141:         s->offset[chan] = tmp_ptr;",
      "144:         if (!tmp_ptr)",
      "145:             return AVERROR(ENOMEM);",
      "147:         for (i=0; i<s->nwrap; i++)",
      "150:     }",
      "152:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
      "",
      "[Removed Lines]",
      "143:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
      "146:         s->decoded[chan] = tmp_ptr;",
      "148:             s->decoded[chan][i] = 0;",
      "149:         s->decoded[chan] += s->nwrap;",
      "",
      "[Added Lines]",
      "144:         tmp_ptr = av_realloc(s->decoded_base[chan], (s->blocksize + s->nwrap) *",
      "145:                              sizeof(s->decoded_base[0][0]));",
      "148:         s->decoded_base[chan] = tmp_ptr;",
      "150:             s->decoded_base[chan][i] = 0;",
      "151:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "615:     int i;",
      "617:     for (i = 0; i < s->channels; i++) {",
      "620:         av_freep(&s->offset[i]);",
      "621:     }",
      "622:     av_freep(&s->bitstream);",
      "",
      "[Removed Lines]",
      "618:         s->decoded[i] -= s->nwrap;",
      "619:         av_freep(&s->decoded[i]);",
      "",
      "[Added Lines]",
      "620:         s->decoded[i] = NULL;",
      "621:         av_freep(&s->decoded_base[i]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8935e7474ada9f18e9c21ec3a0a1706040e7b3be",
      "candidate_info": {
        "commit_hash": "8935e7474ada9f18e9c21ec3a0a1706040e7b3be",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/8935e7474ada9f18e9c21ec3a0a1706040e7b3be",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: Fix invalid free()\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 18bcfc912e48bf77a5202a0e24a3b884b9b2ff2c)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     int channels;",
          "83:     int32_t *decoded[MAX_CHANNELS];",
          "84:     int32_t *offset[MAX_CHANNELS];",
          "85:     int *coeffs;",
          "86:     uint8_t *bitstream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     int32_t *decoded_base[MAX_CHANNELS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:             return AVERROR(ENOMEM);",
          "131:         s->offset[chan] = tmp_ptr;",
          "134:         if (!tmp_ptr)",
          "135:             return AVERROR(ENOMEM);",
          "137:         for (i=0; i<s->nwrap; i++)",
          "140:     }",
          "142:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
          "",
          "[Removed Lines]",
          "133:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "136:         s->decoded[chan] = tmp_ptr;",
          "138:             s->decoded[chan][i] = 0;",
          "139:         s->decoded[chan] += s->nwrap;",
          "",
          "[Added Lines]",
          "134:         tmp_ptr = av_realloc(s->decoded_base[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "137:         s->decoded_base[chan] = tmp_ptr;",
          "139:             s->decoded_base[chan][i] = 0;",
          "140:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "548:     int i;",
          "550:     for (i = 0; i < s->channels; i++) {",
          "553:         av_freep(&s->offset[i]);",
          "554:     }",
          "555:     av_freep(&s->bitstream);",
          "",
          "[Removed Lines]",
          "551:         s->decoded[i] -= s->nwrap;",
          "552:         av_freep(&s->decoded[i]);",
          "",
          "[Added Lines]",
          "552:         s->decoded[i] = NULL;",
          "553:         av_freep(&s->decoded_base[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "446d11f5edcb70af1cf2d4a3c05c5bdea4688085",
      "candidate_info": {
        "commit_hash": "446d11f5edcb70af1cf2d4a3c05c5bdea4688085",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/446d11f5edcb70af1cf2d4a3c05c5bdea4688085",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: Fix invalid free()\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 18bcfc912e48bf77a5202a0e24a3b884b9b2ff2c)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     int channels;",
          "88:     int32_t *decoded[MAX_CHANNELS];",
          "89:     int32_t *offset[MAX_CHANNELS];",
          "90:     int *coeffs;",
          "91:     uint8_t *bitstream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     int32_t *decoded_base[MAX_CHANNELS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:             return AVERROR(ENOMEM);",
          "141:         s->offset[chan] = tmp_ptr;",
          "144:         if (!tmp_ptr)",
          "145:             return AVERROR(ENOMEM);",
          "147:         for (i=0; i<s->nwrap; i++)",
          "150:     }",
          "152:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
          "",
          "[Removed Lines]",
          "143:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "146:         s->decoded[chan] = tmp_ptr;",
          "148:             s->decoded[chan][i] = 0;",
          "149:         s->decoded[chan] += s->nwrap;",
          "",
          "[Added Lines]",
          "144:         tmp_ptr = av_realloc(s->decoded_base[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "147:         s->decoded_base[chan] = tmp_ptr;",
          "149:             s->decoded_base[chan][i] = 0;",
          "150:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:     int i;",
          "617:     for (i = 0; i < s->channels; i++) {",
          "620:         av_freep(&s->offset[i]);",
          "621:     }",
          "622:     av_freep(&s->bitstream);",
          "",
          "[Removed Lines]",
          "618:         s->decoded[i] -= s->nwrap;",
          "619:         av_freep(&s->decoded[i]);",
          "",
          "[Added Lines]",
          "619:         s->decoded[i] = NULL;",
          "620:         av_freep(&s->decoded_base[i]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}