{
  "cve_id": "CVE-2022-0714",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.4436.",
  "repo": "vim/vim",
  "patch_hash": "4e889f98e95ac05d7c8bd3ee933ab4d47820fdfa",
  "patch_info": {
    "commit_hash": "4e889f98e95ac05d7c8bd3ee933ab4d47820fdfa",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/4e889f98e95ac05d7c8bd3ee933ab4d47820fdfa",
    "files": [
      "src/indent.c",
      "src/testdir/test_vartabs.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4436: crash with weird 'vartabstop' value\n\nProblem:    Crash with weird 'vartabstop' value.\nSolution:   Check for running into the end of the line.",
    "before_after_code_files": [
      "src/indent.c||src/indent.c",
      "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/indent.c||src/indent.c": [
      "File: src/indent.c -> src/indent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1338:   new_cursor_col += (*mb_ptr2len)(ptr + new_cursor_col);",
      "1339:      else",
      "1340:   ++new_cursor_col;",
      "1341:      vcol += lbr_chartabsize(ptr, ptr + new_cursor_col, (colnr_T)vcol);",
      "1342:  }",
      "1343:  vcol = last_vcol;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1341:      if (ptr[new_cursor_col] == NUL)",
      "1342:   break;",
      "",
      "---------------"
    ],
    "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim": [
      "File: src/testdir/test_vartabs.vim -> src/testdir/test_vartabs.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:   setlocal shiftwidth& vartabstop& tabstop&",
      "443: endfunc",
      "445: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "445: func Test_vartabstop_latin1()",
      "446:   let save_encoding = &encoding",
      "447:   new",
      "448:   set encoding=iso8859",
      "449:   silent norm :se \u0001\u001b",
      "450:   set vartabstop=400",
      "451:   norm i00 \u0004",
      "452:   bwipe!",
      "453:   let &encoding = save_encoding",
      "454: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4435,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4436,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2dada73a4ebffe2582af472ce362abd3116b58c9",
      "candidate_info": {
        "commit_hash": "2dada73a4ebffe2582af472ce362abd3116b58c9",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/2dada73a4ebffe2582af472ce362abd3116b58c9",
        "files": [
          "src/testdir/test_vartabs.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4452: test for what 8.2.4436 fixes does not check for regression\n\nProblem:    Test for what 8.2.4436 fixes does not check for regression.\nSolution:   Set several options. (Ken Takata, closes #9830)",
        "before_after_code_files": [
          "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim": [
          "File: src/testdir/test_vartabs.vim -> src/testdir/test_vartabs.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   let save_encoding = &encoding",
          "447:   new",
          "448:   set encoding=iso8859-1",
          "450:   set vartabstop=400",
          "451:   exe \"norm i00\\t\\<C-D>\"",
          "452:   bwipe!",
          "453:   let &encoding = save_encoding",
          "454: endfunc",
          "",
          "[Removed Lines]",
          "449:   silent exe \"norm :se \\<C-A>\\<C-C>\"",
          "",
          "[Added Lines]",
          "449:   set compatible linebreak list revins smarttab",
          "454:   set nocompatible linebreak& list& revins& smarttab& vartabstop&",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4451,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4452,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f9969c559b51446632ac7e8f76cde07e7d0078d",
      "candidate_info": {
        "commit_hash": "7f9969c559b51446632ac7e8f76cde07e7d0078d",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/7f9969c559b51446632ac7e8f76cde07e7d0078d",
        "files": [
          "runtime/doc/textprop.txt",
          "src/beval.c",
          "src/charset.c",
          "src/drawline.c",
          "src/edit.c",
          "src/errors.h",
          "src/evalfunc.c",
          "src/getchar.c",
          "src/indent.c",
          "src/misc1.c",
          "src/misc2.c",
          "src/mouse.c",
          "src/ops.c",
          "src/popupwin.c",
          "src/proto/charset.pro",
          "src/proto/textprop.pro",
          "src/regexp.c",
          "src/regexp_bt.c",
          "src/regexp_nfa.c",
          "src/register.c",
          "src/structs.h",
          "src/testdir/dumps/Test_prop_inserts_text.dump",
          "src/testdir/test_textprop.vim",
          "src/textprop.c",
          "src/version.c"
        ],
        "message": "patch 9.0.0067: cannot show virtual text\n\nProblem:    Cannot show virtual text.\nSolution:   Initial changes for virtual text support, using text properties.",
        "before_after_code_files": [
          "src/beval.c||src/beval.c",
          "src/charset.c||src/charset.c",
          "src/drawline.c||src/drawline.c",
          "src/edit.c||src/edit.c",
          "src/errors.h||src/errors.h",
          "src/evalfunc.c||src/evalfunc.c",
          "src/getchar.c||src/getchar.c",
          "src/indent.c||src/indent.c",
          "src/misc1.c||src/misc1.c",
          "src/misc2.c||src/misc2.c",
          "src/mouse.c||src/mouse.c",
          "src/ops.c||src/ops.c",
          "src/popupwin.c||src/popupwin.c",
          "src/proto/charset.pro||src/proto/charset.pro",
          "src/proto/textprop.pro||src/proto/textprop.pro",
          "src/regexp.c||src/regexp.c",
          "src/regexp_bt.c||src/regexp_bt.c",
          "src/regexp_nfa.c||src/regexp_nfa.c",
          "src/register.c||src/register.c",
          "src/structs.h||src/structs.h",
          "src/testdir/dumps/Test_prop_inserts_text.dump||src/testdir/dumps/Test_prop_inserts_text.dump",
          "src/testdir/test_textprop.vim||src/testdir/test_textprop.vim",
          "src/textprop.c||src/textprop.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/beval.c||src/beval.c": [
          "File: src/beval.c -> src/beval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  {",
          "49:      lbuf = ml_get_buf(wp->w_buffer, lnum, FALSE);",
          "51:      {",
          "53:   if (getword)",
          "",
          "[Removed Lines]",
          "50:      if (col <= win_linetabsize(wp, lbuf, (colnr_T)MAXCOL))",
          "",
          "[Added Lines]",
          "50:      if (col <= win_linetabsize(wp, lnum, lbuf, (colnr_T)MAXCOL))",
          "",
          "---------------"
        ],
        "src/charset.c||src/charset.c": [
          "File: src/charset.c -> src/charset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #if defined(HAVE_WCHAR_H)",
          "13: # include <wchar.h>     // for towupper() and towlower()",
          "14: #endif",
          "17: static unsigned nr2hex(unsigned c);",
          "19: static int    chartab_initialized = FALSE;",
          "",
          "[Removed Lines]",
          "15: static int win_nolbr_chartabsize(win_T *wp, char_u *s, colnr_T col, int *headp);",
          "",
          "[Added Lines]",
          "16: static int win_nolbr_chartabsize(chartabsize_T *cts, int *headp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "747: }",
          "752:     int",
          "753: linetabsize_col(int startcol, char_u *s)",
          "754: {",
          "761: }",
          "766:     int",
          "768: {",
          "776: }",
          "",
          "[Removed Lines]",
          "755:     colnr_T col = startcol;",
          "756:     char_u *line = s; // pointer to start of line, for breakindent",
          "758:     while (*s != NUL)",
          "759:  col += lbr_chartabsize_adv(line, &s, col);",
          "760:     return (int)col;",
          "767: win_linetabsize(win_T *wp, char_u *line, colnr_T len)",
          "769:     colnr_T col = 0;",
          "770:     char_u *s;",
          "772:     for (s = line; *s != NUL && (len == MAXCOL || s < line + len);",
          "773:         MB_PTR_ADV(s))",
          "774:  col += win_lbr_chartabsize(wp, line, s, col, NULL);",
          "775:     return (int)col;",
          "",
          "[Added Lines]",
          "756:     chartabsize_T cts;",
          "758:     init_chartabsize_arg(&cts, curwin, 0, startcol, s, s);",
          "759:     while (*cts.cts_ptr != NUL)",
          "760:  cts.cts_vcol += lbr_chartabsize_adv(&cts);",
          "761:     clear_chartabsize_arg(&cts);",
          "762:     return (int)cts.cts_vcol;",
          "769: win_linetabsize(win_T *wp, linenr_T lnum, char_u *line, colnr_T len)",
          "771:     chartabsize_T cts;",
          "773:     init_chartabsize_arg(&cts, wp, lnum, 0, line, line);",
          "774:     for ( ; *cts.cts_ptr != NUL && (len == MAXCOL || cts.cts_ptr < line + len);",
          "775:             MB_PTR_ADV(cts.cts_ptr))",
          "776:  cts.cts_vcol += win_lbr_chartabsize(&cts, NULL);",
          "777:     clear_chartabsize_arg(&cts);",
          "778:     return (int)cts.cts_vcol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "893: }",
          "898:     int",
          "903: {",
          "907:     {",
          "908: #endif",
          "909:  if (curwin->w_p_wrap)",
          "913:     }",
          "915: #endif",
          "916: }",
          "",
          "[Removed Lines]",
          "899: lbr_chartabsize(",
          "900:     char_u  *line UNUSED, // start of the line",
          "901:     unsigned char *s,",
          "902:     colnr_T  col)",
          "904: #ifdef FEAT_LINEBREAK",
          "905:     if (!curwin->w_p_lbr && *get_showbreak_value(curwin) == NUL",
          "906:           && !curwin->w_p_bri)",
          "910:      return win_nolbr_chartabsize(curwin, s, col, NULL);",
          "911:  RET_WIN_BUF_CHARTABSIZE(curwin, curbuf, s, col)",
          "912: #ifdef FEAT_LINEBREAK",
          "914:     return win_lbr_chartabsize(curwin, line == NULL ? s : line, s, col, NULL);",
          "",
          "[Added Lines]",
          "903:     void",
          "904: init_chartabsize_arg(",
          "905:  chartabsize_T *cts,",
          "906:  win_T  *wp,",
          "907:  linenr_T lnum,",
          "908:  colnr_T  col,",
          "909:  char_u  *line,",
          "910:  char_u  *ptr)",
          "911: {",
          "912:     cts->cts_win = wp;",
          "913:     cts->cts_lnum = lnum;",
          "914:     cts->cts_vcol = col;",
          "915:     cts->cts_line = line;",
          "916:     cts->cts_ptr = ptr;",
          "917: #ifdef FEAT_PROP_POPUP",
          "918:     cts->cts_text_prop_count = 0;",
          "919:     cts->cts_has_prop_with_text = FALSE;",
          "920:     cts->cts_cur_text_width = 0;",
          "921:     if (lnum > 0)",
          "922:     {",
          "923:  char_u *prop_start;",
          "925:  cts->cts_text_prop_count = get_text_props(wp->w_buffer, lnum,",
          "926:          &prop_start, FALSE);",
          "927:  if (cts->cts_text_prop_count > 0)",
          "928:  {",
          "931:      cts->cts_text_props = ALLOC_MULT(textprop_T,",
          "932:           cts->cts_text_prop_count);",
          "933:      if (cts->cts_text_props == NULL)",
          "934:   cts->cts_text_prop_count = 0;",
          "935:      else",
          "936:      {",
          "937:   int i;",
          "939:   mch_memmove(cts->cts_text_props, prop_start,",
          "940:           cts->cts_text_prop_count * sizeof(textprop_T));",
          "941:   for (i = 0; i < cts->cts_text_prop_count; ++i)",
          "942:       if (cts->cts_text_props[i].tp_id < 0)",
          "943:       {",
          "944:    cts->cts_has_prop_with_text = TRUE;",
          "945:    break;",
          "946:       }",
          "947:   if (!cts->cts_has_prop_with_text)",
          "948:   {",
          "950:       vim_free(cts->cts_text_props);",
          "951:       cts->cts_text_prop_count = 0;",
          "952:   }",
          "953:      }",
          "954:  }",
          "955:     }",
          "956: #endif",
          "957: }",
          "962:     void",
          "963: clear_chartabsize_arg(chartabsize_T *cts)",
          "964: {",
          "965:     if (cts->cts_text_prop_count > 0)",
          "966:  vim_free(cts->cts_text_props);",
          "967: }",
          "974: lbr_chartabsize(chartabsize_T *cts)",
          "976: #if defined(FEAT_LINEBREAK) || defined(FEAT_PROP_POPUP)",
          "977:     if (1",
          "978: # ifdef FEAT_LINEBREAK",
          "979:  && !curwin->w_p_lbr && *get_showbreak_value(curwin) == NUL",
          "980:           && !curwin->w_p_bri",
          "981: # endif",
          "982: # ifdef FEAT_PROP_POPUP",
          "983:  && !cts->cts_has_prop_with_text",
          "984: #endif",
          "985:        )",
          "989:      return win_nolbr_chartabsize(cts, NULL);",
          "990:  RET_WIN_BUF_CHARTABSIZE(curwin, curbuf, cts->cts_ptr, cts->cts_vcol)",
          "991: #if defined(FEAT_LINEBREAK) || defined(FEAT_PROP_POPUP)",
          "993:     return win_lbr_chartabsize(cts, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "921:     int",
          "926: {",
          "927:     int  retval;",
          "931:     return retval;",
          "932: }",
          "",
          "[Removed Lines]",
          "922: lbr_chartabsize_adv(",
          "923:     char_u *line, // start of the line",
          "924:     char_u **s,",
          "925:     colnr_T col)",
          "929:     retval = lbr_chartabsize(line, *s, col);",
          "930:     MB_PTR_ADV(*s);",
          "",
          "[Added Lines]",
          "1001: lbr_chartabsize_adv(chartabsize_T *cts)",
          "1005:     retval = lbr_chartabsize(cts);",
          "1006:     MB_PTR_ADV(cts->cts_ptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "941:     int",
          "942: win_lbr_chartabsize(",
          "948: {",
          "949: #ifdef FEAT_LINEBREAK",
          "950:     int  c;",
          "951:     int  size;",
          "952:     colnr_T col2;",
          "954:     colnr_T colmax;",
          "955:     int  added;",
          "956:     int  mb_added = 0;",
          "",
          "[Removed Lines]",
          "943:     win_T *wp,",
          "944:     char_u *line UNUSED, // start of the line",
          "945:     char_u *s,",
          "946:     colnr_T col,",
          "947:     int  *headp UNUSED)",
          "953:     colnr_T col_adj = 0; // col + screen size of tab",
          "",
          "[Added Lines]",
          "1022:  chartabsize_T *cts,",
          "1023:  int  *headp UNUSED)",
          "1025:     win_T *wp = cts->cts_win;",
          "1026:     char_u *line = cts->cts_line; // start of the line",
          "1027:     char_u *s = cts->cts_ptr;",
          "1028:     colnr_T vcol = cts->cts_vcol;",
          "1033:     colnr_T col_adj = 0; // vcol + screen size of tab",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "959:     int  tab_corr = (*s == TAB);",
          "960:     int  n;",
          "961:     char_u *sbr;",
          "967: #endif",
          "968:     {",
          "969:  if (wp->w_p_wrap)",
          "972:     }",
          "979:     c = *s;",
          "980:     if (tab_corr)",
          "981:  col_adj = size - 1;",
          "",
          "[Removed Lines]",
          "966:     if (!wp->w_p_lbr && !wp->w_p_bri && *get_showbreak_value(wp) == NUL)",
          "970:      return win_nolbr_chartabsize(wp, s, col, headp);",
          "971:  RET_WIN_BUF_CHARTABSIZE(wp, wp->w_buffer, s, col)",
          "974: #ifdef FEAT_LINEBREAK",
          "978:     size = win_chartabsize(wp, s, col);",
          "",
          "[Added Lines]",
          "1042: #endif",
          "1044: #if defined(FEAT_PROP_POPUP)",
          "1045:     cts->cts_cur_text_width = 0;",
          "1046: #endif",
          "1048: #if defined(FEAT_LINEBREAK) || defined(FEAT_PROP_POPUP)",
          "1053:     if (1",
          "1054: # ifdef FEAT_LINEBREAK",
          "1055:      && !wp->w_p_lbr && !wp->w_p_bri && *get_showbreak_value(wp) == NUL",
          "1056: # endif",
          "1057: # ifdef FEAT_PROP_POPUP",
          "1058:      && !cts->cts_has_prop_with_text",
          "1059: # endif",
          "1060:      )",
          "1064:      return win_nolbr_chartabsize(cts, headp);",
          "1065:  RET_WIN_BUF_CHARTABSIZE(wp, wp->w_buffer, s, vcol)",
          "1068: #if defined(FEAT_LINEBREAK) || defined(FEAT_PROP_POPUP)",
          "1072:     size = win_chartabsize(wp, s, vcol);",
          "1074: # ifdef FEAT_PROP_POPUP",
          "1075:     if (cts->cts_has_prop_with_text)",
          "1076:     {",
          "1077:  int i;",
          "1078:  int col = (int)(s - line);",
          "1080:  for (i = 0; i < cts->cts_text_prop_count; ++i)",
          "1081:  {",
          "1082:      textprop_T *tp = cts->cts_text_props + i;",
          "1084:      if (tp->tp_id < 0",
          "1085:        && tp->tp_col - 1 >= col && tp->tp_col - 1 < col + size",
          "1086:        && -tp->tp_id <= wp->w_buffer->b_textprop_text.ga_len)",
          "1087:      {",
          "1088:   char_u *p = ((char_u **)wp->w_buffer->b_textprop_text.ga_data)[",
          "1089:               -tp->tp_id - 1];",
          "1091:   cts->cts_cur_text_width = STRLEN(p);",
          "1092:   size += cts->cts_cur_text_width;",
          "1093:   break;",
          "1094:      }",
          "1095:      if (tp->tp_col - 1 > col)",
          "1096:   break;",
          "1097:  }",
          "1098:     }",
          "1099: # endif",
          "1101: # ifdef FEAT_LINEBREAK",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "997:  numberextra = win_col_off(wp);",
          "999:  colmax = (colnr_T)(wp->w_width - numberextra - col_adj);",
          "1001:  {",
          "1002:      colmax += col_adj;",
          "1003:      n = colmax +  win_col_off2(wp);",
          "1004:      if (n > 0)",
          "1006:  }",
          "1008:  for (;;)",
          "",
          "[Removed Lines]",
          "998:  col2 = col;",
          "1000:  if (col >= colmax)",
          "1005:   colmax += (((col - colmax) / n) + 1) * n - col_adj;",
          "",
          "[Added Lines]",
          "1121:  col2 = vcol;",
          "1123:  if (vcol >= colmax)",
          "1128:   colmax += (((vcol - colmax) / n) + 1) * n - col_adj;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1013:      if (!(c != NUL",
          "1014:       && (VIM_ISBREAK(c)",
          "1015:    || (!VIM_ISBREAK(c)",
          "1017:   break;",
          "1019:      col2 += win_chartabsize(wp, s, col2);",
          "1020:      if (col2 >= colmax)  // doesn't fit",
          "1021:      {",
          "1023:   break;",
          "1024:      }",
          "1025:  }",
          "1026:     }",
          "1027:     else if (has_mbyte && size == 2 && MB_BYTE2LEN(*s) > 1",
          "1029:     {",
          "1030:  ++size;  // Count the \">\" in the last column.",
          "1031:  mb_added = 1;",
          "",
          "[Removed Lines]",
          "1016:        && (col2 == col || !VIM_ISBREAK((int)*ps))))))",
          "1022:   size = colmax - col + col_adj;",
          "1028:         && wp->w_p_wrap && in_win_border(wp, col))",
          "",
          "[Added Lines]",
          "1139:           && (col2 == vcol || !VIM_ISBREAK((int)*ps))))))",
          "1145:   size = colmax - vcol + col_adj;",
          "1151:        && wp->w_p_wrap && in_win_border(wp, vcol))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1040:     added = 0;",
          "1041:     sbr = c == NUL ? empty_option : get_showbreak_value(wp);",
          "1043:     {",
          "1044:  colnr_T sbrlen = 0;",
          "1045:  int numberwidth = win_col_off(wp);",
          "1047:  numberextra = numberwidth;",
          "1050:  {",
          "1052:      numberextra = wp->w_width - (numberextra - win_col_off2(wp));",
          "1055:      if (*sbr != NUL)",
          "1056:      {",
          "1057:   sbrlen = (colnr_T)MB_CHARLEN(sbr);",
          "1060:      }",
          "1066:      numberwidth -= win_col_off2(wp);",
          "1067:  }",
          "1069:  {",
          "1070:      added = 0;",
          "1071:      if (*sbr != NUL)",
          "",
          "[Removed Lines]",
          "1042:     if ((*sbr != NUL || wp->w_p_bri) && wp->w_p_wrap && col != 0)",
          "1048:  col += numberextra + mb_added;",
          "1049:  if (col >= (colnr_T)wp->w_width)",
          "1051:      col -= wp->w_width;",
          "1053:      if (col >= numberextra && numberextra > 0)",
          "1054:   col %= numberextra;",
          "1058:   if (col >= sbrlen)",
          "1059:       col -= sbrlen;",
          "1061:      if (col >= numberextra && numberextra > 0)",
          "1062:   col = col % numberextra;",
          "1063:      else if (col > 0 && numberextra > 0)",
          "1064:   col += numberwidth - win_col_off2(wp);",
          "1068:  if (col == 0 || col + size + sbrlen > (colnr_T)wp->w_width)",
          "",
          "[Added Lines]",
          "1165:     if ((*sbr != NUL || wp->w_p_bri) && wp->w_p_wrap && vcol != 0)",
          "1171:  vcol += numberextra + mb_added;",
          "1172:  if (vcol >= (colnr_T)wp->w_width)",
          "1174:      vcol -= wp->w_width;",
          "1176:      if (vcol >= numberextra && numberextra > 0)",
          "1177:   vcol %= numberextra;",
          "1181:   if (vcol >= sbrlen)",
          "1182:       vcol -= sbrlen;",
          "1184:      if (vcol >= numberextra && numberextra > 0)",
          "1185:   vcol = vcol % numberextra;",
          "1186:      else if (vcol > 0 && numberextra > 0)",
          "1187:   vcol += numberwidth - win_col_off2(wp);",
          "1191:  if (vcol == 0 || vcol + size + sbrlen > (colnr_T)wp->w_width)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1074:   {",
          "1076:       int width = (colnr_T)wp->w_width - sbrlen - numberwidth;",
          "1080:       if (width <= 0)",
          "1081:    width = (colnr_T)1;",
          "",
          "[Removed Lines]",
          "1077:       int prev_width = col",
          "1078:      ? ((colnr_T)wp->w_width - (sbrlen + col)) : 0;",
          "",
          "[Added Lines]",
          "1200:       int prev_width = vcol",
          "1201:           ? ((colnr_T)wp->w_width - (sbrlen + vcol)) : 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1091:   added += get_breakindent_win(wp, line);",
          "1093:      size += added;",
          "1095:   added = 0;",
          "1096:  }",
          "1097:     }",
          "1098:     if (headp != NULL)",
          "1100:     return size;",
          "1101: #endif",
          "1102: }",
          "1109:     static int",
          "1110: win_nolbr_chartabsize(",
          "1115: {",
          "1116:     int  n;",
          "1118:     if (*s == TAB && (!wp->w_p_list || wp->w_lcs_chars.tab1))",
          "",
          "[Removed Lines]",
          "1094:      if (col != 0)",
          "1111:     win_T *wp,",
          "1112:     char_u *s,",
          "1113:     colnr_T col,",
          "1114:     int  *headp)",
          "",
          "[Added Lines]",
          "1217:      if (vcol != 0)",
          "1224: # endif",
          "1237:  chartabsize_T *cts,",
          "1238:  int  *headp)",
          "1240:     win_T *wp = cts->cts_win;",
          "1241:     char_u *s = cts->cts_ptr;",
          "1242:     colnr_T col = cts->cts_vcol;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1187: #endif",
          "1188:     int  ts = wp->w_buffer->b_p_ts;",
          "1189:     int  c;",
          "1191:     vcol = 0;",
          "1192:     line = ptr = ml_get_buf(wp->w_buffer, pos->lnum, FALSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317:     chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1209:      posptr -= (*mb_head_off)(line, posptr);",
          "1210:     }",
          "1218:     if ((!wp->w_p_list || wp->w_lcs_chars.tab1 != NUL)",
          "1219: #ifdef FEAT_LINEBREAK",
          "1220:      && !wp->w_p_lbr && *get_showbreak_value(wp) == NUL && !wp->w_p_bri",
          "1221: #endif",
          "1222:        )",
          "1223:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     init_chartabsize_arg(&cts, wp, pos->lnum, 0, line, line);",
          "1351: #endif",
          "1352: #ifdef FEAT_PROP_POPUP",
          "1353:      && !cts.cts_has_prop_with_text",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1274:     {",
          "1275:  for (;;)",
          "1276:  {",
          "1278:      head = 0;",
          "1282:      {",
          "1283:   incr = 1; // NUL at end of line only takes one column",
          "1284:   break;",
          "1285:      }",
          "1288:   break;",
          "1292:  }",
          "1293:     }",
          "1294:     if (start != NULL)",
          "1296:     if (end != NULL)",
          "1298:     if (cursor != NULL)",
          "1299:     {",
          "1300:  if (*ptr == TAB",
          "1301:   && (State & MODE_NORMAL)",
          "1302:   && !wp->w_p_list",
          "",
          "[Removed Lines]",
          "1279:      incr = win_lbr_chartabsize(wp, line, ptr, vcol, &head);",
          "1281:      if (*ptr == NUL)",
          "1287:      if (posptr != NULL && ptr >= posptr) // character at pos->col",
          "1290:      vcol += incr;",
          "1291:      MB_PTR_ADV(ptr);",
          "",
          "[Added Lines]",
          "1413:      incr = win_lbr_chartabsize(&cts, &head);",
          "1415:      if (*cts.cts_ptr == NUL)",
          "1421:      if (posptr != NULL && cts.cts_ptr >= posptr)",
          "1425:      cts.cts_vcol += incr;",
          "1426:      MB_PTR_ADV(cts.cts_ptr);",
          "1428:  vcol = cts.cts_vcol;",
          "1429:  ptr = cts.cts_ptr;",
          "1431:     clear_chartabsize_arg(&cts);",
          "1439: #ifdef FEAT_PROP_POPUP",
          "1441:  vcol += cts.cts_cur_text_width;",
          "1442: #endif",
          "",
          "---------------"
        ],
        "src/drawline.c||src/drawline.c": [
          "File: src/drawline.c -> src/drawline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     int  text_props_active = 0;",
          "327:     proptype_T  *text_prop_type = NULL;",
          "328:     int  text_prop_attr = 0;",
          "329:     int  text_prop_combine = FALSE;",
          "330: #endif",
          "331: #ifdef FEAT_SPELL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:     int  text_prop_id = 0; // active property ID",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "816:  v = wp->w_leftcol;",
          "817:     if (v > 0 && !number_only)",
          "818:     {",
          "822:  {",
          "827:  }",
          "",
          "[Removed Lines]",
          "819:  char_u *prev_ptr = ptr;",
          "821:  while (vcol < v && *ptr != NUL)",
          "823:      c = win_lbr_chartabsize(wp, line, ptr, (colnr_T)vcol, NULL);",
          "824:      vcol += c;",
          "825:      prev_ptr = ptr;",
          "826:      MB_PTR_ADV(ptr);",
          "",
          "[Added Lines]",
          "820:  char_u  *prev_ptr = ptr;",
          "821:  chartabsize_T cts;",
          "822:  int  charsize;",
          "824:  init_chartabsize_arg(&cts, wp, lnum, vcol, line, ptr);",
          "825:  while (cts.cts_vcol < v && *cts.cts_ptr != NUL)",
          "827:      charsize = win_lbr_chartabsize(&cts, NULL);",
          "828:      cts.cts_vcol += charsize;",
          "829:      prev_ptr = cts.cts_ptr;",
          "830:      MB_PTR_ADV(cts.cts_ptr);",
          "832:  vcol = cts.cts_vcol;",
          "833:  ptr = cts.cts_ptr;",
          "834:  clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "845:  if (vcol > v)",
          "846:  {",
          "848:      ptr = prev_ptr;",
          "852:         n_skip = v - vcol;",
          "853:  }",
          "",
          "[Removed Lines]",
          "847:      vcol -= c;",
          "851:      if (( (*mb_ptr2cells)(ptr) >= c || *ptr == TAB) && col == 0)",
          "",
          "[Added Lines]",
          "854:      vcol -= charsize;",
          "858:      if (( (*mb_ptr2cells)(ptr) >= charsize || *ptr == TAB) && col == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1476:   text_prop_attr = 0;",
          "1477:   text_prop_combine = FALSE;",
          "1478:   text_prop_type = NULL;",
          "1479:   if (text_props_active > 0)",
          "1480:   {",
          "1483:       current_text_props = text_props;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:   text_prop_id = 0;",
          "1489:       int used_tpi;",
          "1490:       int used_attr = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1491:    proptype_T  *pt = text_prop_type_by_id(",
          "1492:      wp->w_buffer, text_props[tpi].tp_type);",
          "1495:    {",
          "1498:        text_prop_type = pt;",
          "1499:        text_prop_attr =",
          "1501:        text_prop_combine = pt->pt_flags & PT_FLAG_COMBINE;",
          "1502:    }",
          "1503:       }",
          "1504:   }",
          "1505:      }",
          "",
          "[Removed Lines]",
          "1494:    if (pt != NULL && pt->pt_hl_id > 0)",
          "1496:        int pt_attr = syn_id2attr(pt->pt_hl_id);",
          "1500:           hl_combine_attr(text_prop_attr, pt_attr);",
          "",
          "[Added Lines]",
          "1505:    if (pt != NULL && pt->pt_hl_id > 0",
          "1506:        && text_props[tpi].tp_id != -MAXCOL)",
          "1508:        used_attr = syn_id2attr(pt->pt_hl_id);",
          "1511:        hl_combine_attr(text_prop_attr, used_attr);",
          "1513:        text_prop_id = text_props[tpi].tp_id;",
          "1514:        used_tpi = tpi;",
          "1515:    }",
          "1516:       }",
          "1517:       if (n_extra == 0 && text_prop_id < 0",
          "1518:        && -text_prop_id",
          "1519:           <= wp->w_buffer->b_textprop_text.ga_len)",
          "1520:       {",
          "1521:    char_u *p = ((char_u **)wp->w_buffer",
          "1522:          ->b_textprop_text.ga_data)[",
          "1523:           -text_prop_id - 1];",
          "1524:    if (p != NULL)",
          "1525:    {",
          "1526:        p_extra = p;",
          "1527:        n_extra = STRLEN(p);",
          "1528:        extra_attr = used_attr;",
          "1529:        n_attr = n_extra;",
          "1530:        text_prop_attr = 0;",
          "1534:        if (wp == curwin",
          "1535:         && lnum == curwin->w_cursor.lnum",
          "1536:         && curwin->w_cursor.col >= vcol)",
          "1537:     curwin->w_cursor.col += n_extra;",
          "1541:    text_props[used_tpi].tp_id = -MAXCOL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2025:       int     mb_off = has_mbyte ? (*mb_head_off)(line, ptr - 1)",
          "2026:             : 0;",
          "2027:       char_u  *p = ptr - (mb_off + 1);",
          "",
          "[Removed Lines]",
          "2030:       n_extra = win_lbr_chartabsize(wp, line, p, (colnr_T)vcol,",
          "2031:             NULL) - 1;",
          "",
          "[Added Lines]",
          "2067:       chartabsize_T cts;",
          "2069:       init_chartabsize_arg(&cts, wp, lnum, vcol, line, p);",
          "2070:       n_extra = win_lbr_chartabsize(&cts, NULL) - 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2069:    if (!wp->w_p_list)",
          "2070:        c = ' ';",
          "2071:       }",
          "2072:   }",
          "2073: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2111:       clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/edit.c||src/edit.c": [
          "File: src/edit.c -> src/edit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4905:  colnr_T  want_vcol, vcol;",
          "4906:  int  change_col = -1;",
          "4907:  int  save_list = curwin->w_p_list;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4908:  char_u  *tab = (char_u *)\"\\t\";",
          "4909:  chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4950:  getvcol(curwin, &fpos, &vcol, NULL, NULL);",
          "4951:  getvcol(curwin, cursor, &want_vcol, NULL, NULL);",
          "4955:  while (VIM_ISWHITE(*ptr))",
          "4956:  {",
          "4959:   break;",
          "4960:      if (*ptr != TAB)",
          "4961:      {",
          "",
          "[Removed Lines]",
          "4957:      i = lbr_chartabsize(NULL, (char_u *)\"\\t\", vcol);",
          "4958:      if (vcol + i > want_vcol)",
          "",
          "[Added Lines]",
          "4955:  init_chartabsize_arg(&cts, curwin, 0, vcol, tab, tab);",
          "4961:      i = lbr_chartabsize(&cts);",
          "4962:      if (cts.cts_vcol + i > want_vcol)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4970:      }",
          "4971:      ++fpos.col;",
          "4972:      ++ptr;",
          "4974:  }",
          "4976:  if (change_col >= 0)",
          "4977:  {",
          "4983:      {",
          "4986:   ++repl_off;",
          "4987:      }",
          "4988:      if (vcol > want_vcol)",
          "4989:      {",
          "",
          "[Removed Lines]",
          "4973:      vcol += i;",
          "4978:      int repl_off = 0;",
          "4979:      char_u *line = ptr;",
          "4982:      while (vcol < want_vcol && *ptr == ' ')",
          "4984:   vcol += lbr_chartabsize(line, ptr, vcol);",
          "4985:   ++ptr;",
          "",
          "[Added Lines]",
          "4977:      cts.cts_vcol += i;",
          "4979:  vcol = cts.cts_vcol;",
          "4980:  clear_chartabsize_arg(&cts);",
          "4984:      int      repl_off = 0;",
          "4987:      init_chartabsize_arg(&cts, curwin, 0, vcol, ptr, ptr);",
          "4988:      while (cts.cts_vcol < want_vcol && *cts.cts_ptr == ' ')",
          "4990:   cts.cts_vcol += lbr_chartabsize(&cts);",
          "4991:   ++cts.cts_ptr;",
          "4994:      ptr = cts.cts_ptr;",
          "4995:      vcol = cts.cts_vcol;",
          "4996:      clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5220:     int",
          "5221: ins_copychar(linenr_T lnum)",
          "5222: {",
          "5228:     if (lnum < 1 || lnum > curbuf->b_ml.ml_line_count)",
          "5229:     {",
          "",
          "[Removed Lines]",
          "5223:     int     c;",
          "5224:     int     temp;",
          "5225:     char_u  *ptr, *prev_ptr;",
          "5226:     char_u  *line;",
          "",
          "[Added Lines]",
          "5233:     int      c;",
          "5234:     char_u     *ptr, *prev_ptr;",
          "5235:     char_u     *line;",
          "5236:     chartabsize_T   cts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5235:     validate_virtcol();",
          "5240:     {",
          "5243:     }",
          "5245:  ptr = prev_ptr;",
          "5247:     c = (*mb_ptr2char)(ptr);",
          "5248:     if (c == NUL)",
          "",
          "[Removed Lines]",
          "5236:     temp = 0;",
          "5237:     line = ptr = ml_get(lnum);",
          "5238:     prev_ptr = ptr;",
          "5239:     while ((colnr_T)temp < curwin->w_virtcol && *ptr != NUL)",
          "5241:  prev_ptr = ptr;",
          "5242:  temp += lbr_chartabsize_adv(line, &ptr, (colnr_T)temp);",
          "5244:     if ((colnr_T)temp > curwin->w_virtcol)",
          "",
          "[Added Lines]",
          "5246:     line = ml_get(lnum);",
          "5247:     prev_ptr = line;",
          "5248:     init_chartabsize_arg(&cts, curwin, lnum, 0, line, line);",
          "5249:     while (cts.cts_vcol < curwin->w_virtcol && *cts.cts_ptr != NUL)",
          "5251:  prev_ptr = cts.cts_ptr;",
          "5252:  cts.cts_vcol += lbr_chartabsize_adv(&cts);",
          "5254:     if (cts.cts_vcol > curwin->w_virtcol)",
          "5256:     else",
          "5257:  ptr = cts.cts_ptr;",
          "5258:     clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3310: EXTERN char e_cmdline_window_already_open[]",
          "3311:  INIT(= N_(\"E1292: Command-line window is already open\"));",
          "3312: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3313: #ifdef FEAT_PROP_POPUP",
          "3314: EXTERN char e_cannot_use_negative_id_after_adding_textprop_with_text[]",
          "3315:  INIT(= N_(\"E1291: Cannot use a negative id after adding a textprop with text\"));",
          "3316: #endif",
          "",
          "---------------"
        ],
        "src/evalfunc.c||src/evalfunc.c": [
          "File: src/evalfunc.c -> src/evalfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2218:     {\"prompt_setprompt\", 2, 2, FEARG_1,     arg2_buffer_string,",
          "2219:    ret_void,     JOB_FUNC(f_prompt_setprompt)},",
          "2220:     {\"prop_add\", 3, 3, FEARG_1,     arg3_number_number_dict,",
          "2222:     {\"prop_add_list\", 2, 2, FEARG_1,     arg2_dict_any_list_any,",
          "2223:    ret_void,     PROP_FUNC(f_prop_add_list)},",
          "2224:     {\"prop_clear\", 1, 3, FEARG_1,     arg3_number_number_dict,",
          "",
          "[Removed Lines]",
          "2221:    ret_void,     PROP_FUNC(f_prop_add)},",
          "",
          "[Added Lines]",
          "2221:    ret_number,     PROP_FUNC(f_prop_add)},",
          "",
          "---------------"
        ],
        "src/getchar.c||src/getchar.c": [
          "File: src/getchar.c -> src/getchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3210:    && (c = inchar(typebuf.tb_buf + typebuf.tb_off",
          "3211:             + typebuf.tb_len, 3, 25L)) == 0)",
          "3212:   {",
          "3214:       char_u *ptr;",
          "3216:       if (mode_displayed)",
          "",
          "[Removed Lines]",
          "3213:       colnr_T col = 0, vcol;",
          "",
          "[Added Lines]",
          "3213:       colnr_T col = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3242:    {",
          "3243:        if (did_ai)",
          "3244:        {",
          "3251:     ptr = ml_get_curline();",
          "3253:     {",
          "3258:         if (has_mbyte)",
          "3260:         else",
          "3262:     }",
          "3263:     curwin->w_wrow = curwin->w_cline_row",
          "3264:         + curwin->w_wcol / curwin->w_width;",
          "3265:     curwin->w_wcol %= curwin->w_width;",
          "",
          "[Removed Lines]",
          "3250:     col = vcol = curwin->w_wcol = 0;",
          "3252:     while (col < curwin->w_cursor.col)",
          "3254:         if (!VIM_ISWHITE(ptr[col]))",
          "3255:      curwin->w_wcol = vcol;",
          "3256:         vcol += lbr_chartabsize(ptr, ptr + col,",
          "3257:               vcol);",
          "3259:      col += (*mb_ptr2len)(ptr + col);",
          "3261:      ++col;",
          "",
          "[Added Lines]",
          "3245:     chartabsize_T cts;",
          "3252:     curwin->w_wcol = 0;",
          "3254:     init_chartabsize_arg(&cts, curwin,",
          "3255:        curwin->w_cursor.lnum, 0, ptr, ptr);",
          "3256:     while (cts.cts_ptr < ptr + curwin->w_cursor.col)",
          "3258:         if (!VIM_ISWHITE(*cts.cts_ptr))",
          "3259:      curwin->w_wcol = cts.cts_vcol;",
          "3260:         cts.cts_vcol += lbr_chartabsize(&cts);",
          "3262:      cts.cts_ptr +=",
          "3263:          (*mb_ptr2len)(cts.cts_ptr);",
          "3265:      ++cts.cts_ptr;",
          "3267:     clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1350:  new_cursor_col = curwin->w_cursor.col;",
          "1351:     else",
          "1352:     {",
          "1354:  vcol = get_indent() - vcol;",
          "1355:  curwin->w_virtcol = (colnr_T)((vcol < 0) ? 0 : vcol);",
          "1360:  ptr = ml_get_curline();",
          "1362:  {",
          "1369:   break;",
          "1371:  }",
          "1372:  vcol = last_vcol;",
          "",
          "[Removed Lines]",
          "1358:  vcol = last_vcol = 0;",
          "1359:  new_cursor_col = -1;",
          "1361:  while (vcol <= (int)curwin->w_virtcol)",
          "1363:      last_vcol = vcol;",
          "1364:      if (has_mbyte && new_cursor_col >= 0)",
          "1365:   new_cursor_col += (*mb_ptr2len)(ptr + new_cursor_col);",
          "1366:      else",
          "1367:   ++new_cursor_col;",
          "1368:      if (ptr[new_cursor_col] == NUL)",
          "1370:      vcol += lbr_chartabsize(ptr, ptr + new_cursor_col, (colnr_T)vcol);",
          "",
          "[Added Lines]",
          "1353:  chartabsize_T cts;",
          "1360:  last_vcol = 0;",
          "1362:  init_chartabsize_arg(&cts, curwin, 0, 0, ptr, ptr);",
          "1363:  while (cts.cts_vcol <= (int)curwin->w_virtcol)",
          "1365:      last_vcol = cts.cts_vcol;",
          "1366:      if (cts.cts_vcol > 0)",
          "1367:   MB_PTR_ADV(cts.cts_ptr);",
          "1368:      if (*cts.cts_ptr == NUL)",
          "1370:      cts.cts_vcol += lbr_chartabsize(&cts);",
          "1373:  new_cursor_col = cts.cts_ptr - cts.cts_line;",
          "1374:  clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2064:   amount = 2;",
          "2065:      else",
          "2066:      {",
          "2071:   {",
          "2073:       col--;",
          "2074:   }",
          "",
          "[Removed Lines]",
          "2067:   char_u *line = that;",
          "2069:   amount = 0;",
          "2070:   while (*that && col)",
          "2072:       amount += lbr_chartabsize_adv(line, &that, (colnr_T)amount);",
          "",
          "[Added Lines]",
          "2069:   char_u  *line = that;",
          "2070:   chartabsize_T cts;",
          "2072:   init_chartabsize_arg(&cts, curwin, pos->lnum, 0, line, line);",
          "2073:   while (*cts.cts_ptr != NUL && col > 0)",
          "2075:       cts.cts_vcol += lbr_chartabsize_adv(&cts);",
          "2078:   amount = cts.cts_vcol;",
          "2079:   that = cts.cts_ptr;",
          "2080:   clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2091:       }",
          "2092:       firsttry = amount;",
          "2095:       {",
          "2098:       }",
          "2100:       if (*that && *that != ';') // not a comment line",
          "2101:       {",
          "",
          "[Removed Lines]",
          "2094:       while (VIM_ISWHITE(*that))",
          "2096:    amount += lbr_chartabsize(line, that, (colnr_T)amount);",
          "2097:    ++that;",
          "",
          "[Added Lines]",
          "2100:       init_chartabsize_arg(&cts, curwin, (colnr_T)(that - line),",
          "2101:           amount, line, that);",
          "2102:       while (VIM_ISWHITE(*cts.cts_ptr))",
          "2104:    cts.cts_vcol += lbr_chartabsize(&cts);",
          "2105:    ++cts.cts_ptr;",
          "2107:       that = cts.cts_ptr;",
          "2108:       amount = cts.cts_vcol;",
          "2109:       clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2107:    parencount = 0;",
          "2108:    quotecount = 0;",
          "2110:    if (vi_lisp",
          "2111:     || (*that != '\"'",
          "2112:         && *that != '\\''",
          "2113:         && *that != '#'",
          "2114:         && (*that < '0' || *that > '9')))",
          "2115:    {",
          "2118:      || quotecount",
          "2119:      || parencount)",
          "2121:          && !quotecount",
          "2122:          && !parencount",
          "2123:          && vi_lisp)))",
          "2124:        {",
          "2126:         quotecount = !quotecount;",
          "2128:               && !quotecount)",
          "2129:         ++parencount;",
          "2131:               && !quotecount)",
          "2132:         --parencount;",
          "2138:        }",
          "2139:    }",
          "2141:    {",
          "2145:    }",
          "2146:    if (!*that || *that == ';')",
          "2147:        amount = firsttry;",
          "2148:       }",
          "",
          "[Removed Lines]",
          "2116:        while (*that",
          "2117:         && (!VIM_ISWHITE(*that)",
          "2120:         && (!((*that == '(' || *that == '[')",
          "2125:     if (*that == '\"')",
          "2127:     if ((*that == '(' || *that == '[')",
          "2130:     if ((*that == ')' || *that == ']')",
          "2133:     if (*that == '\\\\' && *(that+1) != NUL)",
          "2134:         amount += lbr_chartabsize_adv(",
          "2135:       line, &that, (colnr_T)amount);",
          "2136:     amount += lbr_chartabsize_adv(",
          "2137:       line, &that, (colnr_T)amount);",
          "2140:    while (VIM_ISWHITE(*that))",
          "2142:        amount += lbr_chartabsize(",
          "2143:        line, that, (colnr_T)amount);",
          "2144:        that++;",
          "",
          "[Added Lines]",
          "2121:    init_chartabsize_arg(&cts, curwin,",
          "2122:        (colnr_T)(that - line), amount, line, that);",
          "2129:        while (*cts.cts_ptr",
          "2130:         && (!VIM_ISWHITE(*cts.cts_ptr)",
          "2133:         && (!((*cts.cts_ptr == '('",
          "2134:        || *cts.cts_ptr == '[')",
          "2139:     if (*cts.cts_ptr == '\"')",
          "2141:     if ((*cts.cts_ptr == '(' || *cts.cts_ptr == '[')",
          "2144:     if ((*cts.cts_ptr == ')' || *cts.cts_ptr == ']')",
          "2147:     if (*cts.cts_ptr == '\\\\'",
          "2148:           && *(cts.cts_ptr+1) != NUL)",
          "2149:         cts.cts_vcol += lbr_chartabsize_adv(&cts);",
          "2150:     cts.cts_vcol += lbr_chartabsize_adv(&cts);",
          "2153:    while (VIM_ISWHITE(*cts.cts_ptr))",
          "2155:        cts.cts_vcol += lbr_chartabsize(&cts);",
          "2156:        ++cts.cts_ptr;",
          "2158:    that = cts.cts_ptr;",
          "2159:    amount = cts.cts_vcol;",
          "2160:    clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     s = ml_get_buf(wp->w_buffer, lnum, FALSE);",
          "398:     if (*s == NUL)  // empty line",
          "399:  return 1;",
          "",
          "[Removed Lines]",
          "400:     col = win_linetabsize(wp, s, (colnr_T)MAXCOL);",
          "",
          "[Added Lines]",
          "400:     col = win_linetabsize(wp, lnum, s, (colnr_T)MAXCOL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427: plines_win_col(win_T *wp, linenr_T lnum, long column)",
          "428: {",
          "429:     long col;",
          "431:     int  lines = 0;",
          "432:     int  width;",
          "433:     char_u *line;",
          "435: #ifdef FEAT_DIFF",
          "",
          "[Removed Lines]",
          "430:     char_u *s;",
          "",
          "[Added Lines]",
          "433:     chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "444:     if (wp->w_width == 0)",
          "445:  return lines + 1;",
          "451:     {",
          "454:     }",
          "464:         && (!wp->w_p_list || wp->w_lcs_chars.tab1))",
          "",
          "[Removed Lines]",
          "447:     line = s = ml_get_buf(wp->w_buffer, lnum, FALSE);",
          "449:     col = 0;",
          "450:     while (*s != NUL && --column >= 0)",
          "452:  col += win_lbr_chartabsize(wp, line, s, (colnr_T)col, NULL);",
          "453:  MB_PTR_ADV(s);",
          "463:     if (*s == TAB && (State & MODE_NORMAL)",
          "465:  col += win_lbr_chartabsize(wp, line, s, (colnr_T)col, NULL) - 1;",
          "",
          "[Added Lines]",
          "447:     line = ml_get_buf(wp->w_buffer, lnum, FALSE);",
          "449:     init_chartabsize_arg(&cts, wp, lnum, 0, line, line);",
          "450:     while (*cts.cts_ptr != NUL && --column >= 0)",
          "452:  cts.cts_vcol += win_lbr_chartabsize(&cts, NULL);",
          "453:  MB_PTR_ADV(cts.cts_ptr);",
          "463:     col = cts.cts_vcol;",
          "464:     if (*cts.cts_ptr == TAB && (State & MODE_NORMAL)",
          "466:  col += win_lbr_chartabsize(&cts, NULL) - 1;",
          "467:     clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/misc2.c||src/misc2.c": [
          "File: src/misc2.c -> src/misc2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: {",
          "129:     colnr_T wcol = wcol_arg;",
          "130:     int  idx;",
          "132:     char_u *line;",
          "133:     colnr_T col = 0;",
          "134:     int  csize = 0;",
          "",
          "[Removed Lines]",
          "131:     char_u *ptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     else",
          "159:     {",
          "160:  int width = curwin->w_width - win_col_off(curwin);",
          "162:  if (finetune",
          "163:   && curwin->w_p_wrap",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:  chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:      }",
          "181:  }",
          "185:  {",
          "187: #ifdef FEAT_LINEBREAK",
          "190: #else",
          "192: #endif",
          "194:  }",
          "",
          "[Removed Lines]",
          "183:  ptr = line;",
          "184:  while (col <= wcol && *ptr != NUL)",
          "188:      csize = win_lbr_chartabsize(curwin, line, ptr, col, &head);",
          "189:      MB_PTR_ADV(ptr);",
          "191:      csize = lbr_chartabsize_adv(line, &ptr, col);",
          "193:      col += csize;",
          "195:  idx = (int)(ptr - line);",
          "",
          "[Added Lines]",
          "183:  init_chartabsize_arg(&cts, curwin, pos->lnum, 0, line, line);",
          "184:  while (cts.cts_vcol <= wcol && *cts.cts_ptr != NUL)",
          "188:      csize = win_lbr_chartabsize(&cts, &head);",
          "189:      MB_PTR_ADV(cts.cts_ptr);",
          "191:      csize = lbr_chartabsize_adv(&cts);",
          "193:      cts.cts_vcol += csize;",
          "195:  col = cts.cts_vcol;",
          "196:  idx = (int)(cts.cts_ptr - line);",
          "197:  clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/mouse.c||src/mouse.c": [
          "File: src/mouse.c -> src/mouse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3101:     int",
          "3102: vcol2col(win_T *wp, linenr_T lnum, int vcol)",
          "3103: {",
          "3111:     {",
          "3114:     }",
          "3116: }",
          "3117: #endif",
          "",
          "[Removed Lines]",
          "3105:     int  count = 0;",
          "3106:     char_u *ptr;",
          "3107:     char_u *line;",
          "3109:     line = ptr = ml_get_buf(wp->w_buffer, lnum, FALSE);",
          "3110:     while (count < vcol && *ptr != NUL)",
          "3112:  count += win_lbr_chartabsize(wp, line, ptr, count, NULL);",
          "3113:  MB_PTR_ADV(ptr);",
          "3115:     return (int)(ptr - line);",
          "",
          "[Added Lines]",
          "3104:     char_u     *line;",
          "3105:     chartabsize_T   cts;",
          "3108:     line = ml_get_buf(wp->w_buffer, lnum, FALSE);",
          "3109:     init_chartabsize_arg(&cts, wp, lnum, 0, line, line);",
          "3110:     while (cts.cts_vcol < vcol && *cts.cts_ptr != NUL)",
          "3112:  cts.cts_vcol += win_lbr_chartabsize(&cts, NULL);",
          "3113:  MB_PTR_ADV(cts.cts_ptr);",
          "3115:     clear_chartabsize_arg(&cts);",
          "3117:     return (int)(cts.cts_ptr - line);",
          "",
          "---------------"
        ],
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     if (!left)",
          "309:     {",
          "",
          "[Removed Lines]",
          "310:  int tabs = 0, spaces = 0;",
          "",
          "[Added Lines]",
          "310:  int  tabs = 0, spaces = 0;",
          "311:  chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:      else",
          "333:   ++bd.textstart;",
          "334:  }",
          "336:  {",
          "339:      total += incr;",
          "341:  }",
          "344: #ifdef FEAT_VARTABS",
          "",
          "[Removed Lines]",
          "335:  for ( ; VIM_ISWHITE(*bd.textstart); )",
          "338:      incr = lbr_chartabsize_adv(bd.textstart, &bd.textstart, bd.start_vcol);",
          "340:      bd.start_vcol += incr;",
          "",
          "[Added Lines]",
          "338:  init_chartabsize_arg(&cts, curwin, curwin->w_cursor.lnum,",
          "339:        bd.start_vcol, bd.textstart, bd.textstart);",
          "340:  for ( ; VIM_ISWHITE(*cts.cts_ptr); )",
          "342:      incr = lbr_chartabsize_adv(&cts);",
          "344:      cts.cts_vcol += incr;",
          "346:  bd.textstart = cts.cts_ptr;",
          "347:  bd.start_vcol = cts.cts_vcol;",
          "348:  clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381:  size_t     shift_amount;",
          "382:  char_u     *non_white = bd.textstart;",
          "383:  colnr_T     non_white_col;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:  chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:  non_white_col = bd.start_vcol;",
          "403:  {",
          "406:  }",
          "408:  block_space_width = non_white_col - oap->start_vcol;",
          "",
          "[Removed Lines]",
          "402:  while (VIM_ISWHITE(*non_white))",
          "404:      incr = lbr_chartabsize_adv(bd.textstart, &non_white, non_white_col);",
          "405:      non_white_col += incr;",
          "",
          "[Added Lines]",
          "411:  init_chartabsize_arg(&cts, curwin, curwin->w_cursor.lnum,",
          "412:        non_white_col, bd.textstart, non_white);",
          "413:  while (VIM_ISWHITE(*cts.cts_ptr))",
          "415:      incr = lbr_chartabsize_adv(&cts);",
          "416:      cts.cts_vcol += incr;",
          "418:  non_white_col = cts.cts_vcol;",
          "419:  non_white = cts.cts_ptr;",
          "420:  clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "424:  if (bd.startspaces)",
          "425:      verbatim_copy_width -= bd.start_char_vcols;",
          "427:  {",
          "434:   break;",
          "437:  }",
          "",
          "[Removed Lines]",
          "426:  while (verbatim_copy_width < destination_col)",
          "428:      char_u *line = verbatim_copy_end;",
          "431:      incr = lbr_chartabsize(line, verbatim_copy_end,",
          "432:         verbatim_copy_width);",
          "433:      if (verbatim_copy_width + incr > destination_col)",
          "435:      verbatim_copy_width += incr;",
          "436:      MB_PTR_ADV(verbatim_copy_end);",
          "",
          "[Added Lines]",
          "440:  init_chartabsize_arg(&cts, curwin, 0, verbatim_copy_width,",
          "441:           bd.textstart, verbatim_copy_end);",
          "442:  while (cts.cts_vcol < destination_col)",
          "444:      incr = lbr_chartabsize(&cts);",
          "445:      if (cts.cts_vcol + incr > destination_col)",
          "447:      cts.cts_vcol += incr;",
          "448:      MB_PTR_ADV(cts.cts_ptr);",
          "450:  verbatim_copy_width = cts.cts_vcol;",
          "451:  verbatim_copy_end = cts.cts_ptr;",
          "452:  clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2213:     char_u *line;",
          "2214:     char_u *prev_pstart;",
          "2215:     char_u *prev_pend;",
          "2216: #ifdef FEAT_LINEBREAK",
          "2217:     int  lbr_saved = curwin->w_p_lbr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2229:     chartabsize_T cts;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2232:     bdp->start_char_vcols = 0;",
          "2234:     line = ml_get(lnum);",
          "2236:     prev_pstart = line;",
          "2238:     {",
          "2243:  {",
          "2244:      bdp->pre_whitesp += incr;",
          "2245:      bdp->pre_whitesp_c++;",
          "",
          "[Removed Lines]",
          "2235:     pstart = line;",
          "2237:     while (bdp->start_vcol < oap->start_vcol && *pstart)",
          "2240:  incr = lbr_chartabsize(line, pstart, bdp->start_vcol);",
          "2241:  bdp->start_vcol += incr;",
          "2242:  if (VIM_ISWHITE(*pstart))",
          "",
          "[Added Lines]",
          "2250:     init_chartabsize_arg(&cts, curwin, lnum, bdp->start_vcol, line, line);",
          "2251:     while (cts.cts_vcol < oap->start_vcol && *cts.cts_ptr != NUL)",
          "2254:  incr = lbr_chartabsize(&cts);",
          "2255:  cts.cts_vcol += incr;",
          "2256:  if (VIM_ISWHITE(*cts.cts_ptr))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2249:      bdp->pre_whitesp = 0;",
          "2250:      bdp->pre_whitesp_c = 0;",
          "2251:  }",
          "2254:     }",
          "2255:     bdp->start_char_vcols = incr;",
          "2256:     if (bdp->start_vcol < oap->start_vcol) // line too short",
          "2257:     {",
          "",
          "[Removed Lines]",
          "2252:  prev_pstart = pstart;",
          "2253:  MB_PTR_ADV(pstart);",
          "",
          "[Added Lines]",
          "2266:  prev_pstart = cts.cts_ptr;",
          "2267:  MB_PTR_ADV(cts.cts_ptr);",
          "2269:     bdp->start_vcol = cts.cts_vcol;",
          "2270:     pstart = cts.cts_ptr;",
          "2271:     clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2295:  }",
          "2296:  else",
          "2297:  {",
          "2298:      prev_pend = pend;",
          "2300:      {",
          "2305:      }",
          "2306:      if (bdp->end_vcol <= oap->end_vcol",
          "2307:       && (!is_del",
          "2308:    || oap->op_type == OP_APPEND",
          "",
          "[Removed Lines]",
          "2299:      while (bdp->end_vcol <= oap->end_vcol && *pend != NUL)",
          "2302:   prev_pend = pend;",
          "2303:   incr = lbr_chartabsize_adv(line, &pend, bdp->end_vcol);",
          "2304:   bdp->end_vcol += incr;",
          "",
          "[Added Lines]",
          "2316:      init_chartabsize_arg(&cts, curwin, lnum, bdp->end_vcol,",
          "2317:           line, pend);",
          "2319:      while (cts.cts_vcol <= oap->end_vcol && *cts.cts_ptr != NUL)",
          "2322:   prev_pend = cts.cts_ptr;",
          "2323:   incr = lbr_chartabsize_adv(&cts);",
          "2324:   cts.cts_vcol += incr;",
          "2326:      bdp->end_vcol = cts.cts_vcol;",
          "2327:      pend = cts.cts_ptr;",
          "2328:      clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/popupwin.c||src/popupwin.c": [
          "File: src/popupwin.c -> src/popupwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1372:  if (wp->w_width < maxwidth)",
          "1373:      wp->w_width = maxwidth;",
          "1375:              (colnr_T)MAXCOL);",
          "1376:  wp->w_width = w_width;",
          "",
          "[Removed Lines]",
          "1374:  len = win_linetabsize(wp, ml_get_buf(wp->w_buffer, lnum, FALSE),",
          "",
          "[Added Lines]",
          "1374:  len = win_linetabsize(wp, lnum, ml_get_buf(wp->w_buffer, lnum, FALSE),",
          "",
          "---------------"
        ],
        "src/proto/charset.pro||src/proto/charset.pro": [
          "File: src/proto/charset.pro -> src/proto/charset.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: int chartabsize(char_u *p, colnr_T col);",
          "18: int linetabsize(char_u *s);",
          "19: int linetabsize_col(int startcol, char_u *s);",
          "21: int vim_isIDc(int c);",
          "22: int vim_isNormalIDc(int c);",
          "23: int vim_iswordc(int c);",
          "",
          "[Removed Lines]",
          "20: int win_linetabsize(win_T *wp, char_u *line, colnr_T len);",
          "",
          "[Added Lines]",
          "20: int win_linetabsize(win_T *wp, linenr_T lnum, char_u *line, colnr_T len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: int vim_isfilec_or_wc(int c);",
          "29: int vim_isprintc(int c);",
          "30: int vim_isprintc_strict(int c);",
          "34: void getvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end);",
          "35: colnr_T getvcol_nolist(pos_T *posp);",
          "36: void getvvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end);",
          "",
          "[Removed Lines]",
          "31: int lbr_chartabsize(char_u *line, unsigned char *s, colnr_T col);",
          "32: int lbr_chartabsize_adv(char_u *line, char_u **s, colnr_T col);",
          "33: int win_lbr_chartabsize(win_T *wp, char_u *line, char_u *s, colnr_T col, int *headp);",
          "",
          "[Added Lines]",
          "31: void init_chartabsize_arg(chartabsize_T *cts, win_T *wp, linenr_T lnum, colnr_T col, char_u *line, char_u *ptr);",
          "32: void clear_chartabsize_arg(chartabsize_T *cts);",
          "33: int lbr_chartabsize(chartabsize_T *cts);",
          "34: int lbr_chartabsize_adv(chartabsize_T *cts);",
          "35: int win_lbr_chartabsize(chartabsize_T *cts, int *headp);",
          "",
          "---------------"
        ],
        "src/proto/textprop.pro||src/proto/textprop.pro": [
          "File: src/proto/textprop.pro -> src/proto/textprop.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: int find_prop_type_id(char_u *name, buf_T *buf);",
          "3: void f_prop_add(typval_T *argvars, typval_T *rettv);",
          "4: void f_prop_add_list(typval_T *argvars, typval_T *rettv);",
          "6: int get_text_props(buf_T *buf, linenr_T lnum, char_u **props, int will_change);",
          "7: int count_props(linenr_T lnum, int only_starting);",
          "8: int find_visible_prop(win_T *wp, int type_id, int id, textprop_T *prop, linenr_T *found_lnum);",
          "",
          "[Removed Lines]",
          "5: void prop_add_common(linenr_T start_lnum, colnr_T start_col, dict_T *dict, buf_T *default_buf, typval_T *dict_arg);",
          "",
          "[Added Lines]",
          "5: int prop_add_common(linenr_T start_lnum, colnr_T start_col, dict_T *dict, buf_T *default_buf, typval_T *dict_arg);",
          "",
          "---------------"
        ],
        "src/regexp.c||src/regexp.c": [
          "File: src/regexp.c -> src/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1303:  rex.line = reg_getline(rex.lnum);",
          "1304:  rex.input = rex.line + col;",
          "1307:  if (cols < start || cols > end - (*p_sel == 'e'))",
          "1308:      return FALSE;",
          "1309:     }",
          "",
          "[Removed Lines]",
          "1306:  cols = win_linetabsize(wp, rex.line, col);",
          "",
          "[Added Lines]",
          "1306:  cols = win_linetabsize(wp, rex.reg_firstlnum + rex.lnum, rex.line, col);",
          "",
          "---------------"
        ],
        "src/regexp_bt.c||src/regexp_bt.c": [
          "File: src/regexp_bt.c -> src/regexp_bt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3441:    case RE_VCOL:",
          "3442:      if (!re_num_cmp((long_u)win_linetabsize(",
          "3443:        rex.reg_win == NULL ? curwin : rex.reg_win,",
          "3445:   status = RA_NOMATCH;",
          "3446:      break;",
          "",
          "[Removed Lines]",
          "3444:        rex.line, (colnr_T)(rex.input - rex.line)) + 1, scan))",
          "",
          "[Added Lines]",
          "3444:        rex.reg_firstlnum + rex.lnum,",
          "3445:        rex.line,",
          "3446:        (colnr_T)(rex.input - rex.line)) + 1, scan))",
          "",
          "---------------"
        ],
        "src/regexp_nfa.c||src/regexp_nfa.c": [
          "File: src/regexp_nfa.c -> src/regexp_nfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6775:       }",
          "6776:       if (!result)",
          "6777:    result = nfa_re_num_cmp(t->state->val, op,",
          "6779:       if (result)",
          "6780:       {",
          "6781:    add_here = TRUE;",
          "",
          "[Removed Lines]",
          "6778:     (long_u)win_linetabsize(wp, rex.line, col) + 1);",
          "",
          "[Added Lines]",
          "6778:     (long_u)win_linetabsize(wp,",
          "6779:       rex.reg_firstlnum + rex.lnum,",
          "6780:       rex.line, col) + 1);",
          "",
          "---------------"
        ],
        "src/register.c||src/register.c": [
          "File: src/register.c -> src/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1820:  bd.textcol = 0;",
          "1821:  for (i = 0; i < y_size; ++i)",
          "1822:  {",
          "1826:      bd.startspaces = 0;",
          "1827:      bd.endspaces = 0;",
          "",
          "[Removed Lines]",
          "1823:      int spaces = 0;",
          "1824:      char shortline;",
          "",
          "[Added Lines]",
          "1823:      int      spaces = 0;",
          "1824:      char     shortline;",
          "1825:      chartabsize_T   cts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1840:      oldp = ml_get_curline();",
          "1841:      oldlen = (int)STRLEN(oldp);",
          "1843:      {",
          "1847:      }",
          "1848:      bd.textcol = (colnr_T)(ptr - oldp);",
          "1850:      shortline = (vcol < col) || (vcol == col && !*ptr) ;",
          "",
          "[Removed Lines]",
          "1842:      for (ptr = oldp; vcol < col && *ptr; )",
          "1845:   incr = lbr_chartabsize_adv(oldp, &ptr, vcol);",
          "1846:   vcol += incr;",
          "",
          "[Added Lines]",
          "1843:      init_chartabsize_arg(&cts, curwin, curwin->w_cursor.lnum, 0,",
          "1844:           oldp, oldp);",
          "1846:      while (cts.cts_vcol < col && *cts.cts_ptr != NUL)",
          "1849:   incr = lbr_chartabsize_adv(&cts);",
          "1850:   cts.cts_vcol += incr;",
          "1852:      vcol = cts.cts_vcol;",
          "1853:      ptr = cts.cts_ptr;",
          "1855:      clear_chartabsize_arg(&cts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1878:   spaces = y_width + 1;",
          "1879:   for (j = 0; j < yanklen; j++)",
          "1881:   if (spaces < 0)",
          "1882:       spaces = 0;",
          "1883:      }",
          "",
          "[Removed Lines]",
          "1880:       spaces -= lbr_chartabsize(NULL, &y_array[i][j], 0);",
          "",
          "[Added Lines]",
          "1886:   init_chartabsize_arg(&cts, curwin, 0, 0,",
          "1887:             y_array[i], y_array[i]);",
          "1889:   {",
          "1890:       spaces -= lbr_chartabsize(&cts);",
          "1891:       ++cts.cts_ptr;",
          "1892:       cts.cts_vcol = 0;",
          "1893:   }",
          "1894:   clear_chartabsize_arg(&cts);",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:     int  tp_flags; // TP_FLAG_ values",
          "807: } textprop_T;",
          "",
          "[Removed Lines]",
          "809: #define TP_FLAG_CONT_NEXT 1 // property continues in next line",
          "810: #define TP_FLAG_CONT_PREV 2 // property was continued from prev line",
          "",
          "[Added Lines]",
          "809: #define TP_FLAG_CONT_NEXT 0x1 // property continues in next line",
          "810: #define TP_FLAG_CONT_PREV 0x2 // property was continued from prev line",
          "811: #define TP_VIRTUAL  0x4 // virtual text, uses tp_id",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3074: #ifdef FEAT_PROP_POPUP",
          "3075:     int  b_has_textprop; // TRUE when text props were added",
          "3076:     hashtab_T *b_proptypes; // text property types local to buffer",
          "3077: #endif",
          "3079: #if defined(FEAT_BEVAL) && defined(FEAT_EVAL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3078:     garray_T b_textprop_text; // stores text for props, index by (-id - 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4560:     char_u *str;",
          "4561:     int  score;",
          "4562: } fuzmatch_str_T;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4567: typedef struct {",
          "4568:     win_T *cts_win;",
          "4569:     linenr_T cts_lnum;     // zero when not using text properties",
          "4570:     char_u *cts_line;     // start of the line",
          "4571:     char_u *cts_ptr;     // current position in line",
          "4572: #ifdef FEAT_PROP_POPUP",
          "4573:     int  cts_text_prop_count; // number of text props",
          "4574:     textprop_T *cts_text_props; // text props (allocated) or NULL",
          "4575:     char cts_has_prop_with_text;  // TRUE if if a property inserts text",
          "4576:     int         cts_cur_text_width;     // width of current inserted text",
          "4577: #endif",
          "4578:     int  cts_vcol;     // virtual column at current position",
          "4579: } chartabsize_T;",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_prop_inserts_text.dump||src/testdir/dumps/Test_prop_inserts_text.dump": [
          "File: src/testdir/dumps/Test_prop_inserts_text.dump -> src/testdir/dumps/Test_prop_inserts_text.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: |i+0&#ffffff0|n|s|e|r|t| |s|o|m|e| |t|e|x|t| |S+0#ffffff16#e000002|O|M|E| |h+0#0000000#ffffff0|e|r|e| |a|n|d| |o|t|h|e|r| |t|e|x|t| |O+0&#ffff4012|T|H|E|R| |t+0&#ffffff0|h|e|r|e| |a|n|d| |s|o",
          "2: |m|e| |m|o|r|e| |t|e|x|t| |a|f|t|e|r| |M+0&#5fd7ff255|O|R|E| |w+0&#ffffff0|r|a|p@1|i|n|g> @27",
          "3: |~+0#4040ff13&| @58",
          "4: |~| @58",
          "5: |~| @58",
          "6: | +0#0000000&@41|1|,|7@1|-|9|3| @6|A|l@1|",
          "",
          "---------------"
        ],
        "src/testdir/test_textprop.vim||src/testdir/test_textprop.vim": [
          "File: src/testdir/test_textprop.vim -> src/testdir/test_textprop.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2187:   bwipe!",
          "2188: endfunc",
          "2190: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2190: func Test_prop_inserts_text()",
          "2191:   CheckRunVimInTerminal",
          "2193:   \" Just a basic check for now",
          "2194:   let lines =<< trim END",
          "2195:       call setline(1, 'insert some text here and other text there and some more text after wrapping')",
          "2196:       call prop_type_add('someprop', #{highlight: 'ErrorMsg'})",
          "2197:       call prop_type_add('otherprop', #{highlight: 'Search'})",
          "2198:       call prop_type_add('moreprop', #{highlight: 'DiffAdd'})",
          "2199:       call prop_add(1, 18, #{type: 'someprop', text: 'SOME '})",
          "2200:       call prop_add(1, 38, #{type: 'otherprop', text: 'OTHER '})",
          "2201:       call prop_add(1, 69, #{type: 'moreprop', text: 'MORE '})",
          "2202:       redraw",
          "2203:       normal $",
          "2204:   END",
          "2205:   call writefile(lines, 'XscriptPropsWithText')",
          "2206:   let buf = RunVimInTerminal('-S XscriptPropsWithText', #{rows: 6, cols: 60})",
          "2207:   call VerifyScreenDump(buf, 'Test_prop_inserts_text', {})",
          "2209:   call StopVimInTerminal(buf)",
          "2210:   call delete('XscriptPropsWithText')",
          "2211: endfunc",
          "",
          "---------------"
        ],
        "src/textprop.c||src/textprop.c": [
          "File: src/textprop.c -> src/textprop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     void",
          "154: {",
          "155:     linenr_T start_lnum;",
          "156:     colnr_T start_col;",
          "",
          "[Removed Lines]",
          "153: f_prop_add(typval_T *argvars, typval_T *rettv UNUSED)",
          "",
          "[Added Lines]",
          "153: f_prop_add(typval_T *argvars, typval_T *rettv)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:  return;",
          "175:     }",
          "179: }",
          "186:     static int",
          "187: prop_add_one(",
          "188:  buf_T  *buf,",
          "189:  char_u  *type_name,",
          "190:  int  id,",
          "191:  linenr_T start_lnum,",
          "192:  linenr_T end_lnum,",
          "193:  colnr_T  start_col,",
          "",
          "[Removed Lines]",
          "177:     prop_add_common(start_lnum, start_col, argvars[2].vval.v_dict,",
          "178:          curbuf, &argvars[2]);",
          "",
          "[Added Lines]",
          "177:     rettv->vval.v_number = prop_add_common(start_lnum, start_col,",
          "178:      argvars[2].vval.v_dict, curbuf, &argvars[2]);",
          "192:  char_u  *text_arg,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:     char_u *newtext;",
          "203:     int  i;",
          "204:     textprop_T tmp_prop;",
          "206:     type = lookup_prop_type(type_name, buf);",
          "207:     if (type == NULL)",
          "210:     if (start_lnum < 1 || start_lnum > buf->b_ml.ml_line_count)",
          "211:     {",
          "212:  semsg(_(e_invalid_line_number_nr), (long)start_lnum);",
          "214:     }",
          "215:     if (end_lnum < start_lnum || end_lnum > buf->b_ml.ml_line_count)",
          "216:     {",
          "217:  semsg(_(e_invalid_line_number_nr), (long)end_lnum);",
          "219:     }",
          "221:     if (buf->b_ml.ml_mfp == NULL)",
          "222:     {",
          "223:  emsg(_(e_cannot_add_text_property_to_unloaded_buffer));",
          "225:     }",
          "227:     for (lnum = start_lnum; lnum <= end_lnum; ++lnum)",
          "",
          "[Removed Lines]",
          "208:  return FAIL;",
          "213:  return FAIL;",
          "218:  return FAIL;",
          "224:  return FAIL;",
          "",
          "[Added Lines]",
          "207:     char_u *text = text_arg;",
          "208:     int  res = FAIL;",
          "212:  goto theend;",
          "217:  goto theend;",
          "222:  goto theend;",
          "228:  goto theend;",
          "229:     }",
          "231:     if (text != NULL)",
          "232:     {",
          "233:  garray_T *gap = &buf->b_textprop_text;",
          "236:  if (-id - 1 != gap->ga_len)",
          "237:      iemsg(\"text prop ID mismatch\");",
          "238:  if (gap->ga_growsize == 0)",
          "239:      ga_init2(gap, sizeof(char *), 50);",
          "240:  if (ga_grow(gap, 1) == FAIL)",
          "241:      goto theend;",
          "242:  ((char_u **)gap->ga_data)[gap->ga_len++] = text;",
          "243:  text = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:  if (col - 1 > (colnr_T)textlen)",
          "241:  {",
          "242:      semsg(_(e_invalid_column_number_nr), (long)start_col);",
          "244:  }",
          "246:  if (lnum == end_lnum)",
          "",
          "[Removed Lines]",
          "243:      return FAIL;",
          "",
          "[Added Lines]",
          "262:      goto theend;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "256:  newtext = alloc(buf->b_ml.ml_line_len + sizeof(textprop_T));",
          "257:  if (newtext == NULL)",
          "260:  mch_memmove(newtext, buf->b_ml.ml_line_ptr, textlen);",
          "",
          "[Removed Lines]",
          "258:      return FAIL;",
          "",
          "[Added Lines]",
          "277:      goto theend;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:     }",
          "297:     changed_lines_buf(buf, start_lnum, end_lnum + 1, 0);",
          "299: }",
          "",
          "[Removed Lines]",
          "298:     return OK;",
          "",
          "[Added Lines]",
          "317:     res = OK;",
          "319: theend:",
          "320:     vim_free(text);",
          "321:     return res;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "367:      emsg(_(e_invalid_argument));",
          "368:      return;",
          "369:  }",
          "371:       start_col, end_col) == FAIL)",
          "372:      return;",
          "373:     }",
          "",
          "[Removed Lines]",
          "370:  if (prop_add_one(buf, type_name, id, start_lnum, end_lnum,",
          "",
          "[Added Lines]",
          "393:  if (prop_add_one(buf, type_name, id, NULL, start_lnum, end_lnum,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "375:     redraw_buf_later(buf, VALID);",
          "376: }",
          "384: prop_add_common(",
          "385:  linenr_T    start_lnum,",
          "386:  colnr_T     start_col,",
          "",
          "[Removed Lines]",
          "383:     void",
          "",
          "[Added Lines]",
          "404:     static int",
          "405: get_textprop_id(buf_T *buf)",
          "406: {",
          "408:     return -(buf->b_textprop_text.ga_len + 1);",
          "409: }",
          "417:     int",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "393:     char_u *type_name;",
          "394:     buf_T *buf = default_buf;",
          "395:     int  id = 0;",
          "397:     if (dict == NULL || !dict_has_key(dict, \"type\"))",
          "398:     {",
          "399:  emsg(_(e_missing_property_type_name));",
          "401:     }",
          "402:     type_name = dict_get_string(dict, \"type\", FALSE);",
          "",
          "[Removed Lines]",
          "400:  return;",
          "",
          "[Added Lines]",
          "430:     char_u *text = NULL;",
          "435:  goto theend;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "407:  if (end_lnum < start_lnum)",
          "408:  {",
          "409:      semsg(_(e_invalid_value_for_argument_str), \"end_lnum\");",
          "411:  }",
          "412:     }",
          "413:     else",
          "",
          "[Removed Lines]",
          "410:      return;",
          "",
          "[Added Lines]",
          "445:      goto theend;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "420:  if (length < 0 || end_lnum > start_lnum)",
          "421:  {",
          "422:      semsg(_(e_invalid_value_for_argument_str), \"length\");",
          "424:  }",
          "425:  end_col = start_col + length;",
          "426:     }",
          "",
          "[Removed Lines]",
          "423:      return;",
          "",
          "[Added Lines]",
          "458:      goto theend;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "430:  if (end_col <= 0)",
          "431:  {",
          "432:      semsg(_(e_invalid_value_for_argument_str), \"end_col\");",
          "434:  }",
          "435:     }",
          "436:     else if (start_lnum == end_lnum)",
          "",
          "[Removed Lines]",
          "433:      return;",
          "",
          "[Added Lines]",
          "468:      goto theend;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "441:     if (dict_has_key(dict, \"id\"))",
          "442:  id = dict_get_number(dict, \"id\");",
          "444:     if (dict_arg != NULL && get_bufnr_from_arg(dict_arg, &buf) == FAIL)",
          "450:     buf->b_has_textprop = TRUE;  // this is never reset",
          "454:     redraw_buf_later(buf, VALID);",
          "455: }",
          "",
          "[Removed Lines]",
          "445:  return;",
          "452:     prop_add_one(buf, type_name, id, start_lnum, end_lnum, start_col, end_col);",
          "",
          "[Added Lines]",
          "479:     if (dict_has_key(dict, \"text\"))",
          "480:     {",
          "481:  text = dict_get_string(dict, \"text\", TRUE);",
          "482:  if (text == NULL)",
          "483:      goto theend;",
          "485:  end_col = start_col + 1;",
          "486:     }",
          "489:  goto theend;",
          "491:     if (id < 0 && buf->b_textprop_text.ga_len > 0)",
          "492:     {",
          "493:  emsg(_(e_cannot_use_negative_id_after_adding_textprop_with_text));",
          "494:  goto theend;",
          "495:     }",
          "496:     if (text != NULL)",
          "497:  id = get_textprop_id(buf);",
          "504:     prop_add_one(buf, type_name, id, text,",
          "505:         start_lnum, end_lnum, start_col, end_col);",
          "506:     text = NULL;",
          "510: theend:",
          "511:     vim_free(text);",
          "512:     return id;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "954:  if ((prop_types == NULL",
          "955:       || prop_type_or_id_in_list(prop_types, prop_types_len,",
          "956:    prop.tp_type))",
          "960:  {",
          "961:      dict_T *d = dict_alloc();",
          "",
          "[Removed Lines]",
          "957:   && (prop_ids == NULL ||",
          "958:       prop_type_or_id_in_list(prop_ids, prop_ids_len,",
          "959:    prop.tp_id)))",
          "",
          "[Added Lines]",
          "1015:   && (prop_ids == NULL",
          "1016:       || prop_type_or_id_in_list(prop_ids, prop_ids_len,",
          "1017:          prop.tp_id)))",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     66,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     67,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f113e4f7b698fc94c1a8377afdb7249329beaee",
      "candidate_info": {
        "commit_hash": "0f113e4f7b698fc94c1a8377afdb7249329beaee",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/0f113e4f7b698fc94c1a8377afdb7249329beaee",
        "files": [
          "src/testdir/test_vartabs.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4437: vartabs test fails on MS-Windows\n\nProblem:    Vartabs test fails on MS-Windows.\nSolution:   Use iso8859-1 'encoding'. (Ken Takata, closes #9818)",
        "before_after_code_files": [
          "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim": [
          "File: src/testdir/test_vartabs.vim -> src/testdir/test_vartabs.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: func Test_vartabstop_latin1()",
          "446:   let save_encoding = &encoding",
          "447:   new",
          "450:   set vartabstop=400",
          "452:   bwipe!",
          "453:   let &encoding = save_encoding",
          "454: endfunc",
          "",
          "[Removed Lines]",
          "448:   set encoding=iso8859",
          "449:   silent norm :se \u0001\u001b",
          "451:   norm i00 \u0004",
          "",
          "[Added Lines]",
          "448:   set encoding=iso8859-1",
          "449:   silent exe \"norm :se \\<C-A>\\<C-C>\"",
          "451:   exe \"norm i00\\t\\<C-D>\"",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4436,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4437,",
          "",
          "---------------"
        ]
      }
    }
  ]
}