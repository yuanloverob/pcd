{
  "cve_id": "CVE-2020-4032",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an integer casting vulnerability in update_recv_secondary_order. All clients with +glyph-cache /relax-order-checks are affected. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
  "patch_info": {
    "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "files": [
      "libfreerdp/core/orders.c"
    ],
    "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3762:              name, end - start);",
      "3763:   return FALSE;",
      "3764:  }",
      "3766:  if (diff > 0)",
      "3767:  {",
      "3768:   WLog_Print(update->log, WLOG_DEBUG,",
      "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
      "3771:  }",
      "3772:  return rc;",
      "3773: }",
      "",
      "[Removed Lines]",
      "3765:  diff = start - end;",
      "3770:   Stream_Seek(s, diff);",
      "",
      "[Added Lines]",
      "3765:  diff = end - start;",
      "3770:   if (!Stream_SafeSeek(s, diff))",
      "3771:    return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
      "candidate_info": {
        "commit_hash": "6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
        "files": [
          "libfreerdp/core/license.c"
        ],
        "message": "Fixed OOB Read in license_read_new_or_upgrade_license_packet\n\nCVE-2020-11099 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/license.c||libfreerdp/core/license.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/license.c||libfreerdp/core/license.c": [
          "File: libfreerdp/core/license.c -> libfreerdp/core/license.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1252:  if (!licenseStream)",
          "1253:   goto out_free_blob;",
          "1255:  Stream_Read_UINT16(licenseStream, os_minor);",
          "1256:  Stream_Read_UINT16(licenseStream, os_major);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1255:  if (Stream_GetRemainingLength(licenseStream) < 8)",
          "1256:   goto out_free_stream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1266:  Stream_Seek(licenseStream, cbScope);",
          "1269:  Stream_Read_UINT32(licenseStream, cbCompanyName);",
          "1270:  if (Stream_GetRemainingLength(licenseStream) < cbCompanyName)",
          "1271:   goto out_free_stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1272:  if (Stream_GetRemainingLength(licenseStream) < 4)",
          "1273:   goto out_free_stream;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1276:  Stream_Seek(licenseStream, cbCompanyName);",
          "1279:  Stream_Read_UINT32(licenseStream, cbProductId);",
          "1280:  if (Stream_GetRemainingLength(licenseStream) < cbProductId)",
          "1281:   goto out_free_stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1284:  if (Stream_GetRemainingLength(licenseStream) < 4)",
          "1285:   goto out_free_stream;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1286:  Stream_Seek(licenseStream, cbProductId);",
          "1289:  Stream_Read_UINT32(licenseStream, cbLicenseInfo);",
          "1290:  if (Stream_GetRemainingLength(licenseStream) < cbLicenseInfo)",
          "1291:   goto out_free_stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1296:  if (Stream_GetRemainingLength(licenseStream) < 4)",
          "1297:   goto out_free_stream;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "caff01877d4df5f25a983b3aa5e57dde6a16a62f",
      "candidate_info": {
        "commit_hash": "caff01877d4df5f25a983b3aa5e57dde6a16a62f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/caff01877d4df5f25a983b3aa5e57dde6a16a62f",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Fixed fallback to getlogin for android",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:  uid_t uid = getuid();",
          "601:  char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "606:  if (!path)",
          "607:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: #ifndef getlogin_r",
          "604:  strncpy(uname, getlogin(), sizeof(uname));",
          "605: #else",
          "608: #endif",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "211:    length = strlen(login);",
          "213:    if (*nSize >= length)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: #ifndef getlogin_r",
          "210:    strncpy(login, getlogin(), sizeof(login));",
          "211: #else",
          "214: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "308c2c3544763873a5bea4d18c72c9f62e1584cb",
      "candidate_info": {
        "commit_hash": "308c2c3544763873a5bea4d18c72c9f62e1584cb",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/308c2c3544763873a5bea4d18c72c9f62e1584cb",
        "files": [
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Removed duplicate semicolon",
        "before_after_code_files": [
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm tres;",
          "344:  struct tm* local_time;",
          "345:  TIME_ZONE_ENTRY* dtz;",
          "346:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "",
          "[Removed Lines]",
          "343:  ;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
      "candidate_info": {
        "commit_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/36478d3d0b3d7fa378a875f60170a08e94747226",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Replaced getlogin with getlogin_r",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (!path)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char* uname = getlogin();",
          "",
          "[Added Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "---------------"
        ],
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:  if (!settings->Username && !settings->CredentialsFromStdin && !settings->SmartcardLogon)",
          "1183:  {",
          "1187:   {",
          "1188:    settings->Username = _strdup(login_name);",
          "",
          "[Removed Lines]",
          "1184:   char* login_name = getlogin();",
          "1186:   if (login_name)",
          "",
          "[Added Lines]",
          "1184:   char login_name[MAX_PATH] = { 0 };",
          "1186:   if (getlogin_r(login_name, sizeof(login_name)) == 0)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: BOOL GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize)",
          "202: {",
          "203:  size_t length;",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "210:    length = strlen(login);",
          "212:    if (*nSize >= length)",
          "213:    {",
          "214:     CopyMemory(lpNameBuffer, login, length + 1);",
          "216:    }",
          "217:    else",
          "218:    {",
          "",
          "[Removed Lines]",
          "204:  char* login;",
          "209:    login = getlogin();",
          "215:     return 1;",
          "",
          "[Added Lines]",
          "204:  char login[MAX_PATH];",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "216:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:    break;",
          "236:  }",
          "239: }",
          "241: BOOL GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize)",
          "",
          "[Removed Lines]",
          "238:  return 0;",
          "",
          "[Added Lines]",
          "239:  return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
      "candidate_info": {
        "commit_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/733ee3208306b1ea32697b356c0215180fc3f049",
        "files": [
          "libfreerdp/core/orders.c",
          "libfreerdp/core/orders.h",
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed invalid access in update_recv_primary_order\n\nCVE-2020-11095 thanks @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
          "libfreerdp/core/orders.h||libfreerdp/core/orders.h",
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #define TAG FREERDP_TAG(\"core.orders\")",
          "77: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "",
          "[Removed Lines]",
          "46: const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[] = { DSTBLT_ORDER_FIELD_BYTES,",
          "47:                                                 PATBLT_ORDER_FIELD_BYTES,",
          "48:                                                 SCRBLT_ORDER_FIELD_BYTES,",
          "49:                                                 0,",
          "50:                                                 0,",
          "51:                                                 0,",
          "52:                                                 0,",
          "53:                                                 DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
          "54:                                                 MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
          "55:                                                 LINE_TO_ORDER_FIELD_BYTES,",
          "56:                                                 OPAQUE_RECT_ORDER_FIELD_BYTES,",
          "57:                                                 SAVE_BITMAP_ORDER_FIELD_BYTES,",
          "58:                                                 0,",
          "59:                                                 MEMBLT_ORDER_FIELD_BYTES,",
          "60:                                                 MEM3BLT_ORDER_FIELD_BYTES,",
          "61:                                                 MULTI_DSTBLT_ORDER_FIELD_BYTES,",
          "62:                                                 MULTI_PATBLT_ORDER_FIELD_BYTES,",
          "63:                                                 MULTI_SCRBLT_ORDER_FIELD_BYTES,",
          "64:                                                 MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES,",
          "65:                                                 FAST_INDEX_ORDER_FIELD_BYTES,",
          "66:                                                 POLYGON_SC_ORDER_FIELD_BYTES,",
          "67:                                                 POLYGON_CB_ORDER_FIELD_BYTES,",
          "68:                                                 POLYLINE_ORDER_FIELD_BYTES,",
          "69:                                                 0,",
          "70:                                                 FAST_GLYPH_ORDER_FIELD_BYTES,",
          "71:                                                 ELLIPSE_SC_ORDER_FIELD_BYTES,",
          "72:                                                 ELLIPSE_CB_ORDER_FIELD_BYTES,",
          "73:                                                 GLYPH_INDEX_ORDER_FIELD_BYTES };",
          "75: #define PRIMARY_DRAWING_ORDER_COUNT (ARRAYSIZE(PRIMARY_DRAWING_ORDER_FIELD_BYTES))",
          "",
          "[Added Lines]",
          "46: BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid)",
          "47: {",
          "48:  if (pValid)",
          "50:  switch (orderType)",
          "51:  {",
          "52:   case 0:",
          "53:    return DSTBLT_ORDER_FIELD_BYTES;",
          "54:   case 1:",
          "55:    return PATBLT_ORDER_FIELD_BYTES;",
          "56:   case 2:",
          "57:    return SCRBLT_ORDER_FIELD_BYTES;",
          "58:   case 3:",
          "59:    return 0;",
          "60:   case 4:",
          "61:    return 0;",
          "62:   case 5:",
          "63:    return 0;",
          "64:   case 6:",
          "65:    return 0;",
          "66:   case 7:",
          "67:    return DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
          "68:   case 8:",
          "69:    return MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
          "70:   case 9:",
          "71:    return LINE_TO_ORDER_FIELD_BYTES;",
          "72:   case 10:",
          "73:    return OPAQUE_RECT_ORDER_FIELD_BYTES;",
          "74:   case 11:",
          "75:    return SAVE_BITMAP_ORDER_FIELD_BYTES;",
          "76:   case 12:",
          "77:    return 0;",
          "78:   case 13:",
          "79:    return MEMBLT_ORDER_FIELD_BYTES;",
          "80:   case 14:",
          "81:    return MEM3BLT_ORDER_FIELD_BYTES;",
          "82:   case 15:",
          "83:    return MULTI_DSTBLT_ORDER_FIELD_BYTES;",
          "84:   case 16:",
          "85:    return MULTI_PATBLT_ORDER_FIELD_BYTES;",
          "86:   case 17:",
          "87:    return MULTI_SCRBLT_ORDER_FIELD_BYTES;",
          "88:   case 18:",
          "89:    return MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES;",
          "90:   case 19:",
          "91:    return FAST_INDEX_ORDER_FIELD_BYTES;",
          "92:   case 20:",
          "93:    return POLYGON_SC_ORDER_FIELD_BYTES;",
          "94:   case 21:",
          "95:    return POLYGON_CB_ORDER_FIELD_BYTES;",
          "96:   case 22:",
          "97:    return POLYLINE_ORDER_FIELD_BYTES;",
          "98:   case 23:",
          "99:    return 0;",
          "100:   case 24:",
          "101:    return FAST_GLYPH_ORDER_FIELD_BYTES;",
          "102:   case 25:",
          "103:    return ELLIPSE_SC_ORDER_FIELD_BYTES;",
          "104:   case 26:",
          "105:    return ELLIPSE_CB_ORDER_FIELD_BYTES;",
          "106:   case 27:",
          "107:    return GLYPH_INDEX_ORDER_FIELD_BYTES;",
          "108:   default:",
          "109:    if (pValid)",
          "111:    WLog_WARN(TAG, \"Invalid orderType 0x%08X received\", orderType);",
          "112:    return 0;",
          "113:  }",
          "114: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3241: static BOOL update_recv_primary_order(rdpUpdate* update, wStream* s, BYTE flags)",
          "3242: {",
          "3243:  BOOL rc = FALSE;",
          "3244:  rdpContext* context = update->context;",
          "3245:  rdpPrimaryUpdate* primary = update->primary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3282:  BYTE field;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3263:  if (!check_primary_order_supported(update->log, settings, orderInfo->orderType, orderName))",
          "3264:   return FALSE;",
          "3268:  {",
          "3269:   WLog_Print(update->log, WLOG_ERROR, \"update_read_field_flags() failed\");",
          "3270:   return FALSE;",
          "",
          "[Removed Lines]",
          "3266:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags,",
          "3267:                               PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]))",
          "",
          "[Added Lines]",
          "3306:  field = get_primary_drawing_order_field_bytes(orderInfo->orderType, &rc);",
          "3307:  if (!rc)",
          "3308:   return FALSE;",
          "3310:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags, field))",
          "",
          "---------------"
        ],
        "libfreerdp/core/orders.h||libfreerdp/core/orders.h": [
          "File: libfreerdp/core/orders.h -> libfreerdp/core/orders.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: #define CG_GLYPH_UNICODE_PRESENT 0x0010",
          "194: FREERDP_LOCAL BOOL update_recv_order(rdpUpdate* update, wStream* s);",
          "",
          "[Removed Lines]",
          "192: FREERDP_LOCAL extern const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[];",
          "",
          "[Added Lines]",
          "192: FREERDP_LOCAL BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid);",
          "",
          "---------------"
        ],
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1087:  orderInfo->controlFlags = ORDER_STANDARD;",
          "1088:  orderInfo->controlFlags |= ORDER_TYPE_CHANGE;",
          "1089:  length += 1;",
          "1091:  length += update_prepare_bounds(context, orderInfo);",
          "1092:  return length;",
          "1093: }",
          "",
          "[Removed Lines]",
          "1090:  length += PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType];",
          "",
          "[Added Lines]",
          "1090:  length += get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1107:  update_write_field_flags(s, orderInfo->fieldFlags, orderInfo->controlFlags,",
          "1109:  update_write_bounds(s, orderInfo);",
          "1110:  Stream_SetPosition(s, position);",
          "1111:  return 0;",
          "",
          "[Removed Lines]",
          "1108:                           PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]);",
          "",
          "[Added Lines]",
          "1108:                           get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL));",
          "",
          "---------------"
        ]
      }
    }
  ]
}