{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ecee213eac91beca141130cff2c7826242dab5a",
      "candidate_info": {
        "commit_hash": "0ecee213eac91beca141130cff2c7826242dab5a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0ecee213eac91beca141130cff2c7826242dab5a",
        "files": [
          "Makefile.am",
          "include/uv.h",
          "src/unix/core.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/core.c",
          "test/test-list.h",
          "test/test-socket-buffer-size.c",
          "uv.gyp"
        ],
        "message": "unix, windows: add uv_recv_buffer_size and uv_send_buffer_size",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/core.c||src/unix/core.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/core.c||src/win/core.c",
          "test/test-list.h||test/test-list.h",
          "test/test-socket-buffer-size.c||test/test-socket-buffer-size.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:                          test/test-shutdown-twice.c \\",
          "178:                          test/test-signal-multiple-loops.c \\",
          "179:                          test/test-signal.c \\",
          "180:                          test/test-spawn.c \\",
          "181:                          test/test-stdio-over-pipes.c \\",
          "182:                          test/test-tcp-bind-error.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:                          test/test-socket-buffer-size.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "603: UV_EXTERN void uv_close(uv_handle_t* handle, uv_close_cb close_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: UV_EXTERN int uv_recv_buffer_size(uv_handle_t* handle, int* value);",
          "627: UV_EXTERN int uv_send_buffer_size(uv_handle_t* handle, int* value);",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   uv__make_close_pending(handle);",
          "164: }",
          "167: void uv__make_close_pending(uv_handle_t* handle) {",
          "168:   assert(handle->flags & UV_CLOSING);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166: int uv__socket_sockopt(uv_handle_t* handle, int optname, int* value) {",
          "167:   int r;",
          "168:   int fd;",
          "169:   socklen_t len;",
          "171:   if (handle == NULL || value == NULL)",
          "172:     return -EINVAL;",
          "174:   if (handle->type == UV_TCP || handle->type == UV_NAMED_PIPE)",
          "175:     fd = uv__stream_fd((uv_stream_t*) handle);",
          "176:   else if (handle->type == UV_UDP)",
          "177:     fd = ((uv_udp_t *) handle)->io_watcher.fd;",
          "178:   else",
          "179:     return -ENOTSUP;",
          "181:   len = sizeof(*value);",
          "183:   if (*value == 0)",
          "184:     r = getsockopt(fd, SOL_SOCKET, optname, value, &len);",
          "185:   else",
          "186:     r = setsockopt(fd, SOL_SOCKET, optname, (const void*) value, len);",
          "188:   if (r < 0)",
          "189:     return -errno;",
          "191:   return 0;",
          "192: }",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:   return bytes;",
          "423: }",
          "426: int uv_fs_event_getpath(uv_fs_event_t* handle, char* buf, size_t* len) {",
          "427:   size_t required_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425: int uv_recv_buffer_size(uv_handle_t* handle, int* value) {",
          "426:   return uv__socket_sockopt(handle, SO_RCVBUF, value);",
          "427: }",
          "429: int uv_send_buffer_size(uv_handle_t* handle, int *value) {",
          "430:   return uv__socket_sockopt(handle, SO_SNDBUF, value);",
          "431: }",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: size_t uv__count_bufs(const uv_buf_t bufs[], unsigned int nbufs);",
          "110: #define uv__has_active_reqs(loop)                                             \\",
          "111:   (QUEUE_EMPTY(&(loop)->active_reqs) == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: int uv__socket_sockopt(uv_handle_t* handle, int optname, int* value);",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   return r;",
          "430: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432: int uv__socket_sockopt(uv_handle_t* handle, int optname, int* value) {",
          "433:   int r;",
          "434:   int len;",
          "435:   SOCKET socket;",
          "437:   if (handle == NULL || value == NULL)",
          "438:     return UV_EINVAL;",
          "440:   if (handle->type == UV_TCP)",
          "441:     socket = ((uv_tcp_t*) handle)->socket;",
          "442:   else if (handle->type == UV_UDP)",
          "443:     socket = ((uv_udp_t*) handle)->socket;",
          "444:   else",
          "445:     return UV_ENOTSUP;",
          "447:   len = sizeof(*value);",
          "449:   if (*value == 0)",
          "450:     r = getsockopt(socket, SOL_SOCKET, optname, (char*) value, &len);",
          "451:   else",
          "452:     r = setsockopt(socket, SOL_SOCKET, optname, (const char*) value, len);",
          "454:   if (r == SOCKET_ERROR)",
          "455:     return uv_translate_sys_error(WSAGetLastError());",
          "457:   return 0;",
          "458: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: TEST_DECLARE   (getsockname_udp)",
          "177: TEST_DECLARE   (fail_always)",
          "178: TEST_DECLARE   (pass_always)",
          "179: TEST_DECLARE   (spawn_fails)",
          "180: TEST_DECLARE   (spawn_exit_code)",
          "181: TEST_DECLARE   (spawn_stdout)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: TEST_DECLARE   (socket_buffer_size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:   TEST_ENTRY  (poll_unidirectional)",
          "507:   TEST_ENTRY  (poll_close)",
          "509:   TEST_ENTRY  (spawn_fails)",
          "510:   TEST_ENTRY  (spawn_exit_code)",
          "511:   TEST_ENTRY  (spawn_stdout)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   TEST_ENTRY  (socket_buffer_size)",
          "",
          "---------------"
        ],
        "test/test-socket-buffer-size.c||test/test-socket-buffer-size.c": [
          "File: test/test-socket-buffer-size.c -> test/test-socket-buffer-size.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: static uv_udp_t udp;",
          "30: static uv_tcp_t tcp;",
          "31: static int close_cb_called;",
          "34: static void close_cb(uv_handle_t* handle) {",
          "35:   close_cb_called++;",
          "36: }",
          "39: static void check_buffer_size(uv_handle_t* handle) {",
          "40:   int value;",
          "42:   value = 0;",
          "43:   ASSERT(0 == uv_recv_buffer_size(handle, &value));",
          "44:   ASSERT(value > 0);",
          "46:   value = 10000;",
          "47:   ASSERT(0 == uv_recv_buffer_size(handle, &value));",
          "49:   value = 0;",
          "50:   ASSERT(0 == uv_recv_buffer_size(handle, &value));",
          "52:   ASSERT(value == 10000 || value == 20000);",
          "53: }",
          "56: TEST_IMPL(socket_buffer_size) {",
          "57:   struct sockaddr_in addr;",
          "59:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "61:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &tcp));",
          "62:   ASSERT(0 == uv_tcp_bind(&tcp, (struct sockaddr*) &addr, 0));",
          "63:   check_buffer_size((uv_handle_t*) &tcp);",
          "64:   uv_close((uv_handle_t*) &tcp, close_cb);",
          "66:   ASSERT(0 == uv_udp_init(uv_default_loop(), &udp));",
          "67:   ASSERT(0 == uv_udp_bind(&udp, (struct sockaddr*) &addr, 0));",
          "68:   check_buffer_size((uv_handle_t*) &udp);",
          "69:   uv_close((uv_handle_t*) &udp, close_cb);",
          "71:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));",
          "73:   ASSERT(close_cb_called == 2);",
          "75:   MAKE_VALGRIND_HAPPY();",
          "76:   return 0;",
          "77: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:         'test/test-shutdown-twice.c',",
          "361:         'test/test-signal.c',",
          "362:         'test/test-signal-multiple-loops.c',",
          "363:         'test/test-spawn.c',",
          "364:         'test/test-fs-poll.c',",
          "365:         'test/test-stdio-over-pipes.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:         'test/test-socket-buffer-size.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12bad62addef4cc8b47a332b85bef38a23fcfb5f",
      "candidate_info": {
        "commit_hash": "12bad62addef4cc8b47a332b85bef38a23fcfb5f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/12bad62addef4cc8b47a332b85bef38a23fcfb5f",
        "files": [
          "src/unix/fsevents.c"
        ],
        "message": "darwin: fix ios compiler warning\n\nuv__fsevents_loop_delete() returns void. Remove the 'return 0'\nstatement.",
        "before_after_code_files": [
          "src/unix/fsevents.c||src/unix/fsevents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: void uv__fsevents_loop_delete(uv_loop_t* loop) {",
          "40: }",
          "",
          "[Removed Lines]",
          "39:   return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "347000929de775ae6b975a2959f5fabe81d6f1f0",
      "candidate_info": {
        "commit_hash": "347000929de775ae6b975a2959f5fabe81d6f1f0",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/347000929de775ae6b975a2959f5fabe81d6f1f0",
        "files": [
          "include/pthread-fixes.h",
          "src/unix/pthread-fixes.c"
        ],
        "message": "unix: workaround broken pthread_sigmask on Android\n\nOn android, if a call to `pthread_sigmask` fails with EINVAL, fallback\nto `sigprocmask`. This workarounds the broken behaviour of\n`pthread_sigmask` on Android versions < 4.1. See:\n\n* https://android.googlesource.com/platform/bionic/+/9bf330b5\n* https://code.google.com/p/android/issues/detail?id=15337\n\nThis is implemented by replacing all calls of `pthread_sigmask` to a new\nfunction `uv__pthread_sigmask` which implements this fallback mechanism.",
        "before_after_code_files": [
          "include/pthread-fixes.h||include/pthread-fixes.h",
          "src/unix/pthread-fixes.c||src/unix/pthread-fixes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/pthread-fixes.h||include/pthread-fixes.h": [
          "File: include/pthread-fixes.h -> include/pthread-fixes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: int pthread_yield(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: int uv__pthread_sigmask(int how, const sigset_t* set, sigset_t* oset);",
          "67: #ifdef pthread_sigmask",
          "68: #undef pthread_sigmask",
          "69: #endif",
          "70: #define pthread_sigmask(how, set, oldset) uv__pthread_sigmask(how, set, oldset)",
          "",
          "---------------"
        ],
        "src/unix/pthread-fixes.c||src/unix/pthread-fixes.c": [
          "File: src/unix/pthread-fixes.c -> src/unix/pthread-fixes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "34: #ifndef PTHREAD_BARRIER_SERIAL_THREAD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <errno.h>",
          "37: #include <pthread.h>",
          "39: int uv__pthread_sigmask(int how, const sigset_t* set, sigset_t* oset) {",
          "40:   static int workaround;",
          "42:   if (workaround) {",
          "43:     return sigprocmask(how, set, oset);",
          "44:   } else if (pthread_sigmask(how, set, oset)) {",
          "45:     if (errno == EINVAL && sigprocmask(how, set, oset) == 0) {",
          "46:       workaround = 1;",
          "47:       return 0;",
          "48:     } else {",
          "49:       return -1;",
          "50:     }",
          "51:   } else {",
          "52:     return 0;",
          "53:   }",
          "54: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cad361f8776f70941b39d65bd9426bcb1aa817b",
      "candidate_info": {
        "commit_hash": "3cad361f8776f70941b39d65bd9426bcb1aa817b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3cad361f8776f70941b39d65bd9426bcb1aa817b",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.08.07, Version 0.11.7 (Unstable)\n\nChanges since version 0.11.6:\n\n* unix, windows: fix uv_fs_chown() function prototype (Ben Noordhuis)\n\n* unix, windows: remove unused variables (Brian White)\n\n* test: fix signed/unsigned comparison warnings (Ben Noordhuis)\n\n* build: dtrace shouldn't break out of tree builds (Timothy J. Fontaine)\n\n* unix, windows: don't read/recv if buf.len==0 (Ben Noordhuis)\n\n* build: add mingw makefile (Ben Noordhuis)\n\n* unix, windows: add MAC to uv_interface_addresses() (Brian White)\n\n* build: enable AM_INIT_AUTOMAKE([subdir-objects]) (Ben Noordhuis)\n\n* unix, windows: make buf arg to uv_fs_write const (Ben Noordhuis)\n\n* sunos: fix build breakage introduced in e3a657c (Ben Noordhuis)\n\n* aix: fix build breakage introduced in 3ee4d3f (Ben Noordhuis)\n\n* windows: fix mingw32 build, define JOB_OBJECT_XXX (Yasuhiro Matsumoto)\n\n* windows: fix mingw32 build, include limits.h (Yasuhiro Matsumoto)\n\n* test: replace sprintf() with snprintf() (Ben Noordhuis)\n\n* test: replace strcpy() with strncpy() (Ben Noordhuis)\n\n* openbsd: fix uv_ip6_addr() unused variable warnings (Ben Noordhuis)\n\n* openbsd: fix dlerror() const correctness warning (Ben Noordhuis)\n\n* openbsd: fix uv_fs_sendfile() unused variable warnings (Ben Noordhuis)\n\n* build: disable parallel automake tests (Ben Noordhuis)\n\n* test: add windows-only snprintf() function (Ben Noordhuis)\n\n* build: add automake serial-tests version check (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 7",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba876d53539ed0427c52039012419cd9374c6f0d",
      "candidate_info": {
        "commit_hash": "ba876d53539ed0427c52039012419cd9374c6f0d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ba876d53539ed0427c52039012419cd9374c6f0d",
        "files": [
          ".mailmap",
          "AUTHORS",
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.08.30, Version 0.11.11 (Unstable)\n\nChanges since version 0.11.10:\n\n* unix, windows: add thread-local storage API (Ben Noordhuis)\n\n* linux: don't turn on SO_REUSEPORT socket option (Ben Noordhuis)\n\n* darwin: fix 10.6 build error in fsevents.c (Ben Noordhuis)\n\n* windows: make uv_shutdown() for write-only pipes work (Bert Belder)\n\n* include: update uv_udp_open() / uv_udp_bind() docs (Ben Noordhuis)\n\n* unix: req queue must be empty when destroying loop (Ben Noordhuis)\n\n* unix: move loop functions from core.c to loop.c (Ben Noordhuis)\n\n* darwin: remove CoreFoundation dependency (Ben Noordhuis)\n\n* windows: make autotools build system work with mingw (Keno Fischer)\n\n* windows: fix mingw build (Alex Crichton)\n\n* windows: tweak Makefile.mingw for easier usage (Alex Crichton)\n\n* build: remove _GNU_SOURCE macro definition (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}