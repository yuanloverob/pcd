{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81a4edcf6afc1180b80a516db894db400ce04b1a",
      "candidate_info": {
        "commit_hash": "81a4edcf6afc1180b80a516db894db400ce04b1a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/81a4edcf6afc1180b80a516db894db400ce04b1a",
        "files": [
          "lib/cluster.js",
          "lib/net.js",
          "src/node.js",
          "test/simple/test-cluster-basic.js"
        ],
        "message": "cluster: remove NODE_UNIQUE_ID from env on startup\n\nIn case a worker would spawn a new subprocess with process.env, NODE_UNIQUE_ID\nwould have been a part of the env. Making the new subprocess believe it is a\nworker, this would result in some confusion if the subprocess where to listen to\na port, since the server handle request would then be relayed to the worker.\n\nThis patch removes the NODE_UNIQUE_ID flag from process.env on startup so any\nsubprocess spawned by a worker is a normal process with no cluster stuff.",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js",
          "lib/net.js||linet.js",
          "src/node.js||src/node.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: if (process.env.NODE_DEBUG && /cluster/.test(process.env.NODE_DEBUG)) {",
          "34:   debug = function(x) {",
          "35:     var prefix = process.pid + ',' +",
          "37:     console.error(prefix, x);",
          "38:   };",
          "39: } else {",
          "",
          "[Removed Lines]",
          "36:         (process.env.NODE_WORKER_ID ? 'Worker' : 'Master');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var timers = require('timers');",
          "25: var util = require('util');",
          "26: var assert = require('assert');",
          "28: function noop() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "909: function listen(self, address, port, addressType, backlog) {",
          "912:     cluster._getServer(self, address, port, addressType, function(handle) {",
          "913:       self._handle = handle;",
          "914:       self._listen2(address, port, addressType, backlog);",
          "",
          "[Removed Lines]",
          "910:   if (process.env.NODE_UNIQUE_ID) {",
          "911:     var cluster = require('cluster');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:       if (process.env.NODE_UNIQUE_ID) {",
          "79:         var cluster = NativeModule.require('cluster');",
          "80:         cluster._setupWorker();",
          "81:       }",
          "83:       var Module = NativeModule.require('module');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         delete process.env.NODE_UNIQUE_ID;",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var assert = require('assert');",
          "25: var cluster = require('cluster');",
          "27: function forEach(obj, fn) {",
          "28:   Object.keys(obj).forEach(function(name, index) {",
          "29:     fn(obj[name], name, index);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: assert.equal('NODE_UNIQUE_ID' in process.env, false,",
          "28:       'NODE_UNIQUE_ID should be removed on startup');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: else if (cluster.isMaster) {",
          "46:   var checks = {",
          "47:     cluster: {",
          "48:       events: {",
          "",
          "[Removed Lines]",
          "43:   assert.equal('NODE_UNIQUE_ID' in process.env, false,",
          "44:       'cluster.isMaster should not be true when NODE_UNIQUE_ID is set');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea1cba6246a8b1784e22d076139b9244a9ff42f8",
      "candidate_info": {
        "commit_hash": "ea1cba6246a8b1784e22d076139b9244a9ff42f8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ea1cba6246a8b1784e22d076139b9244a9ff42f8",
        "files": [
          "src/node.js"
        ],
        "message": "windows: don't blow when a signal handler is attached\n\nBlowing up when the user attaches a signal handler makes no sense. Also,\nin Node 0.10 signals will be supported, so allow people to get used to\nit.",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:   };",
          "464:   startup.processSignalHandlers = function() {",
          "467:     var signalWatchers = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     if (process.platform === 'win32')",
          "467:       return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0742f5629cea120e8569f8985983d295a5868ff9",
      "candidate_info": {
        "commit_hash": "0742f5629cea120e8569f8985983d295a5868ff9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0742f5629cea120e8569f8985983d295a5868ff9",
        "files": [
          "lib/punycode.js"
        ],
        "message": "Revert \"punycode: Update to v1.0.0\"\n\nThis reverts commit 483edbdf1aef40c208f6c96efbbcc3c34122e5f2.\nFixes #3359.",
        "before_after_code_files": [
          "lib/punycode.js||lipunycode.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/punycode.js||lipunycode.js": [
          "File: lib/punycode.js -> lipunycode.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  delimiter = '-', // '\\x2D'",
          "33:  regexPunycode = /^xn--/,",
          "",
          "[Removed Lines]",
          "32:  regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:     }",
          "283:     i += digit * w;",
          "286:     if (digit < t) {",
          "287:      break;",
          "",
          "[Removed Lines]",
          "284:     t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:     if (currentValue == n) {",
          "406:      for (q = delta, k = base; /* no condition */; k += base) {",
          "408:       if (q < t) {",
          "409:        break;",
          "410:       }",
          "",
          "[Removed Lines]",
          "407:       t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "476:   'version': '1.0.0',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "680d75af34f9c6a0b478977e9b3dbc4d25f26402",
      "candidate_info": {
        "commit_hash": "680d75af34f9c6a0b478977e9b3dbc4d25f26402",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/680d75af34f9c6a0b478977e9b3dbc4d25f26402",
        "files": [
          "common.gypi",
          "configure",
          "tools/gyp_addon"
        ],
        "message": "build: make default_configuration consistent with BUILDTYPE",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   },",
          "12:   'target_defaults': {",
          "14:     'configurations': {",
          "15:       'Debug': {",
          "16:         'defines': [ 'DEBUG', '_DEBUG' ],",
          "",
          "[Removed Lines]",
          "13:     'default_configuration': 'Debug',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c75f71dd721d04e03204ffcc290bb3a370275cce",
      "candidate_info": {
        "commit_hash": "c75f71dd721d04e03204ffcc290bb3a370275cce",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c75f71dd721d04e03204ffcc290bb3a370275cce",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-write-stream-change-open.js"
        ],
        "message": "fs.WriteStream: Handle modifications to fs.open\n\nIf the fs.open method is modified via AOP-style extension, in between\nthe creation of an fs.WriteStream and the processing of its action\nqueue, then the test of whether or not the method === fs.open will fail,\nbecause fs.open has been replaced.\n\nThe solution is to save a reference to fs.open on the stream itself when\nthe action is placed in the queue.\n\nThis fixes isaacs/node-graceful-fs#6.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-write-stream-change-open.js||test/simple/test-fs-write-stream-change-open.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1253:   this._queue = [];",
          "1255:   if (this.fd === null) {",
          "1257:     this.flush();",
          "1258:   }",
          "1259: };",
          "",
          "[Removed Lines]",
          "1256:     this._queue.push([fs.open, this.path, this.flags, this.mode, undefined]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1295:         cb(null, arguments[1]);",
          "1296:       }",
          "1300:       self.fd = arguments[1];",
          "1301:       self.emit('open', self.fd);",
          "",
          "[Removed Lines]",
          "1298:     } else if (method === fs.open) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1313:   });",
          "1317:     args.unshift(this.fd);",
          "1318:   }",
          "",
          "[Removed Lines]",
          "1316:   if (method !== fs.open) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-write-stream-change-open.js||test/simple/test-fs-write-stream-change-open.js": [
          "File: test/simple/test-fs-write-stream-change-open.js -> test/simple/test-fs-write-stream-change-open.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var path = require('path'),",
          "26:     fs = require('fs');",
          "28: var file = path.join(common.tmpDir, 'write.txt');",
          "30: var stream = fs.WriteStream(file),",
          "31:     _fs_close = fs.close,",
          "32:     _fs_open = fs.open;",
          "37: fs.open = function() {",
          "38:   return _fs_open.apply(fs, arguments);",
          "39: };",
          "41: fs.close = function(fd) {",
          "42:   assert.ok(fd, 'fs.close must not be called with an undefined fd.');",
          "43:   fs.close = _fs_close;",
          "44:   fs.open = _fs_open;",
          "45: }",
          "47: stream.write('foo');",
          "48: stream.end();",
          "50: process.on('exit', function() {",
          "51:   assert.equal(fs.open, _fs_open);",
          "52: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}