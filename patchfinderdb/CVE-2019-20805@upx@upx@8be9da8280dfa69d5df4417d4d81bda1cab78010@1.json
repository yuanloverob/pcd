{
  "cve_id": "CVE-2019-20805",
  "cve_desc": "p_lx_elf.cpp in UPX before 3.96 has an integer overflow during unpacking via crafted values in a PT_DYNAMIC segment.",
  "repo": "upx/upx",
  "patch_hash": "8be9da8280dfa69d5df4417d4d81bda1cab78010",
  "patch_info": {
    "commit_hash": "8be9da8280dfa69d5df4417d4d81bda1cab78010",
    "repo": "upx/upx",
    "commit_url": "https://github.com/upx/upx/commit/8be9da8280dfa69d5df4417d4d81bda1cab78010",
    "files": [
      "src/p_lx_elf.cpp"
    ],
    "message": "Avoid bogus values in PT_DYNAMIC segment.\n\nDetect duplicate DT_*.\nDetect out-of-bounds hashtab and gashtab.\nDetect missing DT_REL, DT_RELA.\nDetect out-of-bounds d_val.\nhttps://github.com/upx/upx/issues/317\n\tmodified:   p_lx_elf.cpp",
    "before_after_code_files": [
      "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
    ]
  },
  "patch_diff": {
    "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
      "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1574:     for (; ; ++ndx, ++dynp) {",
      "1575:         unsigned const d_tag = get_te32(&dynp->d_tag);",
      "1576:         if (d_tag < DT_NUM) {",
      "1577:             dt_table[d_tag] = ndx;",
      "1578:         }",
      "1579:         if (Elf32_Dyn::DT_NULL == d_tag) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1577:             if (dt_table[d_tag]",
      "1578:             &&    get_te32(&dynp->d_val)",
      "1579:                != get_te32(&dynp0[-1+ dt_table[d_tag]].d_val)) {",
      "1580:                 char msg[50]; snprintf(msg, sizeof(msg),",
      "1581:                     \"duplicate DT_%#x: [%#x] [%#x]\",",
      "1582:                     d_tag, -1+ dt_table[d_tag], -1+ ndx);",
      "1583:                 throwCantPack(msg);",
      "1584:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1607:         }",
      "1608:     }",
      "1611:     if (v_hsh && file_image) {",
      "1613:         unsigned const nbucket = get_te32(&hashtab[0]);",
      "1614:         unsigned const *const buckets = &hashtab[2];",
      "1615:         unsigned const *const chains = &buckets[nbucket]; (void)chains;",
      "",
      "[Removed Lines]",
      "1610:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
      "1612:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
      "",
      "[Added Lines]",
      "1618:     unsigned const v_hsh = elf_unsigned_dynamic(Elf32_Dyn::DT_HASH);",
      "1620:         hashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_HASH);",
      "1621:         if (!hashtab) {",
      "1622:             char msg[40]; snprintf(msg, sizeof(msg),",
      "1623:                \"bad DT_HASH %#x\", v_hsh);",
      "1624:             throwCantPack(msg);",
      "1625:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1632:     unsigned const v_gsh = elf_unsigned_dynamic(Elf32_Dyn::DT_GNU_HASH);",
      "1633:     if (v_gsh && file_image) {",
      "1634:         gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);",
      "1635:         unsigned const n_bucket = get_te32(&gashtab[0]);",
      "1636:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
      "1637:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1648:         if (!gashtab) {",
      "1649:             char msg[40]; snprintf(msg, sizeof(msg),",
      "1650:                \"bad DT_GNU_HASH %#x\", v_gsh);",
      "1651:             throwCantPack(msg);",
      "1652:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1796: bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)",
      "1797: {",
      "1799:         return false;",
      "1800:     }",
      "1801:     for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela, ++relnum) {",
      "",
      "[Removed Lines]",
      "1798:     if (!dynsym || !dynstr) {",
      "",
      "[Added Lines]",
      "1816:     if (!dynsym || !dynstr || !rela) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1833: bool PackLinuxElf32::calls_crt1(Elf32_Rel const *rel, int sz)",
      "1834: {",
      "1836:         return false;",
      "1837:     }",
      "1838:     for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf32_Rel)), ++rel, ++relnum) {",
      "",
      "[Removed Lines]",
      "1835:     if (!dynsym || !dynstr) {",
      "",
      "[Added Lines]",
      "1853:     if (!dynsym || !dynstr || !rel) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4901:     for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg",
      "4902:             && Elf32_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te32(&dynp->d_tag)==key) {",
      "4903:         unsigned const t= elf_get_offset_from_address(get_te32(&dynp->d_val));",
      "4905:             return t + file_image;",
      "4906:         }",
      "4907:         break;",
      "",
      "[Removed Lines]",
      "4904:         if (t) {",
      "",
      "[Added Lines]",
      "4922:         if (t && t < file_size) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5011:             throwCantPack(msg);",
      "5012:         }",
      "5013:         if (d_tag < DT_NUM) {",
      "5014:             dt_table[d_tag] = ndx;",
      "5015:         }",
      "5016:         if (Elf64_Dyn::DT_NULL == d_tag) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5032:             if (dt_table[d_tag]",
      "5033:             &&    get_te64(&dynp->d_val)",
      "5034:                != get_te64(&dynp0[-1+ dt_table[d_tag]].d_val)) {",
      "5035:                 char msg[50]; snprintf(msg, sizeof(msg),",
      "5036:                     \"duplicate DT_%#x: [%#x] [%#x]\",",
      "5037:                     (unsigned)d_tag, -1+ dt_table[d_tag], -1+ ndx);",
      "5038:                 throwCantPack(msg);",
      "5039:             }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5049:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
      "5050:     if (v_hsh && file_image) {",
      "5051:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
      "5052:         unsigned const nbucket = get_te32(&hashtab[0]);",
      "5053:         unsigned const *const buckets = &hashtab[2];",
      "5054:         unsigned const *const chains = &buckets[nbucket]; (void)chains;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5078:         if (!hashtab) {",
      "5079:             char msg[40]; snprintf(msg, sizeof(msg),",
      "5080:                \"bad DT_HASH %#x\", v_hsh);",
      "5081:             throwCantPack(msg);",
      "5082:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5071:     unsigned const v_gsh = elf_unsigned_dynamic(Elf64_Dyn::DT_GNU_HASH);",
      "5072:     if (v_gsh && file_image) {",
      "5073:         gashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_GNU_HASH);",
      "5074:         unsigned const n_bucket = get_te32(&gashtab[0]);",
      "5075:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
      "5076:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5105:         if (!gashtab) {",
      "5106:             char msg[40]; snprintf(msg, sizeof(msg),",
      "5107:                \"bad DT_GNU_HASH %#x\", v_gsh);",
      "5108:             throwCantPack(msg);",
      "5109:         }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5116:     for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg",
      "5117:             && Elf64_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te64(&dynp->d_tag)==key) {",
      "5118:         upx_uint64_t const t= elf_get_offset_from_address(get_te64(&dynp->d_val));",
      "5121:         }",
      "5122:         break;",
      "5123:     }",
      "",
      "[Removed Lines]",
      "5119:         if (t) {",
      "5120:             return &((unsigned char const *)file_image)[(size_t)t];",
      "",
      "[Added Lines]",
      "5155:         if (t && t < (upx_uint64_t)file_size) {",
      "5156:             return t + file_image;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d295c24f019caae9f0cd8de4b67c237f2a39f56",
      "candidate_info": {
        "commit_hash": "5d295c24f019caae9f0cd8de4b67c237f2a39f56",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/5d295c24f019caae9f0cd8de4b67c237f2a39f56",
        "files": [
          "src/p_lx_elf.cpp"
        ],
        "message": "DT_NEEDED can be duplicated\n\n\tmodified:   p_lx_elf.cpp",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1574:     for (; ; ++ndx, ++dynp) {",
          "1575:         unsigned const d_tag = get_te32(&dynp->d_tag);",
          "1576:         if (d_tag < DT_NUM) {",
          "1578:             &&    get_te32(&dynp->d_val)",
          "1579:                != get_te32(&dynp0[-1+ dt_table[d_tag]].d_val)) {",
          "1580:                 char msg[50]; snprintf(msg, sizeof(msg),",
          "",
          "[Removed Lines]",
          "1577:             if (dt_table[d_tag]",
          "",
          "[Added Lines]",
          "1577:             if (Elf32_Dyn::DT_NEEDED != d_tag",
          "1578:             &&  dt_table[d_tag]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5029:             throwCantPack(msg);",
          "5030:         }",
          "5031:         if (d_tag < DT_NUM) {",
          "5033:             &&    get_te64(&dynp->d_val)",
          "5034:                != get_te64(&dynp0[-1+ dt_table[d_tag]].d_val)) {",
          "5035:                 char msg[50]; snprintf(msg, sizeof(msg),",
          "",
          "[Removed Lines]",
          "5032:             if (dt_table[d_tag]",
          "",
          "[Added Lines]",
          "5033:             if (Elf64_Dyn::DT_NEEDED != d_tag",
          "5034:             &&  dt_table[d_tag]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92f072cf70808beb62d600d65876514657e88295",
      "candidate_info": {
        "commit_hash": "92f072cf70808beb62d600d65876514657e88295",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/92f072cf70808beb62d600d65876514657e88295",
        "files": [
          "src/p_lx_elf.cpp",
          "src/p_lx_elf.h",
          "src/p_mach.cpp"
        ],
        "message": "Silence some compiler warnings.",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp",
          "src/p_lx_elf.h||src/p_lx_elf.h",
          "src/p_mach.cpp||src/p_mach.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"p_lx_elf.h\"",
          "43: #include \"ui.h\"",
          "45: #define PT_LOAD32   Elf32_Phdr::PT_LOAD",
          "46: #define PT_LOAD64   Elf64_Phdr::PT_LOAD",
          "47: #define PT_NOTE32   Elf32_Phdr::PT_NOTE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: typedef upx_uint32_t u32_t;  // easier to type; more narrow",
          "46: typedef upx_uint64_t u64_t;  // easier to type; more narrow",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4952:     for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg",
          "4953:             && Elf32_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te32(&dynp->d_tag)==key) {",
          "4954:         unsigned const t= elf_get_offset_from_address(get_te32(&dynp->d_val));",
          "4956:             return t + file_image;",
          "4957:         }",
          "4958:         break;",
          "",
          "[Removed Lines]",
          "4955:         if (t && t < file_size) {",
          "",
          "[Added Lines]",
          "4958:         if (t && t < (unsigned)file_size) {",
          "",
          "---------------"
        ],
        "src/p_lx_elf.h||src/p_lx_elf.h": [
          "File: src/p_lx_elf.h -> src/p_lx_elf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #ifndef __UPX_P_LX_ELF_H  //{",
          "34: #define __UPX_P_LX_ELF_H 1",
          "39: class PackLinuxElf : public PackUnix",
          "40: {",
          "41:     typedef PackUnix super;",
          "",
          "[Removed Lines]",
          "36: typedef upx_uint32_t u32_t;  // easier to type; more narrow",
          "37: typedef upx_uint64_t u64_t;  // easier to type; more narrow",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/p_mach.cpp||src/p_mach.cpp": [
          "File: src/p_mach.cpp -> src/p_mach.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1542:             ptr = (Mach_command const *)(ptr->cmdsize + (char const *)ptr), ++j) {",
          "1543:         if ((unsigned)headway < ptr->cmdsize) {",
          "1544:                 infoWarning(\"bad Mach_command[%u]{@0x%lx,+0x%x}: file_size=0x%lx  cmdsize=0x%lx\",",
          "1547:                 throwCantUnpack(\"file corrupted\");",
          "1548:         }",
          "1549:         if (lc_seg == ptr->cmd) {",
          "",
          "[Removed Lines]",
          "1545:                     j, sizeof(mhdri) + ((char const *)ptr - (char const *)rawmseg), headway,",
          "1546:                     file_size, (unsigned long)ptr->cmdsize);",
          "",
          "[Added Lines]",
          "1545:                     j, (unsigned long) (sizeof(mhdri) + ((char const *)ptr - (char const *)rawmseg)), headway,",
          "1546:                     (unsigned long) file_size, (unsigned long)ptr->cmdsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1553:             ||  (unsigned long)file_size < (segptr->filesize + segptr->fileoff)) {",
          "1554:                 infoWarning(\"bad Mach_segment_command[%u]{@0x%lx,+0x%x}: file_size=0x%lx  cmdsize=0x%lx\"",
          "1555:                       \"  filesize=0x%lx  fileoff=0x%lx\",",
          "1558:                     (unsigned long)segptr->filesize, (unsigned long)segptr->fileoff);",
          "1559:                 throwCantUnpack(\"file corrupted\");",
          "1560:             }",
          "",
          "[Removed Lines]",
          "1556:                     j, sizeof(mhdri) + ((char const *)ptr - (char const *)rawmseg), headway,",
          "1557:                     file_size, (unsigned long)ptr->cmdsize,",
          "",
          "[Added Lines]",
          "1556:                     j, (unsigned long) (sizeof(mhdri) + ((char const *)ptr - (char const *)rawmseg)), headway,",
          "1557:                     (unsigned long) file_size, (unsigned long)ptr->cmdsize,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8f6be538990f61124887633f4232a478b21f09a",
      "candidate_info": {
        "commit_hash": "b8f6be538990f61124887633f4232a478b21f09a",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/b8f6be538990f61124887633f4232a478b21f09a",
        "files": [
          "src/p_lx_elf.cpp"
        ],
        "message": "More checking of DT_HASH and DT_GNU_HASH\n\nhttps://github.com/upx/upx/issues/235  POC12\n\tmodified:   p_lx_elf.cpp",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1607:         unsigned const *const chains = &buckets[nbucket];",
          "1609:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1615:             char msg[90]; snprintf(msg, sizeof(msg),",
          "1616:                 \"bad DT_HASH nbucket=%#x  len=%#x\",",
          "1617:                 nbucket, (v_sym - v_hsh));",
          "",
          "[Removed Lines]",
          "1610:         if (v_hsh < v_sym",
          "1611:         && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "1612:            + sizeof(*buckets)*nbucket  // buckets",
          "1613:            + sizeof(*chains) *nbucket  // chains",
          "1614:            )) {",
          "",
          "[Added Lines]",
          "1610:         if (!nbucket",
          "1611:         || ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "1612:                 + sizeof(*buckets)*nbucket  // buckets",
          "1613:                 + sizeof(*chains) *nbucket  // chains",
          "1614:            ))",
          "1615:         ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1632:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1639:             char msg[90]; snprintf(msg, sizeof(msg),",
          "1640:                 \"bad DT_GNU_HASH n_bucket=%#x  n_bitmask=%#x  len=%#x\",",
          "1641:                 n_bucket, n_bitmask, v_sym - v_gsh);",
          "",
          "[Removed Lines]",
          "1633:         if (v_gsh < v_sym",
          "1634:         && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "1635:            + sizeof(*bitmask)*n_bitmask  // bitmask",
          "1636:            + sizeof(*buckets)*n_bucket  // buckets",
          "1637:            + sizeof(*hasharr)*n_bucket  // hasharr",
          "1638:            )) {",
          "",
          "[Added Lines]",
          "1634:         if (!n_bucket || !n_bitmask",
          "1635:         || ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "1636:                 + sizeof(*bitmask)*n_bitmask  // bitmask",
          "1637:                 + sizeof(*buckets)*n_bucket  // buckets",
          "1638:                 + sizeof(*hasharr)*n_bucket  // hasharr",
          "1639:             ))",
          "1640:         ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4782:         unsigned const *const chains = &buckets[nbucket];",
          "4784:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "4790:             char msg[90]; snprintf(msg, sizeof(msg),",
          "4791:                 \"bad DT_HASH nbucket=%#x  len=%#x\",",
          "4792:                 nbucket, (v_sym - v_hsh));",
          "",
          "[Removed Lines]",
          "4785:         if (v_hsh < v_sym",
          "4786:         && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "4787:            + sizeof(*buckets)*nbucket  // buckets",
          "4788:            + sizeof(*chains) *nbucket  // chains",
          "4789:            )) {",
          "",
          "[Added Lines]",
          "4787:         if (!nbucket",
          "4788:         || ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "4789:                 + sizeof(*buckets)*nbucket  // buckets",
          "4790:                 + sizeof(*chains) *nbucket  // chains",
          "4791:            ))",
          "4792:         ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4807:         upx_uint64_t const v_sym = get_te64(&dynp0[-1+ x_sym].d_val);",
          "4814:             char msg[90]; snprintf(msg, sizeof(msg),",
          "4815:                 \"bad DT_GNU_HASH n_bucket=%#x  n_bitmask=%#x  len=%#lx\",",
          "4816:                 n_bucket, n_bitmask, (long unsigned)(v_sym - v_gsh));",
          "",
          "[Removed Lines]",
          "4808:         if (v_gsh < v_sym",
          "4809:         && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "4810:            + sizeof(*bitmask)*n_bitmask  // bitmask",
          "4811:            + sizeof(*buckets)*n_bucket  // buckets",
          "4812:            + sizeof(*hasharr)*n_bucket  // hasharr",
          "4813:            )) {",
          "",
          "[Added Lines]",
          "4811:         if (!n_bucket || !n_bitmask",
          "4812:         || ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "4813:                 + sizeof(*bitmask)*n_bitmask  // bitmask",
          "4814:                 + sizeof(*buckets)*n_bucket  // buckets",
          "4815:                 + sizeof(*hasharr)*n_bucket  // hasharr",
          "4816:             ))",
          "4817:         ) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}