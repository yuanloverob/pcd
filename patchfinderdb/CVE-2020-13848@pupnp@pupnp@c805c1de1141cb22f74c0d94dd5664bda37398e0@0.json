{
  "cve_id": "CVE-2020-13848",
  "cve_desc": "Portable UPnP SDK (aka libupnp) 1.12.1 and earlier allows remote attackers to cause a denial of service (crash) via a crafted SSDP message due to a NULL pointer dereference in the functions FindServiceControlURLPath and FindServiceEventURLPath in genlib/service_table/service_table.c.",
  "repo": "pupnp/pupnp",
  "patch_hash": "c805c1de1141cb22f74c0d94dd5664bda37398e0",
  "patch_info": {
    "commit_hash": "c805c1de1141cb22f74c0d94dd5664bda37398e0",
    "repo": "pupnp/pupnp",
    "commit_url": "https://github.com/pupnp/pupnp/commit/c805c1de1141cb22f74c0d94dd5664bda37398e0",
    "files": [
      "ChangeLog",
      "upnp/src/genlib/service_table/service_table.c"
    ],
    "message": "Fixes #177: NULL pointer dereference in FindServiceControlURLPath\n\nAlso fixes its dual bug in FindServiceEventURLPath.",
    "before_after_code_files": [
      "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c"
    ]
  },
  "patch_diff": {
    "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c": [
      "File: upnp/src/genlib/service_table/service_table.c -> upnp/src/genlib/service_table/service_table.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "282:  uri_type parsed_url;",
      "283:  uri_type parsed_url_in;",
      "288:   finger = table->serviceList;",
      "289:   while (finger) {",
      "290:    if (finger->eventURL) {",
      "",
      "[Removed Lines]",
      "285:  if (table &&",
      "286:   parse_uri(eventURLPath, strlen(eventURLPath), &parsed_url_in) ==",
      "287:    HTTP_SUCCESS) {",
      "",
      "[Added Lines]",
      "285:  if (!table || !eventURLPath) {",
      "286:   return NULL;",
      "287:  }",
      "288:  if (parse_uri(eventURLPath, strlen(eventURLPath), &parsed_url_in) ==",
      "289:   HTTP_SUCCESS) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "327:  uri_type parsed_url;",
      "328:  uri_type parsed_url_in;",
      "333:   finger = table->serviceList;",
      "334:   while (finger) {",
      "335:    if (finger->controlURL) {",
      "",
      "[Removed Lines]",
      "330:  if (table && parse_uri(controlURLPath,",
      "331:         strlen(controlURLPath),",
      "332:         &parsed_url_in) == HTTP_SUCCESS) {",
      "",
      "[Added Lines]",
      "332:  if (!table || !controlURLPath) {",
      "333:   return NULL;",
      "334:  }",
      "335:  if (parse_uri(controlURLPath, strlen(controlURLPath), &parsed_url_in) ==",
      "336:   HTTP_SUCCESS) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ec36908644d48069966f327f6beba6d96f2e9e0",
      "candidate_info": {
        "commit_hash": "5ec36908644d48069966f327f6beba6d96f2e9e0",
        "repo": "pupnp/pupnp",
        "commit_url": "https://github.com/pupnp/pupnp/commit/5ec36908644d48069966f327f6beba6d96f2e9e0",
        "files": [
          "upnp/src/genlib/service_table/service_table.c"
        ],
        "message": "White spaces",
        "before_after_code_files": [
          "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c"
          ],
          "candidate": [
            "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c"
          ]
        }
      },
      "candidate_diff": {
        "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c": [
          "File: upnp/src/genlib/service_table/service_table.c -> upnp/src/genlib/service_table/service_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"service_table.h\"",
          "44: #ifdef INCLUDE_DEVICE_APIS",
          "64: {",
          "79: }",
          "100: {",
          "120: }",
          "123: subscription *GetSubscriptionSID(const Upnp_SID sid, service_info *service)",
          "124: {",
          "156: }",
          "159: subscription *GetNextSubscription(service_info *service, subscription *current)",
          "160: {",
          "189: }",
          "192: subscription *GetFirstSubscription(service_info *service)",
          "193: {",
          "194:  subscription temp;",
          "",
          "[Removed Lines]",
          "41: #include \"config.h\"",
          "46: #if EXCLUDE_GENA == 0",
          "61: int",
          "62: copy_subscription( subscription * in,",
          "63:                    subscription * out )",
          "65:     int return_code = HTTP_SUCCESS;",
          "67:     memcpy( out->sid, in->sid, SID_SIZE );",
          "68:     out->sid[SID_SIZE] = 0;",
          "69:     out->ToSendEventKey = in->ToSendEventKey;",
          "70:     out->expireTime = in->expireTime;",
          "71:     out->active = in->active;",
          "72:     if( ( return_code =",
          "73:           copy_URL_list( &in->DeliveryURLs, &out->DeliveryURLs ) )",
          "74:         != HTTP_SUCCESS )",
          "75:         return return_code;",
          "76:     ListInit(&out->outgoing, 0, 0);",
          "77:     out->next = NULL;",
          "78:     return HTTP_SUCCESS;",
          "97: void",
          "98: RemoveSubscriptionSID( Upnp_SID sid,",
          "99:                        service_info * service )",
          "101:     subscription *finger = service->subscriptionList;",
          "102:     subscription *previous = NULL;",
          "104:     while( finger ) {",
          "105:         if( !( strcmp( sid, finger->sid ) ) ) {",
          "106:             if( previous )",
          "107:                 previous->next = finger->next;",
          "108:             else",
          "109:                 service->subscriptionList = finger->next;",
          "110:             finger->next = NULL;",
          "111:             freeSubscriptionList( finger );",
          "112:             finger = NULL;",
          "113:             service->TotalSubscriptions--;",
          "114:         } else {",
          "115:             previous = finger;",
          "116:             finger = finger->next;",
          "117:         }",
          "118:     }",
          "125:     subscription *next = service->subscriptionList;",
          "126:     subscription *previous = NULL;",
          "127:     subscription *found = NULL;",
          "129:     time_t current_time;",
          "131:     while( ( next ) && ( found == NULL ) ) {",
          "132:         if( !strcmp( next->sid, sid ) )",
          "133:             found = next;",
          "134:         else {",
          "135:             previous = next;",
          "136:             next = next->next;",
          "137:         }",
          "138:     }",
          "139:     if( found ) {",
          "141:         time( &current_time );",
          "142:         if( ( found->expireTime != 0 )",
          "143:             && ( found->expireTime < current_time ) ) {",
          "144:             if( previous )",
          "145:                 previous->next = found->next;",
          "146:             else",
          "147:                 service->subscriptionList = found->next;",
          "148:             found->next = NULL;",
          "149:             freeSubscriptionList( found );",
          "150:             found = NULL;",
          "151:             service->TotalSubscriptions--;",
          "152:         }",
          "153:     }",
          "154:     return found;",
          "161:     time_t current_time;",
          "162:     subscription *next = NULL;",
          "163:     subscription *previous = NULL;",
          "164:     int notDone = 1;",
          "167:     time( &current_time );",
          "168:     while( ( notDone ) && ( current ) ) {",
          "169:         previous = current;",
          "170:         current = current->next;",
          "172:         if( current == NULL ) {",
          "173:             notDone = 0;",
          "174:             next = current;",
          "175:         } else",
          "176:             if( ( current->expireTime != 0 )",
          "177:                 && ( current->expireTime < current_time ) ) {",
          "178:             previous->next = current->next;",
          "179:             current->next = NULL;",
          "180:             freeSubscriptionList( current );",
          "181:             current = previous;",
          "182:             service->TotalSubscriptions--;",
          "183:         } else if( current->active ) {",
          "184:             notDone = 0;",
          "185:             next = current;",
          "186:         }",
          "187:     }",
          "188:     return next;",
          "",
          "[Added Lines]",
          "41: #include \"config.h\"",
          "45:  #if EXCLUDE_GENA == 0",
          "60: int copy_subscription(subscription *in, subscription *out)",
          "62:  int return_code = HTTP_SUCCESS;",
          "64:  memcpy(out->sid, in->sid, SID_SIZE);",
          "65:  out->sid[SID_SIZE] = 0;",
          "66:  out->ToSendEventKey = in->ToSendEventKey;",
          "67:  out->expireTime = in->expireTime;",
          "68:  out->active = in->active;",
          "69:  if ((return_code = copy_URL_list(",
          "70:        &in->DeliveryURLs, &out->DeliveryURLs)) != HTTP_SUCCESS)",
          "71:   return return_code;",
          "72:  ListInit(&out->outgoing, 0, 0);",
          "73:  out->next = NULL;",
          "74:  return HTTP_SUCCESS;",
          "93: void RemoveSubscriptionSID(Upnp_SID sid, service_info *service)",
          "95:  subscription *finger = service->subscriptionList;",
          "96:  subscription *previous = NULL;",
          "98:  while (finger) {",
          "99:   if (!(strcmp(sid, finger->sid))) {",
          "100:    if (previous)",
          "101:     previous->next = finger->next;",
          "102:    else",
          "103:     service->subscriptionList = finger->next;",
          "104:    finger->next = NULL;",
          "105:    freeSubscriptionList(finger);",
          "106:    finger = NULL;",
          "107:    service->TotalSubscriptions--;",
          "108:   } else {",
          "109:    previous = finger;",
          "110:    finger = finger->next;",
          "111:   }",
          "112:  }",
          "117:  subscription *next = service->subscriptionList;",
          "118:  subscription *previous = NULL;",
          "119:  subscription *found = NULL;",
          "121:  time_t current_time;",
          "123:  while ((next) && (found == NULL)) {",
          "124:   if (!strcmp(next->sid, sid))",
          "125:    found = next;",
          "126:   else {",
          "127:    previous = next;",
          "128:    next = next->next;",
          "129:   }",
          "130:  }",
          "131:  if (found) {",
          "133:   time(&current_time);",
          "134:   if ((found->expireTime != 0) &&",
          "135:    (found->expireTime < current_time)) {",
          "136:    if (previous)",
          "137:     previous->next = found->next;",
          "138:    else",
          "139:     service->subscriptionList = found->next;",
          "140:    found->next = NULL;",
          "141:    freeSubscriptionList(found);",
          "142:    found = NULL;",
          "143:    service->TotalSubscriptions--;",
          "144:   }",
          "145:  }",
          "146:  return found;",
          "151:  time_t current_time;",
          "152:  subscription *next = NULL;",
          "153:  subscription *previous = NULL;",
          "154:  int notDone = 1;",
          "157:  time(&current_time);",
          "158:  while ((notDone) && (current)) {",
          "159:   previous = current;",
          "160:   current = current->next;",
          "162:   if (current == NULL) {",
          "163:    notDone = 0;",
          "164:    next = current;",
          "165:   } else if ((current->expireTime != 0) &&",
          "166:       (current->expireTime < current_time)) {",
          "167:    previous->next = current->next;",
          "168:    current->next = NULL;",
          "169:    freeSubscriptionList(current);",
          "170:    current = previous;",
          "171:    service->TotalSubscriptions--;",
          "172:   } else if (current->active) {",
          "173:    notDone = 0;",
          "174:    next = current;",
          "175:   }",
          "176:  }",
          "177:  return next;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212: }",
          "229: {",
          "277: }",
          "298: {",
          "327: }",
          "350: {",
          "377: }",
          "400: {",
          "434: }",
          "453: void printServiceList(",
          "457: {",
          "492: }",
          "512: void printServiceTable(",
          "516: {",
          "539: {",
          "565: }",
          "582: {",
          "606: }",
          "624: {",
          "629: }",
          "646: {",
          "656: }",
          "681: {",
          "711: }",
          "733: {",
          "734:  IXML_Node *serviceList = NULL;",
          "735:  IXML_Node *current_service = NULL;",
          "",
          "[Removed Lines]",
          "227: void",
          "228: freeSubscriptionList( subscription * head )",
          "230:     subscription *next = NULL;",
          "232:     while( head ) {",
          "233:         next = head->next;",
          "234:         freeSubscription( head );",
          "235:         free( head );",
          "236:         head = next;",
          "237:     }",
          "238: }",
          "258: service_info *",
          "259: FindServiceId( service_table * table,",
          "260:                const char *serviceId,",
          "261:                const char *UDN )",
          "262: {",
          "263:     service_info *finger = NULL;",
          "265:     if( table ) {",
          "266:         finger = table->serviceList;",
          "267:         while( finger ) {",
          "268:             if( ( !strcmp( serviceId, finger->serviceId ) ) &&",
          "269:                 ( !strcmp( UDN, finger->UDN ) ) ) {",
          "270:                 return finger;",
          "271:             }",
          "272:             finger = finger->next;",
          "273:         }",
          "274:     }",
          "276:     return NULL;",
          "295: service_info *",
          "296: FindServiceEventURLPath( service_table * table,",
          "297:                          const char *eventURLPath )",
          "299:     service_info *finger = NULL;",
          "300:     uri_type parsed_url;",
          "301:     uri_type parsed_url_in;",
          "303:     if( ( table )",
          "304:         &&",
          "305:         ( parse_uri( eventURLPath,",
          "306:                      strlen( eventURLPath ),",
          "307:                      &parsed_url_in ) == HTTP_SUCCESS ) ) {",
          "309:         finger = table->serviceList;",
          "310:         while( finger ) {",
          "311:             if( finger->eventURL )",
          "312:                 if( ( parse_uri",
          "313:                       ( finger->eventURL, strlen( finger->eventURL ),",
          "314:                         &parsed_url ) == HTTP_SUCCESS ) ) {",
          "316:                     if( !token_cmp",
          "317:                         ( &parsed_url.pathquery,",
          "318:                           &parsed_url_in.pathquery ) )",
          "319:                         return finger;",
          "321:                 }",
          "322:             finger = finger->next;",
          "323:         }",
          "324:     }",
          "326:     return NULL;",
          "346: #if EXCLUDE_SOAP == 0",
          "347: service_info *",
          "348: FindServiceControlURLPath( service_table * table,",
          "349:                            const char *controlURLPath )",
          "351:     service_info *finger = NULL;",
          "352:     uri_type parsed_url;",
          "353:     uri_type parsed_url_in;",
          "355:     if( ( table )",
          "356:         &&",
          "357:         ( parse_uri",
          "358:           ( controlURLPath, strlen( controlURLPath ),",
          "359:             &parsed_url_in ) == HTTP_SUCCESS ) ) {",
          "360:         finger = table->serviceList;",
          "361:         while( finger ) {",
          "362:             if( finger->controlURL )",
          "363:                 if( ( parse_uri",
          "364:                       ( finger->controlURL, strlen( finger->controlURL ),",
          "365:                         &parsed_url ) == HTTP_SUCCESS) ) {",
          "366:                     if( !token_cmp",
          "367:                         ( &parsed_url.pathquery,",
          "368:                           &parsed_url_in.pathquery ) )",
          "369:                         return finger;",
          "370:                 }",
          "371:             finger = finger->next;",
          "372:         }",
          "373:     }",
          "375:     return NULL;",
          "395: #ifdef DEBUG",
          "396: void printService(",
          "397:     service_info *service,",
          "398:     Upnp_LogLevel level,",
          "399:     Dbg_Module module )",
          "401:     if( service ) {",
          "402:         if( service->serviceType ) {",
          "403:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "404:                 \"serviceType: %s\\n\", service->serviceType );",
          "405:         }",
          "406:         if( service->serviceId ) {",
          "407:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "408:                 \"serviceId: %s\\n\", service->serviceId );",
          "409:         }",
          "410:  if( service->SCPDURL ) {",
          "411:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "412:                 \"SCPDURL: %s\\n\", service->SCPDURL );",
          "413:         }",
          "414:  if( service->controlURL ) {",
          "415:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "416:                 \"controlURL: %s\\n\", service->controlURL );",
          "417:         }",
          "418:  if( service->eventURL ) {",
          "419:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "420:                 \"eventURL: %s\\n\", service->eventURL );",
          "421:         }",
          "422:  if( service->UDN ) {",
          "423:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "424:                 \"UDN: %s\\n\\n\", service->UDN );",
          "425:         }",
          "426:  if( service->active ) {",
          "427:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "428:             \"Service is active\\n\" );",
          "429:         } else {",
          "430:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "431:             \"Service is inactive\\n\" );",
          "432:         }",
          "433:     }",
          "435: #endif",
          "452: #ifdef DEBUG",
          "454:     service_info * service,",
          "455:     Upnp_LogLevel level,",
          "456:     Dbg_Module module )",
          "458:     while( service ) {",
          "459:         if( service->serviceType ) {",
          "460:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "461:                 \"serviceType: %s\\n\", service->serviceType );",
          "462:         }",
          "463:         if( service->serviceId ) {",
          "464:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "465:                 \"serviceId: %s\\n\", service->serviceId );",
          "466:         }",
          "467:         if( service->SCPDURL ) {",
          "468:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "469:                 \"SCPDURL: %s\\n\", service->SCPDURL );",
          "470:         }",
          "471:         if( service->controlURL ) {",
          "472:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "473:                 \"controlURL: %s\\n\", service->controlURL );",
          "474:         }",
          "475:         if( service->eventURL ) {",
          "476:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "477:                 \"eventURL: %s\\n\", service->eventURL );",
          "478:         }",
          "479:         if( service->UDN ) {",
          "480:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "481:                 \"UDN: %s\\n\\n\", service->UDN );",
          "482:         }",
          "483:         if( service->active ) {",
          "484:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "485:                 \"Service is active\\n\" );",
          "486:         } else {",
          "487:             UpnpPrintf( level, module, __FILE__, __LINE__,",
          "488:                 \"Service is inactive\\n\" );",
          "489:         }",
          "490:         service = service->next;",
          "491:     }",
          "493: #endif",
          "511: #ifdef DEBUG",
          "513:     service_table * table,",
          "514:     Upnp_LogLevel level,",
          "515:     Dbg_Module module )",
          "517:     UpnpPrintf( level, module, __FILE__, __LINE__,",
          "518:         \"URL_BASE: %s\\n\", table->URLBase );",
          "519:     UpnpPrintf( level, module, __FILE__, __LINE__,",
          "520:         \"Services: \\n\" );",
          "521:     printServiceList( table->serviceList, level, module );}",
          "522: #endif",
          "524: #if EXCLUDE_GENA == 0",
          "538: void freeService( service_info * in )",
          "540:     if( in ) {",
          "541:         if( in->serviceType )",
          "542:             ixmlFreeDOMString( in->serviceType );",
          "544:         if( in->serviceId )",
          "545:             ixmlFreeDOMString( in->serviceId );",
          "547:         if( in->SCPDURL )",
          "548:             free( in->SCPDURL );",
          "550:         if( in->controlURL )",
          "551:             free( in->controlURL );",
          "553:         if( in->eventURL )",
          "554:             free( in->eventURL );",
          "556:         if( in->UDN )",
          "557:             ixmlFreeDOMString( in->UDN );",
          "559:         if( in->subscriptionList )",
          "560:             freeSubscriptionList( in->subscriptionList );",
          "562:         in->TotalSubscriptions = 0;",
          "563:         free( in );",
          "564:     }",
          "580: void",
          "581: freeServiceList( service_info * head )",
          "583:     service_info *next = NULL;",
          "585:     while( head ) {",
          "586:         if( head->serviceType )",
          "587:             ixmlFreeDOMString( head->serviceType );",
          "588:         if( head->serviceId )",
          "589:             ixmlFreeDOMString( head->serviceId );",
          "590:         if( head->SCPDURL )",
          "591:             free( head->SCPDURL );",
          "592:         if( head->controlURL )",
          "593:             free( head->controlURL );",
          "594:         if( head->eventURL )",
          "595:             free( head->eventURL );",
          "596:         if( head->UDN )",
          "597:             ixmlFreeDOMString( head->UDN );",
          "598:         if( head->subscriptionList )",
          "599:             freeSubscriptionList( head->subscriptionList );",
          "601:         head->TotalSubscriptions = 0;",
          "602:         next = head->next;",
          "603:         free( head );",
          "604:         head = next;",
          "605:     }",
          "622: void",
          "623: freeServiceTable( service_table * table )",
          "625:     ixmlFreeDOMString( table->URLBase );",
          "626:     freeServiceList( table->serviceList );",
          "627:     table->serviceList = NULL;",
          "628:     table->endServiceList = NULL;",
          "644: DOMString",
          "645: getElementValue( IXML_Node * node )",
          "647:     IXML_Node *child = ( IXML_Node * ) ixmlNode_getFirstChild( node );",
          "648:     const DOMString temp = NULL;",
          "650:     if( ( child != 0 ) && ( ixmlNode_getNodeType( child ) == eTEXT_NODE ) ) {",
          "651:         temp = ixmlNode_getNodeValue( child );",
          "652:         return ixmlCloneDOMString( temp );",
          "653:     } else {",
          "654:         return NULL;",
          "655:     }",
          "677: int",
          "678: getSubElement( const char *element_name,",
          "679:                IXML_Node * node,",
          "680:                IXML_Node ** out )",
          "683:     const DOMString NodeName = NULL;",
          "684:     int found = 0;",
          "686:     IXML_Node *child = ( IXML_Node * ) ixmlNode_getFirstChild( node );",
          "688:     ( *out ) = NULL;",
          "690:     while( ( child != NULL ) && ( !found ) ) {",
          "692:         switch ( ixmlNode_getNodeType( child ) ) {",
          "693:             case eELEMENT_NODE:",
          "695:                 NodeName = ixmlNode_getNodeName( child );",
          "696:                 if( !strcmp( NodeName, element_name ) ) {",
          "697:                     ( *out ) = child;",
          "698:                     found = 1;",
          "699:                     return found;",
          "700:                 }",
          "701:                 break;",
          "703:             default:",
          "704:                 break;",
          "705:         }",
          "707:         child = ( IXML_Node * ) ixmlNode_getNextSibling( child );",
          "708:     }",
          "710:     return found;",
          "729: service_info *getServiceList(",
          "730:  IXML_Node *node,",
          "731:  service_info **end,",
          "732:  char *URLBase)",
          "",
          "[Added Lines]",
          "214: void freeSubscriptionList(subscription *head)",
          "216:  subscription *next = NULL;",
          "218:  while (head) {",
          "219:   next = head->next;",
          "220:   freeSubscription(head);",
          "221:   free(head);",
          "222:   head = next;",
          "223:  }",
          "242: service_info *FindServiceId(",
          "243:  service_table *table, const char *serviceId, const char *UDN)",
          "245:  service_info *finger = NULL;",
          "247:  if (table) {",
          "248:   finger = table->serviceList;",
          "249:   while (finger) {",
          "250:    if ((!strcmp(serviceId, finger->serviceId)) &&",
          "251:     (!strcmp(UDN, finger->UDN))) {",
          "252:     return finger;",
          "253:    }",
          "254:    finger = finger->next;",
          "255:   }",
          "256:  }",
          "258:  return NULL;",
          "277: service_info *FindServiceEventURLPath(",
          "278:  service_table *table, const char *eventURLPath)",
          "280:  service_info *finger = NULL;",
          "281:  uri_type parsed_url;",
          "282:  uri_type parsed_url_in;",
          "284:  if ((table) && (parse_uri(eventURLPath,",
          "285:     strlen(eventURLPath),",
          "286:     &parsed_url_in) == HTTP_SUCCESS)) {",
          "288:   finger = table->serviceList;",
          "289:   while (finger) {",
          "290:    if (finger->eventURL)",
          "291:     if ((parse_uri(finger->eventURL,",
          "292:           strlen(finger->eventURL),",
          "293:           &parsed_url) == HTTP_SUCCESS)) {",
          "295:      if (!token_cmp(&parsed_url.pathquery,",
          "296:           &parsed_url_in.pathquery))",
          "297:       return finger;",
          "298:     }",
          "299:    finger = finger->next;",
          "300:   }",
          "301:  }",
          "303:  return NULL;",
          "321:  #if EXCLUDE_SOAP == 0",
          "322: service_info *FindServiceControlURLPath(",
          "323:  service_table *table, const char *controlURLPath)",
          "324: {",
          "325:  service_info *finger = NULL;",
          "326:  uri_type parsed_url;",
          "327:  uri_type parsed_url_in;",
          "329:  if ((table) && (parse_uri(controlURLPath,",
          "330:     strlen(controlURLPath),",
          "331:     &parsed_url_in) == HTTP_SUCCESS)) {",
          "332:   finger = table->serviceList;",
          "333:   while (finger) {",
          "334:    if (finger->controlURL)",
          "335:     if ((parse_uri(finger->controlURL,",
          "336:           strlen(finger->controlURL),",
          "337:           &parsed_url) == HTTP_SUCCESS)) {",
          "338:      if (!token_cmp(&parsed_url.pathquery,",
          "339:           &parsed_url_in.pathquery))",
          "340:       return finger;",
          "341:     }",
          "342:    finger = finger->next;",
          "343:   }",
          "344:  }",
          "346:  return NULL;",
          "347: }",
          "363:  #ifdef DEBUG",
          "364: void printService(service_info *service, Upnp_LogLevel level, Dbg_Module module)",
          "366:  if (service) {",
          "367:   if (service->serviceType) {",
          "368:    UpnpPrintf(level,",
          "369:     module,",
          "370:     __FILE__,",
          "371:     __LINE__,",
          "372:     \"serviceType: %s\\n\",",
          "373:     service->serviceType);",
          "374:   }",
          "375:   if (service->serviceId) {",
          "376:    UpnpPrintf(level,",
          "377:     module,",
          "378:     __FILE__,",
          "379:     __LINE__,",
          "380:     \"serviceId: %s\\n\",",
          "381:     service->serviceId);",
          "382:   }",
          "383:   if (service->SCPDURL) {",
          "384:    UpnpPrintf(level,",
          "385:     module,",
          "386:     __FILE__,",
          "387:     __LINE__,",
          "388:     \"SCPDURL: %s\\n\",",
          "389:     service->SCPDURL);",
          "390:   }",
          "391:   if (service->controlURL) {",
          "392:    UpnpPrintf(level,",
          "393:     module,",
          "394:     __FILE__,",
          "395:     __LINE__,",
          "396:     \"controlURL: %s\\n\",",
          "397:     service->controlURL);",
          "398:   }",
          "399:   if (service->eventURL) {",
          "400:    UpnpPrintf(level,",
          "401:     module,",
          "402:     __FILE__,",
          "403:     __LINE__,",
          "404:     \"eventURL: %s\\n\",",
          "405:     service->eventURL);",
          "406:   }",
          "407:   if (service->UDN) {",
          "408:    UpnpPrintf(level,",
          "409:     module,",
          "410:     __FILE__,",
          "411:     __LINE__,",
          "412:     \"UDN: %s\\n\\n\",",
          "413:     service->UDN);",
          "414:   }",
          "415:   if (service->active) {",
          "416:    UpnpPrintf(level,",
          "417:     module,",
          "418:     __FILE__,",
          "419:     __LINE__,",
          "420:     \"Service is active\\n\");",
          "421:   } else {",
          "422:    UpnpPrintf(level,",
          "423:     module,",
          "424:     __FILE__,",
          "425:     __LINE__,",
          "426:     \"Service is inactive\\n\");",
          "427:   }",
          "428:  }",
          "430:  #endif",
          "445:  #ifdef DEBUG",
          "447:  service_info *service, Upnp_LogLevel level, Dbg_Module module)",
          "449:  while (service) {",
          "450:   if (service->serviceType) {",
          "451:    UpnpPrintf(level,",
          "452:     module,",
          "453:     __FILE__,",
          "454:     __LINE__,",
          "455:     \"serviceType: %s\\n\",",
          "456:     service->serviceType);",
          "457:   }",
          "458:   if (service->serviceId) {",
          "459:    UpnpPrintf(level,",
          "460:     module,",
          "461:     __FILE__,",
          "462:     __LINE__,",
          "463:     \"serviceId: %s\\n\",",
          "464:     service->serviceId);",
          "465:   }",
          "466:   if (service->SCPDURL) {",
          "467:    UpnpPrintf(level,",
          "468:     module,",
          "469:     __FILE__,",
          "470:     __LINE__,",
          "471:     \"SCPDURL: %s\\n\",",
          "472:     service->SCPDURL);",
          "473:   }",
          "474:   if (service->controlURL) {",
          "475:    UpnpPrintf(level,",
          "476:     module,",
          "477:     __FILE__,",
          "478:     __LINE__,",
          "479:     \"controlURL: %s\\n\",",
          "480:     service->controlURL);",
          "481:   }",
          "482:   if (service->eventURL) {",
          "483:    UpnpPrintf(level,",
          "484:     module,",
          "485:     __FILE__,",
          "486:     __LINE__,",
          "487:     \"eventURL: %s\\n\",",
          "488:     service->eventURL);",
          "489:   }",
          "490:   if (service->UDN) {",
          "491:    UpnpPrintf(level,",
          "492:     module,",
          "493:     __FILE__,",
          "494:     __LINE__,",
          "495:     \"UDN: %s\\n\\n\",",
          "496:     service->UDN);",
          "497:   }",
          "498:   if (service->active) {",
          "499:    UpnpPrintf(level,",
          "500:     module,",
          "501:     __FILE__,",
          "502:     __LINE__,",
          "503:     \"Service is active\\n\");",
          "504:   } else {",
          "505:    UpnpPrintf(level,",
          "506:     module,",
          "507:     __FILE__,",
          "508:     __LINE__,",
          "509:     \"Service is inactive\\n\");",
          "510:   }",
          "511:   service = service->next;",
          "512:  }",
          "514:  #endif",
          "530:  #ifdef DEBUG",
          "532:  service_table *table, Upnp_LogLevel level, Dbg_Module module)",
          "534:  UpnpPrintf(level,",
          "535:   module,",
          "536:   __FILE__,",
          "537:   __LINE__,",
          "538:   \"URL_BASE: %s\\n\",",
          "539:   table->URLBase);",
          "540:  UpnpPrintf(level, module, __FILE__, __LINE__, \"Services: \\n\");",
          "541:  printServiceList(table->serviceList, level, module);",
          "542: }",
          "543:  #endif",
          "545:  #if EXCLUDE_GENA == 0",
          "559: void freeService(service_info *in)",
          "561:  if (in) {",
          "562:   if (in->serviceType)",
          "563:    ixmlFreeDOMString(in->serviceType);",
          "565:   if (in->serviceId)",
          "566:    ixmlFreeDOMString(in->serviceId);",
          "568:   if (in->SCPDURL)",
          "569:    free(in->SCPDURL);",
          "571:   if (in->controlURL)",
          "572:    free(in->controlURL);",
          "574:   if (in->eventURL)",
          "575:    free(in->eventURL);",
          "577:   if (in->UDN)",
          "578:    ixmlFreeDOMString(in->UDN);",
          "580:   if (in->subscriptionList)",
          "581:    freeSubscriptionList(in->subscriptionList);",
          "583:   in->TotalSubscriptions = 0;",
          "584:   free(in);",
          "585:  }",
          "601: void freeServiceList(service_info *head)",
          "603:  service_info *next = NULL;",
          "605:  while (head) {",
          "606:   if (head->serviceType)",
          "607:    ixmlFreeDOMString(head->serviceType);",
          "608:   if (head->serviceId)",
          "609:    ixmlFreeDOMString(head->serviceId);",
          "610:   if (head->SCPDURL)",
          "611:    free(head->SCPDURL);",
          "612:   if (head->controlURL)",
          "613:    free(head->controlURL);",
          "614:   if (head->eventURL)",
          "615:    free(head->eventURL);",
          "616:   if (head->UDN)",
          "617:    ixmlFreeDOMString(head->UDN);",
          "618:   if (head->subscriptionList)",
          "619:    freeSubscriptionList(head->subscriptionList);",
          "621:   head->TotalSubscriptions = 0;",
          "622:   next = head->next;",
          "623:   free(head);",
          "624:   head = next;",
          "625:  }",
          "642: void freeServiceTable(service_table *table)",
          "644:  ixmlFreeDOMString(table->URLBase);",
          "645:  freeServiceList(table->serviceList);",
          "646:  table->serviceList = NULL;",
          "647:  table->endServiceList = NULL;",
          "662: DOMString getElementValue(IXML_Node *node)",
          "664:  IXML_Node *child = (IXML_Node *)ixmlNode_getFirstChild(node);",
          "665:  const DOMString temp = NULL;",
          "667:  if ((child != 0) && (ixmlNode_getNodeType(child) == eTEXT_NODE)) {",
          "668:   temp = ixmlNode_getNodeValue(child);",
          "669:   return ixmlCloneDOMString(temp);",
          "670:  } else {",
          "671:   return NULL;",
          "672:  }",
          "691: int getSubElement(const char *element_name, IXML_Node *node, IXML_Node **out)",
          "694:  const DOMString NodeName = NULL;",
          "695:  int found = 0;",
          "697:  IXML_Node *child = (IXML_Node *)ixmlNode_getFirstChild(node);",
          "699:  (*out) = NULL;",
          "701:  while ((child != NULL) && (!found)) {",
          "703:   switch (ixmlNode_getNodeType(child)) {",
          "704:   case eELEMENT_NODE:",
          "706:    NodeName = ixmlNode_getNodeName(child);",
          "707:    if (!strcmp(NodeName, element_name)) {",
          "708:     (*out) = child;",
          "709:     found = 1;",
          "710:     return found;",
          "711:    }",
          "712:    break;",
          "714:   default:",
          "715:    break;",
          "716:   }",
          "718:   child = (IXML_Node *)ixmlNode_getNextSibling(child);",
          "719:  }",
          "721:  return found;",
          "737: service_info *getServiceList(IXML_Node *node, service_info **end, char *URLBase)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "750:  int fail = 0;",
          "752:  if (getSubElement(\"UDN\", node, &UDN) &&",
          "754:   serviceNodeList = ixmlElement_getElementsByTagName(",
          "755:    (IXML_Element *)serviceList, \"service\");",
          "756:   if (serviceNodeList != NULL) {",
          "757:    NumOfServices = ixmlNodeList_length(serviceNodeList);",
          "758:    for (i = 0lu; i < NumOfServices; i++) {",
          "759:     current_service =",
          "761:     fail = 0;",
          "762:     if (current) {",
          "764:      previous = current;",
          "765:      current = current->next;",
          "766:     } else {",
          "",
          "[Removed Lines]",
          "753:      getSubElement(\"serviceList\", node, &serviceList)) {",
          "760:         ixmlNodeList_item(serviceNodeList, i);",
          "763:      current->next = malloc(sizeof(service_info));",
          "",
          "[Added Lines]",
          "758:   getSubElement(\"serviceList\", node, &serviceList)) {",
          "765:      ixmlNodeList_item(serviceNodeList, i);",
          "768:      current->next =",
          "769:       malloc(sizeof(service_info));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "783:     current->TotalSubscriptions = 0;",
          "784:     if (!(current->UDN = getElementValue(UDN)))",
          "785:      fail = 1;",
          "788:      fail = 1;",
          "791:      fail = 1;",
          "795:      fail = 1;",
          "796:     ixmlFreeDOMString(tempDOMString);",
          "797:     tempDOMString = NULL;",
          "807:      current->controlURL = NULL;",
          "808:      fail = 0;",
          "809:     }",
          "810:     ixmlFreeDOMString(tempDOMString);",
          "811:     tempDOMString = NULL;",
          "821:      current->eventURL = NULL;",
          "822:      fail = 0;",
          "823:     }",
          "",
          "[Removed Lines]",
          "786:     if (!getSubElement(\"serviceType\", current_service, &serviceType) ||",
          "787:         !(current->serviceType = getElementValue(serviceType)))",
          "789:     if (!getSubElement(\"serviceId\", current_service, &serviceId) ||",
          "790:         !(current->serviceId = getElementValue(serviceId)))",
          "792:     if (!getSubElement(\"SCPDURL\", current_service, &SCPDURL) ||",
          "793:         !(tempDOMString = getElementValue(SCPDURL)) ||",
          "794:         !(current->SCPDURL = resolve_rel_url(URLBase, tempDOMString)))",
          "798:     if (!(getSubElement(\"controlURL\", current_service, &controlURL)) ||",
          "799:         !(tempDOMString = getElementValue(controlURL)) ||",
          "800:         !(current->controlURL = resolve_rel_url(URLBase, tempDOMString))) {",
          "801:      UpnpPrintf(UPNP_INFO, GENA, __FILE__,",
          "802:          __LINE__,",
          "803:          \"BAD OR MISSING CONTROL URL\");",
          "804:      UpnpPrintf(UPNP_INFO, GENA, __FILE__,",
          "805:          __LINE__,",
          "806:          \"CONTROL URL SET TO NULL IN SERVICE INFO\");",
          "812:     if (!getSubElement(\"eventSubURL\", current_service, &eventURL) ||",
          "813:         !(tempDOMString = getElementValue(eventURL)) ||",
          "814:         !(current->eventURL = resolve_rel_url(URLBase, tempDOMString))) {",
          "815:      UpnpPrintf(UPNP_INFO, GENA, __FILE__,",
          "816:          __LINE__,",
          "817:          \"BAD OR MISSING EVENT URL\");",
          "818:      UpnpPrintf(UPNP_INFO, GENA, __FILE__,",
          "819:          __LINE__,",
          "820:          \"EVENT URL SET TO NULL IN SERVICE INFO\");",
          "",
          "[Added Lines]",
          "792:     if (!getSubElement(\"serviceType\",",
          "793:          current_service,",
          "794:          &serviceType) ||",
          "795:      !(current->serviceType =",
          "796:        getElementValue(",
          "797:         serviceType)))",
          "799:     if (!getSubElement(\"serviceId\",",
          "800:          current_service,",
          "801:          &serviceId) ||",
          "802:      !(current->serviceId = getElementValue(",
          "803:         serviceId)))",
          "805:     if (!getSubElement(\"SCPDURL\",",
          "806:          current_service,",
          "807:          &SCPDURL) ||",
          "808:      !(tempDOMString = getElementValue(",
          "809:         SCPDURL)) ||",
          "810:      !(current->SCPDURL = resolve_rel_url(",
          "811:         URLBase, tempDOMString)))",
          "815:     if (!(getSubElement(\"controlURL\",",
          "816:          current_service,",
          "817:          &controlURL)) ||",
          "818:      !(tempDOMString = getElementValue(",
          "819:         controlURL)) ||",
          "820:      !(current->controlURL = resolve_rel_url(",
          "821:         URLBase, tempDOMString))) {",
          "822:      UpnpPrintf(UPNP_INFO,",
          "823:       GENA,",
          "824:       __FILE__,",
          "825:       __LINE__,",
          "826:       \"BAD OR MISSING CONTROL URL\");",
          "827:      UpnpPrintf(UPNP_INFO,",
          "828:       GENA,",
          "829:       __FILE__,",
          "830:       __LINE__,",
          "831:       \"CONTROL URL SET TO NULL IN \"",
          "832:       \"SERVICE INFO\");",
          "838:     if (!getSubElement(\"eventSubURL\",",
          "839:          current_service,",
          "840:          &eventURL) ||",
          "841:      !(tempDOMString = getElementValue(",
          "842:         eventURL)) ||",
          "843:      !(current->eventURL = resolve_rel_url(",
          "844:         URLBase, tempDOMString))) {",
          "845:      UpnpPrintf(UPNP_INFO,",
          "846:       GENA,",
          "847:       __FILE__,",
          "848:       __LINE__,",
          "849:       \"BAD OR MISSING EVENT URL\");",
          "850:      UpnpPrintf(UPNP_INFO,",
          "851:       GENA,",
          "852:       __FILE__,",
          "853:       __LINE__,",
          "854:       \"EVENT URL SET TO NULL IN \"",
          "855:       \"SERVICE INFO\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "842:  }",
          "843: }",
          "865: {",
          "866:  service_info *head = NULL;",
          "867:  service_info *end = NULL;",
          "",
          "[Removed Lines]",
          "861: service_info *",
          "862: getAllServiceList( IXML_Node * node,",
          "863:                    char *URLBase,",
          "864:                    service_info ** out_end )",
          "",
          "[Added Lines]",
          "893: service_info *getAllServiceList(",
          "894:  IXML_Node *node, char *URLBase, service_info **out_end)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881:   for (i = 0lu; i < NumOfDevices; i++) {",
          "882:    currentDevice = ixmlNodeList_item(deviceList, i);",
          "883:    if (head) {",
          "886:     if (next_end)",
          "887:      end = next_end;",
          "888:    } else",
          "891:   }",
          "892:   ixmlNodeList_free(deviceList);",
          "893:  }",
          "",
          "[Removed Lines]",
          "884:     end->next = getServiceList(currentDevice,",
          "885:      &next_end, URLBase);",
          "889:     head = getServiceList(currentDevice, &end,",
          "890:      URLBase);",
          "",
          "[Added Lines]",
          "914:     end->next = getServiceList(",
          "915:      currentDevice, &next_end, URLBase);",
          "919:     head = getServiceList(",
          "920:      currentDevice, &end, URLBase);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "896:  return head;",
          "897: }",
          "919: {",
          "973: }",
          "995: {",
          "1026: }",
          "",
          "[Removed Lines]",
          "916: int",
          "917: removeServiceTable( IXML_Node * node,",
          "918:                     service_table * in )",
          "920:     IXML_Node *root = NULL;",
          "921:     IXML_Node *currentUDN = NULL;",
          "922:     DOMString UDN = NULL;",
          "923:     IXML_NodeList *deviceList = NULL;",
          "924:     service_info *current_service = NULL;",
          "925:     service_info *start_search = NULL;",
          "926:     service_info *prev_service = NULL;",
          "927:     long unsigned int NumOfDevices = 0lu;",
          "928:     long unsigned int i = 0lu;",
          "930:     if( getSubElement( \"root\", node, &root ) ) {",
          "931:         start_search = in->serviceList;",
          "932:         deviceList =",
          "933:             ixmlElement_getElementsByTagName( ( IXML_Element * ) root,",
          "934:                                               \"device\" );",
          "935:         if( deviceList != NULL ) {",
          "936:             NumOfDevices = ixmlNodeList_length( deviceList );",
          "937:             for( i = 0lu; i < NumOfDevices; i++ ) {",
          "938:                 if( ( start_search )",
          "939:                     && ( ( getSubElement( \"UDN\", node, &currentUDN ) )",
          "940:                          && ( UDN = getElementValue( currentUDN ) ) ) ) {",
          "941:                     current_service = start_search;",
          "945:                     while( ( current_service )",
          "946:                            && ( strcmp( current_service->UDN, UDN ) ) ) {",
          "947:                         current_service = current_service->next;",
          "948:    if( current_service != NULL)",
          "949:                          prev_service = current_service->next;",
          "950:                     }",
          "951:                     while( ( current_service )",
          "952:                            && ( !strcmp( current_service->UDN, UDN ) ) ) {",
          "953:                         if( prev_service ) {",
          "954:                             prev_service->next = current_service->next;",
          "955:                         } else {",
          "956:                             in->serviceList = current_service->next;",
          "957:                         }",
          "958:                         if( current_service == in->endServiceList )",
          "959:                             in->endServiceList = prev_service;",
          "960:                         start_search = current_service->next;",
          "961:                         freeService( current_service );",
          "962:                         current_service = start_search;",
          "963:                     }",
          "964:                     ixmlFreeDOMString( UDN );",
          "965:                     UDN = NULL;",
          "966:                 }",
          "967:             }",
          "969:             ixmlNodeList_free( deviceList );",
          "970:         }",
          "971:     }",
          "972:     return 1;",
          "991: int",
          "992: addServiceTable( IXML_Node * node,",
          "993:                  service_table * in,",
          "994:                  const char *DefaultURLBase )",
          "996:     IXML_Node *root = NULL;",
          "997:     IXML_Node *URLBase = NULL;",
          "999:     service_info *tempEnd = NULL;",
          "1001:     if( in->URLBase ) {",
          "1002:         free( in->URLBase );",
          "1003:         in->URLBase = NULL;",
          "1004:     }",
          "1006:     if( getSubElement( \"root\", node, &root ) ) {",
          "1007:         if( getSubElement( \"URLBase\", root, &URLBase ) ) {",
          "1008:             in->URLBase = getElementValue( URLBase );",
          "1009:         } else {",
          "1010:             if( DefaultURLBase ) {",
          "1011:                 in->URLBase = ixmlCloneDOMString( DefaultURLBase );",
          "1012:             } else {",
          "1013:                 in->URLBase = ixmlCloneDOMString( \"\" );",
          "1014:             }",
          "1015:         }",
          "1017:         if( ( in->endServiceList->next =",
          "1018:               getAllServiceList( root, in->URLBase, &tempEnd ) ) ) {",
          "1019:             in->endServiceList = tempEnd;",
          "1020:             return 1;",
          "1021:         }",
          "1023:     }",
          "1025:     return 0;",
          "",
          "[Added Lines]",
          "943: int removeServiceTable(IXML_Node *node, service_table *in)",
          "945:  IXML_Node *root = NULL;",
          "946:  IXML_Node *currentUDN = NULL;",
          "947:  DOMString UDN = NULL;",
          "948:  IXML_NodeList *deviceList = NULL;",
          "949:  service_info *current_service = NULL;",
          "950:  service_info *start_search = NULL;",
          "951:  service_info *prev_service = NULL;",
          "952:  long unsigned int NumOfDevices = 0lu;",
          "953:  long unsigned int i = 0lu;",
          "955:  if (getSubElement(\"root\", node, &root)) {",
          "956:   start_search = in->serviceList;",
          "957:   deviceList = ixmlElement_getElementsByTagName(",
          "958:    (IXML_Element *)root, \"device\");",
          "959:   if (deviceList != NULL) {",
          "960:    NumOfDevices = ixmlNodeList_length(deviceList);",
          "961:    for (i = 0lu; i < NumOfDevices; i++) {",
          "962:     if ((start_search) &&",
          "963:      ((getSubElement(",
          "964:        \"UDN\", node, &currentUDN)) &&",
          "965:       (UDN = getElementValue(",
          "966:         currentUDN)))) {",
          "967:      current_service = start_search;",
          "975:      while ((current_service) &&",
          "976:       (strcmp(current_service->UDN,",
          "977:        UDN))) {",
          "978:       current_service =",
          "979:        current_service->next;",
          "980:       if (current_service != NULL)",
          "981:        prev_service =",
          "982:         current_service",
          "983:          ->next;",
          "984:      }",
          "985:      while ((current_service) &&",
          "986:       (!strcmp(current_service->UDN,",
          "987:        UDN))) {",
          "988:       if (prev_service) {",
          "989:        prev_service->next =",
          "990:         current_service",
          "991:          ->next;",
          "992:       } else {",
          "993:        in->serviceList =",
          "994:         current_service",
          "995:          ->next;",
          "996:       }",
          "997:       if (current_service ==",
          "998:        in->endServiceList)",
          "999:        in->endServiceList =",
          "1000:         prev_service;",
          "1001:       start_search =",
          "1002:        current_service->next;",
          "1003:       freeService(current_service);",
          "1004:       current_service = start_search;",
          "1005:      }",
          "1006:      ixmlFreeDOMString(UDN);",
          "1007:      UDN = NULL;",
          "1008:     }",
          "1009:    }",
          "1011:    ixmlNodeList_free(deviceList);",
          "1012:   }",
          "1013:  }",
          "1014:  return 1;",
          "1031: int addServiceTable(",
          "1032:  IXML_Node *node, service_table *in, const char *DefaultURLBase)",
          "1034:  IXML_Node *root = NULL;",
          "1035:  IXML_Node *URLBase = NULL;",
          "1037:  service_info *tempEnd = NULL;",
          "1039:  if (in->URLBase) {",
          "1040:   free(in->URLBase);",
          "1041:   in->URLBase = NULL;",
          "1042:  }",
          "1044:  if (getSubElement(\"root\", node, &root)) {",
          "1045:   if (getSubElement(\"URLBase\", root, &URLBase)) {",
          "1046:    in->URLBase = getElementValue(URLBase);",
          "1047:   } else {",
          "1048:    if (DefaultURLBase) {",
          "1049:     in->URLBase =",
          "1050:      ixmlCloneDOMString(DefaultURLBase);",
          "1051:    } else {",
          "1052:     in->URLBase = ixmlCloneDOMString(\"\");",
          "1053:    }",
          "1054:   }",
          "1056:   if ((in->endServiceList->next = getAllServiceList(",
          "1057:         root, in->URLBase, &tempEnd))) {",
          "1058:    in->endServiceList = tempEnd;",
          "1059:    return 1;",
          "1060:   }",
          "1061:  }",
          "1063:  return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1048: {",
          "1071: }",
          "",
          "[Removed Lines]",
          "1044: int",
          "1045: getServiceTable( IXML_Node * node,",
          "1046:                  service_table * out,",
          "1047:                  const char *DefaultURLBase )",
          "1049:     IXML_Node *root = NULL;",
          "1050:     IXML_Node *URLBase = NULL;",
          "1052:     if( getSubElement( \"root\", node, &root ) ) {",
          "1053:         if( getSubElement( \"URLBase\", root, &URLBase ) ) {",
          "1054:             out->URLBase = getElementValue( URLBase );",
          "1055:         } else {",
          "1056:             if( DefaultURLBase ) {",
          "1057:                 out->URLBase = ixmlCloneDOMString( DefaultURLBase );",
          "1058:             } else {",
          "1059:                 out->URLBase = ixmlCloneDOMString( \"\" );",
          "1060:             }",
          "1061:         }",
          "1063:         if( ( out->serviceList = getAllServiceList(",
          "1064:             root, out->URLBase, &out->endServiceList ) ) ) {",
          "1065:             return 1;",
          "1066:         }",
          "1068:     }",
          "1070:     return 0;",
          "",
          "[Added Lines]",
          "1082: int getServiceTable(",
          "1083:  IXML_Node *node, service_table *out, const char *DefaultURLBase)",
          "1085:  IXML_Node *root = NULL;",
          "1086:  IXML_Node *URLBase = NULL;",
          "1088:  if (getSubElement(\"root\", node, &root)) {",
          "1089:   if (getSubElement(\"URLBase\", root, &URLBase)) {",
          "1090:    out->URLBase = getElementValue(URLBase);",
          "1091:   } else {",
          "1092:    if (DefaultURLBase) {",
          "1093:     out->URLBase =",
          "1094:      ixmlCloneDOMString(DefaultURLBase);",
          "1095:    } else {",
          "1096:     out->URLBase = ixmlCloneDOMString(\"\");",
          "1097:    }",
          "1098:   }",
          "1100:   if ((out->serviceList = getAllServiceList(",
          "1101:         root, out->URLBase, &out->endServiceList))) {",
          "1102:    return 1;",
          "1103:   }",
          "1104:  }",
          "1106:  return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef04e5578a8cde2919e8c32cd6b91cb0ae6afd2e",
      "candidate_info": {
        "commit_hash": "ef04e5578a8cde2919e8c32cd6b91cb0ae6afd2e",
        "repo": "pupnp/pupnp",
        "commit_url": "https://github.com/pupnp/pupnp/commit/ef04e5578a8cde2919e8c32cd6b91cb0ae6afd2e",
        "files": [
          "upnp/src/genlib/service_table/service_table.c"
        ],
        "message": "Fix excess of parenthesis and some coding style",
        "before_after_code_files": [
          "upnp/src/genlib/service_table/service_table.c||upnp/src/genliservice_table/service_table.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "upnp/src/genlib/service_table/service_table.c||upnp/src/genlib/service_table/service_table.c"
          ],
          "candidate": [
            "upnp/src/genlib/service_table/service_table.c||upnp/src/genliservice_table/service_table.c"
          ]
        }
      },
      "candidate_diff": {
        "upnp/src/genlib/service_table/service_table.c||upnp/src/genliservice_table/service_table.c": [
          "File: upnp/src/genlib/service_table/service_table.c -> upnp/src/genliservice_table/service_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  out->ToSendEventKey = in->ToSendEventKey;",
          "67:  out->expireTime = in->expireTime;",
          "68:  out->active = in->active;",
          "71:   return return_code;",
          "72:  ListInit(&out->outgoing, 0, 0);",
          "73:  out->next = NULL;",
          "74:  return HTTP_SUCCESS;",
          "",
          "[Removed Lines]",
          "69:  if ((return_code = copy_URL_list(",
          "70:        &in->DeliveryURLs, &out->DeliveryURLs)) != HTTP_SUCCESS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  subscription *previous = NULL;",
          "98:  while (finger) {",
          "101:     previous->next = finger->next;",
          "103:     service->subscriptionList = finger->next;",
          "104:    finger->next = NULL;",
          "105:    freeSubscriptionList(finger);",
          "106:    finger = NULL;",
          "",
          "[Removed Lines]",
          "99:   if (!(strcmp(sid, finger->sid))) {",
          "100:    if (previous)",
          "102:    else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:  subscription *next = service->subscriptionList;",
          "118:  subscription *previous = NULL;",
          "119:  subscription *found = NULL;",
          "121:  time_t current_time;",
          "124:   if (!strcmp(next->sid, sid))",
          "125:    found = next;",
          "126:   else {",
          "",
          "[Removed Lines]",
          "123:  while ((next) && (found == NULL)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:   }",
          "130:  }",
          "131:  if (found) {",
          "133:   time(&current_time);",
          "137:     previous->next = found->next;",
          "139:     service->subscriptionList = found->next;",
          "140:    found->next = NULL;",
          "141:    freeSubscriptionList(found);",
          "142:    found = NULL;",
          "",
          "[Removed Lines]",
          "134:   if ((found->expireTime != 0) &&",
          "135:    (found->expireTime < current_time)) {",
          "136:    if (previous)",
          "138:    else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:  time(&current_time);",
          "159:   previous = current;",
          "160:   current = current->next;",
          "163:    notDone = 0;",
          "164:    next = current;",
          "167:    previous->next = current->next;",
          "168:    current->next = NULL;",
          "169:    freeSubscriptionList(current);",
          "",
          "[Removed Lines]",
          "158:  while ((notDone) && (current)) {",
          "162:   if (current == NULL) {",
          "165:   } else if ((current->expireTime != 0) &&",
          "166:       (current->expireTime < current_time)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "247:  if (table) {",
          "248:   finger = table->serviceList;",
          "249:   while (finger) {",
          "252:     return finger;",
          "253:    }",
          "254:    finger = finger->next;",
          "",
          "[Removed Lines]",
          "250:    if ((!strcmp(serviceId, finger->serviceId)) &&",
          "251:     (!strcmp(UDN, finger->UDN))) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:  uri_type parsed_url;",
          "282:  uri_type parsed_url_in;",
          "288:   finger = table->serviceList;",
          "289:   while (finger) {",
          "295:      if (!token_cmp(&parsed_url.pathquery,",
          "297:       return finger;",
          "298:     }",
          "299:    finger = finger->next;",
          "300:   }",
          "301:  }",
          "",
          "[Removed Lines]",
          "284:  if ((table) && (parse_uri(eventURLPath,",
          "285:     strlen(eventURLPath),",
          "286:     &parsed_url_in) == HTTP_SUCCESS)) {",
          "290:    if (finger->eventURL)",
          "291:     if ((parse_uri(finger->eventURL,",
          "292:           strlen(finger->eventURL),",
          "293:           &parsed_url) == HTTP_SUCCESS)) {",
          "296:           &parsed_url_in.pathquery))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "326:  uri_type parsed_url;",
          "327:  uri_type parsed_url_in;",
          "332:   finger = table->serviceList;",
          "333:   while (finger) {",
          "338:      if (!token_cmp(&parsed_url.pathquery,",
          "340:       return finger;",
          "341:     }",
          "342:    finger = finger->next;",
          "343:   }",
          "344:  }",
          "",
          "[Removed Lines]",
          "329:  if ((table) && (parse_uri(controlURLPath,",
          "330:     strlen(controlURLPath),",
          "331:     &parsed_url_in) == HTTP_SUCCESS)) {",
          "334:    if (finger->controlURL)",
          "335:     if ((parse_uri(finger->controlURL,",
          "336:           strlen(finger->controlURL),",
          "337:           &parsed_url) == HTTP_SUCCESS)) {",
          "339:           &parsed_url_in.pathquery))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "664:  IXML_Node *child = (IXML_Node *)ixmlNode_getFirstChild(node);",
          "665:  const DOMString temp = NULL;",
          "668:   temp = ixmlNode_getNodeValue(child);",
          "669:   return ixmlCloneDOMString(temp);",
          "670:  } else {",
          "671:   return NULL;",
          "",
          "[Removed Lines]",
          "667:  if ((child != 0) && (ixmlNode_getNodeType(child) == eTEXT_NODE)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "691: int getSubElement(const char *element_name, IXML_Node *node, IXML_Node **out)",
          "692: {",
          "694:  const DOMString NodeName = NULL;",
          "695:  int found = 0;",
          "697:  IXML_Node *child = (IXML_Node *)ixmlNode_getFirstChild(node);",
          "699:  (*out) = NULL;",
          "703:   switch (ixmlNode_getNodeType(child)) {",
          "704:   case eELEMENT_NODE:",
          "706:    NodeName = ixmlNode_getNodeName(child);",
          "707:    if (!strcmp(NodeName, element_name)) {",
          "708:     (*out) = child;",
          "",
          "[Removed Lines]",
          "701:  while ((child != NULL) && (!found)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "758:   getSubElement(\"serviceList\", node, &serviceList)) {",
          "759:   serviceNodeList = ixmlElement_getElementsByTagName(",
          "760:    (IXML_Element *)serviceList, \"service\");",
          "762:    NumOfServices = ixmlNodeList_length(serviceNodeList);",
          "763:    for (i = 0lu; i < NumOfServices; i++) {",
          "764:     current_service =",
          "",
          "[Removed Lines]",
          "761:   if (serviceNodeList != NULL) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "915:      currentDevice, &next_end, URLBase);",
          "916:     if (next_end)",
          "917:      end = next_end;",
          "919:     head = getServiceList(",
          "920:      currentDevice, &end, URLBase);",
          "921:   }",
          "922:   ixmlNodeList_free(deviceList);",
          "923:  }",
          "",
          "[Removed Lines]",
          "918:    } else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "956:   start_search = in->serviceList;",
          "957:   deviceList = ixmlElement_getElementsByTagName(",
          "958:    (IXML_Element *)root, \"device\");",
          "960:    NumOfDevices = ixmlNodeList_length(deviceList);",
          "961:    for (i = 0lu; i < NumOfDevices; i++) {",
          "962:     if ((start_search) &&",
          "",
          "[Removed Lines]",
          "959:   if (deviceList != NULL) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1096:     out->URLBase = ixmlCloneDOMString(\"\");",
          "1097:    }",
          "1098:   }",
          "1102:    return 1;",
          "1103:   }",
          "1104:  }",
          "",
          "[Removed Lines]",
          "1100:   if ((out->serviceList = getAllServiceList(",
          "1101:         root, out->URLBase, &out->endServiceList))) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}