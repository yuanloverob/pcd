{
  "cve_id": "CVE-2016-2559",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in the format function in libraries/sql-parser/src/Utils/Error.php in the SQL parser in phpMyAdmin 4.5.x before 4.5.5.1 allows remote authenticated users to inject arbitrary web script or HTML via a crafted query.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "3a6a9a807d99371ee126635e1a505fc1fe0df32c",
  "patch_info": {
    "commit_hash": "3a6a9a807d99371ee126635e1a505fc1fe0df32c",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/3a6a9a807d99371ee126635e1a505fc1fe0df32c",
    "files": [
      "libraries/sql-parser/src/Utils/Error.php"
    ],
    "message": "Escape query when displaying\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
    "before_after_code_files": [
      "libraries/sql-parser/src/Utils/Error.php||libraries/sql-parser/src/Utils/Error.php"
    ]
  },
  "patch_diff": {
    "libraries/sql-parser/src/Utils/Error.php||libraries/sql-parser/src/Utils/Error.php": [
      "File: libraries/sql-parser/src/Utils/Error.php -> libraries/sql-parser/src/Utils/Error.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:                 ++$i,",
      "91:                 $err[0],",
      "92:                 $err[1],",
      "94:                 $err[3]",
      "95:             );",
      "96:         }",
      "",
      "[Removed Lines]",
      "93:                 $err[2],",
      "",
      "[Added Lines]",
      "93:                 htmlspecialchars($err[2]),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c123e0f7b470856578a6db0cc4e314475fc6b45e",
      "candidate_info": {
        "commit_hash": "c123e0f7b470856578a6db0cc4e314475fc6b45e",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/c123e0f7b470856578a6db0cc4e314475fc6b45e",
        "files": [
          "libraries/Util.class.php",
          "libraries/plugins/export/ExportSql.class.php",
          "libraries/sql-parser/src/Utils/Error.php"
        ],
        "message": "Replaced the old parser in utilities. Updated sql-parser library to udan11/sql-parser@9478c9a.\n\nSigned-off-by: Dan Ungureanu <udan1107@gmail.com>",
        "before_after_code_files": [
          "libraries/Util.class.php||libraries/Util.class.php",
          "libraries/plugins/export/ExportSql.class.php||libraries/plugins/export/ExportSql.class.php",
          "libraries/sql-parser/src/Utils/Error.php||libraries/sql-parser/src/Utils/Error.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/sql-parser/src/Utils/Error.php||libraries/sql-parser/src/Utils/Error.php"
          ],
          "candidate": [
            "libraries/sql-parser/src/Utils/Error.php||libraries/sql-parser/src/Utils/Error.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Util.class.php||libraries/Util.class.php": [
          "File: libraries/Util.class.php -> libraries/Util.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:     public static function mysqlDie(",
          "604:         $is_modify_link = true, $back_url = '', $exit = true",
          "605:     ) {",
          "606:         global $table, $db;",
          "608:         $error_msg = '';",
          "612:         }",
          "615:         }",
          "622:         } else {",
          "624:         }",
          "638:             }",
          "641:             $error_msg .= '<p><strong>' . __('SQL query:') . '</strong>' . \"\\n\";",
          "642:             $formattedSqlToLower = /*overload*/mb_strtolower($formatted_sql);",
          "643:             if (/*overload*/mb_strstr($formattedSqlToLower, 'select')) {",
          "645:                 $error_msg .= self::showMySQLDocu('SELECT');",
          "646:             }",
          "647:             if ($is_modify_link) {",
          "648:                 $_url_params = array(",
          "650:                     'show_query' => 1,",
          "651:                 );",
          "652:                 if (/*overload*/mb_strlen($table)) {",
          "",
          "[Removed Lines]",
          "603:         $error_message = '', $the_query = '',",
          "610:         if (! $error_message) {",
          "611:             $error_message = $GLOBALS['dbi']->getError();",
          "613:         if (! $the_query && ! empty($GLOBALS['sql_query'])) {",
          "614:             $the_query = $GLOBALS['sql_query'];",
          "618:         if (! function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {",
          "619:             $formatted_sql = htmlspecialchars($the_query);",
          "620:         } elseif (empty($the_query) || (trim($the_query) == '')) {",
          "621:             $formatted_sql = '';",
          "623:             $formatted_sql = self::formatSql($the_query, true);",
          "626:         $error_msg .= \"\\n\" . '<!-- PMA-SQL-ERROR -->' . \"\\n\";",
          "627:         $error_msg .= '    <div class=\"error\"><h1>' . __('Error')",
          "628:             . '</h1>' . \"\\n\";",
          "633:         if (! empty($the_query) && ! /*overload*/mb_strstr($the_query, 'connect')) {",
          "635:             if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {",
          "636:                 $error_msg .= PMA_SQP_getErrorString() . \"\\n\";",
          "637:                 $error_msg .= '<br />' . \"\\n\";",
          "649:                     'sql_query' => $the_query,",
          "",
          "[Added Lines]",
          "604:         $server_msg = '', $sql_query = '',",
          "616:         if (empty($server_msg)) {",
          "617:             $server_msg = $GLOBALS['dbi']->getError();",
          "621:         if ((empty($sql_query) && (!empty($GLOBALS['sql_query'])))) {",
          "622:             $sql_query = $GLOBALS['sql_query'];",
          "624:         $sql_query = trim($sql_query);",
          "630:         $lexer = new SqlParser\\Lexer($sql_query);",
          "636:         $parser = new SqlParser\\Parser($lexer->list);",
          "642:         $errors = SqlParser\\Utils\\Error::get(array($lexer, $parser));",
          "644:         if (empty($sql_query)) {",
          "645:             $formated_sql = '';",
          "646:         } elseif (count($errors)) {",
          "647:             $formatted_sql = htmlspecialchars($sql_query);",
          "649:             $formatted_sql = self::formatSql($sql_query, true);",
          "652:         $error_msg .= '<div class=\"error\"><h1>' . __('Error') . '</h1>';",
          "656:         if ((!empty($sql_query)) && (!(mb_strstr($sql_query, 'connect')))) {",
          "659:             if (!empty($errors)) {",
          "660:                 $error_msg .= '<p><strong>' . __('Static analysis:') . '</strong></p>';",
          "661:                 $error_msg .= '<p>' . sprintf(",
          "662:                     __('%d errors were found during analysis.'), count($errors)",
          "663:                 ) . '</p>';",
          "664:                 $error_msg .= '<p><ol>';",
          "665:                 $error_msg .= implode(",
          "666:                     SqlParser\\Utils\\Error::format(",
          "667:                         $errors,",
          "668:                         '<li>%2$s (near \"%4$s\" at position %5$d)</li>'",
          "669:                     )",
          "670:                 );",
          "671:                 $error_msg .= '</ol></p>';",
          "686:                     'sql_query' => $sql_query,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "666:                 $error_msg .= $doedit_goto",
          "667:                    . self::getIcon('b_edit.png', __('Edit'))",
          "668:                    . '</a>';",
          "670:             $error_msg .= '    </p>' . \"\\n\"",
          "671:                 . '<p>' . \"\\n\"",
          "672:                 . $formatted_sql . \"\\n\"",
          "673:                 . '</p>' . \"\\n\";",
          "678:                 \"@((\\015\\012)|(\\015)|(\\012)){3,}@\",",
          "679:                 \"\\n\\n\",",
          "681:             );",
          "682:         }",
          "707:         $error_msg .= '</div>';",
          "709:         $_SESSION['Import_message']['message'] = $error_msg;",
          "711:         if (!$exit) {",
          "",
          "[Removed Lines]",
          "669:             } // end if",
          "674:         } // end if",
          "676:         if (! empty($error_message)) {",
          "677:             $error_message = preg_replace(",
          "680:                 $error_message",
          "685:         $error_msg .= '<p>' . \"\\n\"",
          "686:             . '    <strong>' . __('MySQL said: ') . '</strong>'",
          "687:             . self::showMySQLDocu('Error-messages-server')",
          "688:             . \"\\n\"",
          "689:             . '</p>' . \"\\n\";",
          "696:         $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);",
          "698:         $error_message = str_replace(",
          "699:             \"\\t\", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message",
          "700:         );",
          "702:         $error_message = nl2br($error_message);",
          "704:         $error_msg .= '<code>' . \"\\n\"",
          "705:             . $error_message . \"\\n\"",
          "706:             . '</code><br />' . \"\\n\";",
          "",
          "[Added Lines]",
          "706:             }",
          "712:         }",
          "715:         if (!empty($server_msg)) {",
          "716:             $server_msg = preg_replace(",
          "719:                 $server_msg",
          "720:             );",
          "723:             $error_msg .= '<p>' . \"\\n\"",
          "724:                 . '    <strong>' . __('MySQL said: ') . '</strong>'",
          "725:                 . self::showMySQLDocu('Error-messages-server')",
          "726:                 . \"\\n\"",
          "727:                 . '</p>' . \"\\n\";",
          "734:             $server_msg = str_replace(",
          "735:                 array('  ', \"\\t\"),",
          "736:                 array('&nbsp;&nbsp;', '&nbsp;&nbsp;&nbsp;&nbsp;'),",
          "737:                 $server_msg",
          "741:             $server_msg = nl2br($server_msg);",
          "743:             $error_msg .= '<code>' . $server_msg . '</code><br/>';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "713:         }",
          "723:             $response = PMA_Response::getInstance();",
          "724:             $response->isSuccess(false);",
          "725:             $response->addJSON('message', $error_msg);",
          "726:             exit;",
          "727:         }",
          "729:             if (/*overload*/mb_strstr($back_url, '?')) {",
          "730:                 $back_url .= '&amp;no_history=true';",
          "731:             } else {",
          "",
          "[Removed Lines]",
          "720:         if (isset($GLOBALS['is_ajax_request'])",
          "721:             && $GLOBALS['is_ajax_request'] == true",
          "722:         ) {",
          "728:         if (! empty($back_url)) {",
          "",
          "[Added Lines]",
          "757:         if (!empty($GLOBALS['is_ajax_request'])) {",
          "764:         if (!empty($back_url)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "738:                 . '[ <a href=\"' . $back_url . '\">' . __('Back') . '</a> ]'",
          "739:                 . '</fieldset>' . \"\\n\\n\";",
          "740:         }",
          "",
          "[Removed Lines]",
          "741:         echo $error_msg;",
          "742:         exit;",
          "743:     } // end of the 'mysqlDie()' function",
          "",
          "[Added Lines]",
          "778:         exit($error_msg);",
          "779:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1087:                         ) . '[...]'",
          "1088:                     )",
          "1089:                 );",
          "1140:             }",
          "1142:             if (! empty($GLOBALS['show_as_php'])) {",
          "",
          "[Removed Lines]",
          "1090:             } elseif (! empty($GLOBALS['parsed_sql'])",
          "1091:                 && $query_base == $GLOBALS['parsed_sql']['raw']",
          "1092:             ) {",
          "1095:                 $parsed_sql = $GLOBALS['parsed_sql'];",
          "1096:             } else {",
          "1098:                 $parsed_sql = PMA_SQP_parse($query_base);",
          "1099:             }",
          "1102:             if (isset($parsed_sql) && ! PMA_SQP_isError()) {",
          "1103:                 $analyzed_display_query = PMA_SQP_analyze($parsed_sql);",
          "1106:                 if ($GLOBALS['cfg']['RememberSorting']",
          "1107:                     && isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1108:                     && isset($GLOBALS['sql_order_to_append'])",
          "1109:                 ) {",
          "1110:                     $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1111:                         . \"\\n\" . $GLOBALS['sql_order_to_append']",
          "1112:                         . $analyzed_display_query[0]['limit_clause'] . ' '",
          "1113:                         . $analyzed_display_query[0]['section_after_limit'];",
          "1115:                     $analyzed_display_query[0]['section_before_limit']",
          "1116:                         .= $GLOBALS['sql_order_to_append'];",
          "1117:                     $analyzed_display_query[0]['order_by_clause']",
          "1118:                         = $GLOBALS['sorted_col'];",
          "1119:                 }",
          "1133:                 if (isset($analyzed_display_query[0]['queryflags']['select_from'])",
          "1134:                     && ! empty($GLOBALS['sql_limit_to_append'])",
          "1135:                 ) {",
          "1136:                     $query_base = $analyzed_display_query[0]['section_before_limit']",
          "1137:                         . \"\\n\" . $GLOBALS['sql_limit_to_append']",
          "1138:                         . $analyzed_display_query[0]['section_after_limit'];",
          "1139:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libraries/plugins/export/ExportSql.class.php||libraries/plugins/export/ExportSql.class.php": [
          "File: libraries/plugins/export/ExportSql.class.php -> libraries/plugins/export/ExportSql.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2565:         $old_database = $db;",
          "2574:         if ($statement->options->has('TABLE')) {",
          "",
          "[Removed Lines]",
          "2571:         $old_table = $table;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Utils/Error.php||libraries/sql-parser/src/Utils/Error.php": [
          "File: libraries/sql-parser/src/Utils/Error.php -> libraries/sql-parser/src/Utils/Error.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "9: namespace SqlParser\\Utils;",
          "11: use SqlParser\\Lexer;",
          "12: use SqlParser\\Parser;",
          "23: class Error",
          "24: {",
          "38:     public static function get($objs)",
          "39:     {",
          "40:         $ret = array();",
          "42:         foreach ($objs as $obj) {",
          "43:             if ($obj instanceof Lexer) {",
          "44:                 foreach ($obj->errors as $err) {",
          "45:                     $ret[] = array(",
          "46:                         $err->getMessage(),",
          "47:                         $err->getCode(),",
          "48:                         $err->ch,",
          "49:                         $err->pos",
          "50:                     );",
          "51:                 }",
          "52:             } elseif ($obj instanceof Parser) {",
          "53:                 foreach ($obj->errors as $err) {",
          "54:                     $ret[] = array(",
          "55:                         $err->getMessage(),",
          "56:                         $err->getCode(),",
          "57:                         $err->token->token,",
          "58:                         $err->token->position",
          "59:                     );",
          "60:                 }",
          "61:             }",
          "62:         }",
          "64:         return $ret;",
          "65:     }",
          "80:     public static function format(",
          "81:         $errors, $format = '#%1$d: %2$s (near \"%4$s\" at position %5$d)'",
          "82:     ) {",
          "83:         $ret = array();",
          "85:         $i = 0;",
          "86:         foreach ($errors as $key => $err) {",
          "87:             $ret[$key] = sprintf(",
          "88:                 $format, ++$i, $err[0], $err[1], $err[2], $err[3]",
          "89:             );",
          "90:         }",
          "92:         return $ret;",
          "93:     }",
          "94: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}