{
  "cve_id": "CVE-2018-6611",
  "cve_desc": "soundlib/Load_stp.cpp in OpenMPT through 1.27.04.00, and libopenmpt before 0.3.6, has an out-of-bounds read via a malformed STP file.",
  "repo": "OpenMPT/openmpt",
  "patch_hash": "b60b322cf9f0ffa624018f1bb9783edf0dc908c3",
  "patch_info": {
    "commit_hash": "b60b322cf9f0ffa624018f1bb9783edf0dc908c3",
    "repo": "OpenMPT/openmpt",
    "commit_url": "https://github.com/OpenMPT/openmpt/commit/b60b322cf9f0ffa624018f1bb9783edf0dc908c3",
    "files": [
      "soundlib/Load_stp.cpp"
    ],
    "message": "[Sec] STP: Possible out-of-bounds memory read with malformed STP files (caught with afl-fuzz). Patch-by: sagamusix (originally committed as part of r9568)\n\ngit-svn-id: https://source.openmpt.org/svn/openmpt/branches/OpenMPT-1.27@9576 56274372-70c3-4bfc-bfc3-4c3a0b034d27",
    "before_after_code_files": [
      "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
    ]
  },
  "patch_diff": {
    "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp": [
      "File: soundlib/Load_stp.cpp -> soundlib/Load_stp.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "109: static void ConvertLoopSlice(ModSample &src, ModSample &dest, SmpLength start, SmpLength len, bool loop)",
      "110: {",
      "113:  dest.FreeSample();",
      "114:  dest = src;",
      "",
      "[Removed Lines]",
      "111:  if(!src.HasSampleData()) return;",
      "",
      "[Added Lines]",
      "111:  if(!src.HasSampleData()",
      "112:   || start >= src.nLength",
      "113:   || src.nLength - start < len)",
      "114:  {",
      "115:   return;",
      "116:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162:   {",
      "163:    numLoops = i;",
      "164:    break;",
      "",
      "[Removed Lines]",
      "159:   if((newSmp.nLength + info.loopLength > MAX_SAMPLE_LENGTH) ||",
      "160:      (info.loopLength > MAX_SAMPLE_LENGTH) ||",
      "161:      (info.loopStart + info.loopLength > smp.nLength))",
      "",
      "[Added Lines]",
      "164:   if(info.loopStart >= smp.nLength",
      "165:    || smp.nLength - info.loopStart < info.loopLength",
      "166:    || newSmp.nLength > MAX_SAMPLE_LENGTH - info.loopLength)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73e5145ad7a944ad27d5f604d4f0c816629ccc1e",
      "candidate_info": {
        "commit_hash": "73e5145ad7a944ad27d5f604d4f0c816629ccc1e",
        "repo": "OpenMPT/openmpt",
        "commit_url": "https://github.com/OpenMPT/openmpt/commit/73e5145ad7a944ad27d5f604d4f0c816629ccc1e",
        "files": [
          "soundlib/Load_stp.cpp"
        ],
        "message": "[Reg] STP: Revert the out-of-bounds memory read fixes from r9568. This will re re-applied immediately as the next commit in order to facilitate easier linking to the security fix alone.\n\ngit-svn-id: https://source.openmpt.org/svn/openmpt/branches/OpenMPT-1.27@9575 56274372-70c3-4bfc-bfc3-4c3a0b034d27",
        "before_after_code_files": [
          "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
          ],
          "candidate": [
            "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
          ]
        }
      },
      "candidate_diff": {
        "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp": [
          "File: soundlib/Load_stp.cpp -> soundlib/Load_stp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static void ConvertLoopSlice(ModSample &src, ModSample &dest, SmpLength start, SmpLength len, bool loop)",
          "110: {",
          "118:  dest.FreeSample();",
          "119:  dest = src;",
          "",
          "[Removed Lines]",
          "111:  if(!src.HasSampleData()",
          "112:   || start >= src.nLength",
          "113:   || src.nLength - start < len)",
          "114:  {",
          "115:   return;",
          "116:  }",
          "",
          "[Added Lines]",
          "111:  if(!src.HasSampleData()) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:   {",
          "168:    numLoops = i;",
          "169:    break;",
          "",
          "[Removed Lines]",
          "164:   if(info.loopStart >= smp.nLength",
          "165:    || smp.nLength - info.loopStart < info.loopLength",
          "166:    || newSmp.nLength > MAX_SAMPLE_LENGTH - info.loopLength)",
          "",
          "[Added Lines]",
          "159:   if((newSmp.nLength + info.loopLength > MAX_SAMPLE_LENGTH) ||",
          "160:      (info.loopLength > MAX_SAMPLE_LENGTH) ||",
          "161:      (info.loopStart + info.loopLength > smp.nLength))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b88c1192b2696d04927f927d208f7063780954fa",
      "candidate_info": {
        "commit_hash": "b88c1192b2696d04927f927d208f7063780954fa",
        "repo": "OpenMPT/openmpt",
        "commit_url": "https://github.com/OpenMPT/openmpt/commit/b88c1192b2696d04927f927d208f7063780954fa",
        "files": [
          "contrib/fuzzing/all_formats.dict",
          "soundlib/Load_stp.cpp"
        ],
        "message": "Merged revision(s) 9567 from trunk/OpenMPT: [Fix] STP: Possible out-of-bounds memory read with malformed STP files (caught with afl-fuzz). ........\n\ngit-svn-id: https://source.openmpt.org/svn/openmpt/branches/OpenMPT-1.27@9568 56274372-70c3-4bfc-bfc3-4c3a0b034d27",
        "before_after_code_files": [
          "contrib/fuzzing/all_formats.dict||contrib/fuzzing/all_formats.dict",
          "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
          ],
          "candidate": [
            "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp"
          ]
        }
      },
      "candidate_diff": {
        "contrib/fuzzing/all_formats.dict||contrib/fuzzing/all_formats.dict": [
          "File: contrib/fuzzing/all_formats.dict -> contrib/fuzzing/all_formats.dict",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: pt36=\"CMNT\"",
          "139: pt36=\"PTDT\"",
          "140: sfx=\"SO31\"",
          "145: mptm=\"->MPT_ORIGINAL_IT<-\"",
          "146: mptm=\".tpm\"",
          "",
          "[Removed Lines]",
          "141: # There is currently no way to fuzz external Startrekker instrument files.",
          "142: #stam=\"ST1.3 ModuleINFO\"",
          "143: #stam=\"AudioSculpture10\"",
          "",
          "[Added Lines]",
          "141: # External Startrekker instrument files.",
          "142: stam=\"ST1.3 ModuleINFO\"",
          "143: stam=\"AudioSculpture10\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: s3m=\"SCRM\"",
          "205: s3m=\"SCRS\"",
          "212: ult=\"MAS_UTrack_V004\"",
          "",
          "[Removed Lines]",
          "207: stm=\"!Scream!\\x1A\\x02\"",
          "208: #stm=\"BMOD2STM\\x1A\\x02\"",
          "210: stp=\"STP3\\x00\"",
          "",
          "[Added Lines]",
          "207: stm=\"\\x1A\\x02\\x15\"",
          "209: stp=\"STP3\\x02\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218: xm=\"Extended Module: \"",
          "219: xm=\"OpenMPT \"",
          "221: xm=\"MilkyTracker        \"",
          "222: xm=\"text\"",
          "223: xm=\"MIDI\"",
          "",
          "[Removed Lines]",
          "220: xm=\"FastTracker v 2.00  \"",
          "",
          "[Added Lines]",
          "219: #xm=\"FastTracker v 2.00  \"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302: midi=\"MThd\\x00\\x00\\x00\\x06\\x00\\x01\\x00\\x01\\x01\\xE0MTrk\"",
          "304: wave=\"WAVEfmt \"",
          "",
          "[Removed Lines]",
          "305: wave=\"data\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "soundlib/Load_stp.cpp||soundlib/Load_stp.cpp": [
          "File: soundlib/Load_stp.cpp -> soundlib/Load_stp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static void ConvertLoopSlice(ModSample &src, ModSample &dest, SmpLength start, SmpLength len, bool loop)",
          "110: {",
          "113:  dest.FreeSample();",
          "115:  dest = src;",
          "116:  dest.nLength = len;",
          "117:  dest.pSample = nullptr;",
          "",
          "[Removed Lines]",
          "111:  if(!src.HasSampleData()) return;",
          "",
          "[Added Lines]",
          "111:  if(!src.HasSampleData()",
          "112:   || start >= src.nLength",
          "113:   || src.nLength - start < len)",
          "114:  {",
          "115:   return;",
          "116:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:  size_t numLoops = loopList.size();",
          "154:  for(size_t i = 0; i < numLoops; i++)",
          "155:  {",
          "156:   STPLoopInfo &info = loopList[i];",
          "163:   {",
          "164:    numLoops = i;",
          "165:    break;",
          "",
          "[Removed Lines]",
          "160:   if((newSmp.nLength + info.loopLength > MAX_SAMPLE_LENGTH) ||",
          "161:      (info.loopLength > MAX_SAMPLE_LENGTH) ||",
          "162:      (info.loopStart + info.loopLength > smp.nLength))",
          "",
          "[Added Lines]",
          "164:   if(info.loopStart >= smp.nLength",
          "165:    || smp.nLength - info.loopStart < info.loopLength",
          "166:    || newSmp.nLength > MAX_SAMPLE_LENGTH - info.loopLength)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:  };",
          "381:  std::vector<ChannelMemory> channelMemory(m_nChannels);",
          "382:  uint8 globalVolSlide = 0;",
          "384:  for(uint16 pat = 0; pat < numPatterns; pat++)",
          "385:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:  uint8 speedFrac = static_cast<uint8>(fileHeader.speedFrac);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:    bool shouldDelay;",
          "413:    {",
          "414:    default: shouldDelay = false; break;",
          "",
          "[Removed Lines]",
          "412:    switch(fileHeader.speedFrac & 3)",
          "",
          "[Added Lines]",
          "417:    switch(speedFrac & 3)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "475:      chnMem.autoPortaDown = 0;",
          "476:      chnMem.autoTonePorta = 0;",
          "479:      break;",
          "481:     case 0x04: // auto fine portamento down",
          "",
          "[Removed Lines]",
          "478:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "483:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "484:      chnMem.autoPortaDown = 0;",
          "485:      chnMem.autoTonePorta = 0;",
          "488:      break;",
          "490:     case 0x05: // auto portamento up",
          "",
          "[Removed Lines]",
          "487:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "492:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "493:      chnMem.autoPortaDown = 0;",
          "494:      chnMem.autoTonePorta = 0;",
          "497:      break;",
          "499:     case 0x06: // auto portamento down",
          "",
          "[Removed Lines]",
          "496:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "501:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "502:      chnMem.autoPortaDown = m.param;",
          "503:      chnMem.autoTonePorta = 0;",
          "506:      break;",
          "508:     case 0x07: // set global volume",
          "",
          "[Removed Lines]",
          "505:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "510:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "513:     case 0x08: // auto global fine volume slide",
          "514:      globalVolSlide = swapped;",
          "516:      break;",
          "518:     case 0x09: // fine portamento up",
          "",
          "[Removed Lines]",
          "515:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "520:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "528:     case 0x0B: // auto fine volume slide",
          "529:      chnMem.autoVolSlide = swapped;",
          "531:      break;",
          "533:     case 0x0C: // set volume",
          "534:      m.volcmd = VOLCMD_VOLUME;",
          "535:      m.vol = m.param;",
          "536:      chnMem.autoVolSlide = 0;",
          "538:      break;",
          "540:     case 0x0D: // volume slide (param is swapped compared to .mod)",
          "",
          "[Removed Lines]",
          "530:      m.command = m.param = 0;",
          "537:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "535:      m.command = CMD_NONE;",
          "542:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "548:       m.vol = m.param & 0xF;",
          "549:      }",
          "550:      chnMem.autoVolSlide = 0;",
          "552:      break;",
          "554:     case 0x0E: // set filter (also uses opposite value compared to .mod)",
          "",
          "[Removed Lines]",
          "551:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "556:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "559:     case 0x0F: // set speed",
          "560:      m.command = CMD_SPEED;",
          "562:      m.param >>= 4;",
          "563:      break;",
          "565:     case 0x10: // auto vibrato",
          "566:      chnMem.autoVibrato = m.param;",
          "567:      chnMem.vibratoMem = 0;",
          "569:      break;",
          "571:     case 0x11: // auto tremolo",
          "",
          "[Removed Lines]",
          "561:      fileHeader.speedFrac = m.param & 0xF;",
          "568:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "566:      speedFrac = m.param & 0x0F;",
          "573:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "573:       chnMem.autoTremolo = m.param;",
          "574:      else",
          "575:       chnMem.autoTremolo = 0;",
          "577:      break;",
          "579:     case 0x12: // pattern break",
          "",
          "[Removed Lines]",
          "576:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "581:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "587:      chnMem.autoTonePorta = m.param;",
          "589:      chnMem.tonePortaMem = 0;",
          "591:      break;",
          "593:     case 0x14: // position jump",
          "",
          "[Removed Lines]",
          "590:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "595:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "607:       }",
          "608:      }",
          "611:      break;",
          "613:     case 0x17: // play only loop nn",
          "",
          "[Removed Lines]",
          "610:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "615:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "624:       }",
          "625:      }",
          "628:      break;",
          "630:     case 0x18: // play sequence without loop",
          "",
          "[Removed Lines]",
          "627:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "632:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "644:       m.instr = static_cast<ModCommand::INSTR>(nonLooped[m.instr - 1]);",
          "645:      }",
          "648:      break;",
          "650:     case 0x19: // play only loop nn without loop",
          "",
          "[Removed Lines]",
          "647:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "652:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "661:       }",
          "662:      }",
          "665:      break;",
          "667:     case 0x1D: // fine volume slide (nibble order also swapped)",
          "",
          "[Removed Lines]",
          "664:      m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "669:      m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "679:      if(m.param & 0xF0)",
          "680:      {",
          "681:       chnMem.autoVolSlide = m.param >> 4;",
          "683:      } else",
          "684:      {",
          "685:       m.command = CMD_MODCMDEX;",
          "",
          "[Removed Lines]",
          "682:       m.command = m.param = 0;",
          "",
          "[Added Lines]",
          "687:       m.command = CMD_NONE;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "705:      if((m.param & 0xF0) == 0x60 || (m.param & 0xF0) == 0xE0)",
          "706:       m.command = CMD_MODCMDEX;",
          "707:      else",
          "709:      break;",
          "711:     case 0x4F: // set speed/tempo",
          "712:      if(m.param < 0x20)",
          "713:      {",
          "714:       m.command = CMD_SPEED;",
          "716:      } else",
          "717:      {",
          "718:       m.command = CMD_TEMPO;",
          "",
          "[Removed Lines]",
          "708:       m.command = m.param = 0;",
          "715:       fileHeader.speedFrac = 0;",
          "",
          "[Added Lines]",
          "713:       m.command = CMD_NONE;",
          "720:       speedFrac = 0;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "727:     bool didVolSlide = false;",
          "731:     {",
          "732:      if(chnMem.autoVolSlide & 0xF0)",
          "733:      {",
          "",
          "[Removed Lines]",
          "730:     if(chnMem.autoVolSlide && !m.volcmd)",
          "",
          "[Added Lines]",
          "735:     if(chnMem.autoVolSlide && m.volcmd == VOLCMD_NONE)",
          "",
          "---------------"
        ]
      }
    }
  ]
}