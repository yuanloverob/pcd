{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb830e75e03f6118c3ce48d4b86c14ff92b5a3c3",
      "candidate_info": {
        "commit_hash": "fb830e75e03f6118c3ce48d4b86c14ff92b5a3c3",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/fb830e75e03f6118c3ce48d4b86c14ff92b5a3c3",
        "files": [
          "BLSCrypto.cpp",
          "testw.cpp",
          "testw.py"
        ],
        "message": "SKALE-2002 add tests",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "testw.cpp||testw.cpp",
          "testw.py||testw.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:     REQUIRE(errStatus == SGX_SUCCESS);",
          "337: }",
          "339: TEST_CASE_METHOD(TestFixture, \"ECDSA key gen\", \"[ecdsa-key-gen]\") {",
          "340:     vector<char> errMsg(BUF_LEN, 0);",
          "341:     int errStatus = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333: TEST_CASE_METHOD(TestFixture, \"ECDSA AES keygen and signature test\", \"[ecdsa-aes-key-sig-gen]\") {",
          "334:     vector<char> errMsg(BUF_LEN, 0);",
          "335:     int errStatus = 0;",
          "336:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
          "337:     vector<char> pubKeyX(BUF_LEN, 0);",
          "338:     vector<char> pubKeyY(BUF_LEN, 0);",
          "340:     uint32_t encLen = 0;",
          "341:     status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen, pubKeyX.data(),",
          "342:                                      pubKeyY.data());",
          "343:     REQUIRE(status == SGX_SUCCESS);",
          "344:     REQUIRE(errStatus == SGX_SUCCESS);",
          "347:     string hex = SAMPLE_HEX_HASH;",
          "348:     vector<char> signatureR(BUF_LEN, 0);",
          "349:     vector<char> signatureS(BUF_LEN, 0);",
          "350:     uint8_t signatureV = 0;",
          "352:     status = trustedEcdsaSignAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), encLen, (unsigned char *) hex.data(),",
          "353:                               signatureR.data(),",
          "354:                               signatureS.data(), &signatureV, 16);",
          "355:     REQUIRE(status == SGX_SUCCESS);",
          "356:     REQUIRE(errStatus == SGX_SUCCESS);",
          "357: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:     REQUIRE(errStatus == SGX_SUCCESS);",
          "351: }",
          "353: TEST_CASE_METHOD(TestFixture, \"ECDSA get public key\", \"[ecdsa-get-pub-key]\") {",
          "354:     int errStatus = 0;",
          "355:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: TEST_CASE_METHOD(TestFixture, \"ECDSA AES key gen\", \"[ecdsa-aes-key-gen]\") {",
          "374:     vector<char> errMsg(BUF_LEN, 0);",
          "375:     int errStatus = 0;",
          "376:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
          "377:     vector<char> pubKeyX(BUF_LEN, 0);",
          "378:     vector<char> pubKeyY(BUF_LEN, 0);",
          "379:     uint32_t encLen = 0;",
          "380:     status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen, pubKeyX.data(),",
          "381:                                      pubKeyY.data());",
          "383:     REQUIRE(status == SGX_SUCCESS);",
          "384:     REQUIRE(errStatus == SGX_SUCCESS);",
          "385: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:                                      pubKeyY.data());",
          "364:     REQUIRE(status == SGX_SUCCESS);",
          "366:     vector<char> receivedPubKeyX(BUF_LEN, 0);",
          "367:     vector<char> receivedPubKeyY(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:     REQUIRE(errStatus == SGX_SUCCESS);",
          "373: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410: TEST_CASE_METHOD(TestFixture, \"ECDSA AES get public key\", \"[ecdsa-aes-get-pub-key]\") {",
          "411:     int errStatus = 0;",
          "412:     vector<char> errMsg(BUF_LEN, 0);",
          "413:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
          "414:     vector<char> pubKeyX(BUF_LEN, 0);",
          "415:     vector<char> pubKeyY(BUF_LEN, 0);",
          "416:     uint32_t encLen = 0;",
          "418:     status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "419:                                      pubKeyY.data());",
          "421:     REQUIRE(status == SGX_SUCCESS);",
          "422:     REQUIRE(errStatus == SGX_SUCCESS);",
          "424:     vector<char> receivedPubKeyX(BUF_LEN, 0);",
          "425:     vector<char> receivedPubKeyY(BUF_LEN, 0);",
          "427:     status = trustedGetPublicEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen, receivedPubKeyX.data(),",
          "428:                                       receivedPubKeyY.data());",
          "429:     REQUIRE(status == SGX_SUCCESS);",
          "430:     REQUIRE(errStatus == SGX_SUCCESS);",
          "431: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "445:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
          "446:     REQUIRE(status == SGX_SUCCESS);",
          "448:     vector<char> secret(BUF_LEN, 0);",
          "449:     vector<char> errMsg1(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "453:                                      (uint8_t *) secret.data(), &dec_len);",
          "455:     REQUIRE(status == SGX_SUCCESS);",
          "456: }",
          "459: TEST_CASE_METHOD(TestFixture, \"DKG public shares test\", \"[dkg-pub-shares]\") {",
          "460:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:     REQUIRE(errStatus == SGX_SUCCESS);",
          "518: TEST_CASE_METHOD(TestFixture, \"DKG AES gen test\", \"[dkg-aes-gen]\") {",
          "519:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "520:     vector<char> errMsg(BUF_LEN, 0);",
          "522:     int errStatus = 0;",
          "523:     uint32_t encLen = 0;",
          "525:     status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
          "526:     REQUIRE(status == SGX_SUCCESS);",
          "527:     REQUIRE(errStatus == SGX_SUCCESS);",
          "529:     vector<char> secret(BUF_LEN, 0);",
          "530:     vector<char> errMsg1(BUF_LEN, 0);",
          "532:     uint32_t dec_len;",
          "533:     status = trustedDecryptDkgSecretAES(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "534:                                      (uint8_t *) secret.data(), &dec_len);",
          "536:     REQUIRE( status == SGX_SUCCESS);",
          "537:     REQUIRE( errStatus == SGX_SUCCESS);",
          "538: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "468:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, n);",
          "469:     REQUIRE(status == SGX_SUCCESS);",
          "471:     vector<char> errMsg1(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:     REQUIRE( errStatus == SGX_SUCCESS );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "489:     status = trustedDecryptDkgSecret(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "490:                                      (uint8_t *) secret.data(), &encLen);",
          "491:     REQUIRE(status == SGX_SUCCESS);",
          "493:     signatures::Dkg dkgObj(t, n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:     REQUIRE( errStatus == SGX_SUCCESS );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "507:     REQUIRE(pubSharesG2 == pubSharesDkg);",
          "508: }",
          "511: TEST_CASE_METHOD(TestFixture, \"DKG encrypted secret shares test\", \"[dkg-encr-sshares]\") {",
          "512:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: TEST_CASE_METHOD(TestFixture, \"DKG AES public shares test\", \"[dkg-aes-pub-shares]\") {",
          "594:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "595:     vector<char> errMsg(BUF_LEN, 0);",
          "597:     int errStatus = 0;",
          "598:     uint32_t encLen = 0;",
          "600:     unsigned t = 32, n = 32;",
          "602:     status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, n);",
          "603:     REQUIRE(status == SGX_SUCCESS);",
          "604:     REQUIRE( errStatus == SGX_SUCCESS );",
          "606:     vector<char> errMsg1(BUF_LEN, 0);",
          "608:     char colon = ':';",
          "609:     vector<char> pubShares(10000, 0);",
          "611:     status = trustedGetPublicSharesAES(eid, &errStatus, errMsg1.data(),",
          "612:                                     encryptedDKGSecret.data(), encLen, pubShares.data(), t, n);",
          "614:     vector <string> g2Strings = splitString(pubShares.data(), ',');",
          "615:     vector <libff::alt_bn128_G2> pubSharesG2;",
          "616:     for (u_int64_t i = 0; i < g2Strings.size(); i++) {",
          "617:         vector <string> coeffStr = splitString(g2Strings.at(i).c_str(), ':');",
          "619:         pubSharesG2.push_back(vectStringToG2(coeffStr));",
          "620:     }",
          "622:     vector<char> secret(BUF_LEN, 0);",
          "624:     status = trustedDecryptDkgSecretAES(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "625:                                      (uint8_t *) secret.data(), &encLen);",
          "626:     REQUIRE(status == SGX_SUCCESS);",
          "627:     REQUIRE( errStatus == SGX_SUCCESS );",
          "629:     signatures::Dkg dkgObj(t, n);",
          "631:     vector <libff::alt_bn128_Fr> poly = splitStringToFr(secret.data(), colon);",
          "632:     vector <libff::alt_bn128_G2> pubSharesDkg = dkgObj.VerificationVector(poly);",
          "633:     for (uint32_t i = 0; i < pubSharesDkg.size(); i++) {",
          "634:         libff::alt_bn128_G2 el = pubSharesDkg.at(i);",
          "635:         el.to_affine_coordinates();",
          "636:         libff::alt_bn128_Fq x_c0_el = el.X.c0;",
          "637:         mpz_t x_c0;",
          "638:         mpz_init(x_c0);",
          "639:         x_c0_el.as_bigint().to_mpz(x_c0);",
          "641:         mpz_clear(x_c0);",
          "642:     }",
          "643:     REQUIRE(pubSharesG2 == pubSharesDkg);",
          "644: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "518:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "519:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 2);",
          "520:     REQUIRE(status == SGX_SUCCESS);",
          "523:     status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data());",
          "524:     REQUIRE(status == SGX_SUCCESS);",
          "526:     vector <uint8_t> encrPRDHKey(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     REQUIRE( errStatus == SGX_SUCCESS );",
          "661:     REQUIRE( errStatus == SGX_SUCCESS );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "533:                                             (char *) pub_keyB.data(), 2, 2, 1);",
          "535:     REQUIRE(status == SGX_SUCCESS);",
          "536: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:     REQUIRE( errStatus == SGX_SUCCESS );",
          "674: }",
          "676: TEST_CASE_METHOD(TestFixture, \"DKG AES encrypted secret shares test\", \"[dkg-aes-encr-sshares]\") {",
          "677:     vector<char> errMsg(BUF_LEN, 0);",
          "678:     vector<char> result(BUF_LEN, 0);",
          "680:     int errStatus = 0;",
          "681:     uint32_t encLen = 0;",
          "683:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "684:     status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 2);",
          "685:     REQUIRE(status == SGX_SUCCESS);",
          "686:     REQUIRE( errStatus == SGX_SUCCESS );",
          "688:     uint64_t enc_len = encLen;",
          "690:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &enc_len);",
          "691:     REQUIRE(status == SGX_SUCCESS);",
          "692:     REQUIRE( errStatus == SGX_SUCCESS );",
          "694:     vector <uint8_t> encrPRDHKey(BUF_LEN, 0);",
          "696:     string pub_keyB = SAMPLE_PUBLIC_KEY_B;",
          "698:     vector<char> s_shareG2(BUF_LEN, 0);",
          "699:     status = trustedGetEncryptedSecretShareAES(eid, &errStatus, errMsg.data(), encrPRDHKey.data(), &encLen, result.data(),",
          "700:                                             s_shareG2.data(),",
          "701:                                             (char *) pub_keyB.data(), 2, 2, 1);",
          "703:     REQUIRE(status == SGX_SUCCESS);",
          "704:     REQUIRE( errStatus == SGX_SUCCESS );",
          "",
          "---------------"
        ],
        "testw.py||testw.py": [
          "File: testw.py -> testw.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:             \"[get-server-status]\",",
          "34:             \"[get-server-version]\",",
          "35:             \"[ecdsa-key-gen]\",",
          "36:             \"[ecdsa-key-sig-gen]\",",
          "37:             \"[ecdsa-get-pub-key]\",",
          "38:             \"[ecdsa-key-gen-api]\",",
          "39:             \"[ecdsa-key-gen-sign-api]\",",
          "40:             \"[bls-key-encrypt]\",",
          "41:             \"[dkg-gen]\",",
          "42:             \"[dkg-encr-sshares]\",",
          "43:             \"[dkg-verify]\",",
          "44:             \"[dkg-api]\",",
          "45:             \"[dkg-bls]\",",
          "46:             \"[dkg-poly-exists]\",",
          "47:             \"[dkg-pub-shares]\",",
          "48:             \"[many-threads-crypto]\",",
          "49:             \"[aes-encrypt-decrypt]\",",
          "50:             \"[sgx-encrypt-decrypt]\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:             \"[ecdsa-aes-key-gen]\",",
          "38:             \"[ecdsa-aes-key-sig-gen]\",",
          "40:             \"[ecdsa-aes-get-pub-key]\",",
          "45:             #\"[dkg-aes-gen]\", <- fix it",
          "47:             \"[dkg-aes-encr-sshares]\",",
          "53:             #\"[dkg-aes-pub-shares]\", <- fix it",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dd9e950ef1dfc6c161989dfd389dbf524ec82f9",
      "candidate_info": {
        "commit_hash": "9dd9e950ef1dfc6c161989dfd389dbf524ec82f9",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/9dd9e950ef1dfc6c161989dfd389dbf524ec82f9",
        "files": [
          "secure_enclave/EnclaveConstants.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "Revert \"SKALE-3067-cleanup-sgx\"\n\nThis reverts commit d7127e0fd1be9a97c2763361cf7d3dabcfeed36d.",
        "before_after_code_files": [
          "secure_enclave/EnclaveConstants.h||secure_enclave/EnclaveConstants.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/EnclaveConstants.h||secure_enclave/EnclaveConstants.h": [
          "File: secure_enclave/EnclaveConstants.h -> secure_enclave/EnclaveConstants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define ADD_ENTROPY_SIZE 32",
          "40: #define DKG_MAX_SEALED_LEN 3100",
          "42: #define SECRET_SHARE_NUM_BYTES 96",
          "",
          "[Removed Lines]",
          "39: #define DKG_BUFER_LENGTH 2496 //3060",
          "",
          "[Added Lines]",
          "39: #define DKG_BUFER_LENGTH 2496//3060",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:         snprintf(errString + strlen(dkg_secret) + 8, BUF_LEN - strlen(dkg_secret) - 8,",
          "1333:                  \"encrypted poly is not equal to decrypted poly\");",
          "1336:     }",
          "1339: }",
          "1341: void",
          "",
          "[Removed Lines]",
          "1335:         return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "230:                                 [out]int *errStatus,",
          "",
          "[Removed Lines]",
          "227:                                 [out] uint64_t* enc_len);",
          "",
          "[Added Lines]",
          "227:                                 [user_check] uint64_t* enc_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7432fd5499e0afdc1d5f44af11c1af5cdc346ae",
      "candidate_info": {
        "commit_hash": "d7432fd5499e0afdc1d5f44af11c1af5cdc346ae",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/d7432fd5499e0afdc1d5f44af11c1af5cdc346ae",
        "files": [
          "ECDSACrypto.cpp",
          "SGXRegistrationServer.cpp",
          "ServerInit.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-1887 Add flag not to use AES in ECDSA procedures",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   char *pub_key_y = (char *)calloc(1024, 1);",
          "52:   uint32_t enc_len = 0;",
          "56:   if ( err_status != 0 ){",
          "57:     std::cerr << \"RPCException thrown\" << std::endl;",
          "58:     throw RPCException(-666, errMsg) ;",
          "",
          "[Removed Lines]",
          "55:   status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "",
          "[Added Lines]",
          "54:   if ( !is_aes)",
          "55:      status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "56:   else status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   }",
          "69:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "70:   keys.at(0) = hexEncrKey;",
          "71:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "",
          "[Removed Lines]",
          "68:   char *hexEncrKey = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "70:   char *hexEncrKey = (char *) calloc(BUF_LEN * 2, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:     throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "120:   }",
          "124:   if (err_status != 0){",
          "125:     throw RPCException(-666, errMsg) ;",
          "126:   }",
          "",
          "[Removed Lines]",
          "123:   status = get_public_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "",
          "[Added Lines]",
          "124:   if ( !is_aes)",
          "125:    status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "126:   else status = get_public_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     spdlog::info(\"encrypted len: {}\", dec_len);",
          "165:   }",
          "169:   if ( err_status != 0){",
          "170:     throw RPCException(-666, errMsg ) ;",
          "171:   }",
          "",
          "[Removed Lines]",
          "168:   status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "[Added Lines]",
          "170:   if (!is_aes)",
          "171:    status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "172:   else status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: int DEBUG_PRINT = 0;",
          "49: int is_sgx_https = 1;",
          "51: SGXRegistrationServer *regs = nullptr;",
          "52: HttpServer *hs2 = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: int is_aes = 0;",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     if (sgxServerInited == 1)",
          "154:         return;",
          "156:     sgxServerInited = 1;",
          "158:     if (is_sgx_https) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:     init_daemon();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     }",
          "166:     init_enclave();",
          "169: }",
          "",
          "[Removed Lines]",
          "168:     init_daemon();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249: }",
          "1252:                       uint32_t enc_len, char *_hashX,",
          "1253:                       char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "1251: void bls_sign_message_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1251: void bls_sign_message_test(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:                                 uint32_t enc_len,",
          "214:                                 [out, count = 1024] char* key );",
          "224:  };",
          "",
          "[Removed Lines]",
          "216:         public void bls_sign_message_aes (",
          "217:                                 [user_check] int *err_status,",
          "218:                                 [out, count = 1024] char* err_string,",
          "219:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "220:                                 uint32_t enc_len,",
          "221:                                 [in, count = 1024] char* hashX ,",
          "222:                                 [in, count = 1024] char* hashY ,",
          "223:                                 [out, count = 1024] char* signature);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     exit(1);",
          "63:   }",
          "66:     switch (opt) {",
          "67:     case 'h':",
          "68:       if (strlen(argv[1]) == 2 ) {",
          "",
          "[Removed Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd0\")) != -1) {",
          "",
          "[Added Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd0a\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     case '0':",
          "88:       is_sgx_https = 0;",
          "89:      break;",
          "90:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "91:       exit(1);",
          "92:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     case 'a':",
          "91:       is_aes = 1;",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: extern int DEBUG_PRINT;",
          "39: extern int is_sgx_https;",
          "41: #define BUF_LEN 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: extern int is_aes;",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:   reset_db();",
          "767:   Json::Value EthKeys[n];",
          "768:   Json::Value VerifVects[n];",
          "769:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "766:   int n = 4, t = 4;",
          "",
          "[Added Lines]",
          "766:   int n = 16, t = 16;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1071: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "1072:   DEBUG_PRINT = 1;",
          "1073:   is_sgx_https = 0;",
          "1075:   cerr << \"ecdsa_api_test started\" << endl;",
          "1076:   init_all(false, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:   is_aes = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a103ecf0c896aa011afc85cff4b48a5310534ec",
      "candidate_info": {
        "commit_hash": "4a103ecf0c896aa011afc85cff4b48a5310534ec",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/4a103ecf0c896aa011afc85cff4b48a5310534ec",
        "files": [
          "BLSCrypto.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "secure_enclave/BLSEnclave.cpp",
          "secure_enclave/BLSEnclave.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp",
          "secure_enclave/BLSEnclave.h||secure_enclave/BLSEnclave.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: string gen_dkg_poly(int _t) {",
          "79:     vector<char> errMsg(1024, 0);",
          "82:     vector<uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "84:     uint32_t enc_len = 0;",
          "86:     if (!encryptKeys)",
          "88:     else",
          "91:         throw SGXException(-666, errMsg.data());",
          "92:     }",
          "95:     spdlog::debug(\"in DKGCrypto encr len is {}\", enc_len);",
          "97:     uint64_t length = DKG_MAX_SEALED_LEN;",
          "",
          "[Removed Lines]",
          "80:     int err_status = 0;",
          "87:         status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "89:         status = trustedGenDkgSecret_aes(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "90:     if (err_status != 0) {",
          "94:     spdlog::debug(\"trustedGenDkgSecret, status {}\", err_status, \" err msg \", errMsg.data());",
          "",
          "[Added Lines]",
          "80:     int errStatus = 0;",
          "87:         status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "89:         status = trustedGenDkgSecret_aes(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "90:     if (errStatus != 0) {",
          "94:     spdlog::debug(\"trustedGenDkgSecret, status {}\", errStatus, \" err msg \", errMsg.data());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         length = enc_len;",
          "100:     }",
          "104:     vector<char> hexEncrPoly(2 * length + 1, 0);",
          "107:     carray2Hex(encrypted_dkg_secret.data(), length, hexEncrPoly.data());",
          "108:     string result(hexEncrPoly.data());",
          "",
          "[Removed Lines]",
          "105:     assert(encrypted_dkg_secret.size() >= length);",
          "",
          "[Added Lines]",
          "103:     CHECK_STATE(encrypted_dkg_secret.size() >= length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     uint32_t len = 0;",
          "140:     if (!encryptKeys)",
          "142:     else {",
          "145:     }",
          "146:     if (errStatus != 0) {",
          "147:         throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "141:         status = trustedGetPublicShares(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), len, pubShares.data(), t, n);",
          "144:         status = trustedGetPublicShares_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen, pubShares.data(), t, n);",
          "",
          "[Added Lines]",
          "138:         status = trustedGetPublicShares(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), len, pubShares.data(), t,",
          "139:                                         n);",
          "142:         status = trustedGetPublicShares_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen,",
          "143:                                             pubShares.data(), t, n);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     return pubSharesVect;",
          "165: }",
          "170:     vector<char> errMsg1(BUF_LEN, 0);",
          "171:     vector<char> hexEncrKey(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "167: string trustedGetSecretShares(const string &_polyName, const char *_encryptedPolyHex, const vector<string> &_publicKeys, int _t,",
          "168:                          int _n) {",
          "",
          "[Added Lines]",
          "166: string trustedGetSecretShares(const string &_polyName, const char *_encryptedPolyHex, const vector<string> &_publicKeys,",
          "167:                               int _t,",
          "168:                               int _n) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:     uint64_t encLen = 0;",
          "178:     if (!hex2carray2(_encryptedPolyHex, &encLen, encrDKGPoly.data(), 6100)) {",
          "179:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "180:     }",
          "184:     if (!encryptKeys)",
          "185:         status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg1.data(), encrDKGPoly.data());",
          "186:     else",
          "",
          "[Removed Lines]",
          "176:     vector<uint8_t > encrDKGPoly(BUF_LEN, 0);",
          "",
          "[Added Lines]",
          "176:     vector<uint8_t> encrDKGPoly(BUF_LEN, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:     for (int i = 0; i < _n; i++) {",
          "198:         uint32_t decLen;",
          "199:         vector<char> currentShare(193, 0);",
          "200:         vector<char> sShareG2(320, 0);",
          "202:         string pub_keyB = _publicKeys.at(i);",
          "205:         strncpy(pubKeyB.data(), pub_keyB.c_str(), 128);",
          "206:         pubKeyB.at(128) = 0;",
          "",
          "[Removed Lines]",
          "197:         vector<uint8_t > encryptedSkey(BUF_LEN, 0);",
          "203:         vector<char> pubKeyB(129,0);",
          "",
          "[Added Lines]",
          "196:         vector<uint8_t> encryptedSkey(BUF_LEN, 0);",
          "202:         vector<char> pubKeyB(129, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:         if (!encryptKeys)",
          "212:             trustedGetEncryptedSecretShare(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "214:         else",
          "215:             trustedGetEncryptedSecretShare_aes(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "217:         if (errStatus != 0) {",
          "218:             throw SGXException(-666, errMsg1.data());",
          "219:         }",
          "",
          "[Removed Lines]",
          "213:                             currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "216:                                 currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "",
          "[Added Lines]",
          "212:                                            currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "215:                                                currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "246: bool",
          "247: verifyShares(const char *publicShares, const char *encr_sshare, const char *encryptedKeyHex, int t, int n, int ind) {",
          "252:     uint64_t decKeyLen;",
          "253:     uint8_t encr_key[BUF_LEN];",
          "",
          "[Removed Lines]",
          "249:     char errMsg1[BUF_LEN];",
          "250:     int err_status = 0;",
          "",
          "[Added Lines]",
          "247:     char errMsg[BUF_LEN];",
          "248:     int errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "267:     if (!encryptKeys)",
          "269:     else",
          "272:     if (result == 2) {",
          "273:         throw SGXException(INVALID_HEX, \"Invalid public shares\");",
          "274:     }",
          "277:     spdlog::debug(\"result is: {}\", result);",
          "281:     return result;",
          "282: }",
          "",
          "[Removed Lines]",
          "268:         trustedDkgVerify(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "270:         trustedDkgVerify_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "276:     spdlog::debug(\"errMsg1: {}\", errMsg1);",
          "",
          "[Added Lines]",
          "266:         trustedDkgVerify(eid, &errStatus, errMsg, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "268:         trustedDkgVerify_aes(eid, &errStatus, errMsg, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "274:     spdlog::debug(\"errMsg1: {}\", errMsg);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:     spdlog::debug(\"ENTER CreateBLSShare\");",
          "292:     uint64_t decKeyLen;",
          "293:     uint8_t encr_bls_key[BUF_LEN];",
          "",
          "[Removed Lines]",
          "289:     char errMsg1[BUF_LEN];",
          "290:     int err_status = 0;",
          "",
          "[Added Lines]",
          "285:     char errMsg[BUF_LEN];",
          "286:     int errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "304:     if (!encryptKeys)",
          "306:     else",
          "313:         throw SGXException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "314:     } else {",
          "",
          "[Removed Lines]",
          "305:         trustedCreateBlsKey(eid, &err_status, errMsg1, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "307:         trustedCreateBlsKey_aes(eid, &err_status, errMsg1, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "309:     if (err_status != 0) {",
          "311:         spdlog::error(errMsg1);",
          "312:         spdlog::error(\"status {}\", err_status);",
          "",
          "[Added Lines]",
          "301:         trustedCreateBlsKey(eid, &errStatus, errMsg, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "303:         trustedCreateBlsKey_aes(eid, &errStatus, errMsg, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "305:     if (errStatus != 0) {",
          "307:         spdlog::error(errMsg);",
          "308:         spdlog::error(\"status {}\", errStatus);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "361: string decryptDHKey(const string &polyName, int ind) {",
          "363:     vector<char> errMsg1(1024, 0);",
          "366:     string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "367:     shared_ptr<string> hexEncrKeyPtr = SGXWalletServer::readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "",
          "[Removed Lines]",
          "364:     int err_status = 0;",
          "",
          "[Added Lines]",
          "360:     int errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "382:     char DHKey[ECDSA_SKEY_LEN];",
          "384:     if (!encryptKeys)",
          "386:     else",
          "390:     }",
          "392:     return DHKey;",
          "",
          "[Removed Lines]",
          "385:         decrypt_key(eid, &err_status, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "387:         decrypt_key_aes(eid, &err_status, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "388:     if (err_status != 0) {",
          "389:         throw SGXException(/*ERROR_IN_ENCLAVE*/ err_status, \"decrypt key failed in enclave\");",
          "",
          "[Added Lines]",
          "381:         decrypt_key(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "383:         decrypt_key_aes(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "384:     if (errStatus != 0) {",
          "385:         throw SGXException(/*ERROR_IN_ENCLAVE*/ errStatus, \"decrypt key failed in enclave\");",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: std::vector<std::string> genECDSAKey() {",
          "47:     char *errMsg = (char *) calloc(1024, 1);",
          "49:     uint8_t *encr_pr_key = (uint8_t *) calloc(1024, 1);",
          "50:     char *pub_key_x = (char *) calloc(1024, 1);",
          "51:     char *pub_key_y = (char *) calloc(1024, 1);",
          "52:     uint32_t enc_len = 0;",
          "54:     if (!encryptKeys)",
          "56:     else",
          "60:         spdlog::error(\"RPCException thrown with status {}\", status);",
          "61:         throw SGXException(status, errMsg);",
          "62:     }",
          "",
          "[Removed Lines]",
          "48:     int err_status = 0;",
          "55:         status = trustedGenerateEcdsaKey(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "57:         status = trustedGenerateEcdsaKey_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "59:     if (status != SGX_SUCCESS || err_status != 0) {",
          "",
          "[Added Lines]",
          "48:     int errStatus = 0;",
          "55:         status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "57:         status = trustedGenerateEcdsaKey_aes(eid, &errStatus, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "59:     if (status != SGX_SUCCESS || errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     vector<char> pubKeyY(BUF_LEN, 0);",
          "107:     vector<uint8_t> encrPrKey(BUF_LEN, 0);",
          "110:     uint64_t enc_len = 0;",
          "112:     if (!hex2carray(_encryptedKeyHex, &enc_len, encrPrKey.data())) {",
          "",
          "[Removed Lines]",
          "109:     int err_status = 0;",
          "",
          "[Added Lines]",
          "109:     int errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     }",
          "116:     if (!encryptKeys)",
          "118:                 pubKeyY.data());",
          "120:             errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "122:         throw SGXException(-666, errMsg.data());",
          "123:     }",
          "124:     string pubKey = string(pubKeyX.data()) + string(pubKeyY.data());//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "",
          "[Removed Lines]",
          "117:         status = trustedGetPublicEcdsaKey(eid, &err_status, errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(),",
          "119:     else status = trustedGetPublicEcdsaKey_aes(eid, &err_status,",
          "121:     if (err_status != 0) {",
          "",
          "[Added Lines]",
          "117:         status = trustedGetPublicEcdsaKey(eid, &errStatus, errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(),",
          "119:     else status = trustedGetPublicEcdsaKey_aes(eid, &errStatus,",
          "121:     if (errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:         spdlog::debug(\"pubkey is {}\", pubKey);",
          "128:         spdlog::debug(\"pubkey length is {}\", pubKey.length());",
          "129:         spdlog::debug(\"err str is {}\", errMsg.data());",
          "133:     return pubKey;",
          "",
          "[Removed Lines]",
          "130:         spdlog::debug(\"err status is {}\", err_status);",
          "",
          "[Added Lines]",
          "130:         spdlog::debug(\"err status is {}\", errStatus);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:     vector<string> signature_vect(3);",
          "139:     char *errMsg = (char *) calloc(1024, 1);",
          "141:     char *signature_r = (char *) calloc(1024, 1);",
          "142:     char *signature_s = (char *) calloc(1024, 1);",
          "143:     uint8_t signature_v = 0;",
          "",
          "[Removed Lines]",
          "140:     int err_status = 0;",
          "",
          "[Added Lines]",
          "140:     int errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:     if (!encryptKeys)",
          "160:                              signature_s, &signature_v, base);",
          "161:     else",
          "163:                                 signature_s, &signature_v, base);",
          "165:         throw SGXException(-666, errMsg);",
          "166:     }",
          "",
          "[Removed Lines]",
          "159:         status = trustedEcdsaSign(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char *) hashHex, signature_r,",
          "162:         status = trustedEcdsaSignAES(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char *) hashHex, signature_r,",
          "164:     if (err_status != 0) {",
          "",
          "[Added Lines]",
          "159:         status = trustedEcdsaSign(eid, &errStatus, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char *) hashHex, signature_r,",
          "162:         status = trustedEcdsaSignAES(eid, &errStatus, errMsg, encr_key, dec_len, (unsigned char *) hashHex, signature_r,",
          "164:     if (errStatus != 0) {",
          "",
          "---------------"
        ],
        "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp": [
          "File: secure_enclave/BLSEnclave.cpp -> secure_enclave/BLSEnclave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     libff::init_alt_bn128_params();",
          "103: }",
          "107:     uint64_t keyLen = strnlen(_keyString, MAX_KEY_LENGTH);",
          "",
          "[Removed Lines]",
          "105: void checkKey(int *err_status, char *err_string, const char *_keyString) {",
          "",
          "[Added Lines]",
          "105: void checkKey(int *errStatus, char *err_string, const char *_keyString) {",
          "",
          "---------------"
        ],
        "secure_enclave/BLSEnclave.h||secure_enclave/BLSEnclave.h": [
          "File: secure_enclave/BLSEnclave.h -> secure_enclave/BLSEnclave.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "37: EXTERNC void checkKey(int *err_status, char *err_string, const char* _keyString);",
          "39: EXTERNC void check_key(int *err_status, char *err_string, const char* _keyString);",
          "",
          "[Added Lines]",
          "37: EXTERNC void checkKey(int *errStatus, char *err_string, const char* _keyString);",
          "39: EXTERNC void check_key(int *errStatus, char *err_string, const char* _keyString);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: void trustedEMpfDiv(mpf_t *c_un, mpf_t *a_un, mpf_t *b_un) {}",
          "130:                         uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "132:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "129: void trustedGenerateEcdsaKey(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "129: void trustedGenerateEcdsaKey(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201: }",
          "205:                           uint8_t *encrypted_key, uint32_t dec_len, char *pub_key_x, char *pub_key_y) {",
          "",
          "[Removed Lines]",
          "204: void trustedGetPublicEcdsaKey(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "204: void trustedGetPublicEcdsaKey(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:     point_clear(Pkey);",
          "274: }",
          "277:                  unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "279:     char* arr_m = NULL;",
          "",
          "[Removed Lines]",
          "276: void trustedEcdsaSign(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "",
          "[Added Lines]",
          "276: void trustedEcdsaSign(int *errStatus, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "371: }",
          "375:                  uint8_t *encrypted_key, uint32_t *enc_len) {",
          "381:     memset(err_string, 0, BUF_LEN);",
          "386:         snprintf(err_string + strlen(err_string), BUF_LEN, \"check_key failed\");",
          "387:         return;",
          "388:     }",
          "",
          "[Removed Lines]",
          "374: void encrypt_key(int *err_status, char *err_string, char *key,",
          "383:     checkKey(err_status, err_string, key);",
          "385:     if (*err_status != 0) {",
          "",
          "[Added Lines]",
          "374: void encrypt_key(int *errStatus, char *err_string, char *key,",
          "383:     checkKey(errStatus, err_string, key);",
          "385:     if (*errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "412:     char decryptedKey[BUF_LEN];",
          "413:     memset(decryptedKey, 0, BUF_LEN);",
          "418:         snprintf(err_string + strlen(err_string), BUF_LEN, \":decrypt_key failed\");",
          "419:         return;",
          "420:     }",
          "",
          "[Removed Lines]",
          "415:     decrypt_key(err_status, err_string, encrypted_key, sealedLen, decryptedKey);",
          "417:     if (*err_status != 0) {",
          "",
          "[Added Lines]",
          "415:     decrypt_key(errStatus, err_string, encrypted_key, sealedLen, decryptedKey);",
          "417:     if (*errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427:     }",
          "432:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
          "433:         snprintf(err_string, BUF_LEN, \"Decrypted key does not match original key\");",
          "434:         return;",
          "435:     }",
          "438: }",
          "441:                  uint32_t enc_len, char *key) {",
          "443:     init();",
          "445:     uint32_t decLen;",
          "449:     sgx_status_t status = sgx_unseal_data(",
          "450:             (const sgx_sealed_data_t *) encrypted_key, NULL, 0, (uint8_t *) key, &decLen);",
          "452:     if (status != SGX_SUCCESS) {",
          "454:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data failed with status %d\", status);",
          "455:         return;",
          "456:     }",
          "",
          "[Removed Lines]",
          "440: void decrypt_key(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "440: void decrypt_key(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "488:     return;",
          "490: }",
          "494:                       uint32_t enc_len, char *_hashX,",
          "495:                       char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "493: void trustedBlsSignMessage(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "493: void trustedBlsSignMessage(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "502:     init();",
          "508:         strncpy(signature, err_string, BUF_LEN);",
          "509:         return;",
          "510:     }",
          "",
          "[Removed Lines]",
          "505:     decrypt_key(err_status, err_string, encrypted_key, enc_len, key);",
          "507:     if (*err_status != 0) {",
          "",
          "[Added Lines]",
          "505:     decrypt_key(errStatus, err_string, encrypted_key, enc_len, key);",
          "507:     if (*errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "514:     strncpy(signature, sig, BUF_LEN);",
          "516:     if (strnlen(signature, BUF_LEN) < 10) {",
          "518:         return;",
          "519:     }",
          "521:     free(sig);",
          "522: }",
          "526:     char dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "528:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "530:         return;",
          "531:     }",
          "",
          "[Removed Lines]",
          "524: void trustedGenDkgSecret(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "[Added Lines]",
          "524: void trustedGenDkgSecret(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "549: }",
          "552:                         uint32_t *dec_len) {",
          "",
          "[Removed Lines]",
          "551: void trustedDecryptDkgSecret(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "551: void trustedDecryptDkgSecret(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "559:     if (status != SGX_SUCCESS) {",
          "560:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", status);",
          "562:         return;",
          "563:     }",
          "566: }",
          "569:                        char *secret_shares,",
          "570:                        unsigned _t, unsigned _n) {",
          "",
          "[Removed Lines]",
          "568: void trustedGetSecretShares(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "568: void trustedGetSecretShares(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "575:     uint32_t decr_len;",
          "583:         return;",
          "584:     }",
          "",
          "[Removed Lines]",
          "577:     trustedDecryptDkgSecret(err_status, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "581:     if (*err_status != 0) {",
          "582:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *err_status);",
          "",
          "[Added Lines]",
          "577:     trustedDecryptDkgSecret(errStatus, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "581:     if (*errStatus != 0) {",
          "582:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *errStatus);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "591: }",
          "594:                        char *public_shares,",
          "595:                        unsigned _t, unsigned _n) {",
          "598:     char *decrypted_dkg_secret = (char *) malloc(DKG_MAX_SEALED_LEN);",
          "599:     uint32_t decr_len;",
          "603:         return;",
          "604:     }",
          "607:     if (calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0) {",
          "609:         snprintf(err_string, BUF_LEN, \"t does not match polynomial in db\");",
          "610:         return;",
          "611:     }",
          "",
          "[Removed Lines]",
          "593: void trustedGetPublicShares(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "600:     trustedDecryptDkgSecret(err_status, err_string, (uint8_t *) encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "601:     if (*err_status != 0) {",
          "602:         snprintf(err_string, BUF_LEN, \"trustedDecryptDkgSecret failed with status %d\", *err_status);",
          "",
          "[Added Lines]",
          "593: void trustedGetPublicShares(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "600:     trustedDecryptDkgSecret(errStatus, err_string, (uint8_t *) encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "601:     if (*errStatus != 0) {",
          "602:         snprintf(err_string, BUF_LEN, \"trustedDecryptDkgSecret failed with status %d\", *errStatus);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "613: }",
          "617:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "618:     uint32_t decr_len;",
          "619:     sgx_status_t status = sgx_unseal_data(",
          "620:             (const sgx_sealed_data_t *) encrypted_poly, NULL, 0, decryptedDkgPoly, &decr_len);",
          "622:     if (status != SGX_SUCCESS) {",
          "624:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "625:         return;",
          "626:     }",
          "628: }",
          "631:                      char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "633:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "616: void trustedSetEncryptedDkgPoly(int *err_status, char *err_string, uint8_t *encrypted_poly) {",
          "630: void trustedGetEncryptedSecretShare(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "616: void trustedSetEncryptedDkgPoly(int *errStatus, char *err_string, uint8_t *encrypted_poly) {",
          "630: void trustedGetEncryptedSecretShare(int *errStatus, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "641:     uint32_t enc_len;",
          "645:         return;",
          "646:     }",
          "",
          "[Removed Lines]",
          "643:     trustedGenerateEcdsaKey(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "644:     if (*err_status != 0) {",
          "",
          "[Added Lines]",
          "643:     trustedGenerateEcdsaKey(errStatus, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "644:     if (*errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "704: }",
          "707:                         uint32_t *dec_len,",
          "708:                         char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "",
          "[Removed Lines]",
          "706: void trustedComplaintResponse(int *err_status, char *err_string, uint8_t *encryptedDHKey, uint8_t *encrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "706: void trustedComplaintResponse(int *errStatus, char *err_string, uint8_t *encryptedDHKey, uint8_t *encrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "719:     char decrypted_dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "720:     uint32_t decr_len;",
          "724:         return;",
          "725:     }",
          "",
          "[Removed Lines]",
          "721:     trustedDecryptDkgSecret(err_status, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "722:     if (*err_status != 0) {",
          "723:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *err_status);",
          "",
          "[Added Lines]",
          "721:     trustedDecryptDkgSecret(errStatus, err_string, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, &decr_len);",
          "722:     if (*errStatus != 0) {",
          "723:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_dkg_secret failed with status %d\", *errStatus);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "734: }",
          "737:                       uint8_t *encrypted_key, uint64_t key_len, unsigned _t, int _ind, int *result) {",
          "",
          "[Removed Lines]",
          "736: void trustedDkgVerify(int *err_status, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "[Added Lines]",
          "736: void trustedDkgVerify(int *errStatus, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "792: }",
          "795:                     uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "797:     char skey[ECDSA_SKEY_LEN];",
          "798:     sgx_status_t status = sgx_unseal_data(",
          "799:             (const sgx_sealed_data_t *) encrypted_key, NULL, 0, (uint8_t *) skey, &key_len);",
          "800:     if (status != SGX_SUCCESS) {",
          "802:         snprintf(err_string, BUF_LEN, \"sgx_unseal_key failed with status %d\", status);",
          "803:         return;",
          "804:     }",
          "",
          "[Removed Lines]",
          "794: void trustedCreateBlsKey(int *err_status, char *err_string, const char *s_shares,",
          "",
          "[Added Lines]",
          "794: void trustedCreateBlsKey(int *errStatus, char *err_string, const char *s_shares,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "905:     mpz_clear(q);",
          "906: }",
          "910:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "908: void trustedGetBlsPubKey(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "[Added Lines]",
          "908: void trustedGetBlsPubKey(int *errStatus, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "914:     sgx_status_t status = sgx_unseal_data(",
          "915:             (const sgx_sealed_data_t *) encrypted_key, NULL, 0, (uint8_t *) skey_hex, &len);",
          "916:     if (status != SGX_SUCCESS) {",
          "918:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data failed with status %d\", status);",
          "919:         return;",
          "920:     }",
          "922:     if (calc_bls_public_key(skey_hex, bls_pub_key) != 0) {",
          "924:         snprintf(err_string, BUF_LEN, \"could not calculate bls public key\");",
          "925:         return;",
          "926:     }",
          "927: }",
          "930:                   uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "931:     uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "",
          "[Removed Lines]",
          "929: void trustedGenerateSEK(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "929: void trustedGenerateSEK(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "957: }",
          "",
          "[Removed Lines]",
          "959: void trustedSetSEK(int *err_status, char *err_string, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "",
          "[Added Lines]",
          "959: void trustedSetSEK(int *errStatus, char *err_string, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "977: }",
          "980:                     uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "982:     uint64_t len;",
          "",
          "[Removed Lines]",
          "979: void trustedSetSEK_backup(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "979: void trustedSetSEK_backup(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "998: }",
          "1001:                             uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "1003:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1000: void trustedGenerateEcdsaKey_aes(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "1000: void trustedGenerateEcdsaKey_aes(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1069:     point_clear(Pkey);",
          "1070: }",
          "1073:                               uint8_t *encrypted_key, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1075:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1072: void trustedGetPublicEcdsaKey_aes(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "1072: void trustedGetPublicEcdsaKey_aes(int *errStatus, char *err_string,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1140:     point_clear(Pkey);",
          "1141: }",
          "1144:                     unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "1146:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1143: void trustedEcdsaSignAES(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "",
          "[Added Lines]",
          "1143: void trustedEcdsaSignAES(int *errStatus, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1219: }",
          "1222:                      uint8_t *encrypted_key, uint32_t *enc_len) {",
          "1228:     memset(err_string, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1221: void encrypt_key_aes(int *err_status, char *err_string, const char *key,",
          "",
          "[Added Lines]",
          "1221: void encrypt_key_aes(int *errStatus, char *err_string, const char *key,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1264:     }",
          "1269:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
          "1270:         snprintf(err_string, BUF_LEN, \"Decrypted key does not match original key\");",
          "1271:         return;",
          "1272:     }",
          "1275: }",
          "1278:                      uint32_t enc_len, char *key) {",
          "1280:     init();",
          "1282:     uint32_t decLen;",
          "1286:     int status = AES_decrypt(encrypted_key, enc_len, key);",
          "1288:     if (status != 0) {",
          "1290:         snprintf(err_string, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1291:         return;",
          "1292:     }",
          "",
          "[Removed Lines]",
          "1277: void decrypt_key_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1277: void decrypt_key_aes(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1310:         return;",
          "1311:     }",
          "1314:     memcpy(err_string, AES_key, 1024);",
          "1316: }",
          "1319:                           uint32_t enc_len, char *_hashX,",
          "1320:                           char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "1318: void trustedBlsSignMessage_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1318: void trustedBlsSignMessage_aes(int *errStatus, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1341:     strncpy(signature, sig, BUF_LEN);",
          "1343:     if (strnlen(signature, BUF_LEN) < 10) {",
          "1345:         return;",
          "1346:     }",
          "1348: }",
          "1350: void",
          "1353:     char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "1354:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "1356:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "1358:         return;",
          "1359:     }",
          "",
          "[Removed Lines]",
          "1351: trustedGenDkgSecret_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "[Added Lines]",
          "1351: trustedGenDkgSecret_aes(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1385:         snprintf(err_string, BUF_LEN, \"poly is %s \", dkg_secret);",
          "1386:         snprintf(err_string + strlen(dkg_secret) + 8, BUF_LEN - strlen(dkg_secret) - 8,",
          "1387:                  \"encrypted poly is not equal to decrypted poly\");",
          "1389:     }",
          "1392: }",
          "1394: void",
          "1396:                        uint32_t *dec_len) {",
          "1398:     int status = AES_decrypt(encrypted_dkg_secret, dec_len, decrypted_dkg_secret);",
          "1400:     if (status != SGX_SUCCESS) {",
          "1401:         snprintf(err_string, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "1403:         return;",
          "1404:     }",
          "1406: }",
          "1409:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1410:     int status = AES_decrypt(encrypted_poly, *enc_len, decryptedDkgPoly);",
          "1412:     if (status != SGX_SUCCESS) {",
          "1414:         snprintf(err_string, BUF_LEN, \"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "1415:         return;",
          "1416:     }",
          "1417: }",
          "1420:                          char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "1422:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1395: trustedDecryptDkgSecret_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "1408: void trustedSetEncryptedDkgPoly_aes(int *err_status, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1419: void trustedGetEncryptedSecretShare_aes(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "1395: trustedDecryptDkgSecret_aes(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "1408: void trustedSetEncryptedDkgPoly_aes(int *errStatus, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1419: void trustedGetEncryptedSecretShare_aes(int *errStatus, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1431:     uint32_t enc_len;",
          "1435:         return;",
          "1436:     }",
          "",
          "[Removed Lines]",
          "1433:     trustedGenerateEcdsaKey_aes(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "1434:     if (*err_status != 0) {",
          "",
          "[Added Lines]",
          "1433:     trustedGenerateEcdsaKey_aes(errStatus, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "1434:     if (*errStatus != 0) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1496: }",
          "1499:                            char *public_shares,",
          "1500:                            unsigned _t, unsigned _n) {",
          "",
          "[Removed Lines]",
          "1498: void trustedGetPublicShares_aes(int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "[Added Lines]",
          "1498: void trustedGetPublicShares_aes(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1524: }",
          "1527:                           uint8_t *encrypted_key, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "",
          "[Removed Lines]",
          "1526: void trustedDkgVerify_aes(int *err_status, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "[Added Lines]",
          "1526: void trustedDkgVerify_aes(int *errStatus, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1588: }",
          "1591:                         uint8_t *encrypted_key, uint64_t key_len, uint8_t *encr_bls_key, uint32_t *enc_bls_key_len) {",
          "1593:     char skey[ECDSA_SKEY_LEN];",
          "1594:     int status = AES_decrypt(encrypted_key, key_len, skey);",
          "1595:     if (status != SGX_SUCCESS) {",
          "1597:         snprintf(err_string, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1598:         return;",
          "1599:     }",
          "",
          "[Removed Lines]",
          "1590: void trustedCreateBlsKey_aes(int *err_status, char *err_string, const char *s_shares,",
          "",
          "[Added Lines]",
          "1590: void trustedCreateBlsKey_aes(int *errStatus, char *err_string, const char *s_shares,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1694: }",
          "1696: void",
          "1699:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1697: trustedGetBlsPubKeyAES(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "[Added Lines]",
          "1697: trustedGetBlsPubKeyAES(int *errStatus, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   );",
          "31:   public void trustedGenerateEcdsaKey (",
          "33:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "34:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "35:                                 [user_check] uint32_t *enc_len,",
          "",
          "[Removed Lines]",
          "32:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "32:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "39:   public void trustedGetPublicEcdsaKey (",
          "41:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "42:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "43:                                 uint32_t dec_len,",
          "",
          "[Removed Lines]",
          "40:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "40:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "47:   public void encrypt_key (",
          "49:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "50:                                 [in, count = SMALL_BUF_SIZE] char* key,",
          "51:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "52:                                 [user_check] uint32_t *enc_len);",
          "54:                 public void decrypt_key (",
          "56:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "57:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "58:                                 uint32_t enc_len,",
          "59:                                 [out, count = SMALL_BUF_SIZE] char* key );",
          "61:   public void trustedBlsSignMessage (",
          "63:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "64:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "65:                                 uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "48:                                 [user_check] int *err_status,",
          "55:                                 [user_check] int *err_status,",
          "62:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "48:                                 [user_check] int *errStatus,",
          "55:                                 [user_check] int *errStatus,",
          "62:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
          "70:                 public void trustedGenDkgSecret (",
          "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "73:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                                 [user_check] uint32_t * enc_len,",
          "75:                                 size_t _t);",
          "77:                 public void trustedDecryptDkgSecret (",
          "79:                              [out, count = SMALL_BUF_SIZE] char* err_string,",
          "80:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "82:                              [user_check] uint32_t* dec_len);",
          "84:                 public void trustedGetSecretShares (",
          "86:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "87:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "88:                                 [user_check] uint32_t* dec_len,",
          "",
          "[Removed Lines]",
          "71:                                 [user_check] int *err_status,",
          "78:                              [user_check] int *err_status,",
          "85:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "71:                                 [user_check] int *errStatus,",
          "78:                              [user_check] int *errStatus,",
          "85:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:                                 unsigned _n);",
          "93:                 public void trustedGetPublicShares (",
          "95:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "96:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "97:                                 uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "94:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "94:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "100:                                 unsigned _n);",
          "102:                 public void trustedEcdsaSign(",
          "104:                                  [out, count = SMALL_BUF_SIZE] char* err_string,",
          "105:                                  [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "106:                                  uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "103:                                  [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "103:                                  [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "110:                                  [user_check] uint8_t* sig_v,",
          "111:                                  int base);",
          "114:                                  [out, count = SMALL_BUF_SIZE] char* err_string,",
          "115:                                  [in, count = 3050] uint8_t* encrypted_poly);",
          "117:                 public void trustedGetEncryptedSecretShare(",
          "119:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "120:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "121:                                 [user_check] uint32_t* dec_len,",
          "",
          "[Removed Lines]",
          "113:                 public void trustedSetEncryptedDkgPoly( [user_check] int *err_status,",
          "118:                                 [user_check]int *err_status,",
          "",
          "[Added Lines]",
          "113:                 public void trustedSetEncryptedDkgPoly( [user_check] int *errStatus,",
          "118:                                 [user_check]int *errStatus,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "127:                                 uint8_t ind);",
          "129:                 public void trustedDkgVerify(",
          "131:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "132:                                 [in, count = 8193] const char* public_shares,",
          "133:                                 [in, count = 193] const char* s_share,",
          "",
          "[Removed Lines]",
          "130:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "130:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "138:                                 [user_check] int* result);",
          "140:                 public void trustedCreateBlsKey(",
          "142:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "143:                                 [in, count = 6145] const char* s_shares,",
          "144:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "141:                                 [user_check]int *err_status,",
          "",
          "[Added Lines]",
          "141:                                 [user_check]int *errStatus,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "147:                                 [user_check] uint32_t *enc_bls_key_len);",
          "149:                 public void trustedGetBlsPubKey(",
          "151:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "152:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "153:                                 uint64_t key_len,",
          "154:                                 [out, count = 320] char* bls_pub_key);",
          "156:                 public void trustedComplaintResponse(",
          "158:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "159:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encryptedDHKey,",
          "160:                                 [in, count = 3050] uint8_t *encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "150:                                 [user_check]int *err_status,",
          "157:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "150:                                 [user_check]int *errStatus,",
          "157:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "166:                                 uint8_t ind1);",
          "168:                 public void trustedGenerateSEK(",
          "170:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "171:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "172:                                 [user_check] uint32_t *enc_len,",
          "173:                                 [out, count = 65] char* hex_SEK);",
          "175:                 public void trustedSetSEK(",
          "177:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "178:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "179:                                 uint64_t encr_len);",
          "181:                 public void trustedSetSEK_backup(",
          "183:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "184:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "185:                                 [user_check] uint32_t *enc_len,",
          "186:                                 [in, count = 65] const char* SEK_hex);",
          "188:                 public void trustedGenerateEcdsaKey_aes (",
          "190:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "191:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "192:                                 [user_check] uint32_t *enc_len,",
          "",
          "[Removed Lines]",
          "169:                                 [user_check] int *err_status,",
          "176:                                 [user_check] int *err_status,",
          "182:                                 [user_check] int *err_status,",
          "189:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "169:                                 [user_check] int *errStatus,",
          "176:                                 [user_check] int *errStatus,",
          "182:                                 [user_check] int *errStatus,",
          "189:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "194:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "196:                 public void trustedGetPublicEcdsaKey_aes(",
          "198:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "199:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "200:                                 uint32_t dec_len,",
          "",
          "[Removed Lines]",
          "197:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "197:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "202:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "204:                 public void trustedEcdsaSignAES(",
          "206:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "207:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "208:                                 uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "205:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "205:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "213:                                 int base);",
          "215:                 public void encrypt_key_aes (",
          "217:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "218:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "219:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "220:                                 [user_check] uint32_t *enc_len);",
          "222:                 public void decrypt_key_aes (",
          "224:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "225:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "226:                                 uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "216:                                 [user_check] int *err_status,",
          "223:                                 [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "216:                                 [user_check] int *errStatus,",
          "223:                                 [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "230:                 public void trustedGenDkgSecret_aes (",
          "232:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "233:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "234:                                 [user_check] uint32_t * enc_len,",
          "235:                                         size_t _t);",
          "237:                 public void trustedDecryptDkgSecret_aes (",
          "239:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "240:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "241:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "242:                                 [user_check] uint32_t* dec_len);",
          "244:                 public void trustedSetEncryptedDkgPoly_aes(",
          "246:                                [out, count = SMALL_BUF_SIZE] char* err_string,",
          "247:                                [in, count = 3050] uint8_t* encrypted_poly,",
          "248:                                [user_check] uint64_t* enc_len);",
          "250:                 public void trustedGetEncryptedSecretShare_aes(",
          "252:                               [out, count = SMALL_BUF_SIZE] char *err_string,",
          "253:                               [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "254:                               [user_check] uint32_t* dec_len,",
          "",
          "[Removed Lines]",
          "231:                                 [user_check] int *err_status,",
          "238:                                 [user_check] int *err_status,",
          "245:                                [user_check] int *err_status,",
          "251:                               [user_check]int *err_status,",
          "",
          "[Added Lines]",
          "231:                                 [user_check] int *errStatus,",
          "238:                                 [user_check] int *errStatus,",
          "245:                                [user_check] int *errStatus,",
          "251:                               [user_check]int *errStatus,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "260:                               uint8_t ind);",
          "262:                 public void trustedGetPublicShares_aes(",
          "264:                             [out, count = SMALL_BUF_SIZE] char* err_string,",
          "265:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "266:                             uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "263:                             [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "263:                             [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "269:                             unsigned _n);",
          "271:                 public void trustedDkgVerify_aes(",
          "273:                           [out, count = SMALL_BUF_SIZE] char* err_string,",
          "274:                           [in, count = 8193] const char* public_shares,",
          "275:                           [in, count = 193] const char* s_share,",
          "",
          "[Removed Lines]",
          "272:                           [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "272:                           [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "283:                 public void trustedCreateBlsKey_aes(",
          "285:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "286:                         [in, count = 6145] const char* s_shares,",
          "287:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "284:                         [user_check]int *err_status,",
          "",
          "[Added Lines]",
          "284:                         [user_check]int *errStatus,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "290:                         [user_check] uint32_t *enc_bls_key_len);",
          "292:                 public void trustedBlsSignMessage_aes (",
          "294:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "295:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "296:                         uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "293:                         [user_check] int *err_status,",
          "",
          "[Added Lines]",
          "293:                         [user_check] int *errStatus,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "299:                         [out, count = SMALL_BUF_SIZE] char* signature);",
          "301:                 public void trustedGetBlsPubKeyAES(",
          "303:                         [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "304:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "305:                         uint64_t key_len,",
          "",
          "[Removed Lines]",
          "302:                         [user_check]int *err_status,",
          "",
          "[Added Lines]",
          "302:                         [user_check]int *errStatus,",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     vector<uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
          "183:     vector<char> errMsg(BUF_LEN, 0);",
          "186:     uint32_t enc_len = 0;",
          "189:     REQUIRE(status == SGX_SUCCESS);",
          "193:     vector<char> secret(BUF_LEN, 0);",
          "194:     vector<char> errMsg1(BUF_LEN, 0);",
          "196:     uint32_t dec_len;",
          "198:                                 (uint8_t *) secret.data(), &dec_len);",
          "200:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "185:     int err_status = 0;",
          "188:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encryptedDKGSecret.data(), &enc_len, 32);",
          "197:     status = trustedDecryptDkgSecret(eid, &err_status, errMsg1.data(), encryptedDKGSecret.data(),",
          "",
          "[Added Lines]",
          "185:     int errStatus = 0;",
          "188:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &enc_len, 32);",
          "197:     status = trustedDecryptDkgSecret(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:     vector<uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "273:     vector<char> errMsg(BUF_LEN, 0);",
          "276:     uint32_t enc_len = 0;",
          "278:     unsigned t = 32, n = 32;",
          "281:     REQUIRE(status == SGX_SUCCESS);",
          "285:     vector<char> errMsg1(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "275:     int err_status = 0;",
          "280:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, n);",
          "",
          "[Added Lines]",
          "275:     int errStatus = 0;",
          "280:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, n);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:     char colon = ':';",
          "288:     vector<char> public_shares(10000, 0);",
          "291:                                encrypted_dkg_secret.data(), enc_len, public_shares.data(), t, n);",
          "292:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "290:     status = trustedGetPublicShares(eid, &err_status, errMsg1.data(),",
          "",
          "[Added Lines]",
          "290:     status = trustedGetPublicShares(eid, &errStatus, errMsg1.data(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:     vector<char> secret(BUF_LEN, 0);",
          "310:                                 (uint8_t *) secret.data(), &enc_len);",
          "311:     REQUIRE(status == SGX_SUCCESS);",
          "314:     signatures::Dkg dkg_obj(t, n);",
          "",
          "[Removed Lines]",
          "309:     status = trustedDecryptDkgSecret(eid, &err_status, errMsg1.data(), encrypted_dkg_secret.data(),",
          "",
          "[Added Lines]",
          "309:     status = trustedDecryptDkgSecret(eid, &errStatus, errMsg1.data(), encrypted_dkg_secret.data(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:     vector<char> errMsg(BUF_LEN, 0);",
          "346:     vector<char> result(BUF_LEN, 0);",
          "349:     uint32_t enc_len = 0;",
          "351:     vector<uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "353:     REQUIRE(status == SGX_SUCCESS);",
          "357:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "348:     int err_status = 0;",
          "352:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "356:     status = trustedSetEncryptedDkgPoly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "[Added Lines]",
          "348:     int errStatus = 0;",
          "352:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "356:     status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "362:     string pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "364:     vector<char> s_shareG2(BUF_LEN, 0);",
          "366:                              s_shareG2.data(),",
          "367:                              (char *) pub_keyB.data(), 2, 2, 1);",
          "",
          "[Removed Lines]",
          "365:     status = trustedGetEncryptedSecretShare(eid, &err_status, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(),",
          "",
          "[Added Lines]",
          "365:     status = trustedGetEncryptedSecretShare(eid, &errStatus, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:     vector<char> errMsg(BUF_LEN, 0);",
          "383:     vector<char> result(BUF_LEN, 0);",
          "386:     uint32_t enc_len = 0;",
          "388:     vector<uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "391:     REQUIRE(status == SGX_SUCCESS);",
          "395:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "385:     int err_status = 0;",
          "390:     status = trustedGenDkgSecret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "394:     status = trustedSetEncryptedDkgPoly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "[Added Lines]",
          "385:     int errStatus = 0;",
          "390:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "394:     status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "402:     vector<char> s_shareG2(BUF_LEN, 0);",
          "405:                              s_shareG2.data(),",
          "406:                              (char *) pub_keyB.data(), 2, 2, 1);",
          "407:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "404:     status = trustedGetEncryptedSecretShare(eid, &err_status, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(),",
          "",
          "[Added Lines]",
          "404:     status = trustedGetEncryptedSecretShare(eid, &errStatus, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "423:     vector<char> errMsg(BUF_LEN, 0);",
          "425:     vector<uint8_t> encr_pr_key(BUF_LEN, 0);",
          "426:     vector<char> pub_key_x(BUF_LEN, 0);",
          "427:     vector<char> pub_key_y(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "424:     int err_status = 0;",
          "",
          "[Added Lines]",
          "424:     int errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "434:                                 pub_key_y.data());",
          "436:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "433:     status = trustedGenerateEcdsaKey(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "[Added Lines]",
          "433:     status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "444:     vector<char> signature_s(BUF_LEN, 0);",
          "445:     uint8_t signature_v = 0;",
          "448:                          signature_r.data(),",
          "449:                          signature_s.data(), &signature_v, 16);",
          "450:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "447:     status = trustedEcdsaSign(eid, &err_status, errMsg.data(), encr_pr_key.data(), enc_len, (unsigned char *) hex.data(),",
          "",
          "[Added Lines]",
          "447:     status = trustedEcdsaSign(eid, &errStatus, errMsg.data(), encr_pr_key.data(), enc_len, (unsigned char *) hex.data(),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "464:     initAll(false, true);",
          "466:     vector<char> errMsg(BUF_LEN, 0);",
          "468:     vector<uint8_t> encr_pr_key(BUF_LEN, 0);",
          "469:     vector<char> pub_key_x(BUF_LEN, 0);",
          "470:     vector<char> pub_key_y(BUF_LEN, 0);",
          "471:     uint32_t enc_len = 0;",
          "474:                                 pub_key_y.data());",
          "476:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "467:     int err_status = 0;",
          "473:     status = trustedGenerateEcdsaKey(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "[Added Lines]",
          "467:     int errStatus = 0;",
          "473:     status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88c53da90ba8126c7b0cb203383b055aff20f6be",
      "candidate_info": {
        "commit_hash": "88c53da90ba8126c7b0cb203383b055aff20f6be",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/88c53da90ba8126c7b0cb203383b055aff20f6be",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #define SAFE_FREE(__X__) if (!__X__) {free(__X__); __X__ = NULL;}",
          "60: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
          "62: #define STRINGIFY(x) #x",
          "63: #define TOSTRING(x) STRINGIFY(x)",
          "65: #define CHECK_STATE(_EXPRESSION_) \\",
          "66:     if (!(_EXPRESSION_)) {        \\",
          "67:         LOG_ERROR(\"State check failed::\");LOG_ERROR(#_EXPRESSION_); \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #define INIT_ERROR_STATE *errString = 0; *errStatus = UNKNOWN_ERROR;",
          "68: #define SET_SUCCESS *errStatus = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         goto clean;}",
          "82: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #define CHECK_STATUS(__STATUS__, __ERRMESSAGE__) if (__STATUS__ != SGX_SUCCESS) { \\",
          "88: snprintf(errString, BUF_LEN, __ERRMESSAGE__); \\",
          "89: LOG_ERROR(errString); \\",
          "91: goto clean; \\",
          "92: }",
          "95: #define CHECK_STATUS2(__STATUS__, __ERRMESSAGE__, __PARAM__) if (__STATUS__ != SGX_SUCCESS) { \\",
          "96: snprintf(errString, BUF_LEN, __ERRMESSAGE__, __PARAM__); \\",
          "97: LOG_ERROR(errString); \\",
          "99: goto clean; \\",
          "100: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176: }",
          "186: void trustedGenerateSEK(int *errStatus, char *errString,",
          "187:                         uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "188:     LOG_DEBUG(__FUNCTION__);",
          "190:     CHECK_STATE(encrypted_SEK);",
          "191:     CHECK_STATE(SEK_hex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:     sgx_status_t status = sgx_seal_data(0, NULL, hex_aes_key_length + 1, (uint8_t *) SEK_hex, sealedLen,",
          "211:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "",
          "[Removed Lines]",
          "212:     if (status != SGX_SUCCESS) {",
          "213:         snprintf(errString, BUF_LEN, \"seal SEK failed\");",
          "215:         LOG_ERROR(errString);",
          "216:         goto clean;",
          "217:     }",
          "",
          "[Added Lines]",
          "225:     CHECK_STATUS(status, \"seal SEK failed\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "227:     LOG_DEBUG(__FUNCTION__);",
          "232:     CHECK_STATE(encrypted_SEK);",
          "234:     SAFE_CHAR_BUF(aes_key_hex, BUF_LEN);",
          "236:     sgx_status_t status = sgx_unseal_data(",
          "237:             (const sgx_sealed_data_t *) encrypted_SEK, NULL, 0, aes_key_hex, &encr_len);",
          "245:     uint64_t len;",
          "246:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key);",
          "250:     clean:",
          "251:     ;",
          "",
          "[Removed Lines]",
          "238:     if (status != SGX_SUCCESS) {",
          "240:         snprintf(errString, BUF_LEN, \"sgx unseal SEK failed with status %d\", status);",
          "241:         LOG_ERROR(errString);",
          "242:         goto clean;",
          "243:     }",
          "",
          "[Added Lines]",
          "236:     INIT_ERROR_STATE",
          "243:     CHECK_STATUS2(status,  \"sgx unseal SEK failed with status %d\", status );",
          "249:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "255:                           uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "256:     LOG_DEBUG(__FUNCTION__);",
          "261:     CHECK_STATE(encrypted_SEK);",
          "262:     CHECK_STATE(SEK_hex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "272:         snprintf(errString, BUF_LEN, \"seal SEK failed with status %d\", status);",
          "274:         LOG_ERROR(errString);",
          "275:     }",
          "280: }",
          "282: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "283:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "284:     LOG_DEBUG(__FUNCTION__);",
          "289:     CHECK_STATE(encryptedPrivateKey);",
          "290:     CHECK_STATE(pub_key_x);",
          "291:     CHECK_STATE(pub_key_y);",
          "293:     SAFE_CHAR_BUF(rand_char, 32);",
          "296:     mpz_t seed;",
          "297:     mpz_init(seed);",
          "300:     mpz_t skey;",
          "301:     mpz_init(skey);",
          "306:     point Pkey = point_init();",
          "308:     signature_extract_public_key(Pkey, skey, curve);",
          "310:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "",
          "[Removed Lines]",
          "294:     get_global_random(rand_char, 32);",
          "298:     mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "302:     mpz_mod(skey, seed, curve->p);",
          "303:     mpz_clear(seed);",
          "",
          "[Added Lines]",
          "274:         goto clean;",
          "279:     SET_SUCCESS",
          "281:     clean:",
          "283:     ;",
          "290:     INIT_ERROR_STATE",
          "306:     get_global_random(rand_char, 32);",
          "308:     mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "310:     mpz_mod(skey, seed, curve->p);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "354:         goto clean;",
          "355:     }",
          "359:     clean:",
          "360:     mpz_clear(skey);",
          "361:     point_clear(Pkey);",
          "362: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:     SET_SUCCESS",
          "364:     mpz_clear(seed);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
          "365:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "366:     LOG_DEBUG(__FUNCTION__);",
          "371:     CHECK_STATE(encryptedPrivateKey);",
          "372:     CHECK_STATE(pub_key_x);",
          "373:     CHECK_STATE(pub_key_y);",
          "376:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "379:     mpz_t privateKeyMpz;",
          "380:     mpz_init(privateKeyMpz);",
          "382:     point Pkey = point_init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "433:     }",
          "434:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "438:     clean:",
          "439:     mpz_clear(privateKeyMpz);",
          "440:     point_clear(Pkey);",
          "441:     point_clear(Pkey_test);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "447:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "448:     LOG_DEBUG(__FUNCTION__);",
          "453:     CHECK_STATE(encryptedPrivateKey);",
          "454:     CHECK_STATE(hash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "593:     LOG_DEBUG(__FUNCTION__);",
          "598:     CHECK_STATE(encryptedPrivateKey);",
          "599:     CHECK_STATE(key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "619:         goto clean;",
          "620:     }",
          "624:     clean:",
          "625:     ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "662:         goto clean;",
          "663:     }",
          "667:     clean:",
          "668:     ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "672: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "673:     LOG_DEBUG(__FUNCTION__);",
          "678:     CHECK_STATE(encrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "717:         goto clean;",
          "718:     }",
          "722:     clean:",
          "723:     ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "728:                            uint32_t enc_len,",
          "729:                            uint8_t *decrypted_dkg_secret) {",
          "734:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "728:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "746:         goto clean;",
          "747:     }",
          "751:     clean:",
          "752:     ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "756: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
          "757:     LOG_DEBUG(__FUNCTION__);",
          "762:     CHECK_STATE(encrypted_poly);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "755:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "785:     LOG_DEBUG(__FUNCTION__);",
          "790:     CHECK_STATE(encrypted_skey);",
          "791:     CHECK_STATE(result_str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782:     uint32_t enc_len;",
          "783:     int status;",
          "785:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "799:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "805:     trustedGenerateEcdsaKeyAES(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "807:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "802:     uint32_t enc_len;",
          "803:     int status;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "851:     strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));",
          "852:     strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));",
          "857:     clean:",
          "858:     ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "863:                                unsigned _t, unsigned _n) {",
          "864:     LOG_DEBUG(__FUNCTION__);",
          "869:     CHECK_STATE(encrypted_dkg_secret);",
          "870:     CHECK_STATE(public_shares);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "889:         goto clean;",
          "890:     }",
          "894:     clean:",
          "895:     ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "899:                          uint8_t *encryptedPrivateKey, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "900:     LOG_DEBUG(__FUNCTION__);",
          "906:     CHECK_STATE(public_shares);",
          "907:     CHECK_STATE(s_share);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "947:     clean:",
          "948:     mpz_clear(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "934:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1049:     clean:",
          "1050:     mpz_clear(bls_key);",
          "1051:     mpz_clear(sum);",
          "1052:     mpz_clear(q);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1036:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1057:                        char *bls_pub_key) {",
          "1058:     LOG_DEBUG(__FUNCTION__);",
          "1063:     CHECK_STATE(bls_pub_key);",
          "1064:     CHECK_STATE(encryptedPrivateKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1049:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1076:     skey_hex[ECDSA_SKEY_LEN - 1] = 0;",
          "1078:     if (calc_bls_public_key(skey_hex, bls_pub_key) != 0) {",
          "1081:         snprintf(errString, BUF_LEN, \"could not calculate bls public key\");",
          "1082:         LOG_ERROR(errString);",
          "1083:         goto clean;",
          "1084:     }",
          "1088:     clean:",
          "1089:     ;",
          "1090: }",
          "",
          "[Removed Lines]",
          "1079:         LOG_ERROR(skey_hex);",
          "",
          "[Added Lines]",
          "1073:     SET_SUCCESS",
          "",
          "---------------"
        ]
      }
    }
  ]
}