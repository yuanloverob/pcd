{
  "cve_id": "CVE-2021-40818",
  "cve_desc": "scheme/webauthn.c in Glewlwyd SSO server through 2.5.3 has a buffer overflow during FIDO2 signature validation in webauthn registration.",
  "repo": "babelouest/glewlwyd",
  "patch_hash": "0efd112bb62f566877750ad62ee828bff579b4e2",
  "patch_info": {
    "commit_hash": "0efd112bb62f566877750ad62ee828bff579b4e2",
    "repo": "babelouest/glewlwyd",
    "commit_url": "https://github.com/babelouest/glewlwyd/commit/0efd112bb62f566877750ad62ee828bff579b4e2",
    "files": [
      "src/scheme/webauthn.c"
    ],
    "message": "Fix fido2 signature validation bug",
    "before_after_code_files": [
      "src/scheme/webauthn.c||src/scheme/webauthn.c"
    ]
  },
  "patch_diff": {
    "src/scheme/webauthn.c||src/scheme/webauthn.c": [
      "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1543:   gnutls_pubkey_t pubkey = NULL;",
      "1544:   gnutls_x509_crt_t cert = NULL;",
      "1545:   gnutls_datum_t cert_dat, data, signature, cert_issued_by;",
      "1547:   size_t data_signed_offset = 0, client_data_hash_len = 32, cert_export_len = 32, cert_export_b64_len = 0;",
      "1549:   if (j_error != NULL) {",
      "",
      "[Removed Lines]",
      "1546:   unsigned char data_signed[200], client_data_hash[32], cert_export[32], cert_export_b64[64];",
      "",
      "[Added Lines]",
      "1546:   unsigned char * data_signed = NULL, client_data_hash[32], cert_export[32], cert_export_b64[64];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1632:         break;",
      "1633:       }",
      "1636:       data_signed[0] = 0x0;",
      "1637:       data_signed_offset = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1635:       if ((data_signed = o_malloc(rpid_hash_len+client_data_hash_len+credential_id_len+cert_x_len+cert_y_len+2)) == NULL) {",
      "1636:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error allocating data_signed\");",
      "1637:         json_array_append_new(j_error, json_string(\"Internal error\"));",
      "1638:         break;",
      "1639:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1666:       }",
      "1668:     } while (0);",
      "1670:     if (json_array_size(j_error)) {",
      "1671:       j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", j_error);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1675:     o_free(data_signed);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2bdecc1b39a542b448bdca9879e35a1a764361f",
      "candidate_info": {
        "commit_hash": "b2bdecc1b39a542b448bdca9879e35a1a764361f",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/b2bdecc1b39a542b448bdca9879e35a1a764361f",
        "files": [
          "src/client/database.c",
          "src/client/ldap.c",
          "src/plugin/protocol_oidc.c",
          "src/scheme/certificate.c",
          "src/scheme/oauth2.c",
          "src/scheme/webauthn.c",
          "src/user/database.c",
          "src/user/ldap.c"
        ],
        "message": "Use o_base64*_alloc when relevant",
        "before_after_code_files": [
          "src/client/database.c||src/client/database.c",
          "src/client/ldap.c||src/client/ldap.c",
          "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c",
          "src/scheme/certificate.c||src/scheme/certificate.c",
          "src/scheme/oauth2.c||src/scheme/oauth2.c",
          "src/scheme/webauthn.c||src/scheme/webauthn.c",
          "src/user/database.c||src/user/database.c",
          "src/user/ldap.c||src/user/ldap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/scheme/webauthn.c||src/scheme/webauthn.c"
          ],
          "candidate": [
            "src/scheme/webauthn.c||src/scheme/webauthn.c"
          ]
        }
      },
      "candidate_diff": {
        "src/client/database.c||src/client/database.c": [
          "File: src/client/database.c -> src/client/database.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   int res;",
          "434:   unsigned char password_b64_decoded[1024] = {0};",
          "435:   char * salt = NULL, * client_id_escaped, * client_id_clause, * str_iterator;",
          "438:   client_id_escaped = h_escape_string_with_quotes(param->conn, client_id);",
          "439:   client_id_clause = msprintf(\" = UPPER(%s)\", client_id_escaped);",
          "",
          "[Removed Lines]",
          "436:   size_t password_b64_decoded_len, gc_password_len;",
          "",
          "[Added Lines]",
          "436:   size_t password_b64_decoded_len = 0, gc_password_len;",
          "",
          "---------------"
        ],
        "src/client/ldap.c||src/client/ldap.c": [
          "File: src/client/ldap.c -> src/client/ldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:   unsigned int i;",
          "508:   size_t index = 0, index_scope = 0;",
          "509:   int has_error = 0;",
          "513:   if (j_mod_value_free_array != NULL) {",
          "515:     if (add) {",
          "",
          "[Removed Lines]",
          "510:   unsigned char * value_enc = NULL;",
          "511:   size_t value_enc_len = 0;",
          "",
          "[Added Lines]",
          "510:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:                     mods[i]->mod_type = (char *)json_string_value(json_object_get(j_format, \"property\"));",
          "823:                     json_array_foreach(j_property, index_scope, j_property_value) {",
          "824:                       if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "837:                         } else {",
          "838:                           y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (1-1)\", json_string_value(j_property_value));",
          "839:                           has_error = 1;",
          "",
          "[Removed Lines]",
          "825:                         if (o_base64_decode((const unsigned char *)json_string_value(j_property_value), json_string_length(j_property_value), NULL, &value_enc_len)) {",
          "826:                           if ((value_enc = o_malloc(value_enc_len+1)) != NULL) {",
          "827:                             if (o_base64_decode((const unsigned char *)json_string_value(j_property_value), json_string_length(j_property_value), value_enc, &value_enc_len)) {",
          "828:                               value_enc[value_enc_len] = '\\0';",
          "829:                               mods[i]->mod_values[index_scope] = (char *)value_enc;",
          "830:                             } else {",
          "831:                               y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (1-2)\", json_string_value(j_property_value));",
          "832:                               has_error = 1;",
          "833:                             }",
          "834:                           } else {",
          "835:                             y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error allocating resources for value_enc (1)\");",
          "836:                           }",
          "",
          "[Added Lines]",
          "824:                         if (o_base64_decode_alloc((const unsigned char *)json_string_value(j_property_value), json_string_length(j_property_value), &dat)) {",
          "825:                           mods[i]->mod_values[index_scope] = o_strndup((const char *)dat.data, dat.size);",
          "826:                           o_free(dat.data);",
          "827:                           dat.data = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "864:                     mods[i]->mod_op = add?LDAP_MOD_ADD:LDAP_MOD_REPLACE;",
          "865:                     mods[i]->mod_type = (char *)json_string_value(json_object_get(j_format, \"property\"));",
          "866:                     if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "879:                       } else {",
          "881:                         has_error = 1;",
          "882:                       }",
          "883:                       json_array_append_new(j_mod_value_free_array, json_integer(i));",
          "",
          "[Removed Lines]",
          "867:                       if (o_base64_decode((const unsigned char *)json_string_value(j_property), json_string_length(j_property), NULL, &value_enc_len)) {",
          "868:                         if ((value_enc = o_malloc(value_enc_len+1)) != NULL) {",
          "869:                           if (o_base64_decode((const unsigned char *)json_string_value(j_property), json_string_length(j_property), value_enc, &value_enc_len)) {",
          "870:                             value_enc[value_enc_len] = '\\0';",
          "871:                             mods[i]->mod_values[0] = (char *)value_enc;",
          "872:                           } else {",
          "873:                             y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (2-2)\", json_string_value(j_property));",
          "874:                             has_error = 1;",
          "875:                           }",
          "876:                         } else {",
          "877:                           y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error allocating resources for value_enc (2)\");",
          "878:                         }",
          "880:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (2-1)\", json_string_value(j_property));",
          "",
          "[Added Lines]",
          "858:                       if (o_base64_decode_alloc((const unsigned char *)json_string_value(j_property), json_string_length(j_property), &dat)) {",
          "859:                         mods[i]->mod_values[0] = o_strndup((const char *)dat.data, dat.size);",
          "860:                         o_free(dat.data);",
          "861:                         dat.data = NULL;",
          "863:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode_alloc for LDAP property '%s' (2-1)\", json_string_value(j_property));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:   char * str_scope;",
          "952:   struct berval ** result_values = NULL;",
          "953:   int i;",
          "957:   if (j_client != NULL) {",
          "958:     json_object_foreach(j_properties_client, field, j_property) {",
          "",
          "[Removed Lines]",
          "954:   unsigned char * value_enc = NULL;",
          "955:   size_t value_enc_len = 0;",
          "",
          "[Added Lines]",
          "937:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "972:           }",
          "973:         } else if (0 == o_strcmp(field, \"client_id\") || 0 == o_strcmp(field, \"name\") || 0 == o_strcmp(field, \"description\") || (json_object_get(json_object_get(j_params, \"data-format\"), field) != NULL && json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"multiple\") != json_true())) {",
          "974:           if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "987:             } else {",
          "988:               y_log_message(Y_LOG_LEVEL_WARNING, \"get_client_from_result - Error o_base64_encode for LDAP property '%s' (1)\", json_string_value(j_property));",
          "989:             }",
          "",
          "[Removed Lines]",
          "975:             if (o_base64_encode((const unsigned char *)result_values[0]->bv_val, result_values[0]->bv_len, NULL, &value_enc_len)) {",
          "976:               if ((value_enc = o_malloc(value_enc_len+1)) != NULL) {",
          "977:                 if (o_base64_encode((const unsigned char *)result_values[0]->bv_val, result_values[0]->bv_len, value_enc, &value_enc_len)) {",
          "978:                   value_enc[value_enc_len] = '\\0';",
          "979:                   json_object_set_new(j_client, field, json_stringn((const char *)value_enc, value_enc_len));",
          "980:                 } else {",
          "981:                   y_log_message(Y_LOG_LEVEL_WARNING, \"get_client_from_result - Error o_base64_encode for LDAP property '%s' (2)\", json_string_value(j_property));",
          "982:                 }",
          "983:                 o_free(value_enc);",
          "984:               } else {",
          "985:                 y_log_message(Y_LOG_LEVEL_ERROR, \"get_client_from_result - Error allocating resources for value_enc\");",
          "986:               }",
          "",
          "[Added Lines]",
          "957:             if (o_base64_encode_alloc((const unsigned char *)result_values[0]->bv_val, result_values[0]->bv_len, &dat)) {",
          "958:               json_object_set_new(j_client, field, json_stringn((const char *)dat.data, dat.size));",
          "959:               o_free(dat.data);",
          "960:               dat.data = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1000:           json_object_set_new(j_client, field, json_array());",
          "1001:           for (i=0; i<ldap_count_values_len(result_values); i++) {",
          "1002:             if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "1015:               } else {",
          "1017:               }",
          "1018:             } else if (0 == o_strcmp(\"jwks\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "1019:               if (json_array_append_new(json_object_get(j_client, field), json_loads(result_values[i]->bv_val, JSON_DECODE_ANY, NULL))) {",
          "",
          "[Removed Lines]",
          "1003:               if (o_base64_encode((const unsigned char *)result_values[i]->bv_val, result_values[i]->bv_len, NULL, &value_enc_len)) {",
          "1004:                 if ((value_enc = o_malloc(value_enc_len+1)) != NULL) {",
          "1005:                   if (o_base64_encode((const unsigned char *)result_values[i]->bv_val, result_values[i]->bv_len, value_enc, &value_enc_len)) {",
          "1006:                     value_enc[value_enc_len] = '\\0';",
          "1007:                     json_array_append_new(json_object_get(j_client, field), json_stringn((const char *)value_enc, value_enc_len));",
          "1008:                   } else {",
          "1009:                     y_log_message(Y_LOG_LEVEL_WARNING, \"get_client_from_result - Error o_base64_encode for LDAP property '%s' (2)\", json_string_value(j_property));",
          "1010:                   }",
          "1011:                   o_free(value_enc);",
          "1012:                 } else {",
          "1013:                   y_log_message(Y_LOG_LEVEL_ERROR, \"get_client_from_result - Error allocating resources for value_enc\");",
          "1014:                 }",
          "1016:                 y_log_message(Y_LOG_LEVEL_WARNING, \"get_client_from_result - Error o_base64_encode for LDAP property '%s' (1)\", json_string_value(j_property));",
          "",
          "[Added Lines]",
          "977:               if (o_base64_encode_alloc((const unsigned char *)result_values[i]->bv_val, result_values[i]->bv_len, &dat)) {",
          "978:                 json_array_append_new(json_object_get(j_client, field), json_stringn((const char *)dat.data, dat.size));",
          "979:                 o_free(dat.data);",
          "980:                 dat.data = NULL;",
          "982:                 y_log_message(Y_LOG_LEVEL_WARNING, \"get_client_from_result - Error o_base64_encode_alloc for LDAP property '%s'\", json_string_value(j_property));",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
          "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4921:   int res;",
          "4922:   size_t index = 0, token_hash_dec_len = 0;",
          "4923:   char * pattern_escaped, * pattern_clause, * name_escaped = NULL;",
          "4926:   j_query = json_pack(\"{sss[ssssssssss]s{ssss}sisiss}\",",
          "4927:                       \"table\",",
          "",
          "[Removed Lines]",
          "4924:   unsigned char token_hash_dec[128];",
          "",
          "[Added Lines]",
          "4924:   unsigned char token_hash_dec[128] = {0};",
          "",
          "---------------"
        ],
        "src/scheme/certificate.c||src/scheme/certificate.c": [
          "File: src/scheme/certificate.c -> src/scheme/certificate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   size_t key_id_enc_len = 256, dn_len = 0, issuer_dn_len = 0;",
          "134:   time_t expires_at = 0, issued_at = 0;",
          "135:   int ret;",
          "139:   if (!o_strnullempty(x509_data)) {",
          "140:     if (!gnutls_x509_crt_init(&cert)) {",
          "141:       if (der_format) {",
          "142:         cert_dat.data = NULL;",
          "143:         cert_dat.size = 0;",
          "155:         } else {",
          "157:         }",
          "158:       } else {",
          "159:         cert_dat.data = (unsigned char *)x509_data;",
          "",
          "[Removed Lines]",
          "136:   unsigned char * der_dec = NULL, key_id_enc[257] = {0};",
          "137:   size_t der_dec_len = 0;",
          "144:         if (o_base64_decode((const unsigned char *)x509_data, o_strlen(x509_data), NULL, &der_dec_len)) {",
          "145:           if ((der_dec = o_malloc(der_dec_len+4)) != NULL) {",
          "146:             if (o_base64_decode((const unsigned char *)x509_data, o_strlen(x509_data), der_dec, &der_dec_len)) {",
          "147:               cert_dat.data = der_dec;",
          "148:               cert_dat.size = der_dec_len;",
          "149:             } else {",
          "150:               y_log_message(Y_LOG_LEVEL_ERROR, \"parse_certificate - Error o_base64_decode (2)\");",
          "151:             }",
          "152:           } else {",
          "153:             y_log_message(Y_LOG_LEVEL_ERROR, \"parse_certificate - Error allocating resources for der_dec\");",
          "154:           }",
          "156:           y_log_message(Y_LOG_LEVEL_ERROR, \"parse_certificate - Error o_base64_decode (1)\");",
          "",
          "[Added Lines]",
          "135:   unsigned char key_id_enc[257] = {0};",
          "136:   struct _o_datum dat = {0, NULL};",
          "143:         if (o_base64_decode_alloc((const unsigned char *)x509_data, o_strlen(x509_data), &dat)) {",
          "144:           cert_dat.data = dat.data;",
          "145:           cert_dat.size = dat.size;",
          "147:           y_log_message(Y_LOG_LEVEL_ERROR, \"parse_certificate - Error o_base64_decode_alloc\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:       y_log_message(Y_LOG_LEVEL_ERROR, \"parse_certificate - Error gnutls_x509_crt_init\");",
          "225:       j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "226:     }",
          "228:   } else {",
          "229:     j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);",
          "230:   }",
          "",
          "[Removed Lines]",
          "227:     o_free(der_dec);",
          "",
          "[Added Lines]",
          "218:     o_free(dat.data);",
          "",
          "---------------"
        ],
        "src/scheme/oauth2.c||src/scheme/oauth2.c": [
          "File: src/scheme/oauth2.c -> src/scheme/oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:   time_t now;",
          "446:   char * expires_at_clause, * i_export, * state_export = NULL, * state_export_b64 = NULL;",
          "447:   struct _i_session i_session;",
          "450:   if (i_init_session(&i_session) == I_OK) {",
          "451:     if (i_import_session_json_t(&i_session, json_object_get(j_provider, \"export\")) == I_OK) {",
          "452:       if (i_set_int_parameter(&i_session, I_OPT_STATE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_STATE_ID_LENGTH) == I_OK && i_set_int_parameter(&i_session, I_OPT_NONCE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_NONCE_LENGTH) == I_OK) {",
          "453:         if ((j_state = json_pack(\"{sssssOsOss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_AUTHENTICATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"callback_url\", callback_url)) != NULL) {",
          "454:           state_export = json_dumps(j_state, JSON_COMPACT);",
          "495:               } else {",
          "498:               }",
          "499:             } else {",
          "501:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "502:             }",
          "503:           } else {",
          "506:           }",
          "507:           o_free(state_export);",
          "508:           o_free(state_export_b64);",
          "",
          "[Removed Lines]",
          "448:   size_t state_export_b64_len = 0;",
          "455:           if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "456:             if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "457:               state_export_b64[state_export_b64_len] = '\\0';",
          "458:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "459:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "460:                 time(&now);",
          "461:                 if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "462:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "463:                 } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "464:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "465:                 } else { // HOEL_DB_TYPE_SQLITE",
          "466:                   expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "467:                 }",
          "468:                 i_export = i_export_session_str(&i_session);",
          "469:                 j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "470:                                     \"table\",",
          "471:                                     GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "472:                                     \"values\",",
          "473:                                       \"gsor_id\",",
          "474:                                        json_null(),",
          "475:                                       \"gsos_expires_at\",",
          "476:                                         \"raw\",",
          "477:                                         expires_at_clause,",
          "478:                                       \"gsos_state\",",
          "479:                                       state_export_b64,",
          "480:                                       \"gsos_session_export\",",
          "481:                                       i_export,",
          "482:                                       \"gsos_status\",",
          "483:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "484:                 o_free(expires_at_clause);",
          "485:                 res = h_insert(config->conn, j_query, NULL);",
          "486:                 json_decref(j_query);",
          "487:                 o_free(i_export);",
          "488:                 if (res == H_OK) {",
          "489:                   j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "490:                 } else {",
          "491:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error executing j_query (2)\");",
          "492:                   config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "493:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "494:                 }",
          "496:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error i_build_auth_url_get\");",
          "497:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "500:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error o_base64url_encode\");",
          "504:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error o_malloc state_export_b64\");",
          "505:             j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "",
          "[Added Lines]",
          "448:   struct _o_datum dat = {0, NULL};",
          "455:           if (o_base64url_encode_alloc((const unsigned char *)state_export, o_strlen(state_export), &dat)) {",
          "456:             state_export_b64 = o_strndup((const char*)dat.data, dat.size);",
          "457:             o_free(dat.data);",
          "458:             i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "459:             if (i_build_auth_url_get(&i_session) == I_OK) {",
          "460:               time(&now);",
          "461:               if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "462:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "463:               } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "464:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "465:               } else { // HOEL_DB_TYPE_SQLITE",
          "466:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "467:               }",
          "468:               i_export = i_export_session_str(&i_session);",
          "469:               j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "470:                                   \"table\",",
          "471:                                   GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "472:                                   \"values\",",
          "473:                                     \"gsor_id\",",
          "474:                                      json_null(),",
          "475:                                     \"gsos_expires_at\",",
          "476:                                       \"raw\",",
          "477:                                       expires_at_clause,",
          "478:                                     \"gsos_state\",",
          "479:                                     state_export_b64,",
          "480:                                     \"gsos_session_export\",",
          "481:                                     i_export,",
          "482:                                     \"gsos_status\",",
          "483:                                     GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "484:               o_free(expires_at_clause);",
          "485:               res = h_insert(config->conn, j_query, NULL);",
          "486:               json_decref(j_query);",
          "487:               o_free(i_export);",
          "488:               if (res == H_OK) {",
          "489:                 j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "491:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error executing j_query (2)\");",
          "492:                 config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "493:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "496:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error i_build_auth_url_get\");",
          "500:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error o_base64url_encode\");",
          "501:             j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:   time_t now;",
          "535:   char * expires_at_clause, * i_export, * state_export = NULL, * state_export_b64 = NULL;",
          "536:   struct _i_session i_session;",
          "539:   time(&now);",
          "540:   if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "",
          "[Removed Lines]",
          "537:   size_t state_export_b64_len = 0;",
          "",
          "[Added Lines]",
          "533:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569:         if (i_set_int_parameter(&i_session, I_OPT_STATE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_STATE_ID_LENGTH) == I_OK && i_set_int_parameter(&i_session, I_OPT_NONCE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_NONCE_LENGTH) == I_OK) {",
          "570:           if ((j_state = json_pack(\"{sssssOsOssss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_AUTHENTICATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"username\", username, \"callback_url\", callback_url)) != NULL) {",
          "571:             state_export = json_dumps(j_state, JSON_COMPACT);",
          "612:                 } else {",
          "615:                 }",
          "616:               } else {",
          "618:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "619:               }",
          "620:             } else {",
          "623:             }",
          "624:             o_free(state_export);",
          "625:             o_free(state_export_b64);",
          "",
          "[Removed Lines]",
          "572:             if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "573:               if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "574:                 state_export_b64[state_export_b64_len] = '\\0';",
          "575:                 i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "576:                 if (i_build_auth_url_get(&i_session) == I_OK) {",
          "577:                   time(&now);",
          "578:                   if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "579:                     expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "580:                   } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "581:                     expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "582:                   } else { // HOEL_DB_TYPE_SQLITE",
          "583:                     expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "584:                   }",
          "585:                   i_export = i_export_session_str(&i_session);",
          "586:                   j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "587:                                       \"table\",",
          "588:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "589:                                       \"values\",",
          "590:                                         \"gsor_id\",",
          "591:                                          json_object_get(j_registration, \"gsor_id\"),",
          "592:                                         \"gsos_expires_at\",",
          "593:                                           \"raw\",",
          "594:                                           expires_at_clause,",
          "595:                                         \"gsos_state\",",
          "596:                                         state_export_b64,",
          "597:                                         \"gsos_session_export\",",
          "598:                                         i_export,",
          "599:                                         \"gsos_status\",",
          "600:                                         GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "601:                   o_free(expires_at_clause);",
          "602:                   res = h_insert(config->conn, j_query, NULL);",
          "603:                   json_decref(j_query);",
          "604:                   o_free(i_export);",
          "605:                   if (res == H_OK) {",
          "606:                     j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "607:                   } else {",
          "608:                     y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error executing j_query (2)\");",
          "609:                     config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "610:                     j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "611:                   }",
          "613:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_build_auth_url_get\");",
          "614:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "617:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_base64url_encode\");",
          "621:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_malloc state_export_b64\");",
          "622:               j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "",
          "[Added Lines]",
          "568:             if (o_base64url_encode_alloc((const unsigned char *)state_export, o_strlen(state_export), &dat)) {",
          "569:               state_export_b64 = o_strndup((const char*)dat.data, dat.size);",
          "570:               o_free(dat.data);",
          "571:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "572:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "573:                 time(&now);",
          "574:                 if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "575:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "576:                 } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "577:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "578:                 } else { // HOEL_DB_TYPE_SQLITE",
          "579:                   expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "580:                 }",
          "581:                 i_export = i_export_session_str(&i_session);",
          "582:                 j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "583:                                     \"table\",",
          "584:                                     GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "585:                                     \"values\",",
          "586:                                       \"gsor_id\",",
          "587:                                        json_object_get(j_registration, \"gsor_id\"),",
          "588:                                       \"gsos_expires_at\",",
          "589:                                         \"raw\",",
          "590:                                         expires_at_clause,",
          "591:                                       \"gsos_state\",",
          "592:                                       state_export_b64,",
          "593:                                       \"gsos_session_export\",",
          "594:                                       i_export,",
          "595:                                       \"gsos_status\",",
          "596:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "597:                 o_free(expires_at_clause);",
          "598:                 res = h_insert(config->conn, j_query, NULL);",
          "599:                 json_decref(j_query);",
          "600:                 o_free(i_export);",
          "601:                 if (res == H_OK) {",
          "602:                   j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "604:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error executing j_query (2)\");",
          "605:                   config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "606:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "609:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_build_auth_url_get\");",
          "613:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_base64url_encode_alloc\");",
          "614:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "744:   time_t now;",
          "745:   char * expires_at_clause, * i_export, * state_export = NULL, * state_export_b64 = NULL;",
          "746:   struct _i_session i_session;",
          "749:   if (!pthread_mutex_lock(&oauth2_config->insert_lock)) {",
          "750:     if (i_init_session(&i_session) == I_OK) {",
          "",
          "[Removed Lines]",
          "747:   size_t state_export_b64_len = 0;",
          "",
          "[Added Lines]",
          "739:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "752:         if (i_set_int_parameter(&i_session, I_OPT_STATE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_STATE_ID_LENGTH) == I_OK && i_set_int_parameter(&i_session, I_OPT_NONCE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_NONCE_LENGTH) == I_OK) {",
          "753:           if ((j_state = json_pack(\"{sssssOsOssss*ss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_REGISTRATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"username\", username, \"register_url\", register_url, \"complete_url\", complete_url)) != NULL) {",
          "754:             state_export = json_dumps(j_state, JSON_COMPACT);",
          "761:                                       \"table\",",
          "763:                                       \"values\",",
          "772:                   res = h_insert(config->conn, j_query, NULL);",
          "773:                   json_decref(j_query);",
          "774:                   if (res == H_OK) {",
          "812:                   } else {",
          "814:                     config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "815:                     j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "816:                   }",
          "817:                 } else {",
          "820:                 }",
          "821:               } else {",
          "823:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "824:               }",
          "825:             } else {",
          "828:             }",
          "829:             o_free(state_export);",
          "830:             o_free(state_export_b64);",
          "",
          "[Removed Lines]",
          "755:             if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "756:               if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "757:                 state_export_b64[state_export_b64_len] = '\\0';",
          "758:                 i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "759:                 if (i_build_auth_url_get(&i_session) == I_OK) {",
          "760:                   j_query = json_pack(\"{sss{sOsOssss}}\",",
          "762:                                       GLEWLWYD_SCHEME_OAUTH2_REGISTRATION_TABLE,",
          "764:                                         \"gsor_mod_name\",",
          "765:                                         json_object_get(oauth2_config->j_parameters, \"name\"),",
          "766:                                         \"gsor_provider\",",
          "767:                                         json_object_get(j_provider, \"name\"),",
          "768:                                         \"gsor_username\",",
          "769:                                         username,",
          "770:                                         \"gsor_userinfo_sub\",",
          "771:                                         \"\");",
          "775:                     time(&now);",
          "776:                     if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "777:                       expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "778:                     } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "779:                       expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "780:                     } else { // HOEL_DB_TYPE_SQLITE",
          "781:                       expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "782:                     }",
          "783:                     j_last_id = h_last_insert_id(config->conn);",
          "784:                     i_export = i_export_session_str(&i_session);",
          "785:                     j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "786:                                         \"table\",",
          "787:                                         GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "788:                                         \"values\",",
          "789:                                           \"gsor_id\",",
          "790:                                            j_last_id,",
          "791:                                           \"gsos_expires_at\",",
          "792:                                             \"raw\",",
          "793:                                             expires_at_clause,",
          "794:                                           \"gsos_state\",",
          "795:                                           state_export_b64,",
          "796:                                           \"gsos_session_export\",",
          "797:                                           i_export,",
          "798:                                           \"gsos_status\",",
          "799:                                           GLEWLWYD_SCHEME_OAUTH2_SESSION_REGISTRATION);",
          "800:                     o_free(expires_at_clause);",
          "801:                     res = h_insert(config->conn, j_query, NULL);",
          "802:                     json_decref(j_query);",
          "803:                     json_decref(j_last_id);",
          "804:                     o_free(i_export);",
          "805:                     if (res == H_OK) {",
          "806:                       j_return = json_pack(\"{siss}\", \"result\", G_OK, \"registration\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "807:                     } else {",
          "808:                       y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (2)\");",
          "809:                       config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "810:                       j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "811:                     }",
          "813:                     y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (1)\");",
          "818:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error i_build_auth_url_get\");",
          "819:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "822:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_base64url_encode\");",
          "826:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_malloc state_export_b64\");",
          "827:               j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "",
          "[Added Lines]",
          "747:             if (o_base64url_encode_alloc((const unsigned char *)state_export, o_strlen(state_export), &dat)) {",
          "748:               state_export_b64 = o_strndup((const char*)dat.data, dat.size);",
          "749:               o_free(dat.data);",
          "750:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "751:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "752:                 j_query = json_pack(\"{sss{sOsOssss}}\",",
          "753:                                     \"table\",",
          "754:                                     GLEWLWYD_SCHEME_OAUTH2_REGISTRATION_TABLE,",
          "755:                                     \"values\",",
          "756:                                       \"gsor_mod_name\",",
          "757:                                       json_object_get(oauth2_config->j_parameters, \"name\"),",
          "758:                                       \"gsor_provider\",",
          "759:                                       json_object_get(j_provider, \"name\"),",
          "760:                                       \"gsor_username\",",
          "761:                                       username,",
          "762:                                       \"gsor_userinfo_sub\",",
          "763:                                       \"\");",
          "764:                 res = h_insert(config->conn, j_query, NULL);",
          "765:                 json_decref(j_query);",
          "766:                 if (res == H_OK) {",
          "767:                   time(&now);",
          "768:                   if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "769:                     expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "770:                   } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "771:                     expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "772:                   } else { // HOEL_DB_TYPE_SQLITE",
          "773:                     expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "774:                   }",
          "775:                   j_last_id = h_last_insert_id(config->conn);",
          "776:                   i_export = i_export_session_str(&i_session);",
          "777:                   j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "779:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "781:                                         \"gsor_id\",",
          "782:                                          j_last_id,",
          "783:                                         \"gsos_expires_at\",",
          "784:                                           \"raw\",",
          "785:                                           expires_at_clause,",
          "786:                                         \"gsos_state\",",
          "787:                                         state_export_b64,",
          "788:                                         \"gsos_session_export\",",
          "789:                                         i_export,",
          "790:                                         \"gsos_status\",",
          "791:                                         GLEWLWYD_SCHEME_OAUTH2_SESSION_REGISTRATION);",
          "792:                   o_free(expires_at_clause);",
          "795:                   json_decref(j_last_id);",
          "796:                   o_free(i_export);",
          "798:                     j_return = json_pack(\"{siss}\", \"result\", G_OK, \"registration\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "800:                     y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (2)\");",
          "805:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (1)\");",
          "806:                   config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "807:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "810:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error i_build_auth_url_get\");",
          "814:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_base64url_encode_alloc\");",
          "815:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "---------------"
        ],
        "src/scheme/webauthn.c||src/scheme/webauthn.c": [
          "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:     j_cert = json_array_get(j_header_x5c, i);",
          "1033:     if (!json_string_null_or_empty(j_cert)) {",
          "1035:         if (o_base64_decode((const unsigned char *)json_string_value(j_cert), json_string_length(j_cert), header_cert_decoded, &header_cert_decoded_len)) {",
          "1036:           if (!gnutls_x509_crt_init(&cert_x509[i])) {",
          "1037:             cert_dat.data = header_cert_decoded;",
          "",
          "[Removed Lines]",
          "1034:       if ((header_cert_decoded = o_malloc(json_string_length(j_cert))) != NULL) {",
          "",
          "[Added Lines]",
          "1034:       if ((header_cert_decoded = o_malloc(json_string_length(j_cert)+4)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1562: static json_t * check_attestation_android_safetynet(json_t * j_params, cbor_item_t * auth_data, cbor_item_t * att_stmt, const unsigned char * client_data) {",
          "1563:   json_t * j_error = json_array(), * j_return;",
          "1565:   char * message = NULL, * response_token = NULL, issued_to[128] = {0}, * jwt_header = NULL;",
          "1566:   size_t pubkey_export_len = 1024, cert_export_len = 32, cert_export_b64_len, issued_to_len = 128, client_data_hash_len = 32, nonce_base_hash_len = 32, nonce_base_hash_b64_len = 0, header_cert_decoded_len = 0;",
          "1567:   gnutls_pubkey_t pubkey = NULL;",
          "",
          "[Removed Lines]",
          "1564:   unsigned char pubkey_export[1024] = {0}, cert_export[32] = {0}, cert_export_b64[64], client_data_hash[32], * nonce_base = NULL, nonce_base_hash[32], * nonce_base_hash_b64 = NULL, * header_cert_decoded = NULL;",
          "",
          "[Added Lines]",
          "1564:   unsigned char pubkey_export[1024] = {0}, cert_export[32] = {0}, cert_export_b64[64] = {0}, client_data_hash[32] = {0}, * nonce_base = NULL, nonce_base_hash[32] = {0}, nonce_base_hash_b64[64] = {0}, * header_cert_decoded = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1627:         break;",
          "1628:       }",
          "1636:       if (!o_base64_encode(nonce_base_hash, 32, nonce_base_hash_b64, &nonce_base_hash_b64_len)) {",
          "1637:         json_array_append_new(j_error, json_string(\"Internal error\"));",
          "1638:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_android_safetynet - Error o_base64_encode for nonce_base_hash_b64\");",
          "1639:         break;",
          "1640:       }",
          "1643:       if (response == NULL) {",
          "1644:         json_array_append_new(j_error, json_string(\"response invalid\"));",
          "",
          "[Removed Lines]",
          "1630:       if ((nonce_base_hash_b64 = o_malloc(64)) == NULL) {",
          "1631:         json_array_append_new(j_error, json_string(\"Internal error\"));",
          "1632:         y_log_message(Y_LOG_LEVEL_ERROR, \"check_attestation_android_safetynet - Error allocating resources for nonce_base_hash_b64\");",
          "1633:         break;",
          "1634:       }",
          "1641:       nonce_base_hash_b64[nonce_base_hash_b64_len] = '\\0';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1796:     gnutls_x509_crt_deinit(cert);",
          "1797:     r_jwt_free(j_response);",
          "1798:     o_free(nonce_base);",
          "1800:     o_free(response_token);",
          "1801:     o_free(header_cert_decoded);",
          "1802:     o_free(jwt_header);",
          "",
          "[Removed Lines]",
          "1799:     o_free(nonce_base_hash_b64);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1823:   gnutls_pubkey_t pubkey = NULL;",
          "1824:   gnutls_x509_crt_t cert = NULL;",
          "1825:   gnutls_datum_t cert_dat, data, signature, cert_issued_by;",
          "1827:   size_t data_signed_offset = 0, client_data_hash_len = 32, cert_export_len = 32, cert_export_b64_len = 0;",
          "1829:   if (j_error != NULL) {",
          "",
          "[Removed Lines]",
          "1826:   unsigned char * data_signed = NULL, client_data_hash[32], cert_export[32], cert_export_b64[64];",
          "",
          "[Added Lines]",
          "1818:   unsigned char * data_signed = NULL, client_data_hash[32] = {0}, cert_export[32] = {0}, cert_export_b64[64] = {0};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2012:           ret = G_ERROR_PARAM;",
          "2013:           break;",
          "2014:         }",
          "2016:           y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for client_data\");",
          "2017:           json_array_append_new(j_error, json_string(\"Internal error\"));",
          "2018:           ret = G_ERROR_MEMORY;",
          "",
          "[Removed Lines]",
          "2015:         if ((client_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))+1)) == NULL) {",
          "",
          "[Added Lines]",
          "2007:         if ((client_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))+4)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2087:           break;",
          "2088:         }",
          "2091:           y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for o_malloc\");",
          "2092:           ret = G_ERROR_MEMORY;",
          "2093:           break;",
          "",
          "[Removed Lines]",
          "2090:         if ((att_obj = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"attestationObject\")))) == NULL) {",
          "",
          "[Added Lines]",
          "2082:         if ((att_obj = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"attestationObject\"))+4)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2218:         if (credential_id_b64 == NULL) {",
          "2219:           y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error o_malloc for credential_id_b64\");",
          "2220:           json_array_append_new(j_error, json_string(\"Internal error\"));",
          "2222:           break;",
          "2223:         }",
          "",
          "[Removed Lines]",
          "2221:           ret = G_ERROR_PARAM;",
          "",
          "[Added Lines]",
          "2213:           ret = G_ERROR_MEMORY;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2477: static int check_assertion(struct config_module * config, json_t * j_params, const char * username, json_t * j_scheme_data, json_t * j_assertion) {",
          "2478:   int ret, res;",
          "2479:   unsigned char * client_data = NULL, * challenge_b64 = NULL, * auth_data = NULL, rpid_hash[32] = {0}, * flags, cdata_hash[32] = {0},",
          "2481:   char * challenge_hash = NULL;",
          "2482:   const char * rpid = NULL;",
          "2484:   json_t * j_client_data = NULL, * j_credential = NULL, * j_query;",
          "2485:   gnutls_pubkey_t pubkey = NULL;",
          "2486:   gnutls_datum_t pubkey_dat, data, signature;",
          "2488:   if (j_scheme_data != NULL && j_assertion != NULL) {",
          "2489:     do {",
          "",
          "[Removed Lines]",
          "2480:                   data_signed[128] = {0}, sig[128] = {0}, * counter;",
          "2483:   size_t client_data_len, challenge_b64_len, auth_data_len, rpid_hash_len = 32, cdata_hash_len = 32, sig_len = 128, counter_value = 0, rpid_len = 0;",
          "",
          "[Added Lines]",
          "2472:                   data_signed[128] = {0}, * counter;",
          "2475:   size_t client_data_len, challenge_b64_len, auth_data_len, rpid_hash_len = 32, cdata_hash_len = 32, counter_value = 0, rpid_len = 0;",
          "2479:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2505:         ret = G_ERROR_PARAM;",
          "2506:         break;",
          "2507:       }",
          "2509:         y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error allocating resources for client_data\");",
          "2510:         ret = G_ERROR_MEMORY;",
          "2511:         break;",
          "",
          "[Removed Lines]",
          "2508:       if ((client_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))+1)) == NULL) {",
          "",
          "[Added Lines]",
          "2501:       if ((client_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))+2)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2574:         ret = G_ERROR_PARAM;",
          "2575:         break;",
          "2576:       }",
          "2578:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error allocating resources for auth_data\");",
          "2579:         ret = G_ERROR_PARAM;",
          "2580:         break;",
          "",
          "[Removed Lines]",
          "2577:       if ((auth_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"authenticatorData\"))+1)) == NULL) {",
          "",
          "[Added Lines]",
          "2570:       if ((auth_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"authenticatorData\"))+2)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2649:         break;",
          "2650:       }",
          "2653:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature format\");",
          "2654:         ret = G_ERROR_PARAM;",
          "2655:         break;",
          "2656:       }",
          "2659:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature\");",
          "2660:         ret = G_ERROR_PARAM;",
          "2661:         break;",
          "2662:       }",
          "2670:       memcpy(data_signed, auth_data, auth_data_len);",
          "2671:       memcpy(data_signed+auth_data_len, cdata_hash, cdata_hash_len);",
          "",
          "[Removed Lines]",
          "2652:       if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), NULL, &sig_len)) {",
          "2658:       if (sig_len > 128) {",
          "2664:       if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), sig, &sig_len)) {",
          "2665:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode signature\");",
          "2666:         ret = G_ERROR;",
          "2667:         break;",
          "2668:       }",
          "",
          "[Added Lines]",
          "2645:       if (!o_base64_decode_alloc((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), &dat)) {",
          "2651:       if (dat.size > 128) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2674:       data.data = data_signed;",
          "2675:       data.size = (auth_data_len+cdata_hash_len);",
          "2680:       if ((res = gnutls_pubkey_verify_data2(pubkey, GNUTLS_SIGN_ECDSA_SHA256, 0, &data, &signature)) < 0) {",
          "2681:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature: %d\", res);",
          "",
          "[Removed Lines]",
          "2677:       signature.data = sig;",
          "2678:       signature.size = sig_len;",
          "",
          "[Added Lines]",
          "2664:       signature.data = dat.data;",
          "2665:       signature.size = dat.size;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2689:         break;",
          "2690:       }",
          "2691:     } while (0); // This is not a loop, but a structure where you can easily cancel the rest of the process with breaks",
          "2693:     if (ret == G_OK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2679:     o_free(dat.data);",
          "2680:     dat.data = NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2796:   unsigned char credential_id[64] = {0}, credential_id_b64[129], created_at[32], name_hash[32];",
          "2797:   char * seed_credential_id, * seed_name, * seed_created_at, name[32];",
          "2798:   time_t created_at_t;",
          "2800:   json_t * j_return;",
          "2802:   if ((seed_credential_id = msprintf(\"%s-credential_id\", seed)) != NULL) {",
          "",
          "[Removed Lines]",
          "2799:   size_t credential_id_len = 64, credential_id_b64_len, name_hash_len = 32, created_at_len = 32;",
          "",
          "[Added Lines]",
          "2788:   size_t credential_id_len = 64, credential_id_b64_len = 0, name_hash_len = 32, created_at_len = 32;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2912: static int generate_fake_user_id(json_t * j_params, const char * username, unsigned char * user_id) {",
          "2913:   char * seed;",
          "2914:   unsigned char seed_hash[32];",
          "2916:   int ret;",
          "2918:   if ((seed = msprintf(\"%s%s-user_id\", username, json_string_value(json_object_get(j_params, \"seed\")))) != NULL) {",
          "",
          "[Removed Lines]",
          "2915:   size_t seed_hash_len = 32, seed_hash_b64_len;",
          "",
          "[Added Lines]",
          "2904:   size_t seed_hash_len = 32, seed_hash_b64_len = 0;",
          "",
          "---------------"
        ],
        "src/user/database.c||src/user/database.c": [
          "File: src/user/database.c -> src/user/database.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:   int res;",
          "514:   unsigned char password_b64_decoded[1024] = {0};",
          "515:   char * salt = NULL, * username_escaped, * username_clause, ** salt_list = NULL, * str_iterator;",
          "518:   if (j_iterations != NULL) {",
          "519:     username_escaped = h_escape_string_with_quotes(param->conn, username);",
          "",
          "[Removed Lines]",
          "516:   size_t password_b64_decoded_len, index = 0, gc_password_len;",
          "",
          "[Added Lines]",
          "516:   size_t password_b64_decoded_len = 0, index = 0, gc_password_len;",
          "",
          "---------------"
        ],
        "src/user/ldap.c||src/user/ldap.c": [
          "File: src/user/ldap.c -> src/user/ldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:   unsigned char * value_dec = NULL;",
          "569:   size_t value_dec_len = 0;",
          "570:   const char ** passwords = NULL;",
          "573:   if (add) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "974:                   mods[i]->mod_type = (char *)json_string_value(json_object_get(j_format, \"property\"));",
          "975:                   json_array_foreach(j_property, index_scope, j_property_value) {",
          "976:                     if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "989:                       } else {",
          "991:                         has_error = 1;",
          "992:                       }",
          "993:                     } else {",
          "",
          "[Removed Lines]",
          "977:                       if (o_base64_decode((const unsigned char *)json_string_value(j_property_value), json_string_length(j_property_value), NULL, &value_dec_len)) {",
          "978:                         if ((value_dec = o_malloc(value_dec_len+1)) != NULL) {",
          "979:                           if (o_base64_decode((const unsigned char *)json_string_value(j_property_value), json_string_length(j_property_value), value_dec, &value_dec_len)) {",
          "980:                             value_dec[value_dec_len] = '\\0';",
          "981:                             mods[i]->mod_values[index_scope] = (char *)value_dec;",
          "982:                           } else {",
          "983:                             y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (1-2)\", json_string_value(j_property_value));",
          "984:                             has_error = 1;",
          "985:                           }",
          "986:                         } else {",
          "987:                           y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error allocating resources for value_dec (1)\");",
          "988:                         }",
          "990:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (1-1)\", json_string_value(j_property_value));",
          "",
          "[Added Lines]",
          "978:                       if (o_base64_decode_alloc((const unsigned char *)json_string_value(j_property_value), json_string_length(j_property_value), &dat)) {",
          "979:                         mods[i]->mod_values[index_scope] = o_strndup((const char *)dat.data, dat.size);",
          "980:                         o_free(dat.data);",
          "981:                         dat.data = NULL;",
          "983:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode_alloc for LDAP property '%s' (1-1)\", json_string_value(j_property_value));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1012:                   mods[i]->mod_op = mod_op;",
          "1013:                   mods[i]->mod_type = (char *)json_string_value(json_object_get(j_format, \"property\"));",
          "1014:                   if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "1027:                     } else {",
          "1029:                       has_error = 1;",
          "1030:                     }",
          "1031:                   } else {",
          "",
          "[Removed Lines]",
          "1015:                     if (o_base64_decode((const unsigned char *)json_string_value(j_property), json_string_length(j_property), NULL, &value_dec_len)) {",
          "1016:                       if ((value_dec = o_malloc(value_dec_len+1)) != NULL) {",
          "1017:                         if (o_base64_decode((const unsigned char *)json_string_value(j_property), json_string_length(j_property), value_dec, &value_dec_len)) {",
          "1018:                           value_dec[value_dec_len] = '\\0';",
          "1019:                           mods[i]->mod_values[0] = (char *)value_dec;",
          "1020:                         } else {",
          "1021:                           y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (2-2)\", json_string_value(j_property));",
          "1022:                           has_error = 1;",
          "1023:                         }",
          "1024:                       } else {",
          "1025:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error allocating resources for value_dec (2)\");",
          "1026:                       }",
          "1028:                       y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode for LDAP property '%s' (2-1)\", json_string_value(j_property));",
          "",
          "[Added Lines]",
          "1008:                     if (o_base64_decode_alloc((const unsigned char *)json_string_value(j_property), json_string_length(j_property), &dat)) {",
          "1009:                       value_dec[value_dec_len] = '\\0';",
          "1010:                       mods[i]->mod_values[0] = o_strndup((const char *)dat.data, dat.size);",
          "1011:                       o_free(dat.data);",
          "1012:                       dat.data = NULL;",
          "1014:                       y_log_message(Y_LOG_LEVEL_ERROR, \"get_ldap_write_mod - Error o_base64_decode_alloc for LDAP property '%s' (2-1)\", json_string_value(j_property));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1105:   char * str_scope;",
          "1106:   struct berval ** result_values = NULL;",
          "1107:   int i;",
          "1111:   if (j_user != NULL) {",
          "1112:     json_object_foreach(j_properties_user, field, j_property) {",
          "",
          "[Removed Lines]",
          "1108:   unsigned char * value_enc = NULL;",
          "1109:   size_t value_enc_len = 0;",
          "",
          "[Added Lines]",
          "1094:   struct _o_datum dat = {0, NULL};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1127:         } else if (0 == o_strcmp(field, \"username\") || 0 == o_strcmp(field, \"name\") || 0 == o_strcmp(field, \"email\") || (json_object_get(json_object_get(j_params, \"data-format\"), field) != NULL &&json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"multiple\") != json_true())) {",
          "1128:           json_object_set_new(j_user, field, json_stringn(result_values[0]->bv_val, result_values[0]->bv_len));",
          "1129:           if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "1142:             } else {",
          "1144:             }",
          "1145:           } else {",
          "1146:             json_object_set_new(j_user, field, json_stringn(result_values[0]->bv_val, result_values[0]->bv_len));",
          "",
          "[Removed Lines]",
          "1130:             if (o_base64_encode((const unsigned char *)result_values[0]->bv_val, result_values[0]->bv_len, NULL, &value_enc_len)) {",
          "1131:               if ((value_enc = o_malloc(value_enc_len+1)) != NULL) {",
          "1132:                 if (o_base64_encode((const unsigned char *)result_values[0]->bv_val, result_values[0]->bv_len, value_enc, &value_enc_len)) {",
          "1133:                   value_enc[value_enc_len] = '\\0';",
          "1134:                   json_object_set_new(j_user, field, json_stringn((const char *)value_enc, value_enc_len));",
          "1135:                 } else {",
          "1136:                   y_log_message(Y_LOG_LEVEL_WARNING, \"get_user_from_result - Error o_base64_encode for LDAP property '%s' (2)\", json_string_value(j_property));",
          "1137:                 }",
          "1138:                 o_free(value_enc);",
          "1139:               } else {",
          "1140:                 y_log_message(Y_LOG_LEVEL_ERROR, \"get_user_from_result - Error allocating resources for value_enc\");",
          "1141:               }",
          "1143:               y_log_message(Y_LOG_LEVEL_WARNING, \"get_user_from_result - Error o_base64_encode for LDAP property '%s' (1)\", json_string_value(j_property));",
          "",
          "[Added Lines]",
          "1115:             if (o_base64_encode_alloc((const unsigned char *)result_values[0]->bv_val, result_values[0]->bv_len, &dat)) {",
          "1116:               json_object_set_new(j_user, field, json_stringn((const char *)dat.data, dat.size));",
          "1117:               o_free(dat.data);",
          "1118:               dat.data = NULL;",
          "1120:               y_log_message(Y_LOG_LEVEL_WARNING, \"get_user_from_result - Error o_base64_encode_alloc for LDAP property '%s' (1)\", json_string_value(j_property));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1149:           json_object_set_new(j_user, field, json_array());",
          "1150:           for (i=0; i<ldap_count_values_len(result_values); i++) {",
          "1151:             if (0 == o_strcmp(\"base64\", json_string_value(json_object_get(json_object_get(json_object_get(j_params, \"data-format\"), field), \"convert\")))) {",
          "1164:               } else {",
          "1166:               }",
          "1167:             } else {",
          "1168:               json_array_append_new(json_object_get(j_user, field), json_stringn(result_values[i]->bv_val, result_values[i]->bv_len));",
          "",
          "[Removed Lines]",
          "1152:               if (o_base64_encode((const unsigned char *)result_values[i]->bv_val, result_values[i]->bv_len, NULL, &value_enc_len)) {",
          "1153:                 if ((value_enc = o_malloc(value_enc_len+1)) != NULL) {",
          "1154:                   if (o_base64_encode((const unsigned char *)result_values[i]->bv_val, result_values[i]->bv_len, value_enc, &value_enc_len)) {",
          "1155:                     value_enc[value_enc_len] = '\\0';",
          "1156:                     json_array_append_new(json_object_get(j_user, field), json_stringn((const char *)value_enc, value_enc_len));",
          "1157:                   } else {",
          "1158:                     y_log_message(Y_LOG_LEVEL_WARNING, \"get_user_from_result - Error o_base64_encode for LDAP property '%s' (2)\", json_string_value(j_property));",
          "1159:                   }",
          "1160:                   o_free(value_enc);",
          "1161:                 } else {",
          "1162:                   y_log_message(Y_LOG_LEVEL_ERROR, \"get_user_from_result - Error allocating resources for value_enc\");",
          "1163:                 }",
          "1165:                 y_log_message(Y_LOG_LEVEL_WARNING, \"get_user_from_result - Error o_base64_encode for LDAP property '%s' (1)\", json_string_value(j_property));",
          "",
          "[Added Lines]",
          "1129:               if (o_base64_encode_alloc((const unsigned char *)result_values[i]->bv_val, result_values[i]->bv_len, &dat)) {",
          "1130:                 json_array_append_new(json_object_get(j_user, field), json_stringn((const char *)dat.data, dat.size));",
          "1131:                 o_free(dat.data);",
          "1132:                 dat.data = NULL;",
          "1134:                 y_log_message(Y_LOG_LEVEL_WARNING, \"get_user_from_result - Error o_base64_encode_alloc for LDAP property '%s' (1)\", json_string_value(j_property));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aecfc06d98d1a5b065cd0c55ca9cf37a0d0dd419",
      "candidate_info": {
        "commit_hash": "aecfc06d98d1a5b065cd0c55ca9cf37a0d0dd419",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/aecfc06d98d1a5b065cd0c55ca9cf37a0d0dd419",
        "files": [
          "src/scheme/webauthn.c"
        ],
        "message": "Fix possible buffer overflow in webauthn registration",
        "before_after_code_files": [
          "src/scheme/webauthn.c||src/scheme/webauthn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/scheme/webauthn.c||src/scheme/webauthn.c"
          ],
          "candidate": [
            "src/scheme/webauthn.c||src/scheme/webauthn.c"
          ]
        }
      },
      "candidate_diff": {
        "src/scheme/webauthn.c||src/scheme/webauthn.c": [
          "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:   gnutls_pubkey_t pubkey = NULL;",
          "1531:   gnutls_x509_crt_t cert = NULL;",
          "1532:   gnutls_datum_t cert_dat, data, signature, cert_issued_by;",
          "1534:   size_t data_signed_offset = 0, client_data_hash_len = 32, cert_export_len = 32, cert_export_b64_len = 0;",
          "1536:   if (j_error != NULL) {",
          "",
          "[Removed Lines]",
          "1533:   unsigned char data_signed[200], client_data_hash[32], cert_export[32], cert_export_b64[64];",
          "",
          "[Added Lines]",
          "1533:   unsigned char * data_signed = NULL, client_data_hash[32], cert_export[32], cert_export_b64[64];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1619:         break;",
          "1620:       }",
          "1623:       data_signed[0] = 0x0;",
          "1624:       data_signed_offset = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1622:       if ((data_signed = o_malloc(rpid_hash_len+client_data_hash_len+credential_id_len+cert_x_len+cert_y_len+2)) == NULL) {",
          "1623:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error allocating data_signed\");",
          "1624:         json_array_append_new(j_error, json_string(\"Internal error\"));",
          "1625:         break;",
          "1626:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1653:       }",
          "1655:     } while (0);",
          "1657:     if (json_array_size(j_error)) {",
          "1658:       j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", j_error);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1662:     o_free(data_signed);",
          "",
          "---------------"
        ]
      }
    }
  ]
}