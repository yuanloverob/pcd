{
  "cve_id": "CVE-2018-16839",
  "cve_desc": "Curl versions 7.33.0 through 7.61.1 are vulnerable to a buffer overrun in the SASL authentication code that may lead to denial of service.",
  "repo": "curl/curl",
  "patch_hash": "f3a24d7916b9173c69a3e0ee790102993833d6c5",
  "patch_info": {
    "commit_hash": "f3a24d7916b9173c69a3e0ee790102993833d6c5",
    "repo": "curl/curl",
    "commit_url": "https://github.com/curl/curl/commit/f3a24d7916b9173c69a3e0ee790102993833d6c5",
    "files": [
      "lib/vauth/cleartext.c"
    ],
    "message": "Curl_auth_create_plain_message: fix too-large-input-check\n\nCVE-2018-16839\nReported-by: Harry Sintonen\nBug: https://curl.haxx.se/docs/CVE-2018-16839.html",
    "before_after_code_files": [
      "lib/vauth/cleartext.c||lib/vauth/cleartext.c"
    ]
  },
  "patch_diff": {
    "lib/vauth/cleartext.c||lib/vauth/cleartext.c": [
      "File: lib/vauth/cleartext.c -> lib/vauth/cleartext.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:   plen = strlen(passwdp);",
      "78:     return CURLE_OUT_OF_MEMORY;",
      "79:   plainlen = 2 * ulen + plen + 2;",
      "",
      "[Removed Lines]",
      "77:   if((ulen > SIZE_T_MAX/2) || (plen > (SIZE_T_MAX/2 - 2)))",
      "",
      "[Added Lines]",
      "77:   if((ulen > SIZE_T_MAX/4) || (plen > (SIZE_T_MAX/2 - 2)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "762a292f8783d73501b7d7c93949268dbb2e61b7",
      "candidate_info": {
        "commit_hash": "762a292f8783d73501b7d7c93949268dbb2e61b7",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/762a292f8783d73501b7d7c93949268dbb2e61b7",
        "files": [
          "lib/curl_sasl.c",
          "lib/vauth/cleartext.c",
          "lib/vauth/vauth.h"
        ],
        "message": "vauth/cleartext: Update the PLAIN login function signature to match RFC 4616\n\nFunctionally this doesn't change anything as we still use the username\nfor both the authorisation identity and the authentication identity.\n\nCloses #3757",
        "before_after_code_files": [
          "lib/curl_sasl.c||lib/curl_sasl.c",
          "lib/vauth/cleartext.c||lib/vauth/cleartext.c",
          "lib/vauth/vauth.h||lib/vauth/vauth.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vauth/cleartext.c||lib/vauth/cleartext.c"
          ],
          "candidate": [
            "lib/vauth/cleartext.c||lib/vauth/cleartext.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/curl_sasl.c||lib/curl_sasl.c": [
          "File: lib/curl_sasl.c -> lib/curl_sasl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:       sasl->authused = SASL_MECH_PLAIN;",
          "369:       if(force_ir || data->set.sasl_ir)",
          "372:     }",
          "373:     else if(enabledmechs & SASL_MECH_LOGIN) {",
          "374:       mech = SASL_MECH_STRING_LOGIN;",
          "",
          "[Removed Lines]",
          "370:         result = Curl_auth_create_plain_message(data, conn->user, conn->passwd,",
          "371:                                                 &resp, &len);",
          "",
          "[Added Lines]",
          "370:         result = Curl_auth_create_plain_message(data, conn->user, conn->user,",
          "371:                                                 conn->passwd, &resp, &len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:     return result;",
          "452:   case SASL_PLAIN:",
          "456:     break;",
          "457:   case SASL_LOGIN:",
          "458:     result = Curl_auth_create_login_message(data, conn->user, &resp, &len);",
          "",
          "[Removed Lines]",
          "453:     result = Curl_auth_create_plain_message(data, conn->user, conn->passwd,",
          "454:                                             &resp,",
          "455:                                             &len);",
          "",
          "[Added Lines]",
          "453:     result = Curl_auth_create_plain_message(data, conn->user, conn->user,",
          "454:                                             conn->passwd, &resp, &len);",
          "",
          "---------------"
        ],
        "lib/vauth/cleartext.c||lib/vauth/cleartext.c": [
          "File: lib/vauth/cleartext.c -> lib/vauth/cleartext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: CURLcode Curl_auth_create_plain_message(struct Curl_easy *data,",
          "63:                                         char **outptr, size_t *outlen)",
          "64: {",
          "65:   CURLcode result;",
          "66:   char *plainauth;",
          "68:   size_t plen;",
          "69:   size_t plainlen;",
          "78:     return CURLE_OUT_OF_MEMORY;",
          "81:   plainauth = malloc(plainlen);",
          "82:   if(!plainauth)",
          "83:     return CURLE_OUT_OF_MEMORY;",
          "93:   result = Curl_base64_encode(data, plainauth, plainlen, outptr, outlen);",
          "",
          "[Removed Lines]",
          "61:                                         const char *userp,",
          "62:                                         const char *passwdp,",
          "67:   size_t ulen;",
          "73:   ulen = strlen(userp);",
          "74:   plen = strlen(passwdp);",
          "77:   if((ulen > SIZE_T_MAX/4) || (plen > (SIZE_T_MAX/2 - 2)))",
          "79:   plainlen = 2 * ulen + plen + 2;",
          "86:   memcpy(plainauth, userp, ulen);",
          "87:   plainauth[ulen] = '\\0';",
          "88:   memcpy(plainauth + ulen + 1, userp, ulen);",
          "89:   plainauth[2 * ulen + 1] = '\\0';",
          "90:   memcpy(plainauth + 2 * ulen + 2, passwdp, plen);",
          "",
          "[Added Lines]",
          "62:                                         const char *authzid,",
          "63:                                         const char *authcid,",
          "64:                                         const char *passwd,",
          "69:   size_t zlen;",
          "70:   size_t clen;",
          "76:   zlen = strlen(authzid);",
          "77:   clen = strlen(authcid);",
          "78:   plen = strlen(passwd);",
          "81:   if(((zlen + clen) > SIZE_T_MAX/4) || (plen > (SIZE_T_MAX/2 - 2)))",
          "83:   plainlen = zlen + clen + plen + 2;",
          "90:   memcpy(plainauth, authzid, zlen);",
          "91:   plainauth[zlen] = '\\0';",
          "92:   memcpy(plainauth + zlen + 1, authcid, clen);",
          "93:   plainauth[zlen + clen + 1] = '\\0';",
          "94:   memcpy(plainauth + zlen + clen + 2, passwd, plen);",
          "",
          "---------------"
        ],
        "lib/vauth/vauth.h||lib/vauth/vauth.h": [
          "File: lib/vauth/vauth.h -> lib/vauth/vauth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: CURLcode Curl_auth_create_plain_message(struct Curl_easy *data,",
          "65:                                         char **outptr, size_t *outlen);",
          "",
          "[Removed Lines]",
          "63:                                         const char *userp,",
          "64:                                         const char *passwdp,",
          "",
          "[Added Lines]",
          "63:                                         const char *authzid,",
          "64:                                         const char *authcid,",
          "65:                                         const char *passwd,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1366571b609407cf0d4d9f4a2769d29e1313151",
      "candidate_info": {
        "commit_hash": "c1366571b609407cf0d4d9f4a2769d29e1313151",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/c1366571b609407cf0d4d9f4a2769d29e1313151",
        "files": [
          "lib/curl_ntlm_core.c",
          "lib/curl_setup.h",
          "lib/vauth/cleartext.c"
        ],
        "message": "vauth/cleartext: fix integer overflow check\n\nMake the integer overflow check not rely on the undefined behavior that\na size_t wraps around on overflow.\n\nDetected by lgtm.com\nCloses #2408",
        "before_after_code_files": [
          "lib/curl_ntlm_core.c||lib/curl_ntlm_core.c",
          "lib/curl_setup.h||lib/curl_setup.h",
          "lib/vauth/cleartext.c||lib/vauth/cleartext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/vauth/cleartext.c||lib/vauth/cleartext.c"
          ],
          "candidate": [
            "lib/vauth/cleartext.c||lib/vauth/cleartext.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/curl_ntlm_core.c||lib/curl_ntlm_core.c": [
          "File: lib/curl_ntlm_core.c -> lib/curl_ntlm_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "646:   return CURLE_OK;",
          "647: }",
          "",
          "[Removed Lines]",
          "649: #ifndef SIZE_T_MAX",
          "651: #if defined(SIZEOF_SIZE_T) && (SIZEOF_SIZE_T > 4)",
          "652: #define SIZE_T_MAX 18446744073709551615U",
          "653: #else",
          "654: #define SIZE_T_MAX 4294967295U",
          "655: #endif",
          "656: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/curl_setup.h||lib/curl_setup.h": [
          "File: lib/curl_setup.h -> lib/curl_setup.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "447: #  endif",
          "448: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450: #ifndef SIZE_T_MAX",
          "452: #if defined(SIZEOF_SIZE_T) && (SIZEOF_SIZE_T > 4)",
          "453: #define SIZE_T_MAX 18446744073709551615U",
          "454: #else",
          "455: #define SIZE_T_MAX 4294967295U",
          "456: #endif",
          "457: #endif",
          "",
          "---------------"
        ],
        "lib/vauth/cleartext.c||lib/vauth/cleartext.c": [
          "File: lib/vauth/cleartext.c -> lib/vauth/cleartext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   ulen = strlen(userp);",
          "74:   plen = strlen(passwdp);",
          "85:     return CURLE_OUT_OF_MEMORY;",
          "87:   plainauth = malloc(plainlen);",
          "88:   if(!plainauth)",
          "",
          "[Removed Lines]",
          "77:   plainlen = 2 * ulen;",
          "78:   if(plainlen < ulen)",
          "79:     return CURLE_OUT_OF_MEMORY;",
          "80:   plainlen += plen;",
          "81:   if(plainlen < plen)",
          "82:     return CURLE_OUT_OF_MEMORY;",
          "83:   plainlen += 2;",
          "84:   if(plainlen < 2)",
          "",
          "[Added Lines]",
          "77:   if((ulen > SIZE_T_MAX/2) || (plen > (SIZE_T_MAX/2 - 2)))",
          "79:   plainlen = 2 * ulen + plen + 2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}