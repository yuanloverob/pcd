{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0bf6549cd184c58dc4b8867405c40bfda5ba75b1",
      "candidate_info": {
        "commit_hash": "0bf6549cd184c58dc4b8867405c40bfda5ba75b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0bf6549cd184c58dc4b8867405c40bfda5ba75b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/minmax4.test"
        ],
        "message": "If a query like \"SELECT min(a), b FROM t1\" visits no rows where \"a\" is not null, extract a value for \"b\" from one of the rows where \"a\" is null. Fix for ticket [41866dc37].\n\nFossilOrigin-Name: faaaae4940b5f4f70e4988ad5b45582410b381ace0031e6abcde0b9217c06796",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 961e2f08c35238bcb1d32430d16451a96807b2c4bbb194ee621128dd09cd3981",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1694:       VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1695:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1696:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1697:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1698:       if( bSeekPastNull && (pLoop->wsFlags & WHERE_TOP_LIMIT)==0 ){",
          "1704:         assert( startEq==0 && (op==OP_SeekGT || op==OP_SeekLT) );",
          "1705:         assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0 && pWInfo->nOBSat>0 );",
          "1706:         sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1707:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1709:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         assert( op!=0 );",
          "1711:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1712:         VdbeCoverage(v);",
          "1713:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1714:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1715:       }",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: set testdir [file dirname $argv0]",
          "21: source $testdir/tester.tcl",
          "23: ifcapable !compound {",
          "24:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: set testprefix minmax4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   }",
          "149: } {1 1 {} 2 2 2 3 3 5 5}",
          "153: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: #-------------------------------------------------------------------------",
          "153: foreach {tn sql} {",
          "154:   1 { CREATE INDEX i1 ON t1(a) }",
          "155:   2 { CREATE INDEX i1 ON t1(a DESC) }",
          "156:   3 { }",
          "157: } {",
          "158:   reset_db",
          "159:   do_execsql_test 3.$tn.0 {",
          "160:     CREATE TABLE t1(a, b);",
          "161:     INSERT INTO t1 VALUES(NULL, 1);",
          "162:   }",
          "163:   execsql $sql",
          "164:   do_execsql_test 3.$tn.1 {",
          "165:     SELECT min(a), b FROM t1;",
          "166:   } {{} 1}",
          "167:   do_execsql_test 3.$tn.2 {",
          "168:     SELECT min(a), b FROM t1 WHERE a<50;",
          "169:   } {{} {}}",
          "170:   do_execsql_test 3.$tn.3 {",
          "171:     INSERT INTO t1 VALUES(2, 2);",
          "172:   }",
          "173:   do_execsql_test 3.$tn.4 {",
          "174:     SELECT min(a), b FROM t1;",
          "175:   } {2 2}",
          "176:   do_execsql_test 3.$tn.5 {",
          "177:     SELECT min(a), b FROM t1 WHERE a<50;",
          "178:   } {2 2}",
          "179: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c19e22f397958a29a549639d66b825cf9b8379ea",
      "candidate_info": {
        "commit_hash": "c19e22f397958a29a549639d66b825cf9b8379ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c19e22f397958a29a549639d66b825cf9b8379ea",
        "files": [
          "ext/fts5/fts5_expr.c",
          "ext/fts5/test/fts5eb.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix possible null pointer dereferences in the fts5_expr() scalar function.\n\nFossilOrigin-Name: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
        "before_after_code_files": [
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/test/fts5eb.test||ext/fts5/test/fts5eb.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2516:   azConfig[1] = \"main\";",
          "2517:   azConfig[2] = \"tbl\";",
          "2518:   for(i=3; iArg<nArg; iArg++){",
          "2520:   }",
          "2522:   zExpr = (const char*)sqlite3_value_text(apVal[0]);",
          "2524:   rc = sqlite3Fts5ConfigParse(pGlobal, db, nConfig, azConfig, &pConfig, &zErr);",
          "2525:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "2519:     azConfig[i++] = (const char*)sqlite3_value_text(apVal[iArg]);",
          "",
          "[Added Lines]",
          "2519:     const char *z = (const char*)sqlite3_value_text(apVal[iArg]);",
          "2520:     azConfig[i++] = (z ? z : \"\");",
          "2524:   if( zExpr==0 ) zExpr = \"\";",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5eb.test||ext/fts5/test/fts5eb.test": [
          "File: ext/fts5/test/fts5eb.test -> ext/fts5/test/fts5eb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   SELECT fts5_expr()",
          "60: } {1 {wrong number of arguments to function fts5_expr}}",
          "63:   SELECT fts5_expr_tcl()",
          "64: } {1 {wrong number of arguments to function fts5_expr_tcl}}",
          "67: do_execsql_test 3.0 {",
          "68:   CREATE VIRTUAL TABLE e1 USING fts5(text, tokenize = 'porter unicode61');",
          "",
          "[Removed Lines]",
          "62: do_catchsql_test 2.1 {",
          "",
          "[Added Lines]",
          "62: do_catchsql_test 2.2 {",
          "66: do_catchsql_test 2.3 {",
          "67:   SELECT fts5_expr('')",
          "68: } {1 {fts5: syntax error near \"\"}}",
          "70: do_catchsql_test 2.4 {",
          "71:   SELECT fts5_expr(NULL)",
          "72: } {1 {fts5: syntax error near \"\"}}",
          "74: do_catchsql_test 2.5 {",
          "75:   SELECT fts5_expr(NULL, NULL)",
          "76: } {1 {parse error in \"\"}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d75e1ccc72e9f536f45df3b24e9ecd25076cc1f7cf16b806b19e0e1b68e8326",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
      "candidate_info": {
        "commit_hash": "87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
        "files": [
          "ext/misc/regexp.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add some static to the 'regexp' extension.\n\nFossilOrigin-Name: a21d1dde73f811244b5b43f9fed5877263a9c5061470221f417e501f5530edfa",
        "before_after_code_files": [
          "ext/misc/regexp.c||ext/misc/regexp.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/regexp.c||ext/misc/regexp.c": [
          "File: ext/misc/regexp.c -> ext/misc/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:   if( pRe ){",
          "615:     sqlite3_free(pRe->aOp);",
          "616:     sqlite3_free(pRe->aArg);",
          "",
          "[Removed Lines]",
          "613: void re_free(ReCompiled *pRe){",
          "",
          "[Added Lines]",
          "613: static void re_free(ReCompiled *pRe){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:   ReCompiled *pRe;",
          "629:   const char *zErr;",
          "630:   int i, j;",
          "",
          "[Removed Lines]",
          "627: const char *re_compile(ReCompiled **ppRe, const char *zIn, int noCase){",
          "",
          "[Added Lines]",
          "627: static const char *re_compile(ReCompiled **ppRe, const char *zIn, int noCase){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 408144a1832569ced8e04840f0dd36a3867405f36b13631b0f13c0f7b8a0fb01",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
      "candidate_info": {
        "commit_hash": "dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/update.c"
        ],
        "message": "Work toward getting generated columns to work with triggers.  Still more work to do in this area.\n\nFossilOrigin-Name: 932a37275d7e932f8237d32c8fc6087ed8cd342fe01ef2f7a43c7237ab84c9ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb9c9bb284d441bd7aa34c87b6fd8ce57d036c17623d82354154fc6286bdd134",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   for(i=0, n=0; i<iCol; i++){",
          "935:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "936:   }",
          "938: }",
          "939: #endif",
          "",
          "[Removed Lines]",
          "937:   return n;",
          "",
          "[Added Lines]",
          "959:   if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "961:     return pTab->nNVCol + i - n;",
          "962:   }else{",
          "964:     return n;",
          "965:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3604:               return 0;",
          "3605:             }",
          "3606:             pCol->colFlags |= COLFLAG_BUSY;",
          "3614:             }",
          "3615:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3617:           }else",
          "3619:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "",
          "[Removed Lines]",
          "3607:             if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "3608:               target = sqlite3ExprCodeTarget(pParse, pCol->pDflt, target);",
          "3609:             }else{",
          "3610:               target = iSrc;",
          "3611:               if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3612:                 sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3613:               }",
          "3616:             return target;",
          "",
          "[Added Lines]",
          "3607:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3608:               sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3611:             return iSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4090:       Table *pTab = pExpr->y.pTab;",
          "4093:       assert( pExpr->iTable==0 || pExpr->iTable==1 );",
          "4096:       assert( p1>=0 && p1<(pTab->nCol*2+2) );",
          "4098:       sqlite3VdbeAddOp2(v, OP_Param, p1, target);",
          "4099:       VdbeComment((v, \"r[%d]=%s.%s\", target,",
          "4100:         (pExpr->iTable ? \"new\" : \"old\"),",
          "4102:       ));",
          "4104: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "4091:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1 + pExpr->iColumn;",
          "4094:       assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );",
          "4095:       assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );",
          "4101:         (pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[pExpr->iColumn].zName)",
          "",
          "[Added Lines]",
          "4086:       int iCol = pExpr->iColumn;",
          "4087:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1",
          "4088:                      + (iCol>=0 ? sqlite3TableColumnToStorage(pTab, iCol) : -1);",
          "4091:       assert( iCol>=-1 && iCol<pTab->nCol );",
          "4092:       assert( pTab->iPKey<0 || iCol!=pTab->iPKey );",
          "4098:         (pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[iCol].zName)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4113:         sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "4114:       }",
          "4115: #endif",
          "",
          "[Removed Lines]",
          "4110:       if( pExpr->iColumn>=0",
          "4111:        && pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "4112:       ){",
          "",
          "[Added Lines]",
          "4107:       if( iCol>=0 && pTab->aCol[iCol].affinity==SQLITE_AFF_REAL ){",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "222:   for(i=0; i<pTab->nCol; i++){",
          "224:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "225:     }",
          "226:   }",
          "",
          "[Removed Lines]",
          "212: void sqlite3ComputeStoredColumns(",
          "223:     if( pTab->aCol[i].colFlags & COLFLAG_STORED ){",
          "",
          "[Added Lines]",
          "212: void sqlite3ComputeGeneratedColumns(",
          "218:   int nv;",
          "224:     if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   pParse->iSelfTab = -iRegStore;",
          "234:     u32 colFlags = pTab->aCol[i].colFlags;",
          "241:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "242:     }",
          "243:   }",
          "244:   pParse->iSelfTab = 0;",
          "245: }",
          "",
          "[Removed Lines]",
          "233:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "235:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "237:       iRegStore--;",
          "238:     }else if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "240:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "",
          "[Added Lines]",
          "234:   for(i=nv=0; i<pTab->nCol; i++){",
          "236:     if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "237:       assert( colFlags & COLFLAG_GENERATED );",
          "238:       if( colFlags & COLFLAG_VIRTUAL ){",
          "240:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "241:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt,",
          "242:                         iRegStore+pTab->nNVCol+nv);",
          "243:       }else{",
          "245:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "246:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore+i-nv);",
          "247:       }",
          "250:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1055:       int k;",
          "1056:       u32 colFlags;",
          "1057:       assert( i>=nHidden );",
          "1059:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "1058:       assert( iRegStore==sqlite3TableColumnToStorage(pTab,i)+regRowid+1 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1108:     }",
          "1110: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1115:     }",
          "1116: #endif",
          "",
          "[Removed Lines]",
          "1113:     if( pTab->tabFlags & TF_HasStored ){",
          "1114:       sqlite3ComputeStoredColumns(pParse, regRowid+1, pTab);",
          "",
          "[Added Lines]",
          "1120:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1121:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1455:         || onError==OE_Ignore || onError==OE_Replace );",
          "1456:     addr1 = 0;",
          "1470:     switch( onError ){",
          "1471:       case OE_Replace: {",
          "1472:         assert( onError==OE_Replace );",
          "",
          "[Removed Lines]",
          "1457:     if( (pTab->tabFlags & TF_HasVirtual)==0 ){",
          "1458:       iReg = regNewData+1+i;",
          "1459:     }else if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1460:       iReg = ++pParse->nMem;",
          "1461:       assert( pParse->iSelfTab==0 );",
          "1462:       pParse->iSelfTab = -regNewData;",
          "1463:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iReg);",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1468:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1469:     }",
          "",
          "[Added Lines]",
          "1464:     testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1465:     testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "1466:     testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "1467:     testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "1468:     iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4044: #endif",
          "4045: void sqlite3Insert(Parse*, SrcList*, Select*, IdList*, int, Upsert*);",
          "4046: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4048: #endif",
          "4049: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "4050: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "",
          "[Removed Lines]",
          "4047:   void sqlite3ComputeStoredColumns(Parse*, int, Table*);",
          "",
          "[Added Lines]",
          "4047:   void sqlite3ComputeGeneratedColumns(Parse*, int, Table*);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:     }",
          "694:   }",
          "695: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "698:   }",
          "699: #endif",
          "",
          "[Removed Lines]",
          "696:   if( pTab->tabFlags & TF_HasStored ){",
          "697:     sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "",
          "[Added Lines]",
          "696:   if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "697:     sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       }",
          "738:     }",
          "739: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "742:     }",
          "743: #endif",
          "744:   }",
          "",
          "[Removed Lines]",
          "740:     if( pTab->tabFlags & TF_HasStored ){",
          "741:       sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "",
          "[Added Lines]",
          "740:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "741:       sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
      "candidate_info": {
        "commit_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/418454c63fe1d6f3083542110d17cf561b8f369f",
        "files": [
          "ext/session/sessionwor.test",
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "For SQLITE_ENABLE_PREUPDATE_HOOK builds, disable the optimization for a REPLACE command on a WITHOUT ROWID table with no indexes, triggers or foreign key constraints that causes SQLite to clobber any existing row without separately checking for it. This optimization causes SQLite to omit the expected pre-update-hook callbacks.\n\nFossilOrigin-Name: 6281ef974c0ac7a7133c9e1e04c09fdbd627c019c6ff3227293548caf8283864",
        "before_after_code_files": [
          "ext/session/sessionwor.test||ext/session/sessionwor.test",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sessionwor.test||ext/session/sessionwor.test": [
          "File: ext/session/sessionwor.test -> ext/session/sessionwor.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   sqlite3 db2 test.db2",
          "31: }",
          "40: } {",
          "48: }",
          "52: } {",
          "54: }",
          "56: finish_test",
          "",
          "[Removed Lines]",
          "34: do_execsql_test 1.0 {",
          "35:   CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT ROWID;",
          "36: }",
          "38: do_iterator_test 1.1 t1 {",
          "39:   INSERT INTO t1 VALUES('one', 'two');",
          "41:   {INSERT t1 0 X. {} {t one t two}}",
          "42: }",
          "44: do_iterator_test 1.2 t1 {",
          "45:   UPDATE t1 SET b='three'",
          "46: } {",
          "47:   {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "50: do_iterator_test 1.3 t1 {",
          "51:   DELETE FROM t1;",
          "53:   {DELETE t1 0 X. {t one t three} {}}",
          "",
          "[Added Lines]",
          "33: foreach {tn wo} {",
          "34:   1 \"\"",
          "35:   2 \"WITHOUT ROWID\"",
          "37:   reset_db",
          "39:   do_execsql_test 1.$tn.0 \"CREATE TABLE t1(a PRIMARY KEY, b) $wo ;\"",
          "41:   do_iterator_test 1.$tn.1 t1 {",
          "42:     INSERT INTO t1 VALUES('one', 'two');",
          "43:   } {",
          "44:     {INSERT t1 0 X. {} {t one t two}}",
          "45:   }",
          "47:   do_iterator_test 1.$tn.2 t1 {",
          "48:     UPDATE t1 SET b='three'",
          "49:   } {",
          "50:     {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "51:   }",
          "53:   do_iterator_test 1.$tn.3 t1 {",
          "54:     REPLACE INTO t1 VALUES('one', 'four');",
          "55:   } {",
          "56:     {UPDATE t1 0 X. {t one t three} {{} {} t four}}",
          "57:   }",
          "59:   do_iterator_test 1.$tn.4 t1 {",
          "60:     DELETE FROM t1;",
          "61:   } {",
          "62:     {DELETE t1 0 X. {t one t four} {}}",
          "63:   }",
          "66: foreach {tn wo} {",
          "67:   1 \"\"",
          "68:   2 \"WITHOUT ROWID\"",
          "70:   reset_db",
          "72:   do_execsql_test 2.$tn.0 \"CREATE TABLE t1(a INTEGER PRIMARY KEY, b) $wo ;\"",
          "74:   do_iterator_test 1.1 t1 {",
          "75:     INSERT INTO t1 VALUES(1, 'two');",
          "76:   } {",
          "77:     {INSERT t1 0 X. {} {i 1 t two}}",
          "78:   }",
          "80:   do_iterator_test 2.$tn.2 t1 {",
          "81:     UPDATE t1 SET b='three'",
          "82:   } {",
          "83:     {UPDATE t1 0 X. {i 1 t two} {{} {} t three}}",
          "84:   }",
          "86:   do_iterator_test 2.$tn.3 t1 {",
          "87:     REPLACE INTO t1 VALUES(1, 'four');",
          "88:   } {",
          "89:     {UPDATE t1 0 X. {i 1 t three} {{} {} t four}}",
          "90:   }",
          "92:   do_iterator_test 2.$tn.4 t1 {",
          "93:     DELETE FROM t1;",
          "94:   } {",
          "95:     {DELETE t1 0 X. {i 1 t four} {}}",
          "96:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6064584d578f0ac7aba3f67912a5d9eb1a3c6001469f6b9becbe68871131f887",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719: #ifndef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "---------------"
        ]
      }
    }
  ]
}