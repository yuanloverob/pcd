{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "100e163dda5ea0d16bb1c2f69e9ae75815978f12",
      "candidate_info": {
        "commit_hash": "100e163dda5ea0d16bb1c2f69e9ae75815978f12",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/100e163dda5ea0d16bb1c2f69e9ae75815978f12",
        "files": [
          "common.gypi",
          "configure"
        ],
        "message": "build: compile with -fno-tree-vrp when gcc >= 4.0",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     'library%': 'static_library',    # allow override to 'shared_library' for DLL/.so builds",
          "8:     'component%': 'static_library',  # NB. these names match with what V8 expects",
          "9:     'msvs_multi_core_compile': '0',  # we do enable multicore compiles, but not using the V8 way",
          "11:     # Turn on optimizations that may trigger compiler bugs.",
          "12:     # Use at your own risk. Do *NOT* report bugs if this option is enabled.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:     'gcc_version%': 'unknown',",
          "11:     'clang%': 0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:             'cflags': [ '-O3', '-ffunction-sections', '-fdata-sections' ],",
          "54:             'ldflags': [ '-Wl,--gc-sections' ],",
          "55:           }, {",
          "57:             'cflags!': [ '-O3', '-fstrict-aliasing' ],",
          "58:             'conditions': [",
          "59:               # Required by the dtrace post-processor. Unfortunately,",
          "",
          "[Removed Lines]",
          "56:             'cflags': [ '-O2', '-fno-strict-aliasing', '-fno-tree-vrp' ],",
          "",
          "[Added Lines]",
          "58:             'cflags': [ '-O2', '-fno-strict-aliasing' ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:               }, {",
          "65:                 'cflags!': [ '-ffunction-sections', '-fdata-sections' ],",
          "66:               }],",
          "67:             ],",
          "68:           }],",
          "69:           ['OS==\"solaris\"', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:               ['clang==1 or gcc_version >= 40', {",
          "70:                 'cflags': [ '-fno-tree-vrp' ],",
          "71:               }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40f70673c65de19183bfd9e32151383d23e7edf1",
      "candidate_info": {
        "commit_hash": "40f70673c65de19183bfd9e32151383d23e7edf1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/40f70673c65de19183bfd9e32151383d23e7edf1",
        "files": [
          "tools/blog/generate.js"
        ],
        "message": "blog: Require posts to have a date",
        "before_after_code_files": [
          "tools/blog/generate.js||tools/blog/generate.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/blog/generate.js||tools/blog/generate.js": [
          "File: tools/blog/generate.js -> tools/blog/generate.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   }, {});",
          "73:   if (post.status && post.status !== 'publish') return null;",
          "74:   post.body = c;",
          "75:   return post;",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   post.src = file;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   data.post = post;",
          "98:   var y = d.getYear() + 1900;",
          "99:   var m = d.getMonth() + 1;",
          "",
          "[Removed Lines]",
          "96:   var d = post.date = new Date(post.date);",
          "",
          "[Added Lines]",
          "97:   if (!post.date) throw new Error('post date is required ' + post.src);",
          "98:   else post.date = new Date(post.date);",
          "99:   var d = post.date;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88d7a101283dd4717ae6ccd1d757fdfe3f6d0089",
      "candidate_info": {
        "commit_hash": "88d7a101283dd4717ae6ccd1d757fdfe3f6d0089",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/88d7a101283dd4717ae6ccd1d757fdfe3f6d0089",
        "files": [
          "test/pummel/test-net-connect-econnrefused.js"
        ],
        "message": "test: verify that connect reqs are cleaned up",
        "before_after_code_files": [
          "test/pummel/test-net-connect-econnrefused.js||test/pummel/test-net-connect-econnrefused.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-net-connect-econnrefused.js||test/pummel/test-net-connect-econnrefused.js": [
          "File: test/pummel/test-net-connect-econnrefused.js -> test/pummel/test-net-connect-econnrefused.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: var common = require('../common');",
          "25: var assert = require('assert');",
          "26: var net = require('net');",
          "28: var ROUNDS = 1024;",
          "29: var rounds = 0;",
          "30: var reqs = 0;",
          "32: pummel();",
          "34: function pummel() {",
          "35:   net.createConnection(common.PORT).on('error', function(err) {",
          "36:     assert.equal(err.code, 'ECONNREFUSED');",
          "37:     if (++rounds < ROUNDS) return pummel();",
          "38:     check();",
          "39:   });",
          "40:   reqs++;",
          "41: }",
          "43: function check() {",
          "44:   process.nextTick(function() {",
          "45:     process.nextTick(function() {",
          "46:       assert.equal(process._getActiveRequests().length, 0);",
          "47:       assert.equal(process._getActiveHandles().length, 0);",
          "48:       check_called = true;",
          "49:     });",
          "50:   });",
          "51: }",
          "52: var check_called = false;",
          "54: process.on('exit', function() {",
          "55:   assert.equal(rounds, ROUNDS);",
          "56:   assert.equal(reqs, ROUNDS);",
          "57:   assert(check_called);",
          "58: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1358bac6d120a750546337ba5e4fe580cdeb81fb",
      "candidate_info": {
        "commit_hash": "1358bac6d120a750546337ba5e4fe580cdeb81fb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1358bac6d120a750546337ba5e4fe580cdeb81fb",
        "files": [
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/src/cares.c",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/linux/inotify.c",
          "deps/uv/src/unix/loop.c",
          "deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/poll.c",
          "deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/tcp.c",
          "deps/uv/src/unix/udp.c",
          "deps/uv/test/test-tcp-writealot.c"
        ],
        "message": "deps: upgrade libuv to 5b9c451",
        "before_after_code_files": [
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/src/cares.c||deps/uv/src/cares.c",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/linux/inotify.c||deps/uv/src/unix/linux/inotify.c",
          "deps/uv/src/unix/loop.c||deps/uv/src/unix/loop.c",
          "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/poll.c||deps/uv/src/unix/poll.c",
          "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c",
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c",
          "deps/uv/test/test-tcp-writealot.c||deps/uv/test/test-tcp-writealot.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   char* errmsg;",
          "71: } uv_lib_t;",
          "75: #if __linux__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: struct uv__io_s;",
          "74: struct uv_loop_s;",
          "76: typedef struct uv__io_s uv__io_t;",
          "77: typedef void (*uv__io_cb)(struct uv_loop_s* loop, uv__io_t* handle, int events);",
          "79: struct uv__io_s {",
          "80:   ev_io io_watcher;",
          "81: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   struct uv__inotify_watchers {                       \\",
          "79:     struct uv_fs_event_s* rbh_root;                   \\",
          "80:   } inotify_watchers;                                 \\",
          "82:   int inotify_fd;",
          "83: #elif defined(PORT_SOURCE_FILE)",
          "84: # define UV_LOOP_PRIVATE_PLATFORM_FIELDS              \\",
          "",
          "[Removed Lines]",
          "81:   ev_io inotify_read_watcher;                         \\",
          "",
          "[Added Lines]",
          "91:   uv__io_t inotify_read_watcher;                      \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142: #define UV_STREAM_PRIVATE_FIELDS \\",
          "143:   uv_connect_t *connect_req; \\",
          "144:   uv_shutdown_t *shutdown_req; \\",
          "147:   ngx_queue_t write_queue; \\",
          "148:   ngx_queue_t write_completed_queue; \\",
          "149:   int delayed_error; \\",
          "",
          "[Removed Lines]",
          "145:   ev_io read_watcher; \\",
          "146:   ev_io write_watcher; \\",
          "",
          "[Added Lines]",
          "155:   uv__io_t read_watcher; \\",
          "156:   uv__io_t write_watcher; \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160: #define UV_UDP_PRIVATE_FIELDS         \\",
          "161:   uv_alloc_cb alloc_cb;               \\",
          "162:   uv_udp_recv_cb recv_cb;             \\",
          "165:   ngx_queue_t write_queue;            \\",
          "166:   ngx_queue_t write_completed_queue;  \\",
          "",
          "[Removed Lines]",
          "163:   ev_io read_watcher;                 \\",
          "164:   ev_io write_watcher;                \\",
          "",
          "[Added Lines]",
          "173:   uv__io_t read_watcher;              \\",
          "174:   uv__io_t write_watcher;             \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175: #define UV_POLL_PRIVATE_FIELDS        \\",
          "",
          "[Removed Lines]",
          "176:   ev_io io_watcher;",
          "",
          "[Added Lines]",
          "186:   uv__io_t io_watcher;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:     struct uv_fs_event_s* rbe_parent; \\",
          "239:     int rbe_color;                    \\",
          "240:   } node;                             \\",
          "242:   uv_fs_event_cb cb;",
          "244: #elif defined(__APPLE__)  \\",
          "",
          "[Removed Lines]",
          "241:   ev_io read_watcher;                 \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/cares.c||deps/uv/src/cares.c": [
          "File: deps/uv/src/cares.c -> deps/uv/src/cares.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"tree.h\"",
          "24: #include \"uv-common.h\"",
          "26: #include <assert.h>",
          "27: #include <errno.h>",
          "28: #include <stdlib.h>",
          "29: #include <string.h>",
          "32: struct uv_ares_task_s {",
          "33:   UV_HANDLE_FIELDS",
          "34:   ares_socket_t sock;",
          "35:   uv_poll_t poll_watcher;",
          "36:   RB_ENTRY(uv_ares_task_s) node;",
          "37: };",
          "40: static int cmp_ares_tasks(const uv_ares_task_t* a, const uv_ares_task_t* b) {",
          "41:   if (a->sock < b->sock) return -1;",
          "42:   if (a->sock > b->sock) return 1;",
          "43:   return 0;",
          "44: }",
          "47: RB_GENERATE_STATIC(uv__ares_tasks, uv_ares_task_s, node, cmp_ares_tasks)",
          "51: static void uv_add_ares_handle(uv_loop_t* loop, uv_ares_task_t* handle) {",
          "52:   assert(loop == handle->loop);",
          "53:   RB_INSERT(uv__ares_tasks, &loop->ares_handles, handle);",
          "54: }",
          "58: static uv_ares_task_t* uv_find_ares_handle(uv_loop_t* loop, ares_socket_t sock) {",
          "59:   uv_ares_task_t handle;",
          "60:   handle.sock = sock;",
          "61:   return RB_FIND(uv__ares_tasks, &loop->ares_handles, &handle);",
          "62: }",
          "66: static void uv_remove_ares_handle(uv_ares_task_t* handle) {",
          "67:   RB_REMOVE(uv__ares_tasks, &handle->loop->ares_handles, handle);",
          "68: }",
          "72: static int uv_ares_handles_empty(uv_loop_t* loop) {",
          "73:   return RB_EMPTY(&loop->ares_handles);",
          "74: }",
          "79: static void uv__ares_timeout(uv_timer_t* handle, int status) {",
          "80:   assert(!uv_ares_handles_empty(handle->loop));",
          "81:   ares_process_fd(handle->loop->channel, ARES_SOCKET_BAD, ARES_SOCKET_BAD);",
          "82: }",
          "85: static void uv__ares_poll_cb(uv_poll_t* watcher, int status, int events) {",
          "86:   uv_loop_t* loop = watcher->loop;",
          "87:   uv_ares_task_t* task = container_of(watcher, uv_ares_task_t, poll_watcher);",
          "90:   uv_timer_again(&loop->ares_timer);",
          "92:   if (status < 0) {",
          "95:     ares_process_fd(loop->channel, task->sock, task->sock);",
          "96:     return;",
          "97:   }",
          "100:   ares_process_fd(loop->channel,",
          "101:                   events & UV_READABLE ? task->sock : ARES_SOCKET_BAD,",
          "102:                   events & UV_WRITABLE ? task->sock : ARES_SOCKET_BAD);",
          "103: }",
          "106: static void uv__ares_poll_close_cb(uv_handle_t* watcher) {",
          "107:   uv_ares_task_t* task = container_of(watcher, uv_ares_task_t, poll_watcher);",
          "108:   free(task);",
          "109: }",
          "113: static uv_ares_task_t* uv__ares_task_create(uv_loop_t* loop, ares_socket_t sock) {",
          "114:   uv_ares_task_t* task = (uv_ares_task_t*) malloc(sizeof *task);",
          "116:   if (task == NULL) {",
          "118:     return NULL;",
          "119:   }",
          "121:   task->loop = loop;",
          "122:   task->sock = sock;",
          "124:   if (uv_poll_init_socket(loop, &task->poll_watcher, sock) < 0) {",
          "126:     free(task);",
          "127:     return NULL;",
          "128:   }",
          "130:   return task;",
          "131: }",
          "135: static void uv__ares_sockstate_cb(void* data, ares_socket_t sock,",
          "136:     int read, int write) {",
          "137:   uv_loop_t* loop = (uv_loop_t*) data;",
          "138:   uv_ares_task_t* task;",
          "140:   task = uv_find_ares_handle(loop, sock);",
          "142:   if (read || write) {",
          "143:     if (!task) {",
          "147:       if (!uv_is_active((uv_handle_t*) &loop->ares_timer)) {",
          "148:         assert(uv_ares_handles_empty(loop));",
          "149:         uv_timer_start(&loop->ares_timer, uv__ares_timeout, 1000, 1000);",
          "150:       }",
          "152:       task = uv__ares_task_create(loop, sock);",
          "153:       if (task == NULL) {",
          "157:         return;",
          "158:       }",
          "160:       uv_add_ares_handle(loop, task);",
          "161:     }",
          "165:     uv_poll_start(&task->poll_watcher,",
          "166:                   (read ? UV_READABLE : 0) | (write ? UV_WRITABLE : 0),",
          "167:                   uv__ares_poll_cb);",
          "169:   } else {",
          "173:     assert(task &&",
          "174:            \"When an ares socket is closed we should have a handle for it\");",
          "176:     uv_remove_ares_handle(task);",
          "177:     uv_close((uv_handle_t*) &task->poll_watcher, uv__ares_poll_close_cb);",
          "179:     if (uv_ares_handles_empty(loop)) {",
          "180:       uv_timer_stop(&loop->ares_timer);",
          "181:     }",
          "182:   }",
          "183: }",
          "187: int uv_ares_init_options(uv_loop_t* loop, ares_channel *channelptr,",
          "188:     struct ares_options *options, int optmask) {",
          "189:   int rc;",
          "192:   if (loop->channel != NULL) {",
          "193:     uv__set_artificial_error(loop, UV_EALREADY);",
          "194:     return -1;",
          "195:   }",
          "198:   options->sock_state_cb = uv__ares_sockstate_cb;",
          "199:   options->sock_state_cb_data = loop;",
          "200:   optmask |= ARES_OPT_SOCK_STATE_CB;",
          "203:   rc = ares_init_options(channelptr, options, optmask);",
          "206:   if (rc == ARES_SUCCESS) {",
          "207:     loop->channel = *channelptr;",
          "208:   }",
          "212:   uv_timer_init(loop, &loop->ares_timer);",
          "214:   return rc;",
          "215: }",
          "218: void uv_ares_destroy(uv_loop_t* loop, ares_channel channel) {",
          "220:   if (loop->channel) {",
          "221:     uv_timer_stop(&loop->ares_timer);",
          "222:     ares_destroy(channel);",
          "223:     loop->channel = NULL;",
          "224:   }",
          "225: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:     return uv__new_sys_error(errno);",
          "593:   }",
          "594: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597: static void uv__io_set_cb(uv__io_t* handle, uv__io_cb cb) {",
          "598:   union { void* data; uv__io_cb cb; } u;",
          "599:   u.cb = cb;",
          "600:   handle->io_watcher.data = u.data;",
          "601: }",
          "604: static void uv__io_rw(struct ev_loop* ev, ev_io* w, int events) {",
          "605:   union { void* data; uv__io_cb cb; } u;",
          "606:   uv_loop_t* loop = ev_userdata(ev);",
          "607:   uv__io_t* handle = container_of(w, uv__io_t, io_watcher);",
          "608:   u.data = handle->io_watcher.data;",
          "609:   u.cb(loop, handle, events & (EV_READ|EV_WRITE|EV_ERROR));",
          "610: }",
          "613: void uv__io_init(uv__io_t* handle, uv__io_cb cb, int fd, int events) {",
          "614:   ev_io_init(&handle->io_watcher, uv__io_rw, fd, events & (EV_READ|EV_WRITE));",
          "615:   uv__io_set_cb(handle, cb);",
          "616: }",
          "619: void uv__io_set(uv__io_t* handle, uv__io_cb cb, int fd, int events) {",
          "620:   ev_io_set(&handle->io_watcher, fd, events);",
          "621:   uv__io_set_cb(handle, cb);",
          "622: }",
          "625: void uv__io_start(uv_loop_t* loop, uv__io_t* handle) {",
          "626:   ev_io_start(loop->ev, &handle->io_watcher);",
          "627: }",
          "630: void uv__io_stop(uv_loop_t* loop, uv__io_t* handle) {",
          "631:   ev_io_stop(loop->ev, &handle->io_watcher);",
          "632: }",
          "635: void uv__io_feed(uv_loop_t* loop, uv__io_t* handle, int event) {",
          "636:   ev_feed_event(loop->ev, &handle->io_watcher, event);",
          "637: }",
          "640: int uv__io_active(uv__io_t* handle) {",
          "641:   return ev_is_active(&handle->io_watcher);",
          "642: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   }                                                                           \\",
          "79:   while (0)",
          "82: enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: #define UV__IO_READ  EV_READ",
          "82: #define UV__IO_WRITE EV_WRITE",
          "83: #define UV__IO_ERROR EV_ERROR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: int uv__dup(int fd);",
          "128: int uv_async_stop(uv_async_t* handle);",
          "131: int uv__loop_init(uv_loop_t* loop, int default_loop);",
          "132: void uv__loop_delete(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: void uv__io_init(uv__io_t* handle, uv__io_cb cb, int fd, int events);",
          "135: void uv__io_set(uv__io_t* handle, uv__io_cb cb, int fd, int events);",
          "136: void uv__io_start(uv_loop_t* loop, uv__io_t* handle);",
          "137: void uv__io_stop(uv_loop_t* loop, uv__io_t* handle);",
          "138: void uv__io_feed(uv_loop_t* loop, uv__io_t* handle, int event);",
          "139: int uv__io_active(uv__io_t* handle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:     uv_handle_type type);",
          "144: int uv__stream_open(uv_stream_t*, int fd, int flags);",
          "145: void uv__stream_destroy(uv_stream_t* stream);",
          "148: int uv__accept(int sockfd, struct sockaddr* saddr, socklen_t len);",
          "149: int uv__connect(uv_connect_t* req, uv_stream_t* stream, struct sockaddr* addr,",
          "150:     socklen_t addrlen, uv_connect_cb cb);",
          "",
          "[Removed Lines]",
          "146: void uv__stream_io(EV_P_ ev_io* watcher, int revents);",
          "147: void uv__server_io(EV_P_ ev_io* watcher, int revents);",
          "",
          "[Added Lines]",
          "157: void uv__server_io(uv_loop_t* loop, uv__io_t* watcher, int events);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158: int uv_pipe_listen(uv_pipe_t* handle, int backlog, uv_connection_cb cb);",
          "162: void uv__poll_close(uv_poll_t* handle);",
          "166: void uv__async_close(uv_async_t* handle);",
          "",
          "[Removed Lines]",
          "159: void uv__pipe_accept(EV_P_ ev_io* watcher, int revents);",
          "163: int uv__poll_active(const uv_poll_t* handle);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux/inotify.c||deps/uv/src/unix/linux/inotify.c": [
          "File: deps/uv/src/unix/linux/inotify.c -> deps/uv/src/unix/linux/inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: RB_GENERATE_STATIC(uv__inotify_watchers, uv_fs_event_s, node, compare_watchers)",
          "57: static int new_inotify_fd(void) {",
          "",
          "[Removed Lines]",
          "54: static void uv__inotify_read(EV_P_ ev_io* w, int revents);",
          "",
          "[Added Lines]",
          "54: static void uv__inotify_read(uv_loop_t* loop, uv__io_t* w, int revents);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     return -1;",
          "86:   }",
          "94:   return 0;",
          "95: }",
          "",
          "[Removed Lines]",
          "88:   ev_io_init(&loop->inotify_read_watcher,",
          "89:              uv__inotify_read,",
          "90:              loop->inotify_fd,",
          "91:              EV_READ);",
          "92:   ev_io_start(loop->ev, &loop->inotify_read_watcher);",
          "",
          "[Added Lines]",
          "88:   uv__io_init(&loop->inotify_read_watcher,",
          "89:               uv__inotify_read,",
          "90:               loop->inotify_fd,",
          "91:               UV__IO_READ);",
          "92:   uv__io_start(loop, &loop->inotify_read_watcher);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: }",
          "116:   const struct uv__inotify_event* e;",
          "117:   uv_fs_event_t* handle;",
          "119:   const char* filename;",
          "120:   ssize_t size;",
          "122:   const char *p;",
          "124:   char buf[4096];",
          "128:   while (1) {",
          "129:     do {",
          "131:     }",
          "132:     while (size == -1 && errno == EINTR);",
          "",
          "[Removed Lines]",
          "115: static void uv__inotify_read(EV_P_ ev_io* w, int revents) {",
          "118:   uv_loop_t* uv_loop;",
          "121:   int events;",
          "126:   uv_loop = container_of(w, uv_loop_t, inotify_read_watcher);",
          "130:       size = read(uv_loop->inotify_fd, buf, sizeof buf);",
          "",
          "[Added Lines]",
          "115: static void uv__inotify_read(uv_loop_t* loop, uv__io_t* w, int events) {",
          "126:       size = read(loop->inotify_fd, buf, sizeof buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:       if (e->mask & ~(UV__IN_ATTRIB|UV__IN_MODIFY))",
          "149:         events |= UV_RENAME;",
          "152:       if (handle == NULL)",
          "",
          "[Removed Lines]",
          "151:       handle = find_watcher(uv_loop, e->wd);",
          "",
          "[Added Lines]",
          "147:       handle = find_watcher(loop, e->wd);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/loop.c||deps/uv/src/unix/loop.c": [
          "File: deps/uv/src/unix/loop.c -> deps/uv/src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   uv_ares_destroy(loop, loop->channel);",
          "67:   ev_loop_destroy(loop->ev);",
          "68: #if __linux__",
          "73: #endif",
          "74: #if HAVE_PORTS_FS",
          "75:   if (loop->fs_fd != -1)",
          "",
          "[Removed Lines]",
          "69:   if (loop->inotify_fd == -1) return;",
          "70:   ev_io_stop(loop->ev, &loop->inotify_read_watcher);",
          "71:   close(loop->inotify_fd);",
          "72:   loop->inotify_fd = -1;",
          "",
          "[Added Lines]",
          "69:   if (loop->inotify_fd != -1) {",
          "70:     uv__io_stop(loop, &loop->inotify_read_watcher);",
          "71:     close(loop->inotify_fd);",
          "72:     loop->inotify_fd = -1;",
          "73:   }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c": [
          "File: deps/uv/src/unix/pipe.c -> deps/uv/src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <unistd.h>",
          "30: #include <stdlib.h>",
          "33: int uv_pipe_init(uv_loop_t* loop, uv_pipe_t* handle, int ipc) {",
          "34:   uv__stream_init(loop, (uv_stream_t*)handle, UV_NAMED_PIPE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: static void uv__pipe_accept(uv_loop_t* loop, uv__io_t* w, int events);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     uv__set_sys_error(handle->loop, errno);",
          "139:   } else {",
          "140:     handle->connection_cb = cb;",
          "143:   }",
          "145: out:",
          "",
          "[Removed Lines]",
          "141:     ev_io_init(&handle->read_watcher, uv__pipe_accept, handle->fd, EV_READ);",
          "142:     ev_io_start(handle->loop->ev, &handle->read_watcher);",
          "",
          "[Added Lines]",
          "143:     uv__io_init(&handle->read_watcher,",
          "144:                 uv__pipe_accept,",
          "145:                 handle->fd,",
          "146:                 UV__IO_READ);",
          "147:     uv__io_start(handle->loop, &handle->read_watcher);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:   uv__stream_open((uv_stream_t*)handle,",
          "212:                   sockfd,",
          "213:                   UV_STREAM_READABLE | UV_STREAM_WRITABLE);",
          "216:   status = 0;",
          "218: out:",
          "",
          "[Removed Lines]",
          "214:   ev_io_start(handle->loop->ev, &handle->read_watcher);",
          "215:   ev_io_start(handle->loop->ev, &handle->write_watcher);",
          "",
          "[Added Lines]",
          "219:   uv__io_start(handle->loop, &handle->read_watcher);",
          "220:   uv__io_start(handle->loop, &handle->write_watcher);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:   struct sockaddr_un saddr;",
          "240:   uv_pipe_t* pipe;",
          "241:   int saved_errno;",
          "242:   int sockfd;",
          "244:   saved_errno = errno;",
          "247:   assert(pipe->type == UV_NAMED_PIPE);",
          "",
          "[Removed Lines]",
          "238: void uv__pipe_accept(EV_P_ ev_io* watcher, int revents) {",
          "245:   pipe = watcher->data;",
          "",
          "[Added Lines]",
          "243: static void uv__pipe_accept(uv_loop_t* loop, uv__io_t* w, int events) {",
          "250:   pipe = container_of(w, uv_pipe_t, read_watcher);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "257:     pipe->connection_cb((uv_stream_t*)pipe, 0);",
          "258:     if (pipe->accepted_fd == sockfd) {",
          "261:     }",
          "262:   }",
          "",
          "[Removed Lines]",
          "260:       ev_io_stop(pipe->loop->ev, &pipe->read_watcher);",
          "",
          "[Added Lines]",
          "265:       uv__io_stop(pipe->loop, &pipe->read_watcher);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/poll.c||deps/uv/src/unix/poll.c": [
          "File: deps/uv/src/unix/poll.c -> deps/uv/src/unix/poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <errno.h>",
          "37:     uv__handle_stop(handle);",
          "",
          "[Removed Lines]",
          "30: static void uv__poll_io(EV_P_ ev_io* watcher, int ev_events) {",
          "31:   uv_poll_t* handle = watcher->data;",
          "32:   int events;",
          "34:   if (ev_events & EV_ERROR) {",
          "",
          "[Added Lines]",
          "30: static void uv__poll_io(uv_loop_t* loop, uv__io_t* w, int events) {",
          "31:   uv_poll_t* handle;",
          "32:   int pevents;",
          "34:   handle = container_of(w, uv_poll_t, io_watcher);",
          "36:   if (events & UV__IO_ERROR) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     return;",
          "41:   }",
          "53: }",
          "",
          "[Removed Lines]",
          "43:   assert(ev_events & (EV_READ | EV_WRITE));",
          "44:   assert((ev_events & ~(EV_READ | EV_WRITE)) == 0);",
          "46:   events = 0;",
          "47:   if (ev_events & EV_READ)",
          "48:     events |= UV_READABLE;",
          "49:   if (ev_events & EV_WRITE)",
          "50:     events |= UV_WRITABLE;",
          "52:   handle->poll_cb(handle, 0, events);",
          "",
          "[Added Lines]",
          "45:   pevents = 0;",
          "46:   if (events & UV__IO_READ)",
          "47:     pevents |= UV_READABLE;",
          "48:   if (events & UV__IO_WRITE)",
          "49:     pevents |= UV_WRITABLE;",
          "51:   handle->poll_cb(handle, 0, pevents);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:   handle->fd = fd;",
          "61:   handle->poll_cb = NULL;",
          "66:   return 0;",
          "67: }",
          "",
          "[Removed Lines]",
          "63:   ev_init(&handle->io_watcher, uv__poll_io);",
          "64:   handle->io_watcher.data = handle;",
          "",
          "[Added Lines]",
          "61:   uv__io_init(&handle->io_watcher, uv__poll_io, fd, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76: static void uv__poll_stop(uv_poll_t* handle) {",
          "78:   uv__handle_stop(handle);",
          "79: }",
          "",
          "[Removed Lines]",
          "77:   ev_io_stop(handle->loop->ev, &handle->io_watcher);",
          "",
          "[Added Lines]",
          "74:   uv__io_stop(handle->loop, &handle->io_watcher);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86: }",
          "93:   assert(!(handle->flags & (UV_CLOSING | UV_CLOSED)));",
          "96:     uv__poll_stop(handle);",
          "97:     return 0;",
          "98:   }",
          "109:   handle->poll_cb = poll_cb;",
          "110:   uv__handle_start(handle);",
          "",
          "[Removed Lines]",
          "89: int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb poll_cb) {",
          "90:   int ev_events;",
          "92:   assert((events & ~(UV_READABLE | UV_WRITABLE)) == 0);",
          "95:   if (events == 0) {",
          "100:   ev_events = 0;",
          "101:   if (events & UV_READABLE)",
          "102:     ev_events |= EV_READ;",
          "103:   if (events & UV_WRITABLE)",
          "104:     ev_events |= EV_WRITE;",
          "106:   ev_io_set(&handle->io_watcher, handle->fd, ev_events);",
          "107:   ev_io_start(handle->loop->ev, &handle->io_watcher);",
          "",
          "[Added Lines]",
          "86: int uv_poll_start(uv_poll_t* handle, int pevents, uv_poll_cb poll_cb) {",
          "87:   int events;",
          "89:   assert((pevents & ~(UV_READABLE | UV_WRITABLE)) == 0);",
          "92:   if (pevents == 0) {",
          "97:   events = 0;",
          "98:   if (pevents & UV_READABLE)",
          "99:     events |= UV__IO_READ;",
          "100:   if (pevents & UV_WRITABLE)",
          "101:     events |= UV__IO_WRITE;",
          "103:   uv__io_set(&handle->io_watcher, uv__poll_io, handle->fd, events);",
          "104:   uv__io_start(handle->loop, &handle->io_watcher);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116: void uv__poll_close(uv_poll_t* handle) {",
          "117:   uv__poll_stop(handle);",
          "118: }",
          "",
          "[Removed Lines]",
          "121: int uv__poll_active(const uv_poll_t* handle) {",
          "122:   return ev_is_active(&handle->io_watcher);",
          "123: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c": [
          "File: deps/uv/src/unix/stream.c -> deps/uv/src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static void uv__stream_connect(uv_stream_t*);",
          "39: static void uv__write(uv_stream_t* stream);",
          "40: static void uv__read(uv_stream_t* stream);",
          "43: static size_t uv__buf_count(uv_buf_t bufs[], int bufcnt) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: static void uv__stream_io(uv_loop_t* loop, uv__io_t* w, int events);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   ngx_queue_init(&stream->write_completed_queue);",
          "72:   stream->write_queue_size = 0;",
          "83: }",
          "",
          "[Removed Lines]",
          "74:   ev_init(&stream->read_watcher, uv__stream_io);",
          "75:   stream->read_watcher.data = stream;",
          "77:   ev_init(&stream->write_watcher, uv__stream_io);",
          "78:   stream->write_watcher.data = stream;",
          "80:   assert(ngx_queue_empty(&stream->write_queue));",
          "81:   assert(ngx_queue_empty(&stream->write_completed_queue));",
          "82:   assert(stream->write_queue_size == 0);",
          "",
          "[Added Lines]",
          "75:   uv__io_init(&stream->read_watcher, uv__stream_io, -1, 0);",
          "76:   uv__io_init(&stream->write_watcher, uv__stream_io, -1, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     }",
          "112:   }",
          "122:   return 0;",
          "123: }",
          "",
          "[Removed Lines]",
          "115:   ev_io_set(&stream->read_watcher, fd, EV_READ);",
          "116:   ev_io_set(&stream->write_watcher, fd, EV_WRITE);",
          "119:   assert(stream->read_watcher.cb == uv__stream_io);",
          "120:   assert(stream->write_watcher.cb == uv__stream_io);",
          "",
          "[Added Lines]",
          "109:   uv__io_set(&stream->read_watcher, uv__stream_io, fd, UV__IO_READ);",
          "110:   uv__io_set(&stream->write_watcher, uv__stream_io, fd, UV__IO_WRITE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174: }",
          "178:   int fd;",
          "179:   struct sockaddr_storage addr;",
          "186:   assert(!(stream->flags & UV_CLOSING));",
          "188:   if (stream->accepted_fd >= 0) {",
          "190:     return;",
          "191:   }",
          "",
          "[Removed Lines]",
          "177: void uv__server_io(EV_P_ ev_io* watcher, int revents) {",
          "180:   uv_stream_t* stream = watcher->data;",
          "182:   assert(watcher == &stream->read_watcher ||",
          "183:          watcher == &stream->write_watcher);",
          "184:   assert(revents == EV_READ);",
          "189:     ev_io_stop(EV_A, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "167: void uv__server_io(uv_loop_t* loop, uv__io_t* w, int events) {",
          "170:   uv_stream_t* stream = container_of(w, uv_stream_t, read_watcher);",
          "172:   assert(events == UV__IO_READ);",
          "176:     uv__io_stop(loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:       stream->connection_cb((uv_stream_t*)stream, 0);",
          "217:       if (stream->accepted_fd >= 0) {",
          "220:         return;",
          "221:       }",
          "222:     }",
          "",
          "[Removed Lines]",
          "219:         ev_io_stop(stream->loop->ev, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "206:         uv__io_stop(stream->loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:     goto out;",
          "253:   }",
          "256:   streamServer->accepted_fd = -1;",
          "257:   status = 0;",
          "",
          "[Removed Lines]",
          "255:   ev_io_start(streamServer->loop->ev, &streamServer->read_watcher);",
          "",
          "[Added Lines]",
          "242:   uv__io_start(streamServer->loop, &streamServer->read_watcher);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:   assert(!uv_write_queue_head(stream));",
          "313:   assert(stream->write_queue_size == 0);",
          "318:   if ((stream->flags & UV_STREAM_SHUTTING) &&",
          "",
          "[Removed Lines]",
          "315:   ev_io_stop(stream->loop->ev, &stream->write_watcher);",
          "",
          "[Added Lines]",
          "302:   uv__io_stop(stream->loop, &stream->write_watcher);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:   ngx_queue_insert_tail(&stream->write_completed_queue, &req->queue);",
          "370: }",
          "",
          "[Removed Lines]",
          "369:   ev_feed_event(stream->loop->ev, &stream->write_watcher, EV_WRITE);",
          "",
          "[Added Lines]",
          "356:   uv__io_feed(stream->loop, &stream->write_watcher, UV__IO_WRITE);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "517:   assert(!stream->blocking);",
          "521: }",
          "",
          "[Removed Lines]",
          "520:   ev_io_start(stream->loop->ev, &stream->write_watcher);",
          "",
          "[Added Lines]",
          "507:   uv__io_start(stream->loop, &stream->write_watcher);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "576:   struct msghdr msg;",
          "577:   struct cmsghdr* cmsg;",
          "578:   char cmsg_space[64];",
          "",
          "[Removed Lines]",
          "579:   struct ev_loop* ev = stream->loop->ev;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "619:       if (errno == EAGAIN || errno == EWOULDBLOCK) {",
          "621:         if (stream->flags & UV_STREAM_READING) {",
          "623:         }",
          "624:         uv__set_sys_error(stream->loop, EAGAIN);",
          "",
          "[Removed Lines]",
          "622:           ev_io_start(ev, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "608:           uv__io_start(stream->loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "647:     } else if (nread == 0) {",
          "649:       uv__set_artificial_error(stream->loop, UV_EOF);",
          "651:       if (!ev_is_active(&stream->write_watcher))",
          "652:         uv__handle_stop(stream);",
          "",
          "[Removed Lines]",
          "650:       ev_io_stop(ev, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "636:       uv__io_stop(stream->loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "728:   stream->shutdown_req = req;",
          "729:   stream->flags |= UV_STREAM_SHUTTING;",
          "733:   return 0;",
          "734: }",
          "737: void uv__stream_pending(uv_stream_t* handle) {",
          "739: }",
          "749:   assert(!(stream->flags & UV_CLOSING));",
          "752:     uv__stream_connect(stream);",
          "755:     assert(stream->fd >= 0);",
          "765:   }",
          "766: }",
          "",
          "[Removed Lines]",
          "731:   ev_io_start(stream->loop->ev, &stream->write_watcher);",
          "738:   uv__stream_io(handle->loop->ev, &handle->write_watcher, EV_WRITE);",
          "742: void uv__stream_io(EV_P_ ev_io* watcher, int revents) {",
          "743:   uv_stream_t* stream = watcher->data;",
          "745:   assert(stream->type == UV_TCP || stream->type == UV_NAMED_PIPE ||",
          "746:       stream->type == UV_TTY);",
          "747:   assert(watcher == &stream->read_watcher ||",
          "748:          watcher == &stream->write_watcher);",
          "751:   if (stream->connect_req) {",
          "753:   } else {",
          "754:     assert(revents & (EV_READ | EV_WRITE));",
          "757:     if (revents & EV_READ) {",
          "758:       uv__read((uv_stream_t*)stream);",
          "759:     }",
          "761:     if (revents & EV_WRITE) {",
          "762:       uv__write(stream);",
          "763:       uv__write_callbacks(stream);",
          "764:     }",
          "",
          "[Added Lines]",
          "717:   uv__io_start(stream->loop, &stream->write_watcher);",
          "724:   uv__stream_io(handle->loop, &handle->write_watcher, UV__IO_WRITE);",
          "728: static void uv__stream_io(uv_loop_t* loop, uv__io_t* w, int events) {",
          "729:   uv_stream_t* stream;",
          "732:   assert(!!(events & UV__IO_READ) ^ !!(events & UV__IO_WRITE));",
          "734:   if (events & UV__IO_READ)",
          "735:     stream = container_of(w, uv_stream_t, read_watcher);",
          "736:   else",
          "737:     stream = container_of(w, uv_stream_t, write_watcher);",
          "739:   assert(stream->type == UV_TCP ||",
          "740:          stream->type == UV_NAMED_PIPE ||",
          "741:          stream->type == UV_TTY);",
          "744:   if (stream->connect_req)",
          "746:   else if (events & UV__IO_READ) {",
          "748:     uv__read(stream);",
          "749:   }",
          "750:   else {",
          "751:     assert(stream->fd >= 0);",
          "752:     uv__write(stream);",
          "753:     uv__write_callbacks(stream);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "796:     return;",
          "798:   if (error == 0)",
          "801:   stream->connect_req = NULL;",
          "802:   uv__req_unregister(stream->loop, req);",
          "",
          "[Removed Lines]",
          "799:     ev_io_start(stream->loop->ev, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "788:     uv__io_start(stream->loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "869:     }",
          "870:   }",
          "875:   if (stream->delayed_error)",
          "876:     uv__make_pending(stream);",
          "",
          "[Removed Lines]",
          "872:   assert(stream->write_watcher.data == stream);",
          "873:   ev_io_start(stream->loop->ev, &stream->write_watcher);",
          "",
          "[Added Lines]",
          "861:   uv__io_start(stream->loop, &stream->write_watcher);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "930:   ngx_queue_insert_tail(&stream->write_queue, &req->queue);",
          "932:   assert(!ngx_queue_empty(&stream->write_queue));",
          "",
          "[Removed Lines]",
          "933:   assert(stream->write_watcher.cb == uv__stream_io);",
          "934:   assert(stream->write_watcher.data == stream);",
          "935:   assert(stream->write_watcher.fd == stream->fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "949:     assert(!stream->blocking);",
          "952:   }",
          "954:   return 0;",
          "",
          "[Removed Lines]",
          "951:     ev_io_start(stream->loop->ev, &stream->write_watcher);",
          "",
          "[Added Lines]",
          "936:     uv__io_start(stream->loop, &stream->write_watcher);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "990:   stream->read2_cb = read2_cb;",
          "991:   stream->alloc_cb = alloc_cb;",
          "997:   uv__handle_start(stream);",
          "999:   return 0;",
          "",
          "[Removed Lines]",
          "994:   assert(stream->read_watcher.cb == uv__stream_io);",
          "996:   ev_io_start(stream->loop->ev, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "978:   uv__io_start(stream->loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1015: int uv_read_stop(uv_stream_t* stream) {",
          "1017:   uv__handle_stop(stream);",
          "1018:   stream->flags &= ~UV_STREAM_READING;",
          "1019:   stream->read_cb = NULL;",
          "",
          "[Removed Lines]",
          "1016:   ev_io_stop(stream->loop->ev, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "998:   uv__io_stop(stream->loop, &stream->read_watcher);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1036: void uv__stream_close(uv_stream_t* handle) {",
          "1037:   uv_read_stop(handle);",
          "1040:   close(handle->fd);",
          "1041:   handle->fd = -1;",
          "",
          "[Removed Lines]",
          "1038:   ev_io_stop(handle->loop->ev, &handle->write_watcher);",
          "",
          "[Added Lines]",
          "1020:   uv__io_stop(handle->loop, &handle->write_watcher);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c": [
          "File: deps/uv/src/unix/tcp.c -> deps/uv/src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   tcp->connection_cb = cb;",
          "208:   return 0;",
          "209: }",
          "",
          "[Removed Lines]",
          "204:   ev_io_set(&tcp->read_watcher, tcp->fd, EV_READ);",
          "205:   ev_set_cb(&tcp->read_watcher, uv__server_io);",
          "206:   ev_io_start(tcp->loop->ev, &tcp->read_watcher);",
          "",
          "[Added Lines]",
          "204:   uv__io_set(&tcp->read_watcher, uv__server_io, tcp->fd, UV__IO_READ);",
          "205:   uv__io_start(tcp->loop, &tcp->read_watcher);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static void uv__udp_run_completed(uv_udp_t* handle);",
          "33: static void uv__udp_run_pending(uv_udp_t* handle);",
          "36: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle, int domain);",
          "37: static int uv__udp_send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t bufs[],",
          "38:     int bufcnt, struct sockaddr* addr, socklen_t addrlen, uv_udp_send_cb send_cb);",
          "41: static void uv__udp_start_watcher(uv_udp_t* handle,",
          "49:   uv__handle_start(handle);",
          "50: }",
          "61:     uv__handle_stop(handle);",
          "62:   }",
          "63: }",
          "",
          "[Removed Lines]",
          "34: static void uv__udp_recvmsg(EV_P_ ev_io* w, int revents);",
          "35: static void uv__udp_sendmsg(EV_P_ ev_io* w, int revents);",
          "42:                                   ev_io* w,",
          "43:                                   void (*cb)(EV_P_ ev_io*, int),",
          "44:                                   int flags) {",
          "45:   if (ev_is_active(w)) return;",
          "46:   ev_set_cb(w, cb);",
          "47:   ev_io_set(w, handle->fd, flags);",
          "48:   ev_io_start(handle->loop->ev, w);",
          "53: static void uv__udp_stop_watcher(uv_udp_t* handle, ev_io* w) {",
          "54:   if (!ev_is_active(w)) return;",
          "55:   ev_io_stop(handle->loop->ev, w);",
          "56:   ev_io_set(w, -1, 0);",
          "57:   ev_set_cb(w, NULL);",
          "59:   if (!ev_is_active(&handle->read_watcher) &&",
          "60:       !ev_is_active(&handle->write_watcher)) {",
          "",
          "[Added Lines]",
          "34: static void uv__udp_recvmsg(uv_loop_t* loop, uv__io_t* w, int revents);",
          "35: static void uv__udp_sendmsg(uv_loop_t* loop, uv__io_t* w, int revents);",
          "42:                                   uv__io_t* w,",
          "43:                                   uv__io_cb cb,",
          "44:                                   int events) {",
          "45:   if (uv__io_active(w)) return;",
          "46:   uv__io_init(w, cb, handle->fd, events);",
          "47:   uv__io_start(handle->loop, w);",
          "52: static void uv__udp_stop_watcher(uv_udp_t* handle, uv__io_t* w) {",
          "53:   if (!uv__io_active(w)) return;",
          "54:   uv__io_stop(handle->loop, w);",
          "56:   if (!uv__io_active(&handle->read_watcher) &&",
          "57:       !uv__io_active(&handle->write_watcher))",
          "58:   {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   uv__udp_start_watcher(handle,",
          "68:                         &handle->read_watcher,",
          "69:                         uv__udp_recvmsg,",
          "71: }",
          "",
          "[Removed Lines]",
          "70:                         EV_READ);",
          "",
          "[Added Lines]",
          "68:                         UV__IO_READ);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   uv__udp_start_watcher(handle,",
          "76:                         &handle->write_watcher,",
          "77:                         uv__udp_sendmsg,",
          "79: }",
          "",
          "[Removed Lines]",
          "78:                         EV_WRITE);",
          "",
          "[Added Lines]",
          "76:                         UV__IO_WRITE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   uv_udp_send_t* req;",
          "102:   ngx_queue_t* q;",
          "106:   assert(handle->fd == -1);",
          "108:   uv__udp_run_completed(handle);",
          "",
          "[Removed Lines]",
          "104:   assert(!ev_is_active(&handle->write_watcher));",
          "105:   assert(!ev_is_active(&handle->read_watcher));",
          "",
          "[Added Lines]",
          "102:   assert(!uv__io_active(&handle->write_watcher));",
          "103:   assert(!uv__io_active(&handle->read_watcher));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216: }",
          "220:   struct sockaddr_storage peer;",
          "221:   struct msghdr h;",
          "222:   uv_udp_t* handle;",
          "",
          "[Removed Lines]",
          "219: static void uv__udp_recvmsg(EV_P_ ev_io* w, int revents) {",
          "",
          "[Added Lines]",
          "217: static void uv__udp_recvmsg(uv_loop_t* loop, uv__io_t* w, int revents) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "278: }",
          "282:   uv_udp_t* handle;",
          "284:   handle = container_of(w, uv_udp_t, write_watcher);",
          "",
          "[Removed Lines]",
          "281: static void uv__udp_sendmsg(EV_P_ ev_io* w, int revents) {",
          "",
          "[Added Lines]",
          "279: static void uv__udp_sendmsg(uv_loop_t* loop, uv__io_t* w, int revents) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "297:   if (!ngx_queue_empty(&handle->write_completed_queue)) {",
          "300:   }",
          "301:   else if (ngx_queue_empty(&handle->write_queue)) {",
          "",
          "[Removed Lines]",
          "299:     ev_feed_event(handle->loop->ev, &handle->write_watcher, EV_WRITE);",
          "",
          "[Added Lines]",
          "297:     uv__io_feed(handle->loop, &handle->write_watcher, UV__IO_WRITE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "649:     return -1;",
          "650:   }",
          "653:     uv__set_artificial_error(handle->loop, UV_EALREADY);",
          "654:     return -1;",
          "655:   }",
          "",
          "[Removed Lines]",
          "652:   if (ev_is_active(&handle->read_watcher)) {",
          "",
          "[Added Lines]",
          "650:   if (uv__io_active(&handle->read_watcher)) {",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tcp-writealot.c||deps/uv/test/test-tcp-writealot.c": [
          "File: deps/uv/test/test-tcp-writealot.c -> deps/uv/test/test-tcp-writealot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: static int bytes_sent_done = 0;",
          "44: static int bytes_received_done = 0;",
          "47: static uv_buf_t alloc_cb(uv_handle_t* handle, size_t size) {",
          "52: }",
          "55: static void close_cb(uv_handle_t* handle) {",
          "56:   ASSERT(handle != NULL);",
          "60:   close_cb_called++;",
          "61: }",
          "",
          "[Removed Lines]",
          "48:   uv_buf_t buf;",
          "49:   buf.base = (char*)malloc(size);",
          "50:   buf.len = size;",
          "51:   return buf;",
          "58:   free(handle);",
          "",
          "[Added Lines]",
          "44: static uv_connect_t connect_req;",
          "45: static uv_shutdown_t shutdown_req;",
          "46: static uv_write_t write_reqs[WRITES];",
          "50:   return uv_buf_init(malloc(size), size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: static void shutdown_cb(uv_shutdown_t* req, int status) {",
          "65:   uv_tcp_t* tcp;",
          "68:   ASSERT(status == 0);",
          "70:   tcp = (uv_tcp_t*)(req->handle);",
          "",
          "[Removed Lines]",
          "67:   ASSERT(req);",
          "",
          "[Added Lines]",
          "63:   ASSERT(req == &shutdown_req);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:   ASSERT(write_cb_called == WRITES);",
          "82: }",
          "85: static void read_cb(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "86:   ASSERT(tcp != NULL);",
          "89:     ASSERT(uv_last_error(uv_default_loop()).code == UV_EOF);",
          "90:     printf(\"GOT EOF\\n\");",
          "96:     uv_close((uv_handle_t*)tcp, close_cb);",
          "98:   }",
          "102:   free(buf.base);",
          "103: }",
          "",
          "[Removed Lines]",
          "81:   free(req);",
          "88:   if (nread < 0) {",
          "92:     if (buf.base) {",
          "93:       free(buf.base);",
          "94:     }",
          "97:     return;",
          "100:   bytes_received_done += nread;",
          "",
          "[Added Lines]",
          "82:   if (nread >= 0) {",
          "83:     bytes_received_done += nread;",
          "84:   }",
          "85:   else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:   bytes_sent_done += CHUNKS_PER_WRITE * CHUNK_SIZE;",
          "116:   write_cb_called++;",
          "119: }",
          "122: static void connect_cb(uv_connect_t* req, int status) {",
          "123:   uv_buf_t send_bufs[CHUNKS_PER_WRITE];",
          "127:   int i, j, r;",
          "130:   ASSERT(status == 0);",
          "134:   connect_cb_called++;",
          "138:   for (i = 0; i < WRITES; i++) {",
          "139:     for (j = 0; j < CHUNKS_PER_WRITE; j++) {",
          "142:       bytes_sent += CHUNK_SIZE;",
          "143:     }",
          "150:     ASSERT(r == 0);",
          "151:   }",
          "157:   ASSERT(r == 0);",
          "161:   ASSERT(r == 0);",
          "162: }",
          "165: TEST_IMPL(tcp_writealot) {",
          "166:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "169:   int r;",
          "176:   ASSERT(send_buffer != NULL);",
          "179:   ASSERT(r == 0);",
          "182:   ASSERT(r == 0);",
          "184:   uv_run(uv_default_loop());",
          "",
          "[Removed Lines]",
          "118:   free(req);",
          "124:   uv_tcp_t* tcp;",
          "125:   uv_write_t* write_req;",
          "126:   uv_shutdown_t* shutdown_req;",
          "129:   ASSERT(req != NULL);",
          "132:   tcp = (uv_tcp_t*)req->handle;",
          "135:   free(req);",
          "140:       send_bufs[j].len = CHUNK_SIZE;",
          "141:       send_bufs[j].base = send_buffer + bytes_sent;",
          "145:     write_req = malloc(sizeof(uv_write_t));",
          "146:     ASSERT(write_req != NULL);",
          "148:     r = uv_write(write_req, (uv_stream_t*) tcp, (uv_buf_t*)&send_bufs,",
          "149:         CHUNKS_PER_WRITE, write_cb);",
          "154:   shutdown_req = malloc(sizeof(uv_shutdown_t));",
          "155:   ASSERT(shutdown_req != NULL);",
          "156:   r = uv_shutdown(shutdown_req, (uv_stream_t*)tcp, shutdown_cb);",
          "160:   r = uv_read_start((uv_stream_t*)tcp, alloc_cb, read_cb);",
          "167:   uv_tcp_t* client = (uv_tcp_t*)malloc(sizeof *client);",
          "168:   uv_connect_t* connect_req = malloc(sizeof(uv_connect_t));",
          "171:   ASSERT(client != NULL);",
          "172:   ASSERT(connect_req != NULL);",
          "174:   send_buffer = (char*)malloc(TOTAL_BYTES + 1);",
          "178:   r = uv_tcp_init(uv_default_loop(), client);",
          "181:   r = uv_tcp_connect(connect_req, client, addr, connect_cb);",
          "",
          "[Added Lines]",
          "111:   uv_stream_t* stream;",
          "114:   ASSERT(req == &connect_req);",
          "117:   stream = req->handle;",
          "122:     uv_write_t* write_req = write_reqs + i;",
          "125:       send_bufs[j] = uv_buf_init(send_buffer + bytes_sent, CHUNK_SIZE);",
          "129:     r = uv_write(write_req, stream, send_bufs, CHUNKS_PER_WRITE, write_cb);",
          "134:   r = uv_shutdown(&shutdown_req, stream, shutdown_cb);",
          "138:   r = uv_read_start(stream, alloc_cb, read_cb);",
          "145:   uv_tcp_t client;",
          "148:   send_buffer = malloc(TOTAL_BYTES);",
          "151:   r = uv_tcp_init(uv_default_loop(), &client);",
          "154:   r = uv_tcp_connect(&connect_req, &client, addr, connect_cb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:   ASSERT(bytes_sent_done == TOTAL_BYTES);",
          "192:   ASSERT(bytes_received_done == TOTAL_BYTES);",
          "194:   return 0;",
          "195: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   free(send_buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "787f62de8c98235a16288fb2b53912eddf59fada",
      "candidate_info": {
        "commit_hash": "787f62de8c98235a16288fb2b53912eddf59fada",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/787f62de8c98235a16288fb2b53912eddf59fada",
        "files": [
          "test/simple/test-child-process-silent.js"
        ],
        "message": "Improve test-child-process-silent",
        "before_after_code_files": [
          "test/simple/test-child-process-silent.js||test/simple/test-child-process-silent.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-silent.js||test/simple/test-child-process-silent.js": [
          "File: test/simple/test-child-process-silent.js -> test/simple/test-child-process-silent.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "32:   process.send('message from child');",
          "34:     process.send('got message from master');",
          "35:   });",
          "37: } else {",
          "50:     }",
          "54:     }",
          "57:       child.kill();",
          "58:     }",
          "59:   });",
          "64:   child.send('message to child');",
          "76:   });",
          "77: }",
          "",
          "[Removed Lines]",
          "24: var fork = require('child_process').fork;",
          "26: var isChild = process.argv[2] === 'child';",
          "28: if (isChild) {",
          "29:   console.log('LOG: a stdout message');",
          "30:   console.error('LOG: a stderr message');",
          "33:   process.once('message', function () {",
          "39:   var checks = {",
          "40:     stdoutNotPiped: false,",
          "41:     stderrNotPiped: false,",
          "42:     childSending: false,",
          "43:     childReciveing: false",
          "44:   };",
          "46:   var child = fork(process.argv[1], ['child'], { silent: true });",
          "47:   child.on('message', function (message) {",
          "48:     if (checks.childSending === false) {",
          "49:       checks.childSending = (message === 'message from child');",
          "52:     if (checks.childReciveing === false) {",
          "53:       checks.childReciveing = (message === 'got message from master');",
          "56:     if (checks.childReciveing === true) {",
          "61:   checks.stdoutNotPiped = (child.stdout && child.stdout.readable === true);",
          "62:   checks.stderrNotPiped = (child.stderr && child.stderr.readable === true);",
          "67:   process.once('exit', function() {",
          "70:     assert.ok(checks.childSending, 'The child was able to send a message');",
          "71:     assert.ok(checks.childReciveing, 'The child was able to receive a message');",
          "74:     assert.ok(checks.stdoutNotPiped, 'The stdout socket was piped to parent');",
          "75:     assert.ok(checks.stdoutNotPiped, 'The stderr socket was piped to parent');",
          "",
          "[Added Lines]",
          "24: var childProcess = require('child_process');",
          "27: if (process.argv[2] === 'pipetest') {",
          "28:   process.stdout.write('stdout message');",
          "29:   process.stderr.write('stderr message');",
          "31: } else if (process.argv[2] === 'ipctest') {",
          "34:   process.on('message', function() {",
          "38: } else if (process.argv[2] === 'parent') {",
          "41:   var child = childProcess.fork(process.argv[1], ['pipetest'], {silent: true});",
          "44:   child._channel.close();",
          "45:   child._channel = null;",
          "47:   child.on('exit', function() {",
          "48:     process.exit(0);",
          "49:   });",
          "55:   var parent = childProcess.spawn(process.execPath, [process.argv[1], 'parent']);",
          "58:   var stdoutData = false;",
          "59:   parent.stdout.on('data', function() {",
          "60:     stdoutData = true;",
          "61:   });",
          "62:   var stderrData = false;",
          "63:   parent.stdout.on('data', function() {",
          "64:     stderrData = true;",
          "65:   });",
          "68:   var child = childProcess.fork(process.argv[1], ['ipctest'], {silent: true});",
          "71:   child.stderr.pipe(process.stderr, {end: false});",
          "72:   child.stdout.pipe(process.stdout, {end: false});",
          "74:   var childSending = false;",
          "75:   var childReciveing = false;",
          "76:   child.on('message', function(message) {",
          "77:     if (childSending === false) {",
          "78:       childSending = (message === 'message from child');",
          "81:     if (childReciveing === false) {",
          "82:       childReciveing = (message === 'got message from master');",
          "85:     if (childReciveing === true) {",
          "92:   process.on('exit', function() {",
          "94:     child.kill();",
          "95:     parent.kill();",
          "98:     assert.ok(!stdoutData, 'The stdout socket was piped to parent');",
          "99:     assert.ok(!stderrData, 'The stderr socket was piped to parent');",
          "102:     assert.ok(childSending, 'The child was able to send a message');",
          "103:     assert.ok(childReciveing, 'The child was able to receive a message');",
          "",
          "---------------"
        ]
      }
    }
  ]
}