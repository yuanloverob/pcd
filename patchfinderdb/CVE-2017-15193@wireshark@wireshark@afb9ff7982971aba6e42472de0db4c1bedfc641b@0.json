{
  "cve_id": "CVE-2017-15193",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.1 and 2.2.0 to 2.2.9, the MBIM dissector could crash or exhaust system memory. This was addressed in epan/dissectors/packet-mbim.c by changing the memory-allocation approach.",
  "repo": "wireshark/wireshark",
  "patch_hash": "afb9ff7982971aba6e42472de0db4c1bedfc641b",
  "patch_info": {
    "commit_hash": "afb9ff7982971aba6e42472de0db4c1bedfc641b",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/afb9ff7982971aba6e42472de0db4c1bedfc641b",
    "files": [
      "epan/dissectors/packet-mbim.c"
    ],
    "message": "MBIM: stop pre sizing wmem arrays\n\nIn case of malformed packet, this can lead to an insane amount of\nmemory.\nInstead let's use the automatic growth mecanism. This way the malformed\npacket is caught by the dissection engine.\n\nBug: 14056\nChange-Id: I7bf5b80a516210b341356f5d495f08d1dba05805\nReviewed-on: https://code.wireshark.org/review/23537\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c": [
      "File: epan/dissectors/packet-mbim.c -> epan/dissectors/packet-mbim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2394:     proto_tree_add_item_ret_uint(tree, hf_mbim_subscr_ready_status_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "2395:     offset += 4;",
      "2396:     if (elem_count) {",
      "2398:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Telephone Numbers Ref List\");",
      "2399:         for (i = 0; i < elem_count; i++) {",
      "2400:             proto_tree_add_item_ret_uint(subtree, hf_mbim_subscr_ready_status_tel_nb_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
      "",
      "[Removed Lines]",
      "2397:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "2397:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2557:     proto_tree_add_item_ret_uint(tree, hf_mbim_providers_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "2558:     offset += 4;",
      "2559:     if (elem_count) {",
      "2561:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Providers Ref List\");",
      "2562:         for (i = 0; i < elem_count; i++) {",
      "2563:             proto_tree_add_item_ret_uint(subtree, hf_mbim_providers_provider_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
      "",
      "[Removed Lines]",
      "2560:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "2560:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2903:     proto_tree_add_item_ret_uint(tree, hf_mbim_provisioned_contexts_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "2904:     offset += 4;",
      "2905:     if (elem_count) {",
      "2907:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Provisioned Context Ref List\");",
      "2908:         for (i = 0; i < elem_count; i++) {",
      "2909:             proto_tree_add_item_ret_uint(subtree, hf_mbim_provisioned_contexts_info_provisioned_context_offset,",
      "",
      "[Removed Lines]",
      "2906:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "2906:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3088:     proto_tree_add_item(tree, hf_mbim_device_services_info_max_dss_sessions, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "3089:     offset += 4;",
      "3090:     if (device_services_count) {",
      "3092:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*device_services_count, ett_mbim_pair_list, NULL, \"Device Services Ref List\");",
      "3093:         for (i = 0; i < device_services_count; i++) {",
      "3094:             proto_tree_add_item_ret_uint(subtree, hf_mbim_device_services_info_device_services_offset,",
      "",
      "[Removed Lines]",
      "3091:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), device_services_count);",
      "",
      "[Added Lines]",
      "3091:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3153:     proto_tree_add_item_ret_uint(tree, hf_mbim_device_service_subscribe_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
      "3154:     offset += 4;",
      "3155:     if (element_count) {",
      "3157:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"Device Service Subscribe Ref List\");",
      "3158:         for (i = 0; i < element_count; i++) {",
      "3159:             proto_tree_add_item_ret_uint(subtree, hf_mbim_device_service_subscribe_device_service_offset,",
      "",
      "[Removed Lines]",
      "3156:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
      "",
      "[Added Lines]",
      "3156:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3235:     proto_tree_add_item_ret_uint(tree, hf_mbim_packet_filters_packet_filters_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &packet_filters_count);",
      "3236:     offset += 4;",
      "3237:     if (packet_filters_count) {",
      "3239:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*packet_filters_count, ett_mbim_pair_list, NULL, \"Packet Filter Ref List\");",
      "3240:         for (i = 0; i < packet_filters_count; i++) {",
      "3241:             proto_tree_add_item_ret_uint(subtree, hf_mbim_packet_filters_packet_filters_packet_filter_offset,",
      "",
      "[Removed Lines]",
      "3238:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), packet_filters_count);",
      "",
      "[Added Lines]",
      "3238:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3488:     proto_tree_add_item_ret_uint(tree, hf_mbim_sms_read_info_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
      "3489:     offset += 4;",
      "3490:     if (element_count) {",
      "3492:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"SMS Ref List\");",
      "3493:         for (i = 0; i < element_count; i++) {",
      "3494:             proto_tree_add_item_ret_uint(subtree, hf_mbim_sms_read_info_sms_offset,",
      "",
      "[Removed Lines]",
      "3491:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
      "",
      "[Added Lines]",
      "3491:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3793:     proto_tree_add_item_ret_uint(tree, hf_mbim_phonebook_read_info_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
      "3794:     offset += 4;",
      "3795:     if (element_count) {",
      "3797:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"Phonebook Ref List\");",
      "3798:         for (i = 0; i < element_count; i++) {",
      "3799:             proto_tree_add_item_ret_uint(subtree, hf_mbim_phonebook_read_info_phonebook_offset,",
      "",
      "[Removed Lines]",
      "3796:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
      "",
      "[Added Lines]",
      "3796:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4208:     proto_tree_add_item_ret_uint(tree, hf_mbim_adpclk_freq_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "4209:     offset += 4;",
      "4210:     if (elem_count) {",
      "4212:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Element Offset Length Pair\");",
      "4213:         for (i = 0; i < elem_count; i++) {",
      "4214:             proto_tree_add_item_ret_uint(subtree, hf_mbim_adpclk_freq_info_adpclk_freq_value_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
      "",
      "[Removed Lines]",
      "4211:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "4211:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4337:     proto_tree_add_item_ret_uint(tree, hf_mbim_atds_operators_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "4338:     offset += 4;",
      "4339:     if (elem_count) {",
      "4341:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Operators List\");",
      "4342:         for (i = 0; i < elem_count; i++) {",
      "4343:             proto_tree_add_item_ret_uint(subtree, hf_mbim_atds_operators_operator_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
      "",
      "[Removed Lines]",
      "4340:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "4340:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4412:     proto_tree_add_item_ret_uint(tree, hf_mbim_atds_projection_tables_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "4413:     offset += 4;",
      "4414:     if (elem_count) {",
      "4416:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Projection Tables List\");",
      "4417:         for (i = 0; i < elem_count; i++) {",
      "4418:             proto_tree_add_item_ret_uint(subtree, hf_mbim_atds_projection_tables_projection_table_offset,",
      "",
      "[Removed Lines]",
      "4415:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "4415:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4449:     proto_tree_add_item_ret_uint(tree, hf_mbim_multiflow_tft_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
      "4450:     offset += 4;",
      "4451:     if (elem_count) {",
      "4453:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"TFT List\");",
      "4454:         for (i = 0; i < elem_count; i++) {",
      "4455:             proto_tree_add_item_ret_uint(subtree, hf_mbim_multiflow_tft_info_tft_list_offset,",
      "",
      "[Removed Lines]",
      "4452:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
      "",
      "[Added Lines]",
      "4452:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2f5c773fbb856ad80f38f6f66241d63cc4327dd",
      "candidate_info": {
        "commit_hash": "b2f5c773fbb856ad80f38f6f66241d63cc4327dd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b2f5c773fbb856ad80f38f6f66241d63cc4327dd",
        "files": [
          "epan/dissectors/packet-mbim.c"
        ],
        "message": "MBIM: stop pre sizing wmem arrays\n\nIn case of malformed packet, this can lead to an insane amount of\nmemory.\nInstead let's use the automatic growth mecanism. This way the malformed\npacket is caught by the dissection engine.\n\nBug: 14056\nChange-Id: I7bf5b80a516210b341356f5d495f08d1dba05805\nReviewed-on: https://code.wireshark.org/review/23537\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit afb9ff7982971aba6e42472de0db4c1bedfc641b)\n Conflicts:\n\tepan/dissectors/packet-mbim.c\nReviewed-on: https://code.wireshark.org/review/23538\n(cherry picked from commit 9b91a80d4a0b1970b95e07fed7bae6d25b6d312c)\nReviewed-on: https://code.wireshark.org/review/23539",
        "before_after_code_files": [
          "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c": [
          "File: epan/dissectors/packet-mbim.c -> epan/dissectors/packet-mbim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2330:     proto_tree_add_item_ret_uint(tree, hf_mbim_subscr_ready_status_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "2331:     offset += 4;",
          "2332:     if (elem_count) {",
          "2334:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Telephone Numbers Ref List\");",
          "2335:         for (i = 0; i < elem_count; i++) {",
          "2336:             proto_tree_add_item_ret_uint(subtree, hf_mbim_subscr_ready_status_tel_nb_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "2333:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "2333:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2493:     proto_tree_add_item_ret_uint(tree, hf_mbim_providers_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "2494:     offset += 4;",
          "2495:     if (elem_count) {",
          "2497:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Providers Ref List\");",
          "2498:         for (i = 0; i < elem_count; i++) {",
          "2499:             proto_tree_add_item_ret_uint(subtree, hf_mbim_providers_provider_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "2496:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "2496:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2846:     proto_tree_add_item_ret_uint(tree, hf_mbim_provisioned_contexts_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "2847:     offset += 4;",
          "2848:     if (elem_count) {",
          "2850:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Provisioned Context Ref List\");",
          "2851:         for (i = 0; i < elem_count; i++) {",
          "2852:             proto_tree_add_item_ret_uint(subtree, hf_mbim_provisioned_contexts_info_provisioned_context_offset,",
          "",
          "[Removed Lines]",
          "2849:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "2849:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3031:     proto_tree_add_item(tree, hf_mbim_device_services_info_max_dss_sessions, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "3032:     offset += 4;",
          "3033:     if (device_services_count) {",
          "3035:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*device_services_count, ett_mbim_pair_list, NULL, \"Device Services Ref List\");",
          "3036:         for (i = 0; i < device_services_count; i++) {",
          "3037:             proto_tree_add_item_ret_uint(subtree, hf_mbim_device_services_info_device_services_offset,",
          "",
          "[Removed Lines]",
          "3034:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), device_services_count);",
          "",
          "[Added Lines]",
          "3034:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3096:     proto_tree_add_item_ret_uint(tree, hf_mbim_device_service_subscribe_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
          "3097:     offset += 4;",
          "3098:     if (element_count) {",
          "3100:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"Device Service Subscribe Ref List\");",
          "3101:         for (i = 0; i < element_count; i++) {",
          "3102:             proto_tree_add_item_ret_uint(subtree, hf_mbim_device_service_subscribe_device_service_offset,",
          "",
          "[Removed Lines]",
          "3099:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
          "",
          "[Added Lines]",
          "3099:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3178:     proto_tree_add_item_ret_uint(tree, hf_mbim_packet_filters_packet_filters_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &packet_filters_count);",
          "3179:     offset += 4;",
          "3180:     if (packet_filters_count) {",
          "3182:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*packet_filters_count, ett_mbim_pair_list, NULL, \"Packet Filter Ref List\");",
          "3183:         for (i = 0; i < packet_filters_count; i++) {",
          "3184:             proto_tree_add_item_ret_uint(subtree, hf_mbim_packet_filters_packet_filters_packet_filter_offset,",
          "",
          "[Removed Lines]",
          "3181:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), packet_filters_count);",
          "",
          "[Added Lines]",
          "3181:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3431:     proto_tree_add_item_ret_uint(tree, hf_mbim_sms_read_info_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
          "3432:     offset += 4;",
          "3433:     if (element_count) {",
          "3435:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"SMS Ref List\");",
          "3436:         for (i = 0; i < element_count; i++) {",
          "3437:             proto_tree_add_item_ret_uint(subtree, hf_mbim_sms_read_info_sms_offset,",
          "",
          "[Removed Lines]",
          "3434:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
          "",
          "[Added Lines]",
          "3434:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3736:     proto_tree_add_item_ret_uint(tree, hf_mbim_phonebook_read_info_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
          "3737:     offset += 4;",
          "3738:     if (element_count) {",
          "3740:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"Phonebook Ref List\");",
          "3741:         for (i = 0; i < element_count; i++) {",
          "3742:             proto_tree_add_item_ret_uint(subtree, hf_mbim_phonebook_read_info_phonebook_offset,",
          "",
          "[Removed Lines]",
          "3739:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
          "",
          "[Added Lines]",
          "3739:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4157:     proto_tree_add_item_ret_uint(tree, hf_mbim_adpclk_freq_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4158:     offset += 4;",
          "4159:     if (elem_count) {",
          "4161:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Element Offset Length Pair\");",
          "4162:         for (i = 0; i < elem_count; i++) {",
          "4163:             proto_tree_add_item_ret_uint(subtree, hf_mbim_adpclk_freq_info_adpclk_freq_value_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "4160:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "4160:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4292:     proto_tree_add_item_ret_uint(tree, hf_mbim_atds_operators_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4293:     offset += 4;",
          "4294:     if (elem_count) {",
          "4296:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Operators List\");",
          "4297:         for (i = 0; i < elem_count; i++) {",
          "4298:             proto_tree_add_item_ret_uint(subtree, hf_mbim_atds_operators_operator_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "4295:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "4295:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4375:     proto_tree_add_item_ret_uint(tree, hf_mbim_atds_projection_tables_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4376:     offset += 4;",
          "4377:     if (elem_count) {",
          "4379:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Projection Tables List\");",
          "4380:         for (i = 0; i < elem_count; i++) {",
          "4381:             proto_tree_add_item_ret_uint(subtree, hf_mbim_atds_projection_tables_projection_table_offset,",
          "",
          "[Removed Lines]",
          "4378:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "4378:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b91a80d4a0b1970b95e07fed7bae6d25b6d312c",
      "candidate_info": {
        "commit_hash": "9b91a80d4a0b1970b95e07fed7bae6d25b6d312c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9b91a80d4a0b1970b95e07fed7bae6d25b6d312c",
        "files": [
          "epan/dissectors/packet-mbim.c"
        ],
        "message": "MBIM: stop pre sizing wmem arrays\n\nIn case of malformed packet, this can lead to an insane amount of\nmemory.\nInstead let's use the automatic growth mecanism. This way the malformed\npacket is caught by the dissection engine.\n\nBug: 14056\nChange-Id: I7bf5b80a516210b341356f5d495f08d1dba05805\nReviewed-on: https://code.wireshark.org/review/23537\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit afb9ff7982971aba6e42472de0db4c1bedfc641b)\n Conflicts:\n\tepan/dissectors/packet-mbim.c\nReviewed-on: https://code.wireshark.org/review/23538",
        "before_after_code_files": [
          "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c": [
          "File: epan/dissectors/packet-mbim.c -> epan/dissectors/packet-mbim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2330:     proto_tree_add_item_ret_uint(tree, hf_mbim_subscr_ready_status_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "2331:     offset += 4;",
          "2332:     if (elem_count) {",
          "2334:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Telephone Numbers Ref List\");",
          "2335:         for (i = 0; i < elem_count; i++) {",
          "2336:             proto_tree_add_item_ret_uint(subtree, hf_mbim_subscr_ready_status_tel_nb_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "2333:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "2333:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2493:     proto_tree_add_item_ret_uint(tree, hf_mbim_providers_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "2494:     offset += 4;",
          "2495:     if (elem_count) {",
          "2497:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Providers Ref List\");",
          "2498:         for (i = 0; i < elem_count; i++) {",
          "2499:             proto_tree_add_item_ret_uint(subtree, hf_mbim_providers_provider_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "2496:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "2496:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2839:     proto_tree_add_item_ret_uint(tree, hf_mbim_provisioned_contexts_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "2840:     offset += 4;",
          "2841:     if (elem_count) {",
          "2843:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Provisioned Context Ref List\");",
          "2844:         for (i = 0; i < elem_count; i++) {",
          "2845:             proto_tree_add_item_ret_uint(subtree, hf_mbim_provisioned_contexts_info_provisioned_context_offset,",
          "",
          "[Removed Lines]",
          "2842:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "2842:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3024:     proto_tree_add_item(tree, hf_mbim_device_services_info_max_dss_sessions, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "3025:     offset += 4;",
          "3026:     if (device_services_count) {",
          "3028:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*device_services_count, ett_mbim_pair_list, NULL, \"Device Services Ref List\");",
          "3029:         for (i = 0; i < device_services_count; i++) {",
          "3030:             proto_tree_add_item_ret_uint(subtree, hf_mbim_device_services_info_device_services_offset,",
          "",
          "[Removed Lines]",
          "3027:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), device_services_count);",
          "",
          "[Added Lines]",
          "3027:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3089:     proto_tree_add_item_ret_uint(tree, hf_mbim_device_service_subscribe_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
          "3090:     offset += 4;",
          "3091:     if (element_count) {",
          "3093:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"Device Service Subscribe Ref List\");",
          "3094:         for (i = 0; i < element_count; i++) {",
          "3095:             proto_tree_add_item_ret_uint(subtree, hf_mbim_device_service_subscribe_device_service_offset,",
          "",
          "[Removed Lines]",
          "3092:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
          "",
          "[Added Lines]",
          "3092:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3171:     proto_tree_add_item_ret_uint(tree, hf_mbim_packet_filters_packet_filters_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &packet_filters_count);",
          "3172:     offset += 4;",
          "3173:     if (packet_filters_count) {",
          "3175:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*packet_filters_count, ett_mbim_pair_list, NULL, \"Packet Filter Ref List\");",
          "3176:         for (i = 0; i < packet_filters_count; i++) {",
          "3177:             proto_tree_add_item_ret_uint(subtree, hf_mbim_packet_filters_packet_filters_packet_filter_offset,",
          "",
          "[Removed Lines]",
          "3174:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), packet_filters_count);",
          "",
          "[Added Lines]",
          "3174:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3424:     proto_tree_add_item_ret_uint(tree, hf_mbim_sms_read_info_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
          "3425:     offset += 4;",
          "3426:     if (element_count) {",
          "3428:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"SMS Ref List\");",
          "3429:         for (i = 0; i < element_count; i++) {",
          "3430:             proto_tree_add_item_ret_uint(subtree, hf_mbim_sms_read_info_sms_offset,",
          "",
          "[Removed Lines]",
          "3427:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
          "",
          "[Added Lines]",
          "3427:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3729:     proto_tree_add_item_ret_uint(tree, hf_mbim_phonebook_read_info_element_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &element_count);",
          "3730:     offset += 4;",
          "3731:     if (element_count) {",
          "3733:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*element_count, ett_mbim_pair_list, NULL, \"Phonebook Ref List\");",
          "3734:         for (i = 0; i < element_count; i++) {",
          "3735:             proto_tree_add_item_ret_uint(subtree, hf_mbim_phonebook_read_info_phonebook_offset,",
          "",
          "[Removed Lines]",
          "3732:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), element_count);",
          "",
          "[Added Lines]",
          "3732:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4144:     proto_tree_add_item_ret_uint(tree, hf_mbim_adpclk_freq_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4145:     offset += 4;",
          "4146:     if (elem_count) {",
          "4148:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Element Offset Length Pair\");",
          "4149:         for (i = 0; i < elem_count; i++) {",
          "4150:             proto_tree_add_item_ret_uint(subtree, hf_mbim_adpclk_freq_info_adpclk_freq_value_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "4147:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "4147:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4273:     proto_tree_add_item_ret_uint(tree, hf_mbim_atds_operators_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4274:     offset += 4;",
          "4275:     if (elem_count) {",
          "4277:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Operators List\");",
          "4278:         for (i = 0; i < elem_count; i++) {",
          "4279:             proto_tree_add_item_ret_uint(subtree, hf_mbim_atds_operators_operator_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "",
          "[Removed Lines]",
          "4276:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "4276:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4348:     proto_tree_add_item_ret_uint(tree, hf_mbim_atds_projection_tables_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4349:     offset += 4;",
          "4350:     if (elem_count) {",
          "4352:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"Projection Tables List\");",
          "4353:         for (i = 0; i < elem_count; i++) {",
          "4354:             proto_tree_add_item_ret_uint(subtree, hf_mbim_atds_projection_tables_projection_table_offset,",
          "",
          "[Removed Lines]",
          "4351:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "",
          "[Added Lines]",
          "4351:         pair_list = wmem_array_new(wmem_packet_scope(), sizeof(struct mbim_pair_list));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4901ca31f484c88a7947a6c2354ae194694599a",
      "candidate_info": {
        "commit_hash": "c4901ca31f484c88a7947a6c2354ae194694599a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c4901ca31f484c88a7947a6c2354ae194694599a",
        "files": [
          "epan/dissectors/packet-mbim.c"
        ],
        "message": "MBIM: add multiflow extension dissection\n\nChange-Id: I9892df3984baf1ecf241b6d3f426a8633bf39b33\nReviewed-on: https://code.wireshark.org/review/23420\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mbim.c||epan/dissectors/packet-mbim.c": [
          "File: epan/dissectors/packet-mbim.c -> epan/dissectors/packet-mbim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static int hf_mbim_uuid_intel_usb_profile_cid = -1;",
          "75: static int hf_mbim_uuid_intel_ciq_cid = -1;",
          "76: static int hf_mbim_uuid_atds_cid = -1;",
          "77: static int hf_mbim_cid = -1;",
          "78: static int hf_mbim_command_type = -1;",
          "79: static int hf_mbim_info_buffer_len = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: static int hf_mbim_uuid_multiflow_cid = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660: static int hf_mbim_atds_projection_tables_elem_count = -1;",
          "661: static int hf_mbim_atds_projection_tables_projection_table_offset = -1;",
          "662: static int hf_mbim_atds_projection_tables_projection_table_size = -1;",
          "663: static int hf_mbim_fragmented_payload = -1;",
          "664: static int hf_mbim_request_in = -1;",
          "665: static int hf_mbim_response_in = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665: static int hf_mbim_multiflow_caps_info_control_caps = -1;",
          "666: static int hf_mbim_multiflow_caps_info_control_caps_uplink = -1;",
          "667: static int hf_mbim_multiflow_caps_info_control_caps_downlink = -1;",
          "668: static int hf_mbim_set_multiflow_state_state = -1;",
          "669: static int hf_mbim_multiflow_state_info_state = -1;",
          "670: static int hf_mbim_multiflow_tft_info_session_id = -1;",
          "671: static int hf_mbim_multiflow_tft_info_elem_count = -1;",
          "672: static int hf_mbim_multiflow_tft_info_tft_list_offset = -1;",
          "673: static int hf_mbim_multiflow_tft_info_tft_list_size = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "685: static int hf_mbim_bulk_nth_ndp_index_32 = -1;",
          "686: static int hf_mbim_bulk_ndp_signature = -1;",
          "687: static int hf_mbim_bulk_ndp_signature_ips_session_id = -1;",
          "688: static int hf_mbim_bulk_ndp_signature_dss_session_id = -1;",
          "689: static int hf_mbim_bulk_ndp_length = -1;",
          "690: static int hf_mbim_bulk_ndp_next_ndp_index = -1;",
          "691: static int hf_mbim_bulk_ndp_next_ndp_index_32 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699: static int hf_mbim_bulk_ndp_signature_ipc_session_id = -1;",
          "701: static int hf_mbim_bulk_ndp_signature_dsc_session_id = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "698: static int hf_mbim_bulk_ndp_datagram = -1;",
          "699: static int hf_mbim_bulk_ndp_nb_datagrams = -1;",
          "700: static int hf_mbim_bulk_total_nb_datagrams = -1;",
          "701: static int hf_mbim_fragments = -1;",
          "702: static int hf_mbim_fragment = -1;",
          "703: static int hf_mbim_fragment_overlap = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714: static int hf_mbim_bulk_ndp_ctrl = -1;",
          "715: static int hf_mbim_bulk_ndp_ctrl_message_type = -1;",
          "716: static int hf_mbim_bulk_ndp_ctrl_message_length = -1;",
          "717: static int hf_mbim_bulk_ndp_ctrl_multiflow_status = -1;",
          "718: static int hf_mbim_bulk_ndp_ctrl_multiflow_watermark = -1;",
          "719: static int hf_mbim_bulk_ndp_ctrl_message_payload = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737: static gint ett_mbim_thermal_threshold_setting = -1;",
          "738: static gint ett_mbim_fragment = -1;",
          "739: static gint ett_mbim_fragments = -1;",
          "741: static dissector_table_t dss_dissector_table;",
          "742: static dissector_handle_t bertlv_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759: static gint ett_mbim_bulk_ndp_ctrl = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "747: static dissector_handle_t eth_fcs_handle;",
          "748: static dissector_handle_t ip_handle;",
          "749: static dissector_handle_t data_handle;",
          "750: static dissector_handle_t mbim_control_handle;",
          "752: static gboolean mbim_control_decode_unknown_itf = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770: static dissector_handle_t bulk_ndp_ctrl_handle;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "919: #define UUID_EXT_IDX           255",
          "921: static const struct mbim_uuid mbim_uuid_service_id_vals[UUID_MAX] = {",
          "",
          "[Removed Lines]",
          "918: #define UUID_MAX               20",
          "",
          "[Added Lines]",
          "939: #define UUID_MULTIFLOW         20",
          "940: #define UUID_MAX               21",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "938:     { UUID_INTEL_NRTC, {0x2b6d8c5a, 0x0ca9, 0x418f, {0x8a, 0xac, 0x1a, 0x9d, 0xc8, 0xe3, 0x28, 0x66}}},",
          "939:     { UUID_INTEL_USB_PROFILE, {0xfa142322, 0x166b, 0x4fd9, {0x89, 0xf0, 0x99, 0xbe, 0x90, 0xae, 0x8e, 0x3d}}},",
          "940:     { UUID_INTEL_CIQ, {0x6A2A8150, 0xABCA, 0x4b11, {0xA4, 0xE2, 0xF2, 0xFC, 0x87, 0x9F, 0x54, 0x81}}},",
          "942: };",
          "944: static const value_string mbim_service_id_vals[] = {",
          "",
          "[Removed Lines]",
          "941:     { UUID_ATDS, {0x5967bdcc, 0x7fd2, 0x49a2, {0x9f, 0x5c, 0xb2, 0xe7, 0x0e, 0x52, 0x7d, 0xb3}}}",
          "",
          "[Added Lines]",
          "963:     { UUID_ATDS, {0x5967bdcc, 0x7fd2, 0x49a2, {0x9f, 0x5c, 0xb2, 0xe7, 0x0e, 0x52, 0x7d, 0xb3}}},",
          "964:     { UUID_MULTIFLOW, {0x8d8f32d9, 0xf7c2, 0x4419, {0xb2, 0x8b, 0xde, 0xdc, 0xde, 0x20, 0x5e, 0xd8}}}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "962:     { UUID_INTEL_USB_PROFILE, \"UUID_INTEL_USB_PROFILE\"},",
          "963:     { UUID_INTEL_CIQ, \"UUID_INTEL_CIQ\"},",
          "964:     { UUID_ATDS, \"UUID_ATDS\"},",
          "965:     { 0, NULL}",
          "966: };",
          "967: static value_string_ext mbim_service_id_vals_ext = VALUE_STRING_EXT_INIT(mbim_service_id_vals);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "988:     { UUID_MULTIFLOW, \"UUID_MULTIFLOW\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1189:     { 0, NULL}",
          "1190: };",
          "1192: struct mbim_uuid_info_ {",
          "1193:     int *hf_entry;",
          "1194:     const value_string *cid_list;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1216: #define MBIM_CID_MULTIFLOW_CAPS     1",
          "1217: #define MBIM_CID_MULTIFLOW_UPLINK   2",
          "1218: #define MBIM_CID_MULTIFLOW_DOWNLINK 3",
          "1219: #define MBIM_CID_MULTIFLOW_TFT      4",
          "1221: static const value_string mbim_uuid_multiflow_cid_vals[] = {",
          "1222:     { MBIM_CID_MULTIFLOW_CAPS, \"MULTIFLOW_CAPS\"},",
          "1223:     { MBIM_CID_MULTIFLOW_UPLINK, \"MULTIFLOW_UPLINK\"},",
          "1224:     { MBIM_CID_MULTIFLOW_DOWNLINK, \"MULTIFLOW_DOWNLINK\"},",
          "1225:     { MBIM_CID_MULTIFLOW_TFT, \"MULTIFLOW_TFT\"},",
          "1226:     { 0, NULL}",
          "1227: };",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1386: }",
          "1388: static const value_string mbim_error_rate_vals[] = {",
          "1397:     { 99, \"Unknown or undetectable\"},",
          "1398:     { 0, NULL}",
          "1399: };",
          "",
          "[Removed Lines]",
          "1389:     {  0, \"Frame error rate < 0.01%\"},",
          "1390:     {  1, \"Frame error rate 0.01-0.1%\"},",
          "1391:     {  2, \"Frame error rate 0.1-0.5%\"},",
          "1392:     {  3, \"Frame error rate 0.5-1.0%\"},",
          "1393:     {  4, \"Frame error rate 1.0-2.0%\"},",
          "1394:     {  5, \"Frame error rate 2.0-4.0%\"},",
          "1395:     {  6, \"Frame error rate 4.0-8.0%\"},",
          "1396:     {  7, \"Frame error rate > 8.0%\"},",
          "",
          "[Added Lines]",
          "1427:     {  0, \"Frame error rate < 0.01%%\"},",
          "1428:     {  1, \"Frame error rate 0.01-0.1%%\"},",
          "1429:     {  2, \"Frame error rate 0.1-0.5%%\"},",
          "1430:     {  3, \"Frame error rate 0.5-1.0%%\"},",
          "1431:     {  4, \"Frame error rate 1.0-2.0%%\"},",
          "1432:     {  5, \"Frame error rate 2.0-4.0%%\"},",
          "1433:     {  6, \"Frame error rate 4.0-8.0%%\"},",
          "1434:     {  7, \"Frame error rate > 8.0%%\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2032: };",
          "2034: static const value_string mbim_ber_vals[] = {",
          "2043:     { 99, \"Unknown or undetectable\"},",
          "2044:     { 0, NULL}",
          "2045: };",
          "",
          "[Removed Lines]",
          "2035:     { 0, \"BER < 0,2%\"},",
          "2036:     { 1, \"0,2% < BER < 0,4%\"},",
          "2037:     { 2, \"0,4% < BER < 0,8%\"},",
          "2038:     { 3, \"0,8% < BER < 1,6%\"},",
          "2039:     { 4, \"1,6% < BER < 3,2%\"},",
          "2040:     { 5, \"3,2% < BER < 6,4%\"},",
          "2041:     { 6, \"6,4% < BER < 12,8%\"},",
          "2042:     { 7, \"12,8% < BER\"},",
          "",
          "[Added Lines]",
          "2073:     { 0, \"BER < 0,2%%\"},",
          "2074:     { 1, \"0,2%% < BER < 0,4%%\"},",
          "2075:     { 2, \"0,4%% < BER < 0,8%%\"},",
          "2076:     { 3, \"0,8%% < BER < 1,6%%\"},",
          "2077:     { 4, \"1,6%% < BER < 3,2%%\"},",
          "2078:     { 5, \"3,2%% < BER < 6,4%%\"},",
          "2079:     { 6, \"6,4%% < BER < 12,8%%\"},",
          "2080:     { 7, \"12,8%% < BER\"},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2156:     g_snprintf(s, ITEM_LABEL_LENGTH, \"%.3f (%d)\", ((float)coeff)/1000, coeff);",
          "2157: }",
          "2159: static guint8",
          "2160: mbim_dissect_service_id_uuid(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, gint hf,",
          "2161:                              gint *offset, struct mbim_uuid_ext **uuid_ext_info)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2197: #define MBIM_NDP_CTRL_MULTIFLOW_STATUS 0",
          "2199: static const value_string mbim_ndp_ctrl_msg_type_vals[] = {",
          "2200:     { MBIM_NDP_CTRL_MULTIFLOW_STATUS, \"MULTIFLOW_STATUS\"},",
          "2201:     { 0, NULL}",
          "2202: };",
          "2204: static const value_string mbim_ndp_ctrl_multiflow_status_vals[] = {",
          "2205:     { 0, \"OK\"},",
          "2206:     { 1, \"High Watermark\"},",
          "2207:     { 2, \"Low Watermark\"},",
          "2208:     { 0, NULL}",
          "2209: };",
          "2211: static const int *mbim_multiflow_caps_info_control_caps_fields[] = {",
          "2212:     &hf_mbim_multiflow_caps_info_control_caps_uplink,",
          "2213:     &hf_mbim_multiflow_caps_info_control_caps_downlink,",
          "2214:     NULL",
          "2215: };",
          "2217: static const value_string mbim_multiflow_state_vals[] = {",
          "2218:     { 0, \"Off\"},",
          "2219:     { 1, \"On\"},",
          "2220:     { 0, NULL}",
          "2221: };",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4370:     }",
          "4371: }",
          "4373: static int",
          "4374: dissect_mbim_control(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "4375: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4437: static void",
          "4438: mbim_dissect_multiflow_tft_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, gint offset)",
          "4439: {",
          "4440:     proto_tree *subtree;",
          "4441:     gint base_offset;",
          "4442:     guint32 i, elem_count;",
          "4443:     wmem_array_t *pair_list;",
          "4444:     struct mbim_pair_list pair_list_item, *p_pair_list_item;",
          "4446:     base_offset = offset;",
          "4447:     proto_tree_add_item(tree, hf_mbim_multiflow_tft_info_session_id, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4448:     offset += 4;",
          "4449:     proto_tree_add_item_ret_uint(tree, hf_mbim_multiflow_tft_info_elem_count, tvb, offset, 4, ENC_LITTLE_ENDIAN, &elem_count);",
          "4450:     offset += 4;",
          "4451:     if (elem_count) {",
          "4452:         pair_list = wmem_array_sized_new(wmem_packet_scope(), sizeof(struct mbim_pair_list), elem_count);",
          "4453:         subtree = proto_tree_add_subtree(tree, tvb, offset, 8*elem_count, ett_mbim_pair_list, NULL, \"TFT List\");",
          "4454:         for (i = 0; i < elem_count; i++) {",
          "4455:             proto_tree_add_item_ret_uint(subtree, hf_mbim_multiflow_tft_info_tft_list_offset,",
          "4456:                                          tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.offset);",
          "4457:             offset += 4;",
          "4458:             proto_tree_add_item_ret_uint(subtree, hf_mbim_multiflow_tft_info_tft_list_size,",
          "4459:                                          tvb, offset, 4, ENC_LITTLE_ENDIAN, &pair_list_item.size);",
          "4460:             offset += 4;",
          "4461:             wmem_array_append_one(pair_list, pair_list_item);",
          "4462:         }",
          "4463:         for (i = 0; i < elem_count; i++) {",
          "4464:             p_pair_list_item = (struct mbim_pair_list*)wmem_array_index(pair_list, i);",
          "4465:             if (p_pair_list_item->offset && p_pair_list_item->size) {",
          "4466:                 subtree = proto_tree_add_subtree_format(tree, tvb, base_offset + p_pair_list_item->offset, p_pair_list_item->size,",
          "4467:                             ett_mbim_pair_list, NULL, \"TFT #%u\", i+1);",
          "4468:                 de_sm_tflow_temp(tvb, subtree, pinfo, base_offset + p_pair_list_item->offset, p_pair_list_item->size, NULL, 0);",
          "4469:             }",
          "4470:         }",
          "4471:     }",
          "4472: }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5111:                                 break;",
          "5112:                         }",
          "5113:                         break;",
          "5114:                     case UUID_EXT_IDX:",
          "5115:                         {",
          "5116:                             gint cid_idx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5215:                     case UUID_MULTIFLOW:",
          "5216:                         switch (cid) {",
          "5217:                             case MBIM_CID_MULTIFLOW_CAPS:",
          "5218:                                 if (cmd_type == MBIM_COMMAND_SET) {",
          "5219:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, -1);",
          "5220:                                 } else if (info_buff_len) {",
          "5221:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_info_buffer, frag_tvb, offset, info_buff_len);",
          "5222:                                 }",
          "5223:                                 break;",
          "5224:                             case MBIM_CID_MULTIFLOW_UPLINK:",
          "5225:                             case MBIM_CID_MULTIFLOW_DOWNLINK:",
          "5226:                                 if (cmd_type == MBIM_COMMAND_SET) {",
          "5227:                                     proto_tree_add_item(subtree, hf_mbim_set_multiflow_state_state, frag_tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5228:                                 } else if (info_buff_len) {",
          "5229:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_info_buffer, frag_tvb, offset, info_buff_len);",
          "5230:                                 }",
          "5231:                                 break;",
          "5232:                             case MBIM_CID_MULTIFLOW_TFT:",
          "5233:                                 if (cmd_type == MBIM_COMMAND_SET) {",
          "5234:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, -1);",
          "5235:                                 } else if (info_buff_len) {",
          "5236:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_info_buffer, frag_tvb, offset, info_buff_len);",
          "5237:                                 }",
          "5238:                                 break;",
          "5239:                             default:",
          "5240:                                 proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, -1);",
          "5241:                                 break;",
          "5242:                         }",
          "5243:                         break;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5818:                                 break;",
          "5819:                         }",
          "5820:                         break;",
          "5821:                      case UUID_EXT_IDX:",
          "5822:                         {",
          "5823:                             gint cid_idx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5951:                     case UUID_MULTIFLOW:",
          "5952:                         switch (cid) {",
          "5953:                             case MBIM_CID_MULTIFLOW_CAPS:",
          "5954:                                 if (msg_type == MBIM_COMMAND_DONE) {",
          "5955:                                     if (mbim_info && (mbim_info->cmd_type == MBIM_COMMAND_SET)) {",
          "5956:                                         proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, -1);",
          "5957:                                     } else {",
          "5958:                                         proto_tree_add_bitmask(subtree, frag_tvb, offset, hf_mbim_multiflow_caps_info_control_caps,",
          "5959:                                                                ett_mbim_bitmap, mbim_multiflow_caps_info_control_caps_fields, ENC_LITTLE_ENDIAN);",
          "5960:                                     }",
          "5961:                                 } else {",
          "5962:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, info_buff_len);",
          "5963:                                 }",
          "5964:                                 break;",
          "5965:                             case MBIM_CID_MULTIFLOW_UPLINK:",
          "5966:                             case MBIM_CID_MULTIFLOW_DOWNLINK:",
          "5967:                                 if (msg_type == MBIM_COMMAND_DONE) {",
          "5968:                                     proto_tree_add_item(subtree, hf_mbim_multiflow_state_info_state, frag_tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5969:                                 } else {",
          "5970:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, info_buff_len);",
          "5971:                                 }",
          "5972:                                 break;",
          "5973:                             case MBIM_CID_MULTIFLOW_TFT:",
          "5974:                                 if (mbim_info && (mbim_info->cmd_type == MBIM_COMMAND_SET)) {",
          "5975:                                     proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, -1);",
          "5976:                                 } else {",
          "5977:                                     mbim_dissect_multiflow_tft_info(frag_tvb, pinfo, subtree, offset);",
          "5978:                                 }",
          "5979:                                 break;",
          "5980:                             default:",
          "5981:                                 proto_tree_add_expert(subtree, pinfo, &ei_mbim_unexpected_msg, frag_tvb, offset, -1);",
          "5982:                                 break;",
          "5983:                         }",
          "5984:                         break;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5962:             col_append_sep_fstr(pinfo->cinfo, COL_INFO, NULL, \"%c%c%c%u\", signature[0], signature[1],",
          "5963:                                 signature[2], signature[3]);",
          "5964:             dissector = ip_handle;",
          "5965:         } else if ((!is_32bits && !strncmp(signature, \"DSS\", 3)) ||",
          "5966:                    (is_32bits && !strncmp(signature, \"dss\", 3))) {",
          "5967:             sig_ti = proto_tree_add_uint_format_value(subtree, hf_mbim_bulk_ndp_signature, tvb, offset,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6129:         } else if ((!is_32bits && !strncmp(signature, \"IPC\", 3)) ||",
          "6130:                    (is_32bits && !strncmp(signature, \"ipc\", 3))) {",
          "6131:             sig_ti = proto_tree_add_uint_format_value(subtree, hf_mbim_bulk_ndp_signature, tvb, offset,",
          "6132:                                                       4, tvb_get_letohl(tvb, offset), \"%c%c%c%u\", signature[0],",
          "6133:                                                       signature[1], signature[2], signature[3]);",
          "6134:             sig_tree = proto_item_add_subtree(sig_ti, ett_mbim_msg_header);",
          "6135:             proto_tree_add_item(sig_tree, hf_mbim_bulk_ndp_signature_ipc_session_id, tvb, offset+3, 1, ENC_NA);",
          "6136:             col_append_sep_fstr(pinfo->cinfo, COL_INFO, NULL, \"%c%c%c%u\", signature[0], signature[1],",
          "6137:                                 signature[2], signature[3]);",
          "6138:             dissector = bulk_ndp_ctrl_handle;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5976:             if (dissector == NULL) {",
          "5977:                 dissector = data_handle;",
          "5978:             }",
          "5979:         } else if ((!is_32bits && !strcmp(signature, \"NCM0\")) ||",
          "5980:                    (is_32bits && !strcmp(signature, \"ncm0\"))) {",
          "5981:             proto_tree_add_uint_format_value(subtree, hf_mbim_bulk_ndp_signature, tvb, offset, 4,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6153:         } else if ((!is_32bits && !strncmp(signature, \"DSC\", 3)) ||",
          "6154:                    (is_32bits && !strncmp(signature, \"dsc\", 3))) {",
          "6155:             sig_ti = proto_tree_add_uint_format_value(subtree, hf_mbim_bulk_ndp_signature, tvb, offset,",
          "6156:                                                       4, tvb_get_letohl(tvb, offset), \"%c%c%c%u\", signature[0],",
          "6157:                                                       signature[1], signature[2], signature[3]);",
          "6158:             sig_tree = proto_item_add_subtree(sig_ti, ett_mbim_msg_header);",
          "6159:             proto_tree_add_item(sig_tree, hf_mbim_bulk_ndp_signature_dsc_session_id, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);",
          "6160:             col_append_sep_fstr(pinfo->cinfo, COL_INFO, NULL, \"%c%c%c%u\", signature[0], signature[1],",
          "6161:                                 signature[2], signature[3]);",
          "6162:             dissector = bulk_ndp_ctrl_handle;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6134:     return 0;",
          "6135: }",
          "6137: static guint",
          "6138: mbim_uuid_hash(gconstpointer key)",
          "6139: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6321: static int",
          "6322: dissect_mbim_bulk_ndp_ctrl(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "6323: {",
          "6324:     proto_tree *ndp_ctrl_tree;",
          "6325:     proto_item *ti;",
          "6326:     gint offset = 0;",
          "6327:     guint32 msg_type, msg_len;",
          "6329:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"MBIM NDP Control\");",
          "6330:     col_clear(pinfo->cinfo, COL_INFO);",
          "6332:     ti = proto_tree_add_protocol_format(tree, proto_mbim, tvb, 0, -1, \"MBIM NDP Control\");",
          "6333:     ndp_ctrl_tree = proto_item_add_subtree(ti, ett_mbim_bulk_ndp_ctrl);",
          "6334:     ti = proto_tree_add_item(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl, tvb, offset, 0, ENC_NA);",
          "6335:     PROTO_ITEM_SET_HIDDEN(ti);",
          "6337:     proto_tree_add_item_ret_uint(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl_message_type, tvb, offset, 2, ENC_LITTLE_ENDIAN, &msg_type);",
          "6338:     offset += 2;",
          "6339:     col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(msg_type, mbim_ndp_ctrl_msg_type_vals, \"Unknown\"));",
          "6340:     proto_tree_add_item_ret_uint(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl_message_length, tvb, offset, 2, ENC_LITTLE_ENDIAN, &msg_len);",
          "6341:     offset += 2;",
          "6343:     switch (msg_type) {",
          "6344:         case MBIM_NDP_CTRL_MULTIFLOW_STATUS:",
          "6345:             {",
          "6346:                 guint32 watermark;",
          "6348:                 proto_tree_add_item(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl_multiflow_status, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6349:                 offset += 2;",
          "6350:                 watermark = tvb_get_letohl(tvb, offset);",
          "6351:                 if (watermark == 0xffffffff) {",
          "6352:                     proto_tree_add_uint_format_value(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl_multiflow_watermark, tvb, offset, 4,",
          "6353:                                                      watermark, \"Not reported (0xffffffff)\");",
          "6354:                 } else {",
          "6355:                     proto_tree_add_uint_format_value(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl_multiflow_watermark, tvb, offset, 4,",
          "6356:                                                      watermark, \"%u payload bytes\", watermark);",
          "6357:                 }",
          "6358:             }",
          "6359:             break;",
          "6360:         default:",
          "6361:             proto_tree_add_item(ndp_ctrl_tree, hf_mbim_bulk_ndp_ctrl_message_payload, tvb, offset, msg_len-4, ENC_NA);",
          "6362:             break;",
          "6363:     }",
          "6364:     return tvb_captured_length(tvb);",
          "6365: }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6312:                FT_UINT32, BASE_DEC, VALS(mbim_uuid_atds_cid_vals), 0,",
          "6313:               NULL, HFILL }",
          "6314:         },",
          "6315:         { &hf_mbim_cid,",
          "6316:             { \"CID\", \"mbim.control.cid\",",
          "6317:                FT_UINT32, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6545:         { &hf_mbim_uuid_multiflow_cid,",
          "6546:             { \"CID\", \"mbim.control.cid\",",
          "6547:                FT_UINT32, BASE_DEC, VALS(mbim_uuid_multiflow_cid_vals), 0,",
          "6548:               NULL, HFILL }",
          "6549:         },",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9242:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9243:               NULL, HFILL }",
          "9244:         },",
          "9245:         { &hf_mbim_fragmented_payload,",
          "9246:             { \"Fragmented Payload\", \"mbim.control.fragmented_payload\",",
          "9247:                FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9480:         { &hf_mbim_multiflow_caps_info_control_caps,",
          "9481:             { \"Control Caps\", \"mbim.control.multiflow_caps_info.control_caps\",",
          "9482:                FT_UINT32, BASE_HEX, NULL, 0,",
          "9483:               NULL, HFILL }",
          "9484:         },",
          "9485:         { &hf_mbim_multiflow_caps_info_control_caps_uplink,",
          "9486:             { \"Uplink\", \"mbim.control.multiflow_caps_info.control_caps.uplink\",",
          "9487:                FT_BOOLEAN, 32, TFS(&tfs_supported_not_supported), 0x00000001,",
          "9488:               NULL, HFILL }",
          "9489:         },",
          "9490:         { &hf_mbim_multiflow_caps_info_control_caps_downlink,",
          "9491:             { \"Downlink\", \"mbim.control.multiflow_caps_info.control_caps.downlink\",",
          "9492:                FT_BOOLEAN, 32, TFS(&tfs_supported_not_supported), 0x00000002,",
          "9493:               NULL, HFILL }",
          "9494:         },",
          "9495:         { &hf_mbim_set_multiflow_state_state,",
          "9496:             { \"State\", \"mbim.control.set_multiflow_state.state\",",
          "9497:                FT_UINT32, BASE_DEC, VALS(mbim_multiflow_state_vals), 0,",
          "9498:               NULL, HFILL }",
          "9499:         },",
          "9500:         { &hf_mbim_multiflow_state_info_state,",
          "9501:             { \"State\", \"mbim.control.multiflow_state_info.state\",",
          "9502:                FT_UINT32, BASE_DEC, VALS(mbim_multiflow_state_vals), 0,",
          "9503:               NULL, HFILL }",
          "9504:         },",
          "9505:         { &hf_mbim_multiflow_tft_info_session_id,",
          "9506:             { \"Session Id\", \"mbim.control.multiflow_tft_info.session_id\",",
          "9507:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9508:               NULL, HFILL }",
          "9509:         },",
          "9510:         { &hf_mbim_multiflow_tft_info_elem_count,",
          "9511:             { \"Element Count\", \"mbim.control.multiflow_tft_info.elem_count\",",
          "9512:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9513:               NULL, HFILL }",
          "9514:         },",
          "9515:         { &hf_mbim_multiflow_tft_info_tft_list_offset,",
          "9516:             { \"TFT List Offset\", \"mbim.control.multiflow_tft_info.tft_list_offset\",",
          "9517:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9518:               NULL, HFILL }",
          "9519:         },",
          "9520:         { &hf_mbim_multiflow_tft_info_tft_list_size,",
          "9521:             { \"TFT List Size\", \"mbim.control.multiflow_tft_info.tft_list_size\",",
          "9522:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9523:               NULL, HFILL }",
          "9524:         },",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "9367:                FT_UINT8, BASE_DEC, NULL, 0,",
          "9368:               NULL, HFILL }",
          "9369:         },",
          "9370:         { &hf_mbim_bulk_ndp_signature_dss_session_id,",
          "9371:             { \"DSS Session Id\", \"mbim.bulk.ndp.signature.dss_session_id\",",
          "9372:                FT_UINT8, BASE_DEC, NULL, 0,",
          "9373:               NULL, HFILL }",
          "9374:         },",
          "9375:         { &hf_mbim_bulk_ndp_length,",
          "9376:             { \"Length\", \"mbim.bulk.ndp.length\",",
          "9377:                FT_UINT16, BASE_DEC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9650:         { &hf_mbim_bulk_ndp_signature_ipc_session_id,",
          "9651:             { \"IPC Session Id\", \"mbim.bulk.ndp.signature.ipc_session_id\",",
          "9652:                FT_UINT8, BASE_DEC, NULL, 0,",
          "9653:               NULL, HFILL }",
          "9654:         },",
          "9660:         { &hf_mbim_bulk_ndp_signature_dsc_session_id,",
          "9661:             { \"DSC Session Id\", \"mbim.bulk.ndp.signature.dsc_session_id\",",
          "9662:                FT_UINT8, BASE_DEC, NULL, 0,",
          "9663:               NULL, HFILL }",
          "9664:         },",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "9432:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9433:               NULL, HFILL }",
          "9434:         },",
          "9435:         { &hf_mbim_fragments,",
          "9436:             { \"Fragments\", \"mbim.control.fragments\",",
          "9437:                FT_NONE, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9725:         { &hf_mbim_bulk_ndp_ctrl,",
          "9726:             { \"NDP Control\", \"mbim.bulk.ndp_control\",",
          "9727:                FT_NONE, BASE_NONE, NULL, 0,",
          "9728:               NULL, HFILL }",
          "9729:         },",
          "9730:         { &hf_mbim_bulk_ndp_ctrl_message_type,",
          "9731:             { \"Message Type\", \"mbim.bulk.ndp_control.message_type\",",
          "9732:                FT_UINT16, BASE_HEX, VALS(mbim_ndp_ctrl_msg_type_vals), 0,",
          "9733:               NULL, HFILL }",
          "9734:         },",
          "9735:         { &hf_mbim_bulk_ndp_ctrl_message_length,",
          "9736:             { \"Message Length\", \"mbim.bulk.ndp_control.message_length\",",
          "9737:                FT_UINT16, BASE_DEC, NULL, 0,",
          "9738:               NULL, HFILL }",
          "9739:         },",
          "9740:         { &hf_mbim_bulk_ndp_ctrl_multiflow_status,",
          "9741:             { \"Multiflow Status\", \"mbim.bulk.ndp_control.multiflow.status\",",
          "9742:                FT_UINT16, BASE_DEC, VALS(mbim_ndp_ctrl_multiflow_status_vals), 0,",
          "9743:               NULL, HFILL }",
          "9744:         },",
          "9745:         { &hf_mbim_bulk_ndp_ctrl_multiflow_watermark,",
          "9746:             { \"Multiflow Watermark\", \"mbim.bulk.ndp_control.multiflow.watermark\",",
          "9747:                FT_UINT32, BASE_DEC, NULL, 0,",
          "9748:               NULL, HFILL }",
          "9749:         },",
          "9750:         { &hf_mbim_bulk_ndp_ctrl_message_payload,",
          "9751:             { \"Message Payload\", \"mbim.bulk.ndp_control.message_payload\",",
          "9752:                FT_BYTES, BASE_NONE, NULL, 0,",
          "9753:               NULL, HFILL }",
          "9754:         },",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "9502:         &ett_mbim_pac,",
          "9503:         &ett_mbim_thermal_threshold_setting,",
          "9504:         &ett_mbim_fragment,",
          "9506:     };",
          "9508:     static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "9505:         &ett_mbim_fragments",
          "",
          "[Added Lines]",
          "9825:         &ett_mbim_fragments,",
          "9826:         &ett_mbim_bulk_ndp_ctrl",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "9589:         eth_fcs_handle = find_dissector_add_dependency(\"eth_withfcs\", proto_mbim);",
          "9590:         ip_handle = find_dissector_add_dependency(\"ip\", proto_mbim);",
          "9591:         data_handle = find_dissector(\"data\");",
          "9592:         heur_dissector_add(\"usb.bulk\", dissect_mbim_bulk_heur, \"MBIM USB bulk endpoint\", \"mbim_usb_bulk\", proto_mbim, HEURISTIC_ENABLE);",
          "9593:         dissector_add_for_decode_as(\"usb.device\", mbim_decode_as_handle);",
          "9594:         dissector_add_for_decode_as(\"usb.product\", mbim_decode_as_handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9913:         bulk_ndp_ctrl_handle = create_dissector_handle(dissect_mbim_bulk_ndp_ctrl, proto_mbim);",
          "",
          "---------------"
        ]
      }
    }
  ]
}