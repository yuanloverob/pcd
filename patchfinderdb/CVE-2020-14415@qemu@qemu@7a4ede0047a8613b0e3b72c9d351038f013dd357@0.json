{
  "cve_id": "CVE-2020-14415",
  "cve_desc": "oss_write in audio/ossaudio.c in QEMU before 5.0.0 mishandles a buffer position.",
  "repo": "qemu/qemu",
  "patch_hash": "7a4ede0047a8613b0e3b72c9d351038f013dd357",
  "patch_info": {
    "commit_hash": "7a4ede0047a8613b0e3b72c9d351038f013dd357",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/7a4ede0047a8613b0e3b72c9d351038f013dd357",
    "files": [
      "audio/ossaudio.c"
    ],
    "message": "audio/oss: fix buffer pos calculation\n\nFixes: 3ba4066d085f (\"ossaudio: port to the new audio backend api\")\nReported-by: ziming zhang <ezrakiez@gmail.com>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nMessage-Id: <20200120101804.29578-1-kraxel@redhat.com>\nReviewed-by: Philippe Mathieu-Daud\u00e9 <philmd@redhat.com>",
    "before_after_code_files": [
      "audio/ossaudio.c||audio/ossaudio.c"
    ]
  },
  "patch_diff": {
    "audio/ossaudio.c||audio/ossaudio.c": [
      "File: audio/ossaudio.c -> audio/ossaudio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:             size_t to_copy = MIN(len, hw->size_emul - hw->pos_emul);",
      "421:             memcpy(hw->buf_emul + hw->pos_emul, buf, to_copy);",
      "424:             buf += to_copy;",
      "425:             len -= to_copy;",
      "426:         }",
      "",
      "[Removed Lines]",
      "423:             hw->pos_emul = (hw->pos_emul + to_copy) % hw->pos_emul;",
      "",
      "[Added Lines]",
      "423:             hw->pos_emul = (hw->pos_emul + to_copy) % hw->size_emul;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4b34c6d7248d4e78203db94c79abfed7b0549076",
      "candidate_info": {
        "commit_hash": "4b34c6d7248d4e78203db94c79abfed7b0549076",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/4b34c6d7248d4e78203db94c79abfed7b0549076",
        "files": [
          "audio/ossaudio.c"
        ],
        "message": "audio/oss: fix buffer pos calculation\n\nFixes: 3ba4066d085f (\"ossaudio: port to the new audio backend api\")\nReported-by: ziming zhang <ezrakiez@gmail.com>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nMessage-Id: <20200120101804.29578-1-kraxel@redhat.com>\nReviewed-by: Philippe Mathieu-Daud\u00e9 <philmd@redhat.com>\n(cherry picked from commit 7a4ede0047a8613b0e3b72c9d351038f013dd357)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "audio/ossaudio.c||audio/ossaudio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "audio/ossaudio.c||audio/ossaudio.c"
          ],
          "candidate": [
            "audio/ossaudio.c||audio/ossaudio.c"
          ]
        }
      },
      "candidate_diff": {
        "audio/ossaudio.c||audio/ossaudio.c": [
          "File: audio/ossaudio.c -> audio/ossaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:             size_t to_copy = MIN(len, hw->size_emul - hw->pos_emul);",
          "421:             memcpy(hw->buf_emul + hw->pos_emul, buf, to_copy);",
          "424:             buf += to_copy;",
          "425:             len -= to_copy;",
          "426:         }",
          "",
          "[Removed Lines]",
          "423:             hw->pos_emul = (hw->pos_emul + to_copy) % hw->pos_emul;",
          "",
          "[Added Lines]",
          "423:             hw->pos_emul = (hw->pos_emul + to_copy) % hw->size_emul;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ba4066d085f5bdce2c7ac145692a4fd52493d67",
      "candidate_info": {
        "commit_hash": "3ba4066d085f5bdce2c7ac145692a4fd52493d67",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/3ba4066d085f5bdce2c7ac145692a4fd52493d67",
        "files": [
          "audio/ossaudio.c"
        ],
        "message": "ossaudio: port to the new audio backend api\n\nSigned-off-by: K\u0151v\u00e1g\u00f3, Zolt\u00e1n <DirtY.iCE.hu@gmail.com>\nMessage-id: 22ab335146acd8099779583edcf6ed46de836bd6.1568927990.git.DirtY.iCE.hu@gmail.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "audio/ossaudio.c||audio/ossaudio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "audio/ossaudio.c||audio/ossaudio.c"
          ],
          "candidate": [
            "audio/ossaudio.c||audio/ossaudio.c"
          ]
        }
      },
      "candidate_diff": {
        "audio/ossaudio.c||audio/ossaudio.c": [
          "File: audio/ossaudio.c -> audio/ossaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: typedef struct OSSVoiceOut {",
          "42:     HWVoiceOut hw;",
          "44:     int fd;",
          "46:     int nfrags;",
          "47:     int fragsize;",
          "48:     int mmapped;",
          "50:     Audiodev *dev;",
          "51: } OSSVoiceOut;",
          "53: typedef struct OSSVoiceIn {",
          "54:     HWVoiceIn hw;",
          "56:     int fd;",
          "57:     int nfrags;",
          "58:     int fragsize;",
          "",
          "[Removed Lines]",
          "43:     void *pcm_buf;",
          "45:     int wpos;",
          "49:     int pending;",
          "55:     void *pcm_buf;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:     return -1;",
          "372: }",
          "375: {",
          "380:     }",
          "411:     }",
          "412: }",
          "415: {",
          "416:     OSSVoiceOut *oss = (OSSVoiceOut *) hw;",
          "425:     if (oss->mmapped) {",
          "443:         }",
          "453:         }",
          "458:         }",
          "459:     }",
          "466: }",
          "468: static void oss_fini_out (HWVoiceOut *hw)",
          "",
          "[Removed Lines]",
          "374: static void oss_write_pending (OSSVoiceOut *oss)",
          "376:     HWVoiceOut *hw = &oss->hw;",
          "378:     if (oss->mmapped) {",
          "379:         return;",
          "382:     while (oss->pending) {",
          "383:         int samples_written;",
          "384:         ssize_t bytes_written;",
          "385:         int samples_till_end = hw->samples - oss->wpos;",
          "386:         int samples_to_write = MIN (oss->pending, samples_till_end);",
          "387:         int bytes_to_write = samples_to_write << hw->info.shift;",
          "388:         void *pcm = advance (oss->pcm_buf, oss->wpos << hw->info.shift);",
          "390:         bytes_written = write (oss->fd, pcm, bytes_to_write);",
          "391:         if (bytes_written < 0) {",
          "392:             if (errno != EAGAIN) {",
          "393:                 oss_logerr (errno, \"failed to write %d bytes\\n\",",
          "394:                             bytes_to_write);",
          "395:             }",
          "396:             break;",
          "397:         }",
          "399:         if (bytes_written & hw->info.align) {",
          "400:             dolog (\"misaligned write asked for %d, but got %zd\\n\",",
          "401:                    bytes_to_write, bytes_written);",
          "402:             return;",
          "403:         }",
          "405:         samples_written = bytes_written >> hw->info.shift;",
          "406:         oss->pending -= samples_written;",
          "407:         oss->wpos = (oss->wpos + samples_written) % hw->samples;",
          "408:         if (bytes_written - bytes_to_write) {",
          "409:             break;",
          "410:         }",
          "414: static size_t oss_run_out(HWVoiceOut *hw, size_t live)",
          "417:     int err;",
          "418:     size_t decr;",
          "419:     struct audio_buf_info abinfo;",
          "420:     struct count_info cntinfo;",
          "421:     size_t bufsize;",
          "423:     bufsize = hw->samples << hw->info.shift;",
          "426:         int bytes, pos;",
          "428:         err = ioctl (oss->fd, SNDCTL_DSP_GETOPTR, &cntinfo);",
          "429:         if (err < 0) {",
          "430:             oss_logerr (errno, \"SNDCTL_DSP_GETOPTR failed\\n\");",
          "431:             return 0;",
          "432:         }",
          "434:         pos = hw->rpos << hw->info.shift;",
          "435:         bytes = audio_ring_dist (cntinfo.ptr, pos, bufsize);",
          "436:         decr = MIN (bytes >> hw->info.shift, live);",
          "437:     }",
          "438:     else {",
          "439:         err = ioctl (oss->fd, SNDCTL_DSP_GETOSPACE, &abinfo);",
          "440:         if (err < 0) {",
          "441:             oss_logerr (errno, \"SNDCTL_DSP_GETOPTR failed\\n\");",
          "442:             return 0;",
          "445:         if (abinfo.bytes > bufsize) {",
          "446:             trace_oss_invalid_available_size(abinfo.bytes, bufsize);",
          "447:             abinfo.bytes = bufsize;",
          "448:         }",
          "450:         if (abinfo.bytes < 0) {",
          "451:             trace_oss_invalid_available_size(abinfo.bytes, bufsize);",
          "452:             return 0;",
          "455:         decr = MIN (abinfo.bytes >> hw->info.shift, live);",
          "456:         if (!decr) {",
          "457:             return 0;",
          "461:     decr = audio_pcm_hw_clip_out (hw, oss->pcm_buf, decr, oss->pending);",
          "462:     oss->pending += decr;",
          "463:     oss_write_pending (oss);",
          "465:     return decr;",
          "",
          "[Added Lines]",
          "370: static size_t oss_get_available_bytes(OSSVoiceOut *oss)",
          "372:     int err;",
          "373:     struct count_info cntinfo;",
          "374:     assert(oss->mmapped);",
          "376:     err = ioctl(oss->fd, SNDCTL_DSP_GETOPTR, &cntinfo);",
          "377:     if (err < 0) {",
          "378:         oss_logerr(errno, \"SNDCTL_DSP_GETOPTR failed\\n\");",
          "379:         return 0;",
          "382:     return audio_ring_dist(cntinfo.ptr, oss->hw.pos_emul, oss->hw.size_emul);",
          "383: }",
          "385: static void *oss_get_buffer_out(HWVoiceOut *hw, size_t *size)",
          "386: {",
          "387:     OSSVoiceOut *oss = (OSSVoiceOut *) hw;",
          "388:     if (oss->mmapped) {",
          "390:         return hw->buf_emul + hw->pos_emul;",
          "391:     } else {",
          "392:         return audio_generic_get_buffer_out(hw, size);",
          "393:     }",
          "394: }",
          "396: static size_t oss_put_buffer_out(HWVoiceOut *hw, void *buf, size_t size)",
          "397: {",
          "398:     OSSVoiceOut *oss = (OSSVoiceOut *) hw;",
          "399:     if (oss->mmapped) {",
          "400:         assert(buf == hw->buf_emul + hw->pos_emul && size < hw->size_emul);",
          "402:         hw->pos_emul = (hw->pos_emul + size) % hw->size_emul;",
          "403:         return size;",
          "404:     } else {",
          "405:         return audio_generic_put_buffer_out(hw, buf, size);",
          "409: static size_t oss_write(HWVoiceOut *hw, void *buf, size_t len)",
          "412:     size_t pos;",
          "415:         size_t total_len;",
          "416:         len = MIN(len, oss_get_available_bytes(oss));",
          "418:         total_len = len;",
          "419:         while (len) {",
          "420:             size_t to_copy = MIN(len, hw->size_emul - hw->pos_emul);",
          "421:             memcpy(hw->buf_emul + hw->pos_emul, buf, to_copy);",
          "423:             hw->pos_emul = (hw->pos_emul + to_copy) % hw->pos_emul;",
          "424:             buf += to_copy;",
          "425:             len -= to_copy;",
          "427:         return total_len;",
          "428:     }",
          "430:     pos = 0;",
          "431:     while (len) {",
          "432:         ssize_t bytes_written;",
          "433:         void *pcm = advance(buf, pos);",
          "435:         bytes_written = write(oss->fd, pcm, len);",
          "436:         if (bytes_written < 0) {",
          "437:             if (errno != EAGAIN) {",
          "438:                 oss_logerr(errno, \"failed to write %zu bytes\\n\",",
          "439:                            len);",
          "440:             }",
          "441:             return pos;",
          "444:         pos += bytes_written;",
          "445:         if (bytes_written < len) {",
          "446:             break;",
          "448:         len -= bytes_written;",
          "450:     return pos;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:     ldebug (\"oss_fini\\n\");",
          "474:     oss_anal_close (&oss->fd);",
          "486:         }",
          "488:     }",
          "489: }",
          "",
          "[Removed Lines]",
          "476:     if (oss->pcm_buf) {",
          "477:         if (oss->mmapped) {",
          "478:             err = munmap (oss->pcm_buf, hw->samples << hw->info.shift);",
          "479:             if (err) {",
          "480:                 oss_logerr(errno, \"Failed to unmap buffer %p, size %zu\\n\",",
          "481:                            oss->pcm_buf, hw->samples << hw->info.shift);",
          "482:             }",
          "483:         }",
          "484:         else {",
          "485:             g_free (oss->pcm_buf);",
          "487:         oss->pcm_buf = NULL;",
          "",
          "[Added Lines]",
          "461:     if (oss->mmapped && hw->buf_emul) {",
          "462:         err = munmap(hw->buf_emul, hw->size_emul);",
          "463:         if (err) {",
          "464:             oss_logerr(errno, \"Failed to unmap buffer %p, size %zu\\n\",",
          "465:                        hw->buf_emul, hw->size_emul);",
          "467:         hw->buf_emul = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536:     oss->mmapped = 0;",
          "537:     if (oopts->has_try_mmap && oopts->try_mmap) {",
          "539:             NULL,",
          "541:             PROT_READ | PROT_WRITE,",
          "542:             MAP_SHARED,",
          "543:             fd,",
          "544:             0",
          "545:             );",
          "547:             oss_logerr(errno, \"Failed to map %zu bytes of DAC\\n\",",
          "551:             int err;",
          "552:             int trig = 0;",
          "553:             if (ioctl (fd, SNDCTL_DSP_SETTRIGGER, &trig) < 0) {",
          "",
          "[Removed Lines]",
          "538:         oss->pcm_buf = mmap (",
          "540:             hw->samples << hw->info.shift,",
          "546:         if (oss->pcm_buf == MAP_FAILED) {",
          "548:                        hw->samples << hw->info.shift);",
          "549:         }",
          "550:         else {",
          "",
          "[Added Lines]",
          "518:         hw->size_emul = hw->samples << hw->info.shift;",
          "519:         hw->buf_emul = mmap(",
          "521:             hw->size_emul,",
          "527:         if (hw->buf_emul == MAP_FAILED) {",
          "529:                        hw->size_emul);",
          "530:             hw->buf_emul = NULL;",
          "531:         } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:             }",
          "569:             if (!oss->mmapped) {",
          "571:                 if (err) {",
          "572:                     oss_logerr(errno, \"Failed to unmap buffer %p size %zu\\n\",",
          "574:                 }",
          "575:             }",
          "576:         }",
          "577:     }",
          "594:     oss->fd = fd;",
          "595:     oss->dev = dev;",
          "596:     return 0;",
          "",
          "[Removed Lines]",
          "570:                 err = munmap (oss->pcm_buf, hw->samples << hw->info.shift);",
          "573:                                oss->pcm_buf, hw->samples << hw->info.shift);",
          "579:     if (!oss->mmapped) {",
          "580:         oss->pcm_buf = audio_calloc(__func__,",
          "581:                                     hw->samples,",
          "582:                                     1 << hw->info.shift);",
          "583:         if (!oss->pcm_buf) {",
          "584:             dolog (",
          "585:                 \"Could not allocate DAC buffer (%zu samples, each %d bytes)\\n\",",
          "586:                 hw->samples,",
          "587:                 1 << hw->info.shift",
          "588:                 );",
          "589:             oss_anal_close (&fd);",
          "590:             return -1;",
          "591:         }",
          "592:     }",
          "",
          "[Added Lines]",
          "551:                 err = munmap(hw->buf_emul, hw->size_emul);",
          "554:                                hw->buf_emul, hw->size_emul);",
          "556:                 hw->buf_emul = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:                 return 0;",
          "619:             }",
          "622:             trig = PCM_ENABLE_OUTPUT;",
          "623:             if (ioctl (oss->fd, SNDCTL_DSP_SETTRIGGER, &trig) < 0) {",
          "624:                 oss_logerr (",
          "",
          "[Removed Lines]",
          "621:             audio_pcm_info_clear_buf (&hw->info, oss->pcm_buf, hw->samples);",
          "",
          "[Added Lines]",
          "588:             audio_pcm_info_clear_buf(&hw->info, hw->buf_emul, hw->samples);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "692:     }",
          "694:     hw->samples = (obt.nfrags * obt.fragsize) >> hw->info.shift;",
          "703:     oss->fd = fd;",
          "704:     oss->dev = dev;",
          "",
          "[Removed Lines]",
          "695:     oss->pcm_buf = audio_calloc(__func__, hw->samples, 1 << hw->info.shift);",
          "696:     if (!oss->pcm_buf) {",
          "697:         dolog(\"Could not allocate ADC buffer (%zu samples, each %d bytes)\\n\",",
          "698:               hw->samples, 1 << hw->info.shift);",
          "699:         oss_anal_close (&fd);",
          "700:         return -1;",
          "701:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "710:     OSSVoiceIn *oss = (OSSVoiceIn *) hw;",
          "712:     oss_anal_close (&oss->fd);",
          "716: }",
          "719: {",
          "720:     OSSVoiceIn *oss = (OSSVoiceIn *) hw;",
          "747:         ssize_t nread;",
          "778:                 break;",
          "779:             }",
          "780:         }",
          "781:     }",
          "785: }",
          "787: static int oss_ctl_in (HWVoiceIn *hw, int cmd, ...)",
          "",
          "[Removed Lines]",
          "714:     g_free(oss->pcm_buf);",
          "715:     oss->pcm_buf = NULL;",
          "718: static size_t oss_run_in(HWVoiceIn *hw)",
          "721:     int hwshift = hw->info.shift;",
          "722:     int i;",
          "723:     size_t live = audio_pcm_hw_get_live_in (hw);",
          "724:     size_t dead = hw->samples - live;",
          "725:     size_t read_samples = 0;",
          "726:     struct {",
          "727:         size_t add;",
          "728:         size_t len;",
          "729:     } bufs[2] = {",
          "730:         { .add = hw->wpos, .len = 0 },",
          "731:         { .add = 0,        .len = 0 }",
          "732:     };",
          "734:     if (!dead) {",
          "735:         return 0;",
          "736:     }",
          "738:     if (hw->wpos + dead > hw->samples) {",
          "739:         bufs[0].len = (hw->samples - hw->wpos) << hwshift;",
          "740:         bufs[1].len = (dead - (hw->samples - hw->wpos)) << hwshift;",
          "741:     }",
          "742:     else {",
          "743:         bufs[0].len = dead << hwshift;",
          "744:     }",
          "746:     for (i = 0; i < 2; ++i) {",
          "749:         if (bufs[i].len) {",
          "750:             void *p = advance (oss->pcm_buf, bufs[i].add << hwshift);",
          "751:             nread = read (oss->fd, p, bufs[i].len);",
          "753:             if (nread > 0) {",
          "754:                 if (nread & hw->info.align) {",
          "755:                     dolog(\"warning: Misaligned read %zd (requested %zu), \"",
          "756:                           \"alignment %d\\n\", nread, bufs[i].add << hwshift,",
          "757:                           hw->info.align + 1);",
          "758:                 }",
          "759:                 read_samples += nread >> hwshift;",
          "760:                 hw->conv (hw->conv_buf + bufs[i].add, p, nread >> hwshift);",
          "761:             }",
          "763:             if (bufs[i].len - nread) {",
          "764:                 if (nread == -1) {",
          "765:                     switch (errno) {",
          "766:                     case EINTR:",
          "767:                     case EAGAIN:",
          "768:                         break;",
          "769:                     default:",
          "770:                         oss_logerr(",
          "771:                             errno,",
          "772:                             \"Failed to read %zu bytes of audio (to %p)\\n\",",
          "773:                             bufs[i].len, p",
          "774:                             );",
          "775:                         break;",
          "776:                     }",
          "777:                 }",
          "783:     hw->wpos = (hw->wpos + read_samples) % hw->samples;",
          "784:     return read_samples;",
          "",
          "[Added Lines]",
          "675: static size_t oss_read(HWVoiceIn *hw, void *buf, size_t len)",
          "678:     size_t pos = 0;",
          "680:     while (len) {",
          "683:         void *dst = advance(buf, pos);",
          "684:         nread = read(oss->fd, dst, len);",
          "686:         if (nread == -1) {",
          "687:             switch (errno) {",
          "688:             case EINTR:",
          "689:             case EAGAIN:",
          "690:                 break;",
          "691:             default:",
          "692:                 oss_logerr(errno, \"Failed to read %zu bytes of audio (to %p)\\n\",",
          "693:                            len, dst);",
          "698:         pos += nread;",
          "699:         len -= nread;",
          "702:     return pos;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "845: static struct audio_pcm_ops oss_pcm_ops = {",
          "846:     .init_out = oss_init_out,",
          "847:     .fini_out = oss_fini_out,",
          "849:     .ctl_out  = oss_ctl_out,",
          "851:     .init_in  = oss_init_in,",
          "852:     .fini_in  = oss_fini_in,",
          "854:     .ctl_in   = oss_ctl_in",
          "855: };",
          "",
          "[Removed Lines]",
          "848:     .run_out  = oss_run_out,",
          "853:     .run_in   = oss_run_in,",
          "",
          "[Added Lines]",
          "766:     .write    = oss_write,",
          "767:     .get_buffer_out = oss_get_buffer_out,",
          "768:     .put_buffer_out = oss_put_buffer_out,",
          "773:     .read     = oss_read,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "589359150365616de479866f8bc594c876480bd8",
      "candidate_info": {
        "commit_hash": "589359150365616de479866f8bc594c876480bd8",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/589359150365616de479866f8bc594c876480bd8",
        "files": [
          "audio/alsaaudio.c",
          "audio/audio.c",
          "audio/audio.h",
          "audio/coreaudio.c",
          "audio/dsoundaudio.c",
          "audio/noaudio.c",
          "audio/ossaudio.c",
          "audio/paaudio.c",
          "audio/sdlaudio.c",
          "audio/spiceaudio.c",
          "audio/wavaudio.c",
          "hw/audio/ac97.c",
          "hw/audio/adlib.c",
          "hw/audio/cs4231a.c",
          "hw/audio/es1370.c",
          "hw/audio/gus.c",
          "hw/audio/hda-codec.c",
          "hw/audio/milkymist-ac97.c",
          "hw/audio/pcspk.c",
          "hw/audio/sb16.c",
          "hw/audio/wm8750.c"
        ],
        "message": "audio: remove audio_MIN, audio_MAX\n\nThere's already a MIN and MAX macro in include/qemu/osdep.h, use them\ninstead.\n\nSigned-off-by: K\u0151v\u00e1g\u00f3, Zolt\u00e1n <DirtY.iCE.hu@gmail.com>\nReviewed-by: Marc-Andr\u00e9 Lureau <marcandre.lureau@redhat.com>\nMessage-id: 303222477df6f7373217e0df768635fab5855745.1566168923.git.DirtY.iCE.hu@gmail.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "audio/alsaaudio.c||audio/alsaaudio.c",
          "audio/audio.c||audio/audio.c",
          "audio/audio.h||audio/audio.h",
          "audio/coreaudio.c||audio/coreaudio.c",
          "audio/dsoundaudio.c||audio/dsoundaudio.c",
          "audio/noaudio.c||audio/noaudio.c",
          "audio/ossaudio.c||audio/ossaudio.c",
          "audio/paaudio.c||audio/paaudio.c",
          "audio/sdlaudio.c||audio/sdlaudio.c",
          "audio/spiceaudio.c||audio/spiceaudio.c",
          "audio/wavaudio.c||audio/wavaudio.c",
          "hw/audio/ac97.c||hw/audio/ac97.c",
          "hw/audio/adlib.c||hw/audio/adlib.c",
          "hw/audio/cs4231a.c||hw/audio/cs4231a.c",
          "hw/audio/es1370.c||hw/audio/es1370.c",
          "hw/audio/gus.c||hw/audio/gus.c",
          "hw/audio/hda-codec.c||hw/audio/hda-codec.c",
          "hw/audio/milkymist-ac97.c||hw/audio/milkymist-ac97.c",
          "hw/audio/pcspk.c||hw/audio/pcspk.c",
          "hw/audio/sb16.c||hw/audio/sb16.c",
          "hw/audio/wm8750.c||hw/audio/wm8750.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "audio/ossaudio.c||audio/ossaudio.c"
          ],
          "candidate": [
            "audio/ossaudio.c||audio/ossaudio.c"
          ]
        }
      },
      "candidate_diff": {
        "audio/alsaaudio.c||audio/alsaaudio.c": [
          "File: audio/alsaaudio.c -> audio/alsaaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:     while (alsa->pending) {",
          "636:         int left_till_end_samples = hw->samples - alsa->wpos;",
          "638:         char *src = advance (alsa->pcm_buf, alsa->wpos << hw->info.shift);",
          "640:         while (len) {",
          "",
          "[Removed Lines]",
          "637:         int len = audio_MIN (alsa->pending, left_till_end_samples);",
          "",
          "[Added Lines]",
          "637:         int len = MIN (alsa->pending, left_till_end_samples);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:         return 0;",
          "698:     }",
          "701:     decr = audio_pcm_hw_clip_out (hw, alsa->pcm_buf, decr, alsa->pending);",
          "702:     alsa->pending += decr;",
          "703:     alsa_write_pending (alsa);",
          "",
          "[Removed Lines]",
          "700:     decr = audio_MIN (live, avail);",
          "",
          "[Added Lines]",
          "700:     decr = MIN (live, avail);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "915:         }",
          "916:     }",
          "919:     if (!decr) {",
          "920:         return 0;",
          "921:     }",
          "",
          "[Removed Lines]",
          "918:     decr = audio_MIN (dead, avail);",
          "",
          "[Added Lines]",
          "918:     decr = MIN (dead, avail);",
          "",
          "---------------"
        ],
        "audio/audio.c||audio/audio.c": [
          "File: audio/audio.c -> audio/audio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     for (sw = hw->sw_head.lh_first; sw; sw = sw->entries.le_next) {",
          "537:         if (sw->active) {",
          "539:         }",
          "540:     }",
          "541:     return m;",
          "",
          "[Removed Lines]",
          "538:             m = audio_MIN (m, sw->total_hw_samples_acquired);",
          "",
          "[Added Lines]",
          "538:             m = MIN (m, sw->total_hw_samples_acquired);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:                            int live, int pending)",
          "556: {",
          "557:     int left = hw->samples - pending;",
          "559:     int clipped = 0;",
          "561:     while (len) {",
          "562:         struct st_sample *src = hw->mix_buf + hw->rpos;",
          "563:         uint8_t *dst = advance (pcm_buf, hw->rpos << hw->info.shift);",
          "564:         int samples_till_end_of_buf = hw->samples - hw->rpos;",
          "567:         hw->clip (dst, src, samples_to_clip);",
          "",
          "[Removed Lines]",
          "558:     int len = audio_MIN (left, live);",
          "565:         int samples_to_clip = audio_MIN (len, samples_till_end_of_buf);",
          "",
          "[Added Lines]",
          "558:     int len = MIN (left, live);",
          "565:         int samples_to_clip = MIN (len, samples_till_end_of_buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:     }",
          "618:     swlim = (live * sw->ratio) >> 32;",
          "621:     while (swlim) {",
          "622:         src = hw->conv_buf + rpos;",
          "",
          "[Removed Lines]",
          "619:     swlim = audio_MIN (swlim, samples);",
          "",
          "[Added Lines]",
          "619:     swlim = MIN (swlim, samples);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "665:     for (sw = hw->sw_head.lh_first; sw; sw = sw->entries.le_next) {",
          "666:         if (sw->active || !sw->empty) {",
          "668:             nb_live += 1;",
          "669:         }",
          "670:     }",
          "",
          "[Removed Lines]",
          "667:             m = audio_MIN (m, sw->total_hw_samples_mixed);",
          "",
          "[Added Lines]",
          "667:             m = MIN (m, sw->total_hw_samples_mixed);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "728:     dead = hwsamples - live;",
          "729:     swlim = ((int64_t) dead << 32) / sw->ratio;",
          "731:     if (swlim) {",
          "732:         sw->conv (sw->buf, buf, swlim);",
          "",
          "[Removed Lines]",
          "730:     swlim = audio_MIN (swlim, samples);",
          "",
          "[Added Lines]",
          "730:     swlim = MIN (swlim, samples);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "739:     while (swlim) {",
          "740:         dead = hwsamples - live;",
          "741:         left = hwsamples - wpos;",
          "743:         if (!blck) {",
          "744:             break;",
          "745:         }",
          "",
          "[Removed Lines]",
          "742:         blck = audio_MIN (dead, left);",
          "",
          "[Added Lines]",
          "742:         blck = MIN (dead, left);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1031:             n = samples;",
          "1032:             while (n) {",
          "1033:                 int till_end_of_hw = hw->samples - rpos2;",
          "1035:                 int bytes = to_write << hw->info.shift;",
          "1036:                 int written;",
          "",
          "[Removed Lines]",
          "1034:                 int to_write = audio_MIN (till_end_of_hw, n);",
          "",
          "[Added Lines]",
          "1034:                 int to_write = MIN (till_end_of_hw, n);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1049:         }",
          "1050:     }",
          "1053:     mixeng_clear (hw->mix_buf + rpos, n);",
          "1054:     mixeng_clear (hw->mix_buf, samples - n);",
          "1055: }",
          "",
          "[Removed Lines]",
          "1052:     n = audio_MIN (samples, hw->samples - rpos);",
          "",
          "[Added Lines]",
          "1052:     n = MIN (samples, hw->samples - rpos);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1205:         rpos = hw->rpos;",
          "1206:         while (live) {",
          "1207:             int left = hw->samples - rpos;",
          "1209:             struct st_sample *src;",
          "1210:             struct capture_callback *cb;",
          "",
          "[Removed Lines]",
          "1208:             int to_capture = audio_MIN (live, left);",
          "",
          "[Added Lines]",
          "1208:             int to_capture = MIN (live, left);",
          "",
          "---------------"
        ],
        "audio/audio.h||audio/audio.h": [
          "File: audio/audio.h -> audio/audio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     return (d + incr);",
          "148: }",
          "167: int wav_start_capture(AudioState *state, CaptureState *s, const char *path,",
          "168:                       int freq, int bits, int nchannels);",
          "",
          "[Removed Lines]",
          "150: #ifdef __GNUC__",
          "151: #define audio_MIN(a, b) ( __extension__ ({      \\",
          "152:     __typeof (a) ta = a;                        \\",
          "153:     __typeof (b) tb = b;                        \\",
          "154:     ((ta)>(tb)?(tb):(ta));                      \\",
          "155: }))",
          "157: #define audio_MAX(a, b) ( __extension__ ({      \\",
          "158:     __typeof (a) ta = a;                        \\",
          "159:     __typeof (b) tb = b;                        \\",
          "160:     ((ta)<(tb)?(tb):(ta));                      \\",
          "161: }))",
          "162: #else",
          "163: #define audio_MIN(a, b) ((a)>(b)?(b):(a))",
          "164: #define audio_MAX(a, b) ((a)<(b)?(b):(a))",
          "165: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "audio/coreaudio.c||audio/coreaudio.c": [
          "File: audio/coreaudio.c -> audio/coreaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:                 core->live);",
          "414:     }",
          "417:     core->decr -= decr;",
          "419:     core->live = live - decr;",
          "",
          "[Removed Lines]",
          "416:     decr = audio_MIN (core->decr, live);",
          "",
          "[Added Lines]",
          "416:     decr = MIN (core->decr, live);",
          "",
          "---------------"
        ],
        "audio/dsoundaudio.c||audio/dsoundaudio.c": [
          "File: audio/dsoundaudio.c -> audio/dsoundaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:     if (!len) {",
          "708:         return 0;",
          "709:     }",
          "712:     err = dsound_lock_in (",
          "713:         dscb,",
          "",
          "[Removed Lines]",
          "710:     len = audio_MIN (len, dead);",
          "",
          "[Added Lines]",
          "710:     len = MIN (len, dead);",
          "",
          "---------------"
        ],
        "audio/noaudio.c||audio/noaudio.c": [
          "File: audio/noaudio.c -> audio/noaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     now = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL);",
          "53:     ticks = now - no->old_ticks;",
          "54:     bytes = muldiv64(ticks, hw->info.bytes_per_second, NANOSECONDS_PER_SECOND);",
          "56:     samples = bytes >> hw->info.shift;",
          "58:     no->old_ticks = now;",
          "60:     hw->rpos = (hw->rpos + decr) % hw->samples;",
          "61:     return decr;",
          "62: }",
          "",
          "[Removed Lines]",
          "55:     bytes = audio_MIN(bytes, INT_MAX);",
          "59:     decr = audio_MIN (live, samples);",
          "",
          "[Added Lines]",
          "55:     bytes = MIN(bytes, INT_MAX);",
          "59:     decr = MIN (live, samples);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:             muldiv64(ticks, hw->info.bytes_per_second, NANOSECONDS_PER_SECOND);",
          "113:         no->old_ticks = now;",
          "115:         samples = bytes >> hw->info.shift;",
          "117:     }",
          "118:     return samples;",
          "119: }",
          "",
          "[Removed Lines]",
          "114:         bytes = audio_MIN (bytes, INT_MAX);",
          "116:         samples = audio_MIN (samples, dead);",
          "",
          "[Added Lines]",
          "114:         bytes = MIN (bytes, INT_MAX);",
          "116:         samples = MIN (samples, dead);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     int samples = size >> sw->info.shift;",
          "126:     int total = sw->hw->total_samples_captured - sw->total_hw_samples_acquired;",
          "128:     sw->total_hw_samples_acquired += total;",
          "129:     audio_pcm_info_clear_buf (&sw->info, buf, to_clear);",
          "130:     return to_clear << sw->info.shift;",
          "",
          "[Removed Lines]",
          "127:     int to_clear = audio_MIN (samples, total);",
          "",
          "[Added Lines]",
          "127:     int to_clear = MIN (samples, total);",
          "",
          "---------------"
        ],
        "audio/ossaudio.c||audio/ossaudio.c": [
          "File: audio/ossaudio.c -> audio/ossaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:         int samples_written;",
          "389:         ssize_t bytes_written;",
          "390:         int samples_till_end = hw->samples - oss->wpos;",
          "392:         int bytes_to_write = samples_to_write << hw->info.shift;",
          "393:         void *pcm = advance (oss->pcm_buf, oss->wpos << hw->info.shift);",
          "",
          "[Removed Lines]",
          "391:         int samples_to_write = audio_MIN (oss->pending, samples_till_end);",
          "",
          "[Added Lines]",
          "391:         int samples_to_write = MIN (oss->pending, samples_till_end);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:         pos = hw->rpos << hw->info.shift;",
          "439:         bytes = audio_ring_dist (cntinfo.ptr, pos, bufsize);",
          "441:     }",
          "442:     else {",
          "443:         err = ioctl (oss->fd, SNDCTL_DSP_GETOSPACE, &abinfo);",
          "",
          "[Removed Lines]",
          "440:         decr = audio_MIN (bytes >> hw->info.shift, live);",
          "",
          "[Added Lines]",
          "440:         decr = MIN (bytes >> hw->info.shift, live);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:             return 0;",
          "457:         }",
          "460:         if (!decr) {",
          "461:             return 0;",
          "462:         }",
          "",
          "[Removed Lines]",
          "459:         decr = audio_MIN (abinfo.bytes >> hw->info.shift, live);",
          "",
          "[Added Lines]",
          "459:         decr = MIN (abinfo.bytes >> hw->info.shift, live);",
          "",
          "---------------"
        ],
        "audio/paaudio.c||audio/paaudio.c": [
          "File: audio/paaudio.c -> audio/paaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:             }",
          "236:         }",
          "239:         rpos = pa->rpos;",
          "241:         if (audio_pt_unlock(&pa->pt, __func__)) {",
          "",
          "[Removed Lines]",
          "238:         decr = to_mix = audio_MIN(pa->live, pa->samples >> 5);",
          "",
          "[Added Lines]",
          "238:         decr = to_mix = MIN(pa->live, pa->samples >> 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:         while (to_mix) {",
          "246:             int error;",
          "248:             struct st_sample *src = hw->mix_buf + rpos;",
          "250:             hw->clip (pa->pcm_buf, src, chunk);",
          "",
          "[Removed Lines]",
          "247:             int chunk = audio_MIN (to_mix, hw->samples - rpos);",
          "",
          "[Added Lines]",
          "247:             int chunk = MIN (to_mix, hw->samples - rpos);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:         return 0;",
          "283:     }",
          "286:     pa->decr -= decr;",
          "287:     pa->live = live - decr;",
          "288:     hw->rpos = pa->rpos;",
          "",
          "[Removed Lines]",
          "285:     decr = audio_MIN (live, pa->decr);",
          "",
          "[Added Lines]",
          "285:     decr = MIN (live, pa->decr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:             }",
          "328:         }",
          "331:         wpos = pa->wpos;",
          "333:         if (audio_pt_unlock(&pa->pt, __func__)) {",
          "",
          "[Removed Lines]",
          "330:         incr = to_grab = audio_MIN(pa->dead, pa->samples >> 5);",
          "",
          "[Added Lines]",
          "330:         incr = to_grab = MIN(pa->dead, pa->samples >> 5);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337:         while (to_grab) {",
          "338:             int error;",
          "340:             void *buf = advance (pa->pcm_buf, wpos);",
          "342:             if (qpa_simple_read (pa, buf,",
          "",
          "[Removed Lines]",
          "339:             int chunk = audio_MIN (to_grab, hw->samples - wpos);",
          "",
          "[Added Lines]",
          "339:             int chunk = MIN (to_grab, hw->samples - wpos);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376:     live = audio_pcm_hw_get_live_in (hw);",
          "377:     dead = hw->samples - live;",
          "379:     pa->incr -= incr;",
          "380:     pa->dead = dead - incr;",
          "381:     hw->wpos = pa->wpos;",
          "",
          "[Removed Lines]",
          "378:     incr = audio_MIN (dead, pa->incr);",
          "",
          "[Added Lines]",
          "378:     incr = MIN (dead, pa->incr);",
          "",
          "---------------"
        ],
        "audio/sdlaudio.c||audio/sdlaudio.c": [
          "File: audio/sdlaudio.c -> audio/sdlaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     decr = to_mix;",
          "198:     while (to_mix) {",
          "200:         struct st_sample *src = hw->mix_buf + hw->rpos;",
          "",
          "[Removed Lines]",
          "196:     to_mix = audio_MIN(samples, sdl->live);",
          "199:         int chunk = audio_MIN(to_mix, hw->samples - hw->rpos);",
          "",
          "[Added Lines]",
          "196:     to_mix = MIN(samples, sdl->live);",
          "199:         int chunk = MIN(to_mix, hw->samples - hw->rpos);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:                 sdl->live);",
          "237:     }",
          "240:     sdl->decr -= decr;",
          "242:     sdl->live = live;",
          "",
          "[Removed Lines]",
          "239:     decr = audio_MIN (sdl->decr, live);",
          "",
          "[Added Lines]",
          "239:     decr = MIN (sdl->decr, live);",
          "",
          "---------------"
        ],
        "audio/spiceaudio.c||audio/spiceaudio.c": [
          "File: audio/spiceaudio.c -> audio/spiceaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     }",
          "165:     decr = rate_get_samples (&hw->info, &out->rate);",
          "168:     samples = decr;",
          "169:     rpos = hw->rpos;",
          "170:     while (samples) {",
          "171:         int left_till_end_samples = hw->samples - rpos;",
          "174:         if (!out->frame) {",
          "175:             spice_server_playback_get_buffer (&out->sin, &out->frame, &out->fsize);",
          "176:             out->fpos = out->frame;",
          "177:         }",
          "178:         if (out->frame) {",
          "180:             hw->clip (out->fpos, hw->mix_buf + rpos, len);",
          "181:             out->fsize -= len;",
          "182:             out->fpos  += len;",
          "",
          "[Removed Lines]",
          "166:     decr = audio_MIN (live, decr);",
          "172:         int len = audio_MIN (samples, left_till_end_samples);",
          "179:             len = audio_MIN (len, out->fsize);",
          "",
          "[Added Lines]",
          "166:     decr = MIN (live, decr);",
          "172:         int len = MIN (samples, left_till_end_samples);",
          "179:             len = MIN (len, out->fsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:     }",
          "296:     delta_samp = rate_get_samples (&hw->info, &in->rate);",
          "299:     ready = spice_server_record_get_samples (&in->sin, in->samples, num_samples);",
          "300:     samples = in->samples;",
          "",
          "[Removed Lines]",
          "297:     num_samples = audio_MIN (num_samples, delta_samp);",
          "",
          "[Added Lines]",
          "297:     num_samples = MIN (num_samples, delta_samp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:         ready = LINE_IN_SAMPLES;",
          "305:     }",
          "309:     if (hw->wpos + num_samples > hw->samples) {",
          "310:         len[0] = hw->samples - hw->wpos;",
          "",
          "[Removed Lines]",
          "307:     num_samples = audio_MIN (ready, num_samples);",
          "",
          "[Added Lines]",
          "307:     num_samples = MIN (ready, num_samples);",
          "",
          "---------------"
        ],
        "audio/wavaudio.c||audio/wavaudio.c": [
          "File: audio/wavaudio.c -> audio/wavaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     }",
          "61:     wav->old_ticks = now;",
          "63:     samples = decr;",
          "64:     rpos = hw->rpos;",
          "65:     while (samples) {",
          "66:         int left_till_end_samples = hw->samples - rpos;",
          "69:         src = hw->mix_buf + rpos;",
          "70:         dst = advance (wav->pcm_buf, rpos << hw->info.shift);",
          "",
          "[Removed Lines]",
          "62:     decr = audio_MIN (live, samples);",
          "67:         int convert_samples = audio_MIN (samples, left_till_end_samples);",
          "",
          "[Added Lines]",
          "62:     decr = MIN (live, samples);",
          "67:         int convert_samples = MIN (samples, left_till_end_samples);",
          "",
          "---------------"
        ],
        "hw/audio/ac97.c||hw/audio/ac97.c": [
          "File: hw/audio/ac97.c -> hw/audio/ac97.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "965:     uint32_t temp = r->picb << 1;",
          "966:     uint32_t written = 0;",
          "967:     int to_copy = 0;",
          "970:     if (!temp) {",
          "",
          "[Removed Lines]",
          "968:     temp = audio_MIN (temp, max);",
          "",
          "[Added Lines]",
          "968:     temp = MIN (temp, max);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "975:     while (temp) {",
          "976:         int copied;",
          "978:         pci_dma_read (&s->dev, addr, tmpbuf, to_copy);",
          "979:         copied = AUD_write (s->voice_po, tmpbuf, to_copy);",
          "980:         dolog (\"write_audio max=%x to_copy=%x copied=%x\\n\",",
          "",
          "[Removed Lines]",
          "977:         to_copy = audio_MIN (temp, sizeof (tmpbuf));",
          "",
          "[Added Lines]",
          "977:         to_copy = MIN (temp, sizeof (tmpbuf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1020:     }",
          "1022:     while (elapsed) {",
          "1024:         while (temp) {",
          "1025:             int copied = AUD_write (s->voice_po, s->silence, temp);",
          "1026:             if (!copied)",
          "",
          "[Removed Lines]",
          "1023:         int temp = audio_MIN (elapsed, sizeof (s->silence));",
          "",
          "[Added Lines]",
          "1023:         int temp = MIN (elapsed, sizeof (s->silence));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1041:     int to_copy = 0;",
          "1042:     SWVoiceIn *voice = (r - s->bm_regs) == MC_INDEX ? s->voice_mc : s->voice_pi;",
          "1046:     if (!temp) {",
          "",
          "[Removed Lines]",
          "1044:     temp = audio_MIN (temp, max);",
          "",
          "[Added Lines]",
          "1044:     temp = MIN (temp, max);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1051:     while (temp) {",
          "1052:         int acquired;",
          "1054:         acquired = AUD_read (voice, tmpbuf, to_copy);",
          "1055:         if (!acquired) {",
          "",
          "[Removed Lines]",
          "1053:         to_copy = audio_MIN (temp, sizeof (tmpbuf));",
          "",
          "[Added Lines]",
          "1053:         to_copy = MIN (temp, sizeof (tmpbuf));",
          "",
          "---------------"
        ],
        "hw/audio/adlib.c||hw/audio/adlib.c": [
          "File: hw/audio/adlib.c -> hw/audio/adlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:         return;",
          "196:     }",
          "199:     while (to_play) {",
          "200:         written = write_audio (s, to_play);",
          "",
          "[Removed Lines]",
          "198:     to_play = audio_MIN (s->left, samples);",
          "",
          "[Added Lines]",
          "198:     to_play = MIN (s->left, samples);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:         }",
          "211:     }",
          "214:     if (!samples) {",
          "215:         return;",
          "216:     }",
          "",
          "[Removed Lines]",
          "213:     samples = audio_MIN (samples, s->samples - s->pos);",
          "",
          "[Added Lines]",
          "213:     samples = MIN (samples, s->samples - s->pos);",
          "",
          "---------------"
        ],
        "hw/audio/cs4231a.c||hw/audio/cs4231a.c": [
          "File: hw/audio/cs4231a.c -> hw/audio/cs4231a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:         int copied;",
          "537:         size_t to_copy;",
          "540:         if (to_copy > sizeof (tmpbuf)) {",
          "541:             to_copy = sizeof (tmpbuf);",
          "542:         }",
          "",
          "[Removed Lines]",
          "539:         to_copy = audio_MIN (temp, left);",
          "",
          "[Added Lines]",
          "539:         to_copy = MIN (temp, left);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:         till = (s->dregs[Playback_Lower_Base_Count]",
          "580:             | (s->dregs[Playback_Upper_Base_Count] << 8)) << s->shift;",
          "581:         till -= s->transferred;",
          "583:     }",
          "585:     if ((copy <= 0) || (dma_len <= 0)) {",
          "",
          "[Removed Lines]",
          "582:         copy = audio_MIN (till, copy);",
          "",
          "[Added Lines]",
          "582:         copy = MIN (till, copy);",
          "",
          "---------------"
        ],
        "hw/audio/es1370.c||hw/audio/es1370.c": [
          "File: hw/audio/es1370.c -> hw/audio/es1370.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:     int size = d->frame_cnt & 0xffff;",
          "646:     int left = ((size - cnt + 1) << 2) + d->leftover;",
          "647:     int transferred = 0;",
          "649:     int index = d - &s->chan[0];",
          "651:     addr += (cnt << 2) + d->leftover;",
          "",
          "[Removed Lines]",
          "648:     int temp = audio_MIN (max, audio_MIN (left, csc_bytes));",
          "",
          "[Added Lines]",
          "648:     int temp = MIN (max, MIN (left, csc_bytes));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "654:         while (temp) {",
          "655:             int acquired, to_copy;",
          "658:             acquired = AUD_read (s->adc_voice, tmpbuf, to_copy);",
          "659:             if (!acquired)",
          "660:                 break;",
          "",
          "[Removed Lines]",
          "657:             to_copy = audio_MIN ((size_t) temp, sizeof (tmpbuf));",
          "",
          "[Added Lines]",
          "657:             to_copy = MIN ((size_t) temp, sizeof (tmpbuf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "672:         while (temp) {",
          "673:             int copied, to_copy;",
          "676:             pci_dma_read (&s->dev, addr, tmpbuf, to_copy);",
          "677:             copied = AUD_write (voice, tmpbuf, to_copy);",
          "678:             if (!copied)",
          "",
          "[Removed Lines]",
          "675:             to_copy = audio_MIN ((size_t) temp, sizeof (tmpbuf));",
          "",
          "[Added Lines]",
          "675:             to_copy = MIN ((size_t) temp, sizeof (tmpbuf));",
          "",
          "---------------"
        ],
        "hw/audio/gus.c||hw/audio/gus.c": [
          "File: hw/audio/gus.c -> hw/audio/gus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     GUSState *s = opaque;",
          "121:     samples = free >> s->shift;",
          "124:     while (to_play) {",
          "125:         int written = write_audio (s, to_play);",
          "",
          "[Removed Lines]",
          "122:     to_play = audio_MIN (samples, s->left);",
          "",
          "[Added Lines]",
          "122:     to_play = MIN (samples, s->left);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:         net += written;",
          "135:     }",
          "138:     if (samples) {",
          "139:         gus_mixvoices (&s->emu, s->freq, samples, s->mixbuf);",
          "",
          "[Removed Lines]",
          "137:     samples = audio_MIN (samples, s->samples);",
          "",
          "[Added Lines]",
          "137:     samples = MIN (samples, s->samples);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:     ldebug (\"read DMA %#x %d\\n\", dma_pos, dma_len);",
          "195:     mode = k->has_autoinitialization(s->isa_dma, s->emu.gusdma);",
          "196:     while (left) {",
          "198:         int copied;",
          "200:         ldebug (\"left=%d to_copy=%d pos=%d\\n\", left, to_copy, pos);",
          "",
          "[Removed Lines]",
          "197:         int to_copy = audio_MIN ((size_t) left, sizeof (tmpbuf));",
          "",
          "[Added Lines]",
          "197:         int to_copy = MIN ((size_t) left, sizeof (tmpbuf));",
          "",
          "---------------"
        ],
        "hw/audio/hda-codec.c||hw/audio/hda-codec.c": [
          "File: hw/audio/hda-codec.c -> hw/audio/hda-codec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:         goto out_timer;",
          "236:     }",
          "239:     while (to_transfer) {",
          "240:         uint32_t start = (rpos & B_MASK);",
          "242:         int rc = hda_codec_xfer(",
          "243:                 &st->state->hda, st->stream, false, st->buf + start, chunk);",
          "244:         if (!rc) {",
          "",
          "[Removed Lines]",
          "238:     int64_t to_transfer = audio_MIN(wpos - rpos, wanted_rpos - rpos);",
          "241:         uint32_t chunk = audio_MIN(B_SIZE - start, to_transfer);",
          "",
          "[Added Lines]",
          "238:     int64_t to_transfer = MIN(wpos - rpos, wanted_rpos - rpos);",
          "241:         uint32_t chunk = MIN(B_SIZE - start, to_transfer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:     int64_t wpos = st->wpos;",
          "264:     int64_t rpos = st->rpos;",
          "268:     hda_timer_sync_adjust(st, -((wpos - rpos) + to_transfer - (B_SIZE >> 1)));",
          "270:     while (to_transfer) {",
          "271:         uint32_t start = (uint32_t) (wpos & B_MASK);",
          "273:         uint32_t read = AUD_read(st->voice.in, st->buf + start, chunk);",
          "274:         wpos += read;",
          "275:         to_transfer -= read;",
          "",
          "[Removed Lines]",
          "266:     int64_t to_transfer = audio_MIN(B_SIZE - (wpos - rpos), avail);",
          "272:         uint32_t chunk = (uint32_t) audio_MIN(B_SIZE - start, to_transfer);",
          "",
          "[Added Lines]",
          "266:     int64_t to_transfer = MIN(B_SIZE - (wpos - rpos), avail);",
          "272:         uint32_t chunk = (uint32_t) MIN(B_SIZE - start, to_transfer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:         goto out_timer;",
          "300:     }",
          "303:     while (to_transfer) {",
          "304:         uint32_t start = (wpos & B_MASK);",
          "306:         int rc = hda_codec_xfer(",
          "307:                 &st->state->hda, st->stream, true, st->buf + start, chunk);",
          "308:         if (!rc) {",
          "",
          "[Removed Lines]",
          "302:     int64_t to_transfer = audio_MIN(B_SIZE - (wpos - rpos), wanted_wpos - wpos);",
          "305:         uint32_t chunk = audio_MIN(B_SIZE - start, to_transfer);",
          "",
          "[Added Lines]",
          "302:     int64_t to_transfer = MIN(B_SIZE - (wpos - rpos), wanted_wpos - wpos);",
          "305:         uint32_t chunk = MIN(B_SIZE - start, to_transfer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:     int64_t wpos = st->wpos;",
          "328:     int64_t rpos = st->rpos;",
          "332:     if (wpos - rpos == B_SIZE) {",
          "",
          "[Removed Lines]",
          "330:     int64_t to_transfer = audio_MIN(wpos - rpos, avail);",
          "",
          "[Added Lines]",
          "330:     int64_t to_transfer = MIN(wpos - rpos, avail);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:     while (to_transfer) {",
          "344:         uint32_t start = (uint32_t) (rpos & B_MASK);",
          "346:         uint32_t written = AUD_write(st->voice.out, st->buf + start, chunk);",
          "347:         rpos += written;",
          "348:         to_transfer -= written;",
          "",
          "[Removed Lines]",
          "345:         uint32_t chunk = (uint32_t) audio_MIN(B_SIZE - start, to_transfer);",
          "",
          "[Added Lines]",
          "345:         uint32_t chunk = (uint32_t) MIN(B_SIZE - start, to_transfer);",
          "",
          "---------------"
        ],
        "hw/audio/milkymist-ac97.c||hw/audio/milkymist-ac97.c": [
          "File: hw/audio/milkymist-ac97.c -> hw/audio/milkymist-ac97.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     MilkymistAC97State *s = opaque;",
          "186:     uint8_t buf[4096];",
          "187:     uint32_t remaining = s->regs[R_U_REMAINING];",
          "189:     uint32_t addr = s->regs[R_U_ADDR];",
          "190:     int transferred = 0;",
          "",
          "[Removed Lines]",
          "188:     int temp = audio_MIN(remaining, avail_b);",
          "",
          "[Added Lines]",
          "188:     int temp = MIN(remaining, avail_b);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:     while (temp) {",
          "200:         int acquired, to_copy;",
          "203:         acquired = AUD_read(s->voice_in, buf, to_copy);",
          "204:         if (!acquired) {",
          "205:             break;",
          "",
          "[Removed Lines]",
          "202:         to_copy = audio_MIN(temp, sizeof(buf));",
          "",
          "[Added Lines]",
          "202:         to_copy = MIN(temp, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:     MilkymistAC97State *s = opaque;",
          "229:     uint8_t buf[4096];",
          "230:     uint32_t remaining = s->regs[R_D_REMAINING];",
          "232:     uint32_t addr = s->regs[R_D_ADDR];",
          "233:     int transferred = 0;",
          "",
          "[Removed Lines]",
          "231:     int temp = audio_MIN(remaining, free_b);",
          "",
          "[Added Lines]",
          "231:     int temp = MIN(remaining, free_b);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:     while (temp) {",
          "243:         int copied, to_copy;",
          "246:         cpu_physical_memory_read(addr, buf, to_copy);",
          "247:         copied = AUD_write(s->voice_out, buf, to_copy);",
          "248:         if (!copied) {",
          "",
          "[Removed Lines]",
          "245:         to_copy = audio_MIN(temp, sizeof(buf));",
          "",
          "[Added Lines]",
          "245:         to_copy = MIN(temp, sizeof(buf));",
          "",
          "---------------"
        ],
        "hw/audio/pcspk.c||hw/audio/pcspk.c": [
          "File: hw/audio/pcspk.c -> hw/audio/pcspk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     }",
          "105:     while (free > 0) {",
          "107:         n = AUD_write(s->voice, &s->sample_buf[s->play_pos], n);",
          "108:         if (!n)",
          "109:             break;",
          "",
          "[Removed Lines]",
          "106:         n = audio_MIN(s->samples - s->play_pos, (unsigned int)free);",
          "",
          "[Added Lines]",
          "106:         n = MIN(s->samples - s->play_pos, (unsigned int)free);",
          "",
          "---------------"
        ],
        "hw/audio/sb16.c||hw/audio/sb16.c": [
          "File: hw/audio/sb16.c -> hw/audio/sb16.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:         int copied;",
          "1170:         size_t to_copy;",
          "1173:         if (to_copy > sizeof (tmpbuf)) {",
          "1174:             to_copy = sizeof (tmpbuf);",
          "1175:         }",
          "",
          "[Removed Lines]",
          "1172:         to_copy = audio_MIN (temp, left);",
          "",
          "[Added Lines]",
          "1172:         to_copy = MIN (temp, left);",
          "",
          "---------------"
        ],
        "hw/audio/wm8750.c||hw/audio/wm8750.c": [
          "File: hw/audio/wm8750.c -> hw/audio/wm8750.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: {",
          "71:     if (s->idx_in + s->req_in <= sizeof(s->data_in))",
          "72:         return;",
          "74:     AUD_read(*s->in[0], s->data_in + s->idx_in,",
          "75:              sizeof(s->data_in) - s->idx_in);",
          "76: }",
          "",
          "[Removed Lines]",
          "73:     s->idx_in = audio_MAX(0, (int) sizeof(s->data_in) - s->req_in);",
          "",
          "[Added Lines]",
          "73:     s->idx_in = MAX(0, (int) sizeof(s->data_in) - s->req_in);",
          "",
          "---------------"
        ]
      }
    }
  ]
}