{
  "cve_id": "CVE-2021-33624",
  "cve_desc": "In kernel/bpf/verifier.c in the Linux kernel before 5.12.13, a branch can be mispredicted (e.g., because of type confusion) and consequently an unprivileged BPF program can read arbitrary memory locations via a side-channel attack, aka CID-9183671af6db.",
  "repo": "torvalds/linux",
  "patch_hash": "9183671af6dbf60a1219371d4ed73e23f43b49db",
  "patch_info": {
    "commit_hash": "9183671af6dbf60a1219371d4ed73e23f43b49db",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9183671af6dbf60a1219371d4ed73e23f43b49db",
    "files": [
      "kernel/bpf/verifier.c"
    ],
    "message": "bpf: Fix leakage under speculation on mispredicted branches\n\nThe verifier only enumerates valid control-flow paths and skips paths that\nare unreachable in the non-speculative domain. And so it can miss issues\nunder speculative execution on mispredicted branches.\n\nFor example, a type confusion has been demonstrated with the following\ncrafted program:\n\n  // r0 = pointer to a map array entry\n  // r6 = pointer to readable stack slot\n  // r9 = scalar controlled by attacker\n  1: r0 = *(u64 *)(r0) // cache miss\n  2: if r0 != 0x0 goto line 4\n  3: r6 = r9\n  4: if r0 != 0x1 goto line 6\n  5: r9 = *(u8 *)(r6)\n  6: // leak r9\n\nSince line 3 runs iff r0 == 0 and line 5 runs iff r0 == 1, the verifier\nconcludes that the pointer dereference on line 5 is safe. But: if the\nattacker trains both the branches to fall-through, such that the following\nis speculatively executed ...\n\n  r6 = r9\n  r9 = *(u8 *)(r6)\n  // leak r9\n\n... then the program will dereference an attacker-controlled value and could\nleak its content under speculative execution via side-channel. This requires\nto mistrain the branch predictor, which can be rather tricky, because the\nbranches are mutually exclusive. However such training can be done at\ncongruent addresses in user space using different branches that are not\nmutually exclusive. That is, by training branches in user space ...\n\n  A:  if r0 != 0x0 goto line C\n  B:  ...\n  C:  if r0 != 0x0 goto line D\n  D:  ...\n\n... such that addresses A and C collide to the same CPU branch prediction\nentries in the PHT (pattern history table) as those of the BPF program's\nlines 2 and 4, respectively. A non-privileged attacker could simply brute\nforce such collisions in the PHT until observing the attack succeeding.\n\nAlternative methods to mistrain the branch predictor are also possible that\navoid brute forcing the collisions in the PHT. A reliable attack has been\ndemonstrated, for example, using the following crafted program:\n\n  // r0 = pointer to a [control] map array entry\n  // r7 = *(u64 *)(r0 + 0), training/attack phase\n  // r8 = *(u64 *)(r0 + 8), oob address\n  // [...]\n  // r0 = pointer to a [data] map array entry\n  1: if r7 == 0x3 goto line 3\n  2: r8 = r0\n  // crafted sequence of conditional jumps to separate the conditional\n  // branch in line 193 from the current execution flow\n  3: if r0 != 0x0 goto line 5\n  4: if r0 == 0x0 goto exit\n  5: if r0 != 0x0 goto line 7\n  6: if r0 == 0x0 goto exit\n  [...]\n  187: if r0 != 0x0 goto line 189\n  188: if r0 == 0x0 goto exit\n  // load any slowly-loaded value (due to cache miss in phase 3) ...\n  189: r3 = *(u64 *)(r0 + 0x1200)\n  // ... and turn it into known zero for verifier, while preserving slowly-\n  // loaded dependency when executing:\n  190: r3 &= 1\n  191: r3 &= 2\n  // speculatively bypassed phase dependency\n  192: r7 += r3\n  193: if r7 == 0x3 goto exit\n  194: r4 = *(u8 *)(r8 + 0)\n  // leak r4\n\nAs can be seen, in training phase (phase != 0x3), the condition in line 1\nturns into false and therefore r8 with the oob address is overridden with\nthe valid map value address, which in line 194 we can read out without\nissues. However, in attack phase, line 2 is skipped, and due to the cache\nmiss in line 189 where the map value is (zeroed and later) added to the\nphase register, the condition in line 193 takes the fall-through path due\nto prior branch predictor training, where under speculation, it'll load the\nbyte at oob address r8 (unknown scalar type at that point) which could then\nbe leaked via side-channel.\n\nOne way to mitigate these is to 'branch off' an unreachable path, meaning,\nthe current verification path keeps following the is_branch_taken() path\nand we push the other branch to the verification stack. Given this is\nunreachable from the non-speculative domain, this branch's vstate is\nexplicitly marked as speculative. This is needed for two reasons: i) if\nthis path is solely seen from speculative execution, then we later on still\nwant the dead code elimination to kick in in order to sanitize these\ninstructions with jmp-1s, and ii) to ensure that paths walked in the\nnon-speculative domain are not pruned from earlier walks of paths walked in\nthe speculative domain. Additionally, for robustness, we mark the registers\nwhich have been part of the conditional as unknown in the speculative path\ngiven there should be no assumptions made on their content.\n\nThe fix in here mitigates type confusion attacks described earlier due to\ni) all code paths in the BPF program being explored and ii) existing\nverifier logic already ensuring that given memory access instruction\nreferences one specific data structure.\n\nAn alternative to this fix that has also been looked at in this scope was to\nmark aux->alu_state at the jump instruction with a BPF_JMP_TAKEN state as\nwell as direction encoding (always-goto, always-fallthrough, unknown), such\nthat mixing of different always-* directions themselves as well as mixing of\nalways-* with unknown directions would cause a program rejection by the\nverifier, e.g. programs with constructs like 'if ([...]) { x = 0; } else\n{ x = 1; }' with subsequent 'if (x == 1) { [...] }'. For unprivileged, this\nwould result in only single direction always-* taken paths, and unknown taken\npaths being allowed, such that the former could be patched from a conditional\njump to an unconditional jump (ja). Compared to this approach here, it would\nhave two downsides: i) valid programs that otherwise are not performing any\npointer arithmetic, etc, would potentially be rejected/broken, and ii) we are\nrequired to turn off path pruning for unprivileged, where both can be avoided\nin this work through pushing the invalid branch to the verification stack.\n\nThe issue was originally discovered by Adam and Ofek, and later independently\ndiscovered and reported as a result of Benedict and Piotr's research work.\n\nFixes: b2157399cc98 (\"bpf: prevent out-of-bounds speculation\")\nReported-by: Adam Morrison <mad@cs.tau.ac.il>\nReported-by: Ofek Kirzner <ofekkir@gmail.com>\nReported-by: Benedict Schlueter <benedict.schlueter@rub.de>\nReported-by: Piotr Krysiuk <piotras@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nReviewed-by: Benedict Schlueter <benedict.schlueter@rub.de>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>",
    "before_after_code_files": [
      "kernel/bpf/verifier.c||kernel/bpf/verifier.c"
    ]
  },
  "patch_diff": {
    "kernel/bpf/verifier.c||kernel/bpf/verifier.c": [
      "File: kernel/bpf/verifier.c -> kernel/bpf/verifier.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6483:  bool mask_to_left;",
      "6484: };",
      "6486: static int sanitize_ptr_alu(struct bpf_verifier_env *env,",
      "6487:        struct bpf_insn *insn,",
      "6488:        const struct bpf_reg_state *ptr_reg,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6486: static struct bpf_verifier_state *",
      "6487: sanitize_speculative_path(struct bpf_verifier_env *env,",
      "6488:      const struct bpf_insn *insn,",
      "6489:      u32 next_idx, u32 curr_idx)",
      "6490: {",
      "6491:  struct bpf_verifier_state *branch;",
      "6492:  struct bpf_reg_state *regs;",
      "6494:  branch = push_stack(env, next_idx, curr_idx, true);",
      "6495:  if (branch && insn) {",
      "6496:   regs = branch->frame[branch->curframe]->regs;",
      "6497:   if (BPF_SRC(insn->code) == BPF_K) {",
      "6498:    mark_reg_unknown(env, regs, insn->dst_reg);",
      "6499:   } else if (BPF_SRC(insn->code) == BPF_X) {",
      "6500:    mark_reg_unknown(env, regs, insn->dst_reg);",
      "6501:    mark_reg_unknown(env, regs, insn->src_reg);",
      "6502:   }",
      "6503:  }",
      "6504:  return branch;",
      "6505: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6566:   tmp = *dst_reg;",
      "6568:  }",
      "6570:  if (!ptr_is_dst_reg && ret)",
      "6572:  return !ret ? REASON_STACK : 0;",
      "",
      "[Removed Lines]",
      "6569:  ret = push_stack(env, env->insn_idx + 1, env->insn_idx, true);",
      "",
      "[Added Lines]",
      "6590:  ret = sanitize_speculative_path(env, NULL, env->insn_idx + 1,",
      "6591:      env->insn_idx);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8763:   if (err)",
      "8764:    return err;",
      "8765:  }",
      "8766:  if (pred == 1) {",
      "8769:   return 0;",
      "8770:  } else if (pred == 0) {",
      "8774:   return 0;",
      "8775:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8794:   if (!env->bypass_spec_v1 &&",
      "8795:       !sanitize_speculative_path(env, insn, *insn_idx + 1,",
      "8797:    return -EFAULT;",
      "8805:   if (!env->bypass_spec_v1 &&",
      "8806:       !sanitize_speculative_path(env, insn,",
      "8809:    return -EFAULT;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7036191277f9fa68d92f2071ddc38c09b1e5ee5",
      "candidate_info": {
        "commit_hash": "a7036191277f9fa68d92f2071ddc38c09b1e5ee5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a7036191277f9fa68d92f2071ddc38c09b1e5ee5",
        "files": [
          "kernel/bpf/verifier.c"
        ],
        "message": "bpf: No need to simulate speculative domain for immediates\n\nIn 801c6058d14a (\"bpf: Fix leakage of uninitialized bpf stack under\nspeculation\") we replaced masking logic with direct loads of immediates\nif the register is a known constant. Given in this case we do not apply\nany masking, there is also no reason for the operation to be truncated\nunder the speculative domain.\n\nTherefore, there is also zero reason for the verifier to branch-off and\nsimulate this case, it only needs to do it for unknown but bounded scalars.\nAs a side-effect, this also enables few test cases that were previously\nrejected due to simulation under zero truncation.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>",
        "before_after_code_files": [
          "kernel/bpf/verifier.c||kernel/bpf/verifier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/bpf/verifier.c||kernel/bpf/verifier.c"
          ],
          "candidate": [
            "kernel/bpf/verifier.c||kernel/bpf/verifier.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/bpf/verifier.c||kernel/bpf/verifier.c": [
          "File: kernel/bpf/verifier.c -> kernel/bpf/verifier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6550:   return 0;",
          "",
          "[Removed Lines]",
          "6549:  if (commit_window)",
          "",
          "[Added Lines]",
          "6553:  if (commit_window || off_is_imm)",
          "",
          "---------------"
        ]
      }
    }
  ]
}