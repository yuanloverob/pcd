{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22f874168a7aa82ac125b1dd1cfb8362fb7be59a",
      "candidate_info": {
        "commit_hash": "22f874168a7aa82ac125b1dd1cfb8362fb7be59a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22f874168a7aa82ac125b1dd1cfb8362fb7be59a",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "When computing the verification hash in speedtest1, do not include the value of floating point results (which can very in trailing bits depending on platform) but merely hash the fact that a floating point value was received.\n\nFossilOrigin-Name: e12225d59c63ba392db4fa8dc26700ac26b20c8b98ea5107eef0e0b5138ace87",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d34b8ff5f8d04a75996f6ca9d3a0563c83e8e833c1eb08ac3861431f36f7bfb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:     n = sqlite3_column_count(g.pStmt);",
          "533:     for(i=0; i<n; i++){",
          "534:       const char *z = (const char*)sqlite3_column_text(g.pStmt, i);",
          "536:       if( z==0 ) z = \"nil\";",
          "537:       len = (int)strlen(z);",
          "538: #ifndef SPEEDTEST_OMIT_HASH",
          "",
          "[Removed Lines]",
          "535:       char zBuf[50];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "547:           HashUpdate(zPrefix+1, 1);",
          "548:         }",
          "549:         if( eType==SQLITE_FLOAT ){",
          "556:         }else if( eType==SQLITE_BLOB ){",
          "557:           int nBlob = sqlite3_column_bytes(g.pStmt, i);",
          "558:           int iBlob;",
          "",
          "[Removed Lines]",
          "550:           double r = sqlite3_column_double(g.pStmt, i);",
          "551:           sqlite3_snprintf(sizeof(zBuf), zBuf, \"%g\", r);",
          "552:           z = zBuf;",
          "553:           len = (int)strlen(z);",
          "554:           HashUpdate((unsigned char*)z, len);",
          "555:           g.nResByte += len + 2;",
          "",
          "[Added Lines]",
          "552:           g.nResByte += 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0ef4e2b47c27c19320ab81f983173bd86709174",
      "candidate_info": {
        "commit_hash": "e0ef4e2b47c27c19320ab81f983173bd86709174",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0ef4e2b47c27c19320ab81f983173bd86709174",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Add a missing #ifdef to avoid a harmless compiler warning.\n\nFossilOrigin-Name: cc54de354317ebc080d4d1ee25427b31a49c4a75e01cb5d9966f1aaeb2ad098d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1731385c077f298b0cf654d6183ed40f7e5c07e4e2ab7f69109cf951ce99d9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "500: #if !defined(SQLITE_OMIT_EXPLAIN) || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "501: int sqlite3VdbeNextOpcode(Vdbe*,Mem*,int,int*,int*,Op**);",
          "502: char *sqlite3VdbeDisplayP4(sqlite3*,Op*);",
          "503: char *sqlite3VdbeDisplayComment(sqlite3*,const Op*,const char*);",
          "504: #endif",
          "505: #if !defined(SQLITE_OMIT_EXPLAIN)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503: #endif",
          "504: #if defined(SQLITE_ENABLE_EXPLAIN_COMMENT)",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c"
        ]
      }
    },
    {
      "candidate_hash": "47a60d45187fcc3cf220c9083be5769fba9bf90a",
      "candidate_info": {
        "commit_hash": "47a60d45187fcc3cf220c9083be5769fba9bf90a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47a60d45187fcc3cf220c9083be5769fba9bf90a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Extra zero terminators on the end of the blank filename returned by sqlite3PagerFilename() for an in-memory database.  This helps the result work better with sqlite3_filename_journal() and similar functions.\n\nFossilOrigin-Name: 63e533d28e87bbb10e0c611de4b79d22aae291b163fe59d1f95dcad9ab3939e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bfb09371d452d5d4dacab2ec476880bc729952f44ac0e5de90ea7ba203243c8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6961: const char *sqlite3PagerFilename(const Pager *pPager, int nullIfMemDb){",
          "6963:   return (nullIfMemDb && pPager->memDb) ? &zFake[4] : pPager->zFilename;",
          "6964: }",
          "",
          "[Removed Lines]",
          "6962:   static const char zFake[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3bf76612724f79616d6aba959af92b609b941c9",
      "candidate_info": {
        "commit_hash": "d3bf76612724f79616d6aba959af92b609b941c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d3bf76612724f79616d6aba959af92b609b941c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Attempt to work around a false-positive warning in the CGo compiler.\n\nFossilOrigin-Name: d4bf60f464789935dc193ea99bf730c8fade448c7dca13eb3ce297965980f36e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56e5063c326ffbfd3e3cb6f2b05718412aca2cb183274bfe11f5666effdd04b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ){",
          "142:   Select standin;",
          "144:   if( pNew==0 ){",
          "145:     assert( pParse->db->mallocFailed );",
          "146:     pNew = &standin;",
          "",
          "[Removed Lines]",
          "141:   Select *pNew;",
          "143:   pNew = sqlite3DbMallocRawNN(pParse->db, sizeof(*pNew) );",
          "",
          "[Added Lines]",
          "141:   Select *pNew, *pAllocated;",
          "143:   pAllocated = pNew = sqlite3DbMallocRawNN(pParse->db, sizeof(*pNew) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174: #endif",
          "175:   if( pParse->db->mallocFailed ) {",
          "176:     clearSelect(pParse->db, pNew, pNew!=&standin);",
          "178:   }else{",
          "179:     assert( pNew->pSrc!=0 || pParse->nErr>0 );",
          "180:   }",
          "183: }",
          "",
          "[Removed Lines]",
          "177:     pNew = 0;",
          "181:   assert( pNew!=&standin );",
          "182:   return pNew;",
          "",
          "[Added Lines]",
          "177:     pAllocated = 0;",
          "181:   return pAllocated;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1d7c39682f332bd3660ea6a4ae079b9d0a8041",
      "candidate_info": {
        "commit_hash": "7a1d7c39682f332bd3660ea6a4ae079b9d0a8041",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a1d7c39682f332bd3660ea6a4ae079b9d0a8041",
        "files": [
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/pragma3.test"
        ],
        "message": "Fix \"PRAGMA data_version\" so that it works the same way with locking_mode=PERSIST and journal_mode=PERSIST configured. Fix for 7a458c2a5f.\n\nFossilOrigin-Name: 45748e2db028ffbda5d3e747493721a5a89af3fbc06823081a2f27f570e40e73",
        "before_after_code_files": [
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "test/pragma3.test||test/pragma3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: }",
          "213: #-------------------------------------------------------------------------",
          "214: reset_db",
          "215: do_execsql_test 7.0 {",
          "216:   PRAGMA encoding = 'UTF-16';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "235: }",
          "237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: #-------------------------------------------------------------------------",
          "239: # Ticket 7a458c2a5f4",
          "240: #",
          "241: reset_db",
          "242: do_execsql_test 8.0 {",
          "243:   PRAGMA locking_mode = EXCLUSIVE;",
          "244:   PRAGMA journal_mode = PERSIST;",
          "245:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "246: } {exclusive persist}",
          "247: do_execsql_test 8.1 {",
          "248:   PRAGMA data_version",
          "249: } {1}",
          "250: do_execsql_test 8.2 {",
          "251:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "252:   PRAGMA data_version;",
          "253: } {1}",
          "254: do_execsql_test 8.1 {",
          "255:   INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2);",
          "256: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70815e273f511481c310dc33b3b49079901d891078fad49b663fbce06c77ecc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6629:   if( NEVER(pPager->errCode) ) return pPager->errCode;",
          "6631:   assert( pPager->eState==PAGER_WRITER_LOCKED",
          "6632:        || pPager->eState==PAGER_WRITER_FINISHED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6630:   pPager->iDataVersion++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6655:   }",
          "6657:   PAGERTRACE((\"COMMIT %d\\n\", PAGERID(pPager)));",
          "6659:   rc = pager_end_transaction(pPager, pPager->setMaster, 1);",
          "6660:   return pager_error(pPager, rc);",
          "6661: }",
          "",
          "[Removed Lines]",
          "6658:   pPager->iDataVersion++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma3.test||test/pragma3.test": [
          "File: test/pragma3.test -> test/pragma3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "255: }",
          "256: }",
          "258: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #-------------------------------------------------------------------------",
          "259: # Check that empty write transactions do not cause the return of \"PRAGMA",
          "260: # data_version\" to be decremented with journal_mode=PERSIST and",
          "261: # locking_mode=EXCLUSIVE",
          "262: #",
          "263: foreach {tn sql} {",
          "264:   A {",
          "265:   }",
          "266:   B {",
          "267:     PRAGMA journal_mode = PERSIST;",
          "268:     PRAGMA locking_mode = EXCLUSIVE;",
          "269:   }",
          "270: } {",
          "271:   reset_db",
          "272:   execsql $sql",
          "274:   do_execsql_test pragma3-510$tn {",
          "275:     CREATE TABLE t1(x, y);",
          "276:     INSERT INTO t1 VALUES(1, 2);",
          "277:     PRAGMA data_version;",
          "278:   } {1}",
          "280:   do_execsql_test pragma3-520$tn {",
          "281:     BEGIN EXCLUSIVE;",
          "282:     COMMIT;",
          "283:     PRAGMA data_version;",
          "284:   } {1}",
          "285: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}