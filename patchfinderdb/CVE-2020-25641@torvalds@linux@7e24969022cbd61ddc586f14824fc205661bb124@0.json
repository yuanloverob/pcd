{
  "cve_id": "CVE-2020-25641",
  "cve_desc": "A flaw was found in the Linux kernel's implementation of biovecs in versions before 5.9-rc7. A zero-length biovec request issued by the block subsystem could cause the kernel to enter an infinite loop, causing a denial of service. This flaw allows a local attacker with basic privileges to issue requests to a block device, resulting in a denial of service. The highest threat from this vulnerability is to system availability.",
  "repo": "torvalds/linux",
  "patch_hash": "7e24969022cbd61ddc586f14824fc205661bb124",
  "patch_info": {
    "commit_hash": "7e24969022cbd61ddc586f14824fc205661bb124",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7e24969022cbd61ddc586f14824fc205661bb124",
    "files": [
      "include/linux/bvec.h"
    ],
    "message": "block: allow for_each_bvec to support zero len bvec\n\nBlock layer usually doesn't support or allow zero-length bvec. Since\ncommit 1bdc76aea115 (\"iov_iter: use bvec iterator to implement\niterate_bvec()\"), iterate_bvec() switches to bvec iterator. However,\nAl mentioned that 'Zero-length segments are not disallowed' in iov_iter.\n\nFixes for_each_bvec() so that it can move on after seeing one zero\nlength bvec.\n\nFixes: 1bdc76aea115 (\"iov_iter: use bvec iterator to implement iterate_bvec()\")\nReported-by: syzbot <syzbot+61acc40a49a3e46e25ea@syzkaller.appspotmail.com>\nSigned-off-by: Ming Lei <ming.lei@redhat.com>\nTested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Matthew Wilcox <willy@infradead.org>\nCc: <stable@vger.kernel.org>\nLink: https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg2262077.html\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "include/linux/bvec.h||include/linux/bvec.h"
    ]
  },
  "patch_diff": {
    "include/linux/bvec.h||include/linux/bvec.h": [
      "File: include/linux/bvec.h -> include/linux/bvec.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:  return true;",
      "118: }",
      "120: #define for_each_bvec(bvl, bio_vec, iter, start)   \\",
      "121:  for (iter = (start);      \\",
      "122:       (iter).bi_size &&      \\",
      "123:   ((bvl = bvec_iter_bvec((bio_vec), (iter))), 1); \\",
      "127: #define BVEC_ITER_ALL_INIT (struct bvec_iter)    \\",
      "",
      "[Removed Lines]",
      "124:       bvec_iter_advance((bio_vec), &(iter), (bvl).bv_len))",
      "",
      "[Added Lines]",
      "120: static inline void bvec_iter_skip_zero_bvec(struct bvec_iter *iter)",
      "121: {",
      "122:  iter->bi_bvec_done = 0;",
      "123:  iter->bi_idx++;",
      "124: }",
      "130:       (bvl).bv_len ? (void)bvec_iter_advance((bio_vec), &(iter), \\",
      "131:        (bvl).bv_len) : bvec_iter_skip_zero_bvec(&(iter)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b6667aa4d1e0866f00b62d35a9be3875c7551f8",
      "candidate_info": {
        "commit_hash": "6b6667aa4d1e0866f00b62d35a9be3875c7551f8",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6b6667aa4d1e0866f00b62d35a9be3875c7551f8",
        "files": [
          "include/linux/bvec.h"
        ],
        "message": "block: optimise for_each_bvec() advance\n\nBecause of how for_each_bvec() works it never advances across multiple\nentries at a time, so bvec_iter_advance() is an overkill. Add\nspecialised bvec_iter_advance_single() that is faster. It also handles\nzero-len bvecs, so can kill bvec_iter_skip_zero_bvec().\n\n   text    data     bss     dec     hex filename\nbefore:\n  23977     805       0   24782    60ce lib/iov_iter.o\nbefore, bvec_iter_advance() w/o WARN_ONCE()\n  22886     600       0   23486    5bbe ./lib/iov_iter.o\nafter:\n  21862     600       0   22462    57be lib/iov_iter.o\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nReviewed-by: Ming Lei <ming.lei@redhat.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "include/linux/bvec.h||include/linux/bvec.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/bvec.h||include/linux/bvec.h"
          ],
          "candidate": [
            "include/linux/bvec.h||include/linux/bvec.h"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/bvec.h||include/linux/bvec.h": [
          "File: include/linux/bvec.h -> include/linux/bvec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:  return true;",
          "122: }",
          "125: {",
          "128: }",
          "130: #define for_each_bvec(bvl, bio_vec, iter, start)   \\",
          "131:  for (iter = (start);      \\",
          "132:       (iter).bi_size &&      \\",
          "133:   ((bvl = bvec_iter_bvec((bio_vec), (iter))), 1); \\",
          "138: #define BVEC_ITER_ALL_INIT (struct bvec_iter)    \\",
          "",
          "[Removed Lines]",
          "124: static inline void bvec_iter_skip_zero_bvec(struct bvec_iter *iter)",
          "126:  iter->bi_bvec_done = 0;",
          "127:  iter->bi_idx++;",
          "134:       (bvl).bv_len ? (void)bvec_iter_advance((bio_vec), &(iter), \\",
          "135:        (bvl).bv_len) : bvec_iter_skip_zero_bvec(&(iter)))",
          "",
          "[Added Lines]",
          "128: static inline void bvec_iter_advance_single(const struct bio_vec *bv,",
          "129:     struct bvec_iter *iter, unsigned int bytes)",
          "131:  unsigned int done = iter->bi_bvec_done + bytes;",
          "133:  if (done == bv[iter->bi_idx].bv_len) {",
          "134:   done = 0;",
          "135:   iter->bi_idx++;",
          "136:  }",
          "137:  iter->bi_bvec_done = done;",
          "138:  iter->bi_size -= bytes;",
          "145:       bvec_iter_advance_single((bio_vec), &(iter), (bvl).bv_len))",
          "",
          "---------------"
        ]
      }
    }
  ]
}