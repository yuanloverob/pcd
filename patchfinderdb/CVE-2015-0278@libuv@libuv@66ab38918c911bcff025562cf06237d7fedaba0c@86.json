{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1759781c909cad86ea5387d3c4fa2c87b99a5d55",
      "candidate_info": {
        "commit_hash": "1759781c909cad86ea5387d3c4fa2c87b99a5d55",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1759781c909cad86ea5387d3c4fa2c87b99a5d55",
        "files": [
          "configure.ac",
          "m4/as_case.m4"
        ],
        "message": "build: fix building with old versions of autoconf",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "m4/as_case.m4||m4/as_case.m4"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: AC_INIT([libuv], [0.11.23], [https://github.com/joyent/libuv/issues])",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "20: AC_CANONICAL_HOST",
          "21: AC_ENABLE_SHARED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: m4_include([m4/as_case.m4])",
          "",
          "---------------"
        ],
        "m4/as_case.m4||m4/as_case.m4": [
          "File: m4/as_case.m4 -> m4/as_case.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # AS_CASE(WORD, [PATTERN1], [IF-MATCHED1]...[DEFAULT])",
          "2: # ----------------------------------------------------",
          "3: # Expand into",
          "4: # | case WORD in",
          "5: # | PATTERN1) IF-MATCHED1 ;;",
          "6: # | ...",
          "7: # | *) DEFAULT ;;",
          "8: # | esac",
          "9: m4_define([_AS_CASE],",
          "10: [m4_if([$#], 0, [m4_fatal([$0: too few arguments: $#])],",
          "11:        [$#], 1, [  *) $1 ;;],",
          "12:        [$#], 2, [  $1) m4_default([$2], [:]) ;;],",
          "13:        [  $1) m4_default([$2], [:]) ;;",
          "14: $0(m4_shiftn(2, $@))])dnl",
          "15: ])",
          "16: m4_defun([AS_CASE],",
          "17: [m4_ifval([$2$3],",
          "18: [case $1 in",
          "19: _AS_CASE(m4_shift($@))",
          "20: esac])])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d73d5562791e8fe115732decd38db06a199e46a",
      "candidate_info": {
        "commit_hash": "3d73d5562791e8fe115732decd38db06a199e46a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3d73d5562791e8fe115732decd38db06a199e46a",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows: change GENERIC_ALL to GENERIC_WRITE in fs__create_junction\n\nFixes #1385\n\nSee ReactOS's mklink implementation and\nhttp://stackoverflow.com/a/10508724",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1467:   handle = CreateFileW(new_path,",
          "1469:                        0,",
          "1470:                        NULL,",
          "1471:                        OPEN_EXISTING,",
          "",
          "[Removed Lines]",
          "1468:                        GENERIC_ALL,",
          "",
          "[Added Lines]",
          "1468:                        GENERIC_WRITE,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7b3c3fb6b56298174e5eaf2ac3bea2b721cf0f5",
      "candidate_info": {
        "commit_hash": "e7b3c3fb6b56298174e5eaf2ac3bea2b721cf0f5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e7b3c3fb6b56298174e5eaf2ac3bea2b721cf0f5",
        "files": [
          "src/inet.c"
        ],
        "message": "unix, windows: define UV__INET/6_ADDRSTRLEN constants",
        "before_after_code_files": [
          "src/inet.c||src/inet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/inet.c||src/inet.c": [
          "File: src/inet.c -> src/inet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"uv.h\"",
          "28: #include \"uv-common.h\"",
          "31: static int inet_ntop4(const unsigned char *src, char *dst, size_t size);",
          "32: static int inet_ntop6(const unsigned char *src, char *dst, size_t size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #define UV__INET_ADDRSTRLEN         16",
          "31: #define UV__INET6_ADDRSTRLEN        46",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: static int inet_ntop4(const unsigned char *src, char *dst, size_t size) {",
          "51:   static const char fmt[] = \"%u.%u.%u.%u\";",
          "53:   int l;",
          "55: #ifndef _WIN32",
          "",
          "[Removed Lines]",
          "52:   char tmp[sizeof \"255.255.255.255\"];",
          "",
          "[Added Lines]",
          "55:   char tmp[UV__INET_ADDRSTRLEN];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   struct { int base, len; } best, cur;",
          "79:   unsigned int words[sizeof(struct in6_addr) / sizeof(uint16_t)];",
          "80:   int i;",
          "",
          "[Removed Lines]",
          "77:   char tmp[sizeof \"ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255\"], *tp;",
          "",
          "[Added Lines]",
          "80:   char tmp[UV__INET6_ADDRSTRLEN], *tp;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e9d86e105f4cc7c6d8d969ab2d58d9d353679aa",
      "candidate_info": {
        "commit_hash": "2e9d86e105f4cc7c6d8d969ab2d58d9d353679aa",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2e9d86e105f4cc7c6d8d969ab2d58d9d353679aa",
        "files": [
          "src/win/core.c",
          "src/win/internal.h",
          "src/win/timer.c",
          "test/test-list.h",
          "test/test-loop-time.c"
        ],
        "message": "windows: add uv_backend_timeout",
        "before_after_code_files": [
          "src/win/core.c||src/win/core.c",
          "src/win/internal.h||src/win/internal.h",
          "src/win/timer.c||src/win/timer.c",
          "test/test-list.h||test/test-list.h",
          "test/test-loop-time.c||test/test-loop-time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: int uv_backend_timeout(const uv_loop_t* loop) {",
          "276: }",
          "281:   ULONG_PTR key;",
          "282:   OVERLAPPED* overlapped;",
          "283:   uv_req_t* req;",
          "291:   GetQueuedCompletionStatus(loop->iocp,",
          "292:                             &bytes,",
          "293:                             &key,",
          "",
          "[Removed Lines]",
          "275:   return 0;",
          "279: static void uv_poll(uv_loop_t* loop, int block) {",
          "280:   DWORD bytes, timeout;",
          "285:   if (block) {",
          "286:     timeout = uv_get_poll_timeout(loop);",
          "287:   } else {",
          "288:     timeout = 0;",
          "289:   }",
          "",
          "[Added Lines]",
          "281:   if (loop->stop_flag != 0)",
          "282:     return 0;",
          "284:   if (!uv__has_active_handles(loop) && !uv__has_active_reqs(loop))",
          "285:     return 0;",
          "287:   if (loop->pending_reqs_tail)",
          "288:     return 0;",
          "290:   if (loop->endgame_handles)",
          "291:     return 0;",
          "293:   if (loop->idle_handles)",
          "294:     return 0;",
          "296:   return uv__next_timeout(loop);",
          "300: static void uv_poll(uv_loop_t* loop, DWORD timeout) {",
          "301:   DWORD bytes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     uv_fatal_error(GetLastError(), \"GetQueuedCompletionStatus\");",
          "304:   } else {",
          "308:     uv__time_forward(loop, timeout);",
          "309:   }",
          "310: }",
          "314:   BOOL success;",
          "316:   uv_req_t* req;",
          "317:   OVERLAPPED_ENTRY overlappeds[128];",
          "318:   ULONG count;",
          "319:   ULONG i;",
          "327:   success = pGetQueuedCompletionStatusEx(loop->iocp,",
          "328:                                          overlappeds,",
          "329:                                          ARRAY_SIZE(overlappeds),",
          "",
          "[Removed Lines]",
          "313: static void uv_poll_ex(uv_loop_t* loop, int block) {",
          "315:   DWORD timeout;",
          "321:   if (block) {",
          "322:     timeout = uv_get_poll_timeout(loop);",
          "323:   } else {",
          "324:     timeout = 0;",
          "325:   }",
          "",
          "[Added Lines]",
          "329: static void uv_poll_ex(uv_loop_t* loop, DWORD timeout) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "364: int uv_run(uv_loop_t *loop, uv_run_mode mode) {",
          "365:   int r;",
          "368:   if (pGetQueuedCompletionStatusEx)",
          "369:     poll = &uv_poll_ex;",
          "",
          "[Removed Lines]",
          "366:   void (*poll)(uv_loop_t* loop, int block);",
          "",
          "[Added Lines]",
          "375:   DWORD timeout;",
          "377:   void (*poll)(uv_loop_t* loop, DWORD timeout);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:     uv_idle_invoke(loop);",
          "383:     uv_prepare_invoke(loop);",
          "393:     uv_check_invoke(loop);",
          "394:     uv_process_endgames(loop);",
          "",
          "[Removed Lines]",
          "385:     (*poll)(loop, loop->idle_handles == NULL &&",
          "386:                   loop->pending_reqs_tail == NULL &&",
          "387:                   loop->endgame_handles == NULL &&",
          "388:                   !loop->stop_flag &&",
          "389:                   (loop->active_handles > 0 ||",
          "390:                    !QUEUE_EMPTY(&loop->active_reqs)) &&",
          "391:                   !(mode & UV_RUN_NOWAIT));",
          "",
          "[Added Lines]",
          "396:     timeout = 0;",
          "397:     if ((mode & UV_RUN_NOWAIT) == 0)",
          "398:       timeout = uv_backend_timeout(loop);",
          "400:     (*poll)(loop, timeout);",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: void uv_timer_endgame(uv_loop_t* loop, uv_timer_t* handle);",
          "243: void uv__time_forward(uv_loop_t* loop, uint64_t msecs);",
          "244: void uv_process_timers(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "242: DWORD uv_get_poll_timeout(uv_loop_t* loop);",
          "",
          "[Added Lines]",
          "242: DWORD uv__next_timeout(const uv_loop_t* loop);",
          "",
          "---------------"
        ],
        "src/win/timer.c||src/win/timer.c": [
          "File: src/win/timer.c -> src/win/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: }",
          "197:   uv_timer_t* timer;",
          "198:   int64_t delta;",
          "202:   if (timer) {",
          "205:     delta = timer->due - loop->time;",
          "206:     if (delta >= UINT_MAX >> 1) {",
          "214:       return UINT_MAX >> 1;",
          "215:     } else if (delta < 0) {",
          "",
          "[Removed Lines]",
          "196: DWORD uv_get_poll_timeout(uv_loop_t* loop) {",
          "201:   timer = RB_MIN(uv_timer_tree_s, &loop->timers);",
          "203:     uv_update_time(loop);",
          "",
          "[Added Lines]",
          "198: DWORD uv__next_timeout(const uv_loop_t* loop) {",
          "206:   timer = RB_MIN(uv_timer_tree_s, &((uv_loop_t*)loop)->timers);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: TEST_DECLARE   (loop_close)",
          "29: TEST_DECLARE   (loop_stop)",
          "30: TEST_DECLARE   (loop_update_time)",
          "31: TEST_DECLARE   (barrier_1)",
          "32: TEST_DECLARE   (barrier_2)",
          "33: TEST_DECLARE   (barrier_3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: TEST_DECLARE   (loop_backend_timeout)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:   TEST_ENTRY  (loop_close)",
          "292:   TEST_ENTRY  (loop_stop)",
          "293:   TEST_ENTRY  (loop_update_time)",
          "294:   TEST_ENTRY  (barrier_1)",
          "295:   TEST_ENTRY  (barrier_2)",
          "296:   TEST_ENTRY  (barrier_3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:   TEST_ENTRY  (loop_backend_timeout)",
          "",
          "---------------"
        ],
        "test/test-loop-time.c||test/test-loop-time.c": [
          "File: test/test-loop-time.c -> test/test-loop-time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   while (uv_now(uv_default_loop()) - start < 1000)",
          "31:     ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_NOWAIT));",
          "33:   return 0;",
          "34: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   MAKE_VALGRIND_HAPPY();",
          "34:   return 0;",
          "35: }",
          "37: static void cb(uv_timer_t* timer) {",
          "38:   uv_close((uv_handle_t*)timer, NULL);",
          "39: }",
          "41: TEST_IMPL(loop_backend_timeout) {",
          "42:   uv_loop_t *loop = uv_default_loop();",
          "43:   uv_timer_t timer;",
          "44:   int r;",
          "46:   r = uv_timer_init(loop, &timer);",
          "47:   ASSERT(r == 0);",
          "49:   ASSERT(!uv_loop_alive(loop));",
          "50:   ASSERT(uv_backend_timeout(loop) == 0);",
          "53:   ASSERT(r == 0);",
          "57:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "58:   ASSERT(r == 0);",
          "59:   ASSERT(uv_backend_timeout(loop) == 0);",
          "61:   MAKE_VALGRIND_HAPPY();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91985d48f6b5477bf198fd6f92a4f3434ba16310",
      "candidate_info": {
        "commit_hash": "91985d48f6b5477bf198fd6f92a4f3434ba16310",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/91985d48f6b5477bf198fd6f92a4f3434ba16310",
        "files": [
          "include/uv.h",
          "src/unix/thread.c",
          "src/win/thread.c",
          "test/test-barrier.c"
        ],
        "message": "unix, windows: make uv_barrier_wait() return bool\n\nMake uv_barrier_wait() return a boolean value indicating whether this\nthread was the \"serializer\".\n\nFrom `man pthread_barrier_wait`:\n\n    Upon successful completion, the pthread_barrier_wait() function\n    shall return PTHREAD_BARRIER_SERIAL_THREAD for a single (arbitrary)\n    thread synchronized at the barrier and zero for each of the other\n    threads.\n\nExposing that information from libuv is useful because it can make\ncleanup significantly easier:\n\n    if (uv_barrier_wait(&barrier) > 0)\n      uv_barrier_destroy(&barrier);\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/thread.c||src/unix/thread.c",
          "src/win/thread.c||src/win/thread.c",
          "test/test-barrier.c||test/test-barrier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2220: UV_EXTERN int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);",
          "2221: UV_EXTERN void uv_barrier_destroy(uv_barrier_t* barrier);",
          "",
          "[Removed Lines]",
          "2222: UV_EXTERN void uv_barrier_wait(uv_barrier_t* barrier);",
          "",
          "[Added Lines]",
          "2222: UV_EXTERN int uv_barrier_wait(uv_barrier_t* barrier);",
          "",
          "---------------"
        ],
        "src/unix/thread.c||src/unix/thread.c": [
          "File: src/unix/thread.c -> src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "399: }",
          "403:   uv_mutex_lock(&barrier->mutex);",
          "404:   if (++barrier->count == barrier->n) {",
          "405:     uv_sem_wait(&barrier->turnstile2);",
          "",
          "[Removed Lines]",
          "402: void uv_barrier_wait(uv_barrier_t* barrier) {",
          "",
          "[Added Lines]",
          "402: int uv_barrier_wait(uv_barrier_t* barrier) {",
          "403:   int serial_thread;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:   uv_sem_post(&barrier->turnstile1);",
          "413:   uv_mutex_lock(&barrier->mutex);",
          "415:     uv_sem_wait(&barrier->turnstile1);",
          "416:     uv_sem_post(&barrier->turnstile2);",
          "417:   }",
          "",
          "[Removed Lines]",
          "414:   if (--barrier->count == 0) {",
          "",
          "[Added Lines]",
          "416:   serial_thread = (--barrier->count == 0);",
          "417:   if (serial_thread) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:   uv_sem_wait(&barrier->turnstile2);",
          "421:   uv_sem_post(&barrier->turnstile2);",
          "422: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:   return serial_thread;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434: }",
          "438:   int r = pthread_barrier_wait(barrier);",
          "439:   if (r && r != PTHREAD_BARRIER_SERIAL_THREAD)",
          "440:     abort();",
          "441: }",
          "",
          "[Removed Lines]",
          "437: void uv_barrier_wait(uv_barrier_t* barrier) {",
          "",
          "[Added Lines]",
          "441: int uv_barrier_wait(uv_barrier_t* barrier) {",
          "445:   return r == PTHREAD_BARRIER_SERIAL_THREAD;",
          "",
          "---------------"
        ],
        "src/win/thread.c||src/win/thread.c": [
          "File: src/win/thread.c -> src/win/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "660: }",
          "664:   uv_mutex_lock(&barrier->mutex);",
          "665:   if (++barrier->count == barrier->n) {",
          "666:     uv_sem_wait(&barrier->turnstile2);",
          "",
          "[Removed Lines]",
          "663: void uv_barrier_wait(uv_barrier_t* barrier) {",
          "",
          "[Added Lines]",
          "663: int uv_barrier_wait(uv_barrier_t* barrier) {",
          "664:   int serial_thread;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "672:   uv_sem_post(&barrier->turnstile1);",
          "674:   uv_mutex_lock(&barrier->mutex);",
          "676:     uv_sem_wait(&barrier->turnstile1);",
          "677:     uv_sem_post(&barrier->turnstile2);",
          "678:   }",
          "",
          "[Removed Lines]",
          "675:   if (--barrier->count == 0) {",
          "",
          "[Added Lines]",
          "677:   serial_thread = (--barrier->count == 0);",
          "678:   if (serial_thread) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "681:   uv_sem_wait(&barrier->turnstile2);",
          "682:   uv_sem_post(&barrier->turnstile2);",
          "683: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:   return serial_thread;",
          "",
          "---------------"
        ],
        "test/test-barrier.c||test/test-barrier.c": [
          "File: test/test-barrier.c -> test/test-barrier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   uv_barrier_t barrier;",
          "30:   int delay;",
          "31:   volatile int posted;",
          "32: } worker_config;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   int main_barrier_wait_rval;",
          "33:   int worker_barrier_wait_rval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   if (c->delay)",
          "39:     uv_sleep(c->delay);",
          "42: }",
          "",
          "[Removed Lines]",
          "41:   uv_barrier_wait(&c->barrier);",
          "",
          "[Added Lines]",
          "43:   c->worker_barrier_wait_rval = uv_barrier_wait(&c->barrier);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   ASSERT(0 == uv_thread_create(&thread, worker, &wc));",
          "54:   uv_sleep(100);",
          "57:   ASSERT(0 == uv_thread_join(&thread));",
          "58:   uv_barrier_destroy(&wc.barrier);",
          "60:   return 0;",
          "61: }",
          "",
          "[Removed Lines]",
          "55:   uv_barrier_wait(&wc.barrier);",
          "",
          "[Added Lines]",
          "57:   wc.main_barrier_wait_rval = uv_barrier_wait(&wc.barrier);",
          "62:   ASSERT(1 == (wc.main_barrier_wait_rval ^ wc.worker_barrier_wait_rval));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:   ASSERT(0 == uv_barrier_init(&wc.barrier, 2));",
          "72:   ASSERT(0 == uv_thread_create(&thread, worker, &wc));",
          "76:   ASSERT(0 == uv_thread_join(&thread));",
          "77:   uv_barrier_destroy(&wc.barrier);",
          "79:   return 0;",
          "80: }",
          "",
          "[Removed Lines]",
          "74:   uv_barrier_wait(&wc.barrier);",
          "",
          "[Added Lines]",
          "78:   wc.main_barrier_wait_rval = uv_barrier_wait(&wc.barrier);",
          "83:   ASSERT(1 == (wc.main_barrier_wait_rval ^ wc.worker_barrier_wait_rval));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89:   ASSERT(0 == uv_barrier_init(&wc.barrier, 2));",
          "90:   ASSERT(0 == uv_thread_create(&thread, worker, &wc));",
          "94:   ASSERT(0 == uv_thread_join(&thread));",
          "95:   uv_barrier_destroy(&wc.barrier);",
          "97:   return 0;",
          "98: }",
          "",
          "[Removed Lines]",
          "92:   uv_barrier_wait(&wc.barrier);",
          "",
          "[Added Lines]",
          "98:   wc.main_barrier_wait_rval = uv_barrier_wait(&wc.barrier);",
          "103:   ASSERT(1 == (wc.main_barrier_wait_rval ^ wc.worker_barrier_wait_rval));",
          "",
          "---------------"
        ]
      }
    }
  ]
}