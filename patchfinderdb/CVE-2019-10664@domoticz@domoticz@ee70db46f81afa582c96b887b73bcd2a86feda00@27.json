{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "216bc016a0a103f7ac69cd1f73857d98a57aaea5",
      "candidate_info": {
        "commit_hash": "216bc016a0a103f7ac69cd1f73857d98a57aaea5",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/216bc016a0a103f7ac69cd1f73857d98a57aaea5",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Displaying large values for counter devices in widgets",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9600:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9601:        break;",
          "9602:       case MTYPE_COUNTER:",
          "9604:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9605:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9606:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9603:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9603:        sprintf(szTmp, \"%\" PRIu64 \" %s\", static_cast<uint64_t>(meteroffset + dvalue), ValueUnits.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f149f061eb7522b9c33889ed231492f0d60d78f",
      "candidate_info": {
        "commit_hash": "3f149f061eb7522b9c33889ed231492f0d60d78f",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3f149f061eb7522b9c33889ed231492f0d60d78f",
        "files": [
          "msbuild/domoticz.vcxproj"
        ],
        "message": "Using Windows SDK Version 10.0.17763.0 for AppVeyor",
        "before_after_code_files": [
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     <ProjectGuid>{6AD96441-5B2C-467B-AAB6-A1B8368D503A}</ProjectGuid>",
          "15:     <Keyword>Win32Proj</Keyword>",
          "16:     <RootNamespace>domoticz</RootNamespace>",
          "18:   </PropertyGroup>",
          "19:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />",
          "20:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">",
          "",
          "[Removed Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>",
          "",
          "[Added Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4575e8d49507a5fe9cc6da36cd77897563e0650f",
      "candidate_info": {
        "commit_hash": "4575e8d49507a5fe9cc6da36cd77897563e0650f",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4575e8d49507a5fe9cc6da36cd77897563e0650f",
        "files": [
          "hardware/RFXBase.cpp",
          "hardware/RFXBase.h",
          "hardware/RFXComSerial.cpp",
          "hardware/RFXComSerial.h",
          "hardware/RFXComTCP.cpp",
          "hardware/RFXComTCP.h",
          "main/mainworker.cpp"
        ],
        "message": "Patch for RFXCom ProXL hardware",
        "before_after_code_files": [
          "hardware/RFXBase.cpp||hardware/RFXBase.cpp",
          "hardware/RFXBase.h||hardware/RFXBase.h",
          "hardware/RFXComSerial.cpp||hardware/RFXComSerial.cpp",
          "hardware/RFXComSerial.h||hardware/RFXComSerial.h",
          "hardware/RFXComTCP.cpp||hardware/RFXComTCP.cpp",
          "hardware/RFXComTCP.h||hardware/RFXComTCP.h",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/RFXBase.cpp||hardware/RFXBase.cpp": [
          "File: hardware/RFXBase.cpp -> hardware/RFXBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: CRFXBase::CRFXBase()",
          "9: {",
          "10:  m_NoiseLevel = 0;",
          "12: }",
          "14: CRFXBase::~CRFXBase()",
          "",
          "[Removed Lines]",
          "11:  m_AsyncType = ATYPE_UNKNOWN;",
          "",
          "[Added Lines]",
          "11:  m_AsyncType = ATYPE_DISABLED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   stopbits = asyncStopbits1;",
          "189:   polarity = asyncPolarityInvers;",
          "190:   cmnd = asyncreceiveP1;",
          "191:   break;",
          "192:  case ATYPE_P1_DSMR_4:",
          "193:  case ATYPE_P1_DSMR_5:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:   _log.Log(LOG_STATUS, \"RFXCOM: Async mode set to: 'DSMR 1/2/3'\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   stopbits = asyncStopbits1;",
          "198:   polarity = asyncPolarityInvers;",
          "199:   cmnd = asyncreceiveP1;",
          "200:   break;",
          "202:   baudrate = asyncbaud1200;",
          "203:   parity = asyncParityEven;",
          "204:   databits = asyncDatabits7;",
          "205:   stopbits = asyncStopbits1;",
          "206:   polarity = asyncPolarityInvers;",
          "207:   cmnd = asyncreceiveTeleinfo;",
          "208:   break;",
          "210:   baudrate = asyncbaud19200;",
          "211:   parity = asyncParityEven;",
          "212:   databits = asyncDatabits7;",
          "213:   stopbits = asyncStopbits1;",
          "214:   polarity = asyncPolarityInvers;",
          "215:   break;",
          "216:  default:",
          "217:   _log.Log(LOG_ERROR, \"RFXCOM: unknown ASync type received!....\");",
          "",
          "[Removed Lines]",
          "201:  case ATYPE_TELEINFO_1200:",
          "209:  case ATYPE_TELEINFO_19200:",
          "",
          "[Added Lines]",
          "201:   _log.Log(LOG_STATUS, \"RFXCOM: Async mode set to: 'DSMR 4/5'\");",
          "203:  case ATYPE_TELEINFO_1200://not handled yet!",
          "210:   _log.Log(LOG_STATUS, \"RFXCOM: Async mode set to: 'Teleinfo 1200' (not implemented yet!)\");",
          "212:  case ATYPE_TELEINFO_19200://not handled yet!",
          "218:   _log.Log(LOG_STATUS, \"RFXCOM: Async mode set to: 'Teleinfo 19200' (not implemented yet!)\");",
          "219:   break;",
          "220:  case ATYPE_DISABLED:",
          "221:   _log.Log(LOG_STATUS, \"RFXCOM: Async Disabled\");",
          "",
          "---------------"
        ],
        "hardware/RFXBase.h||hardware/RFXBase.h": [
          "File: hardware/RFXBase.h -> hardware/RFXBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: public:",
          "15:  enum _eRFXAsyncType",
          "16:  {",
          "18:   ATYPE_P1_DSMR_1,",
          "19:   ATYPE_P1_DSMR_2,",
          "20:   ATYPE_P1_DSMR_3,",
          "",
          "[Removed Lines]",
          "17:   ATYPE_UNKNOWN = 0,",
          "",
          "[Added Lines]",
          "17:   ATYPE_DISABLED = 0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  CRFXBase();",
          "27:     ~CRFXBase();",
          "28:  std::string m_Version;",
          "29:  int m_NoiseLevel;",
          "31:  bool SetRFXCOMHardwaremodes(const unsigned char Mode1, const unsigned char Mode2, const unsigned char Mode3, const unsigned char Mode4, const unsigned char Mode5, const unsigned char Mode6);",
          "32:  void SendResetCommand();",
          "33:  virtual bool WriteToHardware(const char *pdata, const unsigned char length) = 0;",
          "",
          "[Removed Lines]",
          "30:  std::string m_sExtraData;",
          "",
          "[Added Lines]",
          "29:  _eRFXAsyncType m_AsyncType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:  void SendCommand(const unsigned char Cmd);",
          "48:  std::shared_ptr<std::thread> m_thread;",
          "49:  bool m_bReceiverStarted;",
          "51: };",
          "",
          "[Removed Lines]",
          "50:  _eRFXAsyncType m_AsyncType;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/RFXComSerial.cpp||hardware/RFXComSerial.cpp": [
          "File: hardware/RFXComSerial.cpp -> hardware/RFXComSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  m_szSerialPort(devname)",
          "64: {",
          "65:  m_HwdID = ID;",
          "66:  m_iBaudRate = baud_rate;",
          "69:  m_bReceiverStarted = false;",
          "70:  m_bInBootloaderMode = false;",
          "",
          "[Removed Lines]",
          "62: RFXComSerial::RFXComSerial(const int ID, const std::string& devname, unsigned int baud_rate, const std::string &ExtraData) :",
          "67:  m_sExtraData = ExtraData;",
          "",
          "[Added Lines]",
          "62: RFXComSerial::RFXComSerial(const int ID, const std::string& devname, unsigned int baud_rate, const _eRFXAsyncType AsyncType) :",
          "68:  m_AsyncType = AsyncType;",
          "",
          "---------------"
        ],
        "hardware/RFXComSerial.h||hardware/RFXComSerial.h": [
          "File: hardware/RFXComSerial.h -> hardware/RFXComSerial.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class RFXComSerial: public CRFXBase, AsyncSerial",
          "10: {",
          "11: public:",
          "13:     ~RFXComSerial();",
          "14:  bool WriteToHardware(const char *pdata, const unsigned char length) override;",
          "15:  bool UploadFirmware(const std::string &szFilename);",
          "",
          "[Removed Lines]",
          "12:  RFXComSerial(const int ID, const std::string& devname, unsigned int baud_rate, const std::string &ExtraData);",
          "",
          "[Added Lines]",
          "12:  RFXComSerial(const int ID, const std::string& devname, unsigned int baud_rate, const _eRFXAsyncType AsyncType);",
          "",
          "---------------"
        ],
        "hardware/RFXComTCP.cpp||hardware/RFXComTCP.cpp": [
          "File: hardware/RFXComTCP.cpp -> hardware/RFXComTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define RETRY_DELAY 30",
          "13:  m_szIPAddress(IPAddress)",
          "14: {",
          "15:  m_HwdID=ID;",
          "16:  m_usIPPort=usIPPort;",
          "19:  m_bReceiverStarted = false;",
          "20: }",
          "",
          "[Removed Lines]",
          "12: RFXComTCP::RFXComTCP(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const std::string &ExtraData) :",
          "17:  m_sExtraData = ExtraData;",
          "",
          "[Added Lines]",
          "12: RFXComTCP::RFXComTCP(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const _eRFXAsyncType AsyncType) :",
          "17:  m_AsyncType = AsyncType;",
          "",
          "---------------"
        ],
        "hardware/RFXComTCP.h||hardware/RFXComTCP.h": [
          "File: hardware/RFXComTCP.h -> hardware/RFXComTCP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: class RFXComTCP : public CRFXBase, ASyncTCP",
          "7: {",
          "8: public:",
          "10:  ~RFXComTCP(void);",
          "11:  bool WriteToHardware(const char *pdata, const unsigned char length) override;",
          "12: private:",
          "",
          "[Removed Lines]",
          "9:  RFXComTCP(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const std::string &ExtraData);",
          "",
          "[Added Lines]",
          "9:  RFXComTCP(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const _eRFXAsyncType AsyncType);",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:  case HTYPE_RFXtrx315:",
          "668:  case HTYPE_RFXtrx433:",
          "669:  case HTYPE_RFXtrx868:",
          "671:   break;",
          "672:  case HTYPE_RFXLAN:",
          "674:   break;",
          "675:  case HTYPE_P1SmartMeter:",
          "676:   pHardware = new P1MeterSerial(ID, SerialPort, (Mode1 == 1) ? 115200 : 9600, (Mode2 != 0), Mode3);",
          "",
          "[Removed Lines]",
          "670:   pHardware = new RFXComSerial(ID, SerialPort, 38400, Extra);",
          "673:   pHardware = new RFXComTCP(ID, Address, Port, Extra);",
          "",
          "[Added Lines]",
          "670:   pHardware = new RFXComSerial(ID, SerialPort, 38400, (CRFXBase::_eRFXAsyncType)atoi(Extra.c_str()));",
          "673:   pHardware = new RFXComTCP(ID, Address, Port, (CRFXBase::_eRFXAsyncType)atoi(Extra.c_str()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2585:     }",
          "2586:     if (FWType == FWtypeProXL1)",
          "2587:     {",
          "2590:     }",
          "2591:    }",
          "",
          "[Removed Lines]",
          "2588:      CRFXBase::_eRFXAsyncType AsyncType = (CRFXBase::_eRFXAsyncType)atoi(pMyHardware->m_sExtraData.c_str());",
          "2589:      pMyHardware->SetAsyncType(AsyncType);",
          "",
          "[Added Lines]",
          "2588:      pMyHardware->SetAsyncType(pMyHardware->m_AsyncType);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "470adf2f8e51fbbc752507a762a345f24ec7203c",
      "candidate_info": {
        "commit_hash": "470adf2f8e51fbbc752507a762a345f24ec7203c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/470adf2f8e51fbbc752507a762a345f24ec7203c",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Fixed usage notation for kWh/Gas and Water widgets",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9342:         total_real *= AddjMulti;",
          "9343:         rate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);",
          "9346:         root[\"result\"][ii][\"Rain\"] = szTmp;",
          "9347:         sprintf(szTmp, \"%g\", rate);",
          "9348:         root[\"result\"][ii][\"RainRate\"] = szTmp;",
          "",
          "[Removed Lines]",
          "9345:         sprintf(szTmp, \"%g\", total_real);",
          "",
          "[Added Lines]",
          "9345:         sprintf(szTmp, \"%.3f\", total_real);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9396:        case MTYPE_ENERGY:",
          "9397:        case MTYPE_ENERGY_GENERATED:",
          "9398:         musage = float(total_real) / divider;",
          "9400:         break;",
          "9401:        case MTYPE_GAS:",
          "9402:         musage = float(total_real) / divider;",
          "9404:         break;",
          "9405:        case MTYPE_WATER:",
          "9406:         musage = float(total_real) / (divider / 1000.0f);",
          "",
          "[Removed Lines]",
          "9399:         sprintf(szTmp, \"%g kWh\", musage);",
          "9403:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9399:         sprintf(szTmp, \"%.3f kWh\", musage);",
          "9403:         sprintf(szTmp, \"%.3f m3\", musage);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9435:       {",
          "9436:       case MTYPE_ENERGY:",
          "9437:       case MTYPE_ENERGY_GENERATED:",
          "9439:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9440:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9441:        break;",
          "9442:       case MTYPE_GAS:",
          "9444:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9445:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9446:        break;",
          "9447:       case MTYPE_WATER:",
          "9449:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9450:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9451:        break;",
          "",
          "[Removed Lines]",
          "9438:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9443:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "",
          "[Added Lines]",
          "9438:        sprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));",
          "9443:        sprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9501:        case MTYPE_ENERGY:",
          "9502:        case MTYPE_ENERGY_GENERATED:",
          "9503:         musage = float(total_real) / divider;",
          "9505:         break;",
          "9506:        case MTYPE_GAS:",
          "9507:         musage = float(total_real) / divider;",
          "9509:         break;",
          "9510:        case MTYPE_WATER:",
          "9511:         musage = float(total_real) / divider;",
          "9513:         break;",
          "9514:        case MTYPE_COUNTER:",
          "9515:         sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "[Removed Lines]",
          "9504:         sprintf(szTmp, \"%g kWh\", musage);",
          "9508:         sprintf(szTmp, \"%g m3\", musage);",
          "9512:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9504:         sprintf(szTmp, \"%.3f kWh\", musage);",
          "9508:         sprintf(szTmp, \"%.3f m3\", musage);",
          "9512:         sprintf(szTmp, \"%.3f m3\", musage);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9538:       {",
          "9539:       case MTYPE_ENERGY:",
          "9540:       case MTYPE_ENERGY_GENERATED:",
          "9542:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9543:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9544:        break;",
          "9545:       case MTYPE_GAS:",
          "9547:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9548:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9549:        break;",
          "9550:       case MTYPE_WATER:",
          "9552:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9553:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9554:        break;",
          "",
          "[Removed Lines]",
          "9541:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9546:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "",
          "[Added Lines]",
          "9541:        sprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));",
          "9546:        sprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9605:       {",
          "9606:       case MTYPE_ENERGY:",
          "9607:       case MTYPE_ENERGY_GENERATED:",
          "9609:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9610:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9611:        break;",
          "9612:       case MTYPE_GAS:",
          "9614:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9615:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9616:        break;",
          "9617:       case MTYPE_WATER:",
          "9619:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9620:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9621:        break;",
          "",
          "[Removed Lines]",
          "9608:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9613:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "",
          "[Added Lines]",
          "9608:        sprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));",
          "9613:        sprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9674:        case MTYPE_ENERGY:",
          "9675:        case MTYPE_ENERGY_GENERATED:",
          "9676:         musage = float(total_real) / divider;",
          "9678:         break;",
          "9679:        case MTYPE_GAS:",
          "9680:         musage = float(total_real) / divider;",
          "9682:         break;",
          "9683:        case MTYPE_WATER:",
          "9684:         musage = float(total_real) / divider;",
          "9686:         break;",
          "9687:        case MTYPE_COUNTER:",
          "9688:         sprintf(szTmp, \"%llu %s\", total_real, ValueUnits.c_str());",
          "",
          "[Removed Lines]",
          "9677:         sprintf(szTmp, \"%g kWh\", musage);",
          "9681:         sprintf(szTmp, \"%g m3\", musage);",
          "9685:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9677:         sprintf(szTmp, \"%.3f kWh\", musage);",
          "9681:         sprintf(szTmp, \"%.3f m3\", musage);",
          "9685:         sprintf(szTmp, \"%.3f m3\", musage);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9732:       case MTYPE_ENERGY:",
          "9733:       case MTYPE_ENERGY_GENERATED:",
          "9734:        musage = float(acounter) / divider;",
          "9736:        break;",
          "9737:       case MTYPE_GAS:",
          "9738:        musage = float(acounter) / divider;",
          "9740:        break;",
          "9741:       case MTYPE_WATER:",
          "9742:        musage = float(acounter) / divider;",
          "9744:        break;",
          "9745:       case MTYPE_COUNTER:",
          "9746:        sprintf(szTmp, \"%llu %s\", acounter, ValueUnits.c_str());",
          "",
          "[Removed Lines]",
          "9735:        sprintf(szTmp, \"%g kWh %s Watt\", musage, splitresults[1].c_str());",
          "9739:        sprintf(szTmp, \"%g m3\", musage);",
          "9743:        sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9735:        sprintf(szTmp, \"%.3f kWh %s Watt\", musage, splitresults[1].c_str());",
          "9739:        sprintf(szTmp, \"%.3f m3\", musage);",
          "9743:        sprintf(szTmp, \"%.3f m3\", musage);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9864:         total_real_deliv = powerdeliv - (total_min_deliv_1 + total_min_deliv_2);",
          "9866:         musage = double(total_real_usage) / EnergyDivider;",
          "9868:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9869:         musage = double(total_real_deliv) / EnergyDivider;",
          "9871:         root[\"result\"][ii][\"CounterDelivToday\"] = szTmp;",
          "9872:        }",
          "9873:        else",
          "9874:        {",
          "9876:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9877:         root[\"result\"][ii][\"CounterDelivToday\"] = szTmp;",
          "9878:        }",
          "",
          "[Removed Lines]",
          "9867:         sprintf(szTmp, \"%g kWh\", musage);",
          "9870:         sprintf(szTmp, \"%g kWh\", musage);",
          "9875:         sprintf(szTmp, \"%g kWh\", 0.0f);",
          "",
          "[Added Lines]",
          "9867:         sprintf(szTmp, \"%.3f kWh\", musage);",
          "9870:         sprintf(szTmp, \"%.3f kWh\", musage);",
          "9875:         sprintf(szTmp, \"%.3f kWh\", 0.0f);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "9983:        }",
          "9984:        if (total > 0)",
          "9985:        {",
          "9987:         strcat(szData, szTmp);",
          "9988:        }",
          "9989:        root[\"result\"][ii][\"Data\"] = szData;",
          "",
          "[Removed Lines]",
          "9986:         sprintf(szTmp, \", Total: %g kWh\", total / 1000.0f);",
          "",
          "[Added Lines]",
          "9986:         sprintf(szTmp, \", Total: %.3f kWh\", total / 1000.0f);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10019:         std::vector<std::string> sd2 = result2[0];",
          "10020:         double minimum = atof(sd2[0].c_str()) / divider;",
          "10023:         root[\"result\"][ii][\"Data\"] = szData;",
          "10024:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10025:         {",
          "",
          "[Removed Lines]",
          "10022:         sprintf(szData, \"%g kWh\", total);",
          "",
          "[Added Lines]",
          "10022:         sprintf(szData, \"%.3f kWh\", total);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10031:         }",
          "10032:         root[\"result\"][ii][\"Usage\"] = szData;",
          "10033:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10035:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "10036:        }",
          "10037:        else",
          "10038:        {",
          "10040:         root[\"result\"][ii][\"Data\"] = szData;",
          "10041:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10042:         {",
          "",
          "[Removed Lines]",
          "10034:         sprintf(szTmp, \"%g kWh\", total - minimum);",
          "10039:         sprintf(szData, \"%g kWh\", total);",
          "",
          "[Added Lines]",
          "10034:         sprintf(szTmp, \"%.3f kWh\", total - minimum);",
          "10039:         sprintf(szData, \"%.3f kWh\", total);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3685e83e0c9071ed20704f643d32dcf58837927e",
      "candidate_info": {
        "commit_hash": "3685e83e0c9071ed20704f643d32dcf58837927e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3685e83e0c9071ed20704f643d32dcf58837927e",
        "files": [
          "hardware/plugins/DelayedLink.h",
          "hardware/plugins/PluginMessages.h",
          "hardware/plugins/PluginTransports.h",
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Multiple bugfixes: 1. Objects returned to framework not released 2. Serial connections not released properly",
        "before_after_code_files": [
          "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h",
          "hardware/plugins/PluginMessages.h||hardware/plugins/PluginMessages.h",
          "hardware/plugins/PluginTransports.h||hardware/plugins/PluginTransports.h",
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h": [
          "File: hardware/plugins/DelayedLink.h -> hardware/plugins/DelayedLink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   DECLARE_PYTHON_SYMBOL(Py_ssize_t, PyList_Size, PyObject*);",
          "80:   DECLARE_PYTHON_SYMBOL(int, PyList_Append, PyObject* COMMA PyObject*);",
          "81:   DECLARE_PYTHON_SYMBOL(PyObject*, PyList_GetItem, PyObject* COMMA Py_ssize_t);",
          "82:   DECLARE_PYTHON_SYMBOL(void*, PyModule_GetState, PyObject*);",
          "83:   DECLARE_PYTHON_SYMBOL(PyObject*, PyState_FindModule, struct PyModuleDef*);",
          "84:   DECLARE_PYTHON_SYMBOL(void, PyErr_Clear, );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   DECLARE_PYTHON_SYMBOL(int, PyList_SetItem, PyObject* COMMA Py_ssize_t COMMA PyObject*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:      RESOLVE_PYTHON_SYMBOL(PyList_New);",
          "198:      RESOLVE_PYTHON_SYMBOL(PyList_Size);",
          "199:      RESOLVE_PYTHON_SYMBOL(PyList_GetItem);",
          "200:      RESOLVE_PYTHON_SYMBOL(PyList_Append);",
          "201:      RESOLVE_PYTHON_SYMBOL(PyModule_GetState);",
          "202:      RESOLVE_PYTHON_SYMBOL(PyState_FindModule);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:      RESOLVE_PYTHON_SYMBOL(PyList_SetItem);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373: #define PyList_New    pythonLib->PyList_New",
          "374: #define PyList_Size    pythonLib->PyList_Size",
          "375: #define PyList_GetItem   pythonLib->PyList_GetItem",
          "376: #define PyList_Append   pythonLib->PyList_Append",
          "377: #define PyModule_GetState  pythonLib->PyModule_GetState",
          "378: #define PyState_FindModule  pythonLib->PyState_FindModule",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378: #define PyList_SetItem   pythonLib->PyList_SetItem",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginMessages.h||hardware/plugins/PluginMessages.h": [
          "File: hardware/plugins/PluginMessages.h -> hardware/plugins/PluginMessages.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:    m_Name = __func__;",
          "30:    m_When = time(0);",
          "31:   };",
          "32:  public:",
          "33:   virtual const char* Name() { return m_Name.c_str(); };",
          "34:   virtual const CPlugin* Plugin() { return m_pPlugin; };",
          "36:  };",
          "",
          "[Removed Lines]",
          "35:   virtual void Process() = 0;",
          "",
          "[Added Lines]",
          "32:   virtual void ProcessLocked() = 0;",
          "36:   virtual void Process()",
          "37:   {",
          "38:    std::lock_guard<std::mutex> l(PythonMutex);",
          "39:    m_pPlugin->RestoreThread();",
          "40:    ProcessLocked();",
          "41:    m_pPlugin->ReleaseThread();",
          "42:   };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   InitializeMessage(CPlugin* pPlugin) : CPluginMessageBase(pPlugin) { m_Name = __func__; };",
          "57:   virtual void Process()",
          "58:   {",
          "59:    m_pPlugin->Initialise();",
          "60:   };",
          "61:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:    std::lock_guard<std::mutex> l(PythonMutex);",
          "69:   virtual void ProcessLocked() {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  public:",
          "70:   CCallbackBase(CPlugin* pPlugin, const std::string &Callback) : CPluginMessageBase(pPlugin), m_Callback(Callback) {};",
          "71:   virtual void Callback(PyObject* pParams) { if (m_Callback.length()) m_pPlugin->Callback(m_Callback, pParams); };",
          "79:   virtual const char* PythonName() { return m_Callback.c_str(); };",
          "80:  };",
          "",
          "[Removed Lines]",
          "72:   void Process()",
          "73:   {",
          "74:    std::lock_guard<std::mutex> l(PythonMutex);",
          "75:    m_pPlugin->RestoreThread();",
          "76:    ProcessLocked();",
          "77:    m_pPlugin->ReleaseThread();",
          "78:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "456:   virtual void ProcessLocked() = 0;",
          "457:  public:",
          "458:   CEventBase(CPlugin* pPlugin) : CPluginMessageBase(pPlugin) {};",
          "466:  };",
          "468:  class ReadEvent : public CEventBase, public CHasConnection",
          "",
          "[Removed Lines]",
          "459:   virtual void Process()",
          "460:   {",
          "461:    std::lock_guard<std::mutex> l(PythonMutex);",
          "462:    m_pPlugin->RestoreThread();",
          "463:    ProcessLocked();",
          "464:    m_pPlugin->ReleaseThread();",
          "465:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginTransports.h||hardware/plugins/PluginTransports.h": [
          "File: hardware/plugins/PluginTransports.h -> hardware/plugins/PluginTransports.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   bool    IsConnecting() { return m_bConnecting; };",
          "44:   bool    IsConnected() { return m_bConnected; };",
          "45:   time_t    LastSeen() { return m_tLastSeen; };",
          "46:   virtual bool  ThreadPoolRequired() { return false; };",
          "47:   long    TotalBytes() { return m_iTotalBytes; };",
          "48:   virtual void  VerifyConnection();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   virtual bool  AsyncDisconnect() { return false; };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   virtual void  handleRead(const boost::system::error_code& e, std::size_t bytes_transferred);",
          "71:   virtual void  handleWrite(const std::vector<byte>& pMessage);",
          "72:   virtual bool  handleDisconnect();",
          "73:   virtual bool  ThreadPoolRequired() { return true; };",
          "74:   boost::asio::ip::tcp::socket& Socket() { return *m_Socket; };",
          "75:   ~CPluginTransportTCP();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   virtual bool  AsyncDisconnect() { return IsConnected() || IsConnecting(); };",
          "",
          "---------------"
        ],
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:  {",
          "1002:   m_bIsStarted = false;",
          "1006:   try",
          "1007:   {",
          "1008:    PyEval_RestoreThread((PyThreadState*)m_mainworker.m_pluginsystem.PythonThread());",
          "",
          "[Removed Lines]",
          "1004:   std::lock_guard<std::mutex> l(PythonMutex);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1500:      _log.Log(LOG_NORM, \"(%s) Disconnect directive received for '%s:%s'.\", m_Name.c_str(), sAddress.c_str(), sPort.c_str());",
          "1501:    }",
          "1505:    {",
          "1506:     pConnection->pTransport->handleDisconnect();",
          "1507:     RemoveConnection(pConnection->pTransport);",
          "",
          "[Removed Lines]",
          "1504:    if (!pConnection->pTransport->IsConnected() && !pConnection->pTransport->IsConnecting())",
          "",
          "[Added Lines]",
          "1502:    if (!pConnection->pTransport->AsyncDisconnect())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1659:      {",
          "1660:       LogPythonException(sHandler);",
          "1661:      }",
          "1662:     }",
          "1663:     else if (m_bDebug & PDM_QUEUE) _log.Log(LOG_NORM, \"(%s) Message handler '%s' not callable, ignored.\", m_Name.c_str(), sHandler.c_str());",
          "1664:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1660:      Py_XDECREF(pReturnValue);",
          "",
          "---------------"
        ]
      }
    }
  ]
}