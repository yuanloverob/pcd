{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "975397828e6b44295385a059aa04135847415cc8",
      "candidate_info": {
        "commit_hash": "975397828e6b44295385a059aa04135847415cc8",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/975397828e6b44295385a059aa04135847415cc8",
        "files": [
          "hardware/EvohomeRadio.cpp",
          "hardware/MySensorsBase.cpp",
          "hardware/OnkyoAVTCP.cpp",
          "hardware/RFLinkBase.cpp",
          "hardware/SBFSpot.cpp",
          "hardware/plugins/PythonObjects.cpp",
          "main/SQLHelper.cpp",
          "main/WebServer.cpp",
          "main/dzVents.cpp",
          "main/mainworker.cpp",
          "notifications/NotificationHelper.cpp"
        ],
        "message": "Some code cleanup",
        "before_after_code_files": [
          "hardware/EvohomeRadio.cpp||hardware/EvohomeRadio.cpp",
          "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp",
          "hardware/OnkyoAVTCP.cpp||hardware/OnkyoAVTCP.cpp",
          "hardware/RFLinkBase.cpp||hardware/RFLinkBase.cpp",
          "hardware/SBFSpot.cpp||hardware/SBFSpot.cpp",
          "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/dzVents.cpp||main/dzVents.cpp",
          "main/mainworker.cpp||main/mainworker.cpp",
          "notifications/NotificationHelper.cpp||notifications/NotificationHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hardware/EvohomeRadio.cpp||hardware/EvohomeRadio.cpp": [
          "File: hardware/EvohomeRadio.cpp -> hardware/EvohomeRadio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1731:     std::vector<std::vector<std::string> > result;",
          "1732:     result = m_sql.safe_query(\"SELECT HardwareID, DeviceID FROM DeviceStatus WHERE (HardwareID==%d) AND (Type==%d) AND (Unit > 12) AND (Unit <= 24)\", HwdID, (int)pTypeEvohomeZone);",
          "1734:     {",
          "1735:      std::string devname = \"Zone Temp\";",
          "1736:      m_sql.UpdateValue(HwdID, \"FFFFFF\", 13, pTypeEvohomeZone, sTypeEvohomeZone, 10, 255, 0, \"0.0;0.0;Auto\", devname);",
          "",
          "[Removed Lines]",
          "1733:     if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1733:     if (result.empty())",
          "",
          "---------------"
        ],
        "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp": [
          "File: hardware/MySensorsBase.cpp -> hardware/MySensorsBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1636: {",
          "1637:  std::vector<std::vector<std::string> > result;",
          "1638:  result = m_sql.safe_query(\"SELECT ROWID FROM MySensorsVars WHERE (HardwareID=%d) AND (NodeID=%d) AND (ChildID=%d) AND (VarID=%d)\", m_HwdID, NodeID, ChildID, VarID);",
          "1640:  {",
          "1642:   m_sql.safe_query(\"INSERT INTO MySensorsVars (HardwareID, NodeID, ChildID, VarID, [Value]) VALUES (%d, %d, %d, %d,'%q')\", m_HwdID, NodeID, ChildID, VarID, svalue.c_str());",
          "",
          "[Removed Lines]",
          "1639:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1639:  if (result.empty())",
          "",
          "---------------"
        ],
        "hardware/OnkyoAVTCP.cpp||hardware/OnkyoAVTCP.cpp": [
          "File: hardware/OnkyoAVTCP.cpp -> hardware/OnkyoAVTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:  std::vector<std::vector<std::string> > result;",
          "462:  std::string options_str;",
          "463:  result = m_sql.safe_query(\"SELECT ID FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID=='%08X')\", m_HwdID, ID);",
          "465:   if (!options && switch_types[ID].options) {",
          "466:    options_str = m_sql.FormatDeviceOptions(m_sql.BuildDeviceOptions(switch_types[ID].options, false));",
          "467:    options = options_str.c_str();",
          "",
          "[Removed Lines]",
          "464:  if (result.size() == 0) {",
          "",
          "[Added Lines]",
          "464:  if (result.empty()) {",
          "",
          "---------------"
        ],
        "hardware/RFLinkBase.cpp||hardware/RFLinkBase.cpp": [
          "File: hardware/RFLinkBase.cpp -> hardware/RFLinkBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  switchType = 0;",
          "264:  std::vector<std::vector<std::string> > result;",
          "265:  result = m_sql.safe_query(\"SELECT SwitchType FROM DeviceStatus WHERE (DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\", ID, unit, devType, subType);",
          "267:  {",
          "268:   switchType = atoi(result[0][0].c_str());",
          "269:  }",
          "",
          "[Removed Lines]",
          "266:  if (result.size() != 0)",
          "",
          "[Added Lines]",
          "266:  if (!result.empty())",
          "",
          "---------------"
        ],
        "hardware/SBFSpot.cpp||hardware/SBFSpot.cpp": [
          "File: hardware/SBFSpot.cpp -> hardware/SBFSpot.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:     sprintf(szDate, \"%04d-%02d-%02d\", year, month, day);",
          "324:     result = m_sql.safe_query(\"SELECT Value FROM Meter_Calendar WHERE (DeviceRowID==%\" PRIu64 \") AND (Date=='%q')\", DevID, szDate);",
          "326:     {",
          "328:      m_sql.safe_query(\"INSERT INTO Meter_Calendar (DeviceRowID, Value, Date) VALUES ('%\" PRIu64 \"', '%llu', '%q')\", DevID, ulCounter, szDate);",
          "",
          "[Removed Lines]",
          "325:     if (result.size() == 0)",
          "",
          "[Added Lines]",
          "325:     if (result.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390:       result = m_sql.safe_query(\"SELECT Value FROM Meter_Calendar WHERE (DeviceRowID==%\" PRIu64 \") AND (Date=='%q')\",",
          "391:        DevID, szDate);",
          "393:       {",
          "395:        m_sql.safe_query(\"INSERT INTO Meter_Calendar (DeviceRowID, Value, Date) VALUES ('%\" PRIu64 \"', '%llu', '%q')\",",
          "",
          "[Removed Lines]",
          "392:       if (result.size() == 0)",
          "",
          "[Added Lines]",
          "392:       if (result.empty())",
          "",
          "---------------"
        ],
        "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp": [
          "File: hardware/plugins/PythonObjects.cpp -> hardware/plugins/PythonObjects.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     std::vector<std::vector<std::string> > result;",
          "231:     result = m_sql.safe_query(\"SELECT Name FROM CustomImages WHERE (ID==%d)\", self->ImageID);",
          "233:     {",
          "234:      m_sql.safe_query(\"DELETE FROM CustomImages WHERE (ID==%d)\", self->ImageID);",
          "",
          "[Removed Lines]",
          "232:     if (result.size() != 0)",
          "",
          "[Added Lines]",
          "232:     if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "709:     {",
          "710:      std::vector<std::vector<std::string> > result;",
          "711:      result = m_sql.safe_query(\"SELECT Name FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit==%d)\", self->HwdID, self->Unit);",
          "713:      {",
          "714:       std::string sValue = PyUnicode_AsUTF8(self->sValue);",
          "715:       std::string sColor = _tColor(std::string(PyUnicode_AsUTF8(self->Color))).toJSONString(); //Parse the color to detect incorrectly formatted color data",
          "",
          "[Removed Lines]",
          "712:      if (result.size() == 0)",
          "",
          "[Added Lines]",
          "712:      if (result.empty())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     std::vector<std::vector<std::string> > result;",
          "1014:     result = m_sql.safe_query(\"SELECT Name FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit==%d)\", self->HwdID, self->Unit);",
          "1016:     {",
          "1017:      m_sql.safe_query(\"DELETE FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit==%d)\", self->HwdID, self->Unit);",
          "",
          "[Removed Lines]",
          "1015:     if (result.size() != 0)",
          "",
          "[Added Lines]",
          "1015:     if (!result.empty())",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:  std::vector<std::vector<std::string> > result, result2;",
          "3875:  result = safe_query(\"SELECT ID FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\", HardwareID, ID, unit, devType, subType);",
          "3877:   return devRowID; //should never happen, because it was previously inserted if non-existent",
          "3879:  std::string idx = result[0][0];",
          "",
          "[Removed Lines]",
          "3876:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "3876:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4119:  result = safe_query(",
          "4120:   \"SELECT ID FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\",",
          "4121:   HardwareID, ID, unit, devType, subType);",
          "4123:  {",
          "4124:   _log.Log(LOG_ERROR, \"Serious database error, problem getting ID from DeviceStatus!\");",
          "4125:   return -1;",
          "",
          "[Removed Lines]",
          "4122:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "4122:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4133: bool CSQLHelper::DoesDeviceExist(const int HardwareID, const char* ID, const unsigned char unit, const unsigned char devType, const unsigned char subType) {",
          "4134:  std::vector<std::vector<std::string> > result;",
          "4135:  result = safe_query(\"SELECT ID,Name FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\", HardwareID, ID, unit, devType, subType);",
          "4137:   return false;",
          "4138:  }",
          "4139:  else {",
          "",
          "[Removed Lines]",
          "4136:  if (result.size() == 0) {",
          "",
          "[Added Lines]",
          "4136:  if (result.empty()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4153:  bool bSameDeviceStatusValue = false;",
          "4154:  std::vector<std::vector<std::string> > result;",
          "4155:  result = safe_query(\"SELECT ID,Name, Used, SwitchType, nValue, sValue, LastUpdate, Options FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\", HardwareID, ID, unit, devType, subType);",
          "4157:  {",
          "4159:   ulID = InsertDevice(HardwareID, ID, unit, devType, subType, 0, nValue, sValue, devname, signallevel, batterylevel);",
          "",
          "[Removed Lines]",
          "4156:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "4156:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4600:  result = safe_query(",
          "4601:   \"SELECT AddjValue,AddjMulti FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\",",
          "4602:   HardwareID, ID, unit, devType, subType);",
          "4604:  {",
          "4605:   AddjValue = static_cast<float>(atof(result[0][0].c_str()));",
          "4606:   AddjMulti = static_cast<float>(atof(result[0][1].c_str()));",
          "",
          "[Removed Lines]",
          "4603:  if (result.size() != 0)",
          "",
          "[Added Lines]",
          "4603:  if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4614:  result = safe_query(",
          "4615:   \"SELECT SwitchType FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\",",
          "4616:   HardwareID, ID, unit, devType, subType);",
          "4618:  {",
          "4619:   meterType = atoi(result[0][0].c_str());",
          "4620:  }",
          "",
          "[Removed Lines]",
          "4617:  if (result.size() != 0)",
          "",
          "[Added Lines]",
          "4617:  if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4628:  result = safe_query(",
          "4629:   \"SELECT AddjValue2,AddjMulti2 FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\",",
          "4630:   HardwareID, ID, unit, devType, subType);",
          "4632:  {",
          "4633:   AddjValue = static_cast<float>(atof(result[0][0].c_str()));",
          "4634:   AddjMulti = static_cast<float>(atof(result[0][1].c_str()));",
          "",
          "[Removed Lines]",
          "4631:  if (result.size() != 0)",
          "",
          "[Added Lines]",
          "4631:  if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4658:  std::vector<std::vector<std::string> > result;",
          "4659:  result = safe_query(\"SELECT ROWID FROM Preferences WHERE (Key='%q')\",",
          "4660:   Key.c_str());",
          "4662:  {",
          "4664:   result = safe_query(\"INSERT INTO Preferences (Key, nValue, sValue) VALUES ('%q', %d,'%q')\",",
          "",
          "[Removed Lines]",
          "4661:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "4661:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4758:  std::vector<std::vector<std::string> > result;",
          "4759:  result = safe_query(\"SELECT ROWID FROM BackupLog WHERE (Key='%q')\", Key);",
          "4761:  {",
          "4763:   safe_query(",
          "",
          "[Removed Lines]",
          "4760:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "4760:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4796:  std::vector<std::vector<std::string> > result;",
          "4798:  result = safe_query(\"SELECT COUNT(*) FROM Timers WHERE (DeviceRowID==%\" PRIu64 \") AND (TimerPlan==%d)\", Idx, m_ActiveTimerPlan);",
          "4800:  {",
          "4801:   std::vector<std::string> sd = result[0];",
          "4802:   int totaltimers = atoi(sd[0].c_str());",
          "",
          "[Removed Lines]",
          "4799:  if (result.size() != 0)",
          "",
          "[Added Lines]",
          "4799:  if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4804:    return true;",
          "4805:  }",
          "4806:  result = safe_query(\"SELECT COUNT(*) FROM SetpointTimers WHERE (DeviceRowID==%\" PRIu64 \") AND (TimerPlan==%d)\", Idx, m_ActiveTimerPlan);",
          "4808:  {",
          "4809:   std::vector<std::string> sd = result[0];",
          "4810:   int totaltimers = atoi(sd[0].c_str());",
          "",
          "[Removed Lines]",
          "4807:  if (result.size() != 0)",
          "",
          "[Added Lines]",
          "4807:  if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4829:  std::vector<std::vector<std::string> > result;",
          "4831:  result = safe_query(\"SELECT COUNT(*) FROM SceneTimers WHERE (SceneRowID==%\" PRIu64 \") AND (TimerPlan==%d)\", Idx, m_ActiveTimerPlan);",
          "4833:   return false;",
          "4834:  std::vector<std::string> sd = result[0];",
          "4835:  int totaltimers = atoi(sd[0].c_str());",
          "",
          "[Removed Lines]",
          "4832:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "4832:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8352:       result = safe_query(\"SELECT ID FROM CustomImages WHERE Base='%q'\", IconBase.c_str());",
          "8354:       {",
          "8355:        ErrorMessage = \"Error adding new row to database!\";",
          "8356:        if (iTotalAdded > 0)",
          "",
          "[Removed Lines]",
          "8353:       if (result.size() == 0)",
          "",
          "[Added Lines]",
          "8353:       if (result.empty())",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2199:    std::vector<std::vector<std::string> > result;",
          "2200:    result = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==%d) AND (PlanID=='%q')\",",
          "2201:     activeidx.c_str(), activetype, idx.c_str());",
          "2203:    {",
          "2204:     m_sql.safe_query(",
          "2205:      \"INSERT INTO DeviceToPlansMap (DevSceneType,DeviceRowID, PlanID) VALUES (%d,'%q','%q')\",",
          "",
          "[Removed Lines]",
          "2202:    if (result.size() == 0)",
          "",
          "[Added Lines]",
          "2202:    if (result.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3329:     result = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",",
          "3330:      subidx.c_str(), idx.c_str());",
          "3332:     {",
          "3333:      root[\"status\"] = \"OK\";",
          "3334:      root[\"title\"] = \"AddSubDevice\";",
          "",
          "[Removed Lines]",
          "3331:     if (result.size() == 0)",
          "",
          "[Added Lines]",
          "3331:     if (result.empty())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3415:      result = m_sql.safe_query(\"SELECT ID FROM SceneDevices WHERE (DeviceRowID=='%q') AND (SceneRowID =='%q') AND (OnDelay == %d)\",",
          "3416:       devidx.c_str(), idx.c_str(), ondelay);",
          "3417:     }",
          "3419:     {",
          "3420:      root[\"status\"] = \"OK\";",
          "3421:      root[\"title\"] = \"AddSceneDevice\";",
          "",
          "[Removed Lines]",
          "3418:     if (result.size() == 0)",
          "",
          "[Added Lines]",
          "3418:     if (result.empty())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4067:      \" AND (DevSceneType==%d) AND (DevSceneRowID=='%q')\"",
          "4068:      \" AND (DevSceneWhen==%d)\",",
          "4069:      idx.c_str(), activetype, activeidx.c_str(), activewhen);",
          "4071:     {",
          "4072:      root[\"status\"] = \"OK\";",
          "4073:      root[\"title\"] = \"AddCameraActiveDevice\";",
          "",
          "[Removed Lines]",
          "4070:     if (result.size() == 0)",
          "",
          "[Added Lines]",
          "4070:     if (result.empty())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5324:       result = m_sql.safe_query(",
          "5325:        \"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",",
          "5326:        ID.c_str(), maindeviceidx.c_str());",
          "5328:       {",
          "5330:        result = m_sql.safe_query(",
          "",
          "[Removed Lines]",
          "5327:       if (result.size() == 0)",
          "",
          "[Added Lines]",
          "5327:       if (result.empty())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "12625:      result = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",",
          "12626:       idx.c_str(), maindeviceidx.c_str());",
          "12628:      {",
          "12630:       m_sql.safe_query(",
          "",
          "[Removed Lines]",
          "12627:      if (result.size() == 0)",
          "",
          "[Added Lines]",
          "12627:      if (result.empty())",
          "",
          "---------------"
        ],
        "main/dzVents.cpp||main/dzVents.cpp": [
          "File: main/dzVents.cpp -> main/dzVents.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "727:   std::vector<std::vector<std::string> > result;",
          "728:   result = m_sql.safe_query(\"SELECT Description FROM Scenes WHERE (ID=='%d')\", sgitem.ID);",
          "730:    description = \"\";",
          "731:   else",
          "732:    description = result[0][0].c_str();",
          "",
          "[Removed Lines]",
          "729:   if (result.size() == 0)",
          "",
          "[Added Lines]",
          "729:   if (result.empty())",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2986:   result = m_sql.safe_query(",
          "2987:    \"SELECT ID FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\", HwdID, ID.c_str(), Unit, devType, subType);",
          "2989:   {",
          "2990:    uint64_t ulID;",
          "2991:    std::stringstream s_str(result[0][0]);",
          "",
          "[Removed Lines]",
          "2988:   if (result.size() != 0)",
          "",
          "[Added Lines]",
          "2988:   if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5838:   result = m_sql.safe_query(",
          "5839:    \"SELECT ID,Name FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\",",
          "5840:    HwdID, ID.c_str(), Unit, devType, subType);",
          "5842:   {",
          "5843:    uint64_t ulID;",
          "5844:    std::stringstream s_str(result[0][0]);",
          "",
          "[Removed Lines]",
          "5841:   if (result.size() != 0)",
          "",
          "[Added Lines]",
          "5841:   if (!result.empty())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5859:   result = m_sql.safe_query(",
          "5860:    \"SELECT ID,Name FROM DeviceStatus WHERE (HardwareID=%d AND DeviceID='%q' AND Unit=%d AND Type=%d AND SubType=%d)\",",
          "5861:    HwdID, ID.c_str(), Unit, devType, subType);",
          "5863:   {",
          "5864:    uint64_t ulID;",
          "5865:    std::stringstream s_str(result[0][0]);",
          "",
          "[Removed Lines]",
          "5862:   if (result.size() != 0)",
          "",
          "[Added Lines]",
          "5862:   if (!result.empty())",
          "",
          "---------------"
        ],
        "notifications/NotificationHelper.cpp||notifications/NotificationHelper.cpp": [
          "File: notifications/NotificationHelper.cpp -> notifications/NotificationHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:  std::vector<std::vector<std::string> > result;",
          "822:  result = m_sql.safe_query(\"SELECT SwitchType, CustomImage FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\", Idx);",
          "824:   return false;",
          "826:  std::string szExtraData = \"|Name=\" + devicename + \"|SwitchType=\" + result[0][0] + \"|CustomImage=\" + result[0][1] + \"|\";",
          "",
          "[Removed Lines]",
          "823:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "823:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882:  std::vector<std::vector<std::string> > result;",
          "883:  result = m_sql.safe_query(\"SELECT SwitchType FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\", Idx);",
          "885:   return false;",
          "886:  std::string szExtraData = \"|Name=\" + devicename + \"|SwitchType=\" + result[0][0] + \"|\";",
          "",
          "[Removed Lines]",
          "884:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "884:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "970:  result = m_sql.safe_query(\"SELECT SwitchType, CustomImage FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\",",
          "971:   Idx);",
          "973:   return false;",
          "974:  _eSwitchType switchtype = (_eSwitchType)atoi(result[0][0].c_str());",
          "975:  std::string szExtraData = \"|Name=\" + devicename + \"|SwitchType=\" + result[0][0] + \"|CustomImage=\" + result[0][1] + \"|\";",
          "",
          "[Removed Lines]",
          "972:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "972:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1083:  result = m_sql.safe_query(\"SELECT SwitchType, CustomImage, Options FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\",",
          "1084:   Idx);",
          "1086:   return false;",
          "1087:  _eSwitchType switchtype = (_eSwitchType)atoi(result[0][0].c_str());",
          "1088:  std::string szExtraData = \"|Name=\" + devicename + \"|SwitchType=\" + result[0][0] + \"|CustomImage=\" + result[0][1] + \"|\";",
          "",
          "[Removed Lines]",
          "1085:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1085:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1176:  result = m_sql.safe_query(\"SELECT AddjValue,AddjMulti FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\",",
          "1177:   Idx);",
          "1179:   return false;",
          "1181:  double AddjMulti = atof(result[0][1].c_str());",
          "",
          "[Removed Lines]",
          "1178:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1178:  if (result.empty())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1269:        continue;",
          "1270:       std::vector<std::vector<std::string> > result;",
          "1271:       result = m_sql.safe_query(\"SELECT SwitchType FROM DeviceStatus WHERE (ID=%\" PRIu64 \")\", Idx);",
          "1273:        continue;",
          "1274:       szExtraData = \"|Name=\" + itt2->DeviceName + \"|SwitchType=\" + result[0][0] + \"|\";",
          "1275:       std::string ltype = Notification_Type_Desc(NTYPE_LASTUPDATE, 0);",
          "",
          "[Removed Lines]",
          "1272:       if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1272:       if (result.empty())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1418:     }",
          "1419:     std::vector<std::vector<std::string> > result;",
          "1420:     result = m_sql.safe_query(\"SELECT ID FROM Notifications WHERE (ID=='%\" PRIu64 \"') AND (Params=='%q')\", itt2->ID, itt2->Params.c_str());",
          "1422:      return false;",
          "1424:     m_sql.safe_query(\"UPDATE Notifications SET CustomMessage='%q' WHERE ID=='%\" PRIu64 \"'\", szTmp.c_str(), itt2->ID);",
          "",
          "[Removed Lines]",
          "1421:     if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1421:     if (result.empty())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1515:  m_sql.GetPreferencesVar(\"NotificationSwitchInterval\", m_NotificationSwitchInterval);",
          "1517:  result = m_sql.safe_query(\"SELECT ID, DeviceRowID, Params, CustomMessage, ActiveSystems, Priority, SendAlways, LastSend FROM Notifications ORDER BY DeviceRowID\");",
          "1519:   return;",
          "1521:  time_t mtime = mytime(NULL);",
          "",
          "[Removed Lines]",
          "1518:  if (result.size() == 0)",
          "",
          "[Added Lines]",
          "1518:  if (result.empty())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "593866dde364c0c7ca2f0226c5788c53634cbba1",
      "candidate_info": {
        "commit_hash": "593866dde364c0c7ca2f0226c5788c53634cbba1",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/593866dde364c0c7ca2f0226c5788c53634cbba1",
        "files": [
          "hardware/EnOceanESP3.cpp",
          "hardware/EnOceanESP3.h"
        ],
        "message": "EnOcean3 implemented EPP D2-03-0A",
        "before_after_code_files": [
          "hardware/EnOceanESP3.cpp||hardware/EnOceanESP3.cpp",
          "hardware/EnOceanESP3.h||hardware/EnOceanESP3.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/EnOceanESP3.cpp||hardware/EnOceanESP3.cpp": [
          "File: hardware/EnOceanESP3.cpp -> hardware/EnOceanESP3.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "429: {",
          "430:  RequestStart();",
          "432:  m_retrycntr=ENOCEAN_RETRY_DELAY*5; //will force reconnect first thing",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:  Init();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:  return true;",
          "451: }",
          "454: void CEnOceanESP3::Do_Work()",
          "455: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455: void CEnOceanESP3::Init()",
          "456: {",
          "457:  ReloadVLDNodes();",
          "458: }",
          "460: void CEnOceanESP3::ReloadVLDNodes()",
          "461: {",
          "462:  m_VLDNodes.clear();",
          "463:  std::vector<std::vector<std::string> > result;",
          "464:  result = m_sql.safe_query(\"SELECT ID, DeviceID, Manufacturer, Profile, [Type] FROM EnoceanSensors WHERE (HardwareID==%d)\", m_HwdID);",
          "465:  if (!result.empty())",
          "466:  {",
          "467:   for (const auto & itt : result)",
          "468:   {",
          "469:    std::vector<std::string> sd = itt;",
          "470:    _tVLDNode node;",
          "471:    node.idx = atoi(sd[0].c_str());",
          "472:    node.manufacturer = atoi(sd[2].c_str());",
          "473:    node.profile = (uint8_t)atoi(sd[3].c_str());",
          "474:    node.type = (uint8_t)atoi(sd[4].c_str());",
          "477:    std::stringstream s_strid;",
          "478:    s_strid << std::hex << std::uppercase << sd[1];",
          "479:    uint32_t devid;",
          "480:    s_strid >> devid;",
          "481:    m_VLDNodes[devid] = node;",
          "482:   }",
          "483:  }",
          "484: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1215:      }",
          "1216:      else",
          "1217:       _log.Log(LOG_NORM, \"EnOcean: Sender_ID 0x%08lX already in the database\", id);",
          "1219:     }",
          "1220:     else // RORG_4BS_TEACHIN_LRN_BIT is 1 -> Data datagram",
          "1221:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1250:      ReloadVLDNodes();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1891:        }",
          "1892:        else",
          "1893:         _log.Log(LOG_NORM, \"EnOcean: Sender_ID 0x%08lX already in the database\", id);",
          "1894:       }",
          "1896:       if((rorg == 0xD2) && (func == 0x01) && ( (type == 0x12) || (type == 0x0F) ))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1926:        ReloadVLDNodes();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1943:     unsigned char func = (m_buffer[1] >> 2) & 0x3F;",
          "1944:     unsigned char type = ((m_buffer[2] >> 3) & 0x1F) | ((m_buffer[1] & 0x03) << 5);",
          "1947:     {",
          "1960:     }",
          "1962:     {",
          "1965:      {",
          "2010: #ifdef ENOCEAN_BUTTON_DEBUG",
          "2017: #endif //ENOCEAN_BUTTON_DEBUG",
          "2031:      }",
          "2035:      }",
          "2037:      {",
          "2051:      }",
          "2052:     }",
          "2053:    }",
          "",
          "[Removed Lines]",
          "1946:     if ((m_buffer[1] == 0x61) || (m_buffer[1] == 0x63))",
          "1948:      _log.Log(LOG_NORM, \"EnOcean message VLD %02X\", m_buffer[1]);",
          "1950:      unsigned char DATA_BYTE0 = m_buffer[2]; //1 = simple press, 2=double press, 3=long press, 4=press release",
          "1952:      unsigned char ID_BYTE3 = m_buffer[3];",
          "1953:      unsigned char ID_BYTE2 = m_buffer[4];",
          "1954:      unsigned char ID_BYTE1 = m_buffer[5];",
          "1955:      unsigned char ID_BYTE0 = m_buffer[6];",
          "1957:      unsigned long id = (ID_BYTE3 << 24) + (ID_BYTE2 << 16) + (ID_BYTE1 << 8) + ID_BYTE0;",
          "1958:      SendGeneralSwitch(id, DATA_BYTE0, 255, 1, 0, \"Switch\", 12);",
          "1959:      return;",
          "1961:     else",
          "1963:      _log.Log(LOG_NORM, \"EnOcean message VLD: func: %02X Type: %02X\", func, type);",
          "1964:      if (func == 0x01)",
          "1967:       switch (type)",
          "1968:       {",
          "1969:       case 0x0C: // D2-01-0C",
          "1970:       {",
          "1971:        unsigned char channel = m_buffer[2] & 0x7;",
          "1973:        unsigned char dim_power = m_buffer[3] & 0x7F;  // 0=off, 0x64=100%",
          "1975:        unsigned char ID_BYTE3 = m_buffer[4];",
          "1976:        unsigned char ID_BYTE2 = m_buffer[5];",
          "1977:        unsigned char ID_BYTE1 = m_buffer[6];",
          "1978:        unsigned char ID_BYTE0 = m_buffer[7];",
          "1979:        long id = (ID_BYTE3 << 24) + (ID_BYTE2 << 16) + (ID_BYTE1 << 8) + ID_BYTE0;",
          "1982:        char szDeviceID[20];",
          "1983:        std::vector<std::vector<std::string> > result;",
          "1984:        sprintf(szDeviceID, \"%08X\", (unsigned int)id);",
          "1986:        result = m_sql.safe_query(\"SELECT ID, Manufacturer, Profile, [Type] FROM EnoceanSensors WHERE (HardwareID==%d) AND (DeviceID=='%q')\", m_HwdID, szDeviceID);",
          "1987:        if (result.size() < 1)",
          "1988:        {",
          "1989:         _log.Log(LOG_NORM, \"EnOcean: Need Teach-In for %s\", szDeviceID);",
          "1990:         return;",
          "1991:        }",
          "1993:        RBUF tsen;",
          "1994:        memset(&tsen, 0, sizeof(RBUF));",
          "1995:        tsen.LIGHTING2.packetlength = sizeof(tsen.LIGHTING2) - 1;",
          "1996:        tsen.LIGHTING2.packettype = pTypeLighting2;",
          "1997:        tsen.LIGHTING2.subtype = sTypeAC;",
          "1998:        tsen.LIGHTING2.seqnbr = 0;",
          "2000:        tsen.LIGHTING2.id1 = (BYTE)ID_BYTE3;",
          "2001:        tsen.LIGHTING2.id2 = (BYTE)ID_BYTE2;",
          "2002:        tsen.LIGHTING2.id3 = (BYTE)ID_BYTE1;",
          "2003:        tsen.LIGHTING2.id4 = (BYTE)ID_BYTE0;",
          "2004:        tsen.LIGHTING2.level = dim_power;",
          "2005:        tsen.LIGHTING2.rssi = 12;",
          "2007:        tsen.LIGHTING2.unitcode = channel + 1;",
          "2008:        tsen.LIGHTING2.cmnd = (dim_power > 0) ? light2_sOn : light2_sOff;",
          "2011:        _log.Log(LOG_NORM, \"EnOcean message: 0x%02X Node 0x%08x UnitID: %02X cmd: %02X \",",
          "2012:         DATA_BYTE3,",
          "2013:         id,",
          "2014:         tsen.LIGHTING2.unitcode,",
          "2015:         tsen.LIGHTING2.cmnd",
          "2016:        );",
          "2020:        sDecodeRXMessage(this, (const unsigned char *)&tsen.LIGHTING2, NULL, 255);",
          "2027:        return;",
          "2028:       }",
          "2029:       break;",
          "2030:       }",
          "2032:      else if (func == 0x02)",
          "2033:      {",
          "2036:      else if (func == 0x03)",
          "2039:       switch (type)",
          "2040:       {",
          "2041:       case 0x00: // D3-03-00 Light, Switching and Blind Control Type",
          "2042:        break;",
          "2043:       case 0x0A: // D3-03-0A Push Button \u2013 Single Button",
          "2044:        while (1 == 0);",
          "2045:        break;",
          "2046:       case 0x10: // D3-03-10 Mechanical Handle",
          "2047:        break;",
          "2048:       case 0x20: // D3-03-20 Beacon with Vibration Detection",
          "2049:        break;",
          "2050:       }",
          "",
          "[Added Lines]",
          "1979:     if (m_DataSize > 7)",
          "1981:      unsigned char ID_BYTE3 = m_buffer[m_DataSize - 5];",
          "1982:      unsigned char ID_BYTE2 = m_buffer[m_DataSize - 4];",
          "1983:      unsigned char ID_BYTE1 = m_buffer[m_DataSize - 3];",
          "1984:      unsigned char ID_BYTE0 = m_buffer[m_DataSize - 2];",
          "1985:      unsigned long id = (ID_BYTE3 << 24) + (ID_BYTE2 << 16) + (ID_BYTE1 << 8) + ID_BYTE0;",
          "1987:      auto itt = m_VLDNodes.find(id);",
          "1988:      if (itt != m_VLDNodes.end())",
          "1989:      {",
          "1990:       uint8_t Profile = itt->second.profile;",
          "1991:       uint8_t iType = itt->second.type;",
          "1994:       _log.Log(LOG_NORM, \"EnOcean message VLD: Profile: %02X Type: %02X\", Profile, iType);",
          "1996:       switch (Profile)",
          "1997:       {",
          "1998:       case 0x03:",
          "2000:        if (iType == 0x0A)",
          "2001:        {",
          "2002:         int battery = (int)double((255.0 / 100.0)*m_buffer[1]);",
          "2003:         unsigned char DATA_BYTE0 = m_buffer[2]; //1 = simple press, 2=double press, 3=long press, 4=press release",
          "2004:         SendGeneralSwitch(id, DATA_BYTE0, battery, 1, 0, \"Switch\", 12);",
          "2005:         return;",
          "2006:        }",
          "2007:        break;",
          "2008:       }",
          "2009:      }",
          "2011:     _log.Log(LOG_NORM, \"EnOcean message VLD: func: %02X Type: %02X\", func, type);",
          "2012:     if (func == 0x01)",
          "2015:      switch (type)",
          "2017:      case 0x0C: // D2-01-0C",
          "2018:      {",
          "2019:       unsigned char channel = m_buffer[2] & 0x7;",
          "2021:       unsigned char dim_power = m_buffer[3] & 0x7F;  // 0=off, 0x64=100%",
          "2023:       unsigned char ID_BYTE3 = m_buffer[4];",
          "2024:       unsigned char ID_BYTE2 = m_buffer[5];",
          "2025:       unsigned char ID_BYTE1 = m_buffer[6];",
          "2026:       unsigned char ID_BYTE0 = m_buffer[7];",
          "2027:       long id = (ID_BYTE3 << 24) + (ID_BYTE2 << 16) + (ID_BYTE1 << 8) + ID_BYTE0;",
          "2030:       char szDeviceID[20];",
          "2031:       std::vector<std::vector<std::string> > result;",
          "2032:       sprintf(szDeviceID, \"%08X\", (unsigned int)id);",
          "2034:       result = m_sql.safe_query(\"SELECT ID, Manufacturer, Profile, [Type] FROM EnoceanSensors WHERE (HardwareID==%d) AND (DeviceID=='%q')\", m_HwdID, szDeviceID);",
          "2035:       if (result.size() < 1)",
          "2036:       {",
          "2037:        _log.Log(LOG_NORM, \"EnOcean: Need Teach-In for %s\", szDeviceID);",
          "2038:        return;",
          "2039:       }",
          "2041:       RBUF tsen;",
          "2042:       memset(&tsen, 0, sizeof(RBUF));",
          "2043:       tsen.LIGHTING2.packetlength = sizeof(tsen.LIGHTING2) - 1;",
          "2044:       tsen.LIGHTING2.packettype = pTypeLighting2;",
          "2045:       tsen.LIGHTING2.subtype = sTypeAC;",
          "2046:       tsen.LIGHTING2.seqnbr = 0;",
          "2048:       tsen.LIGHTING2.id1 = (BYTE)ID_BYTE3;",
          "2049:       tsen.LIGHTING2.id2 = (BYTE)ID_BYTE2;",
          "2050:       tsen.LIGHTING2.id3 = (BYTE)ID_BYTE1;",
          "2051:       tsen.LIGHTING2.id4 = (BYTE)ID_BYTE0;",
          "2052:       tsen.LIGHTING2.level = dim_power;",
          "2053:       tsen.LIGHTING2.rssi = 12;",
          "2055:       tsen.LIGHTING2.unitcode = channel + 1;",
          "2056:       tsen.LIGHTING2.cmnd = (dim_power > 0) ? light2_sOn : light2_sOff;",
          "2059:       _log.Log(LOG_NORM, \"EnOcean message: 0x%02X Node 0x%08x UnitID: %02X cmd: %02X \",",
          "2060:        DATA_BYTE3,",
          "2061:        id,",
          "2062:        tsen.LIGHTING2.unitcode,",
          "2063:        tsen.LIGHTING2.cmnd",
          "2064:       );",
          "2068:       sDecodeRXMessage(this, (const unsigned char *)&tsen.LIGHTING2, NULL, 255);",
          "2075:       return;",
          "2077:      break;",
          "2079:     }",
          "2080:     else if (func == 0x02)",
          "2081:     {",
          "2083:     }",
          "2084:     else if (func == 0x03)",
          "2085:     {",
          "2087:      switch (type)",
          "2089:      case 0x00: // D2-03-00 Light, Switching and Blind Control Type",
          "2090:       break;",
          "2091:      case 0x0A: // D2-03-0A Push Button \u2013 Single Button",
          "2092:       while (1 == 0);",
          "2093:       break;",
          "2094:      case 0x10: // D2-03-10 Mechanical Handle",
          "2095:       break;",
          "2096:      case 0x20: // D2-03-20 Beacon with Vibration Detection",
          "2097:       break;",
          "",
          "---------------"
        ],
        "hardware/EnOceanESP3.h||hardware/EnOceanESP3.h": [
          "File: hardware/EnOceanESP3.h -> hardware/EnOceanESP3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"ASyncSerial.h\"",
          "4: #include \"DomoticzHardware.h\"",
          "6: #define ENOCEAN3_READ_BUFFER_SIZE 65*1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <map>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:   ERS_DATA,",
          "15:   ERS_CHECKSUM",
          "16:  };",
          "17: public:",
          "18:  CEnOceanESP3(const int ID, const std::string& devname, const int type);",
          "19:     ~CEnOceanESP3();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  struct _tVLDNode",
          "19:  {",
          "20:   int idx;",
          "21:   int manufacturer;",
          "22:   uint8_t profile;",
          "23:   uint8_t type;",
          "24:  };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:  void ParseRadioDatagram();",
          "37:  void readCallback(const char *data, size_t len);",
          "38: private:",
          "39:  _eEnOcean_Receive_State m_receivestate;",
          "40:  int m_wantedlength;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  void ReloadVLDNodes();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:  int m_bufferpos;",
          "54:  int m_retrycntr;",
          "56:  std::mutex m_sendMutex;",
          "57:  std::vector<std::string> m_sendqueue;",
          "58: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:  std::map<uint32_t, _tVLDNode> m_VLDNodes;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d0b1d44668e428e4520b569aa090982b3f32d8c",
      "candidate_info": {
        "commit_hash": "3d0b1d44668e428e4520b569aa090982b3f32d8c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3d0b1d44668e428e4520b569aa090982b3f32d8c",
        "files": [
          "www/app/ForecastController.js"
        ],
        "message": "Forecast button, displaying correct units",
        "before_after_code_files": [
          "www/app/ForecastController.js||www/app/ForecastController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/ForecastController.js||www/app/ForecastController.js": [
          "File: www/app/ForecastController.js -> www/app/ForecastController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   function init() {",
          "6:    $scope.MakeGlobalConfig();",
          "7:    var htmlcontent = '';",
          "9:    $('#maincontent').html(htmlcontent);",
          "10:    $('#maincontent').i18n();",
          "11:   };",
          "",
          "[Removed Lines]",
          "8:    htmlcontent += '<iframe class=\"cIFrameLarge\" id=\"IMain\" src=\"//darksky.net/forecast/' + $scope.config.Latitude + ',' + $scope.config.Longitude + '/ca12/' + $rootScope.config.language + '\"></iframe>';",
          "",
          "[Added Lines]",
          "8:    var units = \"ca24\";",
          "9:    if ($rootScope.config.TempSign == \"F\") {",
          "10:        units = \"us12\";",
          "11:    } else {",
          "12:        if ($rootScope.config.WindSign == \"m/s\")",
          "13:            units = \"si24\";",
          "14:        else if ($rootScope.config.WindSign == \"km/h\")",
          "15:            units = \"ca24\";",
          "16:        else if ($rootScope.config.WindSign == \"mph\")",
          "17:            units = \"uk224\";",
          "18:    }",
          "19:    htmlcontent += '<iframe class=\"cIFrameLarge\" id=\"IMain\" src=\"//darksky.net/forecast/' + $scope.config.Latitude + ',' + $scope.config.Longitude + '/' + units + '/' + $rootScope.config.language + '\"></iframe>';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5ebb7b28324f2f223338c997293e4a103e6ea45",
      "candidate_info": {
        "commit_hash": "f5ebb7b28324f2f223338c997293e4a103e6ea45",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f5ebb7b28324f2f223338c997293e4a103e6ea45",
        "files": [
          "main/Helper.cpp"
        ],
        "message": "Added missing include",
        "before_after_code_files": [
          "main/Helper.cpp||main/Helper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <direct.h>",
          "6: #else",
          "7: #include <dirent.h>",
          "8: #endif",
          "9: #include <sys/types.h>",
          "10: #include <sys/stat.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include <unistd.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09534cd76dfd2e5f9cc28a0f1208ffea04303a29",
      "candidate_info": {
        "commit_hash": "09534cd76dfd2e5f9cc28a0f1208ffea04303a29",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/09534cd76dfd2e5f9cc28a0f1208ffea04303a29",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Add Roomplan, return new idx",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:     \"INSERT INTO Plans (Name) VALUES ('%q')\",",
          "2116:     name.c_str()",
          "2117:    );",
          "2118:   }",
          "2120:   void CWebServer::Cmd_UpdatePlan(WebEmSession & session, const request& req, Json::Value &root)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118:    std::vector<std::vector<std::string> > result;",
          "2119:    result = m_sql.safe_query(\"SELECT MAX(ID) FROM Plans\");",
          "2120:    if (!result.empty())",
          "2121:    {",
          "2122:     std::vector<std::string> sd = result[0];",
          "2123:     int ID = atoi(sd[0].c_str());",
          "2125:     root[\"idx\"] = sd[0].c_str(); // OTO output the created ID for easier management on the caller side (if automated)",
          "2126:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}