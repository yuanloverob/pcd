{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0556c1ce5858eb4c06ded309038b13067200ea4a",
      "candidate_info": {
        "commit_hash": "0556c1ce5858eb4c06ded309038b13067200ea4a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0556c1ce5858eb4c06ded309038b13067200ea4a",
        "files": [
          "www/index.html"
        ],
        "message": "div dialog-replacedevice display with basic-auth (solved #2578)",
        "before_after_code_files": [
          "www/index.html||www/index.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/index.html||www/index.html": [
          "File: www/index.html -> www/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "1270:   <div id=\"usagegraph\" style=\"height: 240px;\"></div>",
          "1271:  </div>",
          "1274:   <form>",
          "1275:    <label for=\"newdevice\"><span data-i18n=\"New Device\"></span>: </label>",
          "1276:    <select id=\"newdevice\" style=\"width:250px\" class=\"combobox ui-corner-all\"></select>",
          "",
          "[Removed Lines]",
          "1273:  <div id=\"dialog-replacedevice\" title=\"Replace Device\">",
          "",
          "[Added Lines]",
          "1273:  <div id=\"dialog-replacedevice\" title=\"Replace Device\" style=\"display:none;\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f39f9513b228a48df531164da280ac94bfaa5165",
      "candidate_info": {
        "commit_hash": "f39f9513b228a48df531164da280ac94bfaa5165",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f39f9513b228a48df531164da280ac94bfaa5165",
        "files": [
          "www/app/CustomIconsController.js"
        ],
        "message": "Fixed Custom Icon upload message (#2925)",
        "before_after_code_files": [
          "www/app/CustomIconsController.js||www/app/CustomIconsController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/CustomIconsController.js||www/app/CustomIconsController.js": [
          "File: www/app/CustomIconsController.js -> www/app/CustomIconsController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:    $http.post(uploadUrl, fd, {",
          "11:     transformRequest: angular.identity,",
          "12:     headers: { 'Content-Type': undefined }",
          "25:   }",
          "27:   $scope.UploadIconSet = function () {",
          "",
          "[Removed Lines]",
          "13:    })",
          "14:     .success(function (data) {",
          "15:      if (data.status != \"OK\") {",
          "16:       HideNotify();",
          "17:       ShowNotify($.t('Error uploading Iconset') + \": \" + data.error, 5000, true);",
          "18:      }",
          "19:      $scope.RefreshIconList();",
          "20:     })",
          "21:     .error(function (data) {",
          "22:      HideNotify();",
          "23:      ShowNotify($.t('Error uploading Iconset'), 5000, true);",
          "24:     });",
          "",
          "[Added Lines]",
          "13:    }).then(function successCallback(response) {",
          "14:        var data = response.data;",
          "15:        if (data.status != \"OK\") {",
          "16:            HideNotify();",
          "17:            ShowNotify($.t('Error uploading Iconset') + \": \" + data.error, 5000, true);",
          "18:        }",
          "19:        $scope.RefreshIconList();",
          "20:    }, function errorCallback(response) {",
          "21:        HideNotify();",
          "22:        ShowNotify($.t('Error uploading Iconset'), 5000, true);",
          "23:    });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "543c5dd9e538eede35e66717ccfadda85c4df5af",
      "candidate_info": {
        "commit_hash": "543c5dd9e538eede35e66717ccfadda85c4df5af",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/543c5dd9e538eede35e66717ccfadda85c4df5af",
        "files": [
          "www/app/log/DeviceLog.js"
        ],
        "message": "Correcting more Lighting log issues",
        "before_after_code_files": [
          "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js": [
          "File: www/app/log/DeviceLog.js -> www/app/log/DeviceLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             }",
          "47:             var isLightType = [",
          "48:                 'Light', 'Light/Switch', 'Color Switch', 'Chime',",
          "49:                 'Security', 'RFY', 'ASA', 'Blinds'",
          "50:             ].includes(vm.device.Type);",
          "52:             var isLightSwitchType = [",
          "54:                 'Smoke Detector', 'On/Off', 'Dimmer'",
          "55:             ].includes(vm.device.SwitchType);",
          "",
          "[Removed Lines]",
          "53:                 'Contact', 'Door Contact', 'Dusk Sensor', 'Motion Sensor',",
          "",
          "[Added Lines]",
          "48:     'Lighting 1', 'Lighting 2', 'Lighting 3', 'Lighting 4', 'Lighting 5',",
          "54:                 'Contact', 'Door Contact', 'Doorbell', 'Dusk Sensor', 'Motion Sensor',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff36d622b1a36ec5cd05619bf77a283bff5b7c5c",
      "candidate_info": {
        "commit_hash": "ff36d622b1a36ec5cd05619bf77a283bff5b7c5c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/ff36d622b1a36ec5cd05619bf77a283bff5b7c5c",
        "files": [
          "hardware/Dummy.cpp",
          "hardware/EvohomeWeb.cpp",
          "hardware/HarmonyHub.cpp",
          "hardware/MQTT.cpp",
          "hardware/MySensorsBase.cpp",
          "hardware/SBFSpot.cpp",
          "hardware/Thermosmart.cpp",
          "hardware/XiaomiGateway.cpp",
          "main/Camera.cpp",
          "main/EventSystem.cpp",
          "main/LuaHandler.cpp"
        ],
        "message": "Some code refactoring",
        "before_after_code_files": [
          "hardware/Dummy.cpp||hardware/Dummy.cpp",
          "hardware/EvohomeWeb.cpp||hardware/EvohomeWeb.cpp",
          "hardware/HarmonyHub.cpp||hardware/HarmonyHub.cpp",
          "hardware/MQTT.cpp||hardware/MQTT.cpp",
          "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp",
          "hardware/SBFSpot.cpp||hardware/SBFSpot.cpp",
          "hardware/Thermosmart.cpp||hardware/Thermosmart.cpp",
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp",
          "main/Camera.cpp||main/Camera.cpp",
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/LuaHandler.cpp||main/LuaHandler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Dummy.cpp||hardware/Dummy.cpp": [
          "File: hardware/Dummy.cpp -> hardware/Dummy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:      {",
          "167:       root[\"status\"] = \"OK\";",
          "168:       root[\"title\"] = \"CreateVirtualSensor\";",
          "172:      }",
          "173:      break;",
          "174:     }",
          "",
          "[Removed Lines]",
          "169:       std::stringstream ss;",
          "170:       ss << vs_idx;",
          "171:       root[\"idx\"] = ss.str().c_str();",
          "",
          "[Added Lines]",
          "169:       root[\"idx\"] = std::to_string(vs_idx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:    {",
          "244:     root[\"status\"] = \"OK\";",
          "245:     root[\"title\"] = \"CreateSensor\";",
          "249:    }",
          "250:   }",
          "",
          "[Removed Lines]",
          "246:     std::stringstream ss;",
          "247:     ss << vs_idx;",
          "248:     root[\"idx\"] = ss.str().c_str();",
          "",
          "[Added Lines]",
          "244:     root[\"idx\"] = std::to_string(vs_idx);",
          "",
          "---------------"
        ],
        "hardware/EvohomeWeb.cpp||hardware/EvohomeWeb.cpp": [
          "File: hardware/EvohomeWeb.cpp -> hardware/EvohomeWeb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: bool CEvohomeWeb::SetSetpoint(const char *pdata)",
          "385: {",
          "386:  REVOBUF *pEvo = (REVOBUF*)pdata;",
          "392:  zone* hz = get_zone_by_ID(zoneId);",
          "393:  if (hz == NULL) // zone number not known by installation (manually added?)",
          "",
          "[Removed Lines]",
          "388:  std::stringstream ssID;",
          "389:  ssID << std::dec << (int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3);",
          "390:  std::string zoneId(ssID.str());",
          "",
          "[Added Lines]",
          "387:  std::string zoneId(std::to_string((int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:  REVOBUF *pEvo = (REVOBUF*)pdata;",
          "457:  std::string DHWstate = (pEvo->EVOHOME2.temperature == 0) ? \"off\" : \"on\";",
          "",
          "[Removed Lines]",
          "453:  std::stringstream ssID;",
          "454:  ssID << std::dec << (int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3);",
          "455:  std::string dhwId(ssID.str());",
          "",
          "[Added Lines]",
          "450:  std::string dhwId(std::to_string((int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:   }",
          "685:   else if ((result[0][1] != szId) || (result[0][2] != ndevname))",
          "686:   {",
          "692:   }",
          "693:  }",
          "",
          "[Removed Lines]",
          "687:    uint64_t DevRowIdx;",
          "688:    std::stringstream s_str(result[0][0]);",
          "689:    s_str >> DevRowIdx;",
          "691:    m_sql.safe_query(\"UPDATE DeviceStatus SET DeviceID='%q', Name='%q', StrParam1='' WHERE (ID == %\" PRIu64 \")\", szId.c_str(), ndevname.c_str(), DevRowIdx);",
          "",
          "[Added Lines]",
          "683:    m_sql.safe_query(\"UPDATE DeviceStatus SET DeviceID='%q', Name='%q', StrParam1='' WHERE (ID == %\" PRIu64 \")\", szId.c_str(), ndevname.c_str(), std::stoull(result[0][0]));",
          "",
          "---------------"
        ],
        "hardware/HarmonyHub.cpp||hardware/HarmonyHub.cpp": [
          "File: hardware/HarmonyHub.cpp -> hardware/HarmonyHub.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:  if (pCmd->LIGHTING2.packettype == pTypeLighting2)",
          "211:  {",
          "212:   int lookUpId = (int)(pCmd->LIGHTING2.id1 << 24) |  (int)(pCmd->LIGHTING2.id2 << 16) | (int)(pCmd->LIGHTING2.id3 << 8) | (int)(pCmd->LIGHTING2.id4) ;",
          "217:   if (pCmd->LIGHTING2.cmnd == 0)",
          "218:   {",
          "",
          "[Removed Lines]",
          "213:   std::stringstream sstr;",
          "214:   sstr << lookUpId;",
          "215:   std::string realID = sstr.str();",
          "",
          "[Added Lines]",
          "213:   std::string realID = std::to_string(lookUpId);",
          "",
          "---------------"
        ],
        "hardware/MQTT.cpp||hardware/MQTT.cpp": [
          "File: hardware/MQTT.cpp -> hardware/MQTT.cpp"
        ],
        "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp": [
          "File: hardware/MySensorsBase.cpp -> hardware/MySensorsBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235:   sSwitchValue = (nvalue == Color_LedOn) ? \"1\" : \"0\";",
          "1236:   return true;",
          "1237:  }",
          "1243:  return true;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1239:  int slevel = atoi(result[0][2].c_str());",
          "1240:  std::stringstream sstr;",
          "1241:  sstr << int(slevel);",
          "1242:  sSwitchValue = sstr.str();",
          "",
          "[Added Lines]",
          "1238:  sSwitchValue = std::to_string(atoi(result[0][2].c_str()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1385:     if (fvalue > 100.0f)",
          "1386:      fvalue = 100.0f; //99 is fully on",
          "1387:     int svalue = round(fvalue);",
          "1392:    }",
          "1393:   }",
          "1394:   else {",
          "",
          "[Removed Lines]",
          "1389:     std::stringstream sstr;",
          "1390:     sstr << svalue;",
          "1391:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, sstr.str(), pChild->useAck, pChild->ackTimeout);",
          "",
          "[Added Lines]",
          "1384:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, std::to_string(svalue), pChild->useAck, pChild->ackTimeout);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1451:    }",
          "1452:    else if (cmnd == gswitch_sSetLevel)",
          "1453:    {",
          "1457:    }",
          "1458:   }",
          "1459:   else {",
          "",
          "[Removed Lines]",
          "1454:     std::stringstream sstr;",
          "1455:     sstr << level;",
          "1456:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, sstr.str(), pChild->useAck, pChild->ackTimeout);",
          "",
          "[Added Lines]",
          "1447:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, std::to_string(level), pChild->useAck, pChild->ackTimeout);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1539:     int svalue = pLed->value;",
          "1540:     if (svalue > 100)",
          "1541:      svalue = 100;",
          "1545:    }",
          "1546:    else if ((pLed->command == Color_LedOff) || (pLed->command == Color_LedOn))",
          "1547:    {",
          "",
          "[Removed Lines]",
          "1542:     std::stringstream sstr;",
          "1543:     sstr << svalue;",
          "1544:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, sstr.str(), pChild->useAck, pChild->ackTimeout);",
          "",
          "[Added Lines]",
          "1533:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, std::to_string(svalue), pChild->useAck, pChild->ackTimeout);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1549:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_STATUS, lState, pChild->useAck, pChild->ackTimeout);",
          "1550:    }",
          "1551:   }",
          "1554:    _log.Log(LOG_ERROR, \"MySensors: Light command received for unknown node_id: %d\", node_id);",
          "1555:    return false;",
          "1556:   }",
          "",
          "[Removed Lines]",
          "1552:   else",
          "1553:   {",
          "",
          "[Added Lines]",
          "1541:   else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1628:    _tMySensorChild* pChild = pNode->FindChildByValueType(V_IR_RECEIVE);",
          "1629:    if (pChild)",
          "1630:    {",
          "1634:    }",
          "1635:   }",
          "1636:   else {",
          "",
          "[Removed Lines]",
          "1631:     std::stringstream sstr;",
          "1632:     sstr << ir_code;",
          "1633:     return SendNodeSetCommand(node_id, pChild->childID, MT_Set, V_IR_SEND, sstr.str(), pChild->useAck, pChild->ackTimeout);",
          "",
          "[Added Lines]",
          "1619:     return SendNodeSetCommand(node_id, pChild->childID, MT_Set, V_IR_SEND, std::to_string(ir_code), pChild->useAck, pChild->ackTimeout);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1730:    payload = results[5 + ip];",
          "1731:   }",
          "1732:  }",
          "1734: #ifdef _DEBUG",
          "1735:  _log.Log(LOG_NORM, \"MySensors: NodeID: %d, ChildID: %d, MessageType: %d, Ack: %d, SubType: %d, Payload: %s\", node_id, child_sensor_id, message_type, ack, sub_type, payload.c_str());",
          "1736: #endif",
          "",
          "[Removed Lines]",
          "1733:  std::stringstream sstr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1758:    int newID = FindNextNodeID();",
          "1759:    if (newID != -1)",
          "1764:   }",
          "1765:   break;",
          "1766:   case I_CONFIG:",
          "",
          "[Removed Lines]",
          "1760:    {",
          "1761:     sstr << newID;",
          "1762:     SendNodeCommand(node_id, child_sensor_id, message_type, I_ID_RESPONSE, sstr.str());",
          "1763:    }",
          "",
          "[Added Lines]",
          "1745:     SendNodeCommand(node_id, child_sensor_id, message_type, I_ID_RESPONSE, std::to_string(newID));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1811:    boost::posix_time::ptime tlocal(boost::posix_time::second_clock::local_time());",
          "1812:    boost::posix_time::time_duration dur = tlocal - boost::posix_time::ptime(boost::gregorian::date(1970, 1, 1));",
          "1813:    time_t fltime(dur.total_seconds());",
          "1816:   }",
          "1817:   break;",
          "1818:   case I_HEARTBEAT:",
          "",
          "[Removed Lines]",
          "1814:    sstr << fltime;",
          "1815:    SendNodeCommand(node_id, child_sensor_id, message_type, I_TIME, sstr.str());",
          "",
          "[Added Lines]",
          "1796:    SendNodeCommand(node_id, child_sensor_id, message_type, I_TIME, std::to_string(fltime));",
          "",
          "---------------"
        ],
        "hardware/SBFSpot.cpp||hardware/SBFSpot.cpp": [
          "File: hardware/SBFSpot.cpp -> hardware/SBFSpot.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:    return;",
          "240:   }",
          "241:  }",
          "247:  time_t atime = time(NULL);",
          "",
          "[Removed Lines]",
          "242:  uint64_t ulID;",
          "243:  std::stringstream s_str(result[0][0]);",
          "244:  s_str >> ulID;",
          "",
          "[Added Lines]",
          "242:  uint64_t ulID = std::stoull(result[0][0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:  int iInvOff = 1;",
          "272:  char szLogFile[256];",
          "273:  std::string tmpPath = m_SBFDataPath;",
          "277:  sprintf(szLogFile, \"%s%s-%04d%02d.csv\", tmpPath.c_str(), m_SBFPlantName.c_str(),Year, Month);",
          "279:  std::ifstream infile;",
          "",
          "[Removed Lines]",
          "274:  std::stringstream sstr;",
          "275:  sstr << Year;",
          "276:  stdreplace(tmpPath, \"%Y\", sstr.str());",
          "",
          "[Added Lines]",
          "272:  stdreplace(tmpPath, \"%Y\", std::to_string(Year));",
          "",
          "---------------"
        ],
        "hardware/Thermosmart.cpp||hardware/Thermosmart.cpp": [
          "File: hardware/Thermosmart.cpp -> hardware/Thermosmart.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:  if (m_OutsideTemperatureIdx == 0)",
          "147:   return false;",
          "148:  Json::Value tempjson;",
          "153:  size_t tsize = tempjson.size();",
          "154:  if (tsize < 1)",
          "",
          "[Removed Lines]",
          "149:  std::stringstream sstr;",
          "150:  sstr << m_OutsideTemperatureIdx;",
          "151:  m_webservers.GetJSonDevices(tempjson, \"\", \"temp\", \"ID\", sstr.str(), \"\", \"\", true, false, false, 0, \"\");",
          "",
          "[Added Lines]",
          "149:  m_webservers.GetJSonDevices(tempjson, \"\", \"temp\", \"ID\", std::to_string(m_OutsideTemperatureIdx), \"\", \"\", true, false, false, 0, \"\");",
          "",
          "---------------"
        ],
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   }",
          "161:   else if (xcmd->subtype == sSwitchGeneralSwitch && xcmd->unitcode == 7) {",
          "168:    message = \"{\\\"cmd\\\":\\\"write\\\",\\\"model\\\":\\\"gateway\\\",\\\"sid\\\":\\\"\" + m_GatewaySID + \"\\\",\\\"short_id\\\":0,\\\"data\\\":\\\"{\\\\\\\"mid\\\\\\\":\" + m_GatewayMusicId.c_str() + \",\\\\\\\"vol\\\\\\\":\" + m_GatewayVolume.c_str() + \",\\\\\\\"key\\\\\\\":\\\\\\\"@gatewaykey\\\\\\\"}\\\" }\";",
          "169:   }",
          "",
          "[Removed Lines]",
          "163:    int level = xcmd->level;",
          "164:    std::stringstream ss;",
          "165:    ss << level;",
          "166:    m_GatewayVolume = ss.str();",
          "",
          "[Added Lines]",
          "163:    m_GatewayVolume = std::to_string(xcmd->level);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:    if (xcmd->cmnd == 1) {",
          "173:     level = 100;",
          "174:    }",
          "178:   }",
          "179:  }",
          "180:  else if (packettype == pTypeColorSwitch) {",
          "",
          "[Removed Lines]",
          "175:    std::stringstream ss;",
          "176:    ss << level;",
          "177:    message = \"{\\\"cmd\\\":\\\"write\\\",\\\"model\\\":\\\"curtain\\\",\\\"sid\\\":\\\"158d00\" + sid + \"\\\",\\\"short_id\\\":9844,\\\"data\\\":\\\"{\\\\\\\"curtain_level\\\\\\\":\\\\\\\"\" + ss.str() + \"\\\\\\\",\\\\\\\"key\\\\\\\":\\\\\\\"@gatewaykey\\\\\\\"}\\\" }\";",
          "",
          "[Added Lines]",
          "172:    message = \"{\\\"cmd\\\":\\\"write\\\",\\\"model\\\":\\\"curtain\\\",\\\"sid\\\":\\\"158d00\" + sid + \"\\\",\\\"short_id\\\":9844,\\\"data\\\":\\\"{\\\\\\\"curtain_level\\\\\\\":\\\\\\\"\" + std::to_string(level) + \"\\\\\\\",\\\\\\\"key\\\\\\\":\\\\\\\"@gatewaykey\\\\\\\"}\\\" }\";",
          "",
          "---------------"
        ],
        "main/Camera.cpp||main/Camera.cpp": [
          "File: main/Camera.cpp -> main/Camera.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:    std::vector<std::string> sd = itt;",
          "44:    cameraDevice citem;",
          "47:    citem.Name = sd[1];",
          "48:    citem.Address = sd[2];",
          "49:    citem.Port = atoi(sd[3].c_str());",
          "",
          "[Removed Lines]",
          "45:    std::stringstream s_str(sd[0]);",
          "46:    s_str >> citem.ID;",
          "",
          "[Added Lines]",
          "45:    citem.ID = std::stoull(sd[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   {",
          "78:    std::vector<std::string> sd = itt;",
          "79:    cameraActiveDevice aDevice;",
          "82:    aDevice.DevSceneType = (unsigned char)atoi(sd[1].c_str());",
          "85:    pCamera->mActiveDevices.push_back(aDevice);",
          "86:   }",
          "87:  }",
          "",
          "[Removed Lines]",
          "80:    std::stringstream s_str(sd[0]);",
          "81:    s_str >> aDevice.ID;",
          "83:    std::stringstream s_str2(sd[2]);",
          "84:    s_str2 >> aDevice.DevSceneRowID;",
          "",
          "[Added Lines]",
          "79:    aDevice.ID = std::stoull(sd[0]);",
          "81:    aDevice.DevSceneRowID = std::stoull(sd[2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91: uint64_t CCameraHandler::IsDevSceneInCamera(const unsigned char DevSceneType, const std::string &DevSceneID)",
          "92: {",
          "97: }",
          "99: uint64_t CCameraHandler::IsDevSceneInCamera(const unsigned char DevSceneType, const uint64_t DevSceneID)",
          "",
          "[Removed Lines]",
          "93:  uint64_t ulID;",
          "94:  std::stringstream s_str(DevSceneID);",
          "95:  s_str >> ulID;",
          "96:  return IsDevSceneInCamera(DevSceneType, ulID);",
          "",
          "[Added Lines]",
          "90:  return IsDevSceneInCamera(DevSceneType, std::stoull(DevSceneID));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147: CCameraHandler::cameraDevice* CCameraHandler::GetCamera(const std::string &CamID)",
          "148: {",
          "153: }",
          "155: CCameraHandler::cameraDevice* CCameraHandler::GetCamera(const uint64_t CamID)",
          "",
          "[Removed Lines]",
          "149:  uint64_t ulID;",
          "150:  std::stringstream s_str(CamID);",
          "151:  s_str >> ulID;",
          "152:  return GetCamera(ulID);",
          "",
          "[Added Lines]",
          "143:  return GetCamera(std::stoull(CamID));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165: bool CCameraHandler::TakeSnapshot(const std::string &CamID, std::vector<unsigned char> &camimage)",
          "166: {",
          "171: }",
          "173: bool CCameraHandler::TakeRaspberrySnapshot(std::vector<unsigned char> &camimage)",
          "",
          "[Removed Lines]",
          "167:  uint64_t ulID;",
          "168:  std::stringstream s_str(CamID);",
          "169:  s_str >> ulID;",
          "170:  return TakeSnapshot(ulID, camimage);",
          "",
          "[Added Lines]",
          "158:  return TakeSnapshot(std::stoull(CamID), camimage);",
          "",
          "---------------"
        ],
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:    std::vector<std::string> sd = *itt;",
          "226:    _tEventItem eitem;",
          "229:    eitem.Name = sd[1] + \"_\" + sd[5];",
          "230:    eitem.Interpreter = sd[6];",
          "231:    std::transform(sd[7].begin(), sd[7].end(), sd[7].begin(), ::tolower);",
          "",
          "[Removed Lines]",
          "227:    std::stringstream s_str(sd[0]);",
          "228:    s_str >> eitem.ID;",
          "",
          "[Added Lines]",
          "227:    eitem.ID = std::stoull(sd[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:   {",
          "261:    std::vector<std::string> sd = *itt2;",
          "262:    CEventSystem::_tEventItem eitem;",
          "265:    eitem.Name = sd[1];",
          "266:    eitem.Interpreter = sd[2];",
          "267:    std::transform(sd[3].begin(), sd[3].end(), sd[3].begin(), ::tolower);",
          "",
          "[Removed Lines]",
          "263:    std::stringstream s_str(sd[0]);",
          "264:    s_str >> eitem.ID;",
          "",
          "[Added Lines]",
          "262:    eitem.ID = std::stoull(sd[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385:  item.JsonMapBool.clear();",
          "387:  Json::Value tempjson;",
          "392:  Json::ArrayIndex rsize = tempjson[\"result\"].size();",
          "394:  if (rsize > 0)",
          "",
          "[Removed Lines]",
          "388:  std::stringstream sstr;",
          "389:  sstr << ulDevID;",
          "391:  m_webservers.GetJSonDevices(tempjson, \"\", \"\", \"\", sstr.str(), \"\", \"\", true, false, false, 0, \"\");",
          "",
          "[Added Lines]",
          "386:  m_webservers.GetJSonDevices(tempjson, \"\", \"\", \"\", std::to_string(ulDevID), \"\", \"\", true, false, false, 0, \"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:    std::string l_description;  l_description.reserve(200);",
          "460:    std::string l_deviceID;   l_deviceID.reserve(25);",
          "464:    sitem.deviceName = l_deviceName.assign(sd[2]);",
          "466:    sitem.nValue = atoi(sd[3].c_str());",
          "",
          "[Removed Lines]",
          "462:    std::stringstream s_str(sd[1]);",
          "463:    s_str >> sitem.ID;",
          "",
          "[Added Lines]",
          "457:    sitem.ID = std::stoull(sd[1]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506:   {",
          "507:    std::vector<std::string> sd = *itt;",
          "508:    _tUserVariable uvitem;",
          "511:    uvitem.variableName = sd[1];",
          "512:    uvitem.variableValue = sd[2];",
          "513:    uvitem.variableType = atoi(sd[3].c_str());",
          "",
          "[Removed Lines]",
          "509:    std::stringstream s_str(sd[0]);",
          "510:    s_str >> uvitem.ID;",
          "",
          "[Added Lines]",
          "503:    uvitem.ID = std::stoull(sd[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "535:    std::vector<std::string> sd = *itt;",
          "536:    _tScenesGroups sgitem;",
          "539:    unsigned char nValue = atoi(sd[2].c_str());",
          "541:    if (nValue == 0)",
          "",
          "[Removed Lines]",
          "537:    std::stringstream s_str(sd[0]);",
          "538:    s_str >> sgitem.ID;",
          "",
          "[Added Lines]",
          "530:    sgitem.ID = std::stoull(sd[0]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:    result2 = m_sql.safe_query(\"SELECT DISTINCT A.DeviceRowID FROM SceneDevices AS A, DeviceStatus AS B WHERE (A.SceneRowID == %\" PRIu64 \") AND (A.DeviceRowID == B.ID)\", sgitem.ID);",
          "551:    if (!result2.empty())",
          "552:    {",
          "554:     std::vector<std::vector<std::string> >::const_iterator itt2;",
          "555:     for (itt2 = result2.begin(); itt2 != result2.end(); ++itt2)",
          "556:     {",
          "558:      std::vector<std::string> sd2 = *itt2;",
          "562:     }",
          "563:    }",
          "564:    m_scenesgroups[sgitem.ID] = sgitem;",
          "",
          "[Removed Lines]",
          "553:     uint64_t deviceID;",
          "557:      std::stringstream ss;",
          "559:      ss << sd2[0];",
          "560:      ss >> deviceID;",
          "561:      sgitem.memberID.push_back(deviceID);",
          "",
          "[Added Lines]",
          "549:      sgitem.memberID.push_back(std::stoull(sd2[0]));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "902:      {",
          "903:       std::vector<std::string> sd2 = result2[0];",
          "911:       total_real = total_max - total_min;",
          "913:       char szTmp[100];",
          "",
          "[Removed Lines]",
          "905:       unsigned long long total_min, total_max, total_real;",
          "907:       std::stringstream s_str1(sd2[0]);",
          "908:       s_str1 >> total_min;",
          "909:       std::stringstream s_str2(sd2[1]);",
          "910:       s_str2 >> total_max;",
          "",
          "[Added Lines]",
          "893:       uint64_t total_min, total_max, total_real;",
          "895:       total_min = std::stoull(sd2[0]);",
          "896:       total_max = std::stoull(sd2[1]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1037:    {",
          "1038:     std::vector<std::string> sd2 = result2[0];",
          "1047:     total_real_gas = gasactual - total_min_gas;",
          "1048:     utilityval = float(total_real_gas) / GasDivider;",
          "1049:     isUtility = true;",
          "",
          "[Removed Lines]",
          "1040:     unsigned long long total_min_gas, total_real_gas;",
          "1041:     unsigned long long gasactual;",
          "1043:     std::stringstream s_str1(sd2[0]);",
          "1044:     s_str1 >> total_min_gas;",
          "1045:     std::stringstream s_str2(sitem.sValue);",
          "1046:     s_str2 >> gasactual;",
          "",
          "[Added Lines]",
          "1026:     uint64_t total_min_gas, total_real_gas;",
          "1027:     uint64_t gasactual;",
          "1029:     total_min_gas = std::stoull(sd2[0]);",
          "1030:     gasactual = std::stoull(sitem.sValue);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1062:     {",
          "1063:      std::vector<std::string> sd2 = result2[0];",
          "1071:      total_real = total_max - total_min;",
          "1073:      char szTmp[100];",
          "",
          "[Removed Lines]",
          "1065:      unsigned long long total_min, total_max, total_real;",
          "1067:      std::stringstream s_str1(sd2[0]);",
          "1068:      s_str1 >> total_min;",
          "1069:      std::stringstream s_str2(sd2[1]);",
          "1070:      s_str2 >> total_max;",
          "",
          "[Added Lines]",
          "1049:      uint64_t total_min, total_max, total_real;",
          "1051:      total_min = std::stoull(sd2[0]);",
          "1052:      total_max = std::stoull(sd2[1]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1886:  if (conditions.find(\"@Sunrise\") != std::string::npos)",
          "1887:  {",
          "1892:  }",
          "1893:  if (conditions.find(\"@Sunset\") != std::string::npos)",
          "1894:  {",
          "1899:  }",
          "1901:  std::string ifCondition = \"result = 0; weekday = os.date('*t')['wday']; timeofday = ((os.date('*t')['hour']*60)+os.date('*t')['min']); if \" + conditions + \" then result = 1 end; return result\";",
          "",
          "[Removed Lines]",
          "1888:   int intRise = getSunRiseSunSetMinutes(\"Sunrise\");",
          "1889:   std::stringstream ssRise;",
          "1890:   ssRise << intRise;",
          "1891:   stdreplace(conditions, \"@Sunrise\", ssRise.str());",
          "1895:   int intSet = getSunRiseSunSetMinutes(\"Sunset\");",
          "1896:   std::stringstream ssSet;",
          "1897:   ssSet << intSet;",
          "1898:   stdreplace(conditions, \"@Sunset\", ssSet.str());",
          "",
          "[Added Lines]",
          "1870:   stdreplace(conditions, \"@Sunrise\", std::to_string(getSunRiseSunSetMinutes(\"Sunrise\")));",
          "1874:   stdreplace(conditions, \"@Sunset\", std::to_string(getSunRiseSunSetMinutes(\"Sunset\")));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3503:    return false;",
          "3504:   }",
          "3505:   int nValue = -1, Protected = -1;",
          "3507:   std::string sValue;",
          "3510:   if (strarray.size() > 1 && !strarray[1].empty())",
          "3511:    nValue = atoi(strarray[1].c_str());",
          "3512:   if (strarray.size() > 2 && !strarray[2].empty())",
          "",
          "[Removed Lines]",
          "3506:   uint64_t idx;",
          "3508:   std::stringstream ssIdx(strarray[0]);",
          "3509:   ssIdx >> idx;",
          "",
          "[Added Lines]",
          "3483:   uint64_t idx = std::stoull(strarray[0]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3550:    else",
          "3551:    {",
          "3552:     float DelayTime = afterTimerSeconds;",
          "3557:     m_sql.AddTaskItem(_tTaskItem::SetVariable(DelayTime, idx, variableValue, false));",
          "3558:    }",
          "3559:    scriptTrue = true;",
          "",
          "[Removed Lines]",
          "3553:     uint64_t idx;",
          "3554:     std::stringstream sstr;",
          "3555:     sstr << sd[0];",
          "3556:     sstr >> idx;",
          "",
          "[Added Lines]",
          "3527:     uint64_t idx = std::stoull(sd[0]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3729:    break;",
          "3730:   }",
          "3736:   if (",
          "3737:    ((devType == pTypeThermostat) && (subType == sTypeThermSetpoint)) ||",
          "",
          "[Removed Lines]",
          "3732:   std::stringstream sIdx;",
          "3733:   sIdx << idx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3739:    )",
          "3740:   {",
          "3741:    _log.Log(LOG_NORM, \"EventSystem: Sending SetPoint to device....\");",
          "3743:   }",
          "3744:   else if ((devType == pTypeGeneral) && (subType == sTypeZWaveThermostatMode) && nValue != -1)",
          "3745:   {",
          "3746:    _log.Log(LOG_NORM, \"EventSystem: Sending Thermostat Mode to device....\");",
          "3748:   }",
          "3749:   else if ((devType == pTypeGeneral) && (subType == sTypeZWaveThermostatFanMode) && nValue != -1)",
          "3750:   {",
          "3751:    _log.Log(LOG_NORM, \"EventSystem: Sending Thermostat Fan Mode to device....\");",
          "3753:   }",
          "3754:   else if ((devType == pTypeGeneral) && (subType == sTypeTextStatus))",
          "3755:   {",
          "",
          "[Removed Lines]",
          "3742:    m_mainworker.SetSetPoint(sIdx.str(), static_cast<float>(atof(sValue.c_str())));",
          "3747:    m_mainworker.SetZWaveThermostatMode(sIdx.str(), nValue);",
          "3752:    m_mainworker.SetZWaveThermostatFanMode(sIdx.str(), nValue);",
          "",
          "[Added Lines]",
          "3710:    m_mainworker.SetSetPoint(std::to_string(idx), static_cast<float>(atof(sValue.c_str())));",
          "3715:    m_mainworker.SetZWaveThermostatMode(std::to_string(idx), nValue);",
          "3720:    m_mainworker.SetZWaveThermostatFanMode(std::to_string(idx), nValue);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4092:  }",
          "4093:  else if (dType == pTypeHUM)",
          "4094:  {",
          "4097:  }",
          "4098:  else if (switchtype == STYPE_Selector)",
          "4099:  {",
          "4100:   std::map<std::string, std::string> statuses;",
          "4101:   GetSelectorSwitchStatuses(options, statuses);",
          "4105:  }",
          "4106:  else if ((switchtype == STYPE_Contact) || (switchtype == STYPE_DoorContact))",
          "4107:  {",
          "",
          "[Removed Lines]",
          "4095:   std::stringstream sstr; sstr << nValue;",
          "4096:   lstatus = sstr.str();",
          "4102:   std::stringstream sslevel;",
          "4103:   sslevel << llevel;",
          "4104:   lstatus = statuses[sslevel.str()];",
          "",
          "[Added Lines]",
          "4063:   lstatus = std::to_string(nValue);",
          "4069:   lstatus = statuses[std::to_string(llevel)];",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4202:   if (lstatus == \"\")",
          "4203:   {",
          "4207:   }",
          "4208:  }",
          "4209:  return lstatus;",
          "",
          "[Removed Lines]",
          "4204:    std::stringstream ss;",
          "4205:    ss << (unsigned int)nValue;",
          "4206:    lstatus = ss.str();",
          "",
          "[Added Lines]",
          "4169:    lstatus = std::to_string(nValue);",
          "",
          "---------------"
        ],
        "main/LuaHandler.cpp||main/LuaHandler.cpp": [
          "File: main/LuaHandler.cpp -> main/LuaHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:    int devType = atoi(dtype.c_str());",
          "77:    int subType = atoi(dsubtype.c_str());",
          "83:    m_mainworker.UpdateDevice(HardwareID, DeviceID, unit, devType, subType, invalue, svalue, signallevel, batterylevel);",
          "84:   }",
          "85:   else",
          "",
          "[Removed Lines]",
          "79:    std::stringstream sstr;",
          "80:    uint64_t ulIdx;",
          "81:    sstr << ideviceId;",
          "82:    sstr >> ulIdx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02656117abb36b6f04349fb3eea00589b02e5d56",
      "candidate_info": {
        "commit_hash": "02656117abb36b6f04349fb3eea00589b02e5d56",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/02656117abb36b6f04349fb3eea00589b02e5d56",
        "files": [
          "main/SQLHelper.cpp"
        ],
        "message": "Undo previous fix (was not fixing it)",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5590:     sValue = szTmp;",
          "5591:    }",
          "5594:    long long MeterUsage = std::stoll(susage);",
          "",
          "[Removed Lines]",
          "5593:    long long MeterValue = (!sValue.empty()) ? std::stoll(sValue) : 0;",
          "",
          "[Added Lines]",
          "5593:    long long MeterValue = std::stoll(sValue);",
          "",
          "---------------"
        ]
      }
    }
  ]
}