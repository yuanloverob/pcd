{
  "cve_id": "CVE-2020-13397",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
  "patch_info": {
    "commit_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "files": [
      "libfreerdp/core/security.c"
    ],
    "message": "Fixed GHSL-2020-101 missing NULL check\n\n(cherry picked from commit b207dbba35c505bbc3ad5aadc10b34980c6b7e8e)",
    "before_after_code_files": [
      "libfreerdp/core/security.c||libfreerdp/core/security.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/security.c||libfreerdp/core/security.c": [
      "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "816: {",
      "817:  size_t olen;",
      "819:  if (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))",
      "820:   return FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "819:  if (!rdp || !rdp->fips_decrypt)",
      "820:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92fa258748d49d2476716c3a56f33005a532835f",
      "candidate_info": {
        "commit_hash": "92fa258748d49d2476716c3a56f33005a532835f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/92fa258748d49d2476716c3a56f33005a532835f",
        "files": [
          "winpr/include/winpr/stream.h"
        ],
        "message": "Fixed BehaviourSanitizer  warnings in streams.\n\n(cherry picked from commit 66ea3d0579841b468684e05936fabf654727e720)",
        "before_after_code_files": [
          "winpr/include/winpr/stream.h||winpr/include/winpr/stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/stream.h||winpr/include/winpr/stream.h": [
          "File: winpr/include/winpr/stream.h -> winpr/include/winpr/stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:    Stream_Seek(_s, sizeof(_t)); \\",
          "75:  } while (0)",
          "83:  } while (0)",
          "100:  } while (0)",
          "103:  do                                                                                   \\",
          "104:  {                                                                                    \\",
          "107:   if (_p)                                                                          \\",
          "108:    Stream_Seek(_s, sizeof(_t));                                                 \\",
          "109:  } while (0)",
          "120:  } while (0)",
          "131:  } while (0)",
          "133: #define Stream_Read_UINT8(_s, _v) _stream_read_n8(UINT8, _s, _v, TRUE)",
          "",
          "[Removed Lines]",
          "77: #define _stream_read_n16_le(_t, _s, _v, _p)                                    \\",
          "78:  do                                                                         \\",
          "79:  {                                                                          \\",
          "80:   (_v) = (_t)(*(_s)->pointer) + (_t)(((_t)(*((_s)->pointer + 1))) << 8); \\",
          "81:   if (_p)                                                                \\",
          "82:    Stream_Seek(_s, sizeof(_t));                                       \\",
          "85: #define _stream_read_n16_be(_t, _s, _v, _p)                                    \\",
          "86:  do                                                                         \\",
          "87:  {                                                                          \\",
          "88:   (_v) = (_t)(((_t)(*(_s)->pointer)) << 8) + (_t)(*((_s)->pointer + 1)); \\",
          "89:   if (_p)                                                                \\",
          "90:    Stream_Seek(_s, sizeof(_t));                                       \\",
          "91:  } while (0)",
          "93: #define _stream_read_n32_le(_t, _s, _v, _p)                                                 \\",
          "94:  do                                                                                      \\",
          "95:  {                                                                                       \\",
          "96:   (_v) = (_t)(*(_s)->pointer) + (((_t)(*((_s)->pointer + 1))) << 8) +                 \\",
          "97:          (((_t)(*((_s)->pointer + 2))) << 16) + (((_t)(*((_s)->pointer + 3))) << 24); \\",
          "98:   if (_p)                                                                             \\",
          "99:    Stream_Seek(_s, sizeof(_t));                                                    \\",
          "102: #define _stream_read_n32_be(_t, _s, _v, _p)                                              \\",
          "105:   (_v) = (((_t)(*((_s)->pointer))) << 24) + (((_t)(*((_s)->pointer + 1))) << 16) + \\",
          "106:          (((_t)(*((_s)->pointer + 2))) << 8) + (((_t)(*((_s)->pointer + 3))));     \\",
          "111: #define _stream_read_n64_le(_t, _s, _v, _p)                                                  \\",
          "112:  do                                                                                       \\",
          "113:  {                                                                                        \\",
          "114:   (_v) = (_t)(*(_s)->pointer) + (((_t)(*((_s)->pointer + 1))) << 8) +                  \\",
          "115:          (((_t)(*((_s)->pointer + 2))) << 16) + (((_t)(*((_s)->pointer + 3))) << 24) + \\",
          "116:          (((_t)(*((_s)->pointer + 4))) << 32) + (((_t)(*((_s)->pointer + 5))) << 40) + \\",
          "117:          (((_t)(*((_s)->pointer + 6))) << 48) + (((_t)(*((_s)->pointer + 7))) << 56);  \\",
          "118:   if (_p)                                                                              \\",
          "119:    Stream_Seek(_s, sizeof(_t));                                                     \\",
          "122: #define _stream_read_n64_be(_t, _s, _v, _p)                                                  \\",
          "123:  do                                                                                       \\",
          "124:  {                                                                                        \\",
          "125:   (_v) = (((_t)(*((_s)->pointer))) << 56) + (((_t)(*((_s)->pointer + 1))) << 48) +     \\",
          "126:          (((_t)(*((_s)->pointer + 2))) << 40) + (((_t)(*((_s)->pointer + 3))) << 32) + \\",
          "127:          (((_t)(*((_s)->pointer + 4))) << 24) + (((_t)(*((_s)->pointer + 5))) << 16) + \\",
          "128:          (((_t)(*((_s)->pointer + 6))) << 8) + (((_t)(*((_s)->pointer + 7))));         \\",
          "129:   if (_p)                                                                              \\",
          "130:    Stream_Seek(_s, sizeof(_t));                                                     \\",
          "",
          "[Added Lines]",
          "77: #define _stream_read_n16_le(_t, _s, _v, _p)                                      \\",
          "78:  do                                                                           \\",
          "79:  {                                                                            \\",
          "80:   (_v) = (_t)((*(_s)->pointer) + (((UINT16)(*((_s)->pointer + 1))) << 8)); \\",
          "81:   if (_p)                                                                  \\",
          "82:    Stream_Seek(_s, sizeof(_t));                                         \\",
          "85: #define _stream_read_n16_be(_t, _s, _v, _p)                                              \\",
          "86:  do                                                                                   \\",
          "87:  {                                                                                    \\",
          "88:   (_v) = (_t)((((UINT16)(*(_s)->pointer)) << 8) + (UINT16)(*((_s)->pointer + 1))); \\",
          "89:   if (_p)                                                                          \\",
          "90:    Stream_Seek(_s, sizeof(_t));                                                 \\",
          "93: #define _stream_read_n32_le(_t, _s, _v, _p)                                              \\",
          "96:   (_v) = (_t)((UINT32)(*(_s)->pointer) + (((UINT32)(*((_s)->pointer + 1))) << 8) + \\",
          "97:               (((UINT32)(*((_s)->pointer + 2))) << 16) +                           \\",
          "98:               ((((UINT32) * ((_s)->pointer + 3))) << 24));                         \\",
          "103: #define _stream_read_n32_be(_t, _s, _v, _p)                                                        \\",
          "104:  do                                                                                             \\",
          "105:  {                                                                                              \\",
          "106:   (_v) = (_t)(((((UINT32) * ((_s)->pointer))) << 24) +                                       \\",
          "107:               (((UINT32)(*((_s)->pointer + 1))) << 16) +                                     \\",
          "108:               (((UINT32)(*((_s)->pointer + 2))) << 8) + (((UINT32)(*((_s)->pointer + 3))))); \\",
          "109:   if (_p)                                                                                    \\",
          "110:    Stream_Seek(_s, sizeof(_t));                                                           \\",
          "111:  } while (0)",
          "113: #define _stream_read_n64_le(_t, _s, _v, _p)                                                       \\",
          "114:  do                                                                                            \\",
          "115:  {                                                                                             \\",
          "116:   (_v) = (_t)(                                                                              \\",
          "117:       (UINT64)(*(_s)->pointer) + (((UINT64)(*((_s)->pointer + 1))) << 8) +                  \\",
          "118:       (((UINT64)(*((_s)->pointer + 2))) << 16) + (((UINT64)(*((_s)->pointer + 3))) << 24) + \\",
          "119:       (((UINT64)(*((_s)->pointer + 4))) << 32) + (((UINT64)(*((_s)->pointer + 5))) << 40) + \\",
          "120:       (((UINT64)(*((_s)->pointer + 6))) << 48) + (((UINT64)(*((_s)->pointer + 7))) << 56)); \\",
          "121:   if (_p)                                                                                   \\",
          "122:    Stream_Seek(_s, sizeof(_t));                                                          \\",
          "125: #define _stream_read_n64_be(_t, _s, _v, _p)                                                       \\",
          "126:  do                                                                                            \\",
          "127:  {                                                                                             \\",
          "128:   (_v) = (_t)(                                                                              \\",
          "129:       (((UINT64)(*((_s)->pointer))) << 56) + (((UINT64)(*((_s)->pointer + 1))) << 48) +     \\",
          "130:       (((UINT64)(*((_s)->pointer + 2))) << 40) + (((UINT64)(*((_s)->pointer + 3))) << 32) + \\",
          "131:       (((UINT64)(*((_s)->pointer + 4))) << 24) + (((UINT64)(*((_s)->pointer + 5))) << 16) + \\",
          "132:       (((UINT64)(*((_s)->pointer + 6))) << 8) + (((UINT64)(*((_s)->pointer + 7)))));        \\",
          "133:   if (_p)                                                                                   \\",
          "134:    Stream_Seek(_s, sizeof(_t));                                                          \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e348b9a18eb5dfabf431ab8fdc7f9cbb59ec967",
      "candidate_info": {
        "commit_hash": "6e348b9a18eb5dfabf431ab8fdc7f9cbb59ec967",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6e348b9a18eb5dfabf431ab8fdc7f9cbb59ec967",
        "files": [
          "winpr/libwinpr/utils/sam.c"
        ],
        "message": "Fixed invalid argument to strtok_s\n\n(cherry picked from commit dc4ac3ba17b6a340b96aa3f6363c6fac866696b7)",
        "before_after_code_files": [
          "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c": [
          "File: winpr/libwinpr/utils/sam.c -> winpr/libwinpr/utils/sam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   }",
          "312:   SamResetEntry(entry);",
          "314:  }",
          "316: out_fail:",
          "",
          "[Removed Lines]",
          "313:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "[Added Lines]",
          "313:   sam->line = strtok_s(NULL, \"\\n\", &sam->context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:   }",
          "427:   SamResetEntry(entry);",
          "429:  }",
          "431: out_fail:",
          "",
          "[Removed Lines]",
          "428:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "[Added Lines]",
          "428:   sam->line = strtok_s(NULL, \"\\n\", &sam->context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
      "candidate_info": {
        "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
          "369: {",
          "370:  wStream* s;",
          "374:  NTLM_AV_PAIR* AvTimestamp;",
          "375:  NTLM_CHALLENGE_MESSAGE* message;",
          "376:  ntlm_generate_client_challenge(context);",
          "377:  message = &context->CHALLENGE_MESSAGE;",
          "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
          "",
          "[Removed Lines]",
          "371:  int length;",
          "372:  PBYTE StartOffset;",
          "373:  PBYTE PayloadOffset;",
          "",
          "[Added Lines]",
          "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
          "372:  size_t length;",
          "373:  size_t StartOffset;",
          "374:  size_t PayloadOffset;",
          "377:  if (!context || !buffer)",
          "378:   return SEC_E_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:  if (!s)",
          "382:   return SEC_E_INTERNAL_ERROR;",
          "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
          "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
          "404:  if (Stream_GetRemainingLength(s) < 4)",
          "411:  context->NegotiateFlags = message->NegotiateFlags;",
          "413:  if (Stream_GetRemainingLength(s) < 8)",
          "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
          "422:  if (Stream_GetRemainingLength(s) < 8)",
          "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
          "437:  {",
          "443:  }",
          "448:  if (message->TargetName.Len > 0)",
          "449:  {",
          "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
          "455:  }",
          "457:  if (message->TargetInfo.Len > 0)",
          "",
          "[Removed Lines]",
          "384:  StartOffset = Stream_Pointer(s);",
          "387:  {",
          "388:   Stream_Free(s, FALSE);",
          "389:   return SEC_E_INVALID_TOKEN;",
          "390:  }",
          "393:  {",
          "394:   Stream_Free(s, FALSE);",
          "395:   return SEC_E_INVALID_TOKEN;",
          "396:  }",
          "399:  {",
          "400:   Stream_Free(s, FALSE);",
          "401:   return SEC_E_INVALID_TOKEN;",
          "402:  }",
          "405:  {",
          "406:   Stream_Free(s, FALSE);",
          "407:   return SEC_E_INVALID_TOKEN;",
          "408:  }",
          "414:  {",
          "415:   Stream_Free(s, FALSE);",
          "416:   return SEC_E_INVALID_TOKEN;",
          "417:  }",
          "423:  {",
          "424:   Stream_Free(s, FALSE);",
          "425:   return SEC_E_INVALID_TOKEN;",
          "426:  }",
          "431:  {",
          "432:   Stream_Free(s, FALSE);",
          "433:   return SEC_E_INVALID_TOKEN;",
          "434:  }",
          "439:   {",
          "440:    Stream_Free(s, FALSE);",
          "441:    return SEC_E_INVALID_TOKEN;",
          "442:   }",
          "446:  PayloadOffset = Stream_Pointer(s);",
          "451:   {",
          "452:    Stream_Free(s, FALSE);",
          "453:    return SEC_E_INTERNAL_ERROR;",
          "454:   }",
          "",
          "[Added Lines]",
          "388:  StartOffset = Stream_GetPosition(s);",
          "391:   goto fail;",
          "394:   goto fail;",
          "397:   goto fail;",
          "400:   goto fail;",
          "406:   goto fail;",
          "412:   goto fail;",
          "417:   goto fail;",
          "422:    goto fail;",
          "426:  PayloadOffset = Stream_GetPosition(s);",
          "428:  status = SEC_E_INTERNAL_ERROR;",
          "432:    goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "459:   size_t cbAvTimestamp;",
          "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
          "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
          "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
          "",
          "[Removed Lines]",
          "462:   {",
          "463:    Stream_Free(s, FALSE);",
          "464:    return SEC_E_INTERNAL_ERROR;",
          "465:   }",
          "",
          "[Added Lines]",
          "440:    goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
          "476:    if (!ptr)",
          "479:    if (context->NTLMv2)",
          "480:     context->UseMIC = TRUE;",
          "",
          "[Removed Lines]",
          "477:     return SEC_E_INTERNAL_ERROR;",
          "",
          "[Added Lines]",
          "452:     goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:  }",
          "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
          "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
          "495: #ifdef WITH_DEBUG_NTLM",
          "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
          "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
          "",
          "[Removed Lines]",
          "489:  {",
          "490:   Stream_Free(s, FALSE);",
          "491:   return SEC_E_INTERNAL_ERROR;",
          "492:  }",
          "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
          "",
          "[Added Lines]",
          "462:  if (length > buffer->cbBuffer)",
          "463:   goto fail;",
          "466:   goto fail;",
          "468:  if (context->ChallengeMessage.pvBuffer)",
          "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "517:  if (context->NTLMv2)",
          "518:  {",
          "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
          "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
          "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
          "",
          "[Removed Lines]",
          "520:   {",
          "521:    Stream_Free(s, FALSE);",
          "522:    return SEC_E_INTERNAL_ERROR;",
          "523:   }",
          "",
          "[Added Lines]",
          "495:    goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "533:  {",
          "534:   Stream_Free(s, FALSE);",
          "535:   return SEC_E_INTERNAL_ERROR;",
          "536:  }",
          "539:  {",
          "540:   Stream_Free(s, FALSE);",
          "541:   return SEC_E_INTERNAL_ERROR;",
          "542:  }",
          "",
          "[Added Lines]",
          "505:   goto fail;",
          "508:   goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "579: #endif",
          "580:  context->state = NTLM_STATE_AUTHENTICATE;",
          "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "582:  Stream_Free(s, FALSE);",
          "584: }",
          "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
          "",
          "[Removed Lines]",
          "583:  return SEC_I_CONTINUE_NEEDED;",
          "",
          "[Added Lines]",
          "548:  status = SEC_I_CONTINUE_NEEDED;",
          "549: fail:",
          "551:  return status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d5bb41445d9f229f8633555fccf983e068de627",
      "candidate_info": {
        "commit_hash": "9d5bb41445d9f229f8633555fccf983e068de627",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9d5bb41445d9f229f8633555fccf983e068de627",
        "files": [
          "channels/cliprdr/cliprdr_common.c",
          "libfreerdp/core/test/TestSettings.c",
          "winpr/libwinpr/utils/collections/StreamPool.c"
        ],
        "message": "Removed unused variable warnings\n\n(cherry picked from commit 8052708f3354a686de98b62d641e9d0eb61a74db)",
        "before_after_code_files": [
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c",
          "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c",
          "winpr/libwinpr/utils/collections/StreamPool.c||winpr/libwinpr/utils/collections/StreamPool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395: UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL useLongFormatNames)",
          "396: {",
          "397:  UINT32 index;",
          "399:  BOOL asciiNames;",
          "400:  int formatNameLength;",
          "401:  char* szFormatName;",
          "",
          "[Removed Lines]",
          "398:  size_t position;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c": [
          "File: libfreerdp/core/test/TestSettings.c -> libfreerdp/core/test/TestSettings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:  {",
          "186:   const size_t key = pointer_list_indices[x];",
          "187:   const void* val = freerdp_settings_get_pointer(settings, key);",
          "188:  }",
          "190: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:   WINPR_UNUSED(val);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/collections/StreamPool.c||winpr/libwinpr/utils/collections/StreamPool.c": [
          "File: winpr/libwinpr/utils/collections/StreamPool.c -> winpr/libwinpr/utils/collections/StreamPool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:  pool->aArray[(pool->aSize)++] = s;",
          "233:  StreamPool_RemoveUsed(pool, s);",
          "236:  if (pool->synchronized)",
          "237:   LeaveCriticalSection(&pool->lock);",
          "238: }",
          "",
          "[Removed Lines]",
          "235: out_fail:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0122ebfffde95f8949a36cd0b01ba64800063283",
      "candidate_info": {
        "commit_hash": "0122ebfffde95f8949a36cd0b01ba64800063283",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0122ebfffde95f8949a36cd0b01ba64800063283",
        "files": [
          "winpr/libwinpr/crt/utf.c"
        ],
        "message": "utf8 behaviour fixes\n\n(cherry picked from commit bb78eb4fa6f8618a70995eaf17aba94cc47a1e74)",
        "before_after_code_files": [
          "winpr/libwinpr/crt/utf.c||winpr/libwinpr/crt/utf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/utf.c||winpr/libwinpr/crt/utf.c": [
          "File: winpr/libwinpr/crt/utf.c -> winpr/libwinpr/crt/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: ConversionResult ConvertUTF16toUTF8(const WCHAR** sourceStart, const WCHAR* sourceEnd,",
          "261: {",
          "263:  const WCHAR* source;",
          "267:  source = *sourceStart;",
          "271:  while (source < sourceEnd)",
          "272:  {",
          "",
          "[Removed Lines]",
          "260:                                     BYTE** targetStart, BYTE* targetEnd, ConversionFlags flags)",
          "262:  BYTE* target;",
          "264:  BOOL computeLength;",
          "265:  ConversionResult result;",
          "266:  computeLength = (!targetEnd) ? TRUE : FALSE;",
          "268:  target = *targetStart;",
          "269:  result = conversionOK;",
          "",
          "[Added Lines]",
          "260:                                     BYTE** targetStart, BYTE* te, ConversionFlags flags)",
          "262:  size_t pos = 0;",
          "263:  size_t end = 0;",
          "265:  const BOOL computeLength = (!te) ? TRUE : FALSE;",
          "266:  ConversionResult result = conversionOK;",
          "268:  if (targetStart && te)",
          "269:  {",
          "270:   const size_t s = (size_t)*targetStart;",
          "271:   const size_t e = (size_t)te;",
          "272:   if (s > e)",
          "273:    return sourceIllegal;",
          "274:   end = e - s;",
          "275:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:    ch = UNI_REPLACEMENT_CHAR;",
          "346:   }",
          "351:   {",
          "354:    result = targetExhausted;",
          "355:    break;",
          "356:   }",
          "",
          "[Removed Lines]",
          "348:   target += bytesToWrite;",
          "350:   if ((target > targetEnd) && (!computeLength))",
          "353:    target -= bytesToWrite;",
          "",
          "[Added Lines]",
          "356:   pos += bytesToWrite;",
          "358:   if ((pos > end) && (!computeLength))",
          "361:    pos -= bytesToWrite;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:    {",
          "363:     case 4:",
          "365:      ch >>= 6;",
          "367:     case 3:",
          "369:      ch >>= 6;",
          "371:     case 2:",
          "373:      ch >>= 6;",
          "375:     case 1:",
          "377:    }",
          "378:   }",
          "379:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:      (*targetStart)[--pos] = (BYTE)((ch | byteMark) & byteMask);",
          "376:      (*targetStart)[--pos] = (BYTE)((ch | byteMark) & byteMask);",
          "380:      (*targetStart)[--pos] = (BYTE)((ch | byteMark) & byteMask);",
          "384:      (*targetStart)[--pos] = (BYTE)(ch | firstByteMark[bytesToWrite]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:    {",
          "384:     case 4:",
          "387:     case 3:",
          "390:     case 2:",
          "393:     case 1:",
          "395:    }",
          "396:   }",
          "399:  }",
          "403:  return result;",
          "404: }",
          "",
          "[Removed Lines]",
          "385:      --target;",
          "388:      --target;",
          "391:      --target;",
          "394:      --target;",
          "398:   target += bytesToWrite;",
          "",
          "[Added Lines]",
          "393:      --pos;",
          "396:      --pos;",
          "399:      --pos;",
          "402:      --pos;",
          "406:   pos += bytesToWrite;",
          "410:  if (targetStart && *targetStart)",
          "412:  else if (targetStart)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503: ConversionResult ConvertUTF8toUTF16(const BYTE** sourceStart, const BYTE* sourceEnd,",
          "504:                                     WCHAR** targetStart, WCHAR* targetEnd, ConversionFlags flags)",
          "505: {",
          "507:  const BYTE* source;",
          "508:  BOOL computeLength;",
          "509:  ConversionResult result;",
          "510:  computeLength = (!targetEnd) ? TRUE : FALSE;",
          "511:  result = conversionOK;",
          "512:  source = *sourceStart;",
          "515:  while (source < sourceEnd)",
          "516:  {",
          "",
          "[Removed Lines]",
          "506:  WCHAR* target;",
          "513:  target = *targetStart;",
          "",
          "[Added Lines]",
          "517:  size_t target = 0;",
          "518:  size_t end = 0;",
          "526:  if (targetStart && targetEnd)",
          "527:  {",
          "528:   const size_t s = (size_t)*targetStart;",
          "529:   const size_t e = (size_t)targetEnd;",
          "530:   if (s > e)",
          "531:    return sourceIllegal;",
          "533:   end = ((size_t)(targetEnd)) - ((size_t)(*targetStart));",
          "534:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "562:   ch -= offsetsFromUTF8[extraBytesToRead];",
          "565:   {",
          "567:    result = targetExhausted;",
          "",
          "[Removed Lines]",
          "564:   if ((target >= targetEnd) && (!computeLength))",
          "",
          "[Added Lines]",
          "585:   if ((target >= end) && (!computeLength))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "583:     else",
          "584:     {",
          "585:      if (!computeLength)",
          "592:     }",
          "593:    }",
          "594:    else",
          "595:    {",
          "596:     if (!computeLength)",
          "603:    }",
          "604:   }",
          "605:   else if (ch > UNI_MAX_UTF16)",
          "",
          "[Removed Lines]",
          "586:      {",
          "587:       Data_Write_UINT16(target, UNI_REPLACEMENT_CHAR);",
          "588:       target++;",
          "589:      }",
          "590:      else",
          "591:       target++;",
          "597:     {",
          "599:      target++;",
          "600:     }",
          "601:     else",
          "602:      target++;",
          "",
          "[Added Lines]",
          "607:       Data_Write_UINT16(&(*targetStart)[target], UNI_REPLACEMENT_CHAR);",
          "608:      target++;",
          "615:     target++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "613:    else",
          "614:    {",
          "615:     if (!computeLength)",
          "622:    }",
          "623:   }",
          "624:   else",
          "625:   {",
          "628:    {",
          "630:     result = targetExhausted;",
          "",
          "[Removed Lines]",
          "616:     {",
          "617:      Data_Write_UINT16(target, UNI_REPLACEMENT_CHAR);",
          "618:      target++;",
          "619:     }",
          "620:     else",
          "621:      target++;",
          "627:    if ((target + 1 >= targetEnd) && (!computeLength))",
          "",
          "[Added Lines]",
          "629:      Data_Write_UINT16(&(*targetStart)[target], UNI_REPLACEMENT_CHAR);",
          "630:     target++;",
          "636:    if ((target + 1 >= end) && (!computeLength))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "637:    {",
          "638:     WCHAR wchar;",
          "639:     wchar = (ch >> halfShift) + UNI_SUR_HIGH_START;",
          "642:     wchar = (ch & halfMask) + UNI_SUR_LOW_START;",
          "645:    }",
          "646:    else",
          "647:    {",
          "",
          "[Removed Lines]",
          "640:     Data_Write_UINT16(target, wchar);",
          "641:     target++;",
          "643:     Data_Write_UINT16(target, wchar);",
          "644:     target++;",
          "",
          "[Added Lines]",
          "649:     Data_Write_UINT16(&(*targetStart)[target++], wchar);",
          "651:     Data_Write_UINT16(&(*targetStart)[target++], wchar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652:  }",
          "656:  return result;",
          "657: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:  if (targetStart && (*targetStart))",
          "664:  else if (targetStart)",
          "",
          "---------------"
        ]
      }
    }
  ]
}