{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42925d1f1a9fb1b220d6e5044a0143e3c5631b28",
      "candidate_info": {
        "commit_hash": "42925d1f1a9fb1b220d6e5044a0143e3c5631b28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42925d1f1a9fb1b220d6e5044a0143e3c5631b28",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() statement inside of btree.\n\nFossilOrigin-Name: 03c1d75ddc063469fc856114595bd12d21759fe0979ce1ba1cf52e48e6b0d4a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1f12978b53683114ab0ef0e84a14dd4fabc72750b214aac19cd9da22a582a27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: static Pgno btreePagecount(BtShared *pBt){",
          "2141: }",
          "2142: u32 sqlite3BtreeLastPage(Btree *p){",
          "2143:   assert( sqlite3BtreeHoldsMutex(p) );",
          "2145:   return btreePagecount(p->pBt);",
          "2146: }",
          "",
          "[Removed Lines]",
          "2140:   return pBt->nPage;",
          "2144:   assert( ((p->pBt->nPage)&0x80000000)==0 );",
          "",
          "[Added Lines]",
          "2140:   assert( (pBt->nPage & 0x80000000)==0 || CORRUPT_DB );",
          "2141:   return pBt->nPage & 0x7fffffff;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe2a3f1d241b21ce93c679b16c717a99f58c6cd7",
      "candidate_info": {
        "commit_hash": "fe2a3f1d241b21ce93c679b16c717a99f58c6cd7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe2a3f1d241b21ce93c679b16c717a99f58c6cd7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/upsert.c",
          "test/upsert1.test"
        ],
        "message": "If an UPSERT can cause an Abort due to a constraint failure, make sure the query planner knows this.  Ticket [7c13db5c3bf74001].\n\nFossilOrigin-Name: f14ce948662f3445a06d84d4f32d9b81143e0cffaf773d8aa4d3a609bfb9682b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/upsert.c||src/upsert.c",
          "test/upsert1.test||test/upsert1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e54560495926fbb8a2ce829c677a2dd0066e46b7a8d4ada9d8a34a3426959836",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/upsert.c||src/upsert.c": [
          "File: src/upsert.c -> src/upsert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:       VdbeCoverage(v);",
          "237:       sqlite3VdbeAddOp4(v, OP_Halt, SQLITE_CORRUPT, OE_Abort, 0,",
          "238:             \"corrupt database\", P4_STATIC);",
          "239:       sqlite3VdbeJumpHere(v, i);",
          "240:     }",
          "241:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:       sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ],
        "test/upsert1.test||test/upsert1.test": [
          "File: test/upsert1.test -> test/upsert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   INSERT INTO t1 VALUES(3) ON CONFLICT(x) DO NOTHING;",
          "234: } {1 {cannot UPSERT a view}}",
          "236: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: # 2019-12-26 ticket 7c13db5c3bf74001",
          "237: reset_db",
          "238: do_catchsql_test upsert1-1000 {",
          "239:   CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 UNIQUE) WITHOUT ROWID;",
          "240:   INSERT OR FAIL INTO t0(c2) VALUES (0), (NULL)",
          "241:     ON CONFLICT(c2) DO UPDATE SET c1 = c0;",
          "242: } {1 {NOT NULL constraint failed: t0.c0}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d906f1b5a65060d7df487e6724d87c53c805dee",
      "candidate_info": {
        "commit_hash": "4d906f1b5a65060d7df487e6724d87c53c805dee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d906f1b5a65060d7df487e6724d87c53c805dee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/vtabJ.test"
        ],
        "message": "Fix UPDATE FROM statements on virtual tables that are declared WITHOUT ROWID.\n\nFossilOrigin-Name: bcb0bc6a7b7006f07adb7266b1fecca39bf85a0adea6d78a341623a3546f2c2a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/vtabJ.test||test/vtabJ.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2fa08c3963f008d4723c3f4f4496abcb6d4b575c85ba4a911a6aed5730b5948b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: #endif",
          "235:       pList = sqlite3ExprListAppend(pParse, pList, pNew);",
          "236:     }",
          "238:   }else if( pTab->pSelect ){",
          "239:     for(i=0; i<pTab->nCol; i++){",
          "240:       pList = sqlite3ExprListAppend(pParse, pList, exprRowColumn(pParse, i));",
          "",
          "[Removed Lines]",
          "237:     eDest = SRT_Upfrom;",
          "",
          "[Added Lines]",
          "237:     eDest = IsVirtual(pTab) ? SRT_Table : SRT_Upfrom;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1187:   regArg = pParse->nMem + 1;",
          "1188:   pParse->nMem += nArg;",
          "1189:   if( pSrc->nSrc>1 ){",
          "1190:     Expr *pRow;",
          "1191:     ExprList *pList;",
          "1194:     }else{",
          "1196:     }",
          "1197:     pList = sqlite3ExprListAppend(pParse, 0, pRow);",
          "",
          "[Removed Lines]",
          "1192:     if( pRowid ){",
          "1193:       pRow = sqlite3ExprDup(db, pRowid, 0);",
          "1195:       pRow = sqlite3PExpr(pParse, TK_ROW, 0, 0);",
          "",
          "[Added Lines]",
          "1190:     Index *pPk = 0;",
          "1193:     if( HasRowid(pTab) ){",
          "1194:       if( pRowid ){",
          "1195:         pRow = sqlite3ExprDup(db, pRowid, 0);",
          "1196:       }else{",
          "1197:         pRow = sqlite3PExpr(pParse, TK_ROW, 0, 0);",
          "1198:       }",
          "1201:       pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1202:       assert( pPk!=0 );",
          "1203:       assert( pPk->nKeyCol==1 );",
          "1204:       iPk = pPk->aiColumn[0];",
          "1205:       if( aXRef[iPk]>=0 ){",
          "1206:         pRow = sqlite3ExprDup(db, pChanges->a[aXRef[iPk]].pExpr, 0);",
          "1207:       }else{",
          "1208:         pRow = exprRowColumn(pParse, iPk);",
          "1209:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1206:       }",
          "1207:     }",
          "1210:     sqlite3ExprListDelete(db, pList);",
          "1211:     eOnePass = ONEPASS_OFF;",
          "1212:   }else{",
          "",
          "[Removed Lines]",
          "1209:     updateFromSelect(pParse, ephemTab, 0, pList, pSrc, pWhere, 0, 0);",
          "",
          "[Added Lines]",
          "1223:     updateFromSelect(pParse, ephemTab, pPk, pList, pSrc, pWhere, 0, 0);",
          "",
          "---------------"
        ],
        "test/vtabJ.test||test/vtabJ.test": [
          "File: test/vtabJ.test -> test/vtabJ.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   SELECT name, value FROM tclvar where name = 'xx';",
          "123: } {}",
          "126: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: #-------------------------------------------------------------------------",
          "127: do_execsql_test 200 {",
          "128:   CREATE TABLE var(k TEXT, v TEXT);",
          "129:   INSERT INTO var VALUES('testvar1', 10);",
          "130:   INSERT INTO var VALUES('testvar2', 20);",
          "131:   INSERT INTO var VALUES('testvar3', 30);",
          "132: }",
          "134: do_test 210 {",
          "135:   foreach {testvar1 testvar2 testvar3} {1 2 3} {}",
          "136:   execsql {",
          "137:     UPDATE tclvar SET value = var.v FROM var WHERE name = var.k;",
          "138:   }",
          "139:   list $testvar1 $testvar2 $testvar3",
          "140: } {10 20 30}",
          "142: do_test 220 {",
          "143:   execsql {",
          "144:     CREATE TABLE nam(k TEXT, v TEXT);",
          "145:     INSERT INTO nam VALUES('testvar1', 'tv1');",
          "146:     INSERT INTO nam VALUES('testvar2', 'tv2');",
          "147:     INSERT INTO nam VALUES('testvar3', 'tv3');",
          "148:     UPDATE tclvar SET fullname = nam.v FROM nam WHERE name = nam.k;",
          "149:   }",
          "150:   list $tv1 $tv2 $tv3",
          "151: } {10 20 30}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da36933eb4192ddf4fbc836b7e419258f0b7d2c1",
      "candidate_info": {
        "commit_hash": "da36933eb4192ddf4fbc836b7e419258f0b7d2c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/da36933eb4192ddf4fbc836b7e419258f0b7d2c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "src/vdbe.c"
        ],
        "message": "Document the dual-use of the P5 operand to the OP_MakeRecord opcode.\n\nFossilOrigin-Name: a73f80f22a585d1a2f55650d5cda4ece6c4ef039ef5eae2c02c3e5c269d4c30a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 87c7d962581f4bb1224086701352850ede9847dc76235b33c7c2a35ef594d382",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033:     sqlite3MultiWrite(pParse);",
          "1034:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regArg, nArg, regRec);",
          "1038:     sqlite3VdbeChangeP5(v, OPFLAG_NOCHNG_MAGIC);",
          "",
          "[Removed Lines]",
          "1035: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "1035: #if defined(SQLITE_DEBUG) && !defined(SQLITE_ENABLE_NULL_TRIM)",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3043:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "3044:         pRec->uTemp = 10;",
          "3045:       }else{",
          "3046:         pRec->uTemp = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3054: #ifndef SQLITE_ENABLE_NULL_TRIM",
          "3056: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcf31b28ff038dfde90e06814c4a86e1f9aa7499",
      "candidate_info": {
        "commit_hash": "fcf31b28ff038dfde90e06814c4a86e1f9aa7499",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcf31b28ff038dfde90e06814c4a86e1f9aa7499",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/wal.c"
        ],
        "message": "Add the SQLITE_FCNTL_CKPT_START file-control.  Use it to optimize the cksumvfs extension.\n\nFossilOrigin-Name: b40f5aa344ae10cf4da83b3aa9e4866d6f6ffb06ba7e34ec1ce80c92468cf3bf",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   return pFile->pMethods->xClose(pFile);",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: static void cksmSetFlags(CksmFile *p, int hasCorrectReserveSize){",
          "375:   if( hasCorrectReserveSize!=p->computeCksm ){",
          "376:     p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "377:     if( p->pPartner ){",
          "378:       p->pPartner->verifyCksm = hasCorrectReserveSize;",
          "379:       p->pPartner->computeCksm = hasCorrectReserveSize;",
          "380:     }",
          "381:   }",
          "382: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:     if( iOfst==0 && iAmt>=100 && memcmp(zBuf,\"SQLite format 3\",16)==0 ){",
          "384:       u8 *d = (u8*)zBuf;",
          "385:       char hasCorrectReserveSize = (d[20]==8);",
          "389:     }",
          "398:     ){",
          "399:       u8 cksum[8];",
          "400:       cksmCompute((u8*)zBuf, iAmt-8, cksum);",
          "",
          "[Removed Lines]",
          "386:       if( hasCorrectReserveSize!=p->computeCksm ){",
          "387:         p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "388:       }",
          "",
          "[Added Lines]",
          "401:       cksmSetFlags(p, hasCorrectReserveSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:   if( iOfst==0 && iAmt>=100 && memcmp(zBuf,\"SQLite format 3\",16)==0 ){",
          "424:     u8 *d = (u8*)zBuf;",
          "425:     char hasCorrectReserveSize = (d[20]==8);",
          "429:   }",
          "",
          "[Removed Lines]",
          "426:     if( hasCorrectReserveSize!=p->computeCksm ){",
          "427:       p->computeCksm = p->verifyCksm = hasCorrectReserveSize;",
          "428:     }",
          "",
          "[Added Lines]",
          "440:     cksmSetFlags(p, hasCorrectReserveSize);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:     cksmCompute((u8*)zBuf, iAmt-8, ((u8*)zBuf)+iAmt-8);",
          "438:   }",
          "439:   return pFile->pMethods->xWrite(pFile, zBuf, iAmt, iOfst);",
          "",
          "[Removed Lines]",
          "436:   if( iAmt>=512 && p->computeCksm ){",
          "",
          "[Added Lines]",
          "448:   if( iAmt>=512",
          "449:    && p->computeCksm",
          "450:    && !p->inCkpt",
          "451:   ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:         }else{",
          "511:           p->verifyCksm = 0;",
          "512:         }",
          "513:       }",
          "514:       azArg[0] = sqlite3_mprintf(\"%d\",p->verifyCksm);",
          "515:       return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:         if( p->pPartner ) p->pPartner->verifyCksm = p->verifyCksm;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519:       return SQLITE_OK;",
          "520:     }",
          "521:   }",
          "522:   rc = pFile->pMethods->xFileControl(pFile, op, pArg);",
          "523:   if( rc==SQLITE_OK && op==SQLITE_FCNTL_VFSNAME ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:   }else if( op==SQLITE_FCNTL_CKPT_START || op==SQLITE_FCNTL_CKPT_DONE ){",
          "538:     p->inCkpt = op==SQLITE_FCNTL_CKPT_START;",
          "539:     if( p->pPartner ) p->pPartner->inCkpt = p->inCkpt;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 853703cd6d44d6dd48ef5eda6523e374b8ebdf7c338ddaad31c15a40a8b3fd9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1155: #define SQLITE_FCNTL_SIZE_LIMIT             36",
          "1156: #define SQLITE_FCNTL_CKPT_DONE              37",
          "1157: #define SQLITE_FCNTL_RESERVE_BYTES          38",
          "1160: #define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1163: #define SQLITE_FCNTL_CKPT_START             39",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868:       if( rc==SQLITE_OK ){",
          "1869:         i64 nReq = ((i64)mxPage * szPage);",
          "1871:         rc = sqlite3OsFileSize(pWal->pDbFd, &nSize);",
          "1872:         if( rc==SQLITE_OK && nSize<nReq ){",
          "1873:           sqlite3OsFileControlHint(pWal->pDbFd, SQLITE_FCNTL_SIZE_HINT, &nReq);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871:         sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_START, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1895:         rc = sqlite3OsWrite(pWal->pDbFd, zBuf, szPage, iOffset);",
          "1896:         if( rc!=SQLITE_OK ) break;",
          "1897:       }",
          "1900:       if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1899:       sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_DONE, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1906:             rc = sqlite3OsSync(pWal->pDbFd, CKPT_SYNC_FLAGS(sync_flags));",
          "1907:           }",
          "1908:         }",
          "1913:         if( rc==SQLITE_OK ){",
          "1914:           pInfo->nBackfill = mxSafeFrame;",
          "1915:         }",
          "",
          "[Removed Lines]",
          "1909:         if( rc==SQLITE_OK ){",
          "1910:           rc = sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_DONE, 0);",
          "1911:           if( rc==SQLITE_NOTFOUND ) rc = SQLITE_OK;",
          "1912:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}