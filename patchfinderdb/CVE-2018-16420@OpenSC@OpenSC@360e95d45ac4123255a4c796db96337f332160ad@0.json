{
  "cve_id": "CVE-2018-16420",
  "cve_desc": "Several buffer overflows when handling responses from an ePass 2003 Card in decrypt_response in libopensc/card-epass2003.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to cause a denial of service (application crash) or possibly have unspecified other impact.",
  "repo": "OpenSC/OpenSC",
  "patch_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "patch_info": {
    "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
    "repo": "OpenSC/OpenSC",
    "commit_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
    "files": [
      "src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c",
      "src/tools/util.c"
    ],
    "message": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
    "before_after_code_files": [
      "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c||src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c||src/tools/egk-tool.c",
      "src/tools/util.c||src/tools/util.c"
    ]
  },
  "patch_diff": {
    "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
      "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:         }",
      "795:  if (priv->cac_id_len) {",
      "796:   serial->len = MIN(priv->cac_id_len, SC_MAX_SERIALNR);",
      "798:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_SUCCESS);",
      "799:  }",
      "800:  SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND);",
      "",
      "[Removed Lines]",
      "797:   memcpy(serial->value, priv->cac_id, priv->cac_id_len);",
      "",
      "[Added Lines]",
      "797:   memcpy(serial->value, priv->cac_id, serial->len);",
      "",
      "---------------"
    ],
    "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c": [
      "File: src/libopensc/card-epass2003.c -> src/libopensc/card-epass2003.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "951:  while (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))",
      "952:   cipher_len--;",
      "955:   return -1;",
      "957:  memcpy(out, plaintext, cipher_len - 2);",
      "",
      "[Removed Lines]",
      "954:  if (2 == cipher_len)",
      "",
      "[Added Lines]",
      "954:  if (2 == cipher_len || *out_len < cipher_len - 2)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "977:  r = sc_check_sw(card, sm->sw1, sm->sw2);",
      "978:  if (r == SC_SUCCESS) {",
      "979:   if (exdata->sm) {",
      "980:    if (0 != decrypt_response(card, sm->resp, sm->resplen, plain->resp, &len))",
      "981:     return SC_ERROR_CARD_CMD_FAILED;",
      "982:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980:    len = plain->resplen;",
      "",
      "---------------"
    ],
    "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c": [
      "File: src/libopensc/card-muscle.c -> src/libopensc/card-muscle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "518:  mscfs_check_cache(priv->fs);",
      "520:  for(x = 0; x < fs->cache.size; x++) {",
      "522:   sc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,",
      "523:    \"FILE: %02X%02X%02X%02X\\n\",",
      "524:    oid[0],oid[1],oid[2],oid[3]);",
      "",
      "[Removed Lines]",
      "521:   u8* oid= fs->cache.array[x].objectId.id;",
      "",
      "[Added Lines]",
      "521:   u8* oid = fs->cache.array[x].objectId.id;",
      "522:   if (bufLen < 2)",
      "523:    break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:    buf[1] = oid[3];",
      "529:    buf += 2;",
      "531:   }",
      "532:  }",
      "533:  return count;",
      "",
      "[Removed Lines]",
      "530:    count+=2;",
      "",
      "[Added Lines]",
      "532:    count += 2;",
      "533:    bufLen -= 2;",
      "",
      "---------------"
    ],
    "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c": [
      "File: src/libopensc/card-tcos.c -> src/libopensc/card-tcos.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:  file->path = *in_path;",
      "410:  for(i=2; i+1<apdu.resplen && i+1+apdu.resp[i+1]<apdu.resplen; i+=2+apdu.resp[i+1]){",
      "412:   unsigned char type=apdu.resp[i], *d=apdu.resp+i+2;",
      "414:   switch (type) {",
      "",
      "[Removed Lines]",
      "411:   int j, len=apdu.resp[i+1];",
      "",
      "[Added Lines]",
      "411:   size_t j, len=apdu.resp[i+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "432:    file->id = (d[0]<<8) | d[1];",
      "433:    break;",
      "434:   case 0x84:",
      "437:    break;",
      "438:   case 0x86:",
      "439:    sc_file_set_sec_attr(file, d, len);",
      "",
      "[Removed Lines]",
      "435:    memcpy(file->name, d, len);",
      "436:    file->namelen = len;",
      "",
      "[Added Lines]",
      "435:    file->namelen = MIN(sizeof file->name, len);",
      "436:    memcpy(file->name, d, file->namelen);",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c": [
      "File: src/libopensc/pkcs15-esteid.c -> src/libopensc/pkcs15-esteid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:  r = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);",
      "81:  SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");",
      "83:  set_string (&p15card->tokeninfo->serial_number, (const char *) buff);",
      "85:  p15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION",
      "",
      "[Removed Lines]",
      "82:  buff[r] = '\\0';",
      "",
      "[Added Lines]",
      "82:  buff[MIN((size_t) r, (sizeof buff)-1)] = '\\0';",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c": [
      "File: src/libopensc/pkcs15-gemsafeV1.c -> src/libopensc/pkcs15-gemsafeV1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:   if (ibuf[ind+1] == 0xFE) {",
      "213:    gemsafe_prkeys[i].ref = ibuf[ind+4];",
      "214:    sc_log(card->ctx, \"Key container %d is allocated and uses key_ref %d\",",
      "",
      "[Removed Lines]",
      "211:  while (ibuf[ind] == 0x01) {",
      "",
      "[Added Lines]",
      "211:  while (ibuf[ind] == 0x01 && i < gemsafe_cert_max) {",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c": [
      "File: src/libopensc/pkcs15-sc-hsm.c -> src/libopensc/pkcs15-sc-hsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "837:   r = read_file(p15card, (u8 *) \"\\x2F\\x02\", efbin, &len, 1);",
      "838:   LOG_TEST_RET(card->ctx, r, \"Skipping optional EF.C_DevAut\");",
      "846:   }",
      "848:   ptr = efbin;",
      "",
      "[Removed Lines]",
      "841:   ptr = realloc(priv->EF_C_DevAut, len);",
      "842:   if (ptr) {",
      "843:    memcpy(ptr, efbin, len);",
      "844:    priv->EF_C_DevAut = ptr;",
      "845:    priv->EF_C_DevAut_len = len;",
      "",
      "[Added Lines]",
      "840:   if (len > 0) {",
      "842:    ptr = realloc(priv->EF_C_DevAut, len);",
      "843:    if (ptr) {",
      "844:     memcpy(ptr, efbin, len);",
      "845:     priv->EF_C_DevAut = ptr;",
      "846:     priv->EF_C_DevAut_len = len;",
      "847:    }",
      "",
      "---------------"
    ],
    "src/libopensc/sc.c||src/libopensc/sc.c": [
      "File: src/libopensc/sc.c -> src/libopensc/sc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "628:   return SC_ERROR_INVALID_ARGUMENTS;",
      "629:  }",
      "632:   if (file->sec_attr != NULL)",
      "633:    free(file->sec_attr);",
      "634:   file->sec_attr = NULL;",
      "",
      "[Removed Lines]",
      "631:  if (sec_attr == NULL) {",
      "",
      "[Added Lines]",
      "631:  if (sec_attr == NULL || sec_attr_len) {",
      "",
      "---------------"
    ],
    "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c": [
      "File: src/tools/cryptoflex-tool.c -> src/tools/cryptoflex-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"config.h\"",
      "23: #include \"libopensc/sc-ossl-compat.h\"",
      "24: #include <openssl/bn.h>",
      "25: #include <openssl/rsa.h>",
      "26: #include <openssl/x509.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"libopensc/internal.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "331:   fprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));",
      "332:   return 2;",
      "333:  }",
      "335:  sc_file_free(file);",
      "336:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "337:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "334:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "335:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "382:  e = sc_file_get_acl_entry(file, SC_AC_OP_READ);",
      "383:  if (e == NULL || e->method == SC_AC_NEVER)",
      "384:   return 10;",
      "386:  sc_file_free(file);",
      "387:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "388:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "385:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "386:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------"
    ],
    "src/tools/egk-tool.c||src/tools/egk-tool.c": [
      "File: src/tools/egk-tool.c -> src/tools/egk-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   goto err;",
      "150:  }",
      "153:  p = realloc(*data, len);",
      "154:  if (!p) {",
      "155:   goto err;",
      "",
      "[Removed Lines]",
      "152:  len = file ? file->size : 4096;",
      "",
      "[Added Lines]",
      "152:  len = file && file->size > 0 ? file->size : 4096;",
      "",
      "---------------"
    ],
    "src/tools/util.c||src/tools/util.c": [
      "File: src/tools/util.c -> src/tools/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:    strcpy(buf, \"????\");",
      "340:    break;",
      "341:   }",
      "344:   e = e->next;",
      "345:  }",
      "347:  return line;",
      "348: }",
      "",
      "[Removed Lines]",
      "342:   strcat(line, buf);",
      "343:   strcat(line, \" \");",
      "",
      "[Added Lines]",
      "342:   strncat(line, buf, sizeof line);",
      "343:   strncat(line, \" \", sizeof line);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "78f005533818e5920a563bb5949c1a647d786090",
      "candidate_info": {
        "commit_hash": "78f005533818e5920a563bb5949c1a647d786090",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/78f005533818e5920a563bb5949c1a647d786090",
        "files": [
          "src/libopensc/pkcs15-tcos.c"
        ],
        "message": "fixed uninitialized use of variable",
        "before_after_code_files": [
          "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c": [
          "File: src/libopensc/pkcs15-tcos.c -> src/libopensc/pkcs15-tcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   int i, rec_no=0;",
          "133:   if(prkey_info.path.len>=2) prkey_info.path.len-=2;",
          "134:   sc_append_file_id(&prkey_info.path, 0x5349);",
          "136:    sc_debug(ctx, SC_LOG_DEBUG_NORMAL,",
          "137:     \"Select(%s) failed\\n\",",
          "138:     sc_print_path(&prkey_info.path));",
          "",
          "[Removed Lines]",
          "135:   if(sc_select_file(card, &prkey_info.path, NULL)!=SC_SUCCESS || !f->prop_attr){",
          "",
          "[Added Lines]",
          "135:   if(sc_select_file(card, &prkey_info.path, NULL)!=SC_SUCCESS){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30fe0ad453caa34d5851cf36d3e459133dcadd3b",
      "candidate_info": {
        "commit_hash": "30fe0ad453caa34d5851cf36d3e459133dcadd3b",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/30fe0ad453caa34d5851cf36d3e459133dcadd3b",
        "files": [
          "src/libopensc/card-openpgp.c"
        ],
        "message": "pgp: fixed integer underflow",
        "before_after_code_files": [
          "src/libopensc/card-openpgp.c||src/libopensc/card-openpgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-openpgp.c||src/libopensc/card-openpgp.c": [
          "File: src/libopensc/card-openpgp.c -> src/libopensc/card-openpgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   switch (hist_bytes[0]) {",
          "625:    case 0x00:",
          "627:     break;",
          "628:    case 0x80:",
          "630:     break;",
          "631:    case 0x10:",
          "633:     break;",
          "634:   }",
          "635:  }",
          "",
          "[Removed Lines]",
          "626:     pgp_parse_hist_bytes(card, hist_bytes+1, hist_bytes_len-4);",
          "629:     pgp_parse_hist_bytes(card, hist_bytes+1, hist_bytes_len-1);",
          "632:     pgp_parse_hist_bytes(card, hist_bytes+2, hist_bytes_len-2);",
          "",
          "[Added Lines]",
          "626:     if (hist_bytes_len > 4) {",
          "627:      pgp_parse_hist_bytes(card, hist_bytes+1, hist_bytes_len-4);",
          "628:     }",
          "631:     if (hist_bytes_len > 1) {",
          "632:      pgp_parse_hist_bytes(card, hist_bytes+1, hist_bytes_len-1);",
          "633:     }",
          "636:     if (hist_bytes_len > 2) {",
          "637:      pgp_parse_hist_bytes(card, hist_bytes+2, hist_bytes_len-2);",
          "638:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:   if ((pgp_get_blob(card, priv->mf, 0x5f52, &blob) >= 0) &&",
          "643:       (blob->data != NULL) && (blob->data[0] == 0x00)) {",
          "648:    if ((blob->data[0] == 0x00) && (blob->len >= 4)) {",
          "",
          "[Removed Lines]",
          "645:    pgp_parse_hist_bytes(card, hist_bytes+1, hist_bytes_len-4);",
          "",
          "[Added Lines]",
          "651:    if (hist_bytes_len > 4) {",
          "652:     pgp_parse_hist_bytes(card, hist_bytes+1, hist_bytes_len-4);",
          "653:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5807368ed44a6feb78e6107eaa2f337d474a8d36",
      "candidate_info": {
        "commit_hash": "5807368ed44a6feb78e6107eaa2f337d474a8d36",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/5807368ed44a6feb78e6107eaa2f337d474a8d36",
        "files": [
          "src/libopensc/card-cac.c"
        ],
        "message": "fixed bad memory access",
        "before_after_code_files": [
          "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
          ],
          "candidate": [
            "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
          "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:  }",
          "1391:  sc_mem_clear(path, sizeof(sc_path_t));",
          "1392:  memcpy(path->aid.value, &val->rid, sizeof(val->rid));",
          "1394:  path->aid.len = sizeof(val->rid) + sizeof(val->applicationID);",
          "1396:  path->len = sizeof(val->objectID);",
          "1397:  path->type = SC_PATH_TYPE_FILE_ID;",
          "1398:  sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE,",
          "",
          "[Removed Lines]",
          "1393:  memcpy(&path->aid.value[5], &val->applicationID, sizeof(val->applicationID));",
          "1395:  memcpy(path->value, &val->objectID, sizeof(val->objectID));",
          "",
          "[Added Lines]",
          "1393:  memcpy(&path->aid.value[5], val->applicationID, sizeof(val->applicationID));",
          "1395:  memcpy(path->value, val->objectID, sizeof(val->objectID));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e5a9a42c355f4ef64c40347d9046d0e063e589b",
      "candidate_info": {
        "commit_hash": "3e5a9a42c355f4ef64c40347d9046d0e063e589b",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/3e5a9a42c355f4ef64c40347d9046d0e063e589b",
        "files": [
          "src/libopensc/card-piv.c"
        ],
        "message": "Remove in PIV driver need for aid_file\n\nRemove aid_file and aidfile variables in card-piv.c. These are not needed\nas piv_select_aid parses the returned data from a SELECT AID command.\n\nIn response to e-mail from X41 group on 6/11/2018.\n\n On branch x41-piv-2\n Changes to be committed:\n\tmodified:   card-piv.c",
        "before_after_code_files": [
          "src/libopensc/card-piv.c||src/libopensc/card-piv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-piv.c||src/libopensc/card-piv.c": [
          "File: src/libopensc/card-piv.c -> src/libopensc/card-piv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: };",
          "149: typedef struct piv_private_data {",
          "151:  int enumtag;",
          "",
          "[Removed Lines]",
          "150:  sc_file_t *aid_file;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "765: {",
          "766:  sc_apdu_t apdu;",
          "767:  u8 rbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "",
          "[Removed Lines]",
          "764: static int piv_find_aid(sc_card_t * card, sc_file_t *aid_file)",
          "",
          "[Added Lines]",
          "762: static int piv_find_aid(sc_card_t * card)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "842:   if (apdu.resp[0] != 0x6f || apdu.resp[1] > apdu.resplen - 2 )",
          "843:    SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_ERROR_NO_CARD_SUPPORT);",
          "847:   LOG_FUNC_RETURN(card->ctx, i);",
          "848:  }",
          "",
          "[Removed Lines]",
          "845:   card->ops->process_fci(card, aid_file, apdu.resp+2, apdu.resp[1]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2925:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "2926:  if (priv) {",
          "2928:   if (priv->w_buf)",
          "2929:    free(priv->w_buf);",
          "2930:   if (priv->offCardCertURL)",
          "",
          "[Removed Lines]",
          "2927:   sc_file_free(priv->aid_file);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3073:   card->type = type;",
          "3077:  priv->selected_obj = -1;",
          "3079:  priv->logged_in = SC_PIN_STATE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "3076:  priv->aid_file = sc_file_new();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3101:  if (i < 0) {",
          "3106:  }",
          "3108:  if (i >= 0) {",
          "",
          "[Removed Lines]",
          "3103:   sc_file_t aidfile;",
          "3105:   i = piv_find_aid(card, &aidfile);",
          "",
          "[Added Lines]",
          "3097:   i = piv_find_aid(card);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3489:  if ( priv->card_issues & CI_OTHER_AID_LOSE_STATE && priv->pin_cmd_verify_sw1 == 0x6DU) {",
          "3490:   sc_log(card->ctx, \"AID may be lost doing piv_find_aid and retry pin_cmd\");",
          "3494:   r = iso_drv->ops->pin_cmd(card, data, tries_left);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3483:   piv_find_aid(card);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03628449b75a93787eb2359412a3980365dda49b",
      "candidate_info": {
        "commit_hash": "03628449b75a93787eb2359412a3980365dda49b",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/03628449b75a93787eb2359412a3980365dda49b",
        "files": [
          "src/libopensc/card-iasecc.c"
        ],
        "message": "iasecc: fixed unbound recursion",
        "before_after_code_files": [
          "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c": [
          "File: src/libopensc/card-iasecc.c -> src/libopensc/card-iasecc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:  sc_log(ctx, \"iasecc_select_file() path:%s\", sc_print_path(path));",
          "829:  sc_print_cache(card);",
          "831:   sc_log(ctx, \"EF.ATR(aid:'%s')\", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : \"\");",
          "833:   rv = iasecc_select_mf(card, file_out);",
          "834:   LOG_TEST_RET(ctx, rv, \"MF selection error\");",
          "840:  }",
          "842:  if (lpath.aid.len) {",
          "",
          "[Removed Lines]",
          "830:  if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {",
          "836:   if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)    {",
          "837:    memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);",
          "838:    lpath.len -=  2;",
          "839:   }",
          "",
          "[Added Lines]",
          "830:  if (path->type != SC_PATH_TYPE_DF_NAME",
          "831:    && lpath.len >= 2",
          "832:    && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {",
          "838:   memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);",
          "839:   lpath.len -=  2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}