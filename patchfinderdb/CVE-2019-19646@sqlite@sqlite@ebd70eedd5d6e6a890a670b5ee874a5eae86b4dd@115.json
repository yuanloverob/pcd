{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
      "candidate_info": {
        "commit_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the \"-returntype\" option to the \"db function\" Tcl method.\n\nFossilOrigin-Name: 789a492b68c353e2b763d67d399722b7ab61bfe09b472466df2821f65cab1be9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     u8 *data;",
          "996:     const char *zType = (pVar->typePtr ? pVar->typePtr->name : \"\");",
          "997:     char c = zType[0];",
          "1018:     }",
          "1019:   }",
          "1020: }",
          "",
          "[Removed Lines]",
          "998:     if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1001:       data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1002:       sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1003:     }else if( c=='b' && strcmp(zType,\"boolean\")==0 ){",
          "1004:       Tcl_GetIntFromObj(0, pVar, &n);",
          "1005:       sqlite3_result_int(context, n);",
          "1006:     }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1007:       double r;",
          "1008:       Tcl_GetDoubleFromObj(0, pVar, &r);",
          "1009:       sqlite3_result_double(context, r);",
          "1010:     }else if( (c=='w' && strcmp(zType,\"wideInt\")==0) ||",
          "1011:           (c=='i' && strcmp(zType,\"int\")==0) ){",
          "1012:       Tcl_WideInt v;",
          "1013:       Tcl_GetWideIntFromObj(0, pVar, &v);",
          "1014:       sqlite3_result_int64(context, v);",
          "1015:     }else{",
          "1016:       data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1017:       sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "1007:     int eType = p->eType;",
          "1009:     if( eType==SQLITE_NULL ){",
          "1010:       if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1013:         eType = SQLITE_BLOB;",
          "1014:       }else if( (c=='b' && strcmp(zType,\"boolean\")==0)",
          "1015:              || (c=='w' && strcmp(zType,\"wideInt\")==0)",
          "1016:              || (c=='i' && strcmp(zType,\"int\")==0)",
          "1017:       ){",
          "1018:         eType = SQLITE_INTEGER;",
          "1019:       }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1020:         eType = SQLITE_FLOAT;",
          "1021:       }else{",
          "1022:         eType = SQLITE_TEXT;",
          "1023:       }",
          "1024:     }",
          "1026:     switch( eType ){",
          "1027:       case SQLITE_BLOB: {",
          "1028:         data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1029:         sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1030:         break;",
          "1031:       }",
          "1032:       case SQLITE_INTEGER: {",
          "1033:         Tcl_WideInt v;",
          "1034:         if( TCL_OK==Tcl_GetWideIntFromObj(0, pVar, &v) ){",
          "1035:           sqlite3_result_int64(context, v);",
          "1036:           break;",
          "1037:         }",
          "1039:       }",
          "1040:       case SQLITE_FLOAT: {",
          "1041:         double r;",
          "1042:         if( TCL_OK==Tcl_GetDoubleFromObj(0, pVar, &r) ){",
          "1043:           sqlite3_result_double(context, r);",
          "1044:           break;",
          "1045:         }",
          "1047:       }",
          "1048:       default: {",
          "1049:         data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1050:         sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "1051:         break;",
          "1052:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2646:     char *zName;",
          "2647:     int nArg = -1;",
          "2648:     int i;",
          "2649:     if( objc<4 ){",
          "2650:       Tcl_WrongNumArgs(interp, 2, objv, \"NAME ?SWITCHES? SCRIPT\");",
          "2651:       return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2685:     int eType = SQLITE_NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2653:     for(i=3; i<(objc-1); i++){",
          "2654:       const char *z = Tcl_GetString(objv[i]);",
          "2655:       int n = strlen30(z);",
          "2657:         if( i==(objc-2) ){",
          "2658:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2659:           return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "2656:       if( n>2 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "[Added Lines]",
          "2693:       if( n>1 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2666:         }",
          "2667:         i++;",
          "2668:       }else",
          "2670:         flags |= SQLITE_DETERMINISTIC;",
          "2671:       }else{",
          "2672:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2674:         );",
          "2675:         return TCL_ERROR;",
          "2676:       }",
          "",
          "[Removed Lines]",
          "2669:       if( n>2 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2673:             \"\\\": must be -argcount or -deterministic\", (char*)0",
          "",
          "[Added Lines]",
          "2706:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2708:       }else",
          "2709:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2710:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2711:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "2712:         assert( SQLITE_BLOB==4 && SQLITE_NULL==5 );",
          "2713:         if( i==(objc-2) ){",
          "2714:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2715:           return TCL_ERROR;",
          "2716:         }",
          "2717:         i++;",
          "2718:         if( Tcl_GetIndexFromObj(interp, objv[i], azType, \"type\", 0, &eType) ){",
          "2719:           return TCL_ERROR;",
          "2720:         }",
          "2721:         eType++;",
          "2724:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2686:     pFunc->pScript = pScript;",
          "2687:     Tcl_IncrRefCount(pScript);",
          "2688:     pFunc->useEvalObjv = safeToUseEvalObjv(interp, pScript);",
          "2689:     rc = sqlite3_create_function(pDb->db, zName, nArg, flags,",
          "2690:         pFunc, tclSqlFunc, 0, 0);",
          "2691:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:     pFunc->eType = eType;",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: set testdir [file dirname $argv0]",
          "23: source $testdir/tester.tcl",
          "25: # Check the error messages generated by tclsqlite",
          "26: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: set testprefix tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:   set res",
          "712: } {1 {a b *} 2 {a *} 3 {a b *}}",
          "718: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715: #-------------------------------------------------------------------------",
          "716: # Test the -type option to [db function].",
          "717: #",
          "718: reset_db",
          "719: proc add {a b} { return [expr $a + $b] }",
          "720: proc ret {a} { return $a }",
          "722: db function add_i -returntype integer add",
          "723: db function add_r -ret        real    add",
          "724: db function add_t -return     text    add",
          "725: db function add_b -returntype blob    add",
          "726: db function add_a -returntype any     add",
          "728: db function ret_i -returntype int     ret",
          "729: db function ret_r -returntype real    ret",
          "730: db function ret_t -returntype text    ret",
          "731: db function ret_b -returntype blob    ret",
          "732: db function ret_a -r          any     ret",
          "734: do_execsql_test 17.0 {",
          "735:   SELECT quote( add_i(2, 3) );",
          "736:   SELECT quote( add_r(2, 3) );",
          "737:   SELECT quote( add_t(2, 3) );",
          "738:   SELECT quote( add_b(2, 3) );",
          "739:   SELECT quote( add_a(2, 3) );",
          "740: } {5 5.0 '5' X'35' 5}",
          "742: do_execsql_test 17.1 {",
          "743:   SELECT quote( add_i(2.2, 3.3) );",
          "744:   SELECT quote( add_r(2.2, 3.3) );",
          "745:   SELECT quote( add_t(2.2, 3.3) );",
          "746:   SELECT quote( add_b(2.2, 3.3) );",
          "747:   SELECT quote( add_a(2.2, 3.3) );",
          "748: } {5.5 5.5 '5.5' X'352E35' 5.5}",
          "750: do_execsql_test 17.2 {",
          "751:   SELECT quote( ret_i(2.5) );",
          "752:   SELECT quote( ret_r(2.5) );",
          "753:   SELECT quote( ret_t(2.5) );",
          "754:   SELECT quote( ret_b(2.5) );",
          "755:   SELECT quote( ret_a(2.5) );",
          "756: } {2.5 2.5 '2.5' X'322E35' 2.5}",
          "758: do_execsql_test 17.3 {",
          "759:   SELECT quote( ret_i('2.5') );",
          "760:   SELECT quote( ret_r('2.5') );",
          "761:   SELECT quote( ret_t('2.5') );",
          "762:   SELECT quote( ret_b('2.5') );",
          "763:   SELECT quote( ret_a('2.5') );",
          "764: } {2.5 2.5 '2.5' X'322E35' '2.5'}",
          "766: do_execsql_test 17.4 {",
          "767:   SELECT quote( ret_i('abc') );",
          "768:   SELECT quote( ret_r('abc') );",
          "769:   SELECT quote( ret_t('abc') );",
          "770:   SELECT quote( ret_b('abc') );",
          "771:   SELECT quote( ret_a('abc') );",
          "772: } {'abc' 'abc' 'abc' X'616263' 'abc'}",
          "774: do_execsql_test 17.5 {",
          "775:   SELECT quote( ret_i(X'616263') );",
          "776:   SELECT quote( ret_r(X'616263') );",
          "777:   SELECT quote( ret_t(X'616263') );",
          "778:   SELECT quote( ret_b(X'616263') );",
          "779:   SELECT quote( ret_a(X'616263') );",
          "780: } {'abc' 'abc' 'abc' X'616263' X'616263'}",
          "782: do_test 17.6.1 {",
          "783:   list [catch { db function xyz -return object ret } msg] $msg",
          "784: } {1 {bad type \"object\": must be integer, real, text, blob, or any}}",
          "786: do_test 17.6.2 {",
          "787:   list [catch { db function xyz -return ret } msg] $msg",
          "788: } {1 {option requires an argument: -return}}",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10cc16c95418f3c178637026fbc9206a063ec841",
      "candidate_info": {
        "commit_hash": "10cc16c95418f3c178637026fbc9206a063ec841",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10cc16c95418f3c178637026fbc9206a063ec841",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix a minor comment typo.  No code changes.\n\nFossilOrigin-Name: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c"
        ]
      }
    },
    {
      "candidate_hash": "00885742712b5f54866b74c167b3cb9597850789",
      "candidate_info": {
        "commit_hash": "00885742712b5f54866b74c167b3cb9597850789",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00885742712b5f54866b74c167b3cb9597850789",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/filterfault.test"
        ],
        "message": "Fix a memory leak that could follow an OOM in the new FILTER code.\n\nFossilOrigin-Name: 85fd70fead834aed16cffbea892b2255b4e10dd677f4dbbb96062d5ff42efdeb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/filterfault.test||test/filterfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c80e81d01abde9a5032cdc1a492d0fccd8db139f78d2db9413a60cfdc8e0f64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "1746: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:   }else{",
          "1746:     sqlite3ExprDelete(pParse->db, F);",
          "",
          "---------------"
        ],
        "test/filterfault.test||test/filterfault.test": [
          "File: test/filterfault.test -> test/filterfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filterfault",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b, c, d);",
          "25:   INSERT INTO t1 VALUES(1, 2, 3, 4);",
          "26:   INSERT INTO t1 VALUES(5, 6, 7, 8);",
          "27:   INSERT INTO t1 VALUES(9, 10, 11, 12);",
          "28: }",
          "29: faultsim_save_and_close",
          "31: do_faultsim_test 1 -faults oom-t* -prep {",
          "32:   faultsim_restore_and_reopen",
          "33: } -body {",
          "34:   execsql {",
          "35:     SELECT sum(a) FILTER (WHERE b<5),",
          "36:            count() FILTER (WHERE d!=c)",
          "37:       FROM t1 GROUP BY c ORDER BY 1;",
          "38:   }",
          "39: } -test {",
          "40:   faultsim_test_result {0 {{} 1 {} 1 1 1}}",
          "41: }",
          "44: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca424382613ed62e80b54734231a1d1d8dd916bd",
      "candidate_info": {
        "commit_hash": "ca424382613ed62e80b54734231a1d1d8dd916bd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca424382613ed62e80b54734231a1d1d8dd916bd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix another problem with database freelist handling in the \".recover\" command.\n\nFossilOrigin-Name: bee2652ac26370e612a8c81dd7554befc2d523442a2fbbc77dc73479e6a0d7fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: afdae10424f0f3d0f10a4b73e9732aa55c5ee664814d8ca0edd372cfb17c2445",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6454:     \"DROP TABLE IF EXISTS recovery.freelist;\"",
          "6455:     \"DROP TABLE IF EXISTS recovery.map;\"",
          "6456:     \"DROP TABLE IF EXISTS recovery.schema;\"",
          "6474:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\", zRecoveryDb",
          "6475:   );",
          "",
          "[Removed Lines]",
          "6457:     \"CREATE TABLE recovery.dbptr(\"",
          "6458:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6459:     \") WITHOUT ROWID;\"",
          "6460:     \"INSERT OR IGNORE INTO recovery.dbptr(pgno, child) \"",
          "6461:     \"    SELECT * FROM sqlite_dbptr;\"",
          "6465:     \"DELETE FROM recovery.dbptr WHERE child = 1;\"",
          "6470:     \"DELETE FROM recovery.dbptr WHERE child IN (\"",
          "6471:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6472:     \");\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6497:   }",
          "6499:   shellExec(pState->db, &rc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6483:     \"CREATE TABLE recovery.dbptr(\"",
          "6484:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6485:     \") WITHOUT ROWID;\"",
          "6486:     \"INSERT OR IGNORE INTO recovery.dbptr(pgno, child) \"",
          "6487:     \"    SELECT * FROM sqlite_dbptr\"",
          "6488:     \"      WHERE pgno NOT IN freelist AND child NOT IN freelist;\"",
          "6492:     \"DELETE FROM recovery.dbptr WHERE child = 1;\"",
          "6497:     \"DELETE FROM recovery.dbptr WHERE child IN (\"",
          "6498:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6499:     \");\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bf022d57cd13c02976ce64d546cc2f12d0a0496",
      "candidate_info": {
        "commit_hash": "9bf022d57cd13c02976ce64d546cc2f12d0a0496",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9bf022d57cd13c02976ce64d546cc2f12d0a0496",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming a table when the schema contains an invocation of a window function that is not currently registered.\n\nFossilOrigin-Name: ff290feb97f689cf6ce4162d6aa36f9f9dcf1bff3096847d53a85f39f728d2de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 348e7f193a963390a0595183d603541f85c5d1a911c98ed2e06599691ffe98f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "891: #endif",
          "892:         }",
          "893:       }",
          "894:       sqlite3WalkExprList(pWalker, pList);",
          "895:       if( is_agg ){",
          "896: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "895:       else if( pWin ){",
          "896:         is_agg = 1;",
          "897:       }",
          "898: #endif",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:   ALTER TABLE t1 RENAME TO t1x;",
          "319: }",
          "321: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321: #-------------------------------------------------------------------------",
          "322: reset_db",
          "323: do_execsql_test 13.1 {",
          "324:   CREATE TABLE t1(a);",
          "325:   CREATE TRIGGER r1 INSERT ON t1 BEGIN",
          "326:     SELECT a(*) OVER (ORDER BY (SELECT 1)) FROM t1;",
          "327:   END;",
          "328: }",
          "330: do_execsql_test 13.2 {",
          "331:   ALTER TABLE t1 RENAME TO t1x;",
          "332: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}