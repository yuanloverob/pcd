{
  "cve_id": "CVE-2022-1381",
  "cve_desc": "global heap buffer overflow in skip_range in GitHub repository vim/vim prior to 8.2.4763. This vulnerability is capable of crashing software, Bypass Protection Mechanism, Modify Memory, and possible remote execution",
  "repo": "vim/vim",
  "patch_hash": "f50808ed135ab973296bca515ae4029b321afe47",
  "patch_info": {
    "commit_hash": "f50808ed135ab973296bca515ae4029b321afe47",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/f50808ed135ab973296bca515ae4029b321afe47",
    "files": [
      "src/ex_docmd.c",
      "src/testdir/test_ex_mode.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4763: using invalid pointer with \"V:\" in Ex mode\n\nProblem:    Using invalid pointer with \"V:\" in Ex mode.\nSolution:   Correctly handle the command being changed to \"+\".",
    "before_after_code_files": [
      "src/ex_docmd.c||src/ex_docmd.c",
      "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_docmd.c||src/ex_docmd.c": [
      "File: src/ex_docmd.c -> src/ex_docmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2783:  cmdmod_T    *cmod,",
      "2784:  int     skip_only)",
      "2785: {",
      "2786:     char_u  *cmd_start = NULL;",
      "2787:     char_u  *p;",
      "2788:     int     starts_with_colon = FALSE;",
      "2789:     int     vim9script = in_vim9script();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2786:     char_u  *orig_cmd = eap->cmd;",
      "2788:     int     did_plus_cmd = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2819:    && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)",
      "2820:  {",
      "2821:      eap->cmd = (char_u *)\"+\";",
      "2822:      if (!skip_only)",
      "2823:   ex_pressedreturn = TRUE;",
      "2824:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2824:      did_plus_cmd = TRUE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3111:  }",
      "3112:  else",
      "3115:     }",
      "3117:     return OK;",
      "",
      "[Removed Lines]",
      "3108:      mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
      "3109:      eap->cmd -= 5;",
      "3110:      mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
      "3114:      eap->cmd -= 5;",
      "",
      "[Added Lines]",
      "3111:      if (did_plus_cmd)",
      "3112:      {",
      "3113:   size_t len = STRLEN(cmd_start);",
      "3117:   mch_memmove(orig_cmd, cmd_start, len);",
      "3118:   STRCPY(orig_cmd + len, \"'<,'>+\");",
      "3119:      }",
      "3120:      else",
      "3121:      {",
      "3122:   mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
      "3123:   eap->cmd -= 5;",
      "3124:   mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
      "3125:      }",
      "3130:      if (did_plus_cmd)",
      "3131:   eap->cmd = (char_u *)\"'<,'>+\";",
      "3132:      else",
      "3133:   eap->cmd = orig_cmd;",
      "",
      "---------------"
    ],
    "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim": [
      "File: src/testdir/test_ex_mode.vim -> src/testdir/test_ex_mode.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "250:   bwipe!",
      "251: endfunc",
      "254: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "253: \" This was accessing illegal memory when using \"+\" for eap->cmd.",
      "254: func Test_empty_command_visual_mode()",
      "255:   let lines =<< trim END",
      "256:       r<sfile>",
      "257:       0norm0V:\u001b",
      "258:       :qall!",
      "259:   END",
      "260:   call writefile(lines, 'Xexmodescript')",
      "261:   call assert_equal(1, RunVim([], [], '-u NONE -e -s -S Xexmodescript'))",
      "263:   call delete('Xexmodescript')",
      "264: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "747: static int included_patches[] =",
      "750:     4762,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     4763,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48ce135e6d45e6c10ed0c0fc4cb8433bf647672a",
      "candidate_info": {
        "commit_hash": "48ce135e6d45e6c10ed0c0fc4cb8433bf647672a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/48ce135e6d45e6c10ed0c0fc4cb8433bf647672a",
        "files": [
          "src/ex_docmd.c",
          "src/version.c"
        ],
        "message": "patch 8.2.5092: using \"'<,'>\" in Ex mode may compare unrelated pointers\n\nProblem:    Using \"'<,'>\" in Ex mode may compare unrelated pointers.\nSolution:   Set eap->cmd to \"+\" only later.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2786: {",
          "2787:     char_u  *orig_cmd = eap->cmd;",
          "2788:     char_u  *cmd_start = NULL;",
          "2791:     int     starts_with_colon = FALSE;",
          "2792:     int     vim9script = in_vim9script();",
          "2793:     int     has_visual_range = FALSE;",
          "",
          "[Removed Lines]",
          "2789:     int     did_plus_cmd = FALSE;",
          "2790:     char_u  *p;",
          "",
          "[Added Lines]",
          "2789:     int     use_plus_cmd = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2809:     for (;;)",
          "2810:     {",
          "2811:  while (*eap->cmd == ' ' || *eap->cmd == '\\t' || *eap->cmd == ':')",
          "2812:  {",
          "2813:      if (*eap->cmd == ':')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2812:  char_u  *p;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2815:      ++eap->cmd;",
          "2816:  }",
          "2819:  if (*eap->cmd == NUL && exmode_active",
          "2820:      && (getline_equal(eap->getline, eap->cookie, getexmodeline)",
          "2821:          || getline_equal(eap->getline, eap->cookie, getexline))",
          "2822:    && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)",
          "2823:  {",
          "2826:      if (!skip_only)",
          "2827:   ex_pressedreturn = TRUE;",
          "2828:  }",
          "",
          "[Removed Lines]",
          "2824:      eap->cmd = (char_u *)\"+\";",
          "2825:      did_plus_cmd = TRUE;",
          "",
          "[Added Lines]",
          "2827:      use_plus_cmd = TRUE;",
          "2830:      break;  // no modifiers following",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3112:      {",
          "3113:   size_t len = STRLEN(cmd_start);",
          "3117:   mch_memmove(orig_cmd, cmd_start, len);",
          "3118:   STRCPY(orig_cmd + len, \"'<,'>+\");",
          "3119:      }",
          "",
          "[Removed Lines]",
          "3111:      if (did_plus_cmd)",
          "",
          "[Added Lines]",
          "3114:      if (use_plus_cmd)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3126:  }",
          "3127:  else",
          "3131:   eap->cmd = (char_u *)\"'<,'>+\";",
          "3132:      else",
          "3133:   eap->cmd = orig_cmd;",
          "3134:     }",
          "3136:     return OK;",
          "3137: }",
          "",
          "[Removed Lines]",
          "3130:      if (did_plus_cmd)",
          "",
          "[Added Lines]",
          "3133:      if (use_plus_cmd)",
          "3138:     else if (use_plus_cmd)",
          "3139:  eap->cmd = (char_u *)\"+\";",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5091,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5092,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c645a25bb8e6d766db720a44b9ceeff39d1e92b",
      "candidate_info": {
        "commit_hash": "5c645a25bb8e6d766db720a44b9ceeff39d1e92b",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5c645a25bb8e6d766db720a44b9ceeff39d1e92b",
        "files": [
          "src/testdir/test_eval_stuff.vim",
          "src/testdir/test_ex_mode.vim",
          "src/testdir/test_excmd.vim",
          "src/testdir/test_execute_func.vim",
          "src/testdir/test_exit.vim",
          "src/testdir/test_expand.vim",
          "src/testdir/test_expand_func.vim",
          "src/testdir/test_expr.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0538: manually deleting test temp files\n\nProblem:    Manually deleting test temp files.\nSolution:   Add the 'D' flag to writefile().",
        "before_after_code_files": [
          "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim",
          "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim",
          "src/testdir/test_excmd.vim||src/testdir/test_excmd.vim",
          "src/testdir/test_execute_func.vim||src/testdir/test_execute_func.vim",
          "src/testdir/test_exit.vim||src/testdir/test_exit.vim",
          "src/testdir/test_expand.vim||src/testdir/test_expand.vim",
          "src/testdir/test_expand_func.vim||src/testdir/test_expand_func.vim",
          "src/testdir/test_expr.vim||src/testdir/test_expr.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim": [
          "File: src/testdir/test_eval_stuff.vim -> src/testdir/test_eval_stuff.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: endfunc",
          "27: func Test_mkdir_p()",
          "29:   call assert_true(isdirectory('Xmkdir/nested'))",
          "30:   try",
          "31:     \" Trying to make existing directories doesn't error",
          "",
          "[Removed Lines]",
          "28:   call mkdir('Xmkdir/nested', 'p')",
          "",
          "[Added Lines]",
          "28:   call mkdir('Xmkdir/nested', 'pR')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     call assert_report('mkdir(..., \"p\") failed for an existing directory')",
          "36:   endtry",
          "37:   \" 'p' doesn't suppress real errors",
          "39:   call assert_fails('call mkdir(\"Xmkdirfile\", \"p\")', 'E739:')",
          "42:   call assert_equal(0, mkdir(test_null_string()))",
          "43:   call assert_fails('call mkdir([])', 'E730:')",
          "44:   call assert_fails('call mkdir(\"abc\", [], [])', 'E745:')",
          "",
          "[Removed Lines]",
          "38:   call writefile([], 'Xmkdirfile')",
          "40:   call delete('Xmkdirfile')",
          "41:   call delete('Xmkdir', 'rf')",
          "",
          "[Added Lines]",
          "38:   call writefile([], 'Xmkdirfile', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:       111111111111111111111111 for line in ['one']",
          "161:       endfor",
          "162:   END",
          "164:   \" only test that this doesn't crash",
          "165:   call RunVim([], [], '-u NONE -e -s -S XinvalidFor -c qa')",
          "168: endfunc",
          "170: func Test_readfile_binary()",
          "",
          "[Removed Lines]",
          "163:   call writefile(lines, 'XinvalidFor')",
          "167:   call delete('XinvalidFor')",
          "",
          "[Added Lines]",
          "162:   call writefile(lines, 'XinvalidFor', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186: endfunc",
          "188: func Test_readfile_binary_empty()",
          "190:   \" This used to compare uninitialized memory in Vim <= 8.2.4065",
          "191:   call assert_equal([''], readfile('Xempty-file', 'b'))",
          "193: endfunc",
          "195: func Test_readfile_bom()",
          "",
          "[Removed Lines]",
          "189:   call writefile([], 'Xempty-file')",
          "192:   call delete('Xempty-file')",
          "",
          "[Added Lines]",
          "186:   call writefile([], 'Xempty-file', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199: endfunc",
          "201: func Test_readfile_max()",
          "203:   call assert_equal(['1', '2'], readfile('XReadfile_max', '', 2))",
          "204:   call assert_equal(['3', '4'], readfile('XReadfile_max', '', -2))",
          "206: endfunc",
          "208: func Test_let_errmsg()",
          "",
          "[Removed Lines]",
          "202:   call writefile(range(1, 4), 'XReadfile_max')",
          "205:   call delete('XReadfile_max')",
          "",
          "[Added Lines]",
          "198:   call writefile(range(1, 4), 'XReadfile_max', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "336: endfunc",
          "338: func Test_scriptversion_fail()",
          "340:   call assert_fails('source Xversionscript', 'E999:')",
          "342: endfunc",
          "344: func Test_execute_cmd_with_null()",
          "",
          "[Removed Lines]",
          "339:   call writefile(['scriptversion 9'], 'Xversionscript')",
          "341:   call delete('Xversionscript')",
          "",
          "[Added Lines]",
          "334:   call writefile(['scriptversion 9'], 'Xversionscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim": [
          "File: src/testdir/test_ex_mode.vim -> src/testdir/test_ex_mode.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     call writefile(['done'], 'Xdidexmode')",
          "238:     qall!",
          "239:   END",
          "241:   call assert_equal(1, RunVim([], [], '-e -s -S Xexmodescript'))",
          "242:   call assert_equal(['done'], readfile('Xdidexmode'))",
          "244:   call delete('logfile')",
          "245:   call delete('Xdidexmode')",
          "247: endfunc",
          "249: func Test_ex_mode_count_overflow()",
          "",
          "[Removed Lines]",
          "240:   call writefile(lines, 'Xexmodescript')",
          "246:   call delete('Xexmodescript')",
          "",
          "[Added Lines]",
          "240:   call writefile(lines, 'Xexmodescript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:     call writefile(['done'], 'Xdidexmode')",
          "258:     qall!",
          "259:   END",
          "261:   call assert_equal(1, RunVim([], [], '-e -s -S Xexmodescript -c qa'))",
          "262:   call assert_equal(['done'], readfile('Xdidexmode'))",
          "264:   call delete('Xdidexmode')",
          "266: endfunc",
          "268: func Test_ex_mode_large_indent()",
          "",
          "[Removed Lines]",
          "260:   call writefile(lines, 'Xexmodescript')",
          "265:   call delete('Xexmodescript')",
          "",
          "[Added Lines]",
          "259:   call writefile(lines, 'Xexmodescript', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:       0norm0V:\u001b",
          "282:       :qall!",
          "283:   END",
          "285:   call assert_equal(1, RunVim([], [], '-u NONE -e -s -S Xexmodescript'))",
          "289:   \" This may cause a dialog to be displayed for an empty command, ignore it.",
          "290:   call delete('guidialogfile')",
          "291: endfunc",
          "",
          "[Removed Lines]",
          "284:   call writefile(lines, 'Xexmodescript')",
          "287:   call delete('Xexmodescript')",
          "",
          "[Added Lines]",
          "282:   call writefile(lines, 'Xexmodescript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_excmd.vim||src/testdir/test_excmd.vim": [
          "File: src/testdir/test_excmd.vim -> src/testdir/test_excmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: \" Test for the :drop command",
          "85: func Test_drop_cmd()",
          "87:   enew | only",
          "88:   drop Xdropfile",
          "89:   call assert_equal('L2', getline(2))",
          "",
          "[Removed Lines]",
          "86:   call writefile(['L1', 'L2'], 'Xdropfile')",
          "",
          "[Added Lines]",
          "86:   call writefile(['L1', 'L2'], 'Xdropfile', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:   \" Check for setting the argument list",
          "100:   call assert_equal(['Xdropfile'], argv())",
          "101:   enew | only!",
          "103: endfunc",
          "105: \" Test for the :append command",
          "",
          "[Removed Lines]",
          "102:   call delete('Xdropfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:     endfunc",
          "142:     call timer_start(10, 'Timer')",
          "143:   END",
          "145:   let buf = RunVimInTerminal('-S Xtest_append_cmd_empty_buf', {'rows': 6})",
          "146:   call WaitForAssert({-> assert_equal('bbbbb', term_getline(buf, 2))})",
          "147:   call WaitForAssert({-> assert_equal('aaaaa', term_getline(buf, 1))})",
          "149:   \" clean up",
          "150:   call StopVimInTerminal(buf)",
          "152: endfunc",
          "154: \" Test for the :insert command",
          "",
          "[Removed Lines]",
          "144:   call writefile(lines, 'Xtest_append_cmd_empty_buf')",
          "151:   call delete('Xtest_append_cmd_empty_buf')",
          "",
          "[Added Lines]",
          "143:   call writefile(lines, 'Xtest_append_cmd_empty_buf', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:     endfunc",
          "191:     call timer_start(10, 'Timer')",
          "192:   END",
          "194:   let buf = RunVimInTerminal('-S Xtest_insert_cmd_empty_buf', {'rows': 6})",
          "195:   call WaitForAssert({-> assert_equal('bbbbb', term_getline(buf, 2))})",
          "196:   call WaitForAssert({-> assert_equal('aaaaa', term_getline(buf, 1))})",
          "198:   \" clean up",
          "199:   call StopVimInTerminal(buf)",
          "201: endfunc",
          "203: \" Test for the :change command",
          "",
          "[Removed Lines]",
          "193:   call writefile(lines, 'Xtest_insert_cmd_empty_buf')",
          "200:   call delete('Xtest_insert_cmd_empty_buf')",
          "",
          "[Added Lines]",
          "191:   call writefile(lines, 'Xtest_insert_cmd_empty_buf', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:   CheckNotGui",
          "242:   CheckRunVimInTerminal",
          "247:   \" Test for saving all the modified buffers",
          "248:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "244:   call writefile(['foo1'], 'Xfoo')",
          "245:   call writefile(['bar1'], 'Xbar')",
          "",
          "[Added Lines]",
          "241:   call writefile(['foo1'], 'Xfoo', 'D')",
          "242:   call writefile(['bar1'], 'Xbar', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253:     call setline(1, 'bar2')",
          "254:     wincmd b",
          "255:   END",
          "257:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "258:   call term_sendkeys(buf, \":confirm qall\\n\")",
          "259:   call WaitForAssert({-> assert_match('\\[Y\\]es, (N)o, Save (A)ll, (D)iscard All, (C)ancel: ', term_getline(buf, 20))}, 1000)",
          "",
          "[Removed Lines]",
          "256:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "253:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "303:   call assert_equal(['foo4'], readfile('Xfoo'))",
          "304:   call assert_equal(['bar2'], readfile('Xbar'))",
          "309: endfunc",
          "311: func Test_confirm_cmd_cancel()",
          "",
          "[Removed Lines]",
          "306:   call delete('Xscript')",
          "307:   call delete('Xfoo')",
          "308:   call delete('Xbar')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:     new",
          "319:     call setline(1, 'abc')",
          "320:   END",
          "322:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "323:   call term_sendkeys(buf, \":confirm close\\n\")",
          "324:   call WaitForAssert({-> assert_match('^\\[Y\\]es, (N)o, (C)ancel: *$',",
          "",
          "[Removed Lines]",
          "321:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "314:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:   call WaitForAssert({-> assert_match('^ *0,0-1         All$',",
          "333:         \\ term_getline(buf, 20))}, 1000)",
          "334:   call StopVimInTerminal(buf)",
          "336: endfunc",
          "338: \" The \":confirm\" prompt was sometimes used with the terminal in cooked mode.",
          "",
          "[Removed Lines]",
          "335:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "342:   CheckNotGui",
          "343:   CheckRunVimInTerminal",
          "347:   let lines =<< trim END",
          "348:     set hidden nomore",
          "349:     call setline(1, 'abc')",
          "350:     edit Xfoo",
          "351:   END",
          "353:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "354:   call term_sendkeys(buf, \":confirm q\\n\")",
          "355:   call WaitForAssert({-> assert_match('^\\[Y\\]es, (N)o, (C)ancel: *$',",
          "",
          "[Removed Lines]",
          "345:   call writefile(['foo'], 'Xfoo')",
          "352:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "337:   call writefile(['foo'], 'Xfoo', 'D')",
          "344:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "365:   call term_sendkeys(buf, 'C')",
          "366:   call WaitForAssert({-> assert_notmatch('^\\[Y\\]es, (N)o, (C)ancel: C*$',",
          "367:         \\ term_getline(buf, 20))}, 1000)",
          "372: endfunc",
          "374: func Test_confirm_write_ro()",
          "375:   CheckNotGui",
          "376:   CheckRunVimInTerminal",
          "379:   let lines =<< trim END",
          "380:     set nobackup ff=unix cmdheight=2",
          "381:     edit Xconfirm_write_ro",
          "382:     norm Abar",
          "383:   END",
          "385:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "387:   \" Try to write with 'ro' option.",
          "",
          "[Removed Lines]",
          "368:   call StopVimInTerminal(buf)",
          "370:   call delete('Xscript')",
          "371:   call delete('Xfoo')",
          "378:   call writefile(['foo'], 'Xconfirm_write_ro')",
          "384:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "361:   call StopVimInTerminal(buf)",
          "368:   call writefile(['foo'], 'Xconfirm_write_ro', 'D')",
          "374:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "422:   call assert_equal(['foo'], readfile('Xconfirm_write_ro'))",
          "424:   call StopVimInTerminal(buf)",
          "427: endfunc",
          "429: func Test_confirm_write_partial_file()",
          "430:   CheckNotGui",
          "431:   CheckRunVimInTerminal",
          "434:   call writefile(['set nobackup ff=unix cmdheight=2',",
          "436:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "438:   call term_sendkeys(buf, \":confirm 2,3w\\n\")",
          "",
          "[Removed Lines]",
          "425:   call delete('Xscript')",
          "426:   call delete('Xconfirm_write_ro')",
          "433:   call writefile(['a', 'b', 'c', 'd'], 'Xwrite_partial')",
          "435:         \\         'edit Xwrite_partial'], 'Xscript')",
          "",
          "[Added Lines]",
          "421:   call writefile(['a', 'b', 'c', 'd'], 'Xwrite_partial', 'D')",
          "423:         \\         'edit Xwrite_partial'], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "458:   call assert_equal(['b', 'c'], readfile('Xwrite_partial'))",
          "460:   call StopVimInTerminal(buf)",
          "463: endfunc",
          "465: \" Test for the :print command",
          "",
          "[Removed Lines]",
          "461:   call delete('Xwrite_partial')",
          "462:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "509:   CheckNotRoot",
          "511:   \" Redirecting to a read-only file",
          "513:   call setfperm('Xredirfile', 'r--r--r--')",
          "514:   call assert_fails('redir! > Xredirfile', 'E190:')",
          "516: endfunc",
          "518: \" Test for the :filetype command",
          "",
          "[Removed Lines]",
          "512:   call writefile([], 'Xredirfile')",
          "515:   call delete('Xredirfile')",
          "",
          "[Added Lines]",
          "498:   call writefile([], 'Xredirfile', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "533: \" Test for the :read command",
          "534: func Test_read_cmd()",
          "536:   new",
          "537:   call assert_fails('read', 'E32:')",
          "538:   edit Xcmdfile",
          "",
          "[Removed Lines]",
          "535:   call writefile(['one'], 'Xcmdfile')",
          "",
          "[Added Lines]",
          "520:   call writefile(['one'], 'Xcmdfile', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "546:   call feedkeys(\"Qr Xcmdfile\\<CR>visual\\<CR>\", 'xt')",
          "547:   call assert_equal(['one'], getline(1, '$'))",
          "548:   close!",
          "550: endfunc",
          "552: \" Test for running Ex commands when text is locked.",
          "",
          "[Removed Lines]",
          "549:   call delete('Xcmdfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "728: \" Test :write after changing name with :file and loading it with :edit",
          "729: func Test_write_after_rename()",
          "732:   enew",
          "733:   file Xafterfile",
          "",
          "[Removed Lines]",
          "730:   call writefile(['text'], 'Xafterfile')",
          "",
          "[Added Lines]",
          "714:   call writefile(['text'], 'Xafterfile', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "737:   edit",
          "738:   write",
          "741:   bwipe!",
          "742: endfunc",
          "",
          "[Removed Lines]",
          "740:   call delete('Xafterfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_execute_func.vim||src/testdir/test_execute_func.vim": [
          "File: src/testdir/test_execute_func.vim -> src/testdir/test_execute_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:       silent tabedit Xfile3",
          "184:       autocmd VimEnter * win_execute(id, 'close')",
          "185:   END",
          "187:   let buf = RunVimInTerminal('-p Xfile1 -Nu XwinExecute', {})",
          "189:   \" this was crashing on exit with EXITFREE defined",
          "190:   call StopVimInTerminal(buf)",
          "193:   call delete('Xfile1')",
          "194: endfunc",
          "",
          "[Removed Lines]",
          "186:   call writefile(lines, 'XwinExecute')",
          "192:   call delete('XwinExecute')",
          "",
          "[Added Lines]",
          "186:   call writefile(lines, 'XwinExecute', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_exit.vim||src/testdir/test_exit.vim": [
          "File: src/testdir/test_exit.vim -> src/testdir/test_exit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   CheckNotAsan",
          "118:   CheckNotValgrind",
          "122:   if RunVim([], [], '<Xscript')",
          "123:     call assert_equal(1, v:shell_error)",
          "124:     call assert_equal(['l = 1'], readfile('Xtestout'))",
          "125:   endif",
          "127:   call delete('Xtestout')",
          "128: endfun",
          "",
          "[Removed Lines]",
          "120:   call writefile([\":au VimLeave * call writefile(['l = ' .. v:exiting], 'Xtestout')\", \":tabnew\", \"q:\"], 'Xscript', 'b')",
          "126:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "120:   call writefile([\":au VimLeave * call writefile(['l = ' .. v:exiting], 'Xtestout')\", \":tabnew\", \"q:\"], 'Xscript', 'bD')",
          "",
          "---------------"
        ],
        "src/testdir/test_expand.vim||src/testdir/test_expand.vim": [
          "File: src/testdir/test_expand.vim -> src/testdir/test_expand.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     :call writefile(v:errors, 'Xresult')",
          "138:     :qall!",
          "139:   [SCRIPT]",
          "141:   if RunVim([], [], '--clean -s Xscript')",
          "142:     call assert_equal([",
          "143:           \\ 'E1274: No script file name to substitute for \"<script>\"',",
          "144:           \\ 'E498: No :source file name to substitute for \"<sfile>\"'],",
          "145:           \\ readfile('Xresult'))",
          "146:   endif",
          "148:   call delete('Xresult')",
          "149: endfunc",
          "",
          "[Removed Lines]",
          "140:   call writefile(lines, 'Xscript')",
          "147:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "140:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:     au User * call extend(g:au_level, [expand('<script>:t')])",
          "198:   [SCRIPT]",
          "204:   \" Check the expansion of <script> at different levels.",
          "205:   let g:script_level = []",
          "",
          "[Removed Lines]",
          "200:   call writefile(lines0, 'Xscript0')",
          "201:   call writefile(lines1, 'Xscript1')",
          "202:   call writefile(lines2, 'Xscript2')",
          "",
          "[Added Lines]",
          "199:   call writefile(lines0, 'Xscript0', 'D')",
          "200:   call writefile(lines1, 'Xscript1', 'D')",
          "201:   call writefile(lines2, 'Xscript2', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:   delfunc F0",
          "221:   delfunc F1",
          "222:   delfunc F2",
          "227: endfunc",
          "229: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "224:   call delete('Xscript0')",
          "225:   call delete('Xscript1')",
          "226:   call delete('Xscript2')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_expand_func.vim||src/testdir/test_expand_func.vim": [
          "File: src/testdir/test_expand_func.vim -> src/testdir/test_expand_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     \" comment here",
          "57:     let g:stack_value = expand('<stack>')",
          "58:   END",
          "60:   source Xstack",
          "61:   call assert_match('\\<Xstack\\[2\\]$', g:stack_value)",
          "62:   unlet g:stack_value",
          "65:   if exists('+shellslash')",
          "67:     let lines =<< trim END",
          "68:       let g:stack1 = expand('<stack>')",
          "69:       set noshellslash",
          "",
          "[Removed Lines]",
          "59:   call writefile(lines, 'Xstack')",
          "63:   call delete('Xstack')",
          "66:     call mkdir('Xshellslash')",
          "",
          "[Added Lines]",
          "59:   call writefile(lines, 'Xstack', 'D')",
          "65:     call mkdir('Xshellslash', 'R')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:       unlet g:stack2",
          "84:       unlet g:stack3",
          "85:     endfor",
          "87:   endif",
          "88: endfunc",
          "",
          "[Removed Lines]",
          "86:     call delete('Xshellslash', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_expr.vim||src/testdir/test_expr.vim": [
          "File: src/testdir/test_expr.vim -> src/testdir/test_expr.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:     call writefile([execute('messages')], 'Xtest.out')",
          "707:     qall",
          "708:   END",
          "710:   call RunVim([], [], \"-c \\\"echo function('s:abc')\\\" -S Xverify.vim\")",
          "711:   call assert_match('E81: Using <SID> not in a', readfile('Xtest.out')[0])",
          "712:   call RunVim([], [], \"-c \\\"echo funcref('s:abc')\\\" -S Xverify.vim\")",
          "713:   call assert_match('E81: Using <SID> not in a', readfile('Xtest.out')[0])",
          "714:   call delete('Xtest.out')",
          "716: endfunc",
          "718: func Test_setmatches()",
          "",
          "[Removed Lines]",
          "709:   call writefile(cleanup, 'Xverify.vim')",
          "715:   call delete('Xverify.vim')",
          "",
          "[Added Lines]",
          "709:   call writefile(cleanup, 'Xverify.vim', 'D')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     537,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     538,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1501b63f8dedbd15ee5bfd9a177e558ffdf0673a",
      "candidate_info": {
        "commit_hash": "1501b63f8dedbd15ee5bfd9a177e558ffdf0673a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/1501b63f8dedbd15ee5bfd9a177e558ffdf0673a",
        "files": [
          "src/ex_docmd.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4636: not using Visual range\n\nProblem:    Not using Visual range.\nSolution:   Put the command pointer back to the range.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3092:  break;",
          "3093:     }",
          "3096:     {",
          "3104:     }",
          "3106:     return OK;",
          "",
          "[Removed Lines]",
          "3095:     if (has_visual_range && eap->cmd > cmd_start)",
          "3101:  mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3102:  eap->cmd -= 5;",
          "3103:  mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "",
          "[Added Lines]",
          "3095:     if (has_visual_range)",
          "3097:  if (eap->cmd > cmd_start)",
          "3098:  {",
          "3103:      mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3104:      eap->cmd -= 5;",
          "3105:      mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "3106:  }",
          "3107:  else",
          "3109:      eap->cmd -= 5;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4635,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4636,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c75bca3ee955ff36ece99a42041733ddea5f45a7",
      "candidate_info": {
        "commit_hash": "c75bca3ee955ff36ece99a42041733ddea5f45a7",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c75bca3ee955ff36ece99a42041733ddea5f45a7",
        "files": [
          "src/ex_docmd.c",
          "src/testdir/test_source.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4633: Visual range does not work before command modifiers\n\nProblem:    Visual range does not work before command modifiers.\nSolution:   Move Visual range to after command modifiers.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/testdir/test_source.vim||src/testdir/test_source.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2782:  cmdmod_T    *cmod,",
          "2783:  int     skip_only)",
          "2784: {",
          "2785:     char_u  *p;",
          "2786:     int     starts_with_colon = FALSE;",
          "2787:     int     vim9script = in_vim9script();",
          "2789:     CLEAR_POINTER(cmod);",
          "2790:     cmod->cmod_flags = sticky_cmdmod_flags;",
          "2793:     for (;;)",
          "2794:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2785:     char_u  *cmd_start;",
          "2789:     int     has_visual_range = FALSE;",
          "2794:     if (STRNCMP(eap->cmd, \"'<,'>\", 5) == 0)",
          "2795:     {",
          "2799:  eap->cmd += 5;",
          "2800:  cmd_start = eap->cmd;",
          "2801:  has_visual_range = TRUE;",
          "2802:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2849:  {",
          "2850:      char_u *s, *n;",
          "2853:   ;",
          "2854:      n = skipwhite(s);",
          "2858:   break;",
          "2859:  }",
          "",
          "[Removed Lines]",
          "2852:      for (s = p; ASCII_ISALPHA(*s); ++s)",
          "2855:      if (vim_strchr((char_u *)\".=\", *n) != NULL",
          "2856:       || *s == '['",
          "2857:       || (*n != NUL && n[1] == '='))",
          "",
          "[Added Lines]",
          "2864:      for (s = eap->cmd; ASCII_ISALPHA(*s); ++s)",
          "2867:      if (*n == '.' || *n == '=' || (*n != NUL && n[1] == '=')",
          "2868:       || *s == '[')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3081:  break;",
          "3082:     }",
          "3084:     return OK;",
          "3085: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3095:     if (has_visual_range && eap->cmd > cmd_start)",
          "3096:     {",
          "3101:  mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);",
          "3102:  eap->cmd -= 5;",
          "3103:  mch_memmove(eap->cmd - 1, \":'<,'>\", 6);",
          "3104:     }",
          "",
          "---------------"
        ],
        "src/testdir/test_source.vim||src/testdir/test_source.vim": [
          "File: src/testdir/test_source.vim -> src/testdir/test_source.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "579:   call assert_equal(#{pi: 3.12, e: 2.71828}, g:Math)",
          "580:   call assert_equal(['vim', 'nano'], g:Editors)",
          "582:   \" test for using try/catch",
          "583:   %d _",
          "584:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582:   \" '<,'> range before the cmd modifier works",
          "583:   unlet g:Math",
          "584:   unlet g:Editors",
          "585:   exe \"normal 6GV4j:vim9cmd source\\<CR>\"",
          "586:   call assert_equal(['vim', 'nano'], g:Editors)",
          "587:   unlet g:Editors",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4632,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4633,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6fdb15d423df22e1776844811d082322475e48a",
      "candidate_info": {
        "commit_hash": "c6fdb15d423df22e1776844811d082322475e48a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c6fdb15d423df22e1776844811d082322475e48a",
        "files": [
          "src/ex_docmd.c",
          "src/testdir/test_cmdline.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0025: accessing beyond allocated memory with the cmdline window\n\nProblem:    Accessing beyond allocated memory when using the cmdline window in\n            Ex mode.\nSolution:   Use \"*\" instead of \"'<,'>\" for Visual mode.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_docmd.c||src/ex_docmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3118:   size_t len = STRLEN(cmd_start);",
          "3122:   mch_memmove(orig_cmd, cmd_start, len);",
          "3124:      }",
          "3125:      else",
          "3126:      {",
          "",
          "[Removed Lines]",
          "3123:   STRCPY(orig_cmd + len, \"'<,'>+\");",
          "",
          "[Added Lines]",
          "3125:   STRCPY(orig_cmd + len, \" *+\");",
          "",
          "---------------"
        ],
        "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim": [
          "File: src/testdir/test_cmdline.vim -> src/testdir/test_cmdline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2103:   call assert_equal(1, winnr('$'))",
          "2104: endfunc",
          "2106: \" test that \";\" works to find a match at the start of the first line",
          "2107: func Test_zero_line_search()",
          "2108:   new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2106: func Test_cmdwin_ex_mode_with_modifier()",
          "2107:   \" this was accessing memory after allocated text in Ex mode",
          "2108:   new",
          "2109:   call setline(1, ['some', 'text', 'lines'])",
          "2110:   silent! call feedkeys(\"gQnormal vq:atopleft\\<C-V>\\<CR>\\<CR>\", 'xt')",
          "2111:   bwipe!",
          "2112: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     24,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     25,",
          "",
          "---------------"
        ]
      }
    }
  ]
}