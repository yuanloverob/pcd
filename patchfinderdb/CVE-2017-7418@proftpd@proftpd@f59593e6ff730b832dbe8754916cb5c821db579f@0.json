{
  "cve_id": "CVE-2017-7418",
  "cve_desc": "ProFTPD before 1.3.5e and 1.3.6 before 1.3.6rc5 controls whether the home directory of a user could contain a symbolic link through the AllowChrootSymlinks configuration option, but checks only the last path component when enforcing AllowChrootSymlinks. Attackers with local access could bypass the AllowChrootSymlinks control by replacing a path component (other than the last one) with a symbolic link. The threat model includes an attacker who is not granted full filesystem access by a hosting provider, but can reconfigure the home directory of an FTP user.",
  "repo": "proftpd/proftpd",
  "patch_hash": "f59593e6ff730b832dbe8754916cb5c821db579f",
  "patch_info": {
    "commit_hash": "f59593e6ff730b832dbe8754916cb5c821db579f",
    "repo": "proftpd/proftpd",
    "commit_url": "https://github.com/proftpd/proftpd/commit/f59593e6ff730b832dbe8754916cb5c821db579f",
    "files": [
      "modules/mod_auth.c",
      "tests/t/lib/ProFTPD/TestSuite/Utils.pm",
      "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm",
      "include/fsio.h",
      "src/fsio.c",
      "tests/api/fsio.c"
    ],
    "message": "Merge pull request #444 from proftpd/auth-symlinks-anywhere-in-chroot\n\nWalk the entire DefaultRoot path, checking for symlinks of any compon\u2026",
    "before_after_code_files": [
      "modules/mod_auth.c||modules/mod_auth.c",
      "tests/t/lib/ProFTPD/TestSuite/Utils.pm||tests/t/lib/ProFTPD/TestSuite/Utils.pm",
      "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm||tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm"
    ]
  },
  "patch_diff": {
    "modules/mod_auth.c||modules/mod_auth.c": [
      "File: modules/mod_auth.c -> modules/mod_auth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "804:   return dir;",
      "805: }",
      "808: static int get_default_root(pool *p, int allow_symlinks, const char **root) {",
      "809:   config_rec *c = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "807: static int is_symlink_path(pool *p, const char *path, size_t pathlen) {",
      "808:   int res, xerrno = 0;",
      "809:   struct stat st;",
      "810:   char *ptr;",
      "812:   if (pathlen == 0) {",
      "813:     return 0;",
      "814:   }",
      "816:   pr_fs_clear_cache2(path);",
      "817:   res = pr_fsio_lstat(path, &st);",
      "818:   if (res < 0) {",
      "819:     xerrno = errno;",
      "821:     pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
      "822:       strerror(xerrno));",
      "824:     errno = xerrno;",
      "825:     return -1;",
      "826:   }",
      "828:   if (S_ISLNK(st.st_mode)) {",
      "829:     errno = EPERM;",
      "830:     return -1;",
      "831:   }",
      "838:   ptr = strrchr(path, '/');",
      "839:   if (ptr != NULL) {",
      "840:     char *new_path;",
      "841:     size_t new_pathlen;",
      "843:     pr_signals_handle();",
      "845:     new_pathlen = ptr - path;",
      "846:     new_path = pstrndup(p, path, new_pathlen);",
      "848:     pr_log_debug(DEBUG10,",
      "849:       \"AllowChrootSymlink: path '%s' not a symlink, checking '%s'\", path,",
      "850:       new_path);",
      "851:     res = is_symlink_path(p, new_path, new_pathlen);",
      "852:     if (res < 0) {",
      "853:       return -1;",
      "854:     }",
      "855:   }",
      "857:   return 0;",
      "858: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848:       if (allow_symlinks == FALSE) {",
      "849:         char *path, target_path[PR_TUNABLE_PATH_MAX + 1];",
      "851:         size_t pathlen;",
      "",
      "[Removed Lines]",
      "850:         struct stat st;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "878:           path[pathlen-1] = '\\0';",
      "879:         }",
      "883:         if (res < 0) {",
      "897:           errno = EPERM;",
      "898:           return -1;",
      "899:         }",
      "",
      "[Removed Lines]",
      "881:         pr_fs_clear_cache2(path);",
      "882:         res = pr_fsio_lstat(path, &st);",
      "884:           xerrno = errno;",
      "886:           pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
      "887:             strerror(xerrno));",
      "889:           errno = xerrno;",
      "890:           return -1;",
      "891:         }",
      "893:         if (S_ISLNK(st.st_mode)) {",
      "894:           pr_log_pri(PR_LOG_WARNING,",
      "895:             \"error: DefaultRoot %s is a symlink (denied by AllowChrootSymlinks \"",
      "896:             \"config)\", path);",
      "",
      "[Added Lines]",
      "933:         res = is_symlink_path(p, path, pathlen);",
      "935:           if (errno == EPERM) {",
      "936:             pr_log_pri(PR_LOG_WARNING, \"error: DefaultRoot %s is a symlink \"",
      "937:               \"(denied by AllowChrootSymlinks config)\", path);",
      "938:           }",
      "",
      "---------------"
    ],
    "tests/t/lib/ProFTPD/TestSuite/Utils.pm||tests/t/lib/ProFTPD/TestSuite/Utils.pm": [
      "File: tests/t/lib/ProFTPD/TestSuite/Utils.pm -> tests/t/lib/ProFTPD/TestSuite/Utils.pm",
      "--- Hunk 1 ---",
      "[Context before]",
      "1198:   $uid = 500 unless defined($uid);",
      "1199:   my $gid = shift;",
      "1200:   $gid = 500 unless defined($gid);",
      "1202:   my $config_file = \"$tmpdir/$name.conf\";",
      "1203:   my $pid_file = File::Spec->rel2abs(\"$tmpdir/$name.pid\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1201:   my $home_dir = shift;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1206:   my $auth_user_file = File::Spec->rel2abs(\"$tmpdir/$name.passwd\");",
      "1207:   my $auth_group_file = File::Spec->rel2abs(\"$tmpdir/$name.group\");",
      "1220:     }",
      "1221:   }",
      "",
      "[Removed Lines]",
      "1209:   my $home_dir = File::Spec->rel2abs($tmpdir);",
      "1211:   # Make sure that, if we're running as root, that the home directory has",
      "1212:   # permissions/privs set for the account we create",
      "1213:   if ($< == 0) {",
      "1214:     unless (chmod(0755, $home_dir)) {",
      "1215:       croak(\"Can't set perms on $home_dir to 0755: $!\");",
      "1216:     }",
      "1218:     unless (chown($uid, $gid, $home_dir)) {",
      "1219:       croak(\"Can't set owner of $home_dir to $uid/$gid: $!\");",
      "",
      "[Added Lines]",
      "1210:   # If the caller provides the home directory, it is ASSUMED that they will",
      "1211:   # have created it.",
      "1212:   unless (defined($home_dir)) {",
      "1213:     $home_dir = File::Spec->rel2abs($tmpdir);",
      "1215:     # Make sure that, if we're running as root, that the home directory has",
      "1216:     # permissions/privs set for the account we create",
      "1217:     if ($< == 0) {",
      "1218:       unless (chmod(0755, $home_dir)) {",
      "1219:         croak(\"Can't set perms on $home_dir to 0755: $!\");",
      "1220:       }",
      "1222:       unless (chown($uid, $gid, $home_dir)) {",
      "1223:         croak(\"Can't set owner of $home_dir to $uid/$gid: $!\");",
      "1224:       }",
      "",
      "---------------"
    ],
    "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm||tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm": [
      "File: tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm -> tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm",
      "--- Hunk 1 ---",
      "[Context before]",
      "621:   my $self = shift;",
      "622:   my $tmpdir = $self->{tmpdir};",
      "633:   my $user = 'proftpd';",
      "636:   my $home_dir = File::Spec->rel2abs(\"$tmpdir/home.d/symlinks/$user\");",
      "637:   my $uid = 500;",
      "638:   my $gid = 500;",
      "646:   my $cwd = getcwd();",
      "650:   }",
      "654:   }",
      "656:   unless (chdir($cwd)) {",
      "657:     die(\"Can't chdir to $cwd: $!\");",
      "658:   }",
      "676:   my $config = {",
      "684:     AllowChrootSymlinks => 'off',",
      "685:     DefaultRoot => '~',",
      "",
      "[Removed Lines]",
      "624:   my $config_file = \"$tmpdir/config.conf\";",
      "625:   my $pid_file = File::Spec->rel2abs(\"$tmpdir/config.pid\");",
      "626:   my $scoreboard_file = File::Spec->rel2abs(\"$tmpdir/config.scoreboard\");",
      "628:   my $log_file = test_get_logfile();",
      "630:   my $auth_user_file = File::Spec->rel2abs(\"$tmpdir/config.passwd\");",
      "631:   my $auth_group_file = File::Spec->rel2abs(\"$tmpdir/config.group\");",
      "634:   my $passwd = 'test';",
      "635:   my $group = 'ftpd';",
      "640:   my $intermed_dir = File::Spec->rel2abs(\"$tmpdir/home.d/symlinks\");",
      "641:   mkpath($intermed_dir);",
      "643:   my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real/$user\");",
      "644:   mkpath($symlink_dst);",
      "648:   unless (chdir($intermed_dir)) {",
      "649:     die(\"Can't chdir to $intermed_dir: $!\");",
      "652:   unless (symlink(\"../../real/$user\", \"./$user\")) {",
      "653:     die(\"Can't symlink '../../real/$user' to './$user': $!\");",
      "660:   # Make sure that, if we're running as root, that the home directory has",
      "661:   # permissions/privs set for the account we create",
      "662:   if ($< == 0) {",
      "663:     unless (chmod(0755, $symlink_dst)) {",
      "664:       die(\"Can't set perms on $symlink_dst to 0755: $!\");",
      "665:     }",
      "667:     unless (chown($uid, $gid, $symlink_dst)) {",
      "668:       die(\"Can't set owner of $symlink_dst to $uid/$gid: $!\");",
      "669:     }",
      "670:   }",
      "672:   auth_user_write($auth_user_file, $user, $passwd, $uid, $gid, $home_dir,",
      "673:     '/bin/bash');",
      "674:   auth_group_write($auth_group_file, $group, $gid, $user);",
      "677:     PidFile => $pid_file,",
      "678:     ScoreboardFile => $scoreboard_file,",
      "679:     SystemLog => $log_file,",
      "681:     AuthUserFile => $auth_user_file,",
      "682:     AuthGroupFile => $auth_group_file,",
      "",
      "[Added Lines]",
      "629:   my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real\");",
      "633:   unless (chdir($tmpdir)) {",
      "634:     die(\"Can't chdir to $tmpdir: $!\");",
      "637:   unless (symlink(\"./real\", \"./home.d\")) {",
      "638:     die(\"Can't symlink './real' to './home.d': $!\");",
      "645:   mkpath(File::Spec->rel2abs(\"$tmpdir/real/symlinks/$user\"));",
      "647:   my $setup = test_setup($tmpdir, 'config', $user, undef, undef, $uid, $gid,",
      "648:     $home_dir);",
      "651:     PidFile => $setup->{pid_file},",
      "652:     ScoreboardFile => $setup->{scoreboard_file},",
      "653:     SystemLog => $setup->{log_file},",
      "655:     AuthUserFile => $setup->{auth_user_file},",
      "656:     AuthGroupFile => $setup->{auth_group_file},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "691:     },",
      "692:   };",
      "696:   # Open pipes, for use between the parent and child processes.  Specifically,",
      "697:   # the child will indicate when it's done with its test by writing a message",
      "",
      "[Removed Lines]",
      "694:   my ($port, $config_user, $config_group) = config_write($config_file, $config);",
      "",
      "[Added Lines]",
      "668:   my ($port, $config_user, $config_group) = config_write($setup->{config_file},",
      "669:     $config);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "709:   if ($pid) {",
      "710:     eval {",
      "711:       my $client = ProFTPD::TestSuite::FTP->new('127.0.0.1', $port);",
      "713:       unless ($@) {",
      "714:         die(\"Login succeeded unexpectedly\");",
      "715:       }",
      "",
      "[Removed Lines]",
      "712:       eval { $client->login($user, $passwd) };",
      "",
      "[Added Lines]",
      "687:       eval { $client->login($user, $setup->{passwd}) };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "722:       $expected = 530;",
      "723:       $self->assert($expected == $resp_code,",
      "726:       $expected = \"Login incorrect.\";",
      "727:       $self->assert($expected eq $resp_msg,",
      "729:     };",
      "731:     if ($@) {",
      "732:       $ex = $@;",
      "733:     }",
      "",
      "[Removed Lines]",
      "724:         test_msg(\"Expected response code $expected, got $resp_code\"));",
      "728:         test_msg(\"Expected response message '$expected', got '$resp_msg'\"));",
      "",
      "[Added Lines]",
      "699:         \"Expected response code $expected, got $resp_code\");",
      "703:         \"Expected response message '$expected', got '$resp_msg'\");",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "736:     $wfh->flush();",
      "738:   } else {",
      "740:     if ($@) {",
      "741:       warn($@);",
      "742:       exit 1;",
      "",
      "[Removed Lines]",
      "739:     eval { server_wait($config_file, $rfh) };",
      "",
      "[Added Lines]",
      "713:     eval { server_wait($setup->{config_file}, $rfh) };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "746:   }",
      "748:   # Stop server",
      "751:   $self->assert_child_ok($pid);",
      "761: }",
      "763: 1;",
      "",
      "[Removed Lines]",
      "749:   server_stop($pid_file);",
      "753:   if ($ex) {",
      "754:     test_append_logfile($log_file, $ex);",
      "755:     unlink($log_file);",
      "757:     die($ex);",
      "758:   }",
      "760:   unlink($log_file);",
      "",
      "[Added Lines]",
      "723:   server_stop($setup->{pid_file});",
      "726:   test_cleanup($setup->{log_file}, $ex);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "349addc3be4fcdad9bd4ec01ad1ccd916c898ed8",
      "candidate_info": {
        "commit_hash": "349addc3be4fcdad9bd4ec01ad1ccd916c898ed8",
        "repo": "proftpd/proftpd",
        "commit_url": "https://github.com/proftpd/proftpd/commit/349addc3be4fcdad9bd4ec01ad1ccd916c898ed8",
        "files": [
          "modules/mod_auth.c",
          "tests/t/lib/ProFTPD/TestSuite/Utils.pm",
          "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm"
        ],
        "message": "Walk the entire DefaultRoot path, checking for symlinks of any component, when AllowChrootSymlinks is disabled.",
        "before_after_code_files": [
          "modules/mod_auth.c||modules/mod_auth.c",
          "tests/t/lib/ProFTPD/TestSuite/Utils.pm||tests/t/lib/ProFTPD/TestSuite/Utils.pm",
          "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm||tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/proftpd/proftpd/pull/444"
        ],
        "olp_code_files": {
          "patch": [
            "modules/mod_auth.c||modules/mod_auth.c",
            "tests/t/lib/ProFTPD/TestSuite/Utils.pm||tests/t/lib/ProFTPD/TestSuite/Utils.pm",
            "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm||tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm"
          ],
          "candidate": [
            "modules/mod_auth.c||modules/mod_auth.c",
            "tests/t/lib/ProFTPD/TestSuite/Utils.pm||tests/t/lib/ProFTPD/TestSuite/Utils.pm",
            "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm||tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm"
          ]
        }
      },
      "candidate_diff": {
        "modules/mod_auth.c||modules/mod_auth.c": [
          "File: modules/mod_auth.c -> modules/mod_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:   return dir;",
          "805: }",
          "808: static int get_default_root(pool *p, int allow_symlinks, const char **root) {",
          "809:   config_rec *c = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807: static int is_symlink_path(pool *p, const char *path, size_t pathlen) {",
          "808:   int res, xerrno = 0;",
          "809:   struct stat st;",
          "810:   char *ptr;",
          "812:   if (pathlen == 0) {",
          "813:     return 0;",
          "814:   }",
          "816:   pr_fs_clear_cache2(path);",
          "817:   res = pr_fsio_lstat(path, &st);",
          "818:   if (res < 0) {",
          "819:     xerrno = errno;",
          "821:     pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
          "822:       strerror(xerrno));",
          "824:     errno = xerrno;",
          "825:     return -1;",
          "826:   }",
          "828:   if (S_ISLNK(st.st_mode)) {",
          "829:     errno = EPERM;",
          "830:     return -1;",
          "831:   }",
          "838:   ptr = strrchr(path, '/');",
          "839:   if (ptr != NULL) {",
          "840:     char *new_path;",
          "841:     size_t new_pathlen;",
          "843:     pr_signals_handle();",
          "845:     new_pathlen = ptr - path;",
          "846:     new_path = pstrndup(p, path, new_pathlen);",
          "848:     pr_log_debug(DEBUG10,",
          "849:       \"AllowChrootSymlink: path '%s' not a symlink, checking '%s'\", path,",
          "850:       new_path);",
          "851:     res = is_symlink_path(p, new_path, new_pathlen);",
          "852:     if (res < 0) {",
          "853:       return -1;",
          "854:     }",
          "855:   }",
          "857:   return 0;",
          "858: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "848:       if (allow_symlinks == FALSE) {",
          "849:         char *path, target_path[PR_TUNABLE_PATH_MAX + 1];",
          "851:         size_t pathlen;",
          "",
          "[Removed Lines]",
          "850:         struct stat st;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "878:           path[pathlen-1] = '\\0';",
          "879:         }",
          "883:         if (res < 0) {",
          "897:           errno = EPERM;",
          "898:           return -1;",
          "899:         }",
          "",
          "[Removed Lines]",
          "881:         pr_fs_clear_cache2(path);",
          "882:         res = pr_fsio_lstat(path, &st);",
          "884:           xerrno = errno;",
          "886:           pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
          "887:             strerror(xerrno));",
          "889:           errno = xerrno;",
          "890:           return -1;",
          "891:         }",
          "893:         if (S_ISLNK(st.st_mode)) {",
          "894:           pr_log_pri(PR_LOG_WARNING,",
          "895:             \"error: DefaultRoot %s is a symlink (denied by AllowChrootSymlinks \"",
          "896:             \"config)\", path);",
          "",
          "[Added Lines]",
          "933:         res = is_symlink_path(p, path, pathlen);",
          "935:           if (errno == EPERM) {",
          "936:             pr_log_pri(PR_LOG_WARNING, \"error: DefaultRoot %s is a symlink \"",
          "937:               \"(denied by AllowChrootSymlinks config)\", path);",
          "938:           }",
          "",
          "---------------"
        ],
        "tests/t/lib/ProFTPD/TestSuite/Utils.pm||tests/t/lib/ProFTPD/TestSuite/Utils.pm": [
          "File: tests/t/lib/ProFTPD/TestSuite/Utils.pm -> tests/t/lib/ProFTPD/TestSuite/Utils.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "1198:   $uid = 500 unless defined($uid);",
          "1199:   my $gid = shift;",
          "1200:   $gid = 500 unless defined($gid);",
          "1202:   my $config_file = \"$tmpdir/$name.conf\";",
          "1203:   my $pid_file = File::Spec->rel2abs(\"$tmpdir/$name.pid\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1201:   my $home_dir = shift;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1206:   my $auth_user_file = File::Spec->rel2abs(\"$tmpdir/$name.passwd\");",
          "1207:   my $auth_group_file = File::Spec->rel2abs(\"$tmpdir/$name.group\");",
          "1220:     }",
          "1221:   }",
          "",
          "[Removed Lines]",
          "1209:   my $home_dir = File::Spec->rel2abs($tmpdir);",
          "1211:   # Make sure that, if we're running as root, that the home directory has",
          "1212:   # permissions/privs set for the account we create",
          "1213:   if ($< == 0) {",
          "1214:     unless (chmod(0755, $home_dir)) {",
          "1215:       croak(\"Can't set perms on $home_dir to 0755: $!\");",
          "1216:     }",
          "1218:     unless (chown($uid, $gid, $home_dir)) {",
          "1219:       croak(\"Can't set owner of $home_dir to $uid/$gid: $!\");",
          "",
          "[Added Lines]",
          "1210:   # If the caller provides the home directory, it is ASSUMED that they will",
          "1211:   # have created it.",
          "1212:   unless (defined($home_dir)) {",
          "1213:     $home_dir = File::Spec->rel2abs($tmpdir);",
          "1215:     # Make sure that, if we're running as root, that the home directory has",
          "1216:     # permissions/privs set for the account we create",
          "1217:     if ($< == 0) {",
          "1218:       unless (chmod(0755, $home_dir)) {",
          "1219:         croak(\"Can't set perms on $home_dir to 0755: $!\");",
          "1220:       }",
          "1222:       unless (chown($uid, $gid, $home_dir)) {",
          "1223:         croak(\"Can't set owner of $home_dir to $uid/$gid: $!\");",
          "1224:       }",
          "",
          "---------------"
        ],
        "tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm||tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm": [
          "File: tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm -> tests/t/lib/ProFTPD/Tests/Config/DefaultRoot.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   my $self = shift;",
          "622:   my $tmpdir = $self->{tmpdir};",
          "633:   my $user = 'proftpd';",
          "636:   my $home_dir = File::Spec->rel2abs(\"$tmpdir/home.d/symlinks/$user\");",
          "637:   my $uid = 500;",
          "638:   my $gid = 500;",
          "646:   my $cwd = getcwd();",
          "650:   }",
          "654:   }",
          "656:   unless (chdir($cwd)) {",
          "657:     die(\"Can't chdir to $cwd: $!\");",
          "658:   }",
          "676:   my $config = {",
          "684:     AllowChrootSymlinks => 'off',",
          "685:     DefaultRoot => '~',",
          "",
          "[Removed Lines]",
          "624:   my $config_file = \"$tmpdir/config.conf\";",
          "625:   my $pid_file = File::Spec->rel2abs(\"$tmpdir/config.pid\");",
          "626:   my $scoreboard_file = File::Spec->rel2abs(\"$tmpdir/config.scoreboard\");",
          "628:   my $log_file = test_get_logfile();",
          "630:   my $auth_user_file = File::Spec->rel2abs(\"$tmpdir/config.passwd\");",
          "631:   my $auth_group_file = File::Spec->rel2abs(\"$tmpdir/config.group\");",
          "634:   my $passwd = 'test';",
          "635:   my $group = 'ftpd';",
          "640:   my $intermed_dir = File::Spec->rel2abs(\"$tmpdir/home.d/symlinks\");",
          "641:   mkpath($intermed_dir);",
          "643:   my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real/$user\");",
          "644:   mkpath($symlink_dst);",
          "648:   unless (chdir($intermed_dir)) {",
          "649:     die(\"Can't chdir to $intermed_dir: $!\");",
          "652:   unless (symlink(\"../../real/$user\", \"./$user\")) {",
          "653:     die(\"Can't symlink '../../real/$user' to './$user': $!\");",
          "660:   # Make sure that, if we're running as root, that the home directory has",
          "661:   # permissions/privs set for the account we create",
          "662:   if ($< == 0) {",
          "663:     unless (chmod(0755, $symlink_dst)) {",
          "664:       die(\"Can't set perms on $symlink_dst to 0755: $!\");",
          "665:     }",
          "667:     unless (chown($uid, $gid, $symlink_dst)) {",
          "668:       die(\"Can't set owner of $symlink_dst to $uid/$gid: $!\");",
          "669:     }",
          "670:   }",
          "672:   auth_user_write($auth_user_file, $user, $passwd, $uid, $gid, $home_dir,",
          "673:     '/bin/bash');",
          "674:   auth_group_write($auth_group_file, $group, $gid, $user);",
          "677:     PidFile => $pid_file,",
          "678:     ScoreboardFile => $scoreboard_file,",
          "679:     SystemLog => $log_file,",
          "681:     AuthUserFile => $auth_user_file,",
          "682:     AuthGroupFile => $auth_group_file,",
          "",
          "[Added Lines]",
          "629:   my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real\");",
          "633:   unless (chdir($tmpdir)) {",
          "634:     die(\"Can't chdir to $tmpdir: $!\");",
          "637:   unless (symlink(\"./real\", \"./home.d\")) {",
          "638:     die(\"Can't symlink './real' to './home.d': $!\");",
          "645:   mkpath(File::Spec->rel2abs(\"$tmpdir/real/symlinks/$user\"));",
          "647:   my $setup = test_setup($tmpdir, 'config', $user, undef, undef, $uid, $gid,",
          "648:     $home_dir);",
          "651:     PidFile => $setup->{pid_file},",
          "652:     ScoreboardFile => $setup->{scoreboard_file},",
          "653:     SystemLog => $setup->{log_file},",
          "655:     AuthUserFile => $setup->{auth_user_file},",
          "656:     AuthGroupFile => $setup->{auth_group_file},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:     },",
          "692:   };",
          "696:   # Open pipes, for use between the parent and child processes.  Specifically,",
          "697:   # the child will indicate when it's done with its test by writing a message",
          "",
          "[Removed Lines]",
          "694:   my ($port, $config_user, $config_group) = config_write($config_file, $config);",
          "",
          "[Added Lines]",
          "668:   my ($port, $config_user, $config_group) = config_write($setup->{config_file},",
          "669:     $config);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:   if ($pid) {",
          "710:     eval {",
          "711:       my $client = ProFTPD::TestSuite::FTP->new('127.0.0.1', $port);",
          "713:       unless ($@) {",
          "714:         die(\"Login succeeded unexpectedly\");",
          "715:       }",
          "",
          "[Removed Lines]",
          "712:       eval { $client->login($user, $passwd) };",
          "",
          "[Added Lines]",
          "687:       eval { $client->login($user, $setup->{passwd}) };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "722:       $expected = 530;",
          "723:       $self->assert($expected == $resp_code,",
          "726:       $expected = \"Login incorrect.\";",
          "727:       $self->assert($expected eq $resp_msg,",
          "729:     };",
          "731:     if ($@) {",
          "732:       $ex = $@;",
          "733:     }",
          "",
          "[Removed Lines]",
          "724:         test_msg(\"Expected response code $expected, got $resp_code\"));",
          "728:         test_msg(\"Expected response message '$expected', got '$resp_msg'\"));",
          "",
          "[Added Lines]",
          "699:         \"Expected response code $expected, got $resp_code\");",
          "703:         \"Expected response message '$expected', got '$resp_msg'\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "736:     $wfh->flush();",
          "738:   } else {",
          "740:     if ($@) {",
          "741:       warn($@);",
          "742:       exit 1;",
          "",
          "[Removed Lines]",
          "739:     eval { server_wait($config_file, $rfh) };",
          "",
          "[Added Lines]",
          "713:     eval { server_wait($setup->{config_file}, $rfh) };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "746:   }",
          "748:   # Stop server",
          "751:   $self->assert_child_ok($pid);",
          "761: }",
          "763: 1;",
          "",
          "[Removed Lines]",
          "749:   server_stop($pid_file);",
          "753:   if ($ex) {",
          "754:     test_append_logfile($log_file, $ex);",
          "755:     unlink($log_file);",
          "757:     die($ex);",
          "758:   }",
          "760:   unlink($log_file);",
          "",
          "[Added Lines]",
          "723:   server_stop($setup->{pid_file});",
          "726:   test_cleanup($setup->{log_file}, $ex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ecff21e0d0e84f35c299ef91d7fda088e516d4ed",
      "candidate_info": {
        "commit_hash": "ecff21e0d0e84f35c299ef91d7fda088e516d4ed",
        "repo": "proftpd/proftpd",
        "commit_url": "https://github.com/proftpd/proftpd/commit/ecff21e0d0e84f35c299ef91d7fda088e516d4ed",
        "files": [
          "modules/mod_auth.c"
        ],
        "message": "Backporting recursive handling of DefaultRoot path, when AllowChrootSymlinks is off, to 1.3.5 branch.",
        "before_after_code_files": [
          "modules/mod_auth.c||modules/mod_auth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "modules/mod_auth.c||modules/mod_auth.c"
          ],
          "candidate": [
            "modules/mod_auth.c||modules/mod_auth.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/mod_auth.c||modules/mod_auth.c": [
          "File: modules/mod_auth.c -> modules/mod_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:   return dir;",
          "689: }",
          "694: static int get_default_root(pool *p, int allow_symlinks, char **root) {",
          "695:   config_rec *c = NULL;",
          "696:   char *dir = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691: static int is_symlink_path(pool *p, const char *path, size_t pathlen) {",
          "692:   int res, xerrno = 0;",
          "693:   struct stat st;",
          "694:   char *ptr;",
          "696:   if (pathlen == 0) {",
          "697:     return 0;",
          "698:   }",
          "700:   pr_fs_clear_cache();",
          "701:   res = pr_fsio_lstat(path, &st);",
          "702:   if (res < 0) {",
          "703:     xerrno = errno;",
          "705:     pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
          "706:       strerror(xerrno));",
          "708:     errno = xerrno;",
          "709:     return -1;",
          "710:   }",
          "712:   if (S_ISLNK(st.st_mode)) {",
          "713:     errno = EPERM;",
          "714:     return -1;",
          "715:   }",
          "722:   ptr = strrchr(path, '/');",
          "723:   if (ptr != NULL) {",
          "724:     char *new_path;",
          "725:     size_t new_pathlen;",
          "727:     pr_signals_handle();",
          "729:     new_pathlen = ptr - path;",
          "732:     if (new_pathlen == pathlen) {",
          "733:       return 0;",
          "734:     }",
          "736:     new_path = pstrndup(p, path, new_pathlen);",
          "738:     pr_log_debug(DEBUG10,",
          "739:       \"AllowChrootSymlink: path '%s' not a symlink, checking '%s'\", path,",
          "740:       new_path);",
          "741:     res = is_symlink_path(p, new_path, new_pathlen);",
          "742:     if (res < 0) {",
          "743:       return -1;",
          "744:     }",
          "745:   }",
          "747:   return 0;",
          "748: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "734:       if (allow_symlinks == FALSE) {",
          "735:         char *path, target_path[PR_TUNABLE_PATH_MAX + 1];",
          "737:         size_t pathlen;",
          "",
          "[Removed Lines]",
          "736:         struct stat st;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:           path[pathlen-1] = '\\0';",
          "765:         }",
          "769:         if (res < 0) {",
          "783:           errno = EPERM;",
          "784:           return -1;",
          "785:         }",
          "",
          "[Removed Lines]",
          "767:         pr_fs_clear_cache();",
          "768:         res = pr_fsio_lstat(path, &st);",
          "770:           xerrno = errno;",
          "772:           pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
          "773:             strerror(xerrno));",
          "775:           errno = xerrno;",
          "776:           return -1;",
          "777:         }",
          "779:         if (S_ISLNK(st.st_mode)) {",
          "780:           pr_log_pri(PR_LOG_WARNING,",
          "781:             \"error: DefaultRoot %s is a symlink (denied by AllowChrootSymlinks \"",
          "782:             \"config)\", path);",
          "",
          "[Added Lines]",
          "823:         res = is_symlink_path(p, path, pathlen);",
          "825:           if (errno == EPERM) {",
          "826:             pr_log_pri(PR_LOG_WARNING, \"error: DefaultRoot %s is a symlink \"",
          "827:               \"(denied by AllowChrootSymlinks config)\", path);",
          "828:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}