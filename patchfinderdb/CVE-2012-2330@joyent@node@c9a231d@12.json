{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bec863b7de8ab45cf599372b16274fa526bd86a0",
      "candidate_info": {
        "commit_hash": "bec863b7de8ab45cf599372b16274fa526bd86a0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bec863b7de8ab45cf599372b16274fa526bd86a0",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: use uv_thread_self()",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #endif",
          "35: #include <stdlib.h>",
          "37: #include <errno.h>",
          "47: #if OPENSSL_VERSION_NUMBER >= 0x10000000L",
          "48: # define OPENSSL_CONST const",
          "49: #else",
          "",
          "[Removed Lines]",
          "40: #ifdef _WIN32",
          "41: # include <windows.h>",
          "42: #else",
          "43: # include <pthread.h>",
          "44: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: static void crypto_threadid_cb(CRYPTO_THREADID* tid) {",
          "106: }",
          "",
          "[Removed Lines]",
          "97:   unsigned long val;",
          "99: #ifdef _WIN32",
          "100:   val = static_cast<unsigned long>(GetCurrentThreadId());",
          "101: #else",
          "102:   val = (unsigned long) pthread_self();",
          "103: #endif",
          "105:   CRYPTO_THREADID_set_numeric(tid, val);",
          "",
          "[Added Lines]",
          "88:   CRYPTO_THREADID_set_numeric(tid, uv_thread_self());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3da6c6c045fb9d629509cea53e3631342f785d3",
      "candidate_info": {
        "commit_hash": "f3da6c6c045fb9d629509cea53e3631342f785d3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f3da6c6c045fb9d629509cea53e3631342f785d3",
        "files": [
          "src/node_http_parser.cc",
          "test/simple/test-http-parser.js"
        ],
        "message": "Potential fix for #2438\n\n- Save StringPtr if the header hasn't been completely received yet after one\n  packet.\n- Add one to num_fields and num_values. They were actually one less than the\n  number of fields and values.\n- Remove always_inline makes debugging difficult, and has negligible\n  performance benefits.",
        "before_after_code_files": [
          "src/node_http_parser.cc||src/node_http_parser.cc",
          "test/simple/test-http-parser.js||test/simple/test-http-parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static size_t current_buffer_len;",
          "121: #define HTTP_CB(name)                                               \\",
          "122:    static int name(http_parser* p_) {                              \\",
          "123:      Parser* self = container_of(p_, Parser, parser_);             \\",
          "124:      return self->name##_();                                       \\",
          "125:    }                                                               \\",
          "129: #define HTTP_DATA_CB(name)                                          \\",
          "",
          "[Removed Lines]",
          "108: #if defined(__GNUC__)",
          "109: # if __GNUC__ >= 4",
          "110: #  define always_inline __attribute__((always_inline))",
          "111: # else",
          "112: #  define always_inline inline",
          "113: # endif",
          "114: #elif defined(_MSC_VER)",
          "115: # define always_inline __forceinline",
          "116: #else",
          "117: # define always_inline",
          "118: #endif",
          "126:    int always_inline name##_()",
          "",
          "[Added Lines]",
          "111:    int name##_()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     Parser* self = container_of(p_, Parser, parser_);               \\",
          "132:     return self->name##_(at, length);                               \\",
          "133:   }                                                                 \\",
          "137: static inline Persistent<String>",
          "",
          "[Removed Lines]",
          "134:   int always_inline name##_(const char* at, size_t length)",
          "",
          "[Added Lines]",
          "119:   int name##_(const char* at, size_t length)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:   }",
          "182:   void Reset() {",
          "183:     if (on_heap_) {",
          "184:       delete[] str_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   void Save() {",
          "171:     if (!on_heap_ && size_ > 0) {",
          "172:       char* s = new char[size_];",
          "173:       memcpy(s, str_, size_);",
          "174:       str_ = s;",
          "175:       on_heap_ = true;",
          "176:     }",
          "177:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:   HTTP_CB(on_message_begin) {",
          "241:     url_.Reset();",
          "242:     return 0;",
          "243:   }",
          "",
          "[Removed Lines]",
          "240:     num_fields_ = num_values_ = -1;",
          "",
          "[Added Lines]",
          "238:     num_fields_ = num_values_ = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:   HTTP_DATA_CB(on_header_field) {",
          "253:     if (num_fields_ == num_values_) {",
          "256:         Flush();",
          "259:       }",
          "261:     }",
          "263:     assert(num_fields_ < (int)ARRAY_SIZE(fields_));",
          "264:     assert(num_fields_ == num_values_ + 1);",
          "268:     return 0;",
          "269:   }",
          "",
          "[Removed Lines]",
          "255:       if (++num_fields_ == ARRAY_SIZE(fields_)) {",
          "257:         num_fields_ = 0;",
          "258:         num_values_ = -1;",
          "260:       fields_[num_fields_].Reset();",
          "266:     fields_[num_fields_].Update(at, length);",
          "",
          "[Added Lines]",
          "253:       num_fields_++;",
          "254:       if (num_fields_ == ARRAY_SIZE(fields_)) {",
          "257:         num_fields_ = 1;",
          "258:         num_values_ = 0;",
          "260:       fields_[num_fields_ - 1].Reset();",
          "266:     fields_[num_fields_ - 1].Update(at, length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272:   HTTP_DATA_CB(on_header_value) {",
          "273:     if (num_values_ != num_fields_) {",
          "276:     }",
          "278:     assert(num_values_ < (int)ARRAY_SIZE(values_));",
          "279:     assert(num_values_ == num_fields_);",
          "283:     return 0;",
          "284:   }",
          "",
          "[Removed Lines]",
          "275:       values_[++num_values_].Reset();",
          "281:     values_[num_values_].Update(at, length);",
          "",
          "[Added Lines]",
          "275:       num_values_++;",
          "276:       values_[num_values_ - 1].Reset();",
          "282:     values_[num_values_ - 1].Update(at, length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "302:       if (parser_.type == HTTP_REQUEST)",
          "303:         message_info->Set(url_sym, url_.ToString());",
          "304:     }",
          "308:     if (parser_.type == HTTP_REQUEST) {",
          "",
          "[Removed Lines]",
          "305:     num_fields_ = num_values_ = -1;",
          "",
          "[Added Lines]",
          "306:     num_fields_ = num_values_ = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "364:   HTTP_CB(on_message_complete) {",
          "365:     HandleScope scope;",
          "368:       Flush(); // Flush trailing HTTP headers.",
          "370:     Local<Value> cb = handle_->Get(on_message_complete_sym);",
          "",
          "[Removed Lines]",
          "367:     if (num_fields_ != -1)",
          "",
          "[Added Lines]",
          "368:     if (num_fields_)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "401:   }",
          "405:   static Handle<Value> Execute(const Arguments& args) {",
          "406:     HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:   void Save() {",
          "406:     url_.Save();",
          "408:     for (int i = 0; i < num_fields_; i++) {",
          "409:       fields_[i].Save();",
          "410:     }",
          "412:     for (int i = 0; i < num_values_; i++) {",
          "413:       values_[i].Save();",
          "414:     }",
          "415:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "447:     size_t nparsed =",
          "448:       http_parser_execute(&parser->parser_, &settings, buffer_data + off, len);",
          "451:     assert(current_buffer);",
          "452:     current_buffer = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:     parser->Save();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "515:   Local<Array> CreateHeaders() {",
          "521:       headers->Set(2 * i, fields_[i].ToString());",
          "522:       headers->Set(2 * i + 1, values_[i].ToString());",
          "523:     }",
          "",
          "[Removed Lines]",
          "518:     Local<Array> headers = Array::New(2 * (num_values_ + 1));",
          "520:     for (int i = 0; i < num_values_ + 1; ++i) {",
          "",
          "[Added Lines]",
          "534:     Local<Array> headers = Array::New(2 * num_values_);",
          "536:     for (int i = 0; i < num_values_; ++i) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "553:   void Init(enum http_parser_type type) {",
          "554:     http_parser_init(&parser_, type);",
          "555:     url_.Reset();",
          "558:     have_flushed_ = false;",
          "559:     got_exception_ = false;",
          "560:   }",
          "",
          "[Removed Lines]",
          "556:     num_fields_ = -1;",
          "557:     num_values_ = -1;",
          "",
          "[Added Lines]",
          "572:     num_fields_ = 0;",
          "573:     num_values_ = 0;",
          "",
          "---------------"
        ],
        "test/simple/test-http-parser.js||test/simple/test-http-parser.js": [
          "File: test/simple/test-http-parser.js -> test/simple/test-http-parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "382: (function() {",
          "383:   var request = Buffer(",
          "385:     'Content-Type: text/plain' + CRLF +",
          "386:     'Transfer-Encoding: chunked' + CRLF +",
          "387:     CRLF +",
          "",
          "[Removed Lines]",
          "384:     'POST /it HTTP/1.1' + CRLF +",
          "",
          "[Added Lines]",
          "384:     'POST /helpme HTTP/1.1' + CRLF +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:     parser.onHeadersComplete = mustCall(function(info) {",
          "405:       assert.equal(info.method, 'POST');",
          "407:       assert.equal(info.versionMajor, 1);",
          "408:       assert.equal(info.versionMinor, 1);",
          "409:     });",
          "",
          "[Removed Lines]",
          "406:       assert.equal(info.url || parser.url, '/it');",
          "",
          "[Added Lines]",
          "406:       assert.equal(info.url || parser.url, '/helpme');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:   for (var i = 1; i < request.length - 1; ++i) {",
          "426:     var a = request.slice(0, i);",
          "427:     var b = request.slice(i);",
          "428:     test(a, b);",
          "429:   }",
          "430: })();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     console.error(\"request.slice(0, \" + i + \") = \", JSON.stringify(a.toString()));",
          "429:     console.error(\"request.slice(\" + i + \") = \", JSON.stringify(b.toString()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f932c52b0c04154f0e856da3b177d849b132c64",
      "candidate_info": {
        "commit_hash": "3f932c52b0c04154f0e856da3b177d849b132c64",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3f932c52b0c04154f0e856da3b177d849b132c64",
        "files": [
          "tools/msvs/msi/product.wxs"
        ],
        "message": "windows msi: don't use .exe file as icon\n\nThis makes the installer nice and small again.",
        "before_after_code_files": [
          "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs": [
          "File: tools/msvs/msi/product.wxs -> tools/msvs/msi/product.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     <MajorUpgrade AllowSameVersionUpgrades=\"yes\"",
          "24:                   DowngradeErrorMessage=\"A later version of node.js is already installed. Setup will now exit.\" />",
          "27:     <Property Id=\"ARPPRODUCTICON\" Value=\"node.exe\" />",
          "29:     <Directory Id=\"TARGETDIR\" Name=\"SourceDir\">",
          "",
          "[Removed Lines]",
          "26:     <Icon Id=\"node.exe\" SourceFile=\"$(var.SourceDir)\\node.exe\"/>",
          "",
          "[Added Lines]",
          "26:     <Icon Id=\"node.exe\" SourceFile=\"$(var.RepoDir)\\src\\res\\node.ico\"/>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e57aafbb1c4ad9c8157bfe7f5718e867861492e",
      "candidate_info": {
        "commit_hash": "0e57aafbb1c4ad9c8157bfe7f5718e867861492e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0e57aafbb1c4ad9c8157bfe7f5718e867861492e",
        "files": [
          "lib/child_process.js",
          "lib/net.js",
          "src/pipe_wrap.cc",
          "src/stream_wrap.cc",
          "src/stream_wrap.h",
          "src/tcp_wrap.cc",
          "src/tty_wrap.cc",
          "test/simple/test-tcp-wrap-listen.js"
        ],
        "message": "Optimize writing strings with Socket.write",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "lib/net.js||linet.js",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/stream_wrap.h||src/stream_wrap.h",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "test/simple/test-tcp-wrap-listen.js||test/simple/test-tcp-wrap-listen.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:       return false;",
          "113:     }",
          "118:     net._setSimultaneousAccepts(sendHandle);",
          "122:     if (!writeReq) {",
          "123:       var er = errnoException(errno, 'write', 'cannot write to IPC channel.');",
          "",
          "[Removed Lines]",
          "115:     var buffer = Buffer(JSON.stringify(message) + '\\n');",
          "120:     var writeReq = channel.write(buffer, 0, buffer.length, sendHandle);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:     }",
          "478:   }",
          "481:   if (typeof data === 'string') {",
          "483:   } else if (!Buffer.isBuffer(data)) {",
          "484:     throw new TypeError('First argument must be a buffer or a string.');",
          "485:   }",
          "",
          "[Removed Lines]",
          "482:     data = new Buffer(data, encoding);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:     return false;",
          "510:   }",
          "515:   if (!writeReq || typeof writeReq !== 'object') {",
          "516:     this._destroy(errnoException(errno, 'write'), cb);",
          "",
          "[Removed Lines]",
          "513:   var writeReq = this._handle.write(data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "525: };",
          "529:   var self = handle.socket;",
          "",
          "[Removed Lines]",
          "528: function afterWrite(status, handle, req, buffer) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "102:   NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "104:   NODE_SET_PROTOTYPE_METHOD(t, \"shutdown\", StreamWrap::Shutdown);",
          "106:   NODE_SET_PROTOTYPE_METHOD(t, \"bind\", Bind);",
          "107:   NODE_SET_PROTOTYPE_METHOD(t, \"listen\", Listen);",
          "108:   NODE_SET_PROTOTYPE_METHOD(t, \"connect\", Connect);",
          "",
          "[Removed Lines]",
          "103:   NODE_SET_PROTOTYPE_METHOD(t, \"write\", StreamWrap::Write);",
          "",
          "[Added Lines]",
          "105:   NODE_SET_PROTOTYPE_METHOD(t, \"writeBuffer\", StreamWrap::WriteBuffer);",
          "106:   NODE_SET_PROTOTYPE_METHOD(t, \"writeAsciiString\", StreamWrap::WriteAsciiString);",
          "107:   NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf8String\", StreamWrap::WriteUtf8String);",
          "108:   NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf16String\", StreamWrap::WriteUcs2String);",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: using v8::Context;",
          "49: using v8::Arguments;",
          "50: using v8::Integer;",
          "53: #define UNWRAP \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: using v8::Number;",
          "52: using v8::Exception;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: typedef class ReqWrap<uv_shutdown_t> ShutdownWrap;",
          "70: static Persistent<String> buffer_sym;",
          "71: static Persistent<String> write_queue_size_sym;",
          "72: static Persistent<String> onread_sym;",
          "73: static Persistent<String> oncomplete_sym;",
          "",
          "[Removed Lines]",
          "67: typedef class ReqWrap<uv_write_t> WriteWrap;",
          "",
          "[Added Lines]",
          "70: class WriteWrap: public ReqWrap<uv_write_t> {",
          "71:  public:",
          "72:   void* operator new(size_t size, char* storage) { return storage; }",
          "76:   void operator delete(void* ptr, char* storage) { assert(0); }",
          "78:  protected:",
          "81:   void* operator new (size_t size) { assert(0); };",
          "82:   void operator delete(void* ptr) { assert(0); };",
          "83: };",
          "87: static Persistent<String> bytes_sym;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:   HandleWrap::Initialize(target);",
          "86:   buffer_sym = NODE_PSYMBOL(\"buffer\");",
          "87:   write_queue_size_sym = NODE_PSYMBOL(\"writeQueueSize\");",
          "88:   onread_sym = NODE_PSYMBOL(\"onread\");",
          "89:   oncomplete_sym = NODE_PSYMBOL(\"oncomplete\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:   bytes_sym = NODE_PSYMBOL(\"bytes\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226: }",
          "230:   HandleScope scope;",
          "232:   UNWRAP",
          "",
          "[Removed Lines]",
          "229: Handle<Value> StreamWrap::Write(const Arguments& args) {",
          "",
          "[Added Lines]",
          "247: Handle<Value> StreamWrap::WriteBuffer(const Arguments& args) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "248:     length = args[2]->IntegerValue();",
          "249:   }",
          "253:   req_wrap->object_->SetHiddenValue(buffer_sym, buffer_obj);",
          "",
          "[Removed Lines]",
          "251:   WriteWrap* req_wrap = new WriteWrap();",
          "",
          "[Added Lines]",
          "269:   if (length > INT_MAX) {",
          "270:     uv_err_t err;",
          "271:     err.code = UV_ENOBUFS;",
          "272:     SetErrno(err);",
          "273:     return scope.Close(v8::Null());",
          "274:   }",
          "276:   char* storage = new char[sizeof(WriteWrap)];",
          "277:   WriteWrap* req_wrap = new (storage) WriteWrap();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "280:   }",
          "282:   req_wrap->Dispatched();",
          "284:   wrap->UpdateWriteQueueSize();",
          "286:   if (r) {",
          "287:     SetErrno(uv_last_error(uv_default_loop()));",
          "289:     return scope.Close(v8::Null());",
          "290:   } else {",
          "291:     return scope.Close(req_wrap->object_);",
          "",
          "[Removed Lines]",
          "288:     delete req_wrap;",
          "",
          "[Added Lines]",
          "309:   req_wrap->object_->Set(bytes_sym, Number::New((uint32_t) length));",
          "315:     req_wrap->~WriteWrap();",
          "316:     delete[] storage;",
          "324: enum WriteEncoding {",
          "325:   kAscii,",
          "326:   kUtf8,",
          "327:   kUcs2",
          "328: };",
          "330: template <WriteEncoding encoding>",
          "331: Handle<Value> StreamWrap::WriteStringImpl(const Arguments& args) {",
          "332:   HandleScope scope;",
          "333:   int r;",
          "335:   UNWRAP",
          "337:   if (args.Length() < 1)",
          "338:     return ThrowTypeError(\"Not enough arguments\");",
          "340:   Local<String> string = args[0]->ToString();",
          "343:   size_t storage_size;",
          "344:   switch (encoding) {",
          "345:     case kAscii:",
          "346:       storage_size = string->Length();",
          "347:       break;",
          "349:     case kUtf8:",
          "350:       if (!(string->MayContainNonAscii())) {",
          "353:         storage_size = string->Length();",
          "354:       } else if (string->Length() < 65536) {",
          "359:         storage_size = 3 * string->Length();",
          "360:       } else {",
          "363:         storage_size = string->Utf8Length();",
          "364:       }",
          "365:       break;",
          "367:     case kUcs2:",
          "368:       storage_size += string->Length() * sizeof(uint16_t);",
          "369:       break;",
          "371:     default:",
          "373:       assert(0);",
          "374:   }",
          "376:   if (storage_size > INT_MAX) {",
          "377:     uv_err_t err;",
          "378:     err.code = UV_ENOBUFS;",
          "379:     SetErrno(err);",
          "380:     return scope.Close(v8::Null());",
          "381:   }",
          "383:   char* storage = new char[sizeof(WriteWrap) + storage_size + 15];",
          "384:   WriteWrap* req_wrap = new (storage) WriteWrap();",
          "386:   char* data = reinterpret_cast<char*>(ROUND_UP(",
          "387:       reinterpret_cast<uintptr_t>(storage) + sizeof(WriteWrap), 16));",
          "388:   size_t data_size;",
          "389:   switch (encoding) {",
          "390:   case kAscii:",
          "391:       data_size = string->WriteAscii(data, 0, -1,",
          "392:           String::NO_NULL_TERMINATION | String::HINT_MANY_WRITES_EXPECTED);",
          "393:       break;",
          "395:     case kUtf8:",
          "396:       data_size = string->WriteUtf8(data, -1, NULL,",
          "397:           String::NO_NULL_TERMINATION | String::HINT_MANY_WRITES_EXPECTED);",
          "398:       break;",
          "400:     case kUcs2: {",
          "401:       int chars_copied = string->Write((uint16_t*) data, 0, -1,",
          "402:           String::NO_NULL_TERMINATION | String::HINT_MANY_WRITES_EXPECTED);",
          "403:       data_size = chars_copied * sizeof(uint16_t);",
          "404:       break;",
          "405:     }",
          "407:     default:",
          "409:       assert(0);",
          "410:   }",
          "412:   assert(data_size <= storage_size);",
          "414:   uv_buf_t buf;",
          "415:   buf.base = data;",
          "416:   buf.len = data_size;",
          "418:   bool ipc_pipe = wrap->stream_->type == UV_NAMED_PIPE &&",
          "419:                   ((uv_pipe_t*)wrap->stream_)->ipc;",
          "421:   if (!ipc_pipe) {",
          "422:     r = uv_write(&req_wrap->req_,",
          "423:                  wrap->stream_,",
          "424:                  &buf,",
          "425:                  1,",
          "426:                  StreamWrap::AfterWrite);",
          "428:   } else {",
          "429:     uv_stream_t* send_stream = NULL;",
          "431:     if (args[1]->IsObject()) {",
          "432:       Local<Object> send_stream_obj = args[1]->ToObject();",
          "433:       assert(send_stream_obj->InternalFieldCount() > 0);",
          "434:       StreamWrap* send_stream_wrap = static_cast<StreamWrap*>(",
          "435:           send_stream_obj->GetPointerFromInternalField(0));",
          "436:       send_stream = send_stream_wrap->GetStream();",
          "437:     }",
          "439:     r = uv_write2(&req_wrap->req_,",
          "440:                   wrap->stream_,",
          "441:                   &buf,",
          "442:                   1,",
          "443:                   send_stream,",
          "444:                   StreamWrap::AfterWrite);",
          "445:   }",
          "447:   req_wrap->Dispatched();",
          "448:   req_wrap->object_->Set(bytes_sym, Number::New((uint32_t) data_size));",
          "450:   wrap->UpdateWriteQueueSize();",
          "452:   if (r) {",
          "453:     SetErrno(uv_last_error(uv_default_loop()));",
          "454:     req_wrap->~WriteWrap();",
          "455:     delete[] storage;",
          "456:     return scope.Close(v8::Null());",
          "457:   } else {",
          "458:     return scope.Close(req_wrap->object_);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "293: }",
          "296: void StreamWrap::AfterWrite(uv_write_t* req, int status) {",
          "297:   WriteWrap* req_wrap = (WriteWrap*) req->data;",
          "298:   StreamWrap* wrap = (StreamWrap*) req->handle->data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460: }",
          "463: Handle<Value> StreamWrap::WriteAsciiString(const Arguments& args) {",
          "464:   return WriteStringImpl<kAscii>(args);",
          "465: }",
          "468: Handle<Value> StreamWrap::WriteUtf8String(const Arguments& args) {",
          "469:   return WriteStringImpl<kUtf8>(args);",
          "470: }",
          "473: Handle<Value> StreamWrap::WriteUcs2String(const Arguments& args) {",
          "474:   return WriteStringImpl<kUcs2>(args);",
          "475: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "310:   wrap->UpdateWriteQueueSize();",
          "313:     Integer::New(status),",
          "314:     Local<Value>::New(wrap->object_),",
          "317:   };",
          "319:   MakeCallback(req_wrap->object_, oncomplete_sym, ARRAY_SIZE(argv), argv);",
          "322: }",
          "",
          "[Removed Lines]",
          "312:   Local<Value> argv[4] = {",
          "315:     Local<Value>::New(req_wrap->object_),",
          "316:     req_wrap->object_->GetHiddenValue(buffer_sym),",
          "321:   delete req_wrap;",
          "",
          "[Added Lines]",
          "494:   Local<Value> argv[] = {",
          "497:     Local<Value>::New(req_wrap->object_)",
          "502:   req_wrap->~WriteWrap();",
          "503:   delete[] reinterpret_cast<char*>(req_wrap);",
          "",
          "---------------"
        ],
        "src/stream_wrap.h||src/stream_wrap.h": [
          "File: src/stream_wrap.h -> src/stream_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   static void Initialize(v8::Handle<v8::Object> target);",
          "39:   static v8::Handle<v8::Value> ReadStart(const v8::Arguments& args);",
          "40:   static v8::Handle<v8::Value> ReadStop(const v8::Arguments& args);",
          "41:   static v8::Handle<v8::Value> Shutdown(const v8::Arguments& args);",
          "43:  protected:",
          "44:   StreamWrap(v8::Handle<v8::Object> object, uv_stream_t* stream);",
          "45:   virtual ~StreamWrap() { }",
          "",
          "[Removed Lines]",
          "38:   static v8::Handle<v8::Value> Write(const v8::Arguments& args);",
          "",
          "[Added Lines]",
          "42:   static v8::Handle<v8::Value> WriteBuffer(const v8::Arguments& args);",
          "43:   static v8::Handle<v8::Value> WriteAsciiString(const v8::Arguments& args);",
          "44:   static v8::Handle<v8::Value> WriteUtf8String(const v8::Arguments& args);",
          "45:   static v8::Handle<v8::Value> WriteUcs2String(const v8::Arguments& args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   static void OnReadCommon(uv_stream_t* handle, ssize_t nread,",
          "62:       uv_buf_t buf, uv_handle_type pending);",
          "64:   size_t slab_offset_;",
          "65:   uv_stream_t* stream_;",
          "66: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   template <enum WriteEncoding encoding>",
          "69:   static v8::Handle<v8::Value> WriteStringImpl(const v8::Arguments& args);",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "112:   NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "114:   NODE_SET_PROTOTYPE_METHOD(t, \"shutdown\", StreamWrap::Shutdown);",
          "116:   NODE_SET_PROTOTYPE_METHOD(t, \"bind\", Bind);",
          "117:   NODE_SET_PROTOTYPE_METHOD(t, \"listen\", Listen);",
          "118:   NODE_SET_PROTOTYPE_METHOD(t, \"connect\", Connect);",
          "",
          "[Removed Lines]",
          "113:   NODE_SET_PROTOTYPE_METHOD(t, \"write\", StreamWrap::Write);",
          "",
          "[Added Lines]",
          "115:   NODE_SET_PROTOTYPE_METHOD(t, \"writeBuffer\", StreamWrap::WriteBuffer);",
          "116:   NODE_SET_PROTOTYPE_METHOD(t, \"writeAsciiString\", StreamWrap::WriteAsciiString);",
          "117:   NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf8String\", StreamWrap::WriteUtf8String);",
          "118:   NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf16String\", StreamWrap::WriteUcs2String);",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "75:     NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "78:     NODE_SET_PROTOTYPE_METHOD(t, \"getWindowSize\", TTYWrap::GetWindowSize);",
          "79:     NODE_SET_PROTOTYPE_METHOD(t, \"setRawMode\", SetRawMode);",
          "",
          "[Removed Lines]",
          "76:     NODE_SET_PROTOTYPE_METHOD(t, \"write\", StreamWrap::Write);",
          "",
          "[Added Lines]",
          "77:     NODE_SET_PROTOTYPE_METHOD(t, \"writeBuffer\", StreamWrap::WriteBuffer);",
          "78:     NODE_SET_PROTOTYPE_METHOD(t, \"writeAsciiString\", StreamWrap::WriteAsciiString);",
          "79:     NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf8String\", StreamWrap::WriteUtf8String);",
          "80:     NODE_SET_PROTOTYPE_METHOD(t, \"writeUtf16String\", StreamWrap::WriteUcs2String);",
          "",
          "---------------"
        ],
        "test/simple/test-tcp-wrap-listen.js||test/simple/test-tcp-wrap-listen.js": [
          "File: test/simple/test-tcp-wrap-listen.js -> test/simple/test-tcp-wrap-listen.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:       assert.equal(0, client.writeQueueSize);",
          "59:       client.pendingWrites.push(req);",
          "61:       console.log('client.writeQueueSize: ' + client.writeQueueSize);",
          "63:       assert.equal(0, client.writeQueueSize);",
          "66:         assert.equal(req, client.pendingWrites.shift());",
          "69:         assert.equal(0, status);",
          "70:         assert.equal(client, client_);",
          "71:         assert.equal(req, req_);",
          "74:         console.log('client.writeQueueSize: ' + client.writeQueueSize);",
          "75:         assert.equal(0, client.writeQueueSize);",
          "",
          "[Removed Lines]",
          "58:       var req = client.write(buffer, offset, length);",
          "65:       req.oncomplete = function(status, client_, req_, buffer_) {",
          "72:         assert.equal(buffer, buffer_);",
          "",
          "[Added Lines]",
          "58:       var req = client.writeBuffer(buffer.slice(offset, offset + length));",
          "65:       req.oncomplete = function(status, client_, req_) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19fd5301bf45b7055d090b6132aef7c833f29248",
      "candidate_info": {
        "commit_hash": "19fd5301bf45b7055d090b6132aef7c833f29248",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/19fd5301bf45b7055d090b6132aef7c833f29248",
        "files": [
          "lib/child_process.js",
          "lib/cluster.js",
          "src/node.cc"
        ],
        "message": "Expose original argv as process.execArgv for cluster and child_process.fork()",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "lib/cluster.js||licluster.js",
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: exports.fork = function(modulePath /*, args, options*/) {",
          "169:   if (Array.isArray(arguments[1])) {",
          "170:     args = arguments[1];",
          "171:     options = arguments[2] || {};",
          "",
          "[Removed Lines]",
          "168:   var options, args;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:     options = arguments[1] || {};",
          "175:   }",
          "182:   if (options.stdinStream) {",
          "",
          "[Removed Lines]",
          "178:   args = args.slice(0);",
          "179:   args.unshift(modulePath);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   settings = cluster.settings = {",
          "93:     exec: options.exec || process.argv[1],",
          "94:     args: options.args || process.argv.slice(2),",
          "95:     silent: options.silent || false",
          "96:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:     this.process = fork(settings.exec, settings.args, {",
          "276:       'env': envCopy,",
          "278:     });",
          "279:   } else {",
          "280:     this.process = process;",
          "",
          "[Removed Lines]",
          "277:       'silent': settings.silent",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2127:   process->Set(String::NewSymbol(\"argv\"), arguments);",
          "2130:   Local<ObjectTemplate> envTemplate = ObjectTemplate::New();",
          "2131:   envTemplate->SetNamedPropertyHandler(EnvGetter,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:   Local<Array> execArgv = Array::New(option_end_index - 1);",
          "2131:   for (j = 1, i = 0; j < option_end_index; j++, i++) {",
          "2132:     execArgv->Set(Integer::New(i), String::New(argv[j]));",
          "2133:   }",
          "2135:   process->Set(String::NewSymbol(\"execArgv\"), execArgv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2713:   }",
          "2714: }",
          "2717: int Start(int argc, char *argv[]) {",
          "2721:   V8::Initialize();",
          "2722:   Persistent<Context> context;",
          "",
          "[Removed Lines]",
          "2719:   argv = Init(argc, argv);",
          "",
          "[Added Lines]",
          "2725: static char **copy_argv(int argc, char **argv) {",
          "2726:   size_t strlen_sum;",
          "2727:   char **argv_copy;",
          "2728:   char *argv_data;",
          "2729:   size_t len;",
          "2730:   int i;",
          "2732:   strlen_sum = 0;",
          "2733:   for(i = 0; i < argc; i++) {",
          "2734:     strlen_sum += strlen(argv[i]) + 1;",
          "2735:   }",
          "2737:   argv_copy = (char **) malloc(sizeof(char *) * (argc + 1) + strlen_sum);",
          "2738:   if (!argv_copy) {",
          "2739:     return NULL;",
          "2740:   }",
          "2742:   argv_data = (char *) argv_copy + sizeof(char *) * (argc + 1);",
          "2744:   for(i = 0; i < argc; i++) {",
          "2745:     argv_copy[i] = argv_data;",
          "2746:     len = strlen(argv[i]) + 1;",
          "2747:     memcpy(argv_data, argv[i], len);",
          "2748:     argv_data += len;",
          "2749:   }",
          "2751:   argv_copy[argc] = NULL;",
          "2753:   return argv_copy;",
          "2754: }",
          "2759:   char **argv_copy = copy_argv(argc, argv);",
          "2763:   Init(argc, argv_copy);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2753:   V8::Dispose();",
          "2754: #endif  // NDEBUG",
          "2756:   return 0;",
          "2757: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2802:   free(argv_copy);",
          "",
          "---------------"
        ]
      }
    }
  ]
}