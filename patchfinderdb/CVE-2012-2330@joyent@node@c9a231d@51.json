{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa5961a445acbd2b533ef870eb19733be7b7ede5",
      "candidate_info": {
        "commit_hash": "aa5961a445acbd2b533ef870eb19733be7b7ede5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/aa5961a445acbd2b533ef870eb19733be7b7ede5",
        "files": [
          "tools/gyp/pylib/gyp/generator/make.py"
        ],
        "message": "gyp: fix 'argument list too long' build error",
        "before_after_code_files": [
          "tools/gyp/pylib/gyp/generator/make.py||tools/gyp/pyligyp/generator/make.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/gyp/pylib/gyp/generator/make.py||tools/gyp/pyligyp/generator/make.py": [
          "File: tools/gyp/pylib/gyp/generator/make.py -> tools/gyp/pyligyp/generator/make.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "525: ifneq ($(d_files),)",
          "526:   # Rather than include each individual .d file, concatenate them into a",
          "527:   # single file which make is able to load faster.  We split this into",
          "529:   # command line.",
          "531: %(generate_all_deps)s",
          "532:   # make looks for ways to re-generate included makefiles, but in our case, we",
          "533:   # don't have a direct way. Explicitly telling make that it has nothing to do",
          "",
          "[Removed Lines]",
          "528:   # commands that take 1000 files at a time to avoid overflowing the",
          "530:   $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b73ec84ce1e867bcda9965ecf2a9e588625ee366",
      "candidate_info": {
        "commit_hash": "b73ec84ce1e867bcda9965ecf2a9e588625ee366",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b73ec84ce1e867bcda9965ecf2a9e588625ee366",
        "files": [
          "test/simple/test-process-argv-0.js"
        ],
        "message": "test: test for `process.argv[0]` correctness\n\njoyent/node@b0c15412270f32e00c268c578f07a1ed032323f5 introduced a\nregression causing `process.argv[0]` to be invalid in node processes\nspawned from `PATH` (without explicit path to executable file - for\nexample when using global node installation).\n\nInstead of finding a correct path to the executable, `process.cwd()`\nwould be prepended to `process.argv[0]`.",
        "before_after_code_files": [
          "test/simple/test-process-argv-0.js||test/simple/test-process-argv-0.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-process-argv-0.js||test/simple/test-process-argv-0.js": [
          "File: test/simple/test-process-argv-0.js -> test/simple/test-process-argv-0.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: var util = require('util');",
          "22: var path = require('path');",
          "23: var assert = require('assert');",
          "24: var spawn = require('child_process').spawn;",
          "25: var common = require('../common');",
          "27: if (process.argv[2] !== \"child\") {",
          "28:   var child = spawn('node', [__filename, \"child\"], {",
          "29:     cwd: common.tmpDir,",
          "30:     env: util._extend({ PATH: path.dirname(process.execPath) }, process.env)",
          "31:   });",
          "33:   var childArgv0 = '';",
          "34:   child.stdout.on('data', function (chunk) {",
          "35:     childArgv0 += chunk;",
          "36:   });",
          "37:   child.on('exit', function () {",
          "38:     assert.equal(childArgv0, process.execPath);",
          "39:   });",
          "40: }",
          "41: else {",
          "42:   process.stdout.write(process.argv[0]);",
          "43: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "304f1fcf86f38552d483eb69f6ccef331e691753",
      "candidate_info": {
        "commit_hash": "304f1fcf86f38552d483eb69f6ccef331e691753",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/304f1fcf86f38552d483eb69f6ccef331e691753",
        "files": [
          "doc/api/tty.markdown",
          "lib/tty.js"
        ],
        "message": "tty: clarify that tty.setRawMode() has moved to process.stdin\n\nTechnically saying `tty.ReadStream#setRawMode()` is correct,\nbut since a typical use cannot instantiate `tty.ReadStream` themselves,\nand 99% of the time the only instance is `process.stdin`,\nthen a little clarification seemed necessary.",
        "before_after_code_files": [
          "lib/tty.js||litty.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   }",
          "38:   process.stdin.setRawMode(flag);",
          "39: };",
          "43: function ReadStream(fd) {",
          "",
          "[Removed Lines]",
          "40: module.deprecate('setRawMode', 'Use `tty.ReadStream#setRawMode` instead.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41062e71a7fb5f6447d521f9cd9e6a34a2ea4bcc",
      "candidate_info": {
        "commit_hash": "41062e71a7fb5f6447d521f9cd9e6a34a2ea4bcc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/41062e71a7fb5f6447d521f9cd9e6a34a2ea4bcc",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "test/simple/test-isolates.js"
        ],
        "message": "Join all threads at end of main thread\n\nRequire reorganizing the isolates somewhat.\n\nAdd a very simple test.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1849: }",
          "1891: static void RunIsolate(void* arg) {",
          "1897:   isolate->Dispose();",
          "1900:   delete isolate;",
          "1901: }",
          "",
          "[Removed Lines]",
          "1852: struct ThreadInfo {",
          "1853:   uv_thread_t thread_;",
          "1854:   char** argv_;",
          "1855:   int argc_;",
          "1857:   ThreadInfo(int argc, char** argv) {",
          "1858:     argc_ = argc;",
          "1859:     argv_ = new char*[argc_ + 1];",
          "1861:     for (int i = 0; i < argc_; ++i) {",
          "1862:       size_t size = 1 + strlen(argv[i]);",
          "1863:       argv_[i] = new char[size];",
          "1864:       memcpy(argv_[i], argv[i], size);",
          "1865:     }",
          "1866:     argv_[argc_] = NULL;",
          "1867:   }",
          "1869:   ThreadInfo(Handle<Array> args) {",
          "1870:     argc_ = args->Length();",
          "1871:     argv_ = new char*[argc_ + 1];",
          "1873:     for (int i = 0; i < argc_; ++i) {",
          "1874:       String::Utf8Value str(args->Get(i));",
          "1875:       size_t size = 1 + strlen(*str);",
          "1876:       argv_[i] = new char[size];",
          "1877:       memcpy(argv_[i], *str, size);",
          "1878:     }",
          "1879:     argv_[argc_] = NULL;",
          "1880:   }",
          "1882:   ~ThreadInfo() {",
          "1883:     for (int i = 0; i < argc_; ++i) {",
          "1884:       delete[] argv_[i];",
          "1885:     }",
          "1886:     delete argv_;",
          "1887:   }",
          "1888: };",
          "1892:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(arg);",
          "1894:   Isolate* isolate = Isolate::New();",
          "1896:   StartThread(isolate, ti->argc_, ti->argv_);",
          "1899:   delete ti;",
          "",
          "[Added Lines]",
          "1853:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "1854:   isolate->Enter();",
          "1855:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1912:   Local<Array> argv = args[0].As<Array>();",
          "1913:   assert(argv->Length() >= 2);",
          "1919:     return Null();",
          "1920:   }",
          "",
          "[Removed Lines]",
          "1915:   ThreadInfo* ti = new ThreadInfo(argv);",
          "1917:   if (uv_thread_create(&ti->thread_, RunIsolate, ti)) {",
          "1918:     delete ti;",
          "",
          "[Added Lines]",
          "1874:   Isolate* isolate = new node::Isolate();",
          "1877:   isolate->argc_ = argv->Length();",
          "1878:   isolate->argv_ = new char*[isolate->argc_ + 1];",
          "1879:   for (int i = 0; i < isolate->argc_; ++i) {",
          "1880:     String::Utf8Value str(argv->Get(i));",
          "1881:     size_t size = 1 + strlen(*str);",
          "1882:     isolate->argv_[i] = new char[size];",
          "1883:     memcpy(isolate->argv_[i], *str, size);",
          "1884:   }",
          "1885:   isolate->argv_[isolate->argc_] = NULL;",
          "1887:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "1888:     delete isolate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1925:   Local<Object> obj = tpl->NewInstance();",
          "1926:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1929:   return scope.Close(obj);",
          "1930: }",
          "",
          "[Removed Lines]",
          "1927:   obj->SetPointerInInternalField(1, ti);",
          "",
          "[Added Lines]",
          "1897:   obj->SetPointerInInternalField(1, isolate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1945:   assert(obj->InternalFieldCount() == 2);",
          "1946:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1949:       obj->GetPointerFromInternalField(1));",
          "1952:     return False(); // error",
          "1953:   else",
          "1954:     return True();  // ok",
          "",
          "[Removed Lines]",
          "1948:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(",
          "1951:   if (uv_thread_join(&ti->thread_))",
          "",
          "[Added Lines]",
          "1918:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "1921:   if (uv_thread_join(&ti->tid_))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2700:                  char** argv) {",
          "2701:   HandleScope scope;",
          "2706:   uv_loop_t* loop = isolate->GetLoop();",
          "2707:   uv_prepare_init(loop, &prepare_tick_watcher);",
          "",
          "[Removed Lines]",
          "2703:   v8::Isolate::Scope isolate_scope(isolate->GetV8Isolate());",
          "2704:   v8::Context::Scope context_scope(isolate->GetV8Context());",
          "",
          "[Added Lines]",
          "2673:   assert(node::Isolate::GetCurrent() == isolate);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2787:   v8::V8::Initialize();",
          "2788:   v8::HandleScope handle_scope;",
          "2791:   node::Isolate::Initialize();",
          "2793:   StartThread(isolate, argc, argv);",
          "2794:   isolate->Dispose();",
          "2796: #ifndef NDEBUG",
          "2798:   V8::Dispose();",
          "",
          "[Removed Lines]",
          "2792:   Isolate* isolate = node::Isolate::New();",
          "",
          "[Added Lines]",
          "2760:   uv_thread_t tid = uv_thread_self();",
          "2764:   Isolate* isolate = new node::Isolate();",
          "2765:   isolate->tid_ = tid;",
          "2766:   isolate->Enter();",
          "2772:   node::Isolate::JoinAll();",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: }",
          "51: }",
          "56: }",
          "",
          "[Removed Lines]",
          "49: Isolate* Isolate::New() {",
          "50:   return new Isolate();",
          "54: int Isolate::Count() {",
          "55:   return isolate_count;",
          "",
          "[Added Lines]",
          "49: int Isolate::Count() {",
          "50:   return isolate_count;",
          "54: void Isolate::JoinAll() {",
          "55:   uv_mutex_lock(&list_lock);",
          "57:   while (ngx_queue_empty(&list_head) == false) {",
          "58:     ngx_queue_t* q = ngx_queue_head(&list_head);",
          "59:     assert(q);",
          "60:     Isolate* isolate = ngx_queue_data(q, Isolate, list_member_);",
          "61:     assert(isolate);",
          "64:     uv_mutex_unlock(&list_lock);",
          "66:     uv_thread_join(&isolate->tid_);",
          "69:     uv_mutex_lock(&list_lock);",
          "70:   }",
          "73:   uv_mutex_unlock(&list_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   uv_mutex_unlock(&list_lock);",
          "88:   assert(v8_isolate_->GetData() == NULL);",
          "89:   v8_isolate_->SetData(this);",
          "95: }",
          "",
          "[Removed Lines]",
          "82:   v8_isolate_ = v8::Isolate::GetCurrent();",
          "83:   if (v8_isolate_ == NULL) {",
          "84:     v8_isolate_ = v8::Isolate::New();",
          "85:     v8_isolate_->Enter();",
          "86:   }",
          "91:   v8_context_ = v8::Context::New();",
          "92:   v8_context_->Enter();",
          "94:   globals_init(&globals_);",
          "",
          "[Added Lines]",
          "100:   v8_isolate_ = v8::Isolate::New();",
          "104:   globals_init_ = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: }",
          "115: void Isolate::Dispose() {",
          "116:   uv_mutex_lock(&list_lock);",
          "118:   struct AtExitCallbackInfo* it;",
          "119:   ngx_queue_t* q;",
          "130:   assert(v8_context_->InContext());",
          "131:   v8_context_->Exit();",
          "",
          "[Removed Lines]",
          "121:   NODE_ISOLATE_CHECK(this);",
          "123:   ngx_queue_foreach(q, &at_exit_callbacks_) {",
          "124:     it = ngx_queue_data(q, struct AtExitCallbackInfo, at_exit_callbacks_);",
          "125:     it->callback_(it->arg_);",
          "126:     delete it;",
          "127:   }",
          "128:   ngx_queue_init(&at_exit_callbacks_);",
          "",
          "[Added Lines]",
          "125: void Isolate::Enter() {",
          "126:   v8_isolate_->Enter();",
          "128:   if (v8_context_.IsEmpty()) {",
          "129:     v8_context_ = v8::Context::New();",
          "130:   }",
          "131:   v8_context_->Enter();",
          "133:   if (!globals_init_) {",
          "134:     globals_init_ = true;",
          "135:     globals_init(&globals_);",
          "136:   }",
          "138:   NODE_ISOLATE_CHECK(this);",
          "139: }",
          "145:   NODE_ISOLATE_CHECK(this);",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: class Isolate {",
          "45: public:",
          "47:   static void Initialize();",
          "48:   static int Count();",
          "50:   typedef void (*AtExitCallback)(void* arg);",
          "54:   static Isolate* GetCurrent() {",
          "55:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "",
          "[Removed Lines]",
          "52:   static Isolate* New();",
          "",
          "[Added Lines]",
          "46:   char** argv_;",
          "47:   int argc_;",
          "48:   uv_thread_t tid_;",
          "56:   static void JoinAll();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   void AtExit(AtExitCallback callback, void *arg);",
          "81:   struct globals* Globals();",
          "83:   unsigned int id_;",
          "86:   Isolate();",
          "88:   struct AtExitCallbackInfo {",
          "89:     ngx_queue_t at_exit_callbacks_;",
          "90:     AtExitCallback callback_;",
          "",
          "[Removed Lines]",
          "79:   void Dispose();",
          "85: private:",
          "",
          "[Added Lines]",
          "89:   ~Isolate() {",
          "90:     if (argv_) {",
          "91:       delete argv_;",
          "92:     }",
          "93:   }",
          "95:   void Enter();",
          "98:   void Dispose();",
          "100: private:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   struct globals globals_;",
          "104: };",
          "106: } // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:   bool globals_init_;",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: console.log(\"count: %d\", process._countIsolate());",
          "3: if (process.tid === 1) {",
          "4:   var isolate = process._newIsolate(process.argv);",
          "6:   console.error(\"master\");",
          "7:   console.log(\"count: %d\", process._countIsolate());",
          "8: } else {",
          "9:   console.error(\"FUCK YEAH!\");",
          "10:   console.log(\"count: %d\", process._countIsolate());",
          "11: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d70a4ae162e0f364c45ac2ad6d008bf99aae47f",
      "candidate_info": {
        "commit_hash": "6d70a4ae162e0f364c45ac2ad6d008bf99aae47f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6d70a4ae162e0f364c45ac2ad6d008bf99aae47f",
        "files": [
          "src/node.cc",
          "src/node.js"
        ],
        "message": "node: change the constructor name of process from EventEmitter to process",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2124:   Local<FunctionTemplate> process_template = FunctionTemplate::New();",
          "2129:   process->SetAccessor(String::New(\"title\"),",
          "2130:                        ProcessTitleGetter,",
          "",
          "[Removed Lines]",
          "2126:   process = Persistent<Object>::New(process_template->GetFunction()->NewInstance());",
          "",
          "[Added Lines]",
          "2126:   process_template->SetClassName(String::NewSymbol(\"process\"));",
          "2128:   process = Persistent<Object>::New(process_template->GetFunction()->NewInstance());",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   function startup() {",
          "31:     var EventEmitter = NativeModule.require('events').EventEmitter;",
          "33:     process.EventEmitter = EventEmitter; // process.EventEmitter is deprecated",
          "35:     startup.globalVariables();",
          "",
          "[Removed Lines]",
          "32:     process.__proto__ = EventEmitter.prototype;",
          "",
          "[Added Lines]",
          "33:     process.__proto__ = Object.create(EventEmitter.prototype, {",
          "34:       constructor: {",
          "35:         value: process.constructor",
          "36:       }",
          "37:     });",
          "",
          "---------------"
        ]
      }
    }
  ]
}