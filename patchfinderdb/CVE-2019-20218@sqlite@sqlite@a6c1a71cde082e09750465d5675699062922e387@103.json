{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
      "candidate_info": {
        "commit_hash": "3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Including the phrase EXCLUDE NO OTHERS in the frame-spec of a window function (which is the default setting for EXCLUDE) silently disables the xInverse optimization.  This is a feature, but we will keep it undocumented for now in case we later decide it is a bad idea.\n\nFossilOrigin-Name: 10aedce3dd2c0c9f0ee9e0aefd0b4d2c2eb17c4ca72003c4db9768ea5cdafcf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac98b23b34632fbc654a34a8b3d842ce65603e4c04d89c589b46f4d48a61152d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1717: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). { A = X; }",
          "1719: %type frame_exclude {u8}",
          "1721: frame_exclude(A) ::= CURRENT ROW. { A = TK_CURRENT; }",
          "1722: frame_exclude(A) ::= GROUP.       { A = TK_GROUP; }",
          "1723: frame_exclude(A) ::= TIES.        { A = TK_TIES; }",
          "",
          "[Removed Lines]",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = 0; }",
          "",
          "[Added Lines]",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = TK_NO; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
      "candidate_info": {
        "commit_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak introduced by [55c5d72a].\n\nFossilOrigin-Name: fbd681dce2905d8b8ad7948ba684b0b62d6c04be0f7a2992ee7d6836a99010de",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     }",
          "2570:   }",
          "2574:   assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2572:   if( rc!=SQLITE_OK ){",
          "2573:     sqlite3_free(aOut);",
          "2574:     p = aOut = 0;",
          "2575:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e717c4377c0116a5d36815fbc30f8b8803f14770d30be361feb27cc5b5b537b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
      "candidate_info": {
        "commit_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d92571d65393ae87f01f533eee2a6075b122efc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/check.test",
          "test/quote.test"
        ],
        "message": "Disallow string constants enclosed in double-quotes within new CREATE TABLE and CREATE INDEX statements. It is still possible to enclose column names in double-quotes, and existing database schemas that use double-quotes for strings can still be loaded. This addresses ticket [9b78184b].\n\nFossilOrigin-Name: 1685610ef8e0dc9218b02461ceab14dc6114f4f5ef7fcda0da395094aff443e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/check.test||test/check.test",
          "test/quote.test||test/quote.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted) ){",
          "",
          "[Added Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NewSchema)",
          "481:     ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1656: ){",
          "1658:   Walker w;",
          "1660:   if( pExpr==0 ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1657:   u16 savedHasAgg;",
          "",
          "[Added Lines]",
          "1659:   int savedHasAgg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1769:   sNC.pParse = pParse;",
          "1770:   sNC.pSrcList = &sSrc;",
          "1771:   sNC.ncFlags = type;",
          "1772:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1773:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1774:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:   if( pTab && !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NewSchema;",
          "1776:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: do_test check-2.1 {",
          "119:   execsql {",
          "120:     CREATE TABLE t2(",
          "121:       x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))==\"integer\" ),",
          "122:       y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "123:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "124:     );",
          "125:   }",
          "126: } {}",
          "127: do_test check-2.2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     PRAGMA writable_schema = 1;",
          "126:     PRAGMA writable_schema = 0;",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "20: # Create a table with a strange name and with strange column names.",
          "21: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: set testprefix quote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   } msg ]",
          "85:   lappend r $msg",
          "86: } {0 {}}",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #-------------------------------------------------------------------------",
          "90: # Check that it is not possible to use double-quotes for a string",
          "91: # constant in a CHECK constraint or CREATE INDEX statement. However,",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "98: foreach {tn sql errname} {",
          "99:   1 { CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") ) } null",
          "100:   2 { CREATE INDEX i2 ON t1(x, y, z||\"abc\") }        abc",
          "101:   3 { CREATE INDEX i3 ON t1(\"w\") }                   w",
          "102:   4 { CREATE INDEX i4 ON t1(x) WHERE z=\"w\" }         w",
          "103: } {",
          "104:   do_catchsql_test 2.1.$tn $sql [list 1 \"no such column: $errname\"]",
          "105: }",
          "107: do_execsql_test 2.2 {",
          "108:   PRAGMA writable_schema = 1;",
          "109:   CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") );",
          "110:   CREATE INDEX i2 ON t1(x, y, z||\"abc\");",
          "111:   CREATE INDEX i3 ON t1(\"w\");",
          "112:   CREATE INDEX i4 ON t1(x) WHERE z=\"w\";",
          "113: }",
          "115: db close",
          "116: sqlite3 db test.db",
          "118: do_execsql_test 2.3.1 {",
          "119:   INSERT INTO xyz VALUES(1, 2, 3);",
          "120: }",
          "121: do_catchsql_test 2.3.2 {",
          "122:   INSERT INTO xyz VALUES(1, 2, 'null');",
          "123: } {1 {CHECK constraint failed: xyz}}",
          "125: do_execsql_test 2.4 {",
          "126:   INSERT INTO t1 VALUES(1, 2, 3);",
          "127:   INSERT INTO t1 VALUES(4, 5, 'w');",
          "128:   SELECT * FROM t1 WHERE z='w';",
          "129: } {4 5 w}",
          "130: do_execsql_test 2.5 {",
          "131:   SELECT sql FROM sqlite_master;",
          "132: } {",
          "133:   {CREATE TABLE t1(x, y, z)}",
          "134:   {CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") )}",
          "135:   {CREATE INDEX i2 ON t1(x, y, z||\"abc\")}",
          "136:   {CREATE INDEX i3 ON t1(\"w\")}",
          "137:   {CREATE INDEX i4 ON t1(x) WHERE z=\"w\"}",
          "138: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
      "candidate_info": {
        "commit_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "files": [
          "ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "test/fts3atoken.test"
        ],
        "message": "The fts3_tokenizer() function returns NULL if the SQLITE_DBCONFIG_ENABLE_FTS_TOKENIZER setting is disabled, which is is by default.\n\nFossilOrigin-Name: f5732f4caf7a37a6445c61ae0d0ac14cc9deb897376e73aa36a1ead025b92c69",
        "before_after_code_files": [
          "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers": [
          "File: ext/fts3/README.tokenizers -> ext/fts3/README.tokenizers",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   SECURITY: If the fts3 extension is used in an environment where potentially",
          "54:     malicious users may execute arbitrary SQL (i.e. gears), they should be",
          "58:   See \"Sample code\" below for an example of calling the fts3_tokenizer()",
          "59:   function from C code.",
          "",
          "[Removed Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function, possibly using the",
          "56:     authorisation callback.",
          "",
          "[Added Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function.  The",
          "56:     fts3_tokenizer() function is disabled by default. It is only enabled",
          "57:     by SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER. Do not enable it in",
          "58:     security sensitive environments.",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110: }",
          "112: int sqlite3Fts3IsIdChar(char c){",
          "",
          "[Removed Lines]",
          "109:   sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: # simple input string via the built-in test function. This is as much",
          "108: # to test the test function as the tokenizer implementations.",
          "109: #",
          "110: do_test fts3atoken-3.1 {",
          "111:   execsql {",
          "112:     SELECT fts3_tokenizer_test('simple', 'I don''t see how');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
      "candidate_info": {
        "commit_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Always use the symbolic name SQLITE_IDXTYPE_PRIMARYKEY rather than a hard-coded magic number 2.\n\nFossilOrigin-Name: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "1670:     VdbeComment((v, \"for %s\", pIdx->zName));",
          "1671: #ifdef SQLITE_ENABLE_NULL_TRIM",
          "1673: #endif",
          "",
          "[Removed Lines]",
          "1672:     if( pIdx->idxType==2 ) sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "",
          "[Added Lines]",
          "1672:     if( pIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "1673:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1674:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2410:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2411:       }",
          "2412:     }",
          "2414:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2415:     }",
          "2416:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "",
          "[Removed Lines]",
          "2413:     if( !HasRowid(pSrc) && pDestIdx->idxType==2 ){",
          "",
          "[Added Lines]",
          "2415:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}