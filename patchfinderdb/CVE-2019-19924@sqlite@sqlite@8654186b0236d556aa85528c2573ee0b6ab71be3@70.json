{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b8852ae083d8e8ea60ca331f4c3b5619dda00aac",
      "candidate_info": {
        "commit_hash": "b8852ae083d8e8ea60ca331f4c3b5619dda00aac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8852ae083d8e8ea60ca331f4c3b5619dda00aac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/fallocate.test"
        ],
        "message": "Remove a broken assert() triggered by a \"PRAGMA max_page_count = N\" invocation, where N is larger than the number of pages in the database image, but smaller than the number of pages in the database file.\n\nFossilOrigin-Name: 7cd56cad5efead5097e9918c87313bb46e583fe62bae0df1be60e10117e2c3cb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "test/fallocate.test||test/fallocate.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 908ff7fffa302255a74e2334ca3a1779ed43acb0268fce5a83a56fd16794dc88",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c"
        ],
        "test/fallocate.test||test/fallocate.test": [
          "File: test/fallocate.test -> test/fallocate.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: } {1024}",
          "71: do_test fallocate-1.8 { execsql { COMMIT } } {}",
          "74: #-------------------------------------------------------------------------",
          "75: # The following tests - fallocate-2.* - test that things work in WAL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: do_test 1.8 {",
          "74:   set nPg [db one {PRAGMA page_count}]",
          "75:   set nFile [expr [file size test.db] / 1024]",
          "76:   list [expr $nPg<100] [expr $nFile>100]",
          "77: } {1 1}",
          "79: do_execsql_test 1.9 {",
          "80:   PRAGMA max_page_count = 100;",
          "81: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fd04bfd29b9df1c30f2f573c8f339b2d00f4bca",
      "candidate_info": {
        "commit_hash": "9fd04bfd29b9df1c30f2f573c8f339b2d00f4bca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9fd04bfd29b9df1c30f2f573c8f339b2d00f4bca",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: b68d21e93a0839b42f49845918df7738ee7fa2a05c7f4ae2f89fdbb5e47ad8eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01ba4641ab436c6065c8725908fc0913f2abded4ea62e004b7534e0116b9451a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f68bf5fbe61a8d848fa5fe187ea548ce27940103",
      "candidate_info": {
        "commit_hash": "f68bf5fbe61a8d848fa5fe187ea548ce27940103",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f68bf5fbe61a8d848fa5fe187ea548ce27940103",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/gencol1.test"
        ],
        "message": "Fix an incorrect NEVER() macro.\n\nFossilOrigin-Name: 96b6a76da09a94182414ec1a56da91728c37329d2b55f889e433054ca21605ce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92893b7980cbb0c6e26bc0b21390a717193205c9897fea5f26476462928897f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1629:   u8 eType = COLFLAG_VIRTUAL;",
          "1630:   Table *pTab = pParse->pNewTable;",
          "1631:   Column *pCol;",
          "1633:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1634:   if( IN_DECLARE_VTAB ){",
          "1635:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "",
          "[Removed Lines]",
          "1632:   if( NEVER(pTab==0) ) goto generated_done;",
          "",
          "[Added Lines]",
          "1632:   if( pTab==0 ){",
          "1634:     goto generated_done;",
          "1635:   }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   SELECT 200, * FROM t3;",
          "263: } {100 1 1}",
          "265: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: # 2019-12-04 Generated column in a CREATE TABLE IF NOT EXISTS that",
          "266: # does already exist.",
          "267: #",
          "268: sqlite3 db :memory:",
          "269: do_execsql_test gencol1-10.10 {",
          "270:   CREATE TABLE t1(aa,bb);",
          "271:   CREATE TABLE IF NOT EXISTS t1(aa, bb AS (aa+1));",
          "272:   PRAGMA integrity_check;",
          "273: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e61c1b741b3bf6f93445f30454925e430c3ebea",
      "candidate_info": {
        "commit_hash": "5e61c1b741b3bf6f93445f30454925e430c3ebea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e61c1b741b3bf6f93445f30454925e430c3ebea",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/window1.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Fix error handling for the case where a window function is passed the wrong number of arguments.\n\nFossilOrigin-Name: 871796bb19e61c1282d8ac97a82d8b57bde50f2a2a08004ab53136d77c138df4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/window1.test||test/window1.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fcd937d9786a82ef4147e657d54ea0beb6ac87e2eb1677186b318493d473077b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "852:           pNC->nErr++;",
          "853:           is_agg = 0;",
          "861:         }",
          "862: #else",
          "863:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "856:           sqlite3ErrorMsg(pParse,",
          "857:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "858:               nId, zId",
          "859:           );",
          "860:           pNC->nErr++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "878:                nId, zId);",
          "879:           pNC->nErr++;",
          "880:         }",
          "881:         if( is_agg ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "875:         else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "876:           sqlite3ErrorMsg(pParse,",
          "877:               \"FILTER may not be used with non-aggregate %.*s()\",",
          "878:               nId, zId",
          "879:           );",
          "880:           pNC->nErr++;",
          "881:         }",
          "882: #endif",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: do_catchsql_test 2.1 {",
          "93:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "96: do_catchsql_test 2.2 {",
          "97:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "",
          "[Removed Lines]",
          "94: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "",
          "[Added Lines]",
          "94: } {1 {FILTER may not be used with non-aggregate upper()}}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: do_catchsql_test 7.1.7 {",
          "258:   SELECT max(x) OVER abc FROM t1 WINDOW def AS (ORDER BY y);",
          "259: } {1 {no such window: abc}}",
          "261: do_execsql_test 7.2 {",
          "262:   SELECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: do_catchsql_test 7.1.8 {",
          "261:   SELECT row_number(x) OVER () FROM t1",
          "262: } {1 {wrong number of arguments to function row_number}}",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   WINDOW win AS (ROWS BETWEEN 10 PRECEDING AND x'ABCD' FOLLOWING)",
          "65: }",
          "68: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: errorsql_test 3.3 {",
          "68:   SELECT row_number(a) OVER () FROM t1;",
          "69: }",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   WINDOW win AS (ROWS BETWEEN 10 PRECEDING AND x'ABCD' FOLLOWING)",
          "109: } } } 1",
          "111: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: # PG says ERROR:  function row_number(integer) does not exist",
          "112: do_test 3.3 { catch { execsql {",
          "113:   SELECT row_number(a) OVER () FROM t1;",
          "114: } } } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbf1c4ba8ab563a3e54db8fc5e21058c1f427b89",
      "candidate_info": {
        "commit_hash": "dbf1c4ba8ab563a3e54db8fc5e21058c1f427b89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbf1c4ba8ab563a3e54db8fc5e21058c1f427b89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Fix the sqlite3TreeView() output to consistently use a colon and not a comma after the table number in the AST dumps.\n\nFossilOrigin-Name: fa2416f623d83fe93253137302a74fcd6cdd041da337a0756df344d7d09a19f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f84a15394c369cbdb6fba87c603a609722cf1f499626c7f20699060273ab5081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     StrAccum x;",
          "132:     char zLine[100];",
          "133:     sqlite3StrAccumInit(&x, 0, zLine, sizeof(zLine), 0);",
          "135:     if( pItem->zDatabase ){",
          "136:       sqlite3_str_appendf(&x, \" %s.%s\", pItem->zDatabase, pItem->zName);",
          "137:     }else if( pItem->zName ){",
          "",
          "[Removed Lines]",
          "134:     sqlite3_str_appendf(&x, \"{%d,*}\", pItem->iCursor);",
          "",
          "[Added Lines]",
          "134:     sqlite3_str_appendf(&x, \"{%d:*}\", pItem->iCursor);",
          "",
          "---------------"
        ]
      }
    }
  ]
}