{
  "cve_id": "CVE-2016-4080",
  "cve_desc": "epan/dissectors/packet-pktc.c in the PKTC dissector in Wireshark 1.12.x before 1.12.11 and 2.0.x before 2.0.3 misparses timestamp fields, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "ad097385c05c370440fb810e67f811398efc0ea0",
  "patch_info": {
    "commit_hash": "ad097385c05c370440fb810e67f811398efc0ea0",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/ad097385c05c370440fb810e67f811398efc0ea0",
    "files": [
      "epan/dissectors/packet-pktc.c"
    ],
    "message": "replace dangerous tvb_get_ptr with safer string function.\n\nUsing tvb_get_ptr to get a string is always dangerous in the face of\nmalformed packets. Instead using string functions allow for safe handling\nof these.\n\nBug: 12242\nChange-Id: I059c186032492aae9c90a69858ea3fc59e21313f\nReviewed-on: https://code.wireshark.org/review/14714\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c": [
      "File: epan/dissectors/packet-pktc.c -> epan/dissectors/packet-pktc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "439:     proto_tree_add_string_format_value(tree, hf_pktc_timestamp, tvb, offset, 13, timestr,",
      "440:                                 \"%.2s-%.2s-%.2s %.2s:%.2s:%.2s\",",
      "441:                                  timestr, timestr+2, timestr+4, timestr+6, timestr+8, timestr+10);",
      "",
      "[Removed Lines]",
      "438:     timestr=tvb_get_ptr(tvb, offset, 13);",
      "",
      "[Added Lines]",
      "438:     timestr=tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 13, ENC_ASCII);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "672:             \"Server Kerberos Principal Identifier\", \"pktc.server_principal\", FT_STRING, BASE_NONE,",
      "673:             NULL, 0, NULL, HFILL }},",
      "674:         { &hf_pktc_timestamp, {",
      "676:             NULL, 0, \"Timestamp (UTC)\", HFILL }},",
      "677:         { &hf_pktc_app_spec_data, {",
      "678:             \"Application Specific Data\", \"pktc.asd\", FT_NONE, BASE_NONE,",
      "",
      "[Removed Lines]",
      "675:             \"Timestamp\", \"pktc.timestamp\", FT_STRING, BASE_NONE,",
      "",
      "[Added Lines]",
      "675:             \"Timestamp\", \"pktc.timestamp\", FT_STRING, STR_UNICODE,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7fcd61ee97b88515347ee179cf26222926a0aad",
      "candidate_info": {
        "commit_hash": "a7fcd61ee97b88515347ee179cf26222926a0aad",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a7fcd61ee97b88515347ee179cf26222926a0aad",
        "files": [
          "epan/dissectors/packet-pktc.c"
        ],
        "message": "replace dangerous tvb_get_ptr with safer string function.\n\nUsing tvb_get_ptr to get a string is always dangerous in the face of\nmalformed packets. Instead using string functions allow for safe handling\nof these.\n\nBug: 12242\nChange-Id: I059c186032492aae9c90a69858ea3fc59e21313f\nReviewed-on: https://code.wireshark.org/review/14714\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\n(cherry picked from commit ad097385c05c370440fb810e67f811398efc0ea0)\nReviewed-on: https://code.wireshark.org/review/14731\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
          ],
          "candidate": [
            "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c": [
          "File: epan/dissectors/packet-pktc.c -> epan/dissectors/packet-pktc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:     proto_tree_add_string_format_value(tree, hf_pktc_timestamp, tvb, offset, 13, timestr,",
          "443:                                 \"%.2s-%.2s-%.2s %.2s:%.2s:%.2s\",",
          "444:                                  timestr, timestr+2, timestr+4, timestr+6, timestr+8, timestr+10);",
          "",
          "[Removed Lines]",
          "441:     timestr=tvb_get_ptr(tvb, offset, 13);",
          "",
          "[Added Lines]",
          "441:     timestr=tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 13, ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:             \"Server Kerberos Principal Identifier\", \"pktc.server_principal\", FT_STRING, BASE_NONE,",
          "676:             NULL, 0, NULL, HFILL }},",
          "677:         { &hf_pktc_timestamp, {",
          "679:             NULL, 0, \"Timestamp (UTC)\", HFILL }},",
          "680:         { &hf_pktc_app_spec_data, {",
          "681:             \"Application Specific Data\", \"pktc.asd\", FT_NONE, BASE_NONE,",
          "",
          "[Removed Lines]",
          "678:             \"Timestamp\", \"pktc.timestamp\", FT_STRING, BASE_NONE,",
          "",
          "[Added Lines]",
          "678:             \"Timestamp\", \"pktc.timestamp\", FT_STRING, STR_UNICODE,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cde78261a2d26f8b3e11295b9eaeed2fb840ea0c",
      "candidate_info": {
        "commit_hash": "cde78261a2d26f8b3e11295b9eaeed2fb840ea0c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/cde78261a2d26f8b3e11295b9eaeed2fb840ea0c",
        "files": [
          "epan/dissectors/packet-pktc.c"
        ],
        "message": "replace dangerous tvb_get_ptr with safer string function.\n\nUsing tvb_get_ptr to get a string is always dangerous in the face of\nmalformed packets. Instead using string functions allow for safe handling\nof these.\n\nBug: 12242\nChange-Id: Id5a57a3d9ab744386b3358d378fe9e0e62df54fa\nReviewed-on: https://code.wireshark.org/review/14769\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit df3d07b4bf80decf504cb007b9a73c85a3eef737)\nReviewed-on: https://code.wireshark.org/review/15443\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
          ],
          "candidate": [
            "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c": [
          "File: epan/dissectors/packet-pktc.c -> epan/dissectors/packet-pktc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:     proto_tree_add_string_format_value(tree, hf_pktc_timestamp, tvb, offset, 13, timestr,",
          "440:                                 \"%.2s-%.2s-%.2s %.2s:%.2s:%.2s\",",
          "441:      timestr, timestr+2, timestr+4, timestr+6, timestr+8, timestr+10);",
          "",
          "[Removed Lines]",
          "438:     timestr=tvb_get_ptr(tvb, offset, 13);",
          "",
          "[Added Lines]",
          "438:     timestr=tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 13, ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "663:      \"Server Kerberos Principal Identifier\", \"pktc.server_principal\", FT_STRING, BASE_NONE,",
          "664:      NULL, 0, NULL, HFILL }},",
          "665:  { &hf_pktc_timestamp, {",
          "667:      NULL, 0, \"Timestamp (UTC)\", HFILL }},",
          "668:  { &hf_pktc_app_spec_data, {",
          "669:      \"Application Specific Data\", \"pktc.asd\", FT_NONE, BASE_NONE,",
          "",
          "[Removed Lines]",
          "666:      \"Timestamp\", \"pktc.timestamp\", FT_STRING, BASE_NONE,",
          "",
          "[Added Lines]",
          "666:      \"Timestamp\", \"pktc.timestamp\", FT_STRING, STR_UNICODE,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df3d07b4bf80decf504cb007b9a73c85a3eef737",
      "candidate_info": {
        "commit_hash": "df3d07b4bf80decf504cb007b9a73c85a3eef737",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/df3d07b4bf80decf504cb007b9a73c85a3eef737",
        "files": [
          "epan/dissectors/packet-pktc.c"
        ],
        "message": "replace dangerous tvb_get_ptr with safer string function.\n\nUsing tvb_get_ptr to get a string is always dangerous in the face of\nmalformed packets. Instead using string functions allow for safe handling\nof these.\n\nBug: 12242\nChange-Id: Id5a57a3d9ab744386b3358d378fe9e0e62df54fa\nReviewed-on: https://code.wireshark.org/review/14769\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
          ],
          "candidate": [
            "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-pktc.c||epan/dissectors/packet-pktc.c": [
          "File: epan/dissectors/packet-pktc.c -> epan/dissectors/packet-pktc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:     proto_tree_add_string_format_value(tree, hf_pktc_timestamp, tvb, offset, 13, timestr,",
          "445:                                 \"%.2s-%.2s-%.2s %.2s:%.2s:%.2s\",",
          "446:      timestr, timestr+2, timestr+4, timestr+6, timestr+8, timestr+10);",
          "",
          "[Removed Lines]",
          "443:     timestr=tvb_get_ptr(tvb, offset, 13);",
          "",
          "[Added Lines]",
          "443:     timestr=tvb_get_string_enc(wmem_packet_scope(), tvb, offset, 13, ENC_ASCII);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "682:      \"Server Kerberos Principal Identifier\", \"pktc.server_principal\", FT_STRING, BASE_NONE,",
          "683:      NULL, 0, NULL, HFILL }},",
          "684:  { &hf_pktc_timestamp, {",
          "686:      NULL, 0, \"Timestamp (UTC)\", HFILL }},",
          "687:  { &hf_pktc_app_spec_data, {",
          "688:      \"Application Specific Data\", \"pktc.asd\", FT_NONE, BASE_NONE,",
          "",
          "[Removed Lines]",
          "685:      \"Timestamp\", \"pktc.timestamp\", FT_STRING, BASE_NONE,",
          "",
          "[Added Lines]",
          "685:      \"Timestamp\", \"pktc.timestamp\", FT_STRING, STR_UNICODE,",
          "",
          "---------------"
        ]
      }
    }
  ]
}