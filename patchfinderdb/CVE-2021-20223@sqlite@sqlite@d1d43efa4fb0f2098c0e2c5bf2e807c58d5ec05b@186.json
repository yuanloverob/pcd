{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46d987405c538012d16883856033e0d9b9c9edbc",
      "candidate_info": {
        "commit_hash": "46d987405c538012d16883856033e0d9b9c9edbc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46d987405c538012d16883856033e0d9b9c9edbc",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/global.c",
          "src/vdbe.c",
          "test/fts3snippet.test",
          "test/fuzzdata8.db"
        ],
        "message": "Merge recent fixes from trunk.\n\nFossilOrigin-Name: 5dfa33a09e608d26549e46c58a5563754688af68fa99415f9a548e91f81aca7c",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/global.c||src/global.c",
          "src/vdbe.c||src/vdbe.c",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c50f6c28a4cadb2c33954c066a8e94f8aaf4c31b6c0309db35efc472cb0bcaa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: static Pgno btreePagecount(BtShared *pBt){",
          "2141: }",
          "2142: u32 sqlite3BtreeLastPage(Btree *p){",
          "2143:   assert( sqlite3BtreeHoldsMutex(p) );",
          "2145:   return btreePagecount(p->pBt);",
          "2146: }",
          "",
          "[Removed Lines]",
          "2140:   return pBt->nPage;",
          "2144:   assert( ((p->pBt->nPage)&0x80000000)==0 );",
          "",
          "[Added Lines]",
          "2140:   assert( (pBt->nPage & 0x80000000)==0 || CORRUPT_DB );",
          "2141:   return pBt->nPage & 0x7fffffff;",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: const unsigned char sqlite3CtypeMap[256] = {",
          "",
          "[Removed Lines]",
          "90: #ifdef SQLITE_ASCII",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: };",
          "",
          "[Removed Lines]",
          "128: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2838:     }else{",
          "2839:       rc = sqlite3VdbeMemFromBtree(pC->uc.pCursor, aOffset[p2], len, pDest);",
          "2840:       if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "2837:       sqlite3VdbeSerialGet(aZero, t, pDest);",
          "",
          "[Added Lines]",
          "2838:       sqlite3VdbeSerialGet((u8*)sqlite3CtypeMap, t, pDest);",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:   {[a70] [a71] [a72]}",
          "588: }",
          "590: set sqlite_fts3_enable_parentheses 0",
          "591: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591: #-------------------------------------------------------------------------",
          "592: # Request a snippet from a query with more than 64 phrases.",
          "593: #",
          "594: reset_db",
          "595: do_execsql_test 6.0 {",
          "596:   CREATE VIRTUAL TABLE f USING fts3(b);",
          "597:   INSERT INTO f VALUES ( x'746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218');",
          "598: }",
          "600: do_execsql_test 6.1 {",
          "601:   SELECT  length(snippet(f))>0  FROM f WHERE b MATCH x'1065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a010f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c2a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e0f42';",
          "602: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcc057db259c9a85fa2fdd6017bb479f72ff06b6",
      "candidate_info": {
        "commit_hash": "fcc057db259c9a85fa2fdd6017bb479f72ff06b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcc057db259c9a85fa2fdd6017bb479f72ff06b6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Fix a double-free that could occur when a component of a compound SELECT with an ORDER BY clause uses named window definitions.\n\nFossilOrigin-Name: 92893b7980cbb0c6e26bc0b21390a717193205c9897fea5f26476462928897f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4cb9708d48ead10ee9543f86878be8382cd6e850950d5384c95254bac4a8d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4569:   p->pPrior = 0;",
          "4570:   p->pNext = 0;",
          "4571:   p->pWith = 0;",
          "4572:   p->selFlags &= ~SF_Compound;",
          "4573:   assert( (p->selFlags & SF_Converted)==0 );",
          "4574:   p->selFlags |= SF_Converted;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4572: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4573:   p->pWinDefn = 0;",
          "4574: #endif",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1272:   FROM t1;",
          "1273: }",
          "1275: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1275: #-------------------------------------------------------------------------",
          "1276: reset_db",
          "1277: do_catchsql_test 35.0 {",
          "1278:   SELECT * WINDOW f AS () ORDER BY name COLLATE nocase;",
          "1279: } {1 {no tables specified}}",
          "1281: do_catchsql_test 35.1 {",
          "1282:   VALUES(1) INTERSECT SELECT * WINDOW f AS () ORDER BY x COLLATE nocase;",
          "1283: } {1 {no tables specified}}",
          "1285: do_execsql_test 35.2 {",
          "1286:   CREATE TABLE t1(x);",
          "1287:   INSERT INTO t1 VALUES(1), (2), (3);",
          "1288:   VALUES(1) INTERSECT",
          "1289:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1290: } {1}",
          "1292: do_execsql_test 35.3 {",
          "1293:   VALUES(8) EXCEPT",
          "1294:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1295: } {8}",
          "1297: do_execsql_test 35.4 {",
          "1298:   VALUES(1) UNION",
          "1299:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1300: } {1 3 6}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b849b0b09b1ed472c56effd50ebe09b6e2c4adf",
      "candidate_info": {
        "commit_hash": "4b849b0b09b1ed472c56effd50ebe09b6e2c4adf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b849b0b09b1ed472c56effd50ebe09b6e2c4adf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "test/fkey5.test",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Fix the pragma_foreign_key_check virtual table so that it accepts arguments.\n\nFossilOrigin-Name: 07f849dee3d245ecf80ba3c3ce8dfc630e71ddb1e9c0bcc1f08cee22001fcb07",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "test/fkey5.test||test/fkey5.test",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81bc4b65ae2a68128b0be75a7a3d4f47f05cc588ff130ba56366ab9b16289228",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h"
        ],
        "test/fkey5.test||test/fkey5.test": [
          "File: test/fkey5.test -> test/fkey5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:   PRAGMA foreign_key_check=t1;",
          "451: } {t1 9 t2 0}",
          "454: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: # 2020-07-03: the pragma_foreign_key_check virtual table should",
          "454: # accept arguments for the table name and/or schema name.",
          "455: #",
          "456: do_execsql_test 13.0 {",
          "457:   SELECT *, 'x' FROM pragma_foreign_key_check('t1');",
          "458: } {t1 9 t2 0 x}",
          "459: do_catchsql_test 13.1 {",
          "460:   SELECT *, 'x' FROM pragma_foreign_key_check('t1','main');",
          "461: } {1 {no such table: main.t1}}",
          "462: do_execsql_test 13.2 {",
          "463:   SELECT *, 'x' FROM pragma_foreign_key_check('t1','aux');",
          "464: } {t1 9 t2 0 x}",
          "466: reset_db",
          "467: do_execsql_test 13.10 {",
          "468:   PRAGMA foreign_keys=OFF;",
          "469:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b TEXT REFERENCES t2);",
          "470:   CREATE TABLE t2(x TEXT PRIMARY KEY, y INT);",
          "471:   CREATE TABLE t3(w TEXT, z INT REFERENCES t1);",
          "472:   INSERT INTO t2 VALUES('abc',11),('def',22),('xyz',99);",
          "473:   INSERT INTO t1 VALUES(5,'abc'),(7,'xyz'),(9,'oops');",
          "474:   INSERT INTO t3 VALUES(11,7),(22,19);",
          "475: } {}",
          "476: do_execsql_test 13.11 {",
          "477:   SELECT x.*, '|'",
          "478:     FROM sqlite_schema, pragma_foreign_key_check(name) AS x",
          "479:    WHERE type='table'",
          "480:    ORDER BY x.\"table\";",
          "481: } {t1 9 t2 0 | t3 2 t1 0 |}",
          "482: do_execsql_test 13.12 {",
          "483:   SELECT *, '|'",
          "484:     FROM pragma_foreign_key_check AS x",
          "485:    ORDER BY x.\"table\";",
          "486: } {t1 9 t2 0 | t3 2 t1 0 |}",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   IF:   !defined(SQLITE_OMIT_FOREIGN_KEY)",
          "291:   NAME: foreign_key_check",
          "293:   COLS: table rowid parent fkid",
          "294:   IF:   !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "",
          "[Removed Lines]",
          "292:   FLAG: NeedSchema Result0",
          "",
          "[Added Lines]",
          "292:   FLAG: NeedSchema Result0 Result1 SchemaOpt",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab2172e69f5dfb5017a6a7b230862c0a54f41e7d",
      "candidate_info": {
        "commit_hash": "ab2172e69f5dfb5017a6a7b230862c0a54f41e7d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab2172e69f5dfb5017a6a7b230862c0a54f41e7d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "The new sqlite3_database_file_object() interface requires that the pager never invoke xOpen with SQLITE_OPEN_MAIN_JOURNAL unless it is using a pointer to the journal name found in the Pager structure itself.   Make this the case when processing a master-journal.\n\nFossilOrigin-Name: b4987a5ced0c0f2c606c040e0c1b8ee11175f40ae35a7446308a43e77b1f1db2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e9f1e96c9aac60fcbbcda6923e01e350ca4dd88acefb9d400979419ba4e1e4d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2540:       int c;",
          "2542:       rc = sqlite3OsOpen(pVfs, zJournal, pJournal, flags, 0);",
          "2543:       if( rc!=SQLITE_OK ){",
          "2544:         goto delmaster_out;",
          "",
          "[Removed Lines]",
          "2541:       int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_MAIN_JOURNAL);",
          "",
          "[Added Lines]",
          "2544:       int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_MASTER_JOURNAL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de19cac43b83ff4fa9840479633636f8bc0af37",
      "candidate_info": {
        "commit_hash": "0de19cac43b83ff4fa9840479633636f8bc0af37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0de19cac43b83ff4fa9840479633636f8bc0af37",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Unroll the comparison loop inside keywordCode() for to avoid unnecessary comparisions and thus help that routine run faster.\n\nFossilOrigin-Name: cec5f920f5c2a963f88329a08a443fc04be2dd6f7f2d840be63c0ab1de898f0a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 447d71f0867a11f789eba164ea77470b3ae4953927556304b0861cf690250776",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:           bestSize);",
          "653:   printf(\"    for(i=((int)aKWHash[i])-1; i>=0; i=((int)aKWNext[i])-1){\\n\");",
          "654:   printf(\"      if( aKWLen[i]!=n ) continue;\\n\");",
          "656:   printf(\"      zKW = &zKWText[aKWOffset[i]];\\n\");",
          "657:   printf(\"#ifdef SQLITE_ASCII\\n\");",
          "658:   printf(\"      while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }\\n\");",
          "659:   printf(\"#endif\\n\");",
          "660:   printf(\"#ifdef SQLITE_EBCDIC\\n\");",
          "661:   printf(\"      while( j<n && toupper(z[j])==zKW[j] ){ j++; }\\n\");",
          "662:   printf(\"#endif\\n\");",
          "663:   printf(\"      if( j<n ) continue;\\n\");",
          "",
          "[Removed Lines]",
          "655:   printf(\"      j = 0;\\n\");",
          "",
          "[Added Lines]",
          "657:   printf(\"      if( (z[0]&~0x20)!=zKW[0] ) continue;\\n\");",
          "658:   printf(\"      if( (z[1]&~0x20)!=zKW[1] ) continue;\\n\");",
          "659:   printf(\"      j = 2;\\n\");",
          "663:   printf(\"      if( toupper(z[0])!=zKW[0] ) continue;\\n\");",
          "664:   printf(\"      if( toupper(z[1])!=zKW[1] ) continue;\\n\");",
          "665:   printf(\"      j = 2;\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}