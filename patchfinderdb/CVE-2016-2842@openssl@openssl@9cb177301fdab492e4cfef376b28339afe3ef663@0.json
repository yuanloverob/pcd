{
  "cve_id": "CVE-2016-2842",
  "cve_desc": "The doapr_outch function in crypto/bio/b_print.c in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g does not verify that a certain memory allocation succeeds, which allows remote attackers to cause a denial of service (out-of-bounds write or memory consumption) or possibly have unspecified other impact via a long string, as demonstrated by a large amount of ASN.1 data, a different vulnerability than CVE-2016-0799.",
  "repo": "openssl/openssl",
  "patch_hash": "9cb177301fdab492e4cfef376b28339afe3ef663",
  "patch_info": {
    "commit_hash": "9cb177301fdab492e4cfef376b28339afe3ef663",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/9cb177301fdab492e4cfef376b28339afe3ef663",
    "files": [
      "crypto/bio/b_print.c"
    ],
    "message": "Fix memory issues in BIO_*printf functions\n\nThe internal |fmtstr| function used in processing a \"%s\" format string\nin the BIO_*printf functions could overflow while calculating the length\nof a string and cause an OOB read when printing very long strings.\n\nAdditionally the internal |doapr_outch| function can attempt to write to\nan OOB memory location (at an offset from the NULL pointer) in the event of\na memory allocation failure. In 1.0.2 and below this could be caused where\nthe size of a buffer to be allocated is greater than INT_MAX. E.g. this\ncould be in processing a very long \"%s\" format string. Memory leaks can also\noccur.\n\nThese issues will only occur on certain platforms where sizeof(size_t) >\nsizeof(int). E.g. many 64 bit systems. The first issue may mask the second\nissue dependent on compiler behaviour.\n\nThese problems could enable attacks where large amounts of untrusted data\nis passed to the BIO_*printf functions. If applications use these functions\nin this way then they could be vulnerable. OpenSSL itself uses these\nfunctions when printing out human-readable dumps of ASN.1 data. Therefore\napplications that print this data could be vulnerable if the data is from\nuntrusted sources. OpenSSL command line applications could also be\nvulnerable where they print out ASN.1 data, or if untrusted data is passed\nas command line arguments.\n\nLibssl is not considered directly vulnerable. Additionally certificates etc\nreceived via remote connections via libssl are also unlikely to be able to\ntrigger these issues because of message size limits enforced within libssl.\n\nCVE-2016-0799\n\nIssue reported by Guido Vranken.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
    "before_after_code_files": [
      "crypto/bio/b_print.c||crypto/bio/b_print.c"
    ]
  },
  "patch_diff": {
    "crypto/bio/b_print.c||crypto/bio/b_print.c": [
      "File: crypto/bio/b_print.c -> crypto/bio/b_print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: # define LLONG long",
      "125: #endif",
      "139: #define DP_S_DEFAULT    0",
      "",
      "[Removed Lines]",
      "127: static void fmtstr(char **, char **, size_t *, size_t *,",
      "128:                    const char *, int, int, int);",
      "129: static void fmtint(char **, char **, size_t *, size_t *,",
      "130:                    LLONG, int, int, int, int);",
      "131: static void fmtfp(char **, char **, size_t *, size_t *,",
      "132:                   LDOUBLE, int, int, int);",
      "133: static void doapr_outch(char **, char **, size_t *, size_t *, int);",
      "134: static void _dopr(char **sbuffer, char **buffer,",
      "135:                   size_t *maxlen, size_t *retlen, int *truncated,",
      "136:                   const char *format, va_list args);",
      "",
      "[Added Lines]",
      "127: static int fmtstr(char **, char **, size_t *, size_t *,",
      "128:                   const char *, int, int, int);",
      "129: static int fmtint(char **, char **, size_t *, size_t *,",
      "130:                   LLONG, int, int, int, int);",
      "131: static int fmtfp(char **, char **, size_t *, size_t *,",
      "132:                  LDOUBLE, int, int, int);",
      "133: static int doapr_outch(char **, char **, size_t *, size_t *, int);",
      "134: static int _dopr(char **sbuffer, char **buffer,",
      "135:                  size_t *maxlen, size_t *retlen, int *truncated,",
      "136:                  const char *format, va_list args);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: #define char_to_int(p) (p - '0')",
      "165: #define OSSL_MAX(p,q) ((p >= q) ? p : q)",
      "168: _dopr(char **sbuffer,",
      "169:       char **buffer,",
      "170:       size_t *maxlen,",
      "",
      "[Removed Lines]",
      "167: static void",
      "",
      "[Added Lines]",
      "167: static int",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "195:             if (ch == '%')",
      "196:                 state = DP_S_FLAGS;",
      "197:             else",
      "199:             ch = *format++;",
      "200:             break;",
      "201:         case DP_S_FLAGS:",
      "",
      "[Removed Lines]",
      "198:                 doapr_outch(sbuffer, buffer, &currlen, maxlen, ch);",
      "",
      "[Added Lines]",
      "198:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))",
      "199:                     return 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "301:                     value = va_arg(args, int);",
      "302:                     break;",
      "303:                 }",
      "306:                 break;",
      "307:             case 'X':",
      "308:                 flags |= DP_F_UP;",
      "",
      "[Removed Lines]",
      "304:                 fmtint(sbuffer, buffer, &currlen, maxlen,",
      "305:                        value, 10, min, max, flags);",
      "",
      "[Added Lines]",
      "305:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value, 10, min,",
      "306:                             max, flags))",
      "307:                     return 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "325:                     value = (LLONG) va_arg(args, unsigned int);",
      "326:                     break;",
      "327:                 }",
      "331:                 break;",
      "332:             case 'f':",
      "333:                 if (cflags == DP_C_LDOUBLE)",
      "334:                     fvalue = va_arg(args, LDOUBLE);",
      "335:                 else",
      "336:                     fvalue = va_arg(args, double);",
      "339:                 break;",
      "340:             case 'E':",
      "341:                 flags |= DP_F_UP;",
      "",
      "[Removed Lines]",
      "328:                 fmtint(sbuffer, buffer, &currlen, maxlen, value,",
      "329:                        ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),",
      "330:                        min, max, flags);",
      "337:                 fmtfp(sbuffer, buffer, &currlen, maxlen,",
      "338:                       fvalue, min, max, flags);",
      "",
      "[Added Lines]",
      "330:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value,",
      "331:                             ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),",
      "332:                             min, max, flags))",
      "333:                     return 0;",
      "340:                 if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,",
      "341:                            flags))",
      "342:                     return 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "354:                     fvalue = va_arg(args, double);",
      "355:                 break;",
      "356:             case 'c':",
      "359:                 break;",
      "360:             case 's':",
      "361:                 strvalue = va_arg(args, char *);",
      "",
      "[Removed Lines]",
      "357:                 doapr_outch(sbuffer, buffer, &currlen, maxlen,",
      "358:                             va_arg(args, int));",
      "",
      "[Added Lines]",
      "361:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen,",
      "362:                             va_arg(args, int)))",
      "363:                     return 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "365:                     else",
      "366:                         max = *maxlen;",
      "367:                 }",
      "370:                 break;",
      "371:             case 'p':",
      "372:                 value = (size_t)va_arg(args, void *);",
      "375:                 break;",
      "377:                 if (cflags == DP_C_SHORT) {",
      "",
      "[Removed Lines]",
      "368:                 fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,",
      "369:                        flags, min, max);",
      "373:                 fmtint(sbuffer, buffer, &currlen, maxlen,",
      "374:                        value, 16, min, max, flags | DP_F_NUM);",
      "",
      "[Added Lines]",
      "373:                 if (!fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,",
      "374:                             flags, min, max))",
      "375:                     return 0;",
      "379:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen,",
      "380:                             value, 16, min, max, flags | DP_F_NUM))",
      "381:                     return 0;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "393:                 }",
      "394:                 break;",
      "395:             case '%':",
      "397:                 break;",
      "398:             case 'w':",
      "",
      "[Removed Lines]",
      "396:                 doapr_outch(sbuffer, buffer, &currlen, maxlen, ch);",
      "",
      "[Added Lines]",
      "403:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))",
      "404:                     return 0;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "418:     if (*truncated)",
      "419:         currlen = *maxlen - 1;",
      "423: }",
      "426: fmtstr(char **sbuffer,",
      "427:        char **buffer,",
      "428:        size_t *currlen,",
      "429:        size_t *maxlen, const char *value, int flags, int min, int max)",
      "430: {",
      "432:     int cnt = 0;",
      "434:     if (value == 0)",
      "435:         value = \"<NULL>\";",
      "437:     padlen = min - strln;",
      "439:         padlen = 0;",
      "440:     if (flags & DP_F_MINUS)",
      "441:         padlen = -padlen;",
      "443:     while ((padlen > 0) && (cnt < max)) {",
      "445:         --padlen;",
      "446:         ++cnt;",
      "447:     }",
      "448:     while (*value && (cnt < max)) {",
      "450:         ++cnt;",
      "451:     }",
      "452:     while ((padlen < 0) && (cnt < max)) {",
      "454:         ++padlen;",
      "455:         ++cnt;",
      "456:     }",
      "457: }",
      "460: fmtint(char **sbuffer,",
      "461:        char **buffer,",
      "462:        size_t *currlen,",
      "",
      "[Removed Lines]",
      "420:     doapr_outch(sbuffer, buffer, &currlen, maxlen, '\\0');",
      "422:     return;",
      "425: static void",
      "431:     int padlen, strln;",
      "436:     for (strln = 0; value[strln]; ++strln) ;",
      "438:     if (padlen < 0)",
      "444:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
      "449:         doapr_outch(sbuffer, buffer, currlen, maxlen, *value++);",
      "453:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
      "459: static void",
      "",
      "[Added Lines]",
      "428:     if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, '\\0'))",
      "429:         return 0;",
      "431:     return 1;",
      "434: static int",
      "440:     int padlen;",
      "441:     size_t strln;",
      "447:     strln = strlen(value);",
      "448:     if (strln > INT_MAX)",
      "449:         strln = INT_MAX;",
      "452:     if (min < 0 || padlen < 0)",
      "458:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
      "459:             return 0;",
      "464:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *value++))",
      "465:             return 0;",
      "469:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
      "470:             return 0;",
      "474:     return 1;",
      "477: static int",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "518:     while (spadlen > 0) {",
      "520:         --spadlen;",
      "521:     }",
      "524:     if (signvalue)",
      "528:     while (*prefix) {",
      "530:         prefix++;",
      "531:     }",
      "534:     if (zpadlen > 0) {",
      "535:         while (zpadlen > 0) {",
      "537:             --zpadlen;",
      "538:         }",
      "539:     }",
      "545:     while (spadlen < 0) {",
      "547:         ++spadlen;",
      "548:     }",
      "550: }",
      "552: static LDOUBLE abs_val(LDOUBLE value)",
      "",
      "[Removed Lines]",
      "519:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
      "525:         doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
      "529:         doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix);",
      "536:             doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
      "541:     while (place > 0)",
      "542:         doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]);",
      "546:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
      "549:     return;",
      "",
      "[Added Lines]",
      "537:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
      "538:             return 0;",
      "544:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
      "545:             return 0;",
      "549:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix))",
      "550:             return 0;",
      "557:             if(!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
      "558:                 return 0;",
      "563:     while (place > 0) {",
      "564:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]))",
      "565:             return 0;",
      "566:     }",
      "570:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
      "571:             return 0;",
      "574:     return 1;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "577:     return intpart;",
      "578: }",
      "581: fmtfp(char **sbuffer,",
      "582:       char **buffer,",
      "583:       size_t *currlen,",
      "",
      "[Removed Lines]",
      "580: static void",
      "",
      "[Added Lines]",
      "605: static int",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "657:     if ((flags & DP_F_ZERO) && (padlen > 0)) {",
      "658:         if (signvalue) {",
      "660:             --padlen;",
      "661:             signvalue = 0;",
      "662:         }",
      "663:         while (padlen > 0) {",
      "665:             --padlen;",
      "666:         }",
      "667:     }",
      "668:     while (padlen > 0) {",
      "670:         --padlen;",
      "671:     }",
      "682:     if (max > 0 || (flags & DP_F_NUM)) {",
      "687:     }",
      "688:     while (zpadlen > 0) {",
      "690:         --zpadlen;",
      "691:     }",
      "693:     while (padlen < 0) {",
      "695:         ++padlen;",
      "696:     }",
      "697: }",
      "700: doapr_outch(char **sbuffer,",
      "701:             char **buffer, size_t *currlen, size_t *maxlen, int c)",
      "702: {",
      "",
      "[Removed Lines]",
      "659:             doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
      "664:             doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
      "669:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
      "672:     if (signvalue)",
      "673:         doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
      "675:     while (iplace > 0)",
      "676:         doapr_outch(sbuffer, buffer, currlen, maxlen, iconvert[--iplace]);",
      "683:         doapr_outch(sbuffer, buffer, currlen, maxlen, '.');",
      "685:         while (fplace > 0)",
      "686:             doapr_outch(sbuffer, buffer, currlen, maxlen, fconvert[--fplace]);",
      "689:         doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
      "694:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
      "699: static void",
      "",
      "[Added Lines]",
      "684:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
      "685:                 return 0;",
      "690:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
      "691:                 return 0;",
      "696:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
      "697:             return 0;",
      "700:     if (signvalue && !doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
      "701:         return 0;",
      "703:     while (iplace > 0) {",
      "704:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, iconvert[--iplace]))",
      "705:             return 0;",
      "706:     }",
      "713:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '.'))",
      "714:             return 0;",
      "716:         while (fplace > 0) {",
      "717:             if(!doapr_outch(sbuffer, buffer, currlen, maxlen,",
      "718:                             fconvert[--fplace]))",
      "719:                 return 0;",
      "720:         }",
      "723:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
      "724:             return 0;",
      "729:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
      "730:             return 0;",
      "733:     return 1;",
      "736: #define BUFFER_INC  1024",
      "738: static int",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "707:     assert(*currlen <= *maxlen);",
      "709:     if (buffer && *currlen == *maxlen) {",
      "711:         if (*buffer == NULL) {",
      "717:             if (*currlen > 0) {",
      "718:                 assert(*sbuffer != NULL);",
      "719:                 memcpy(*buffer, *sbuffer, *currlen);",
      "720:             }",
      "722:         } else {",
      "728:         }",
      "729:     }",
      "",
      "[Removed Lines]",
      "713:             if (*buffer == NULL) {",
      "715:                 return;",
      "716:             }",
      "724:             if (!*buffer) {",
      "726:                 return;",
      "727:             }",
      "",
      "[Added Lines]",
      "749:         if (*maxlen > INT_MAX - BUFFER_INC)",
      "750:             return 0;",
      "755:             if (*buffer == NULL)",
      "756:                 return 0;",
      "763:             char *tmpbuf;",
      "764:             tmpbuf = OPENSSL_realloc(*buffer, *maxlen);",
      "765:             if (tmpbuf == NULL)",
      "766:                 return 0;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "735:             (*buffer)[(*currlen)++] = (char)c;",
      "736:     }",
      "739: }",
      "",
      "[Removed Lines]",
      "738:     return;",
      "",
      "[Added Lines]",
      "778:     return 1;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "766:     int ignored;",
      "768:     dynbuf = NULL;",
      "770:     if (dynbuf) {",
      "771:         ret = BIO_write(bio, dynbuf, (int)retlen);",
      "772:         OPENSSL_free(dynbuf);",
      "",
      "[Removed Lines]",
      "769:     _dopr(&hugebufp, &dynbuf, &hugebufsize, &retlen, &ignored, format, args);",
      "",
      "[Added Lines]",
      "809:     if (!_dopr(&hugebufp, &dynbuf, &hugebufsize, &retlen, &ignored, format,",
      "810:                 args)) {",
      "811:         OPENSSL_free(dynbuf);",
      "812:         return -1;",
      "813:     }",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "800:     size_t retlen;",
      "801:     int truncated;",
      "805:     if (truncated)",
      "",
      "[Removed Lines]",
      "803:     _dopr(&buf, NULL, &n, &retlen, &truncated, format, args);",
      "",
      "[Added Lines]",
      "847:     if(!_dopr(&buf, NULL, &n, &retlen, &truncated, format, args))",
      "848:         return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6056f085dc0d53663433d98eb105cb5f26624e7",
      "candidate_info": {
        "commit_hash": "d6056f085dc0d53663433d98eb105cb5f26624e7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d6056f085dc0d53663433d98eb105cb5f26624e7",
        "files": [
          "crypto/bio/b_print.c"
        ],
        "message": "Fix implementation of \"e\" and \"g\" formats for printing floating points\n\nThe previous commit which \"fixed\" the \"e\" and \"g\" floating point formats\njust printed them in the same way as \"f\". This is wrong. This commit\nprovides the correct formatting.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/bio/b_print.c||crypto/bio/b_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ],
          "candidate": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bio/b_print.c||crypto/bio/b_print.c": [
          "File: crypto/bio/b_print.c -> crypto/bio/b_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: static int fmtint(char **, char **, size_t *, size_t *,",
          "53:                   LLONG, int, int, int, int);",
          "54: static int fmtfp(char **, char **, size_t *, size_t *,",
          "56: static int doapr_outch(char **, char **, size_t *, size_t *, int);",
          "57: static int _dopr(char **sbuffer, char **buffer,",
          "58:                  size_t *maxlen, size_t *retlen, int *truncated,",
          "",
          "[Removed Lines]",
          "55:                  LDOUBLE, int, int, int);",
          "",
          "[Added Lines]",
          "55:                  LDOUBLE, int, int, int, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: #define DP_C_LDOUBLE    3",
          "91: #define DP_C_LLONG      4",
          "94: #define char_to_int(p) (p - '0')",
          "95: #define OSSL_MAX(p,q) ((p >= q) ? p : q)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: #define F_FORMAT        0",
          "95: #define E_FORMAT        1",
          "96: #define G_FORMAT        2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:                 else",
          "269:                     fvalue = va_arg(args, double);",
          "270:                 if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,",
          "272:                     return 0;",
          "273:                 break;",
          "274:             case 'E':",
          "",
          "[Removed Lines]",
          "271:                            flags))",
          "",
          "[Added Lines]",
          "276:                            flags, F_FORMAT))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:                 else",
          "280:                     fvalue = va_arg(args, double);",
          "281:                 if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,",
          "283:                     return 0;",
          "284:                 break;",
          "285:             case 'G':",
          "",
          "[Removed Lines]",
          "282:                            flags))",
          "",
          "[Added Lines]",
          "287:                            flags, E_FORMAT))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:                 else",
          "291:                     fvalue = va_arg(args, double);",
          "292:                 if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,",
          "294:                     return 0;",
          "295:                 break;",
          "296:             case 'c':",
          "",
          "[Removed Lines]",
          "293:                            flags))",
          "",
          "[Added Lines]",
          "298:                            flags, G_FORMAT))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "542: fmtfp(char **sbuffer,",
          "543:       char **buffer,",
          "544:       size_t *currlen,",
          "546: {",
          "547:     int signvalue = 0;",
          "548:     LDOUBLE ufvalue;",
          "549:     char iconvert[20];",
          "550:     char fconvert[20];",
          "551:     int iplace = 0;",
          "552:     int fplace = 0;",
          "553:     int padlen = 0;",
          "554:     int zpadlen = 0;",
          "555:     long intpart;",
          "556:     long fracpart;",
          "557:     long max10;",
          "559:     if (max < 0)",
          "560:         max = 6;",
          "562:     if (fvalue < 0)",
          "563:         signvalue = '-';",
          "564:     else if (flags & DP_F_PLUS)",
          "",
          "[Removed Lines]",
          "545:       size_t *maxlen, LDOUBLE fvalue, int min, int max, int flags)",
          "561:     ufvalue = abs_val(fvalue);",
          "",
          "[Added Lines]",
          "550:       size_t *maxlen, LDOUBLE fvalue, int min, int max, int flags, int style)",
          "554:     LDOUBLE tmpvalue;",
          "557:     char econvert[20];",
          "560:     int eplace = 0;",
          "563:     long exp = 0;",
          "567:     int realstyle;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:     else if (flags & DP_F_SPACE)",
          "567:         signvalue = ' ';",
          "569:     intpart = (long)ufvalue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:     if (style == G_FORMAT) {",
          "585:         if (fvalue == 0.0) {",
          "586:             realstyle = F_FORMAT;",
          "587:         } else if (fvalue < 0.0001) {",
          "588:             realstyle = E_FORMAT;",
          "589:         } else if ((max == 0 && fvalue >= 10)",
          "590:                     || (max > 0 && fvalue >= pow_10(max))) {",
          "591:             realstyle = E_FORMAT;",
          "592:         } else {",
          "593:             realstyle = F_FORMAT;",
          "594:         }",
          "595:     } else {",
          "596:         realstyle = style;",
          "597:     }",
          "599:     if (style != F_FORMAT) {",
          "600:         tmpvalue = fvalue;",
          "602:         if (fvalue != 0.0) {",
          "603:             while (tmpvalue < 1) {",
          "604:                 tmpvalue *= 10;",
          "605:                 exp--;",
          "606:             }",
          "607:             while (tmpvalue > 10) {",
          "608:                 tmpvalue /= 10;",
          "609:                 exp++;",
          "610:             }",
          "611:         }",
          "612:         if (style == G_FORMAT) {",
          "617:             if (max == 0)",
          "618:                 max = 1;",
          "620:             if (realstyle == F_FORMAT) {",
          "621:                 max -= (exp + 1);",
          "622:                 if (max < 0) {",
          "626:                     return 0;",
          "627:                 }",
          "628:             } else {",
          "634:                 max--;",
          "635:             }",
          "636:         }",
          "637:         if (realstyle == E_FORMAT)",
          "638:             fvalue = tmpvalue;",
          "639:     }",
          "640:     ufvalue = abs_val(fvalue);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "597:     iconvert[iplace] = 0;",
          "601:         fconvert[fplace++] = \"0123456789\"[fracpart % 10];",
          "602:         fracpart = (fracpart / 10);",
          "604:     if (fplace == sizeof fconvert)",
          "605:         fplace--;",
          "606:     fconvert[fplace] = 0;",
          "610:     zpadlen = max - fplace;",
          "611:     if (zpadlen < 0)",
          "612:         zpadlen = 0;",
          "",
          "[Removed Lines]",
          "600:     do {",
          "603:     } while (fplace < max);",
          "609:     padlen = min - iplace - max - 1 - ((signvalue) ? 1 : 0);",
          "",
          "[Added Lines]",
          "672:     while (fplace < max) {",
          "673:         if (style == G_FORMAT && fplace == 0 && (fracpart % 10) == 0) {",
          "675:             max--;",
          "676:             fracpart = fracpart / 10;",
          "677:             if (fplace < max)",
          "678:                 continue;",
          "679:             break;",
          "680:         }",
          "683:     }",
          "690:     if (realstyle == E_FORMAT) {",
          "691:         int tmpexp;",
          "692:         if (exp < 0)",
          "693:             tmpexp = -exp;",
          "694:         else",
          "695:             tmpexp = exp;",
          "697:         do {",
          "698:             econvert[eplace++] = \"0123456789\"[tmpexp % 10];",
          "699:             tmpexp = (tmpexp / 10);",
          "700:         } while (tmpexp > 0 && eplace < (int)sizeof(econvert));",
          "702:         if (tmpexp > 0)",
          "703:             return 0;",
          "705:         if (eplace == 1)",
          "706:             econvert[eplace++] = '0';",
          "707:     }",
          "713:     padlen = min - iplace - max - (max > 0 ? 1 : 0) - ((signvalue) ? 1 : 0);",
          "715:     if (realstyle == E_FORMAT)",
          "716:         padlen -= 2 + eplace;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "660:             return 0;",
          "661:         --zpadlen;",
          "662:     }",
          "664:     while (padlen < 0) {",
          "665:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:     if (realstyle == E_FORMAT) {",
          "771:         char ech;",
          "773:         if ((flags & DP_F_UP) == 0)",
          "774:             ech = 'e';",
          "775:         else",
          "776:             ech = 'E';",
          "777:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ech))",
          "778:                 return 0;",
          "779:         if (exp < 0) {",
          "780:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '-'))",
          "781:                     return 0;",
          "782:         } else {",
          "783:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '+'))",
          "784:                     return 0;",
          "785:         }",
          "786:         while (eplace > 0) {",
          "787:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen,",
          "788:                              econvert[--eplace]))",
          "789:                 return 0;",
          "790:         }",
          "791:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "230c691a5218f355a63ff12cd72ce99178378c64",
      "candidate_info": {
        "commit_hash": "230c691a5218f355a63ff12cd72ce99178378c64",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/230c691a5218f355a63ff12cd72ce99178378c64",
        "files": [
          "crypto/bio/b_print.c"
        ],
        "message": "Fix fmtstr for BIO_printf() et al\n\n-   If we have a maximum amount of characters permitted to be printed\n    (for example \"%.2s\", which allows for a maximum of 2 chars), we\n    minimize the number of characters from the string to printed to\n    that size.\n-   If there is space for padding and there is a maximum amount of\n    characters to print (for example \"%3.2s\", which shall give at\n    least a 1 space padding), the amount of characters to pad with\n    gets added to the maximum so the minimum field size (3 in this\n    example) gets filled out.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/bio/b_print.c||crypto/bio/b_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ],
          "candidate": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bio/b_print.c||crypto/bio/b_print.c": [
          "File: crypto/bio/b_print.c -> crypto/bio/b_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <stdio.h>",
          "11: #include <string.h>",
          "12: #include <ctype.h>",
          "14: #include \"internal/cryptlib.h\"",
          "15: #ifndef NO_SYS_TYPES_H",
          "16: # include <sys/types.h>",
          "",
          "[Removed Lines]",
          "13: #include <limits.h>",
          "",
          "[Added Lines]",
          "13: #include \"internal/numbers.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:     if (value == 0)",
          "386:         value = \"<NULL>\";",
          "392:     padlen = min - strln;",
          "393:     if (min < 0 || padlen < 0)",
          "394:         padlen = 0;",
          "395:     if (flags & DP_F_MINUS)",
          "396:         padlen = -padlen;",
          "399:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "400:             return 0;",
          "401:         --padlen;",
          "402:         ++cnt;",
          "403:     }",
          "405:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *value++))",
          "406:             return 0;",
          "407:         ++cnt;",
          "408:     }",
          "410:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "411:             return 0;",
          "412:         ++padlen;",
          "",
          "[Removed Lines]",
          "388:     strln = strlen(value);",
          "389:     if (strln > INT_MAX)",
          "390:         strln = INT_MAX;",
          "398:     while ((padlen > 0) && (cnt < max)) {",
          "404:     while (*value && (cnt < max)) {",
          "409:     while ((padlen < 0) && (cnt < max)) {",
          "",
          "[Added Lines]",
          "388:     strln = OPENSSL_strnlen(value, max < 0 ? SIZE_MAX : (size_t)max);",
          "393:     if (max >= 0)",
          "398:     while ((padlen > 0) && (max < 0 || cnt < max)) {",
          "404:     while (strln > 0 && (max < 0 || cnt < max)) {",
          "407:         --strln;",
          "410:     while ((padlen < 0) && (max < 0 || cnt < max)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a801bf263849a2ef773e5bc0c86438cbba720835",
      "candidate_info": {
        "commit_hash": "a801bf263849a2ef773e5bc0c86438cbba720835",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a801bf263849a2ef773e5bc0c86438cbba720835",
        "files": [
          "crypto/bio/b_print.c"
        ],
        "message": "Fix memory issues in BIO_*printf functions\n\nThe internal |fmtstr| function used in processing a \"%s\" format string\nin the BIO_*printf functions could overflow while calculating the length\nof a string and cause an OOB read when printing very long strings.\n\nAdditionally the internal |doapr_outch| function can attempt to write to\nan OOB memory location (at an offset from the NULL pointer) in the event of\na memory allocation failure. In 1.0.2 and below this could be caused where\nthe size of a buffer to be allocated is greater than INT_MAX. E.g. this\ncould be in processing a very long \"%s\" format string. Memory leaks can also\noccur.\n\nThese issues will only occur on certain platforms where sizeof(size_t) >\nsizeof(int). E.g. many 64 bit systems. The first issue may mask the second\nissue dependent on compiler behaviour.\n\nThese problems could enable attacks where large amounts of untrusted data\nis passed to the BIO_*printf functions. If applications use these functions\nin this way then they could be vulnerable. OpenSSL itself uses these\nfunctions when printing out human-readable dumps of ASN.1 data. Therefore\napplications that print this data could be vulnerable if the data is from\nuntrusted sources. OpenSSL command line applications could also be\nvulnerable where they print out ASN.1 data, or if untrusted data is passed\nas command line arguments.\n\nLibssl is not considered directly vulnerable. Additionally certificates etc\nreceived via remote connections via libssl are also unlikely to be able to\ntrigger these issues because of message size limits enforced within libssl.\n\nCVE-2016-0799\n\nIssue reported by Guido Vranken.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(cherry picked from commit 578b956fe741bf8e84055547b1e83c28dd902c73)",
        "before_after_code_files": [
          "crypto/bio/b_print.c||crypto/bio/b_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ],
          "candidate": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bio/b_print.c||crypto/bio/b_print.c": [
          "File: crypto/bio/b_print.c -> crypto/bio/b_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: # define LLONG long",
          "126: #endif",
          "140: #define DP_S_DEFAULT    0",
          "",
          "[Removed Lines]",
          "128: static void fmtstr(char **, char **, size_t *, size_t *,",
          "129:                    const char *, int, int, int);",
          "130: static void fmtint(char **, char **, size_t *, size_t *,",
          "131:                    LLONG, int, int, int, int);",
          "132: static void fmtfp(char **, char **, size_t *, size_t *,",
          "133:                   LDOUBLE, int, int, int);",
          "134: static void doapr_outch(char **, char **, size_t *, size_t *, int);",
          "135: static void _dopr(char **sbuffer, char **buffer,",
          "136:                   size_t *maxlen, size_t *retlen, int *truncated,",
          "137:                   const char *format, va_list args);",
          "",
          "[Added Lines]",
          "128: static int fmtstr(char **, char **, size_t *, size_t *,",
          "129:                   const char *, int, int, int);",
          "130: static int fmtint(char **, char **, size_t *, size_t *,",
          "131:                   LLONG, int, int, int, int);",
          "132: static int fmtfp(char **, char **, size_t *, size_t *,",
          "133:                  LDOUBLE, int, int, int);",
          "134: static int doapr_outch(char **, char **, size_t *, size_t *, int);",
          "135: static int _dopr(char **sbuffer, char **buffer,",
          "136:                  size_t *maxlen, size_t *retlen, int *truncated,",
          "137:                  const char *format, va_list args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: #define char_to_int(p) (p - '0')",
          "166: #define OSSL_MAX(p,q) ((p >= q) ? p : q)",
          "169: _dopr(char **sbuffer,",
          "170:       char **buffer,",
          "171:       size_t *maxlen,",
          "",
          "[Removed Lines]",
          "168: static void",
          "",
          "[Added Lines]",
          "168: static int",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:             if (ch == '%')",
          "197:                 state = DP_S_FLAGS;",
          "198:             else",
          "200:             ch = *format++;",
          "201:             break;",
          "202:         case DP_S_FLAGS:",
          "",
          "[Removed Lines]",
          "199:                 doapr_outch(sbuffer, buffer, &currlen, maxlen, ch);",
          "",
          "[Added Lines]",
          "199:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))",
          "200:                     return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:                     value = va_arg(args, int);",
          "303:                     break;",
          "304:                 }",
          "307:                 break;",
          "308:             case 'X':",
          "309:                 flags |= DP_F_UP;",
          "",
          "[Removed Lines]",
          "305:                 fmtint(sbuffer, buffer, &currlen, maxlen,",
          "306:                        value, 10, min, max, flags);",
          "",
          "[Added Lines]",
          "306:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value, 10, min,",
          "307:                             max, flags))",
          "308:                     return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "326:                     value = (LLONG) va_arg(args, unsigned int);",
          "327:                     break;",
          "328:                 }",
          "332:                 break;",
          "333:             case 'f':",
          "334:                 if (cflags == DP_C_LDOUBLE)",
          "335:                     fvalue = va_arg(args, LDOUBLE);",
          "336:                 else",
          "337:                     fvalue = va_arg(args, double);",
          "340:                 break;",
          "341:             case 'E':",
          "342:                 flags |= DP_F_UP;",
          "",
          "[Removed Lines]",
          "329:                 fmtint(sbuffer, buffer, &currlen, maxlen, value,",
          "330:                        ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),",
          "331:                        min, max, flags);",
          "338:                 fmtfp(sbuffer, buffer, &currlen, maxlen,",
          "339:                       fvalue, min, max, flags);",
          "",
          "[Added Lines]",
          "331:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value,",
          "332:                             ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),",
          "333:                             min, max, flags))",
          "334:                     return 0;",
          "341:                 if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,",
          "342:                            flags))",
          "343:                     return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "355:                     fvalue = va_arg(args, double);",
          "356:                 break;",
          "357:             case 'c':",
          "360:                 break;",
          "361:             case 's':",
          "362:                 strvalue = va_arg(args, char *);",
          "",
          "[Removed Lines]",
          "358:                 doapr_outch(sbuffer, buffer, &currlen, maxlen,",
          "359:                             va_arg(args, int));",
          "",
          "[Added Lines]",
          "362:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen,",
          "363:                             va_arg(args, int)))",
          "364:                     return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:                     else",
          "367:                         max = *maxlen;",
          "368:                 }",
          "371:                 break;",
          "372:             case 'p':",
          "373:                 value = (long)va_arg(args, void *);",
          "376:                 break;",
          "378:                 if (cflags == DP_C_SHORT) {",
          "",
          "[Removed Lines]",
          "369:                 fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,",
          "370:                        flags, min, max);",
          "374:                 fmtint(sbuffer, buffer, &currlen, maxlen,",
          "375:                        value, 16, min, max, flags | DP_F_NUM);",
          "",
          "[Added Lines]",
          "374:                 if (!fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,",
          "375:                             flags, min, max))",
          "376:                     return 0;",
          "380:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen,",
          "381:                             value, 16, min, max, flags | DP_F_NUM))",
          "382:                     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "394:                 }",
          "395:                 break;",
          "396:             case '%':",
          "398:                 break;",
          "399:             case 'w':",
          "",
          "[Removed Lines]",
          "397:                 doapr_outch(sbuffer, buffer, &currlen, maxlen, ch);",
          "",
          "[Added Lines]",
          "404:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))",
          "405:                     return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "419:     if (*truncated)",
          "420:         currlen = *maxlen - 1;",
          "424: }",
          "427: fmtstr(char **sbuffer,",
          "428:        char **buffer,",
          "429:        size_t *currlen,",
          "430:        size_t *maxlen, const char *value, int flags, int min, int max)",
          "431: {",
          "433:     int cnt = 0;",
          "435:     if (value == 0)",
          "436:         value = \"<NULL>\";",
          "438:     padlen = min - strln;",
          "440:         padlen = 0;",
          "441:     if (flags & DP_F_MINUS)",
          "442:         padlen = -padlen;",
          "444:     while ((padlen > 0) && (cnt < max)) {",
          "446:         --padlen;",
          "447:         ++cnt;",
          "448:     }",
          "449:     while (*value && (cnt < max)) {",
          "451:         ++cnt;",
          "452:     }",
          "453:     while ((padlen < 0) && (cnt < max)) {",
          "455:         ++padlen;",
          "456:         ++cnt;",
          "457:     }",
          "458: }",
          "461: fmtint(char **sbuffer,",
          "462:        char **buffer,",
          "463:        size_t *currlen,",
          "",
          "[Removed Lines]",
          "421:     doapr_outch(sbuffer, buffer, &currlen, maxlen, '\\0');",
          "423:     return;",
          "426: static void",
          "432:     int padlen, strln;",
          "437:     for (strln = 0; value[strln]; ++strln) ;",
          "439:     if (padlen < 0)",
          "445:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "450:         doapr_outch(sbuffer, buffer, currlen, maxlen, *value++);",
          "454:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "460: static void",
          "",
          "[Added Lines]",
          "429:     if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, '\\0'))",
          "430:         return 0;",
          "432:     return 1;",
          "435: static int",
          "441:     int padlen;",
          "442:     size_t strln;",
          "448:     strln = strlen(value);",
          "449:     if (strln > INT_MAX)",
          "450:         strln = INT_MAX;",
          "453:     if (min < 0 || padlen < 0)",
          "459:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "460:             return 0;",
          "465:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *value++))",
          "466:             return 0;",
          "470:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "471:             return 0;",
          "475:     return 1;",
          "478: static int",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "519:     while (spadlen > 0) {",
          "521:         --spadlen;",
          "522:     }",
          "525:     if (signvalue)",
          "529:     while (*prefix) {",
          "531:         prefix++;",
          "532:     }",
          "535:     if (zpadlen > 0) {",
          "536:         while (zpadlen > 0) {",
          "538:             --zpadlen;",
          "539:         }",
          "540:     }",
          "546:     while (spadlen < 0) {",
          "548:         ++spadlen;",
          "549:     }",
          "551: }",
          "553: static LDOUBLE abs_val(LDOUBLE value)",
          "",
          "[Removed Lines]",
          "520:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "526:         doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
          "530:         doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix);",
          "537:             doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
          "542:     while (place > 0)",
          "543:         doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]);",
          "547:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "550:     return;",
          "",
          "[Added Lines]",
          "538:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "539:             return 0;",
          "545:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
          "546:             return 0;",
          "550:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix))",
          "551:             return 0;",
          "558:             if(!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
          "559:                 return 0;",
          "564:     while (place > 0) {",
          "565:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]))",
          "566:             return 0;",
          "567:     }",
          "571:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "572:             return 0;",
          "575:     return 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "578:     return intpart;",
          "579: }",
          "582: fmtfp(char **sbuffer,",
          "583:       char **buffer,",
          "584:       size_t *currlen,",
          "",
          "[Removed Lines]",
          "581: static void",
          "",
          "[Added Lines]",
          "606: static int",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "658:     if ((flags & DP_F_ZERO) && (padlen > 0)) {",
          "659:         if (signvalue) {",
          "661:             --padlen;",
          "662:             signvalue = 0;",
          "663:         }",
          "664:         while (padlen > 0) {",
          "666:             --padlen;",
          "667:         }",
          "668:     }",
          "669:     while (padlen > 0) {",
          "671:         --padlen;",
          "672:     }",
          "683:     if (max > 0 || (flags & DP_F_NUM)) {",
          "688:     }",
          "689:     while (zpadlen > 0) {",
          "691:         --zpadlen;",
          "692:     }",
          "694:     while (padlen < 0) {",
          "696:         ++padlen;",
          "697:     }",
          "698: }",
          "701: doapr_outch(char **sbuffer,",
          "702:             char **buffer, size_t *currlen, size_t *maxlen, int c)",
          "703: {",
          "",
          "[Removed Lines]",
          "660:             doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
          "665:             doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
          "670:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "673:     if (signvalue)",
          "674:         doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
          "676:     while (iplace > 0)",
          "677:         doapr_outch(sbuffer, buffer, currlen, maxlen, iconvert[--iplace]);",
          "684:         doapr_outch(sbuffer, buffer, currlen, maxlen, '.');",
          "686:         while (fplace > 0)",
          "687:             doapr_outch(sbuffer, buffer, currlen, maxlen, fconvert[--fplace]);",
          "690:         doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
          "695:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "700: static void",
          "",
          "[Added Lines]",
          "685:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
          "686:                 return 0;",
          "691:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
          "692:                 return 0;",
          "697:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "698:             return 0;",
          "701:     if (signvalue && !doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
          "702:         return 0;",
          "704:     while (iplace > 0) {",
          "705:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, iconvert[--iplace]))",
          "706:             return 0;",
          "707:     }",
          "714:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '.'))",
          "715:             return 0;",
          "717:         while (fplace > 0) {",
          "718:             if(!doapr_outch(sbuffer, buffer, currlen, maxlen,",
          "719:                             fconvert[--fplace]))",
          "720:                 return 0;",
          "721:         }",
          "724:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
          "725:             return 0;",
          "730:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "731:             return 0;",
          "734:     return 1;",
          "737: #define BUFFER_INC  1024",
          "739: static int",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "708:     assert(*currlen <= *maxlen);",
          "710:     if (buffer && *currlen == *maxlen) {",
          "712:         if (*buffer == NULL) {",
          "718:             if (*currlen > 0) {",
          "719:                 assert(*sbuffer != NULL);",
          "720:                 memcpy(*buffer, *sbuffer, *currlen);",
          "721:             }",
          "723:         } else {",
          "729:         }",
          "730:     }",
          "",
          "[Removed Lines]",
          "714:             if (!*buffer) {",
          "716:                 return;",
          "717:             }",
          "725:             if (!*buffer) {",
          "727:                 return;",
          "728:             }",
          "",
          "[Added Lines]",
          "750:         if (*maxlen > INT_MAX - BUFFER_INC)",
          "751:             return 0;",
          "756:             if (*buffer == NULL)",
          "757:                 return 0;",
          "764:             char *tmpbuf;",
          "765:             tmpbuf = OPENSSL_realloc(*buffer, *maxlen);",
          "766:             if (tmpbuf == NULL)",
          "767:                 return 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "736:             (*buffer)[(*currlen)++] = (char)c;",
          "737:     }",
          "740: }",
          "",
          "[Removed Lines]",
          "739:     return;",
          "",
          "[Added Lines]",
          "779:     return 1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "769:     dynbuf = NULL;",
          "770:     CRYPTO_push_info(\"doapr()\");",
          "772:     if (dynbuf) {",
          "773:         ret = BIO_write(bio, dynbuf, (int)retlen);",
          "774:         OPENSSL_free(dynbuf);",
          "",
          "[Removed Lines]",
          "771:     _dopr(&hugebufp, &dynbuf, &hugebufsize, &retlen, &ignored, format, args);",
          "",
          "[Added Lines]",
          "811:     if (!_dopr(&hugebufp, &dynbuf, &hugebufsize, &retlen, &ignored, format,",
          "812:                 args)) {",
          "813:         OPENSSL_free(dynbuf);",
          "814:         return -1;",
          "815:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "803:     size_t retlen;",
          "804:     int truncated;",
          "808:     if (truncated)",
          "",
          "[Removed Lines]",
          "806:     _dopr(&buf, NULL, &n, &retlen, &truncated, format, args);",
          "",
          "[Added Lines]",
          "850:     if(!_dopr(&buf, NULL, &n, &retlen, &truncated, format, args))",
          "851:         return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "578b956fe741bf8e84055547b1e83c28dd902c73",
      "candidate_info": {
        "commit_hash": "578b956fe741bf8e84055547b1e83c28dd902c73",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/578b956fe741bf8e84055547b1e83c28dd902c73",
        "files": [
          "crypto/bio/b_print.c"
        ],
        "message": "Fix memory issues in BIO_*printf functions\n\nThe internal |fmtstr| function used in processing a \"%s\" format string\nin the BIO_*printf functions could overflow while calculating the length\nof a string and cause an OOB read when printing very long strings.\n\nAdditionally the internal |doapr_outch| function can attempt to write to\nan OOB memory location (at an offset from the NULL pointer) in the event of\na memory allocation failure. In 1.0.2 and below this could be caused where\nthe size of a buffer to be allocated is greater than INT_MAX. E.g. this\ncould be in processing a very long \"%s\" format string. Memory leaks can also\noccur.\n\nThese issues will only occur on certain platforms where sizeof(size_t) >\nsizeof(int). E.g. many 64 bit systems. The first issue may mask the second\nissue dependent on compiler behaviour.\n\nThese problems could enable attacks where large amounts of untrusted data\nis passed to the BIO_*printf functions. If applications use these functions\nin this way then they could be vulnerable. OpenSSL itself uses these\nfunctions when printing out human-readable dumps of ASN.1 data. Therefore\napplications that print this data could be vulnerable if the data is from\nuntrusted sources. OpenSSL command line applications could also be\nvulnerable where they print out ASN.1 data, or if untrusted data is passed\nas command line arguments.\n\nLibssl is not considered directly vulnerable. Additionally certificates etc\nreceived via remote connections via libssl are also unlikely to be able to\ntrigger these issues because of message size limits enforced within libssl.\n\nCVE-2016-0799\n\nIssue reported by Guido Vranken.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
        "before_after_code_files": [
          "crypto/bio/b_print.c||crypto/bio/b_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ],
          "candidate": [
            "crypto/bio/b_print.c||crypto/bio/b_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bio/b_print.c||crypto/bio/b_print.c": [
          "File: crypto/bio/b_print.c -> crypto/bio/b_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: # define LLONG long",
          "126: #endif",
          "140: #define DP_S_DEFAULT    0",
          "",
          "[Removed Lines]",
          "128: static void fmtstr(char **, char **, size_t *, size_t *,",
          "129:                    const char *, int, int, int);",
          "130: static void fmtint(char **, char **, size_t *, size_t *,",
          "131:                    LLONG, int, int, int, int);",
          "132: static void fmtfp(char **, char **, size_t *, size_t *,",
          "133:                   LDOUBLE, int, int, int);",
          "134: static void doapr_outch(char **, char **, size_t *, size_t *, int);",
          "135: static void _dopr(char **sbuffer, char **buffer,",
          "136:                   size_t *maxlen, size_t *retlen, int *truncated,",
          "137:                   const char *format, va_list args);",
          "",
          "[Added Lines]",
          "128: static int fmtstr(char **, char **, size_t *, size_t *,",
          "129:                   const char *, int, int, int);",
          "130: static int fmtint(char **, char **, size_t *, size_t *,",
          "131:                   LLONG, int, int, int, int);",
          "132: static int fmtfp(char **, char **, size_t *, size_t *,",
          "133:                  LDOUBLE, int, int, int);",
          "134: static int doapr_outch(char **, char **, size_t *, size_t *, int);",
          "135: static int _dopr(char **sbuffer, char **buffer,",
          "136:                  size_t *maxlen, size_t *retlen, int *truncated,",
          "137:                  const char *format, va_list args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: #define char_to_int(p) (p - '0')",
          "166: #define OSSL_MAX(p,q) ((p >= q) ? p : q)",
          "169: _dopr(char **sbuffer,",
          "170:       char **buffer,",
          "171:       size_t *maxlen,",
          "",
          "[Removed Lines]",
          "168: static void",
          "",
          "[Added Lines]",
          "168: static int",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:             if (ch == '%')",
          "197:                 state = DP_S_FLAGS;",
          "198:             else",
          "200:             ch = *format++;",
          "201:             break;",
          "202:         case DP_S_FLAGS:",
          "",
          "[Removed Lines]",
          "199:                 doapr_outch(sbuffer, buffer, &currlen, maxlen, ch);",
          "",
          "[Added Lines]",
          "199:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))",
          "200:                     return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:                     value = va_arg(args, int);",
          "303:                     break;",
          "304:                 }",
          "307:                 break;",
          "308:             case 'X':",
          "309:                 flags |= DP_F_UP;",
          "",
          "[Removed Lines]",
          "305:                 fmtint(sbuffer, buffer, &currlen, maxlen,",
          "306:                        value, 10, min, max, flags);",
          "",
          "[Added Lines]",
          "306:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value, 10, min,",
          "307:                             max, flags))",
          "308:                     return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "326:                     value = (LLONG) va_arg(args, unsigned int);",
          "327:                     break;",
          "328:                 }",
          "332:                 break;",
          "333:             case 'f':",
          "334:                 if (cflags == DP_C_LDOUBLE)",
          "335:                     fvalue = va_arg(args, LDOUBLE);",
          "336:                 else",
          "337:                     fvalue = va_arg(args, double);",
          "340:                 break;",
          "341:             case 'E':",
          "342:                 flags |= DP_F_UP;",
          "",
          "[Removed Lines]",
          "329:                 fmtint(sbuffer, buffer, &currlen, maxlen, value,",
          "330:                        ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),",
          "331:                        min, max, flags);",
          "338:                 fmtfp(sbuffer, buffer, &currlen, maxlen,",
          "339:                       fvalue, min, max, flags);",
          "",
          "[Added Lines]",
          "331:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value,",
          "332:                             ch == 'o' ? 8 : (ch == 'u' ? 10 : 16),",
          "333:                             min, max, flags))",
          "334:                     return 0;",
          "341:                 if (!fmtfp(sbuffer, buffer, &currlen, maxlen, fvalue, min, max,",
          "342:                            flags))",
          "343:                     return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "355:                     fvalue = va_arg(args, double);",
          "356:                 break;",
          "357:             case 'c':",
          "360:                 break;",
          "361:             case 's':",
          "362:                 strvalue = va_arg(args, char *);",
          "",
          "[Removed Lines]",
          "358:                 doapr_outch(sbuffer, buffer, &currlen, maxlen,",
          "359:                             va_arg(args, int));",
          "",
          "[Added Lines]",
          "362:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen,",
          "363:                             va_arg(args, int)))",
          "364:                     return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:                     else",
          "367:                         max = *maxlen;",
          "368:                 }",
          "371:                 break;",
          "372:             case 'p':",
          "373:                 value = (long)va_arg(args, void *);",
          "376:                 break;",
          "378:                 if (cflags == DP_C_SHORT) {",
          "",
          "[Removed Lines]",
          "369:                 fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,",
          "370:                        flags, min, max);",
          "374:                 fmtint(sbuffer, buffer, &currlen, maxlen,",
          "375:                        value, 16, min, max, flags | DP_F_NUM);",
          "",
          "[Added Lines]",
          "374:                 if (!fmtstr(sbuffer, buffer, &currlen, maxlen, strvalue,",
          "375:                             flags, min, max))",
          "376:                     return 0;",
          "380:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen,",
          "381:                             value, 16, min, max, flags | DP_F_NUM))",
          "382:                     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "394:                 }",
          "395:                 break;",
          "396:             case '%':",
          "398:                 break;",
          "399:             case 'w':",
          "",
          "[Removed Lines]",
          "397:                 doapr_outch(sbuffer, buffer, &currlen, maxlen, ch);",
          "",
          "[Added Lines]",
          "404:                 if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, ch))",
          "405:                     return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "419:     if (*truncated)",
          "420:         currlen = *maxlen - 1;",
          "424: }",
          "427: fmtstr(char **sbuffer,",
          "428:        char **buffer,",
          "429:        size_t *currlen,",
          "430:        size_t *maxlen, const char *value, int flags, int min, int max)",
          "431: {",
          "433:     int cnt = 0;",
          "435:     if (value == 0)",
          "436:         value = \"<NULL>\";",
          "438:     padlen = min - strln;",
          "440:         padlen = 0;",
          "441:     if (flags & DP_F_MINUS)",
          "442:         padlen = -padlen;",
          "444:     while ((padlen > 0) && (cnt < max)) {",
          "446:         --padlen;",
          "447:         ++cnt;",
          "448:     }",
          "449:     while (*value && (cnt < max)) {",
          "451:         ++cnt;",
          "452:     }",
          "453:     while ((padlen < 0) && (cnt < max)) {",
          "455:         ++padlen;",
          "456:         ++cnt;",
          "457:     }",
          "458: }",
          "461: fmtint(char **sbuffer,",
          "462:        char **buffer,",
          "463:        size_t *currlen,",
          "",
          "[Removed Lines]",
          "421:     doapr_outch(sbuffer, buffer, &currlen, maxlen, '\\0');",
          "423:     return;",
          "426: static void",
          "432:     int padlen, strln;",
          "437:     for (strln = 0; value[strln]; ++strln) ;",
          "439:     if (padlen < 0)",
          "445:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "450:         doapr_outch(sbuffer, buffer, currlen, maxlen, *value++);",
          "454:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "460: static void",
          "",
          "[Added Lines]",
          "429:     if(!doapr_outch(sbuffer, buffer, &currlen, maxlen, '\\0'))",
          "430:         return 0;",
          "432:     return 1;",
          "435: static int",
          "441:     int padlen;",
          "442:     size_t strln;",
          "448:     strln = strlen(value);",
          "449:     if (strln > INT_MAX)",
          "450:         strln = INT_MAX;",
          "453:     if (min < 0 || padlen < 0)",
          "459:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "460:             return 0;",
          "465:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *value++))",
          "466:             return 0;",
          "470:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "471:             return 0;",
          "475:     return 1;",
          "478: static int",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "519:     while (spadlen > 0) {",
          "521:         --spadlen;",
          "522:     }",
          "525:     if (signvalue)",
          "529:     while (*prefix) {",
          "531:         prefix++;",
          "532:     }",
          "535:     if (zpadlen > 0) {",
          "536:         while (zpadlen > 0) {",
          "538:             --zpadlen;",
          "539:         }",
          "540:     }",
          "546:     while (spadlen < 0) {",
          "548:         ++spadlen;",
          "549:     }",
          "551: }",
          "553: static LDOUBLE abs_val(LDOUBLE value)",
          "",
          "[Removed Lines]",
          "520:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "526:         doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
          "530:         doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix);",
          "537:             doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
          "542:     while (place > 0)",
          "543:         doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]);",
          "547:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "550:     return;",
          "",
          "[Added Lines]",
          "538:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "539:             return 0;",
          "545:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
          "546:             return 0;",
          "550:         if(!doapr_outch(sbuffer, buffer, currlen, maxlen, *prefix))",
          "551:             return 0;",
          "558:             if(!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
          "559:                 return 0;",
          "564:     while (place > 0) {",
          "565:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, convert[--place]))",
          "566:             return 0;",
          "567:     }",
          "571:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "572:             return 0;",
          "575:     return 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "578:     return intpart;",
          "579: }",
          "582: fmtfp(char **sbuffer,",
          "583:       char **buffer,",
          "584:       size_t *currlen,",
          "",
          "[Removed Lines]",
          "581: static void",
          "",
          "[Added Lines]",
          "606: static int",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "658:     if ((flags & DP_F_ZERO) && (padlen > 0)) {",
          "659:         if (signvalue) {",
          "661:             --padlen;",
          "662:             signvalue = 0;",
          "663:         }",
          "664:         while (padlen > 0) {",
          "666:             --padlen;",
          "667:         }",
          "668:     }",
          "669:     while (padlen > 0) {",
          "671:         --padlen;",
          "672:     }",
          "683:     if (max > 0 || (flags & DP_F_NUM)) {",
          "688:     }",
          "689:     while (zpadlen > 0) {",
          "691:         --zpadlen;",
          "692:     }",
          "694:     while (padlen < 0) {",
          "696:         ++padlen;",
          "697:     }",
          "698: }",
          "701: doapr_outch(char **sbuffer,",
          "702:             char **buffer, size_t *currlen, size_t *maxlen, int c)",
          "703: {",
          "",
          "[Removed Lines]",
          "660:             doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
          "665:             doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
          "670:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "673:     if (signvalue)",
          "674:         doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue);",
          "676:     while (iplace > 0)",
          "677:         doapr_outch(sbuffer, buffer, currlen, maxlen, iconvert[--iplace]);",
          "684:         doapr_outch(sbuffer, buffer, currlen, maxlen, '.');",
          "686:         while (fplace > 0)",
          "687:             doapr_outch(sbuffer, buffer, currlen, maxlen, fconvert[--fplace]);",
          "690:         doapr_outch(sbuffer, buffer, currlen, maxlen, '0');",
          "695:         doapr_outch(sbuffer, buffer, currlen, maxlen, ' ');",
          "700: static void",
          "",
          "[Added Lines]",
          "685:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
          "686:                 return 0;",
          "691:             if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
          "692:                 return 0;",
          "697:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "698:             return 0;",
          "701:     if (signvalue && !doapr_outch(sbuffer, buffer, currlen, maxlen, signvalue))",
          "702:         return 0;",
          "704:     while (iplace > 0) {",
          "705:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, iconvert[--iplace]))",
          "706:             return 0;",
          "707:     }",
          "714:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '.'))",
          "715:             return 0;",
          "717:         while (fplace > 0) {",
          "718:             if(!doapr_outch(sbuffer, buffer, currlen, maxlen,",
          "719:                             fconvert[--fplace]))",
          "720:                 return 0;",
          "721:         }",
          "724:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, '0'))",
          "725:             return 0;",
          "730:         if (!doapr_outch(sbuffer, buffer, currlen, maxlen, ' '))",
          "731:             return 0;",
          "734:     return 1;",
          "737: #define BUFFER_INC  1024",
          "739: static int",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "708:     assert(*currlen <= *maxlen);",
          "710:     if (buffer && *currlen == *maxlen) {",
          "712:         if (*buffer == NULL) {",
          "718:             if (*currlen > 0) {",
          "719:                 assert(*sbuffer != NULL);",
          "720:                 memcpy(*buffer, *sbuffer, *currlen);",
          "721:             }",
          "723:         } else {",
          "729:         }",
          "730:     }",
          "",
          "[Removed Lines]",
          "714:             if (!*buffer) {",
          "716:                 return;",
          "717:             }",
          "725:             if (!*buffer) {",
          "727:                 return;",
          "728:             }",
          "",
          "[Added Lines]",
          "750:         if (*maxlen > INT_MAX - BUFFER_INC)",
          "751:             return 0;",
          "756:             if (*buffer == NULL)",
          "757:                 return 0;",
          "764:             char *tmpbuf;",
          "765:             tmpbuf = OPENSSL_realloc(*buffer, *maxlen);",
          "766:             if (tmpbuf == NULL)",
          "767:                 return 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "736:             (*buffer)[(*currlen)++] = (char)c;",
          "737:     }",
          "740: }",
          "",
          "[Removed Lines]",
          "739:     return;",
          "",
          "[Added Lines]",
          "779:     return 1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "769:     dynbuf = NULL;",
          "770:     CRYPTO_push_info(\"doapr()\");",
          "772:     if (dynbuf) {",
          "773:         ret = BIO_write(bio, dynbuf, (int)retlen);",
          "774:         OPENSSL_free(dynbuf);",
          "",
          "[Removed Lines]",
          "771:     _dopr(&hugebufp, &dynbuf, &hugebufsize, &retlen, &ignored, format, args);",
          "",
          "[Added Lines]",
          "811:     if (!_dopr(&hugebufp, &dynbuf, &hugebufsize, &retlen, &ignored, format,",
          "812:                 args)) {",
          "813:         OPENSSL_free(dynbuf);",
          "814:         return -1;",
          "815:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "803:     size_t retlen;",
          "804:     int truncated;",
          "808:     if (truncated)",
          "",
          "[Removed Lines]",
          "806:     _dopr(&buf, NULL, &n, &retlen, &truncated, format, args);",
          "",
          "[Added Lines]",
          "850:     if(!_dopr(&buf, NULL, &n, &retlen, &truncated, format, args))",
          "851:         return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}