{
  "cve_id": "CVE-2017-18344",
  "cve_desc": "The timer_create syscall implementation in kernel/time/posix-timers.c in the Linux kernel before 4.14.8 doesn't properly validate the sigevent->sigev_notify field, which leads to out-of-bounds access in the show_timer function (called when /proc/$PID/timers is read). This allows userspace applications to read arbitrary kernel memory (on a kernel built with CONFIG_POSIX_TIMERS and CONFIG_CHECKPOINT_RESTORE).",
  "repo": "torvalds/linux",
  "patch_hash": "cef31d9af908243421258f1df35a4a644604efbe",
  "patch_info": {
    "commit_hash": "cef31d9af908243421258f1df35a4a644604efbe",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/cef31d9af908243421258f1df35a4a644604efbe",
    "files": [
      "kernel/time/posix-timers.c"
    ],
    "message": "posix-timer: Properly check sigevent->sigev_notify\n\ntimer_create() specifies via sigevent->sigev_notify the signal delivery for\nthe new timer. The valid modes are SIGEV_NONE, SIGEV_SIGNAL, SIGEV_THREAD\nand (SIGEV_SIGNAL | SIGEV_THREAD_ID).\n\nThe sanity check in good_sigevent() is only checking the valid combination\nfor the SIGEV_THREAD_ID bit, i.e. SIGEV_SIGNAL, but if SIGEV_THREAD_ID is\nnot set it accepts any random value.\n\nThis has no real effects on the posix timer and signal delivery code, but\nit affects show_timer() which handles the output of /proc/$PID/timers. That\nfunction uses a string array to pretty print sigev_notify. The access to\nthat array has no bound checks, so random sigev_notify cause access beyond\nthe array bounds.\n\nAdd proper checks for the valid notify modes and remove the SIGEV_THREAD_ID\nmasking from various code pathes as SIGEV_NONE can never be set in\ncombination with SIGEV_THREAD_ID.\n\nReported-by: Eric Biggers <ebiggers3@gmail.com>\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nReported-by: Alexey Dobriyan <adobriyan@gmail.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: John Stultz <john.stultz@linaro.org>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
    ]
  },
  "patch_diff": {
    "kernel/time/posix-timers.c||kernel/time/posix-timers.c": [
      "File: kernel/time/posix-timers.c -> kernel/time/posix-timers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "434: {",
      "435:  struct task_struct *rtn = current->group_leader;",
      "441:   return NULL;",
      "448: }",
      "450: static struct k_itimer * alloc_posix_timer(void)",
      "",
      "[Removed Lines]",
      "437:  if ((event->sigev_notify & SIGEV_THREAD_ID ) &&",
      "438:   (!(rtn = find_task_by_vpid(event->sigev_notify_thread_id)) ||",
      "439:    !same_thread_group(rtn, current) ||",
      "440:    (event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_SIGNAL))",
      "443:  if (((event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE) &&",
      "444:      ((event->sigev_signo <= 0) || (event->sigev_signo > SIGRTMAX)))",
      "445:   return NULL;",
      "447:  return task_pid(rtn);",
      "",
      "[Added Lines]",
      "437:  switch (event->sigev_notify) {",
      "438:  case SIGEV_SIGNAL | SIGEV_THREAD_ID:",
      "439:   rtn = find_task_by_vpid(event->sigev_notify_thread_id);",
      "440:   if (!rtn || !same_thread_group(rtn, current))",
      "441:    return NULL;",
      "443:  case SIGEV_SIGNAL:",
      "444:  case SIGEV_THREAD:",
      "445:   if (event->sigev_signo <= 0 || event->sigev_signo > SIGRTMAX)",
      "446:    return NULL;",
      "448:  case SIGEV_NONE:",
      "449:   return task_pid(rtn);",
      "450:  default:",
      "452:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "669:  struct timespec64 ts64;",
      "670:  bool sig_none;",
      "673:  iv = timr->it_interval;",
      "",
      "[Removed Lines]",
      "672:  sig_none = (timr->it_sigev_notify & ~SIGEV_THREAD_ID) == SIGEV_NONE;",
      "",
      "[Added Lines]",
      "677:  sig_none = timr->it_sigev_notify == SIGEV_NONE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "857:  timr->it_interval = timespec64_to_ktime(new_setting->it_interval);",
      "858:  expires = timespec64_to_ktime(new_setting->it_value);",
      "861:  kc->timer_arm(timr, expires, flags & TIMER_ABSTIME, sigev_none);",
      "862:  timr->it_active = !sigev_none;",
      "",
      "[Removed Lines]",
      "859:  sigev_none = (timr->it_sigev_notify & ~SIGEV_THREAD_ID) == SIGEV_NONE;",
      "",
      "[Added Lines]",
      "864:  sigev_none = timr->it_sigev_notify == SIGEV_NONE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2118e1f53f6f0973a1d9a6a7dc9296959bf39ec0",
      "candidate_info": {
        "commit_hash": "2118e1f53f6f0973a1d9a6a7dc9296959bf39ec0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2118e1f53f6f0973a1d9a6a7dc9296959bf39ec0",
        "files": [
          "kernel/time/posix-timers.c"
        ],
        "message": "posix-timers: Noralize good_sigevent\n\nIn good_sigevent directly compute the default return value as\n\"task_tgid(current)\".  This is exactly the same as\n\"task_pid(current->group_leader)\" but written more clearly.\n\nIn the thread case first compute the thread's pid.  Then veify that\nattached to that pid is a thread of the current thread group.\n\nThis has the net effect of making the code a little clearer, and\nmaking it obvious that posix timers never look up a process by a the\npid of a thread.\n\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
        "before_after_code_files": [
          "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
          ],
          "candidate": [
            "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/time/posix-timers.c||kernel/time/posix-timers.c": [
          "File: kernel/time/posix-timers.c -> kernel/time/posix-timers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434: static struct pid *good_sigevent(sigevent_t * event)",
          "435: {",
          "438:  switch (event->sigev_notify) {",
          "439:  case SIGEV_SIGNAL | SIGEV_THREAD_ID:",
          "441:   if (!rtn || !same_thread_group(rtn, current))",
          "442:    return NULL;",
          "",
          "[Removed Lines]",
          "436:  struct task_struct *rtn = current->group_leader;",
          "440:   rtn = find_task_by_vpid(event->sigev_notify_thread_id);",
          "",
          "[Added Lines]",
          "436:  struct pid *pid = task_tgid(current);",
          "437:  struct task_struct *rtn;",
          "441:   pid = find_vpid(event->sigev_notify_thread_id);",
          "442:   rtn = pid_task(pid, PIDTYPE_PID);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:    return NULL;",
          "449:  case SIGEV_NONE:",
          "451:  default:",
          "452:   return NULL;",
          "453:  }",
          "",
          "[Removed Lines]",
          "450:   return task_pid(rtn);",
          "",
          "[Added Lines]",
          "452:   return pid;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91d57bae08689199c8acc77a8b3b41150cafab1c",
      "candidate_info": {
        "commit_hash": "91d57bae08689199c8acc77a8b3b41150cafab1c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/91d57bae08689199c8acc77a8b3b41150cafab1c",
        "files": [
          "kernel/time/posix-timers.c"
        ],
        "message": "posix-timers: Make use of forward/remaining callbacks\n\nReplace the hrtimer calls by calls to the new forward/remaining kclock\ncallbacks and move the hrtimer specific implementation into the\ncorresponding callback functions.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: John Stultz <john.stultz@linaro.org>\nLink: http://lkml.kernel.org/r/20170530211657.121437232@linutronix.de",
        "before_after_code_files": [
          "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
          ],
          "candidate": [
            "kernel/time/posix-timers.c||kernel/time/posix-timers.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/time/posix-timers.c||kernel/time/posix-timers.c": [
          "File: kernel/time/posix-timers.c -> kernel/time/posix-timers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:  return NULL;",
          "608: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610: static ktime_t common_hrtimer_remaining(struct k_itimer *timr, ktime_t now)",
          "611: {",
          "612:  struct hrtimer *timer = &timr->it.real.timer;",
          "614:  return __hrtimer_expires_remaining_adjusted(timer, now);",
          "615: }",
          "617: static int common_hrtimer_forward(struct k_itimer *timr, ktime_t now)",
          "618: {",
          "619:  struct hrtimer *timer = &timr->it.real.timer;",
          "621:  return (int)hrtimer_forward(timer, now, timr->it_interval);",
          "622: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "626: static void",
          "627: common_timer_get(struct k_itimer *timr, struct itimerspec64 *cur_setting)",
          "628: {",
          "629:  ktime_t now, remaining, iv;",
          "632:  memset(cur_setting, 0, sizeof(*cur_setting));",
          "634:  iv = timr->it_interval;",
          "638:   cur_setting->it_interval = ktime_to_timespec64(iv);",
          "656:  if (remaining <= 0) {",
          "662:    cur_setting->it_value.tv_nsec = 1;",
          "664:   cur_setting->it_value = ktime_to_timespec64(remaining);",
          "665: }",
          "",
          "[Removed Lines]",
          "630:  struct hrtimer *timer = &timr->it.real.timer;",
          "637:  if (iv)",
          "639:  else if (!hrtimer_active(timer) &&",
          "640:    (timr->it_sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE)",
          "641:   return;",
          "643:  now = timer->base->get_time();",
          "650:  if (iv && (timr->it_requeue_pending & REQUEUE_PENDING ||",
          "651:      (timr->it_sigev_notify & ~SIGEV_THREAD_ID) == SIGEV_NONE))",
          "652:   timr->it_overrun += (unsigned int) hrtimer_forward(timer, now, iv);",
          "654:  remaining = __hrtimer_expires_remaining_adjusted(timer, now);",
          "661:   if ((timr->it_sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE)",
          "663:  } else",
          "",
          "[Added Lines]",
          "643:  const struct k_clock *kc = timr->kclock;",
          "645:  struct timespec64 ts64;",
          "646:  bool sig_none;",
          "650:  sig_none = (timr->it_sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE;",
          "654:  if (iv) {",
          "656:  } else if (!timr->it_active) {",
          "661:   if (!sig_none)",
          "662:    return;",
          "663:  }",
          "669:  kc->clock_get(timr->it_clock, &ts64);",
          "670:  now = timespec64_to_ktime(ts64);",
          "676:  if (iv && (timr->it_requeue_pending & REQUEUE_PENDING || sig_none))",
          "677:   timr->it_overrun += kc->timer_forward(timr, now);",
          "679:  remaining = kc->timer_remaining(timr, now);",
          "686:   if (!sig_none)",
          "688:  } else {",
          "690:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1049:  .timer_get = common_timer_get,",
          "1050:  .timer_del = common_timer_del,",
          "1051:  .timer_rearm = common_hrtimer_rearm,",
          "1052: };",
          "1054: static const struct k_clock clock_monotonic = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:  .timer_forward = common_hrtimer_forward,",
          "1079:  .timer_remaining= common_hrtimer_remaining,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1061:  .timer_get = common_timer_get,",
          "1062:  .timer_del = common_timer_del,",
          "1063:  .timer_rearm = common_hrtimer_rearm,",
          "1064: };",
          "1066: static const struct k_clock clock_monotonic_raw = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092:  .timer_forward = common_hrtimer_forward,",
          "1093:  .timer_remaining= common_hrtimer_remaining,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1088:  .timer_get = common_timer_get,",
          "1089:  .timer_del = common_timer_del,",
          "1090:  .timer_rearm = common_hrtimer_rearm,",
          "1091: };",
          "1093: static const struct k_clock clock_boottime = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1121:  .timer_forward = common_hrtimer_forward,",
          "1122:  .timer_remaining= common_hrtimer_remaining,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1100:  .timer_get = common_timer_get,",
          "1101:  .timer_del = common_timer_del,",
          "1102:  .timer_rearm = common_hrtimer_rearm,",
          "1103: };",
          "1105: static const struct k_clock * const posix_clocks[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1135:  .timer_forward = common_hrtimer_forward,",
          "1136:  .timer_remaining= common_hrtimer_remaining,",
          "",
          "---------------"
        ]
      }
    }
  ]
}