{
  "cve_id": "CVE-2017-5511",
  "cve_desc": "coders/psd.c in ImageMagick allows remote attackers to have unspecified impact by leveraging an improper cast, which triggers a heap-based buffer overflow.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
  "patch_info": {
    "commit_hash": "c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
    "files": [
      "coders/psd.c"
    ],
    "message": "Fix improper cast that could cause an overflow as demonstrated in #347.",
    "before_after_code_files": [
      "coders/psd.c||coders/psd.c"
    ]
  },
  "patch_diff": {
    "coders/psd.c||coders/psd.c": [
      "File: coders/psd.c -> coders/psd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1691:                     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
      "1692:                       \"        source(%x), dest(%x)\",(unsigned int)",
      "1693:                       blend_source,(unsigned int) blend_dest);",
      "1695:               }",
      "1697:               Layer name.",
      "",
      "[Removed Lines]",
      "1694:                 }",
      "",
      "[Added Lines]",
      "1694:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6661998e7693ff84516ebb520a8db0f262b2444b",
      "candidate_info": {
        "commit_hash": "6661998e7693ff84516ebb520a8db0f262b2444b",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/6661998e7693ff84516ebb520a8db0f262b2444b",
        "files": [
          "coders/psd.c"
        ],
        "message": "Some of the additional layer information will be preserved when converting from PSD to PSD.",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   Define declaractions.",
          "86: #define MaxPSDChannels  56",
          "87: #define PSDQuantum(x) (((ssize_t) (x)+1) & -2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #define PSDQuantum(x) (((ssize_t) (x)+1) & -2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     flags,",
          "166:     name[256],",
          "167:     visible;",
          "169:   unsigned short",
          "170:     channels;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   unsigned short",
          "171:     channels;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544:     i;",
          "546:   for (i=0; i<number_layers; i++)",
          "547:   {",
          "548:     if (layer_info[i].image != (Image *) NULL)",
          "549:       layer_info[i].image=DestroyImage(layer_info[i].image);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:   {",
          "552:     if (layer_info[i].image != (Image *) NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1558:                 if (image->debug != MagickFalse)",
          "1559:                   (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1561:                     ((MagickOffsetType) length));",
          "1563:                   We read it, but don't use it...",
          "",
          "[Removed Lines]",
          "1560:                     \"      layer blending ranges: length=%.20g\",(double)",
          "",
          "[Added Lines]",
          "1566:                     \"      layer blending ranges: length=%.20g\",(double)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1570:                     (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1571:                       \"        source(%x), dest(%x)\",(unsigned int)",
          "1572:                       blend_source,(unsigned int) blend_dest);",
          "1574:               }",
          "1576:               Layer name.",
          "",
          "[Removed Lines]",
          "1573:                 }",
          "",
          "[Added Lines]",
          "1579:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1578:             length=(size_t) ReadBlobByte(image);",
          "1579:             combined_length+=length+1;",
          "1580:             if (length > 0)",
          "1581:               (void) ReadBlob(image,(size_t) length++,layer_info[i].name);",
          "1589:             if (image->debug != MagickFalse)",
          "1590:               (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1591:                 \"      unsupported data: length=%.20g\",(double)",
          "1592:                 ((MagickOffsetType) (size-combined_length)));",
          "1593:             if (DiscardBlobBytes(image,(MagickSizeType) (size-combined_length)) == MagickFalse)",
          "1594:               {",
          "1595:                 layer_info=DestroyLayerInfo(layer_info,number_layers);",
          "1596:                 ThrowBinaryException(CorruptImageError,",
          "",
          "[Removed Lines]",
          "1582:             layer_info[i].name[length]='\\0';",
          "1583:             if (image->debug != MagickFalse)",
          "1584:               (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1585:                 \"      layer name: %s\",layer_info[i].name);",
          "1587:                Skip the rest of the variable data until we support it.",
          "",
          "[Added Lines]",
          "1587:               (void) ReadBlob(image,(size_t) length++,layer_info[i].name);",
          "1588:             layer_info[i].name[length]='\\0';",
          "1589:             if (image->debug != MagickFalse)",
          "1590:               (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1596:               {",
          "1597:                 layer_info=DestroyLayerInfo(layer_info,number_layers);",
          "1598:                 ThrowBinaryException(CorruptImageError,",
          "1599:                   \"UnexpectedEndOfFile\",image->filename);",
          "1600:               }",
          "1601:             length=(MagickSizeType) size-combined_length;",
          "1602:             if (length > 0)",
          "1603:               {",
          "1604:                 unsigned char",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1619:           {",
          "1620:             layer_info=DestroyLayerInfo(layer_info,number_layers);",
          "1621:             if (image->debug != MagickFalse)",
          "1622:               (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "1623:                 \"  allocation of image for layer %.20g failed\",(double) i);",
          "1624:             ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:                 \"  allocation of image for layer %.20g failed\",(double) i);",
          "1636:             ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1637:               image->filename);",
          "1638:           }",
          "1640:         if (layer_info[i].info != (StringInfo *) NULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2634:       {",
          "2635:         (void) CopyMagickMemory(q,q+cnt+12,length-(cnt+12)-(q-datum));",
          "2636:         SetStringInfoLength(bim_profile,length-(cnt+12));",
          "2637:         break;",
          "2638:       }",
          "2639:     p+=count;",
          "2640:     if ((count & 0x01) != 0)",
          "2641:       p++;",
          "2642:   }",
          "2643: }",
          "2645: static MagickBooleanType WritePSDImage(const ImageInfo *image_info,",
          "2646:   Image *image,ExceptionInfo *exception)",
          "2647: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2656:         break;",
          "2657:       }",
          "2658:     p+=count;",
          "2659:     if ((count & 0x01) != 0)",
          "2660:       p++;",
          "2661:   }",
          "2662: }",
          "2664: static const StringInfo *FilterAdditionalLayerInformation(Image *image,",
          "2665:   ExceptionInfo *exception)",
          "2666: {",
          "2667: #define PSDKeySize 5",
          "2668: #define PSDAllowedLength 36",
          "2670:   char",
          "2671:     key[PSDKeySize];",
          "2674:   const char",
          "2675:     allowed[PSDAllowedLength][PSDKeySize] = {",
          "2676:       \"blnc\", \"blwh\", \"brit\", \"brst\", \"clbl\", \"clrL\", \"curv\", \"expA\", \"FMsk\",",
          "2677:       \"GdFl\", \"grdm\", \"hue \", \"hue2\", \"infx\", \"knko\", \"lclr\", \"levl\", \"lnsr\",",
          "2678:       \"lfx2\", \"luni\", \"lrFX\", \"lspf\", \"lyid\", \"lyvr\", \"mixr\", \"nvrt\", \"phfl\",",
          "2679:       \"post\", \"PtFl\", \"selc\", \"shpa\", \"sn2P\", \"SoCo\", \"thrs\", \"tsly\", \"vibA\"",
          "2680:     };",
          "2682:   const StringInfo",
          "2685:   MagickBooleanType",
          "2686:     found;",
          "2688:   register size_t",
          "2689:     i;",
          "2691:   size_t",
          "2692:     remaining_length,",
          "2693:     length;",
          "2695:   StringInfo",
          "2698:   unsigned char",
          "2701:   unsigned int",
          "2702:     size;",
          "2704:   info=GetImageProfile(image,PSDAdditionalInfo);",
          "2705:   if (info == (const StringInfo *) NULL)",
          "2706:     return((const StringInfo *) NULL);",
          "2707:   length=GetStringInfoLength(info);",
          "2708:   p=GetStringInfoDatum(info);",
          "2709:   remaining_length=length;",
          "2710:   length=0;",
          "2711:   while (remaining_length >= 12)",
          "2712:   {",
          "2714:     p+=4;",
          "2715:     key[0]=(*p++);",
          "2716:     key[1]=(*p++);",
          "2717:     key[2]=(*p++);",
          "2718:     key[3]=(*p++);",
          "2719:     key[4]='\\0';",
          "2720:     size=(unsigned int) (*p++) << 24;",
          "2721:     size|=(unsigned int) (*p++) << 16;",
          "2722:     size|=(unsigned int) (*p++) << 8;",
          "2723:     size|=(unsigned int) (*p++);",
          "2724:     size=size & 0xffffffff;",
          "2725:     remaining_length-=12;",
          "2726:     if ((size_t) size > remaining_length)",
          "2727:       return((const StringInfo *) NULL);",
          "2728:     found=MagickFalse;",
          "2729:     for (i=0; i < PSDAllowedLength; i++)",
          "2730:     {",
          "2731:       if (LocaleNCompare(key,allowed[i],PSDKeySize) != 0)",
          "2732:         continue;",
          "2734:       found=MagickTrue;",
          "2735:       break;",
          "2736:     }",
          "2737:     remaining_length-=(size_t) size;",
          "2738:     if (found == MagickFalse)",
          "2739:     {",
          "2740:       if (remaining_length > 0)",
          "2741:         p=(unsigned char *) CopyMagickMemory(p-12,p+size,remaining_length);",
          "2742:       continue;",
          "2743:     }",
          "2744:     length+=(size_t) size+12;",
          "2745:     p+=size;",
          "2746:   }",
          "2750:   SetStringInfoLength(profile,(const size_t) length);",
          "2751:   SetImageProfile(image,PSDAdditionalInfo,info,exception);",
          "2752:   return(profile);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2662:     psd_info;",
          "2664:   register ssize_t",
          "2665:     i;",
          "2667:   size_t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2779:     i;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2840:     property=(const char *) GetImageProperty(next_image,\"label\",exception);",
          "2841:     if (property == (const char *) NULL)",
          "2842:       layer_info_size+=16;",
          "2843:     else",
          "2844:       {",
          "2845:         size_t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2958:     else",
          "2959:       {",
          "2960:         size_t",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2931:                    (void) SetPSDSize(&psd_info,image,channel_size);",
          "2932:                  }",
          "2933:              }",
          "2934:         (void) WriteBlob(image,4,(const unsigned char *) \"8BIM\");",
          "2935:         (void) WriteBlob(image,4,(const unsigned char *)",
          "2936:           CompositeOperatorToPSDBlendMode(next_image->compose));",
          "2958:               label_length;",
          "2960:             label_length=strlen(property);",
          "2961:             (void) WriteBlobMSBLong(image,(unsigned int) (label_length+(4-",
          "",
          "[Removed Lines]",
          "2938:         (void) WriteBlobByte(image,0);",
          "2939:         (void) WriteBlobByte(image,next_image->compose==NoCompositeOp ?",
          "2941:         (void) WriteBlobByte(image,0);",
          "2942:         property=(const char *) GetImageProperty(next_image,\"label\",exception);",
          "2943:         if (property == (const char *) NULL)",
          "2944:           {",
          "2945:             char",
          "2946:               layer_name[MagickPathExtent];",
          "2948:             (void) WriteBlobMSBLong(image,16);",
          "2949:             (void) WriteBlobMSBLong(image,0);",
          "2950:             (void) WriteBlobMSBLong(image,0);",
          "2951:             (void) FormatLocaleString(layer_name,MagickPathExtent,\"L%04ld\",(long)",
          "2952:               layer_count++);",
          "2953:             WritePascalString(image,layer_name,4);",
          "2954:           }",
          "2955:         else",
          "2956:           {",
          "2957:             size_t",
          "",
          "[Added Lines]",
          "3052:         (void) WriteBlob(image,4,(const unsigned char *) \"8BIM\");",
          "3056:         (void) WriteBlobByte(image,0);",
          "3057:         (void) WriteBlobByte(image,next_image->compose==NoCompositeOp ?",
          "3060:         info=GetImageProfile(next_image,PSDAdditionalInfo);",
          "3061:         property=(const char *) GetImageProperty(next_image,\"label\",exception);",
          "3062:         if (property == (const char *) NULL)",
          "3063:           {",
          "3064:             (void) FormatLocaleString(layer_name,MagickPathExtent,\"L%.20g\",",
          "3065:               (double) layer_count++);",
          "3066:             property=layer_name;",
          "3067:           }",
          "3068:         name_length=strlen(property);",
          "3069:         name_length+=(4-(name_length % 4));",
          "",
          "---------------"
        ]
      }
    }
  ]
}