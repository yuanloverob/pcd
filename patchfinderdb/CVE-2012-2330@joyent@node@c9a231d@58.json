{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d908b83f59fd6b3ccb83680172a28866bb255364",
      "candidate_info": {
        "commit_hash": "d908b83f59fd6b3ccb83680172a28866bb255364",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d908b83f59fd6b3ccb83680172a28866bb255364",
        "files": [
          "deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-win.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/fs-poll.c",
          "deps/uv/src/unix/aix.c",
          "deps/uv/src/unix/eio/config_aix.h",
          "deps/uv/src/unix/eio/eio.c",
          "deps/uv/src/unix/eio/xthread.h",
          "deps/uv/src/unix/error.c",
          "deps/uv/src/unix/ev/config_aix.h",
          "deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/win/async.c",
          "deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/handle-inl.h",
          "deps/uv/src/win/handle.c",
          "deps/uv/src/win/internal.h",
          "deps/uv/src/win/loop-watcher.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/src/win/poll.c",
          "deps/uv/src/win/process.c",
          "deps/uv/src/win/signal.c",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/thread.c",
          "deps/uv/src/win/threadpool.c",
          "deps/uv/src/win/timer.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/test/test-thread.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: upgrade to a28f145",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/fs-poll.c||deps/uv/src/fs-poll.c",
          "deps/uv/src/unix/aix.c||deps/uv/src/unix/aix.c",
          "deps/uv/src/unix/eio/config_aix.h||deps/uv/src/unix/eio/config_aix.h",
          "deps/uv/src/unix/eio/eio.c||deps/uv/src/unix/eio/eio.c",
          "deps/uv/src/unix/eio/xthread.h||deps/uv/src/unix/eio/xthread.h",
          "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c",
          "deps/uv/src/unix/ev/config_aix.h||deps/uv/src/unix/ev/config_aix.h",
          "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/win/async.c||deps/uv/src/win/async.c",
          "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/handle-inl.h||deps/uv/src/win/handle-inl.h",
          "deps/uv/src/win/handle.c||deps/uv/src/win/handle.c",
          "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h",
          "deps/uv/src/win/loop-watcher.c||deps/uv/src/win/loop-watcher.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/src/win/poll.c||deps/uv/src/win/poll.c",
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c",
          "deps/uv/src/win/signal.c||deps/uv/src/win/signal.c",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/thread.c||deps/uv/src/win/thread.c",
          "deps/uv/src/win/threadpool.c||deps/uv/src/win/threadpool.c",
          "deps/uv/src/win/timer.c||deps/uv/src/win/timer.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/test/test-thread.c||deps/uv/test/test-thread.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: OBJS += src/unix/sunos.o",
          "54: endif",
          "56: ifeq (Darwin,$(uname_S))",
          "57: EV_CONFIG=config_darwin.h",
          "58: EIO_CONFIG=config_darwin.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: ifeq (AIX,$(uname_S))",
          "57: EV_CONFIG=config_aix.h",
          "58: EIO_CONFIG=config_aix.h",
          "59: CPPFLAGS += -Isrc/ares/config_aix -D_ALL_SOURCE -D_XOPEN_SOURCE=500",
          "60: LINKFLAGS+= -lperfstat",
          "61: OBJS += src/unix/aix.o",
          "62: endif",
          "",
          "---------------"
        ],
        "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h": [
          "File: deps/uv/include/uv-private/uv-win.h -> deps/uv/include/uv-private/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   } fallback_;",
          "220: } uv_rwlock_t;",
          "224: typedef struct uv_once_s {",
          "225:   unsigned char ran;",
          "228:   HANDLE event;",
          "230: } uv_once_t;",
          "",
          "[Removed Lines]",
          "222: #define UV_ONCE_INIT { 0, NULL, NULL }",
          "229:   HANDLE padding;",
          "",
          "[Added Lines]",
          "222: #define UV_ONCE_INIT { 0, NULL }",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: # define __unix__",
          "58: #endif",
          "61: # include \"uv-private/uv-unix.h\"",
          "62: #else",
          "63: # include \"uv-private/uv-win.h\"",
          "",
          "[Removed Lines]",
          "60: #if defined(__unix__) || defined(__POSIX__) || defined(__APPLE__)",
          "",
          "[Added Lines]",
          "60: #if defined(__unix__) || defined(__POSIX__) || \\",
          "61:     defined(__APPLE__) || defined(_AIX)",
          "",
          "---------------"
        ],
        "deps/uv/src/fs-poll.c||deps/uv/src/fs-poll.c": [
          "File: deps/uv/src/fs-poll.c -> deps/uv/src/fs-poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236: #include \"win/handle-inl.h\"",
          "238: void uv__fs_poll_endgame(uv_loop_t* loop, uv_fs_poll_t* handle) {",
          "240:   assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "241:   uv__handle_close(handle);",
          "242: }",
          "",
          "[Removed Lines]",
          "239:   assert(handle->flags & UV_HANDLE_CLOSING);",
          "",
          "[Added Lines]",
          "239:   assert(handle->flags & UV__HANDLE_CLOSING);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/aix.c||deps/uv/src/unix/aix.c": [
          "File: deps/uv/src/unix/aix.c -> deps/uv/src/unix/aix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"uv.h\"",
          "22: #include \"internal.h\"",
          "24: #include <stdio.h>",
          "25: #include <stdint.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "28: #include <assert.h>",
          "29: #include <errno.h>",
          "31: #include <sys/types.h>",
          "32: #include <sys/socket.h>",
          "33: #include <sys/ioctl.h>",
          "34: #include <net/if.h>",
          "35: #include <netinet/in.h>",
          "36: #include <arpa/inet.h>",
          "38: #include <sys/time.h>",
          "39: #include <unistd.h>",
          "40: #include <fcntl.h>",
          "41: #include <utmp.h>",
          "43: #include <sys/protosw.h>",
          "44: #include <libperfstat.h>",
          "45: #include <sys/proc.h>",
          "46: #include <sys/procfs.h>",
          "48: uint64_t uv_hrtime() {",
          "49:   uint64_t G = 1000000000;",
          "50:   timebasestruct_t t;",
          "51:   read_wall_time(&t, TIMEBASE_SZ);",
          "52:   time_base_to_time(&t, TIMEBASE_SZ);",
          "53:   return (uint64_t) t.tb_high * G + t.tb_low;",
          "54: }",
          "62: int uv_exepath(char* buffer, size_t* size) {",
          "63:   ssize_t res;",
          "64:   char pp[64], cwdl[PATH_MAX];",
          "65:   size_t cwdl_len;",
          "66:   struct psinfo ps;",
          "67:   int fd;",
          "69:   if (buffer == NULL)",
          "70:     return (-1);",
          "72:   if (size == NULL)",
          "73:     return (-1);",
          "75:   (void) snprintf(pp, sizeof(pp), \"/proc/%lu/cwd\", (unsigned long) getpid());",
          "77:   res = readlink(pp, cwdl, sizeof(cwdl) - 1);",
          "78:   if (res < 0)",
          "79:     return res;",
          "81:   cwdl[res] = '\\0';",
          "82:   cwdl_len = res;",
          "84:   (void) snprintf(pp, sizeof(pp), \"/proc/%lu/psinfo\", (unsigned long) getpid());",
          "85:   fd = open(pp, O_RDONLY);",
          "86:   if (fd < 0)",
          "87:     return fd;",
          "89:   res = read(fd, &ps, sizeof(ps));",
          "90:   close(fd);",
          "91:   if (res < 0)",
          "92:     return res;",
          "94:   (void) snprintf(buffer, *size, \"%s%s\", cwdl, ps.pr_fname);",
          "96:   return 0;",
          "97: }",
          "100: uint64_t uv_get_free_memory(void) {",
          "101:   perfstat_memory_total_t mem_total;",
          "102:   int result = perfstat_memory_total(NULL, &mem_total, sizeof(mem_total), 1);",
          "103:   if (result == -1) {",
          "104:     return 0;",
          "105:   }",
          "106:   return mem_total.real_free * 4096;",
          "107: }",
          "110: uint64_t uv_get_total_memory(void) {",
          "111:   perfstat_memory_total_t mem_total;",
          "112:   int result = perfstat_memory_total(NULL, &mem_total, sizeof(mem_total), 1);",
          "113:   if (result == -1) {",
          "114:     return 0;",
          "115:   }",
          "116:   return mem_total.real_total * 4096;",
          "117: }",
          "120: void uv_loadavg(double avg[3]) {",
          "121:   perfstat_cpu_total_t ps_total;",
          "122:   int result = perfstat_cpu_total(NULL, &ps_total, sizeof(ps_total), 1);",
          "123:   if (result == -1) {",
          "124:     avg[0] = 0.; avg[1] = 0.; avg[2] = 0.;",
          "125:     return;",
          "126:   }",
          "127:   avg[0] = ps_total.loadavg[0] / (double)(1 << SBITS);",
          "128:   avg[1] = ps_total.loadavg[1] / (double)(1 << SBITS);",
          "129:   avg[2] = ps_total.loadavg[2] / (double)(1 << SBITS);",
          "130: }",
          "133: int uv_fs_event_init(uv_loop_t* loop,",
          "134:                      uv_fs_event_t* handle,",
          "135:                      const char* filename,",
          "136:                      uv_fs_event_cb cb,",
          "137:                      int flags) {",
          "138:   loop->counters.fs_event_init++;",
          "139:   uv__set_sys_error(loop, ENOSYS);",
          "140:   return -1;",
          "141: }",
          "144: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "145:   UNREACHABLE();",
          "146: }",
          "149: char** uv_setup_args(int argc, char** argv) {",
          "150:   return argv;",
          "151: }",
          "154: uv_err_t uv_set_process_title(const char* title) {",
          "155:   return uv_ok_;",
          "156: }",
          "159: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "160:   if (size > 0) {",
          "161:     buffer[0] = '\\0';",
          "162:   }",
          "163:   return uv_ok_;",
          "164: }",
          "167: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "168:   char pp[64];",
          "169:   psinfo_t psinfo;",
          "170:   uv_err_t err;",
          "171:   int fd;",
          "173:   (void) snprintf(pp, sizeof(pp), \"/proc/%lu/psinfo\", (unsigned long) getpid());",
          "175:   fd = open(pp, O_RDONLY);",
          "176:   if (fd == -1)",
          "177:     return uv__new_sys_error(errno);",
          "179:   err = uv_ok_;",
          "181:   if (read(fd, &psinfo, sizeof(psinfo)) == sizeof(psinfo))",
          "183:   else",
          "184:     err = uv__new_sys_error(EINVAL);",
          "186:   close(fd);",
          "188:   return err;",
          "189: }",
          "192: uv_err_t uv_uptime(double* uptime) {",
          "193:   struct utmp *utmp_buf;",
          "194:   size_t entries = 0;",
          "195:   time_t boot_time;",
          "197:   utmpname(UTMP_FILE);",
          "199:   setutent();",
          "201:   while ((utmp_buf = getutent()) != NULL) {",
          "202:     if (utmp_buf->ut_user[0] && utmp_buf->ut_type == USER_PROCESS)",
          "203:       ++entries;",
          "204:     if (utmp_buf->ut_type == BOOT_TIME)",
          "205:       boot_time = utmp_buf->ut_time;",
          "206:   }",
          "208:   endutent();",
          "210:   if (boot_time == 0)",
          "211:     return uv__new_artificial_error(UV_ENOSYS);",
          "214:   return uv_ok_;",
          "215: }",
          "218: uv_err_t uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count) {",
          "219:   uv_cpu_info_t* cpu_info;",
          "220:   perfstat_cpu_total_t ps_total;",
          "221:   perfstat_cpu_t* ps_cpus;",
          "222:   perfstat_id_t cpu_id;",
          "223:   int result, ncpus, idx = 0;",
          "225:   result = perfstat_cpu_total(NULL, &ps_total, sizeof(ps_total), 1);",
          "226:   if (result == -1) {",
          "227:     return uv__new_artificial_error(UV_ENOSYS);",
          "228:   }",
          "230:   ncpus = result = perfstat_cpu(NULL, NULL, sizeof(perfstat_cpu_t), 0);",
          "231:   if (result == -1) {",
          "232:     return uv__new_artificial_error(UV_ENOSYS);",
          "233:   }",
          "235:   ps_cpus = (perfstat_cpu_t*) malloc(ncpus * sizeof(perfstat_cpu_t));",
          "236:   if (!ps_cpus) {",
          "237:     return uv__new_artificial_error(UV_ENOMEM);",
          "238:   }",
          "240:   strcpy(cpu_id.name, FIRST_CPU);",
          "241:   result = perfstat_cpu(&cpu_id, ps_cpus, sizeof(perfstat_cpu_t), ncpus);",
          "242:   if (result == -1) {",
          "243:     free(ps_cpus);",
          "244:     return uv__new_artificial_error(UV_ENOSYS);",
          "245:   }",
          "248:   if (!*cpu_infos) {",
          "249:     free(ps_cpus);",
          "250:     return uv__new_artificial_error(UV_ENOMEM);",
          "251:   }",
          "255:   cpu_info = *cpu_infos;",
          "256:   while (idx < ncpus) {",
          "257:     cpu_info->speed = (int)(ps_total.processorHZ / 1000000);",
          "258:     cpu_info->model = strdup(ps_total.description);",
          "259:     cpu_info->cpu_times.user = ps_cpus[idx].user;",
          "260:     cpu_info->cpu_times.sys = ps_cpus[idx].sys;",
          "261:     cpu_info->cpu_times.idle = ps_cpus[idx].idle;",
          "262:     cpu_info->cpu_times.irq = ps_cpus[idx].wait;",
          "263:     cpu_info->cpu_times.nice = 0;",
          "264:     cpu_info++;",
          "265:     idx++;",
          "266:   }",
          "268:   free(ps_cpus);",
          "269:   return uv_ok_;",
          "270: }",
          "273: void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count) {",
          "274:   int i;",
          "276:   for (i = 0; i < count; ++i) {",
          "277:     free(cpu_infos[i].model);",
          "278:   }",
          "280:   free(cpu_infos);",
          "281: }",
          "284: uv_err_t uv_interface_addresses(uv_interface_address_t** addresses,",
          "285:   int* count) {",
          "286:   uv_interface_address_t* address;",
          "287:   int sockfd, size = 1;",
          "288:   struct ifconf ifc;",
          "289:   struct ifreq *ifr, *p, flg;",
          "293:   if (0 > (sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP))) {",
          "294:     return uv__new_artificial_error(UV_ENOSYS);",
          "295:   }",
          "297:   if (ioctl(sockfd, SIOCGSIZIFCONF, &size) == -1) {",
          "298:     close(sockfd);",
          "299:     return uv__new_artificial_error(UV_ENOSYS);",
          "300:   }",
          "302:   ifc.ifc_req = (struct ifreq*)malloc(size);",
          "303:   ifc.ifc_len = size;",
          "304:   if (ioctl(sockfd, SIOCGIFCONF, &ifc) == -1) {",
          "305:     close(sockfd);",
          "306:     return uv__new_artificial_error(UV_ENOSYS);",
          "307:   }",
          "309: #define ADDR_SIZE(p) MAX((p).sa_len, sizeof(p))",
          "312:   ifr = ifc.ifc_req;",
          "313:   while ((char*)ifr < (char*)ifc.ifc_req + ifc.ifc_len) {",
          "314:     p = ifr;",
          "315:     ifr = (struct ifreq*)",
          "316:       ((char*)ifr + sizeof(ifr->ifr_name) + ADDR_SIZE(ifr->ifr_addr));",
          "318:     if (!(p->ifr_addr.sa_family == AF_INET6 ||",
          "319:           p->ifr_addr.sa_family == AF_INET))",
          "320:       continue;",
          "322:     memcpy(flg.ifr_name, p->ifr_name, sizeof(flg.ifr_name));",
          "323:     if (ioctl(sockfd, SIOCGIFFLAGS, &flg) == -1) {",
          "324:       close(sockfd);",
          "325:       return uv__new_artificial_error(UV_ENOSYS);",
          "326:     }",
          "328:     if (!(flg.ifr_flags & IFF_UP && flg.ifr_flags & IFF_RUNNING))",
          "329:       continue;",
          "331:     (*count)++;",
          "332:   }",
          "336:     malloc(*count * sizeof(uv_interface_address_t));",
          "337:   if (!(*addresses)) {",
          "338:     close(sockfd);",
          "339:     return uv__new_artificial_error(UV_ENOMEM);",
          "340:   }",
          "341:   address = *addresses;",
          "343:   ifr = ifc.ifc_req;",
          "344:   while ((char*)ifr < (char*)ifc.ifc_req + ifc.ifc_len) {",
          "345:     p = ifr;",
          "346:     ifr = (struct ifreq*)",
          "347:       ((char*)ifr + sizeof(ifr->ifr_name) + ADDR_SIZE(ifr->ifr_addr));",
          "349:     if (!(p->ifr_addr.sa_family == AF_INET6 ||",
          "350:           p->ifr_addr.sa_family == AF_INET))",
          "351:       continue;",
          "353:     memcpy(flg.ifr_name, p->ifr_name, sizeof(flg.ifr_name));",
          "354:     if (ioctl(sockfd, SIOCGIFFLAGS, &flg) == -1) {",
          "355:       close(sockfd);",
          "356:       return uv__new_artificial_error(UV_ENOSYS);",
          "357:     }",
          "359:     if (!(flg.ifr_flags & IFF_UP && flg.ifr_flags & IFF_RUNNING))",
          "360:       continue;",
          "364:     address->name = strdup(p->ifr_name);",
          "366:     if (p->ifr_addr.sa_family == AF_INET6) {",
          "367:       address->address.address6 = *((struct sockaddr_in6 *)&p->ifr_addr);",
          "368:     } else {",
          "369:       address->address.address4 = *((struct sockaddr_in *)&p->ifr_addr);",
          "370:     }",
          "372:     address->is_internal = flg.ifr_flags & IFF_LOOPBACK ? 1 : 0;",
          "374:     address++;",
          "375:   }",
          "377: #undef ADDR_SIZE",
          "379:   close(sockfd);",
          "380:   return uv_ok_;",
          "381: }",
          "384: void uv_free_interface_addresses(uv_interface_address_t* addresses,",
          "385:   int count) {",
          "386:   int i;",
          "388:   for (i = 0; i < count; ++i) {",
          "389:     free(addresses[i].name);",
          "390:   }",
          "392:   free(addresses);",
          "393: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/eio/config_aix.h||deps/uv/src/unix/eio/config_aix.h": [
          "File: deps/uv/src/unix/eio/config_aix.h -> deps/uv/src/unix/eio/config_aix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #define HAVE_DLFCN_H 1",
          "11: #define HAVE_UTIMES 1",
          "17: #define HAVE_INTTYPES_H 1",
          "20: #define HAVE_MEMORY_H 1",
          "23: #define HAVE_PREADWRITE 1",
          "32: #define HAVE_STDINT_H 1",
          "35: #define HAVE_STDLIB_H 1",
          "38: #define HAVE_STRINGS_H 1",
          "41: #define HAVE_STRING_H 1",
          "47: #define HAVE_SYS_STAT_H 1",
          "50: #define HAVE_SYS_TYPES_H 1",
          "53: #define HAVE_UNISTD_H 1",
          "57: #define LT_OBJDIR \".libs/\"",
          "60: #define PACKAGE \"libeio\"",
          "63: #define PACKAGE_BUGREPORT \"\"",
          "66: #define PACKAGE_NAME \"\"",
          "69: #define PACKAGE_STRING \"\"",
          "72: #define PACKAGE_TARNAME \"\"",
          "75: #define PACKAGE_URL \"\"",
          "78: #define PACKAGE_VERSION \"\"",
          "81: #define STDC_HEADERS 1",
          "84: #define VERSION \"1.0\"",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/eio/eio.c||deps/uv/src/unix/eio/eio.c": [
          "File: deps/uv/src/unix/eio/eio.c -> deps/uv/src/unix/eio/eio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "596:   X_LOCK (wrklock);",
          "599:     {",
          "600:       wrk->prev = &wrk_first;",
          "601:       wrk->next = wrk_first.next;",
          "",
          "[Removed Lines]",
          "598:   if (thread_create (&wrk->tid, etp_proc, (void *)wrk))",
          "",
          "[Added Lines]",
          "598:   if (xthread_create (&wrk->tid, etp_proc, (void *)wrk))",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/eio/xthread.h||deps/uv/src/unix/eio/xthread.h": [
          "File: deps/uv/src/unix/eio/xthread.h -> deps/uv/src/unix/eio/xthread.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define X_THREAD_ATFORK(a,b,c)",
          "51: static int",
          "53: {",
          "54:   int retval;",
          "55:   pthread_attr_t attr;",
          "",
          "[Removed Lines]",
          "52: thread_create (xthread_t *tid, void *(*proc)(void *), void *arg)",
          "",
          "[Added Lines]",
          "52: xthread_create (xthread_t *tid, void *(*proc)(void *), void *arg)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130: #endif",
          "132: static int",
          "134: {",
          "135:   int retval;",
          "136:   sigset_t fullsigset, oldsigset;",
          "",
          "[Removed Lines]",
          "133: thread_create (xthread_t *tid, void *(*proc)(void *), void *arg)",
          "",
          "[Added Lines]",
          "133: xthread_create (xthread_t *tid, void *(*proc)(void *), void *arg)",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c": [
          "File: deps/uv/src/unix/error.c -> deps/uv/src/unix/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     case ETIMEDOUT: return UV_ETIMEDOUT;",
          "97:     case EXDEV: return UV_EXDEV;",
          "98:     case EBUSY: return UV_EBUSY;",
          "99:     case ENOTEMPTY: return UV_ENOTEMPTY;",
          "100:     case ENOSPC: return UV_ENOSPC;",
          "101:     case EROFS: return UV_EROFS;",
          "102:     case ENOMEM: return UV_ENOMEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: #if ENOTEMPTY != EEXIST",
          "101: #endif",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/config_aix.h||deps/uv/src/unix/ev/config_aix.h": [
          "File: deps/uv/src/unix/ev/config_aix.h -> deps/uv/src/unix/ev/config_aix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #define HAVE_CLOCK_GETTIME 1",
          "11: #define HAVE_DLFCN_H 1",
          "23: #define HAVE_INTTYPES_H 1",
          "29: #define HAVE_LIBM 1",
          "32: #define HAVE_LIBRT 1",
          "35: #define HAVE_MEMORY_H 1",
          "38: #define HAVE_NANOSLEEP 1",
          "41: #define HAVE_POLL 1",
          "44: #define HAVE_POLL_H 1",
          "50: #define HAVE_PORT_H 1",
          "53: #define HAVE_SELECT 1",
          "59: #define HAVE_STDINT_H 1",
          "62: #define HAVE_STDLIB_H 1",
          "65: #define HAVE_STRINGS_H 1",
          "68: #define HAVE_STRING_H 1",
          "83: #define HAVE_SYS_QUEUE_H 1",
          "86: #define HAVE_SYS_SELECT_H 1",
          "92: #define HAVE_SYS_STAT_H 1",
          "95: #define HAVE_SYS_TYPES_H 1",
          "98: #define HAVE_UNISTD_H 1",
          "101: #define PACKAGE \"libev\"",
          "104: #define PACKAGE_BUGREPORT \"\"",
          "107: #define PACKAGE_NAME \"\"",
          "110: #define PACKAGE_STRING \"\"",
          "113: #define PACKAGE_TARNAME \"\"",
          "116: #define PACKAGE_VERSION \"\"",
          "119: #define STDC_HEADERS 1",
          "122: #define VERSION \"3.9\"",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c": [
          "File: deps/uv/src/unix/ev/ev.c -> deps/uv/src/unix/ev/ev.c"
        ],
        "deps/uv/src/win/async.c||deps/uv/src/win/async.c": [
          "File: deps/uv/src/win/async.c -> deps/uv/src/win/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: void uv_async_endgame(uv_loop_t* loop, uv_async_t* handle) {",
          "33:       !handle->async_sent) {",
          "34:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "35:     uv__handle_close(handle);",
          "",
          "[Removed Lines]",
          "32:   if (handle->flags & UV_HANDLE_CLOSING &&",
          "",
          "[Added Lines]",
          "32:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   if (!uv__atomic_exchange_set(&handle->async_sent)) {",
          "80:     POST_COMPLETION_FOR_REQ(loop, &handle->async_req);",
          "",
          "[Removed Lines]",
          "77:   assert(!(handle->flags & UV_HANDLE_CLOSING));",
          "",
          "[Added Lines]",
          "77:   assert(!(handle->flags & UV__HANDLE_CLOSING));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   handle->async_sent = 0;",
          "95:     handle->async_cb((uv_async_t*) handle, 0);",
          "96:   } else {",
          "97:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "",
          "[Removed Lines]",
          "94:   if (!(handle->flags & UV_HANDLE_CLOSING)) {",
          "",
          "[Added Lines]",
          "94:   if (!(handle->flags & UV__HANDLE_CLOSING)) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c": [
          "File: deps/uv/src/win/fs-event.c -> deps/uv/src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "306:     return;",
          "307:   };",
          "",
          "[Removed Lines]",
          "304:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "304:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:         }",
          "445:         offset = file_info->NextEntryOffset;",
          "447:     } else {",
          "448:       handle->cb(handle, NULL, UV_CHANGE, 0);",
          "449:     }",
          "",
          "[Removed Lines]",
          "446:       } while (offset && !(handle->flags & UV_HANDLE_CLOSING));",
          "",
          "[Added Lines]",
          "446:       } while (offset && !(handle->flags & UV__HANDLE_CLOSING));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "452:     handle->cb(handle, NULL, 0, -1);",
          "453:   }",
          "456:     uv_fs_event_queue_readdirchanges(loop, handle);",
          "457:   } else {",
          "458:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "",
          "[Removed Lines]",
          "455:   if (!(handle->flags & UV_HANDLE_CLOSING)) {",
          "",
          "[Added Lines]",
          "455:   if (!(handle->flags & UV__HANDLE_CLOSING)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "477: void uv_fs_event_endgame(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "479:       !handle->req_pending) {",
          "480:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "",
          "[Removed Lines]",
          "478:   if (handle->flags & UV_HANDLE_CLOSING &&",
          "",
          "[Added Lines]",
          "478:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "",
          "---------------"
        ],
        "deps/uv/src/win/handle-inl.h||deps/uv/src/win/handle-inl.h": [
          "File: deps/uv/src/win/handle-inl.h -> deps/uv/src/win/handle-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define DECREASE_ACTIVE_COUNT(loop, handle)                             \\",
          "32:   do {                                                                  \\",
          "33:     if (--(handle)->activecnt == 0 &&                                   \\",
          "35:       uv__handle_stop((handle));                                        \\",
          "36:     }                                                                   \\",
          "37:     assert((handle)->activecnt >= 0);                                   \\",
          "",
          "[Removed Lines]",
          "34:         !((handle)->flags & UV_HANDLE_CLOSING)) {                       \\",
          "",
          "[Added Lines]",
          "34:         !((handle)->flags & UV__HANDLE_CLOSING)) {                      \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     assert(handle->reqs_pending > 0);                                   \\",
          "53:     handle->reqs_pending--;                                             \\",
          "54:                                                                         \\",
          "56:         handle->reqs_pending == 0) {                                    \\",
          "57:       uv_want_endgame(loop, (uv_handle_t*)handle);                      \\",
          "58:     }                                                                   \\",
          "",
          "[Removed Lines]",
          "55:     if (handle->flags & UV_HANDLE_CLOSING &&                            \\",
          "",
          "[Added Lines]",
          "55:     if (handle->flags & UV__HANDLE_CLOSING &&                           \\",
          "",
          "---------------"
        ],
        "deps/uv/src/win/handle.c||deps/uv/src/win/handle.c": [
          "File: deps/uv/src/win/handle.c -> deps/uv/src/win/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: int uv_is_active(const uv_handle_t* handle) {",
          "61:   return (handle->flags & UV__HANDLE_ACTIVE) &&",
          "63: }",
          "66: void uv_close(uv_handle_t* handle, uv_close_cb cb) {",
          "67:   uv_loop_t* loop = handle->loop;",
          "70:     assert(0);",
          "71:     return;",
          "72:   }",
          "",
          "[Removed Lines]",
          "62:         !(handle->flags & UV_HANDLE_CLOSING);",
          "69:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "62:         !(handle->flags & UV__HANDLE_CLOSING);",
          "69:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: int uv_is_closing(const uv_handle_t* handle) {",
          "153: }",
          "",
          "[Removed Lines]",
          "152:   return handle->flags & (UV_HANDLE_CLOSING | UV_HANDLE_CLOSED);",
          "",
          "[Added Lines]",
          "152:   return handle->flags & (UV__HANDLE_CLOSING | UV_HANDLE_CLOSED);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h": [
          "File: deps/uv/src/win/internal.h -> deps/uv/src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define UV_HANDLE_CLOSED                        0x00000002",
          "41: #define UV_HANDLE_ENDGAME_QUEUED                0x00000004",
          "42: #define UV_HANDLE_ACTIVE                        0x00000010",
          "49: #define UV_HANDLE_READING                       0x00000100",
          "",
          "[Removed Lines]",
          "39: #define UV_HANDLE_CLOSING                       0x00000001",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/win/loop-watcher.c||deps/uv/src/win/loop-watcher.c": [
          "File: deps/uv/src/win/loop-watcher.c -> deps/uv/src/win/loop-watcher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: void uv_loop_watcher_endgame(uv_loop_t* loop, uv_handle_t* handle) {",
          "31:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "32:     handle->flags |= UV_HANDLE_CLOSED;",
          "33:     uv__handle_close(handle);",
          "",
          "[Removed Lines]",
          "30:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "30:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:     handle->shutdown_req = NULL;",
          "296:       UNREGISTER_HANDLE_REQ(loop, handle, req);",
          "",
          "[Removed Lines]",
          "295:     if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "295:     if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:     }",
          "355:   }",
          "358:       handle->reqs_pending == 0) {",
          "359:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "",
          "[Removed Lines]",
          "357:   if (handle->flags & UV_HANDLE_CLOSING &&",
          "",
          "[Added Lines]",
          "357:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "754:     req->next_pending = NULL;",
          "755:     req->pipeHandle = INVALID_HANDLE_VALUE;",
          "758:       uv_pipe_queue_accept(loop, server, req, FALSE);",
          "759:     }",
          "760:   }",
          "",
          "[Removed Lines]",
          "757:     if (!(server->flags & UV_HANDLE_CLOSING)) {",
          "",
          "[Added Lines]",
          "757:     if (!(server->flags & UV__HANDLE_CLOSING)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1493:       CloseHandle(req->pipeHandle);",
          "1494:       req->pipeHandle = INVALID_HANDLE_VALUE;",
          "1495:     }",
          "1497:       uv_pipe_queue_accept(loop, handle, req, FALSE);",
          "1498:     }",
          "1499:   }",
          "",
          "[Removed Lines]",
          "1496:     if (!(handle->flags & UV_HANDLE_CLOSING)) {",
          "",
          "[Added Lines]",
          "1496:     if (!(handle->flags & UV__HANDLE_CLOSING)) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/poll.c||deps/uv/src/win/poll.c": [
          "File: deps/uv/src/win/poll.c -> deps/uv/src/win/poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   if ((handle->events & ~(handle->submitted_events_1 |",
          "199:       handle->submitted_events_2)) != 0) {",
          "200:     uv__fast_poll_submit_poll_req(loop, handle);",
          "202:              handle->submitted_events_1 == 0 &&",
          "203:              handle->submitted_events_2 == 0) {",
          "204:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "",
          "[Removed Lines]",
          "201:   } else if ((handle->flags & UV_HANDLE_CLOSING) &&",
          "",
          "[Added Lines]",
          "201:   } else if ((handle->flags & UV__HANDLE_CLOSING) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209: static int uv__fast_poll_set(uv_loop_t* loop, uv_poll_t* handle, int events) {",
          "210:   assert(handle->type == UV_POLL);",
          "212:   assert((events & ~(UV_READABLE | UV_WRITABLE)) == 0);",
          "214:   handle->events = events;",
          "",
          "[Removed Lines]",
          "211:   assert(!(handle->flags & UV_HANDLE_CLOSING));",
          "",
          "[Added Lines]",
          "211:   assert(!(handle->flags & UV__HANDLE_CLOSING));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:   if ((handle->events & ~(handle->submitted_events_1 |",
          "446:       handle->submitted_events_2)) != 0) {",
          "447:     uv__slow_poll_submit_poll_req(loop, handle);",
          "449:              handle->submitted_events_1 == 0 &&",
          "450:              handle->submitted_events_2 == 0) {",
          "451:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "",
          "[Removed Lines]",
          "448:   } else if ((handle->flags & UV_HANDLE_CLOSING) &&",
          "",
          "[Added Lines]",
          "448:   } else if ((handle->flags & UV__HANDLE_CLOSING) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "456: static int uv__slow_poll_set(uv_loop_t* loop, uv_poll_t* handle, int events) {",
          "457:   assert(handle->type == UV_POLL);",
          "459:   assert((events & ~(UV_READABLE | UV_WRITABLE)) == 0);",
          "461:   handle->events = events;",
          "",
          "[Removed Lines]",
          "458:   assert(!(handle->flags & UV_HANDLE_CLOSING));",
          "",
          "[Added Lines]",
          "458:   assert(!(handle->flags & UV__HANDLE_CLOSING));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "607: void uv_poll_endgame(uv_loop_t* loop, uv_poll_t* handle) {",
          "609:   assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "611:   assert(handle->submitted_events_1 == 0);",
          "",
          "[Removed Lines]",
          "608:   assert(handle->flags & UV_HANDLE_CLOSING);",
          "",
          "[Added Lines]",
          "608:   assert(handle->flags & UV__HANDLE_CLOSING);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "694:     return;",
          "695:   }",
          "",
          "[Removed Lines]",
          "692:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "692:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744: void uv_process_endgame(uv_loop_t* loop, uv_process_t* handle) {",
          "745:   assert(!handle->exit_cb_pending);",
          "747:   assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "",
          "[Removed Lines]",
          "746:   assert(handle->flags & UV_HANDLE_CLOSING);",
          "",
          "[Added Lines]",
          "746:   assert(handle->flags & UV__HANDLE_CLOSING);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/signal.c||deps/uv/src/win/signal.c": [
          "File: deps/uv/src/win/signal.c -> deps/uv/src/win/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   if (dispatched_signum == handle->signum)",
          "324:     handle->signal_cb(handle, dispatched_signum);",
          "328:     assert(handle->signum == 0);",
          "329:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "",
          "[Removed Lines]",
          "326:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "326:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344: void uv_signal_endgame(uv_loop_t* loop, uv_signal_t* handle) {",
          "346:   assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "348:   assert(handle->signum == 0);",
          "",
          "[Removed Lines]",
          "345:   assert(handle->flags & UV_HANDLE_CLOSING);",
          "",
          "[Added Lines]",
          "345:   assert(handle->flags & UV__HANDLE_CLOSING);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     UNREGISTER_HANDLE_REQ(loop, handle, handle->shutdown_req);",
          "168:       status = -1;",
          "169:       uv__set_artificial_error(loop, UV_ECANCELED);",
          "170:     } else if (shutdown(handle->socket, SD_SEND) != SOCKET_ERROR) {",
          "",
          "[Removed Lines]",
          "167:     if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "167:     if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:     return;",
          "184:   }",
          "187:       handle->reqs_pending == 0) {",
          "188:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "",
          "[Removed Lines]",
          "186:   if (handle->flags & UV_HANDLE_CLOSING &&",
          "",
          "[Added Lines]",
          "186:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:   req->next_pending = NULL;",
          "613:   req->accept_socket = INVALID_SOCKET;",
          "617:     if (!(server->flags & UV_HANDLE_TCP_ACCEPT_STATE_CHANGING)) {",
          "618:       uv_tcp_queue_accept(server, req);",
          "",
          "[Removed Lines]",
          "615:   if (!(server->flags & UV_HANDLE_CLOSING)) {",
          "",
          "[Added Lines]",
          "615:   if (!(server->flags & UV__HANDLE_CLOSING)) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/thread.c||deps/uv/src/win/thread.c": [
          "File: deps/uv/src/win/thread.c -> deps/uv/src/win/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     void (*callback)(void)) {",
          "61:   DWORD result;",
          "62:   HANDLE existing_event, created_event;",
          "69:   created_event = CreateEvent(NULL, 1, 0, NULL);",
          "70:   if (created_event == 0) {",
          "",
          "[Removed Lines]",
          "63:   HANDLE* event_ptr;",
          "66:   event_ptr = (HANDLE*) (((uintptr_t) &guard->event + (sizeof(HANDLE) - 1)) &",
          "67:     ~(sizeof(HANDLE) - 1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     uv_fatal_error(GetLastError(), \"CreateEvent\");",
          "73:   }",
          "76:                                                      created_event,",
          "77:                                                      NULL);",
          "",
          "[Removed Lines]",
          "75:   existing_event = InterlockedCompareExchangePointer(event_ptr,",
          "",
          "[Added Lines]",
          "70:   existing_event = InterlockedCompareExchangePointer(&guard->event,",
          "",
          "---------------"
        ],
        "deps/uv/src/win/threadpool.c||deps/uv/src/win/threadpool.c": [
          "File: deps/uv/src/win/threadpool.c -> deps/uv/src/win/threadpool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: void uv_process_work_req(uv_loop_t* loop, uv_work_t* req) {",
          "72:   uv__req_unregister(loop, req);",
          "74: }",
          "",
          "[Removed Lines]",
          "71:   assert(req->after_work_cb);",
          "73:   req->after_work_cb(req);",
          "",
          "[Added Lines]",
          "72:   if(req->after_work_cb)",
          "73:     req->after_work_cb(req);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/timer.c||deps/uv/src/win/timer.c": [
          "File: deps/uv/src/win/timer.c -> deps/uv/src/win/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: void uv_timer_endgame(uv_loop_t* loop, uv_timer_t* handle) {",
          "80:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "81:     uv__handle_close(handle);",
          "82:   }",
          "",
          "[Removed Lines]",
          "79:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "79:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     memset(&tty->last_input_record, 0, sizeof tty->last_input_record);",
          "153:   } else {",
          "158:     tty->utf8_bytes_left = 0;",
          "",
          "[Removed Lines]",
          "155:     tty->flags |= UV_HANDLE_READABLE;",
          "",
          "[Added Lines]",
          "155:     tty->flags |= UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1011:   count = info.dwSize.X * info.dwSize.Y;",
          "1013:   if (!(FillConsoleOutputCharacterW(handle->handle,",
          "1018:         FillConsoleOutputAttribute(handle->handle,",
          "1019:                                    char_attrs,",
          "1020:                                    written,",
          "",
          "[Removed Lines]",
          "1014:                               L'\\x20',",
          "1015:                               count,",
          "1016:                               origin,",
          "1017:                               &written) &&",
          "",
          "[Added Lines]",
          "1014:                                     L'\\x20',",
          "1015:                                     count,",
          "1016:                                     origin,",
          "1017:                                     &written) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1815:     if (handle->shutdown_req->cb) {",
          "1817:         uv__set_artificial_error(loop, UV_ECANCELED);",
          "1818:         handle->shutdown_req->cb(handle->shutdown_req, -1);",
          "1819:       } else {",
          "",
          "[Removed Lines]",
          "1816:       if (handle->flags & UV_HANDLE_CLOSING) {",
          "",
          "[Added Lines]",
          "1816:       if (handle->flags & UV__HANDLE_CLOSING) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1827:     return;",
          "1828:   }",
          "1831:       handle->reqs_pending == 0) {",
          "",
          "[Removed Lines]",
          "1830:   if (handle->flags & UV_HANDLE_CLOSING &&",
          "",
          "[Added Lines]",
          "1830:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: void uv_udp_endgame(uv_loop_t* loop, uv_udp_t* handle) {",
          "156:       handle->reqs_pending == 0) {",
          "157:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "158:     uv__handle_close(handle);",
          "",
          "[Removed Lines]",
          "155:   if (handle->flags & UV_HANDLE_CLOSING &&",
          "",
          "[Added Lines]",
          "155:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"uv.h\"",
          "26: #include \"task.h\"",
          "",
          "[Removed Lines]",
          "23: #define UNIX (defined(__unix__) || defined(__POSIX__) || defined(__APPLE__))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #include <fcntl.h>",
          "31: #include <sys/stat.h>",
          "36: #else",
          "37: # include <direct.h>",
          "",
          "[Removed Lines]",
          "34: #if UNIX",
          "",
          "[Added Lines]",
          "31: #if defined(__unix__) || defined(__POSIX__) || \\",
          "32:     defined(__APPLE__) || defined(_AIX)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:   ASSERT(req.result == 0);",
          "546:   s = req.ptr;",
          "549:   ASSERT(s->st_atime == atime);",
          "550:   ASSERT(s->st_mtime == mtime);",
          "551: #elif !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)",
          "",
          "[Removed Lines]",
          "548: #if _WIN32",
          "",
          "[Added Lines]",
          "546: #if defined(_WIN32) || defined(_AIX)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-thread.c||deps/uv/test/test-thread.c": [
          "File: deps/uv/test/test-thread.c -> deps/uv/test/test-thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: };",
          "46:   uv_thread_t thread_id;",
          "47:   volatile int thread_called;",
          "48: };",
          "",
          "[Removed Lines]",
          "45: struct thread {",
          "",
          "[Added Lines]",
          "45: struct test_thread {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:   uv_loop_t* loop;",
          "110:   size_t i;",
          "111:   int r;",
          "114:   loop = uv_loop_new();",
          "115:   ASSERT(loop != NULL);",
          "",
          "[Removed Lines]",
          "112:   struct thread* thread = arg;",
          "",
          "[Added Lines]",
          "112:   struct test_thread* thread = arg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164: TEST_IMPL(threadpool_multiple_event_loops) {",
          "166:   size_t i;",
          "167:   int r;",
          "",
          "[Removed Lines]",
          "165:   struct thread threads[8];",
          "",
          "[Added Lines]",
          "165:   struct test_thread threads[8];",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:             ],",
          "191:           },",
          "192:         }],",
          "193:         [ 'OS==\"freebsd\"', {",
          "194:           'sources': [ 'src/unix/freebsd.c' ],",
          "195:           'defines': [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:         [ 'OS==\"aix\"', {",
          "194:           'include_dirs': [ 'src/ares/config_aix' ],",
          "195:           'sources': [ 'src/unix/aix.c' ],",
          "196:           'defines': [",
          "197:             '_ALL_SOURCE',",
          "198:             '_XOPEN_SOURCE=500',",
          "199:             'EV_CONFIG_H=\"config_aix.h\"',",
          "200:             'EIO_CONFIG_H=\"config_aix.h\"',",
          "201:           ],",
          "202:           'direct_dependent_settings': {",
          "203:             'libraries': [",
          "204:               '-lperfstat',",
          "205:             ],",
          "206:           },",
          "207:         }],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:             '_XOPEN_SOURCE=500',",
          "330:           ],",
          "331:         }],",
          "332:       ],",
          "333:       'msvs-settings': {",
          "334:         'VCLinkerTool': {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:         [ 'OS==\"aix\"', {     # make test-fs.c compile, needs _POSIX_C_SOURCE",
          "348:           'defines': [",
          "349:             '_ALL_SOURCE',",
          "350:             '_XOPEN_SOURCE=500',",
          "351:           ],",
          "352:         }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0c15412270f32e00c268c578f07a1ed032323f5",
      "candidate_info": {
        "commit_hash": "b0c15412270f32e00c268c578f07a1ed032323f5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b0c15412270f32e00c268c578f07a1ed032323f5",
        "files": [
          "src/node.js"
        ],
        "message": "startup: use `path.resolve` instead of `path.join(cwd, ...)`",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   startup.resolveArgv0 = function() {",
          "431:     var cwd = process.cwd();",
          "444:   };",
          "",
          "[Removed Lines]",
          "432:     var isWindows = process.platform === 'win32';",
          "439:     var argv0 = process.argv[0];",
          "440:     if (!isWindows && argv0.indexOf('/') !== -1 && argv0.charAt(0) !== '/') {",
          "441:       var path = NativeModule.require('path');",
          "442:       process.argv[0] = path.join(cwd, process.argv[0]);",
          "443:     }",
          "",
          "[Added Lines]",
          "438:     var path = NativeModule.require('path');",
          "439:     process.argv[0] = path.resolve(process.argv[0]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "989ae81c713cbf97f6aa0ecf4a3674a881b2a7e8",
      "candidate_info": {
        "commit_hash": "989ae81c713cbf97f6aa0ecf4a3674a881b2a7e8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/989ae81c713cbf97f6aa0ecf4a3674a881b2a7e8",
        "files": [
          "test/simple/test-process-active-wraps.js"
        ],
        "message": "test: fix simple/test-process-active-wraps\n\nSaid test relies a great deal on internals and implementation details (I should\nknow, I wrote it). Patch it up to work with libuv's new refcounting scheme.",
        "before_after_code_files": [
          "test/simple/test-process-active-wraps.js||test/simple/test-process-active-wraps.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-process-active-wraps.js||test/simple/test-process-active-wraps.js": [
          "File: test/simple/test-process-active-wraps.js -> test/simple/test-process-active-wraps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: process.nextTick(function() {",
          "50:   process.nextTick(function() {",
          "53:   });",
          "54: });",
          "",
          "[Removed Lines]",
          "52:     assert.equal(process._getActiveHandles().length, 0);",
          "",
          "[Added Lines]",
          "51:     process.nextTick(function() {",
          "53:       assert.equal(process._getActiveHandles().length, 0);",
          "54:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddb02b978d2b577727370b36eeb828b1a522064a",
      "candidate_info": {
        "commit_hash": "ddb02b978d2b577727370b36eeb828b1a522064a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ddb02b978d2b577727370b36eeb828b1a522064a",
        "files": [
          "lib/net.js"
        ],
        "message": "net: support Server.listen(Pipe)",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "972:   var backlog = toNumber(arguments[1]) || toNumber(arguments[2]);",
          "974:   var TCP = process.binding('tcp_wrap').TCP;",
          "976:   if (arguments.length == 0 || typeof arguments[0] == 'function') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "984:     } else if (h.handle) {",
          "985:       h = h.handle;",
          "986:     }",
          "988:       self._handle = h;",
          "989:       listen(self, null, -1, -1, backlog);",
          "990:     } else if (typeof h.fd === 'number' && h.fd >= 0) {",
          "",
          "[Removed Lines]",
          "987:     if (h instanceof TCP) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7946ad2634201e3ab730ee894a4723698bc7e6a1",
      "candidate_info": {
        "commit_hash": "7946ad2634201e3ab730ee894a4723698bc7e6a1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7946ad2634201e3ab730ee894a4723698bc7e6a1",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Floating patches",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:         },",
          "325:         'conditions': [",
          "326:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "328:                         '-Wnon-virtual-dtor', '-Woverloaded-virtual' ],",
          "329:           }],",
          "330:         ],",
          "",
          "[Removed Lines]",
          "327:             'cflags': [ '-Wall', '<(werror)', '-W', '-Wno-unused-parameter',",
          "",
          "[Added Lines]",
          "327:             'cflags': [ '-Wno-unused-parameter',",
          "",
          "---------------"
        ]
      }
    }
  ]
}