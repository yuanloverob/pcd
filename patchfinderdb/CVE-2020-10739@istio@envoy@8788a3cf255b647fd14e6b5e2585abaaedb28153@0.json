{
  "cve_id": "CVE-2020-10739",
  "cve_desc": "Istio 1.4.x before 1.4.9 and Istio 1.5.x before 1.5.4 contain the following vulnerability when telemetry v2 is enabled: by sending a specially crafted packet, an attacker could trigger a Null Pointer Exception resulting in a Denial of Service. This could be sent to the ingress gateway or a sidecar, triggering a null pointer exception which results in a denial of service. This also affects servicemesh-proxy where a null pointer exception flaw was found in servicemesh-proxy. When running Telemetry v2 (not on by default in version 1.4.x), an attacker could send a specially crafted packet to the ingress gateway or proxy sidecar, triggering a denial of service.",
  "repo": "istio/envoy",
  "patch_hash": "8788a3cf255b647fd14e6b5e2585abaaedb28153",
  "patch_info": {
    "commit_hash": "8788a3cf255b647fd14e6b5e2585abaaedb28153",
    "repo": "istio/envoy",
    "commit_url": "https://github.com/istio/envoy/commit/8788a3cf255b647fd14e6b5e2585abaaedb28153",
    "files": [
      "source/extensions/common/wasm/wasm.cc",
      "source/extensions/common/wasm/wasm.h",
      "test/extensions/wasm/wasm_test.cc"
    ],
    "message": "1.4 - Do not call into the VM unless the VM Context has been created. (#24)\n\n* Ensure that the in VM Context is created before onDone is called.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Update as per offline discussion.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Set in_vm_context_created_ in onNetworkNewConnection.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Add guards to other network calls.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Fix common/wasm tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Patch tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Remove unecessary file from cherry-pick.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>",
    "before_after_code_files": [
      "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
      "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h",
      "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
    ]
  },
  "patch_diff": {
    "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc": [
      "File: source/extensions/common/wasm/wasm.cc -> source/extensions/common/wasm/wasm.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1699:     auto config_addr = wasm_->copyString(vm_configuration);",
      "1700:     wasm_->onStart_(this, id_, root_id_addr, root_id.size(), config_addr, vm_configuration.size());",
      "1701:   }",
      "1702: }",
      "1704: bool Context::validateConfiguration(absl::string_view configuration) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1702:   in_vm_context_created_ = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1726: Network::FilterStatus Context::onNetworkNewConnection() {",
      "1727:   onCreate(root_context_id_);",
      "1728:   if (!wasm_->onNewConnection_) {",
      "1729:     return Network::FilterStatus::Continue;",
      "1730:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1729:   in_vm_context_created_ = true;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1735: }",
      "1737: Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {",
      "1739:     return Network::FilterStatus::Continue;",
      "1740:   }",
      "1741:   auto result = wasm_->onDownstreamData_(this, id_, static_cast<uint32_t>(data_length),",
      "",
      "[Removed Lines]",
      "1738:   if (!wasm_->onDownstreamData_) {",
      "",
      "[Added Lines]",
      "1740:   if (!in_vm_context_created_ || !wasm_->onDownstreamData_) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1745: }",
      "1747: Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {",
      "1749:     return Network::FilterStatus::Continue;",
      "1750:   }",
      "1751:   auto result = wasm_->onUpstreamData_(this, id_, static_cast<uint32_t>(data_length),",
      "",
      "[Removed Lines]",
      "1748:   if (!wasm_->onUpstreamData_) {",
      "",
      "[Added Lines]",
      "1750:   if (!in_vm_context_created_ || !wasm_->onUpstreamData_) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1755: }",
      "1757: void Context::onDownstreamConnectionClose(PeerType peer_type) {",
      "1759:     wasm_->onDownstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));",
      "1760:   }",
      "1761: }",
      "1763: void Context::onUpstreamConnectionClose(PeerType peer_type) {",
      "1765:     wasm_->onUpstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));",
      "1766:   }",
      "1767: }",
      "",
      "[Removed Lines]",
      "1758:   if (wasm_->onDownstreamConnectionClose_) {",
      "1764:   if (wasm_->onUpstreamConnectionClose_) {",
      "",
      "[Added Lines]",
      "1760:   if (in_vm_context_created_ && wasm_->onDownstreamConnectionClose_) {",
      "1766:   if (in_vm_context_created_ && wasm_->onUpstreamConnectionClose_) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1785: }",
      "1787: Http::FilterDataStatus Context::onRequestBody(int body_buffer_length, bool end_of_stream) {",
      "1789:     return Http::FilterDataStatus::Continue;",
      "1790:   }",
      "1791:   switch (wasm_",
      "",
      "[Removed Lines]",
      "1788:   if (!wasm_->onRequestBody_) {",
      "",
      "[Added Lines]",
      "1790:   if (!in_vm_context_created_ || !wasm_->onRequestBody_) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1804: }",
      "1806: Http::FilterTrailersStatus Context::onRequestTrailers() {",
      "1808:     return Http::FilterTrailersStatus::Continue;",
      "1809:   }",
      "1810:   if (wasm_->onRequestTrailers_(this, id_).u64_ == 0) {",
      "",
      "[Removed Lines]",
      "1807:   if (!wasm_->onRequestTrailers_) {",
      "",
      "[Added Lines]",
      "1809:   if (!in_vm_context_created_ || !wasm_->onRequestTrailers_) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1814: }",
      "1816: Http::FilterMetadataStatus Context::onRequestMetadata() {",
      "1818:     return Http::FilterMetadataStatus::Continue;",
      "1819:   }",
      "1820:   if (wasm_->onRequestMetadata_(this, id_).u64_ == 0) {",
      "",
      "[Removed Lines]",
      "1817:   if (!wasm_->onRequestMetadata_) {",
      "",
      "[Added Lines]",
      "1819:   if (!in_vm_context_created_ || !wasm_->onRequestMetadata_) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1842: }",
      "1844: Http::FilterDataStatus Context::onResponseBody(int body_buffer_length, bool end_of_stream) {",
      "1846:     return Http::FilterDataStatus::Continue;",
      "1847:   }",
      "1848:   switch (wasm_",
      "",
      "[Removed Lines]",
      "1845:   if (!wasm_->onResponseBody_) {",
      "",
      "[Added Lines]",
      "1847:   if (!in_vm_context_created_ || !wasm_->onResponseBody_) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1861: }",
      "1863: Http::FilterTrailersStatus Context::onResponseTrailers() {",
      "1865:     return Http::FilterTrailersStatus::Continue;",
      "1866:   }",
      "1867:   if (wasm_->onResponseTrailers_(this, id_).u64_ == 0) {",
      "",
      "[Removed Lines]",
      "1864:   if (!wasm_->onResponseTrailers_) {",
      "",
      "[Added Lines]",
      "1866:   if (!in_vm_context_created_ || !wasm_->onResponseTrailers_) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1871: }",
      "1873: Http::FilterMetadataStatus Context::onResponseMetadata() {",
      "1875:     return Http::FilterMetadataStatus::Continue;",
      "1876:   }",
      "1877:   if (wasm_->onResponseMetadata_(this, id_).u64_ == 0) {",
      "",
      "[Removed Lines]",
      "1874:   if (!wasm_->onResponseMetadata_) {",
      "",
      "[Added Lines]",
      "1876:   if (!in_vm_context_created_ || !wasm_->onResponseMetadata_) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2445: }",
      "2447: void Context::onDone() {",
      "2449:     wasm_->onDone_(this, id_);",
      "2450:   }",
      "2451: }",
      "2453: void Context::onLog() {",
      "2455:     wasm_->onLog_(this, id_);",
      "2456:   }",
      "2457: }",
      "2459: void Context::onDelete() {",
      "2461:     wasm_->onDelete_(this, id_);",
      "2462:   }",
      "2463: }",
      "",
      "[Removed Lines]",
      "2448:   if (wasm_->onDone_) {",
      "2454:   if (wasm_->onLog_) {",
      "2460:   if (wasm_->onDelete_) {",
      "",
      "[Added Lines]",
      "2450:   if (in_vm_context_created_ && wasm_->onDone_) {",
      "2456:   if (in_vm_context_created_ && wasm_->onLog_) {",
      "2462:   if (in_vm_context_created_ && wasm_->onDelete_) {",
      "",
      "---------------"
    ],
    "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h": [
      "File: source/extensions/common/wasm/wasm.h -> source/extensions/common/wasm/wasm.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "414:   virtual bool isSsl();",
      "416: protected:",
      "417:   friend class Wasm;",
      "418:   friend struct AsyncClientHandler;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "416:   void setInVmContextCreatedForTesting() { in_vm_context_created_ = true; }",
      "",
      "---------------"
    ],
    "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc": [
      "File: test/extensions/wasm/wasm_test.cc -> test/extensions/wasm/wasm_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:   auto context = std::make_unique<TestContext>(wasm.get());",
      "185:   EXPECT_CALL(*context, scriptLog_(spdlog::level::err, Eq(\"before div by zero\")));",
      "186:   EXPECT_TRUE(wasm->initialize(code, false));",
      "189:   if (GetParam() == \"v8\") {",
      "190:     EXPECT_THROW_WITH_MESSAGE(",
      "",
      "[Removed Lines]",
      "187:   wasm->setContext(context.get());",
      "",
      "[Added Lines]",
      "187:   context->setInVmContextCreatedForTesting();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "388:       \"{{ test_rundir }}/test/extensions/wasm/test_data/stats_cpp.wasm\"));",
      "389:   EXPECT_FALSE(code.empty());",
      "390:   auto context = std::make_unique<TestContext>(wasm.get());",
      "392:   EXPECT_CALL(*context, scriptLog_(spdlog::level::trace, Eq(\"get counter = 1\")));",
      "393:   EXPECT_CALL(*context, scriptLog_(spdlog::level::debug, Eq(\"get counter = 2\")));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "391:   context->setInVmContextCreatedForTesting();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0237ac8f7538a937c51065a641d7cd70846f72e7",
      "candidate_info": {
        "commit_hash": "0237ac8f7538a937c51065a641d7cd70846f72e7",
        "repo": "istio/envoy",
        "commit_url": "https://github.com/istio/envoy/commit/0237ac8f7538a937c51065a641d7cd70846f72e7",
        "files": [
          "CODEOWNERS",
          "api/envoy/config/filter/network/wasm/v2/BUILD",
          "api/envoy/config/filter/network/wasm/v2/wasm.proto",
          "api/envoy/config/wasm/v2/BUILD",
          "api/wasm/cpp/proxy_wasm_api.h",
          "api/wasm/cpp/proxy_wasm_enums.h",
          "api/wasm/cpp/proxy_wasm_externs.h",
          "api/wasm/cpp/proxy_wasm_intrinsics.cc",
          "api/wasm/cpp/proxy_wasm_intrinsics.js",
          "source/extensions/common/wasm/null/null_plugin.cc",
          "source/extensions/common/wasm/null/null_plugin.h",
          "source/extensions/common/wasm/null/wasm_api_impl.h",
          "source/extensions/common/wasm/wasm.cc",
          "source/extensions/common/wasm/wasm.h",
          "source/extensions/extensions_build_config.bzl",
          "source/extensions/filters/network/wasm/BUILD",
          "source/extensions/filters/network/wasm/config.cc",
          "source/extensions/filters/network/wasm/config.h",
          "source/extensions/filters/network/wasm/wasm_filter.cc",
          "source/extensions/filters/network/wasm/wasm_filter.h",
          "source/extensions/filters/network/well_known_names.h",
          "test/extensions/filters/network/wasm/BUILD",
          "test/extensions/filters/network/wasm/config_test.cc",
          "test/extensions/filters/network/wasm/test_data/BUILD",
          "test/extensions/filters/network/wasm/test_data/Makefile",
          "test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder",
          "test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh",
          "test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh",
          "test/extensions/filters/network/wasm/test_data/logging_cpp.cc",
          "test/extensions/filters/network/wasm/test_data/logging_cpp.wasm",
          "test/extensions/filters/network/wasm/wasm_filter_test.cc",
          "tools/spelling_skip_files.txt"
        ],
        "message": "wasm: add support for network filters (read-only). (#170)\n\nSigned-off-by: Piotr Sikora <piotrsikora@google.com>",
        "before_after_code_files": [
          "api/envoy/config/filter/network/wasm/v2/wasm.proto||api/envoy/config/filter/network/wasm/v2/wasm.proto",
          "api/wasm/cpp/proxy_wasm_api.h||api/wasm/cpp/proxy_wasm_api.h",
          "api/wasm/cpp/proxy_wasm_enums.h||api/wasm/cpp/proxy_wasm_enums.h",
          "api/wasm/cpp/proxy_wasm_externs.h||api/wasm/cpp/proxy_wasm_externs.h",
          "api/wasm/cpp/proxy_wasm_intrinsics.cc||api/wasm/cpp/proxy_wasm_intrinsics.cc",
          "api/wasm/cpp/proxy_wasm_intrinsics.js||api/wasm/cpp/proxy_wasm_intrinsics.js",
          "source/extensions/common/wasm/null/null_plugin.cc||source/extensions/common/wasm/null/null_plugin.cc",
          "source/extensions/common/wasm/null/null_plugin.h||source/extensions/common/wasm/null/null_plugin.h",
          "source/extensions/common/wasm/null/wasm_api_impl.h||source/extensions/common/wasm/null/wasm_api_impl.h",
          "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
          "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h",
          "source/extensions/extensions_build_config.bzl||source/extensions/extensions_build_config.bzl",
          "source/extensions/filters/network/wasm/config.cc||source/extensions/filters/network/wasm/config.cc",
          "source/extensions/filters/network/wasm/config.h||source/extensions/filters/network/wasm/config.h",
          "source/extensions/filters/network/wasm/wasm_filter.cc||source/extensions/filters/network/wasm/wasm_filter.cc",
          "source/extensions/filters/network/wasm/wasm_filter.h||source/extensions/filters/network/wasm/wasm_filter.h",
          "source/extensions/filters/network/well_known_names.h||source/extensions/filters/network/well_known_names.h",
          "test/extensions/filters/network/wasm/config_test.cc||test/extensions/filters/network/wasm/config_test.cc",
          "test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder||test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder",
          "test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh||test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh",
          "test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh||test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh",
          "test/extensions/filters/network/wasm/test_data/logging_cpp.cc||test/extensions/filters/network/wasm/test_data/logging_cpp.cc",
          "test/extensions/filters/network/wasm/wasm_filter_test.cc||test/extensions/filters/network/wasm/wasm_filter_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
            "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h"
          ],
          "candidate": [
            "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
            "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h"
          ]
        }
      },
      "candidate_diff": {
        "api/envoy/config/filter/network/wasm/v2/wasm.proto||api/envoy/config/filter/network/wasm/v2/wasm.proto": [
          "File: api/envoy/config/filter/network/wasm/v2/wasm.proto -> api/envoy/config/filter/network/wasm/v2/wasm.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: syntax = \"proto3\";",
          "3: package envoy.config.filter.network.wasm.v2;",
          "5: option java_outer_classname = \"WasmProto\";",
          "6: option java_multiple_files = true;",
          "7: option java_package = \"io.envoyproxy.envoy.config.filter.network.wasm.v2\";",
          "8: import \"validate/validate.proto\";",
          "9: import \"envoy/config/wasm/v2/wasm.proto\";",
          "14: message Wasm {",
          "16:   string root_id = 1;",
          "18:   string vm_id = 2;",
          "20:   envoy.config.wasm.v2.VmConfig vm_config = 3;",
          "23:   string configuration = 4;",
          "24: }",
          "",
          "---------------"
        ],
        "api/wasm/cpp/proxy_wasm_api.h||api/wasm/cpp/proxy_wasm_api.h": [
          "File: api/wasm/cpp/proxy_wasm_api.h -> api/wasm/cpp/proxy_wasm_api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "376:   virtual void onCreate() {}",
          "377:   virtual FilterHeadersStatus onRequestHeaders() { return FilterHeadersStatus::Continue; }",
          "378:   virtual FilterMetadataStatus onRequestMetadata() { return FilterMetadataStatus::Continue; }",
          "379:   virtual FilterDataStatus onRequestBody(size_t /* body_buffer_length */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:   virtual FilterStatus onNewConnection() { return FilterStatus::Continue; }",
          "379:   virtual FilterStatus onDownstreamData(size_t, bool) { return FilterStatus::Continue; }",
          "380:   virtual FilterStatus onUpstreamData(size_t, bool) { return FilterStatus::Continue; }",
          "381:   virtual void onDownstreamConnectionClose(PeerType) {}",
          "382:   virtual void onUpstreamConnectionClose(PeerType) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:   return result;",
          "565: }",
          "568: inline WasmResult addHeaderMapValue(HeaderMapType type, StringView key, StringView value) {",
          "569:   return proxy_addHeaderMapValue(type, key.data(), key.size(), value.data(), value.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: inline WasmResult getDownstreamDataBufferBytes(size_t start, size_t length, WasmDataPtr* data) {",
          "576:   const char* data_ptr = nullptr;",
          "577:   size_t data_size = 0;",
          "578:   auto result = proxy_getDownstreamDataBufferBytes(start, length, &data_ptr, &data_size);",
          "580:   return result;",
          "581: }",
          "583: inline WasmResult getUpstreamDataBufferBytes(size_t start, size_t length, WasmDataPtr* data) {",
          "584:   const char* data_ptr = nullptr;",
          "585:   size_t data_size = 0;",
          "586:   auto result = proxy_getUpstreamDataBufferBytes(start, length, &data_ptr, &data_size);",
          "588:   return result;",
          "589: }",
          "",
          "---------------"
        ],
        "api/wasm/cpp/proxy_wasm_enums.h||api/wasm/cpp/proxy_wasm_enums.h": [
          "File: api/wasm/cpp/proxy_wasm_enums.h -> api/wasm/cpp/proxy_wasm_enums.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #pragma once",
          "8: enum class LogLevel : int32_t { trace, debug, info, warn, error, critical };",
          "9: enum class FilterHeadersStatus : int32_t { Continue = 0, StopIteration = 1 };",
          "10: enum class FilterMetadataStatus : int32_t { Continue = 0 };",
          "11: enum class FilterTrailersStatus : int32_t { Continue = 0, StopIteration = 1 };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: enum class FilterStatus : int32_t { Continue = 0, StopIteration = 1 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   Gauge = 1,",
          "42:   Histogram = 2,",
          "43: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: enum class PeerType : int32_t {",
          "46:   Unknown = 0,",
          "47:   Local = 1,",
          "48:   Remote = 2,",
          "49: };",
          "",
          "---------------"
        ],
        "api/wasm/cpp/proxy_wasm_externs.h||api/wasm/cpp/proxy_wasm_externs.h": [
          "File: api/wasm/cpp/proxy_wasm_externs.h -> api/wasm/cpp/proxy_wasm_externs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: extern \"C\" WasmResult proxy_enqueueSharedQueue(uint32_t token, const char* data_ptr,",
          "106:                                                size_t data_size);",
          "109: extern \"C\" WasmResult proxy_addHeaderMapValue(HeaderMapType type, const char* key_ptr,",
          "110:                                               size_t key_size, const char* value_ptr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: extern \"C\" WasmResult proxy_getDownstreamDataBufferBytes(uint32_t start, uint32_t length,",
          "110:                                                          const char** ptr, size_t* size);",
          "111: extern \"C\" WasmResult proxy_getUpstreamDataBufferBytes(uint32_t start, uint32_t length,",
          "112:                                                        const char** ptr, size_t* size);",
          "",
          "---------------"
        ],
        "api/wasm/cpp/proxy_wasm_intrinsics.cc||api/wasm/cpp/proxy_wasm_intrinsics.cc": [
          "File: api/wasm/cpp/proxy_wasm_intrinsics.cc -> api/wasm/cpp/proxy_wasm_intrinsics.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   ensureContext(context_id, root_context_id)->onCreate();",
          "134: }",
          "136: extern \"C\" EMSCRIPTEN_KEEPALIVE FilterHeadersStatus proxy_onRequestHeaders(uint32_t context_id) {",
          "137:   return getContext(context_id)->onRequestHeaders();",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: extern \"C\" EMSCRIPTEN_KEEPALIVE FilterStatus proxy_onNewConnection(uint32_t context_id) {",
          "137:   return getContext(context_id)->onNewConnection();",
          "138: }",
          "140: extern \"C\" EMSCRIPTEN_KEEPALIVE FilterStatus proxy_onDownstreamData(uint32_t context_id,",
          "141:                                                                     uint32_t data_length,",
          "142:                                                                     uint32_t end_of_stream) {",
          "143:   return getContext(context_id)",
          "144:       ->onDownstreamData(static_cast<size_t>(data_length), end_of_stream != 0);",
          "145: }",
          "147: extern \"C\" EMSCRIPTEN_KEEPALIVE FilterStatus proxy_onUpstreamData(uint32_t context_id,",
          "148:                                                                   uint32_t data_length,",
          "149:                                                                   uint32_t end_of_stream) {",
          "150:   return getContext(context_id)",
          "151:       ->onUpstreamData(static_cast<size_t>(data_length), end_of_stream != 0);",
          "152: }",
          "154: extern \"C\" EMSCRIPTEN_KEEPALIVE void proxy_onDownstreamConnectionClose(uint32_t context_id,",
          "155:                                                                        uint32_t peer_type) {",
          "156:   return getContext(context_id)->onDownstreamConnectionClose(static_cast<PeerType>(peer_type));",
          "157: }",
          "159: extern \"C\" EMSCRIPTEN_KEEPALIVE void proxy_onUpstreamConnectionClose(uint32_t context_id,",
          "160:                                                                      uint32_t peer_type) {",
          "161:   return getContext(context_id)->onUpstreamConnectionClose(static_cast<PeerType>(peer_type));",
          "162: }",
          "",
          "---------------"
        ],
        "api/wasm/cpp/proxy_wasm_intrinsics.js||api/wasm/cpp/proxy_wasm_intrinsics.js": [
          "File: api/wasm/cpp/proxy_wasm_intrinsics.js -> api/wasm/cpp/proxy_wasm_intrinsics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     proxy_grpcCancel : function () {},",
          "34:     proxy_sendLocalResponse : function () {},",
          "35:     proxy_setEffectiveContext : function () {},",
          "36: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     proxy_getDownstreamDataBufferBytes: function () {},",
          "37:     proxy_getUpstreamDataBufferBytes: function () {},",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/null/null_plugin.cc||source/extensions/common/wasm/null/null_plugin.cc": [
          "File: source/extensions/common/wasm/null/null_plugin.cc -> source/extensions/common/wasm/null/null_plugin.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:       SaveRestoreContext saved_context(context);",
          "73:       plugin->onCreate(context_id.u64_, root_context_id.u64_);",
          "74:     };",
          "75:   } else if (function_name == \"_proxy_onGrpcCreateInitialMetadata\") {",
          "76:     auto plugin = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   } else if (function_name == \"_proxy_onDownstreamConnectionClose\") {",
          "76:     auto plugin = this;",
          "78:       SaveRestoreContext saved_context(context);",
          "79:       plugin->onDownstreamConnectionClose(context_id.u64_, peer_type.u64_);",
          "80:     };",
          "81:   } else if (function_name == \"_proxy_onUpstreamConnectionClose\") {",
          "82:     auto plugin = this;",
          "84:       SaveRestoreContext saved_context(context);",
          "85:       plugin->onUpstreamConnectionClose(context_id.u64_, peer_type.u64_);",
          "86:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:       return Word(reinterpret_cast<uint64_t>(::malloc(size.u64_)));",
          "167:     };",
          "168:   } else if (function_name == \"_proxy_onRequestHeaders\") {",
          "169:     auto plugin = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   } else if (function_name == \"_proxy_onNewConnection\") {",
          "181:     auto plugin = this;",
          "183:       SaveRestoreContext saved_context(context);",
          "184:       return Word(plugin->onNewConnection(context_id.u64_));",
          "185:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:       SaveRestoreContext saved_context(context);",
          "220:       return Word(plugin->onConfigure(context_id.u64_, ptr.u64_, size.u64_));",
          "221:     };",
          "222:   } else if (function_name == \"_proxy_onRequestBody\") {",
          "223:     auto plugin = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:   } else if (function_name == \"_proxy_onDownstreamData\") {",
          "241:     auto plugin = this;",
          "243:                   Word end_of_stream) -> Word {",
          "244:       SaveRestoreContext saved_context(context);",
          "245:       return Word(",
          "246:           plugin->onDownstreamData(context_id.u64_, body_buffer_length.u64_, end_of_stream.u64_));",
          "247:     };",
          "248:   } else if (function_name == \"_proxy_onUpstreamData\") {",
          "249:     auto plugin = this;",
          "251:                   Word end_of_stream) -> Word {",
          "252:       SaveRestoreContext saved_context(context);",
          "253:       return Word(",
          "254:           plugin->onUpstreamData(context_id.u64_, body_buffer_length.u64_, end_of_stream.u64_));",
          "255:     };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:   ensureContext(context_id, root_context_id)->onCreate();",
          "335: }",
          "337: uint64_t NullPlugin::onRequestHeaders(uint64_t context_id) {",
          "338:   return static_cast<uint64_t>(getContext(context_id)->onRequestHeaders());",
          "339: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371: uint64_t NullPlugin::onNewConnection(uint64_t context_id) {",
          "372:   return static_cast<uint64_t>(getContext(context_id)->onNewConnection());",
          "373: }",
          "375: uint64_t NullPlugin::onDownstreamData(uint64_t context_id, uint64_t data_length,",
          "376:                                       uint64_t end_of_stream) {",
          "377:   return static_cast<uint64_t>(",
          "378:       getContext(context_id)",
          "379:           ->onDownstreamData(static_cast<size_t>(data_length), end_of_stream != 0));",
          "380: }",
          "382: uint64_t NullPlugin::onUpstreamData(uint64_t context_id, uint64_t data_length,",
          "383:                                     uint64_t end_of_stream) {",
          "384:   return static_cast<uint64_t>(",
          "385:       getContext(context_id)->onUpstreamData(static_cast<size_t>(data_length), end_of_stream != 0));",
          "386: }",
          "388: void NullPlugin::onDownstreamConnectionClose(uint64_t context_id, uint64_t peer_type) {",
          "389:   getContext(context_id)->onDownstreamConnectionClose(static_cast<Plugin::PeerType>(peer_type));",
          "390: }",
          "392: void NullPlugin::onUpstreamConnectionClose(uint64_t context_id, uint64_t peer_type) {",
          "393:   getContext(context_id)->onUpstreamConnectionClose(static_cast<Plugin::PeerType>(peer_type));",
          "394: }",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/null/null_plugin.h||source/extensions/common/wasm/null/null_plugin.h": [
          "File: source/extensions/common/wasm/null/null_plugin.h -> source/extensions/common/wasm/null/null_plugin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Null {",
          "13: namespace Plugin {",
          "14: using LogLevel = Envoy::Logger::Logger::levels;",
          "15: using FilterHeadersStatus = Http::FilterHeadersStatus;",
          "16: using FilterMetadataStatus = Http::FilterMetadataStatus;",
          "17: using FilterTrailersStatus = Http::FilterTrailersStatus;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: using FilterStatus = Network::FilterStatus;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: using GrpcStatus = Envoy::Grpc::Status::GrpcStatus;",
          "20: using MetricType = Envoy::Extensions::Common::Wasm::Context::MetricType;",
          "21: using MetadataType = Envoy::Extensions::Common::Wasm::MetadataType;",
          "22: using WasmResult = Envoy::Extensions::Common::Wasm::WasmResult;",
          "23: using StringView = absl::string_view;",
          "24: template <typename T> using Optional = absl::optional<T>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: using PeerType = Envoy::Extensions::Common::Wasm::Context::PeerType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   void onCreate(uint64_t context_id, uint64_t root_context_id);",
          "77:   uint64_t onRequestHeaders(uint64_t context_id);",
          "78:   uint64_t onRequestBody(uint64_t context_id, uint64_t body_buffer_length, uint64_t end_of_stream);",
          "79:   uint64_t onRequestTrailers(uint64_t context_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   uint64_t onNewConnection(uint64_t context_id);",
          "80:   uint64_t onDownstreamData(uint64_t context_id, uint64_t data_length, uint64_t end_of_stream);",
          "81:   uint64_t onUpstreamData(uint64_t context_id, uint64_t data_length, uint64_t end_of_stream);",
          "82:   void onDownstreamConnectionClose(uint64_t context_id, uint64_t peer_type);",
          "83:   void onUpstreamConnectionClose(uint64_t context_id, uint64_t peer_type);",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/null/wasm_api_impl.h||source/extensions/common/wasm/null/wasm_api_impl.h": [
          "File: source/extensions/common/wasm/null/wasm_api_impl.h -> source/extensions/common/wasm/null/wasm_api_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:       enqueueSharedQueueHandler(current_context_, WS(token), WR(data_ptr), WS(data_size)));",
          "112: }",
          "115: inline WasmResult proxy_addHeaderMapValue(HeaderMapType type, const char* key_ptr, size_t key_size,",
          "116:                                           const char* value_ptr, size_t value_size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: inline WasmResult proxy_getDownstreamDataBufferBytes(uint64_t start, uint64_t length,",
          "116:                                                      const char** ptr, size_t* size) {",
          "117:   return wordToWasmResult(getDownstreamDataBufferBytesHandler(current_context_, WS(start),",
          "118:                                                               WS(length), WR(ptr), WR(size)));",
          "119: }",
          "120: inline WasmResult proxy_getUpstreamDataBufferBytes(uint64_t start, uint64_t length,",
          "121:                                                    const char** ptr, size_t* size) {",
          "122:   return wordToWasmResult(getUpstreamDataBufferBytesHandler(current_context_, WS(start), WS(length),",
          "123:                                                             WR(ptr), WR(size)));",
          "124: }",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc": [
          "File: source/extensions/common/wasm/wasm.cc -> source/extensions/common/wasm/wasm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:   return wasmResultToWord(context->enqueueSharedQueue(token.u32(), data.value()));",
          "540: }",
          "543: Word addHeaderMapValueHandler(void* raw_context, Word type, Word key_ptr, Word key_size,",
          "544:                               Word value_ptr, Word value_size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543: Word getDownstreamDataBufferBytesHandler(void* raw_context, Word start, Word length, Word ptr_ptr,",
          "544:                                          Word size_ptr) {",
          "545:   auto context = WASM_CONTEXT(raw_context);",
          "546:   absl::string_view data;",
          "547:   auto result = context->getDownstreamDataBufferBytes(start.u64_, length.u64_, &data);",
          "548:   if (result != WasmResult::Ok) {",
          "549:     return wasmResultToWord(result);",
          "550:   }",
          "551:   context->wasm()->copyToPointerSize(data, ptr_ptr.u64_, size_ptr.u64_);",
          "552:   return wasmResultToWord(WasmResult::Ok);",
          "553: }",
          "555: Word getUpstreamDataBufferBytesHandler(void* raw_context, Word start, Word length, Word ptr_ptr,",
          "556:                                        Word size_ptr) {",
          "557:   auto context = WASM_CONTEXT(raw_context);",
          "558:   absl::string_view data;",
          "559:   auto result = context->getUpstreamDataBufferBytes(start.u64_, length.u64_, &data);",
          "560:   if (result != WasmResult::Ok) {",
          "561:     return wasmResultToWord(result);",
          "562:   }",
          "563:   context->wasm()->copyToPointerSize(data, ptr_ptr.u64_, size_ptr.u64_);",
          "564:   return wasmResultToWord(WasmResult::Ok);",
          "565: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1308:   return global_shared_data.enqueue(token, value);",
          "1309: }",
          "1312: Http::HeaderMap* Context::getMap(HeaderMapType type) {",
          "1313:   switch (type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1338: WasmResult Context::getDownstreamDataBufferBytes(uint32_t start, uint32_t length,",
          "1339:                                                  absl::string_view* data) {",
          "1340:   if (!network_downstream_data_buffer_)",
          "1341:     return WasmResult::NotFound;",
          "1342:   if (network_downstream_data_buffer_->length() < static_cast<uint64_t>(start + length))",
          "1343:     return WasmResult::InvalidMemoryAccess;",
          "1345:       static_cast<char*>(network_downstream_data_buffer_->linearize(start + length)) + start,",
          "1346:       length);",
          "1347:   return WasmResult::Ok;",
          "1348: }",
          "1350: WasmResult Context::getUpstreamDataBufferBytes(uint32_t start, uint32_t length,",
          "1351:                                                absl::string_view* data) {",
          "1352:   if (!network_upstream_data_buffer_)",
          "1353:     return WasmResult::NotFound;",
          "1354:   if (network_upstream_data_buffer_->length() < static_cast<uint64_t>(start + length))",
          "1355:     return WasmResult::InvalidMemoryAccess;",
          "1357:       static_cast<char*>(network_upstream_data_buffer_->linearize(start + length)) + start, length);",
          "1358:   return WasmResult::Ok;",
          "1359: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1713:   }",
          "1714: }",
          "1716: Http::FilterHeadersStatus Context::onRequestHeaders() {",
          "1717:   onCreate(root_context_id_);",
          "1718:   in_vm_context_created_ = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1766: Network::FilterStatus Context::onNetworkNewConnection() {",
          "1767:   onCreate(root_context_id_);",
          "1768:   if (!wasm_->onNewConnection_) {",
          "1769:     return Network::FilterStatus::Continue;",
          "1770:   }",
          "1771:   if (wasm_->onNewConnection_(this, id_).u64_ == 0) {",
          "1772:     return Network::FilterStatus::Continue;",
          "1773:   }",
          "1774:   return Network::FilterStatus::StopIteration;",
          "1775: }",
          "1777: Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {",
          "1778:   if (!wasm_->onDownstreamData_) {",
          "1779:     return Network::FilterStatus::Continue;",
          "1780:   }",
          "1781:   auto result = wasm_->onDownstreamData_(this, id_, static_cast<uint32_t>(data_length),",
          "1782:                                          static_cast<uint32_t>(end_of_stream));",
          "1784:   return result.u64_ == 0 ? Network::FilterStatus::Continue : Network::FilterStatus::StopIteration;",
          "1785: }",
          "1787: Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {",
          "1788:   if (!wasm_->onUpstreamData_) {",
          "1789:     return Network::FilterStatus::Continue;",
          "1790:   }",
          "1791:   auto result = wasm_->onUpstreamData_(this, id_, static_cast<uint32_t>(data_length),",
          "1792:                                        static_cast<uint32_t>(end_of_stream));",
          "1794:   return result.u64_ == 0 ? Network::FilterStatus::Continue : Network::FilterStatus::StopIteration;",
          "1795: }",
          "1797: void Context::onDownstreamConnectionClose(PeerType peer_type) {",
          "1798:   if (wasm_->onDownstreamConnectionClose_) {",
          "1799:     wasm_->onDownstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));",
          "1800:   }",
          "1801: }",
          "1803: void Context::onUpstreamConnectionClose(PeerType peer_type) {",
          "1804:   if (wasm_->onUpstreamConnectionClose_) {",
          "1805:     wasm_->onUpstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));",
          "1806:   }",
          "1807: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2072:   _REGISTER_PROXY(dequeueSharedQueue);",
          "2073:   _REGISTER_PROXY(enqueueSharedQueue);",
          "2075:   _REGISTER_PROXY(getHeaderMapValue);",
          "2076:   _REGISTER_PROXY(addHeaderMapValue);",
          "2077:   _REGISTER_PROXY(replaceHeaderMapValue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2168:   _REGISTER_PROXY(getDownstreamDataBufferBytes);",
          "2169:   _REGISTER_PROXY(getUpstreamDataBufferBytes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2133:   _GET_PROXY(onTick);",
          "2135:   _GET_PROXY(onCreate);",
          "2136:   _GET_PROXY(onRequestHeaders);",
          "2137:   _GET_PROXY(onRequestBody);",
          "2138:   _GET_PROXY(onRequestTrailers);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2233:   _GET_PROXY(onNewConnection);",
          "2234:   _GET_PROXY(onDownstreamData);",
          "2235:   _GET_PROXY(onUpstreamData);",
          "2236:   _GET_PROXY(onDownstreamConnectionClose);",
          "2237:   _GET_PROXY(onUpstreamConnectionClose);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2314:   it->second->onQueueReady(token);",
          "2315: }",
          "2317: void Wasm::log(absl::string_view root_id, const Http::HeaderMap* request_headers,",
          "2318:                const Http::HeaderMap* response_headers, const Http::HeaderMap* response_trailers,",
          "2319:                const StreamInfo::StreamInfo& stream_info) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2420: Network::FilterStatus Context::onNewConnection() { return onNetworkNewConnection(); };",
          "2422: Network::FilterStatus Context::onData(Buffer::Instance& data, bool end_stream) {",
          "2423:   network_downstream_data_buffer_ = &data;",
          "2424:   auto result = onDownstreamData(data.length(), end_stream);",
          "2425:   network_downstream_data_buffer_ = nullptr;",
          "2426:   return result;",
          "2427: }",
          "2429: Network::FilterStatus Context::onWrite(Buffer::Instance& data, bool end_stream) {",
          "2430:   network_upstream_data_buffer_ = &data;",
          "2431:   auto result = onUpstreamData(data.length(), end_stream);",
          "2432:   network_upstream_data_buffer_ = nullptr;",
          "2433:   if (end_stream) {",
          "2436:     onUpstreamConnectionClose(PeerType::Unknown);",
          "2437:   }",
          "2438:   return result;",
          "2439: }",
          "2441: void Context::onEvent(Network::ConnectionEvent event) {",
          "2442:   switch (event) {",
          "2443:   case Network::ConnectionEvent::LocalClose:",
          "2444:     onDownstreamConnectionClose(PeerType::Local);",
          "2445:     break;",
          "2446:   case Network::ConnectionEvent::RemoteClose:",
          "2447:     onDownstreamConnectionClose(PeerType::Remote);",
          "2448:     break;",
          "2449:   default:",
          "2450:     break;",
          "2451:   }",
          "2452: }",
          "2454: void Context::initializeReadFilterCallbacks(Network::ReadFilterCallbacks& callbacks) {",
          "2455:   network_read_filter_callbacks_ = &callbacks;",
          "2456:   network_read_filter_callbacks_->connection().addConnectionCallbacks(*this);",
          "2457: }",
          "2459: void Context::initializeWriteFilterCallbacks(Network::WriteFilterCallbacks& callbacks) {",
          "2460:   network_write_filter_callbacks_ = &callbacks;",
          "2461: }",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h": [
          "File: source/extensions/common/wasm/wasm.h -> source/extensions/common/wasm/wasm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: Word dequeueSharedQueueHandler(void* raw_context, Word token, Word data_ptr_ptr,",
          "65:                                Word data_size_ptr);",
          "66: Word enqueueSharedQueueHandler(void* raw_context, Word token, Word data_ptr, Word data_size);",
          "67: Word addHeaderMapValueHandler(void* raw_context, Word type, Word key_ptr, Word key_size,",
          "68:                               Word value_ptr, Word value_size);",
          "69: Word getHeaderMapValueHandler(void* raw_context, Word type, Word key_ptr, Word key_size,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: Word getDownstreamDataBufferBytesHandler(void* raw_context, Word start, Word length, Word ptr_ptr,",
          "68:                                          Word size_ptr);",
          "69: Word getUpstreamDataBufferBytesHandler(void* raw_context, Word start, Word length, Word ptr_ptr,",
          "70:                                        Word size_ptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:                 public AccessLog::Instance,",
          "161:                 public std::enable_shared_from_this<Context> {",
          "162: public:",
          "163:   Context();                                      // Testing.",
          "",
          "[Removed Lines]",
          "158: class Context : public Http::StreamFilter,",
          "160:                 public Logger::Loggable<Logger::Id::wasm>,",
          "",
          "[Added Lines]",
          "162: class Context : public Logger::Loggable<Logger::Id::wasm>,",
          "164:                 public Http::StreamFilter,",
          "165:                 public Network::ConnectionCallbacks,",
          "166:                 public Network::Filter,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:   virtual void onCreate(uint32_t root_context_id);",
          "197:   virtual Http::FilterHeadersStatus onRequestHeaders();",
          "198:   virtual Http::FilterDataStatus onRequestBody(int body_buffer_length, bool end_of_stream);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:   virtual Network::FilterStatus onNetworkNewConnection();",
          "204:   virtual Network::FilterStatus onDownstreamData(int data_length, bool end_of_stream);",
          "205:   virtual Network::FilterStatus onUpstreamData(int data_length, bool end_of_stream);",
          "206:   enum class PeerType : uint32_t {",
          "207:     Unknown = 0,",
          "208:     Local = 1,",
          "209:     Remote = 2,",
          "210:   };",
          "211:   virtual void onDownstreamConnectionClose(PeerType);",
          "212:   virtual void onUpstreamConnectionClose(PeerType);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:            const Http::HeaderMap* response_trailers,",
          "229:            const StreamInfo::StreamInfo& stream_info) override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:   void onEvent(Network::ConnectionEvent event) override;",
          "252:   void onAboveWriteBufferHighWatermark() override {}",
          "253:   void onBelowWriteBufferLowWatermark() override {}",
          "258:   Network::FilterStatus onNewConnection() override;",
          "259:   Network::FilterStatus onData(Buffer::Instance& data, bool end_stream) override;",
          "260:   void initializeReadFilterCallbacks(Network::ReadFilterCallbacks& callbacks) override;",
          "265:   Network::FilterStatus onWrite(Buffer::Instance& data, bool end_stream) override;",
          "266:   void initializeWriteFilterCallbacks(Network::WriteFilterCallbacks& callbacks) override;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:   virtual WasmResult dequeueSharedQueue(uint32_t token, std::string* data);",
          "296:   virtual WasmResult enqueueSharedQueue(uint32_t token, absl::string_view value);",
          "299:   virtual void addHeaderMapValue(HeaderMapType type, absl::string_view key,",
          "300:                                  absl::string_view value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   virtual WasmResult getDownstreamDataBufferBytes(uint32_t start, uint32_t length,",
          "337:                                                   absl::string_view* data);",
          "338:   virtual WasmResult getUpstreamDataBufferBytes(uint32_t start, uint32_t length,",
          "339:                                                 absl::string_view* data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "396:   Envoy::Http::StreamDecoderFilterCallbacks* decoder_callbacks_{};",
          "397:   Envoy::Http::StreamEncoderFilterCallbacks* encoder_callbacks_{};",
          "400:   Http::HeaderMap* request_headers_{};",
          "401:   Http::HeaderMap* response_headers_{};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:   Network::ReadFilterCallbacks* network_read_filter_callbacks_{};",
          "444:   Network::WriteFilterCallbacks* network_write_filter_callbacks_{};",
          "445:   Buffer::Instance* network_downstream_data_buffer_{};",
          "446:   Buffer::Instance* network_upstream_data_buffer_{};",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "575:   WasmCallVoid<2> onCreate_;",
          "577:   WasmCallWord<1> onRequestHeaders_;",
          "578:   WasmCallWord<3> onRequestBody_;",
          "579:   WasmCallWord<1> onRequestTrailers_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   WasmCallWord<1> onNewConnection_;",
          "627:   WasmCallWord<3> onDownstreamData_;",
          "628:   WasmCallWord<3> onUpstreamData_;",
          "629:   WasmCallVoid<2> onDownstreamConnectionClose_;",
          "630:   WasmCallVoid<2> onUpstreamConnectionClose_;",
          "",
          "---------------"
        ],
        "source/extensions/extensions_build_config.bzl||source/extensions/extensions_build_config.bzl": [
          "File: source/extensions/extensions_build_config.bzl -> source/extensions/extensions_build_config.bzl",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     \"envoy.filters.network.ratelimit\":                  \"//source/extensions/filters/network/ratelimit:config\",",
          "97:     \"envoy.filters.network.rbac\":                       \"//source/extensions/filters/network/rbac:config\",",
          "98:     \"envoy.filters.network.redis_proxy\":                \"//source/extensions/filters/network/redis_proxy:config\",",
          "99:     \"envoy.filters.network.tcp_proxy\":                  \"//source/extensions/filters/network/tcp_proxy:config\",",
          "100:     \"envoy.filters.network.thrift_proxy\":               \"//source/extensions/filters/network/thrift_proxy:config\",",
          "102:     \"envoy.filters.network.zookeeper_proxy\":            \"//source/extensions/filters/network/zookeeper_proxy:config\",",
          "104:     #",
          "",
          "[Removed Lines]",
          "101:     \"envoy.filters.network.sni_cluster\":                \"//source/extensions/filters/network/sni_cluster:config\",",
          "",
          "[Added Lines]",
          "99:     \"envoy.filters.network.sni_cluster\":                \"//source/extensions/filters/network/sni_cluster:config\",",
          "102:     \"envoy.filters.network.wasm\":                       \"//source/extensions/filters/network/wasm:config\",",
          "",
          "---------------"
        ],
        "source/extensions/filters/network/wasm/config.cc||source/extensions/filters/network/wasm/config.cc": [
          "File: source/extensions/filters/network/wasm/config.cc -> source/extensions/filters/network/wasm/config.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"extensions/filters/network/wasm/config.h\"",
          "3: #include \"envoy/config/filter/network/wasm/v2/wasm.pb.validate.h\"",
          "4: #include \"envoy/registry/registry.h\"",
          "6: #include \"common/common/empty_string.h\"",
          "7: #include \"common/config/datasource.h\"",
          "9: #include \"extensions/common/wasm/wasm.h\"",
          "10: #include \"extensions/filters/network/wasm/wasm_filter.h\"",
          "12: namespace Envoy {",
          "13: namespace Extensions {",
          "14: namespace NetworkFilters {",
          "15: namespace Wasm {",
          "17: Network::FilterFactoryCb WasmFilterConfig::createFilterFactoryFromProtoTyped(",
          "18:     const envoy::config::filter::network::wasm::v2::Wasm& proto_config,",
          "19:     Server::Configuration::FactoryContext& context) {",
          "20:   auto filter_config = std::make_shared<FilterConfig>(proto_config, context);",
          "21:   return [filter_config](Network::FilterManager& filter_manager) -> void {",
          "22:     auto filter = filter_config->createFilter();",
          "23:     filter_manager.addFilter(filter);",
          "24:   };",
          "25: }",
          "30: REGISTER_FACTORY(WasmFilterConfig, Server::Configuration::NamedNetworkFilterConfigFactory);",
          "32: } // namespace Wasm",
          "33: } // namespace NetworkFilters",
          "34: } // namespace Extensions",
          "35: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/filters/network/wasm/config.h||source/extensions/filters/network/wasm/config.h": [
          "File: source/extensions/filters/network/wasm/config.h -> source/extensions/filters/network/wasm/config.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include \"envoy/config/filter/network/wasm/v2/wasm.pb.h\"",
          "5: #include \"extensions/filters/network/common/factory_base.h\"",
          "6: #include \"extensions/filters/network/well_known_names.h\"",
          "8: namespace Envoy {",
          "9: namespace Extensions {",
          "10: namespace NetworkFilters {",
          "11: namespace Wasm {",
          "16: class WasmFilterConfig",
          "17:     : public Common::FactoryBase<envoy::config::filter::network::wasm::v2::Wasm> {",
          "18: public:",
          "19:   WasmFilterConfig() : FactoryBase(NetworkFilterNames::get().Wasm) {}",
          "21: private:",
          "22:   Network::FilterFactoryCb createFilterFactoryFromProtoTyped(",
          "23:       const envoy::config::filter::network::wasm::v2::Wasm& proto_config,",
          "24:       Server::Configuration::FactoryContext& context) override;",
          "25: };",
          "27: } // namespace Wasm",
          "28: } // namespace NetworkFilters",
          "29: } // namespace Extensions",
          "30: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/filters/network/wasm/wasm_filter.cc||source/extensions/filters/network/wasm/wasm_filter.cc": [
          "File: source/extensions/filters/network/wasm/wasm_filter.cc -> source/extensions/filters/network/wasm/wasm_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"extensions/filters/network/wasm/wasm_filter.h\"",
          "3: #include \"common/buffer/buffer_impl.h\"",
          "4: #include \"common/common/assert.h\"",
          "5: #include \"common/common/enum_to_int.h\"",
          "7: namespace Envoy {",
          "8: namespace Extensions {",
          "9: namespace NetworkFilters {",
          "10: namespace Wasm {",
          "12: FilterConfig::FilterConfig(const envoy::config::filter::network::wasm::v2::Wasm& config,",
          "13:                            Server::Configuration::FactoryContext& context)",
          "14:     : root_id_(config.root_id()), tls_slot_(context.threadLocal().allocateSlot()) {",
          "15:   auto vm_id = config.vm_id();",
          "16:   auto root_id = config.root_id();",
          "17:   auto configuration = std::make_shared<std::string>(config.configuration());",
          "18:   if (config.has_vm_config()) {",
          "21:     auto base_wasm = Common::Wasm::createWasm(",
          "22:         vm_id, config.vm_config(), root_id, context.clusterManager(), context.dispatcher(),",
          "23:         context.api(), context.scope(), context.direction(), context.localInfo(),",
          "24:         &context.listenerMetadata(), nullptr /* owned_scope */);",
          "26:     tls_slot_->set([base_wasm, root_id, configuration](Event::Dispatcher& dispatcher) {",
          "27:       auto result = Extensions::Common::Wasm::createThreadLocalWasm(*base_wasm, root_id,",
          "29:       return std::static_pointer_cast<ThreadLocal::ThreadLocalObject>(result);",
          "30:     });",
          "31:   } else {",
          "32:     if (vm_id.empty()) {",
          "33:       throw Common::Wasm::WasmVmException(\"No WASM VM Id or vm_config specified\");",
          "34:     }",
          "35:     tls_slot_->set([vm_id, root_id, configuration](Event::Dispatcher&) {",
          "36:       auto result = Extensions::Common::Wasm::getThreadLocalWasm(vm_id, root_id, *configuration);",
          "37:       return std::static_pointer_cast<ThreadLocal::ThreadLocalObject>(result);",
          "38:     });",
          "39:   }",
          "40: }",
          "42: } // namespace Wasm",
          "43: } // namespace NetworkFilters",
          "44: } // namespace Extensions",
          "45: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/filters/network/wasm/wasm_filter.h||source/extensions/filters/network/wasm/wasm_filter.h": [
          "File: source/extensions/filters/network/wasm/wasm_filter.h -> source/extensions/filters/network/wasm/wasm_filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include <memory>",
          "5: #include \"envoy/config/filter/network/wasm/v2/wasm.pb.validate.h\"",
          "6: #include \"envoy/network/filter.h\"",
          "7: #include \"envoy/server/filter_config.h\"",
          "8: #include \"envoy/upstream/cluster_manager.h\"",
          "10: #include \"extensions/common/wasm/wasm.h\"",
          "11: #include \"extensions/filters/network/well_known_names.h\"",
          "13: namespace Envoy {",
          "14: namespace Extensions {",
          "15: namespace NetworkFilters {",
          "16: namespace Wasm {",
          "18: using Envoy::Extensions::Common::Wasm::Context;",
          "19: using Envoy::Extensions::Common::Wasm::Wasm;",
          "21: class FilterConfig : Logger::Loggable<Logger::Id::wasm> {",
          "22: public:",
          "23:   FilterConfig(const envoy::config::filter::network::wasm::v2::Wasm& proto_config,",
          "24:                Server::Configuration::FactoryContext& context);",
          "26:   std::shared_ptr<Context> createFilter() {",
          "27:     auto& wasm = tls_slot_->getTyped<Wasm>();",
          "28:     if (!root_context_id_) {",
          "29:       root_context_id_ = wasm.getRootContext(root_id_)->id();",
          "30:     }",
          "31:     return std::make_shared<Context>(&tls_slot_->getTyped<Wasm>(), root_context_id_);",
          "32:   }",
          "34: private:",
          "35:   std::string root_id_;",
          "36:   uint32_t root_context_id_{0};",
          "37:   ThreadLocal::SlotPtr tls_slot_;",
          "38: };",
          "40: typedef std::shared_ptr<FilterConfig> FilterConfigSharedPtr;",
          "42: } // namespace Wasm",
          "43: } // namespace NetworkFilters",
          "44: } // namespace Extensions",
          "45: } // namespace Envoy",
          "",
          "---------------"
        ],
        "source/extensions/filters/network/well_known_names.h||source/extensions/filters/network/well_known_names.h": [
          "File: source/extensions/filters/network/well_known_names.h -> source/extensions/filters/network/well_known_names.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   const std::string SniCluster = \"envoy.filters.network.sni_cluster\";",
          "42:   const std::string ZooKeeperProxy = \"envoy.filters.network.zookeeper_proxy\";",
          "45:   const Config::V1Converter v1_converter_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:   const std::string Wasm = \"envoy.filters.network.wasm\";",
          "",
          "---------------"
        ],
        "test/extensions/filters/network/wasm/config_test.cc||test/extensions/filters/network/wasm/config_test.cc": [
          "File: test/extensions/filters/network/wasm/config_test.cc -> test/extensions/filters/network/wasm/config_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"envoy/config/filter/network/wasm/v2/wasm.pb.validate.h\"",
          "3: #include \"common/common/base64.h\"",
          "5: #include \"extensions/common/wasm/wasm.h\"",
          "6: #include \"extensions/filters/network/wasm/config.h\"",
          "8: #include \"test/mocks/server/mocks.h\"",
          "9: #include \"test/test_common/environment.h\"",
          "11: #include \"gmock/gmock.h\"",
          "12: #include \"gtest/gtest.h\"",
          "14: using testing::_;",
          "15: using testing::ReturnRef;",
          "17: namespace Envoy {",
          "18: namespace Extensions {",
          "19: namespace NetworkFilters {",
          "20: namespace Wasm {",
          "22: class WasmFilterConfigTest : public testing::TestWithParam<std::string> {",
          "23: protected:",
          "24:   WasmFilterConfigTest() : api_(Api::createApiForTest(stats_store_)) {",
          "25:     ON_CALL(context_, api()).WillByDefault(ReturnRef(*api_));",
          "26:     ON_CALL(context_, scope()).WillByDefault(ReturnRef(stats_store_));",
          "27:     ON_CALL(context_, listenerMetadata()).WillByDefault(ReturnRef(listener_metadata_));",
          "28:   }",
          "30:   NiceMock<Server::Configuration::MockFactoryContext> context_;",
          "31:   Stats::IsolatedStoreImpl stats_store_;",
          "32:   Api::ApiPtr api_;",
          "33:   envoy::api::v2::core::Metadata listener_metadata_;",
          "34: };",
          "36: INSTANTIATE_TEST_SUITE_P(Runtimes, WasmFilterConfigTest,",
          "37:                          testing::Values(",
          "38: #if defined(ENVOY_WASM_V8) && defined(ENVOY_WASM_WAVM)",
          "39:                              \"v8\", \"wavm\"",
          "40: #elif defined(ENVOY_WASM_V8)",
          "41:                              \"v8\"",
          "42: #elif defined(ENVOY_WASM_WAVM)",
          "43:                              \"wavm\"",
          "44: #endif",
          "45:                              ));",
          "47: TEST_P(WasmFilterConfigTest, YamlLoadFromFileWASM) {",
          "48:   const std::string yaml = TestEnvironment::substitute(absl::StrCat(R\"EOF(",
          "49:   vm_config:",
          "50:     vm: \"envoy.wasm.vm.)EOF\",",
          "51:                                                                     GetParam(), R\"EOF(\"",
          "52:     code: { filename: \"{{ test_rundir }}/test/extensions/filters/network/wasm/test_data/logging_cpp.wasm\" }",
          "53:   )EOF\"));",
          "55:   envoy::config::filter::network::wasm::v2::Wasm proto_config;",
          "56:   TestUtility::loadFromYaml(yaml, proto_config);",
          "57:   WasmFilterConfig factory;",
          "58:   Network::FilterFactoryCb cb = factory.createFilterFactoryFromProto(proto_config, context_);",
          "59:   Network::MockConnection connection;",
          "60:   EXPECT_CALL(connection, addFilter(_));",
          "61:   cb(connection);",
          "62: }",
          "64: TEST_P(WasmFilterConfigTest, YamlLoadInlineWASM) {",
          "65:   const std::string code = TestEnvironment::readFileToStringForTest(TestEnvironment::substitute(",
          "66:       \"{{ test_rundir }}/test/extensions/filters/network/wasm/test_data/logging_cpp.wasm\"));",
          "67:   EXPECT_FALSE(code.empty());",
          "68:   const std::string yaml = absl::StrCat(R\"EOF(",
          "69:   vm_config:",
          "70:     vm: \"envoy.wasm.vm.)EOF\",",
          "71:                                         GetParam(), R\"EOF(\"",
          "72:     code: { inline_bytes: \")EOF\",",
          "73:                                         Base64::encode(code.data(), code.size()), R\"EOF(\" }",
          "74:   )EOF\");",
          "76:   envoy::config::filter::network::wasm::v2::Wasm proto_config;",
          "77:   TestUtility::loadFromYaml(yaml, proto_config);",
          "78:   WasmFilterConfig factory;",
          "79:   Network::FilterFactoryCb cb = factory.createFilterFactoryFromProto(proto_config, context_);",
          "80:   Network::MockConnection connection;",
          "81:   EXPECT_CALL(connection, addFilter(_));",
          "82:   cb(connection);",
          "83: }",
          "85: TEST_P(WasmFilterConfigTest, YamlLoadInlineBadCode) {",
          "86:   const std::string yaml = absl::StrCat(R\"EOF(",
          "87:   vm_config:",
          "88:     vm: \"envoy.wasm.vm.)EOF\",",
          "89:                                         GetParam(), R\"EOF(\"",
          "90:     code: { inline_string: \"bad code\" }",
          "91:   )EOF\");",
          "93:   envoy::config::filter::network::wasm::v2::Wasm proto_config;",
          "94:   TestUtility::loadFromYaml(yaml, proto_config);",
          "95:   WasmFilterConfig factory;",
          "96:   EXPECT_THROW_WITH_MESSAGE(factory.createFilterFactoryFromProto(proto_config, context_),",
          "97:                             Extensions::Common::Wasm::WasmException,",
          "98:                             \"Failed to initialize WASM code from <inline>\");",
          "99: }",
          "101: } // namespace Wasm",
          "102: } // namespace NetworkFilters",
          "103: } // namespace Extensions",
          "104: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder||test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder": [
          "File: test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder -> test/extensions/filters/network/wasm/test_data/Makefile.docker_cpp_builder",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: DOCKER_SDK=/external_sdk",
          "3: all: logging_cpp.wasm",
          "4:  chown ${uid}.${gid} *.wasm",
          "6: include ${DOCKER_SDK}/Makefile.base_lite",
          "",
          "---------------"
        ],
        "test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh||test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh": [
          "File: test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh -> test/extensions/filters/network/wasm/test_data/docker_build_cpp_wasm.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "2: docker run -e uid=\"$(id -u)\" -e gid=\"$(id -g)\" -v $PWD:/work -v $(realpath ../../../../../../api/wasm/cpp):/external_sdk -w /work wasmsdk:v1 bash ./docker_cpp_builder.sh",
          "",
          "---------------"
        ],
        "test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh||test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh": [
          "File: test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh -> test/extensions/filters/network/wasm/test_data/docker_cpp_builder.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "2: source /root/emsdk/emsdk_env.sh",
          "3: export PATH=/usr/local/bin:$PATH",
          "4: make -j -f Makefile.docker_cpp_builder",
          "",
          "---------------"
        ],
        "test/extensions/filters/network/wasm/test_data/logging_cpp.cc||test/extensions/filters/network/wasm/test_data/logging_cpp.cc": [
          "File: test/extensions/filters/network/wasm/test_data/logging_cpp.cc -> test/extensions/filters/network/wasm/test_data/logging_cpp.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <string>",
          "4: #include \"proxy_wasm_intrinsics.h\"",
          "6: class ExampleContext : public Context {",
          "7: public:",
          "8:   explicit ExampleContext(uint32_t id, RootContext* root) : Context(id, root) {}",
          "10:   FilterStatus onNewConnection() override;",
          "11:   FilterStatus onDownstreamData(size_t data_length, bool end_stream) override;",
          "12:   FilterStatus onUpstreamData(size_t data_length, bool end_stream) override;",
          "13:   void onDownstreamConnectionClose(PeerType peer_type) override;",
          "14:   void onUpstreamConnectionClose(PeerType peer_type) override;",
          "15: };",
          "16: static RegisterContextFactory register_ExampleContext(CONTEXT_FACTORY(ExampleContext));",
          "18: FilterStatus ExampleContext::onNewConnection() {",
          "19:   logTrace(\"onNewConnection \" + std::to_string(id()));",
          "20:   return FilterStatus::Continue;",
          "21: }",
          "23: FilterStatus ExampleContext::onDownstreamData(size_t data_length, bool end_stream) {",
          "24:   WasmDataPtr data;",
          "25:   getDownstreamDataBufferBytes(0, data_length, &data);",
          "26:   logTrace(\"onDownstreamData \" + std::to_string(id()) + \" len=\" + std::to_string(data_length) +",
          "27:            \" end_stream=\" + std::to_string(end_stream) + \"\\n\" + std::string(data->view()));",
          "28:   return FilterStatus::Continue;",
          "29: }",
          "31: FilterStatus ExampleContext::onUpstreamData(size_t data_length, bool end_stream) {",
          "32:   WasmDataPtr data;",
          "33:   getUpstreamDataBufferBytes(0, data_length, &data);",
          "34:   logTrace(\"onUpstreamData \" + std::to_string(id()) + \" len=\" + std::to_string(data_length) +",
          "35:            \" end_stream=\" + std::to_string(end_stream) + \"\\n\" + std::string(data->view()));",
          "36:   return FilterStatus::Continue;",
          "37: }",
          "39: void ExampleContext::onDownstreamConnectionClose(PeerType peer_type) {",
          "40:   logTrace(\"onDownstreamConnectionClose \" + std::to_string(id()) + \" \" +",
          "41:            std::to_string(static_cast<uint32_t>(peer_type)));",
          "42: }",
          "44: void ExampleContext::onUpstreamConnectionClose(PeerType peer_type) {",
          "45:   logTrace(\"onUpstreamConnectionClose \" + std::to_string(id()) + \" \" +",
          "46:            std::to_string(static_cast<uint32_t>(peer_type)));",
          "47: }",
          "",
          "---------------"
        ],
        "test/extensions/filters/network/wasm/wasm_filter_test.cc||test/extensions/filters/network/wasm/wasm_filter_test.cc": [
          "File: test/extensions/filters/network/wasm/wasm_filter_test.cc -> test/extensions/filters/network/wasm/wasm_filter_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"extensions/common/wasm/wasm.h\"",
          "2: #include \"extensions/filters/network/wasm/wasm_filter.h\"",
          "4: #include \"test/mocks/network/mocks.h\"",
          "5: #include \"test/mocks/server/mocks.h\"",
          "6: #include \"test/test_common/environment.h\"",
          "8: #include \"gmock/gmock.h\"",
          "9: #include \"gtest/gtest.h\"",
          "11: using testing::_;",
          "12: using testing::Eq;",
          "14: namespace Envoy {",
          "15: namespace Extensions {",
          "16: namespace NetworkFilters {",
          "17: namespace Wasm {",
          "19: class TestFilter : public Envoy::Extensions::Common::Wasm::Context {",
          "20: public:",
          "21:   TestFilter(Wasm* wasm, uint32_t root_context_id)",
          "22:       : Envoy::Extensions::Common::Wasm::Context(wasm, root_context_id) {}",
          "24:   void scriptLog(spdlog::level::level_enum level, absl::string_view message) override {",
          "25:     scriptLog_(level, message);",
          "26:   }",
          "27:   MOCK_METHOD2(scriptLog_, void(spdlog::level::level_enum level, absl::string_view message));",
          "28: };",
          "30: class TestRoot : public Envoy::Extensions::Common::Wasm::Context {",
          "31: public:",
          "32:   TestRoot() {}",
          "34:   void scriptLog(spdlog::level::level_enum level, absl::string_view message) override {",
          "35:     scriptLog_(level, message);",
          "36:   }",
          "37:   MOCK_METHOD2(scriptLog_, void(spdlog::level::level_enum level, absl::string_view message));",
          "38: };",
          "40: class WasmFilterTest : public testing::TestWithParam<std::string> {",
          "41: public:",
          "42:   WasmFilterTest() {}",
          "43:   ~WasmFilterTest() {}",
          "45:   void setupConfig(const std::string& code) {",
          "46:     root_context_ = new TestRoot();",
          "47:     envoy::config::filter::network::wasm::v2::Wasm proto_config;",
          "48:     proto_config.set_vm_id(\"vm_id\");",
          "49:     proto_config.mutable_vm_config()->set_vm(absl::StrCat(\"envoy.wasm.vm.\", GetParam()));",
          "50:     proto_config.mutable_vm_config()->mutable_code()->set_inline_bytes(code);",
          "51:     Api::ApiPtr api = Api::createApiForTest(stats_store_);",
          "52:     scope_ = Stats::ScopeSharedPtr(stats_store_.createScope(\"wasm.\"));",
          "53:     wasm_ = Extensions::Common::Wasm::createWasmForTesting(",
          "54:         proto_config.vm_id(), proto_config.vm_config(), proto_config.root_id(), cluster_manager_,",
          "55:         dispatcher_, *api, *scope_, envoy::api::v2::core::TrafficDirection::INBOUND, local_info_,",
          "56:         &listener_metadata_, nullptr,",
          "57:         std::unique_ptr<Envoy::Extensions::Common::Wasm::Context>(root_context_));",
          "58:   }",
          "60:   void setupFilter() {",
          "61:     filter_ = std::make_unique<TestFilter>(wasm_.get(), wasm_->getRootContext(\"\")->id());",
          "62:     filter_->initializeReadFilterCallbacks(read_filter_callbacks_);",
          "63:   }",
          "65:   Stats::IsolatedStoreImpl stats_store_;",
          "66:   Stats::ScopeSharedPtr scope_;",
          "67:   NiceMock<Event::MockDispatcher> dispatcher_;",
          "68:   NiceMock<Upstream::MockClusterManager> cluster_manager_;",
          "69:   std::shared_ptr<Wasm> wasm_;",
          "70:   std::unique_ptr<TestFilter> filter_;",
          "71:   NiceMock<Network::MockReadFilterCallbacks> read_filter_callbacks_;",
          "72:   NiceMock<LocalInfo::MockLocalInfo> local_info_;",
          "73:   envoy::api::v2::core::Metadata listener_metadata_;",
          "74:   TestRoot* root_context_ = nullptr;",
          "75: };",
          "77: INSTANTIATE_TEST_SUITE_P(Runtimes, WasmFilterTest,",
          "78:                          testing::Values(",
          "79: #if defined(ENVOY_WASM_V8) && defined(ENVOY_WASM_WAVM)",
          "80:                              \"v8\", \"wavm\"",
          "81: #elif defined(ENVOY_WASM_V8)",
          "82:                              \"v8\"",
          "83: #elif defined(ENVOY_WASM_WAVM)",
          "84:                              \"wavm\"",
          "85: #endif",
          "86:                              ));",
          "89: TEST_P(WasmFilterTest, BadCode) {",
          "90:   EXPECT_THROW_WITH_MESSAGE(setupConfig(\"bad code\"), Common::Wasm::WasmException,",
          "91:                             \"Failed to initialize WASM code from <inline>\");",
          "92: }",
          "95: TEST_P(WasmFilterTest, HappyPath) {",
          "96:   setupConfig(TestEnvironment::readFileToStringForTest(TestEnvironment::substitute(",
          "97:       \"{{ test_rundir }}/test/extensions/filters/network/wasm/test_data/logging_cpp.wasm\")));",
          "98:   setupFilter();",
          "100:   EXPECT_CALL(*filter_,",
          "101:               scriptLog_(spdlog::level::trace, Eq(absl::string_view(\"onNewConnection 2\"))));",
          "102:   EXPECT_EQ(Network::FilterStatus::Continue, filter_->onNewConnection());",
          "104:   Buffer::OwnedImpl fake_downstream_data(\"Fake\");",
          "105:   EXPECT_CALL(*filter_,",
          "106:               scriptLog_(spdlog::level::trace,",
          "107:                          Eq(absl::string_view(\"onDownstreamData 2 len=4 end_stream=0\\nFake\"))));",
          "108:   EXPECT_EQ(Network::FilterStatus::Continue, filter_->onData(fake_downstream_data, false));",
          "110:   Buffer::OwnedImpl fake_upstream_data(\"Done\");",
          "111:   EXPECT_CALL(*filter_,",
          "112:               scriptLog_(spdlog::level::trace,",
          "113:                          Eq(absl::string_view(\"onUpstreamData 2 len=4 end_stream=1\\nDone\"))));",
          "114:   EXPECT_CALL(*filter_, scriptLog_(spdlog::level::trace,",
          "115:                                    Eq(absl::string_view(\"onUpstreamConnectionClose 2 0\"))));",
          "116:   EXPECT_EQ(Network::FilterStatus::Continue, filter_->onWrite(fake_upstream_data, true));",
          "118:   EXPECT_CALL(*filter_, scriptLog_(spdlog::level::trace,",
          "119:                                    Eq(absl::string_view(\"onDownstreamConnectionClose 2 1\"))));",
          "120:   read_filter_callbacks_.connection_.close(Network::ConnectionCloseType::FlushWrite);",
          "121: }",
          "123: } // namespace Wasm",
          "124: } // namespace NetworkFilters",
          "125: } // namespace Extensions",
          "126: } // namespace Envoy",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6555b0aea7be60de8fed37ffc91b45b6962203b",
      "candidate_info": {
        "commit_hash": "d6555b0aea7be60de8fed37ffc91b45b6962203b",
        "repo": "istio/envoy",
        "commit_url": "https://github.com/istio/envoy/commit/d6555b0aea7be60de8fed37ffc91b45b6962203b",
        "files": [
          "source/extensions/common/wasm/wasm.cc",
          "source/extensions/common/wasm/wasm.h",
          "test/extensions/wasm/wasm_test.cc"
        ],
        "message": "1.4 - Do not call into the VM unless the VM Context has been created. (#24) (#211)\n\n* Ensure that the in VM Context is created before onDone is called.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Update as per offline discussion.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Set in_vm_context_created_ in onNetworkNewConnection.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Add guards to other network calls.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Fix common/wasm tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Patch tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Remove unecessary file from cherry-pick.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\nCo-authored-by: John Plevyak <jplevyak@gmail.com>",
        "before_after_code_files": [
          "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
          "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h",
          "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
            "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h",
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ],
          "candidate": [
            "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc",
            "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h",
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/wasm/wasm.cc||source/extensions/common/wasm/wasm.cc": [
          "File: source/extensions/common/wasm/wasm.cc -> source/extensions/common/wasm/wasm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1699:     auto config_addr = wasm_->copyString(vm_configuration);",
          "1700:     wasm_->onStart_(this, id_, root_id_addr, root_id.size(), config_addr, vm_configuration.size());",
          "1701:   }",
          "1702: }",
          "1704: bool Context::validateConfiguration(absl::string_view configuration) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1702:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1726: Network::FilterStatus Context::onNetworkNewConnection() {",
          "1727:   onCreate(root_context_id_);",
          "1728:   if (!wasm_->onNewConnection_) {",
          "1729:     return Network::FilterStatus::Continue;",
          "1730:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1735: }",
          "1737: Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {",
          "1739:     return Network::FilterStatus::Continue;",
          "1740:   }",
          "1741:   auto result = wasm_->onDownstreamData_(this, id_, static_cast<uint32_t>(data_length),",
          "",
          "[Removed Lines]",
          "1738:   if (!wasm_->onDownstreamData_) {",
          "",
          "[Added Lines]",
          "1740:   if (!in_vm_context_created_ || !wasm_->onDownstreamData_) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1745: }",
          "1747: Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {",
          "1749:     return Network::FilterStatus::Continue;",
          "1750:   }",
          "1751:   auto result = wasm_->onUpstreamData_(this, id_, static_cast<uint32_t>(data_length),",
          "",
          "[Removed Lines]",
          "1748:   if (!wasm_->onUpstreamData_) {",
          "",
          "[Added Lines]",
          "1750:   if (!in_vm_context_created_ || !wasm_->onUpstreamData_) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1755: }",
          "1757: void Context::onDownstreamConnectionClose(PeerType peer_type) {",
          "1759:     wasm_->onDownstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));",
          "1760:   }",
          "1761: }",
          "1763: void Context::onUpstreamConnectionClose(PeerType peer_type) {",
          "1765:     wasm_->onUpstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));",
          "1766:   }",
          "1767: }",
          "",
          "[Removed Lines]",
          "1758:   if (wasm_->onDownstreamConnectionClose_) {",
          "1764:   if (wasm_->onUpstreamConnectionClose_) {",
          "",
          "[Added Lines]",
          "1760:   if (in_vm_context_created_ && wasm_->onDownstreamConnectionClose_) {",
          "1766:   if (in_vm_context_created_ && wasm_->onUpstreamConnectionClose_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1785: }",
          "1787: Http::FilterDataStatus Context::onRequestBody(int body_buffer_length, bool end_of_stream) {",
          "1789:     return Http::FilterDataStatus::Continue;",
          "1790:   }",
          "1791:   switch (wasm_",
          "",
          "[Removed Lines]",
          "1788:   if (!wasm_->onRequestBody_) {",
          "",
          "[Added Lines]",
          "1790:   if (!in_vm_context_created_ || !wasm_->onRequestBody_) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1804: }",
          "1806: Http::FilterTrailersStatus Context::onRequestTrailers() {",
          "1808:     return Http::FilterTrailersStatus::Continue;",
          "1809:   }",
          "1810:   if (wasm_->onRequestTrailers_(this, id_).u64_ == 0) {",
          "",
          "[Removed Lines]",
          "1807:   if (!wasm_->onRequestTrailers_) {",
          "",
          "[Added Lines]",
          "1809:   if (!in_vm_context_created_ || !wasm_->onRequestTrailers_) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1814: }",
          "1816: Http::FilterMetadataStatus Context::onRequestMetadata() {",
          "1818:     return Http::FilterMetadataStatus::Continue;",
          "1819:   }",
          "1820:   if (wasm_->onRequestMetadata_(this, id_).u64_ == 0) {",
          "",
          "[Removed Lines]",
          "1817:   if (!wasm_->onRequestMetadata_) {",
          "",
          "[Added Lines]",
          "1819:   if (!in_vm_context_created_ || !wasm_->onRequestMetadata_) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1842: }",
          "1844: Http::FilterDataStatus Context::onResponseBody(int body_buffer_length, bool end_of_stream) {",
          "1846:     return Http::FilterDataStatus::Continue;",
          "1847:   }",
          "1848:   switch (wasm_",
          "",
          "[Removed Lines]",
          "1845:   if (!wasm_->onResponseBody_) {",
          "",
          "[Added Lines]",
          "1847:   if (!in_vm_context_created_ || !wasm_->onResponseBody_) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1861: }",
          "1863: Http::FilterTrailersStatus Context::onResponseTrailers() {",
          "1865:     return Http::FilterTrailersStatus::Continue;",
          "1866:   }",
          "1867:   if (wasm_->onResponseTrailers_(this, id_).u64_ == 0) {",
          "",
          "[Removed Lines]",
          "1864:   if (!wasm_->onResponseTrailers_) {",
          "",
          "[Added Lines]",
          "1866:   if (!in_vm_context_created_ || !wasm_->onResponseTrailers_) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1871: }",
          "1873: Http::FilterMetadataStatus Context::onResponseMetadata() {",
          "1875:     return Http::FilterMetadataStatus::Continue;",
          "1876:   }",
          "1877:   if (wasm_->onResponseMetadata_(this, id_).u64_ == 0) {",
          "",
          "[Removed Lines]",
          "1874:   if (!wasm_->onResponseMetadata_) {",
          "",
          "[Added Lines]",
          "1876:   if (!in_vm_context_created_ || !wasm_->onResponseMetadata_) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2445: }",
          "2447: void Context::onDone() {",
          "2449:     wasm_->onDone_(this, id_);",
          "2450:   }",
          "2451: }",
          "2453: void Context::onLog() {",
          "2455:     wasm_->onLog_(this, id_);",
          "2456:   }",
          "2457: }",
          "2459: void Context::onDelete() {",
          "2461:     wasm_->onDelete_(this, id_);",
          "2462:   }",
          "2463: }",
          "",
          "[Removed Lines]",
          "2448:   if (wasm_->onDone_) {",
          "2454:   if (wasm_->onLog_) {",
          "2460:   if (wasm_->onDelete_) {",
          "",
          "[Added Lines]",
          "2450:   if (in_vm_context_created_ && wasm_->onDone_) {",
          "2456:   if (in_vm_context_created_ && wasm_->onLog_) {",
          "2462:   if (in_vm_context_created_ && wasm_->onDelete_) {",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/wasm.h||source/extensions/common/wasm/wasm.h": [
          "File: source/extensions/common/wasm/wasm.h -> source/extensions/common/wasm/wasm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:   virtual bool isSsl();",
          "416: protected:",
          "417:   friend class Wasm;",
          "418:   friend struct AsyncClientHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:   void setInVmContextCreatedForTesting() { in_vm_context_created_ = true; }",
          "",
          "---------------"
        ],
        "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc": [
          "File: test/extensions/wasm/wasm_test.cc -> test/extensions/wasm/wasm_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   auto context = std::make_unique<TestContext>(wasm.get());",
          "185:   EXPECT_CALL(*context, scriptLog_(spdlog::level::err, Eq(\"before div by zero\")));",
          "186:   EXPECT_TRUE(wasm->initialize(code, false));",
          "189:   if (GetParam() == \"v8\") {",
          "190:     EXPECT_THROW_WITH_MESSAGE(",
          "",
          "[Removed Lines]",
          "187:   wasm->setContext(context.get());",
          "",
          "[Added Lines]",
          "187:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:       \"{{ test_rundir }}/test/extensions/wasm/test_data/stats_cpp.wasm\"));",
          "389:   EXPECT_FALSE(code.empty());",
          "390:   auto context = std::make_unique<TestContext>(wasm.get());",
          "392:   EXPECT_CALL(*context, scriptLog_(spdlog::level::trace, Eq(\"get counter = 1\")));",
          "393:   EXPECT_CALL(*context, scriptLog_(spdlog::level::debug, Eq(\"get counter = 2\")));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7043f39a2f5f7d072c35b3fe4d50865b5c61a9dc",
      "candidate_info": {
        "commit_hash": "7043f39a2f5f7d072c35b3fe4d50865b5c61a9dc",
        "repo": "istio/envoy",
        "commit_url": "https://github.com/istio/envoy/commit/7043f39a2f5f7d072c35b3fe4d50865b5c61a9dc",
        "files": [
          "source/extensions/common/wasm/context.cc",
          "source/extensions/common/wasm/context.h",
          "test/extensions/wasm/wasm_test.cc"
        ],
        "message": "1.5 - Do not call into the VM unless the VM Context has been created. (#22) (#213)\n\n* Ensure that the in VM Context is created before onDone is called.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Update as per offline discussion.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Set in_vm_context_created_ in onNetworkNewConnection.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Add guards to other network calls.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Fix common/wasm tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Patch tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\nCo-authored-by: John Plevyak <jplevyak@gmail.com>",
        "before_after_code_files": [
          "source/extensions/common/wasm/context.cc||source/extensions/common/wasm/context.cc",
          "source/extensions/common/wasm/context.h||source/extensions/common/wasm/context.h",
          "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ],
          "candidate": [
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/wasm/context.cc||source/extensions/common/wasm/context.cc": [
          "File: source/extensions/common/wasm/context.cc -> source/extensions/common/wasm/context.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1116:     wasm_->on_context_create_(this, id_, 0);",
          "1117:     plugin_.reset();",
          "1118:   }",
          "1119:   if (wasm_->on_vm_start_) {",
          "1120:     configuration_ = vm_configuration;",
          "1121:     plugin_ = plugin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1119:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1178: Network::FilterStatus Context::onNetworkNewConnection() {",
          "1179:   DeferAfterCallActions actions(this);",
          "1180:   onCreate(root_context_id_);",
          "1181:   if (!wasm_->on_new_connection_) {",
          "1182:     return Network::FilterStatus::Continue;",
          "1183:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1188: }",
          "1190: Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {",
          "1192:     return Network::FilterStatus::Continue;",
          "1193:   }",
          "1194:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1191:   if (!wasm_->on_downstream_data_) {",
          "",
          "[Added Lines]",
          "1193:   if (!in_vm_context_created_ || !wasm_->on_downstream_data_) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1200: }",
          "1202: Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {",
          "1204:     return Network::FilterStatus::Continue;",
          "1205:   }",
          "1206:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1203:   if (!wasm_->on_upstream_data_) {",
          "",
          "[Added Lines]",
          "1205:   if (!in_vm_context_created_ || !wasm_->on_upstream_data_) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1212: }",
          "1214: void Context::onDownstreamConnectionClose(PeerType peer_type) {",
          "1216:     DeferAfterCallActions actions(this);",
          "1217:     wasm_->on_downstream_connection_close_(this, id_, static_cast<uint32_t>(peer_type));",
          "1218:   }",
          "",
          "[Removed Lines]",
          "1215:   if (wasm_->on_downstream_connection_close_) {",
          "",
          "[Added Lines]",
          "1217:   if (in_vm_context_created_ && wasm_->on_downstream_connection_close_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1225: }",
          "1227: void Context::onUpstreamConnectionClose(PeerType peer_type) {",
          "1229:     DeferAfterCallActions actions(this);",
          "1230:     wasm_->on_upstream_connection_close_(this, id_, static_cast<uint32_t>(peer_type));",
          "1231:   }",
          "",
          "[Removed Lines]",
          "1228:   if (wasm_->on_upstream_connection_close_) {",
          "",
          "[Added Lines]",
          "1230:   if (in_vm_context_created_ && wasm_->on_upstream_connection_close_) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1252: }",
          "1254: Http::FilterDataStatus Context::onRequestBody(bool end_of_stream) {",
          "1256:     return Http::FilterDataStatus::Continue;",
          "1257:   }",
          "1258:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1255:   if (!wasm_->on_request_body_) {",
          "",
          "[Added Lines]",
          "1257:   if (!in_vm_context_created_ || !wasm_->on_request_body_) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1278: }",
          "1280: Http::FilterTrailersStatus Context::onRequestTrailers() {",
          "1282:     return Http::FilterTrailersStatus::Continue;",
          "1283:   }",
          "1284:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1281:   if (!wasm_->on_request_trailers_) {",
          "",
          "[Added Lines]",
          "1283:   if (!in_vm_context_created_ || !wasm_->on_request_trailers_) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1289: }",
          "1291: Http::FilterMetadataStatus Context::onRequestMetadata() {",
          "1293:     return Http::FilterMetadataStatus::Continue;",
          "1294:   }",
          "1295:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1292:   if (!wasm_->on_request_metadata_) {",
          "",
          "[Added Lines]",
          "1294:   if (!in_vm_context_created_ || !wasm_->on_request_metadata_) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1319: }",
          "1321: Http::FilterDataStatus Context::onResponseBody(bool end_of_stream) {",
          "1323:     return Http::FilterDataStatus::Continue;",
          "1324:   }",
          "1325:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1322:   if (!wasm_->on_response_body_) {",
          "",
          "[Added Lines]",
          "1324:   if (!in_vm_context_created_ || !wasm_->on_response_body_) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1345: }",
          "1347: Http::FilterTrailersStatus Context::onResponseTrailers() {",
          "1349:     return Http::FilterTrailersStatus::Continue;",
          "1350:   }",
          "1351:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1348:   if (!wasm_->on_response_trailers_) {",
          "",
          "[Added Lines]",
          "1350:   if (!in_vm_context_created_ || !wasm_->on_response_trailers_) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1356: }",
          "1358: Http::FilterMetadataStatus Context::onResponseMetadata() {",
          "1360:     return Http::FilterMetadataStatus::Continue;",
          "1361:   }",
          "1362:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1359:   if (!wasm_->on_response_metadata_) {",
          "",
          "[Added Lines]",
          "1361:   if (!in_vm_context_created_ || !wasm_->on_response_metadata_) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1627: bool Context::onDone() {",
          "1628:   DeferAfterCallActions actions(this);",
          "1630:     return wasm_->on_done_(this, id_).u64_ != 0;",
          "1631:   }",
          "1632:   return true;",
          "",
          "[Removed Lines]",
          "1629:   if (wasm_->on_done_) {",
          "",
          "[Added Lines]",
          "1631:   if (in_vm_context_created_ && wasm_->on_done_) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1635: void Context::onLog() {",
          "1636:   DeferAfterCallActions actions(this);",
          "1638:     wasm_->on_log_(this, id_);",
          "1639:   }",
          "1640: }",
          "1642: void Context::onDelete() {",
          "1643:   DeferAfterCallActions actions(this);",
          "1645:     wasm_->on_delete_(this, id_);",
          "1646:   }",
          "1647: }",
          "",
          "[Removed Lines]",
          "1637:   if (wasm_->on_log_) {",
          "1644:   if (wasm_->on_delete_) {",
          "",
          "[Added Lines]",
          "1639:   if (in_vm_context_created_ && wasm_->on_log_) {",
          "1646:   if (in_vm_context_created_ && wasm_->on_delete_) {",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/context.h||source/extensions/common/wasm/context.h": [
          "File: source/extensions/common/wasm/context.h -> source/extensions/common/wasm/context.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:   void addAfterVmCallAction(std::function<void()> f);",
          "334: protected:",
          "335:   friend class Wasm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:   void setInVmContextCreatedForTesting() { in_vm_context_created_ = true; }",
          "",
          "---------------"
        ],
        "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc": [
          "File: test/extensions/wasm/wasm_test.cc -> test/extensions/wasm/wasm_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   auto context = std::make_unique<TestContext>(wasm.get());",
          "192:   EXPECT_CALL(*context, scriptLog_(spdlog::level::err, Eq(\"before div by zero\")));",
          "193:   EXPECT_TRUE(wasm->initialize(code, false));",
          "196:   if (GetParam() == \"v8\") {",
          "197:     EXPECT_THROW_WITH_MESSAGE(",
          "",
          "[Removed Lines]",
          "194:   wasm->setContext(context.get());",
          "",
          "[Added Lines]",
          "194:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:       \"{{ test_rundir }}/test/extensions/wasm/test_data/stats_cpp.wasm\"));",
          "402:   EXPECT_FALSE(code.empty());",
          "403:   auto context = std::make_unique<TestContext>(wasm.get());",
          "405:   EXPECT_CALL(*context, scriptLog_(spdlog::level::trace, Eq(\"get counter = 1\")));",
          "406:   EXPECT_CALL(*context, scriptLog_(spdlog::level::debug, Eq(\"get counter = 2\")));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d0e9b0427c3278bb6fc5386cf8a9569db4f9d63",
      "candidate_info": {
        "commit_hash": "1d0e9b0427c3278bb6fc5386cf8a9569db4f9d63",
        "repo": "istio/envoy",
        "commit_url": "https://github.com/istio/envoy/commit/1d0e9b0427c3278bb6fc5386cf8a9569db4f9d63",
        "files": [
          "source/extensions/common/wasm/context.cc",
          "source/extensions/common/wasm/context.h",
          "test/extensions/wasm/wasm_test.cc"
        ],
        "message": "1.5 - Do not call into the VM unless the VM Context has been created. (#22)\n\n* Ensure that the in VM Context is created before onDone is called.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Update as per offline discussion.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Set in_vm_context_created_ in onNetworkNewConnection.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Add guards to other network calls.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Fix common/wasm tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\n* Patch tests.\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>",
        "before_after_code_files": [
          "source/extensions/common/wasm/context.cc||source/extensions/common/wasm/context.cc",
          "source/extensions/common/wasm/context.h||source/extensions/common/wasm/context.h",
          "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ],
          "candidate": [
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/wasm/context.cc||source/extensions/common/wasm/context.cc": [
          "File: source/extensions/common/wasm/context.cc -> source/extensions/common/wasm/context.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1116:     wasm_->on_context_create_(this, id_, 0);",
          "1117:     plugin_.reset();",
          "1118:   }",
          "1119:   if (wasm_->on_vm_start_) {",
          "1120:     configuration_ = vm_configuration;",
          "1121:     plugin_ = plugin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1119:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1178: Network::FilterStatus Context::onNetworkNewConnection() {",
          "1179:   DeferAfterCallActions actions(this);",
          "1180:   onCreate(root_context_id_);",
          "1181:   if (!wasm_->on_new_connection_) {",
          "1182:     return Network::FilterStatus::Continue;",
          "1183:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1188: }",
          "1190: Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {",
          "1192:     return Network::FilterStatus::Continue;",
          "1193:   }",
          "1194:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1191:   if (!wasm_->on_downstream_data_) {",
          "",
          "[Added Lines]",
          "1193:   if (!in_vm_context_created_ || !wasm_->on_downstream_data_) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1200: }",
          "1202: Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {",
          "1204:     return Network::FilterStatus::Continue;",
          "1205:   }",
          "1206:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1203:   if (!wasm_->on_upstream_data_) {",
          "",
          "[Added Lines]",
          "1205:   if (!in_vm_context_created_ || !wasm_->on_upstream_data_) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1212: }",
          "1214: void Context::onDownstreamConnectionClose(PeerType peer_type) {",
          "1216:     DeferAfterCallActions actions(this);",
          "1217:     wasm_->on_downstream_connection_close_(this, id_, static_cast<uint32_t>(peer_type));",
          "1218:   }",
          "",
          "[Removed Lines]",
          "1215:   if (wasm_->on_downstream_connection_close_) {",
          "",
          "[Added Lines]",
          "1217:   if (in_vm_context_created_ && wasm_->on_downstream_connection_close_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1225: }",
          "1227: void Context::onUpstreamConnectionClose(PeerType peer_type) {",
          "1229:     DeferAfterCallActions actions(this);",
          "1230:     wasm_->on_upstream_connection_close_(this, id_, static_cast<uint32_t>(peer_type));",
          "1231:   }",
          "",
          "[Removed Lines]",
          "1228:   if (wasm_->on_upstream_connection_close_) {",
          "",
          "[Added Lines]",
          "1230:   if (in_vm_context_created_ && wasm_->on_upstream_connection_close_) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1252: }",
          "1254: Http::FilterDataStatus Context::onRequestBody(bool end_of_stream) {",
          "1256:     return Http::FilterDataStatus::Continue;",
          "1257:   }",
          "1258:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1255:   if (!wasm_->on_request_body_) {",
          "",
          "[Added Lines]",
          "1257:   if (!in_vm_context_created_ || !wasm_->on_request_body_) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1278: }",
          "1280: Http::FilterTrailersStatus Context::onRequestTrailers() {",
          "1282:     return Http::FilterTrailersStatus::Continue;",
          "1283:   }",
          "1284:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1281:   if (!wasm_->on_request_trailers_) {",
          "",
          "[Added Lines]",
          "1283:   if (!in_vm_context_created_ || !wasm_->on_request_trailers_) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1289: }",
          "1291: Http::FilterMetadataStatus Context::onRequestMetadata() {",
          "1293:     return Http::FilterMetadataStatus::Continue;",
          "1294:   }",
          "1295:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1292:   if (!wasm_->on_request_metadata_) {",
          "",
          "[Added Lines]",
          "1294:   if (!in_vm_context_created_ || !wasm_->on_request_metadata_) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1319: }",
          "1321: Http::FilterDataStatus Context::onResponseBody(bool end_of_stream) {",
          "1323:     return Http::FilterDataStatus::Continue;",
          "1324:   }",
          "1325:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1322:   if (!wasm_->on_response_body_) {",
          "",
          "[Added Lines]",
          "1324:   if (!in_vm_context_created_ || !wasm_->on_response_body_) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1345: }",
          "1347: Http::FilterTrailersStatus Context::onResponseTrailers() {",
          "1349:     return Http::FilterTrailersStatus::Continue;",
          "1350:   }",
          "1351:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1348:   if (!wasm_->on_response_trailers_) {",
          "",
          "[Added Lines]",
          "1350:   if (!in_vm_context_created_ || !wasm_->on_response_trailers_) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1356: }",
          "1358: Http::FilterMetadataStatus Context::onResponseMetadata() {",
          "1360:     return Http::FilterMetadataStatus::Continue;",
          "1361:   }",
          "1362:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1359:   if (!wasm_->on_response_metadata_) {",
          "",
          "[Added Lines]",
          "1361:   if (!in_vm_context_created_ || !wasm_->on_response_metadata_) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1627: bool Context::onDone() {",
          "1628:   DeferAfterCallActions actions(this);",
          "1630:     return wasm_->on_done_(this, id_).u64_ != 0;",
          "1631:   }",
          "1632:   return true;",
          "",
          "[Removed Lines]",
          "1629:   if (wasm_->on_done_) {",
          "",
          "[Added Lines]",
          "1631:   if (in_vm_context_created_ && wasm_->on_done_) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1635: void Context::onLog() {",
          "1636:   DeferAfterCallActions actions(this);",
          "1638:     wasm_->on_log_(this, id_);",
          "1639:   }",
          "1640: }",
          "1642: void Context::onDelete() {",
          "1643:   DeferAfterCallActions actions(this);",
          "1645:     wasm_->on_delete_(this, id_);",
          "1646:   }",
          "1647: }",
          "",
          "[Removed Lines]",
          "1637:   if (wasm_->on_log_) {",
          "1644:   if (wasm_->on_delete_) {",
          "",
          "[Added Lines]",
          "1639:   if (in_vm_context_created_ && wasm_->on_log_) {",
          "1646:   if (in_vm_context_created_ && wasm_->on_delete_) {",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/context.h||source/extensions/common/wasm/context.h": [
          "File: source/extensions/common/wasm/context.h -> source/extensions/common/wasm/context.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:   void addAfterVmCallAction(std::function<void()> f);",
          "334: protected:",
          "335:   friend class Wasm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:   void setInVmContextCreatedForTesting() { in_vm_context_created_ = true; }",
          "",
          "---------------"
        ],
        "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc": [
          "File: test/extensions/wasm/wasm_test.cc -> test/extensions/wasm/wasm_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   auto context = std::make_unique<TestContext>(wasm.get());",
          "192:   EXPECT_CALL(*context, scriptLog_(spdlog::level::err, Eq(\"before div by zero\")));",
          "193:   EXPECT_TRUE(wasm->initialize(code, false));",
          "196:   if (GetParam() == \"v8\") {",
          "197:     EXPECT_THROW_WITH_MESSAGE(",
          "",
          "[Removed Lines]",
          "194:   wasm->setContext(context.get());",
          "",
          "[Added Lines]",
          "194:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:       \"{{ test_rundir }}/test/extensions/wasm/test_data/stats_cpp.wasm\"));",
          "402:   EXPECT_FALSE(code.empty());",
          "403:   auto context = std::make_unique<TestContext>(wasm.get());",
          "405:   EXPECT_CALL(*context, scriptLog_(spdlog::level::trace, Eq(\"get counter = 1\")));",
          "406:   EXPECT_CALL(*context, scriptLog_(spdlog::level::debug, Eq(\"get counter = 2\")));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61441029449f1afb3795fe61f3f8341a57fba6ac",
      "candidate_info": {
        "commit_hash": "61441029449f1afb3795fe61f3f8341a57fba6ac",
        "repo": "istio/envoy",
        "commit_url": "https://github.com/istio/envoy/commit/61441029449f1afb3795fe61f3f8341a57fba6ac",
        "files": [
          "source/extensions/common/wasm/context.cc",
          "source/extensions/common/wasm/context.h",
          "test/extensions/wasm/wasm_test.cc"
        ],
        "message": "Do not call into the VM unless the VM Context has been created. (#214)\n\nSigned-off-by: John Plevyak <jplevyak@gmail.com>\n\nCo-authored-by: John Plevyak <jplevyak@gmail.com>",
        "before_after_code_files": [
          "source/extensions/common/wasm/context.cc||source/extensions/common/wasm/context.cc",
          "source/extensions/common/wasm/context.h||source/extensions/common/wasm/context.h",
          "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ],
          "candidate": [
            "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/wasm/context.cc||source/extensions/common/wasm/context.cc": [
          "File: source/extensions/common/wasm/context.cc -> source/extensions/common/wasm/context.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:     wasm_->on_context_create_(this, id_, 0);",
          "1131:     plugin_.reset();",
          "1132:   }",
          "1133:   if (wasm_->on_vm_start_) {",
          "1134:     configuration_ = vm_configuration;",
          "1135:     plugin_ = plugin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1133:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192: Network::FilterStatus Context::onNetworkNewConnection() {",
          "1193:   DeferAfterCallActions actions(this);",
          "1194:   onCreate(root_context_id_);",
          "1195:   if (!wasm_->on_new_connection_) {",
          "1196:     return Network::FilterStatus::Continue;",
          "1197:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1196:   in_vm_context_created_ = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1202: }",
          "1204: Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {",
          "1206:     return Network::FilterStatus::Continue;",
          "1207:   }",
          "1208:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1205:   if (!wasm_->on_downstream_data_) {",
          "",
          "[Added Lines]",
          "1207:   if (!in_vm_context_created_ || !wasm_->on_downstream_data_) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1214: }",
          "1216: Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {",
          "1218:     return Network::FilterStatus::Continue;",
          "1219:   }",
          "1220:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1217:   if (!wasm_->on_upstream_data_) {",
          "",
          "[Added Lines]",
          "1219:   if (!in_vm_context_created_ || !wasm_->on_upstream_data_) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1226: }",
          "1228: void Context::onDownstreamConnectionClose(PeerType peer_type) {",
          "1230:     DeferAfterCallActions actions(this);",
          "1231:     wasm_->on_downstream_connection_close_(this, id_, static_cast<uint32_t>(peer_type));",
          "1232:   }",
          "",
          "[Removed Lines]",
          "1229:   if (wasm_->on_downstream_connection_close_) {",
          "",
          "[Added Lines]",
          "1231:   if (in_vm_context_created_ && wasm_->on_downstream_connection_close_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1239: }",
          "1241: void Context::onUpstreamConnectionClose(PeerType peer_type) {",
          "1243:     DeferAfterCallActions actions(this);",
          "1244:     wasm_->on_upstream_connection_close_(this, id_, static_cast<uint32_t>(peer_type));",
          "1245:   }",
          "",
          "[Removed Lines]",
          "1242:   if (wasm_->on_upstream_connection_close_) {",
          "",
          "[Added Lines]",
          "1244:   if (in_vm_context_created_ && wasm_->on_upstream_connection_close_) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1266: }",
          "1268: Http::FilterDataStatus Context::onRequestBody(bool end_of_stream) {",
          "1270:     return Http::FilterDataStatus::Continue;",
          "1271:   }",
          "1272:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1269:   if (!wasm_->on_request_body_) {",
          "",
          "[Added Lines]",
          "1271:   if (!in_vm_context_created_ || !wasm_->on_request_body_) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1292: }",
          "1294: Http::FilterTrailersStatus Context::onRequestTrailers() {",
          "1296:     return Http::FilterTrailersStatus::Continue;",
          "1297:   }",
          "1298:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1295:   if (!wasm_->on_request_trailers_) {",
          "",
          "[Added Lines]",
          "1297:   if (!in_vm_context_created_ || !wasm_->on_request_trailers_) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1303: }",
          "1305: Http::FilterMetadataStatus Context::onRequestMetadata() {",
          "1307:     return Http::FilterMetadataStatus::Continue;",
          "1308:   }",
          "1309:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1306:   if (!wasm_->on_request_metadata_) {",
          "",
          "[Added Lines]",
          "1308:   if (!in_vm_context_created_ || !wasm_->on_request_metadata_) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1333: }",
          "1335: Http::FilterDataStatus Context::onResponseBody(bool end_of_stream) {",
          "1337:     return Http::FilterDataStatus::Continue;",
          "1338:   }",
          "1339:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1336:   if (!wasm_->on_response_body_) {",
          "",
          "[Added Lines]",
          "1338:   if (!in_vm_context_created_ || !wasm_->on_response_body_) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1359: }",
          "1361: Http::FilterTrailersStatus Context::onResponseTrailers() {",
          "1363:     return Http::FilterTrailersStatus::Continue;",
          "1364:   }",
          "1365:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1362:   if (!wasm_->on_response_trailers_) {",
          "",
          "[Added Lines]",
          "1364:   if (!in_vm_context_created_ || !wasm_->on_response_trailers_) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1370: }",
          "1372: Http::FilterMetadataStatus Context::onResponseMetadata() {",
          "1374:     return Http::FilterMetadataStatus::Continue;",
          "1375:   }",
          "1376:   DeferAfterCallActions actions(this);",
          "",
          "[Removed Lines]",
          "1373:   if (!wasm_->on_response_metadata_) {",
          "",
          "[Added Lines]",
          "1375:   if (!in_vm_context_created_ || !wasm_->on_response_metadata_) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1638: bool Context::onDone() {",
          "1639:   DeferAfterCallActions actions(this);",
          "1641:     return wasm_->on_done_(this, id_).u64_ != 0;",
          "1642:   }",
          "1643:   return true;",
          "",
          "[Removed Lines]",
          "1640:   if (wasm_->on_done_) {",
          "",
          "[Added Lines]",
          "1642:   if (in_vm_context_created_ && wasm_->on_done_) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1646: void Context::onLog() {",
          "1647:   DeferAfterCallActions actions(this);",
          "1649:     wasm_->on_log_(this, id_);",
          "1650:   }",
          "1651: }",
          "1653: void Context::onDelete() {",
          "1654:   DeferAfterCallActions actions(this);",
          "1656:     wasm_->on_delete_(this, id_);",
          "1657:   }",
          "1658: }",
          "",
          "[Removed Lines]",
          "1648:   if (wasm_->on_log_) {",
          "1655:   if (wasm_->on_delete_) {",
          "",
          "[Added Lines]",
          "1650:   if (in_vm_context_created_ && wasm_->on_log_) {",
          "1657:   if (in_vm_context_created_ && wasm_->on_delete_) {",
          "",
          "---------------"
        ],
        "source/extensions/common/wasm/context.h||source/extensions/common/wasm/context.h": [
          "File: source/extensions/common/wasm/context.h -> source/extensions/common/wasm/context.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   void addAfterVmCallAction(std::function<void()> f);",
          "349: protected:",
          "350:   friend class Wasm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:   void setInVmContextCreatedForTesting() { in_vm_context_created_ = true; }",
          "",
          "---------------"
        ],
        "test/extensions/wasm/wasm_test.cc||test/extensions/wasm/wasm_test.cc": [
          "File: test/extensions/wasm/wasm_test.cc -> test/extensions/wasm/wasm_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   auto context = std::make_unique<TestContext>(wasm.get());",
          "192:   EXPECT_CALL(*context, scriptLog_(spdlog::level::err, Eq(\"before div by zero\")));",
          "193:   EXPECT_TRUE(wasm->initialize(code, false));",
          "196:   if (GetParam() == \"v8\") {",
          "197:     EXPECT_THROW_WITH_MESSAGE(",
          "",
          "[Removed Lines]",
          "194:   wasm->setContext(context.get());",
          "",
          "[Added Lines]",
          "194:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:       \"{{ test_rundir }}/test/extensions/wasm/test_data/stats_cpp.wasm\"));",
          "402:   EXPECT_FALSE(code.empty());",
          "403:   auto context = std::make_unique<TestContext>(wasm.get());",
          "405:   EXPECT_CALL(*context, scriptLog_(spdlog::level::trace, Eq(\"get counter = 1\")));",
          "406:   EXPECT_CALL(*context, scriptLog_(spdlog::level::debug, Eq(\"get counter = 2\")));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:   context->setInVmContextCreatedForTesting();",
          "",
          "---------------"
        ]
      }
    }
  ]
}