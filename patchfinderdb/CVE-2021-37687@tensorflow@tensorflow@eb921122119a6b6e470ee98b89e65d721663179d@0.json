{
  "cve_id": "CVE-2021-37687",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions TFLite's [`GatherNd` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in `indices`. Similar issue exists in [`Gather` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). We have patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "eb921122119a6b6e470ee98b89e65d721663179d",
  "patch_info": {
    "commit_hash": "eb921122119a6b6e470ee98b89e65d721663179d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/eb921122119a6b6e470ee98b89e65d721663179d",
    "files": [
      "tensorflow/lite/kernels/gather.cc"
    ],
    "message": "Prevent heap OOB read in TFLite's `gather.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387231300\nChange-Id: I3111b54b2f232638d795be17efc46abe4ede6bf8",
    "before_after_code_files": [
      "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc": [
      "File: tensorflow/lite/kernels/gather.cc -> tensorflow/lite/kernels/gather.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "117: }",
      "119: template <typename InputT, typename PositionsT>",
      "122:   tflite::GatherParams op_params;",
      "123:   op_params.axis = params.axis;",
      "124:   op_params.batch_dims = params.batch_dims;",
      "",
      "[Removed Lines]",
      "120: TfLiteStatus Gather(const TfLiteGatherParams& params, const TfLiteTensor* input,",
      "121:                     const TfLiteTensor* positions, TfLiteTensor* output) {",
      "",
      "[Added Lines]",
      "120: TfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,",
      "121:                     const TfLiteTensor* input, const TfLiteTensor* positions,",
      "122:                     TfLiteTensor* output) {",
      "123:   const PositionsT* indexes = GetTensorData<PositionsT>(positions);",
      "124:   bool indices_has_only_positive_elements = true;",
      "125:   const size_t num_indices = positions->bytes / sizeof(PositionsT);",
      "126:   for (size_t i = 0; i < num_indices; i++) {",
      "127:     if (indexes[i] < 0) {",
      "128:       indices_has_only_positive_elements = false;",
      "129:       break;",
      "130:     }",
      "131:   }",
      "132:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:                            const TfLiteTensor* positions,",
      "135:                            TfLiteTensor* output) {",
      "136:   DynamicBuffer buffer;",
      "137:   const PositionT* indexes = GetTensorData<PositionT>(positions);",
      "138:   const PositionT num_strings = GetStringCount(input);",
      "139:   const int num_indexes = NumElements(positions);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "151:   bool indices_has_only_positive_elements = true;",
      "152:   const size_t num_indices = positions->bytes / sizeof(PositionT);",
      "153:   for (size_t i = 0; i < num_indices; i++) {",
      "154:     if (indexes[i] < 0) {",
      "155:       indices_has_only_positive_elements = false;",
      "156:       break;",
      "157:     }",
      "158:   }",
      "159:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163:   if (positions->type == kTfLiteInt32) {",
      "164:     switch (input->type) {",
      "165:       case kTfLiteFloat32:",
      "167:       case kTfLiteUInt8:",
      "169:       case kTfLiteInt8:",
      "171:       case kTfLiteInt16:",
      "173:       case kTfLiteInt32:",
      "175:       case kTfLiteInt64:",
      "177:       case kTfLiteBool:",
      "179:       case kTfLiteString:",
      "180:         return GatherStrings<int32_t>(context, input, positions, output);",
      "181:       default:",
      "",
      "[Removed Lines]",
      "166:         return Gather<float, int32_t>(*params, input, positions, output);",
      "168:         return Gather<uint8_t, int32_t>(*params, input, positions, output);",
      "170:         return Gather<int8_t, int32_t>(*params, input, positions, output);",
      "172:         return Gather<int16_t, int32_t>(*params, input, positions, output);",
      "174:         return Gather<int32_t, int32_t>(*params, input, positions, output);",
      "176:         return Gather<int64_t, int32_t>(*params, input, positions, output);",
      "178:         return Gather<bool, int32_t>(*params, input, positions, output);",
      "",
      "[Added Lines]",
      "189:         return Gather<float, int32_t>(context, *params, input, positions,",
      "190:                                       output);",
      "192:         return Gather<uint8_t, int32_t>(context, *params, input, positions,",
      "193:                                         output);",
      "195:         return Gather<int8_t, int32_t>(context, *params, input, positions,",
      "196:                                        output);",
      "198:         return Gather<int16_t, int32_t>(context, *params, input, positions,",
      "199:                                         output);",
      "201:         return Gather<int32_t, int32_t>(context, *params, input, positions,",
      "202:                                         output);",
      "204:         return Gather<int64_t, int32_t>(context, *params, input, positions,",
      "205:                                         output);",
      "207:         return Gather<bool, int32_t>(context, *params, input, positions,",
      "208:                                      output);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "187:   if (positions->type == kTfLiteInt64) {",
      "188:     switch (input->type) {",
      "189:       case kTfLiteFloat32:",
      "191:       case kTfLiteUInt8:",
      "193:       case kTfLiteInt8:",
      "195:       case kTfLiteInt16:",
      "197:       case kTfLiteInt32:",
      "199:       case kTfLiteInt64:",
      "201:       case kTfLiteBool:",
      "203:       case kTfLiteString:",
      "204:         return GatherStrings<int64_t>(context, input, positions, output);",
      "205:       default:",
      "",
      "[Removed Lines]",
      "190:         return Gather<float, int64_t>(*params, input, positions, output);",
      "192:         return Gather<uint8_t, int64_t>(*params, input, positions, output);",
      "194:         return Gather<int8_t, int64_t>(*params, input, positions, output);",
      "196:         return Gather<int16_t, int64_t>(*params, input, positions, output);",
      "198:         return Gather<int32_t, int64_t>(*params, input, positions, output);",
      "200:         return Gather<int64_t, int64_t>(*params, input, positions, output);",
      "202:         return Gather<bool, int64_t>(*params, input, positions, output);",
      "",
      "[Added Lines]",
      "220:         return Gather<float, int64_t>(context, *params, input, positions,",
      "221:                                       output);",
      "223:         return Gather<uint8_t, int64_t>(context, *params, input, positions,",
      "224:                                         output);",
      "226:         return Gather<int8_t, int64_t>(context, *params, input, positions,",
      "227:                                        output);",
      "229:         return Gather<int16_t, int64_t>(context, *params, input, positions,",
      "230:                                         output);",
      "232:         return Gather<int32_t, int64_t>(context, *params, input, positions,",
      "233:                                         output);",
      "235:         return Gather<int64_t, int64_t>(context, *params, input, positions,",
      "236:                                         output);",
      "238:         return Gather<bool, int64_t>(context, *params, input, positions,",
      "239:                                      output);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "115ab14da6d342897b6bc290618dedb0ce341455",
      "candidate_info": {
        "commit_hash": "115ab14da6d342897b6bc290618dedb0ce341455",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/115ab14da6d342897b6bc290618dedb0ce341455",
        "files": [
          "tensorflow/lite/kernels/gather.cc"
        ],
        "message": "Prevent heap OOB read in TFLite's `gather.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387231300\nChange-Id: I3111b54b2f232638d795be17efc46abe4ede6bf8",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc": [
          "File: tensorflow/lite/kernels/gather.cc -> tensorflow/lite/kernels/gather.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: }",
          "100: template <typename InputT, typename PositionsT>",
          "103:   tflite::GatherParams op_params;",
          "104:   op_params.axis = params.axis;",
          "105:   optimized_ops::Gather(op_params, GetTensorShape(input),",
          "",
          "[Removed Lines]",
          "101: TfLiteStatus Gather(const TfLiteGatherParams& params, const TfLiteTensor* input,",
          "102:                     const TfLiteTensor* positions, TfLiteTensor* output) {",
          "",
          "[Added Lines]",
          "101: TfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,",
          "102:                     const TfLiteTensor* input, const TfLiteTensor* positions,",
          "103:                     TfLiteTensor* output) {",
          "104:   const PositionsT* indexes = GetTensorData<PositionsT>(positions);",
          "105:   bool indices_has_only_positive_elements = true;",
          "106:   const size_t num_indices = positions->bytes / sizeof(PositionsT);",
          "107:   for (size_t i = 0; i < num_indices; i++) {",
          "108:     if (indexes[i] < 0) {",
          "109:       indices_has_only_positive_elements = false;",
          "110:       break;",
          "111:     }",
          "112:   }",
          "113:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:                            const TfLiteTensor* positions,",
          "115:                            TfLiteTensor* output) {",
          "116:   DynamicBuffer buffer;",
          "117:   const PositionT* indexes = GetTensorData<PositionT>(positions);",
          "118:   const PositionT num_strings = GetStringCount(input);",
          "119:   const int num_indexes = NumElements(positions);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   bool indices_has_only_positive_elements = true;",
          "132:   const size_t num_indices = positions->bytes / sizeof(PositionT);",
          "133:   for (size_t i = 0; i < num_indices; i++) {",
          "134:     if (indexes[i] < 0) {",
          "135:       indices_has_only_positive_elements = false;",
          "136:       break;",
          "137:     }",
          "138:   }",
          "139:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:   if (positions->type == kTfLiteInt32) {",
          "139:     switch (input->type) {",
          "140:       case kTfLiteFloat32:",
          "142:       case kTfLiteUInt8:",
          "144:       case kTfLiteInt8:",
          "146:       case kTfLiteInt32:",
          "148:       case kTfLiteInt64:",
          "150:       case kTfLiteBool:",
          "152:       case kTfLiteString:",
          "153:         return GatherStrings<int32_t>(context, input, positions, output);",
          "154:       default:",
          "",
          "[Removed Lines]",
          "141:         return Gather<float, int32_t>(*params, input, positions, output);",
          "143:         return Gather<uint8_t, int32_t>(*params, input, positions, output);",
          "145:         return Gather<int8_t, int32_t>(*params, input, positions, output);",
          "147:         return Gather<int32_t, int32_t>(*params, input, positions, output);",
          "149:         return Gather<int64_t, int32_t>(*params, input, positions, output);",
          "151:         return Gather<bool, int32_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "164:         return Gather<float, int32_t>(context, *params, input, positions,",
          "165:                                       output);",
          "167:         return Gather<uint8_t, int32_t>(context, *params, input, positions,",
          "168:                                         output);",
          "170:         return Gather<int8_t, int32_t>(context, *params, input, positions,",
          "171:                                        output);",
          "173:         return Gather<int32_t, int32_t>(context, *params, input, positions,",
          "174:                                         output);",
          "176:         return Gather<int64_t, int32_t>(context, *params, input, positions,",
          "177:                                         output);",
          "179:         return Gather<bool, int32_t>(context, *params, input, positions,",
          "180:                                      output);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:   if (positions->type == kTfLiteInt64) {",
          "161:     switch (input->type) {",
          "162:       case kTfLiteFloat32:",
          "164:       case kTfLiteUInt8:",
          "166:       case kTfLiteInt8:",
          "168:       case kTfLiteInt32:",
          "170:       case kTfLiteInt64:",
          "172:       case kTfLiteBool:",
          "174:       case kTfLiteString:",
          "175:         return GatherStrings<int64_t>(context, input, positions, output);",
          "176:       default:",
          "",
          "[Removed Lines]",
          "163:         return Gather<float, int64_t>(*params, input, positions, output);",
          "165:         return Gather<uint8_t, int64_t>(*params, input, positions, output);",
          "167:         return Gather<int8_t, int64_t>(*params, input, positions, output);",
          "169:         return Gather<int32_t, int64_t>(*params, input, positions, output);",
          "171:         return Gather<int64_t, int64_t>(*params, input, positions, output);",
          "173:         return Gather<bool, int64_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "192:         return Gather<float, int64_t>(context, *params, input, positions,",
          "193:                                       output);",
          "195:         return Gather<uint8_t, int64_t>(context, *params, input, positions,",
          "196:                                         output);",
          "198:         return Gather<int8_t, int64_t>(context, *params, input, positions,",
          "199:                                        output);",
          "201:         return Gather<int32_t, int64_t>(context, *params, input, positions,",
          "202:                                         output);",
          "204:         return Gather<int64_t, int64_t>(context, *params, input, positions,",
          "205:                                         output);",
          "207:         return Gather<bool, int64_t>(context, *params, input, positions,",
          "208:                                      output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed68432912c300ef5d5fd988a1ead3d7ae045ad0",
      "candidate_info": {
        "commit_hash": "ed68432912c300ef5d5fd988a1ead3d7ae045ad0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ed68432912c300ef5d5fd988a1ead3d7ae045ad0",
        "files": [
          "tensorflow/lite/kernels/gather.cc"
        ],
        "message": "Prevent heap OOB read in TFLite's `gather.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387231300\nChange-Id: I3111b54b2f232638d795be17efc46abe4ede6bf8",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc": [
          "File: tensorflow/lite/kernels/gather.cc -> tensorflow/lite/kernels/gather.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: }",
          "119: template <typename InputT, typename PositionsT>",
          "122:   tflite::GatherParams op_params;",
          "123:   op_params.axis = params.axis;",
          "124:   op_params.batch_dims = params.batch_dims;",
          "",
          "[Removed Lines]",
          "120: TfLiteStatus Gather(const TfLiteGatherParams& params, const TfLiteTensor* input,",
          "121:                     const TfLiteTensor* positions, TfLiteTensor* output) {",
          "",
          "[Added Lines]",
          "120: TfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,",
          "121:                     const TfLiteTensor* input, const TfLiteTensor* positions,",
          "122:                     TfLiteTensor* output) {",
          "123:   const PositionsT* indexes = GetTensorData<PositionsT>(positions);",
          "124:   bool indices_has_only_positive_elements = true;",
          "125:   const size_t num_indices = positions->bytes / sizeof(PositionsT);",
          "126:   for (size_t i = 0; i < num_indices; i++) {",
          "127:     if (indexes[i] < 0) {",
          "128:       indices_has_only_positive_elements = false;",
          "129:       break;",
          "130:     }",
          "131:   }",
          "132:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:                            const TfLiteTensor* positions,",
          "135:                            TfLiteTensor* output) {",
          "136:   DynamicBuffer buffer;",
          "137:   const PositionT* indexes = GetTensorData<PositionT>(positions);",
          "138:   const PositionT num_strings = GetStringCount(input);",
          "139:   const int num_indexes = NumElements(positions);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   bool indices_has_only_positive_elements = true;",
          "152:   const size_t num_indices = positions->bytes / sizeof(PositionT);",
          "153:   for (size_t i = 0; i < num_indices; i++) {",
          "154:     if (indexes[i] < 0) {",
          "155:       indices_has_only_positive_elements = false;",
          "156:       break;",
          "157:     }",
          "158:   }",
          "159:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:   if (positions->type == kTfLiteInt32) {",
          "164:     switch (input->type) {",
          "165:       case kTfLiteFloat32:",
          "167:       case kTfLiteUInt8:",
          "169:       case kTfLiteInt8:",
          "171:       case kTfLiteInt16:",
          "173:       case kTfLiteInt32:",
          "175:       case kTfLiteInt64:",
          "177:       case kTfLiteBool:",
          "179:       case kTfLiteString:",
          "180:         return GatherStrings<int32_t>(context, input, positions, output);",
          "181:       default:",
          "",
          "[Removed Lines]",
          "166:         return Gather<float, int32_t>(*params, input, positions, output);",
          "168:         return Gather<uint8_t, int32_t>(*params, input, positions, output);",
          "170:         return Gather<int8_t, int32_t>(*params, input, positions, output);",
          "172:         return Gather<int16_t, int32_t>(*params, input, positions, output);",
          "174:         return Gather<int32_t, int32_t>(*params, input, positions, output);",
          "176:         return Gather<int64_t, int32_t>(*params, input, positions, output);",
          "178:         return Gather<bool, int32_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "189:         return Gather<float, int32_t>(context, *params, input, positions,",
          "190:                                       output);",
          "192:         return Gather<uint8_t, int32_t>(context, *params, input, positions,",
          "193:                                         output);",
          "195:         return Gather<int8_t, int32_t>(context, *params, input, positions,",
          "196:                                        output);",
          "198:         return Gather<int16_t, int32_t>(context, *params, input, positions,",
          "199:                                         output);",
          "201:         return Gather<int32_t, int32_t>(context, *params, input, positions,",
          "202:                                         output);",
          "204:         return Gather<int64_t, int32_t>(context, *params, input, positions,",
          "205:                                         output);",
          "207:         return Gather<bool, int32_t>(context, *params, input, positions,",
          "208:                                      output);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:   if (positions->type == kTfLiteInt64) {",
          "188:     switch (input->type) {",
          "189:       case kTfLiteFloat32:",
          "191:       case kTfLiteUInt8:",
          "193:       case kTfLiteInt8:",
          "195:       case kTfLiteInt16:",
          "197:       case kTfLiteInt32:",
          "199:       case kTfLiteInt64:",
          "201:       case kTfLiteBool:",
          "203:       case kTfLiteString:",
          "204:         return GatherStrings<int64_t>(context, input, positions, output);",
          "205:       default:",
          "",
          "[Removed Lines]",
          "190:         return Gather<float, int64_t>(*params, input, positions, output);",
          "192:         return Gather<uint8_t, int64_t>(*params, input, positions, output);",
          "194:         return Gather<int8_t, int64_t>(*params, input, positions, output);",
          "196:         return Gather<int16_t, int64_t>(*params, input, positions, output);",
          "198:         return Gather<int32_t, int64_t>(*params, input, positions, output);",
          "200:         return Gather<int64_t, int64_t>(*params, input, positions, output);",
          "202:         return Gather<bool, int64_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "220:         return Gather<float, int64_t>(context, *params, input, positions,",
          "221:                                       output);",
          "223:         return Gather<uint8_t, int64_t>(context, *params, input, positions,",
          "224:                                         output);",
          "226:         return Gather<int8_t, int64_t>(context, *params, input, positions,",
          "227:                                        output);",
          "229:         return Gather<int16_t, int64_t>(context, *params, input, positions,",
          "230:                                         output);",
          "232:         return Gather<int32_t, int64_t>(context, *params, input, positions,",
          "233:                                         output);",
          "235:         return Gather<int64_t, int64_t>(context, *params, input, positions,",
          "236:                                         output);",
          "238:         return Gather<bool, int64_t>(context, *params, input, positions,",
          "239:                                      output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eeea8946ef53294fb9047827d85f45313481e32f",
      "candidate_info": {
        "commit_hash": "eeea8946ef53294fb9047827d85f45313481e32f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/eeea8946ef53294fb9047827d85f45313481e32f",
        "files": [
          "tensorflow/lite/kernels/gather.cc"
        ],
        "message": "Prevent heap OOB read in TFLite's `gather.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387231300\nChange-Id: I3111b54b2f232638d795be17efc46abe4ede6bf8",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc": [
          "File: tensorflow/lite/kernels/gather.cc -> tensorflow/lite/kernels/gather.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: }",
          "106: template <typename InputT, typename PositionsT>",
          "109:   tflite::GatherParams op_params;",
          "110:   op_params.axis = params.axis;",
          "111:   optimized_ops::Gather(op_params, GetTensorShape(input),",
          "",
          "[Removed Lines]",
          "107: TfLiteStatus Gather(const TfLiteGatherParams& params, const TfLiteTensor* input,",
          "108:                     const TfLiteTensor* positions, TfLiteTensor* output) {",
          "",
          "[Added Lines]",
          "107: TfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,",
          "108:                     const TfLiteTensor* input, const TfLiteTensor* positions,",
          "109:                     TfLiteTensor* output) {",
          "110:   const PositionsT* indexes = GetTensorData<PositionsT>(positions);",
          "111:   bool indices_has_only_positive_elements = true;",
          "112:   const size_t num_indices = positions->bytes / sizeof(PositionsT);",
          "113:   for (size_t i = 0; i < num_indices; i++) {",
          "114:     if (indexes[i] < 0) {",
          "115:       indices_has_only_positive_elements = false;",
          "116:       break;",
          "117:     }",
          "118:   }",
          "119:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:                            const TfLiteTensor* positions,",
          "121:                            TfLiteTensor* output) {",
          "122:   DynamicBuffer buffer;",
          "123:   const PositionT* indexes = GetTensorData<PositionT>(positions);",
          "124:   const PositionT num_strings = GetStringCount(input);",
          "125:   const int num_indexes = NumElements(positions);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   bool indices_has_only_positive_elements = true;",
          "138:   const size_t num_indices = positions->bytes / sizeof(PositionT);",
          "139:   for (size_t i = 0; i < num_indices; i++) {",
          "140:     if (indexes[i] < 0) {",
          "141:       indices_has_only_positive_elements = false;",
          "142:       break;",
          "143:     }",
          "144:   }",
          "145:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:   if (positions->type == kTfLiteInt32) {",
          "150:     switch (input->type) {",
          "151:       case kTfLiteFloat32:",
          "153:       case kTfLiteUInt8:",
          "155:       case kTfLiteInt8:",
          "157:       case kTfLiteInt16:",
          "159:       case kTfLiteInt32:",
          "161:       case kTfLiteInt64:",
          "163:       case kTfLiteBool:",
          "165:       case kTfLiteString:",
          "166:         return GatherStrings<int32_t>(context, input, positions, output);",
          "167:       default:",
          "",
          "[Removed Lines]",
          "152:         return Gather<float, int32_t>(*params, input, positions, output);",
          "154:         return Gather<uint8_t, int32_t>(*params, input, positions, output);",
          "156:         return Gather<int8_t, int32_t>(*params, input, positions, output);",
          "158:         return Gather<int16_t, int32_t>(*params, input, positions, output);",
          "160:         return Gather<int32_t, int32_t>(*params, input, positions, output);",
          "162:         return Gather<int64_t, int32_t>(*params, input, positions, output);",
          "164:         return Gather<bool, int32_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "175:         return Gather<float, int32_t>(context, *params, input, positions,",
          "176:                                       output);",
          "178:         return Gather<uint8_t, int32_t>(context, *params, input, positions,",
          "179:                                         output);",
          "181:         return Gather<int8_t, int32_t>(context, *params, input, positions,",
          "182:                                        output);",
          "184:         return Gather<int16_t, int32_t>(context, *params, input, positions,",
          "185:                                         output);",
          "187:         return Gather<int32_t, int32_t>(context, *params, input, positions,",
          "188:                                         output);",
          "190:         return Gather<int64_t, int32_t>(context, *params, input, positions,",
          "191:                                         output);",
          "193:         return Gather<bool, int32_t>(context, *params, input, positions,",
          "194:                                      output);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:   if (positions->type == kTfLiteInt64) {",
          "174:     switch (input->type) {",
          "175:       case kTfLiteFloat32:",
          "177:       case kTfLiteUInt8:",
          "179:       case kTfLiteInt8:",
          "181:       case kTfLiteInt16:",
          "183:       case kTfLiteInt32:",
          "185:       case kTfLiteInt64:",
          "187:       case kTfLiteBool:",
          "189:       case kTfLiteString:",
          "190:         return GatherStrings<int64_t>(context, input, positions, output);",
          "191:       default:",
          "",
          "[Removed Lines]",
          "176:         return Gather<float, int64_t>(*params, input, positions, output);",
          "178:         return Gather<uint8_t, int64_t>(*params, input, positions, output);",
          "180:         return Gather<int8_t, int64_t>(*params, input, positions, output);",
          "182:         return Gather<int16_t, int64_t>(*params, input, positions, output);",
          "184:         return Gather<int32_t, int64_t>(*params, input, positions, output);",
          "186:         return Gather<int64_t, int64_t>(*params, input, positions, output);",
          "188:         return Gather<bool, int64_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "206:         return Gather<float, int64_t>(context, *params, input, positions,",
          "207:                                       output);",
          "209:         return Gather<uint8_t, int64_t>(context, *params, input, positions,",
          "210:                                         output);",
          "212:         return Gather<int8_t, int64_t>(context, *params, input, positions,",
          "213:                                        output);",
          "215:         return Gather<int16_t, int64_t>(context, *params, input, positions,",
          "216:                                         output);",
          "218:         return Gather<int32_t, int64_t>(context, *params, input, positions,",
          "219:                                         output);",
          "221:         return Gather<int64_t, int64_t>(context, *params, input, positions,",
          "222:                                         output);",
          "224:         return Gather<bool, int64_t>(context, *params, input, positions,",
          "225:                                      output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdd8639efa25859acbd32609d9ea20dcda082058",
      "candidate_info": {
        "commit_hash": "bdd8639efa25859acbd32609d9ea20dcda082058",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bdd8639efa25859acbd32609d9ea20dcda082058",
        "files": [
          "tensorflow/lite/kernels/gather.cc"
        ],
        "message": "Prevent heap OOB read in TFLite's `gather.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387231300\nChange-Id: I3111b54b2f232638d795be17efc46abe4ede6bf8",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather.cc||tensorflow/lite/kernels/gather.cc": [
          "File: tensorflow/lite/kernels/gather.cc -> tensorflow/lite/kernels/gather.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: }",
          "119: template <typename InputT, typename PositionsT>",
          "122:   tflite::GatherParams op_params;",
          "123:   op_params.axis = params.axis;",
          "124:   op_params.batch_dims = params.batch_dims;",
          "",
          "[Removed Lines]",
          "120: TfLiteStatus Gather(const TfLiteGatherParams& params, const TfLiteTensor* input,",
          "121:                     const TfLiteTensor* positions, TfLiteTensor* output) {",
          "",
          "[Added Lines]",
          "120: TfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,",
          "121:                     const TfLiteTensor* input, const TfLiteTensor* positions,",
          "122:                     TfLiteTensor* output) {",
          "123:   const PositionsT* indexes = GetTensorData<PositionsT>(positions);",
          "124:   bool indices_has_only_positive_elements = true;",
          "125:   const size_t num_indices = positions->bytes / sizeof(PositionsT);",
          "126:   for (size_t i = 0; i < num_indices; i++) {",
          "127:     if (indexes[i] < 0) {",
          "128:       indices_has_only_positive_elements = false;",
          "129:       break;",
          "130:     }",
          "131:   }",
          "132:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:                            const TfLiteTensor* positions,",
          "135:                            TfLiteTensor* output) {",
          "136:   DynamicBuffer buffer;",
          "137:   const PositionT* indexes = GetTensorData<PositionT>(positions);",
          "138:   const PositionT num_strings = GetStringCount(input);",
          "139:   const int num_indexes = NumElements(positions);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   bool indices_has_only_positive_elements = true;",
          "152:   const size_t num_indices = positions->bytes / sizeof(PositionT);",
          "153:   for (size_t i = 0; i < num_indices; i++) {",
          "154:     if (indexes[i] < 0) {",
          "155:       indices_has_only_positive_elements = false;",
          "156:       break;",
          "157:     }",
          "158:   }",
          "159:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:   if (positions->type == kTfLiteInt32) {",
          "164:     switch (input->type) {",
          "165:       case kTfLiteFloat32:",
          "167:       case kTfLiteUInt8:",
          "169:       case kTfLiteInt8:",
          "171:       case kTfLiteInt16:",
          "173:       case kTfLiteInt32:",
          "175:       case kTfLiteInt64:",
          "177:       case kTfLiteBool:",
          "179:       case kTfLiteString:",
          "180:         return GatherStrings<int32_t>(context, input, positions, output);",
          "181:       default:",
          "",
          "[Removed Lines]",
          "166:         return Gather<float, int32_t>(*params, input, positions, output);",
          "168:         return Gather<uint8_t, int32_t>(*params, input, positions, output);",
          "170:         return Gather<int8_t, int32_t>(*params, input, positions, output);",
          "172:         return Gather<int16_t, int32_t>(*params, input, positions, output);",
          "174:         return Gather<int32_t, int32_t>(*params, input, positions, output);",
          "176:         return Gather<int64_t, int32_t>(*params, input, positions, output);",
          "178:         return Gather<bool, int32_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "189:         return Gather<float, int32_t>(context, *params, input, positions,",
          "190:                                       output);",
          "192:         return Gather<uint8_t, int32_t>(context, *params, input, positions,",
          "193:                                         output);",
          "195:         return Gather<int8_t, int32_t>(context, *params, input, positions,",
          "196:                                        output);",
          "198:         return Gather<int16_t, int32_t>(context, *params, input, positions,",
          "199:                                         output);",
          "201:         return Gather<int32_t, int32_t>(context, *params, input, positions,",
          "202:                                         output);",
          "204:         return Gather<int64_t, int32_t>(context, *params, input, positions,",
          "205:                                         output);",
          "207:         return Gather<bool, int32_t>(context, *params, input, positions,",
          "208:                                      output);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:   if (positions->type == kTfLiteInt64) {",
          "188:     switch (input->type) {",
          "189:       case kTfLiteFloat32:",
          "191:       case kTfLiteUInt8:",
          "193:       case kTfLiteInt8:",
          "195:       case kTfLiteInt16:",
          "197:       case kTfLiteInt32:",
          "199:       case kTfLiteInt64:",
          "201:       case kTfLiteBool:",
          "203:       case kTfLiteString:",
          "204:         return GatherStrings<int64_t>(context, input, positions, output);",
          "205:       default:",
          "",
          "[Removed Lines]",
          "190:         return Gather<float, int64_t>(*params, input, positions, output);",
          "192:         return Gather<uint8_t, int64_t>(*params, input, positions, output);",
          "194:         return Gather<int8_t, int64_t>(*params, input, positions, output);",
          "196:         return Gather<int16_t, int64_t>(*params, input, positions, output);",
          "198:         return Gather<int32_t, int64_t>(*params, input, positions, output);",
          "200:         return Gather<int64_t, int64_t>(*params, input, positions, output);",
          "202:         return Gather<bool, int64_t>(*params, input, positions, output);",
          "",
          "[Added Lines]",
          "220:         return Gather<float, int64_t>(context, *params, input, positions,",
          "221:                                       output);",
          "223:         return Gather<uint8_t, int64_t>(context, *params, input, positions,",
          "224:                                         output);",
          "226:         return Gather<int8_t, int64_t>(context, *params, input, positions,",
          "227:                                        output);",
          "229:         return Gather<int16_t, int64_t>(context, *params, input, positions,",
          "230:                                         output);",
          "232:         return Gather<int32_t, int64_t>(context, *params, input, positions,",
          "233:                                         output);",
          "235:         return Gather<int64_t, int64_t>(context, *params, input, positions,",
          "236:                                         output);",
          "238:         return Gather<bool, int64_t>(context, *params, input, positions,",
          "239:                                      output);",
          "",
          "---------------"
        ]
      }
    }
  ]
}