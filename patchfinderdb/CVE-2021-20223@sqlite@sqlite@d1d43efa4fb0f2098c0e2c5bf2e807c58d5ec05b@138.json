{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d76fad8eb02855b36fc63809b310896a62094b8",
      "candidate_info": {
        "commit_hash": "7d76fad8eb02855b36fc63809b310896a62094b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d76fad8eb02855b36fc63809b310896a62094b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c"
        ],
        "message": "Simplify some of the code modified by the previous commit.\n\nFossilOrigin-Name: 04abadb545d1b34bdd74d62becb3bfd83aceee373fd6b4b708d5ad53f41d9464",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 682b426f5658254e63dff02c960b557fb33cb3e944fdd14faa0aa9988af7269a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "474: ){",
          "475:   int i;",
          "477:   struct SrcList_item *pItem;",
          "478:   sqlite3 *db = pFix->pParse->db;",
          "481:   if( NEVER(pList==0) ) return 0;",
          "495:   for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "496:     if( pFix->bTemp==0 ){",
          "501:         sqlite3ErrorMsg(pFix->pParse,",
          "502:             \"%s %T cannot reference objects in database %s\",",
          "503:             pFix->zType, pFix->pName, pItem->zDatabase);",
          "504:         return 1;",
          "505:       }",
          "507:       pItem->zDatabase = 0;",
          "508:       pItem->pSchema = pFix->pSchema;",
          "509:       pItem->fg.fromDDL = 1;",
          "",
          "[Removed Lines]",
          "476:   const char *zDb;",
          "479:   const char *zAlt = 0;",
          "488:   zDb = pFix->zDb;",
          "489:   if( sqlite3StrICmp(db->aDb[0].zDbSName, zDb)==0 ){",
          "490:     zAlt = \"main\";",
          "491:   }else if( sqlite3StrICmp(\"main\", zDb)==0 ){",
          "492:     zAlt = db->aDb[0].zDbSName;",
          "493:   }",
          "497:       if( pItem->zDatabase",
          "498:        && sqlite3StrICmp(pItem->zDatabase, zDb)",
          "499:        && sqlite3_stricmp(pItem->zDatabase, zAlt)",
          "500:       ){",
          "506:       sqlite3DbFree(pFix->pParse->db, pItem->zDatabase);",
          "",
          "[Added Lines]",
          "478:   int iDb = sqlite3FindDbName(db, pFix->zDb);",
          "484:       if( pItem->zDatabase && iDb!=sqlite3FindDbName(db, pItem->zDatabase) ){",
          "490:       sqlite3DbFree(db, pItem->zDatabase);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa0696ee9a0b7ec3f9451520eb3bdcd3e7872b30",
      "candidate_info": {
        "commit_hash": "aa0696ee9a0b7ec3f9451520eb3bdcd3e7872b30",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa0696ee9a0b7ec3f9451520eb3bdcd3e7872b30",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Add the --spinner option to the fuzzcheck test program.\n\nFossilOrigin-Name: b1eae2686f03a6e20a49ca2b3a654b3019506d4941708ee3919c339cd093a57d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 230556e859536bbadf0daf8133a9a01ef4f03148b3296723e37bad66e3fc3d82",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1423: \"  -q|--quiet           Reduced output\\n\"",
          "1424: \"  --rebuild            Rebuild and vacuum the database file\\n\"",
          "1425: \"  --result-trace       Show the results of each SQL command\\n\"",
          "1426: \"  --sqlid N            Use only SQL where sqlid=N\\n\"",
          "1427: \"  --timeout N          Abort if any single test needs more than N seconds\\n\"",
          "1428: \"  -v|--verbose         Increased output.  Repeat for more output.\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1426: \"  --spinner            Use a spinner to show progress\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1575:       if( strcmp(z,\"result-trace\")==0 ){",
          "1576:         runFlags |= SQL_OUTPUT;",
          "1577:       }else",
          "1578:       if( strcmp(z,\"sqlid\")==0 ){",
          "1579:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1580:         onlySqlid = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580:       if( strcmp(z,\"spinner\")==0 ){",
          "1581:         bSpinner = 1;",
          "1582:       }else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1874:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1875:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1876:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1878:           printf(\"%s\\n\", g.zTestName);",
          "1879:           fflush(stdout);",
          "1880:         }else if( !quietFlag ){",
          "",
          "[Removed Lines]",
          "1873:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1877:         if( verboseFlag ){",
          "",
          "[Added Lines]",
          "1878:     if( !verboseFlag && !quietFlag && !bSpinner ) printf(\"%s:\", zDbName);",
          "1882:         if( bSpinner ){",
          "1883:           int nTotal =g.nSql;",
          "1884:           int idx = pSql->seq;",
          "1885:           printf(\"\\r%s: %d/%d   \", zDbName, idx, nTotal);",
          "1886:           fflush(stdout);",
          "1887:         }else if( verboseFlag ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1898:         const char *zVfs = \"inmem\";",
          "1899:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d,dbid=%d\",",
          "1900:                          pSql->id, pDb->id);",
          "1902:           printf(\"%s\\n\", g.zTestName);",
          "1903:           fflush(stdout);",
          "1904:         }else if( !quietFlag ){",
          "",
          "[Removed Lines]",
          "1901:         if( verboseFlag ){",
          "",
          "[Added Lines]",
          "1911:         if( bSpinner ){",
          "1912:           int nTotal = g.nDb*g.nSql;",
          "1913:           int idx = pSql->seq*g.nDb + pDb->id - 1;",
          "1914:           printf(\"\\r%s: %d/%d   \", zDbName, idx, nTotal);",
          "1915:           fflush(stdout);",
          "1916:         }else if( verboseFlag ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1977:         }",
          "1978:       }",
          "1979:     }",
          "1981:       printf(\" 100%% - %d tests\\n\", g.nDb*g.nSql);",
          "1982:     }",
          "",
          "[Removed Lines]",
          "1980:     if( !quietFlag && !verboseFlag ){",
          "",
          "[Added Lines]",
          "1995:     if( bSpinner ){",
          "1996:       printf(\"\\n\");",
          "1997:     }else if( !quietFlag && !verboseFlag ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
      "candidate_info": {
        "commit_hash": "4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "When a table is part of a LEFT JOIN and should be a completely NULL row due to the semantics of a LEFT JOIN, make sure any generated columns on that row evaluate to NULL.  Ticket [3b84b42943644d6f]\n\nFossilOrigin-Name: 0271491438ad2a985aeff355173a8d0f1e5813954c82147bc68cb26cca5804c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e3918ca2f2c1cfcfa44249b1d7b847d52cbb8d302a8d4a335c090cfdf22d7a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3408:   Column *pCol,",
          "3409:   int regOut",
          "3410: ){",
          "3411:   sqlite3ExprCode(pParse, pCol->pDflt, regOut);",
          "3412:   if( pCol->affinity>=SQLITE_AFF_TEXT ){",
          "3415:   }",
          "3416: }",
          "",
          "[Removed Lines]",
          "3413:     sqlite3VdbeAddOp4(pParse->pVdbe, OP_Affinity, regOut, 1, 0,",
          "3414:                       &pCol->affinity, 1);",
          "",
          "[Added Lines]",
          "3411:   int iAddr;",
          "3412:   Vdbe *v = pParse->pVdbe;",
          "3413:   assert( v!=0 );",
          "3414:   assert( pParse->iSelfTab!=0 );",
          "3415:   if( pParse->iSelfTab>0 ){",
          "3416:     iAddr = sqlite3VdbeAddOp3(v, OP_IfNullRow, pParse->iSelfTab-1, 0, regOut);",
          "3417:   }else{",
          "3418:     iAddr = 0;",
          "3419:   }",
          "3422:     sqlite3VdbeAddOp4(v, OP_Affinity, regOut, 1, 0, &pCol->affinity, 1);",
          "3424:   if( iAddr ) sqlite3VdbeJumpHere(v, iAddr);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:   SELECT a, quote(b) FROM t1",
          "420: } {9 NULL}",
          "422: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422: # 2019-12-16 ticket 3b84b42943644d6f",
          "423: # When a table is the right table of a LEFT JOIN and the ON clause is",
          "424: # false, make sure any generated columns evaluate to NULL.",
          "425: reset_db",
          "426: do_execsql_test gencol1-16.10 {",
          "427:   CREATE TABLE t0(c0);",
          "428:   CREATE TABLE t1(c1, c2 AS(1));",
          "429:   INSERT INTO t0 VALUES(0);",
          "430:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;",
          "431: } {0 {} {}}",
          "432: do_execsql_test gencol1-16.20 {",
          "433:   DROP TABLE t1;",
          "434:   CREATE TABLE t1(c1, c2 AS (c1 ISNULL));",
          "435:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;",
          "436: } {0 {} {}}",
          "437: do_execsql_test gencol1-16.30 {",
          "438:   INSERT INTO t1(c1) VALUES(1),(NULL);",
          "439:   SELECT * FROM t1;",
          "440: } {1 0 {} 1}",
          "441: do_execsql_test gencol1-16.40 {",
          "442:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1 ON c0=c1;",
          "443: } {0 {} {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "054a0815554438116da171a18e4dfd8e50104543",
      "candidate_info": {
        "commit_hash": "054a0815554438116da171a18e4dfd8e50104543",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/054a0815554438116da171a18e4dfd8e50104543",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test",
          "test/fts4aa.test"
        ],
        "message": "Merge accidentally created fork.\n\nFossilOrigin-Name: cb772b7a8fb53694cb267e74c11f49d2b9fd6920821c4e232f90ec35739c8904",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   if( pReader->nDoclist > pReader->nNode-(pReader->aDoclist-pReader->aNode)",
          "1417:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1418:   ){",
          "1419:     return FTS_CORRUPT_VTAB;",
          "1420:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1418:    || pReader->nDoclist==0",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a42fdcf54bcbd72a301dad4a040346dc48e67cacab43479ec618f5c32108c55f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5834:   INSERT INTO f(f) VALUES ('merge=59,59');",
          "5835: } {1 {database disk image is malformed}}",
          "5837: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5837: #-------------------------------------------------------------------------",
          "5838: #",
          "5839: reset_db",
          "5840: do_execsql_test 37.0 {",
          "5841:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5842:   INSERT INTO f_segdir VALUES (28,0,0,0,'0 0',x'00');",
          "5843:   INSERT INTO f_segdir VALUES (0,241,0,0,'0 0',x'0001000030310000f1');",
          "5844: }",
          "5846: do_catchsql_test 37.1 {",
          "5847:   INSERT INTO f VALUES (0,x'00');",
          "5848: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: } else {",
          "235:   set res {X'0000000200000000000000000000000E0000000E00000001000000010000000100000001'}",
          "236: }",
          "238:   CREATE VIRTUAL TABLE f USING fts4();",
          "239:   INSERT INTO f_segdir VALUES (77,91,0,0,'255 77',x'0001308000004d5c4ddddddd4d4d7b4d4d4d614d8019ff4d05000001204d4d2e4d6e4d4d4d4b4d6c4d004d4d4d4d4d4d3d000000004d5d4d4d645d4d004d4d4d4d4d4d4d4d4d454d6910004d05ffff054d646c4d004d5d4d4d4d4d3d000000004d4d4d4d4d4d4d4d4d4d4d69624d4d4d04004d4d4d4d4d604d4ce1404d554d45');",
          "240:   INSERT INTO f_segdir VALUES (77,108,0,0,'255 77',x'0001310000fa64004d4d4d3c5d4d654d4d4d614d8000ff4d05000001204d4d2e4d6e4d4d4dff4d4d4d4d4d4d00104d4d4d4d000000004d4d4d0400311d4d4d4d4d4d4d4d4d4d684d6910004d05ffff054d4d6c4d004d4d4d4d4d4d3d000000004d4d4d4d644d4d4d4d4d4d69624d4d4d03ed4d4d4d4d4d604d4ce1404d550080');",
          "241:   INSERT INTO f_stat VALUES (0,x'80808080100000000064004d4d4d3c4d4d654d4d4d614d8000ff4df6ff1a00204d4d2e4d6e4d4d4d104d4d4d4d4d4d00104d4d4d4d4d4d69574d4d4d000031044d4d4d3e4d4d4c4d05004d6910');",
          "242:   SELECT quote(matchinfo(f,'pnax')) from f where f match '0 1';",
          "245: # 2019-11-18 Detect infinite loop in fts3SelectLeaf()",
          "246: db close",
          "",
          "[Removed Lines]",
          "237: do_execsql_test fts4aa-6.10 {",
          "243: } $res",
          "",
          "[Added Lines]",
          "237: do_catchsql_test fts4aa-6.10 {",
          "243: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc050b8f2720ca110c6a9db8cd1b15bcfcc6968c",
      "candidate_info": {
        "commit_hash": "bc050b8f2720ca110c6a9db8cd1b15bcfcc6968c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc050b8f2720ca110c6a9db8cd1b15bcfcc6968c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Mark an always-true conditional with ALWAYS().\n\nFossilOrigin-Name: 35a236841764a10cdcda63f34e1a8e7ffa43933bc89cb32f675454327834d7bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 16a41fa8c4c74bba4e908a9c19e6cf5a927cac140e2070c9abf303158be7257b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5668: static int selectSrcCount(Walker *pWalker, Select *pSel){",
          "5669:   struct SrcCount *p = pWalker->u.pSrcCount;",
          "5671:     pWalker->u.pSrcCount->iSrcInner = pSel->pSrc->a[0].iCursor;",
          "5672:   }",
          "5673:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "5670:   if( p->iSrcInner==0x7FFFFFFF && pSel->pSrc && pSel->pSrc->nSrc ){",
          "",
          "[Added Lines]",
          "5670:   if( p->iSrcInner==0x7FFFFFFF && ALWAYS(pSel->pSrc) && pSel->pSrc->nSrc ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}