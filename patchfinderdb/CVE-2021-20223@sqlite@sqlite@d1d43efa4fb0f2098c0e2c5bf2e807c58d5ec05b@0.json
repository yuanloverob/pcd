{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31e3744ecb0b679ffbdf3b9b5ac32c360877571c",
      "candidate_info": {
        "commit_hash": "31e3744ecb0b679ffbdf3b9b5ac32c360877571c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31e3744ecb0b679ffbdf3b9b5ac32c360877571c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Simple fixes to PRAGMA analysis_limit.\n\nFossilOrigin-Name: c20d4fdee21409ebc9c65c9540af8ac48d1f4425499a6674ef9319655c192612",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a279b151c1623807774daf4975175c62ea252eefb71f9820ced6773769b392c5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:   p->nEst = sqlite3_value_int64(argv[2]);",
          "445:   p->nRow = 0;",
          "446:   p->nLimit = sqlite3_value_int64(argv[3]);",
          "451:   p->nCol = nCol;",
          "452:   p->nKeyCol = nKeyCol;",
          "453:   p->nSkipAhead = 0;",
          "",
          "[Removed Lines]",
          "447: #ifdef SQLITE_ENABLE_STAT4",
          "449:   if( p->nLimit>0 ) p->mxSample = 0;",
          "450: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:   p->current.anEq = &p->current.anDLt[nColUp];",
          "457: #ifdef SQLITE_ENABLE_STAT4",
          "459:   if( mxSample ){",
          "",
          "[Removed Lines]",
          "458:   p->mxSample = mxSample;",
          "",
          "[Added Lines]",
          "454:   p->mxSample = p->nLimit==0 ? mxSample : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1258: #ifdef SQLITE_ENABLE_STAT4",
          "1260:       int regEq = regStat1;",
          "1261:       int regLt = regStat1+1;",
          "1262:       int regDLt = regStat1+2;",
          "",
          "[Removed Lines]",
          "1259:     if( OptimizationEnabled(db, SQLITE_Stat4) ){",
          "",
          "[Added Lines]",
          "1255:     if( OptimizationEnabled(db, SQLITE_Stat4) && db->nAnalysisLimit==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7c74006a093aaf1abc3a6905d2741f20824f79b",
      "candidate_info": {
        "commit_hash": "a7c74006a093aaf1abc3a6905d2741f20824f79b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7c74006a093aaf1abc3a6905d2741f20824f79b",
        "files": [
          "ext/misc/decimal.c",
          "ext/misc/ieee754.c",
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/parse.y",
          "src/update.c"
        ],
        "message": "More harmless compiler warning fixes.\n\nFossilOrigin-Name: 4c0d208c455abb983217a6dfea7634f677f8360fb57857e1421334fe7a5a23e2",
        "before_after_code_files": [
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "ext/misc/ieee754.c||ext/misc/ieee754.c",
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/parse.y||src/parse.y",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <ctype.h>",
          "22: #include <stdlib.h>",
          "26: typedef struct Decimal Decimal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #ifndef UNUSED_PARAMETER",
          "27: # define UNUSED_PARAMETER(X)  (void)(X)",
          "28: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   sqlite3_value **argv",
          "236: ){",
          "237:   Decimal *p = decimal_new(context, argv[0], 0, 0);",
          "238:   decimal_result(context, p);",
          "239:   decimal_free(p);",
          "240: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288:   Decimal *pA = 0, *pB = 0;",
          "289:   int rc;",
          "291:   pA = decimal_new(context, argv[0], 0, 0);",
          "292:   if( pA==0 || pA->isNull ) goto cmp_done;",
          "293:   pB = decimal_new(context, argv[1], 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "412:   Decimal *pA = decimal_new(0, 0, nKey1, zA);",
          "413:   Decimal *pB = decimal_new(0, 0, nKey2, zB);",
          "414:   int rc;",
          "415:   if( pA==0 || pB==0 ){",
          "416:     rc = 0;",
          "417:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:   UNUSED_PARAMETER(notUsed);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "436: ){",
          "437:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "438:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "439:   decimal_add(pA, pB);",
          "440:   decimal_result(context, pA);",
          "441:   decimal_free(pA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "448: ){",
          "449:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "450:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "451:   if( pB==0 ) return;",
          "452:   pB->sign = !pB->sign;",
          "453:   decimal_add(pA, pB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "468: ){",
          "469:   Decimal *p;",
          "470:   Decimal *pArg;",
          "471:   p = sqlite3_aggregate_context(context, sizeof(*p));",
          "472:   if( p==0 ) return;",
          "473:   if( !p->isInit ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "493: ){",
          "494:   Decimal *p;",
          "495:   Decimal *pArg;",
          "496:   p = sqlite3_aggregate_context(context, sizeof(*p));",
          "497:   if( p==0 ) return;",
          "498:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "533:   signed char *acc = 0;",
          "534:   int i, j, k;",
          "535:   int minFrac;",
          "536:   if( pA==0 || pA->oom || pA->isNull",
          "537:    || pB==0 || pB->oom || pB->isNull",
          "538:   ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "597:     { \"decimal_sub\",   2,   decimalSubFunc     },",
          "598:     { \"decimal_mul\",   2,   decimalMulFunc     },",
          "599:   };",
          "603:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "",
          "[Removed Lines]",
          "600:   int i;",
          "",
          "[Added Lines]",
          "614:   unsigned int i;",
          "",
          "---------------"
        ],
        "ext/misc/ieee754.c||ext/misc/ieee754.c": [
          "File: ext/misc/ieee754.c -> ext/misc/ieee754.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #include <assert.h>",
          "91: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: #ifndef UNUSED_PARAMETER",
          "96: # define UNUSED_PARAMETER(X)  (void)(X)",
          "97: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:      && sqlite3_value_bytes(argv[0])==sizeof(r)",
          "110:     ){",
          "111:       const unsigned char *x = sqlite3_value_blob(argv[0]);",
          "113:       sqlite3_uint64 v = 0;",
          "114:       for(i=0; i<sizeof(r); i++){",
          "115:         v = (v<<8) | x[i];",
          "",
          "[Removed Lines]",
          "112:       int i;",
          "",
          "[Added Lines]",
          "118:       unsigned int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   int argc,",
          "202:   sqlite3_value **argv",
          "203: ){",
          "204:   if( sqlite3_value_type(argv[0])==SQLITE_BLOB",
          "205:    && sqlite3_value_bytes(argv[0])==sizeof(double)",
          "206:   ){",
          "207:     double r;",
          "208:     const unsigned char *x = sqlite3_value_blob(argv[0]);",
          "210:     sqlite3_uint64 v = 0;",
          "211:     for(i=0; i<sizeof(r); i++){",
          "212:       v = (v<<8) | x[i];",
          "",
          "[Removed Lines]",
          "209:     int i;",
          "",
          "[Added Lines]",
          "210:   UNUSED_PARAMETER(argc);",
          "216:     unsigned int i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:   int argc,",
          "221:   sqlite3_value **argv",
          "222: ){",
          "223:   if( sqlite3_value_type(argv[0])==SQLITE_FLOAT",
          "224:    || sqlite3_value_type(argv[0])==SQLITE_INTEGER",
          "225:   ){",
          "226:     double r = sqlite3_value_double(argv[0]);",
          "227:     sqlite3_uint64 v;",
          "228:     unsigned char a[sizeof(r)];",
          "230:     memcpy(&v, &r, sizeof(r));",
          "231:     for(i=1; i<=sizeof(r); i++){",
          "232:       a[sizeof(r)-i] = v&0xff;",
          "",
          "[Removed Lines]",
          "229:     int i;",
          "",
          "[Added Lines]",
          "230:   UNUSED_PARAMETER(argc);",
          "237:     unsigned int i;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:     { \"ieee754_from_blob\", 1,   0, ieee754func_from_blob },",
          "261:   };",
          "263:   int rc = SQLITE_OK;",
          "264:   SQLITE_EXTENSION_INIT2(pApi);",
          "",
          "[Removed Lines]",
          "262:   int i;",
          "",
          "[Added Lines]",
          "270:   unsigned int i;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5a0b0c6e11146e200c3417903232e6932102b02d7bf128bac4b7cd74c257acd1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1164:   sqlite3 *db = pParse->db;",
          "1165:   Trigger *pNew = pParse->pNewTrigger;",
          "1166:   TriggerStep *pStep;",
          "",
          "[Removed Lines]",
          "1163: static int renameResolveTrigger(Parse *pParse, const char *zDb){",
          "",
          "[Added Lines]",
          "1163: static int renameResolveTrigger(Parse *pParse){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1422:   }else{",
          "1424:     TriggerStep *pStep;",
          "1426:     if( rc!=SQLITE_OK ) goto renameColumnFunc_done;",
          "1428:     for(pStep=sParse.pNewTrigger->step_list; pStep; pStep=pStep->pNext){",
          "",
          "[Removed Lines]",
          "1425:     rc = renameResolveTrigger(&sParse, (bTemp ? 0 : zDb));",
          "",
          "[Added Lines]",
          "1425:     rc = renameResolveTrigger(&sParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1625:         }",
          "1627:         if( isLegacy==0 ){",
          "1629:           if( rc==SQLITE_OK ){",
          "1630:             renameWalkTrigger(&sWalker, pTrigger);",
          "1631:             for(pStep=pTrigger->step_list; pStep; pStep=pStep->pNext){",
          "",
          "[Removed Lines]",
          "1628:           rc = renameResolveTrigger(&sParse, bTemp ? 0 : zDb);",
          "",
          "[Added Lines]",
          "1628:           rc = renameResolveTrigger(&sParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1713:       else if( sParse.pNewTrigger ){",
          "1714:         if( isLegacy==0 ){",
          "1716:         }",
          "1717:         if( rc==SQLITE_OK ){",
          "1718:           int i1 = sqlite3SchemaToIndex(db, sParse.pNewTrigger->pTabSchema);",
          "",
          "[Removed Lines]",
          "1715:           rc = renameResolveTrigger(&sParse, bTemp ? 0 : zDb);",
          "",
          "[Added Lines]",
          "1715:           rc = renameResolveTrigger(&sParse);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "471: cmd ::= select(X).  {",
          "473:   sqlite3Select(pParse, X, &dest);",
          "474:   sqlite3SelectDelete(pParse->db, X);",
          "475: }",
          "",
          "[Removed Lines]",
          "472:   SelectDest dest = {SRT_Output, 0, 0, 0, 0, 0};",
          "",
          "[Added Lines]",
          "472:   SelectDest dest = {SRT_Output, 0, 0, 0, 0, 0, 0};",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: ){",
          "193:   int i;",
          "194:   SelectDest dest;",
          "",
          "[Removed Lines]",
          "190:   ExprList *pOrderBy,",
          "191:   Expr *pLimit",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:   }",
          "211:   pOrderBy2 = sqlite3ExprListDup(db, pOrderBy, 0);",
          "212:   pLimit2 = sqlite3ExprDup(db, pLimit, 0);",
          "213: #endif",
          "215:   pSrc = sqlite3SrcListDup(db, pTabList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: #else",
          "214:   UNUSED_PARAMETER(pOrderBy);",
          "215:   UNUSED_PARAMETER(pLimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "902:       j = aXRef[i];",
          "903:       if( j>=0 ){",
          "904:         if( nChangeFrom ){",
          "906:           int nOff = (isView ? pTab->nCol : nPk);",
          "907:           sqlite3VdbeAddOp3(v, OP_Column, iEph, nOff+j, k);",
          "908:         }else{",
          "909:           sqlite3ExprCode(pParse, pChanges->a[j].pExpr, k);",
          "",
          "[Removed Lines]",
          "905:           assert( eOnePass==ONEPASS_OFF );",
          "",
          "[Added Lines]",
          "909:           assert( eOnePass==ONEPASS_OFF );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1167:   const char *pVTab = (const char*)sqlite3GetVTable(db, pTab);",
          "",
          "[Removed Lines]",
          "1168:   WhereInfo *pWInfo;",
          "",
          "[Added Lines]",
          "1171:   WhereInfo *pWInfo = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b173b93fc95656d927fe085c9cefb2ee4554157",
      "candidate_info": {
        "commit_hash": "2b173b93fc95656d927fe085c9cefb2ee4554157",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b173b93fc95656d927fe085c9cefb2ee4554157",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Put a NEVER() on a defensive branch.\n\nFossilOrigin-Name: 40d10e7aad5b899206e45d1f8606470a90a07049e15d94c3811cfe695f3a402e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d4813a8d813f234e819f8ebefbd3ff96d3d69593cc7d716cf0ad6c1a126da827",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "595:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "598:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "599:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "600:     return;",
          "",
          "[Removed Lines]",
          "597:   if( pParse->nErr ) return;",
          "",
          "[Added Lines]",
          "597:   if( NEVER(pParse->nErr) ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74ebaadcdd8b1058bbc80bf61334fe09da1c64b5",
      "candidate_info": {
        "commit_hash": "74ebaadcdd8b1058bbc80bf61334fe09da1c64b5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74ebaadcdd8b1058bbc80bf61334fe09da1c64b5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c",
          "test/in4.test"
        ],
        "message": "Fix a problem where the loop for the RHS of a LEFT JOIN uses values from an IN() clause as the second or subsequent field of an index.\n\nFossilOrigin-Name: 95ef68966c50f311830cba8c9257a4085c93011d205e0e31867c2917fa62a48e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "test/in4.test||test/in4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9da48a5ca66dc67c8f7fb2d2471dac7ea696e35ecba5ddf65747d08d452436c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4389:   break;",
          "4390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4398:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4399:   if( !p->apCsr[pOp->p1] ){",
          "4400:     goto jump_to_p2_and_check_for_interrupt;",
          "4401:   }",
          "4402:   break;",
          "4403: }",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5273:         if( pIn->eEndLoopOp!=OP_Noop ){",
          "5274:           if( pIn->nPrefix ){",
          "5275:             assert( pLoop->wsFlags & WHERE_IN_EARLYOUT );",
          "5280:           }",
          "5281:           sqlite3VdbeAddOp2(v, pIn->eEndLoopOp, pIn->iCur, pIn->addrInTop);",
          "5282:           VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "5276:             sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5277:                               sqlite3VdbeCurrentAddr(v)+2,",
          "5278:                               pIn->iBase, pIn->nPrefix);",
          "5279:             VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "5276:             if( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "5277:               sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5278:                   sqlite3VdbeCurrentAddr(v)+2+(pLevel->iLeftJoin!=0),",
          "5279:                   pIn->iBase, pIn->nPrefix);",
          "5280:               VdbeCoverage(v);",
          "5281:             }",
          "5282:             if( pLevel->iLeftJoin ){",
          "5291:               sqlite3VdbeAddOp2(v, OP_IfNotOpen, pIn->iCur,",
          "5292:                   sqlite3VdbeCurrentAddr(v) + 2",
          "5293:               );",
          "5294:               VdbeCoverage(v);",
          "5295:             }",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:           if( i==iEq ){",
          "594:             pIn->iCur = iTab;",
          "595:             pIn->eEndLoopOp = bRev ? OP_Prev : OP_Next;",
          "597:               pIn->iBase = iReg - i;",
          "598:               pIn->nPrefix = i;",
          "599:               pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "",
          "[Removed Lines]",
          "596:             if( iEq>0 && (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "",
          "[Added Lines]",
          "596:             if( iEq>0 ){",
          "",
          "---------------"
        ],
        "test/in4.test||test/in4.test": [
          "File: test/in4.test -> test/in4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: do_test in4-1.1 {",
          "18:   execsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: set testprefix in4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:   SELECT * FROM t6a, t6b WHERE a=3 AND c IN (b);",
          "339: } {~/SCAN/}",
          "342: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: reset_db",
          "343: do_execsql_test 7.0 {",
          "344:   CREATE TABLE t1(a, b, c);",
          "345:   CREATE TABLE t2(d, e);",
          "346:   CREATE INDEX t1bc ON t1(c, b);",
          "347:   INSERT INTO t2(e) VALUES(1);",
          "348:   INSERT INTO t1 VALUES(NULL, NULL, NULL);",
          "349: }",
          "351: do_execsql_test 7.1 {",
          "352:   SELECT * FROM t2 LEFT JOIN t1 ON c = d AND b IN (10,10,10);",
          "353: } {{} 1 {} {} {}}",
          "355: reset_db",
          "356: do_execsql_test 7.2 {",
          "357:   CREATE VIRTUAL TABLE t1 USING rtree(a, b, c);",
          "358:   CREATE TABLE t2(d INTEGER, e INT);",
          "359:   INSERT INTO t2(e) VALUES(1);",
          "360: }",
          "362: do_execsql_test 7.3 {",
          "363:   SELECT * FROM t2 LEFT JOIN t1 ON c IN (d) AND b IN (10,10,10);",
          "364: } {{} 1 {} {} {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09bee5743dc30891e08591f237c23c6964c0a0aa",
      "candidate_info": {
        "commit_hash": "09bee5743dc30891e08591f237c23c6964c0a0aa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09bee5743dc30891e08591f237c23c6964c0a0aa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Follow-up to check-in [c8c6dd0e6582ec91] - change the xAccess() method to return true if the file exists and it is anything other than a regular file, or if it is a regular file with a non-zero file size.\n\nFossilOrigin-Name: 8a39803ef8db4d8cb0d231e66299525fad4e61266ca29b3704aebb88df1c745b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ffc045d2bbeeda9c13a3a3585538ff6434fc852b0ae6679d3c8b9f606bf92e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6260:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6261:     struct stat buf;",
          "6264:   }else{",
          "6266:   }",
          "",
          "[Removed Lines]",
          "6263:                 (S_ISDIR(buf.st_mode) || buf.st_size>0);",
          "",
          "[Added Lines]",
          "6263:                 (!S_ISREG(buf.st_mode) || buf.st_size>0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}