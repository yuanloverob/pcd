{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d756cc83a889e95871e974c6184fc35953c2f92",
      "candidate_info": {
        "commit_hash": "0d756cc83a889e95871e974c6184fc35953c2f92",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d756cc83a889e95871e974c6184fc35953c2f92",
        "files": [
          "ext/rbu/rbuvacuum3.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with the second and subsequent sqlite3rbu_savestate() calls made on an RBU vacuum handle.\n\nFossilOrigin-Name: bef216dfa1456a787e3d9c74936ee1c6600827d4e252bd13e7a93046ce07469f",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum3.test||ext/rbu/rbuvacuum3.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum3.test||ext/rbu/rbuvacuum3.test": [
          "File: ext/rbu/rbuvacuum3.test -> ext/rbu/rbuvacuum3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum3",
          "20: do_execsql_test 1.0 {",
          "21:   CREATE TABLE t1(a PRIMARY KEY, b, c);",
          "22:   CREATE INDEX i1b ON t1(b);",
          "23:   CREATE INDEX i1c ON t1(c);",
          "25:   WITH s(i) AS (",
          "26:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<100",
          "27:   )",
          "28:   INSERT INTO t1 SELECT i, randomblob(100), randomblob(100) FROM s;",
          "29: }",
          "31: forcedelete state.db",
          "32: do_test 1.1 {",
          "33:   sqlite3rbu_vacuum rbu test.db state.db",
          "34:   while {1} {",
          "35:     set rc [rbu step]",
          "36:     if {$rc!=\"SQLITE_OK\"} break",
          "37:     rbu savestate",
          "38:   }",
          "39:   rbu close",
          "40: } {SQLITE_DONE}",
          "42: do_test 1.2 {",
          "43:   sqlite3rbu_vacuum rbu test.db state.db",
          "44:   while {1} {",
          "45:     set rc [rbu step]",
          "46:     if {$rc!=\"SQLITE_OK\"} break",
          "47:     rbu savestate",
          "48:   }",
          "49:   rbu close",
          "50: } {SQLITE_DONE}",
          "52: do_test 1.3 {",
          "53:   while {1} {",
          "54:     sqlite3rbu_vacuum rbu test.db state.db",
          "55:     set rc [rbu step]",
          "56:     if {$rc!=\"SQLITE_OK\"} break",
          "57:     rbu savestate",
          "58:     rbu close",
          "59:   }",
          "60:   rbu close",
          "61: } {SQLITE_DONE}",
          "63: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3945:   if( p->eStage==RBU_STAGE_OAL ){",
          "3946:     assert( rc!=SQLITE_DONE );",
          "3947:     if( rc==SQLITE_OK ) rc = sqlite3_exec(p->dbRbu, \"COMMIT\", 0, 0, 0);",
          "3949:     if( rc==SQLITE_OK ) rc = sqlite3_exec(p->dbMain, \"BEGIN IMMEDIATE\", 0, 0,0);",
          "3950:   }",
          "",
          "[Removed Lines]",
          "3948:     if( rc==SQLITE_OK ) rc = sqlite3_exec(p->dbRbu, \"BEGIN IMMEDIATE\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "3948:     if( rc==SQLITE_OK ){",
          "3949:       const char *zBegin = rbuIsVacuum(p) ? \"BEGIN\" : \"BEGIN IMMEDIATE\";",
          "3950:       rc = sqlite3_exec(p->dbRbu, zBegin, 0, 0, 0);",
          "3951:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 120cb1768338eb86412fb69d4c7677247775bb37875ab3a98766cffd535f04cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
      "candidate_info": {
        "commit_hash": "b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
        "files": [
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Disallow page-sizes smaller than 32 bytes in fts5. Also ensure the fts5 integrity-check works even when \"PRAGMA reverse_unordered_selects\" is true. Fix for [265e935b26].\n\nFossilOrigin-Name: 8ab0aebdb3c2d6fb3160b2c58ce6cc0495a6ddd960878a6395958c837f3d1b71",
        "before_after_code_files": [
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:     if( SQLITE_INTEGER==sqlite3_value_numeric_type(pVal) ){",
          "829:       pgsz = sqlite3_value_int(pVal);",
          "830:     }",
          "833:     }else{",
          "834:       pConfig->pgsz = pgsz;",
          "",
          "[Removed Lines]",
          "831:     if( pgsz<=0 || pgsz>FTS5_MAX_PAGE_SIZE ){",
          "",
          "[Added Lines]",
          "831:     if( pgsz<32 || pgsz>FTS5_MAX_PAGE_SIZE ){",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5890:   if( pSeg->pgnoFirst==0 ) return;",
          "5892:   fts5IndexPrepareStmt(p, &pStmt, sqlite3_mprintf(",
          "5894:       pConfig->zDb, pConfig->zName, pSeg->iSegid",
          "5895:   ));",
          "",
          "[Removed Lines]",
          "5893:       \"SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d\",",
          "",
          "[Added Lines]",
          "5893:       \"SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d \"",
          "5894:       \"ORDER BY 1, 2\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4484: do_catchsql_test 36.1 {",
          "4485:   INSERT INTO t1(b) VALUES(",
          "4486:       x'78de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6a');",
          "4489: #-------------------------------------------------------------------------",
          "4490: reset_db",
          "",
          "[Removed Lines]",
          "4487: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4487: } {0 {}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "107: }",
          "110: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #-------------------------------------------------------------------------",
          "110: reset_db",
          "111: do_execsql_test 3.0 {",
          "112:   CREATE VIRTUAL TABLE vt0 USING fts5(a);",
          "113:   PRAGMA reverse_unordered_selects = true;",
          "114:   INSERT INTO vt0 VALUES('365062398'), (0), (0);",
          "115:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '38');",
          "116: }",
          "117: do_execsql_test 3.1 {",
          "118:   UPDATE vt0 SET a = 399905135; -- unexpected: database disk image is malformed",
          "119: }",
          "120: do_execsql_test 3.2 {",
          "121:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "122: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d76dbc5b0584c15d7d59e5c079868f2077f32b865f406b40ec837b8ab6ef2e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ead96348e5aacfcf480aae141d0ab8dccfa4760",
      "candidate_info": {
        "commit_hash": "4ead96348e5aacfcf480aae141d0ab8dccfa4760",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ead96348e5aacfcf480aae141d0ab8dccfa4760",
        "files": [
          "ext/misc/prefixes.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the \"prefixes\" table-valued function in the ext/misc folder.\n\nFossilOrigin-Name: f0fd2163fc23a555ef03af43294a14fcabae6921f52e64c979286c745b4f6218",
        "before_after_code_files": [
          "ext/misc/prefixes.c||ext/misc/prefixes.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/prefixes.c||ext/misc/prefixes.c": [
          "File: ext/misc/prefixes.c -> ext/misc/prefixes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #if !defined(SQLITEINT_H)",
          "23: #include \"sqlite3ext.h\"",
          "24: #endif",
          "25: SQLITE_EXTENSION_INIT1",
          "26: #include <string.h>",
          "27: #include <assert.h>",
          "32: typedef struct prefixes_vtab prefixes_vtab;",
          "33: struct prefixes_vtab {",
          "36: };",
          "42: typedef struct prefixes_cursor prefixes_cursor;",
          "43: struct prefixes_cursor {",
          "48: };",
          "63: static int prefixesConnect(",
          "64:   sqlite3 *db,",
          "65:   void *pAux,",
          "66:   int argc, const char *const*argv,",
          "67:   sqlite3_vtab **ppVtab,",
          "68:   char **pzErr",
          "69: ){",
          "70:   prefixes_vtab *pNew;",
          "71:   int rc;",
          "73:   rc = sqlite3_declare_vtab(db,",
          "74:            \"CREATE TABLE prefixes(prefix TEXT, original_string TEXT HIDDEN)\"",
          "75:        );",
          "76:   if( rc==SQLITE_OK ){",
          "77:     pNew = sqlite3_malloc( sizeof(*pNew) );",
          "79:     if( pNew==0 ) return SQLITE_NOMEM;",
          "80:     memset(pNew, 0, sizeof(*pNew));",
          "81:   }",
          "82:   return rc;",
          "83: }",
          "88: static int prefixesDisconnect(sqlite3_vtab *pVtab){",
          "89:   prefixes_vtab *p = (prefixes_vtab*)pVtab;",
          "90:   sqlite3_free(p);",
          "91:   return SQLITE_OK;",
          "92: }",
          "97: static int prefixesOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "98:   prefixes_cursor *pCur;",
          "99:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "100:   if( pCur==0 ) return SQLITE_NOMEM;",
          "101:   memset(pCur, 0, sizeof(*pCur));",
          "103:   return SQLITE_OK;",
          "104: }",
          "109: static int prefixesClose(sqlite3_vtab_cursor *cur){",
          "110:   prefixes_cursor *pCur = (prefixes_cursor*)cur;",
          "111:   sqlite3_free(pCur->zStr);",
          "112:   sqlite3_free(pCur);",
          "113:   return SQLITE_OK;",
          "114: }",
          "120: static int prefixesNext(sqlite3_vtab_cursor *cur){",
          "121:   prefixes_cursor *pCur = (prefixes_cursor*)cur;",
          "122:   pCur->iRowid++;",
          "123:   return SQLITE_OK;",
          "124: }",
          "130: static int prefixesColumn(",
          "134: ){",
          "135:   prefixes_cursor *pCur = (prefixes_cursor*)cur;",
          "136:   switch( i ){",
          "137:     case 0:",
          "138:       sqlite3_result_text(ctx, pCur->zStr, pCur->nStr - (int)pCur->iRowid,",
          "139:                           0);",
          "140:       break;",
          "141:     default:",
          "142:       sqlite3_result_text(ctx, pCur->zStr, pCur->nStr, 0);",
          "143:       break;",
          "144:   }",
          "145:   return SQLITE_OK;",
          "146: }",
          "152: static int prefixesRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){",
          "153:   prefixes_cursor *pCur = (prefixes_cursor*)cur;",
          "155:   return SQLITE_OK;",
          "156: }",
          "162: static int prefixesEof(sqlite3_vtab_cursor *cur){",
          "163:   prefixes_cursor *pCur = (prefixes_cursor*)cur;",
          "164:   return pCur->iRowid>pCur->nStr;",
          "165: }",
          "173: static int prefixesFilter(",
          "174:   sqlite3_vtab_cursor *pVtabCursor,",
          "175:   int idxNum, const char *idxStr,",
          "176:   int argc, sqlite3_value **argv",
          "177: ){",
          "178:   prefixes_cursor *pCur = (prefixes_cursor *)pVtabCursor;",
          "179:   sqlite3_free(pCur->zStr);",
          "180:   if( argc>0 ){",
          "181:     pCur->zStr = sqlite3_mprintf(\"%s\", sqlite3_value_text(argv[0]));",
          "182:     pCur->nStr = pCur->zStr ? (int)strlen(pCur->zStr) : 0;",
          "183:   }else{",
          "184:     pCur->zStr = 0;",
          "185:     pCur->nStr = 0;",
          "186:   }",
          "187:   pCur->iRowid = 0;",
          "188:   return SQLITE_OK;",
          "189: }",
          "197: static int prefixesBestIndex(",
          "198:   sqlite3_vtab *tab,",
          "199:   sqlite3_index_info *pIdxInfo",
          "200: ){",
          "203:   int i;",
          "204:   const struct sqlite3_index_constraint *p;",
          "206:   for(i=0, p=pIdxInfo->aConstraint; i<pIdxInfo->nConstraint; i++, p++){",
          "207:     if( p->iColumn!=1 ) continue;",
          "208:     if( p->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "209:     if( !p->usable ) continue;",
          "210:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "211:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "212:     pIdxInfo->estimatedCost = (double)10;",
          "213:     pIdxInfo->estimatedRows = 10;",
          "214:     return SQLITE_OK;",
          "215:   }",
          "216:   pIdxInfo->estimatedCost = (double)1000000000;",
          "217:   pIdxInfo->estimatedRows = 1000000000;",
          "218:   return SQLITE_OK;",
          "219: }",
          "225: static sqlite3_module prefixesModule = {",
          "250: };",
          "253: #ifdef _WIN32",
          "254: __declspec(dllexport)",
          "255: #endif",
          "256: int sqlite3_prefixes_init(",
          "257:   sqlite3 *db,",
          "258:   char **pzErrMsg,",
          "259:   const sqlite3_api_routines *pApi",
          "260: ){",
          "261:   int rc = SQLITE_OK;",
          "262:   SQLITE_EXTENSION_INIT2(pApi);",
          "263:   rc = sqlite3_create_module(db, \"prefixes\", &prefixesModule, 0);",
          "264:   return rc;",
          "265: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9cd64ce453e4435d80117b8610c22a0a4b53cd6e84b39815e70e684f6b0295c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "477f1f12e2b9a13c663aab985d28ad589d37a1ea",
      "candidate_info": {
        "commit_hash": "477f1f12e2b9a13c663aab985d28ad589d37a1ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/477f1f12e2b9a13c663aab985d28ad589d37a1ea",
        "files": [
          "ext/misc/carray.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a typo in the carray extension header comment - the comment that serves as the documentation to this extension.\n\nFossilOrigin-Name: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
        "before_after_code_files": [
          "ext/misc/carray.c||ext/misc/carray.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/carray.c||ext/misc/carray.c": [
          "File: ext/misc/carray.c -> ext/misc/carray.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 090cd07d37904da4610d6a6787a3cc825c9a8bdcc5f051267d4608bba9b49d03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dc3547eeb691d5397e9dc55206daab0927937d8",
      "candidate_info": {
        "commit_hash": "7dc3547eeb691d5397e9dc55206daab0927937d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7dc3547eeb691d5397e9dc55206daab0927937d8",
        "files": [
          "Makefile.linux-gcc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Updates to the default settings in Makefile.linux-gcc.\n\nFossilOrigin-Name: 3044cf6917ea8324175fc91657e9a5978af9748f72e1914bc361753f0b2d897d",
        "before_after_code_files": [
          "Makefile.linux-gcc||Makefile.linux-gcc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.linux-gcc||Makefile.linux-gcc": [
          "File: Makefile.linux-gcc -> Makefile.linux-gcc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #### C Compiler and options for use in building executables that",
          "20: #    will run on the platform that is doing the build.",
          "21: #",
          "23: #BCC = /opt/ancic/bin/c89 -0",
          "25: #### If the target operating system supports the \"usleep()\" system",
          "",
          "[Removed Lines]",
          "22: BCC = gcc -g -O2",
          "",
          "[Added Lines]",
          "22: BCC = gcc -g -O0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: #### Specify any extra linker options needed to make the library",
          "39: #    thread safe",
          "40: #",
          "44: #### Specify any extra libraries needed to access required functions.",
          "45: #",
          "",
          "[Removed Lines]",
          "41: #THREADLIB = -lpthread",
          "42: THREADLIB =",
          "",
          "[Added Lines]",
          "41: THREADLIB = -lpthread -lm -ldl",
          "42: #THREADLIB =",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #    You can make the library go almost twice as fast if you compile",
          "55: #    with -DNDEBUG=1",
          "56: #",
          "63: #### The suffix to add to executable files.  \".exe\" for windows.",
          "64: #    Nothing for unix.",
          "",
          "[Removed Lines]",
          "57: #OPTS = -DSQLITE_DEBUG=2",
          "58: #OPTS = -DSQLITE_DEBUG=1",
          "59: #OPTS =",
          "60: OPTS = -DNDEBUG=1",
          "61: OPTS += -DHAVE_FDATASYNC=1",
          "",
          "[Added Lines]",
          "57: OPTS += -DSQLITE_DEBUG=1",
          "58: OPTS += -DSQLITE_ENABLE_WHERETRACE",
          "59: OPTS += -DSQLITE_ENABLE_SELECTTRACE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70: #    will run on the target platform.  This is usually the same",
          "71: #    as BCC, unless you are cross-compiling.",
          "72: #",
          "74: #TCC = gcc -g -O0 -Wall",
          "75: #TCC = gcc -g -O0 -Wall -fprofile-arcs -ftest-coverage",
          "76: #TCC = /opt/mingw/bin/i386-mingw32-gcc -O6",
          "",
          "[Removed Lines]",
          "73: TCC = gcc -O6",
          "",
          "[Added Lines]",
          "71: TCC = gcc -O0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92: #### Extra compiler options needed for programs that use the TCL library.",
          "93: #",
          "100: #### Linker options needed to link against the TCL library.",
          "101: #",
          "102: #LIBTCL = -ltcl -lm -ldl",
          "107: #### Additional objects for SQLite library when TCL support is enabled.",
          "108: #TCLOBJ =",
          "",
          "[Removed Lines]",
          "94: #TCL_FLAGS =",
          "95: #TCL_FLAGS = -DSTATIC_BUILD=1",
          "96: TCL_FLAGS = -I/home/drh/tcltk/8.5linux",
          "97: #TCL_FLAGS = -I/home/drh/tcltk/8.5win -DSTATIC_BUILD=1",
          "98: #TCL_FLAGS = -I/home/drh/tcltk/8.3hpux",
          "103: LIBTCL = /home/drh/tcltk/8.5linux/libtcl8.5g.a -lm -ldl",
          "104: #LIBTCL = /home/drh/tcltk/8.5win/libtcl85s.a -lmsvcrt",
          "105: #LIBTCL = /home/drh/tcltk/8.3hpux/libtcl8.3.a -ldld -lm -lc",
          "",
          "[Added Lines]",
          "92: TCL_FLAGS = -I/home/drh/tcl/include/tcl8.6",
          "97: LIBTCL = /home/drh/tcl/lib/libtcl8.6.a -lm -lpthread -ldl -lz",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5351e920f489562f959ab8a376ff720f845ea165e0cdc7c3a271aac53c2aa64a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}