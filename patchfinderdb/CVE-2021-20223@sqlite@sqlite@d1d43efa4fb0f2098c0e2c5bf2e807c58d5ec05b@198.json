{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3d6b8e5a78c5af92620f1d96001c046fa35d920",
      "candidate_info": {
        "commit_hash": "a3d6b8e5a78c5af92620f1d96001c046fa35d920",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a3d6b8e5a78c5af92620f1d96001c046fa35d920",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the cksumvfs extension so that it will not register itself more than once.\n\nFossilOrigin-Name: d5cdd57150db914b61b8b9c61c6caac9690fe7b647ee2c003e75b9b62be62752",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743: static int cksmRegisterVfs(void){",
          "744:   int rc = SQLITE_OK;",
          "745:   sqlite3_vfs *pOrig;",
          "747:   pOrig = sqlite3_vfs_find(0);",
          "748:   cksm_vfs.iVersion = pOrig->iVersion;",
          "749:   cksm_vfs.pAppData = pOrig;",
          "",
          "[Removed Lines]",
          "746:   if( sqlite3_vfs_find(\"cksum\")!=0 ) return SQLITE_OK;",
          "",
          "[Added Lines]",
          "746:   if( sqlite3_vfs_find(\"cksmvfs\")!=0 ) return SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0e898f4fed1c851cb90f940175110e632a20668a285d39f5f94f7358c3064882",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24aee8af6e1f5072a181900dce00ba50916e5a06",
      "candidate_info": {
        "commit_hash": "24aee8af6e1f5072a181900dce00ba50916e5a06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/24aee8af6e1f5072a181900dce00ba50916e5a06",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mksqlite3c.tcl",
          "tool/mksqlite3h.tcl"
        ],
        "message": "Try to remove end-of-line whitespace when building the amalgamation.\n\nFossilOrigin-Name: be3e7814e4cdbc09eaa5112d7d4135b3a2cedbfe66217d9973b1b39a44464e93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mksqlite3c.tcl||tool/mksqlite3c.tcl",
          "tool/mksqlite3h.tcl||tool/mksqlite3h.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da06168c09df5c0e8e10d0f9618e69217d4c0173a8199660bad2805f009d7b08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mksqlite3c.tcl||tool/mksqlite3c.tcl": [
          "File: tool/mksqlite3c.tcl -> tool/mksqlite3c.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   }",
          "184:   set declpattern ^$declpattern\\$",
          "185:   while {![eof $in]} {",
          "187:     incr ln",
          "188:     if {[regexp {^\\s*#\\s*include\\s+[\"<]([^\">]+)[\">]} $line all hdr]} {",
          "189:       if {[info exists available_hdr($hdr)]} {",
          "",
          "[Removed Lines]",
          "186:     set line [gets $in]",
          "",
          "[Added Lines]",
          "186:     set line [string trimright [gets $in]]",
          "",
          "---------------"
        ],
        "tool/mksqlite3h.tcl||tool/mksqlite3h.tcl": [
          "File: tool/mksqlite3h.tcl -> tool/mksqlite3h.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   }",
          "108:   while {![eof $in]} {",
          "112:     # File sqlite3rtree.h contains a line \"#include <sqlite3.h>\". Omit this",
          "113:     # line when copying sqlite3rtree.h into sqlite3.h.",
          "",
          "[Removed Lines]",
          "110:     set line [gets $in]",
          "",
          "[Added Lines]",
          "110:     set line [string trimright [gets $in]]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "403869680bb09c02b48613b950ebfc30a59d4684",
      "candidate_info": {
        "commit_hash": "403869680bb09c02b48613b950ebfc30a59d4684",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/403869680bb09c02b48613b950ebfc30a59d4684",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/sqliteInt.h",
          "src/where.c",
          "test/distinct2.test"
        ],
        "message": "Sometimes it makes sense to do a full table scan rather than try to use an index when most of the rows will be selected.  This branch is trying to tune the query planner to make that happen more often.\n\nFossilOrigin-Name: 0f42099ad65855c94af8472f3a6fddac7fc2a82e8fdfcc06a298eb6683a28688",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 602d7369166d406a26834aa47d71d565a17d377d32e41f308821a50b41f91896",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1772:     }",
          "1773:     pSpace = (tRowcnt*)&pIdx->aSample[nSample];",
          "1774:     pIdx->aAvgEq = pSpace; pSpace += nIdxCol;",
          "1775:     for(i=0; i<nSample; i++){",
          "1776:       pIdx->aSample[i].anEq = pSpace; pSpace += nIdxCol;",
          "1777:       pIdx->aSample[i].anLt = pSpace; pSpace += nIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1775:     pIdx->pTable->tabFlags |= TF_HasStat4;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3044:       pNew->iSortIdx = b ? iSortIdx : 0;",
          "3046:       pNew->rRun = rSize + 16;",
          "3047:       ApplyCostMultiplier(pNew->rRun, pTab->costMult);",
          "3048:       whereLoopOutputAdjust(pWC, pNew, rSize);",
          "3049:       rc = whereLoopInsert(pBuilder, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3057: #ifdef SQLITE_ENABLE_STAT4",
          "3058:       pNew->rRun = rSize + 16 - 2*((pTab->tabFlags & TF_HasStat4)!=0);",
          "3059: #else",
          "3061: #endif",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "",
          "[Removed Lines]",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "",
          "[Added Lines]",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a, +b;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f06cdde2cfb57d40c705044d95effa5b352ed125",
      "candidate_info": {
        "commit_hash": "f06cdde2cfb57d40c705044d95effa5b352ed125",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f06cdde2cfb57d40c705044d95effa5b352ed125",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h"
        ],
        "message": "Rework this changes so that instead of setting the WhereTerm.truthProb when a term is seen to be of low selectivity, it merely sets a new flag (the TERM_HIGHTRUTH flag) which causes whereLoopOutputAdjust() to ignore that term.\n\nFossilOrigin-Name: 4558163b6a525990f0f1b6629dbb76daf49bcaf1ddbaf0c50fe05ce9ee480ff8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a9d3005769e0398183b03a3e132e3946b9d1c48073af2e0559d7beeac3245c0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2300:         pLoop->nOut--;",
          "2302:           Expr *pRight = pTerm->pExpr->pRight;",
          "2303:           int k = 0;",
          "2304:           testcase( pTerm->pExpr->op==TK_IS );",
          "2305:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2306:             k = 10;",
          "2307:           }else{",
          "2309:           }",
          "2310:           if( iReduce<k ){",
          "2311:             pTerm->wtFlags |= TERM_HEURTRUTH;",
          "",
          "[Removed Lines]",
          "2301:         if( pTerm->eOperator&(WO_EQ|WO_IS) ){",
          "",
          "[Added Lines]",
          "2301:         if( (pTerm->eOperator&(WO_EQ|WO_IS))!=0",
          "2303:         ){",
          "2310:             k = 20;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2660:           if( nOut ){",
          "2661:             pNew->nOut = sqlite3LogEst(nOut);",
          "2662:             if( nEq==1",
          "2668:             ){",
          "2670:               if( sqlite3WhereTrace & 0x01 ){",
          "2673:                 sqlite3WhereTermPrint(pTerm, 999);",
          "2674:               }",
          "2675: #endif",
          "2677:               if( pTerm->wtFlags & TERM_HEURTRUTH ){",
          "2680:                 pBuilder->bldFlags2 |= SQLITE_BLDF2_2NDPASS;",
          "2681:               }",
          "2682:             }",
          "",
          "[Removed Lines]",
          "2663:              && pTerm->truthProb>0",
          "2667:              && pNew->nOut+20 > pProbe->aiRowLogEst[0]",
          "2671:                 sqlite3DebugPrintf(\"Update truthProb from %d to %d:\\n\",",
          "2672:                        pTerm->truthProb, pNew->nOut - pProbe->aiRowLogEst[0]);",
          "2676:               pTerm->truthProb = pNew->nOut - pProbe->aiRowLogEst[0];",
          "",
          "[Added Lines]",
          "2668:              && pNew->nOut+10 > pProbe->aiRowLogEst[0]",
          "2672:                 sqlite3DebugPrintf(",
          "2673:                    \"STAT4 determines term has low selectivity:\\n\");",
          "2677:               pTerm->wtFlags |= TERM_HIGHTRUTH;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4894:     if( sWLB.bldFlags2 & SQLITE_BLDF2_2NDPASS ){",
          "4895:       WHERETRACE_ALL_LOOPS(pWInfo, sWLB.pWC);",
          "4896:       WHERETRACE(0xffff,",
          "4898:       while( pWInfo->pLoops ){",
          "4899:         WhereLoop *p = pWInfo->pLoops;",
          "4900:         pWInfo->pLoops = p->pNextLoop;",
          "",
          "[Removed Lines]",
          "4897:          (\"**** Redo all loop computations due to truthProb changes ****\\n\"));",
          "",
          "[Added Lines]",
          "4899:            (\"**** Redo all loop computations due to\"",
          "4900:             \" TERM_HIGHTRUTH changes ****\\n\"));",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: #ifdef SQLITE_ENABLE_STAT4",
          "297: #else",
          "299: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "192cf36de68b1d29292dbf124e4e824fe93a6f3e",
      "candidate_info": {
        "commit_hash": "192cf36de68b1d29292dbf124e4e824fe93a6f3e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/192cf36de68b1d29292dbf124e4e824fe93a6f3e",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove an extra deflateInit2() call accidently left in check-in [f5ee30426e8876e7]\n\nFossilOrigin-Name: 953e6aa6d9ca09e549c88bc728c322fabdcef581f3b4a7763d95488dddbbd6a5",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:     int res;",
          "1000:     str.next_out = aOut;",
          "1001:     str.avail_out = nAlloc;",
          "1003:     res = deflate(&str, Z_FINISH);",
          "1004:     if( res==Z_STREAM_END ){",
          "",
          "[Removed Lines]",
          "1002:     deflateInit2(&str, 9, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eb95dac7f6482c36853a23234c5ce7af37c7beed8e3675d6a49c4d3a8307e076",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}