{
  "cve_id": "CVE-2011-1490",
  "cve_desc": "A memory leak in rsyslog before 5.7.6 was found in the way deamon processed log messages are logged when multiple rulesets were used and some output batches contained messages belonging to more than one ruleset. A local attacker could cause denial of the rsyslogd daemon service via a log message belonging to more than one ruleset",
  "repo": "rsyslog/rsyslog",
  "patch_hash": "1ef709cc97d54f74d3fdeb83788cc4b01f4c6a2a",
  "patch_info": {
    "commit_hash": "1ef709cc97d54f74d3fdeb83788cc4b01f4c6a2a",
    "repo": "rsyslog/rsyslog",
    "commit_url": "https://github.com/rsyslog/rsyslog/commit/1ef709cc97d54f74d3fdeb83788cc4b01f4c6a2a",
    "files": [
      "ChangeLog",
      "runtime/batch.h",
      "runtime/ruleset.c"
    ],
    "message": "bugfix: fixed a memory leak and potential abort condition\n\nthis could happen if multiple rulesets were used and some output batches\ncontained messages belonging to more than one ruleset.\nfixes: http://bugzilla.adiscon.com/show_bug.cgi?id=226\nfixes: http://bugzilla.adiscon.com/show_bug.cgi?id=218",
    "before_after_code_files": [
      "runtime/batch.h||runtime/batch.h",
      "runtime/ruleset.c||runtime/ruleset.c"
    ]
  },
  "patch_diff": {
    "runtime/batch.h||runtime/batch.h": [
      "File: runtime/batch.h -> runtime/batch.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "141: static inline void",
      "142: batchCopyElem(batch_obj_t *pDest, batch_obj_t *pSrc) {",
      "144: }",
      "",
      "[Removed Lines]",
      "143:  memcpy(pDest, pSrc, sizeof(batch_obj_t));",
      "",
      "[Added Lines]",
      "146:  memset(pDest, 0, sizeof(batch_obj_t));",
      "147:  pDest->pUsrp = pSrc->pUsrp;",
      "148:  pDest->state = pSrc->state;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171: static inline rsRetVal",
      "172: batchInit(batch_t *pBatch, int maxElem) {",
      "173:  DEFiRet;",
      "174:  pBatch->maxElem = maxElem;",
      "175:  CHKmalloc(pBatch->pElem = calloc((size_t)maxElem, sizeof(batch_obj_t)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "179:  pBatch->iDoneUpTo = 0;",
      "",
      "---------------"
    ],
    "runtime/ruleset.c||runtime/ruleset.c": [
      "File: runtime/ruleset.c -> runtime/ruleset.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "171:  int i;",
      "174:  DEFiRet;",
      "181:   for(iStart = 0 ; iStart < pBatch->nElem && pBatch->pElem[iStart].state == BATCH_STATE_DISC ; ++iStart)",
      "184:   if(iStart == pBatch->nElem)",
      "188:   currRuleset = batchElemGetRuleset(pBatch, iStart);",
      "189:   iNew = 0;",
      "190:   for(i = iStart ; i < pBatch->nElem ; ++i) {",
      "191:    if(batchElemGetRuleset(pBatch, i) == currRuleset) {",
      "194:     pBatch->pElem[i].state = BATCH_STATE_DISC;",
      "195:    }",
      "196:   }",
      "198:   batchSetSingleRuleset(&snglRuleBatch, 1);",
      "200:   processBatch(&snglRuleBatch);",
      "204: finalize_it:",
      "205:  RETiRet;",
      "",
      "[Removed Lines]",
      "176:  CHKiRet(batchInit(&snglRuleBatch, pBatch->nElem));",
      "177:  snglRuleBatch.pbShutdownImmediate = pBatch->pbShutdownImmediate;",
      "192:     batchCopyElem(&(snglRuleBatch.pElem[iNew++]), &(pBatch->pElem[i]));",
      "201:  }",
      "202:  batchFree(&snglRuleBatch);",
      "",
      "[Added Lines]",
      "177:  do {",
      "178:   bHaveUnprocessed = 0;",
      "186:   CHKiRet(batchInit(&snglRuleBatch, pBatch->nElem));",
      "187:   snglRuleBatch.pbShutdownImmediate = pBatch->pbShutdownImmediate;",
      "193:     snglRuleBatch.pElem[iNew].pUsrp = pBatch->pElem[i].pUsrp;",
      "194:     snglRuleBatch.pElem[iNew].state = pBatch->pElem[i].state;",
      "195:     ++iNew;",
      "198:    } else {",
      "199:     bHaveUnprocessed = 1;",
      "206:   batchFree(&snglRuleBatch);",
      "207:  } while(bHaveUnprocessed == 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dbf181c3d34570a450430a6616f1d1a5ce0a242c",
      "candidate_info": {
        "commit_hash": "dbf181c3d34570a450430a6616f1d1a5ce0a242c",
        "repo": "rsyslog/rsyslog",
        "commit_url": "https://github.com/rsyslog/rsyslog/commit/dbf181c3d34570a450430a6616f1d1a5ce0a242c",
        "files": [
          "ChangeLog",
          "runtime/batch.h",
          "runtime/ruleset.c"
        ],
        "message": "bugfix: fixed a memory leak and potential abort condition\n\nthis could happen if multiple rulesets were used and some output batches\ncontained messages belonging to more than one ruleset.\nfixes: http://bugzilla.adiscon.com/show_bug.cgi?id=226\nfixes: http://bugzilla.adiscon.com/show_bug.cgi?id=218",
        "before_after_code_files": [
          "runtime/batch.h||runtime/batch.h",
          "runtime/ruleset.c||runtime/ruleset.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "runtime/batch.h||runtime/batch.h",
            "runtime/ruleset.c||runtime/ruleset.c"
          ],
          "candidate": [
            "runtime/batch.h||runtime/batch.h",
            "runtime/ruleset.c||runtime/ruleset.c"
          ]
        }
      },
      "candidate_diff": {
        "runtime/batch.h||runtime/batch.h": [
          "File: runtime/batch.h -> runtime/batch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: static inline void",
          "142: batchCopyElem(batch_obj_t *pDest, batch_obj_t *pSrc) {",
          "144: }",
          "",
          "[Removed Lines]",
          "143:  memcpy(pDest, pSrc, sizeof(batch_obj_t));",
          "",
          "[Added Lines]",
          "146:  memset(pDest, 0, sizeof(batch_obj_t));",
          "147:  pDest->pUsrp = pSrc->pUsrp;",
          "148:  pDest->state = pSrc->state;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171: static inline rsRetVal",
          "172: batchInit(batch_t *pBatch, int maxElem) {",
          "173:  DEFiRet;",
          "174:  pBatch->maxElem = maxElem;",
          "175:  CHKmalloc(pBatch->pElem = calloc((size_t)maxElem, sizeof(batch_obj_t)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:  pBatch->iDoneUpTo = 0;",
          "",
          "---------------"
        ],
        "runtime/ruleset.c||runtime/ruleset.c": [
          "File: runtime/ruleset.c -> runtime/ruleset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:  int i;",
          "174:  DEFiRet;",
          "181:   for(iStart = 0 ; iStart < pBatch->nElem && pBatch->pElem[iStart].state == BATCH_STATE_DISC ; ++iStart)",
          "184:   if(iStart == pBatch->nElem)",
          "188:   currRuleset = batchElemGetRuleset(pBatch, iStart);",
          "189:   iNew = 0;",
          "190:   for(i = iStart ; i < pBatch->nElem ; ++i) {",
          "191:    if(batchElemGetRuleset(pBatch, i) == currRuleset) {",
          "194:     pBatch->pElem[i].state = BATCH_STATE_DISC;",
          "195:    }",
          "196:   }",
          "198:   batchSetSingleRuleset(&snglRuleBatch, 1);",
          "200:   processBatch(&snglRuleBatch);",
          "204: finalize_it:",
          "205:  RETiRet;",
          "",
          "[Removed Lines]",
          "176:  CHKiRet(batchInit(&snglRuleBatch, pBatch->nElem));",
          "177:  snglRuleBatch.pbShutdownImmediate = pBatch->pbShutdownImmediate;",
          "192:     batchCopyElem(&(snglRuleBatch.pElem[iNew++]), &(pBatch->pElem[i]));",
          "201:  }",
          "202:  batchFree(&snglRuleBatch);",
          "",
          "[Added Lines]",
          "177:  do {",
          "178:   bHaveUnprocessed = 0;",
          "186:   CHKiRet(batchInit(&snglRuleBatch, pBatch->nElem));",
          "187:   snglRuleBatch.pbShutdownImmediate = pBatch->pbShutdownImmediate;",
          "193:     snglRuleBatch.pElem[iNew].pUsrp = pBatch->pElem[i].pUsrp;",
          "194:     snglRuleBatch.pElem[iNew].state = pBatch->pElem[i].state;",
          "195:     ++iNew;",
          "198:    } else {",
          "199:     bHaveUnprocessed = 1;",
          "206:   batchFree(&snglRuleBatch);",
          "207:  } while(bHaveUnprocessed == 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f48128f34a17aae7e7b9405fe32b396db45443ca",
      "candidate_info": {
        "commit_hash": "f48128f34a17aae7e7b9405fe32b396db45443ca",
        "repo": "rsyslog/rsyslog",
        "commit_url": "https://github.com/rsyslog/rsyslog/commit/f48128f34a17aae7e7b9405fe32b396db45443ca",
        "files": [
          "action.c",
          "action.h",
          "runtime/nspoll.c",
          "runtime/queue.c",
          "runtime/rule.c",
          "runtime/ruleset.c",
          "runtime/stream.c",
          "tools/smfile.c",
          "tools/smfwd.c",
          "tools/smtradfile.c",
          "tools/smtradfwd.c"
        ],
        "message": "fixed a couple of regressions\n\nby implementing some code that was missing so far ;) as well as\nfinding some real bugs. I also did some general cleanup, removing\ndebug strings and such. This code should be fairly OK to use, except\nwhen \"exec only when previous action was suspended\" is used -- this is\nNOT yet re-implemented in the tuned engine.",
        "before_after_code_files": [
          "action.c||action.c",
          "action.h||action.h",
          "runtime/nspoll.c||runtime/nspoll.c",
          "runtime/queue.c||runtime/queue.c",
          "runtime/rule.c||runtime/rule.c",
          "runtime/ruleset.c||runtime/ruleset.c",
          "runtime/stream.c||runtime/stream.c",
          "tools/smfile.c||tools/smfile.c",
          "tools/smfwd.c||tools/smfwd.c",
          "tools/smtradfile.c||tools/smtradfile.c",
          "tools/smtradfwd.c||tools/smtradfwd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/ruleset.c||runtime/ruleset.c"
          ],
          "candidate": [
            "runtime/ruleset.c||runtime/ruleset.c"
          ]
        }
      },
      "candidate_diff": {
        "action.c||action.c": [
          "File: action.c -> action.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: static rsRetVal processBatchMain(action_t *pAction, batch_t *pBatch, int*);",
          "",
          "[Removed Lines]",
          "55: static rsRetVal actionCallAction(action_t *pAction, msg_t *pMsg);",
          "56: static rsRetVal doSubmitToActionQ(action_t *pAction, msg_t *pMsg);",
          "57: static rsRetVal doSubmitToActionQNotAllMark(action_t *pAction, msg_t *pMsg);",
          "",
          "[Added Lines]",
          "55: static rsRetVal doSubmitToActionQComplexBatch(action_t *pAction, batch_t *pBatch);",
          "56: static rsRetVal doSubmitToActionQNotAllMarkBatch(action_t *pAction, batch_t *pBatch);",
          "57: static rsRetVal doSubmitToActionQBatch(action_t *pAction, batch_t *pBatch);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:      pThis->iExecEveryNthOccur, pThis->f_ReduceRepeated,",
          "273:      pThis->iSecsExecOnceInterval",
          "274:      );",
          "276:  } else if(pThis->bWriteAllMarkMsgs == FALSE) {",
          "279:  } else {",
          "282:  }",
          "",
          "[Removed Lines]",
          "275:   pThis->submitToActQ = actionCallAction;",
          "278:   pThis->submitToActQ = doSubmitToActionQNotAllMark;",
          "281:   pThis->submitToActQ = doSubmitToActionQ;",
          "",
          "[Added Lines]",
          "274:   pThis->submitToActQ = doSubmitToActionQComplexBatch;",
          "277:   pThis->submitToActQ = doSubmitToActionQNotAllMarkBatch;",
          "280:   pThis->submitToActQ = doSubmitToActionQBatch;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "635:  }",
          "636:  dbgprintf(\"\\tState: %s\\n\", getActStateName(pThis));",
          "637:  dbgprintf(\"\\tExec only when previous is suspended: %d\\n\", pThis->bExecWhenPrevSusp);",
          "639:    sz = \"slow, but feature-rich\";",
          "641:    sz = \"fast, but supports partial mark messages\";",
          "643:    sz = \"firehose (fastest)\";",
          "644:  } else {",
          "645:    sz = \"unknown (need to update debug display?)\";",
          "",
          "[Removed Lines]",
          "638:  if(pThis->submitToActQ == actionCallAction) {",
          "640:  } else if(pThis->submitToActQ == doSubmitToActionQNotAllMark) {",
          "642:  } else if(pThis->submitToActQ == doSubmitToActionQ) {",
          "",
          "[Added Lines]",
          "637:  if(pThis->submitToActQ == doSubmitToActionQComplexBatch) {",
          "639:  } else if(pThis->submitToActQ == doSubmitToActionQNotAllMarkBatch) {",
          "641:  } else if(pThis->submitToActQ == doSubmitToActionQBatch) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "880:  assert(pBatch != NULL);",
          "881:  assert(pnElem != NULL);",
          "885:  iElemProcessed = 0;",
          "886:  iCommittedUpTo = i;",
          "",
          "[Removed Lines]",
          "883: dbgprintf(\"ZZZ1: tryDoAction, nElem %d, iDoneUpto %d\\n\", *pnElem, pBatch->iDoneUpTo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "943:  rsRetVal localRet;",
          "944:  DEFiRet;",
          "947:  assert(pBatch != NULL);",
          "949:  bDone = 0;",
          "",
          "[Removed Lines]",
          "946: dbgprintf(\"ZZZ1: submitBatch, nElem %d\\n\", nElem);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1032:  DEFiRet;",
          "1034:  assert(pBatch != NULL);",
          "1036:  CHKiRet(submitBatch(pAction, pBatch, pBatch->nElem));",
          "1037:  iRet = finishBatch(pAction, pBatch);",
          "",
          "[Removed Lines]",
          "1035: dbgprintf(\"ZZZ1: processAction\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1055:  assert(pBatch != NULL);",
          "1058:  pbShutdownImmdtSave = pBatch->pbShutdownImmediate;",
          "1059:  pBatch->pbShutdownImmediate = pbShutdownImmediate;",
          "1060:  pAction->pbShutdownImmediate = pBatch->pbShutdownImmediate;",
          "1061:  CHKiRet(prepareBatch(pAction, pBatch));",
          "",
          "[Removed Lines]",
          "1057: dbgprintf(\"ZZZ1: processBatchMain\\n\");",
          "1063: dbgprintf(\"ZZZ1: processBatchMain\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1070:  pthread_cleanup_push(mutexCancelCleanup, &pAction->mutActExec);",
          "1072:  iRet = processAction(pAction, pBatch);",
          "",
          "[Removed Lines]",
          "1075:    int i;",
          "1076:   for(i = 0 ; i < batchNumMsgs(pBatch) ; ++i) {",
          "1077: dbgprintf(\"ZZZ: after processBatchMain item %d: filter %d, state %d\\n\", i, pBatch->pElem[i].bFilterOK, pBatch->pElem[i].state);",
          "1078:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1277: doActionCallAction(action_t *pAction, msg_t *pMsg)",
          "1278: {",
          "1279:  DEFiRet;",
          "",
          "[Removed Lines]",
          "1276: static rsRetVal",
          "",
          "[Added Lines]",
          "1263: static inline rsRetVal",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1328:  RETiRet;",
          "1329: }",
          "1339: {",
          "1340:  DEFiRet;",
          "1359:  if(pAction->pQueue->qType == QUEUETYPE_DIRECT)",
          "1360:   iRet = qqueueEnqObjDirect(pAction->pQueue, (void*) MsgAddRef(pMsg));",
          "1361:  else",
          "1362:   iRet = qqueueEnqObj(pAction->pQueue, pMsg->flowCtlType, (void*) MsgAddRef(pMsg));",
          "1366:  RETiRet;",
          "1367: }",
          "1375: static rsRetVal",
          "1377: {",
          "1378:  DEFiRet;",
          "1386:  RETiRet;",
          "1387: }",
          "1397: doSubmitToActionQBatch(action_t *pAction, batch_t *pBatch)",
          "1398: {",
          "1399:  int i;",
          "",
          "[Removed Lines]",
          "1337: static rsRetVal",
          "1338: doSubmitToActionQNotAllMark(action_t *pAction, msg_t *pMsg)",
          "1341:  time_t now;",
          "1342:  time_t lastAct;",
          "1344:  if(pMsg->msgFlags & MARK) {",
          "1349:   do {",
          "1350:    lastAct = pAction->f_time;",
          "1351:    if((now - lastAct) <  MarkInterval / 2) {",
          "1352:     DBGPRINTF(\"file was recently written, ignoring mark message\\n\");",
          "1353:     ABORT_FINALIZE(RS_RET_OK);",
          "1354:    }",
          "1355:   } while(ATOMIC_CAS(&pAction->f_time, lastAct, pMsg->ttGenTime, ADDME) == 0);",
          "1356:  }",
          "1358:  DBGPRINTF(\"Called action, logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1365: finalize_it:",
          "1376: doSubmitToActionQ(action_t *pAction, msg_t *pMsg)",
          "1380:  DBGPRINTF(\"Called action, logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1381:  if(pAction->pQueue->qType == QUEUETYPE_DIRECT)",
          "1382:   iRet = qqueueEnqObjDirect(pAction->pQueue, (void*) MsgAddRef(pMsg));",
          "1383:  else",
          "1384:   iRet = qqueueEnqObj(pAction->pQueue, pMsg->flowCtlType, (void*) MsgAddRef(pMsg));",
          "1396: rsRetVal",
          "",
          "[Added Lines]",
          "1323: static inline rsRetVal",
          "1324: doSubmitToActionQ(action_t *pAction, msg_t *pMsg)",
          "1347: doSubmitToActionQNotAllMarkBatch(action_t *pAction, batch_t *pBatch)",
          "1349:  time_t now = 0;",
          "1350:  time_t lastAct;",
          "1351:  int i;",
          "1352:  int bProcessMarkMsgs;",
          "1353:  int bModifiedFilter;",
          "1354:  sbool FilterSave[128];",
          "1355:  sbool *pFilterSave;",
          "1358:  if(batchNumMsgs(pBatch) <= (int) (sizeof(FilterSave)/sizeof(sbool))) {",
          "1359:   pFilterSave = FilterSave;",
          "1360:  } else {",
          "1361:   CHKmalloc(pFilterSave = malloc(batchNumMsgs(pBatch) * sizeof(sbool)));",
          "1362:  }",
          "1364:  bModifiedFilter = 0;",
          "1365:  for(i = 0 ; i < batchNumMsgs(pBatch) ; ++i) {",
          "1366:   pFilterSave[i] = pBatch->pElem[i].bFilterOK;",
          "1367:   if(((msg_t*)(pBatch->pElem[i].pUsrp))->msgFlags & MARK) {",
          "1369:    if(now == 0) {",
          "1374:     do {",
          "1375:      lastAct = pAction->f_time;",
          "1376:      if((now - lastAct) <  MarkInterval / 2) {",
          "1377:       DBGPRINTF(\"action was recently called, ignoring mark message\\n\");",
          "1378:       bProcessMarkMsgs = 0;",
          "1379:      } else {",
          "1380:       bProcessMarkMsgs = 1;",
          "1381:      }",
          "1382:     } while(ATOMIC_CAS(&pAction->f_time, lastAct, ((msg_t*)(pBatch->pElem[i].pUsrp))->ttGenTime, ADDME) == 0);",
          "1383:    }",
          "1384:    if(bProcessMarkMsgs) {",
          "1385:     pBatch->pElem[i].bFilterOK = 0;",
          "1386:     bModifiedFilter = 1;",
          "1387:    }",
          "1388:   }",
          "1389:  }",
          "1391:  DBGPRINTF(\"Called action(NotAllMark), logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1393:  iRet = doSubmitToActionQBatch(pAction, pBatch);",
          "1395:  if(bModifiedFilter) {",
          "1397:   for(i = 0 ; i < batchNumMsgs(pBatch) ; ++i) {",
          "1398:    pBatch->pElem[i].bFilterOK = pFilterSave[i];",
          "1399:   }",
          "1400:  }",
          "1402: finalize_it:",
          "1403:  if(pFilterSave != FilterSave)",
          "1404:   free(pFilterSave);",
          "1415: static rsRetVal",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1408:   for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "1409:    if(pBatch->pElem[i].bFilterOK) {",
          "1412:    }",
          "1413:   }",
          "1420:   }",
          "1422:  }",
          "1424:  RETiRet;",
          "1425: }",
          "1431: #pragma GCC diagnostic ignored \"-Wempty-body\"",
          "1432: static rsRetVal",
          "1434: {",
          "1435:  DEFiRet;",
          "1440:  LockObj(pAction);",
          "1441:  pthread_cleanup_push(mutexCancelCleanup, pAction->Sync_mut);",
          "1443:  UnlockObj(pAction);",
          "",
          "[Removed Lines]",
          "1410: dbgprintf(\"ZZZ: submitToActQ item %d:%s\\n\", i, ((msg_t*)(pBatch->pElem[i].pUsrp))->szRawMsg+15);",
          "1411:     pAction->submitToActQ(pAction, (msg_t*)(pBatch->pElem[i].pUsrp));",
          "1416:   for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "1417:    if(pBatch->pElem[i].bFilterOK) {",
          "1418: dbgprintf(\"ZZZ: batch state after processing item %d: %d\\n\", i, pBatch->pElem[i].state);",
          "1419:    }",
          "1433: actionCallAction(action_t *pAction, msg_t *pMsg)",
          "1437:  ISOBJ_TYPE_assert(pMsg, msg);",
          "1438:  ASSERT(pAction != NULL);",
          "1442:  iRet = doActionCallAction(pAction, pMsg);",
          "",
          "[Added Lines]",
          "1429:     doSubmitToActionQ(pAction, (msg_t*)(pBatch->pElem[i].pUsrp));",
          "1432:  }",
          "1434:  RETiRet;",
          "1435: }",
          "1443: static inline rsRetVal",
          "1444: helperSubmitToActionQComplexBatch(action_t *pAction, batch_t *pBatch)",
          "1445: {",
          "1446:  int i;",
          "1447:  DEFiRet;",
          "1449:  DBGPRINTF(\"Called action(complex case), logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1450:  for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "1451:   if(pBatch->pElem[i].bFilterOK) {",
          "1452:    doActionCallAction(pAction, (msg_t*)(pBatch->pElem[i].pUsrp));",
          "1464: doSubmitToActionQComplexBatch(action_t *pAction, batch_t *pBatch)",
          "1470:  iRet = helperSubmitToActionQComplexBatch(pAction, pBatch);",
          "",
          "---------------"
        ],
        "action.h||action.h": [
          "File: action.h -> action.h"
        ],
        "runtime/nspoll.c||runtime/nspoll.c": [
          "File: runtime/nspoll.c -> runtime/nspoll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  CHKiRet(obj.UseObj(__FILE__, szDrvrName+2, DONT_LOAD_LIB, (void*) &pThis->Drvr));",
          "85: finalize_it:",
          "",
          "[Removed Lines]",
          "82: RUNLOG_VAR(\"%s\", szDrvrName+2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: {",
          "121:  DEFiRet;",
          "122:  ISOBJ_TYPE_assert(pThis, nspoll);",
          "124:  CHKiRet(loadDrvr(pThis));",
          "125:  CHKiRet(pThis->Drvr.Construct(&pThis->pDrvrData));",
          "126: finalize_it:",
          "128:  RETiRet;",
          "129: }",
          "",
          "[Removed Lines]",
          "123: RUNLOG_STR(\"trying to load epoll driver\\n\");",
          "127: dbgprintf(\"XXX: done trying to load epoll driver, state %d\\n\", iRet);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "runtime/queue.c||runtime/queue.c": [
          "File: runtime/queue.c -> runtime/queue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:  batchObj.state = BATCH_STATE_RDY;",
          "856:  batchObj.pUsrp = (obj_t*) pUsr;",
          "858:  singleBatch.pElem = &batchObj;",
          "859:  iRet = pThis->pConsumer(pThis->pUsr, &singleBatch, &pThis->bShutdownImmediate);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:  memset(&batchObj, 0, sizeof(batch_obj_t));",
          "856:  memset(&singleBatch, 0, sizeof(batch_t));",
          "859:  batchObj.bFilterOK = 1;",
          "",
          "---------------"
        ],
        "runtime/rule.c||runtime/rule.c": [
          "File: runtime/rule.c -> runtime/rule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  assert(pAction != NULL);",
          "104: #if 0 // TODO: move this to the action object",
          "105:  if((pAction->bExecWhenPrevSusp  == 1) && (pDoActData->bPrevWasSuspended == 0)) {",
          "106:   dbgprintf(\"not calling action because the previous one is not suspended\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #warning execonly when prev suspended functionality missing!",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:  }",
          "109: #endif",
          "125: #if 0 // TODO: this must be done inside the action as well!",
          "126:  if(iRetMod == RS_RET_DISCARDMSG) {",
          "127:   ABORT_FINALIZE(RS_RET_DISCARDMSG);",
          "",
          "[Removed Lines]",
          "111: #if 1",
          "113:  iRetMod = doSubmitToActionQBatch(pAction, (batch_t*) pParam);",
          "114: #else",
          "116:  int i;",
          "117:  for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "118: dbgprintf(\"ZZZ: inside processBatchDoActions, processing elem %d/%d\\n\", i, batchNumMsgs(pBatch));",
          "119:   if(pBatch->pElem[i].bFilterOK) {",
          "120:    iRetMod = pAction->submitToActQ(pAction, (msg_t*)(pBatch->pElem[i].pUsrp));",
          "121:   }",
          "122:  }",
          "123: #endif",
          "",
          "[Added Lines]",
          "112:  iRetMod = pAction->submitToActQ(pAction, pBatch);",
          "",
          "---------------"
        ],
        "runtime/ruleset.c||runtime/ruleset.c": [
          "File: runtime/ruleset.c -> runtime/ruleset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:  CHKiRet(batchInit(&snglRuleBatch, pBatch->nElem));",
          "176:  snglRuleBatch.pbShutdownImmediate = pBatch->pbShutdownImmediate;",
          "181:   for(iStart = 0 ; iStart < pBatch->nElem && pBatch->pElem[iStart].state == BATCH_STATE_DISC ; ++iStart)",
          "",
          "[Removed Lines]",
          "178: dbgprintf(\"ZZZ: multi-ruleset batch of %d elements must be processed\\n\", pBatch->nElem);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   iNew = 0;",
          "190:   for(i = iStart ; i < pBatch->nElem ; ++i) {",
          "191:    if(batchElemGetRuleset(pBatch, i) == currRuleset) {",
          "193:     batchCopyElem(&(snglRuleBatch.pElem[iNew++]), &(pBatch->pElem[i]));",
          "195:     pBatch->pElem[i].state = BATCH_STATE_DISC;",
          "",
          "[Removed Lines]",
          "192: dbgprintf(\"ZZZ: proc elem %d:'%s'\\n\", i, ((msg_t*)(pBatch->pElem[i].pUsrp))->szRawMsg+15);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:   batchSetSingleRuleset(&snglRuleBatch, 1);",
          "201:   processBatch(&snglRuleBatch);",
          "211:  }",
          "212:  batchFree(&snglRuleBatch);",
          "",
          "[Removed Lines]",
          "203: #if 0",
          "204: for(i = iStart ; i < pBatch->nElem ; ++i) {",
          "205:  dbgprintf(\"ZZZ: after partial execution item %d state %d\\n\", i, pBatch->pElem[i].state);",
          "206: }",
          "210: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "runtime/stream.c||runtime/stream.c": [
          "File: runtime/stream.c -> runtime/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:   d_pthread_mutex_lock(&pThis->mut);",
          "941:   while(pThis->iCnt == 0) {",
          "942:    if(pThis->bStopWriter) {",
          "943:     pthread_cond_broadcast(&pThis->isEmpty);",
          "",
          "[Removed Lines]",
          "940: dbgprintf(\"XXX: asyncWriterThread iterating %s\\n\", pThis->pszFName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:    bTimedOut = 0;",
          "954:    timeoutComp(&t, pThis->iFlushInterval * 2000); /* *1000 millisconds */ // TODO: check the 2000?!?",
          "955:    if(pThis->bDoTimedWait) {",
          "957:     if(pthread_cond_timedwait(&pThis->notEmpty, &pThis->mut, &t) != 0) {",
          "958:      int err = errno;",
          "959:      if(err == ETIMEDOUT) {",
          "",
          "[Removed Lines]",
          "956: dbgprintf(\"asyncWriter thread going to timeout sleep\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "967:      }",
          "968:     }",
          "969:    } else {",
          "971:     d_pthread_cond_wait(&pThis->notEmpty, &pThis->mut);",
          "972:    }",
          "974:   }",
          "978:   iDeq = pThis->iDeq++ % STREAM_ASYNC_NUMBUFS;",
          "980:   doWriteInternal(pThis, pThis->asyncBuf[iDeq].pBuf, pThis->asyncBuf[iDeq].lenBuf);",
          "",
          "[Removed Lines]",
          "970: dbgprintf(\"asyncWriter thread going to eternal sleep\\n\");",
          "973: dbgprintf(\"asyncWriter woke up\\n\");",
          "979: dbgprintf(\"asyncWriter writes data\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/smfile.c||tools/smfile.c": [
          "File: tools/smfile.c -> tools/smfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  size_t lenMSG;",
          "73:  size_t lenTotal;",
          "74: CODESTARTstrgen",
          "77:  pTimeStamp = (uchar*) getTimeReported(pMsg, tplFmtRFC3339Date);",
          "78:  lenTimeStamp = ustrlen(pTimeStamp);",
          "",
          "[Removed Lines]",
          "75:  DBGPRINTF(\"XXX: smfile strgen called\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/smfwd.c||tools/smfwd.c": [
          "File: tools/smfwd.c -> tools/smfwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  size_t lenMSG;",
          "72:  size_t lenTotal;",
          "73: CODESTARTstrgen",
          "76:  pPRI = getPRI(pMsg);",
          "77:  lenPRI = strlen(pPRI);",
          "",
          "[Removed Lines]",
          "74:  DBGPRINTF(\"XXX: smfwd strgen called\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/smtradfile.c||tools/smtradfile.c": [
          "File: tools/smtradfile.c -> tools/smtradfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  size_t lenMSG;",
          "69:  size_t lenTotal;",
          "70: CODESTARTstrgen",
          "73:  pTimeStamp = (uchar*) getTimeReported(pMsg, tplFmtRFC3164Date);",
          "74:  pHOSTNAME = (uchar*) getHOSTNAME(pMsg);",
          "",
          "[Removed Lines]",
          "71:  DBGPRINTF(\"XXX: smtradfile strgen called\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/smtradfwd.c||tools/smtradfwd.c": [
          "File: tools/smtradfwd.c -> tools/smtradfwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  size_t lenMSG;",
          "71:  size_t lenTotal;",
          "72: CODESTARTstrgen",
          "75:  pPRI = getPRI(pMsg);",
          "76:  lenPRI = strlen(pPRI);",
          "",
          "[Removed Lines]",
          "73:  DBGPRINTF(\"XXX: smtradfwd strgen called\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "802f6d8a8f39e5ba578e0183e4500bef8e3a198c",
      "candidate_info": {
        "commit_hash": "802f6d8a8f39e5ba578e0183e4500bef8e3a198c",
        "repo": "rsyslog/rsyslog",
        "commit_url": "https://github.com/rsyslog/rsyslog/commit/802f6d8a8f39e5ba578e0183e4500bef8e3a198c",
        "files": [
          "action.c",
          "doc/msgflow.txt",
          "runtime/batch.h",
          "runtime/queue.c",
          "runtime/queue.h",
          "runtime/rule.c",
          "runtime/ruleset.c",
          "runtime/wti.c",
          "tests/Makefile.am",
          "tests/diag.sh",
          "tests/tcpflood.c",
          "tools/syslogd.c"
        ],
        "message": "milestone(BUGGY): batch now pushed down to action\n\nat least in important cases (not for non-direct action queues and some\nother minor things). This version is definitely buggy, but may be tried\nwith success on a non-production system. I will continue to work on the\ncorrectness, but needed to commit now to get a baseline.",
        "before_after_code_files": [
          "action.c||action.c",
          "runtime/batch.h||runtime/batch.h",
          "runtime/queue.c||runtime/queue.c",
          "runtime/queue.h||runtime/queue.h",
          "runtime/rule.c||runtime/rule.c",
          "runtime/ruleset.c||runtime/ruleset.c",
          "runtime/wti.c||runtime/wti.c",
          "tests/Makefile.am||tests/Makefile.am",
          "tests/diag.sh||tests/diag.sh",
          "tests/tcpflood.c||tests/tcpflood.c",
          "tools/syslogd.c||tools/syslogd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/batch.h||runtime/batch.h",
            "runtime/ruleset.c||runtime/ruleset.c"
          ],
          "candidate": [
            "runtime/batch.h||runtime/batch.h",
            "runtime/ruleset.c||runtime/ruleset.c"
          ]
        }
      },
      "candidate_diff": {
        "action.c||action.c": [
          "File: action.c -> action.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "589: {",
          "590:  DEFiRet;",
          "",
          "[Removed Lines]",
          "588: static rsRetVal actionPrepare(action_t *pThis)",
          "",
          "[Added Lines]",
          "588: static inline rsRetVal actionPrepare(action_t *pThis)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "728: rsRetVal",
          "730: {",
          "733:  int i;",
          "734:  DEFiRet;",
          "736:  ASSERT(pThis != NULL);",
          "737:  ISOBJ_TYPE_assert(pMsg, msg);",
          "744:  DBGPRINTF(\"entering actionCalldoAction(), state: %s\\n\", getActStateName(pThis));",
          "747:  pThis->bHadAutoCommit = 0;",
          "748: #if 1",
          "754: #else",
          "",
          "[Removed Lines]",
          "729: actionCallDoAction(action_t *pThis, msg_t *pMsg)",
          "731:  uchar *ppMsgs[10];",
          "732:  size_t lenMsgs[10];",
          "739:  for(i = 0 ; i < 10 ; ++ i) {",
          "740:   ppMsgs[i] = NULL;",
          "741:   lenMsgs[i] = 0;",
          "742:  }",
          "745:  CHKiRet(prepareDoActionParams(pThis, pMsg, ppMsgs, lenMsgs));",
          "751:  iRet = pThis->pMod->mod.om.doAction(ppMsgs, pMsg->msgFlags, pThis->pModData);",
          "",
          "[Added Lines]",
          "728: actionCallDoAction(action_t *pThis, msg_t *pMsg, void *actParams)",
          "744:  iRet = pThis->pMod->mod.om.doAction(actParams, pMsg->msgFlags, pThis->pModData);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "784: finalize_it:",
          "786:  switch(pThis->eParamPassing) {",
          "787:  case ACT_STRING_PASSING:",
          "788:   for(i = 0 ; i < 10 ; ++i)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779: #if 0 // THIS NEEDS TO BE DONE TO THE BATCH!",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "796:   break;",
          "797:  }",
          "800:  RETiRet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "792: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "810: {",
          "811:  DEFiRet;",
          "",
          "[Removed Lines]",
          "808: rsRetVal",
          "809: actionProcessMessage(action_t *pThis, msg_t *pMsg)",
          "",
          "[Added Lines]",
          "803: static inline rsRetVal",
          "804: actionProcessMessage(action_t *pThis, msg_t *pMsg, void *actParams)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "816:  CHKiRet(actionPrepare(pThis));",
          "817:  if(pThis->eState == ACT_STATE_ITX)",
          "820:  iRet = getReturnCode(pThis);",
          "821: finalize_it:",
          "",
          "[Removed Lines]",
          "818:   CHKiRet(actionCallDoAction(pThis, pMsg));",
          "",
          "[Added Lines]",
          "813:   CHKiRet(actionCallDoAction(pThis, pMsg, actParams));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "836:  ASSERT(pThis != NULL);",
          "841:  CHKiRet(actionPrepare(pThis));",
          "842:  if(pThis->eState == ACT_STATE_ITX) {",
          "",
          "[Removed Lines]",
          "838:  if(pThis->eState == ACT_STATE_RDY)",
          "",
          "[Added Lines]",
          "833: dbgprintf(\"ZZZ: finishBatch called, eState %d\\n\", pThis->eState);",
          "834:  if(pThis->eState == ACT_STATE_RDY) {",
          "837:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "846:     actionCommitted(pThis);",
          "848:     for(i = 0 ; i < pBatch->nElem ; ++i) {",
          "850:     }",
          "851:     break;",
          "852:    case RS_RET_SUSPENDED:",
          "",
          "[Removed Lines]",
          "849:      pBatch->pElem[i].state = BATCH_STATE_COMM;",
          "",
          "[Added Lines]",
          "847:      batchSetElemState(pBatch, i, BATCH_STATE_COMM);",
          "848: dbgprintf(\"ZZZ: finishBatch commits element %d\\n\", i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "886: {",
          "887:  int i;",
          "888:  int iElemProcessed;",
          "",
          "[Removed Lines]",
          "884: static rsRetVal",
          "885: tryDoAction(action_t *pAction, batch_t *pBatch, int *pnElem, int *pbShutdownImmediate)",
          "",
          "[Added Lines]",
          "883: static inline rsRetVal",
          "884: tryDoAction(action_t *pAction, batch_t *pBatch, int *pnElem)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "894:  assert(pBatch != NULL);",
          "895:  assert(pnElem != NULL);",
          "898:  iElemProcessed = 0;",
          "899:  iCommittedUpTo = i;",
          "901:  while(iElemProcessed <= *pnElem && i < pBatch->nElem) {",
          "903:    ABORT_FINALIZE(RS_RET_FORCE_TERM);",
          "907:    DBGPRINTF(\"action call returned %d\\n\", localRet);",
          "908:    if(localRet == RS_RET_OK) {",
          "910:     while(iCommittedUpTo <= i) {",
          "",
          "[Removed Lines]",
          "900:  pAction->pbShutdownImmediate = pbShutdownImmediate;",
          "902:   if(*pbShutdownImmediate)",
          "904:   pMsg = (msg_t*) pBatch->pElem[i].pUsrp;",
          "905:   if(pBatch->pElem[i].state != BATCH_STATE_DISC) {",
          "906:    localRet = actionProcessMessage(pAction, pMsg);",
          "",
          "[Added Lines]",
          "896: dbgprintf(\"ZZZ1: tryDoAction, nElem %d, iDoneUpto %d\\n\", *pnElem, pBatch->iDoneUpTo);",
          "901:   if(*(pBatch->pbShutdownImmediate))",
          "903: dbgprintf(\"ZZZ1: tryDoAction loop %d: filter %d, state %d\\n\", i,  pBatch->pElem[i].bFilterOK, pBatch->pElem[i].state);",
          "904:   if(pBatch->pElem[i].bFilterOK && pBatch->pElem[i].state != BATCH_STATE_DISC) {",
          "905: dbgprintf(\"ZZZ1: trying to execute\\n\");",
          "906:    pMsg = (msg_t*) pBatch->pElem[i].pUsrp;",
          "907:    localRet = actionProcessMessage(pAction, pMsg, pBatch->pElem[i].staticActParams);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "931:  }",
          "933: finalize_it:",
          "938:   pBatch->iDoneUpTo = iCommittedUpTo;",
          "939:  }",
          "",
          "[Removed Lines]",
          "934:  if(pBatch->nElem == 1 && pBatch->pElem[0].state == BATCH_STATE_DISC) {",
          "935:   iRet = RS_RET_DISCARDMSG;",
          "936:  } else if(pBatch->iDoneUpTo != iCommittedUpTo) {",
          "",
          "[Added Lines]",
          "938:  if(pBatch->iDoneUpTo != iCommittedUpTo) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "949: static rsRetVal",
          "951: {",
          "952:  int i;",
          "953:  int bDone;",
          "954:  rsRetVal localRet;",
          "955:  DEFiRet;",
          "957:  assert(pBatch != NULL);",
          "959:  bDone = 0;",
          "960:  do {",
          "962:   if(localRet == RS_RET_FORCE_TERM) {",
          "963:    ABORT_FINALIZE(RS_RET_FORCE_TERM);",
          "964:   }",
          "",
          "[Removed Lines]",
          "950: submitBatch(action_t *pAction, batch_t *pBatch, int nElem, int *pbShutdownImmediate)",
          "961:   localRet = tryDoAction(pAction, pBatch, &nElem, pbShutdownImmediate);",
          "",
          "[Added Lines]",
          "954: submitBatch(action_t *pAction, batch_t *pBatch, int nElem)",
          "961: dbgprintf(\"ZZZ1: submitBatch, nElem %d\\n\", nElem);",
          "966:   localRet = tryDoAction(pAction, pBatch, &nElem);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "972:   }",
          "974:   if(   localRet == RS_RET_OK",
          "975:      || localRet == RS_RET_PREVIOUS_COMMITTED",
          "976:      || localRet == RS_RET_DEFER_COMMIT) {",
          "977:    bDone = 1;",
          "981:   } else if(localRet == RS_RET_SUSPENDED) {",
          "983:   } else if(localRet == RS_RET_ACTION_FAILED) {",
          "985:    for(i = 0 ; i < nElem ; ++i) {",
          "987:    }",
          "988:    bDone = 1;",
          "989:   } else {",
          "990:    if(nElem == 1) {",
          "992:     bDone = 1;",
          "993:    } else {",
          "997:     bDone = 1;",
          "998:    }",
          "999:   }",
          "1003:   ABORT_FINALIZE(RS_RET_FORCE_TERM);",
          "1005: finalize_it:",
          "",
          "[Removed Lines]",
          "971:    localRet = finishBatch(pAction, pBatch); // TODO: careful, do we need the elem counter?",
          "978:   } else if(localRet == RS_RET_DISCARDMSG) {",
          "980:    bDone = 1;",
          "986:     pBatch->pElem[pBatch->iDoneUpTo++].state = BATCH_STATE_BAD;",
          "991:     pBatch->pElem[pBatch->iDoneUpTo++].state = BATCH_STATE_BAD;",
          "995:     submitBatch(pAction, pBatch, nElem / 2, pbShutdownImmediate);",
          "996:     submitBatch(pAction, pBatch, nElem - (nElem / 2), pbShutdownImmediate);",
          "1002:  if(*pbShutdownImmediate)",
          "",
          "[Added Lines]",
          "976:    localRet = finishBatch(pAction, pBatch);",
          "988: dbgprintf(\"ZZZ2: setting batch state for item %d\\n\", i);",
          "989:     batchSetElemState(pBatch, i, BATCH_STATE_BAD);",
          "994:     batchSetElemState(pBatch, i, BATCH_STATE_BAD);",
          "998:     submitBatch(pAction, pBatch, nElem / 2);",
          "999:     submitBatch(pAction, pBatch, nElem - (nElem / 2));",
          "1005:  if(*(pBatch->pbShutdownImmediate))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1007: }",
          "1015: {",
          "1016:  DEFiRet;",
          "1018:  assert(pBatch != NULL);",
          "1021:  iRet = finishBatch(pAction, pBatch);",
          "1023: finalize_it:",
          "",
          "[Removed Lines]",
          "1013: static rsRetVal",
          "1014: processAction(action_t *pAction, batch_t *pBatch, int *pbShutdownImmediate)",
          "1019:  pBatch->iDoneUpTo = 0;",
          "1020:  CHKiRet(submitBatch(pAction, pBatch, pBatch->nElem, pbShutdownImmediate));",
          "",
          "[Added Lines]",
          "1022: static inline rsRetVal",
          "1023: prepareBatch(action_t *pAction, batch_t *pBatch)",
          "1024: {",
          "1025:  int i;",
          "1026:  batch_obj_t *pElem;",
          "1027:  DEFiRet;",
          "1029:  pBatch->iDoneUpTo = 0;",
          "1030:  for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "1031:   pElem = &(pBatch->pElem[i]);",
          "1032:   if(pElem->bFilterOK && pElem->state != BATCH_STATE_DISC) {",
          "1033:    pElem->state = BATCH_STATE_RDY;",
          "1034:    prepareDoActionParams(pAction, (msg_t*) pElem->pUsrp,",
          "1035:             (uchar**) &(pElem->staticActParams), pElem->staticLenParams);",
          "1036:   }",
          "1037:  }",
          "1038:  RETiRet;",
          "1039: }",
          "1045: static inline rsRetVal",
          "1046: processAction(action_t *pAction, batch_t *pBatch)",
          "1051: dbgprintf(\"ZZZ1: processAction\\n\");",
          "1052:  CHKiRet(submitBatch(pAction, pBatch, pBatch->nElem));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1033: static rsRetVal",
          "1034: processBatchMain(action_t *pAction, batch_t *pBatch, int *pbShutdownImmediate)",
          "1035: {",
          "1036:  DEFiRet;",
          "1038:  assert(pBatch != NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:  int *pbShutdownImmdtSave;",
          "1073: dbgprintf(\"ZZZ1: processBatchMain\\n\");",
          "1074:  pbShutdownImmdtSave = pBatch->pbShutdownImmediate;",
          "1075:  pBatch->pbShutdownImmediate = pbShutdownImmediate;",
          "1076:  pAction->pbShutdownImmediate = pBatch->pbShutdownImmediate;",
          "1077:  CHKiRet(prepareBatch(pAction, pBatch));",
          "1079: dbgprintf(\"ZZZ1: processBatchMain\\n\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1045:  d_pthread_mutex_lock(&pAction->mutActExec);",
          "1046:  pthread_cleanup_push(mutexCancelCleanup, &pAction->mutActExec);",
          "1052:  RETiRet;",
          "1053: }",
          "1054: #pragma GCC diagnostic warning \"-Wempty-body\"",
          "",
          "[Removed Lines]",
          "1048:  iRet = processAction(pAction, pBatch, pbShutdownImmediate);",
          "",
          "[Added Lines]",
          "1088:  iRet = processAction(pAction, pBatch);",
          "1091:    int i;",
          "1092:   for(i = 0 ; i < batchNumMsgs(pBatch) ; ++i) {",
          "1093: dbgprintf(\"ZZZ: after processBatchMain item %d: filter %d, state %d\\n\", i, pBatch->pElem[i].bFilterOK, pBatch->pElem[i].state);",
          "1094:   }",
          "1099: finalize_it:",
          "1100:  pBatch->pbShutdownImmediate = pbShutdownImmdtSave;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1323:  }",
          "1325:  DBGPRINTF(\"Called action, logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1328: finalize_it:",
          "1329:  RETiRet;",
          "",
          "[Removed Lines]",
          "1326:  iRet = qqueueEnqObj(pAction->pQueue, pMsg->flowCtlType, (void*) MsgAddRef(pMsg));",
          "",
          "[Added Lines]",
          "1375:  if(pAction->pQueue->qType == QUEUETYPE_DIRECT)",
          "1376:   iRet = qqueueEnqObjDirect(pAction->pQueue, (void*) MsgAddRef(pMsg));",
          "1377:  else",
          "1378:   iRet = qqueueEnqObj(pAction->pQueue, pMsg->flowCtlType, (void*) MsgAddRef(pMsg));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1341:  DEFiRet;",
          "1343:  DBGPRINTF(\"Called action, logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1346:  RETiRet;",
          "1347: }",
          "",
          "[Removed Lines]",
          "1344:  iRet = qqueueEnqObj(pAction->pQueue, pMsg->flowCtlType, (void*) MsgAddRef(pMsg));",
          "",
          "[Added Lines]",
          "1397:  if(pAction->pQueue->qType == QUEUETYPE_DIRECT)",
          "1398:   iRet = qqueueEnqObjDirect(pAction->pQueue, (void*) MsgAddRef(pMsg));",
          "1399:  else",
          "1400:   iRet = qqueueEnqObj(pAction->pQueue, pMsg->flowCtlType, (void*) MsgAddRef(pMsg));",
          "1402:  RETiRet;",
          "1403: }",
          "1412: rsRetVal",
          "1413: doSubmitToActionQBatch(action_t *pAction, batch_t *pBatch)",
          "1414: {",
          "1415:  int i;",
          "1416:  DEFiRet;",
          "1418:  DBGPRINTF(\"Called action(Batch), logging to %s\\n\", module.GetStateName(pAction->pMod));",
          "1419:  if(pAction->pQueue->qType == QUEUETYPE_DIRECT)",
          "1420:   iRet = qqueueEnqObjDirectBatch(pAction->pQueue, pBatch);",
          "1421:  else {  /* in this case, we do single submits to the queue.",
          "1424:   for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "1425:    if(pBatch->pElem[i].bFilterOK) {",
          "1426: dbgprintf(\"ZZZ: submitToActQ item %d:%s\\n\", i, ((msg_t*)(pBatch->pElem[i].pUsrp))->szRawMsg+15);",
          "1427:     pAction->submitToActQ(pAction, (msg_t*)(pBatch->pElem[i].pUsrp));",
          "1428:    }",
          "1429:   }",
          "1432:   for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "1433:    if(pBatch->pElem[i].bFilterOK) {",
          "1434: dbgprintf(\"ZZZ: batch state after processing item %d: %d\\n\", i, pBatch->pElem[i].state);",
          "1435:    }",
          "1436:   }",
          "1438:  }",
          "",
          "---------------"
        ],
        "runtime/batch.h||runtime/batch.h": [
          "File: runtime/batch.h -> runtime/batch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #ifndef BATCH_H_INCLUDED",
          "27: #define BATCH_H_INCLUDED",
          "29: #include \"msg.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <string.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  pBatch->bSingleRuleset = val;",
          "93: }",
          "96: static inline ruleset_t*",
          "97: batchGetRuleset(batch_t *pBatch) {",
          "98:  return (pBatch->nElem > 0) ? ((msg_t*) pBatch->pElem[0].pUsrp)->pRuleset : NULL;",
          "99: }",
          "102: static inline int",
          "103: batchNumMsgs(batch_t *pBatch) {",
          "104:  return pBatch->nElem;",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: static inline ruleset_t*",
          "105: batchElemGetRuleset(batch_t *pBatch, int i) {",
          "106:  return ((msg_t*) pBatch->pElem[i].pUsrp)->pRuleset;",
          "107: }",
          "120: static inline void",
          "121: batchSetElemState(batch_t *pBatch, int i, batch_state_t newState) {",
          "122:  if(pBatch->pElem[i].state != BATCH_STATE_DISC)",
          "123:   pBatch->pElem[i].state = newState;",
          "124: }",
          "130: static inline int",
          "131: batchIsValidElem(batch_t *pBatch, int i) {",
          "132:  return(pBatch->pElem[i].bFilterOK && pBatch->pElem[i].state != BATCH_STATE_DISC);",
          "133: }",
          "141: static inline void",
          "142: batchCopyElem(batch_obj_t *pDest, batch_obj_t *pSrc) {",
          "143:  memcpy(pDest, pSrc, sizeof(batch_obj_t));",
          "144: }",
          "151: static inline void",
          "152: batchFree(batch_t *pBatch) {",
          "153:  int i;",
          "154:  int j;",
          "155:  for(i = 0 ; i < pBatch->maxElem ; ++i) {",
          "156:   for(j = 0 ; j < CONF_OMOD_NUMSTRINGS_BUFSIZE ; ++j) {",
          "157:    free(pBatch->pElem[i].staticActParams[j]);",
          "158:   }",
          "159:  }",
          "160:  free(pBatch->pElem);",
          "161: }",
          "168: static inline rsRetVal",
          "169: batchInit(batch_t *pBatch, int maxElem) {",
          "170:  DEFiRet;",
          "171:  pBatch->maxElem = maxElem;",
          "172:  CHKmalloc(pBatch->pElem = calloc((size_t)maxElem, sizeof(batch_obj_t)));",
          "174: finalize_it:",
          "175:  RETiRet;",
          "176: }",
          "",
          "---------------"
        ],
        "runtime/queue.c||runtime/queue.c": [
          "File: runtime/queue.c -> runtime/queue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:  RETiRet;",
          "862: }",
          "865: static rsRetVal qDelDirect(qqueue_t __attribute__((unused)) *pThis)",
          "866: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "866: rsRetVal qqueueEnqObjDirectBatch(qqueue_t *pThis, batch_t *pBatch)",
          "867: {",
          "868:  DEFiRet;",
          "870:  ASSERT(pThis != NULL);",
          "880:  iRet = pThis->pConsumer(pThis->pUsr, pBatch, &pThis->bShutdownImmediate);",
          "882:  RETiRet;",
          "883: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1364:  assert(pBatch != NULL);",
          "1366:  for(i = 0 ; i < pBatch->nElem ; ++i) {",
          "1368:   pUsr = pBatch->pElem[i].pUsrp;",
          "1369:   if(   pBatch->pElem[i].state == BATCH_STATE_RDY",
          "1370:      || pBatch->pElem[i].state == BATCH_STATE_SUB) {",
          "1371:    localRet = doEnqSingleObj(pThis, eFLOWCTL_NO_DELAY,",
          "1372:            (obj_t*)MsgAddRef((msg_t*) pUsr));",
          "1373:    ++nEnqueued;",
          "",
          "[Removed Lines]",
          "1367: dbgprintf(\"XXX: enqueueing data element %d of %d\\n\", i, pBatch->nElem);",
          "",
          "[Added Lines]",
          "1391: dbgprintf(\"XXX: DeleteProcessedBatch re-enqueue %d of %d, state %d\\n\", i, pBatch->nElem, pBatch->pElem[i].state);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1386:  iRet = DeleteBatchFromQStore(pThis, pBatch);",
          "1390:  RETiRet;",
          "1391: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1409:  pBatch->nElem = pBatch->nElemDeq = 0; /* reset batch */ // TODO: more fine init, new fields! 2010-06-14",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:   pWti->batch.pElem[nDequeued].pUsrp = pUsr;",
          "1432:   pWti->batch.pElem[nDequeued].state = BATCH_STATE_RDY;",
          "1433:   ++nDequeued;",
          "1434:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1454:   pWti->batch.pElem[nDequeued].bFilterOK = 1; // TODO: think again if we can handle that with more performance",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2303: rsRetVal",
          "2304: qqueueEnqObjDirect(qqueue_t *pThis, void *pUsr)",
          "2305: {",
          "2306:  DEFiRet;",
          "2307:  ISOBJ_TYPE_assert(pThis, qqueue);",
          "2308:  iRet = qAddDirect(pThis, pUsr);",
          "2309:  RETiRet;",
          "2310: }",
          "",
          "---------------"
        ],
        "runtime/queue.h||runtime/queue.h": [
          "File: runtime/queue.h -> runtime/queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: rsRetVal qqueueDestruct(qqueue_t **ppThis);",
          "180: rsRetVal qqueueEnqObj(qqueue_t *pThis, flowControl_t flwCtlType, void *pUsr);",
          "181: rsRetVal qqueueStart(qqueue_t *pThis);",
          "182: rsRetVal qqueueSetMaxFileSize(qqueue_t *pThis, size_t iMaxFileSize);",
          "183: rsRetVal qqueueSetFilePrefix(qqueue_t *pThis, uchar *pszPrefix, size_t iLenPrefix);",
          "184: rsRetVal qqueueConstruct(qqueue_t **ppThis, queueType_t qType, int iWorkerThreads,",
          "185:           int iMaxQueueSize, rsRetVal (*pConsumer)(void*,batch_t*, int*));",
          "186: PROTOTYPEObjClassInit(qqueue);",
          "187: PROTOTYPEpropSetMeth(qqueue, iPersistUpdCnt, int);",
          "188: PROTOTYPEpropSetMeth(qqueue, bSyncQueueFiles, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: rsRetVal qqueueEnqObjDirect(qqueue_t *pThis, void *pUsr);",
          "187: rsRetVal qqueueEnqObjDirectBatch(qqueue_t *pThis, batch_t *pBatch);",
          "",
          "---------------"
        ],
        "runtime/rule.c||runtime/rule.c": [
          "File: runtime/rule.c -> runtime/rule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:  }",
          "109: #endif",
          "114:  int i;",
          "115:  for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "117:   if(pBatch->pElem[i].bFilterOK) {",
          "118:    iRetMod = pAction->submitToActQ(pAction, (msg_t*)(pBatch->pElem[i].pUsrp));",
          "119:   }",
          "120:  }",
          "122: #if 0 // TODO: this must be done inside the action as well!",
          "123:  if(iRetMod == RS_RET_DISCARDMSG) {",
          "",
          "[Removed Lines]",
          "113: dbgprintf(\"ZZZ: inside processBatchDoActions, begin processing (nElem=%d)\\n\", batchNumMsgs(pBatch));",
          "116: dbgprintf(\"ZZZ: inside processBatchDoActions, processind elem %d/%d\\n\", i, batchNumMsgs(pBatch));",
          "",
          "[Added Lines]",
          "111: #if 1",
          "113:  iRetMod = doSubmitToActionQBatch(pAction, (batch_t*) pParam);",
          "114: #else",
          "118: dbgprintf(\"ZZZ: inside processBatchDoActions, processing elem %d/%d\\n\", i, batchNumMsgs(pBatch));",
          "123: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:  DEFiRet;",
          "299:  ISOBJ_TYPE_assert(pThis, rule);",
          "303:  for(i = 0 ; i < batchNumMsgs(pBatch) && !*(pBatch->pbShutdownImmediate) ; ++i) {",
          "",
          "[Removed Lines]",
          "300:  assert(pMsg != NULL);",
          "",
          "[Added Lines]",
          "303:  assert(pBatch != NULL);",
          "",
          "---------------"
        ],
        "runtime/ruleset.c||runtime/ruleset.c": [
          "File: runtime/ruleset.c -> runtime/ruleset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: static rsRetVal processBatch(batch_t *pBatch);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: static inline rsRetVal",
          "166: processBatchMultiRuleset(batch_t *pBatch)",
          "167: {",
          "168:  ruleset_t *currRuleset;",
          "169:  batch_t snglRuleBatch;",
          "170:  int i;",
          "173:  DEFiRet;",
          "175:  CHKiRet(batchInit(&snglRuleBatch, pBatch->nElem));",
          "176:  snglRuleBatch.pbShutdownImmediate = pBatch->pbShutdownImmediate;",
          "178: dbgprintf(\"ZZZ: multi-ruleset batch of %d elements must be processed\\n\", pBatch->nElem);",
          "181:   for(iStart = 0 ; iStart < pBatch->nElem && pBatch->pElem[iStart].state == BATCH_STATE_DISC ; ++iStart)",
          "184:   if(iStart == pBatch->nElem)",
          "188:   currRuleset = batchElemGetRuleset(pBatch, iStart);",
          "189:   iNew = 0;",
          "190:   for(i = iStart ; i < pBatch->nElem ; ++i) {",
          "191:    if(batchElemGetRuleset(pBatch, i) == currRuleset) {",
          "192: dbgprintf(\"ZZZ: proc elem %d:'%s'\\n\", i, ((msg_t*)(pBatch->pElem[i].pUsrp))->szRawMsg+15);",
          "193:     batchCopyElem(&(snglRuleBatch.pElem[iNew++]), &(pBatch->pElem[i]));",
          "195:     pBatch->pElem[i].state = BATCH_STATE_DISC;",
          "196:    }",
          "197:   }",
          "199:   batchSetSingleRuleset(&snglRuleBatch, 1);",
          "201:   processBatch(&snglRuleBatch);",
          "203: #if 0",
          "204: for(i = iStart ; i < pBatch->nElem ; ++i) {",
          "205:  dbgprintf(\"ZZZ: after partial execution item %d state %d\\n\", i, pBatch->pElem[i].state);",
          "206: }",
          "210: #endif",
          "211:  }",
          "212:  batchFree(&snglRuleBatch);",
          "214: finalize_it:",
          "215:  RETiRet;",
          "216: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:  DEFiRet;",
          "163:  assert(pBatch != NULL);",
          "165:  if(pBatch->bSingleRuleset) {",
          "166:   pThis = batchGetRuleset(pBatch);",
          "167:   if(pThis == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: dbgprintf(\"ZZZ: processBatch: batch of %d elements must be processed\\n\", pBatch->nElem);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:   ISOBJ_TYPE_assert(pThis, ruleset);",
          "170:   CHKiRet(llExecFunc(&pThis->llRules, processBatchDoRules, pBatch));",
          "171:  } else {",
          "179:  }",
          "181: finalize_it:",
          "",
          "[Removed Lines]",
          "172:   #warning implementation missing!",
          "175:   assert(0); // TODO mandatory to implement!",
          "176:   dbgprintf(\"processbatch missing implementation, terminating!\\n\");",
          "177:   printf(\"processBatch missing implementation, terminating!\\n\");",
          "178:   exit(0);",
          "",
          "[Added Lines]",
          "239:   CHKiRet(processBatchMultiRuleset(pBatch));",
          "",
          "---------------"
        ],
        "runtime/wti.c||runtime/wti.c": [
          "File: runtime/wti.c -> runtime/wti.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: CODESTARTobjDestruct(wti)",
          "176:  DESTROY_ATOMIC_HELPER_MUT(pThis->mutIsRunning);",
          "178:  free(pThis->pszDbgHdr);",
          "",
          "[Removed Lines]",
          "175:  free(pThis->batch.pElem);",
          "",
          "[Added Lines]",
          "175:  batchFree(&pThis->batch);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:  CHKiRet(pThis->pWtp->pfGetDeqBatchSize(pThis->pWtp->pUsr, &iDeqBatchSize));",
          "209: finalize_it:",
          "210:  RETiRet;",
          "",
          "[Removed Lines]",
          "207:  CHKmalloc(pThis->batch.pElem = calloc((size_t)iDeqBatchSize, sizeof(batch_obj_t)));",
          "",
          "[Added Lines]",
          "207:  CHKiRet(batchInit(&pThis->batch, iDeqBatchSize));",
          "",
          "---------------"
        ],
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  complex1.sh \\",
          "35:  queue-persist.sh \\",
          "36:  pipeaction.sh \\",
          "38:  execonlyonce.sh \\",
          "39:  dircreate_dflt.sh \\",
          "40:  dircreate_off.sh \\",
          "41:  queue-persist.sh",
          "",
          "[Removed Lines]",
          "37:  pipe_noreader.sh \\",
          "",
          "[Added Lines]",
          "38:  pipe_noreader.sh \\",
          "",
          "---------------"
        ],
        "tests/diag.sh||tests/diag.sh": [
          "File: tests/diag.sh -> tests/diag.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #valgrind=\"valgrind --malloc-fill=ff --free-fill=fe --log-fd=1\"",
          "9: #valgrind=\"valgrind --tool=drd --log-fd=1\"",
          "10: #valgrind=\"valgrind --tool=helgrind --log-fd=1\"",
          "12: #set -o xtrace",
          "15: case $1 in",
          "16:    'init') $srcdir/killrsyslog.sh # kill rsyslogd if it runs for some reason",
          "17:   cp $srcdir/testsuites/diag-common.conf diag-common.conf",
          "",
          "[Removed Lines]",
          "11: #valgrind=\"valgrind --tool=exp-ptrcheck --log-fd=1\"",
          "13: #export RSYSLOG_DEBUG=\"debug nostdout\"",
          "14: #export RSYSLOG_DEBUGLOG=\"log\"",
          "",
          "[Added Lines]",
          "11: valgrind=\"valgrind --tool=exp-ptrcheck --log-fd=1\"",
          "13: export RSYSLOG_DEBUG=\"debug nostdout\"",
          "14: export RSYSLOG_DEBUGLOG=\"log\"",
          "",
          "---------------"
        ],
        "tests/tcpflood.c||tests/tcpflood.c": [
          "File: tests/tcpflood.c -> tests/tcpflood.c"
        ],
        "tools/syslogd.c||tools/syslogd.c": [
          "File: tools/syslogd.c -> tools/syslogd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "708:  assert(pBatch != NULL);",
          "710:  preprocessBatch(pBatch);",
          "711:  ruleset.ProcessBatch(pBatch);",
          "715: int i;",
          "",
          "[Removed Lines]",
          "712: dbgprintf(\"ZZZ: back in msgConsumer\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}