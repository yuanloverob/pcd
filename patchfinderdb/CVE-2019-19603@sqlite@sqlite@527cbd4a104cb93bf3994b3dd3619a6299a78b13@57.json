{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6db6598ca53771904d616054add0eaae3528b56",
      "candidate_info": {
        "commit_hash": "d6db6598ca53771904d616054add0eaae3528b56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d6db6598ca53771904d616054add0eaae3528b56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Improvements to the sqlite3ExprImpliesNonNullRow() theorem prover.\n\nFossilOrigin-Name: 3fde627616030ca0de87169467e2e453fdc91154942e3a3a92a221df5923b2d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b36813d6467c82159bd3bb69d34ac28fc161a13052ca67d7cf9ad75e2aaea9d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5033: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5034:   Walker w;",
          "5035:   w.xExprCallback = impliesNotNullRow;",
          "5036:   w.xSelectCallback = 0;",
          "5037:   w.xSelectCallback2 = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5035:   p = sqlite3ExprSkipCollate(p);",
          "5036:   while( p ){",
          "5037:     if( p->op==TK_NOTNULL ){",
          "5038:       p = p->pLeft;",
          "5039:     }else if( p->op==TK_AND ){",
          "5040:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5041:       p = p->pRight;",
          "5042:     }else{",
          "5043:       break;",
          "5044:     }",
          "5045:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31ab7d8e5c2fc895d12907b71050b20f5987b891",
      "candidate_info": {
        "commit_hash": "31ab7d8e5c2fc895d12907b71050b20f5987b891",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31ab7d8e5c2fc895d12907b71050b20f5987b891",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/memdb.c",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Extend fuzzcheck so that it can process dbsqlfuzz cases. Add a collection of interesting dbsqlfuzz cases to the standard test suite.\n\nFossilOrigin-Name: e2991a7ecf5dd241c4bab7c7cadc4901043fb0c3ea1fac70b684f6d8332677f1",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:   $(TOP)/test/fuzzdata4.db \\",
          "590:   $(TOP)/test/fuzzdata5.db \\",
          "591:   $(TOP)/test/fuzzdata6.db \\",
          "594: # Standard options to testfixture",
          "595: #",
          "",
          "[Removed Lines]",
          "592:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "592:   $(TOP)/test/fuzzdata7.db \\",
          "593:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "613: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "614: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "615: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "616: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "617: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "618: #FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS5",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:   $(TOP)\\test\\fuzzdata4.db \\",
          "1627:   $(TOP)\\test\\fuzzdata5.db \\",
          "1628:   $(TOP)\\test\\fuzzdata6.db \\",
          "1630: # <</mark>>",
          "1632: # Additional compiler options for the shell.  These are only effective",
          "",
          "[Removed Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db",
          "",
          "[Added Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db \\",
          "1630:   $(TOP)\\test\\fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644: #",
          "1645: MPTESTER_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5",
          "1646: FUZZERSHELL_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1",
          "1648: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1649: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "1650: DBFUZZ_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "1647: FUZZCHECK_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "",
          "[Added Lines]",
          "1648: FUZZCHECK_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "1649: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DESERIALIZE",
          "1650: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4",
          "1651: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1652: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1653: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731:  $(LTLINK) $(NO_WARN) $(DBFUZZ_COMPILE_OPTS) $(TOP)\\test\\dbfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1733: fuzzcheck.exe: $(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1736: ossshell.exe: $(OSSSHELL_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1739: sessionfuzz.exe: zlib $(TOP)\\test\\sessionfuzz.c $(SQLITE3C) $(SQLITE3H)",
          "1740:  $(LTLINK) $(NO_WARN) -I$(ZLIBINCDIR) $(TOP)\\test\\sessionfuzz.c /link $(LDFLAGS) $(LTLINKOPTS) /LIBPATH:$(ZLIBLIBDIR) $(ZLIBLIB)",
          "",
          "[Removed Lines]",
          "1734:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1737:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Added Lines]",
          "1741:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1744:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   $(TOP)/test/fuzzdata4.db \\",
          "511:   $(TOP)/test/fuzzdata5.db \\",
          "512:   $(TOP)/test/fuzzdata6.db \\",
          "515: # Standard options to testfixture",
          "516: #",
          "",
          "[Removed Lines]",
          "513:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "513:   $(TOP)/test/fuzzdata7.db \\",
          "514:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "532: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "533: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "534: DBFUZZ_OPT =",
          "535: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "536: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "539: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5eb5e8289fa71e5e29e081d33d4a59c64b463bf6b06d7070c05c46d77d808ad4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <string.h>",
          "70: #include <stdarg.h>",
          "71: #include <ctype.h>",
          "72: #include \"sqlite3.h\"",
          "73: #define ISSPACE(X) isspace((unsigned char)(X))",
          "74: #define ISDIGIT(X) isdigit((unsigned char)(X))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   return t;",
          "420: }",
          "424: static int inmemClose(sqlite3_file *pFile){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: typedef struct FuzzCtx {",
          "439: } FuzzCtx;",
          "442: static int eVerbosity = 0;",
          "445: static int bVdbeDebug = 0;",
          "451: static unsigned int mxProgressCb = 2000;",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "460: static sqlite3_int64 maxDbSize = 104857600;",
          "467: static unsigned int hexToInt(unsigned int h){",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "472: #endif",
          "473:   return h & 0xf;",
          "474: }",
          "483: static int isOffset(",
          "488: ){",
          "489:   int i;",
          "490:   unsigned int k = 0;",
          "491:   unsigned char c;",
          "492:   for(i=1; i<nIn && (c = zIn[i])!=']'; i++){",
          "493:     if( !isxdigit(c) ) return 0;",
          "494:     k = k*16 + hexToInt(c);",
          "495:   }",
          "496:   if( i==nIn ) return 0;",
          "499:   return 1;",
          "500: }",
          "513: static int decodeDatabase(",
          "518: ){",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "529:   a = sqlite3_malloc( nAlloc );",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "534:   memset(a, 0, nAlloc);",
          "535:   for(i=k=0; i<n; i++){",
          "536:     char c = zIn[i];",
          "537:     if( isxdigit(c) ){",
          "538:       k++;",
          "539:       if( k & 1 ){",
          "540:         b = hexToInt(c)*16;",
          "541:       }else{",
          "542:         b += hexToInt(c);",
          "543:         j = k/2 - 1;",
          "544:         if( j>=nAlloc ){",
          "545:           sqlite3_uint64 newSize;",
          "546:           if( nAlloc==MX_FILE_SZ || j>=MX_FILE_SZ ){",
          "547:             if( eVerbosity ){",
          "548:               fprintf(stderr, \"Input database too big: max %d bytes\\n\",",
          "549:                       MX_FILE_SZ);",
          "550:             }",
          "551:             sqlite3_free(a);",
          "552:             return -1;",
          "553:           }",
          "554:           newSize = nAlloc*2;",
          "555:           if( newSize<=j ){",
          "556:             newSize = (j+4096)&~4095;",
          "557:           }",
          "558:           if( newSize>MX_FILE_SZ ){",
          "559:             if( j>=MX_FILE_SZ ){",
          "560:               sqlite3_free(a);",
          "561:               return -1;",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "565:           a = sqlite3_realloc( a, newSize );",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "575:           mx = (j + 4095)&~4095;",
          "576:           if( mx>MX_FILE_SZ ) mx = MX_FILE_SZ;",
          "577:         }",
          "578:         assert( j<nAlloc );",
          "579:         a[j] = b;",
          "580:       }",
          "581:     }else if( zIn[i]=='[' && i<n-3 && isOffset(zIn+i, nIn-i, &k, &i) ){",
          "582:       continue;",
          "583:    }else if( zIn[i]=='\\n' && i<n-4 && memcmp(zIn+i,\"\\n--\\n\",4)==0 ){",
          "584:       i += 4;",
          "585:       break;",
          "586:     }",
          "587:   }",
          "590:   return i;",
          "591: }",
          "599: static int progress_handler(void *pClientData) {",
          "600:   FuzzCtx *p = (FuzzCtx*)pClientData;",
          "601:   sqlite3_int64 iNow = timeOfDay();",
          "602:   int rc = iNow>=p->iCutoffTime;",
          "603:   sqlite3_int64 iDiff = iNow - p->iLastCb;",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "607:   if( rc && !p->timeoutHit && eVerbosity>=2 ){",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "611:   }",
          "612:   return rc;",
          "613: }",
          "622: static int block_troublesome_sql(",
          "623:   void *Notused,",
          "624:   int eCode,",
          "625:   const char *zArg1,",
          "626:   const char *zArg2,",
          "627:   const char *zArg3,",
          "628:   const char *zArg4",
          "629: ){",
          "630:   (void)Notused;",
          "631:   (void)zArg2;",
          "632:   (void)zArg3;",
          "633:   (void)zArg4;",
          "634:   if( eCode==SQLITE_PRAGMA ){",
          "635:     if( sqlite3_strnicmp(\"vdbe_\", zArg1, 5)==0",
          "636:      || sqlite3_stricmp(\"parser_trace\", zArg1)==0",
          "637:      || sqlite3_stricmp(\"temp_store_directory\", zArg1)==0",
          "638:     ){",
          "639:       return SQLITE_DENY;",
          "640:     }",
          "641:   }else if( (eCode==SQLITE_ATTACH || eCode==SQLITE_DETACH)",
          "642:             && zArg1 && zArg1[0] ){",
          "643:     return SQLITE_DENY;",
          "644:   }",
          "645:   return SQLITE_OK;",
          "646: }",
          "651: static int runDbSql(sqlite3 *db, const char *zSql){",
          "652:   int rc;",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "656:   if( eVerbosity>=4 ){",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "663:       if( eVerbosity>=5 ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "667:           switch( sqlite3_column_type(pStmt, j) ){",
          "668:             case SQLITE_NULL: {",
          "669:               printf(\"NULL\");",
          "670:               break;",
          "671:             }",
          "672:             case SQLITE_INTEGER:",
          "673:             case SQLITE_FLOAT: {",
          "674:               printf(\"%s\", sqlite3_column_text(pStmt, j));",
          "675:               break;",
          "676:             }",
          "677:             case SQLITE_BLOB: {",
          "678:               int n = sqlite3_column_bytes(pStmt, j);",
          "679:               int i;",
          "680:               const unsigned char *a;",
          "681:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "682:               printf(\"x'\");",
          "683:               for(i=0; i<n; i++){",
          "684:                 printf(\"%02x\", a[i]);",
          "685:               }",
          "686:               printf(\"'\");",
          "687:               break;",
          "688:             }",
          "689:             case SQLITE_TEXT: {",
          "690:               int n = sqlite3_column_bytes(pStmt, j);",
          "691:               int i;",
          "692:               const unsigned char *a;",
          "693:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "694:               printf(\"'\");",
          "695:               for(i=0; i<n; i++){",
          "696:                 if( a[i]=='\\'' ){",
          "697:                   printf(\"''\");",
          "698:                 }else{",
          "699:                   putchar(a[i]);",
          "700:                 }",
          "701:               }",
          "702:               printf(\"'\");",
          "703:               break;",
          "704:             }",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=4 ){",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "715:   }else if( eVerbosity>=4 ){",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "719:   return sqlite3_finalize(pStmt);",
          "720: }",
          "723: int runCombinedDbSqlInput(const uint8_t *aData, size_t nByte){",
          "734:   if( nByte<10 ) return 0;",
          "735:   if( sqlite3_initialize() ) return 0;",
          "736:   if( sqlite3_memory_used()!=0 ){",
          "737:     int nAlloc = 0;",
          "738:     int nNotUsed = 0;",
          "739:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "740:     fprintf(stderr,\"Memory leak in mutator: %lld bytes in %d allocations\\n\",",
          "741:             sqlite3_memory_used(), nAlloc);",
          "742:     exit(1);",
          "743:   }",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "752:     fflush(stdout);",
          "753:   }",
          "754:   rc = sqlite3_open(0, &cx.db);",
          "755:   if( rc ) return 1;",
          "756:   if( bVdbeDebug ){",
          "757:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "758:   }",
          "765:   cx.iLastCb = timeOfDay();",
          "767:   cx.mxCb = mxProgressCb;",
          "768: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "769:   sqlite3_progress_handler(cx.db, 10, progress_handler, (void*)&cx);",
          "770: #endif",
          "774:   if( vdbeOpLimit>0 ){",
          "775:     sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, vdbeOpLimit);",
          "776:   }",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "783:   }",
          "784:   rc = sqlite3_deserialize(cx.db, \"main\", aDb, nDb, nDb,",
          "785:           SQLITE_DESERIALIZE_RESIZEABLE |",
          "786:           SQLITE_DESERIALIZE_FREEONCLOSE);",
          "787:   if( rc ){",
          "788:     fprintf(stderr, \"sqlite3_deserialize() failed with %d\\n\", rc);",
          "789:     goto testrun_finished;",
          "790:   }",
          "791:   if( maxDbSize>0 ){",
          "792:     sqlite3_int64 x = maxDbSize;",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "797:   if( eVerbosity>=5 ){",
          "798:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON;\", 0, 0, 0);",
          "799:   }",
          "803:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "806:   sqlite3_randomness(0,0);",
          "808:   zSql = sqlite3_malloc( nSql + 1 );",
          "809:   if( zSql==0 ){",
          "810:     fprintf(stderr, \"Out of memory!\\n\");",
          "811:   }else{",
          "812:     memcpy(zSql, aData+iSql, nSql);",
          "813:     zSql[nSql] = 0;",
          "814:     for(i=j=0; zSql[i]; i++){",
          "815:       if( zSql[i]==';' ){",
          "816:         char cSaved = zSql[i+1];",
          "817:         zSql[i+1] = 0;",
          "818:         if( sqlite3_complete(zSql+j) ){",
          "819:           rc = runDbSql(cx.db, zSql+j);",
          "820:           j = i+1;",
          "821:         }",
          "822:         zSql[i+1] = cSaved;",
          "823:         if( rc==SQLITE_INTERRUPT || progress_handler(&cx) ){",
          "824:           goto testrun_finished;",
          "825:         }",
          "826:       }",
          "827:     }",
          "828:     if( j<i ){",
          "829:       runDbSql(cx.db, zSql+j);",
          "830:     }",
          "831:   }",
          "832: testrun_finished:",
          "833:   sqlite3_free(zSql);",
          "834:   rc = sqlite3_close(cx.db);",
          "835:   if( rc!=SQLITE_OK ){",
          "836:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "837:   }",
          "838:   if( eVerbosity>=2 ){",
          "839:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "840:        sqlite3_memory_highwater(1) / 1000000.0);",
          "841:   }",
          "842:   if( sqlite3_memory_used()!=0 ){",
          "843:     int nAlloc = 0;",
          "844:     int nNotUsed = 0;",
          "845:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "846:     fprintf(stderr,\"Memory leak: %lld bytes in %d allocations\\n\",",
          "847:             sqlite3_memory_used(), nAlloc);",
          "848:     exit(1);",
          "849:   }",
          "850:   return 0;",
          "851: }",
          "861: static int isDbSql(unsigned char *a, int n){",
          "862:   unsigned char buf[12];",
          "863:   int i;",
          "864:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "865:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "866:   for(i=0; n>0 && i<8; n--, a++){",
          "867:     if( isxdigit(a[0]) ) buf[i++] = a[0];",
          "868:   }",
          "869:   if( i==8 && memcmp(buf,\"53514c69\",8)==0 ) return 1;",
          "870:   return 0;",
          "871: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:   return (int)(isNeg? -v : v);",
          "796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254: static int numberOfVChar(const char *z){",
          "1255:   int N = 0;",
          "1256:   while( z[0] && z[0]=='v' ){",
          "1257:     z++;",
          "1258:     N++;",
          "1259:   }",
          "1260:   return z[0]==0 ? N : 0;",
          "1261: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:       if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "952:         quietFlag = 1;",
          "953:         verboseFlag = 0;",
          "954:       }else",
          "955:       if( strcmp(z,\"rebuild\")==0 ){",
          "956:         rebuildFlag = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:         eVerbosity = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "973:         fatalError(\"timeout is not available on non-unix systems\");",
          "974: #endif",
          "975:       }else",
          "977:         quietFlag = 0;",
          "978:         verboseFlag++;",
          "979:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "980:       }else",
          "981:       {",
          "982:         fatalError(\"unknown option: %s\", argv[i]);",
          "983:       }",
          "",
          "[Removed Lines]",
          "976:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "",
          "[Added Lines]",
          "1443:       if( strcmp(z,\"verbose\")==0 ){",
          "1446:         eVerbosity++;",
          "1447:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1448:       }else",
          "1449:       if( (nV = numberOfVChar(z))>=1 ){",
          "1450:         quietFlag = 0;",
          "1451:         verboseFlag += nV;",
          "1452:         eVerbosity += nV;",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1457:         const char *z;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1231:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1232:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1233:       for(pDb=g.pFirstDb; pDb; pDb=pDb->pNext){",
          "1234:         int openFlags;",
          "1235:         const char *zVfs = \"inmem\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1716:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1717:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1718:         if( verboseFlag ){",
          "1719:           printf(\"%s\\n\", g.zTestName);",
          "1720:           fflush(stdout);",
          "1721:         }else if( !quietFlag ){",
          "1722:           static int prevAmt = -1;",
          "1723:           int idx = pSql->seq;",
          "1724:           int amt = idx*10/(g.nSql);",
          "1725:           if( amt!=prevAmt ){",
          "1726:             printf(\" %d%%\", amt*10);",
          "1727:             fflush(stdout);",
          "1728:             prevAmt = amt;",
          "1729:           }",
          "1730:         }",
          "1731:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1732:         nTest++;",
          "1733:         g.zTestName[0] = 0;",
          "1734:         continue;",
          "1735:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00267b8a7b55ac0b34a37acc5e08f024722125bd",
      "candidate_info": {
        "commit_hash": "00267b8a7b55ac0b34a37acc5e08f024722125bd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00267b8a7b55ac0b34a37acc5e08f024722125bd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Simplify the window function code generator some more.\n\nFossilOrigin-Name: 45cbd3b4498cea8856f189e9d0a192556d4f15212055b8328a1beca6083fc47a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8eee566dfca6f4c8af074731dfe91f7fbcd9ca72f0303235b52e4e2e80d5b71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1863:   return 0;",
          "1864: }",
          "1866: static void windowCodeStep(",
          "1867:   Parse *pParse,",
          "1868:   Select *p,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1866: typedef struct WindowCodeArg WindowCodeArg;",
          "1867: struct WindowCodeArg {",
          "1868:   Parse *pParse;",
          "1869:   Window *pMWin;",
          "1870:   Vdbe *pVdbe;",
          "1871:   int regGosub;",
          "1872:   int addrGosub;",
          "1873:   int regArg;",
          "1874: };",
          "1876: #define WINDOW_RETURN_ROW 1",
          "1877: #define WINDOW_AGGINVERSE 2",
          "1878: #define WINDOW_AGGSTEP    3",
          "1880: static int windowCodeOp(",
          "1881:  WindowCodeArg *p,",
          "1882:  int op,",
          "1883:  int csr,",
          "1884:  int regCountdown,",
          "1885:  int jumpOnEof",
          "1886: ){",
          "1887:   int ret = 0;",
          "1888:   Vdbe *v = p->pVdbe;",
          "1889:   int addrIf = 0;",
          "1891:   if( regCountdown>0 ){",
          "1892:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1893:   }",
          "1895:   if( jumpOnEof ){",
          "1896:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1897:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1898:   }else{",
          "1899:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1);",
          "1900:   }",
          "1902:   switch( op ){",
          "1903:     case WINDOW_RETURN_ROW:",
          "1904:       windowAggFinal(p->pParse, p->pMWin, 0);",
          "1905:       windowReturnOneRow(p->pParse, p->pMWin, p->regGosub, p->addrGosub);",
          "1906:       break;",
          "1908:     case WINDOW_AGGINVERSE:",
          "1909:       windowAggStep(p->pParse, p->pMWin, csr, 1, p->regArg, p->pMWin->regSize);",
          "1910:       break;",
          "1912:     case WINDOW_AGGSTEP:",
          "1913:       windowAggStep(p->pParse, p->pMWin, csr, 0, p->regArg, p->pMWin->regSize);",
          "1914:       break;",
          "1915:   }",
          "1917:   if( ret ){",
          "1918:     sqlite3VdbeJumpHere(v, ret);",
          "1919:   }",
          "1920:   if( regCountdown>0 ){",
          "1921:     sqlite3VdbeJumpHere(v, addrIf);",
          "1922:   }",
          "1923:   return ret;",
          "1924: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1890:   int addrGoto;",
          "1891:   int addrIf;",
          "1894:   int addrGosubFlush;",
          "1895:   int addrInteger;",
          "1896:   int addrCacheRewind;",
          "",
          "[Removed Lines]",
          "1886:   int iSubCsr = p->pSrc->a[0].iCursor;",
          "1887:   int nSub = p->pSrc->a[0].pTab->nCol;",
          "1888:   int k;",
          "1892:   int addrIfEnd;",
          "1893:   int addrIfStart;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1903:   int reg = pParse->nMem+1;",
          "1904:   int regRecord = reg+nSub;",
          "1905:   int regRowid = regRecord+1;",
          "1909:   pParse->nMem += 1 + nSub + 1;",
          "",
          "[Removed Lines]",
          "1907:   bCache = 1;",
          "",
          "[Added Lines]",
          "2033:   WindowCodeArg s;",
          "2035:   memset(&s, 0, sizeof(WindowCodeArg));",
          "2036:   s.pParse = pParse;",
          "2037:   s.pMWin = pMWin;",
          "2038:   s.pVdbe = v;",
          "2039:   s.regGosub = regGosub;",
          "2040:   s.addrGosub = addrGosub;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1923:        || pMWin->eEnd==TK_PRECEDING",
          "1924:   );",
          "1931:   }",
          "1932:   sqlite3VdbeAddOp3(v, OP_MakeRecord, reg, nSub, regRecord);",
          "",
          "[Removed Lines]",
          "1929:   for(k=0; k<nSub; k++){",
          "1930:     sqlite3VdbeAddOp3(v, OP_Column, iSubCsr, k, reg+k);",
          "",
          "[Added Lines]",
          "2063:   for(iCol=0; iCol<nSub; iCol++){",
          "2064:     sqlite3VdbeAddOp3(v, OP_Column, iSubCsr, iCol, reg+iCol);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1973:   }",
          "1978:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1979:   windowCheckIntValue(pParse, regStart, 0);",
          "1980:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1981:   windowCheckIntValue(pParse, regEnd, 1);",
          "1984:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1985:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "1986:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Removed Lines]",
          "1976:   regArg = windowInitAccum(pParse, pMWin);",
          "1983:   if( pMWin->eStart==TK_FOLLOWING || pMWin->eEnd==TK_PRECEDING ){",
          "",
          "[Added Lines]",
          "2110:   s.regArg = regArg = windowInitAccum(pParse, pMWin);",
          "2117:   if( pMWin->eStart==pMWin->eEnd",
          "2118:    && pMWin->eStart!=TK_CURRENT && pMWin->eStart!=TK_UNBOUNDED",
          "2119:   ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2008:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2009:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2012:   if( bCache ){",
          "2013:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "2014:   }else{",
          "2015:     sqlite3VdbeJumpHere(v, addrIf);",
          "2016:   }",
          "2018:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2029:   }else",
          "2030:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2044:   }else{",
          "2054:   }",
          "2056:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2057:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2060:   }",
          "2063:   if( bCache ){",
          "",
          "[Removed Lines]",
          "2019:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2020:     windowAggFinal(pParse, pMWin, 0);",
          "2021:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "2022:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2023:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2025:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2026:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2027:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2028:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2031:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2032:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2033:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "2034:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2036:     windowAggFinal(pParse, pMWin, 0);",
          "2037:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "2038:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2040:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2041:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2042:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2043:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2045:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2046:     windowAggFinal(pParse, pMWin, 0);",
          "2047:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "2048:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2049:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2050:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2051:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2052:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2053:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2058:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2059:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "",
          "[Added Lines]",
          "2148:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.SECOND_ROW_CODE\"));",
          "2155:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "2156:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2159:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 0);",
          "2160:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2161:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2163:     int addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2164:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2165:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2166:     sqlite3VdbeJumpHere(v, addr);",
          "2168:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "2170:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.ALL_ROW_CODE\"));",
          "2173:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2175:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.ALL_ROW_CODE\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2073:   if( pMWin->pPartition && bCache==0 ){",
          "2074:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2075:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2076:   }",
          "2096:   }else{",
          "2106:     }else{",
          "2114:     }",
          "2116:   }",
          "2119:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2120:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "2121:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2122:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2123:   if( pMWin->pPartition ){",
          "2124:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2125:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2078:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2079:     int addrBreak;",
          "2080:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2081:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "2082:     addrBreak = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2083:     windowAggFinal(pParse, pMWin, 0);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2087:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2088:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "2089:     sqlite3VdbeAddOp0(v, OP_Goto);",
          "2090:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2091:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2092:     sqlite3VdbeJumpHere(v, addrIfStart+2);",
          "2094:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrIfEnd);",
          "2095:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2097:     sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "2098:     addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2099:     if( pMWin->eEnd==TK_PRECEDING ){",
          "2100:       addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2101:       sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2102:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "2103:       sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2104:       windowAggFinal(pParse, pMWin, 0);",
          "2105:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2107:       windowAggFinal(pParse, pMWin, 0);",
          "2108:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2109:       addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2110:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2111:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2112:       sqlite3VdbeJumpHere(v, addrIfStart);",
          "2113:       sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "2115:     sqlite3VdbeJumpHere(v, addrGoto);",
          "",
          "[Added Lines]",
          "2188:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "2194:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2195:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 1);",
          "2196:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2198:     int addrBreak;",
          "2199:     int addrStart = sqlite3VdbeCurrentAddr(v);",
          "2200:     if( pMWin->eStart==TK_FOLLOWING ){",
          "2201:       addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2202:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "2204:       addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2205:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2207:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2208:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2215:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.FLUSH_CODE\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65455fc682394dc7ec0b0c5599a2175e05e94f4b",
      "candidate_info": {
        "commit_hash": "65455fc682394dc7ec0b0c5599a2175e05e94f4b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/65455fc682394dc7ec0b0c5599a2175e05e94f4b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab.test"
        ],
        "message": "Fix a problem with renaming a table that starts with \"sqlite\". Fix for ticket [f00d7b65].\n\nFossilOrigin-Name: a2ead8aa4517b63cda7bf84464326e9cb5e228224caa603568c0e04ea44e6588",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab.test||test/altertab.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab.test||test/altertab.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6de980a09c3a7adf71f2c9a63a242673b5e1f246e8ee071b26844275f0dad0fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   sqlite3NestedParse(pParse,",
          "55:       \"SELECT 1 \"",
          "56:       \"FROM \\\"%w\\\".%s \"",
          "58:       \" AND sql NOT LIKE 'create virtual%%'\"",
          "59:       \" AND sqlite_rename_test(%Q, sql, type, name, %d)=NULL \",",
          "60:       zDb, MASTER_NAME,",
          "",
          "[Removed Lines]",
          "57:       \"WHERE name NOT LIKE 'sqlite_%%'\"",
          "",
          "[Added Lines]",
          "57:       \"WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X'\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     sqlite3NestedParse(pParse,",
          "66:         \"SELECT 1 \"",
          "67:         \"FROM temp.%s \"",
          "69:         \" AND sql NOT LIKE 'create virtual%%'\"",
          "70:         \" AND sqlite_rename_test(%Q, sql, type, name, 1)=NULL \",",
          "71:         MASTER_NAME, zDb",
          "",
          "[Removed Lines]",
          "68:         \"WHERE name NOT LIKE 'sqlite_%%'\"",
          "",
          "[Added Lines]",
          "68:         \"WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X'\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:       \"UPDATE \\\"%w\\\".%s SET \"",
          "187:       \"sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, %d) \"",
          "188:       \"WHERE (type!='index' OR tbl_name=%Q COLLATE nocase)\"",
          "190:       , zDb, MASTER_NAME, zDb, zTabName, zName, (iDb==1), zTabName",
          "191:   );",
          "",
          "[Removed Lines]",
          "189:       \"AND   name NOT LIKE 'sqlite_%%'\"",
          "",
          "[Added Lines]",
          "189:       \"AND   name NOT LIKE 'sqliteX_%%' ESCAPE 'X'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:           \"tbl_name = %Q, \"",
          "198:           \"name = CASE \"",
          "199:             \"WHEN type='table' THEN %Q \"",
          "201:              \"'sqlite_autoindex_' || %Q || substr(name,%d+18) \"",
          "202:             \"ELSE name END \"",
          "203:       \"WHERE tbl_name=%Q COLLATE nocase AND \"",
          "",
          "[Removed Lines]",
          "200:             \"WHEN name LIKE 'sqlite_autoindex%%' AND type='index' THEN \"",
          "",
          "[Added Lines]",
          "200:             \"WHEN name LIKE 'sqliteX_autoindex%%' ESCAPE 'X' \"",
          "201:             \"     AND type='index' THEN \"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571:   sqlite3NestedParse(pParse,",
          "572:       \"UPDATE \\\"%w\\\".%s SET \"",
          "573:       \"sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, %d) \"",
          "575:       \" AND sql NOT LIKE 'create virtual%%'\",",
          "576:       zDb, MASTER_NAME,",
          "577:       zDb, pTab->zName, iCol, zNew, bQuote, iSchema==1,",
          "",
          "[Removed Lines]",
          "574:       \"WHERE name NOT LIKE 'sqlite_%%' AND (type != 'index' OR tbl_name = %Q)\"",
          "",
          "[Added Lines]",
          "575:       \"WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' \"",
          "576:       \" AND (type != 'index' OR tbl_name = %Q)\"",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   }",
          "560: }",
          "562: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562: #-------------------------------------------------------------------------",
          "563: reset_db",
          "564: do_execsql_test 17.0 {",
          "565:   CREATE TABLE sqlite1234 (id integer);",
          "566:   ALTER TABLE sqlite1234 RENAME TO User;",
          "567:   SELECT name, sql FROM sqlite_master WHERE sql IS NOT NULL;",
          "568: } {",
          "569:   User {CREATE TABLE \"User\" (id integer)}",
          "570: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d40673c8458f9b26a9cb72b8ed9f5a10fe26e6f",
      "candidate_info": {
        "commit_hash": "8d40673c8458f9b26a9cb72b8ed9f5a10fe26e6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d40673c8458f9b26a9cb72b8ed9f5a10fe26e6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Detect if two indexes of the same table share a common rootpage while parsing the schema, and throw an error immediately.\n\nFossilOrigin-Name: f21c6f1343edc4ba68f9f8e68caac34da0d1c651526ecaf61c0e2d66593a555e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dc794d8f518ed46536928a77a560d46e4f9365c30a00cd108f000d8556a66c00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3497:       db->mDbFlags |= DBFLAG_SchemaChange;",
          "3498:       if( pTblName!=0 ){",
          "3499:         pIndex->tnum = db->init.newTnum;",
          "3500:       }",
          "3501:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3500:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "3501:           sqlite3ErrorMsg(pParse, \"invalid root page\");",
          "3502:           pParse->rc = SQLITE_CORRUPT_BKPT;",
          "3503:           goto exit_create_index;",
          "3504:         }",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   }",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: int sqlite3IndexHasDuplicateRootPage(Index *pIndex){",
          "53:   Index *p;",
          "54:   for(p=pIndex->pTable->pIndex; p; p=p->pNext){",
          "55:     if( p->tnum==pIndex->tnum && p!=pIndex ) return 1;",
          "56:   }",
          "57:   return 0;",
          "58: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:     if( pIndex==0",
          "123:      || sqlite3GetInt32(argv[1],&pIndex->tnum)==0",
          "124:      || pIndex->tnum<2",
          "125:     ){",
          "126:       corruptSchema(pData, argv[0], pIndex?\"invalid rootpage\":\"orphan index\");",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3844: void sqlite3ExprListSetSpan(Parse*,ExprList*,const char*,const char*);",
          "3845: void sqlite3ExprListDelete(sqlite3*, ExprList*);",
          "3846: u32 sqlite3ExprListFlags(const ExprList*);",
          "3847: int sqlite3Init(sqlite3*, char**);",
          "3848: int sqlite3InitCallback(void*, int, char**, char**);",
          "3849: int sqlite3InitOne(sqlite3*, int, char**, u32);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3847: int sqlite3IndexHasDuplicateRootPage(Index*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}