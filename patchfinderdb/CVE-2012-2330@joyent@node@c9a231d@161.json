{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e76a7cb45d915e5d002ea5a6ee51cde6bf0c3ea",
      "candidate_info": {
        "commit_hash": "6e76a7cb45d915e5d002ea5a6ee51cde6bf0c3ea",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6e76a7cb45d915e5d002ea5a6ee51cde6bf0c3ea",
        "files": [
          "configure",
          "tools/installer.js"
        ],
        "message": "installer: install node-waf\n\n* added --without-waf flag for configure script",
        "before_after_code_files": [
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   copy([",
          "94:     'deps/uv/include/ares.h',",
          "95:     'deps/uv/include/ares_version.h'",
          "99:   copy('out/Release/node', 'bin/node');",
          "102:   if (variables.node_install_npm == 'true') {",
          "103:     copy('deps/npm', 'lib/node_modules/npm');",
          "",
          "[Removed Lines]",
          "96:   ], 'include/node/c-ares/');",
          "",
          "[Added Lines]",
          "96:   ], 'include/node/');",
          "102:   if (variables.node_install_waf == 'true') {",
          "103:     copy('tools/wafadmin', 'lib/node/');",
          "104:     copy('tools/node-waf', 'bin/node-waf');",
          "105:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   }",
          "107: } else {",
          "108:   remove([",
          "110:   ]);",
          "111: }",
          "",
          "[Removed Lines]",
          "109:      'bin/node', 'bin/npm', 'include/node/*', 'lib/node_modules'",
          "",
          "[Added Lines]",
          "115:      'bin/node', 'bin/npm', 'bin/node-waf',",
          "116:      'include/node/*', 'lib/node_modules', 'lib/node'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bb814f9db02185c7a0900f73c2bbd52247a1907",
      "candidate_info": {
        "commit_hash": "7bb814f9db02185c7a0900f73c2bbd52247a1907",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7bb814f9db02185c7a0900f73c2bbd52247a1907",
        "files": [
          "lib/net.js"
        ],
        "message": "errnoException must be done immediately",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   if (!self._handle) {",
          "889:     self._handle = createServerHandle(address, port, addressType, fd);",
          "890:     if (!self._handle) {",
          "891:       process.nextTick(function() {",
          "893:       });",
          "894:       return;",
          "895:     }",
          "",
          "[Removed Lines]",
          "892:         self.emit('error', errnoException(errno, 'listen'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1b274108fc7eb961c71eef3b61e5b332a9e187d",
      "candidate_info": {
        "commit_hash": "a1b274108fc7eb961c71eef3b61e5b332a9e187d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a1b274108fc7eb961c71eef3b61e5b332a9e187d",
        "files": [
          "tools/msvs/msi/product.wxs"
        ],
        "message": "windows msi: use .url files for documentation and website shortcuts",
        "before_after_code_files": [
          "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs": [
          "File: tools/msvs/msi/product.wxs -> tools/msvs/msi/product.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:                   WorkingDirectory=\"APPLICATIONROOTDIRECTORY\"/>",
          "104:         <util:InternetShortcut Id=\"OnlineWebsiteShortcut\"",
          "105:                   Name=\"Node.js website\"",
          "107:         <util:InternetShortcut Id=\"OnlineDocumentationShortcut\"",
          "108:                   Name=\"Node.js documentation\"",
          "110:         <Shortcut Id=\"UninstallProduct\"",
          "111:                   Name=\"Uninstall Node.js\"",
          "112:                   Target=\"[SystemFolder]msiexec.exe\"",
          "",
          "[Removed Lines]",
          "106:                   Target=\"http://nodejs.org\"/>",
          "109:                   Target=\"http://nodejs.org/dist/v$(var.ProductVersion)/docs/api/\"/>",
          "",
          "[Added Lines]",
          "106:                   Target=\"http://nodejs.org\"",
          "107:                   Type=\"url\"/>",
          "110:                   Target=\"http://nodejs.org/dist/v$(var.ProductVersion)/docs/api/\"",
          "111:                   Type=\"url\"/>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04e484c4843011640e14f8a9b5409eb8d8dac0fe",
      "candidate_info": {
        "commit_hash": "04e484c4843011640e14f8a9b5409eb8d8dac0fe",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/04e484c4843011640e14f8a9b5409eb8d8dac0fe",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Don't use 'echo -n' in configure script",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:         'target_conditions': [",
          "271:           ['_toolset==\"host\"', {",
          "272:             'variables': {",
          "274:             },",
          "275:             'cflags': [ '<(m32flag)' ],",
          "276:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:           }],",
          "281:           ['_toolset==\"target\"', {",
          "282:             'variables': {",
          "284:             },",
          "285:             'cflags': [ '<(m32flag)' ],",
          "286:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7de6eba0616c9333566e0fb815b589a4e4536b49",
      "candidate_info": {
        "commit_hash": "7de6eba0616c9333566e0fb815b589a4e4536b49",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7de6eba0616c9333566e0fb815b589a4e4536b49",
        "files": [
          "src/eio-emul.h",
          "src/node.h"
        ],
        "message": "node: preemptively unbreak windows build\n\nNo one has complained about it so far but I'm sure MSVC doesn't like things\nlike __attribute__((unused)). Include the libev and libeio shims only on\nnon-Windows platforms.",
        "before_after_code_files": [
          "src/eio-emul.h||src/eio-emul.h",
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/eio-emul.h||src/eio-emul.h": [
          "File: src/eio-emul.h -> src/eio-emul.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef NODE_EIO_EMUL_H_",
          "24: #define NODE_EIO_EMUL_H_",
          "",
          "[Removed Lines]",
          "26: # ifndef _WIN32",
          "27: #  define eio_nop(a,b,c)                      eio_nop(a,b,c,(&uv_default_loop()->uv_eio_channel))",
          "28: #  define eio_busy(a,b,c,d)                   eio_busy(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "29: #  define eio_sync(a,b,c)                     eio_sync(a,b,c,(&uv_default_loop()->uv_eio_channel))",
          "30: #  define eio_fsync(a,b,c,d)                  eio_fsync(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "31: #  define eio_msync(a,b,c,d,e,f)              eio_msync(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "32: #  define eio_fdatasync(a,b,c,d)              eio_fdatasync(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "33: #  define eio_syncfs(a,b,c,d)                 eio_syncfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "34: #  define eio_sync_file_range(a,b,c,d,e,f,g)  eio_sync_file_range(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "35: #  define eio_mtouch(a,b,c,d,e,f)             eio_mtouch(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "36: #  define eio_mlock(a,b,c,d,e)                eio_mlock(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "37: #  define eio_mlockall(a,b,c,d)               eio_mlockall(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "38: #  define eio_fallocate(a,b,c,d,e,f,g)        eio_fallocate(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "39: #  define eio_close(a,b,c,d)                  eio_close(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "40: #  define eio_readahead(a,b,c,d,e,f)          eio_readahead(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "41: #  define eio_read(a,b,c,d,e,f,g)             eio_read(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "42: #  define eio_write(a,b,c,d,e,f,g)            eio_write(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "43: #  define eio_fstat(a,b,c,d)                  eio_fstat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "44: #  define eio_fstatvfs(a,b,c,d)               eio_fstatvfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "45: #  define eio_futime(a,b,c,d,e,f)             eio_futime(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "46: #  define eio_ftruncate(a,b,c,d,e)            eio_ftruncate(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "47: #  define eio_fchmod(a,b,c,d,e)               eio_fchmod(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "48: #  define eio_fchown(a,b,c,d,e,f)             eio_fchown(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "49: #  define eio_dup2(a,b,c,d,e)                 eio_dup2(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "50: #  define eio_sendfile(a,b,c,d,e,f,g)         eio_sendfile(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "51: #  define eio_open(a,b,c,d,e,f)               eio_open(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "52: #  define eio_utime(a,b,c,d,e,f)              eio_utime(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "53: #  define eio_truncate(a,b,c,d,e)             eio_truncate(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "54: #  define eio_chown(a,b,c,d,e,f)              eio_chown(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "55: #  define eio_chmod(a,b,c,d,e)                eio_chmod(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "56: #  define eio_mkdir(a,b,c,d,e)                eio_mkdir(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "57: #  define eio_readlink(a,b,c,d)               eio_readlink(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "58: #  define eio_realpath(a,b,c,d)               eio_realpath(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "59: #  define eio_stat(a,b,c,d)                   eio_stat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "60: #  define eio_lstat(a,b,c,d)                  eio_lstat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "61: #  define eio_statvfs(a,b,c,d)                eio_statvfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "62: #  define eio_unlink(a,b,c,d)                 eio_unlink(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "63: #  define eio_rmdir(a,b,c,d)                  eio_rmdir(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "64: #  define eio_readdir(a,b,c,d,e)              eio_readdir(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "65: #  define eio_mknod(a,b,c,d,e,f)              eio_mknod(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "66: #  define eio_link(a,b,c,d,e)                 eio_link(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "67: #  define eio_symlink(a,b,c,d,e)              eio_symlink(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "68: #  define eio_rename(a,b,c,d,e)               eio_rename(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "69: #  define eio_custom(a,b,c,d)                 eio_custom((void (*)(eio_req*))a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "70: #  define eio_grp(a,b)                        eio_grp(a,b,(&uv_default_loop()->uv_eio_channel))",
          "",
          "[Added Lines]",
          "26: #define eio_nop(a,b,c)                      eio_nop(a,b,c,(&uv_default_loop()->uv_eio_channel))",
          "27: #define eio_busy(a,b,c,d)                   eio_busy(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "28: #define eio_sync(a,b,c)                     eio_sync(a,b,c,(&uv_default_loop()->uv_eio_channel))",
          "29: #define eio_fsync(a,b,c,d)                  eio_fsync(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "30: #define eio_msync(a,b,c,d,e,f)              eio_msync(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "31: #define eio_fdatasync(a,b,c,d)              eio_fdatasync(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "32: #define eio_syncfs(a,b,c,d)                 eio_syncfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "33: #define eio_sync_file_range(a,b,c,d,e,f,g)  eio_sync_file_range(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "34: #define eio_mtouch(a,b,c,d,e,f)             eio_mtouch(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "35: #define eio_mlock(a,b,c,d,e)                eio_mlock(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "36: #define eio_mlockall(a,b,c,d)               eio_mlockall(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "37: #define eio_fallocate(a,b,c,d,e,f,g)        eio_fallocate(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "38: #define eio_close(a,b,c,d)                  eio_close(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "39: #define eio_readahead(a,b,c,d,e,f)          eio_readahead(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "40: #define eio_read(a,b,c,d,e,f,g)             eio_read(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "41: #define eio_write(a,b,c,d,e,f,g)            eio_write(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "42: #define eio_fstat(a,b,c,d)                  eio_fstat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "43: #define eio_fstatvfs(a,b,c,d)               eio_fstatvfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "44: #define eio_futime(a,b,c,d,e,f)             eio_futime(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "45: #define eio_ftruncate(a,b,c,d,e)            eio_ftruncate(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "46: #define eio_fchmod(a,b,c,d,e)               eio_fchmod(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "47: #define eio_fchown(a,b,c,d,e,f)             eio_fchown(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "48: #define eio_dup2(a,b,c,d,e)                 eio_dup2(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "49: #define eio_sendfile(a,b,c,d,e,f,g)         eio_sendfile(a,b,c,d,e,f,g,(&uv_default_loop()->uv_eio_channel))",
          "50: #define eio_open(a,b,c,d,e,f)               eio_open(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "51: #define eio_utime(a,b,c,d,e,f)              eio_utime(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "52: #define eio_truncate(a,b,c,d,e)             eio_truncate(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "53: #define eio_chown(a,b,c,d,e,f)              eio_chown(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "54: #define eio_chmod(a,b,c,d,e)                eio_chmod(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "55: #define eio_mkdir(a,b,c,d,e)                eio_mkdir(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "56: #define eio_readlink(a,b,c,d)               eio_readlink(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "57: #define eio_realpath(a,b,c,d)               eio_realpath(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "58: #define eio_stat(a,b,c,d)                   eio_stat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "59: #define eio_lstat(a,b,c,d)                  eio_lstat(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "60: #define eio_statvfs(a,b,c,d)                eio_statvfs(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "61: #define eio_unlink(a,b,c,d)                 eio_unlink(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "62: #define eio_rmdir(a,b,c,d)                  eio_rmdir(a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "63: #define eio_readdir(a,b,c,d,e)              eio_readdir(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "64: #define eio_mknod(a,b,c,d,e,f)              eio_mknod(a,b,c,d,e,f,(&uv_default_loop()->uv_eio_channel))",
          "65: #define eio_link(a,b,c,d,e)                 eio_link(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "66: #define eio_symlink(a,b,c,d,e)              eio_symlink(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "67: #define eio_rename(a,b,c,d,e)               eio_rename(a,b,c,d,e,(&uv_default_loop()->uv_eio_channel))",
          "68: #define eio_custom(a,b,c,d)                 eio_custom((void (*)(eio_req*))a,b,c,d,(&uv_default_loop()->uv_eio_channel))",
          "69: #define eio_grp(a,b)                        eio_grp(a,b,(&uv_default_loop()->uv_eio_channel))",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:              int argc,",
          "275:              v8::Handle<v8::Value> argv[]);",
          "278: # include \"ev-emul.h\"",
          "279: # include \"eio-emul.h\"",
          "280: #endif",
          "",
          "[Removed Lines]",
          "277: #if !defined(NODE_WANT_INTERNALS)",
          "",
          "[Added Lines]",
          "277: #if !defined(NODE_WANT_INTERNALS) && !defined(_WIN32)",
          "",
          "---------------"
        ]
      }
    }
  ]
}