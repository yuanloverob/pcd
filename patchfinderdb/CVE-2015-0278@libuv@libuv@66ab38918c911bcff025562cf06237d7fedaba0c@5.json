{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "54ce3f6c8e689b2807318e1c5d11b08ce9cc61fc",
      "candidate_info": {
        "commit_hash": "54ce3f6c8e689b2807318e1c5d11b08ce9cc61fc",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/54ce3f6c8e689b2807318e1c5d11b08ce9cc61fc",
        "files": [
          "src/win/internal.h",
          "src/win/loop-watcher.c",
          "src/win/timer.c"
        ],
        "message": "windows: further simplify the code for timers\n\n- Remove the UV_HANDLE_ACTIVE flag. It's a duplicate from\n  UV__HANDLE_ACTIVE, which was used solely on timers and loop watchers.\n\n- Avoid duplicated code when running timers by stopping the handle and\n  rearming it with the repeat time, thus having a single place where the\n  timers are added and removed to and from the RB tree, respectively.",
        "before_after_code_files": [
          "src/win/internal.h||src/win/internal.h",
          "src/win/loop-watcher.c||src/win/loop-watcher.c",
          "src/win/timer.c||src/win/timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #define UV_HANDLE_CLOSED                        0x00000002",
          "67: #define UV_HANDLE_ENDGAME_QUEUED                0x00000004",
          "",
          "[Removed Lines]",
          "68: #define UV_HANDLE_ACTIVE                        0x00000010",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/loop-watcher.c||src/win/loop-watcher.c": [
          "File: src/win/loop-watcher.c -> src/win/loop-watcher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:                                                                               \\",
          "50:     assert(handle->type == UV_##NAME);                                        \\",
          "51:                                                                               \\",
          "53:       return 0;                                                               \\",
          "54:                                                                               \\",
          "55:     if (cb == NULL)                                                           \\",
          "",
          "[Removed Lines]",
          "52:     if (handle->flags & UV_HANDLE_ACTIVE)                                     \\",
          "",
          "[Added Lines]",
          "52:     if (uv__is_active(handle))                                                \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     loop->name##_handles = handle;                                            \\",
          "68:                                                                               \\",
          "69:     handle->name##_cb = cb;                                                   \\",
          "71:     uv__handle_start(handle);                                                 \\",
          "72:                                                                               \\",
          "73:     return 0;                                                                 \\",
          "",
          "[Removed Lines]",
          "70:     handle->flags |= UV_HANDLE_ACTIVE;                                        \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:                                                                               \\",
          "80:     assert(handle->type == UV_##NAME);                                        \\",
          "81:                                                                               \\",
          "83:       return 0;                                                               \\",
          "84:                                                                               \\",
          "",
          "[Removed Lines]",
          "82:     if (!(handle->flags & UV_HANDLE_ACTIVE))                                  \\",
          "",
          "[Added Lines]",
          "81:     if (!uv__is_active(handle))                                               \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:       handle->name##_next->name##_prev = handle->name##_prev;                 \\",
          "100:     }                                                                         \\",
          "101:                                                                               \\",
          "103:     uv__handle_stop(handle);                                                  \\",
          "104:                                                                               \\",
          "105:     return 0;                                                                 \\",
          "",
          "[Removed Lines]",
          "102:     handle->flags &= ~UV_HANDLE_ACTIVE;                                       \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/timer.c||src/win/timer.c": [
          "File: src/win/timer.c -> src/win/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   if (timer_cb == NULL)",
          "123:     return UV_EINVAL;",
          "129:   handle->timer_cb = timer_cb;",
          "130:   handle->due = get_clamped_due_time(loop->time, timeout);",
          "131:   handle->repeat = repeat;",
          "133:   uv__handle_start(handle);",
          "",
          "[Removed Lines]",
          "125:   if (handle->flags & UV_HANDLE_ACTIVE) {",
          "126:     RB_REMOVE(uv_timer_tree_s, &loop->timers, handle);",
          "127:   }",
          "132:   handle->flags |= UV_HANDLE_ACTIVE;",
          "",
          "[Added Lines]",
          "125:   if (uv__is_active(handle))",
          "126:     uv_timer_stop(handle);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: int uv_timer_stop(uv_timer_t* handle) {",
          "146:   uv_loop_t* loop = handle->loop;",
          "149:     return 0;",
          "151:   RB_REMOVE(uv_timer_tree_s, &loop->timers, handle);",
          "154:   uv__handle_stop(handle);",
          "156:   return 0;",
          "",
          "[Removed Lines]",
          "148:   if (!(handle->flags & UV_HANDLE_ACTIVE))",
          "153:   handle->flags &= ~UV_HANDLE_ACTIVE;",
          "",
          "[Added Lines]",
          "146:   if (!uv__is_active(handle))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:   for (timer = RB_MIN(uv_timer_tree_s, &loop->timers);",
          "226:        timer != NULL && timer->due <= loop->time;",
          "227:        timer = RB_MIN(uv_timer_tree_s, &loop->timers)) {",
          "245:     timer->timer_cb((uv_timer_t*) timer);",
          "246:   }",
          "247: }",
          "",
          "[Removed Lines]",
          "228:     RB_REMOVE(uv_timer_tree_s, &loop->timers, timer);",
          "230:     if (timer->repeat != 0) {",
          "232:       timer->due = get_clamped_due_time(timer->due, timer->repeat);",
          "233:       if (timer->due < loop->time) {",
          "234:         timer->due = loop->time;",
          "235:       }",
          "236:       if (RB_INSERT(uv_timer_tree_s, &loop->timers, timer) != NULL) {",
          "237:         uv_fatal_error(ERROR_INVALID_DATA, \"RB_INSERT\");",
          "238:       }",
          "239:     } else {",
          "241:       timer->flags &= ~UV_HANDLE_ACTIVE;",
          "242:       uv__handle_stop(timer);",
          "243:     }",
          "",
          "[Added Lines]",
          "225:     uv_timer_stop(timer);",
          "226:     uv_timer_again(timer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b738d315fbf634f6c571234b8f028e6384eb42ec",
      "candidate_info": {
        "commit_hash": "b738d315fbf634f6c571234b8f028e6384eb42ec",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b738d315fbf634f6c571234b8f028e6384eb42ec",
        "files": [
          "vcbuild.bat"
        ],
        "message": "build: skip vcvarsall if already set up\n\nWithout this, running vcbuild repeatedly for some time will cause errors with msbuild saying the command line is too long (due to concatenation happening in vcvarsall).",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: goto next-arg",
          "42: :args-done",
          "44: @rem Look for Visual Studio 2013",
          "45: if not defined VS120COMNTOOLS goto vc-set-2012",
          "46: if not exist \"%VS120COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\" goto vc-set-2012",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: if defined VCINSTALLDIR goto select-target",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee434b3069c397d932ab329bc85993e9d76202d8",
      "candidate_info": {
        "commit_hash": "ee434b3069c397d932ab329bc85993e9d76202d8",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ee434b3069c397d932ab329bc85993e9d76202d8",
        "files": [
          "test/task.h"
        ],
        "message": "test: remove replacement snprintf for mingw\n\nMingw has a proper definition of snprintf.",
        "before_after_code_files": [
          "test/task.h||test/task.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/task.h||test/task.h": [
          "File: test/task.h -> test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     return TEST_SKIP;                                                         \\",
          "154:   } while (0)",
          "158: #include <stdarg.h>",
          "",
          "[Removed Lines]",
          "156: #ifdef _WIN32",
          "",
          "[Added Lines]",
          "156: #if defined _WIN32 && ! defined __GNUC__",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e921ed1e518ddcc27d6b1ddb0ad60b168bfebc3",
      "candidate_info": {
        "commit_hash": "9e921ed1e518ddcc27d6b1ddb0ad60b168bfebc3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/9e921ed1e518ddcc27d6b1ddb0ad60b168bfebc3",
        "files": [
          "src/win/tcp.c"
        ],
        "message": "doc: clarify why we don't use SO_REUSEADDR for TCP on Windows",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c"
        ]
      }
    },
    {
      "candidate_hash": "b65b74741ef81445e61495a2198c6674cb18a118",
      "candidate_info": {
        "commit_hash": "b65b74741ef81445e61495a2198c6674cb18a118",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b65b74741ef81445e61495a2198c6674cb18a118",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: translate system errors in uv_spawn\n\nWe weren't always translating system errors for in uv_spawn.\n\nThis is half a fix for node's unit test\n test-child-process-cwd.js on win.\n The rest will go into node lib.\n It also fixes test-child-process-exec-error",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1034:     uv__handle_start(process);",
          "1035:   }",
          "",
          "[Removed Lines]",
          "1037:   return err;",
          "",
          "[Added Lines]",
          "1037:   return uv_translate_sys_error(err);",
          "",
          "---------------"
        ]
      }
    }
  ]
}