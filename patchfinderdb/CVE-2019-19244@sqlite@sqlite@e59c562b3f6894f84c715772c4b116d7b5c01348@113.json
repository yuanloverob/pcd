{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fdc75c9f5326dc96c18664674ad00f382adf2177",
      "candidate_info": {
        "commit_hash": "fdc75c9f5326dc96c18664674ad00f382adf2177",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fdc75c9f5326dc96c18664674ad00f382adf2177",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Omit a line of code that has no affect on the outcome.\n\nFossilOrigin-Name: 5d933aa659eb7a13f9ab44fe7762be292a1c3c75b957a3b7e0bc6188257b62f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27798f17f567ad065f8a99effcb287bc241df7b450330ef890d192c70528e62b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     if( pExpr->op==TK_COLLATE ){",
          "81:       pDup = sqlite3ExprAddCollateString(pParse, pDup, pExpr->u.zToken);",
          "82:     }",
          "",
          "[Removed Lines]",
          "83:     ExprSetProperty(pDup, EP_Alias);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00885742712b5f54866b74c167b3cb9597850789",
      "candidate_info": {
        "commit_hash": "00885742712b5f54866b74c167b3cb9597850789",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00885742712b5f54866b74c167b3cb9597850789",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/filterfault.test"
        ],
        "message": "Fix a memory leak that could follow an OOM in the new FILTER code.\n\nFossilOrigin-Name: 85fd70fead834aed16cffbea892b2255b4e10dd677f4dbbb96062d5ff42efdeb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/filterfault.test||test/filterfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c80e81d01abde9a5032cdc1a492d0fccd8db139f78d2db9413a60cfdc8e0f64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "1746: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:   }else{",
          "1746:     sqlite3ExprDelete(pParse->db, F);",
          "",
          "---------------"
        ],
        "test/filterfault.test||test/filterfault.test": [
          "File: test/filterfault.test -> test/filterfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filterfault",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b, c, d);",
          "25:   INSERT INTO t1 VALUES(1, 2, 3, 4);",
          "26:   INSERT INTO t1 VALUES(5, 6, 7, 8);",
          "27:   INSERT INTO t1 VALUES(9, 10, 11, 12);",
          "28: }",
          "29: faultsim_save_and_close",
          "31: do_faultsim_test 1 -faults oom-t* -prep {",
          "32:   faultsim_restore_and_reopen",
          "33: } -body {",
          "34:   execsql {",
          "35:     SELECT sum(a) FILTER (WHERE b<5),",
          "36:            count() FILTER (WHERE d!=c)",
          "37:       FROM t1 GROUP BY c ORDER BY 1;",
          "38:   }",
          "39: } -test {",
          "40:   faultsim_test_result {0 {{} 1 {} 1 1 1}}",
          "41: }",
          "44: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
      "candidate_info": {
        "commit_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae3977a8f30bb859b858c36d03f07319ba210615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix the xfer optimization for generated columns, so that VACUUM works again.\n\nFossilOrigin-Name: 8f67b89b04622c1509dc102a83be7a80057dc791625804fc2c294089c98b97e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2290:     }",
          "2291: #endif",
          "2292:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2294:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2292:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2293:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2295:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300:     }",
          "2303:       assert( pDestCol->pDflt==0 || pDestCol->pDflt->op==TK_SPAN );",
          "2304:       assert( pSrcCol->pDflt==0 || pSrcCol->pDflt->op==TK_SPAN );",
          "2305:       if( (pDestCol->pDflt==0)!=(pSrcCol->pDflt==0)",
          "",
          "[Removed Lines]",
          "2302:     if( i>0 ){",
          "",
          "[Added Lines]",
          "2306:     if( (pDestCol->colFlags & COLFLAG_GENERATED)==0 && i>0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2310:       }",
          "2311:     }",
          "2312:   }",
          "2313:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2314:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2317:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2318:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2320:       }",
          "2321:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c794b15a0704dabe5be9265ff77f67f35b9c24d",
      "candidate_info": {
        "commit_hash": "2c794b15a0704dabe5be9265ff77f67f35b9c24d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c794b15a0704dabe5be9265ff77f67f35b9c24d",
        "files": [
          "ext/misc/blobio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the blobio.c extension module implementing readblob() and writeblob(). Experimental.\n\nFossilOrigin-Name: e3fde56da46e9592143b8beeee5eba4d74b8ef67edb7bf73a85edd2e0f7a8d21",
        "before_after_code_files": [
          "ext/misc/blobio.c||ext/misc/blobio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/blobio.c||ext/misc/blobio.c": [
          "File: ext/misc/blobio.c -> ext/misc/blobio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"sqlite3ext.h\"",
          "28: SQLITE_EXTENSION_INIT1",
          "29: #include <assert.h>",
          "30: #include <string.h>",
          "32: static void readblobFunc(",
          "33:   sqlite3_context *context,",
          "34:   int argc,",
          "35:   sqlite3_value **argv",
          "36: ){",
          "37:   sqlite3_blob *pBlob = 0;",
          "38:   const char *zSchema;",
          "39:   const char *zTable;",
          "40:   const char *zColumn;",
          "41:   sqlite3_int64 iRowid;",
          "42:   int iOfst;",
          "43:   unsigned char *aData;",
          "44:   int nData;",
          "45:   sqlite3 *db;",
          "46:   int rc;",
          "48:   zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "49:   zTable = (const char*)sqlite3_value_text(argv[1]);",
          "50:   if( zTable==0 ){",
          "51:     sqlite3_result_error(context, \"bad table name\", -1);",
          "52:     return;",
          "53:   }",
          "54:   zColumn = (const char*)sqlite3_value_text(argv[2]);",
          "55:   if( zTable==0 ){",
          "56:     sqlite3_result_error(context, \"bad column name\", -1);",
          "57:     return;",
          "58:   }",
          "59:   iRowid = sqlite3_value_int64(argv[3]);",
          "60:   iOfst = sqlite3_value_int(argv[4]);",
          "61:   nData = sqlite3_value_int(argv[5]);",
          "62:   if( nData<=0 ) return;",
          "63:   aData = sqlite3_malloc64( nData+1 );",
          "64:   if( aData==0 ){",
          "65:     sqlite3_result_error_nomem(context);",
          "66:     return;",
          "67:   }",
          "68:   db = sqlite3_context_db_handle(context);",
          "69:   rc = sqlite3_blob_open(db, zSchema, zTable, zColumn, iRowid, 0, &pBlob);",
          "70:   if( rc ){",
          "71:     sqlite3_free(aData);",
          "72:     sqlite3_result_error(context, \"cannot open BLOB pointer\", -1);",
          "73:     return;",
          "74:   }",
          "75:   rc = sqlite3_blob_read(pBlob, aData, nData, iOfst);",
          "76:   sqlite3_blob_close(pBlob);",
          "77:   if( rc ){",
          "78:     sqlite3_free(aData);",
          "79:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "80:   }else{",
          "81:     sqlite3_result_blob(context, aData, nData, sqlite3_free);",
          "82:   }",
          "83: }",
          "85: static void writeblobFunc(",
          "86:   sqlite3_context *context,",
          "87:   int argc,",
          "88:   sqlite3_value **argv",
          "89: ){",
          "90:   sqlite3_blob *pBlob = 0;",
          "91:   const char *zSchema;",
          "92:   const char *zTable;",
          "93:   const char *zColumn;",
          "94:   sqlite3_int64 iRowid;",
          "95:   int iOfst;",
          "96:   unsigned char *aData;",
          "97:   int nData;",
          "98:   sqlite3 *db;",
          "99:   int rc;",
          "101:   zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "102:   zTable = (const char*)sqlite3_value_text(argv[1]);",
          "103:   if( zTable==0 ){",
          "104:     sqlite3_result_error(context, \"bad table name\", -1);",
          "105:     return;",
          "106:   }",
          "107:   zColumn = (const char*)sqlite3_value_text(argv[2]);",
          "108:   if( zTable==0 ){",
          "109:     sqlite3_result_error(context, \"bad column name\", -1);",
          "110:     return;",
          "111:   }",
          "112:   iRowid = sqlite3_value_int64(argv[3]);",
          "113:   iOfst = sqlite3_value_int(argv[4]);",
          "114:   if( sqlite3_value_type(argv[5])!=SQLITE_BLOB ){",
          "115:     sqlite3_result_error(context, \"6th argument must be a BLOB\", -1);",
          "116:     return;",
          "117:   }",
          "118:   nData = sqlite3_value_bytes(argv[5]);",
          "119:   aData = (unsigned char *)sqlite3_value_blob(argv[5]);",
          "120:   db = sqlite3_context_db_handle(context);",
          "121:   rc = sqlite3_blob_open(db, zSchema, zTable, zColumn, iRowid, 1, &pBlob);",
          "122:   if( rc ){",
          "123:     sqlite3_result_error(context, \"cannot open BLOB pointer\", -1);",
          "124:     return;",
          "125:   }",
          "126:   rc = sqlite3_blob_write(pBlob, aData, nData, iOfst);",
          "127:   sqlite3_blob_close(pBlob);",
          "128:   if( rc ){",
          "129:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "130:   }",
          "131: }",
          "134: #ifdef _WIN32",
          "135: __declspec(dllexport)",
          "136: #endif",
          "137: int sqlite3_blobio_init(",
          "138:   sqlite3 *db,",
          "139:   char **pzErrMsg,",
          "140:   const sqlite3_api_routines *pApi",
          "141: ){",
          "142:   int rc = SQLITE_OK;",
          "143:   SQLITE_EXTENSION_INIT2(pApi);",
          "145:   rc = sqlite3_create_function(db, \"readblob\", 6, SQLITE_UTF8, 0,",
          "146:                                readblobFunc, 0, 0);",
          "147:   if( rc==SQLITE_OK ){",
          "148:     rc = sqlite3_create_function(db, \"writeblob\", 6, SQLITE_UTF8, 0,",
          "149:                                writeblobFunc, 0, 0);",
          "150:   }",
          "151:   return rc;",
          "152: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5b8c44cd39c529e8adbc51f67088409e963515b988868856120a59e6c7160210",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af8664020a8f01e275e9237082d570fd25978eef",
      "candidate_info": {
        "commit_hash": "af8664020a8f01e275e9237082d570fd25978eef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af8664020a8f01e275e9237082d570fd25978eef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/affinity2.test"
        ],
        "message": "Fix a false-positive in sqlite3ExprNeedsNoAffinityChange(). Ticket [ac184eb571d5e6e0]\n\nFossilOrigin-Name: e62eddbb048cbc2c15cb8eeb5b7a907e7cb08c21a27ebba96a069f62dbcb0f30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160: int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){",
          "2161:   u8 op;",
          "2162:   if( aff==SQLITE_AFF_BLOB ) return 1;",
          "2164:   op = p->op;",
          "2165:   if( op==TK_REGISTER ) op = p->op2;",
          "2166:   switch( op ){",
          "",
          "[Removed Lines]",
          "2163:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){ p = p->pLeft; }",
          "",
          "[Added Lines]",
          "2162:   int unaryMinus = 0;",
          "2164:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){",
          "2165:     if( p->op==TK_UMINUS ) unaryMinus = 1;",
          "2166:     p = p->pLeft;",
          "2167:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2171:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "2172:     }",
          "2173:     case TK_STRING: {",
          "2175:     }",
          "2176:     case TK_BLOB: {",
          "2178:     }",
          "2179:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "2174:       return aff==SQLITE_AFF_TEXT;",
          "2177:       return 1;",
          "",
          "[Added Lines]",
          "2178:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "2181:       return !unaryMinus;",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: # 2019-08-22 ticket https://sqlite.org/src/info/d99f1ffe836c591ac57f",
          "89: # False positive in sqlite3ExprNeedsNoAffinityChange()",
          "90: #",
          "91: do_execsql_test 500 {",
          "92:   DROP TABLE IF EXISTS t0;",
          "93:   CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
          "94:   INSERT INTO t0(c0) VALUES (-1);",
          "95:   SELECT quote(- x'ce'), quote(t0.c0), quote(- x'ce' >= t0.c0) FROM t0;",
          "96: } {0 '-1' 1}",
          "97: do_execsql_test 501 {",
          "98:   SELECT * FROM t0 WHERE - x'ce' >= t0.c0;",
          "99: } {-1 {}}",
          "100: do_execsql_test 502 {",
          "101:   SELECT quote(+-+x'ce'), quote(t0.c0), quote(+-+x'ce' >= t0.c0) FROM t0;",
          "102: } {0 '-1' 1}",
          "103: do_execsql_test 503 {",
          "104:   SELECT * FROM t0 WHERE +-+x'ce' >= t0.c0;",
          "105: } {-1 {}}",
          "106: do_execsql_test 504 {",
          "107:   SELECT quote(- 'ce'), quote(t0.c0), quote(- 'ce' >= t0.c0) FROM t0;",
          "108: } {0 '-1' 1}",
          "109: do_execsql_test 505 {",
          "110:   SELECT * FROM t0 WHERE - 'ce' >= t0.c0;",
          "111: } {-1 {}}",
          "112: do_execsql_test 506 {",
          "113:   SELECT quote(+-+'ce'), quote(t0.c0), quote(+-+'ce' >= t0.c0) FROM t0;",
          "114: } {0 '-1' 1}",
          "115: do_execsql_test 507 {",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}