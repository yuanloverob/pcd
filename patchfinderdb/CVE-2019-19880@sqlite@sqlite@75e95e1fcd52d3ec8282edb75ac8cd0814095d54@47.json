{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5da9356e0295c97a86dc986131de475a0fd35cb",
      "candidate_info": {
        "commit_hash": "e5da9356e0295c97a86dc986131de475a0fd35cb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5da9356e0295c97a86dc986131de475a0fd35cb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Update fuzzcheck so that with the --load-dbsql options it screens its inputs to ensure that they are valid dbsqlfuzz cases.  Add new dbsqlfuzz finds to the test/fuzzdata8.db database.\n\nFossilOrigin-Name: 004f7d9bbeee049c22a7e1c82c6cc0ea79a237967de3ff57686acea3060d5f45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3ea1a822d3a110f4f186f2fc8550f435c8c98635d058096b7be9d4df7066b8b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   return 0;",
          "871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875: static void isDbSqlFunc(",
          "876:   sqlite3_context *context,",
          "877:   int argc,",
          "878:   sqlite3_value **argv",
          "879: ){",
          "880:   int n = sqlite3_value_bytes(argv[0]);",
          "881:   unsigned char *a = (unsigned char*)sqlite3_value_blob(argv[0]);",
          "882:   sqlite3_result_int(context, a!=0 && n>0 && isDbSql(a,n));",
          "883: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1173:   int rc;",
          "1175:      \"BEGIN;\\n\"",
          "1176:      \"CREATE TEMP TABLE dbx AS SELECT DISTINCT dbcontent FROM db;\\n\"",
          "1177:      \"DELETE FROM db;\\n\"",
          "1178:      \"INSERT INTO db(dbid, dbcontent) \"",
          "1179:         \" SELECT NULL, dbcontent FROM dbx ORDER BY 2;\\n\"",
          "1180:      \"DROP TABLE dbx;\\n\"",
          "1182:      \"DELETE FROM xsql;\\n\"",
          "1183:      \"INSERT INTO xsql(sqlid,sqltext) \"",
          "1184:         \" SELECT NULL, sqltext FROM sx ORDER BY 2;\\n\"",
          "1185:      \"DROP TABLE sx;\\n\"",
          "1186:      \"COMMIT;\\n\"",
          "1187:      \"PRAGMA page_size=1024;\\n\"",
          "1189:   if( rc ) fatalError(\"cannot rebuild: %s\", sqlite3_errmsg(db));",
          "1190: }",
          "",
          "[Removed Lines]",
          "1172: static void rebuild_database(sqlite3 *db){",
          "1174:   rc = sqlite3_exec(db,",
          "1181:      \"CREATE TEMP TABLE sx AS SELECT DISTINCT sqltext FROM xsql;\\n\"",
          "1188:      \"VACUUM;\\n\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "1183: static void rebuild_database(sqlite3 *db, int dbSqlOnly){",
          "1185:   char *zSql;",
          "1186:   zSql = sqlite3_mprintf(",
          "1193:      \"CREATE TEMP TABLE sx AS SELECT DISTINCT sqltext FROM xsql %s;\\n\"",
          "1200:      \"VACUUM;\\n\",",
          "1201:      dbSqlOnly ? \" WHERE isdbsql(sqltext)\" : \"\"",
          "1202:   );",
          "1203:   rc = sqlite3_exec(db, zSql, 0, 0, 0);",
          "1204:   sqlite3_free(zSql);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1279: \"  --limit-vdbe         Panic if any test runs for more than 100,000 cycles\\n\"",
          "1280: \"  --load-sql ARGS...   Load SQL scripts fron files into SOURCE-DB\\n\"",
          "1281: \"  --load-db ARGS...    Load template databases from files into SOURCE_DB\\n\"",
          "1282: \"  -m TEXT              Add a description to the database\\n\"",
          "1283: \"  --native-vfs         Use the native VFS for initially empty database files\\n\"",
          "1284: \"  --native-malloc      Turn off MEMSYS3/5 and Lookaside\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298: \"  --load-dbsql ARGS..  Load dbsqlfuzz outputs into the xsql table\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1361:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1362:         zExpDb = argv[++i];",
          "1363:       }else",
          "1365:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1366:         zExpSql = argv[++i];",
          "1367:       }else",
          "",
          "[Removed Lines]",
          "1364:       if( strcmp(z,\"export-sql\")==0 ){",
          "",
          "[Added Lines]",
          "1382:       if( strcmp(z,\"export-sql\")==0 || strcmp(z,\"export-dbsql\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1396:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1397:         break;",
          "1398:       }else",
          "1399:       if( strcmp(z,\"m\")==0 ){",
          "1400:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1401:         zMsg = argv[++i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:       if( strcmp(z,\"load-dbsql\")==0 ){",
          "1418:         zInsSql = \"INSERT INTO xsql(sqltext)VALUES(CAST(readfile(?1) AS text))\";",
          "1419:         iFirstInsArg = i+1;",
          "1420:         openFlags4Data = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;",
          "1421:         dbSqlOnly = 1;",
          "1422:         break;",
          "1423:       }else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1577:     if( zInsSql ){",
          "1578:       sqlite3_create_function(db, \"readfile\", 1, SQLITE_UTF8, 0,",
          "1579:                               readfileFunc, 0, 0);",
          "1580:       rc = sqlite3_prepare_v2(db, zInsSql, -1, &pStmt, 0);",
          "1581:       if( rc ) fatalError(\"cannot prepare statement [%s]: %s\",",
          "1582:                           zInsSql, sqlite3_errmsg(db));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:       sqlite3_create_function(db, \"isdbsql\", 1, SQLITE_UTF8, 0,",
          "1606:                               isDbSqlFunc, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1592:       rc = sqlite3_exec(db, \"COMMIT\", 0, 0, 0);",
          "1593:       if( rc ) fatalError(\"cannot commit the transaction: %s\",",
          "1594:                           sqlite3_errmsg(db));",
          "1596:       sqlite3_close(db);",
          "1597:       return 0;",
          "1598:     }",
          "",
          "[Removed Lines]",
          "1595:       rebuild_database(db);",
          "",
          "[Added Lines]",
          "1622:       rebuild_database(db, dbSqlOnly);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1679:         printf(\"%s: rebuilding... \", zDbName);",
          "1680:         fflush(stdout);",
          "1681:       }",
          "1683:       if( !quietFlag ) printf(\"done\\n\");",
          "1684:     }",
          "",
          "[Removed Lines]",
          "1682:       rebuild_database(db);",
          "",
          "[Added Lines]",
          "1709:       rebuild_database(db, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
      "candidate_info": {
        "commit_hash": "8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/orderbyA.test",
          "test/tkt-b75a9ca6b0.test"
        ],
        "message": "Allow SQLite to omit redundant ORDER BY sorts in the case where a SELECT statement has GROUP BY and ORDER BY clauses that use the same expressions, even when the ORDER BY expressions are marked \"DESC\".\n\nFossilOrigin-Name: 20f7951bb238ddc0b8932a55145df426b6fdf7b8631e069345902c853c90f191",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/orderbyA.test||test/orderbyA.test",
          "test/tkt-b75a9ca6b0.test||test/tkt-b75a9ca6b0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c17078af6046ba3cb0d7819c915a800c851d7368e13d149140db2a124df32bab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6223:       }",
          "6224:       assert( 66==sqlite3LogEst(100) );",
          "6225:       if( p->nSelectRow>66 ) p->nSelectRow = 66;",
          "6226:     }else{",
          "6227:       assert( 0==sqlite3LogEst(1) );",
          "6228:       p->nSelectRow = 0;",
          "6229:     }",
          "6244:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "6239:     if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6240:       orderByGrp = 1;",
          "6241:     }",
          "",
          "[Added Lines]",
          "6235:       if( sSort.pOrderBy && pGroupBy->nExpr==sSort.pOrderBy->nExpr ){",
          "6236:         int i;",
          "6242:         for(i=0; i<pGroupBy->nExpr; i++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[i].sortFlags = sortFlags;",
          "6245:         }",
          "6246:         if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6247:           orderByGrp = 1;",
          "6248:         }",
          "6249:       }",
          "",
          "---------------"
        ],
        "test/orderbyA.test||test/orderbyA.test": [
          "File: test/orderbyA.test -> test/orderbyA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-09-21",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "13: # Specifically, it tests cases where the expressions in a GROUP BY",
          "14: # clause are the same as those in the ORDER BY clause.",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set ::testprefix orderbyA",
          "21: proc do_sortcount_test {tn sql cnt res} {",
          "22:   set eqp [execsql \"EXPLAIN QUERY PLAN $sql\"]",
          "23:   set rcnt [regexp -all {USE TEMP} $eqp]",
          "24:   uplevel [list do_test         $tn.1 [list set {} $rcnt] $cnt]",
          "25:   uplevel [list do_execsql_test $tn.2 $sql $res]",
          "26: }",
          "28: do_execsql_test 1.0 {",
          "29:   CREATE TABLE t1(a, b, c);",
          "30:   INSERT INTO t1 VALUES('one',   1, 11);",
          "31:   INSERT INTO t1 VALUES('three', 7, 11);",
          "32:   INSERT INTO t1 VALUES('one',   2, 11);",
          "33:   INSERT INTO t1 VALUES('one',   3, 11);",
          "34:   INSERT INTO t1 VALUES('two',   4, 11);",
          "35:   INSERT INTO t1 VALUES('two',   6, 11);",
          "36:   INSERT INTO t1 VALUES('three', 8, 11);",
          "37:   INSERT INTO t1 VALUES('two',   5, 11);",
          "38:   INSERT INTO t1 VALUES('three', 9, 11);",
          "39: }",
          "41: foreach {tn idx} {",
          "42:   1 {}",
          "43:   2 {CREATE INDEX i1 ON t1(a)}",
          "44:   3 {CREATE INDEX i1 ON t1(a DESC)}",
          "45: } {",
          "46:   execsql { DROP INDEX IF EXISTS i1 }",
          "47:   execsql $idx",
          "49:   # $match is the number of temp-table sorts we expect if the GROUP BY",
          "50:   # can use the same sort order as the ORDER BY. $nomatch is the number",
          "51:   # of expected sorts if the GROUP BY and ORDER BY are not compatible.",
          "52:   set match   1",
          "53:   set nomatch 2",
          "54:   if {$tn>=2} {",
          "55:     set match   0",
          "56:     set nomatch 1",
          "57:   }",
          "59:   do_sortcount_test 1.$tn.1.1 {",
          "60:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a",
          "61:   } $match {one 6 three 24 two 15}",
          "62:   do_sortcount_test 1.$tn.1.2 {",
          "63:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a DESC",
          "64:   } $match {two 15 three 24 one 6}",
          "66:   do_sortcount_test 1.$tn.2.1 {",
          "67:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a||''",
          "68:   } $nomatch {one 6 three 24 two 15}",
          "69:   do_sortcount_test 1.$tn.2.2 {",
          "70:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a||'' DESC",
          "71:   } $nomatch {two 15 three 24 one 6}",
          "73:   do_sortcount_test 1.$tn.3.1 {",
          "74:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a NULLS LAST",
          "75:   } $nomatch {one 6 three 24 two 15}",
          "76:   do_sortcount_test 1.$tn.3.2 {",
          "77:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a DESC NULLS FIRST",
          "78:   } $nomatch {two 15 three 24 one 6}",
          "79: }",
          "81: #-------------------------------------------------------------------------",
          "82: do_execsql_test 2.0 {",
          "83:   CREATE TABLE t2(a, b, c);",
          "84:   INSERT INTO t2 VALUES(1, 'one', 1);",
          "85:   INSERT INTO t2 VALUES(1, 'two', 2);",
          "86:   INSERT INTO t2 VALUES(1, 'one', 3);",
          "87:   INSERT INTO t2 VALUES(1, 'two', 4);",
          "88:   INSERT INTO t2 VALUES(1, 'one', 5);",
          "89:   INSERT INTO t2 VALUES(1, 'two', 6);",
          "91:   INSERT INTO t2 VALUES(2, 'one', 7);",
          "92:   INSERT INTO t2 VALUES(2, 'two', 8);",
          "93:   INSERT INTO t2 VALUES(2, 'one', 9);",
          "94:   INSERT INTO t2 VALUES(2, 'two', 10);",
          "95:   INSERT INTO t2 VALUES(2, 'one', 11);",
          "96:   INSERT INTO t2 VALUES(2, 'two', 12);",
          "98:   INSERT INTO t2 VALUES(NULL, 'one', 13);",
          "99:   INSERT INTO t2 VALUES(NULL, 'two', 14);",
          "100:   INSERT INTO t2 VALUES(NULL, 'one', 15);",
          "101:   INSERT INTO t2 VALUES(NULL, 'two', 16);",
          "102:   INSERT INTO t2 VALUES(NULL, 'one', 17);",
          "103:   INSERT INTO t2 VALUES(NULL, 'two', 18);",
          "104: }",
          "106: foreach {tn idx} {",
          "107:   1 {}",
          "109:   2 { CREATE INDEX i2 ON t2(a, b)           }",
          "110:   3 { CREATE INDEX i2 ON t2(a DESC, b DESC) }",
          "112:   4 { CREATE INDEX i2 ON t2(a, b DESC)      }",
          "113:   5 { CREATE INDEX i2 ON t2(a DESC, b)      }",
          "114: } {",
          "115:   execsql { DROP INDEX IF EXISTS i2 }",
          "116:   execsql $idx",
          "119:   set nSort [expr ($tn==2 || $tn==3) ? 0 : 1]",
          "120:   do_sortcount_test 2.$tn.1.1 {",
          "121:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b;",
          "122:   } $nSort {{} one 45  {} two 48  1 one 9  1 two 12  2 one 27  2 two 30}",
          "123:   do_sortcount_test 2.$tn.1.2 {",
          "124:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b DESC;",
          "125:   } $nSort {2 two 30  2 one 27  1 two 12  1 one 9  {} two 48  {} one 45}",
          "127:   set nSort [expr ($tn==4 || $tn==5) ? 0 : 1]",
          "128:   do_sortcount_test 2.$tn.2.1 {",
          "129:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b DESC;",
          "130:   } $nSort { {} two 48  {} one 45  1 two 12  1 one 9  2 two 30 2 one 27 }",
          "131:   do_sortcount_test 2.$tn.2.2 {",
          "132:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b;",
          "133:   } $nSort { 2 one 27  2 two 30  1 one 9  1 two 12  {} one 45 {} two 48 }",
          "135:   # ORDER BY can never piggyback on the GROUP BY sort if it uses",
          "136:   # non-standard NULLS behaviour.",
          "137:   set nSort [expr $tn==1 ? 2 : 1]",
          "138:   do_sortcount_test 2.$tn.3.1 {",
          "139:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b DESC NULLS FIRST;",
          "140:   } $nSort { {} two 48  {} one 45  1 two 12  1 one 9  2 two 30 2 one 27 }",
          "141:   do_sortcount_test 2.$tn.3.2 {",
          "142:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b NULLS LAST;",
          "143:   } $nSort { 2 one 27  2 two 30  1 one 9  1 two 12  {} one 45 {} two 48 }",
          "144: }",
          "147: finish_test",
          "",
          "---------------"
        ],
        "test/tkt-b75a9ca6b0.test||test/tkt-b75a9ca6b0.test": [
          "File: test/tkt-b75a9ca6b0.test -> test/tkt-b75a9ca6b0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   {1 3  2 2  3 1} {$idxscan*$sort}",
          "62:   8 \"SELECT * FROM t1 GROUP BY x, y ORDER BY x DESC, y DESC\"",
          "65:   9 \"SELECT * FROM t1 GROUP BY x, y ORDER BY x ASC, y ASC\"",
          "66:   {1 3  2 2  3 1} {$idxscan}",
          "",
          "[Removed Lines]",
          "63:   {3 1  2 2  1 3} {$idxscan*$sort}",
          "",
          "[Added Lines]",
          "63:   {3 1  2 2  1 3} {$idxscan}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e30c7f369856fdbf4b4040dfaa63b9eab64302f",
      "candidate_info": {
        "commit_hash": "1e30c7f369856fdbf4b4040dfaa63b9eab64302f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e30c7f369856fdbf4b4040dfaa63b9eab64302f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/e_vacuum.test"
        ],
        "message": "Change VACUUM so that it preserves ROWID values.\n\nFossilOrigin-Name: 49e5d11d463de078c2b8a963f5ed436210937e6dfddf06942132db9ec685bfd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97744701c3bd414e6c9d7182639d8c2ce7cf124c4fce625071ae65658ac61713",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2347:       sqlite3RowidConstraint(pParse, onError, pDest);",
          "2348:       sqlite3VdbeJumpHere(v, addr2);",
          "2349:       autoIncStep(pParse, regAutoinc, regRowid);",
          "2351:       addr1 = sqlite3VdbeAddOp2(v, OP_NewRowid, iDest, regRowid);",
          "2352:     }else{",
          "2353:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "",
          "[Removed Lines]",
          "2350:     }else if( pDest->pIndex==0 ){",
          "",
          "[Added Lines]",
          "2350:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_Vacuum) ){",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: #   a database is VACUUMed. Tests e_vacuum-3.1.3 - 3.1.4 show that adding",
          "220: #   an INTEGER PRIMARY KEY column to a table stops this from happening.",
          "221: #",
          "222: do_execsql_test e_vacuum-3.1.1 {",
          "223:   CREATE TABLE t4(x);",
          "224:   INSERT INTO t4(x) VALUES('x');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: #   Update 2019-01-07:  Rowids are now preserved by VACUUM.",
          "223: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: do_execsql_test e_vacuum-3.1.2 {",
          "231:   VACUUM;",
          "232:   SELECT rowid, x FROM t4;",
          "235: do_execsql_test e_vacuum-3.1.3 {",
          "236:   CREATE TABLE t5(x, y INTEGER PRIMARY KEY);",
          "",
          "[Removed Lines]",
          "233: } {1 x 2 z}",
          "",
          "[Added Lines]",
          "235: } {1 x 3 z}",
          "236: # Was: {1 x 2 z}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "010bdb4c7968fa7e50a46633bf359d60b144a33e",
      "candidate_info": {
        "commit_hash": "010bdb4c7968fa7e50a46633bf359d60b144a33e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/010bdb4c7968fa7e50a46633bf359d60b144a33e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Further improvements to parser speed by enlarging lookup tables to eliminate the need to do range checking on the index prior to lookup.\n\nFossilOrigin-Name: 47d3e091ae49eb7947af5abef9b5b96b16b86d349e51fe0677795649be6db473",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bafd872398e58766e996963372c7acc03a1e20a6d39a3867ca45d3ea0ed2ac1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4507:   if( lemp->has_fallback ){",
          "4508:     int mx = lemp->nterminal - 1;",
          "4510:     lemp->tablesize += (mx+1)*szCodeType;",
          "4511:     for(i=0; i<=mx; i++){",
          "4512:       struct symbol *p = lemp->symbols[i];",
          "",
          "[Removed Lines]",
          "4509:     while( mx>0 && lemp->symbols[mx]->fallback==0 ){ mx--; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     if( yy_lookahead[i]!=iLookAhead ){",
          "531: #ifdef YYFALLBACK",
          "535: #ifndef NDEBUG",
          "536:         if( yyTraceFILE ){",
          "537:           fprintf(yyTraceFILE, \"%sFALLBACK %s => %s\\n\",",
          "",
          "[Removed Lines]",
          "533:       if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])",
          "534:              && (iFallback = yyFallback[iLookAhead])!=0 ){",
          "",
          "[Added Lines]",
          "533:       assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );",
          "534:       iFallback = yyFallback[iLookAhead];",
          "535:       if( iFallback!=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "546: #ifdef YYWILDCARD",
          "547:       {",
          "548:         int j = i - iLookAhead + YYWILDCARD;",
          "559: #ifndef NDEBUG",
          "560:           if( yyTraceFILE ){",
          "561:             fprintf(yyTraceFILE, \"%sWILDCARD %s => %s\\n\",",
          "",
          "[Removed Lines]",
          "549:         if(",
          "550: #if YY_SHIFT_MIN+YYWILDCARD<0",
          "551:           j>=0 &&",
          "552: #endif",
          "553: #if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT",
          "554:           j<YY_ACTTAB_COUNT &&",
          "555: #endif",
          "556:           j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) &&",
          "557:           yy_lookahead[j]==YYWILDCARD && iLookAhead>0",
          "558:         ){",
          "",
          "[Added Lines]",
          "550:         assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );",
          "551:         if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac6627327c01a1f9655e7ac33cb3adab45abc761",
      "candidate_info": {
        "commit_hash": "ac6627327c01a1f9655e7ac33cb3adab45abc761",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac6627327c01a1f9655e7ac33cb3adab45abc761",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowA.test"
        ],
        "message": "New test cases for window functions with RANGE BETWEEN and DESC NULLS FIRST.\n\nFossilOrigin-Name: f7002f86c780e279c9f8a6268f317586519c059c9de2115ff6f1cad272570c29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowA.test||test/windowA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39b4cad4a51bb5116d62ffb16ac36d96a9280321b049eb2d008605392f52a459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowA.test||test/windowA.test": [
          "File: test/windowA.test -> test/windowA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowA",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b CHAR(1), d FLOAT);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 'A', 5.4),",
          "27:    (2, 'B', 5.55),",
          "28:    (3, 'C', 8.0),",
          "29:    (4, 'D', 10.25),",
          "30:    (5, 'E', 10.26),",
          "31:    (6, 'N', NULL),",
          "32:    (7, 'N', NULL);",
          "33: } {}",
          "35: do_execsql_test 1.1 {",
          "36:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "37:   WINDOW w1 AS",
          "38:      (ORDER BY d DESC NULLS LAST",
          "39:       RANGE BETWEEN 2.50 PRECEDING AND 2.25 FOLLOWING)",
          "40:   ORDER BY +d DESC NULLS LAST, +a;",
          "41: } [list \\",
          "42:   5 E 10.26 ED   \\",
          "43:   4 D 10.25 EDC  \\",
          "44:   3 C   8.0 EDC  \\",
          "45:   2 B  5.55 CBA  \\",
          "46:   1 A   5.4 BA   \\",
          "47:   6 N  NULL NN   \\",
          "48:   7 N  NULL NN   \\",
          "49: ]",
          "51: do_execsql_test 1.2 {",
          "52:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "53:   WINDOW w1 AS",
          "54:      (ORDER BY d DESC NULLS FIRST",
          "55:       RANGE BETWEEN 2.50 PRECEDING AND 2.25 FOLLOWING)",
          "56:   ORDER BY +d DESC NULLS FIRST, +a;",
          "57: } [list \\",
          "58:   6 N  NULL NN   \\",
          "59:   7 N  NULL NN   \\",
          "60:   5 E 10.26 ED   \\",
          "61:   4 D 10.25 EDC  \\",
          "62:   3 C   8.0 EDC  \\",
          "63:   2 B  5.55 CBA  \\",
          "64:   1 A   5.4 BA   \\",
          "65: ]",
          "67: do_execsql_test 1.3 {",
          "68:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "69:   WINDOW w1 AS",
          "70:      (ORDER BY d DESC NULLS LAST",
          "71:       RANGE BETWEEN 2.50 PRECEDING AND UNBOUNDED FOLLOWING)",
          "72:   ORDER BY +d DESC NULLS LAST, +a;",
          "73: } [list \\",
          "74:   5 E 10.26 EDCBANN  \\",
          "75:   4 D 10.25 EDCBANN  \\",
          "76:   3 C   8.0 EDCBANN  \\",
          "77:   2 B  5.55 CBANN    \\",
          "78:   1 A   5.4 BANN     \\",
          "79:   6 N  NULL NN       \\",
          "80:   7 N  NULL NN       \\",
          "81: ]",
          "83: do_execsql_test 1.4 {",
          "84:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "85:   WINDOW w1 AS",
          "86:      (ORDER BY d DESC NULLS FIRST",
          "87:       RANGE BETWEEN 2.50 PRECEDING AND UNBOUNDED FOLLOWING)",
          "88:   ORDER BY +d DESC NULLS FIRST, +a;",
          "89: } [list \\",
          "90:   6 N  NULL NNEDCBA  \\",
          "91:   7 N  NULL NNEDCBA  \\",
          "92:   5 E 10.26 EDCBA    \\",
          "93:   4 D 10.25 EDCBA    \\",
          "94:   3 C   8.0 EDCBA    \\",
          "95:   2 B  5.55 CBA      \\",
          "96:   1 A   5.4 BA       \\",
          "97: ]",
          "99: do_execsql_test 1.5 {",
          "100:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "101:   WINDOW w1 AS",
          "102:      (ORDER BY d DESC NULLS LAST",
          "103:       RANGE BETWEEN 2.50 PRECEDING AND CURRENT ROW)",
          "104:   ORDER BY +d DESC NULLS LAST, +a;",
          "105: } [list \\",
          "106:   5 E 10.26 E    \\",
          "107:   4 D 10.25 ED   \\",
          "108:   3 C   8.0 EDC  \\",
          "109:   2 B  5.55 CB   \\",
          "110:   1 A   5.4 BA   \\",
          "111:   6 N  NULL NN   \\",
          "112:   7 N  NULL NN   \\",
          "113: ]",
          "115: do_execsql_test 1.6 {",
          "116:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "117:   WINDOW w1 AS",
          "118:      (ORDER BY d DESC NULLS FIRST",
          "119:       RANGE BETWEEN 2.50 PRECEDING AND CURRENT ROW)",
          "120:   ORDER BY +d DESC NULLS FIRST, +a;",
          "121: } [list \\",
          "122:   6 N  NULL NN   \\",
          "123:   7 N  NULL NN   \\",
          "124:   5 E 10.26 E    \\",
          "125:   4 D 10.25 ED   \\",
          "126:   3 C   8.0 EDC  \\",
          "127:   2 B  5.55 CB   \\",
          "128:   1 A   5.4 BA   \\",
          "129: ]",
          "131: do_execsql_test 2.1 {",
          "132:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "133:   WINDOW w1 AS",
          "134:      (ORDER BY d DESC NULLS LAST",
          "135:       RANGE BETWEEN UNBOUNDED PRECEDING AND 2.25 FOLLOWING)",
          "136:   ORDER BY +d DESC NULLS LAST, +a;",
          "137: } [list \\",
          "138:   5 E 10.26 ED       \\",
          "139:   4 D 10.25 EDC      \\",
          "140:   3 C   8.0 EDC      \\",
          "141:   2 B  5.55 EDCBA    \\",
          "142:   1 A   5.4 EDCBA    \\",
          "143:   6 N  NULL EDCBANN  \\",
          "144:   7 N  NULL EDCBANN  \\",
          "145: ]",
          "147: do_execsql_test 2.2 {",
          "148:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "149:   WINDOW w1 AS",
          "150:      (ORDER BY d DESC NULLS FIRST",
          "151:       RANGE BETWEEN UNBOUNDED PRECEDING AND 2.25 FOLLOWING)",
          "152:   ORDER BY +d DESC NULLS FIRST, +a;",
          "153: } [list \\",
          "154:   6 N  NULL NN         \\",
          "155:   7 N  NULL NN         \\",
          "156:   5 E 10.26 NNED       \\",
          "157:   4 D 10.25 NNEDC      \\",
          "158:   3 C   8.0 NNEDC      \\",
          "159:   2 B  5.55 NNEDCBA    \\",
          "160:   1 A   5.4 NNEDCBA    \\",
          "161: ]",
          "163: do_execsql_test 2.3 {",
          "164:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "165:   WINDOW w1 AS",
          "166:      (ORDER BY d DESC NULLS LAST",
          "167:       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)",
          "168:   ORDER BY +d DESC NULLS LAST, +a;",
          "169: } [list \\",
          "170:   5 E 10.26 EDCBANN  \\",
          "171:   4 D 10.25 EDCBANN  \\",
          "172:   3 C   8.0 EDCBANN  \\",
          "173:   2 B  5.55 EDCBANN  \\",
          "174:   1 A   5.4 EDCBANN  \\",
          "175:   6 N  NULL EDCBANN  \\",
          "176:   7 N  NULL EDCBANN  \\",
          "177: ]",
          "179: do_execsql_test 2.4 {",
          "180:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "181:   WINDOW w1 AS",
          "182:      (ORDER BY d DESC NULLS FIRST",
          "183:       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)",
          "184:   ORDER BY +d DESC NULLS FIRST, +a;",
          "185: } [list \\",
          "186:   6 N  NULL NNEDCBA  \\",
          "187:   7 N  NULL NNEDCBA  \\",
          "188:   5 E 10.26 NNEDCBA  \\",
          "189:   4 D 10.25 NNEDCBA  \\",
          "190:   3 C   8.0 NNEDCBA  \\",
          "191:   2 B  5.55 NNEDCBA  \\",
          "192:   1 A   5.4 NNEDCBA  \\",
          "193: ]",
          "195: do_execsql_test 2.5 {",
          "196:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "197:   WINDOW w1 AS",
          "198:      (ORDER BY d DESC NULLS LAST",
          "199:       RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "200:   ORDER BY +d DESC NULLS LAST, +a;",
          "201: } [list \\",
          "202:   5 E 10.26 E        \\",
          "203:   4 D 10.25 ED       \\",
          "204:   3 C   8.0 EDC      \\",
          "205:   2 B  5.55 EDCB     \\",
          "206:   1 A   5.4 EDCBA    \\",
          "207:   6 N  NULL EDCBANN  \\",
          "208:   7 N  NULL EDCBANN  \\",
          "209: ]",
          "211: do_execsql_test 2.6 {",
          "212:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "213:   WINDOW w1 AS",
          "214:      (ORDER BY d DESC NULLS FIRST",
          "215:       RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "216:   ORDER BY +d DESC NULLS FIRST, +a;",
          "217: } [list \\",
          "218:   6 N  NULL NN       \\",
          "219:   7 N  NULL NN       \\",
          "220:   5 E 10.26 NNE      \\",
          "221:   4 D 10.25 NNED     \\",
          "222:   3 C   8.0 NNEDC    \\",
          "223:   2 B  5.55 NNEDCB   \\",
          "224:   1 A   5.4 NNEDCBA  \\",
          "225: ]",
          "228: do_execsql_test 3.1 {",
          "229:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "230:   WINDOW w1 AS",
          "231:      (ORDER BY d DESC NULLS LAST",
          "232:       RANGE BETWEEN CURRENT ROW AND 2.25 FOLLOWING)",
          "233:   ORDER BY +d DESC NULLS LAST, +a;",
          "234: } [list \\",
          "235:   5 E 10.26 ED       \\",
          "236:   4 D 10.25 DC       \\",
          "237:   3 C   8.0 C        \\",
          "238:   2 B  5.55 BA       \\",
          "239:   1 A   5.4 A        \\",
          "240:   6 N  NULL NN       \\",
          "241:   7 N  NULL NN       \\",
          "242: ]",
          "244: do_execsql_test 3.2 {",
          "245:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "246:   WINDOW w1 AS",
          "247:      (ORDER BY d DESC NULLS FIRST",
          "248:       RANGE BETWEEN CURRENT ROW AND 2.25 FOLLOWING)",
          "249:   ORDER BY +d DESC NULLS FIRST, +a;",
          "250: } [list \\",
          "251:   6 N  NULL NN       \\",
          "252:   7 N  NULL NN       \\",
          "253:   5 E 10.26 ED       \\",
          "254:   4 D 10.25 DC       \\",
          "255:   3 C   8.0 C        \\",
          "256:   2 B  5.55 BA       \\",
          "257:   1 A   5.4 A        \\",
          "258: ]",
          "260: do_execsql_test 3.3 {",
          "261:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "262:   WINDOW w1 AS",
          "263:      (ORDER BY d DESC NULLS LAST",
          "264:       RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "265:   ORDER BY +d DESC NULLS LAST, +a;",
          "266: } [list \\",
          "267:   5 E 10.26 EDCBANN  \\",
          "268:   4 D 10.25 DCBANN   \\",
          "269:   3 C   8.0 CBANN    \\",
          "270:   2 B  5.55 BANN     \\",
          "271:   1 A   5.4 ANN      \\",
          "272:   6 N  NULL NN       \\",
          "273:   7 N  NULL NN       \\",
          "274: ]",
          "276: do_execsql_test 3.4 {",
          "277:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "278:   WINDOW w1 AS",
          "279:      (ORDER BY d DESC NULLS FIRST",
          "280:       RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "281:   ORDER BY +d DESC NULLS FIRST, +a;",
          "282: } [list \\",
          "283:   6 N  NULL NNEDCBA  \\",
          "284:   7 N  NULL NNEDCBA  \\",
          "285:   5 E 10.26 EDCBA    \\",
          "286:   4 D 10.25 DCBA     \\",
          "287:   3 C   8.0 CBA      \\",
          "288:   2 B  5.55 BA       \\",
          "289:   1 A   5.4 A        \\",
          "290: ]",
          "292: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}