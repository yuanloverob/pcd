{
  "cve_id": "CVE-2020-11095",
  "cve_desc": "In FreeRDP before version 2.1.2, an out of bound reads occurs resulting in accessing a memory location that is outside of the boundaries of the static array PRIMARY_DRAWING_ORDER_FIELD_BYTES. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
  "patch_info": {
    "commit_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/733ee3208306b1ea32697b356c0215180fc3f049",
    "files": [
      "libfreerdp/core/orders.c",
      "libfreerdp/core/orders.h",
      "libfreerdp/core/update.c"
    ],
    "message": "Fixed invalid access in update_recv_primary_order\n\nCVE-2020-11095 thanks @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
      "libfreerdp/core/orders.h||libfreerdp/core/orders.h",
      "libfreerdp/core/update.c||libfreerdp/core/update.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #define TAG FREERDP_TAG(\"core.orders\")",
      "77: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
      "",
      "[Removed Lines]",
      "46: const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[] = { DSTBLT_ORDER_FIELD_BYTES,",
      "47:                                                 PATBLT_ORDER_FIELD_BYTES,",
      "48:                                                 SCRBLT_ORDER_FIELD_BYTES,",
      "49:                                                 0,",
      "50:                                                 0,",
      "51:                                                 0,",
      "52:                                                 0,",
      "53:                                                 DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
      "54:                                                 MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
      "55:                                                 LINE_TO_ORDER_FIELD_BYTES,",
      "56:                                                 OPAQUE_RECT_ORDER_FIELD_BYTES,",
      "57:                                                 SAVE_BITMAP_ORDER_FIELD_BYTES,",
      "58:                                                 0,",
      "59:                                                 MEMBLT_ORDER_FIELD_BYTES,",
      "60:                                                 MEM3BLT_ORDER_FIELD_BYTES,",
      "61:                                                 MULTI_DSTBLT_ORDER_FIELD_BYTES,",
      "62:                                                 MULTI_PATBLT_ORDER_FIELD_BYTES,",
      "63:                                                 MULTI_SCRBLT_ORDER_FIELD_BYTES,",
      "64:                                                 MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES,",
      "65:                                                 FAST_INDEX_ORDER_FIELD_BYTES,",
      "66:                                                 POLYGON_SC_ORDER_FIELD_BYTES,",
      "67:                                                 POLYGON_CB_ORDER_FIELD_BYTES,",
      "68:                                                 POLYLINE_ORDER_FIELD_BYTES,",
      "69:                                                 0,",
      "70:                                                 FAST_GLYPH_ORDER_FIELD_BYTES,",
      "71:                                                 ELLIPSE_SC_ORDER_FIELD_BYTES,",
      "72:                                                 ELLIPSE_CB_ORDER_FIELD_BYTES,",
      "73:                                                 GLYPH_INDEX_ORDER_FIELD_BYTES };",
      "75: #define PRIMARY_DRAWING_ORDER_COUNT (ARRAYSIZE(PRIMARY_DRAWING_ORDER_FIELD_BYTES))",
      "",
      "[Added Lines]",
      "46: BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid)",
      "47: {",
      "48:  if (pValid)",
      "50:  switch (orderType)",
      "51:  {",
      "52:   case 0:",
      "53:    return DSTBLT_ORDER_FIELD_BYTES;",
      "54:   case 1:",
      "55:    return PATBLT_ORDER_FIELD_BYTES;",
      "56:   case 2:",
      "57:    return SCRBLT_ORDER_FIELD_BYTES;",
      "58:   case 3:",
      "59:    return 0;",
      "60:   case 4:",
      "61:    return 0;",
      "62:   case 5:",
      "63:    return 0;",
      "64:   case 6:",
      "65:    return 0;",
      "66:   case 7:",
      "67:    return DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
      "68:   case 8:",
      "69:    return MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
      "70:   case 9:",
      "71:    return LINE_TO_ORDER_FIELD_BYTES;",
      "72:   case 10:",
      "73:    return OPAQUE_RECT_ORDER_FIELD_BYTES;",
      "74:   case 11:",
      "75:    return SAVE_BITMAP_ORDER_FIELD_BYTES;",
      "76:   case 12:",
      "77:    return 0;",
      "78:   case 13:",
      "79:    return MEMBLT_ORDER_FIELD_BYTES;",
      "80:   case 14:",
      "81:    return MEM3BLT_ORDER_FIELD_BYTES;",
      "82:   case 15:",
      "83:    return MULTI_DSTBLT_ORDER_FIELD_BYTES;",
      "84:   case 16:",
      "85:    return MULTI_PATBLT_ORDER_FIELD_BYTES;",
      "86:   case 17:",
      "87:    return MULTI_SCRBLT_ORDER_FIELD_BYTES;",
      "88:   case 18:",
      "89:    return MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES;",
      "90:   case 19:",
      "91:    return FAST_INDEX_ORDER_FIELD_BYTES;",
      "92:   case 20:",
      "93:    return POLYGON_SC_ORDER_FIELD_BYTES;",
      "94:   case 21:",
      "95:    return POLYGON_CB_ORDER_FIELD_BYTES;",
      "96:   case 22:",
      "97:    return POLYLINE_ORDER_FIELD_BYTES;",
      "98:   case 23:",
      "99:    return 0;",
      "100:   case 24:",
      "101:    return FAST_GLYPH_ORDER_FIELD_BYTES;",
      "102:   case 25:",
      "103:    return ELLIPSE_SC_ORDER_FIELD_BYTES;",
      "104:   case 26:",
      "105:    return ELLIPSE_CB_ORDER_FIELD_BYTES;",
      "106:   case 27:",
      "107:    return GLYPH_INDEX_ORDER_FIELD_BYTES;",
      "108:   default:",
      "109:    if (pValid)",
      "111:    WLog_WARN(TAG, \"Invalid orderType 0x%08X received\", orderType);",
      "112:    return 0;",
      "113:  }",
      "114: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3241: static BOOL update_recv_primary_order(rdpUpdate* update, wStream* s, BYTE flags)",
      "3242: {",
      "3243:  BOOL rc = FALSE;",
      "3244:  rdpContext* context = update->context;",
      "3245:  rdpPrimaryUpdate* primary = update->primary;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3282:  BYTE field;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3263:  if (!check_primary_order_supported(update->log, settings, orderInfo->orderType, orderName))",
      "3264:   return FALSE;",
      "3268:  {",
      "3269:   WLog_Print(update->log, WLOG_ERROR, \"update_read_field_flags() failed\");",
      "3270:   return FALSE;",
      "",
      "[Removed Lines]",
      "3266:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags,",
      "3267:                               PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]))",
      "",
      "[Added Lines]",
      "3306:  field = get_primary_drawing_order_field_bytes(orderInfo->orderType, &rc);",
      "3307:  if (!rc)",
      "3308:   return FALSE;",
      "3310:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags, field))",
      "",
      "---------------"
    ],
    "libfreerdp/core/orders.h||libfreerdp/core/orders.h": [
      "File: libfreerdp/core/orders.h -> libfreerdp/core/orders.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "190: #define CG_GLYPH_UNICODE_PRESENT 0x0010",
      "194: FREERDP_LOCAL BOOL update_recv_order(rdpUpdate* update, wStream* s);",
      "",
      "[Removed Lines]",
      "192: FREERDP_LOCAL extern const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[];",
      "",
      "[Added Lines]",
      "192: FREERDP_LOCAL BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid);",
      "",
      "---------------"
    ],
    "libfreerdp/core/update.c||libfreerdp/core/update.c": [
      "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1087:  orderInfo->controlFlags = ORDER_STANDARD;",
      "1088:  orderInfo->controlFlags |= ORDER_TYPE_CHANGE;",
      "1089:  length += 1;",
      "1091:  length += update_prepare_bounds(context, orderInfo);",
      "1092:  return length;",
      "1093: }",
      "",
      "[Removed Lines]",
      "1090:  length += PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType];",
      "",
      "[Added Lines]",
      "1090:  length += get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1107:  update_write_field_flags(s, orderInfo->fieldFlags, orderInfo->controlFlags,",
      "1109:  update_write_bounds(s, orderInfo);",
      "1110:  Stream_SetPosition(s, position);",
      "1111:  return 0;",
      "",
      "[Removed Lines]",
      "1108:                           PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]);",
      "",
      "[Added Lines]",
      "1108:                           get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
      "candidate_info": {
        "commit_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "files": [
          "winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c"
        ],
        "message": "Fixed TrioParse and trio_length limts.\n\nCVE-2020-4030 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c": [
          "File: winpr/libwinpr/utils/trio/trio.c -> winpr/libwinpr/utils/trio/trio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2729:                                              trio_class_t* self, TRIO_CONST char* string,",
          "2730:                                              trio_flags_t flags, int width, int precision)",
          "2731: {",
          "2733:  int ch;",
          "2735:  assert(VALID(self));",
          "",
          "[Removed Lines]",
          "2732:  int length;",
          "",
          "[Added Lines]",
          "2732:  int length = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2747:  }",
          "2748:  else",
          "2749:  {",
          "2751:   {",
          "2752:    length = trio_length(string);",
          "2753:   }",
          "",
          "[Removed Lines]",
          "2750:   if (precision == 0)",
          "",
          "[Added Lines]",
          "2750:   if (precision <= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4754:   }",
          "4758:    return NULL;",
          "",
          "[Removed Lines]",
          "4757:   if (trio_length(name) >= MAX_USER_NAME)",
          "",
          "[Added Lines]",
          "4757:   if (trio_length_max(name, MAX_USER_NAME) >= MAX_USER_NAME)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c": [
          "File: winpr/libwinpr/utils/trio/triostr.c -> winpr/libwinpr/utils/trio/triostr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <assert.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "28: #include <ctype.h>",
          "29: #include \"triodef.h\"",
          "30: #include \"triostr.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)",
          "330: {",
          "332: }",
          "334: #endif",
          "",
          "[Removed Lines]",
          "331:  return strlen(string);",
          "",
          "[Added Lines]",
          "332:  return trio_length_max(string, INT_MAX);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
      "candidate_info": {
        "commit_hash": "3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
        "files": [
          "libfreerdp/utils/pcap.c"
        ],
        "message": "Fixed pcap cleanup",
        "before_after_code_files": [
          "libfreerdp/utils/pcap.c||libfreerdp/utils/pcap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/utils/pcap.c||libfreerdp/utils/pcap.c": [
          "File: libfreerdp/utils/pcap.c -> libfreerdp/utils/pcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: {",
          "171:  rdpPcap* pcap;",
          "181:  pcap = (rdpPcap*)calloc(1, sizeof(rdpPcap));",
          "182:  if (!pcap)",
          "185:  pcap->name = name;",
          "186:  pcap->write = write;",
          "187:  pcap->record_count = 0;",
          "190:  if (write)",
          "191:  {",
          "",
          "[Removed Lines]",
          "173:  FILE* pcap_fp = fopen(name, write ? \"w+b\" : \"rb\");",
          "175:  if (pcap_fp == NULL)",
          "176:  {",
          "177:   WLog_ERR(TAG, \"opening pcap dump\");",
          "178:   return NULL;",
          "179:  }",
          "183:   goto fail_close;",
          "188:  pcap->fp = pcap_fp;",
          "",
          "[Added Lines]",
          "175:   goto fail;",
          "180:  pcap->fp = fopen(name, write ? \"w+b\" : \"rb\");",
          "182:  if (pcap->fp == NULL)",
          "183:   goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:  return pcap;",
          "213: fail:",
          "217:  return NULL;",
          "218: }",
          "",
          "[Removed Lines]",
          "214:  free(pcap);",
          "215: fail_close:",
          "216:  fclose(pcap_fp);",
          "",
          "[Added Lines]",
          "209:  pcap_close(pcap);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232: void pcap_close(rdpPcap* pcap)",
          "233: {",
          "234:  pcap_flush(pcap);",
          "236:  if (pcap->fp != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:  if (!pcap)",
          "228:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
      "candidate_info": {
        "commit_hash": "f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
        "files": [
          "libfreerdp/gdi/graphics.c"
        ],
        "message": "Reset freed HGDI_DC\n\nCVE-2020-4031 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c": [
          "File: libfreerdp/gdi/graphics.c -> libfreerdp/gdi/graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  if (!gdi_bitmap->bitmap)",
          "94:  {",
          "95:   gdi_DeleteDC(gdi_bitmap->hdc);",
          "96:   return FALSE;",
          "97:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   gdi_bitmap->hdc = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
      "candidate_info": {
        "commit_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/36478d3d0b3d7fa378a875f60170a08e94747226",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Replaced getlogin with getlogin_r",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (!path)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char* uname = getlogin();",
          "",
          "[Added Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "---------------"
        ],
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:  if (!settings->Username && !settings->CredentialsFromStdin && !settings->SmartcardLogon)",
          "1183:  {",
          "1187:   {",
          "1188:    settings->Username = _strdup(login_name);",
          "",
          "[Removed Lines]",
          "1184:   char* login_name = getlogin();",
          "1186:   if (login_name)",
          "",
          "[Added Lines]",
          "1184:   char login_name[MAX_PATH] = { 0 };",
          "1186:   if (getlogin_r(login_name, sizeof(login_name)) == 0)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: BOOL GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize)",
          "202: {",
          "203:  size_t length;",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "210:    length = strlen(login);",
          "212:    if (*nSize >= length)",
          "213:    {",
          "214:     CopyMemory(lpNameBuffer, login, length + 1);",
          "216:    }",
          "217:    else",
          "218:    {",
          "",
          "[Removed Lines]",
          "204:  char* login;",
          "209:    login = getlogin();",
          "215:     return 1;",
          "",
          "[Added Lines]",
          "204:  char login[MAX_PATH];",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "216:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:    break;",
          "236:  }",
          "239: }",
          "241: BOOL GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize)",
          "",
          "[Removed Lines]",
          "238:  return 0;",
          "",
          "[Added Lines]",
          "239:  return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
      "candidate_info": {
        "commit_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/58a3122250d54de3a944c487776bcd4d1da4721e",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
        ],
        "message": "Fixed OOB read in ntlm_av_pair_get\n\nCVE-2020-11097 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include \"../../log.h\"",
          "40: #define TAG WINPR_TAG(\"sspi.NTLM\")",
          "49: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPairList, size_t* pcbAvPairList);",
          "51: static INLINE void ntlm_av_pair_set_id(NTLM_AV_PAIR* pAvPair, UINT16 id)",
          "",
          "[Removed Lines]",
          "42: static const char* const AV_PAIR_STRINGS[] = {",
          "43:  \"MsvAvEOL\",           \"MsvAvNbComputerName\", \"MsvAvNbDomainName\", \"MsvAvDnsComputerName\",",
          "44:  \"MsvAvDnsDomainName\", \"MsvAvDnsTreeName\",    \"MsvAvFlags\",        \"MsvAvTimestamp\",",
          "45:  \"MsvAvRestrictions\",  \"MsvAvTargetName\",     \"MsvChannelBindings\"",
          "46: };",
          "48: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
          "",
          "[Added Lines]",
          "42: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset);",
          "44: static BOOL ntlm_av_pair_check_data(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair, size_t size)",
          "45: {",
          "46:  size_t offset;",
          "47:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR) + size)",
          "48:   return FALSE;",
          "49:  if (!ntlm_av_pair_get_next_offset(pAvPair, cbAvPair, &offset))",
          "50:   return FALSE;",
          "51:  return cbAvPair >= offset;",
          "52: }",
          "54: static const char* get_av_pair_string(UINT16 pair)",
          "55: {",
          "56:  switch (pair)",
          "57:  {",
          "58:   case MsvAvEOL:",
          "59:    return \"MsvAvEOL\";",
          "60:   case MsvAvNbComputerName:",
          "61:    return \"MsvAvNbComputerName\";",
          "62:   case MsvAvNbDomainName:",
          "63:    return \"MsvAvNbDomainName\";",
          "64:   case MsvAvDnsComputerName:",
          "65:    return \"MsvAvDnsComputerName\";",
          "66:   case MsvAvDnsDomainName:",
          "67:    return \"MsvAvDnsDomainName\";",
          "68:   case MsvAvDnsTreeName:",
          "69:    return \"MsvAvDnsTreeName\";",
          "70:   case MsvAvFlags:",
          "71:    return \"MsvAvFlags\";",
          "72:   case MsvAvTimestamp:",
          "73:    return \"MsvAvTimestamp\";",
          "74:   case MsvAvSingleHost:",
          "75:    return \"MsvAvSingleHost\";",
          "76:   case MsvAvTargetName:",
          "77:    return \"MsvAvTargetName\";",
          "78:   case MsvChannelBindings:",
          "79:    return \"MsvChannelBindings\";",
          "80:   default:",
          "81:    return \"UNKNOWN\";",
          "82:  }",
          "83: }",
          "85: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  return TRUE;",
          "71: }",
          "74: {",
          "75:  UINT16 AvId;",
          "77:  Data_Read_UINT16(&pAvPair->AvId, AvId);",
          "80: }",
          "82: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "",
          "[Removed Lines]",
          "73: static INLINE UINT16 ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair)",
          "79:  return AvId;",
          "",
          "[Added Lines]",
          "110: static INLINE BOOL ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair, size_t size, UINT16* pair)",
          "113:  if (!pAvPair || !pair)",
          "114:   return FALSE;",
          "116:  if (size < sizeof(NTLM_AV_PAIR))",
          "117:   return FALSE;",
          "122:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:  return ((PBYTE)pAvPair - (PBYTE)pAvPairList) + sizeof(NTLM_AV_PAIR);",
          "92: }",
          "95: {",
          "96:  UINT16 AvLen;",
          "98:  Data_Read_UINT16(&pAvPair->AvLen, AvLen);",
          "101: }",
          "103: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "104: {",
          "105:  size_t cbAvPair = cbAvPairList;",
          "106:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "",
          "[Removed Lines]",
          "94: static INLINE SIZE_T ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair)",
          "100:  return AvLen;",
          "",
          "[Added Lines]",
          "137: static INLINE BOOL ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pAvLen)",
          "140:  if (!pAvPair)",
          "141:   return FALSE;",
          "143:  if (size < sizeof(NTLM_AV_PAIR))",
          "144:   return FALSE;",
          "149:  return TRUE;",
          "154:  UINT16 pair;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:  WLog_INFO(TAG, \"AV_PAIRs =\");",
          "114:  {",
          "121:   pAvPair = ntlm_av_pair_next(pAvPair, &cbAvPair);",
          "122:  }",
          "",
          "[Removed Lines]",
          "113:  while (pAvPair && ntlm_av_pair_get_id(pAvPair) != MsvAvEOL)",
          "115:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\",",
          "116:             AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)], ntlm_av_pair_get_id(pAvPair),",
          "117:             ntlm_av_pair_get_len(pAvPair));",
          "118:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),",
          "119:                 ntlm_av_pair_get_len(pAvPair));",
          "",
          "[Added Lines]",
          "163:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair) && (pair != MsvAvEOL))",
          "165:   size_t cbLen = 0;",
          "166:   ntlm_av_pair_get_len(pAvPair, cbAvPair, &cbLen);",
          "168:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\", get_av_pair_string(pair), pair);",
          "169:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair), cbLen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:  return (PBYTE)pAvPair + sizeof(NTLM_AV_PAIR);",
          "134: }",
          "137: {",
          "139: }",
          "142: {",
          "146: }",
          "148: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair)",
          "",
          "[Removed Lines]",
          "136: static size_t ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair)",
          "138:  return ntlm_av_pair_get_len(pAvPair) + sizeof(NTLM_AV_PAIR);",
          "141: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "143:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR))",
          "144:   return FALSE;",
          "145:  return cbAvPair >= ntlm_av_pair_get_next_offset(pAvPair);",
          "",
          "[Added Lines]",
          "186: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset)",
          "188:  size_t avLen;",
          "189:  if (!pOffset)",
          "190:   return FALSE;",
          "192:  if (!ntlm_av_pair_get_len(pAvPair, size, &avLen))",
          "193:   return FALSE;",
          "195:  return TRUE;",
          "198: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "200:  return ntlm_av_pair_check_data(pAvPair, cbAvPair, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:  if (!ntlm_av_pair_check(pAvPair, *pcbAvPair))",
          "155:   return NULL;",
          "159:  return (NTLM_AV_PAIR*)((PBYTE)pAvPair + offset);",
          "160: }",
          "",
          "[Removed Lines]",
          "157:  offset = ntlm_av_pair_get_next_offset(pAvPair);",
          "",
          "[Added Lines]",
          "212:  if (!ntlm_av_pair_get_next_offset(pAvPair, *pcbAvPair, &offset))",
          "213:   return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162: NTLM_AV_PAIR* ntlm_av_pair_get(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList, NTLM_AV_ID AvId,",
          "163:                                size_t* pcbAvPairListRemaining)",
          "164: {",
          "165:  size_t cbAvPair = cbAvPairList;",
          "166:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "168:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
          "169:   pAvPair = NULL;",
          "172:  {",
          "175:   if (id == AvId)",
          "176:    break;",
          "177:   if (id == MsvAvEOL)",
          "",
          "[Removed Lines]",
          "171:  while (pAvPair)",
          "173:   UINT16 id = ntlm_av_pair_get_id(pAvPair);",
          "",
          "[Added Lines]",
          "222:  UINT16 id;",
          "229:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &id))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218: static BOOL ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList,",
          "219:                                   NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "220: {",
          "221:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
          "222:   return FALSE;",
          "226: }",
          "228: static int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
          "",
          "[Removed Lines]",
          "224:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, ntlm_av_pair_get_id(pAvPair),",
          "225:                          ntlm_av_pair_get_value_pointer(pAvPair), ntlm_av_pair_get_len(pAvPair));",
          "",
          "[Added Lines]",
          "277:  UINT16 pair;",
          "278:  size_t avLen;",
          "283:  if (!ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair))",
          "284:   return FALSE;",
          "286:  if (!ntlm_av_pair_get_len(pAvPair, cbAvPair, &avLen))",
          "287:   return FALSE;",
          "289:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, pair,",
          "290:                          ntlm_av_pair_get_value_pointer(pAvPair), avLen);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "501:  if (AvNbDomainName)",
          "502:  {",
          "505:  }",
          "507:  if (AvNbComputerName)",
          "508:  {",
          "511:  }",
          "513:  if (AvDnsDomainName)",
          "514:  {",
          "517:  }",
          "519:  if (AvDnsComputerName)",
          "520:  {",
          "523:  }",
          "525:  if (AvDnsTreeName)",
          "526:  {",
          "529:  }",
          "",
          "[Removed Lines]",
          "504:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbDomainName);",
          "510:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbComputerName);",
          "516:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsDomainName);",
          "522:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsComputerName);",
          "528:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsTreeName);",
          "",
          "[Added Lines]",
          "568:   size_t avLen;",
          "569:   if (!ntlm_av_pair_get_len(AvNbDomainName, cbAvNbDomainName, &avLen))",
          "570:    goto fail;",
          "572:   AvPairsValueLength += avLen;",
          "577:   size_t avLen;",
          "578:   if (!ntlm_av_pair_get_len(AvNbComputerName, cbAvNbComputerName, &avLen))",
          "579:    goto fail;",
          "581:   AvPairsValueLength += avLen;",
          "586:   size_t avLen;",
          "587:   if (!ntlm_av_pair_get_len(AvDnsDomainName, cbAvDnsDomainName, &avLen))",
          "588:    goto fail;",
          "590:   AvPairsValueLength += avLen;",
          "595:   size_t avLen;",
          "596:   if (!ntlm_av_pair_get_len(AvDnsComputerName, cbAvDnsComputerName, &avLen))",
          "597:    goto fail;",
          "599:   AvPairsValueLength += avLen;",
          "604:   size_t avLen;",
          "605:   if (!ntlm_av_pair_get_len(AvDnsTreeName, cbAvDnsTreeName, &avLen))",
          "606:    goto fail;",
          "608:   AvPairsValueLength += avLen;",
          "",
          "---------------"
        ]
      }
    }
  ]
}