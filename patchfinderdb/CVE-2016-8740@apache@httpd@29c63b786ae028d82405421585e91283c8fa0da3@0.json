{
  "cve_id": "CVE-2016-8740",
  "cve_desc": "The mod_http2 module in the Apache HTTP Server 2.4.17 through 2.4.23, when the Protocols configuration includes h2 or h2c, does not restrict request-header length, which allows remote attackers to cause a denial of service (memory consumption) via crafted CONTINUATION frames in an HTTP/2 request.",
  "repo": "apache/httpd",
  "patch_hash": "29c63b786ae028d82405421585e91283c8fa0da3",
  "patch_info": {
    "commit_hash": "29c63b786ae028d82405421585e91283c8fa0da3",
    "repo": "apache/httpd",
    "commit_url": "https://github.com/apache/httpd/commit/29c63b786ae028d82405421585e91283c8fa0da3",
    "files": [
      "CHANGES",
      "modules/http2/h2_session.c",
      "modules/http2/h2_stream.c"
    ],
    "message": "SECURITY: CVE-2016-8740\n\nmod_http2: properly crafted, endless HTTP/2 CONTINUATION frames could be used to exhaust all server's memory.\n\nReported by: Naveen Tiwari <naveen.tiwari@asu.edu> and CDF/SEFCOM at Arizona State University\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1772576 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "modules/http2/h2_session.c||modules/http2/h2_session.c",
      "modules/http2/h2_stream.c||modules/http2/h2_stream.c"
    ]
  },
  "patch_diff": {
    "modules/http2/h2_session.c||modules/http2/h2_session.c": [
      "File: modules/http2/h2_session.c -> modules/http2/h2_session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "394:     (void)flags;",
      "395:     stream = get_stream(session, frame->hd.stream_id);",
      "396:     if (!stream) {",
      "398:                       APLOGNO(02920)",
      "399:                       \"h2_session:  stream(%ld-%d): on_header unknown stream\",",
      "400:                       session->id, (int)frame->hd.stream_id);",
      "",
      "[Removed Lines]",
      "397:         ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, session->c,",
      "",
      "[Added Lines]",
      "397:         ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, session->c,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "404:     status = h2_stream_add_header(stream, (const char *)name, namelen,",
      "405:                                   (const char *)value, valuelen);",
      "407:         return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
      "408:     }",
      "409:     return 0;",
      "",
      "[Removed Lines]",
      "406:     if (status != APR_SUCCESS && !h2_stream_is_ready(stream)) {",
      "",
      "[Added Lines]",
      "406:     if (status == APR_ECONNRESET) {",
      "407:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, status, session->c,",
      "408:                       \"h2-stream(%ld-%d): on_header, reset stream\",",
      "409:                       session->id, stream->id);",
      "410:         nghttp2_submit_rst_stream(ngh2, NGHTTP2_FLAG_NONE, stream->id,",
      "411:                                   NGHTTP2_INTERNAL_ERROR);",
      "412:     }",
      "413:     else if (status != APR_SUCCESS && !h2_stream_is_ready(stream)) {",
      "",
      "---------------"
    ],
    "modules/http2/h2_stream.c||modules/http2/h2_stream.c": [
      "File: modules/http2/h2_stream.c -> modules/http2/h2_stream.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "333:                                   const char *name, size_t nlen,",
      "334:                                   const char *value, size_t vlen)",
      "335: {",
      "336:     ap_assert(stream);",
      "351:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
      "353:                           stream->session->id, stream->id, name);",
      "356:         }",
      "369:         }",
      "370:     }",
      "372:     if (h2_stream_is_scheduled(stream)) {",
      "373:         return add_trailer(stream, name, nlen, value, vlen);",
      "374:     }",
      "375:     else {",
      "376:         if (!stream->rtmp) {",
      "377:             stream->rtmp = h2_req_create(stream->id, stream->pool,",
      "",
      "[Removed Lines]",
      "338:     if (!stream->has_response) {",
      "339:         if (name[0] == ':') {",
      "340:             if ((vlen) > stream->session->s->limit_req_line) {",
      "342:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
      "343:                               \"h2_stream(%ld-%d): pseudo header %s too long\",",
      "344:                               stream->session->id, stream->id, name);",
      "345:                 return h2_stream_set_error(stream,",
      "346:                                            HTTP_REQUEST_URI_TOO_LARGE);",
      "347:             }",
      "348:         }",
      "349:         else if ((nlen + 2 + vlen) > stream->session->s->limit_req_fieldsize) {",
      "352:                           \"h2_stream(%ld-%d): header %s too long\",",
      "354:             return h2_stream_set_error(stream,",
      "355:                                        HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);",
      "358:         if (name[0] != ':') {",
      "359:             ++stream->request_headers_added;",
      "360:             if (stream->request_headers_added",
      "361:                 > stream->session->s->limit_req_fields) {",
      "363:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
      "364:                               \"h2_stream(%ld-%d): too many header lines\",",
      "365:                               stream->session->id, stream->id);",
      "366:                 return h2_stream_set_error(stream,",
      "367:                                            HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);",
      "368:             }",
      "",
      "[Added Lines]",
      "336:     int error = 0;",
      "339:     if (stream->has_response) {",
      "340:         return APR_EINVAL;",
      "341:     }",
      "342:     ++stream->request_headers_added;",
      "343:     if (name[0] == ':') {",
      "344:         if ((vlen) > stream->session->s->limit_req_line) {",
      "347:                           \"h2_stream(%ld-%d): pseudo header %s too long\",",
      "349:             error = HTTP_REQUEST_URI_TOO_LARGE;",
      "351:     }",
      "352:     else if ((nlen + 2 + vlen) > stream->session->s->limit_req_fieldsize) {",
      "354:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
      "355:                       \"h2_stream(%ld-%d): header %s too long\",",
      "356:                       stream->session->id, stream->id, name);",
      "357:         error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;",
      "358:     }",
      "360:     if (stream->request_headers_added",
      "361:         > stream->session->s->limit_req_fields + 4) {",
      "363:         if (stream->request_headers_added",
      "364:             > stream->session->s->limit_req_fields + 4 + 100) {",
      "366:             return APR_ECONNRESET;",
      "368:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
      "369:                       \"h2_stream(%ld-%d): too many header lines\",",
      "370:                       stream->session->id, stream->id);",
      "371:         error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;",
      "377:     else if (error) {",
      "378:         return h2_stream_set_error(stream, error);",
      "379:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c671673db96e286e2321d5babf05c767cb76a1ef",
      "candidate_info": {
        "commit_hash": "c671673db96e286e2321d5babf05c767cb76a1ef",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/c671673db96e286e2321d5babf05c767cb76a1ef",
        "files": [
          "CHANGES",
          "modules/http2/h2_session.c",
          "modules/http2/h2_stream.c"
        ],
        "message": "SECURITY: CVE-2016-8740\n\nmod_http2: properly crafted, endless HTTP/2 CONTINUATION frames could be used to exhaust all server's memory.\n\nReported by: Naveen Tiwari <naveen.tiwari@asu.edu> and CDF/SEFCOM at Arizona State University\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1772576 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "modules/http2/h2_session.c||modules/http2/h2_session.c",
          "modules/http2/h2_stream.c||modules/http2/h2_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "modules/http2/h2_session.c||modules/http2/h2_session.c",
            "modules/http2/h2_stream.c||modules/http2/h2_stream.c"
          ],
          "candidate": [
            "modules/http2/h2_session.c||modules/http2/h2_session.c",
            "modules/http2/h2_stream.c||modules/http2/h2_stream.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/http2/h2_session.c||modules/http2/h2_session.c": [
          "File: modules/http2/h2_session.c -> modules/http2/h2_session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:     (void)flags;",
          "395:     stream = get_stream(session, frame->hd.stream_id);",
          "396:     if (!stream) {",
          "398:                       APLOGNO(02920)",
          "399:                       \"h2_session:  stream(%ld-%d): on_header unknown stream\",",
          "400:                       session->id, (int)frame->hd.stream_id);",
          "",
          "[Removed Lines]",
          "397:         ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, session->c,",
          "",
          "[Added Lines]",
          "397:         ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, session->c,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:     status = h2_stream_add_header(stream, (const char *)name, namelen,",
          "405:                                   (const char *)value, valuelen);",
          "407:         return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
          "408:     }",
          "409:     return 0;",
          "",
          "[Removed Lines]",
          "406:     if (status != APR_SUCCESS && !h2_stream_is_ready(stream)) {",
          "",
          "[Added Lines]",
          "406:     if (status == APR_ECONNRESET) {",
          "407:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, status, session->c,",
          "408:                       \"h2-stream(%ld-%d): on_header, reset stream\",",
          "409:                       session->id, stream->id);",
          "410:         nghttp2_submit_rst_stream(ngh2, NGHTTP2_FLAG_NONE, stream->id,",
          "411:                                   NGHTTP2_INTERNAL_ERROR);",
          "412:     }",
          "413:     else if (status != APR_SUCCESS && !h2_stream_is_ready(stream)) {",
          "",
          "---------------"
        ],
        "modules/http2/h2_stream.c||modules/http2/h2_stream.c": [
          "File: modules/http2/h2_stream.c -> modules/http2/h2_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:                                   const char *name, size_t nlen,",
          "334:                                   const char *value, size_t vlen)",
          "335: {",
          "336:     ap_assert(stream);",
          "351:             ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
          "353:                           stream->session->id, stream->id, name);",
          "356:         }",
          "369:         }",
          "370:     }",
          "372:     if (h2_stream_is_scheduled(stream)) {",
          "373:         return add_trailer(stream, name, nlen, value, vlen);",
          "374:     }",
          "375:     else {",
          "376:         if (!stream->rtmp) {",
          "377:             stream->rtmp = h2_req_create(stream->id, stream->pool,",
          "",
          "[Removed Lines]",
          "338:     if (!stream->has_response) {",
          "339:         if (name[0] == ':') {",
          "340:             if ((vlen) > stream->session->s->limit_req_line) {",
          "342:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
          "343:                               \"h2_stream(%ld-%d): pseudo header %s too long\",",
          "344:                               stream->session->id, stream->id, name);",
          "345:                 return h2_stream_set_error(stream,",
          "346:                                            HTTP_REQUEST_URI_TOO_LARGE);",
          "347:             }",
          "348:         }",
          "349:         else if ((nlen + 2 + vlen) > stream->session->s->limit_req_fieldsize) {",
          "352:                           \"h2_stream(%ld-%d): header %s too long\",",
          "354:             return h2_stream_set_error(stream,",
          "355:                                        HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);",
          "358:         if (name[0] != ':') {",
          "359:             ++stream->request_headers_added;",
          "360:             if (stream->request_headers_added",
          "361:                 > stream->session->s->limit_req_fields) {",
          "363:                 ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
          "364:                               \"h2_stream(%ld-%d): too many header lines\",",
          "365:                               stream->session->id, stream->id);",
          "366:                 return h2_stream_set_error(stream,",
          "367:                                            HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);",
          "368:             }",
          "",
          "[Added Lines]",
          "336:     int error = 0;",
          "339:     if (stream->has_response) {",
          "340:         return APR_EINVAL;",
          "341:     }",
          "342:     ++stream->request_headers_added;",
          "343:     if (name[0] == ':') {",
          "344:         if ((vlen) > stream->session->s->limit_req_line) {",
          "347:                           \"h2_stream(%ld-%d): pseudo header %s too long\",",
          "349:             error = HTTP_REQUEST_URI_TOO_LARGE;",
          "351:     }",
          "352:     else if ((nlen + 2 + vlen) > stream->session->s->limit_req_fieldsize) {",
          "354:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
          "355:                       \"h2_stream(%ld-%d): header %s too long\",",
          "356:                       stream->session->id, stream->id, name);",
          "357:         error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;",
          "358:     }",
          "360:     if (stream->request_headers_added",
          "361:         > stream->session->s->limit_req_fields + 4) {",
          "363:         if (stream->request_headers_added",
          "364:             > stream->session->s->limit_req_fields + 4 + 100) {",
          "366:             return APR_ECONNRESET;",
          "368:         ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,",
          "369:                       \"h2_stream(%ld-%d): too many header lines\",",
          "370:                       stream->session->id, stream->id);",
          "371:         error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;",
          "377:     else if (error) {",
          "378:         return h2_stream_set_error(stream, error);",
          "379:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}