{
  "cve_id": "CVE-2020-12062",
  "cve_desc": "The scp client in OpenSSH 8.2 incorrectly sends duplicate responses to the server upon a utimes system call failure, which allows a malicious unprivileged user on the remote server to overwrite arbitrary files in the client's download directory by creating a crafted subdirectory anywhere on the remote server. The victim must use the command scp -rp to download a file hierarchy containing, anywhere inside, this crafted subdirectory. NOTE: the vendor points out that \"this attack can achieve no more than a hostile peer is already able to achieve within the scp protocol\" and \"utimes does not fail under normal circumstances.",
  "repo": "openssh/openssh-portable",
  "patch_hash": "aad87b88fc2536b1ea023213729aaf4eaabe1894",
  "patch_info": {
    "commit_hash": "aad87b88fc2536b1ea023213729aaf4eaabe1894",
    "repo": "openssh/openssh-portable",
    "commit_url": "https://github.com/openssh/openssh-portable/commit/aad87b88fc2536b1ea023213729aaf4eaabe1894",
    "files": [
      "scp.c"
    ],
    "message": "upstream: when receving a file in sink(), be careful to send at\n\nmost a single error response after the file has been opened. Otherwise the\nsource() and sink() can become desyncronised. Reported by Daniel Goujot,\nGeorges-Axel Jaloyan, Ryan Lahfa, and David Naccache.\n\nok deraadt@ markus@\n\nOpenBSD-Commit-ID: 6c14d233c97349cb811a8f7921ded3ae7d9e0035",
    "before_after_code_files": [
      "scp.c||scp.c"
    ]
  },
  "patch_diff": {
    "scp.c||scp.c": [
      "File: scp.c -> scp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "374: void lostconn(int);",
      "375: int okname(char *);",
      "376: void run_err(const char *,...);",
      "377: void verifydir(char *);",
      "379: struct passwd *pwd;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377: int note_err(const char *,...);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1231: {",
      "1232:  static BUF buffer;",
      "1233:  struct stat stb;",
      "1237:  BUF *bp;",
      "1238:  off_t i;",
      "1239:  size_t j, count;",
      "",
      "[Removed Lines]",
      "1234:  enum {",
      "1235:   YES, NO, DISPLAYED",
      "1236:  } wrerr;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1241:  mode_t mode, omode, mask;",
      "1242:  off_t size, statbytes;",
      "1243:  unsigned long long ull;",
      "1245:  char ch, *cp, *np, *targ, *why, *vect[1], buf[2048], visbuf[2048];",
      "1246:  char **patterns = NULL;",
      "1247:  size_t n, npatterns = 0;",
      "",
      "[Removed Lines]",
      "1244:  int setimes, targisdir, wrerrno = 0;",
      "",
      "[Added Lines]",
      "1242:  int setimes, targisdir, wrerr;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1450:    continue;",
      "1451:   }",
      "1452:   cp = bp->buf;",
      "1455:   statbytes = 0;",
      "1456:   if (showprogress)",
      "1457:    start_progress_meter(curfile, size, &statbytes);",
      "",
      "[Removed Lines]",
      "1453:   wrerr = NO;",
      "",
      "[Added Lines]",
      "1451:   wrerr = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1477:    if (count == bp->cnt) {",
      "1480:      if (atomicio(vwrite, ofd, bp->buf,",
      "1481:          count) != count) {",
      "1484:      }",
      "1485:     }",
      "1486:     count = 0;",
      "",
      "[Removed Lines]",
      "1479:     if (wrerr == NO) {",
      "1482:       wrerr = YES;",
      "1483:       wrerrno = errno;",
      "",
      "[Added Lines]",
      "1482:     if (!wrerr) {",
      "1485:       note_err(\"%s: %s\", np,",
      "1486:           strerror(errno));",
      "1487:       wrerr = 1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1488:    }",
      "1489:   }",
      "1490:   unset_nonblock(remin);",
      "1492:       atomicio(vwrite, ofd, bp->buf, count) != count) {",
      "1500:   }",
      "1501:   if (pflag) {",
      "1502:    if (exists || omode != mode)",
      "1503: #ifdef HAVE_FCHMOD",
      "",
      "[Removed Lines]",
      "1491:   if (count != 0 && wrerr == NO &&",
      "1493:    wrerr = YES;",
      "1494:    wrerrno = errno;",
      "1495:   }",
      "1496:   if (wrerr == NO && (!exists || S_ISREG(stb.st_mode)) &&",
      "1497:       ftruncate(ofd, size) != 0) {",
      "1498:    run_err(\"%s: truncate: %s\", np, strerror(errno));",
      "1499:    wrerr = DISPLAYED;",
      "",
      "[Added Lines]",
      "1495:   if (count != 0 && !wrerr &&",
      "1497:    note_err(\"%s: %s\", np, strerror(errno));",
      "1498:    wrerr = 1;",
      "1500:   if (!wrerr && (!exists || S_ISREG(stb.st_mode)) &&",
      "1501:       ftruncate(ofd, size) != 0)",
      "1502:    note_err(\"%s: truncate: %s\", np, strerror(errno));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1506:     if (chmod(np, omode)) {",
      "1509:          np, strerror(errno));",
      "1511:     }",
      "1512:   } else {",
      "1513:    if (!exists && omode != mode)",
      "",
      "[Removed Lines]",
      "1508:      run_err(\"%s: set mode: %s\",",
      "1510:      wrerr = DISPLAYED;",
      "",
      "[Added Lines]",
      "1510:      note_err(\"%s: set mode: %s\",",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1517:     if (chmod(np, omode & ~mask)) {",
      "1520:          np, strerror(errno));",
      "1522:     }",
      "1523:   }",
      "1528:   (void) response();",
      "1529:   if (showprogress)",
      "1530:    stop_progress_meter();",
      "1532:    setimes = 0;",
      "1533:    if (utimes(np, tv) == -1) {",
      "1535:         np, strerror(errno));",
      "1537:    }",
      "1538:   }",
      "1544:    (void) atomicio(vwrite, remout, \"\", 1);",
      "1549:  }",
      "1550: done:",
      "1551:  for (n = 0; n < npatterns; n++)",
      "",
      "[Removed Lines]",
      "1519:      run_err(\"%s: set mode: %s\",",
      "1521:      wrerr = DISPLAYED;",
      "1524:   if (close(ofd) == -1) {",
      "1525:    wrerr = YES;",
      "1526:    wrerrno = errno;",
      "1527:   }",
      "1531:   if (setimes && wrerr == NO) {",
      "1534:     run_err(\"%s: set times: %s\",",
      "1536:     wrerr = DISPLAYED;",
      "1539:   switch (wrerr) {",
      "1540:   case YES:",
      "1541:    run_err(\"%s: %s\", np, strerror(wrerrno));",
      "1542:    break;",
      "1543:   case NO:",
      "1545:    break;",
      "1546:   case DISPLAYED:",
      "1547:    break;",
      "1548:   }",
      "",
      "[Added Lines]",
      "1520:      note_err(\"%s: set mode: %s\",",
      "1524:   if (close(ofd) == -1)",
      "1525:    note_err(np, \"%s: close: %s\", np, strerror(errno));",
      "1529:   if (setimes && !wrerr) {",
      "1532:     note_err(\"%s: set times: %s\",",
      "1537:   if (note_err(NULL) == 0)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1633:  }",
      "1634: }",
      "1636: void",
      "1637: verifydir(char *cp)",
      "1638: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1631: int",
      "1632: note_err(const char *fmt, ...)",
      "1633: {",
      "1634:  static char *emsg;",
      "1635:  va_list ap;",
      "1638:  if (fmt == NULL) {",
      "1639:   if (emsg == NULL)",
      "1640:    return 0;",
      "1641:   run_err(\"%s\", emsg);",
      "1642:   free(emsg);",
      "1643:   emsg = NULL;",
      "1644:   return -1;",
      "1645:  }",
      "1647:  errs++;",
      "1649:  if (emsg != NULL)",
      "1650:   return -1;",
      "1652:  va_start(ap, fmt);",
      "1653:  vasnmprintf(&emsg, INT_MAX, NULL, fmt, ap);",
      "1654:  va_end(ap);",
      "1655:  return -1;",
      "1656: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ad3c3a33ef038b55a14ebd31faeeec46073db2c",
      "candidate_info": {
        "commit_hash": "5ad3c3a33ef038b55a14ebd31faeeec46073db2c",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/5ad3c3a33ef038b55a14ebd31faeeec46073db2c",
        "files": [
          "scp.c"
        ],
        "message": "upstream: Fix error message on close(2) and add printf format\n\nattributes. From Christos Zoulas, OK markus@\n\nOpenBSD-Commit-ID: 41523c999a9e3561fcc7082fd38ea2e0629ee07e",
        "before_after_code_files": [
          "scp.c||scp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "scp.c||scp.c"
          ],
          "candidate": [
            "scp.c||scp.c"
          ]
        }
      },
      "candidate_diff": {
        "scp.c||scp.c": [
          "File: scp.c -> scp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373: BUF *allocbuf(BUF *, int, int);",
          "374: void lostconn(int);",
          "375: int okname(char *);",
          "378: void verifydir(char *);",
          "380: struct passwd *pwd;",
          "",
          "[Removed Lines]",
          "376: void run_err(const char *,...);",
          "377: int note_err(const char *,...);",
          "",
          "[Added Lines]",
          "376: void run_err(const char *,...)",
          "377:     __attribute__((__format__ (printf, 1, 2)))",
          "378:     __attribute__((__nonnull__ (1)));",
          "379: int note_err(const char *,...)",
          "380:     __attribute__((__format__ (printf, 1, 2)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1520:     }",
          "1521:   }",
          "1522:   if (close(ofd) == -1)",
          "1524:   (void) response();",
          "1525:   if (showprogress)",
          "1526:    stop_progress_meter();",
          "",
          "[Removed Lines]",
          "1523:    note_err(np, \"%s: close: %s\", np, strerror(errno));",
          "",
          "[Added Lines]",
          "1526:    note_err(\"%s: close: %s\", np, strerror(errno));",
          "",
          "---------------"
        ]
      }
    }
  ]
}