{
  "cve_id": "CVE-2022-28044",
  "cve_desc": "Irzip v0.640 was discovered to contain a heap memory corruption via the component lrzip.c:initialise_control.",
  "repo": "ckolivas/lrzip",
  "patch_hash": "5faf80cd53ecfd16b636d653483144cd12004f46",
  "patch_info": {
    "commit_hash": "5faf80cd53ecfd16b636d653483144cd12004f46",
    "repo": "ckolivas/lrzip",
    "commit_url": "https://github.com/ckolivas/lrzip/commit/5faf80cd53ecfd16b636d653483144cd12004f46",
    "files": [
      "lrzip.c",
      "main.c"
    ],
    "message": "Fix control->suffix being deallocated as heap memory as reported by Pietro Borrello.",
    "before_after_code_files": [
      "lrzip.c||lrzip.c",
      "main.c||main.c"
    ]
  },
  "patch_diff": {
    "lrzip.c||lrzip.c": [
      "File: lrzip.c -> lrzip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1338:  control->msgerr = stderr;",
      "1339:  register_outputfile(control, control->msgout);",
      "1340:  control->flags = FLAG_SHOW_PROGRESS | FLAG_KEEP_FILES | FLAG_THRESHOLD;",
      "1342:  control->compression_level = 7;",
      "1343:  control->ramsize = get_ram(control);",
      "1344:  if (unlikely(control->ramsize == -1))",
      "",
      "[Removed Lines]",
      "1341:  control->suffix = \".lrz\";",
      "",
      "[Added Lines]",
      "1341:  control->suffix = strdup(\".lrz\");",
      "",
      "---------------"
    ],
    "main.c||main.c": [
      "File: main.c -> main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "458:    if (unlikely(STDOUT))",
      "459:     failure(\"Cannot specify an output filename when outputting to stdout\\n\");",
      "460:    control->outname = optarg;",
      "462:    break;",
      "463:   case 'O':",
      "",
      "[Removed Lines]",
      "461:    control->suffix = \"\";",
      "",
      "[Added Lines]",
      "461:    dealloc(control->suffix);",
      "462:    control->suffix = strdup(\"\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "493:     failure(\"Specified output filename already, can't specify an extension.\\n\");",
      "494:    if (unlikely(STDOUT))",
      "495:     failure(\"Cannot specify a filename suffix when outputting to stdout\\n\");",
      "497:    break;",
      "498:   case 't':",
      "499:    if (control->outname)",
      "",
      "[Removed Lines]",
      "496:    control->suffix = optarg;",
      "",
      "[Added Lines]",
      "497:    dealloc(control->suffix);",
      "498:    control->suffix = strdup(optarg);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23407bc8f7cf4e1bfc23e9c1c65dda441bcd6dc4",
      "candidate_info": {
        "commit_hash": "23407bc8f7cf4e1bfc23e9c1c65dda441bcd6dc4",
        "repo": "ckolivas/lrzip",
        "commit_url": "https://github.com/ckolivas/lrzip/commit/23407bc8f7cf4e1bfc23e9c1c65dda441bcd6dc4",
        "files": [
          "lrzip.c",
          "main.c"
        ],
        "message": "Revert \"Fix control->suffix being deallocated as heap memory as reported by Pietro Borrello.\"\n\nThis reverts commit 5faf80cd53ecfd16b636d653483144cd12004f46.\n\nNo longer needed without liblrzip.",
        "before_after_code_files": [
          "lrzip.c||lrzip.c",
          "main.c||main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lrzip.c||lrzip.c",
            "main.c||main.c"
          ],
          "candidate": [
            "lrzip.c||lrzip.c",
            "main.c||main.c"
          ]
        }
      },
      "candidate_diff": {
        "lrzip.c||lrzip.c": [
          "File: lrzip.c -> lrzip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1359:  control->msgerr = stderr;",
          "1360:  register_outputfile(control, control->msgout);",
          "1361:  control->flags = FLAG_SHOW_PROGRESS | FLAG_KEEP_FILES | FLAG_THRESHOLD;",
          "1363:  control->compression_level = 7;",
          "1364:  control->ramsize = get_ram(control);",
          "1365:  if (unlikely(control->ramsize == -1))",
          "",
          "[Removed Lines]",
          "1362:  control->suffix = strdup(\".lrz\");",
          "",
          "[Added Lines]",
          "1362:  control->suffix = \".lrz\";",
          "",
          "---------------"
        ],
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:    if (unlikely(STDOUT))",
          "462:     failure(\"Cannot specify an output filename when outputting to stdout\\n\");",
          "463:    control->outname = optarg;",
          "466:    break;",
          "467:   case 'O':",
          "",
          "[Removed Lines]",
          "464:    dealloc(control->suffix);",
          "465:    control->suffix = strdup(\"\");",
          "",
          "[Added Lines]",
          "464:    control->suffix = \"\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497:     failure(\"Specified output filename already, can't specify an extension.\\n\");",
          "498:    if (unlikely(STDOUT))",
          "499:     failure(\"Cannot specify a filename suffix when outputting to stdout\\n\");",
          "502:    break;",
          "503:   case 't':",
          "504:    if (control->outname)",
          "",
          "[Removed Lines]",
          "500:    dealloc(control->suffix);",
          "501:    control->suffix = strdup(optarg);",
          "",
          "[Added Lines]",
          "499:    control->suffix = optarg;",
          "",
          "---------------"
        ]
      }
    }
  ]
}