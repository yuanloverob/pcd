{
  "cve_id": "CVE-2013-1439",
  "cve_desc": "The \"faster LJPEG decoder\" in libraw 0.13.x, 0.14.x, and 0.15.x before 0.15.4 allows context-dependent attackers to cause a denial of service (NULL pointer dereference) via a crafted photo file.",
  "repo": "LibRaw/LibRaw",
  "patch_hash": "11909cc59e712e09b508dda729b99aeaac2b29ad",
  "patch_info": {
    "commit_hash": "11909cc59e712e09b508dda729b99aeaac2b29ad",
    "repo": "LibRaw/LibRaw",
    "commit_url": "https://github.com/LibRaw/LibRaw/commit/11909cc59e712e09b508dda729b99aeaac2b29ad",
    "files": [
      "Changelog.txt",
      "Makefile.devel",
      "dcraw/dcraw.c",
      "internal/dcraw_common.cpp",
      "internal/dcraw_fileio.cpp",
      "libraw/libraw_version.h",
      "src/libraw_datastream.cpp"
    ],
    "message": "cumulated data checks patch",
    "before_after_code_files": [
      "Makefile.devel||Makefile.devel",
      "dcraw/dcraw.c||dcraw/dcraw.c",
      "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
      "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
      "libraw/libraw_version.h||libraw/libraw_version.h",
      "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
    ]
  },
  "patch_diff": {
    "Makefile.devel||Makefile.devel": [
      "File: Makefile.devel -> Makefile.devel",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: CC=gcc",
      "6: CXX=g++",
      "8: # RawSpeed Support",
      "19: # LCMS support",
      "",
      "[Removed Lines]",
      "9: CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
      "10: LDADD+=-L../RawSpeed/RawSpeed/release -lrawspeed -L/usr/local/include -ljpeg -lxml2",
      "11: RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
      "14: CC=gcc48",
      "15: CXX=g++48",
      "16: CFLAGS+= -O4 -g -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
      "",
      "[Added Lines]",
      "7: CFLAGS+= -O -g -I.",
      "10: #CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
      "11: #LDADD+=-L../RawSpeed/RawSpeed/release -lrawspeed -L/usr/local/include -ljpeg -lxml2",
      "12: #RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
      "15: #CC=gcc48",
      "16: #CXX=g++48",
      "17: #CFLAGS+= -O -g -I. -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
      "",
      "---------------"
    ],
    "dcraw/dcraw.c||dcraw/dcraw.c": [
      "File: dcraw/dcraw.c -> dcraw/dcraw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "877: {",
      "878:   int len, diff;",
      "880:   len = gethuff(huff);",
      "881:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "882:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "880: #ifdef LIBRAW_LIBRARY_BUILD",
      "881:   if(!huff)",
      "882:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "883: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "891: {",
      "892:   int len, diff;",
      "894:   len = bits._gethuff_lj(buf,*huff,huff+1);",
      "895:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "896:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "899:   if(!huff || !buf)",
      "900:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1010:   }",
      "1011: #endif",
      "1014:   if (!ljpeg_start (&jh, 0)) return;",
      "1015:   jwide = jh.wide * jh.clrs;",
      "1017: #ifdef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1022: #ifdef LIBRAW_LIBRARY_BUILD",
      "1023:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
      "1024:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1025: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1028:       }",
      "1030:   slices = slicesWcnt * jh.high;",
      "1031:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
      "1033:   for(slice=0;slice<slices;slice++)",
      "1034:       {",
      "1035:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
      "1036:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
      "1037:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
      "1038:           t_y++;",
      "1039:           if(t_y == jh.high)",
      "1040:               {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if(!slices)",
      "1043:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1051:             {",
      "1052:               free(offset);",
      "1054:             }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1087:               pixno++;",
      "1088:               if (0 == --pixelsInSlice)",
      "1089:                   {",
      "1090:                       unsigned o = offset[slice++];",
      "1091:                       pixno = o & 0x0fffffff;",
      "1092:                       pixelsInSlice = slicesW[o>>28];",
      "1093:                   }",
      "1094:           }",
      "1095: #endif",
      "1096:       if (raw_width == 3984 && (col -= 2) < 0)",
      "1097:  col += (row--,raw_width);",
      "1098:       if (row >= 0) RAW(row,col) = val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1107:                     if(slice > slices)",
      "1108:                       {",
      "1109:                         free(offset);",
      "1110:                         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1111:                       }",
      "1119:       if(row>raw_height)",
      "1120: #ifdef LIBRAW_LIBRARY_BUILD",
      "1121:       {",
      "1122:         free(offset);",
      "1123:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "1124:       }",
      "1125: #else",
      "1126:         longjmp (failure, 3);",
      "1127: #endif",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "6513:  break;",
      "6517:    num += getreal(type);",
      "6518:  black += num/len + 0.5;",
      "6519:  break;",
      "",
      "[Removed Lines]",
      "6516:  for (num=i=0; i < len; i++)",
      "",
      "[Added Lines]",
      "6549:  for (num=i=0; i < len && i < 65536; i++)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "6646:   if (thumb_offset) {",
      "6647:     fseek (ifp, thumb_offset, SEEK_SET);",
      "6648:     if (ljpeg_start (&jh, 1)) {",
      "6652:     }",
      "6653:   }",
      "6654:   for (i=0; i < tiff_nifds; i++) {",
      "",
      "[Removed Lines]",
      "6649:       thumb_misc   = jh.bits;",
      "6650:       thumb_width  = jh.wide;",
      "6651:       thumb_height = jh.high;",
      "",
      "[Added Lines]",
      "6682:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
      "6683:         {",
      "6684:           thumb_misc   = jh.bits;",
      "6685:           thumb_width  = jh.wide;",
      "6686:           thumb_height = jh.high;",
      "6687:         }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "6656:  max_samp = tiff_ifd[i].samples;",
      "6657:     if (max_samp > 3) max_samp = 3;",
      "6658:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
      "6660:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
      "6661:       raw_width     = tiff_ifd[i].t_width;",
      "6662:       raw_height    = tiff_ifd[i].t_height;",
      "",
      "[Removed Lines]",
      "6659:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "[Added Lines]",
      "6695:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "6696:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "6743:       is_raw = 0;",
      "6744:   for (i=0; i < tiff_nifds; i++)",
      "6745:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
      "6746:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
      "6747:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
      "6748:  && tiff_ifd[i].comp != 34892) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6783:         tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
      "6784:        unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "---------------"
    ],
    "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
      "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "611: {",
      "612:   int len, diff;",
      "614:   len = gethuff(huff);",
      "615:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "616:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614: #ifdef LIBRAW_LIBRARY_BUILD",
      "615:   if(!huff)",
      "616:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "617: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "625: {",
      "626:   int len, diff;",
      "628:   len = bits._gethuff_lj(buf,*huff,huff+1);",
      "629:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
      "630:     return -32768;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   if(!huff || !buf)",
      "634:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "744:   }",
      "745: #endif",
      "748:   if (!ljpeg_start (&jh, 0)) return;",
      "749:   jwide = jh.wide * jh.clrs;",
      "751: #ifdef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "756: #ifdef LIBRAW_LIBRARY_BUILD",
      "757:   if(jh.wide<1 || jh.high<1 || jh.clrs<1 || jh.bits <1)",
      "758:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "759: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "762:       }",
      "764:   slices = slicesWcnt * jh.high;",
      "765:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
      "767:   for(slice=0;slice<slices;slice++)",
      "768:       {",
      "769:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
      "770:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
      "771:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
      "772:           t_y++;",
      "773:           if(t_y == jh.high)",
      "774:               {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "776:   if(!slices)",
      "777:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "785:             {",
      "786:               free(offset);",
      "788:             }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "821:               pixno++;",
      "822:               if (0 == --pixelsInSlice)",
      "823:                   {",
      "824:                       unsigned o = offset[slice++];",
      "825:                       pixno = o & 0x0fffffff;",
      "826:                       pixelsInSlice = slicesW[o>>28];",
      "827:                   }",
      "828:           }",
      "829: #endif",
      "830:       if (raw_width == 3984 && (col -= 2) < 0)",
      "831:  col += (row--,raw_width);",
      "832:       if (row >= 0) RAW(row,col) = val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "841:                     if(slice > slices)",
      "842:                       {",
      "843:                         free(offset);",
      "844:                         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "845:                       }",
      "853:       if(row>raw_height)",
      "854: #ifdef LIBRAW_LIBRARY_BUILD",
      "855:       {",
      "856:         free(offset);",
      "857:         throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "858:       }",
      "859: #else",
      "860:         longjmp (failure, 3);",
      "861: #endif",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1283:     if (tail[i]) nz++;",
      "1284:   return nz > 20;",
      "1285: }",
      "1287: void CLASS ppm_thumb()",
      "1288: {",
      "1289:   char *thumb;",
      "",
      "[Removed Lines]",
      "1286: #line 1557 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "1318: #line 1589 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2865:   jas_stream_close (in);",
      "2866: #endif",
      "2867: }",
      "2869: void CLASS crop_masked_pixels()",
      "2870: {",
      "2871:   int row, col;",
      "",
      "[Removed Lines]",
      "2868: #line 3846 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "2900: #line 3878 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2965:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
      "2966: #endif",
      "2967: }",
      "2969: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
      "2970: {",
      "2971:   int i;",
      "",
      "[Removed Lines]",
      "2968: #line 4111 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "3000: #line 4143 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4460:     fseek (ifp, save, SEEK_SET);",
      "4461:   }",
      "4462: }",
      "4464: void CLASS parse_makernote (int base, int uptag)",
      "4465: {",
      "4466:   static const uchar xlat[2][256] = {",
      "",
      "[Removed Lines]",
      "4463: #line 5610 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "4495: #line 5642 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4975:     fseek (ifp, save, SEEK_SET);",
      "4976:   }",
      "4977: }",
      "4979: int CLASS parse_tiff_ifd (int base)",
      "4980: {",
      "4981:   unsigned entries, tag, type, len, plen=16, save;",
      "",
      "[Removed Lines]",
      "4978: #line 6130 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "5010: #line 6162 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5362:  break;",
      "5366:    num += getreal(type);",
      "5367:  black += num/len + 0.5;",
      "5368:  break;",
      "",
      "[Removed Lines]",
      "5365:  for (num=i=0; i < len; i++)",
      "",
      "[Added Lines]",
      "5398:  for (num=i=0; i < len && i < 65536; i++)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5495:   if (thumb_offset) {",
      "5496:     fseek (ifp, thumb_offset, SEEK_SET);",
      "5497:     if (ljpeg_start (&jh, 1)) {",
      "5501:     }",
      "5502:   }",
      "5503:   for (i=0; i < tiff_nifds; i++) {",
      "",
      "[Removed Lines]",
      "5498:       thumb_misc   = jh.bits;",
      "5499:       thumb_width  = jh.wide;",
      "5500:       thumb_height = jh.high;",
      "",
      "[Added Lines]",
      "5531:       if((unsigned)jh.bits<17 && (unsigned)jh.wide < 0x10000 && (unsigned)jh.high < 0x10000)",
      "5532:         {",
      "5533:           thumb_misc   = jh.bits;",
      "5534:           thumb_width  = jh.wide;",
      "5535:           thumb_height = jh.high;",
      "5536:         }",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5505:  max_samp = tiff_ifd[i].samples;",
      "5506:     if (max_samp > 3) max_samp = 3;",
      "5507:     if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&",
      "5509:  tiff_ifd[i].t_width*tiff_ifd[i].t_height > raw_width*raw_height) {",
      "5510:       raw_width     = tiff_ifd[i].t_width;",
      "5511:       raw_height    = tiff_ifd[i].t_height;",
      "",
      "[Removed Lines]",
      "5508:  (tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "[Added Lines]",
      "5544:         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "5545:         (unsigned)tiff_ifd[i].bps < 33 && (unsigned)tiff_ifd[i].samples < 13 &&",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5592:       is_raw = 0;",
      "5593:   for (i=0; i < tiff_nifds; i++)",
      "5594:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
      "5595:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
      "5596:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
      "5597:  && tiff_ifd[i].comp != 34892) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5632:         tiff_ifd[i].bps>0 && tiff_ifd[i].bps < 33 &&",
      "5633:        unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "6233:     data_offset = get4();",
      "6234:   }",
      "6235: }",
      "6237: char * CLASS foveon_gets (int offset, char *str, int len)",
      "6238: {",
      "6239:   int i;",
      "",
      "[Removed Lines]",
      "6236: #line 7390 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "6275: #line 7429 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "6334:   }",
      "6335:   is_foveon = 1;",
      "6336: }",
      "6339:    All matrices are from Adobe DNG Converter unless otherwise noted.",
      "",
      "[Removed Lines]",
      "6337: #line 7493 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "6376: #line 7532 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "8981: }",
      "8985: void CLASS convert_to_rgb()",
      "8986: {",
      "8987: #ifndef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "8984: #line 10231 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "9023: #line 10270 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "9212:   if (flip & 1) col = iwidth  - 1 - col;",
      "9213:   return row * iwidth + col;",
      "9214: }",
      "9216: void CLASS tiff_set (ushort *ntag,",
      "9217:  ushort tag, ushort type, int count, int val)",
      "9218: {",
      "",
      "[Removed Lines]",
      "9215: #line 10487 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "9254: #line 10526 \"dcraw/dcraw.c\"",
      "",
      "---------------"
    ],
    "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
      "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "21:    for more information",
      "25: #include <math.h>",
      "26: #define CLASS LibRaw::",
      "27: #include \"libraw/libraw_types.h\"",
      "",
      "[Removed Lines]",
      "24: #line 3948 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "24: #line 3980 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29: #include \"libraw/libraw.h\"",
      "30: #include \"internal/defines.h\"",
      "31: #include \"internal/var_defines.h\"",
      "34:    Seach from the current directory up to the root looking for",
      "35:    a \".badpixels\" file, and fix those pixels now.",
      "",
      "[Removed Lines]",
      "32: #line 3959 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "32: #line 3991 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: #endif",
      "55:   if (cfname)",
      "56:     fp = fopen (cfname, \"r\");",
      "58:   if (!fp)",
      "59:       {",
      "60: #ifdef LIBRAW_LIBRARY_BUILD",
      "",
      "[Removed Lines]",
      "57: #line 4009 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "57: #line 4041 \"dcraw/dcraw.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
      "155: #endif",
      "156: }",
      "158: #ifndef NO_LCMS",
      "159: void CLASS apply_profile (const char *input, const char *output)",
      "160: {",
      "",
      "[Removed Lines]",
      "157: #line 10142 \"dcraw/dcraw.c\"",
      "",
      "[Added Lines]",
      "157: #line 10181 \"dcraw/dcraw.c\"",
      "",
      "---------------"
    ],
    "libraw/libraw_version.h||libraw/libraw_version.h": [
      "File: libraw/libraw_version.h -> libraw/libraw_version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #define LIBRAW_MAJOR_VERSION  0",
      "27: #define LIBRAW_MINOR_VERSION  15",
      "29: #define LIBRAW_VERSION_TAIL   Release",
      "31: #define LIBRAW_SHLIB_CURRENT   9",
      "",
      "[Removed Lines]",
      "28: #define LIBRAW_PATCH_VERSION  3",
      "",
      "[Added Lines]",
      "28: #define LIBRAW_PATCH_VERSION  4",
      "",
      "---------------"
    ],
    "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
      "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: LibRaw_byte_buffer *LibRaw_abstract_datastream::make_byte_buffer(unsigned int sz)",
      "66: {",
      "67:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(sz);",
      "68:     read(ret->get_buffer(),sz,1);",
      "69:     return ret;",
      "70: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:   if(INT64(sz)>size())",
      "68:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "71:     if(!ret) // failed new should throw std::exception",
      "72:       throw LIBRAW_EXCEPTION_ALLOC;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "442: LibRaw_byte_buffer *LibRaw_buffer_datastream::make_byte_buffer(unsigned int sz)",
      "443: {",
      "444:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(0);",
      "445:     if(streampos + sz > streamsize)",
      "446:         sz = streamsize - streampos;",
      "447:     ret->set_buffer(buf+streampos,sz);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "449:   if(INT64(sz)>size())",
      "450:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "453:     if(!ret) // failed new should throw std::exception",
      "454:       throw LIBRAW_EXCEPTION_ALLOC;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1da24b1930f71514645558f5a64796f4a7ad95d0",
      "candidate_info": {
        "commit_hash": "1da24b1930f71514645558f5a64796f4a7ad95d0",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/1da24b1930f71514645558f5a64796f4a7ad95d0",
        "files": [
          "Changelog.rus",
          "Changelog.txt",
          "Makefile.devel",
          "Makefile.dist",
          "README.RawSpeed.rus",
          "README.RawSpeed.txt",
          "RawSpeed/rawspeed.cpucount-unix.patch",
          "RawSpeed/rawspeed.qmake-pro-files.patch",
          "RawSpeed/rawspeed.win32-dll.patch",
          "RawSpeed/rawspeed_xmldata.cpp",
          "libraw/libraw.h",
          "libraw/libraw_version.h",
          "src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp"
        ],
        "message": "0.15 Alpha4",
        "before_after_code_files": [
          "Changelog.rus||Changelog.rus",
          "Makefile.devel||Makefile.devel",
          "Makefile.dist||Makefile.dist",
          "README.RawSpeed.rus||README.RawSpeed.rus",
          "RawSpeed/rawspeed_xmldata.cpp||RawSpeed/rawspeed_xmldata.cpp",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_version.h||libraw/libraw_version.h",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.devel||Makefile.devel",
            "libraw/libraw_version.h||libraw/libraw_version.h",
            "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
          ],
          "candidate": [
            "Makefile.devel||Makefile.devel",
            "libraw/libraw_version.h||libraw/libraw_version.h",
            "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Changelog.rus||Changelog.rus": [
          "File: Changelog.rus -> Changelog.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:      - \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0434\u0435\u043a\u043e\u0434\u0435\u0440 LJPEG",
          "4:      - OpenMP \u0432 AHD/PPG-\u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0442\u043e\u0440\u0430\u0445 \u0438 \u0432 Wavelet Denoise",
          "",
          "[Removed Lines]",
          "1: \ufeff2012-09-04 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "[Added Lines]",
          "1: \ufeff2012-09-17  Alex Tutubalin <lexa@lexa.ru>",
          "4:      \u0420\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (LibRaw::unpack()) \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0441\u0442\u0430\u043b\u043e \u0432 1.5-3",
          "5:      \u0440\u0430\u0437\u0430 \u0431\u044b\u0441\u0442\u0440\u0435\u0435.",
          "7:     = \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f API:",
          "8:      -- imgdata.params.use_rawspeed \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442/\u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 RawSpeed",
          "9:   (\u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e!)",
          "10:      -- LibRaw::set_rawspeed_camerafile(char *path_to_cameras_xml) -",
          "11:       \u0447\u0438\u0442\u0430\u0435\u0442 XML-\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u043c\u0435\u0440 RawSpeed. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e,",
          "12:  \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0432\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 LibRaw",
          "13:      -- \u041f\u043e\u0442\u043e\u043a\u0438 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 LibRaw (Libraw*datastream) \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c",
          "14:         \u043c\u0435\u0442\u043e\u0434 size(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430.",
          "15:  \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 LibRaw*datastream.",
          "16:      -- \u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: imgdata.sizes.raw_pitch - \u0448\u0430\u0433 \u0441\u0442\u0440\u043e\u043a (\u0432 \u043f\u0438\u043a\u0441\u0435\u043b\u044f\u0445)",
          "17:       \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 imgdata.rawdata.raw_image.",
          "18:  \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0432\u0430\u043c",
          "19:  \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c",
          "20:         raw_image[row*raw_pitch+col] \u0432\u043c\u0435\u0441\u0442\u043e [row*raw_width+col]",
          "22:     = \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 RawSpeed \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0431\u0443\u0444\u0435\u0440, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439",
          "23:       RAW-\u0444\u0430\u0439\u043b \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 - \u0432\u044b\u0448\u0435.",
          "25:     = \u041f\u0440\u043e\u0447\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:",
          "26:      -- dcraw_emu: \u041e\u043f\u0446\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 -disars \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435",
          "27:         RawSpeed",
          "28:      -- postprocessing_benchmark: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 -c \u0434\u043b\u044f \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f RawSpeed",
          "30:     = \u0421\u0431\u043e\u0440\u043a\u0430",
          "31:      - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0435\u0444\u0430\u0439\u043d -DUSE_RAWSPEED \u0447\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 RawSpeed",
          "32:        \u043f\u0440\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438.",
          "33:        \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 RawSpeed \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0441\u043c. \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0432",
          "34:        README.RawSpeed.rus",
          "35:      - \u0438\u0437\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0435\u0444\u0430\u0439\u043d -DNOSONY_RAWSPEED \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0440\u0435\u0442\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0444\u0430\u0439\u043b\u043e\u0432",
          "36:        \u0441 \u043a\u0430\u043c\u0435\u0440 Sony (RawSpeed \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0438\u043d\u0430\u0447\u0435, \u0445\u043e\u0442\u044f \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u0449\u0435\u043c",
          "37:        \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0432\u0438\u0434\u0438\u043c\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0435\u0442)",
          "39:      - ./configure \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Makefile.dist \u043d\u0430 Unix/Mac \u0438",
          "40:        Makefile.msvc \u043d\u0430 Win32",
          "42:      - (Unix) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 RAWSPEED_XMLDATA=../path/to/cameras.xml \u0432",
          "43:        Makefile.dist \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f",
          "44:        cameras.xml",
          "46:     = TODO:",
          "47:         -- \u0420\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435-\u0431\u0430\u0439\u0435\u0440\u043e\u0432\u0441\u043a\u0438\u0445 RAW \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 RawSpeed",
          "48:         -- \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0431\u0443\u0444\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438",
          "49:     LibRaw_buffer_datstream",
          "51:   \u041f\u0440\u043e\u0447\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f",
          "54:      \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e. \u0427\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c - \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LibJPEG v8 \u0438",
          "55:      \u0443\u043a\u0430\u0437\u0430\u0442\u044c -DUSE_JPEG8 \u043f\u0440\u0438 \u0441\u0431\u043e\u0440\u043a\u0435 LibRaw",
          "57:      \u0434\u043b\u044f \u043e\u0431\u043b\u0435\u0433\u0447\u0435\u043d\u0438\u044f \u0438\u0445 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445.",
          "62:      \u0447\u0435\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f",
          "65:      \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
          "69: 2012-09-04 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "---------------"
        ],
        "Makefile.devel||Makefile.devel": [
          "File: Makefile.devel -> Makefile.devel",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: CC=gcc",
          "6: CXX=g++",
          "21: # LCMS support",
          "",
          "[Removed Lines]",
          "8: #CFLAGS=-O4 -march=core2 -march=core2 -mtune=core2 -fomit-frame-pointer -ffast-math -fstrict-aliasing -funsafe-math-optimizations -mfpmath=sse -msse2 -I.",
          "9: #CFLAGS=-g -Wall -I.",
          "10: #CFLAGS=-g -I. -Wall",
          "11: CFLAGS= -O4 -g -I. -Wall -Wno-long-long -Wno-conversion -Wno-sign-compare -Wno-overflow -fpack-struct=8 -fopenmp",
          "12: #CFLAGS=-g -I. -Wall -Wno-long-long -Wno-conversion -Wno-sign-compare -fpack-struct=8 -fopenmp",
          "14: # GCC 4.6 section",
          "15: #CC=gcc46",
          "16: #CXX=g++46",
          "17: #CFLAGS= -O4 -g -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
          "18: #CFLAGS= -O -I. -pedantic  -Wno-long-long -Wno-overflow -g",
          "",
          "[Added Lines]",
          "8: # RawSpeed Support",
          "9: CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
          "10: LDADD+=-L../RawSpeed/RawSpeed -lrawspeed -L/usr/local/include -ljpeg -lxml2",
          "11: RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
          "14: CC=gcc46",
          "15: CXX=g++46",
          "16: CFLAGS+= -O4 -g -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: all_samples: bin/raw-identify bin/simple_dcraw  bin/dcraw_emu bin/dcraw_half bin/half_mt bin/mem_image \\",
          "55:         bin/unprocessed_raw bin/4channels bin/multirender_test bin/postprocessing_benchmark",
          "57: ## Demosaic Pack(s)",
          "59: object/demosaic_packs.o: internal/demosaic_packs.cpp ${LR_INCLUDES}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: ## RawSpeed xml file",
          "56: RawSpeed/rawspeed_xmldata.cpp: ${RAWSPEED_DATA}",
          "57:  ./rsxml2c.sh ${RAWSPEED_DATA} > RawSpeed/rawspeed_xmldata.cpp",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118: object/dcraw_fileio.o: internal/dcraw_fileio.cpp ${LR_INCLUDES}",
          "119:  $(CXX) -c -DLIBRAW_NOTHREADS ${CFLAGS} ${LCMS_DEF} -o object/dcraw_fileio.o internal/dcraw_fileio.cpp",
          "122:  $(CXX) -c -DLIBRAW_NOTHREADS ${LCMS_DEF} ${CFLAGS} -o object/libraw_cxx.o src/libraw_cxx.cpp",
          "124: object/libraw_datastream.o: src/libraw_datastream.cpp ${LR_INCLUDES}",
          "",
          "[Removed Lines]",
          "121: object/libraw_cxx.o: src/libraw_cxx.cpp ${LR_INCLUDES}",
          "",
          "[Added Lines]",
          "123: object/libraw_cxx.o: src/libraw_cxx.cpp ${LR_INCLUDES} RawSpeed/rawspeed_xmldata.cpp",
          "",
          "---------------"
        ],
        "Makefile.dist||Makefile.dist": [
          "File: Makefile.dist -> Makefile.dist",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: # OpenMP support",
          "6: #CFLAGS+=-fopenmp",
          "8: # Jasper support for RedCine",
          "9: CFLAGS+=-DUSE_JASPER -I/usr/local/include",
          "10: LDADD+=-L/usr/local/lib -ljasper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: # RawSpeed Support",
          "9: CFLAGS+=-pthread -DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
          "10: LDADD+=-L../RawSpeed/RawSpeed -lrawspeed -L/usr/local/include -ljpeg -lxml2",
          "11: RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  @if [ -d /usr/local/bin ] ; then cp bin/[a-z]* /usr/local/bin/ ; else echo 'no /usr/local/bin' ; fi",
          "51: #binaries",
          "53: bin/raw-identify: lib/libraw.a samples/raw-identify.cpp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: ## RawSpeed xml file",
          "59: RawSpeed/rawspeed_xmldata.cpp: ${RAWSPEED_DATA}",
          "60:  ./rsxml2c.sh ${RAWSPEED_DATA} > RawSpeed/rawspeed_xmldata.cpp",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91: object/dcraw_fileio.o: internal/dcraw_fileio.cpp",
          "92:  g++ -c -DLIBRAW_NOTHREADS ${CFLAGS}  -o object/dcraw_fileio.o internal/dcraw_fileio.cpp",
          "95:  g++ -c -DLIBRAW_NOTHREADS  ${CFLAGS} -o object/libraw_cxx.o src/libraw_cxx.cpp",
          "97: object/libraw_datastream.o: src/libraw_datastream.cpp",
          "",
          "[Removed Lines]",
          "94: object/libraw_cxx.o: src/libraw_cxx.cpp",
          "",
          "[Added Lines]",
          "105: object/libraw_cxx.o: src/libraw_cxx.cpp RawSpeed/rawspeed_xmldata.cpp",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: object/dcraw_fileio_mt.o: internal/dcraw_fileio.cpp",
          "127:  g++ -c -pthread  ${CFLAGS} -o object/dcraw_fileio_mt.o internal/dcraw_fileio.cpp",
          "130:  g++ -c   -pthread ${CFLAGS} -o object/libraw_cxx_mt.o src/libraw_cxx.cpp",
          "132: object/libraw_datastream_mt.o: src/libraw_datastream.cpp",
          "",
          "[Removed Lines]",
          "129: object/libraw_cxx_mt.o: src/libraw_cxx.cpp",
          "",
          "[Added Lines]",
          "140: object/libraw_cxx_mt.o: src/libraw_cxx.cpp RawSpeed/rawspeed_xmldata.cpp",
          "",
          "---------------"
        ],
        "README.RawSpeed.rus||README.RawSpeed.rus": [
          "File: README.RawSpeed.rus -> README.RawSpeed.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ======================= \u0421\u0431\u043e\u0440\u043a\u0430LibRaw \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 RawSpeed ==================",
          "3: 1) \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:",
          "5: \u0414\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 RawSpeed \u0432 \u0432\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438",
          "6: libxml2, iconv \u0438 LibJPEG",
          "8: 2) \u0421\u0431\u043e\u0440\u043a\u0430 RawSpeed",
          "9:   -- \u0421\u0431\u043e\u0440\u043a\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 http://rawstudio.org/blog/?p=800",
          "11:   -- Win32: \u043f\u043e\u043c\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0432\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430",
          "12:      POSIX Threads for Win32 (http://sources.redhat.com/pthreads-win32/)",
          "14:   -- \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c .pro-\u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f qmake, \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u0441 LibRaw",
          "15:      (RawSpeed/rawspeed.qmake-pro-files.patch)",
          "16:      \u041f\u043e\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u043f\u0443\u0442\u0438 \u0434\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441",
          "17:      \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0432\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "19:   -- Win32: \u0414\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 RawSpeed \u043a\u0430\u043a .DLL \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435",
          "20:      __declspec(..) \u043a\u043e \u0432\u0441\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c.",
          "21:      \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0442\u0447, \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u0441 LibRaw",
          "22:      (RawSpeed/rawspeed.win32-dll.patch)",
          "24:   -- Unix: \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e rawspeed_get_number_of_processor_cores()",
          "25:      \u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 Unix-\u0441\u0438\u0441\u0442\u0435\u043c \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u0432\u044b\u0437\u043e\u0432 sysconf().",
          "26:      \u0412 \u0441\u043e\u0441\u0442\u0430\u0432\u0435 LibRaw \u0435\u0441\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043f\u0430\u0442\u0447",
          "27:      (RawSpeed/rawspeed.cpucount-unix.patch)",
          "29: 3) \u0421\u0431\u043e\u0440\u043a\u0430 LibRaw \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 RawSpeed",
          "31:    Win32:",
          "32:      --\u0420\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0438 CFLAGS_RAWSPEED \u0438 LDFLAGS_RAWSPEED \u0432",
          "33:        Makefile.msvc. \u041f\u043e\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0432 \u043d\u0438\u0445 \u043f\u0443\u0442\u0438 \u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u0447\u043d\u044b\u043c",
          "34:        \u0444\u0430\u0439\u043b\u0430\u043c, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e.",
          "35:      -- \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 nmake -f Makefile.msvc",
          "37:    Unix/MacOS:",
          "38:      -- \u0420\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 CFLAGS/LDADD \u0432 \u0441\u0435\u043a\u0446\u0438\u0438 RawSpeed \u0432 \u0444\u0430\u0439\u043b\u0435",
          "39:         Makefile.dist",
          "40:      -- \u0420\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0443 RAWSPEED_DATA (\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430",
          "41:         \u0444\u0430\u0439\u043b cameras.xml \u0438\u0437 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u0430 RawSpeed), \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c",
          "42:  \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u0432 LibRaw \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u043c\u0435\u0440 RawSpeed",
          "43:      -- \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 make -f Makefile.dist",
          "45:    \u041e\u043f\u0446\u0438\u0438 \u0441\u0431\u043e\u0440\u043a\u0438:",
          "46:     -- \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0444\u0430\u0439\u043d -DNOSONY_RAWSPEED \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u0435\u0442\u0438\u0442\u044c",
          "47:        \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043a\u0430\u043c\u0435\u0440 Sony \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e RawSpeed (\u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0443\u0436\u043d\u043e,",
          "48:        \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 RAW-\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0442.\u043a. \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u043a\u0438",
          "49:        LibRaw \u0438 RawSpeed \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u0442\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c -",
          "50:        \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f)",
          "52: 4) \u0421\u0431\u043e\u0440\u043a\u0430 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 LibRaw+RawSpeed",
          "54:    -- \u0421\u043e\u0431\u0438\u0440\u0430\u0439\u0442\u0435 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e, \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445",
          "55:     \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 raw-\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.",
          "56:     \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (open_file/unpack/dcraw_process \u0438",
          "57:     open_file/unpack/raw2image) \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438.",
          "59:    -- \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 RawSpeed \u043d\u0430 \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0435, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432",
          "60:       imgdata.params.use_rawspeed = 0.",
          "62:    -- \u0412\u0430\u0448\u0435\u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438/DLL,",
          "63:      \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0441\u0431\u043e\u0440\u043a\u0435 (iconv, LibJPEG, posix threads \u043d\u0430 Win32).",
          "",
          "---------------"
        ],
        "RawSpeed/rawspeed_xmldata.cpp||RawSpeed/rawspeed_xmldata.cpp": [
          "File: RawSpeed/rawspeed_xmldata.cpp -> RawSpeed/rawspeed_xmldata.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: \"  <Alias>Canon EOS 350D</Alias>\\n\",",
          "111: \" </Aliases>\\n\",",
          "112: \"\\t</Camera>\\n\",",
          "114: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "115: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "116: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "113: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 40D\\\" decoder_version=\\\"1\\\">\\n\",",
          "",
          "[Added Lines]",
          "113: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 40D\\\" decoder_version=\\\"2\\\">\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 40D\\\" mode=\\\"sRaw2\\\">\\n\",",
          "131: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"1944\\\" height=\\\"1296\\\"/>\\n\",",
          "132: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"65535\\\"/>\\n\",",
          "133: \"\\t</Camera>\\n\",",
          "134: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 450D\\\">\\n\",",
          "135: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: \"  <Hints>\\n\",",
          "134: \"   <Hint name=\\\"sraw_40d\\\" value=\\\"\\\"/>\\n\",",
          "135: \"  </Hints>\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"57200\\\" iso_list=\\\"160 320 640 1250\\\"/>\\n\",",
          "304: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"64948\\\"/>\\n\",",
          "305: \"\\t</Camera>\\n\",",
          "307: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "308: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "309: \"\\t\\t\\t<Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "306: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 5D Mark III\\\" decoder_version=\\\"1\\\">\\n\",",
          "",
          "[Added Lines]",
          "309: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 5D Mark III\\\" decoder_version=\\\"2\\\">\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316: \"\\t\\t<Vertical x=\\\"0\\\" width=\\\"120\\\"/>\\n\",",
          "317: \"\\t\\t<Horizontal y=\\\"2\\\" height=\\\"78\\\"/>\\n\",",
          "318: \"\\t</BlackAreas>\\n\",",
          "322: \"\\t</Camera>\\n\",",
          "323: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 5D Mark III\\\" mode=\\\"sRaw1\\\">\\n\",",
          "324: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "326: \"\\t</Camera>\\n\",",
          "327: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 5D Mark III\\\" mode=\\\"sRaw2\\\">\\n\",",
          "328: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "330: \"\\t</Camera>\\n\",",
          "331: \"\\t<Camera make=\\\"Canon\\\" model=\\\"Canon EOS 7D\\\" decoder_version=\\\"1\\\">\\n\",",
          "332: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "",
          "[Removed Lines]",
          "319: \"  <Hints>\\n\",",
          "320: \"   <Hint name=\\\"sraw_new\\\" value=\\\"\\\"/>\\n\",",
          "321: \"  </Hints>\\n\",",
          "325: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"65535\\\"/>\\n\",",
          "329: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"65535\\\"/>\\n\",",
          "",
          "[Added Lines]",
          "325: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"48664\\\"/>\\n\",",
          "326: \"\\t\\t<Hints>\\n\",",
          "327: \"\\t\\t\\t<Hint name=\\\"sraw_new\\\" value=\\\"\\\"/>\\n\",",
          "328: \"\\t\\t\\t<Hint name=\\\"invert_sraw_wb\\\" value=\\\"\\\"/>\\n\",",
          "329: \"\\t\\t</Hints>\\n\",",
          "333: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"48664\\\"/>\\n\",",
          "334: \"\\t\\t<Hints>\\n\",",
          "335: \"\\t\\t\\t<Hint name=\\\"sraw_new\\\" value=\\\"\\\"/>\\n\",",
          "336: \"\\t\\t\\t<Hint name=\\\"invert_sraw_wb\\\" value=\\\"\\\"/>\\n\",",
          "337: \"\\t\\t</Hints>\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1940: \"\\t\\t<Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"3900\\\" height=\\\"2616\\\"/>\\n\",",
          "1941: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"4095\\\"/>\\n\",",
          "1942: \"\\t</Camera>\\n\",",
          "1943: \"\\t<Camera make=\\\"SAMSUNG\\\" model=\\\"EX1\\\">\\n\",",
          "1944: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1945: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color><Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1951: \"\\t<Camera make=\\\"SAMSUNG\\\" model=\\\"EX2F\\\">\\n\",",
          "1952: \"\\t\\t<CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1953: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"0\\\">RED</Color><Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "1954: \"\\t\\t\\t<Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color><Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "1955: \"\\t\\t</CFA>\\n\",",
          "1956: \"\\t\\t<Crop x=\\\"22\\\" y=\\\"12\\\" width=\\\"-148\\\" height=\\\"-18\\\"/>\\n\",",
          "1957: \"\\t\\t<Sensor black=\\\"0\\\" white=\\\"4095\\\"/>\\n\",",
          "1958: \"\\t</Camera>\\n\",",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     int                         wf_remove_banding();",
          "162: protected:",
          "",
          "[Removed Lines]",
          "157:     void phase_one_subtract_black(ushort *src, ushort *dest);",
          "158:     void        phase_one_correct();",
          "159:  int set_rawspeed_camerafile(char *filename);",
          "",
          "[Added Lines]",
          "157:   void phase_one_subtract_black(ushort *src, ushort *dest);",
          "158:   void        phase_one_correct();",
          "159:   int set_rawspeed_camerafile(char *filename);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:     int         flip_index (int row, int col);",
          "271:     void        gamma_curve (double pwr, double ts, int mode, int imax);",
          "279: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "274:  void  *_rawspeed_camerameta;",
          "275:  void     *_rawspeed_decoder;",
          "276:  void  fix_after_rawspeed();",
          "",
          "[Added Lines]",
          "274:   void  *_rawspeed_camerameta;",
          "275:   void     *_rawspeed_decoder;",
          "276:   void  fix_after_rawspeed();",
          "",
          "---------------"
        ],
        "libraw/libraw_version.h||libraw/libraw_version.h": [
          "File: libraw/libraw_version.h -> libraw/libraw_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define LIBRAW_MAJOR_VERSION  0",
          "27: #define LIBRAW_MINOR_VERSION  15",
          "28: #define LIBRAW_PATCH_VERSION  0",
          "32: #define LIBRAW_SHLIB_REVISION  0",
          "33: #define LIBRAW_SHLIB_AGE      0",
          "",
          "[Removed Lines]",
          "29: #define LIBRAW_VERSION_TAIL   Alpha3",
          "31: #define LIBRAW_SHLIB_CURRENT   6",
          "",
          "[Added Lines]",
          "29: #define LIBRAW_VERSION_TAIL   Alpha4",
          "31: #define LIBRAW_SHLIB_CURRENT   7",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "534:     else if (load_raw == &LibRaw::packed_load_raw )",
          "535:         {",
          "536:             d_info->decoder_name = \"packed_load_raw()\";",
          "538:         }",
          "539:     else if (load_raw == &LibRaw::nokia_load_raw )",
          "540:         {",
          "",
          "[Removed Lines]",
          "537:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "[Added Lines]",
          "537:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "538: #ifndef NOSONY_RAWSPEED",
          "539:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "540: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:     else if (load_raw == &LibRaw::sony_arw_load_raw )",
          "633:         {",
          "634:             d_info->decoder_name = \"sony_arw_load_raw()\";",
          "636:         }",
          "637:     else if (load_raw == &LibRaw::sony_arw2_load_raw )",
          "638:         {",
          "639:             d_info->decoder_name = \"sony_arw2_load_raw()\";",
          "640:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "641:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "644: #endif",
          "645:             d_info->decoder_flags |= LIBRAW_DECODER_ITSASONY;",
          "646:         }",
          "",
          "[Removed Lines]",
          "635:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "642: #ifndef NOARW2_RAWSPEED",
          "643:    d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "[Added Lines]",
          "639:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "640: #ifndef NOSONY_RAWSPEED",
          "641:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "642: #endif",
          "649: #ifndef NOSONY_RAWSPEED",
          "650:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "913:     C.maximum = 0xffff;",
          "914:   else if (load_raw == &LibRaw::sony_load_raw)",
          "915:     C.maximum = 0x3ff0;",
          "917:  {",
          "918:   C.maximum *=4;",
          "919:   C.black *=4;",
          "",
          "[Removed Lines]",
          "916: else if (load_raw == &LibRaw::sony_arw2_load_raw)",
          "",
          "[Added Lines]",
          "923:   else if (load_raw == &LibRaw::sony_arw2_load_raw || load_raw == &LibRaw::packed_load_raw )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "979:                     rheight = S.height + S.top_margin;",
          "980:             }",
          "981:         S.raw_pitch = S.raw_width;",
          "984: #ifdef USE_RAWSPEED",
          "1023: #endif",
          "1047:         if(imgdata.rawdata.raw_image)",
          "1048:           crop_masked_pixels(); // calculate black levels",
          "1050: #if 0",
          "1054: #endif",
          "1056:         if( decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "",
          "[Removed Lines]",
          "982:   imgdata.rawdata.raw_image = 0;",
          "983:   imgdata.rawdata.color_image = 0;",
          "986:   if(O.use_rawspeed && (decoder_info.decoder_flags & LIBRAW_DECODER_TRYRAWSPEED) && _rawspeed_camerameta)",
          "987:   {",
          "988:    INT64 spos = ID.input->tell();",
          "989:    try",
          "990:    {",
          "991:     ID.input->seek(0,SEEK_SET);",
          "992:     INT64 _rawspeed_buffer_sz = ID.input->size();",
          "993:     void *_rawspeed_buffer = malloc(_rawspeed_buffer_sz);",
          "994:     if(!_rawspeed_buffer) throw LIBRAW_EXCEPTION_ALLOC;",
          "995:     ID.input->read(_rawspeed_buffer,_rawspeed_buffer_sz,1);",
          "996:     FileMap map((uchar8*)_rawspeed_buffer,_rawspeed_buffer_sz);",
          "997:     RawParser t(&map);",
          "998:     RawDecoder *d = 0;",
          "999:     CameraMetaDataLR *meta = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "1000:     d = t.getDecoder();",
          "1001:     d->checkSupport(meta);",
          "1002:        d->decodeRaw();",
          "1003:        d->decodeMetaData(meta);",
          "1004:     RawImage r = d->mRaw;",
          "1005:     if (r->isCFA) {",
          "1007:      _rawspeed_decoder = static_cast<void*>(d);",
          "1008:      imgdata.rawdata.raw_image = (ushort*) r->getDataUncropped(0,0);",
          "1009:      S.raw_pitch = r->pitch/2;",
          "1010:      fix_after_rawspeed();",
          "1011:     }",
          "1012:     else",
          "1013:     {",
          "1014:      delete d;",
          "1015:     }",
          "1016:     free(_rawspeed_buffer);",
          "1017:    } catch (...) {",
          "1018:     imgdata.process_warnings |= LIBRAW_WARN_RAWSPEED_PROBLEM;",
          "1020:    }",
          "1021:    ID.input->seek(spos,SEEK_SET);",
          "1022:   }",
          "1024:   if(!imgdata.rawdata.raw_image && !imgdata.rawdata.color_image)",
          "1025:    {",
          "1027:     if(decoder_info.decoder_flags &  LIBRAW_DECODER_FLATFIELD)",
          "1028:     {",
          "1029:      imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "1030:      imgdata.rawdata.raw_image = (ushort*) imgdata.rawdata.raw_alloc;",
          "1031:     }",
          "1032:     else if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1033:     {",
          "1036:      S.iwidth = S.width;",
          "1037:      S.iheight= S.height;",
          "1038:      IO.shrink = 0;",
          "1040:      imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "1041:      imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
          "1042:     }",
          "1043:           ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "1044:     (this->*load_raw)();",
          "1045:    }",
          "1051:   printf(\"B=%d,%d,%d,%d,%d M=%d\\n\",C.black,C.cblack[0],C.cblack[1],C.cblack[2],C.cblack[3],C.maximum);",
          "1052:   if(imgdata.rawdata.raw_image)",
          "1053:    printf(\"V=%d %d %d %d %d\",imgdata.rawdata.raw_image[0],imgdata.rawdata.raw_image[17],imgdata.rawdata.raw_image[40000],imgdata.rawdata.raw_image[64000],imgdata.rawdata.raw_image[200000]);",
          "",
          "[Added Lines]",
          "989:         imgdata.rawdata.raw_image = 0;",
          "990:         imgdata.rawdata.color_image = 0;",
          "993:         if(O.use_rawspeed && (decoder_info.decoder_flags & LIBRAW_DECODER_TRYRAWSPEED) && _rawspeed_camerameta)",
          "994:           {",
          "995:             INT64 spos = ID.input->tell();",
          "996:             try",
          "997:               {",
          "999:                 ID.input->seek(0,SEEK_SET);",
          "1000:                 INT64 _rawspeed_buffer_sz = ID.input->size();",
          "1001:                 void *_rawspeed_buffer = malloc(_rawspeed_buffer_sz);",
          "1002:                 if(!_rawspeed_buffer) throw LIBRAW_EXCEPTION_ALLOC;",
          "1003:                 ID.input->read(_rawspeed_buffer,_rawspeed_buffer_sz,1);",
          "1004:                 FileMap map((uchar8*)_rawspeed_buffer,_rawspeed_buffer_sz);",
          "1005:                 RawParser t(&map);",
          "1006:                 RawDecoder *d = 0;",
          "1007:                 CameraMetaDataLR *meta = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "1008:                 d = t.getDecoder();",
          "1009:                 d->checkSupport(meta);",
          "1010:                 d->decodeRaw();",
          "1011:                 d->decodeMetaData(meta);",
          "1012:                 RawImage r = d->mRaw;",
          "1013:                 if (r->isCFA) {",
          "1015:                   _rawspeed_decoder = static_cast<void*>(d);",
          "1016:                   imgdata.rawdata.raw_image = (ushort*) r->getDataUncropped(0,0);",
          "1017:                   S.raw_pitch = r->pitch/2;",
          "1018:                   fix_after_rawspeed();",
          "1019:                 }",
          "1020:                 else",
          "1021:                   {",
          "1022:                     delete d;",
          "1023:                   }",
          "1024:                 free(_rawspeed_buffer);",
          "1025:               } catch (...) {",
          "1026:               imgdata.process_warnings |= LIBRAW_WARN_RAWSPEED_PROBLEM;",
          "1028:             }",
          "1029:             ID.input->seek(spos,SEEK_SET);",
          "1030:           }",
          "1032:         if(!imgdata.rawdata.raw_image && !imgdata.rawdata.color_image)",
          "1033:           {",
          "1035:             if(decoder_info.decoder_flags &  LIBRAW_DECODER_FLATFIELD)",
          "1036:               {",
          "1037:                 imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "1038:                 imgdata.rawdata.raw_image = (ushort*) imgdata.rawdata.raw_alloc;",
          "1039:               }",
          "1040:             else if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1041:               {",
          "1044:                 S.iwidth = S.width;",
          "1045:                 S.iheight= S.height;",
          "1046:                 IO.shrink = 0;",
          "1048:                 imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "1049:                 imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
          "1050:               }",
          "1051:             ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "1052:             (this->*load_raw)();",
          "1053:           }",
          "1059:         printf(\"B=%d,%d,%d,%d,%d M=%d\\n\",C.black,C.cblack[0],C.cblack[1],C.cblack[2],C.cblack[3],C.maximum);",
          "1060:         if(imgdata.rawdata.raw_image)",
          "1061:           printf(\"V=%d %d %d %d %d\\n\",imgdata.rawdata.raw_image[0],imgdata.rawdata.raw_image[17],imgdata.rawdata.raw_image[1000001],imgdata.rawdata.raw_image[1000002],imgdata.rawdata.raw_image[1000003]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1074:         C.black += i;",
          "1076: #if 0",
          "1085: #endif",
          "1087:         memmove(&imgdata.rawdata.color,&imgdata.color,sizeof(imgdata.color));",
          "",
          "[Removed Lines]",
          "1077:   if(imgdata.rawdata.raw_image)",
          "1078:   {",
          "1079:    char fnbuf[25];",
          "1080:    sprintf(fnbuf,\"%d.dat\",time(NULL));",
          "1081:    FILE *f = fopen(fnbuf,\"wb\");",
          "1082:    fwrite(imgdata.rawdata.raw_image,S.raw_pitch*sizeof(ushort),S.raw_height,f);",
          "1083:    fclose(f);",
          "1084:   }",
          "",
          "[Added Lines]",
          "1085:         if(imgdata.rawdata.raw_image)",
          "1086:           {",
          "1087:             char fnbuf[25];",
          "1088:             sprintf(fnbuf,\"%d.dat\",time(NULL));",
          "1089:             FILE *f = fopen(fnbuf,\"wb\");",
          "1090:             fwrite(imgdata.rawdata.raw_image,S.raw_pitch*sizeof(ushort),S.raw_height,f);",
          "1091:             fclose(f);",
          "1092:           }",
          "",
          "---------------"
        ],
        "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
          "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #ifndef WIN32",
          "82:   struct stat st;",
          "83:   if(!stat(filename,&st))",
          "85: #else",
          "86:   struct _stati64 st;",
          "87:   if(!_stati64(filename,&st))",
          "",
          "[Removed Lines]",
          "84:    fsize = st.st_size;",
          "",
          "[Added Lines]",
          "84:    _fsize = st.st_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:     if(fname)",
          "468:         {",
          "469: #ifndef WIN32",
          "473: #else",
          "477: #endif",
          "479: #ifndef WIN32SECURECALLS",
          "481: #else",
          "484: #endif",
          "485:         }",
          "486:     else",
          "488:     sav=0;",
          "489: }",
          "",
          "[Removed Lines]",
          "470:    struct stat st;",
          "471:    if(!stat(fname,&st))",
          "472:     fsize = st.st_size;",
          "474:    struct _stati64 st;",
          "475:    if(!_stati64(fname,&st))",
          "476:     _fsize = st.st_size;",
          "480:             f = fopen(fname,\"rb\");",
          "482:             if(fopen_s(&f,fname,\"rb\"))",
          "483:                 f = 0;",
          "487:         {filename=0;f=0;}",
          "",
          "[Added Lines]",
          "470:           struct stat st;",
          "471:           if(!stat(fname,&st))",
          "472:             _fsize = st.st_size;",
          "474:           struct _stati64 st;",
          "475:           if(!_stati64(fname,&st))",
          "476:             _fsize = st.st_size;",
          "480:           f = fopen(fname,\"rb\");",
          "482:           if(fopen_s(&f,fname,\"rb\"))",
          "483:             f = 0;",
          "487:       {filename=0;f=0;}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed11e9e8259b919f3af7e09b9e93b3f48e8ac44e",
      "candidate_info": {
        "commit_hash": "ed11e9e8259b919f3af7e09b9e93b3f48e8ac44e",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/ed11e9e8259b919f3af7e09b9e93b3f48e8ac44e",
        "files": [
          "Changelog.rus",
          "Changelog.txt",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "libraw/libraw.h",
          "libraw/libraw_version.h",
          "src/libraw_c_api.cpp",
          "src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp"
        ],
        "message": "LibRaw 0.15.2",
        "before_after_code_files": [
          "Changelog.rus||Changelog.rus",
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_version.h||libraw/libraw_version.h",
          "src/libraw_c_api.cpp||src/libraw_c_api.cpp",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "libraw/libraw_version.h||libraw/libraw_version.h",
            "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "libraw/libraw_version.h||libraw/libraw_version.h",
            "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Changelog.rus||Changelog.rus": [
          "File: Changelog.rus -> Changelog.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: \ufeff2013-05-25 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "[Added Lines]",
          "1: \ufeff2013-05-26 Alex Tutubalin <lexa@lexa.ru>",
          "3:     \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u043d\u043e\u0446\u0432\u0435\u0442\u043d\u044b\u0445 (Foveon, sRAW) \u0444\u0430\u0439\u043b\u043e\u0432.",
          "7: 2013-05-25 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "---------------"
        ],
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6850: #ifndef LIBRAW_LIBRARY_BUILD",
          "6851:   FILE *save=ifp;",
          "6852: #else",
          "6854:   if(ifp->wfname())",
          "6855:   {",
          "6856:    std::wstring rawfile(ifp->wfname());",
          "",
          "[Removed Lines]",
          "6853: #ifdef WIN32",
          "",
          "[Added Lines]",
          "6853: #if defined (WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5699: #ifndef LIBRAW_LIBRARY_BUILD",
          "5700:   FILE *save=ifp;",
          "5701: #else",
          "5703:   if(ifp->wfname())",
          "5704:   {",
          "5705:    std::wstring rawfile(ifp->wfname());",
          "",
          "[Removed Lines]",
          "5702: #ifdef WIN32",
          "",
          "[Added Lines]",
          "5702: #if defined (WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: DllDef    libraw_data_t       *libraw_init(unsigned int flags);",
          "54: DllDef    int                 libraw_open_file(libraw_data_t*, const char *);",
          "55: DllDef    int                 libraw_open_file_ex(libraw_data_t*, const char *, INT64 max_buff_sz);",
          "57: DllDef    int                 libraw_open_wfile(libraw_data_t*, const wchar_t *);",
          "58: DllDef    int                 libraw_open_wfile_ex(libraw_data_t*, const wchar_t *, INT64 max_buff_sz);",
          "59: #endif",
          "",
          "[Removed Lines]",
          "56: #ifdef WIN32",
          "",
          "[Added Lines]",
          "56: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     LibRaw(unsigned int flags = LIBRAW_OPTIONS_NONE);",
          "104:     libraw_output_params_t*     output_params_ptr() { return &imgdata.params;}",
          "105:     int                         open_file(const char *fname, INT64 max_buffered_sz=LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE);",
          "107:  int                         open_file(const wchar_t *fname, INT64 max_buffered_sz=LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE);",
          "108: #endif",
          "109:     int                         open_buffer(void *buffer, size_t size);",
          "",
          "[Removed Lines]",
          "106: #ifdef WIN32",
          "",
          "[Added Lines]",
          "106: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "libraw/libraw_version.h||libraw/libraw_version.h": [
          "File: libraw/libraw_version.h -> libraw/libraw_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define LIBRAW_MAJOR_VERSION  0",
          "27: #define LIBRAW_MINOR_VERSION  15",
          "29: #define LIBRAW_VERSION_TAIL   Release",
          "31: #define LIBRAW_SHLIB_CURRENT   9",
          "",
          "[Removed Lines]",
          "28: #define LIBRAW_PATCH_VERSION  1",
          "",
          "[Added Lines]",
          "28: #define LIBRAW_PATCH_VERSION  2",
          "",
          "---------------"
        ],
        "src/libraw_c_api.cpp||src/libraw_c_api.cpp": [
          "File: src/libraw_c_api.cpp -> src/libraw_c_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         LibRaw *ip = (LibRaw*) lr->parent_class;",
          "76:         return ip->open_file(file,sz);",
          "77:     }",
          "79:     int libraw_open_wfile(libraw_data_t* lr, const wchar_t *file)",
          "80:     {",
          "81:         if(!lr) return EINVAL;",
          "",
          "[Removed Lines]",
          "78: #ifdef WIN32",
          "",
          "[Added Lines]",
          "78: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     return ret;",
          "774: }",
          "777: int LibRaw::open_file(const wchar_t *fname, INT64 max_buf_size)",
          "778: {",
          "779:  struct _stati64 st;",
          "",
          "[Removed Lines]",
          "776: #ifdef WIN32",
          "",
          "[Added Lines]",
          "776: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1144:                 IO.shrink = 0;",
          "1145:     S.raw_pitch = S.width*8;",
          "1149:               }",
          "1150:             ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "",
          "[Removed Lines]",
          "1147:                 imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "1148:                 imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
          "",
          "[Added Lines]",
          "1147:                 imgdata.rawdata.raw_alloc = 0;",
          "1148:                 imgdata.image = (ushort (*)[4]) calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1155:             (this->*load_raw)();",
          "1156:    if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
          "1157:     C.maximum = m_save;",
          "1158:           }",
          "1160:         if(imgdata.rawdata.raw_image)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:    if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1159:    {",
          "1161:     imgdata.rawdata.raw_alloc = imgdata.image;",
          "1162:     imgdata.image = 0;",
          "1163:    }",
          "",
          "---------------"
        ],
        "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
          "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: #ifdef NO_JASPER",
          "275:     return NULL;",
          "276: #else",
          "278:  if(wfname())",
          "279:  {",
          "280:   jas_file = _wfopen(wfname(),L\"rb\");",
          "",
          "[Removed Lines]",
          "277: #ifdef WIN32",
          "",
          "[Added Lines]",
          "277: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:   return -1; // not supported",
          "295: #else",
          "296:   if(jas_file) { fclose(jas_file); jas_file = NULL;}",
          "298:   if(wfname())",
          "299:     {",
          "300:       jas_file = _wfopen(wfname(),L\"rb\");",
          "",
          "[Removed Lines]",
          "297: #ifdef WIN32",
          "",
          "[Added Lines]",
          "297: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1a82e0826f5507c491a6e1335a696068c2eb942",
      "candidate_info": {
        "commit_hash": "e1a82e0826f5507c491a6e1335a696068c2eb942",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/e1a82e0826f5507c491a6e1335a696068c2eb942",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp",
          "internal/defines.h",
          "internal/var_defines.h",
          "libraw/libraw_const.h",
          "libraw/libraw_types.h",
          "src/libraw_cxx.cpp"
        ],
        "message": "merged raw_pitch branch",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
          "internal/defines.h||internal/defines.h",
          "internal/var_defines.h||internal/var_defines.h",
          "libraw/libraw_const.h||libraw/libraw_const.h",
          "libraw/libraw_types.h||libraw/libraw_types.h",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: unsigned black, cblack[4], maximum, mix_green, raw_color, zero_is_bad;",
          "144: unsigned zero_after_ff, is_raw, dng_version, is_foveon, data_error;",
          "145: unsigned tile_width, tile_length, gpsdata[32], load_flags;",
          "147: ushort shrink, iheight, iwidth, fuji_width, thumb_width, thumb_height;",
          "148: ushort *raw_image, (*image)[4];",
          "149: ushort white[8][8], curve[0x10000], cr2_slice[3], sraw_mul[4];",
          "",
          "[Removed Lines]",
          "146: ushort raw_height, raw_width, height, width, top_margin, left_margin;",
          "",
          "[Added Lines]",
          "146: ushort raw_height, raw_width, raw_pitch, height, width, top_margin, left_margin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: #define RAW(row,col) \\",
          "244: #define FC(row,col) \\",
          "",
          "[Removed Lines]",
          "241:  raw_image[(row)*raw_width+(col)]",
          "",
          "[Added Lines]",
          "241:  raw_image[(row)*raw_pitch+(col)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "530:   for (irow=row=0; irow < height; irow++) {",
          "531:     if (fread (data, 1, 1120, ifp) < 1120) derror();",
          "533:     for (dp=data; dp < data+1120;  dp+=10, pix+=8) {",
          "534:       pix[0] = (dp[0] << 2) + (dp[1] >> 6    );",
          "535:       pix[1] = (dp[2] << 2) + (dp[1] >> 4 & 3);",
          "",
          "[Removed Lines]",
          "532:     pix = raw_image + row*raw_width;",
          "",
          "[Added Lines]",
          "532:     pix = raw_image + row*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "762:   zero_after_ff = 1;",
          "763:   getbits(-1);",
          "764:   for (row=0; row < raw_height; row+=8) {",
          "766:     nblocks = MIN (8, raw_height-row) * raw_width >> 6;",
          "767:     for (block=0; block < nblocks; block++) {",
          "768:       memset (diffbuf, 0, sizeof diffbuf);",
          "",
          "[Removed Lines]",
          "765:     pixel = raw_image + row*raw_width;",
          "",
          "[Added Lines]",
          "765:     pixel = raw_image + row*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1675:       todo[i+1] = buffer >> (14-i)*5;",
          "1676:     }",
          "1677:     for (i=0; i < 16; i+=2)",
          "1679:   }",
          "1680:   maximum = 0x3ff;",
          "1681: }",
          "",
          "[Removed Lines]",
          "1678:       raw_image[todo[i]] = (todo[i+1] & 0x3ff);",
          "",
          "[Added Lines]",
          "1678:       {",
          "1679:         int row = todo[i]/raw_width;",
          "1680:         int col = todo[i]%raw_width;",
          "1681:         RAW(row,col) = (todo[i+1] & 0x3ff);",
          "1682:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1864:   bkey = get2();",
          "1865:   t_mask = ph1.format == 1 ? 0x5555:0x1354;",
          "1866:   fseek (ifp, data_offset, SEEK_SET);",
          "1868:   if (ph1.format)",
          "1869:     for (i=0; i < raw_width*raw_height; i+=2) {",
          "1870:       a = raw_image[i+0] ^ akey;",
          "1871:       b = raw_image[i+1] ^ bkey;",
          "1872:       raw_image[i+0] = (a & t_mask) | (b & ~t_mask);",
          "1873:       raw_image[i+1] = (b & t_mask) | (a & ~t_mask);",
          "1874:     }",
          "1875: }",
          "",
          "[Removed Lines]",
          "1867:   read_shorts (raw_image, raw_width*raw_height);",
          "",
          "[Added Lines]",
          "1871: #if 0",
          "1872:   read_shorts (raw_image, raw_width*raw_height); // raw_pitch should be exactly raw_width",
          "1873: #else",
          "1874:   for(int row = 0; row < raw_height; row++)",
          "1875:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "1876: #endif",
          "1879: #if 0",
          "1884: #else",
          "1885:       int row = i/raw_width;",
          "1886:       int col = i%raw_height;",
          "1887:       a = RAW(row,col) ^ akey;",
          "1888:       b = RAW(row,col+1) ^ bkey;",
          "1889:       RAW(row,col) = (a & t_mask) | (b & ~t_mask);",
          "1890:       RAW(row,col+1) = (b & t_mask) | (a & ~t_mask);",
          "1891: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1917:   pixel = (ushort *) calloc (raw_width + raw_height*4, 2);",
          "1918:   merror (pixel, \"phase_one_load_raw_c()\");",
          "1920:   fseek (ifp, strip_offset, SEEK_SET);",
          "1921:   for (row=0; row < raw_height; row++)",
          "1922:     offset[row] = get4();",
          "",
          "[Removed Lines]",
          "1919:   offset = (int *) (pixel + raw_width);",
          "",
          "[Added Lines]",
          "1937:   offset = (int *) (pixel + raw_width);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2009:  fseek (ifp, get4(), SEEK_SET);",
          "2010:       }",
          "2011:       if (filters && c != shot_select) continue;",
          "2013:       read_shorts (pixel, raw_width);",
          "2014:       if (!filters && (row = r - top_margin) < height)",
          "2015:  for (col=0; col < width; col++)",
          "",
          "[Removed Lines]",
          "2012:       if (filters) pixel = raw_image + r*raw_width;",
          "",
          "[Added Lines]",
          "2030:       if (filters) pixel = raw_image + r*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2027:   int row, col, bits=0;",
          "2029:   while (1 << ++bits < maximum);",
          "2030:   read_shorts (raw_image, raw_width*raw_height);",
          "2031:   for (row=0; row < raw_height; row++)",
          "2032:     for (col=0; col < raw_width; col++)",
          "2033:       if ((RAW(row,col) >>= load_flags) >> bits",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2048: #if 0",
          "2050: #else",
          "2051:   for(row=0;row<raw_height;row++)",
          "2052:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "2053: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2446:    RAW(y,x) = val;",
          "2447:  }",
          "2448:   }",
          "2449:   for (i=0; i < height*width; i++)",
          "2450:     raw_image[i] = curve[raw_image[i]];",
          "2451:   maximum = 0x3fff;",
          "2452: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2472: #if 0",
          "2475: #else",
          "2476:   for (i=0; i < height*width; i++)",
          "2477:     {",
          "2478:       int row = i/width;",
          "2479:       int col = i%width;",
          "2480:       RAW(row,col) = curve[RAW(row,col)];",
          "2481:     }",
          "2482: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2855:     key = key << 8 | head[i];",
          "2856:   fseek (ifp, data_offset, SEEK_SET);",
          "2857:   for (row=0; row < raw_height; row++) {",
          "2859:     if (fread (pixel, 2, raw_width, ifp) < raw_width) derror();",
          "2860:     sony_decrypt ((unsigned int *) pixel, raw_width/2, !row, key);",
          "2861:     for (col=0; col < raw_width; col++)",
          "",
          "[Removed Lines]",
          "2858:     pixel = raw_image + row*raw_width;",
          "",
          "[Added Lines]",
          "2890:     pixel = raw_image + row*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3024:       diff = diff ? -diff : 0x80;",
          "3025:     if (ftell(ifp) + 12 >= seg[1][1])",
          "3026:       diff = 0;",
          "3027:     raw_image[pix] = pred[pix & 1] += diff;",
          "3028:     if (!(pix & 1) && HOLE(pix / raw_width)) pix += 2;",
          "3029:   }",
          "3030:   maximum = 0xff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3059: #if 0",
          "3061: #else",
          "3062:     RAW(pix/raw_width,pix%raw_width) = pred[pix & 1] += diff;",
          "3063: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10796:       merror (meta_data, \"main()\");",
          "10797:     }",
          "10798:     if (filters || colors == 1) {",
          "10800:       merror (raw_image, \"main()\");",
          "10801:     }",
          "10802:     if (verbose)",
          "",
          "[Removed Lines]",
          "10799:       raw_image = (ushort *) calloc ((raw_height+7)*raw_width, 2);",
          "",
          "[Added Lines]",
          "10835:       raw_pitch = ((raw_width*2+15)/16)*8; // !!! CHANGE ME",
          "10836:       printf(\"ifname=%s raw_width=%d raw_pitch=%d\\n\",ifname,raw_width,raw_pitch);",
          "10837:       raw_image = (ushort *) calloc ((raw_height+7)*raw_pitch, 2);",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   for (irow=row=0; irow < height; irow++) {",
          "277:     if (fread (data, 1, 1120, ifp) < 1120) derror();",
          "279:     for (dp=data; dp < data+1120;  dp+=10, pix+=8) {",
          "280:       pix[0] = (dp[0] << 2) + (dp[1] >> 6    );",
          "281:       pix[1] = (dp[2] << 2) + (dp[1] >> 4 & 3);",
          "",
          "[Removed Lines]",
          "278:     pix = raw_image + row*raw_width;",
          "",
          "[Added Lines]",
          "278:     pix = raw_image + row*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:   zero_after_ff = 1;",
          "509:   getbits(-1);",
          "510:   for (row=0; row < raw_height; row+=8) {",
          "512:     nblocks = MIN (8, raw_height-row) * raw_width >> 6;",
          "513:     for (block=0; block < nblocks; block++) {",
          "514:       memset (diffbuf, 0, sizeof diffbuf);",
          "",
          "[Removed Lines]",
          "511:     pixel = raw_image + row*raw_width;",
          "",
          "[Added Lines]",
          "511:     pixel = raw_image + row*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1406:       todo[i+1] = buffer >> (14-i)*5;",
          "1407:     }",
          "1408:     for (i=0; i < 16; i+=2)",
          "1410:   }",
          "1411:   maximum = 0x3ff;",
          "1412: }",
          "",
          "[Removed Lines]",
          "1409:       raw_image[todo[i]] = (todo[i+1] & 0x3ff);",
          "",
          "[Added Lines]",
          "1409:       {",
          "1410:         int row = todo[i]/raw_width;",
          "1411:         int col = todo[i]%raw_width;",
          "1412:         RAW(row,col) = (todo[i+1] & 0x3ff);",
          "1413:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:   bkey = get2();",
          "1596:   t_mask = ph1.format == 1 ? 0x5555:0x1354;",
          "1597:   fseek (ifp, data_offset, SEEK_SET);",
          "1599:   if (ph1.format)",
          "1600:     for (i=0; i < raw_width*raw_height; i+=2) {",
          "1601:       a = raw_image[i+0] ^ akey;",
          "1602:       b = raw_image[i+1] ^ bkey;",
          "1603:       raw_image[i+0] = (a & t_mask) | (b & ~t_mask);",
          "1604:       raw_image[i+1] = (b & t_mask) | (a & ~t_mask);",
          "1605:     }",
          "1606: }",
          "",
          "[Removed Lines]",
          "1598:   read_shorts (raw_image, raw_width*raw_height);",
          "",
          "[Added Lines]",
          "1602: #if 0",
          "1603:   read_shorts (raw_image, raw_width*raw_height); // raw_pitch should be exactly raw_width",
          "1604: #else",
          "1605:   for(int row = 0; row < raw_height; row++)",
          "1606:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "1607: #endif",
          "1610: #if 0",
          "1615: #else",
          "1616:       int row = i/raw_width;",
          "1617:       int col = i%raw_height;",
          "1618:       a = RAW(row,col) ^ akey;",
          "1619:       b = RAW(row,col+1) ^ bkey;",
          "1620:       RAW(row,col) = (a & t_mask) | (b & ~t_mask);",
          "1621:       RAW(row,col+1) = (b & t_mask) | (a & ~t_mask);",
          "1622: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1648:   pixel = (ushort *) calloc (raw_width + raw_height*4, 2);",
          "1649:   merror (pixel, \"phase_one_load_raw_c()\");",
          "1651:   fseek (ifp, strip_offset, SEEK_SET);",
          "1652:   for (row=0; row < raw_height; row++)",
          "1653:     offset[row] = get4();",
          "",
          "[Removed Lines]",
          "1650:   offset = (int *) (pixel + raw_width);",
          "",
          "[Added Lines]",
          "1668:   offset = (int *) (pixel + raw_width);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1740:  fseek (ifp, get4(), SEEK_SET);",
          "1741:       }",
          "1742:       if (filters && c != shot_select) continue;",
          "1744:       read_shorts (pixel, raw_width);",
          "1745:       if (!filters && (row = r - top_margin) < height)",
          "1746:  for (col=0; col < width; col++)",
          "",
          "[Removed Lines]",
          "1743:       if (filters) pixel = raw_image + r*raw_width;",
          "",
          "[Added Lines]",
          "1761:       if (filters) pixel = raw_image + r*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1758:   int row, col, bits=0;",
          "1760:   while (1 << ++bits < maximum);",
          "1761:   read_shorts (raw_image, raw_width*raw_height);",
          "1762:   for (row=0; row < raw_height; row++)",
          "1763:     for (col=0; col < raw_width; col++)",
          "1764:       if ((RAW(row,col) >>= load_flags) >> bits",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1779: #if 0",
          "1781: #else",
          "1782:   for(row=0;row<raw_height;row++)",
          "1783:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "1784: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2177:    RAW(y,x) = val;",
          "2178:  }",
          "2179:   }",
          "2180:   for (i=0; i < height*width; i++)",
          "2181:     raw_image[i] = curve[raw_image[i]];",
          "2182:   maximum = 0x3fff;",
          "2183: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2203: #if 0",
          "2206: #else",
          "2207:   for (i=0; i < height*width; i++)",
          "2208:     {",
          "2209:       int row = i/width;",
          "2210:       int col = i%width;",
          "2211:       RAW(row,col) = curve[RAW(row,col)];",
          "2212:     }",
          "2213: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2586:     key = key << 8 | head[i];",
          "2587:   fseek (ifp, data_offset, SEEK_SET);",
          "2588:   for (row=0; row < raw_height; row++) {",
          "2590:     if (fread (pixel, 2, raw_width, ifp) < raw_width) derror();",
          "2591:     sony_decrypt ((unsigned int *) pixel, raw_width/2, !row, key);",
          "2592:     for (col=0; col < raw_width; col++)",
          "",
          "[Removed Lines]",
          "2589:     pixel = raw_image + row*raw_width;",
          "",
          "[Added Lines]",
          "2621:     pixel = raw_image + row*raw_pitch;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2755:       diff = diff ? -diff : 0x80;",
          "2756:     if (ftell(ifp) + 12 >= seg[1][1])",
          "2757:       diff = 0;",
          "2758:     raw_image[pix] = pred[pix & 1] += diff;",
          "2759:     if (!(pix & 1) && HOLE(pix / raw_width)) pix += 2;",
          "2760:   }",
          "2761:   maximum = 0xff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2790: #if 0",
          "2792: #else",
          "2793:     RAW(pix/raw_width,pix%raw_width) = pred[pix & 1] += diff;",
          "2794: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2897:   jas_stream_close (in);",
          "2898: #endif",
          "2899: }",
          "2901: void CLASS crop_masked_pixels()",
          "2902: {",
          "2903:   int row, col;",
          "",
          "[Removed Lines]",
          "2900: #line 3877 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "2936: #line 3913 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3000:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
          "3001: #endif",
          "3002: }",
          "3004: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
          "3005: {",
          "3006:   int i;",
          "",
          "[Removed Lines]",
          "3003: #line 4145 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "3039: #line 4181 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4498:     fseek (ifp, save, SEEK_SET);",
          "4499:   }",
          "4500: }",
          "4502: void CLASS parse_makernote (int base, int uptag)",
          "4503: {",
          "4504:   static const uchar xlat[2][256] = {",
          "",
          "[Removed Lines]",
          "4501: #line 5647 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "4537: #line 5683 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5013:     fseek (ifp, save, SEEK_SET);",
          "5014:   }",
          "5015: }",
          "5017: int CLASS parse_tiff_ifd (int base)",
          "5018: {",
          "5019:   unsigned entries, tag, type, len, plen=16, save;",
          "",
          "[Removed Lines]",
          "5016: #line 6167 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "5052: #line 6203 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6257:     data_offset = get4();",
          "6258:   }",
          "6259: }",
          "6261: char * CLASS foveon_gets (int offset, char *str, int len)",
          "6262: {",
          "6263:   int i;",
          "",
          "[Removed Lines]",
          "6260: #line 7413 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6296: #line 7449 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6358:   }",
          "6359:   is_foveon = 1;",
          "6360: }",
          "6363:    All matrices are from Adobe DNG Converter unless otherwise noted.",
          "",
          "[Removed Lines]",
          "6361: #line 7516 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6397: #line 7552 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8801: }",
          "8805: void CLASS convert_to_rgb()",
          "8806: {",
          "8807: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "8804: #line 10050 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "8840: #line 10086 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9032:   if (flip & 1) col = iwidth  - 1 - col;",
          "9033:   return row * iwidth + col;",
          "9034: }",
          "9036: void CLASS tiff_set (ushort *ntag,",
          "9037:  ushort tag, ushort type, int count, int val)",
          "9038: {",
          "",
          "[Removed Lines]",
          "9035: #line 10306 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9071: #line 10342 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 3982 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 4018 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "34:    Seach from the current directory up to the root looking for",
          "35:    a \".badpixels\" file, and fix those pixels now.",
          "",
          "[Removed Lines]",
          "32: #line 3993 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 4029 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:   if (cfname)",
          "56:     fp = fopen (cfname, \"r\");",
          "58:   if (!fp)",
          "59:       {",
          "60: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "57: #line 4043 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "57: #line 4079 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 9961 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 9997 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/defines.h||internal/defines.h": [
          "File: internal/defines.h -> internal/defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: #define RAW(row,col) \\",
          "153: #line 248 \"dcraw/dcraw.c\"",
          "154: #define BAYER(row,col) \\",
          "155:  image[((row) >> shrink)*iwidth + ((col) >> shrink)][FC(row,col)]",
          "",
          "[Removed Lines]",
          "152:  raw_image[(row)*raw_width+(col)]",
          "",
          "[Added Lines]",
          "152:  raw_image[(row)*raw_pitch+(col)]",
          "",
          "---------------"
        ],
        "internal/var_defines.h||internal/var_defines.h": [
          "File: internal/var_defines.h -> internal/var_defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define raw_height      (imgdata.sizes.raw_height)",
          "41: #define raw_width       (imgdata.sizes.raw_width)",
          "42: #define height          (imgdata.sizes.height)",
          "43: #define width           (imgdata.sizes.width)",
          "44: #define top_margin      (imgdata.sizes.top_margin)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #define raw_pitch       (imgdata.sizes.raw_pitch)",
          "",
          "---------------"
        ],
        "libraw/libraw_const.h||libraw/libraw_const.h": [
          "File: libraw/libraw_const.h -> libraw/libraw_const.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     LIBRAW_DECODER_USEBAYER2 = 1<<3,",
          "31:     LIBRAW_DECODER_HASCURVE = 1<<4,",
          "32:     LIBRAW_DECODER_ITSASONY = 1<<5,",
          "33:     LIBRAW_DECODER_NOTSET = 1<<15",
          "34: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     LIBRAW_DECODER_TRYRAWSPEED = 1<<6,",
          "",
          "---------------"
        ],
        "libraw/libraw_types.h||libraw/libraw_types.h": [
          "File: libraw/libraw_types.h -> libraw/libraw_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: typedef struct",
          "164: {",
          "165:     ushort      raw_height,",
          "167:                 height,",
          "168:                 width,",
          "169:                 top_margin,",
          "",
          "[Removed Lines]",
          "166:                 raw_width,",
          "",
          "[Added Lines]",
          "166:                 raw_width,",
          "167:                 raw_pitch,",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:         {",
          "302:             d_info->decoder_name = \"lossless_jpeg_load_raw()\";",
          "304:         }",
          "305:     else if (load_raw == &LibRaw::canon_sraw_load_raw)",
          "306:         {",
          "",
          "[Removed Lines]",
          "303:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_HASCURVE;",
          "",
          "[Added Lines]",
          "303:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_HASCURVE | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:             d_info->decoder_name = \"lossless_dng_load_raw()\";",
          "314:             d_info->decoder_flags = rawdata? LIBRAW_DECODER_FLATFIELD : LIBRAW_DECODER_LEGACY ;",
          "315:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "316:         }",
          "317:     else if (load_raw == &LibRaw::packed_dng_load_raw)",
          "318:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:             if(rawdata)",
          "317:               d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:             d_info->decoder_name = \"packed_dng_load_raw()\";",
          "321:             d_info->decoder_flags = rawdata ? LIBRAW_DECODER_FLATFIELD : LIBRAW_DECODER_LEGACY;",
          "322:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "323:         }",
          "324:     else if (load_raw == &LibRaw::pentax_load_raw )",
          "325:         {",
          "326:             d_info->decoder_name = \"pentax_load_raw()\";",
          "328:         }",
          "329:     else if (load_raw == &LibRaw::nikon_load_raw)",
          "330:         {",
          "332:             d_info->decoder_name = \"nikon_load_raw()\";",
          "334:         }",
          "335:     else if (load_raw == &LibRaw::rollei_load_raw )",
          "336:         {",
          "",
          "[Removed Lines]",
          "327:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "333:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "",
          "[Added Lines]",
          "325:             if(rawdata)",
          "326:               d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "331:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "337:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:     else if (load_raw == &LibRaw::packed_load_raw )",
          "378:         {",
          "379:             d_info->decoder_name = \"packed_load_raw()\";",
          "381:         }",
          "382:     else if (load_raw == &LibRaw::nokia_load_raw )",
          "383:         {",
          "",
          "[Removed Lines]",
          "380:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "",
          "[Added Lines]",
          "384:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "388:     else if (load_raw == &LibRaw::panasonic_load_raw )",
          "389:         {",
          "390:             d_info->decoder_name = \"panasonic_load_raw()\";",
          "392:         }",
          "393:     else if (load_raw == &LibRaw::olympus_load_raw )",
          "394:         {",
          "395:             d_info->decoder_name = \"olympus_load_raw()\";",
          "397:         }",
          "398:     else if (load_raw == &LibRaw::minolta_rd175_load_raw )",
          "399:         {",
          "",
          "[Removed Lines]",
          "391:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "396:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "",
          "[Added Lines]",
          "395:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "400:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:     else if (load_raw == &LibRaw::sony_load_raw )",
          "471:         {",
          "472:             d_info->decoder_name = \"sony_load_raw()\";",
          "474:         }",
          "475:     else if (load_raw == &LibRaw::sony_arw_load_raw )",
          "476:         {",
          "477:             d_info->decoder_name = \"sony_arw_load_raw()\";",
          "479:         }",
          "480:     else if (load_raw == &LibRaw::sony_arw2_load_raw )",
          "481:         {",
          "482:             d_info->decoder_name = \"sony_arw2_load_raw()\";",
          "483:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "485:             d_info->decoder_flags |= LIBRAW_DECODER_ITSASONY;",
          "486:         }",
          "487:     else if (load_raw == &LibRaw::smal_v6_load_raw )",
          "",
          "[Removed Lines]",
          "473:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "478:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "484:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "",
          "[Added Lines]",
          "477:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "482:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "488:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "791:                 if(rheight < S.height + S.top_margin)",
          "792:                     rheight = S.height + S.top_margin;",
          "793:             }",
          "795:         if(decoder_info.decoder_flags &  LIBRAW_DECODER_FLATFIELD)",
          "796:             {",
          "798:               imgdata.rawdata.raw_image = (ushort*) imgdata.rawdata.raw_alloc;",
          "799:             }",
          "800:         else if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "",
          "[Removed Lines]",
          "797:               imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "",
          "[Added Lines]",
          "798:         S.raw_pitch = S.raw_width;",
          "801:               S.raw_pitch = ((rwidth*2+15)/16)*8;",
          "802:               if(S.raw_pitch!=S.raw_width)",
          "803:                 fprintf(stderr,\"File %s pitch=%d width=%d\\n\",ID.input->fname(),S.raw_pitch,S.raw_width);",
          "804:               imgdata.rawdata.raw_alloc = malloc(S.raw_pitch*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "948:                     }",
          "949:                     if (r < S.height && c < S.width)",
          "950:                       imgdata.image[((r)>>IO.shrink)*S.iwidth+((c)>>IO.shrink)][FC(r,c)]",
          "952:                   }",
          "953:                 }",
          "954:               }",
          "",
          "[Removed Lines]",
          "951:                         = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "",
          "[Added Lines]",
          "958:                         = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch+(col+S.left_margin)];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "957:                 for (row=0; row < S.height; row++)",
          "958:                   for (col=0; col < S.width; col++)",
          "959:                     imgdata.image[((row) >> IO.shrink)*S.iwidth + ((col) >> IO.shrink)][fcol(row,col)]",
          "961:               }",
          "962:             }",
          "963:         else if(decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "",
          "[Removed Lines]",
          "960:                         = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "",
          "[Added Lines]",
          "967:                         = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch+(col+S.left_margin)];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "991: void LibRaw::phase_one_allocate_tempbuffer()",
          "992: {",
          "995:   merror (imgdata.rawdata.raw_image, \"phase_one_prepare_to_correct()\");",
          "996: }",
          "997: void LibRaw::phase_one_free_tempbuffer()",
          "",
          "[Removed Lines]",
          "994:   imgdata.rawdata.raw_image = (ushort*)malloc(S.raw_width*S.raw_height*sizeof(ushort));",
          "",
          "[Added Lines]",
          "1001:   imgdata.rawdata.raw_image = (ushort*)malloc(S.raw_pitch*S.raw_height*sizeof(ushort));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1064:                         }",
          "1065:                         if (r < S.height && c < S.width)",
          "1066:                           {",
          "1068:                             int cc = FC(r,c);",
          "1069:                             if(val>cblack[cc])",
          "1070:                               {",
          "",
          "[Removed Lines]",
          "1067:                             unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "",
          "[Added Lines]",
          "1074:                             unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch+(col+S.left_margin)];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1099:       unsigned short ldmax = 0;",
          "1100:       for (col=0; col < S.width; col++)",
          "1101:         {",
          "1103:           int cc = fcol(row,col);",
          "1104:           if(val>cblack[cc])",
          "1105:             {",
          "",
          "[Removed Lines]",
          "1102:           unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width+(col+S.left_margin)];",
          "",
          "[Added Lines]",
          "1109:           unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch+(col+S.left_margin)];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1256:                           c = row + ((col+1) >> 1);",
          "1257:                         }",
          "1260:                                                             +(col+S.left_margin)];",
          "1261:                         int cc = FCF(row,col);",
          "1262:                         if(val > cblack[cc])",
          "",
          "[Removed Lines]",
          "1259:                         unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_width",
          "",
          "[Added Lines]",
          "1266:                         unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a964ae9f0640da1001733a3801cd40da8279e79",
      "candidate_info": {
        "commit_hash": "8a964ae9f0640da1001733a3801cd40da8279e79",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/8a964ae9f0640da1001733a3801cd40da8279e79",
        "files": [
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp"
        ],
        "message": "files regenerated",
        "before_after_code_files": [
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ],
          "candidate": [
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ]
        }
      },
      "candidate_diff": {
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6411:  { 6461,-907,-882,-4300,12184,2378,-819,1944,5931 } },",
          "6412:     { \"Canon EOS 650D\", 0, 0x354d,",
          "6413:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6414:     { \"Canon EOS 1000D\", 0, 0xe43,",
          "6415:  { 6771,-1139,-977,-7818,15123,2928,-1244,1437,7533 } },",
          "6416:     { \"Canon EOS 1100D\", 0, 0x3510,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6414:  { \"Canon EOS 700D\", 0, 0x354d,",
          "6415:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6416:  { \"Canon EOS REBEL T5i\", 0, 0x354d,",
          "6417:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6435:  { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },",
          "6436:     { \"Canon EOS-1D\", 0, 0xe20,",
          "6437:  { 6806,-179,-1020,-8097,16415,1687,-3267,4236,7690 } },",
          "6438:     { \"Canon EOS\", 0, 0,",
          "6439:  { 8197,-2000,-1118,-6714,14335,2592,-2536,3178,8266 } },",
          "6440:     { \"Canon PowerShot A530\", 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6442:  { \"Canon EOS 100D\", 0, 0x3cf0,",
          "6443:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6444:  { \"Canon EOS REBEL SL1\", 0, 0x3cf0,",
          "6445:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6595:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6596:     { \"FUJIFILM HS3\", 0, 0,",
          "6597:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6598:  { \"FUJIFILM X100S\", 0, 0,",
          "6599:  { 10592,-4262,-1008,-3514,11355,2465,-870,2025,6386 } },",
          "6600:     { \"FUJIFILM X100\", 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6606:  { \"FUJIFILM HS50EXR\", 0, 0,",
          "6607:  { 12085,-4727,-953,-3257,11489,2002,-511,2046,4592 } },",
          "6608:  { \"FUJIFILM SL1000\", 0, 0,",
          "6609:  { 11705,-4262,-1107,-2282,10791,1709,-555,1713,4945 } },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6753:  { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },",
          "6754:     { \"NIKON D70\", 0, 0,",
          "6755:  { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },",
          "6756:     { \"NIKON D800\", 0, 0,",
          "6757:  { 7866,-2108,-555,-4869,12483,2681,-1176,2069,7501 } },",
          "6758:     { \"NIKON D80\", 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6768:  { \"NIKON D7100\", 0, 0,",
          "6769:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6785:  { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },",
          "6786:     { \"NIKON E8800\", 0, 0,",
          "6787:  { 7971,-2314,-913,-8451,15762,2894,-1442,1520,7610 } },",
          "6788:     { \"NIKON COOLPIX P6000\", 0, 0,",
          "6789:  { 9698,-3367,-914,-4706,12584,2368,-837,968,5801 } },",
          "6790:     { \"NIKON COOLPIX P7000\", 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6802:  { \"NIKON COOLPIX A\", 0, 0,",
          "6803:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "6804:  { \"NIKON COOLPIX P330\", 0, 0,",
          "6805:  { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6793:  { 11053,-4269,-1024,-1976,10182,2088,-526,1263,4469 } },",
          "6794:     { \"NIKON COOLPIX P7700\", 200, 0,",
          "6795:  { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },",
          "6796:     { \"NIKON 1 V2\", 0, 0,",
          "6797:  { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },",
          "6798:     { \"NIKON 1 \", 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6814:  { \"NIKON 1 J3\", 0, 0,",
          "6815:  { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },",
          "6816:  { \"NIKON 1 S1\", 0, 0,",
          "6817:  { 8994,-2667,-865,-4594,12324,2552,-699,1786,6260 } },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6877:  { 10915,-3677,-982,-5587,12986,2911,-1168,1968,6223 } },",
          "6878:     { \"OLYMPUS SP570UZ\", 0, 0,",
          "6879:  { 11522,-4044,-1146,-4736,12172,2904,-988,1829,6039 } },",
          "6880:     { \"OLYMPUS XZ-1\", 0, 0,",
          "6881:  { 10901,-4095,-1074,-1141,9208,2293,-62,1417,5158 } },",
          "6882:     { \"OLYMPUS XZ-2\", 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6902:  { \"OLYMPUS XZ-10\", 0, 0,",
          "6903:  { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6917:  { 8713,-2833,-743,-4342,11900,2772,-722,1543,6247 } },",
          "6918:     { \"PENTAX K-7\", 0, 0,",
          "6919:  { 9142,-2947,-678,-8648,16967,1663,-2224,2898,8615 } },",
          "6920:     { \"PENTAX Q10\", 0, 0,",
          "6921:  { 12995,-5593,-1107,-1879,10139,2027,-64,1233,4919 } },",
          "6922:     { \"PENTAX 645D\", 0, 0x3e00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6944:  { \"PENTAX MX-1\", 0, 0,",
          "6945:  { 8804,-2523,-1238,-2423,11627,860,-682,1774,4753 } },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6993:  { 6763,-1919,-863,-3868,11515,2684,-1216,2387,5879 } },",
          "6994:     { \"Panasonic DMC-G5\", 143, 0xfff,",
          "6995:  { 7798,-2562,-740,-3879,11584,2613,-1055,2248,5434 } },",
          "6996:     { \"Panasonic DMC-GF1\", 15, 0xf92,",
          "6997:  { 7888,-1902,-1011,-8106,16085,2099,-2353,2866,7330 } },",
          "6998:     { \"Panasonic DMC-GF2\", 143, 0xfff,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7022:  { \"Panasonic DMC-G6\", 143, 0xfff,",
          "7023:  { 8294,-2891,-651,-3869,11590,2595,-1183,2267,5352 } },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7081:  { 5413,-1162,-365,-5665,13098,2866,-608,1179,8440 } },",
          "7082:     { \"SONY DSLR-A900\", 128, 0,",
          "7083:  { 5209,-1072,-397,-8845,16120,2919,-1618,1803,8654 } },",
          "7085:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "7086:     { \"SONY NEX-5N\", 128, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7113:  { 6129,-1545, -418,-4930,12490,2743,-977,1693,6615 } },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7105:  { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },",
          "7106:     { \"SONY SLT-A57\", 128, 0,",
          "7107:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "7108:     { \"SONY SLT-A65\", 128, 0,",
          "7109:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "7110:     { \"SONY SLT-A77\", 128, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7138:  { \"SONY SLT-A58\", 128, 0,",
          "7139:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7989:     filters = 0x94949494;",
          "7990:     if (model[9] == '7' && iso_speed >= 400)",
          "7991:       black = 255;",
          "7992:   } else if (!strncmp(model,\"1 \",2)) {",
          "7993:     height -= 2;",
          "7994:   } else if (fsize == 1581060) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8024:   } else if (!strncmp(model,\"COOLPIX A\",9) && raw_width == 4992) {",
          "8025:    width = 4948;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8108:       left_margin = 0;",
          "8109:       filters = 2;",
          "8110:     }",
          "8111:  if(!strcmp(model,\"X20\"))",
          "8112:  {",
          "8113:   left_margin = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8145:  if(!strcmp(model,\"HS50EXR\"))",
          "8146:  {",
          "8147:   filters = 0x1e1e1e1e;",
          "8148:   width=3230;",
          "8149:  }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8231:     top_margin = 2;",
          "8232:     width  = 5574 - (left_margin = 32 + tiff_bps);",
          "8233:     if (tiff_bps == 12) load_flags = 80;",
          "8234:   } else if (!strcmp(model,\"EX1\")) {",
          "8235:     order = 0x4949;",
          "8236:     height -= 20;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8273:   } else if (!strcmp(make,\"SAMSUNG\") && !strcmp(model,\"NX300\")) {",
          "8274:    is_raw =0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8579:     } else if (!strcmp(model,\"XZ-2\")) {",
          "8580:       load_raw = &CLASS packed_load_raw;",
          "8581:       load_flags = 24;",
          "8582:     }",
          "8583:   } else if (!strcmp(model,\"N Digital\")) {",
          "8584:     height = 2047;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8623:     } else if (!strcmp(model,\"XZ-10\")) {",
          "8624:       load_raw = &CLASS packed_load_raw;",
          "8625:       load_flags = 24;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8923: }",
          "8927: void CLASS convert_to_rgb()",
          "8928: {",
          "8929: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "8926: #line 10173 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "8970: #line 10217 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9154:   if (flip & 1) col = iwidth  - 1 - col;",
          "9155:   return row * iwidth + col;",
          "9156: }",
          "9158: void CLASS tiff_set (ushort *ntag,",
          "9159:  ushort tag, ushort type, int count, int val)",
          "9160: {",
          "",
          "[Removed Lines]",
          "9157: #line 10429 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9201: #line 10473 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 10084 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 10128 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffe9ffee3d2f67c530ca9051b2dd87245ba36385",
      "candidate_info": {
        "commit_hash": "ffe9ffee3d2f67c530ca9051b2dd87245ba36385",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/ffe9ffee3d2f67c530ca9051b2dd87245ba36385",
        "files": [
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp"
        ],
        "message": "avoid gcc 4.8 bug",
        "before_after_code_files": [
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ],
          "candidate": [
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
            "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp"
          ]
        }
      },
      "candidate_diff": {
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2549:     for (p=0; p < 127; p++)",
          "2550:       pad[p] = htonl(pad[p]);",
          "2551:   }",
          "2553:   while (len--)",
          "2554:     {",
          "2557:       p++;",
          "2558:     }",
          "2559: #else",
          "",
          "[Removed Lines]",
          "2552: #if 0 // Avoid gcc 4.8 bug",
          "2555:       pad[p & 127] = pad[(p+1) & 127] ^ pad[(p+65) & 127];",
          "",
          "[Added Lines]",
          "2552: #if 1 // Avoid gcc 4.8 bug",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2894:   jas_stream_close (in);",
          "2895: #endif",
          "2896: }",
          "2898: void CLASS crop_masked_pixels()",
          "2899: {",
          "2900:   int row, col;",
          "",
          "[Removed Lines]",
          "2897: #line 3875 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "2896: #line 3874 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2994:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
          "2995: #endif",
          "2996: }",
          "2998: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
          "2999: {",
          "3000:   int i;",
          "",
          "[Removed Lines]",
          "2997: #line 4140 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "2996: #line 4139 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4489:     fseek (ifp, save, SEEK_SET);",
          "4490:   }",
          "4491: }",
          "4493: void CLASS parse_makernote (int base, int uptag)",
          "4494: {",
          "4495:   static const uchar xlat[2][256] = {",
          "",
          "[Removed Lines]",
          "4492: #line 5639 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "4491: #line 5638 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5004:     fseek (ifp, save, SEEK_SET);",
          "5005:   }",
          "5006: }",
          "5008: int CLASS parse_tiff_ifd (int base)",
          "5009: {",
          "5010:   unsigned entries, tag, type, len, plen=16, save;",
          "",
          "[Removed Lines]",
          "5007: #line 6159 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "5006: #line 6158 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6263:     data_offset = get4();",
          "6264:   }",
          "6265: }",
          "6267: char * CLASS foveon_gets (int offset, char *str, int len)",
          "6268: {",
          "6269:   int i;",
          "",
          "[Removed Lines]",
          "6266: #line 7420 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6265: #line 7419 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6364:   }",
          "6365:   is_foveon = 1;",
          "6366: }",
          "6369:    All matrices are from Adobe DNG Converter unless otherwise noted.",
          "",
          "[Removed Lines]",
          "6367: #line 7523 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6366: #line 7522 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8982: }",
          "8986: void CLASS convert_to_rgb()",
          "8987: {",
          "8988: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "8985: #line 10232 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "8984: #line 10231 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9213:   if (flip & 1) col = iwidth  - 1 - col;",
          "9214:   return row * iwidth + col;",
          "9215: }",
          "9217: void CLASS tiff_set (ushort *ntag,",
          "9218:  ushort tag, ushort type, int count, int val)",
          "9219: {",
          "",
          "[Removed Lines]",
          "9216: #line 10488 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9215: #line 10487 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 3977 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 3976 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "34:    Seach from the current directory up to the root looking for",
          "35:    a \".badpixels\" file, and fix those pixels now.",
          "",
          "[Removed Lines]",
          "32: #line 3988 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 3987 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:   if (cfname)",
          "56:     fp = fopen (cfname, \"r\");",
          "58:   if (!fp)",
          "59:       {",
          "60: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "57: #line 4038 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "57: #line 4037 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 10143 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 10142 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}