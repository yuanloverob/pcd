{
  "cve_id": "CVE-2015-0205",
  "cve_desc": "The ssl3_get_cert_verify function in s3_srvr.c in OpenSSL 1.0.0 before 1.0.0p and 1.0.1 before 1.0.1k accepts client authentication with a Diffie-Hellman (DH) certificate without requiring a CertificateVerify message, which allows remote attackers to obtain access without knowledge of a private key via crafted TLS Handshake Protocol traffic to a server that recognizes a Certification Authority with DH support.",
  "repo": "openssl/openssl",
  "patch_hash": "1421e0c584ae9120ca1b88098f13d6d2e90b83a3",
  "patch_info": {
    "commit_hash": "1421e0c584ae9120ca1b88098f13d6d2e90b83a3",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/1421e0c584ae9120ca1b88098f13d6d2e90b83a3",
    "files": [
      "ssl/s3_srvr.c"
    ],
    "message": "Unauthenticated DH client certificate fix.\n\nFix to prevent use of DH client certificates without sending\ncertificate verify message.\n\nIf we've used a client certificate to generate the premaster secret\nssl3_get_client_key_exchange returns 2 and ssl3_get_cert_verify is\nnever called.\n\nWe can only skip the certificate verify message in\nssl3_get_cert_verify if the client didn't send a certificate.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\nCVE-2015-0205\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "ssl/s3_srvr.c||ssl/s3_srvr.c"
    ]
  },
  "patch_diff": {
    "ssl/s3_srvr.c||ssl/s3_srvr.c": [
      "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3056:  if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE_VERIFY)",
      "3057:   {",
      "3058:   s->s3->tmp.reuse_message=1;",
      "3060:    {",
      "3061:    al=SSL_AD_UNEXPECTED_MESSAGE;",
      "3062:    SSLerr(SSL_F_SSL3_GET_CERT_VERIFY,SSL_R_MISSING_VERIFY_MESSAGE);",
      "",
      "[Removed Lines]",
      "3059:   if ((peer != NULL) && (type & EVP_PKT_SIGN))",
      "",
      "[Added Lines]",
      "3059:   if (peer != NULL)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73999b62a27d9ac7c10ff27d79fd2bab97f97670",
      "candidate_info": {
        "commit_hash": "73999b62a27d9ac7c10ff27d79fd2bab97f97670",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/73999b62a27d9ac7c10ff27d79fd2bab97f97670",
        "files": [
          "include/openssl/ssl.h",
          "ssl/d1_clnt.c",
          "ssl/s3_both.c",
          "ssl/s3_clnt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem.c"
        ],
        "message": "Move PACKET creation into the state machine\n\nPreviously each message specific process function would create its own\nPACKET structure. Rather than duplicate all of this code lots of times we\nshould create it in the state machine itself.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/d1_clnt.c||ssl/d1_clnt.c",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem.c||ssl/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1985: # define SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC          371",
          "1986: # define SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST        385",
          "1987: # define SSL_F_DTLS_GET_REASSEMBLED_MESSAGE               370",
          "1988: # define SSL_F_READ_STATE_MACHINE                         352",
          "1989: # define SSL_F_SSL3_ACCEPT                                128",
          "1990: # define SSL_F_SSL3_ADD_CERT_TO_BUF                       296",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1988: # define SSL_F_DTLS_PROCESS_HELLO_VERIFY                  386",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300: # define SSL_R_INVALID_TICKET_KEYS_LENGTH                 325",
          "2301: # define SSL_R_INVALID_TRUST                              279",
          "2302: # define SSL_R_LENGTH_MISMATCH                            159",
          "2303: # define SSL_R_LENGTH_TOO_SHORT                           160",
          "2304: # define SSL_R_LIBRARY_BUG                                274",
          "2305: # define SSL_R_LIBRARY_HAS_NO_CIPHERS                     161",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304: # define SSL_R_LENGTH_TOO_LONG                            102",
          "",
          "---------------"
        ],
        "ssl/d1_clnt.c||ssl/d1_clnt.c": [
          "File: ssl/d1_clnt.c -> ssl/d1_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                           dtls1_get_client_method, DTLSv1_2_enc_data)",
          "160: {",
          "161:     int al;",
          "163:     unsigned int cookie_len;",
          "169:     if (cookie_len > sizeof(s->d1->cookie)) {",
          "170:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "171:         goto f_err;",
          "172:     }",
          "175:     s->d1->cookie_len = cookie_len;",
          "177:     return MSG_PROCESS_FINISHED_READING;",
          "",
          "[Removed Lines]",
          "159: enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, unsigned long n)",
          "162:     unsigned char *data;",
          "165:     data = (unsigned char *)s->init_msg;",
          "166:     data += 2;",
          "168:     cookie_len = *(data++);",
          "174:     memcpy(s->d1->cookie, data, cookie_len);",
          "",
          "[Added Lines]",
          "159: enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, PACKET *pkt)",
          "163:     PACKET cookiepkt;",
          "165:     if (!PACKET_forward(pkt, 2)",
          "166:             || !PACKET_get_length_prefixed_1(pkt, &cookiepkt)) {",
          "167:         al = SSL_AD_DECODE_ERROR;",
          "168:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "169:         goto f_err;",
          "170:     }",
          "172:     cookie_len = PACKET_remaining(&cookiepkt);",
          "175:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_TOO_LONG);",
          "179:     if (!PACKET_copy_bytes(&cookiepkt, s->d1->cookie, cookie_len)) {",
          "180:         al = SSL_AD_DECODE_ERROR;",
          "181:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "182:         goto f_err;",
          "183:     }",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: }",
          "225: #endif",
          "228: {",
          "229:     int al;",
          "236:     if (SSL_IS_DTLS(s)) {",
          "238:                     || (s->version != DTLS1_BAD_VER",
          "240:                 al = SSL_AD_ILLEGAL_PARAMETER;",
          "241:                 SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "242:                        SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "243:                 goto f_err;",
          "244:         }",
          "245:     } else {",
          "247:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "248:             SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "249:                    SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "",
          "[Removed Lines]",
          "227: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n)",
          "237:         if ((s->version == DTLS1_BAD_VER && n != DTLS1_CCS_HEADER_LENGTH + 1)",
          "239:                         && n != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "246:         if (n != 0) {",
          "",
          "[Added Lines]",
          "227: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, PACKET *pkt)",
          "230:     long remain;",
          "232:     remain = PACKET_remaining(pkt);",
          "239:         if ((s->version == DTLS1_BAD_VER",
          "240:                         && remain != DTLS1_CCS_HEADER_LENGTH + 1)",
          "242:                         && remain != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "249:         if (remain != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     return MSG_PROCESS_ERROR;",
          "289: }",
          "292: {",
          "293:     int al, i;",
          "297:     if (!s->s3->change_cipher_spec) {",
          "",
          "[Removed Lines]",
          "291: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n)",
          "294:     unsigned char *p;",
          "",
          "[Added Lines]",
          "294: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:     }",
          "302:     s->s3->change_cipher_spec = 0;",
          "305:     i = s->s3->tmp.peer_finish_md_len;",
          "308:         al = SSL_AD_DECODE_ERROR;",
          "309:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_BAD_DIGEST_LENGTH);",
          "310:         goto f_err;",
          "311:     }",
          "314:         al = SSL_AD_DECRYPT_ERROR;",
          "315:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_DIGEST_CHECK_FAILED);",
          "316:         goto f_err;",
          "",
          "[Removed Lines]",
          "304:     p = (unsigned char *)s->init_msg;",
          "307:     if (i < 0 || (unsigned long)i != n) {",
          "313:     if (CRYPTO_memcmp(p, s->s3->tmp.peer_finish_md, i) != 0) {",
          "",
          "[Added Lines]",
          "308:     if (i < 0 || (unsigned long)i != PACKET_remaining(pkt)) {",
          "314:     if (CRYPTO_memcmp(PACKET_data(pkt), s->s3->tmp.peer_finish_md, i) != 0) {",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     return 0;",
          "449: }",
          "452: {",
          "453:     STACK_OF(SSL_CIPHER) *sk;",
          "454:     const SSL_CIPHER *c;",
          "456:     size_t session_id_len;",
          "457:     unsigned char *cipherchars;",
          "458:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "451: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, unsigned long n)",
          "455:     PACKET pkt, session_id;",
          "",
          "[Added Lines]",
          "451: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, PACKET *pkt)",
          "455:     PACKET session_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     SSL_COMP *comp;",
          "462: #endif",
          "470:     if (s->method->version == TLS_ANY_VERSION) {",
          "471:         unsigned int sversion;",
          "474:             al = SSL_AD_DECODE_ERROR;",
          "475:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "476:             goto f_err;",
          "",
          "[Removed Lines]",
          "464:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "465:         al = SSL_AD_INTERNAL_ERROR;",
          "466:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "467:         goto f_err;",
          "468:     }",
          "473:         if (!PACKET_get_net_2(&pkt, &sversion)) {",
          "",
          "[Added Lines]",
          "467:         if (!PACKET_get_net_2(pkt, &sversion)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:         unsigned int hversion;",
          "516:         int options;",
          "519:             al = SSL_AD_DECODE_ERROR;",
          "520:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "521:             goto f_err;",
          "",
          "[Removed Lines]",
          "518:         if (!PACKET_get_net_2(&pkt, &hversion)) {",
          "",
          "[Added Lines]",
          "512:         if (!PACKET_get_net_2(pkt, &hversion)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     } else {",
          "543:         unsigned char *vers;",
          "546:             al = SSL_AD_DECODE_ERROR;",
          "547:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "548:             goto f_err;",
          "",
          "[Removed Lines]",
          "545:         if (!PACKET_get_bytes(&pkt, &vers, 2)) {",
          "",
          "[Added Lines]",
          "539:         if (!PACKET_get_bytes(pkt, &vers, 2)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:         al = SSL_AD_DECODE_ERROR;",
          "563:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "564:         goto f_err;",
          "",
          "[Removed Lines]",
          "561:     if (!PACKET_copy_bytes(&pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "[Added Lines]",
          "555:     if (!PACKET_copy_bytes(pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "567:     s->hit = 0;",
          "571:         al = SSL_AD_DECODE_ERROR;",
          "572:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "573:         goto f_err;",
          "",
          "[Removed Lines]",
          "570:     if (!PACKET_get_length_prefixed_1(&pkt, &session_id)) {",
          "",
          "[Added Lines]",
          "564:     if (!PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "580:         goto f_err;",
          "581:     }",
          "584:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "585:         al = SSL_AD_DECODE_ERROR;",
          "586:         goto f_err;",
          "",
          "[Removed Lines]",
          "583:     if (!PACKET_get_bytes(&pkt, &cipherchars, TLS_CIPHER_LEN)) {",
          "",
          "[Added Lines]",
          "577:     if (!PACKET_get_bytes(pkt, &cipherchars, TLS_CIPHER_LEN)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "700:         goto f_err;",
          "704:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "705:         al = SSL_AD_DECODE_ERROR;",
          "706:         goto f_err;",
          "",
          "[Removed Lines]",
          "703:     if (!PACKET_get_1(&pkt, &compression)) {",
          "",
          "[Added Lines]",
          "697:     if (!PACKET_get_1(pkt, &compression)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "748: #endif",
          "752:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "753:         goto err;",
          "754:     }",
          "758:         al = SSL_AD_DECODE_ERROR;",
          "759:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_PACKET_LENGTH);",
          "",
          "[Removed Lines]",
          "751:     if (!ssl_parse_serverhello_tlsext(s, &pkt)) {",
          "756:     if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "745:     if (!ssl_parse_serverhello_tlsext(s, pkt)) {",
          "750:     if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "794:     return MSG_PROCESS_ERROR;",
          "795: }",
          "798: {",
          "799:     int al, i, ret = MSG_PROCESS_ERROR, exp_idx;",
          "800:     unsigned long cert_list_len, cert_len;",
          "",
          "[Removed Lines]",
          "797: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "791: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "802:     unsigned char *certstart, *certbytes;",
          "803:     STACK_OF(X509) *sk = NULL;",
          "804:     EVP_PKEY *pkey = NULL;",
          "813:     if ((sk = sk_X509_new_null()) == NULL) {",
          "814:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "815:         goto err;",
          "816:     }",
          "820:         al = SSL_AD_DECODE_ERROR;",
          "821:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "822:         goto f_err;",
          "823:     }",
          "827:             al = SSL_AD_DECODE_ERROR;",
          "828:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "829:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "805:     PACKET pkt;",
          "807:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "808:         al = SSL_AD_INTERNAL_ERROR;",
          "809:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "810:         goto f_err;",
          "811:     }",
          "818:     if (!PACKET_get_net_3(&pkt, &cert_list_len)",
          "819:             || PACKET_remaining(&pkt) != cert_list_len) {",
          "824:     while (PACKET_remaining(&pkt)) {",
          "825:         if (!PACKET_get_net_3(&pkt, &cert_len)",
          "826:                 || !PACKET_get_bytes(&pkt, &certbytes, cert_len)) {",
          "",
          "[Added Lines]",
          "805:     if (!PACKET_get_net_3(pkt, &cert_list_len)",
          "806:             || PACKET_remaining(pkt) != cert_list_len) {",
          "811:     while (PACKET_remaining(pkt)) {",
          "812:         if (!PACKET_get_net_3(pkt, &cert_len)",
          "813:                 || !PACKET_get_bytes(pkt, &certbytes, cert_len)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "924:     return ret;",
          "925: }",
          "928: {",
          "929: #ifndef OPENSSL_NO_RSA",
          "930:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "",
          "[Removed Lines]",
          "927: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "914: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "946:     EC_POINT *srvr_ecpoint = NULL;",
          "947:     int curve_nid = 0;",
          "948: #endif",
          "951:     EVP_MD_CTX_init(&md_ctx);",
          "953:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "962: #ifndef OPENSSL_NO_RSA",
          "963:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "949:     PACKET pkt, save_param_start, signature;",
          "955:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "956:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "957:             al = SSL_AD_INTERNAL_ERROR;",
          "958:             goto f_err;",
          "959:     }",
          "960:     save_param_start = pkt;",
          "",
          "[Added Lines]",
          "936:     PACKET save_param_start, signature;",
          "942:     save_param_start = *pkt;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "981:     if (alg_k & SSL_PSK) {",
          "982:         PACKET psk_identity_hint;",
          "984:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "985:             goto f_err;",
          "986:         }",
          "",
          "[Removed Lines]",
          "983:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity_hint)) {",
          "",
          "[Added Lines]",
          "965:         if (!PACKET_get_length_prefixed_2(pkt, &psk_identity_hint)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1011: #ifndef OPENSSL_NO_SRP",
          "1012:     if (alg_k & SSL_kSRP) {",
          "1013:         PACKET prime, generator, salt, server_pub;",
          "1018:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1019:             goto f_err;",
          "1020:         }",
          "",
          "[Removed Lines]",
          "1014:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1015:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1016:             || !PACKET_get_length_prefixed_1(&pkt, &salt)",
          "1017:             || !PACKET_get_length_prefixed_2(&pkt, &server_pub)) {",
          "",
          "[Added Lines]",
          "996:         if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "997:             || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "998:             || !PACKET_get_length_prefixed_1(pkt, &salt)",
          "999:             || !PACKET_get_length_prefixed_2(pkt, &server_pub)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1055:             goto f_err;",
          "1056:         }",
          "1060:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1061:             goto f_err;",
          "1062:         }",
          "",
          "[Removed Lines]",
          "1058:         if (!PACKET_get_length_prefixed_2(&pkt, &mod)",
          "1059:             || !PACKET_get_length_prefixed_2(&pkt, &exp)) {",
          "",
          "[Added Lines]",
          "1040:         if (!PACKET_get_length_prefixed_2(pkt, &mod)",
          "1041:             || !PACKET_get_length_prefixed_2(pkt, &exp)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1098:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1099:         PACKET prime, generator, pub_key;",
          "1104:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1105:             goto f_err;",
          "1106:         }",
          "",
          "[Removed Lines]",
          "1101:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1102:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1103:             || !PACKET_get_length_prefixed_2(&pkt, &pub_key)) {",
          "",
          "[Added Lines]",
          "1083:         if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "1084:             || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "1085:             || !PACKET_get_length_prefixed_2(pkt, &pub_key)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1161:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1162:             goto f_err;",
          "1163:         }",
          "",
          "[Removed Lines]",
          "1160:         if (!PACKET_get_bytes(&pkt, &ecparams, 3)) {",
          "",
          "[Added Lines]",
          "1142:         if (!PACKET_get_bytes(pkt, &ecparams, 3)) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1205:             goto err;",
          "1206:         }",
          "1209:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1210:             goto f_err;",
          "1211:         }",
          "",
          "[Removed Lines]",
          "1208:         if (!PACKET_get_length_prefixed_1(&pkt, &encoded_pt)) {",
          "",
          "[Added Lines]",
          "1190:         if (!PACKET_get_length_prefixed_1(pkt, &encoded_pt)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1255:         if (!PACKET_get_sub_packet(&save_param_start, &params,",
          "1256:                                    PACKET_remaining(&save_param_start) -",
          "1258:             al = SSL_AD_INTERNAL_ERROR;",
          "1259:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1260:             goto f_err;",
          "",
          "[Removed Lines]",
          "1257:                                    PACKET_remaining(&pkt))) {",
          "",
          "[Added Lines]",
          "1239:                                    PACKET_remaining(pkt))) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1263:         if (SSL_USE_SIGALGS(s)) {",
          "1264:             unsigned char *sigalgs;",
          "1265:             int rv;",
          "1267:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1268:                 goto f_err;",
          "1269:             }",
          "",
          "[Removed Lines]",
          "1266:             if (!PACKET_get_bytes(&pkt, &sigalgs, 2)) {",
          "",
          "[Added Lines]",
          "1248:             if (!PACKET_get_bytes(pkt, &sigalgs, 2)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1280:             md = EVP_sha1();",
          "1281:         }",
          "1285:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1286:             goto f_err;",
          "1287:         }",
          "",
          "[Removed Lines]",
          "1283:         if (!PACKET_get_length_prefixed_2(&pkt, &signature)",
          "1284:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1265:         if (!PACKET_get_length_prefixed_2(pkt, &signature)",
          "1266:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1362:             goto err;",
          "1363:         }",
          "1366:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "1367:             goto f_err;",
          "1368:         }",
          "",
          "[Removed Lines]",
          "1365:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1347:         if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1390:     return MSG_PROCESS_ERROR;",
          "1391: }",
          "1394: {",
          "1395:     int ret = MSG_PROCESS_ERROR;",
          "1396:     unsigned int list_len, ctype_num, i, name_len;",
          "",
          "[Removed Lines]",
          "1393: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "1375: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1398:     unsigned char *data;",
          "1399:     unsigned char *namestart, *namebytes;",
          "1400:     STACK_OF(X509_NAME) *ca_sk = NULL;",
          "1409:     if ((ca_sk = sk_X509_NAME_new(ca_dn_cmp)) == NULL) {",
          "1410:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "1401:     PACKET pkt;",
          "1403:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1404:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "1405:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "1406:         goto err;",
          "1407:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1412:     }",
          "1417:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1418:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "1419:         goto err;",
          "",
          "[Removed Lines]",
          "1415:     if (!PACKET_get_1(&pkt, &ctype_num)",
          "1416:             || !PACKET_get_bytes(&pkt, &data, ctype_num)) {",
          "",
          "[Added Lines]",
          "1390:     if (!PACKET_get_1(pkt, &ctype_num)",
          "1391:             || !PACKET_get_bytes(pkt, &data, ctype_num)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1435:         s->s3->tmp.ctype[i] = data[i];",
          "1437:     if (SSL_USE_SIGALGS(s)) {",
          "1440:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1441:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "1442:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1438:         if (!PACKET_get_net_2(&pkt, &list_len)",
          "1439:                 || !PACKET_get_bytes(&pkt, &data, list_len)) {",
          "",
          "[Added Lines]",
          "1413:         if (!PACKET_get_net_2(pkt, &list_len)",
          "1414:                 || !PACKET_get_bytes(pkt, &data, list_len)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1462:     }",
          "1467:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1468:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "1469:         goto err;",
          "1470:     }",
          "1475:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1476:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "1477:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1465:     if (!PACKET_get_net_2(&pkt, &list_len)",
          "1466:             || PACKET_remaining(&pkt) != list_len) {",
          "1472:     while (PACKET_remaining(&pkt)) {",
          "1473:         if (!PACKET_get_net_2(&pkt, &name_len)",
          "1474:                 || !PACKET_get_bytes(&pkt, &namebytes, name_len)) {",
          "",
          "[Added Lines]",
          "1440:     if (!PACKET_get_net_2(pkt, &list_len)",
          "1441:             || PACKET_remaining(pkt) != list_len) {",
          "1447:     while (PACKET_remaining(pkt)) {",
          "1448:         if (!PACKET_get_net_2(pkt, &name_len)",
          "1449:                 || !PACKET_get_bytes(pkt, &namebytes, name_len)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1520:     return (X509_NAME_cmp(*a, *b));",
          "1521: }",
          "1524: {",
          "1525:     int al;",
          "1526:     unsigned int ticklen;",
          "1527:     unsigned long ticket_lifetime_hint;",
          "1539:         al = SSL_AD_DECODE_ERROR;",
          "1540:         SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "1541:         goto f_err;",
          "",
          "[Removed Lines]",
          "1523: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, unsigned long n)",
          "1528:     PACKET pkt;",
          "1530:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1531:         al = SSL_AD_INTERNAL_ERROR;",
          "1532:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "1533:         goto f_err;",
          "1534:     }",
          "1536:     if (!PACKET_get_net_4(&pkt, &ticket_lifetime_hint)",
          "1537:             || !PACKET_get_net_2(&pkt, &ticklen)",
          "1538:             || PACKET_remaining(&pkt) != ticklen) {",
          "",
          "[Added Lines]",
          "1498: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, PACKET *pkt)",
          "1504:     if (!PACKET_get_net_4(pkt, &ticket_lifetime_hint)",
          "1505:             || !PACKET_get_net_2(pkt, &ticklen)",
          "1506:             || PACKET_remaining(pkt) != ticklen) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1584:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "1585:         goto err;",
          "1586:     }",
          "1588:         al = SSL_AD_DECODE_ERROR;",
          "1589:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "1590:         goto f_err;",
          "",
          "[Removed Lines]",
          "1587:     if (!PACKET_copy_bytes(&pkt, s->session->tlsext_tick, ticklen)) {",
          "",
          "[Added Lines]",
          "1555:     if (!PACKET_copy_bytes(pkt, s->session->tlsext_tick, ticklen)) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1614:     return MSG_PROCESS_ERROR;",
          "1615: }",
          "1618: {",
          "1619:     int al;",
          "1620:     unsigned long resplen;",
          "1621:     unsigned int type;",
          "1630:             || type != TLSEXT_STATUSTYPE_ocsp) {",
          "1631:         al = SSL_AD_DECODE_ERROR;",
          "1632:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_UNSUPPORTED_STATUS_TYPE);",
          "1633:         goto f_err;",
          "1634:     }",
          "1637:         al = SSL_AD_DECODE_ERROR;",
          "1638:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "1639:         goto f_err;",
          "",
          "[Removed Lines]",
          "1617: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n)",
          "1622:     PACKET pkt;",
          "1624:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1625:         al = SSL_AD_INTERNAL_ERROR;",
          "1626:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_INTERNAL_ERROR);",
          "1627:         goto f_err;",
          "1628:     }",
          "1629:     if (!PACKET_get_1(&pkt, &type)",
          "1635:     if (!PACKET_get_net_3(&pkt, &resplen)",
          "1636:             || PACKET_remaining(&pkt) != resplen) {",
          "",
          "[Added Lines]",
          "1585: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, PACKET *pkt)",
          "1591:     if (!PACKET_get_1(pkt, &type)",
          "1597:     if (!PACKET_get_net_3(pkt, &resplen)",
          "1598:             || PACKET_remaining(pkt) != resplen) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1645:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "1646:         goto f_err;",
          "1647:     }",
          "1649:         al = SSL_AD_DECODE_ERROR;",
          "1650:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "1651:         goto f_err;",
          "",
          "[Removed Lines]",
          "1648:     if (!PACKET_copy_bytes(&pkt, s->tlsext_ocsp_resp, resplen)) {",
          "",
          "[Added Lines]",
          "1610:     if (!PACKET_copy_bytes(pkt, s->tlsext_ocsp_resp, resplen)) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1672:     return MSG_PROCESS_ERROR;",
          "1673: }",
          "1676: {",
          "1679:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1680:         SSLerr(SSL_F_TLS_PROCESS_SERVER_DONE, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1675: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n)",
          "1677:     if (n > 0) {",
          "",
          "[Added Lines]",
          "1637: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, PACKET *pkt)",
          "1639:     if (PACKET_remaining(pkt) > 0) {",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return 1;",
          "205: }",
          "208: {",
          "209:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "210:     unsigned int j, complen = 0;",
          "",
          "[Removed Lines]",
          "207: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n)",
          "",
          "[Added Lines]",
          "207: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     STACK_OF(SSL_CIPHER) *ciphers = NULL;",
          "217:     int protverr = 1;",
          "220:     int is_v2_record;",
          "228:     is_v2_record = RECORD_LAYER_is_sslv2_record(&s->rlayer);",
          "230:     PACKET_null_init(&cookie);",
          "",
          "[Removed Lines]",
          "219:     PACKET pkt, session_id, cipher_suites, compression, extensions, cookie;",
          "222:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "223:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "224:         al = SSL_AD_INTERNAL_ERROR;",
          "225:         goto f_err;",
          "226:     }",
          "",
          "[Added Lines]",
          "219:     PACKET session_id, cipher_suites, compression, extensions, cookie;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:                 || mt != SSL2_MT_CLIENT_HELLO) {",
          "",
          "[Removed Lines]",
          "250:         if (!PACKET_get_1(&pkt, &mt)",
          "",
          "[Added Lines]",
          "244:         if (!PACKET_get_1(pkt, &mt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:             goto err;",
          "259:         }",
          "263:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "264:             goto err;",
          "",
          "[Removed Lines]",
          "261:         if (!PACKET_get_net_2(&pkt, &version)) {",
          "",
          "[Added Lines]",
          "255:         if (!PACKET_get_net_2(pkt, &version)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284:             al = SSL_AD_DECODE_ERROR;",
          "285:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);",
          "286:             goto f_err;",
          "",
          "[Removed Lines]",
          "283:         if(!PACKET_get_net_2(&pkt, (unsigned int *)&s->client_version)) {",
          "",
          "[Added Lines]",
          "277:         if(!PACKET_get_net_2(pkt, (unsigned int *)&s->client_version)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:         unsigned int cipher_len, session_id_len, challenge_len;",
          "366:         PACKET challenge;",
          "371:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "372:                    SSL_R_RECORD_LENGTH_MISMATCH);",
          "373:             al = SSL_AD_DECODE_ERROR;",
          "374:             goto f_err;",
          "375:         }",
          "382:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_RECORD_LENGTH_MISMATCH);",
          "383:             al = SSL_AD_DECODE_ERROR;",
          "384:             goto f_err;",
          "",
          "[Removed Lines]",
          "368:         if (!PACKET_get_net_2(&pkt, &cipher_len)",
          "369:                 || !PACKET_get_net_2(&pkt, &session_id_len)",
          "370:                 || !PACKET_get_net_2(&pkt, &challenge_len)) {",
          "377:         if (!PACKET_get_sub_packet(&pkt, &cipher_suites, cipher_len)",
          "378:             || !PACKET_get_sub_packet(&pkt, &session_id, session_id_len)",
          "379:             || !PACKET_get_sub_packet(&pkt, &challenge, challenge_len)",
          "381:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "362:         if (!PACKET_get_net_2(pkt, &cipher_len)",
          "363:                 || !PACKET_get_net_2(pkt, &session_id_len)",
          "364:                 || !PACKET_get_net_2(pkt, &challenge_len)) {",
          "371:         if (!PACKET_get_sub_packet(pkt, &cipher_suites, cipher_len)",
          "372:             || !PACKET_get_sub_packet(pkt, &session_id, session_id_len)",
          "373:             || !PACKET_get_sub_packet(pkt, &challenge, challenge_len)",
          "375:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "400:         PACKET_null_init(&extensions);",
          "401:     } else {",
          "405:             al = SSL_AD_DECODE_ERROR;",
          "406:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "407:             goto f_err;",
          "408:         }",
          "410:         if (SSL_IS_DTLS(s)) {",
          "412:                 al = SSL_AD_DECODE_ERROR;",
          "413:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "414:                 goto f_err;",
          "",
          "[Removed Lines]",
          "403:         if (!PACKET_copy_bytes(&pkt, s->s3->client_random, SSL3_RANDOM_SIZE)",
          "404:             || !PACKET_get_length_prefixed_1(&pkt, &session_id)) {",
          "411:             if (!PACKET_get_length_prefixed_1(&pkt, &cookie)) {",
          "",
          "[Added Lines]",
          "397:         if (!PACKET_copy_bytes(pkt, s->s3->client_random, SSL3_RANDOM_SIZE)",
          "398:             || !PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "405:             if (!PACKET_get_length_prefixed_1(pkt, &cookie)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424:             }",
          "425:         }",
          "429:                 al = SSL_AD_DECODE_ERROR;",
          "430:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "431:                 goto f_err;",
          "432:         }",
          "435:     }",
          "437:     s->hit = 0;",
          "",
          "[Removed Lines]",
          "427:         if (!PACKET_get_length_prefixed_2(&pkt, &cipher_suites)",
          "428:             || !PACKET_get_length_prefixed_1(&pkt, &compression)) {",
          "434:         extensions = pkt;",
          "",
          "[Added Lines]",
          "421:         if (!PACKET_get_length_prefixed_2(pkt, &cipher_suites)",
          "422:             || !PACKET_get_length_prefixed_1(pkt, &compression)) {",
          "428:         extensions = *pkt;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1497:     return 0;",
          "1498: }",
          "1501: {",
          "1502:     int al;",
          "1503:     unsigned int i;",
          "",
          "[Removed Lines]",
          "1500: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n)",
          "",
          "[Added Lines]",
          "1494: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1516:     EC_POINT *clnt_ecpoint = NULL;",
          "1517:     BN_CTX *bn_ctx = NULL;",
          "1518: #endif",
          "1520:     unsigned char *data, *rsa_decrypt = NULL;",
          "1528:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1530: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "1519:     PACKET pkt, enc_premaster;",
          "1522:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1523:         al = SSL_AD_INTERNAL_ERROR;",
          "1524:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1525:         goto f_err;",
          "1526:     }",
          "",
          "[Added Lines]",
          "1513:     PACKET enc_premaster;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1532:     if (alg_k & SSL_PSK) {",
          "1533:         unsigned char psk[PSK_MAX_PSK_LEN];",
          "1534:         size_t psklen;",
          "1538:             al = SSL_AD_DECODE_ERROR;",
          "1539:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1540:             goto f_err;",
          "",
          "[Removed Lines]",
          "1535:  PACKET psk_identity;",
          "1537:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity)) {",
          "",
          "[Added Lines]",
          "1523:         PACKET psk_identity;",
          "1525:         if (!PACKET_get_length_prefixed_2(pkt, &psk_identity)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1589:     }",
          "1590:     if (alg_k & SSL_kPSK) {",
          "1593:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1594:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1595:             goto f_err;",
          "",
          "[Removed Lines]",
          "1592:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1580:         if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1639:         if (s->version == SSL3_VERSION || s->version == DTLS1_BAD_VER) {",
          "1641:         } else {",
          "1646:                 if (s->options & SSL_OP_TLS_D5_BUG) {",
          "1647:                     enc_premaster = orig;",
          "",
          "[Removed Lines]",
          "1640:             enc_premaster = pkt;",
          "1642:             PACKET orig = pkt;",
          "1643:             if (!PACKET_get_length_prefixed_2(&pkt, &enc_premaster)",
          "1644:                 || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1628:             enc_premaster = *pkt;",
          "1630:             PACKET orig = *pkt;",
          "1631:             if (!PACKET_get_length_prefixed_2(pkt, &enc_premaster)",
          "1632:                 || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1764:     if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "1765:         int idx = -1;",
          "1766:         EVP_PKEY *skey = NULL;",
          "1768:         unsigned char shared[(OPENSSL_DH_MAX_MODULUS_BITS + 7) / 8];",
          "1771:             if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1772:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1773:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "1767:         PACKET bookmark = pkt;",
          "1770:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "",
          "[Added Lines]",
          "1755:         PACKET bookmark = *pkt;",
          "1758:         if (!PACKET_get_net_2(pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1776:             }",
          "1777:             i = 0;",
          "1778:         }",
          "1780:             if (!(s->options & SSL_OP_SSLEAY_080_CLIENT_DH_BUG)) {",
          "1781:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "1782:                        SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);",
          "1783:                 goto err;",
          "1784:             } else {",
          "1787:             }",
          "1788:         }",
          "1789:         if (alg_k & SSL_kDHr)",
          "",
          "[Removed Lines]",
          "1779:         if (PACKET_remaining(&pkt) != i) {",
          "1785:                 pkt = bookmark;",
          "1786:                 i = PACKET_remaining(&pkt);",
          "",
          "[Added Lines]",
          "1767:         if (PACKET_remaining(pkt) != i) {",
          "1774:                 i = PACKET_remaining(pkt);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1808:         } else",
          "1809:             dh_srvr = s->s3->tmp.dh;",
          "1813:             EVP_PKEY *clkey = X509_get_pubkey(s->session->peer);",
          "1814:             if (clkey) {",
          "",
          "[Removed Lines]",
          "1811:         if (n == 0L) {",
          "",
          "[Added Lines]",
          "1799:         if (PACKET_remaining(pkt) == 0L) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1824:             EVP_PKEY_free(clkey);",
          "1825:             pub = dh_clnt->pub_key;",
          "1826:         } else {",
          "1829:                 al = SSL_AD_INTERNAL_ERROR;",
          "1830:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "1827:             if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "",
          "[Added Lines]",
          "1815:             if (!PACKET_get_bytes(pkt, &data, i)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1906:             goto err;",
          "1907:         }",
          "1912:             if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "",
          "[Removed Lines]",
          "1909:         if (n == 0L) {",
          "",
          "[Added Lines]",
          "1897:         if (PACKET_remaining(pkt) == 0L) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1950:             }",
          "1954:                 al = SSL_AD_DECODE_ERROR;",
          "1955:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "1956:                        SSL_R_LENGTH_MISMATCH);",
          "1957:                 goto f_err;",
          "1958:             }",
          "1961:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "1962:                 goto err;",
          "1963:             }",
          "",
          "[Removed Lines]",
          "1953:             if (!PACKET_get_1(&pkt, &i)) {",
          "1959:             if (!PACKET_get_bytes(&pkt, &data, i)",
          "1960:                     || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1941:             if (!PACKET_get_1(pkt, &i)) {",
          "1947:             if (!PACKET_get_bytes(pkt, &data, i)",
          "1948:                     || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2003: #endif",
          "2004: #ifndef OPENSSL_NO_SRP",
          "2005:     if (alg_k & SSL_kSRP) {",
          "2008:             al = SSL_AD_DECODE_ERROR;",
          "2009:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_BAD_SRP_A_LENGTH);",
          "2010:             goto f_err;",
          "",
          "[Removed Lines]",
          "2006:         if (!PACKET_get_net_2(&pkt, &i)",
          "2007:                 || !PACKET_get_bytes(&pkt, &data, i)) {",
          "",
          "[Added Lines]",
          "1994:         if (!PACKET_get_net_2(pkt, &i)",
          "1995:                 || !PACKET_get_bytes(pkt, &data, i)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2041:         unsigned long alg_a;",
          "2042:         int Ttag, Tclass;",
          "2043:         long Tlen;",
          "2046:         alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:         long sess_key_len;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2061:                 ERR_clear_error();",
          "2062:         }",
          "2065:             al = SSL_AD_INTERNAL_ERROR;",
          "2066:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2067:             goto f_err;",
          "2068:         }",
          "2072:             || Tclass != V_ASN1_UNIVERSAL) {",
          "2073:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2074:                    SSL_R_DECRYPTION_FAILED);",
          "",
          "[Removed Lines]",
          "2064:         if (!PACKET_get_bytes(&pkt, &data, n)) {",
          "2069:         if (ASN1_get_object",
          "2070:             ((const unsigned char **)&data, &Tlen, &Ttag, &Tclass,",
          "2071:              n) != V_ASN1_CONSTRUCTED || Ttag != V_ASN1_SEQUENCE",
          "",
          "[Added Lines]",
          "2053:         sess_key_len = PACKET_remaining(pkt);",
          "2054:         if (!PACKET_get_bytes(pkt, &data, sess_key_len)) {",
          "2059:         if (ASN1_get_object ((const unsigned char **)&data, &Tlen, &Ttag,",
          "2060:                              &Tclass, sess_key_len) != V_ASN1_CONSTRUCTED",
          "2061:             || Ttag != V_ASN1_SEQUENCE",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2239:     return WORK_FINISHED_CONTINUE;",
          "2240: }",
          "2243: {",
          "2244:     EVP_PKEY *pkey = NULL;",
          "2245:     unsigned char *sig, *data;",
          "",
          "[Removed Lines]",
          "2242: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n)",
          "",
          "[Added Lines]",
          "2232: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2249:     X509 *peer;",
          "2250:     const EVP_MD *md = NULL;",
          "2251:     EVP_MD_CTX mctx;",
          "2253:     EVP_MD_CTX_init(&mctx);",
          "2255:     peer = s->session->peer;",
          "",
          "[Removed Lines]",
          "2252:     PACKET pkt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2263:         goto f_err;",
          "2264:     }",
          "2278:         len = 64;",
          "2279:     } else {",
          "2280:         if (SSL_USE_SIGALGS(s)) {",
          "2281:             int rv;",
          "2284:                 al = SSL_AD_DECODE_ERROR;",
          "2285:                 goto f_err;",
          "2286:             }",
          "",
          "[Removed Lines]",
          "2267:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2268:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "2269:         al = SSL_AD_INTERNAL_ERROR;",
          "2270:         goto f_err;",
          "2271:     }",
          "2277:     if (n == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "2283:             if (!PACKET_get_bytes(&pkt, &sig, 2)) {",
          "",
          "[Added Lines]",
          "2260:     if (PACKET_remaining(pkt) == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "2266:             if (!PACKET_get_bytes(pkt, &sig, 2)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2296:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "2297: #endif",
          "2298:         }",
          "2300:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2301:             al = SSL_AD_DECODE_ERROR;",
          "2302:             goto f_err;",
          "2303:         }",
          "2304:     }",
          "2305:     j = EVP_PKEY_size(pkey);",
          "2307:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_WRONG_SIGNATURE_SIZE);",
          "2308:         al = SSL_AD_DECODE_ERROR;",
          "2309:         goto f_err;",
          "2310:     }",
          "2312:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2313:         al = SSL_AD_DECODE_ERROR;",
          "2314:         goto f_err;",
          "",
          "[Removed Lines]",
          "2299:         if (!PACKET_get_net_2(&pkt, &len)) {",
          "2306:     if (((int)len > j) || ((int)PACKET_remaining(&pkt) > j) || (n <= 0)) {",
          "2311:     if (!PACKET_get_bytes(&pkt, &data, len)) {",
          "",
          "[Added Lines]",
          "2282:         if (!PACKET_get_net_2(pkt, &len)) {",
          "2289:     if (((int)len > j) || ((int)PACKET_remaining(pkt) > j)",
          "2290:             || (PACKET_remaining(pkt) == 0)) {",
          "2295:     if (!PACKET_get_bytes(pkt, &data, len)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2421:     return ret;",
          "2422: }",
          "2425: {",
          "2426:     int i, al, ret = MSG_PROCESS_ERROR;",
          "2427:     X509 *x = NULL;",
          "",
          "[Removed Lines]",
          "2424: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n)",
          "",
          "[Added Lines]",
          "2408: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2429:     const unsigned char *certstart;",
          "2430:     unsigned char *certbytes;",
          "2431:     STACK_OF(X509) *sk = NULL;",
          "2440:     if ((sk = sk_X509_new_null()) == NULL) {",
          "2441:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "2442:         goto f_err;",
          "2443:     }",
          "2448:         al = SSL_AD_DECODE_ERROR;",
          "2449:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "2450:         goto f_err;",
          "",
          "[Removed Lines]",
          "2432:     PACKET pkt, spkt;",
          "2434:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2435:         al = SSL_AD_INTERNAL_ERROR;",
          "2436:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "2437:         goto f_err;",
          "2438:     }",
          "2445:     if (!PACKET_get_net_3(&pkt, &llen)",
          "2446:             || !PACKET_get_sub_packet(&pkt, &spkt, llen)",
          "2447:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "2416:     PACKET spkt;",
          "2423:     if (!PACKET_get_net_3(pkt, &llen)",
          "2424:             || !PACKET_get_sub_packet(pkt, &spkt, llen)",
          "2425:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2752: {",
          "2754:     size_t next_proto_len;",
          "",
          "[Removed Lines]",
          "2751: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n)",
          "2753:     PACKET pkt, next_proto, padding;",
          "2756:     if (n < 2) {",
          "2758:     }",
          "2760:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2761:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, ERR_R_INTERNAL_ERROR);",
          "2762:         goto err;",
          "2763:     }",
          "",
          "[Added Lines]",
          "2729: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt)",
          "2731:     PACKET next_proto, padding;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2775:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);",
          "2776:         goto err;",
          "2777:     }",
          "",
          "[Removed Lines]",
          "2772:     if (!PACKET_get_length_prefixed_1(&pkt, &next_proto)",
          "2773:         || !PACKET_get_length_prefixed_1(&pkt, &padding)",
          "2774:         || PACKET_remaining(&pkt) > 0) {",
          "",
          "[Added Lines]",
          "2741:     if (!PACKET_get_length_prefixed_1(pkt, &next_proto)",
          "2742:         || !PACKET_get_length_prefixed_1(pkt, &padding)",
          "2743:         || PACKET_remaining(pkt) > 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:      \"dtls_construct_hello_verify_request\"},",
          "119:     {ERR_FUNC(SSL_F_DTLS_GET_REASSEMBLED_MESSAGE),",
          "120:      \"DTLS_GET_REASSEMBLED_MESSAGE\"},",
          "121:     {ERR_FUNC(SSL_F_READ_STATE_MACHINE), \"READ_STATE_MACHINE\"},",
          "122:     {ERR_FUNC(SSL_F_SSL3_ACCEPT), \"ssl3_accept\"},",
          "123:     {ERR_FUNC(SSL_F_SSL3_ADD_CERT_TO_BUF), \"SSL3_ADD_CERT_TO_BUF\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     {ERR_FUNC(SSL_F_DTLS_PROCESS_HELLO_VERIFY), \"dtls_process_hello_verify\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:      \"invalid ticket keys length\"},",
          "525:     {ERR_REASON(SSL_R_INVALID_TRUST), \"invalid trust\"},",
          "526:     {ERR_REASON(SSL_R_LENGTH_MISMATCH), \"length mismatch\"},",
          "527:     {ERR_REASON(SSL_R_LENGTH_TOO_SHORT), \"length too short\"},",
          "528:     {ERR_REASON(SSL_R_LIBRARY_BUG), \"library bug\"},",
          "529:     {ERR_REASON(SSL_R_LIBRARY_HAS_NO_CIPHERS), \"library has no ciphers\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     {ERR_REASON(SSL_R_LENGTH_TOO_LONG), \"length too long\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2003: __owur int tls_construct_server_certificate(SSL *s);",
          "2004: __owur int tls_construct_new_session_ticket(SSL *s);",
          "2005: __owur int tls_construct_cert_status(SSL *s);",
          "2008: __owur int ssl3_setup_key_block(SSL *s);",
          "2009: __owur int tls_construct_change_cipher_spec(SSL *s);",
          "2010: __owur int dtls_construct_change_cipher_spec(SSL *s);",
          "",
          "[Removed Lines]",
          "2006: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n);",
          "2007: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "2006: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s,",
          "2007:                                                               PACKET *pkt);",
          "2008: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2107: __owur int tls_construct_client_hello(SSL *s);",
          "2108: __owur enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s,",
          "2110: __owur enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s,",
          "2112: __owur enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s,",
          "2116: __owur int tls_construct_client_verify(SSL *s);",
          "2117: __owur enum WORK_STATE tls_prepare_client_certificate(SSL *s,",
          "2118:                                                       enum WORK_STATE wst);",
          "",
          "[Removed Lines]",
          "2109:                                                         unsigned long n);",
          "2111:                                                                unsigned long n);",
          "2113:                                                               unsigned long n);",
          "2114: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n);",
          "2115: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "2110:                                                         PACKET *pkt);",
          "2112:                                                                PACKET *pkt);",
          "2114:                                                               PACKET *pkt);",
          "2115: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, PACKET *pkt);",
          "2116: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2121: __owur int tls_construct_client_key_exchange(SSL *s);",
          "2122: __owur int tls_client_key_exchange_post_work(SSL *s);",
          "2123: __owur enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s,",
          "2125: __owur enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s,",
          "2127: __owur int ssl3_check_cert_and_algorithm(SSL *s);",
          "2128: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2129: __owur int tls_construct_next_proto(SSL *s);",
          "2130: #  endif",
          "2136: __owur enum WORK_STATE tls_post_process_client_hello(SSL *s,",
          "2137:                                                      enum WORK_STATE wst);",
          "2138: __owur int tls_construct_server_hello(SSL *s);",
          "",
          "[Removed Lines]",
          "2124:                                                         unsigned long n);",
          "2126:                                                               unsigned long n);",
          "2131: __owur enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s,",
          "2132:                                                          unsigned long n);",
          "2135: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n);",
          "",
          "[Added Lines]",
          "2125:                                                         PACKET *pkt);",
          "2127:                                                               PACKET *pkt);",
          "2132: __owur enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, PACKET *pkt);",
          "2135: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2141: __owur int tls_construct_server_key_exchange(SSL *s);",
          "2142: __owur int tls_construct_certificate_request(SSL *s);",
          "2143: __owur int tls_construct_server_done(SSL *s);",
          "2146: __owur enum WORK_STATE tls_post_process_client_key_exchange(SSL *s,",
          "2147:     enum WORK_STATE wst);",
          "2149: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2151: #  endif",
          "2153: __owur int tls1_new(SSL *s);",
          "",
          "[Removed Lines]",
          "2144: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n);",
          "2145: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n);",
          "2148: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n);",
          "2150: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n);",
          "",
          "[Added Lines]",
          "2144: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s,",
          "2145:                                                               PACKET *pkt);",
          "2146: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s,",
          "2147:                                                                PACKET *pkt);",
          "2150: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, PACKET *pkt);",
          "2152: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt);",
          "",
          "---------------"
        ],
        "ssl/statem.c||ssl/statem.c": [
          "File: ssl/statem.c -> ssl/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: static enum WORK_STATE client_post_work(SSL *s, enum WORK_STATE wst);",
          "117: static int client_construct_message(SSL *s);",
          "118: static unsigned long client_max_message_size(SSL *s);",
          "121: static enum WORK_STATE client_post_process_message(SSL *s, enum WORK_STATE wst);",
          "122: static int server_read_transition(SSL *s, int mt);",
          "123: static inline int send_server_key_exchange(SSL *s);",
          "",
          "[Removed Lines]",
          "119: static enum MSG_PROCESS_RETURN client_process_message(SSL *s,",
          "120:                                                       unsigned long len);",
          "",
          "[Added Lines]",
          "119: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: static enum WORK_STATE server_post_work(SSL *s, enum WORK_STATE wst);",
          "128: static int server_construct_message(SSL *s);",
          "129: static unsigned long server_max_message_size(SSL *s);",
          "131: static enum WORK_STATE server_post_process_message(SSL *s, enum WORK_STATE wst);",
          "",
          "[Removed Lines]",
          "130: static enum MSG_PROCESS_RETURN server_process_message(SSL *s, unsigned long len);",
          "",
          "[Added Lines]",
          "129: static enum MSG_PROCESS_RETURN server_process_message(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:     int ret, mt;",
          "530:     unsigned long len;",
          "531:     int (*transition)(SSL *s, int mt);",
          "533:     enum WORK_STATE (*post_process_message)(SSL *s, enum WORK_STATE wst);",
          "534:     unsigned long (*max_message_size)(SSL *s);",
          "535:     void (*cb) (const SSL *ssl, int type, int val) = NULL;",
          "",
          "[Removed Lines]",
          "532:     enum MSG_PROCESS_RETURN (*process_message)(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "531:     PACKET pkt;",
          "532:     enum MSG_PROCESS_RETURN (*process_message)(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:             }",
          "614:             s->first_packet = 0;",
          "616:             if (ret == MSG_PROCESS_ERROR) {",
          "617:                 return SUB_STATE_ERROR;",
          "618:             }",
          "",
          "[Removed Lines]",
          "615:             ret = process_message(s, len);",
          "",
          "[Added Lines]",
          "615:             if (!PACKET_buf_init(&pkt, s->init_msg, len)) {",
          "616:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "617:                 SSLerr(SSL_F_READ_STATE_MACHINE, ERR_R_INTERNAL_ERROR);",
          "618:                 return SUB_STATE_ERROR;",
          "619:             }",
          "620:             ret = process_message(s, &pkt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1448: {",
          "1449:     STATEM *st = &s->statem;",
          "1451:     switch(st->hand_state) {",
          "1452:         case TLS_ST_CR_SRVR_HELLO:",
          "1455:         case DTLS_ST_CR_HELLO_VERIFY_REQUEST:",
          "1458:         case TLS_ST_CR_CERT:",
          "1461:         case TLS_ST_CR_CERT_STATUS:",
          "1464:         case TLS_ST_CR_KEY_EXCH:",
          "1467:         case TLS_ST_CR_CERT_REQ:",
          "1470:         case TLS_ST_CR_SRVR_DONE:",
          "1473:         case TLS_ST_CR_CHANGE:",
          "1476:         case TLS_ST_CR_SESSION_TICKET:",
          "1479:         case TLS_ST_CR_FINISHED:",
          "1482:         default:",
          "",
          "[Removed Lines]",
          "1447: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, unsigned long len)",
          "1453:             return tls_process_server_hello(s, len);",
          "1456:             return dtls_process_hello_verify(s, len);",
          "1459:             return tls_process_server_certificate(s, len);",
          "1462:             return tls_process_cert_status(s, len);",
          "1465:             return tls_process_key_exchange(s, len);",
          "1468:             return tls_process_certificate_request(s, len);",
          "1471:             return tls_process_server_done(s, len);",
          "1474:             return tls_process_change_cipher_spec(s, len);",
          "1477:             return tls_process_new_session_ticket(s, len);",
          "1480:             return tls_process_finished(s, len);",
          "",
          "[Added Lines]",
          "1452: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, PACKET *pkt)",
          "1458:             return tls_process_server_hello(s, pkt);",
          "1461:             return dtls_process_hello_verify(s, pkt);",
          "1464:             return tls_process_server_certificate(s, pkt);",
          "1467:             return tls_process_cert_status(s, pkt);",
          "1470:             return tls_process_key_exchange(s, pkt);",
          "1473:             return tls_process_certificate_request(s, pkt);",
          "1476:             return tls_process_server_done(s, pkt);",
          "1479:             return tls_process_change_cipher_spec(s, pkt);",
          "1482:             return tls_process_new_session_ticket(s, pkt);",
          "1485:             return tls_process_finished(s, pkt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2166: {",
          "2167:     STATEM *st = &s->statem;",
          "2169:     switch(st->hand_state) {",
          "2170:     case TLS_ST_SR_CLNT_HELLO:",
          "2173:     case TLS_ST_SR_CERT:",
          "2176:     case TLS_ST_SR_KEY_EXCH:",
          "2179:     case TLS_ST_SR_CERT_VRFY:",
          "2182: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2183:     case TLS_ST_SR_NEXT_PROTO:",
          "2185: #endif",
          "2187:     case TLS_ST_SR_CHANGE:",
          "2190:     case TLS_ST_SR_FINISHED:",
          "2193:     default:",
          "",
          "[Removed Lines]",
          "2164: static enum MSG_PROCESS_RETURN  server_process_message(SSL *s,",
          "2165:                                                        unsigned long len)",
          "2171:         return tls_process_client_hello(s, len);",
          "2174:         return tls_process_client_certificate(s, len);",
          "2177:         return tls_process_client_key_exchange(s, len);",
          "2180:         return tls_process_cert_verify(s, len);",
          "2184:         return tls_process_next_proto(s, len);",
          "2188:         return tls_process_change_cipher_spec(s, len);",
          "2191:         return tls_process_finished(s, len);",
          "",
          "[Added Lines]",
          "2169: static enum MSG_PROCESS_RETURN  server_process_message(SSL *s, PACKET *pkt)",
          "2175:         return tls_process_client_hello(s, pkt);",
          "2178:         return tls_process_client_certificate(s, pkt);",
          "2181:         return tls_process_client_key_exchange(s, pkt);",
          "2184:         return tls_process_cert_verify(s, pkt);",
          "2188:         return tls_process_next_proto(s, pkt);",
          "2192:         return tls_process_change_cipher_spec(s, pkt);",
          "2195:         return tls_process_finished(s, pkt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f532a35d2ac4364c4ce0f0a68170b2a2228469cc",
      "candidate_info": {
        "commit_hash": "f532a35d2ac4364c4ce0f0a68170b2a2228469cc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f532a35d2ac4364c4ce0f0a68170b2a2228469cc",
        "files": [
          "ssl/s3_srvr.c"
        ],
        "message": "PACKETise CertificateVerify processing\n\nModify CertificateVerify processing to use the new PACKET API.\n\nReviewed-by: Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_srvr.c||ssl/s3_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2816: int ssl3_get_cert_verify(SSL *s)",
          "2817: {",
          "2818:     EVP_PKEY *pkey = NULL;",
          "2820:     int al, ok, ret = 0;",
          "2821:     long n;",
          "2822:     int type = 0, i, j;",
          "2823:     X509 *peer;",
          "2824:     const EVP_MD *md = NULL;",
          "2825:     EVP_MD_CTX mctx;",
          "2826:     EVP_MD_CTX_init(&mctx);",
          "",
          "[Removed Lines]",
          "2819:     unsigned char *p;",
          "",
          "[Added Lines]",
          "2819:     unsigned char *sig, *data;",
          "2823:     unsigned int len;",
          "2827:     PACKET pkt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2859:     }",
          "",
          "[Removed Lines]",
          "2862:     p = (unsigned char *)s->init_msg;",
          "",
          "[Added Lines]",
          "2864:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2865:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "2866:         al = SSL_AD_INTERNAL_ERROR;",
          "2867:         goto f_err;",
          "2868:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2868:     if (n == 64 && (pkey->type == NID_id_GostR3410_94 ||",
          "2869:                     pkey->type == NID_id_GostR3410_2001)) {",
          "2871:     } else {",
          "2872:         if (SSL_USE_SIGALGS(s)) {",
          "2874:             if (rv == -1) {",
          "2875:                 al = SSL_AD_INTERNAL_ERROR;",
          "2876:                 goto f_err;",
          "",
          "[Removed Lines]",
          "2870:         i = 64;",
          "2873:             int rv = tls12_check_peer_sigalg(&md, s, p, pkey);",
          "",
          "[Added Lines]",
          "2876:         len = 64;",
          "2879:             int rv;",
          "2881:             if (!PACKET_get_bytes(&pkt, &sig, 2)) {",
          "2882:                 al = SSL_AD_DECODE_ERROR;",
          "2883:                 goto f_err;",
          "2884:             }",
          "2885:             rv = tls12_check_peer_sigalg(&md, s, sig, pkey);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2881: #ifdef SSL_DEBUG",
          "2882:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "2883: #endif",
          "2886:         }",
          "2890:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2891:             al = SSL_AD_DECODE_ERROR;",
          "2892:             goto f_err;",
          "2893:         }",
          "2894:     }",
          "2895:     j = EVP_PKEY_size(pkey);",
          "2897:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_WRONG_SIGNATURE_SIZE);",
          "2898:         al = SSL_AD_DECODE_ERROR;",
          "2899:         goto f_err;",
          "2900:     }",
          "2902:     if (SSL_USE_SIGALGS(s)) {",
          "2903:         long hdatalen = 0;",
          "",
          "[Removed Lines]",
          "2884:             p += 2;",
          "2885:             n -= 2;",
          "2887:         n2s(p, i);",
          "2888:         n -= 2;",
          "2889:         if (i > n) {",
          "2896:     if ((i > j) || (n > j) || (n <= 0)) {",
          "",
          "[Added Lines]",
          "2897:         if (!PACKET_get_net_2(&pkt, &len)) {",
          "2904:     if (((int)len > j) || ((int)PACKET_remaining(&pkt) > j) || (n <= 0)) {",
          "2909:     if (!PACKET_get_bytes(&pkt, &data, len)) {",
          "2910:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2911:         al = SSL_AD_DECODE_ERROR;",
          "2912:         goto f_err;",
          "2913:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2919:             goto f_err;",
          "2920:         }",
          "2923:             al = SSL_AD_DECRYPT_ERROR;",
          "2924:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_SIGNATURE);",
          "2925:             goto f_err;",
          "",
          "[Removed Lines]",
          "2922:         if (EVP_VerifyFinal(&mctx, p, i, pkey) <= 0) {",
          "",
          "[Added Lines]",
          "2935:         if (EVP_VerifyFinal(&mctx, data, len, pkey) <= 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2928: #ifndef OPENSSL_NO_RSA",
          "2929:     if (pkey->type == EVP_PKEY_RSA) {",
          "2930:         i = RSA_verify(NID_md5_sha1, s->s3->tmp.cert_verify_md,",
          "2932:                        pkey->pkey.rsa);",
          "2933:         if (i < 0) {",
          "2934:             al = SSL_AD_DECRYPT_ERROR;",
          "",
          "[Removed Lines]",
          "2931:                        MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH, p, i,",
          "",
          "[Added Lines]",
          "2944:                        MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH, data, len,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2946:     if (pkey->type == EVP_PKEY_DSA) {",
          "2947:         j = DSA_verify(pkey->save_type,",
          "2948:                        &(s->s3->tmp.cert_verify_md[MD5_DIGEST_LENGTH]),",
          "2950:         if (j <= 0) {",
          "2952:             al = SSL_AD_DECRYPT_ERROR;",
          "",
          "[Removed Lines]",
          "2949:                        SHA_DIGEST_LENGTH, p, i, pkey->pkey.dsa);",
          "",
          "[Added Lines]",
          "2962:                        SHA_DIGEST_LENGTH, data, len, pkey->pkey.dsa);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2959:     if (pkey->type == EVP_PKEY_EC) {",
          "2960:         j = ECDSA_verify(pkey->save_type,",
          "2961:                          &(s->s3->tmp.cert_verify_md[MD5_DIGEST_LENGTH]),",
          "2963:         if (j <= 0) {",
          "2965:             al = SSL_AD_DECRYPT_ERROR;",
          "",
          "[Removed Lines]",
          "2962:                          SHA_DIGEST_LENGTH, p, i, pkey->pkey.ec);",
          "",
          "[Added Lines]",
          "2975:                          SHA_DIGEST_LENGTH, data, len, pkey->pkey.ec);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2974:         int idx;",
          "2975:         EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "2976:         EVP_PKEY_verify_init(pctx);",
          "2979:         }",
          "2980:         for (idx = 0; idx < 64; idx++) {",
          "2982:         }",
          "2983:         j = EVP_PKEY_verify(pctx, signature, 64, s->s3->tmp.cert_verify_md,",
          "2984:                             32);",
          "",
          "[Removed Lines]",
          "2977:         if (i != 64) {",
          "2978:             fprintf(stderr, \"GOST signature length is %d\", i);",
          "2981:             signature[63 - idx] = p[idx];",
          "",
          "[Added Lines]",
          "2990:         if (len != 64) {",
          "2991:             fprintf(stderr, \"GOST signature length is %d\", len);",
          "2994:             signature[63 - idx] = data[idx];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ade44dcb16141c8a30ca6c56a1fd1a0b14dcc360",
      "candidate_info": {
        "commit_hash": "ade44dcb16141c8a30ca6c56a1fd1a0b14dcc360",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ade44dcb16141c8a30ca6c56a1fd1a0b14dcc360",
        "files": [
          "apps/s_cb.c",
          "crypto/x509/x509type.c",
          "doc/apps/ciphers.pod",
          "engines/ccgost/Makefile",
          "engines/ccgost/e_gost_err.c",
          "engines/ccgost/gost2001.c",
          "engines/ccgost/gost94_keyx.c",
          "engines/ccgost/gost_ameth.c",
          "engines/ccgost/gost_asn1.c",
          "engines/ccgost/gost_crypt.c",
          "engines/ccgost/gost_eng.c",
          "engines/ccgost/gost_lcl.h",
          "engines/ccgost/gost_params.c",
          "engines/ccgost/gost_params.h",
          "engines/ccgost/gost_pmeth.c",
          "engines/ccgost/gost_sign.c",
          "include/openssl/tls1.h",
          "ssl/s3_both.c",
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Remove Gost94 signature algorithm.\n\nThis was obsolete in 2001.  This is not the same as Gost94 digest.\nThanks to Dmitry Belyavsky <beldmit@gmail.com> for review and advice.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "apps/s_cb.c||apps/s_cb.c",
          "crypto/x509/x509type.c||crypto/x509/x509type.c",
          "engines/ccgost/e_gost_err.c||engines/ccgost/e_gost_err.c",
          "engines/ccgost/gost2001.c||engines/ccgost/gost2001.c",
          "engines/ccgost/gost94_keyx.c||engines/ccgost/gost94_keyx.c",
          "engines/ccgost/gost_ameth.c||engines/ccgost/gost_ameth.c",
          "engines/ccgost/gost_asn1.c||engines/ccgost/gost_asn1.c",
          "engines/ccgost/gost_crypt.c||engines/ccgost/gost_crypt.c",
          "engines/ccgost/gost_eng.c||engines/ccgost/gost_eng.c",
          "engines/ccgost/gost_lcl.h||engines/ccgost/gost_lcl.h",
          "engines/ccgost/gost_params.c||engines/ccgost/gost_params.c",
          "engines/ccgost/gost_params.h||engines/ccgost/gost_params.h",
          "engines/ccgost/gost_pmeth.c||engines/ccgost/gost_pmeth.c",
          "engines/ccgost/gost_sign.c||engines/ccgost/gost_sign.c",
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     {\"ECDSA sign\", TLS_CT_ECDSA_SIGN},",
          "289:     {\"RSA fixed ECDH\", TLS_CT_RSA_FIXED_ECDH},",
          "290:     {\"ECDSA fixed ECDH\", TLS_CT_ECDSA_FIXED_ECDH},",
          "292:     {\"GOST01 Sign\", TLS_CT_GOST01_SIGN},",
          "293:     {NULL}",
          "294: };",
          "",
          "[Removed Lines]",
          "291:     {\"GOST94 Sign\", TLS_CT_GOST94_SIGN},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/x509/x509type.c||crypto/x509/x509type.c": [
          "File: crypto/x509/x509type.c -> crypto/x509/x509type.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     case EVP_PKEY_DH:",
          "94:         ret = EVP_PK_DH | EVP_PKT_EXCH;",
          "95:         break;",
          "97:     case NID_id_GostR3410_2001:",
          "98:         ret = EVP_PKT_EXCH | EVP_PKT_SIGN;",
          "99:         break;",
          "",
          "[Removed Lines]",
          "96:     case NID_id_GostR3410_94:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/e_gost_err.c||engines/ccgost/e_gost_err.c": [
          "File: engines/ccgost/e_gost_err.c -> engines/ccgost/e_gost_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     {ERR_FUNC(GOST_F_DECODE_GOST_ALGOR_PARAMS), \"DECODE_GOST_ALGOR_PARAMS\"},",
          "74:     {ERR_FUNC(GOST_F_ENCODE_GOST_ALGOR_PARAMS), \"ENCODE_GOST_ALGOR_PARAMS\"},",
          "75:     {ERR_FUNC(GOST_F_FILL_GOST2001_PARAMS), \"FILL_GOST2001_PARAMS\"},",
          "77:     {ERR_FUNC(GOST_F_GET_ENCRYPTION_PARAMS), \"GET_ENCRYPTION_PARAMS\"},",
          "78:     {ERR_FUNC(GOST_F_GOST2001_COMPUTE_PUBLIC), \"GOST2001_COMPUTE_PUBLIC\"},",
          "79:     {ERR_FUNC(GOST_F_GOST2001_DO_SIGN), \"GOST2001_DO_SIGN\"},",
          "",
          "[Removed Lines]",
          "76:     {ERR_FUNC(GOST_F_FILL_GOST94_PARAMS), \"FILL_GOST94_PARAMS\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:      \"GOST89_GET_ASN1_PARAMETERS\"},",
          "84:     {ERR_FUNC(GOST_F_GOST89_SET_ASN1_PARAMETERS),",
          "85:      \"GOST89_SET_ASN1_PARAMETERS\"},",
          "87:     {ERR_FUNC(GOST_F_GOST_CIPHER_CTL), \"GOST_CIPHER_CTL\"},",
          "90:     {ERR_FUNC(GOST_F_GOST_IMIT_CTRL), \"GOST_IMIT_CTRL\"},",
          "91:     {ERR_FUNC(GOST_F_GOST_IMIT_FINAL), \"GOST_IMIT_FINAL\"},",
          "92:     {ERR_FUNC(GOST_F_GOST_IMIT_UPDATE), \"GOST_IMIT_UPDATE\"},",
          "94:     {ERR_FUNC(GOST_F_PARAM_COPY_GOST01), \"PARAM_COPY_GOST01\"},",
          "96:     {ERR_FUNC(GOST_F_PKEY_GOST01CP_DECRYPT), \"PKEY_GOST01CP_DECRYPT\"},",
          "97:     {ERR_FUNC(GOST_F_PKEY_GOST01CP_ENCRYPT), \"PKEY_GOST01CP_ENCRYPT\"},",
          "99:     {ERR_FUNC(GOST_F_PKEY_GOST01_PARAMGEN), \"PKEY_GOST01_PARAMGEN\"},",
          "100:     {ERR_FUNC(GOST_F_PKEY_GOST2001_DERIVE), \"PKEY_GOST2001_DERIVE\"},",
          "105:     {ERR_FUNC(GOST_F_PKEY_GOST_CTRL), \"PKEY_GOST_CTRL\"},",
          "106:     {ERR_FUNC(GOST_F_PKEY_GOST_CTRL01_STR), \"PKEY_GOST_CTRL01_STR\"},",
          "108:     {ERR_FUNC(GOST_F_PKEY_GOST_MAC_CTRL), \"PKEY_GOST_MAC_CTRL\"},",
          "109:     {ERR_FUNC(GOST_F_PKEY_GOST_MAC_CTRL_STR), \"PKEY_GOST_MAC_CTRL_STR\"},",
          "110:     {ERR_FUNC(GOST_F_PKEY_GOST_MAC_KEYGEN), \"PKEY_GOST_MAC_KEYGEN\"},",
          "111:     {ERR_FUNC(GOST_F_PRINT_GOST_01), \"PRINT_GOST_01\"},",
          "112:     {ERR_FUNC(GOST_F_PRIV_DECODE_GOST), \"PRIV_DECODE_GOST\"},",
          "113:     {ERR_FUNC(GOST_F_PUB_DECODE_GOST01), \"PUB_DECODE_GOST01\"},",
          "115:     {ERR_FUNC(GOST_F_PUB_ENCODE_GOST01), \"PUB_ENCODE_GOST01\"},",
          "117:     {ERR_FUNC(GOST_F_UNPACK_CP_SIGNATURE), \"UNPACK_CP_SIGNATURE\"},",
          "118:     {0, NULL}",
          "119: };",
          "",
          "[Removed Lines]",
          "86:     {ERR_FUNC(GOST_F_GOST94_COMPUTE_PUBLIC), \"GOST94_COMPUTE_PUBLIC\"},",
          "88:     {ERR_FUNC(GOST_F_GOST_DO_SIGN), \"GOST_DO_SIGN\"},",
          "89:     {ERR_FUNC(GOST_F_GOST_DO_VERIFY), \"GOST_DO_VERIFY\"},",
          "93:     {ERR_FUNC(GOST_F_GOST_SIGN_KEYGEN), \"GOST_SIGN_KEYGEN\"},",
          "95:     {ERR_FUNC(GOST_F_PARAM_COPY_GOST94), \"PARAM_COPY_GOST94\"},",
          "98:     {ERR_FUNC(GOST_F_PKEY_GOST01CP_KEYGEN), \"PKEY_GOST01CP_KEYGEN\"},",
          "101:     {ERR_FUNC(GOST_F_PKEY_GOST94CP_DECRYPT), \"PKEY_GOST94CP_DECRYPT\"},",
          "102:     {ERR_FUNC(GOST_F_PKEY_GOST94CP_ENCRYPT), \"PKEY_GOST94CP_ENCRYPT\"},",
          "103:     {ERR_FUNC(GOST_F_PKEY_GOST94CP_KEYGEN), \"PKEY_GOST94CP_KEYGEN\"},",
          "104:     {ERR_FUNC(GOST_F_PKEY_GOST94_PARAMGEN), \"PKEY_GOST94_PARAMGEN\"},",
          "107:     {ERR_FUNC(GOST_F_PKEY_GOST_CTRL94_STR), \"PKEY_GOST_CTRL94_STR\"},",
          "114:     {ERR_FUNC(GOST_F_PUB_DECODE_GOST94), \"PUB_DECODE_GOST94\"},",
          "116:     {ERR_FUNC(GOST_F_UNPACK_CC_SIGNATURE), \"UNPACK_CC_SIGNATURE\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     {ERR_REASON(GOST_R_CTRL_CALL_FAILED), \"ctrl call failed\"},",
          "129:     {ERR_REASON(GOST_R_ERROR_COMPUTING_SHARED_KEY),",
          "130:      \"error computing shared key\"},",
          "133:     {ERR_REASON(GOST_R_ERROR_PARSING_KEY_TRANSPORT_INFO),",
          "134:      \"error parsing key transport info\"},",
          "135:     {ERR_REASON(GOST_R_INCOMPATIBLE_ALGORITHMS), \"incompatible algorithms\"},",
          "",
          "[Removed Lines]",
          "131:     {ERR_REASON(GOST_R_ERROR_PACKING_KEY_TRANSPORT_INFO),",
          "132:      \"error packing key transport info\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:     {ERR_REASON(GOST_R_INVALID_CIPHER_PARAMS), \"invalid cipher params\"},",
          "138:     {ERR_REASON(GOST_R_INVALID_CIPHER_PARAM_OID), \"invalid cipher param oid\"},",
          "139:     {ERR_REASON(GOST_R_INVALID_DIGEST_TYPE), \"invalid digest type\"},",
          "141:     {ERR_REASON(GOST_R_INVALID_IV_LENGTH), \"invalid iv length\"},",
          "142:     {ERR_REASON(GOST_R_INVALID_MAC_KEY_LENGTH), \"invalid mac key length\"},",
          "143:     {ERR_REASON(GOST_R_INVALID_PARAMSET), \"invalid paramset\"},",
          "145:     {ERR_REASON(GOST_R_KEY_IS_NOT_INITIALIZED), \"key is not initialized\"},",
          "146:     {ERR_REASON(GOST_R_KEY_PARAMETERS_MISSING), \"key parameters missing\"},",
          "147:     {ERR_REASON(GOST_R_MAC_KEY_NOT_SET), \"mac key not set\"},",
          "",
          "[Removed Lines]",
          "140:     {ERR_REASON(GOST_R_INVALID_GOST94_PARMSET), \"invalid gost94 parmset\"},",
          "144:     {ERR_REASON(GOST_R_KEY_IS_NOT_INITALIZED), \"key is not initalized\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost2001.c||engines/ccgost/gost2001.c": [
          "File: engines/ccgost/gost2001.c -> engines/ccgost/gost2001.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"gost_lcl.h\"",
          "11: #include <string.h>",
          "12: #include <openssl/rand.h>",
          "13: #include <openssl/ecdsa.h>",
          "",
          "[Removed Lines]",
          "10: #include \"gost_params.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost94_keyx.c||engines/ccgost/gost94_keyx.c": [
          "File: engines/ccgost/gost94_keyx.c -> engines/ccgost/gost94_keyx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_ameth.c||engines/ccgost/gost_ameth.c": [
          "File: engines/ccgost/gost_ameth.c -> engines/ccgost/gost_ameth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef OPENSSL_NO_CMS",
          "17: # include <openssl/cms.h>",
          "18: #endif",
          "20: #include \"gost_lcl.h\"",
          "21: #include \"e_gost_err.h\"",
          "24: {",
          "36: }",
          "38: static ASN1_STRING *encode_gost_algor_params(const EVP_PKEY *key)",
          "",
          "[Removed Lines]",
          "19: #include \"gost_params.h\"",
          "23: int gost94_nid_by_params(DSA *p)",
          "25:     R3410_params *gost_params;",
          "26:     BIGNUM *q = BN_new();",
          "27:     for (gost_params = R3410_paramset; gost_params->q != NULL; gost_params++) {",
          "28:         BN_dec2bn(&q, gost_params->q);",
          "29:         if (!BN_cmp(q, p->q)) {",
          "30:             BN_free(q);",
          "31:             return gost_params->nid;",
          "32:         }",
          "33:     }",
          "34:     BN_free(q);",
          "35:     return NID_undef;",
          "",
          "[Added Lines]",
          "24: BIGNUM *hashsum2bn(const unsigned char *dgst)",
          "26:     unsigned char buf[32];",
          "28:     BUF_reverse(buf, (unsigned char*)dgst, 32);",
          "29:     return BN_bin2bn(buf, 32, NULL);",
          "30: }",
          "36: int store_bignum(BIGNUM *bn, unsigned char *buf, int len)",
          "37: {",
          "38:     int bytes = BN_num_bytes(bn);",
          "40:     if (bytes > len)",
          "41:         return 0;",
          "42:     memset(buf, 0, len);",
          "43:     BN_bn2bin(bn, buf + len - bytes);",
          "44:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:             EC_GROUP_get_curve_name(EC_KEY_get0_group",
          "54:                                     (EVP_PKEY_get0((EVP_PKEY *)key)));",
          "55:         break;",
          "67:     }",
          "68:     gkp->key_params = OBJ_nid2obj(pkey_param_nid);",
          "69:     gkp->hash_params = OBJ_nid2obj(NID_id_GostR3411_94_CryptoProParamSet);",
          "",
          "[Removed Lines]",
          "56:     case NID_id_GostR3410_94:",
          "57:         pkey_param_nid =",
          "58:             (int)gost94_nid_by_params(EVP_PKEY_get0((EVP_PKEY *)key));",
          "59:         if (pkey_param_nid == NID_undef) {",
          "60:             GOSTerr(GOST_F_ENCODE_GOST_ALGOR_PARAMS,",
          "61:                     GOST_R_INVALID_GOST94_PARMSET);",
          "62:             ASN1_STRING_free(params);",
          "63:             params = NULL;",
          "64:             goto err;",
          "65:         }",
          "66:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         return 0;",
          "121:     }",
          "122:     switch (pkey_nid) {",
          "135:     case NID_id_GostR3410_2001:",
          "136:         {",
          "137:             EC_KEY *ec = EVP_PKEY_get0(pkey);",
          "",
          "[Removed Lines]",
          "123:     case NID_id_GostR3410_94:",
          "124:         {",
          "125:             DSA *dsa = EVP_PKEY_get0(pkey);",
          "126:             if (!dsa) {",
          "127:                 dsa = DSA_new();",
          "128:                 if (!EVP_PKEY_assign(pkey, pkey_nid, dsa))",
          "129:                     return 0;",
          "130:             }",
          "131:             if (!fill_GOST94_params(dsa, param_nid))",
          "132:                 return 0;",
          "133:             break;",
          "134:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151: static int gost_set_priv_key(EVP_PKEY *pkey, BIGNUM *priv)",
          "152: {",
          "153:     switch (EVP_PKEY_base_id(pkey)) {",
          "166:     case NID_id_GostR3410_2001:",
          "167:         {",
          "168:             EC_KEY *ec = EVP_PKEY_get0(pkey);",
          "",
          "[Removed Lines]",
          "154:     case NID_id_GostR3410_94:",
          "155:         {",
          "156:             DSA *dsa = EVP_PKEY_get0(pkey);",
          "157:             if (!dsa) {",
          "158:                 dsa = DSA_new();",
          "159:                 EVP_PKEY_assign(pkey, EVP_PKEY_base_id(pkey), dsa);",
          "160:             }",
          "161:             dsa->priv_key = BN_dup(priv);",
          "162:             if (!EVP_PKEY_missing_parameters(pkey))",
          "163:                 gost94_compute_public(dsa);",
          "164:             break;",
          "165:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183: BIGNUM *gost_get0_priv_key(const EVP_PKEY *pkey)",
          "184: {",
          "185:     switch (EVP_PKEY_base_id(pkey)) {",
          "196:     case NID_id_GostR3410_2001:",
          "197:         {",
          "198:             EC_KEY *ec = EVP_PKEY_get0((EVP_PKEY *)pkey);",
          "",
          "[Removed Lines]",
          "186:     case NID_id_GostR3410_94:",
          "187:         {",
          "188:             DSA *dsa = EVP_PKEY_get0((EVP_PKEY *)pkey);",
          "189:             if (!dsa) {",
          "190:                 return NULL;",
          "191:             }",
          "192:             if (!dsa->priv_key)",
          "193:                 return NULL;",
          "194:             return dsa->priv_key;",
          "195:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "277: }",
          "285: static void pkey_free_gost01(EVP_PKEY *key)",
          "286: {",
          "287:     EC_KEY_free(key->pkey.ec);",
          "",
          "[Removed Lines]",
          "280: static void pkey_free_gost94(EVP_PKEY *key)",
          "281: {",
          "282:     DSA_free(key->pkey.dsa);",
          "283: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "355: }",
          "410: static int print_gost_01(BIO *out, const EVP_PKEY *pkey, int indent,",
          "411:                          ASN1_PCTX *pctx, int type)",
          "412: {",
          "",
          "[Removed Lines]",
          "358: static int print_gost_94(BIO *out, const EVP_PKEY *pkey, int indent,",
          "359:                          ASN1_PCTX *pctx, int type)",
          "360: {",
          "361:     int param_nid = NID_undef;",
          "363:     if (type == 2) {",
          "364:         BIGNUM *key;",
          "366:         if (!BIO_indent(out, indent, 128))",
          "367:             return 0;",
          "368:         BIO_printf(out, \"Private key: \");",
          "369:         key = gost_get0_priv_key(pkey);",
          "370:         if (!key)",
          "371:             BIO_printf(out, \"<undefined>\");",
          "372:         else",
          "373:             BN_print(out, key);",
          "374:         BIO_printf(out, \"\\n\");",
          "375:     }",
          "376:     if (type >= 1) {",
          "377:         BIGNUM *pubkey;",
          "379:         pubkey = ((DSA *)EVP_PKEY_get0((EVP_PKEY *)pkey))->pub_key;",
          "380:         BIO_indent(out, indent, 128);",
          "381:         BIO_printf(out, \"Public key: \");",
          "382:         BN_print(out, pubkey);",
          "383:         BIO_printf(out, \"\\n\");",
          "384:     }",
          "386:     param_nid = gost94_nid_by_params(EVP_PKEY_get0((EVP_PKEY *)pkey));",
          "387:     BIO_indent(out, indent, 128);",
          "388:     BIO_printf(out, \"Parameter set: %s\\n\", OBJ_nid2ln(param_nid));",
          "389:     return 1;",
          "390: }",
          "392: static int param_print_gost94(BIO *out, const EVP_PKEY *pkey, int indent,",
          "393:                               ASN1_PCTX *pctx)",
          "394: {",
          "395:     return print_gost_94(out, pkey, indent, pctx, 0);",
          "396: }",
          "398: static int pub_print_gost94(BIO *out, const EVP_PKEY *pkey, int indent,",
          "399:                             ASN1_PCTX *pctx)",
          "400: {",
          "401:     return print_gost_94(out, pkey, indent, pctx, 1);",
          "402: }",
          "404: static int priv_print_gost94(BIO *out, const EVP_PKEY *pkey, int indent,",
          "405:                              ASN1_PCTX *pctx)",
          "406: {",
          "407:     return print_gost_94(out, pkey, indent, pctx, 2);",
          "408: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "489: }",
          "502: static int param_missing_gost01(const EVP_PKEY *pk)",
          "503: {",
          "504:     const EC_KEY *ec = EVP_PKEY_get0((EVP_PKEY *)pk);",
          "",
          "[Removed Lines]",
          "492: static int param_missing_gost94(const EVP_PKEY *pk)",
          "493: {",
          "494:     const DSA *dsa = EVP_PKEY_get0((EVP_PKEY *)pk);",
          "495:     if (!dsa)",
          "496:         return 1;",
          "497:     if (!dsa->q)",
          "498:         return 1;",
          "499:     return 0;",
          "500: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "509:     return 0;",
          "510: }",
          "540: static int param_copy_gost01(EVP_PKEY *to, const EVP_PKEY *from)",
          "541: {",
          "",
          "[Removed Lines]",
          "512: static int param_copy_gost94(EVP_PKEY *to, const EVP_PKEY *from)",
          "513: {",
          "514:     const DSA *dfrom = EVP_PKEY_get0((EVP_PKEY *)from);",
          "515:     DSA *dto = EVP_PKEY_get0(to);",
          "516:     if (EVP_PKEY_base_id(from) != EVP_PKEY_base_id(to)) {",
          "517:         GOSTerr(GOST_F_PARAM_COPY_GOST94, GOST_R_INCOMPATIBLE_ALGORITHMS);",
          "518:         return 0;",
          "519:     }",
          "520:     if (!dfrom) {",
          "521:         GOSTerr(GOST_F_PARAM_COPY_GOST94, GOST_R_KEY_PARAMETERS_MISSING);",
          "522:         return 0;",
          "523:     }",
          "524:     if (!dto) {",
          "525:         dto = DSA_new();",
          "526:         EVP_PKEY_assign(to, EVP_PKEY_base_id(from), dto);",
          "527:     }",
          "528:     BN_free(dto->p);",
          "529:     dto->p = BN_dup(dfrom->p);",
          "530:     BN_free(dto->q);",
          "531:     dto->q = BN_dup(dfrom->q);",
          "532:     BN_free(dto->g);",
          "533:     dto->g = BN_dup(dfrom->g);",
          "535:     if (dto->priv_key)",
          "536:         gost94_compute_public(dto);",
          "537:     return 1;",
          "538: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "570:     return 1;",
          "571: }",
          "582: static int param_cmp_gost01(const EVP_PKEY *a, const EVP_PKEY *b)",
          "583: {",
          "584:     if (EC_GROUP_get_curve_name",
          "",
          "[Removed Lines]",
          "573: static int param_cmp_gost94(const EVP_PKEY *a, const EVP_PKEY *b)",
          "574: {",
          "575:     const DSA *da = EVP_PKEY_get0((EVP_PKEY *)a);",
          "576:     const DSA *db = EVP_PKEY_get0((EVP_PKEY *)b);",
          "577:     if (!BN_cmp(da->q, db->q))",
          "578:         return 1;",
          "579:     return 0;",
          "580: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "592: }",
          "674: static int pub_decode_gost01(EVP_PKEY *pk, X509_PUBKEY *pub)",
          "675: {",
          "",
          "[Removed Lines]",
          "595: static int pub_decode_gost94(EVP_PKEY *pk, X509_PUBKEY *pub)",
          "596: {",
          "597:     X509_ALGOR *palg = NULL;",
          "598:     const unsigned char *pubkey_buf = NULL;",
          "599:     unsigned char *databuf;",
          "600:     ASN1_OBJECT *palgobj = NULL;",
          "601:     int pub_len, i, j;",
          "602:     DSA *dsa;",
          "603:     ASN1_OCTET_STRING *octet = NULL;",
          "605:     if (!X509_PUBKEY_get0_param(&palgobj, &pubkey_buf, &pub_len, &palg, pub))",
          "606:         return 0;",
          "607:     EVP_PKEY_assign(pk, OBJ_obj2nid(palgobj), NULL);",
          "608:     if (!decode_gost_algor_params(pk, palg))",
          "609:         return 0;",
          "610:     octet = d2i_ASN1_OCTET_STRING(NULL, &pubkey_buf, pub_len);",
          "611:     if (!octet) {",
          "612:         GOSTerr(GOST_F_PUB_DECODE_GOST94, ERR_R_MALLOC_FAILURE);",
          "613:         return 0;",
          "614:     }",
          "615:     databuf = OPENSSL_malloc(octet->length);",
          "616:     if (databuf == NULL) {",
          "617:         GOSTerr(GOST_F_PUB_DECODE_GOST94, ERR_R_MALLOC_FAILURE);",
          "618:         ASN1_OCTET_STRING_free(octet);",
          "619:         return 0;",
          "620:     }",
          "621:     for (i = 0, j = octet->length - 1; i < octet->length; i++, j--) {",
          "622:         databuf[j] = octet->data[i];",
          "623:     }",
          "624:     dsa = EVP_PKEY_get0(pk);",
          "625:     dsa->pub_key = BN_bin2bn(databuf, octet->length, NULL);",
          "626:     ASN1_OCTET_STRING_free(octet);",
          "627:     OPENSSL_free(databuf);",
          "628:     return 1;",
          "630: }",
          "632: static int pub_encode_gost94(X509_PUBKEY *pub, const EVP_PKEY *pk)",
          "633: {",
          "634:     ASN1_OBJECT *algobj = NULL;",
          "635:     ASN1_OCTET_STRING *octet = NULL;",
          "636:     void *pval = NULL;",
          "637:     unsigned char *buf = NULL, *databuf, *sptr;",
          "638:     int i, j, data_len, ret = 0;",
          "640:     int ptype = V_ASN1_UNDEF;",
          "641:     DSA *dsa = EVP_PKEY_get0((EVP_PKEY *)pk);",
          "642:     algobj = OBJ_nid2obj(EVP_PKEY_base_id(pk));",
          "643:     if (pk->save_parameters) {",
          "644:         ASN1_STRING *params = encode_gost_algor_params(pk);",
          "645:         pval = params;",
          "646:         ptype = V_ASN1_SEQUENCE;",
          "647:     }",
          "648:     data_len = BN_num_bytes(dsa->pub_key);",
          "649:     databuf = OPENSSL_malloc(data_len);",
          "650:     if (databuf == NULL) {",
          "651:         GOSTerr(GOST_F_PUB_ENCODE_GOST94, ERR_R_MALLOC_FAILURE);",
          "652:         return 0;",
          "653:     }",
          "654:     BN_bn2bin(dsa->pub_key, databuf);",
          "655:     octet = ASN1_OCTET_STRING_new();",
          "656:     if (octet == NULL) {",
          "657:         GOSTerr(GOST_F_PUB_ENCODE_GOST94, ERR_R_MALLOC_FAILURE);",
          "658:         OPENSSL_free(databuf);",
          "659:         return 0;",
          "660:     }",
          "661:     ASN1_STRING_set(octet, NULL, data_len);",
          "662:     sptr = ASN1_STRING_data(octet);",
          "663:     for (i = 0, j = data_len - 1; i < data_len; i++, j--) {",
          "664:         sptr[i] = databuf[j];",
          "665:     }",
          "666:     OPENSSL_free(databuf);",
          "667:     ret = i2d_ASN1_OCTET_STRING(octet, &buf);",
          "668:     ASN1_BIT_STRING_free(octet);",
          "669:     if (ret < 0)",
          "670:         return 0;",
          "671:     return X509_PUBKEY_set0_param(pub, algobj, ptype, pval, buf, ret);",
          "672: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "808:     return X509_PUBKEY_set0_param(pub, algobj, ptype, pval, buf, ret);",
          "809: }",
          "822: static int pub_cmp_gost01(const EVP_PKEY *a, const EVP_PKEY *b)",
          "823: {",
          "824:     const EC_KEY *ea = EVP_PKEY_get0((EVP_PKEY *)a);",
          "",
          "[Removed Lines]",
          "811: static int pub_cmp_gost94(const EVP_PKEY *a, const EVP_PKEY *b)",
          "812: {",
          "813:     const DSA *da = EVP_PKEY_get0((EVP_PKEY *)a);",
          "814:     const DSA *db = EVP_PKEY_get0((EVP_PKEY *)b);",
          "815:     if (da && db && da->pub_key && db->pub_key",
          "816:         && !BN_cmp(da->pub_key, db->pub_key)) {",
          "817:         return 1;",
          "818:     }",
          "819:     return 0;",
          "820: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "861:     return -2;",
          "862: }",
          "870: static int gost2001_param_encode(const EVP_PKEY *pkey, unsigned char **pder)",
          "871: {",
          "872:     int nid =",
          "",
          "[Removed Lines]",
          "864: static int gost94_param_encode(const EVP_PKEY *pkey, unsigned char **pder)",
          "865: {",
          "866:     int nid = gost94_nid_by_params(EVP_PKEY_get0((EVP_PKEY *)pkey));",
          "867:     return i2d_ASN1_OBJECT(OBJ_nid2obj(nid), pder);",
          "868: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "875:     return i2d_ASN1_OBJECT(OBJ_nid2obj(nid), pder);",
          "876: }",
          "899: static int gost2001_param_decode(EVP_PKEY *pkey, const unsigned char **pder,",
          "900:                                  int derlen)",
          "901: {",
          "",
          "[Removed Lines]",
          "878: static int gost94_param_decode(EVP_PKEY *pkey, const unsigned char **pder,",
          "879:                                int derlen)",
          "880: {",
          "881:     ASN1_OBJECT *obj = NULL;",
          "882:     DSA *dsa = EVP_PKEY_get0(pkey);",
          "883:     int nid;",
          "884:     if (d2i_ASN1_OBJECT(&obj, pder, derlen) == NULL) {",
          "885:         return 0;",
          "886:     }",
          "887:     nid = OBJ_obj2nid(obj);",
          "888:     ASN1_OBJECT_free(obj);",
          "889:     if (!dsa) {",
          "890:         dsa = DSA_new();",
          "891:         if (!EVP_PKEY_assign(pkey, NID_id_GostR3410_94, dsa))",
          "892:             return 0;",
          "893:     }",
          "894:     if (!fill_GOST94_params(dsa, nid))",
          "895:         return 0;",
          "896:     return 1;",
          "897: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "925:     if (!*ameth)",
          "926:         return 0;",
          "927:     switch (nid) {",
          "945:     case NID_id_GostR3410_2001:",
          "946:         EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost01);",
          "947:         EVP_PKEY_asn1_set_private(*ameth,",
          "",
          "[Removed Lines]",
          "928:     case NID_id_GostR3410_94:",
          "929:         EVP_PKEY_asn1_set_free(*ameth, pkey_free_gost94);",
          "930:         EVP_PKEY_asn1_set_private(*ameth,",
          "931:                                   priv_decode_gost, priv_encode_gost,",
          "932:                                   priv_print_gost94);",
          "934:         EVP_PKEY_asn1_set_param(*ameth,",
          "935:                                 gost94_param_decode, gost94_param_encode,",
          "936:                                 param_missing_gost94, param_copy_gost94,",
          "937:                                 param_cmp_gost94, param_print_gost94);",
          "938:         EVP_PKEY_asn1_set_public(*ameth,",
          "939:                                  pub_decode_gost94, pub_encode_gost94,",
          "940:                                  pub_cmp_gost94, pub_print_gost94,",
          "941:                                  pkey_size_gost, pkey_bits_gost);",
          "943:         EVP_PKEY_asn1_set_ctrl(*ameth, pkey_ctrl_gost);",
          "944:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_asn1.c||engines/ccgost/gost_asn1.c": [
          "File: engines/ccgost/gost_asn1.c -> engines/ccgost/gost_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: ASN1_NDEF_SEQUENCE_END(GOST_CLIENT_KEY_EXCHANGE_PARAMS)",
          "56: IMPLEMENT_ASN1_FUNCTIONS(GOST_CLIENT_KEY_EXCHANGE_PARAMS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: BIGNUM *getbnfrombuf(const unsigned char *buf, size_t len)",
          "60: {",
          "61:     BIGNUM *b;",
          "63:     while (*buf == 0 && len > 0) {",
          "64:         buf++;",
          "65:         len--;",
          "66:     }",
          "67:     if (len)",
          "68:         return BN_bin2bn(buf, len, NULL);",
          "69:     b = BN_new();",
          "70:     BN_zero(b);",
          "71:     return b;",
          "72: }",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_crypt.c||engines/ccgost/gost_crypt.c": [
          "File: engines/ccgost/gost_crypt.c -> engines/ccgost/gost_crypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     {NID_id_Gost28147_89_CryptoPro_A_ParamSet, &Gost28147_CryptoProParamSetA,",
          "123:      1},",
          "124:     {NID_id_Gost28147_89_CryptoPro_B_ParamSet, &Gost28147_CryptoProParamSetB,",
          "",
          "[Removed Lines]",
          "121:     {NID_id_Gost28147_89_cc, &GostR3411_94_CryptoProParamSet, 0},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_eng.c||engines/ccgost/gost_eng.c": [
          "File: engines/ccgost/gost_eng.c -> engines/ccgost/gost_eng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: static const char *engine_gost_name =",
          "20:     \"Reference implementation of GOST engine\";",
          "24: static int gost_ciphers(ENGINE *e, const EVP_CIPHER **cipher,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: static int gost_pkey_meth_nids[] = {",
          "23:     NID_id_GostR3410_2001, NID_id_Gost28147_89_MAC, 0",
          "24: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: static int gost_digest_nids[] =",
          "39:     { NID_id_GostR3411_94, NID_id_Gost28147_89_MAC, 0 };",
          "51: static int gost_engine_init(ENGINE *e)",
          "52: {",
          "",
          "[Removed Lines]",
          "41: static int gost_pkey_meth_nids[] = { NID_id_GostR3410_94,",
          "42:     NID_id_GostR3410_2001, NID_id_Gost28147_89_MAC, 0",
          "43: };",
          "45: static EVP_PKEY_METHOD *pmeth_GostR3410_94 = NULL,",
          "48: static EVP_PKEY_ASN1_METHOD *ameth_GostR3410_94 = NULL,",
          "",
          "[Added Lines]",
          "45: static EVP_PKEY_METHOD *pmeth_GostR3410_2001 = NULL;",
          "46: static EVP_PKEY_METHOD *pmeth_Gost28147_MAC = NULL;",
          "48: static EVP_PKEY_ASN1_METHOD *ameth_GostR3410_2001 = NULL;",
          "49: static EVP_PKEY_ASN1_METHOD *ameth_Gost28147_MAC = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: {",
          "63:     gost_param_free();",
          "66:     pmeth_GostR3410_2001 = NULL;",
          "67:     pmeth_Gost28147_MAC = NULL;",
          "69:     ameth_GostR3410_2001 = NULL;",
          "70:     ameth_Gost28147_MAC = NULL;",
          "71:     return 1;",
          "",
          "[Removed Lines]",
          "65:     pmeth_GostR3410_94 = NULL;",
          "68:     ameth_GostR3410_94 = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:     int ret = 0;",
          "77:     if (id && strcmp(id, engine_gost_id))",
          "78:         return 0;",
          "80:         printf(\"GOST engine already loaded\\n\");",
          "81:         goto end;",
          "82:     }",
          "",
          "[Removed Lines]",
          "79:     if (ameth_GostR3410_94) {",
          "",
          "[Added Lines]",
          "77:     if (ameth_GostR3410_2001) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:         goto end;",
          "121:     }",
          "127:     if (!register_ameth_gost",
          "128:         (NID_id_GostR3410_2001, &ameth_GostR3410_2001, \"GOST2001\",",
          "129:          \"GOST R 34.10-2001\"))",
          "",
          "[Removed Lines]",
          "123:     if (!register_ameth_gost",
          "124:         (NID_id_GostR3410_94, &ameth_GostR3410_94, \"GOST94\",",
          "125:          \"GOST R 34.10-94\"))",
          "126:         goto end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:                              \"GOST-MAC\", \"GOST 28147-89 MAC\"))",
          "133:         goto end;",
          "137:     if (!register_pmeth_gost(NID_id_GostR3410_2001, &pmeth_GostR3410_2001, 0))",
          "138:         goto end;",
          "141:         goto end;",
          "142:     if (!ENGINE_register_ciphers(e)",
          "143:         || !ENGINE_register_digests(e)",
          "",
          "[Removed Lines]",
          "135:     if (!register_pmeth_gost(NID_id_GostR3410_94, &pmeth_GostR3410_94, 0))",
          "136:         goto end;",
          "139:     if (!register_pmeth_gost",
          "140:         (NID_id_Gost28147_89_MAC, &pmeth_Gost28147_MAC, 0))",
          "",
          "[Added Lines]",
          "131:     if (!register_pmeth_gost(NID_id_Gost28147_89_MAC, &pmeth_Gost28147_MAC, 0))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208: {",
          "209:     if (!pmeth) {",
          "212:     }",
          "214:     switch (nid) {",
          "218:     case NID_id_GostR3410_2001:",
          "220:         return 1;",
          "",
          "[Removed Lines]",
          "211:         return 3;",
          "215:     case NID_id_GostR3410_94:",
          "217:         return 1;",
          "",
          "[Added Lines]",
          "202:         return 2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "233: {",
          "234:     if (!ameth) {",
          "237:     }",
          "238:     switch (nid) {",
          "242:     case NID_id_GostR3410_2001:",
          "244:         return 1;",
          "",
          "[Removed Lines]",
          "236:         return 3;",
          "239:     case NID_id_GostR3410_94:",
          "241:         return 1;",
          "",
          "[Added Lines]",
          "224:         return 2;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "269: void ENGINE_load_gost(void)",
          "270: {",
          "271:     ENGINE *toadd;",
          "273:         return;",
          "274:     toadd = engine_gost();",
          "275:     if (!toadd)",
          "",
          "[Removed Lines]",
          "272:     if (pmeth_GostR3410_94)",
          "",
          "[Added Lines]",
          "257:     if (pmeth_GostR3410_2001)",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_lcl.h||engines/ccgost/gost_lcl.h": [
          "File: engines/ccgost/gost_lcl.h -> engines/ccgost/gost_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: # define GOST_PARAM_MAX 0",
          "24: # define GOST_CTRL_CRYPT_PARAMS (ENGINE_CMD_BASE+GOST_PARAM_CRYPT_PARAMS)",
          "26: extern const ENGINE_CMD_DEFN gost_cmds[];",
          "27: int gost_control_func(ENGINE *e, int cmd, long i, void *p, void (*f) (void));",
          "28: const char *get_gost_engine_param(int param);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: typedef struct R3410_2001 {",
          "27:     int nid;",
          "28:     char *a;",
          "29:     char *b;",
          "30:     char *p;",
          "31:     char *q;",
          "32:     char *x;",
          "33:     char *y;",
          "34: } R3410_2001_params;",
          "36: extern R3410_2001_params R3410_2001_paramset[];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: # define EVP_MD_CTRL_KEY_LEN (EVP_MD_CTRL_ALG_CTRL+3)",
          "168: # define EVP_MD_CTRL_SET_KEY (EVP_MD_CTRL_ALG_CTRL+4)",
          "179: int pkey_GOST01cp_encrypt(EVP_PKEY_CTX *ctx, unsigned char *out,",
          "180:                           size_t *outlen, const unsigned char *key,",
          "",
          "[Removed Lines]",
          "171: int pkey_GOST94cp_encrypt(EVP_PKEY_CTX *ctx, unsigned char *out,",
          "172:                           size_t *outlen, const unsigned char *key,",
          "173:                           size_t key_len);",
          "175: int pkey_GOST94cp_decrypt(EVP_PKEY_CTX *ctx, unsigned char *out,",
          "176:                           size_t *outlen, const unsigned char *in,",
          "177:                           size_t in_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188: int pkey_gost2001_derive(EVP_PKEY_CTX *ctx, unsigned char *key,",
          "189:                          size_t *keylen);",
          "194: int fill_GOST2001_params(EC_KEY *eckey, int nid);",
          "195: int gost_sign_keygen(DSA *dsa);",
          "196: int gost2001_keygen(EC_KEY *ec);",
          "",
          "[Removed Lines]",
          "191: int pkey_gost94_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);",
          "193: int fill_GOST94_params(DSA *dsa, int nid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203: int gost2001_do_verify(const unsigned char *dgst, int dgst_len,",
          "204:                        DSA_SIG *sig, EC_KEY *ec);",
          "205: int gost2001_compute_public(EC_KEY *ec);",
          "",
          "[Removed Lines]",
          "206: int gost94_compute_public(DSA *dsa);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221: DSA_SIG *unpack_cp_signature(const unsigned char *sig, size_t siglen);",
          "225: BIGNUM *gost_get0_priv_key(const EVP_PKEY *pkey);",
          "229: #endif",
          "",
          "[Removed Lines]",
          "227: int gost94_nid_by_params(DSA *p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_params.c||engines/ccgost/gost_params.c": [
          "File: engines/ccgost/gost_params.c -> engines/ccgost/gost_params.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <openssl/objects.h>",
          "126: R3410_2001_params R3410_2001_paramset[] = {",
          "143:     {NID_id_GostR3410_2001_TestParamSet,",
          "144:      \"7\",",
          "",
          "[Removed Lines]",
          "10: #include \"gost_params.h\"",
          "14: R3410_params R3410_paramset[] = {",
          "16:     {NID_id_GostR3410_94_CryptoPro_A_ParamSet,",
          "17:      \"100997906755055304772081815535925224869\"",
          "18:      \"8410825720534578748235158755771479905292727772441528526992987964833\"",
          "19:      \"5669968284202797289605274717317548059048560713474685214192868091256\"",
          "20:      \"1502802222185647539190902656116367847270145019066794290930185446216\"",
          "21:      \"3997308722217328898303231940973554032134009725883228768509467406639\"",
          "22:      \"62\",",
          "23:      \"127021248288932417465907042777176443525\"",
          "24:      \"7876535089165358128175072657050312609850984974231883334834011809259\"",
          "25:      \"9999512098893413065920561499672425412104927434935707492031276956145\"",
          "26:      \"1689224110579311248812610229678534638401693520013288995000362260684\"",
          "27:      \"2227508135323070045173416336850045410625869714168836867788425378203\"",
          "28:      \"83\",",
          "29:      \"683631961449557007844441656118272528951\"",
          "30:      \"02170888761442055095051287550314083023\"}",
          "31:     ,",
          "32:     {NID_id_GostR3410_94_CryptoPro_B_ParamSet,",
          "33:      \"429418261486158041438734477379555023926\"",
          "34:      \"7234596860714306679811299408947123142002706038521669956384871995765\"",
          "35:      \"7284814898909770759462613437669456364882730370838934791080835932647\"",
          "36:      \"9767786019153434744009610342313166725786869204821949328786333602033\"",
          "37:      \"8479709268434224762105576023501613261478065276102850944540333865234\"",
          "38:      \"1\",",
          "39:      \"139454871199115825601409655107690713107\"",
          "40:      \"0417070599280317977580014543757653577229840941243685222882398330391\"",
          "41:      \"1468164807668823692122073732267216074074777170091113455043205380464\"",
          "42:      \"7694904686120113087816240740184800477047157336662926249423571248823\"",
          "43:      \"9685422217536601433914856808405203368594584948031873412885804895251\"",
          "44:      \"63\",",
          "45:      \"79885141663410976897627118935756323747307951916507639758300472692338873533959\"}",
          "46:     ,",
          "47:     {NID_id_GostR3410_94_CryptoPro_C_ParamSet,",
          "48:      \"816552717970881016017893191415300348226\"",
          "49:      \"2544051353358162468249467681876621283478212884286545844013955142622\"",
          "50:      \"2087723485023722868022275009502224827866201744494021697716482008353\"",
          "51:      \"6398202298024892620480898699335508064332313529725332208819456895108\"",
          "52:      \"5155178100221003459370588291073071186553005962149936840737128710832\"",
          "53:      \"3\",",
          "54:      \"110624679233511963040518952417017040248\"",
          "55:      \"5862954819831383774196396298584395948970608956170224210628525560327\"",
          "56:      \"8638246716655439297654402921844747893079518669992827880792192992701\"",
          "57:      \"1428546551433875806377110443534293554066712653034996277099320715774\"",
          "58:      \"3542287621283671843703709141350171945045805050291770503634517804938\"",
          "59:      \"01\",",
          "60:      \"113468861199819350564868233378875198043\"",
          "61:      \"267947776488510997961231672532899549103\"}",
          "62:     ,",
          "63:     {NID_id_GostR3410_94_CryptoPro_D_ParamSet,",
          "64:      \"756976611021707301782128757801610628085\"",
          "65:      \"5283803109571158829574281419208532589041660017017859858216341400371\"",
          "66:      \"4687551412794400562878935266630754392677014598582103365983119173924\"",
          "67:      \"4732511225464712252386803315902707727668715343476086350472025298282\"",
          "68:      \"7271461690125050616858238384366331089777463541013033926723743254833\"",
          "69:      \"7\",",
          "70:      \"905457649621929965904290958774625315611\"",
          "71:      \"3056083907389766971404812524422262512556054474620855996091570786713\"",
          "72:      \"5849550236741915584185990627801066465809510095784713989819413820871\"",
          "73:      \"5964648914493053407920737078890520482730623038837767710173664838239\"",
          "74:      \"8574828787891286471201460474326612697849693665518073864436497893214\"",
          "75:      \"9\",",
          "76:      \"108988435796353506912374591498972192620\"",
          "77:      \"190487557619582334771735390599299211593\"}",
          "78:     ,",
          "80:     {NID_id_GostR3410_94_CryptoPro_XchA_ParamSet,",
          "81:      \"1335318132727206734338595199483190012179423759678474868994823595993\"",
          "82:      \"6964252873471246159040332773182141032801252925387191478859899310331\"",
          "83:      \"0567744136196364803064721377826656898686468463277710150809401182608\"",
          "84:      \"7702016153249904683329312949209127762411378780302243557466062839716\"",
          "85:      \"59376426832674269780880061631528163475887\",",
          "86:      \"14201174159756348119636828602231808974327613839524373876287257344192\"",
          "87:      \"74593935127189736311660784676003608489466235676257952827747192122419\"",
          "88:      \"29071046134208380636394084512691828894000571524625445295769349356752\"",
          "89:      \"72895683154177544176313938445719175509684710784659566254794231229333\"",
          "90:      \"8483924514339614727760681880609734239\",",
          "91:      \"91771529896554605945588149018382750217296858393520724172743325725474\"",
          "92:      \"374979801\"}",
          "93:     ,",
          "94:     {NID_id_GostR3410_94_CryptoPro_XchB_ParamSet,",
          "95:      \"8890864727828423151699995801875757891031463338652579140051973659\"",
          "96:      \"3048131440685857067369829407947744496306656291505503608252399443\"",
          "97:      \"7900272386749145996230867832228661977543992816745254823298629859\"",
          "98:      \"8753575466286051738837854736167685769017780335804511440773337196\"",
          "99:      \"2538423532919394477873664752824509986617878992443177\",",
          "100:      \"1028946126624994859676552074360530315217970499989304888248413244\"",
          "101:      \"8474923022758470167998871003604670704877377286176171227694098633\"",
          "102:      \"1539089568784129110109512690503345393869871295783467257264868341\"",
          "103:      \"7200196629860561193666752429682367397084815179752036423595736533\"",
          "104:      \"68957392061769855284593965042530895046088067160269433\",",
          "105:      \"9109671391802626916582318050603555673628769498182593088388796888\"",
          "106:      \"5281641595199\"}",
          "107:     ,",
          "108:     {NID_id_GostR3410_94_CryptoPro_XchC_ParamSet,",
          "109:      \"4430618464297584182473135030809859326863990650118941756995270074\"",
          "110:      \"8609973181426950235239623239110557450826919295792878938752101867\"",
          "111:      \"7047181623251027516953100431855964837602657827828194249605561893\"",
          "112:      \"6965865325513137194483136247773653468410118796740709840825496997\"",
          "113:      \"9375560722345106704721086025979309968763193072908334\",",
          "114:      \"1246996366993477513607147265794064436203408861395055989217248455\"",
          "115:      \"7299870737698999651480662364723992859320868822848751165438350943\"",
          "116:      \"3276647222625940615560580450040947211826027729977563540237169063\"",
          "117:      \"0448079715771649447778447000597419032457722226253269698374446528\"",
          "118:      \"35352729304393746106576383349151001715930924115499549\",",
          "119:      \"6787876137336591234380295020065682527118129468050147943114675429\"",
          "120:      \"4748422492761\"}",
          "121:     ,",
          "123:     {NID_undef, NULL, NULL, NULL}",
          "124: };",
          "128:     {NID_id_GostR3410_2001_ParamSet_cc,",
          "130:      \"C0000000000000000000000000000000000000000000000000000000000003c4\",",
          "132:      \"2d06B4265ebc749ff7d0f1f1f88232e81632e9088fd44b7787d5e407e955080c\",",
          "134:      \"C0000000000000000000000000000000000000000000000000000000000003C7\",",
          "136:      \"5fffffffffffffffffffffffffffffff606117a2f4bde428b7458a54b6e87b85\",",
          "138:      \"2\",",
          "140:      \"a20e034bf8813ef5c18d01105e726a17eb248b264ae9706f440bedc8ccb6b22c\"}",
          "141:     ,",
          "",
          "[Added Lines]",
          "10: #include \"gost_lcl.h\"",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_params.h||engines/ccgost/gost_params.h": [
          "File: engines/ccgost/gost_params.h -> engines/ccgost/gost_params.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_pmeth.c||engines/ccgost/gost_pmeth.c": [
          "File: engines/ccgost/gost_pmeth.c -> engines/ccgost/gost_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <stdlib.h>",
          "16: #include <string.h>",
          "17: #include <ctype.h>",
          "19: #include \"gost_lcl.h\"",
          "20: #include \"e_gost_err.h\"",
          "",
          "[Removed Lines]",
          "18: #include \"gost_params.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     memset(data, 0, sizeof(*data));",
          "32:     if (pkey && EVP_PKEY_get0(pkey)) {",
          "33:         switch (EVP_PKEY_base_id(pkey)) {",
          "37:         case NID_id_GostR3410_2001:",
          "38:             data->sign_param_nid =",
          "39:                 EC_GROUP_get_curve_name(EC_KEY_get0_group",
          "",
          "[Removed Lines]",
          "34:         case NID_id_GostR3410_94:",
          "35:             data->sign_param_nid = gost94_nid_by_params(EVP_PKEY_get0(pkey));",
          "36:             break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     return -2;",
          "127: }",
          "192: static int pkey_gost_ctrl01_str(EVP_PKEY_CTX *ctx,",
          "193:                                 const char *type, const char *value)",
          "194: {",
          "",
          "[Removed Lines]",
          "129: static int pkey_gost_ctrl94_str(EVP_PKEY_CTX *ctx,",
          "130:                                 const char *type, const char *value)",
          "131: {",
          "132:     int param_nid = 0;",
          "134:     if (strcmp(type, param_ctrl_string) == 0) {",
          "135:         if (!value) {",
          "136:             return 0;",
          "137:         }",
          "138:         if (strlen(value) == 1) {",
          "139:             switch (toupper((unsigned char)value[0])) {",
          "140:             case 'A':",
          "141:                 param_nid = NID_id_GostR3410_94_CryptoPro_A_ParamSet;",
          "142:                 break;",
          "143:             case 'B':",
          "144:                 param_nid = NID_id_GostR3410_94_CryptoPro_B_ParamSet;",
          "145:                 break;",
          "146:             case 'C':",
          "147:                 param_nid = NID_id_GostR3410_94_CryptoPro_C_ParamSet;",
          "148:                 break;",
          "149:             case 'D':",
          "150:                 param_nid = NID_id_GostR3410_94_CryptoPro_D_ParamSet;",
          "151:                 break;",
          "152:             default:",
          "153:                 return 0;",
          "154:             }",
          "155:         } else if ((strlen(value) == 2)",
          "156:                    && (toupper((unsigned char)value[0]) == 'X')) {",
          "157:             switch (toupper((unsigned char)value[1])) {",
          "158:             case 'A':",
          "159:                 param_nid = NID_id_GostR3410_94_CryptoPro_XchA_ParamSet;",
          "160:                 break;",
          "161:             case 'B':",
          "162:                 param_nid = NID_id_GostR3410_94_CryptoPro_XchB_ParamSet;",
          "163:                 break;",
          "164:             case 'C':",
          "165:                 param_nid = NID_id_GostR3410_94_CryptoPro_XchC_ParamSet;",
          "166:                 break;",
          "167:             default:",
          "168:                 return 0;",
          "169:             }",
          "170:         } else {",
          "171:             R3410_params *p = R3410_paramset;",
          "172:             param_nid = OBJ_txt2nid(value);",
          "173:             if (param_nid == NID_undef) {",
          "174:                 return 0;",
          "175:             }",
          "176:             for (; p->nid != NID_undef; p++) {",
          "177:                 if (p->nid == param_nid)",
          "178:                     break;",
          "179:             }",
          "180:             if (p->nid == NID_undef) {",
          "181:                 GOSTerr(GOST_F_PKEY_GOST_CTRL94_STR, GOST_R_INVALID_PARAMSET);",
          "182:                 return 0;",
          "183:             }",
          "184:         }",
          "186:         return pkey_gost_ctrl(ctx, EVP_PKEY_CTRL_GOST_PARAMSET,",
          "187:                               param_nid, NULL);",
          "188:     }",
          "189:     return -2;",
          "190: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:     return 1;",
          "257: }",
          "276: static int pkey_gost01_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)",
          "277: {",
          "278:     struct gost_pmeth_data *data = EVP_PKEY_CTX_get_data(ctx);",
          "",
          "[Removed Lines]",
          "259: static int pkey_gost94_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)",
          "260: {",
          "261:     struct gost_pmeth_data *data = EVP_PKEY_CTX_get_data(ctx);",
          "262:     DSA *dsa = NULL;",
          "263:     if (data->sign_param_nid == NID_undef) {",
          "264:         GOSTerr(GOST_F_PKEY_GOST94_PARAMGEN, GOST_R_NO_PARAMETERS_SET);",
          "265:         return 0;",
          "266:     }",
          "267:     dsa = DSA_new();",
          "268:     if (!fill_GOST94_params(dsa, data->sign_param_nid)) {",
          "269:         DSA_free(dsa);",
          "270:         return 0;",
          "271:     }",
          "272:     EVP_PKEY_assign(pkey, NID_id_GostR3410_94, dsa);",
          "273:     return 1;",
          "274: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:     return 1;",
          "293: }",
          "307: static int pkey_gost01cp_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)",
          "308: {",
          "",
          "[Removed Lines]",
          "296: static int pkey_gost94cp_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)",
          "297: {",
          "298:     DSA *dsa;",
          "299:     if (!pkey_gost94_paramgen(ctx, pkey))",
          "300:         return 0;",
          "301:     dsa = EVP_PKEY_get0(pkey);",
          "302:     gost_sign_keygen(dsa);",
          "303:     return 1;",
          "304: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315: }",
          "322: {",
          "336: }",
          "338: static int pkey_gost01_cp_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,",
          "339:                                size_t *siglen, const unsigned char *tbs,",
          "340:                                size_t tbs_len)",
          "",
          "[Removed Lines]",
          "319: static int pkey_gost94_cp_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,",
          "320:                                size_t *siglen, const unsigned char *tbs,",
          "321:                                size_t tbs_len)",
          "323:     DSA_SIG *unpacked_sig = NULL;",
          "324:     EVP_PKEY *pkey = EVP_PKEY_CTX_get0_pkey(ctx);",
          "325:     if (!siglen)",
          "326:         return 0;",
          "327:     if (!sig) {",
          "329:         return 1;",
          "330:     }",
          "331:     unpacked_sig = gost_do_sign(tbs, tbs_len, EVP_PKEY_get0(pkey));",
          "332:     if (!unpacked_sig) {",
          "333:         return 0;",
          "334:     }",
          "335:     return pack_sign_cp(unpacked_sig, 32, sig, siglen);",
          "",
          "[Added Lines]",
          "227: int pack_sign_cp(DSA_SIG *s, int order, unsigned char *sig, size_t *siglen)",
          "230:     memset(sig, 0, *siglen);",
          "231:     store_bignum(s->s, sig, order);",
          "232:     store_bignum(s->r, sig + order, order);",
          "233:     DSA_SIG_free(s);",
          "234:     return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "355: }",
          "362: {",
          "372: }",
          "374: static int pkey_gost01_cp_verify(EVP_PKEY_CTX *ctx, const unsigned char *sig,",
          "375:                                  size_t siglen, const unsigned char *tbs,",
          "376:                                  size_t tbs_len)",
          "",
          "[Removed Lines]",
          "359: static int pkey_gost94_cp_verify(EVP_PKEY_CTX *ctx, const unsigned char *sig,",
          "360:                                  size_t siglen, const unsigned char *tbs,",
          "361:                                  size_t tbs_len)",
          "363:     int ok = 0;",
          "364:     EVP_PKEY *pub_key = EVP_PKEY_CTX_get0_pkey(ctx);",
          "365:     DSA_SIG *s = unpack_cp_signature(sig, siglen);",
          "366:     if (!s)",
          "367:         return 0;",
          "368:     if (pub_key)",
          "369:         ok = gost_do_verify(tbs, tbs_len, s, EVP_PKEY_get0(pub_key));",
          "370:     DSA_SIG_free(s);",
          "371:     return ok;",
          "",
          "[Added Lines]",
          "259: DSA_SIG *unpack_cp_signature(const unsigned char *sig, size_t siglen)",
          "261:     DSA_SIG *s;",
          "263:     s = DSA_SIG_new();",
          "264:     if (s == NULL) {",
          "265:         GOSTerr(GOST_F_UNPACK_CP_SIGNATURE, ERR_R_MALLOC_FAILURE);",
          "266:         return NULL;",
          "267:     }",
          "268:     s->s = BN_bin2bn(sig, siglen / 2, NULL);",
          "269:     s->r = BN_bin2bn(sig + siglen / 2, siglen / 2, NULL);",
          "270:     return s;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "570:         return 0;",
          "572:     switch (id) {",
          "587:     case NID_id_GostR3410_2001:",
          "588:         EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl01_str);",
          "589:         EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost01_cp_sign);",
          "",
          "[Removed Lines]",
          "573:     case NID_id_GostR3410_94:",
          "574:         EVP_PKEY_meth_set_ctrl(*pmeth, pkey_gost_ctrl, pkey_gost_ctrl94_str);",
          "575:         EVP_PKEY_meth_set_keygen(*pmeth, NULL, pkey_gost94cp_keygen);",
          "576:         EVP_PKEY_meth_set_sign(*pmeth, NULL, pkey_gost94_cp_sign);",
          "577:         EVP_PKEY_meth_set_verify(*pmeth, NULL, pkey_gost94_cp_verify);",
          "578:         EVP_PKEY_meth_set_encrypt(*pmeth,",
          "579:                                   pkey_gost_encrypt_init,",
          "580:                                   pkey_GOST94cp_encrypt);",
          "581:         EVP_PKEY_meth_set_decrypt(*pmeth, NULL, pkey_GOST94cp_decrypt);",
          "582:         EVP_PKEY_meth_set_derive(*pmeth,",
          "583:                                  pkey_gost_derive_init, pkey_gost94_derive);",
          "584:         EVP_PKEY_meth_set_paramgen(*pmeth, pkey_gost_paramgen_init,",
          "585:                                    pkey_gost94_paramgen);",
          "586:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_sign.c||engines/ccgost/gost_sign.c": [
          "File: engines/ccgost/gost_sign.c -> engines/ccgost/gost_sign.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "878: # define TLS_CT_ECDSA_SIGN               64",
          "879: # define TLS_CT_RSA_FIXED_ECDH           65",
          "880: # define TLS_CT_ECDSA_FIXED_ECDH         66",
          "882: # define TLS_CT_GOST01_SIGN              22",
          "",
          "[Removed Lines]",
          "881: # define TLS_CT_GOST94_SIGN              21",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:         ret = SSL_PKEY_ECC;",
          "619:     }",
          "620: #endif",
          "624:         ret = SSL_PKEY_GOST01;",
          "625:     } else if (x && (i == EVP_PKEY_DH || i == EVP_PKEY_DHX)) {",
          "",
          "[Removed Lines]",
          "621:     else if (i == NID_id_GostR3410_94 || i == NID_id_GostR3410_94_cc) {",
          "622:         ret = SSL_PKEY_GOST94;",
          "623:     } else if (i == NID_id_GostR3410_2001 || i == NID_id_GostR3410_2001_cc) {",
          "",
          "[Added Lines]",
          "621:     else if (i == NID_id_GostR3410_2001) {",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3059:             n = j + 2;",
          "3060:         } else",
          "3061: #endif",
          "3064:             unsigned char signbuf[64];",
          "3065:             int i;",
          "3066:             size_t sigsize = 64;",
          "",
          "[Removed Lines]",
          "3062:         if (pkey->type == NID_id_GostR3410_94",
          "3063:                 || pkey->type == NID_id_GostR3410_2001) {",
          "",
          "[Added Lines]",
          "3062:         if (pkey->type == NID_id_GostR3410_2001) {",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1161:     {",
          "1162:      1,",
          "1163:      \"GOST2001-GOST89-GOST89\",",
          "",
          "[Removed Lines]",
          "1148:     {",
          "1149:      1,",
          "1150:      \"GOST94-GOST89-GOST89\",",
          "1151:      0x3000080,",
          "1152:      SSL_kGOST,",
          "1153:      SSL_aGOST94,",
          "1154:      SSL_eGOST2814789CNT,",
          "1155:      SSL_GOST89MAC,",
          "1156:      SSL_TLSV1,",
          "1157:      SSL_NOT_EXP | SSL_HIGH,",
          "1158:      SSL_HANDSHAKE_MAC_GOST94 | TLS1_PRF_GOST94 | TLS1_STREAM_MAC,",
          "1159:      256,",
          "1160:      256},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1170:      SSL_NOT_EXP | SSL_HIGH,",
          "1171:      SSL_HANDSHAKE_MAC_GOST94 | TLS1_PRF_GOST94 | TLS1_STREAM_MAC,",
          "1172:      256,",
          "1187:     {",
          "1188:      1,",
          "1189:      \"GOST2001-NULL-GOST94\",",
          "",
          "[Removed Lines]",
          "1173:      256},",
          "1174:     {",
          "1175:      1,",
          "1176:      \"GOST94-NULL-GOST94\",",
          "1177:      0x3000082,",
          "1178:      SSL_kGOST,",
          "1179:      SSL_aGOST94,",
          "1180:      SSL_eNULL,",
          "1181:      SSL_GOST94,",
          "1182:      SSL_TLSV1,",
          "1183:      SSL_NOT_EXP | SSL_STRONG_NONE,",
          "1184:      SSL_HANDSHAKE_MAC_GOST94 | TLS1_PRF_GOST94,",
          "1185:      0,",
          "1186:      0},",
          "",
          "[Added Lines]",
          "1160:      256",
          "1161:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196:      SSL_NOT_EXP | SSL_STRONG_NONE,",
          "1197:      SSL_HANDSHAKE_MAC_GOST94 | TLS1_PRF_GOST94,",
          "1198:      0,",
          "1201: #ifndef OPENSSL_NO_CAMELLIA",
          "",
          "[Removed Lines]",
          "1199:      0},",
          "",
          "[Added Lines]",
          "1174:      0",
          "1175:     },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3474:      256},",
          "3475: #endif",
          "3535: };",
          "",
          "[Removed Lines]",
          "3477: #ifdef TEMP_GOST_TLS",
          "3479:     {",
          "3480:      1,",
          "3481:      \"GOST-MD5\",",
          "3482:      0x0300ff00,",
          "3483:      SSL_kRSA,",
          "3484:      SSL_aRSA,",
          "3485:      SSL_eGOST2814789CNT,",
          "3486:      SSL_MD5,",
          "3487:      SSL_TLSV1,",
          "3488:      SSL_NOT_EXP | SSL_HIGH,",
          "3489:      SSL_HANDSHAKE_MAC_DEFAULT | TLS1_PRF,",
          "3490:      256,",
          "3491:      256,",
          "3492:      },",
          "3493:     {",
          "3494:      1,",
          "3495:      \"GOST-GOST94\",",
          "3496:      0x0300ff01,",
          "3497:      SSL_kRSA,",
          "3498:      SSL_aRSA,",
          "3499:      SSL_eGOST2814789CNT,",
          "3500:      SSL_GOST94,",
          "3501:      SSL_TLSV1,",
          "3502:      SSL_NOT_EXP | SSL_HIGH,",
          "3503:      SSL_HANDSHAKE_MAC_DEFAULT | TLS1_PRF,",
          "3504:      256,",
          "3505:      256},",
          "3506:     {",
          "3507:      1,",
          "3508:      \"GOST-GOST89MAC\",",
          "3509:      0x0300ff02,",
          "3510:      SSL_kRSA,",
          "3511:      SSL_aRSA,",
          "3512:      SSL_eGOST2814789CNT,",
          "3513:      SSL_GOST89MAC,",
          "3514:      SSL_TLSV1,",
          "3515:      SSL_NOT_EXP | SSL_HIGH,",
          "3516:      SSL_HANDSHAKE_MAC_DEFAULT | TLS1_PRF,",
          "3517:      256,",
          "3518:      256},",
          "3519:     {",
          "3520:      1,",
          "3521:      \"GOST-GOST89STREAM\",",
          "3522:      0x0300ff03,",
          "3523:      SSL_kRSA,",
          "3524:      SSL_aRSA,",
          "3525:      SSL_eGOST2814789CNT,",
          "3526:      SSL_GOST89MAC,",
          "3527:      SSL_TLSV1,",
          "3528:      SSL_NOT_EXP | SSL_HIGH,",
          "3529:      SSL_HANDSHAKE_MAC_DEFAULT | TLS1_PRF | TLS1_STREAM_MAC,",
          "3530:      256,",
          "3531:      256},",
          "3532: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4694: #ifndef OPENSSL_NO_GOST",
          "4695:     if (s->version >= TLS1_VERSION) {",
          "4696:         if (alg_k & SSL_kGOST) {",
          "4698:             p[ret++] = TLS_CT_GOST01_SIGN;",
          "4699:             return (ret);",
          "4700:         }",
          "",
          "[Removed Lines]",
          "4697:             p[ret++] = TLS_CT_GOST94_SIGN;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2738:         alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "2742:             pk = s->cert->pkeys[SSL_PKEY_GOST01].privatekey;",
          "2744:         pkey_ctx = EVP_PKEY_CTX_new(pk, NULL);",
          "",
          "[Removed Lines]",
          "2739:         if (alg_a & SSL_aGOST94)",
          "2740:             pk = s->cert->pkeys[SSL_PKEY_GOST94].privatekey;",
          "2741:         else if (alg_a & SSL_aGOST01)",
          "",
          "[Added Lines]",
          "2739:         if (alg_a & SSL_aGOST01)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2879:         len = 64;",
          "2880:     } else {",
          "2881:         if (SSL_USE_SIGALGS(s)) {",
          "",
          "[Removed Lines]",
          "2877:     if (n == 64 && (pkey->type == NID_id_GostR3410_94 ||",
          "2878:                     pkey->type == NID_id_GostR3410_2001)) {",
          "",
          "[Added Lines]",
          "2875:     if (n == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2984:         }",
          "2985:     } else",
          "2986: #endif",
          "2989:         unsigned char signature[64];",
          "2990:         int idx;",
          "2991:         EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "",
          "[Removed Lines]",
          "2987:     if (pkey->type == NID_id_GostR3410_94",
          "2988:             || pkey->type == NID_id_GostR3410_2001) {",
          "",
          "[Added Lines]",
          "2984:     if (pkey->type == NID_id_GostR3410_2001) {",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:     {0, SSL_TXT_aECDSA, 0, 0, SSL_aECDSA, 0, 0, 0, 0, 0, 0, 0},",
          "332:     {0, SSL_TXT_ECDSA, 0, 0, SSL_aECDSA, 0, 0, 0, 0, 0, 0, 0},",
          "333:     {0, SSL_TXT_aPSK, 0, 0, SSL_aPSK, 0, 0, 0, 0, 0, 0, 0},",
          "335:     {0, SSL_TXT_aGOST01, 0, 0, SSL_aGOST01, 0, 0, 0, 0, 0, 0, 0},",
          "337:     {0, SSL_TXT_aSRP, 0, 0, SSL_aSRP, 0, 0, 0, 0, 0, 0, 0},",
          "",
          "[Removed Lines]",
          "334:     {0, SSL_TXT_aGOST94, 0, 0, SSL_aGOST94, 0, 0, 0, 0, 0, 0, 0},",
          "336:     {0, SSL_TXT_aGOST, 0, 0, SSL_aGOST94 | SSL_aGOST01, 0, 0, 0, 0, 0, 0, 0},",
          "",
          "[Added Lines]",
          "335:     {0, SSL_TXT_aGOST, 0, 0, SSL_aGOST01, 0, 0, 0, 0, 0, 0, 0},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528:         disabled_mac_mask |= SSL_GOST89MAC;",
          "529:     }",
          "533:     if (!get_optional_pkey_id(\"gost2001\"))",
          "534:         disabled_auth_mask |= SSL_aGOST01;",
          "539:         disabled_mkey_mask |= SSL_kGOST;",
          "540: }",
          "",
          "[Removed Lines]",
          "531:     if (!get_optional_pkey_id(\"gost94\"))",
          "532:         disabled_auth_mask |= SSL_aGOST94;",
          "538:     if ((disabled_auth_mask & (SSL_aGOST94 | SSL_aGOST01)) == (SSL_aGOST94 | SSL_aGOST01))",
          "",
          "[Added Lines]",
          "535:     if ((disabled_auth_mask & SSL_aGOST01) == SSL_aGOST01)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1673:     case SSL_aSRP:",
          "1674:         au = \"SRP\";",
          "1675:         break;",
          "1679:     case SSL_aGOST01:",
          "1680:         au = \"GOST01\";",
          "1681:         break;",
          "",
          "[Removed Lines]",
          "1676:     case SSL_aGOST94:",
          "1677:         au = \"GOST94\";",
          "1678:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1961:         return SSL_PKEY_DSA_SIGN;",
          "1962:     else if (alg_a & SSL_aRSA)",
          "1963:         return SSL_PKEY_RSA_ENC;",
          "1966:     else if (alg_a & SSL_aGOST01)",
          "1967:         return SSL_PKEY_GOST01;",
          "1968:     return -1;",
          "",
          "[Removed Lines]",
          "1964:     else if (alg_a & SSL_aGOST94)",
          "1965:         return SSL_PKEY_GOST94;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2007:         mask_k |= SSL_kGOST;",
          "2008:         mask_a |= SSL_aGOST01;",
          "2009:     }",
          "2016:     if (rsa_enc || (rsa_tmp && rsa_sign))",
          "2017:         mask_k |= SSL_kRSA;",
          "",
          "[Removed Lines]",
          "2010:     cpk = &(c->pkeys[SSL_PKEY_GOST94]);",
          "2011:     if (cpk->x509 != NULL && cpk->privatekey != NULL) {",
          "2012:         mask_k |= SSL_kGOST;",
          "2013:         mask_a |= SSL_aGOST94;",
          "2014:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: # define SSL_aECDSA              0x00000040L",
          "341: # define SSL_aPSK                0x00000080L",
          "345: # define SSL_aGOST01                     0x00000200L",
          "",
          "[Removed Lines]",
          "343: # define SSL_aGOST94                             0x00000100L",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508: # define SSL_PKEY_DH_RSA         3",
          "509: # define SSL_PKEY_DH_DSA         4",
          "510: # define SSL_PKEY_ECC            5",
          "512: # define SSL_PKEY_GOST01         7",
          "513: # define SSL_PKEY_NUM            8",
          "",
          "[Removed Lines]",
          "511: # define SSL_PKEY_GOST94         6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0bd6493369d960abef11c2346b9bbb308b4285a",
      "candidate_info": {
        "commit_hash": "a0bd6493369d960abef11c2346b9bbb308b4285a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a0bd6493369d960abef11c2346b9bbb308b4285a",
        "files": [
          "ssl/d1_srvr.c",
          "ssl/s3_srvr.c"
        ],
        "message": "Don't allow a CCS when expecting a CertificateVerify\n\nCurrently we set change_cipher_spec_ok to 1 before calling\nssl3_get_cert_verify(). This is because this message is optional and if it\nis not sent then the next thing we would expect to get is the CCS. However,\nalthough it is optional, we do actually know whether we should be receiving\none in advance. If we have received a client cert then we should expect\na CertificateVerify message. By the time we get to this point we will\nalready have bombed out if we didn't get a Certificate when we should have\ndone, so it is safe just to check whether |peer| is NULL or not. If it is\nwe won't get a CertificateVerify, otherwise we will. Therefore we should\nchange the logic so that we only attempt to get the CertificateVerify if\nwe are expecting one, and not allow a CCS in this scenario.\n\nWhilst this is good practice for TLS it is even more important for DTLS.\nIn DTLS messages can be lost. Therefore we may be in a situation where a\nCertificateVerify message does not arrive even though one was sent. In that\ncase the next message the server will receive will be the CCS. This could\nalso happen if messages get re-ordered in-flight. In DTLS if\n|change_cipher_spec_ok| is not set and a CCS is received it is ignored.\nHowever if |change_cipher_spec_ok| *is* set then a CCS arrival will\nimmediately move the server into the next epoch. Any messages arriving for\nthe previous epoch will be ignored. This means that, in this scenario, the\nhandshake can never complete. The client will attempt to retransmit\nmissing messages, but the server will ignore them because they are the wrong\nepoch. The server meanwhile will still be waiting for the CertificateVerify\nwhich is never going to arrive.\n\nRT#2958\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_srvr.c||ssl/d1_srvr.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_srvr.c||ssl/d1_srvr.c": [
          "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:         case SSL3_ST_SR_CERT_VRFY_A:",
          "685:         case SSL3_ST_SR_CERT_VRFY_B:",
          "695:             ret = ssl3_get_cert_verify(s);",
          "696:             if (ret <= 0)",
          "697:                 goto end;",
          "",
          "[Removed Lines]",
          "692:             if (!s->s3->change_cipher_spec)",
          "693:                 s->d1->change_cipher_spec_ok = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "683:         case SSL3_ST_SR_CERT_VRFY_A:",
          "684:         case SSL3_ST_SR_CERT_VRFY_B:",
          "694:             ret = ssl3_get_cert_verify(s);",
          "695:             if (ret <= 0)",
          "696:                 goto end;",
          "",
          "[Removed Lines]",
          "691:             if (!s->s3->change_cipher_spec)",
          "692:                 s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2960:     EVP_MD_CTX mctx;",
          "2961:     EVP_MD_CTX_init(&mctx);",
          "2963:     n = s->method->ssl_get_message(s,",
          "2964:                                    SSL3_ST_SR_CERT_VRFY_A,",
          "2965:                                    SSL3_ST_SR_CERT_VRFY_B,",
          "2968:     if (!ok)",
          "2969:         return ((int)n);",
          "2997:     if (!(type & EVP_PKT_SIGN)) {",
          "2998:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY,",
          "",
          "[Removed Lines]",
          "2966:                                    -1, SSL3_RT_MAX_PLAIN_LENGTH, &ok);",
          "2971:     if (s->session->peer != NULL) {",
          "2972:         peer = s->session->peer;",
          "2973:         pkey = X509_get_pubkey(peer);",
          "2974:         type = X509_certificate_type(peer, pkey);",
          "2975:     } else {",
          "2976:         peer = NULL;",
          "2977:         pkey = NULL;",
          "2978:     }",
          "2980:     if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE_VERIFY) {",
          "2981:         s->s3->tmp.reuse_message = 1;",
          "2982:         if (peer != NULL) {",
          "2983:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "2984:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_MISSING_VERIFY_MESSAGE);",
          "2985:             goto f_err;",
          "2986:         }",
          "2987:         ret = 1;",
          "2988:         goto end;",
          "2989:     }",
          "2991:     if (peer == NULL) {",
          "2992:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_NO_CLIENT_CERT_RECEIVED);",
          "2993:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "2994:         goto f_err;",
          "2995:     }",
          "",
          "[Added Lines]",
          "2959:     if (s->session->peer == NULL) {",
          "2960:         ret = 1;",
          "2961:         goto end;",
          "2962:     }",
          "2967:                                    SSL3_MT_CERTIFICATE_VERIFY,",
          "2968:                                    SSL3_RT_MAX_PLAIN_LENGTH, &ok);",
          "2973:     peer = s->session->peer;",
          "2974:     pkey = X509_get_pubkey(peer);",
          "2975:     type = X509_certificate_type(peer, pkey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3001:         goto f_err;",
          "3002:     }",
          "3011:     p = (unsigned char *)s->init_msg;",
          "",
          "[Removed Lines]",
          "3004:     if (s->s3->change_cipher_spec) {",
          "3005:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_CCS_RECEIVED_EARLY);",
          "3006:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "3007:         goto f_err;",
          "3008:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e27f234a4147a7bd621d2a439c2cc2cc9a6a8382",
      "candidate_info": {
        "commit_hash": "e27f234a4147a7bd621d2a439c2cc2cc9a6a8382",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e27f234a4147a7bd621d2a439c2cc2cc9a6a8382",
        "files": [
          "include/openssl/ssl.h",
          "ssl/d1_srvr.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_err.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Split TLS server functions\n\nSplit the TLS server ssl3_get_* and ssl3_send_* functions into two ready\nfor the migration to the new state machine code.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/d1_srvr.c||ssl/d1_srvr.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2104: # define SSL_F_TLS1_SETUP_KEY_BLOCK                       211",
          "2105: # define SSL_F_TLS1_SET_SERVER_SIGALGS                    335",
          "2106: # define SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK          354",
          "2107: # define SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE           355",
          "2108: # define SSL_F_TLS_CONSTRUCT_CLIENT_HELLO                 356",
          "2109: # define SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE          357",
          "2110: # define SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY                358",
          "2111: # define SSL_F_TLS_CONSTRUCT_FINISHED                     359",
          "2112: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2113: # define SSL_F_TLS_GET_MESSAGE_HEADER                     350",
          "2114: # define SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE             360",
          "2115: # define SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST            361",
          "2116: # define SSL_F_TLS_PROCESS_CERT_STATUS                    362",
          "2117: # define SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC             363",
          "2118: # define SSL_F_TLS_PROCESS_FINISHED                       364",
          "2119: # define SSL_F_TLS_PROCESS_KEY_EXCHANGE                   365",
          "2120: # define SSL_F_TLS_PROCESS_NEW_SESSION_TICKET             366",
          "2121: # define SSL_F_TLS_PROCESS_SERVER_CERTIFICATE             367",
          "2122: # define SSL_F_TLS_PROCESS_SERVER_DONE                    368",
          "2123: # define SSL_F_TLS_PROCESS_SERVER_HELLO                   369",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2107: # define SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST          372",
          "2113: # define SSL_F_TLS_CONSTRUCT_HELLO_REQUEST                373",
          "2114: # define SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE           374",
          "2115: # define SSL_F_TLS_CONSTRUCT_SERVER_DONE                  375",
          "2116: # define SSL_F_TLS_CONSTRUCT_SERVER_HELLO                 376",
          "2117: # define SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE          377",
          "2120: # define SSL_F_TLS_POST_PROCESS_CLIENT_HELLO              378",
          "2124: # define SSL_F_TLS_PROCESS_CERT_VERIFY                    379",
          "2126: # define SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE             380",
          "2127: # define SSL_F_TLS_PROCESS_CLIENT_HELLO                   381",
          "2128: # define SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE            382",
          "2132: # define SSL_F_TLS_PROCESS_NEXT_PROTO                     383",
          "",
          "---------------"
        ],
        "ssl/d1_srvr.c||ssl/d1_srvr.c": [
          "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:                 goto end;",
          "318:             dtls1_stop_timer(s);",
          "321:                 s->state = DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A;",
          "322:             else",
          "323:                 s->state = SSL3_ST_SW_SRVR_HELLO_A;",
          "",
          "[Removed Lines]",
          "320:             if (ret == 1 && (SSL_get_options(s) & SSL_OP_COOKIE_EXCHANGE))",
          "",
          "[Added Lines]",
          "320:             if (!s->d1->cookie_verified",
          "321:                     && (SSL_get_options(s) & SSL_OP_COOKIE_EXCHANGE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "599:             s->state = SSL3_ST_SR_CERT_VRFY_A;",
          "600:             s->init_num = 0;",
          "",
          "[Removed Lines]",
          "602:             if (ret == 2) {",
          "",
          "[Added Lines]",
          "603:             if (s->no_cert_verify) {",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:             ret = ssl3_get_client_hello(s);",
          "351:             if (ret <= 0)",
          "352:                 goto end;",
          "353: #ifndef OPENSSL_NO_SRP",
          "355:         case SSL3_ST_SR_CLNT_HELLO_D:",
          "356:             {",
          "363:                     goto end;",
          "373:                     ret = -1;",
          "375:                     goto end;",
          "376:                 }",
          "377:             }",
          "381:             s->state = SSL3_ST_SW_SRVR_HELLO_A;",
          "382:             s->init_num = 0;",
          "383:             break;",
          "385:         case SSL3_ST_SW_SRVR_HELLO_A:",
          "386:         case SSL3_ST_SW_SRVR_HELLO_B:",
          "",
          "[Removed Lines]",
          "354:             s->state = SSL3_ST_SR_CLNT_HELLO_D;",
          "357:                 int al;",
          "358:                 if ((ret = ssl_check_srp_ext_ClientHello(s, &al)) < 0) {",
          "362:                     s->rwstate = SSL_X509_LOOKUP;",
          "364:                 }",
          "365:                 if (ret != SSL_ERROR_NONE) {",
          "366:                     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "371:                     if (al != TLS1_AD_UNKNOWN_PSK_IDENTITY)",
          "372:                         SSLerr(SSL_F_SSL3_ACCEPT, SSL_R_CLIENTHELLO_TLSEXT);",
          "374:                     s->state = SSL_ST_ERR;",
          "378: #endif",
          "380:             s->renegotiate = 2;",
          "",
          "[Added Lines]",
          "353:             s->state = SSL3_ST_SW_SRVR_HELLO_A;",
          "354:             s->init_num = 0;",
          "355:             break;",
          "360:                 enum WORK_STATE wst_ret;",
          "362:                 wst_ret = tls_post_process_client_hello(s, WORK_MORE_B);",
          "363:                 if (wst_ret == WORK_MORE_B)",
          "365:                 if (wst_ret == WORK_ERROR) {",
          "374: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569:             ret = ssl3_get_client_key_exchange(s);",
          "570:             if (ret <= 0)",
          "571:                 goto end;",
          "",
          "[Removed Lines]",
          "572:             if (ret == 2) {",
          "",
          "[Added Lines]",
          "563:             if (s->no_cert_verify) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "825: {",
          "827:     if (s->state == SSL3_ST_SW_HELLO_REQ_A) {",
          "830:             return -1;",
          "831:         }",
          "832:         s->state = SSL3_ST_SW_HELLO_REQ_B;",
          "",
          "[Removed Lines]",
          "828:         if (!ssl_set_handshake_header(s, SSL3_MT_HELLO_REQUEST, 0)) {",
          "829:             SSLerr(SSL_F_SSL3_SEND_HELLO_REQUEST, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "819:         if (tls_construct_hello_request(s) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "836:     return ssl_do_write(s);",
          "837: }",
          "839: int ssl3_get_client_hello(SSL *s)",
          "840: {",
          "843:     long n;",
          "855:     if (s->state == SSL3_ST_SR_CLNT_HELLO_C && !s->first_packet)",
          "856:         goto retry_cert;",
          "",
          "[Removed Lines]",
          "841:     int i, ok, al = SSL_AD_INTERNAL_ERROR, ret = -1;",
          "842:     unsigned int j, complen = 0;",
          "844:     unsigned long id;",
          "845:     SSL_CIPHER *c;",
          "846: #ifndef OPENSSL_NO_COMP",
          "847:     SSL_COMP *comp = NULL;",
          "848: #endif",
          "849:     STACK_OF(SSL_CIPHER) *ciphers = NULL;",
          "850:     int protverr = 1;",
          "852:     PACKET pkt, session_id, cipher_suites, compression, extensions, cookie;",
          "853:     int is_v2_record;",
          "",
          "[Added Lines]",
          "829: int tls_construct_hello_request(SSL *s)",
          "830: {",
          "831:     if (!ssl_set_handshake_header(s, SSL3_MT_HELLO_REQUEST, 0)) {",
          "832:         SSLerr(SSL_F_TLS_CONSTRUCT_HELLO_REQUEST, ERR_R_INTERNAL_ERROR);",
          "833:         statem_set_error(s);",
          "834:         return 0;",
          "835:     }",
          "837:     return 1;",
          "838: }",
          "842:     int ok;",
          "844:     enum WORK_STATE wst_ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "874:     if (!ok)",
          "875:         return ((int)n);",
          "876:     s->first_packet = 0;",
          "877:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "879:         al = SSL_AD_INTERNAL_ERROR;",
          "880:         goto f_err;",
          "881:     }",
          "",
          "[Removed Lines]",
          "878:         SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "869:     if (tls_process_client_hello(s, n) == 0)",
          "870:         return -1;",
          "872:  retry_cert:",
          "873:     wst_ret = tls_post_process_client_hello(s, WORK_MORE_A);",
          "874:     if (wst_ret == WORK_MORE_A || wst_ret == WORK_ERROR)",
          "875:         return -1;",
          "876:     if (wst_ret == WORK_MORE_B) {",
          "877:         s->state = SSL3_ST_SR_CLNT_HELLO_D;",
          "878:         return -1;",
          "879:     }",
          "880:     return n;",
          "881: }",
          "883: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n)",
          "884: {",
          "885:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "886:     unsigned int j, complen = 0;",
          "887:     unsigned long id;",
          "888:     SSL_CIPHER *c;",
          "889: #ifndef OPENSSL_NO_COMP",
          "890:     SSL_COMP *comp = NULL;",
          "891: #endif",
          "892:     STACK_OF(SSL_CIPHER) *ciphers = NULL;",
          "893:     int protverr = 1;",
          "895:     PACKET pkt, session_id, cipher_suites, compression, extensions, cookie;",
          "896:     int is_v2_record;",
          "899:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "913:             goto err;",
          "914:         }",
          "916:         if (!PACKET_get_net_2(&pkt, &version)) {",
          "919:             goto err;",
          "920:         }",
          "921:         if (version == 0x0002) {",
          "924:             goto err;",
          "925:         } else if ((version & 0xff00) == (SSL3_VERSION_MAJOR << 8)) {",
          "927:             s->client_version = version;",
          "928:         } else {",
          "931:             goto err;",
          "932:         }",
          "933:     } else {",
          "",
          "[Removed Lines]",
          "912:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "918:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "923:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "930:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "",
          "[Added Lines]",
          "933:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "939:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "944:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "951:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "938:         if(!PACKET_get_net_2(&pkt, (unsigned int *)&s->client_version)) {",
          "939:             al = SSL_AD_DECODE_ERROR;",
          "941:             goto f_err;",
          "942:         }",
          "943:     }",
          "",
          "[Removed Lines]",
          "940:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);",
          "",
          "[Added Lines]",
          "961:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "998:     }",
          "1000:     if (protverr) {",
          "1002:         if ((!s->enc_write_ctx && !s->write_hash)) {",
          "",
          "[Removed Lines]",
          "1001:         SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "",
          "[Added Lines]",
          "1022:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1023:         if (!PACKET_get_net_2(&pkt, &cipher_len)",
          "1024:                 || !PACKET_get_net_2(&pkt, &session_id_len)",
          "1025:                 || !PACKET_get_net_2(&pkt, &challenge_len)) {",
          "1027:             al = SSL_AD_DECODE_ERROR;",
          "1028:             goto f_err;",
          "1029:         }",
          "",
          "[Removed Lines]",
          "1026:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_RECORD_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "1047:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "1048:                    SSL_R_RECORD_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1153:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_COOKIE_MISMATCH);",
          "1154:                 goto f_err;",
          "1155:             }",
          "1158:         }",
          "1159:         if (s->method->version == DTLS_ANY_VERSION) {",
          "",
          "[Removed Lines]",
          "1157:             ret = -2;",
          "",
          "[Added Lines]",
          "1178:             s->d1->cookie_verified = 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1278:                                                                (s));",
          "1279:             if (pref_cipher == NULL) {",
          "1280:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1282:                 goto f_err;",
          "1283:             }",
          "",
          "[Removed Lines]",
          "1281:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_NO_SHARED_CIPHER);",
          "",
          "[Added Lines]",
          "1302:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_NO_SHARED_CIPHER);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1306:         if (!ssl_allow_compression(s)) {",
          "1308:                    SSL_R_INCONSISTENT_COMPRESSION);",
          "1309:             goto f_err;",
          "1310:         }",
          "",
          "[Removed Lines]",
          "1307:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "1328:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1317:             }",
          "1318:         }",
          "1319:         if (s->s3->tmp.new_compression == NULL) {",
          "1321:                    SSL_R_INVALID_COMPRESSION_ALGORITHM);",
          "1322:             goto f_err;",
          "1323:         }",
          "",
          "[Removed Lines]",
          "1320:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "1341:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1328:         }",
          "1329:         if (k >= complen) {",
          "1330:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "1332:                    SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING);",
          "1333:             goto f_err;",
          "1334:         }",
          "",
          "[Removed Lines]",
          "1331:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "1352:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1365:     if (s->session->compress_meth != 0) {",
          "1367:         goto f_err;",
          "1368:     }",
          "1369: #endif",
          "",
          "[Removed Lines]",
          "1366:         SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_INCONSISTENT_COMPRESSION);",
          "",
          "[Added Lines]",
          "1387:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_INCONSISTENT_COMPRESSION);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1382:         s->session->ciphers = ciphers;",
          "1383:         if (ciphers == NULL) {",
          "1384:             al = SSL_AD_INTERNAL_ERROR;",
          "1386:             goto f_err;",
          "1387:         }",
          "1388:         ciphers = NULL;",
          "1389:         if (!tls1_set_server_sigalgs(s)) {",
          "1391:             goto err;",
          "1392:         }",
          "1401:             }",
          "1405:             }",
          "1407:         }",
          "1414:         }",
          "1451:         }",
          "1452:     }",
          "1457:  f_err:",
          "1461:     }",
          "1465: }",
          "1468: {",
          "1469:     unsigned char *buf;",
          "1470:     unsigned char *p, *d;",
          "",
          "[Removed Lines]",
          "1385:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "1390:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1394:  retry_cert:",
          "1395:         if (s->cert->cert_cb) {",
          "1396:             int rv = s->cert->cert_cb(s, s->cert->cert_cb_arg);",
          "1397:             if (rv == 0) {",
          "1398:                 al = SSL_AD_INTERNAL_ERROR;",
          "1399:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_CERT_CB_ERROR);",
          "1400:                 goto f_err;",
          "1402:             if (rv < 0) {",
          "1403:                 s->rwstate = SSL_X509_LOOKUP;",
          "1404:                 return -1;",
          "1406:             s->rwstate = SSL_NOTHING;",
          "1408:         c = ssl3_choose_cipher(s, s->session->ciphers, SSL_get_ciphers(s));",
          "1410:         if (c == NULL) {",
          "1411:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1412:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_NO_SHARED_CIPHER);",
          "1413:             goto f_err;",
          "1415:         s->s3->tmp.new_cipher = c;",
          "1417:         if (s->not_resumable_session_cb != NULL)",
          "1418:             s->session->not_resumable = s->not_resumable_session_cb(s,",
          "1419:                                                                     ((c->algorithm_mkey & (SSL_kDHE | SSL_kECDHE))",
          "1420:                                                                      != 0));",
          "1421:         if (s->session->not_resumable)",
          "1423:             s->tlsext_ticket_expected = 0;",
          "1424:     } else {",
          "1426:         s->s3->tmp.new_cipher = s->session->cipher;",
          "1427:     }",
          "1429:     if (!SSL_USE_SIGALGS(s) || !(s->verify_mode & SSL_VERIFY_PEER)) {",
          "1430:         if (!ssl3_digest_cached_records(s, 0))",
          "1431:             goto f_err;",
          "1432:     }",
          "1447:     if (s->version >= SSL3_VERSION) {",
          "1448:         if (ssl_check_clienthello_tlsext_late(s) <= 0) {",
          "1449:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1450:             goto err;",
          "1454:     if (ret < 0)",
          "1455:         ret = -ret;",
          "1456:     if (0) {",
          "1458:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1459:  err:",
          "1460:         s->state = SSL_ST_ERR;",
          "1463:     sk_SSL_CIPHER_free(ciphers);",
          "1464:     return ret < 0 ? -1 : ret;",
          "1467: int ssl3_send_server_hello(SSL *s)",
          "",
          "[Added Lines]",
          "1406:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "1411:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1414:     }",
          "1416:     sk_SSL_CIPHER_free(ciphers);",
          "1417:     return MSG_PROCESS_CONTINUE_PROCESSING;",
          "1418:  f_err:",
          "1419:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1420:  err:",
          "1421:     statem_set_error(s);",
          "1423:     sk_SSL_CIPHER_free(ciphers);",
          "1424:     return MSG_PROCESS_ERROR;",
          "1426: }",
          "1428: enum WORK_STATE tls_post_process_client_hello(SSL *s, enum WORK_STATE wst)",
          "1429: {",
          "1430:     int al;",
          "1431:     SSL_CIPHER *cipher;",
          "1433:     if (wst == WORK_MORE_A) {",
          "1434:         if (!s->hit) {",
          "1436:             if (s->cert->cert_cb) {",
          "1437:                 int rv = s->cert->cert_cb(s, s->cert->cert_cb_arg);",
          "1438:                 if (rv == 0) {",
          "1439:                     al = SSL_AD_INTERNAL_ERROR;",
          "1440:                     SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO, SSL_R_CERT_CB_ERROR);",
          "1441:                     goto f_err;",
          "1442:                 }",
          "1443:                 if (rv < 0) {",
          "1444:                     s->rwstate = SSL_X509_LOOKUP;",
          "1445:                     return WORK_MORE_A;",
          "1446:                 }",
          "1447:                 s->rwstate = SSL_NOTHING;",
          "1449:             cipher = ssl3_choose_cipher(s, s->session->ciphers, SSL_get_ciphers(s));",
          "1451:             if (cipher == NULL) {",
          "1452:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1453:                 SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO, SSL_R_NO_SHARED_CIPHER);",
          "1454:                 goto f_err;",
          "1456:             s->s3->tmp.new_cipher = cipher;",
          "1458:             if (s->not_resumable_session_cb != NULL)",
          "1459:                 s->session->not_resumable = s->not_resumable_session_cb(s,",
          "1460:                     ((cipher->algorithm_mkey & (SSL_kDHE | SSL_kECDHE)) != 0));",
          "1461:             if (s->session->not_resumable)",
          "1463:                 s->tlsext_ticket_expected = 0;",
          "1464:         } else {",
          "1466:             s->s3->tmp.new_cipher = s->session->cipher;",
          "1469:         if (!SSL_USE_SIGALGS(s) || !(s->verify_mode & SSL_VERIFY_PEER)) {",
          "1470:             if (!ssl3_digest_cached_records(s, 0))",
          "1471:                 goto f_err;",
          "1487:         if (s->version >= SSL3_VERSION) {",
          "1488:             if (ssl_check_clienthello_tlsext_late(s) <= 0) {",
          "1489:                 SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1490:                 goto f_err;",
          "1491:             }",
          "1492:         }",
          "1494:         wst = WORK_MORE_B;",
          "1495:     }",
          "1496: #ifndef OPENSSL_NO_SRP",
          "1497:     if (wst == WORK_MORE_B) {",
          "1498:         int ret;",
          "1499:         if ((ret = ssl_check_srp_ext_ClientHello(s, &al)) < 0) {",
          "1503:             s->rwstate = SSL_X509_LOOKUP;",
          "1504:             return WORK_MORE_B;",
          "1505:         }",
          "1506:         if (ret != SSL_ERROR_NONE) {",
          "1511:             if (al != TLS1_AD_UNKNOWN_PSK_IDENTITY)",
          "1512:                 SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO,",
          "1513:                            SSL_R_CLIENTHELLO_TLSEXT);",
          "1514:             goto f_err;",
          "1517: #endif",
          "1518:     s->renegotiate = 2;",
          "1520:     return WORK_FINISHED_STOP;",
          "1522:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1523:     statem_set_error(s);",
          "1524:     return WORK_ERROR;",
          "1525: }",
          "1527: int ssl3_send_server_hello(SSL *s)",
          "1528: {",
          "1529:     if (s->state == SSL3_ST_SW_SRVR_HELLO_A) {",
          "1530:         if (tls_construct_server_hello(s) != 1)",
          "1531:             return -1;",
          "1532:         s->state = SSL3_ST_SW_SRVR_HELLO_B;",
          "1536:     return ssl_do_write(s);",
          "1539: int tls_construct_server_hello(SSL *s)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1472:     int al = 0;",
          "1473:     unsigned long l;",
          "1527: #ifdef OPENSSL_NO_COMP",
          "1529: #else",
          "1534: #endif",
          "1557:     }",
          "1561: }",
          "1563: int ssl3_send_server_done(SSL *s)",
          "1564: {",
          "1566:     if (s->state == SSL3_ST_SW_SRVR_DONE_A) {",
          "1569:             return -1;",
          "1571:         s->state = SSL3_ST_SW_SRVR_DONE_B;",
          "1572:     }",
          "",
          "[Removed Lines]",
          "1475:     if (s->state == SSL3_ST_SW_SRVR_HELLO_A) {",
          "1476:         buf = (unsigned char *)s->init_buf->data;",
          "1479:         d = p = ssl_handshake_start(s);",
          "1488:         memcpy(p, s->s3->server_random, SSL3_RANDOM_SIZE);",
          "1489:         p += SSL3_RANDOM_SIZE;",
          "1507:         if (s->session->not_resumable ||",
          "1508:             (!(s->ctx->session_cache_mode & SSL_SESS_CACHE_SERVER)",
          "1509:              && !s->hit))",
          "1510:             s->session->session_id_length = 0;",
          "1512:         sl = s->session->session_id_length;",
          "1513:         if (sl > (int)sizeof(s->session->session_id)) {",
          "1514:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1515:             s->state = SSL_ST_ERR;",
          "1516:             return -1;",
          "1517:         }",
          "1519:         memcpy(p, s->session->session_id, sl);",
          "1520:         p += sl;",
          "1523:         i = ssl3_put_cipher_by_char(s->s3->tmp.new_cipher, p);",
          "1524:         p += i;",
          "1530:         if (s->s3->tmp.new_compression == NULL)",
          "1532:         else",
          "1536:         if (ssl_prepare_serverhello_tlsext(s) <= 0) {",
          "1537:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, SSL_R_SERVERHELLO_TLSEXT);",
          "1538:             s->state = SSL_ST_ERR;",
          "1539:             return -1;",
          "1540:         }",
          "1541:         if ((p =",
          "1542:              ssl_add_serverhello_tlsext(s, p, buf + SSL3_RT_MAX_PLAIN_LENGTH,",
          "1543:                                         &al)) == NULL) {",
          "1544:             ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1545:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1546:             s->state = SSL_ST_ERR;",
          "1547:             return -1;",
          "1548:         }",
          "1551:         l = (p - d);",
          "1552:         if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_HELLO, l)) {",
          "1553:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1554:             return -1;",
          "1555:         }",
          "1556:         s->state = SSL3_ST_SW_SRVR_HELLO_B;",
          "1560:     return ssl_do_write(s);",
          "1567:         if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_DONE, 0)) {",
          "1568:             SSLerr(SSL_F_SSL3_SEND_SERVER_DONE, ERR_R_INTERNAL_ERROR);",
          "1570:         }",
          "",
          "[Added Lines]",
          "1547:     buf = (unsigned char *)s->init_buf->data;",
          "1550:     d = p = ssl_handshake_start(s);",
          "1559:     memcpy(p, s->s3->server_random, SSL3_RANDOM_SIZE);",
          "1560:     p += SSL3_RANDOM_SIZE;",
          "1578:     if (s->session->not_resumable ||",
          "1579:         (!(s->ctx->session_cache_mode & SSL_SESS_CACHE_SERVER)",
          "1580:          && !s->hit))",
          "1581:         s->session->session_id_length = 0;",
          "1583:     sl = s->session->session_id_length;",
          "1584:     if (sl > (int)sizeof(s->session->session_id)) {",
          "1585:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1586:         statem_set_error(s);",
          "1587:         return 0;",
          "1588:     }",
          "1590:     memcpy(p, s->session->session_id, sl);",
          "1591:     p += sl;",
          "1594:     i = ssl3_put_cipher_by_char(s->s3->tmp.new_cipher, p);",
          "1595:     p += i;",
          "1601:     if (s->s3->tmp.new_compression == NULL)",
          "1603:     else",
          "1607:     if (ssl_prepare_serverhello_tlsext(s) <= 0) {",
          "1608:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, SSL_R_SERVERHELLO_TLSEXT);",
          "1609:         statem_set_error(s);",
          "1610:         return 0;",
          "1611:     }",
          "1612:     if ((p =",
          "1613:          ssl_add_serverhello_tlsext(s, p, buf + SSL3_RT_MAX_PLAIN_LENGTH,",
          "1614:                                     &al)) == NULL) {",
          "1615:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1616:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1617:         statem_set_error(s);",
          "1618:         return 0;",
          "1619:     }",
          "1622:     l = (p - d);",
          "1623:     if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_HELLO, l)) {",
          "1624:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1625:         statem_set_error(s);",
          "1626:         return 0;",
          "1629:     return 1;",
          "1636:         if (tls_construct_server_done(s) == 0)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1575:     return ssl_do_write(s);",
          "1576: }",
          "1578: int ssl3_send_server_key_exchange(SSL *s)",
          "1579: {",
          "1580: #ifndef OPENSSL_NO_RSA",
          "1581:     unsigned char *q;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1645: int tls_construct_server_done(SSL *s)",
          "1646: {",
          "1647:     if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_DONE, 0)) {",
          "1648:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_DONE, ERR_R_INTERNAL_ERROR);",
          "1649:         statem_set_error(s);",
          "1650:         return 0;",
          "1651:     }",
          "1653:     if (!s->s3->tmp.cert_request) {",
          "1654:         if (!ssl3_digest_cached_records(s, 0)) {",
          "1655:             statem_set_error(s);",
          "1656:         }",
          "1657:     }",
          "1659:     return 1;",
          "1660: }",
          "1663: {",
          "1664:     if (s->state == SSL3_ST_SW_KEY_EXCH_A) {",
          "1665:         if (tls_construct_server_key_exchange(s) == 0)",
          "1666:             return -1;",
          "1667:     }",
          "1669:     s->state = SSL3_ST_SW_KEY_EXCH_B;",
          "1670:     return ssl_do_write(s);",
          "1671: }",
          "1673: int tls_construct_server_key_exchange(SSL *s)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1607:     EVP_MD_CTX md_ctx;",
          "1609:     EVP_MD_CTX_init(&md_ctx);",
          "1618: #ifndef OPENSSL_NO_PSK",
          "1631: #ifndef OPENSSL_NO_RSA",
          "1649:             if (rsa == NULL) {",
          "1650:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1653:                 goto f_err;",
          "1654:             }",
          "1659: #endif",
          "1660: #ifndef OPENSSL_NO_DH",
          "1678:             if (dhp == NULL) {",
          "1693:                        ERR_R_INTERNAL_ERROR);",
          "1695:             }",
          "1701:                 goto err;",
          "1702:             }",
          "1719:             }",
          "1724: #endif",
          "1725: #ifndef OPENSSL_NO_EC",
          "1758:                 goto err;",
          "1759:             }",
          "1854: #ifndef OPENSSL_NO_SRP",
          "1874:         }",
          "1877: #ifndef OPENSSL_NO_SRP",
          "1881: #endif",
          "1896:         }",
          "1904: #ifndef OPENSSL_NO_PSK",
          "1915:         }",
          "1916: #endif",
          "1919: #ifndef OPENSSL_NO_SRP",
          "1924: #endif",
          "1930: #ifndef OPENSSL_NO_EC",
          "1951: #endif",
          "1959: #ifndef OPENSSL_NO_RSA",
          "1985: #endif",
          "1997:                 }",
          "1998: #ifdef SSL_DEBUG",
          "2000: #endif",
          "2022:             }",
          "2026:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "2028:             goto f_err;",
          "2029:         }",
          "2030:     }",
          "2033:     EVP_MD_CTX_cleanup(&md_ctx);",
          "2035:  f_err:",
          "2036:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2037:  err:",
          "",
          "[Removed Lines]",
          "1610:     if (s->state == SSL3_ST_SW_KEY_EXCH_A) {",
          "1611:         type = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1612:         cert = s->cert;",
          "1614:         buf = s->init_buf;",
          "1616:         r[0] = r[1] = r[2] = r[3] = NULL;",
          "1617:         n = 0;",
          "1619:         if (type & SSL_PSK) {",
          "1623:             n += 2;",
          "1624:             if (s->cert->psk_identity_hint)",
          "1625:                 n += strlen(s->cert->psk_identity_hint);",
          "1626:         }",
          "1628:         if (type & (SSL_kPSK | SSL_kRSAPSK)) {",
          "1629:         } else",
          "1632:         if (type & SSL_kRSA) {",
          "1633:             rsa = cert->rsa_tmp;",
          "1634:             if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL)) {",
          "1635:                 rsa = s->cert->rsa_tmp_cb(s,",
          "1636:                                           SSL_C_IS_EXPORT(s->s3->",
          "1637:                                                           tmp.new_cipher),",
          "1638:                                           SSL_C_EXPORT_PKEYLENGTH(s->s3->",
          "1639:                                                                   tmp.new_cipher));",
          "1640:                 if (rsa == NULL) {",
          "1641:                     al = SSL_AD_HANDSHAKE_FAILURE;",
          "1642:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1643:                            SSL_R_ERROR_GENERATING_TMP_RSA_KEY);",
          "1644:                     goto f_err;",
          "1645:                 }",
          "1646:                 RSA_up_ref(rsa);",
          "1647:                 cert->rsa_tmp = rsa;",
          "1648:             }",
          "1651:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1652:                        SSL_R_MISSING_TMP_RSA_KEY);",
          "1655:             r[0] = rsa->n;",
          "1656:             r[1] = rsa->e;",
          "1657:             s->s3->tmp.use_rsa_tmp = 1;",
          "1658:         } else",
          "1661:         if (type & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1662:             if (s->cert->dh_tmp_auto) {",
          "1663:                 dhp = ssl_get_auto_dh(s);",
          "1664:                 if (dhp == NULL) {",
          "1665:                     al = SSL_AD_INTERNAL_ERROR;",
          "1666:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1667:                            ERR_R_INTERNAL_ERROR);",
          "1668:                     goto f_err;",
          "1669:                 }",
          "1670:             } else",
          "1671:                 dhp = cert->dh_tmp;",
          "1672:             if ((dhp == NULL) && (s->cert->dh_tmp_cb != NULL))",
          "1673:                 dhp = s->cert->dh_tmp_cb(s,",
          "1674:                                          SSL_C_IS_EXPORT(s->s3->",
          "1675:                                                          tmp.new_cipher),",
          "1676:                                          SSL_C_EXPORT_PKEYLENGTH(s->s3->",
          "1677:                                                                  tmp.new_cipher));",
          "1679:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1680:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1681:                        SSL_R_MISSING_TMP_DH_KEY);",
          "1682:                 goto f_err;",
          "1683:             }",
          "1684:             if (!ssl_security(s, SSL_SECOP_TMP_DH,",
          "1685:                               DH_security_bits(dhp), 0, dhp)) {",
          "1686:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1687:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1688:                        SSL_R_DH_KEY_TOO_SMALL);",
          "1689:                 goto f_err;",
          "1690:             }",
          "1691:             if (s->s3->tmp.dh != NULL) {",
          "1692:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1694:                 goto err;",
          "1697:             if (s->cert->dh_tmp_auto)",
          "1698:                 dh = dhp;",
          "1699:             else if ((dh = DHparams_dup(dhp)) == NULL) {",
          "1700:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1704:             s->s3->tmp.dh = dh;",
          "1705:             if ((dhp->pub_key == NULL ||",
          "1706:                  dhp->priv_key == NULL ||",
          "1707:                  (s->options & SSL_OP_SINGLE_DH_USE))) {",
          "1708:                 if (!DH_generate_key(dh)) {",
          "1709:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1710:                     goto err;",
          "1711:                 }",
          "1712:             } else {",
          "1713:                 dh->pub_key = BN_dup(dhp->pub_key);",
          "1714:                 dh->priv_key = BN_dup(dhp->priv_key);",
          "1715:                 if ((dh->pub_key == NULL) || (dh->priv_key == NULL)) {",
          "1716:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1717:                     goto err;",
          "1718:                 }",
          "1720:             r[0] = dh->p;",
          "1721:             r[1] = dh->g;",
          "1722:             r[2] = dh->pub_key;",
          "1723:         } else",
          "1726:         if (type & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "1727:             const EC_GROUP *group;",
          "1729:             ecdhp = cert->ecdh_tmp;",
          "1730:             if (s->cert->ecdh_tmp_auto) {",
          "1732:                 int nid = tls1_shared_curve(s, -2);",
          "1733:                 if (nid != NID_undef)",
          "1734:                     ecdhp = EC_KEY_new_by_curve_name(nid);",
          "1735:             } else if ((ecdhp == NULL) && s->cert->ecdh_tmp_cb) {",
          "1736:                 ecdhp = s->cert->ecdh_tmp_cb(s,",
          "1737:                                              SSL_C_IS_EXPORT(s->s3->",
          "1738:                                                              tmp.new_cipher),",
          "1739:                                              SSL_C_EXPORT_PKEYLENGTH(s->",
          "1740:                                                                      s3->tmp.new_cipher));",
          "1741:             }",
          "1742:             if (ecdhp == NULL) {",
          "1743:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1744:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1745:                        SSL_R_MISSING_TMP_ECDH_KEY);",
          "1746:                 goto f_err;",
          "1747:             }",
          "1749:             if (s->s3->tmp.ecdh != NULL) {",
          "1750:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1751:                        ERR_R_INTERNAL_ERROR);",
          "1752:                 goto err;",
          "1753:             }",
          "1756:             if (ecdhp == NULL) {",
          "1757:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1760:             if (s->cert->ecdh_tmp_auto)",
          "1761:                 ecdh = ecdhp;",
          "1762:             else if ((ecdh = EC_KEY_dup(ecdhp)) == NULL) {",
          "1763:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1764:                 goto err;",
          "1765:             }",
          "1767:             s->s3->tmp.ecdh = ecdh;",
          "1768:             if ((EC_KEY_get0_public_key(ecdh) == NULL) ||",
          "1769:                 (EC_KEY_get0_private_key(ecdh) == NULL) ||",
          "1770:                 (s->options & SSL_OP_SINGLE_ECDH_USE)) {",
          "1771:                 if (!EC_KEY_generate_key(ecdh)) {",
          "1772:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1773:                            ERR_R_ECDH_LIB);",
          "1774:                     goto err;",
          "1775:                 }",
          "1776:             }",
          "1778:             if (((group = EC_KEY_get0_group(ecdh)) == NULL) ||",
          "1779:                 (EC_KEY_get0_public_key(ecdh) == NULL) ||",
          "1780:                 (EC_KEY_get0_private_key(ecdh) == NULL)) {",
          "1781:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1782:                 goto err;",
          "1783:             }",
          "1785:             if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&",
          "1786:                 (EC_GROUP_get_degree(group) > 163)) {",
          "1787:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1788:                        SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER);",
          "1789:                 goto err;",
          "1790:             }",
          "1797:             if ((curve_id =",
          "1798:                  tls1_ec_nid2curve_id(EC_GROUP_get_curve_name(group)))",
          "1799:                 == 0) {",
          "1800:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1801:                        SSL_R_UNSUPPORTED_ELLIPTIC_CURVE);",
          "1802:                 goto err;",
          "1803:             }",
          "1809:             encodedlen = EC_POINT_point2oct(group,",
          "1810:                                             EC_KEY_get0_public_key(ecdh),",
          "1811:                                             POINT_CONVERSION_UNCOMPRESSED,",
          "1812:                                             NULL, 0, NULL);",
          "1814:             encodedPoint = (unsigned char *)",
          "1815:                 OPENSSL_malloc(encodedlen * sizeof(unsigned char));",
          "1816:             bn_ctx = BN_CTX_new();",
          "1817:             if ((encodedPoint == NULL) || (bn_ctx == NULL)) {",
          "1818:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1819:                        ERR_R_MALLOC_FAILURE);",
          "1820:                 goto err;",
          "1821:             }",
          "1823:             encodedlen = EC_POINT_point2oct(group,",
          "1824:                                             EC_KEY_get0_public_key(ecdh),",
          "1825:                                             POINT_CONVERSION_UNCOMPRESSED,",
          "1826:                                             encodedPoint, encodedlen, bn_ctx);",
          "1828:             if (encodedlen == 0) {",
          "1829:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1830:                 goto err;",
          "1831:             }",
          "1833:             BN_CTX_free(bn_ctx);",
          "1834:             bn_ctx = NULL;",
          "1842:             n += 4 + encodedlen;",
          "1848:             r[0] = NULL;",
          "1849:             r[1] = NULL;",
          "1850:             r[2] = NULL;",
          "1851:             r[3] = NULL;",
          "1852:         } else",
          "1855:         if (type & SSL_kSRP) {",
          "1856:             if ((s->srp_ctx.N == NULL) ||",
          "1857:                 (s->srp_ctx.g == NULL) ||",
          "1858:                 (s->srp_ctx.s == NULL) || (s->srp_ctx.B == NULL)) {",
          "1859:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1860:                        SSL_R_MISSING_SRP_PARAM);",
          "1861:                 goto err;",
          "1862:             }",
          "1863:             r[0] = s->srp_ctx.N;",
          "1864:             r[1] = s->srp_ctx.g;",
          "1865:             r[2] = s->srp_ctx.s;",
          "1866:             r[3] = s->srp_ctx.B;",
          "1867:         } else",
          "1868: #endif",
          "1869:         {",
          "1870:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1871:             SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1872:                    SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE);",
          "1873:             goto f_err;",
          "1875:         for (i = 0; i < 4 && r[i] != NULL; i++) {",
          "1876:             nr[i] = BN_num_bytes(r[i]);",
          "1878:             if ((i == 2) && (type & SSL_kSRP))",
          "1879:                 n += 1 + nr[i];",
          "1880:             else",
          "1882:                 n += 2 + nr[i];",
          "1883:         }",
          "1885:         if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP))",
          "1886:             && !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_PSK)) {",
          "1887:             if ((pkey = ssl_get_sign_pkey(s, s->s3->tmp.new_cipher, &md))",
          "1888:                 == NULL) {",
          "1889:                 al = SSL_AD_DECODE_ERROR;",
          "1890:                 goto f_err;",
          "1891:             }",
          "1892:             kn = EVP_PKEY_size(pkey);",
          "1893:         } else {",
          "1894:             pkey = NULL;",
          "1895:             kn = 0;",
          "1898:         if (!BUF_MEM_grow_clean(buf, n + SSL_HM_HEADER_LENGTH(s) + kn)) {",
          "1899:             SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_LIB_BUF);",
          "1900:             goto err;",
          "1901:         }",
          "1902:         d = p = ssl_handshake_start(s);",
          "1905:         if (type & SSL_PSK) {",
          "1907:             if (s->cert->psk_identity_hint) {",
          "1908:                 s2n(strlen(s->cert->psk_identity_hint), p);",
          "1909:                 strncpy((char *)p, s->cert->psk_identity_hint,",
          "1910:                         strlen(s->cert->psk_identity_hint));",
          "1911:                 p += strlen(s->cert->psk_identity_hint);",
          "1912:             } else {",
          "1913:                 s2n(0, p);",
          "1914:             }",
          "1918:         for (i = 0; i < 4 && r[i] != NULL; i++) {",
          "1920:             if ((i == 2) && (type & SSL_kSRP)) {",
          "1922:                 p++;",
          "1923:             } else",
          "1925:                 s2n(nr[i], p);",
          "1926:             BN_bn2bin(r[i], p);",
          "1927:             p += nr[i];",
          "1928:         }",
          "1931:         if (type & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "1939:             p += 1;",
          "1941:             p += 1;",
          "1943:             p += 1;",
          "1945:             p += 1;",
          "1946:             memcpy(p, encodedPoint, encodedlen);",
          "1947:             OPENSSL_free(encodedPoint);",
          "1948:             encodedPoint = NULL;",
          "1949:             p += encodedlen;",
          "1950:         }",
          "1954:         if (pkey != NULL) {",
          "1960:             if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "1961:                 q = md_buf;",
          "1962:                 j = 0;",
          "1963:                 for (num = 2; num > 0; num--) {",
          "1964:                     EVP_MD_CTX_set_flags(&md_ctx,",
          "1965:                                          EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);",
          "1966:                     EVP_DigestInit_ex(&md_ctx, (num == 2)",
          "1967:                                       ? s->ctx->md5 : s->ctx->sha1, NULL);",
          "1968:                     EVP_DigestUpdate(&md_ctx, &(s->s3->client_random[0]),",
          "1969:                                      SSL3_RANDOM_SIZE);",
          "1970:                     EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1971:                                      SSL3_RANDOM_SIZE);",
          "1972:                     EVP_DigestUpdate(&md_ctx, d, n);",
          "1973:                     EVP_DigestFinal_ex(&md_ctx, q, (unsigned int *)&i);",
          "1974:                     q += i;",
          "1975:                     j += i;",
          "1976:                 }",
          "1977:                 if (RSA_sign(NID_md5_sha1, md_buf, j,",
          "1978:                              &(p[2]), &u, pkey->pkey.rsa) <= 0) {",
          "1979:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_LIB_RSA);",
          "1980:                     goto err;",
          "1981:                 }",
          "1982:                 s2n(u, p);",
          "1983:                 n += u + 2;",
          "1984:             } else",
          "1986:             if (md) {",
          "1988:                 if (SSL_USE_SIGALGS(s)) {",
          "1989:                     if (!tls12_get_sigandhash(p, pkey, md)) {",
          "1991:                         al = SSL_AD_INTERNAL_ERROR;",
          "1992:                         SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "1993:                                ERR_R_INTERNAL_ERROR);",
          "1994:                         goto f_err;",
          "1995:                     }",
          "1996:                     p += 2;",
          "1999:                 fprintf(stderr, \"Using hash %s\\n\", EVP_MD_name(md));",
          "2001:                 EVP_SignInit_ex(&md_ctx, md, NULL);",
          "2002:                 EVP_SignUpdate(&md_ctx, &(s->s3->client_random[0]),",
          "2003:                                SSL3_RANDOM_SIZE);",
          "2004:                 EVP_SignUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "2005:                                SSL3_RANDOM_SIZE);",
          "2006:                 EVP_SignUpdate(&md_ctx, d, n);",
          "2007:                 if (!EVP_SignFinal(&md_ctx, &(p[2]),",
          "2008:                                    (unsigned int *)&i, pkey)) {",
          "2009:                     SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_LIB_EVP);",
          "2010:                     goto err;",
          "2011:                 }",
          "2012:                 s2n(i, p);",
          "2013:                 n += i + 2;",
          "2014:                 if (SSL_USE_SIGALGS(s))",
          "2015:                     n += 2;",
          "2016:             } else {",
          "2018:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2019:                 SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,",
          "2020:                        SSL_R_UNKNOWN_PKEY_TYPE);",
          "2021:                 goto f_err;",
          "2023:         }",
          "2025:         if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_KEY_EXCHANGE, n)) {",
          "2027:             SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2032:     s->state = SSL3_ST_SW_KEY_EXCH_B;",
          "2034:     return ssl_do_write(s);",
          "",
          "[Added Lines]",
          "1706:     type = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1707:     cert = s->cert;",
          "1709:     buf = s->init_buf;",
          "1711:     r[0] = r[1] = r[2] = r[3] = NULL;",
          "1712:     n = 0;",
          "1714:     if (type & SSL_PSK) {",
          "1718:         n += 2;",
          "1719:         if (s->cert->psk_identity_hint)",
          "1720:             n += strlen(s->cert->psk_identity_hint);",
          "1721:     }",
          "1723:     if (type & (SSL_kPSK | SSL_kRSAPSK)) {",
          "1724:     } else",
          "1727:     if (type & SSL_kRSA) {",
          "1728:         rsa = cert->rsa_tmp;",
          "1729:         if ((rsa == NULL) && (s->cert->rsa_tmp_cb != NULL)) {",
          "1730:             rsa = s->cert->rsa_tmp_cb(s,",
          "1731:                                       SSL_C_IS_EXPORT(s->s3->",
          "1732:                                                       tmp.new_cipher),",
          "1733:                                       SSL_C_EXPORT_PKEYLENGTH(s->s3->",
          "1734:                                                               tmp.new_cipher));",
          "1737:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1738:                        SSL_R_ERROR_GENERATING_TMP_RSA_KEY);",
          "1741:             RSA_up_ref(rsa);",
          "1742:             cert->rsa_tmp = rsa;",
          "1743:         }",
          "1744:         if (rsa == NULL) {",
          "1745:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1746:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1747:                    SSL_R_MISSING_TMP_RSA_KEY);",
          "1748:             goto f_err;",
          "1749:         }",
          "1750:         r[0] = rsa->n;",
          "1751:         r[1] = rsa->e;",
          "1752:         s->s3->tmp.use_rsa_tmp = 1;",
          "1753:     } else",
          "1756:     if (type & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1757:         if (s->cert->dh_tmp_auto) {",
          "1758:             dhp = ssl_get_auto_dh(s);",
          "1760:                 al = SSL_AD_INTERNAL_ERROR;",
          "1761:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1763:                 goto f_err;",
          "1765:         } else",
          "1766:             dhp = cert->dh_tmp;",
          "1767:         if ((dhp == NULL) && (s->cert->dh_tmp_cb != NULL))",
          "1768:             dhp = s->cert->dh_tmp_cb(s,",
          "1769:                                      SSL_C_IS_EXPORT(s->s3->",
          "1770:                                                      tmp.new_cipher),",
          "1771:                                      SSL_C_EXPORT_PKEYLENGTH(s->s3->",
          "1772:                                                              tmp.new_cipher));",
          "1773:         if (dhp == NULL) {",
          "1774:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1775:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1776:                    SSL_R_MISSING_TMP_DH_KEY);",
          "1777:             goto f_err;",
          "1778:         }",
          "1779:         if (!ssl_security(s, SSL_SECOP_TMP_DH,",
          "1780:                           DH_security_bits(dhp), 0, dhp)) {",
          "1781:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1782:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1783:                    SSL_R_DH_KEY_TOO_SMALL);",
          "1784:             goto f_err;",
          "1785:         }",
          "1786:         if (s->s3->tmp.dh != NULL) {",
          "1787:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1788:                    ERR_R_INTERNAL_ERROR);",
          "1789:             goto err;",
          "1790:         }",
          "1792:         if (s->cert->dh_tmp_auto)",
          "1793:             dh = dhp;",
          "1794:         else if ((dh = DHparams_dup(dhp)) == NULL) {",
          "1795:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1796:             goto err;",
          "1797:         }",
          "1799:         s->s3->tmp.dh = dh;",
          "1800:         if ((dhp->pub_key == NULL ||",
          "1801:              dhp->priv_key == NULL ||",
          "1802:              (s->options & SSL_OP_SINGLE_DH_USE))) {",
          "1803:             if (!DH_generate_key(dh)) {",
          "1804:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1807:         } else {",
          "1808:             dh->pub_key = BN_dup(dhp->pub_key);",
          "1809:             dh->priv_key = BN_dup(dhp->priv_key);",
          "1810:             if ((dh->pub_key == NULL) || (dh->priv_key == NULL)) {",
          "1811:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1812:                 goto err;",
          "1814:         }",
          "1815:         r[0] = dh->p;",
          "1816:         r[1] = dh->g;",
          "1817:         r[2] = dh->pub_key;",
          "1818:     } else",
          "1821:     if (type & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "1822:         const EC_GROUP *group;",
          "1824:         ecdhp = cert->ecdh_tmp;",
          "1825:         if (s->cert->ecdh_tmp_auto) {",
          "1827:             int nid = tls1_shared_curve(s, -2);",
          "1828:             if (nid != NID_undef)",
          "1829:                 ecdhp = EC_KEY_new_by_curve_name(nid);",
          "1830:         } else if ((ecdhp == NULL) && s->cert->ecdh_tmp_cb) {",
          "1831:             ecdhp = s->cert->ecdh_tmp_cb(s,",
          "1832:                                          SSL_C_IS_EXPORT(s->s3->",
          "1833:                                                          tmp.new_cipher),",
          "1834:                                          SSL_C_EXPORT_PKEYLENGTH(s->",
          "1835:                                                                  s3->tmp.new_cipher));",
          "1836:         }",
          "1837:         if (ecdhp == NULL) {",
          "1838:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1839:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1840:                    SSL_R_MISSING_TMP_ECDH_KEY);",
          "1841:             goto f_err;",
          "1842:         }",
          "1844:         if (s->s3->tmp.ecdh != NULL) {",
          "1845:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1846:                    ERR_R_INTERNAL_ERROR);",
          "1847:             goto err;",
          "1848:         }",
          "1851:         if (ecdhp == NULL) {",
          "1852:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1853:             goto err;",
          "1854:         }",
          "1855:         if (s->cert->ecdh_tmp_auto)",
          "1856:             ecdh = ecdhp;",
          "1857:         else if ((ecdh = EC_KEY_dup(ecdhp)) == NULL) {",
          "1858:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1859:             goto err;",
          "1860:         }",
          "1862:         s->s3->tmp.ecdh = ecdh;",
          "1863:         if ((EC_KEY_get0_public_key(ecdh) == NULL) ||",
          "1864:             (EC_KEY_get0_private_key(ecdh) == NULL) ||",
          "1865:             (s->options & SSL_OP_SINGLE_ECDH_USE)) {",
          "1866:             if (!EC_KEY_generate_key(ecdh)) {",
          "1867:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1868:                        ERR_R_ECDH_LIB);",
          "1871:         }",
          "1873:         if (((group = EC_KEY_get0_group(ecdh)) == NULL) ||",
          "1874:             (EC_KEY_get0_public_key(ecdh) == NULL) ||",
          "1875:             (EC_KEY_get0_private_key(ecdh) == NULL)) {",
          "1876:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1877:             goto err;",
          "1878:         }",
          "1880:         if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&",
          "1881:             (EC_GROUP_get_degree(group) > 163)) {",
          "1882:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1883:                    SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER);",
          "1884:             goto err;",
          "1885:         }",
          "1892:         if ((curve_id =",
          "1893:              tls1_ec_nid2curve_id(EC_GROUP_get_curve_name(group)))",
          "1894:             == 0) {",
          "1895:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1896:                    SSL_R_UNSUPPORTED_ELLIPTIC_CURVE);",
          "1897:             goto err;",
          "1898:         }",
          "1904:         encodedlen = EC_POINT_point2oct(group,",
          "1905:                                         EC_KEY_get0_public_key(ecdh),",
          "1906:                                         POINT_CONVERSION_UNCOMPRESSED,",
          "1907:                                         NULL, 0, NULL);",
          "1909:         encodedPoint = (unsigned char *)",
          "1910:             OPENSSL_malloc(encodedlen * sizeof(unsigned char));",
          "1911:         bn_ctx = BN_CTX_new();",
          "1912:         if ((encodedPoint == NULL) || (bn_ctx == NULL)) {",
          "1913:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1914:                    ERR_R_MALLOC_FAILURE);",
          "1915:             goto err;",
          "1916:         }",
          "1918:         encodedlen = EC_POINT_point2oct(group,",
          "1919:                                         EC_KEY_get0_public_key(ecdh),",
          "1920:                                         POINT_CONVERSION_UNCOMPRESSED,",
          "1921:                                         encodedPoint, encodedlen, bn_ctx);",
          "1923:         if (encodedlen == 0) {",
          "1924:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "1925:             goto err;",
          "1926:         }",
          "1928:         BN_CTX_free(bn_ctx);",
          "1929:         bn_ctx = NULL;",
          "1937:         n += 4 + encodedlen;",
          "1943:         r[0] = NULL;",
          "1944:         r[1] = NULL;",
          "1945:         r[2] = NULL;",
          "1946:         r[3] = NULL;",
          "1947:     } else",
          "1950:     if (type & SSL_kSRP) {",
          "1951:         if ((s->srp_ctx.N == NULL) ||",
          "1952:             (s->srp_ctx.g == NULL) ||",
          "1953:             (s->srp_ctx.s == NULL) || (s->srp_ctx.B == NULL)) {",
          "1954:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1955:                    SSL_R_MISSING_SRP_PARAM);",
          "1956:             goto err;",
          "1958:         r[0] = s->srp_ctx.N;",
          "1959:         r[1] = s->srp_ctx.g;",
          "1960:         r[2] = s->srp_ctx.s;",
          "1961:         r[3] = s->srp_ctx.B;",
          "1962:     } else",
          "1963: #endif",
          "1964:     {",
          "1965:         al = SSL_AD_HANDSHAKE_FAILURE;",
          "1966:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "1967:                SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE);",
          "1968:         goto f_err;",
          "1969:     }",
          "1970:     for (i = 0; i < 4 && r[i] != NULL; i++) {",
          "1971:         nr[i] = BN_num_bytes(r[i]);",
          "1973:         if ((i == 2) && (type & SSL_kSRP))",
          "1974:             n += 1 + nr[i];",
          "1975:         else",
          "1977:             n += 2 + nr[i];",
          "1978:     }",
          "1980:     if (!(s->s3->tmp.new_cipher->algorithm_auth & (SSL_aNULL|SSL_aSRP))",
          "1981:         && !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_PSK)) {",
          "1982:         if ((pkey = ssl_get_sign_pkey(s, s->s3->tmp.new_cipher, &md))",
          "1983:             == NULL) {",
          "1984:             al = SSL_AD_DECODE_ERROR;",
          "1985:             goto f_err;",
          "1987:         kn = EVP_PKEY_size(pkey);",
          "1988:     } else {",
          "1989:         pkey = NULL;",
          "1990:         kn = 0;",
          "1991:     }",
          "1993:     if (!BUF_MEM_grow_clean(buf, n + SSL_HM_HEADER_LENGTH(s) + kn)) {",
          "1994:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_LIB_BUF);",
          "1995:         goto err;",
          "1996:     }",
          "1997:     d = p = ssl_handshake_start(s);",
          "2000:     if (type & SSL_PSK) {",
          "2002:         if (s->cert->psk_identity_hint) {",
          "2003:             s2n(strlen(s->cert->psk_identity_hint), p);",
          "2004:             strncpy((char *)p, s->cert->psk_identity_hint,",
          "2005:                     strlen(s->cert->psk_identity_hint));",
          "2006:             p += strlen(s->cert->psk_identity_hint);",
          "2007:         } else {",
          "2008:             s2n(0, p);",
          "2010:     }",
          "2013:     for (i = 0; i < 4 && r[i] != NULL; i++) {",
          "2015:         if ((i == 2) && (type & SSL_kSRP)) {",
          "2017:             p++;",
          "2018:         } else",
          "2020:             s2n(nr[i], p);",
          "2021:         BN_bn2bin(r[i], p);",
          "2022:         p += nr[i];",
          "2023:     }",
          "2026:     if (type & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "2034:         p += 1;",
          "2036:         p += 1;",
          "2038:         p += 1;",
          "2040:         p += 1;",
          "2041:         memcpy(p, encodedPoint, encodedlen);",
          "2042:         OPENSSL_free(encodedPoint);",
          "2043:         encodedPoint = NULL;",
          "2044:         p += encodedlen;",
          "2045:     }",
          "2049:     if (pkey != NULL) {",
          "2055:         if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "2056:             q = md_buf;",
          "2057:             j = 0;",
          "2058:             for (num = 2; num > 0; num--) {",
          "2059:                 EVP_MD_CTX_set_flags(&md_ctx,",
          "2060:                                      EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);",
          "2061:                 EVP_DigestInit_ex(&md_ctx, (num == 2)",
          "2062:                                   ? s->ctx->md5 : s->ctx->sha1, NULL);",
          "2063:                 EVP_DigestUpdate(&md_ctx, &(s->s3->client_random[0]),",
          "2064:                                  SSL3_RANDOM_SIZE);",
          "2065:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "2066:                                  SSL3_RANDOM_SIZE);",
          "2067:                 EVP_DigestUpdate(&md_ctx, d, n);",
          "2068:                 EVP_DigestFinal_ex(&md_ctx, q, (unsigned int *)&i);",
          "2069:                 q += i;",
          "2070:                 j += i;",
          "2071:             }",
          "2072:             if (RSA_sign(NID_md5_sha1, md_buf, j,",
          "2073:                          &(p[2]), &u, pkey->pkey.rsa) <= 0) {",
          "2074:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_LIB_RSA);",
          "2075:                 goto err;",
          "2076:             }",
          "2077:             s2n(u, p);",
          "2078:             n += u + 2;",
          "2079:         } else",
          "2081:         if (md) {",
          "2083:             if (SSL_USE_SIGALGS(s)) {",
          "2084:                 if (!tls12_get_sigandhash(p, pkey, md)) {",
          "2086:                     al = SSL_AD_INTERNAL_ERROR;",
          "2087:                     SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "2088:                            ERR_R_INTERNAL_ERROR);",
          "2089:                     goto f_err;",
          "2091:                 p += 2;",
          "2092:             }",
          "2094:             fprintf(stderr, \"Using hash %s\\n\", EVP_MD_name(md));",
          "2096:             EVP_SignInit_ex(&md_ctx, md, NULL);",
          "2097:             EVP_SignUpdate(&md_ctx, &(s->s3->client_random[0]),",
          "2098:                            SSL3_RANDOM_SIZE);",
          "2099:             EVP_SignUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "2100:                            SSL3_RANDOM_SIZE);",
          "2101:             EVP_SignUpdate(&md_ctx, d, n);",
          "2102:             if (!EVP_SignFinal(&md_ctx, &(p[2]),",
          "2103:                                (unsigned int *)&i, pkey)) {",
          "2104:                 SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_LIB_EVP);",
          "2105:                 goto err;",
          "2107:             s2n(i, p);",
          "2108:             n += i + 2;",
          "2109:             if (SSL_USE_SIGALGS(s))",
          "2110:                 n += 2;",
          "2111:         } else {",
          "2114:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE,",
          "2115:                    SSL_R_UNKNOWN_PKEY_TYPE);",
          "2120:     if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_KEY_EXCHANGE, n)) {",
          "2121:         al = SSL_AD_HANDSHAKE_FAILURE;",
          "2122:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2123:         goto f_err;",
          "2124:     }",
          "2127:     return 1;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2040:     BN_CTX_free(bn_ctx);",
          "2041: #endif",
          "2042:     EVP_MD_CTX_cleanup(&md_ctx);",
          "2045: }",
          "2047: int ssl3_send_certificate_request(SSL *s)",
          "2048: {",
          "2049:     unsigned char *p, *d;",
          "2050:     int i, j, nl, off, n;",
          "",
          "[Removed Lines]",
          "2043:     s->state = SSL_ST_ERR;",
          "2044:     return (-1);",
          "",
          "[Added Lines]",
          "2136:     statem_set_error(s);",
          "2137:     return 0;",
          "2141: {",
          "2142:     if (s->state == SSL3_ST_SW_CERT_REQ_A) {",
          "2143:         if (tls_construct_certificate_request(s) == 0)",
          "2144:             return -1;",
          "2145:         s->state = SSL3_ST_SW_CERT_REQ_B;",
          "2146:     }",
          "2149:     return ssl_do_write(s);",
          "2150: }",
          "2152: int tls_construct_certificate_request(SSL *s)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2052:     X509_NAME *name;",
          "2053:     BUF_MEM *buf;",
          "2081:         p += 2;",
          "2101:             }",
          "2102:         }",
          "2113:     }",
          "2117:  err:",
          "2120: }",
          "2122: int ssl3_get_client_key_exchange(SSL *s)",
          "2123: {",
          "2126:     long n;",
          "2127:     unsigned long alg_k;",
          "2128: #ifndef OPENSSL_NO_RSA",
          "2129:     RSA *rsa = NULL;",
          "",
          "[Removed Lines]",
          "2055:     if (s->state == SSL3_ST_SW_CERT_REQ_A) {",
          "2056:         buf = s->init_buf;",
          "2058:         d = p = ssl_handshake_start(s);",
          "2061:         p++;",
          "2062:         n = ssl3_get_req_cert_type(s, p);",
          "2063:         d[0] = n;",
          "2064:         p += n;",
          "2065:         n++;",
          "2067:         if (SSL_USE_SIGALGS(s)) {",
          "2068:             const unsigned char *psigs;",
          "2069:             unsigned char *etmp = p;",
          "2070:             nl = tls12_get_psigalgs(s, &psigs);",
          "2072:             p += 2;",
          "2073:             nl = tls12_copy_sigalgs(s, p, psigs, nl);",
          "2075:             s2n(nl, etmp);",
          "2076:             p += nl;",
          "2077:             n += nl + 2;",
          "2078:         }",
          "2080:         off = n;",
          "2082:         n += 2;",
          "2084:         sk = SSL_get_client_CA_list(s);",
          "2085:         nl = 0;",
          "2086:         if (sk != NULL) {",
          "2087:             for (i = 0; i < sk_X509_NAME_num(sk); i++) {",
          "2088:                 name = sk_X509_NAME_value(sk, i);",
          "2089:                 j = i2d_X509_NAME(name, NULL);",
          "2090:                 if (!BUF_MEM_grow_clean",
          "2091:                     (buf, SSL_HM_HEADER_LENGTH(s) + n + j + 2)) {",
          "2092:                     SSLerr(SSL_F_SSL3_SEND_CERTIFICATE_REQUEST,",
          "2093:                            ERR_R_BUF_LIB);",
          "2094:                     goto err;",
          "2095:                 }",
          "2096:                 p = ssl_handshake_start(s) + n;",
          "2097:                 s2n(j, p);",
          "2098:                 i2d_X509_NAME(name, &p);",
          "2099:                 n += 2 + j;",
          "2100:                 nl += 2 + j;",
          "2104:         p = ssl_handshake_start(s) + off;",
          "2105:         s2n(nl, p);",
          "2107:         if (!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE_REQUEST, n)) {",
          "2108:             SSLerr(SSL_F_SSL3_SEND_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "2109:             return -1;",
          "2110:         }",
          "2112:         s->state = SSL3_ST_SW_CERT_REQ_B;",
          "2116:     return ssl_do_write(s);",
          "2118:     s->state = SSL_ST_ERR;",
          "2119:     return (-1);",
          "2124:     unsigned int i;",
          "2125:     int al, ok;",
          "",
          "[Added Lines]",
          "2160:     buf = s->init_buf;",
          "2162:     d = p = ssl_handshake_start(s);",
          "2165:     p++;",
          "2166:     n = ssl3_get_req_cert_type(s, p);",
          "2167:     d[0] = n;",
          "2168:     p += n;",
          "2169:     n++;",
          "2171:     if (SSL_USE_SIGALGS(s)) {",
          "2172:         const unsigned char *psigs;",
          "2173:         unsigned char *etmp = p;",
          "2174:         nl = tls12_get_psigalgs(s, &psigs);",
          "2177:         nl = tls12_copy_sigalgs(s, p, psigs, nl);",
          "2179:         s2n(nl, etmp);",
          "2180:         p += nl;",
          "2181:         n += nl + 2;",
          "2182:     }",
          "2184:     off = n;",
          "2185:     p += 2;",
          "2186:     n += 2;",
          "2188:     sk = SSL_get_client_CA_list(s);",
          "2189:     nl = 0;",
          "2190:     if (sk != NULL) {",
          "2191:         for (i = 0; i < sk_X509_NAME_num(sk); i++) {",
          "2192:             name = sk_X509_NAME_value(sk, i);",
          "2193:             j = i2d_X509_NAME(name, NULL);",
          "2194:             if (!BUF_MEM_grow_clean",
          "2195:                 (buf, SSL_HM_HEADER_LENGTH(s) + n + j + 2)) {",
          "2196:                 SSLerr(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST,",
          "2197:                        ERR_R_BUF_LIB);",
          "2198:                 goto err;",
          "2200:             p = ssl_handshake_start(s) + n;",
          "2201:             s2n(j, p);",
          "2202:             i2d_X509_NAME(name, &p);",
          "2203:             n += 2 + j;",
          "2204:             nl += 2 + j;",
          "2206:     }",
          "2208:     p = ssl_handshake_start(s) + off;",
          "2209:     s2n(nl, p);",
          "2211:     if (!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE_REQUEST, n)) {",
          "2212:         SSLerr(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "2213:         goto err;",
          "2216:     s->s3->tmp.cert_request = 1;",
          "2218:     return 1;",
          "2220:     statem_set_error(s);",
          "2221:     return 0;",
          "2226:     int ok;",
          "2229:     n = s->method->ssl_get_message(s,",
          "2230:                                    SSL3_ST_SR_KEY_EXCH_A,",
          "2231:                                    SSL3_ST_SR_KEY_EXCH_B,",
          "2232:                                    SSL3_MT_CLIENT_KEY_EXCHANGE, 2048, &ok);",
          "2234:     if (!ok)",
          "2235:         return ((int)n);",
          "2237:     if (tls_process_client_key_exchange(s, n) == 0)",
          "2238:         return -1;",
          "2240:     return n;",
          "2241: }",
          "2243: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n)",
          "2244: {",
          "2245:     int al;",
          "2246:     unsigned int i;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2142:     PACKET pkt, enc_premaster;",
          "2143:     unsigned char *data, *rsa_decrypt = NULL;",
          "2152:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2153:         al = SSL_AD_INTERNAL_ERROR;",
          "2155:         goto f_err;",
          "2156:     }",
          "",
          "[Removed Lines]",
          "2145:     n = s->method->ssl_get_message(s,",
          "2146:                                    SSL3_ST_SR_KEY_EXCH_A,",
          "2147:                                    SSL3_ST_SR_KEY_EXCH_B,",
          "2148:                                    SSL3_MT_CLIENT_KEY_EXCHANGE, 2048, &ok);",
          "2150:     if (!ok)",
          "2151:         return ((int)n);",
          "2154:         SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "2267:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2167:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity)) {",
          "2168:             al = SSL_AD_DECODE_ERROR;",
          "2170:             goto f_err;",
          "2171:         }",
          "2172:         if (PACKET_remaining(&psk_identity) > PSK_MAX_IDENTITY_LEN) {",
          "2173:             al = SSL_AD_DECODE_ERROR;",
          "2175:                    SSL_R_DATA_LENGTH_TOO_LONG);",
          "2176:             goto f_err;",
          "2177:         }",
          "2178:         if (s->psk_server_callback == NULL) {",
          "2179:             al = SSL_AD_INTERNAL_ERROR;",
          "2181:                    SSL_R_PSK_NO_SERVER_CB);",
          "2182:             goto f_err;",
          "2183:         }",
          "",
          "[Removed Lines]",
          "2169:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "2174:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "2180:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2282:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "2287:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2293:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2194:         if (psklen > PSK_MAX_PSK_LEN) {",
          "2195:             al = SSL_AD_INTERNAL_ERROR;",
          "2197:             goto f_err;",
          "2198:         } else if (psklen == 0) {",
          "2203:                    SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2204:             al = SSL_AD_UNKNOWN_PSK_IDENTITY;",
          "2205:             goto f_err;",
          "",
          "[Removed Lines]",
          "2196:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2202:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2309:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2315:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2212:         if (s->s3->tmp.psk == NULL) {",
          "2213:             al = SSL_AD_INTERNAL_ERROR;",
          "2215:             goto f_err;",
          "2216:         }",
          "",
          "[Removed Lines]",
          "2214:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2327:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2222:         if (PACKET_remaining(&pkt) != 0) {",
          "2223:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "2225:             goto f_err;",
          "2226:         }",
          "2228:         if (!ssl_generate_master_secret(s, NULL, 0, 0)) {",
          "2229:             al = SSL_AD_INTERNAL_ERROR;",
          "2231:             goto f_err;",
          "2232:         }",
          "2233:     } else",
          "",
          "[Removed Lines]",
          "2224:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "2230:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "2337:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "2343:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2249:             if (rsa == NULL) {",
          "2250:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2252:                        SSL_R_MISSING_TMP_RSA_PKEY);",
          "2253:                 goto f_err;",
          "",
          "[Removed Lines]",
          "2251:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2364:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2258:             if ((pkey == NULL) ||",
          "2259:                 (pkey->type != EVP_PKEY_RSA) || (pkey->pkey.rsa == NULL)) {",
          "2260:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2262:                        SSL_R_MISSING_RSA_CERTIFICATE);",
          "2263:                 goto f_err;",
          "2264:             }",
          "",
          "[Removed Lines]",
          "2261:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2374:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2383:         if (!ssl_generate_master_secret(s, rsa_decrypt,",
          "2384:                                         sizeof(rand_premaster_secret), 0)) {",
          "2385:             al = SSL_AD_INTERNAL_ERROR;",
          "2387:             goto f_err;",
          "2388:         }",
          "2389:         OPENSSL_free(rsa_decrypt);",
          "",
          "[Removed Lines]",
          "2386:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "2499:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2400:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "2401:             if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "2402:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2404:                        SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);",
          "2405:                 goto f_err;",
          "2406:             }",
          "",
          "[Removed Lines]",
          "2403:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2516:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2408:         }",
          "2409:         if (PACKET_remaining(&pkt) != i) {",
          "2410:             if (!(s->options & SSL_OP_SSLEAY_080_CLIENT_DH_BUG)) {",
          "2412:                        SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);",
          "2413:                 goto err;",
          "2414:             } else {",
          "",
          "[Removed Lines]",
          "2411:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2524:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2425:             if ((skey == NULL) ||",
          "2426:                 (skey->type != EVP_PKEY_DH) || (skey->pkey.dh == NULL)) {",
          "2427:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2429:                        SSL_R_MISSING_RSA_CERTIFICATE);",
          "2430:                 goto f_err;",
          "2431:             }",
          "2432:             dh_srvr = skey->pkey.dh;",
          "2433:         } else if (s->s3->tmp.dh == NULL) {",
          "2434:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "2436:                    SSL_R_MISSING_TMP_DH_KEY);",
          "2437:             goto f_err;",
          "2438:         } else",
          "",
          "[Removed Lines]",
          "2428:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "2435:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2541:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2548:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2447:             }",
          "2448:             if (dh_clnt == NULL) {",
          "2449:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2451:                        SSL_R_MISSING_TMP_DH_KEY);",
          "2452:                 goto f_err;",
          "2453:             }",
          "",
          "[Removed Lines]",
          "2450:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2563:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2457:             if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "2459:                 al = SSL_AD_INTERNAL_ERROR;",
          "2461:                        ERR_R_INTERNAL_ERROR);",
          "2462:                 goto f_err;",
          "2463:             }",
          "2464:             pub = BN_bin2bn(data, i, NULL);",
          "2465:         }",
          "2466:         if (pub == NULL) {",
          "2468:             goto err;",
          "2469:         }",
          "2471:         i = DH_compute_key(shared, pub, dh_srvr);",
          "2473:         if (i <= 0) {",
          "2475:             BN_clear_free(pub);",
          "2476:             goto err;",
          "2477:         }",
          "",
          "[Removed Lines]",
          "2460:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "2467:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, SSL_R_BN_LIB);",
          "2474:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "",
          "[Added Lines]",
          "2573:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2580:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_BN_LIB);",
          "2587:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2485:         pub = NULL;",
          "2486:         if (!ssl_generate_master_secret(s, shared, i, 0)) {",
          "2487:             al = SSL_AD_INTERNAL_ERROR;",
          "2489:             goto f_err;",
          "2490:         }",
          "2493:     } else",
          "2494: #endif",
          "2496: #ifndef OPENSSL_NO_EC",
          "2497:     if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe | SSL_kECDHEPSK)) {",
          "2499:         int field_size = 0;",
          "2500:         const EC_KEY *tkey;",
          "2501:         const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "2488:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2491:         if (dh_clnt)",
          "2492:             return 2;",
          "2498:         int ret = 1;",
          "",
          "[Added Lines]",
          "2601:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2604:         if (dh_clnt) {",
          "2605:             s->no_cert_verify = 1;",
          "2606:             return MSG_PROCESS_CONTINUE_PROCESSING;",
          "2607:         }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2506:         if ((srvr_ecdh = EC_KEY_new()) == NULL) {",
          "2508:             goto err;",
          "2509:         }",
          "",
          "[Removed Lines]",
          "2507:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2621:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2526:         if (!EC_KEY_set_group(srvr_ecdh, group) ||",
          "2527:             !EC_KEY_set_private_key(srvr_ecdh, priv_key)) {",
          "2529:             goto err;",
          "2530:         }",
          "2533:         if ((clnt_ecpoint = EC_POINT_new(group)) == NULL) {",
          "2535:             goto err;",
          "2536:         }",
          "",
          "[Removed Lines]",
          "2528:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2534:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2642:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2648:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2541:             if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "2542:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2544:                        SSL_R_MISSING_TMP_ECDH_KEY);",
          "2545:                 goto f_err;",
          "2546:             }",
          "",
          "[Removed Lines]",
          "2543:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2657:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2557:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "2559:                        SSL_R_UNABLE_TO_DECODE_ECDH_CERTS);",
          "2560:                 goto f_err;",
          "2561:             }",
          "",
          "[Removed Lines]",
          "2558:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2672:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2563:             if (EC_POINT_copy(clnt_ecpoint,",
          "2564:                               EC_KEY_get0_public_key(clnt_pub_pkey->",
          "2565:                                                      pkey.ec)) == 0) {",
          "2567:                 goto err;",
          "2568:             }",
          "2570:         } else {",
          "2575:             if ((bn_ctx = BN_CTX_new()) == NULL) {",
          "2577:                        ERR_R_MALLOC_FAILURE);",
          "2578:                 goto err;",
          "2579:             }",
          "",
          "[Removed Lines]",
          "2566:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2576:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2680:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2683:             s->no_cert_verify = 1;",
          "2690:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2582:             if (!PACKET_get_1(&pkt, &i)) {",
          "2583:                 al = SSL_AD_DECODE_ERROR;",
          "2585:                        SSL_R_LENGTH_MISMATCH);",
          "2586:                 goto f_err;",
          "2587:             }",
          "2588:             if (!PACKET_get_bytes(&pkt, &data, i)",
          "2589:                     || PACKET_remaining(&pkt) != 0) {",
          "2591:                 goto err;",
          "2592:             }",
          "2593:             if (EC_POINT_oct2point(group, clnt_ecpoint, data, i, bn_ctx) == 0) {",
          "2595:                 goto err;",
          "2596:             }",
          "2597:         }",
          "",
          "[Removed Lines]",
          "2584:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "2590:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2594:                 SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "",
          "[Added Lines]",
          "2698:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2704:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2708:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2600:         field_size = EC_GROUP_get_degree(group);",
          "2601:         if (field_size <= 0) {",
          "2603:             goto err;",
          "2604:         }",
          "2605:         shared = OPENSSL_malloc((field_size + 7) / 8);",
          "2606:         if (shared == NULL) {",
          "2608:             goto err;",
          "2609:         }",
          "2610:         i = ECDH_compute_key(shared, (field_size + 7) / 8, clnt_ecpoint,",
          "2611:                              srvr_ecdh, NULL);",
          "2612:         if (i <= 0) {",
          "2614:             OPENSSL_free(shared);",
          "2615:             goto err;",
          "2616:         }",
          "",
          "[Removed Lines]",
          "2602:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2607:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2613:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "",
          "[Added Lines]",
          "2716:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2721:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2727:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2625:         if (!ssl_generate_master_secret(s, shared, i, 1)) {",
          "2626:             al = SSL_AD_INTERNAL_ERROR;",
          "2628:             goto f_err;",
          "2629:         }",
          "2631:     } else",
          "2632: #endif",
          "2633: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "2627:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2630:         return (ret);",
          "",
          "[Added Lines]",
          "2741:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2744:         return MSG_PROCESS_CONTINUE_PROCESSING;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2635:         if (!PACKET_get_net_2(&pkt, &i)",
          "2636:                 || !PACKET_get_bytes(&pkt, &data, i)) {",
          "2637:             al = SSL_AD_DECODE_ERROR;",
          "2639:             goto f_err;",
          "2640:         }",
          "2641:         if ((s->srp_ctx.A = BN_bin2bn(data, i, NULL)) == NULL) {",
          "2643:             goto err;",
          "2644:         }",
          "2645:         if (BN_ucmp(s->srp_ctx.A, s->srp_ctx.N) >= 0",
          "2646:             || BN_is_zero(s->srp_ctx.A)) {",
          "2647:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "2649:                    SSL_R_BAD_SRP_PARAMETERS);",
          "2650:             goto f_err;",
          "2651:         }",
          "2652:         OPENSSL_free(s->session->srp_username);",
          "2653:         s->session->srp_username = BUF_strdup(s->srp_ctx.login);",
          "2654:         if (s->session->srp_username == NULL) {",
          "2656:             goto err;",
          "2657:         }",
          "2659:         if (!srp_generate_server_master_secret(s)) {",
          "2661:             goto err;",
          "2662:         }",
          "2663:     } else",
          "2665:     if (alg_k & SSL_kGOST) {",
          "2667:         EVP_PKEY_CTX *pkey_ctx;",
          "2668:         EVP_PKEY *client_pub_pkey = NULL, *pk = NULL;",
          "2669:         unsigned char premaster_secret[32], *start;",
          "",
          "[Removed Lines]",
          "2638:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, SSL_R_BAD_SRP_A_LENGTH);",
          "2642:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "2648:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "2655:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2660:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2666:         int ret = 0;",
          "",
          "[Added Lines]",
          "2752:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_BAD_SRP_A_LENGTH);",
          "2756:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "2762:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2769:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2774:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2694:         if (!PACKET_get_bytes(&pkt, &data, n)) {",
          "2695:             al = SSL_AD_INTERNAL_ERROR;",
          "2697:             goto f_err;",
          "2698:         }",
          "2699:         if (ASN1_get_object",
          "2700:             ((const unsigned char **)&data, &Tlen, &Ttag, &Tclass,",
          "2701:              n) != V_ASN1_CONSTRUCTED || Ttag != V_ASN1_SEQUENCE",
          "2702:             || Tclass != V_ASN1_UNIVERSAL) {",
          "2704:                    SSL_R_DECRYPTION_FAILED);",
          "2705:             goto gerr;",
          "2706:         }",
          "",
          "[Removed Lines]",
          "2696:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2703:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2809:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2816:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2708:         inlen = Tlen;",
          "2709:         if (EVP_PKEY_decrypt",
          "2710:             (pkey_ctx, premaster_secret, &outlen, start, inlen) <= 0) {",
          "2712:                    SSL_R_DECRYPTION_FAILED);",
          "2713:             goto gerr;",
          "2714:         }",
          "",
          "[Removed Lines]",
          "2711:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "2824:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2716:         if (!ssl_generate_master_secret(s, premaster_secret,",
          "2717:                                         sizeof(premaster_secret), 0)) {",
          "2718:             al = SSL_AD_INTERNAL_ERROR;",
          "2720:             goto f_err;",
          "2721:         }",
          "2723:         if (EVP_PKEY_CTX_ctrl",
          "2724:             (pkey_ctx, -1, -1, EVP_PKEY_CTRL_PEER_KEY, 2, NULL) > 0)",
          "2728:  gerr:",
          "2729:         EVP_PKEY_free(client_pub_pkey);",
          "2730:         EVP_PKEY_CTX_free(pkey_ctx);",
          "2733:         goto err;",
          "2734:     } else {",
          "2735:         al = SSL_AD_HANDSHAKE_FAILURE;",
          "2737:         goto f_err;",
          "2738:     }",
          "2741:  f_err:",
          "2742:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2743: #if !defined(OPENSSL_NO_DH) || !defined(OPENSSL_NO_RSA) || !defined(OPENSSL_NO_EC) || defined(OPENSSL_NO_SRP)",
          "",
          "[Removed Lines]",
          "2719:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2725:             ret = 2;",
          "2726:         else",
          "2727:             ret = 1;",
          "2731:         if (ret)",
          "2732:             return ret;",
          "2736:         SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, SSL_R_UNKNOWN_CIPHER_TYPE);",
          "2740:     return (1);",
          "",
          "[Added Lines]",
          "2832:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2838:             s->no_cert_verify = 1;",
          "2840:         EVP_PKEY_free(client_pub_pkey);",
          "2841:         EVP_PKEY_CTX_free(pkey_ctx);",
          "2842:         return MSG_PROCESS_CONTINUE_PROCESSING;",
          "2849:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_UNKNOWN_CIPHER_TYPE);",
          "2853:     return MSG_PROCESS_CONTINUE_PROCESSING;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2754:     OPENSSL_clear_free(s->s3->tmp.psk, s->s3->tmp.psklen);",
          "2755:     s->s3->tmp.psk = NULL;",
          "2756: #endif",
          "2759: }",
          "2761: int ssl3_get_cert_verify(SSL *s)",
          "2762: {",
          "2766:     long n;",
          "",
          "[Removed Lines]",
          "2757:     s->state = SSL_ST_ERR;",
          "2758:     return (-1);",
          "2763:     EVP_PKEY *pkey = NULL;",
          "2764:     unsigned char *sig, *data;",
          "2765:     int al, ok, ret = 0;",
          "2767:     int type = 0, i, j;",
          "2768:     unsigned int len;",
          "2769:     X509 *peer;",
          "2770:     const EVP_MD *md = NULL;",
          "2771:     EVP_MD_CTX mctx;",
          "2772:     PACKET pkt;",
          "2773:     EVP_MD_CTX_init(&mctx);",
          "",
          "[Added Lines]",
          "2870:     statem_set_error(s);",
          "2871:     return MSG_PROCESS_ERROR;",
          "2876:     int ok, ret = 1;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2783:     if (s->session->peer == NULL) {",
          "2785:         goto end;",
          "2786:     }",
          "",
          "[Removed Lines]",
          "2784:         ret = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2794:     if (!ok)",
          "2795:         return ((int)n);",
          "2797:     peer = s->session->peer;",
          "2798:     pkey = X509_get_pubkey(peer);",
          "2799:     type = X509_certificate_type(peer, pkey);",
          "2801:     if (!(type & EVP_PKT_SIGN)) {",
          "2803:                SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE);",
          "2804:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "2805:         goto f_err;",
          "",
          "[Removed Lines]",
          "2802:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY,",
          "",
          "[Added Lines]",
          "2900:     if (tls_process_cert_verify(s, n) == 0)",
          "2901:         ret = -1;",
          "2903:  end:",
          "2904:     BIO_free(s->s3->handshake_buffer);",
          "2905:     s->s3->handshake_buffer = NULL;",
          "2906:     return ret;",
          "2907: }",
          "2910: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n)",
          "2911: {",
          "2912:     EVP_PKEY *pkey = NULL;",
          "2913:     unsigned char *sig, *data;",
          "2914:     int al, ret = MSG_PROCESS_ERROR;",
          "2915:     int type = 0, i, j;",
          "2916:     unsigned int len;",
          "2917:     X509 *peer;",
          "2918:     const EVP_MD *md = NULL;",
          "2919:     EVP_MD_CTX mctx;",
          "2920:     PACKET pkt;",
          "2921:     EVP_MD_CTX_init(&mctx);",
          "2928:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2809:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2811:         al = SSL_AD_INTERNAL_ERROR;",
          "2812:         goto f_err;",
          "2813:     }",
          "",
          "[Removed Lines]",
          "2810:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "2936:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2839: #endif",
          "2840:         }",
          "2841:         if (!PACKET_get_net_2(&pkt, &len)) {",
          "2843:             al = SSL_AD_DECODE_ERROR;",
          "2844:             goto f_err;",
          "2845:         }",
          "2846:     }",
          "2847:     j = EVP_PKEY_size(pkey);",
          "2848:     if (((int)len > j) || ((int)PACKET_remaining(&pkt) > j) || (n <= 0)) {",
          "2850:         al = SSL_AD_DECODE_ERROR;",
          "2851:         goto f_err;",
          "2852:     }",
          "2853:     if (!PACKET_get_bytes(&pkt, &data, len)) {",
          "2855:         al = SSL_AD_DECODE_ERROR;",
          "2856:         goto f_err;",
          "2857:     }",
          "",
          "[Removed Lines]",
          "2842:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2849:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_WRONG_SIGNATURE_SIZE);",
          "2854:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2968:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2975:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_WRONG_SIGNATURE_SIZE);",
          "2980:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2861:         void *hdata;",
          "2862:         hdatalen = BIO_get_mem_data(s->s3->handshake_buffer, &hdata);",
          "2863:         if (hdatalen <= 0) {",
          "2865:             al = SSL_AD_INTERNAL_ERROR;",
          "2866:             goto f_err;",
          "2867:         }",
          "",
          "[Removed Lines]",
          "2864:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "2990:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2871: #endif",
          "2872:         if (!EVP_VerifyInit_ex(&mctx, md, NULL)",
          "2873:             || !EVP_VerifyUpdate(&mctx, hdata, hdatalen)) {",
          "2875:             al = SSL_AD_INTERNAL_ERROR;",
          "2876:             goto f_err;",
          "2877:         }",
          "2879:         if (EVP_VerifyFinal(&mctx, data, len, pkey) <= 0) {",
          "2880:             al = SSL_AD_DECRYPT_ERROR;",
          "2882:             goto f_err;",
          "2883:         }",
          "2884:     } else",
          "",
          "[Removed Lines]",
          "2874:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, ERR_R_EVP_LIB);",
          "2881:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_SIGNATURE);",
          "",
          "[Added Lines]",
          "3000:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_EVP_LIB);",
          "3007:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_BAD_SIGNATURE);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2889:                        pkey->pkey.rsa);",
          "2890:         if (i < 0) {",
          "2891:             al = SSL_AD_DECRYPT_ERROR;",
          "2893:             goto f_err;",
          "2894:         }",
          "2895:         if (i == 0) {",
          "2896:             al = SSL_AD_DECRYPT_ERROR;",
          "2898:             goto f_err;",
          "2899:         }",
          "2900:     } else",
          "",
          "[Removed Lines]",
          "2892:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_RSA_DECRYPT);",
          "2897:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_RSA_SIGNATURE);",
          "",
          "[Added Lines]",
          "3018:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_BAD_RSA_DECRYPT);",
          "3023:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_BAD_RSA_SIGNATURE);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2907:         if (j <= 0) {",
          "2909:             al = SSL_AD_DECRYPT_ERROR;",
          "2911:             goto f_err;",
          "2912:         }",
          "2913:     } else",
          "",
          "[Removed Lines]",
          "2910:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_DSA_SIGNATURE);",
          "",
          "[Added Lines]",
          "3036:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_BAD_DSA_SIGNATURE);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2920:         if (j <= 0) {",
          "2922:             al = SSL_AD_DECRYPT_ERROR;",
          "2924:             goto f_err;",
          "2925:         }",
          "2926:     } else",
          "",
          "[Removed Lines]",
          "2923:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_ECDSA_SIGNATURE);",
          "",
          "[Added Lines]",
          "3049:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_BAD_ECDSA_SIGNATURE);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2941:         EVP_PKEY_CTX_free(pctx);",
          "2942:         if (j <= 0) {",
          "2943:             al = SSL_AD_DECRYPT_ERROR;",
          "2945:             goto f_err;",
          "2946:         }",
          "2947:     } else {",
          "2949:         al = SSL_AD_UNSUPPORTED_CERTIFICATE;",
          "2950:         goto f_err;",
          "2951:     }",
          "2954:     if (0) {",
          "2955:  f_err:",
          "2956:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2958:     }",
          "2960:     BIO_free(s->s3->handshake_buffer);",
          "2961:     s->s3->handshake_buffer = NULL;",
          "2962:     EVP_MD_CTX_cleanup(&mctx);",
          "2963:     EVP_PKEY_free(pkey);",
          "2965: }",
          "2967: int ssl3_get_client_certificate(SSL *s)",
          "2968: {",
          "2977:     n = s->method->ssl_get_message(s,",
          "2978:                                    SSL3_ST_SR_CERT_A,",
          "",
          "[Removed Lines]",
          "2944:             SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, SSL_R_BAD_ECDSA_SIGNATURE);",
          "2948:         SSLerr(SSL_F_SSL3_GET_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "2953:     ret = 1;",
          "2957:         s->state = SSL_ST_ERR;",
          "2959:  end:",
          "2964:     return (ret);",
          "2969:     int i, ok, al, ret = -1;",
          "2970:     X509 *x = NULL;",
          "2971:     unsigned long l, llen, n;",
          "2972:     const unsigned char *certstart;",
          "2973:     unsigned char *certbytes;",
          "2974:     STACK_OF(X509) *sk = NULL;",
          "2975:     PACKET pkt, spkt;",
          "",
          "[Added Lines]",
          "3070:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_BAD_ECDSA_SIGNATURE);",
          "3074:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3079:     ret = MSG_PROCESS_CONTINUE_READING;",
          "3083:         statem_set_error(s);",
          "3089:     return ret;",
          "3094:     int ok, al;",
          "3095:     long n;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3000:             goto f_err;",
          "3001:         }",
          "3002:         s->s3->tmp.reuse_message = 1;",
          "3004:     }",
          "3006:     if (s->s3->tmp.message_type != SSL3_MT_CERTIFICATE) {",
          "",
          "[Removed Lines]",
          "3003:         return (1);",
          "",
          "[Added Lines]",
          "3123:         return 1;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3009:         goto f_err;",
          "3010:     }",
          "3012:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "3013:         al = SSL_AD_INTERNAL_ERROR;",
          "3015:         goto f_err;",
          "3016:     }",
          "3018:     if ((sk = sk_X509_new_null()) == NULL) {",
          "3021:     }",
          "3023:     if (!PACKET_get_net_3(&pkt, &llen)",
          "3024:             || !PACKET_get_sub_packet(&pkt, &spkt, llen)",
          "3025:             || PACKET_remaining(&pkt) != 0) {",
          "3026:         al = SSL_AD_DECODE_ERROR;",
          "3028:         goto f_err;",
          "3029:     }",
          "",
          "[Removed Lines]",
          "3014:         SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3019:         SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "3020:         goto done;",
          "3027:         SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "3132:     if (tls_process_client_certificate(s, n) == 0)",
          "3133:         goto f_err;",
          "3135:     return 1;",
          "3136:  f_err:",
          "3137:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3138:     s->state = SSL_ST_ERR;",
          "3139:     return -1;",
          "3140: }",
          "3142: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n)",
          "3143: {",
          "3144:     int i, al, ret = MSG_PROCESS_ERROR;",
          "3145:     X509 *x = NULL;",
          "3146:     unsigned long l, llen;",
          "3147:     const unsigned char *certstart;",
          "3148:     unsigned char *certbytes;",
          "3149:     STACK_OF(X509) *sk = NULL;",
          "3150:     PACKET pkt, spkt;",
          "3154:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3159:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "3160:         goto f_err;",
          "3167:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3032:         if (!PACKET_get_net_3(&spkt, &l)",
          "3033:                 || !PACKET_get_bytes(&spkt, &certbytes, l)) {",
          "3034:             al = SSL_AD_DECODE_ERROR;",
          "3036:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "3037:             goto f_err;",
          "3038:         }",
          "",
          "[Removed Lines]",
          "3035:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE,",
          "",
          "[Added Lines]",
          "3175:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3040:         certstart = certbytes;",
          "3041:         x = d2i_X509(NULL, (const unsigned char **)&certbytes, l);",
          "3042:         if (x == NULL) {",
          "3045:         }",
          "3046:         if (certbytes != (certstart + l)) {",
          "3047:             al = SSL_AD_DECODE_ERROR;",
          "3049:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "3050:             goto f_err;",
          "3051:         }",
          "3052:         if (!sk_X509_push(sk, x)) {",
          "3055:         }",
          "3056:         x = NULL;",
          "3057:     }",
          "",
          "[Removed Lines]",
          "3043:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, ERR_R_ASN1_LIB);",
          "3044:             goto done;",
          "3048:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE,",
          "3053:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "3054:             goto done;",
          "",
          "[Added Lines]",
          "3183:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_ASN1_LIB);",
          "3184:             goto f_err;",
          "3188:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE,",
          "3193:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "3194:             goto f_err;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3061:         if (s->version == SSL3_VERSION) {",
          "3062:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "3064:                    SSL_R_NO_CERTIFICATES_RETURNED);",
          "3065:             goto f_err;",
          "3066:         }",
          "3068:         else if ((s->verify_mode & SSL_VERIFY_PEER) &&",
          "3069:                  (s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT)) {",
          "3071:                    SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE);",
          "3072:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "3073:             goto f_err;",
          "",
          "[Removed Lines]",
          "3063:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE,",
          "3070:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE,",
          "",
          "[Added Lines]",
          "3203:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE,",
          "3210:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3082:         i = ssl_verify_cert_chain(s, sk);",
          "3083:         if (i <= 0) {",
          "3084:             al = ssl_verify_alarm_type(s->verify_result);",
          "3086:                    SSL_R_CERTIFICATE_VERIFY_FAILED);",
          "3087:             goto f_err;",
          "3088:         }",
          "3089:         if (i > 1) {",
          "3091:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "3092:             goto f_err;",
          "3093:         }",
          "3094:         pkey = X509_get_pubkey(sk_X509_value(sk, 0));",
          "3095:         if (pkey == NULL) {",
          "3096:             al = SSL3_AD_HANDSHAKE_FAILURE;",
          "3098:                    SSL_R_UNKNOWN_CERTIFICATE_TYPE);",
          "3099:             goto f_err;",
          "3100:         }",
          "",
          "[Removed Lines]",
          "3085:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE,",
          "3090:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, i);",
          "3097:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE,",
          "",
          "[Added Lines]",
          "3225:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE,",
          "3230:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, i);",
          "3237:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3114:     sk = NULL;",
          "3116:     goto done;",
          "3118:  f_err:",
          "3119:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3120:  done:",
          "3122:     X509_free(x);",
          "3123:     sk_X509_pop_free(sk, X509_free);",
          "3125: }",
          "3127: int ssl3_send_server_certificate(SSL *s)",
          "3128: {",
          "3131:     if (s->state == SSL3_ST_SW_CERT_A) {",
          "3144:         s->state = SSL3_ST_SW_CERT_B;",
          "3145:     }",
          "",
          "[Removed Lines]",
          "3115:     ret = 1;",
          "3121:     s->state = SSL_ST_ERR;",
          "3124:     return (ret);",
          "3129:     CERT_PKEY *cpk;",
          "3132:         cpk = ssl_get_server_send_pkey(s);",
          "3133:         if (cpk == NULL) {",
          "3134:             SSLerr(SSL_F_SSL3_SEND_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3135:             s->state = SSL_ST_ERR;",
          "3136:             return (0);",
          "3137:         }",
          "3139:         if (!ssl3_output_cert_chain(s, cpk)) {",
          "3140:             SSLerr(SSL_F_SSL3_SEND_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3141:             s->state = SSL_ST_ERR;",
          "3142:             return (0);",
          "3143:         }",
          "",
          "[Added Lines]",
          "3255:     ret = MSG_PROCESS_CONTINUE_READING;",
          "3260:     statem_set_error(s);",
          "3264:     return ret;",
          "3270:         if (tls_construct_server_certificate(s) == 0)",
          "3271:             return 0;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3148:     return ssl_do_write(s);",
          "3149: }",
          "3152: int ssl3_send_newsession_ticket(SSL *s)",
          "3153: {",
          "3158:     if (s->state == SSL3_ST_SW_SESSION_TICKET_A) {",
          "3181:             return -1;",
          "3271:             goto err;",
          "3273:             goto err;",
          "3286:             goto err;",
          "3289:     }",
          "3293:  err:",
          "3294:     OPENSSL_free(senc);",
          "3295:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "3296:     HMAC_CTX_cleanup(&hctx);",
          "3299: }",
          "3301: int ssl3_send_cert_status(SSL *s)",
          "3302: {",
          "3303:     if (s->state == SSL3_ST_SW_CERT_STATUS_A) {",
          "3313:             return -1;",
          "3330:         s->state = SSL3_ST_SW_CERT_STATUS_B;",
          "3332:     }",
          "3335:     return (ssl3_do_write(s, SSL3_RT_HANDSHAKE));",
          "3336: }",
          "3338: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "3154:     unsigned char *senc = NULL;",
          "3155:     EVP_CIPHER_CTX ctx;",
          "3156:     HMAC_CTX hctx;",
          "3159:         unsigned char *p, *macstart;",
          "3160:         const unsigned char *const_p;",
          "3161:         int len, slen_full, slen;",
          "3162:         SSL_SESSION *sess;",
          "3163:         unsigned int hlen;",
          "3164:         SSL_CTX *tctx = s->initial_ctx;",
          "3165:         unsigned char iv[EVP_MAX_IV_LENGTH];",
          "3166:         unsigned char key_name[16];",
          "3169:         slen_full = i2d_SSL_SESSION(s->session, NULL);",
          "3174:         if (slen_full == 0 || slen_full > 0xFF00) {",
          "3175:             s->state = SSL_ST_ERR;",
          "3176:             return -1;",
          "3177:         }",
          "3178:         senc = OPENSSL_malloc(slen_full);",
          "3179:         if (!senc) {",
          "3180:             s->state = SSL_ST_ERR;",
          "3182:         }",
          "3184:         EVP_CIPHER_CTX_init(&ctx);",
          "3185:         HMAC_CTX_init(&hctx);",
          "3187:         p = senc;",
          "3188:         if (!i2d_SSL_SESSION(s->session, &p))",
          "3189:             goto err;",
          "3194:         const_p = senc;",
          "3195:         sess = d2i_SSL_SESSION(NULL, &const_p, slen_full);",
          "3196:         if (sess == NULL)",
          "3197:             goto err;",
          "3200:         slen = i2d_SSL_SESSION(sess, NULL);",
          "3202:             SSL_SESSION_free(sess);",
          "3203:             goto err;",
          "3204:         }",
          "3205:         p = senc;",
          "3206:         if (!i2d_SSL_SESSION(sess, &p)) {",
          "3207:             SSL_SESSION_free(sess);",
          "3208:             goto err;",
          "3209:         }",
          "3210:         SSL_SESSION_free(sess);",
          "3220:         if (!BUF_MEM_grow(s->init_buf,",
          "3221:                           SSL_HM_HEADER_LENGTH(s) + 22 + EVP_MAX_IV_LENGTH +",
          "3222:                           EVP_MAX_BLOCK_LENGTH + EVP_MAX_MD_SIZE + slen))",
          "3223:             goto err;",
          "3225:         p = ssl_handshake_start(s);",
          "3230:         if (tctx->tlsext_ticket_key_cb) {",
          "3231:             if (tctx->tlsext_ticket_key_cb(s, key_name, iv, &ctx,",
          "3232:                                            &hctx, 1) < 0)",
          "3233:                 goto err;",
          "3234:         } else {",
          "3235:             if (RAND_bytes(iv, 16) <= 0)",
          "3236:                 goto err;",
          "3237:             if (!EVP_EncryptInit_ex(&ctx, EVP_aes_128_cbc(), NULL,",
          "3238:                                     tctx->tlsext_tick_aes_key, iv))",
          "3239:                 goto err;",
          "3240:             if (!HMAC_Init_ex(&hctx, tctx->tlsext_tick_hmac_key, 16,",
          "3241:                               EVP_sha256(), NULL))",
          "3242:                 goto err;",
          "3243:             memcpy(key_name, tctx->tlsext_tick_key_name, 16);",
          "3244:         }",
          "3251:         l2n(s->hit ? 0 : s->session->timeout, p);",
          "3254:         p += 2;",
          "3256:         macstart = p;",
          "3257:         memcpy(p, key_name, 16);",
          "3258:         p += 16;",
          "3260:         memcpy(p, iv, EVP_CIPHER_CTX_iv_length(&ctx));",
          "3261:         p += EVP_CIPHER_CTX_iv_length(&ctx);",
          "3263:         if (!EVP_EncryptUpdate(&ctx, p, &len, senc, slen))",
          "3264:             goto err;",
          "3265:         p += len;",
          "3266:         if (!EVP_EncryptFinal(&ctx, p, &len))",
          "3267:             goto err;",
          "3268:         p += len;",
          "3270:         if (!HMAC_Update(&hctx, macstart, p - macstart))",
          "3272:         if (!HMAC_Final(&hctx, p, &hlen))",
          "3275:         EVP_CIPHER_CTX_cleanup(&ctx);",
          "3276:         HMAC_CTX_cleanup(&hctx);",
          "3278:         p += hlen;",
          "3281:         len = p - ssl_handshake_start(s);",
          "3283:         p = ssl_handshake_start(s) + 4;",
          "3284:         s2n(len - 6, p);",
          "3285:         if (!ssl_set_handshake_header(s, SSL3_MT_NEWSESSION_TICKET, len))",
          "3287:         s->state = SSL3_ST_SW_SESSION_TICKET_B;",
          "3288:         OPENSSL_free(senc);",
          "3292:     return ssl_do_write(s);",
          "3297:     s->state = SSL_ST_ERR;",
          "3298:     return -1;",
          "3304:         unsigned char *p;",
          "3311:         if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen)) {",
          "3312:             s->state = SSL_ST_ERR;",
          "3314:         }",
          "3316:         p = (unsigned char *)s->init_buf->data;",
          "3321:         l2n3(s->tlsext_ocsp_resplen + 4, p);",
          "3325:         l2n3(s->tlsext_ocsp_resplen, p);",
          "3327:         memcpy(p, s->tlsext_ocsp_resp, s->tlsext_ocsp_resplen);",
          "3329:         s->init_num = 8 + s->tlsext_ocsp_resplen;",
          "3331:         s->init_off = 0;",
          "",
          "[Added Lines]",
          "3279: int tls_construct_server_certificate(SSL *s)",
          "3280: {",
          "3281:     CERT_PKEY *cpk;",
          "3283:     cpk = ssl_get_server_send_pkey(s);",
          "3284:     if (cpk == NULL) {",
          "3285:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3286:         statem_set_error(s);",
          "3287:         return 0;",
          "3288:     }",
          "3290:     if (!ssl3_output_cert_chain(s, cpk)) {",
          "3291:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3292:         statem_set_error(s);",
          "3293:         return 0;",
          "3294:     }",
          "3296:     return 1;",
          "3297: }",
          "3303:         if (tls_construct_new_session_ticket(s) == 0)",
          "3306:         s->state = SSL3_ST_SW_SESSION_TICKET_B;",
          "3307:     }",
          "3310:     return ssl_do_write(s);",
          "3311: }",
          "3313: int tls_construct_new_session_ticket(SSL *s)",
          "3314: {",
          "3315:     unsigned char *senc = NULL;",
          "3316:     EVP_CIPHER_CTX ctx;",
          "3317:     HMAC_CTX hctx;",
          "3318:     unsigned char *p, *macstart;",
          "3319:     const unsigned char *const_p;",
          "3320:     int len, slen_full, slen;",
          "3321:     SSL_SESSION *sess;",
          "3322:     unsigned int hlen;",
          "3323:     SSL_CTX *tctx = s->initial_ctx;",
          "3324:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "3325:     unsigned char key_name[16];",
          "3328:     slen_full = i2d_SSL_SESSION(s->session, NULL);",
          "3333:     if (slen_full == 0 || slen_full > 0xFF00) {",
          "3334:         statem_set_error(s);",
          "3335:         return 0;",
          "3336:     }",
          "3337:     senc = OPENSSL_malloc(slen_full);",
          "3338:     if (!senc) {",
          "3339:         statem_set_error(s);",
          "3340:         return 0;",
          "3341:     }",
          "3343:     EVP_CIPHER_CTX_init(&ctx);",
          "3344:     HMAC_CTX_init(&hctx);",
          "3346:     p = senc;",
          "3347:     if (!i2d_SSL_SESSION(s->session, &p))",
          "3348:         goto err;",
          "3353:     const_p = senc;",
          "3354:     sess = d2i_SSL_SESSION(NULL, &const_p, slen_full);",
          "3355:     if (sess == NULL)",
          "3356:         goto err;",
          "3359:     slen = i2d_SSL_SESSION(sess, NULL);",
          "3361:         SSL_SESSION_free(sess);",
          "3362:         goto err;",
          "3363:     }",
          "3364:     p = senc;",
          "3365:     if (!i2d_SSL_SESSION(sess, &p)) {",
          "3366:         SSL_SESSION_free(sess);",
          "3367:         goto err;",
          "3368:     }",
          "3369:     SSL_SESSION_free(sess);",
          "3379:     if (!BUF_MEM_grow(s->init_buf,",
          "3380:                       SSL_HM_HEADER_LENGTH(s) + 22 + EVP_MAX_IV_LENGTH +",
          "3381:                       EVP_MAX_BLOCK_LENGTH + EVP_MAX_MD_SIZE + slen))",
          "3382:         goto err;",
          "3384:     p = ssl_handshake_start(s);",
          "3389:     if (tctx->tlsext_ticket_key_cb) {",
          "3390:         if (tctx->tlsext_ticket_key_cb(s, key_name, iv, &ctx,",
          "3391:                                        &hctx, 1) < 0)",
          "3392:             goto err;",
          "3393:     } else {",
          "3394:         if (RAND_bytes(iv, 16) <= 0)",
          "3396:         if (!EVP_EncryptInit_ex(&ctx, EVP_aes_128_cbc(), NULL,",
          "3397:                                 tctx->tlsext_tick_aes_key, iv))",
          "3399:         if (!HMAC_Init_ex(&hctx, tctx->tlsext_tick_hmac_key, 16,",
          "3400:                           EVP_sha256(), NULL))",
          "3402:         memcpy(key_name, tctx->tlsext_tick_key_name, 16);",
          "3410:     l2n(s->hit ? 0 : s->session->timeout, p);",
          "3413:     p += 2;",
          "3415:     macstart = p;",
          "3416:     memcpy(p, key_name, 16);",
          "3417:     p += 16;",
          "3419:     memcpy(p, iv, EVP_CIPHER_CTX_iv_length(&ctx));",
          "3420:     p += EVP_CIPHER_CTX_iv_length(&ctx);",
          "3422:     if (!EVP_EncryptUpdate(&ctx, p, &len, senc, slen))",
          "3423:         goto err;",
          "3424:     p += len;",
          "3425:     if (!EVP_EncryptFinal(&ctx, p, &len))",
          "3426:         goto err;",
          "3427:     p += len;",
          "3429:     if (!HMAC_Update(&hctx, macstart, p - macstart))",
          "3430:         goto err;",
          "3431:     if (!HMAC_Final(&hctx, p, &hlen))",
          "3432:         goto err;",
          "3434:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "3435:     HMAC_CTX_cleanup(&hctx);",
          "3437:     p += hlen;",
          "3440:     len = p - ssl_handshake_start(s);",
          "3442:     p = ssl_handshake_start(s) + 4;",
          "3443:     s2n(len - 6, p);",
          "3444:     if (!ssl_set_handshake_header(s, SSL3_MT_NEWSESSION_TICKET, len))",
          "3445:         goto err;",
          "3446:     OPENSSL_free(senc);",
          "3448:     return 1;",
          "3453:     statem_set_error(s);",
          "3454:     return 0;",
          "3460:         if (tls_construct_cert_status(s) == 0)",
          "3470: int tls_construct_cert_status(SSL *s)",
          "3471: {",
          "3472:     unsigned char *p;",
          "3479:     if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen)) {",
          "3480:         statem_set_error(s);",
          "3481:         return 0;",
          "3482:     }",
          "3484:     p = (unsigned char *)s->init_buf->data;",
          "3489:     l2n3(s->tlsext_ocsp_resplen + 4, p);",
          "3493:     l2n3(s->tlsext_ocsp_resplen, p);",
          "3495:     memcpy(p, s->tlsext_ocsp_resp, s->tlsext_ocsp_resplen);",
          "3497:     s->init_num = 8 + s->tlsext_ocsp_resplen;",
          "3498:     s->init_off = 0;",
          "3500:     return 1;",
          "3501: }",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3344: {",
          "3345:     int ok;",
          "3346:     long n;",
          "",
          "[Removed Lines]",
          "3347:     PACKET pkt, next_proto, padding;",
          "3348:     size_t next_proto_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3375:     if (!s->s3->change_cipher_spec) {",
          "3376:         SSLerr(SSL_F_SSL3_GET_NEXT_PROTO, SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS);",
          "3378:         return -1;",
          "3379:     }",
          "3381:     if (n < 2) {",
          "3383:     }",
          "3385:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "3387:         goto err;",
          "3388:     }",
          "",
          "[Removed Lines]",
          "3377:         s->state = SSL_ST_ERR;",
          "3386:         SSLerr(SSL_F_SSL3_GET_NEXT_PROTO, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "3540:         statem_set_error(s);",
          "3544:     if (tls_process_next_proto(s, n) == 0)",
          "3545:         return -1;",
          "3547:     return n;",
          "3548: }",
          "3554: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n)",
          "3555: {",
          "3556:     PACKET pkt, next_proto, padding;",
          "3557:     size_t next_proto_len;",
          "3564:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3397:     if (!PACKET_get_length_prefixed_1(&pkt, &next_proto)",
          "3398:         || !PACKET_get_length_prefixed_1(&pkt, &padding)",
          "3399:         || PACKET_remaining(&pkt) > 0) {",
          "3401:         goto err;",
          "3402:     }",
          "",
          "[Removed Lines]",
          "3400:         SSLerr(SSL_F_SSL3_GET_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "3578:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3410:     s->next_proto_negotiated_len = (unsigned char)next_proto_len;",
          "3413: err:",
          "3416: }",
          "3417: #endif",
          "",
          "[Removed Lines]",
          "3412:     return 1;",
          "3414:     s->state = SSL_ST_ERR;",
          "3415:     return 0;",
          "",
          "[Added Lines]",
          "3590:     return MSG_PROCESS_CONTINUE_READING;",
          "3592:     statem_set_error(s);",
          "3593:     return MSG_PROCESS_ERROR;",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     {ERR_FUNC(SSL_F_TLS1_SET_SERVER_SIGALGS), \"tls1_set_server_sigalgs\"},",
          "340:     {ERR_FUNC(SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK),",
          "341:      \"tls_client_key_exchange_post_work\"},",
          "342:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE),",
          "343:      \"tls_construct_client_certificate\"},",
          "344:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO), \"tls_construct_client_hello\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST),",
          "343:      \"tls_construct_certificate_request\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY),",
          "348:      \"tls_construct_client_verify\"},",
          "349:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_FINISHED), \"tls_construct_finished\"},",
          "350:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "351:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "352:     {ERR_FUNC(SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE),",
          "353:      \"tls_prepare_client_certificate\"},",
          "354:     {ERR_FUNC(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST),",
          "355:      \"tls_process_certificate_request\"},",
          "356:     {ERR_FUNC(SSL_F_TLS_PROCESS_CERT_STATUS), \"tls_process_cert_status\"},",
          "357:     {ERR_FUNC(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC),",
          "358:      \"tls_process_change_cipher_spec\"},",
          "359:     {ERR_FUNC(SSL_F_TLS_PROCESS_FINISHED), \"tls_process_finished\"},",
          "360:     {ERR_FUNC(SSL_F_TLS_PROCESS_KEY_EXCHANGE), \"tls_process_key_exchange\"},",
          "361:     {ERR_FUNC(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET),",
          "362:      \"tls_process_new_session_ticket\"},",
          "363:     {ERR_FUNC(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE),",
          "364:      \"tls_process_server_certificate\"},",
          "365:     {ERR_FUNC(SSL_F_TLS_PROCESS_SERVER_DONE), \"tls_process_server_done\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_HELLO_REQUEST),",
          "353:      \"tls_construct_hello_request\"},",
          "354:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE),",
          "355:      \"tls_construct_server_certificate\"},",
          "356:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_DONE), \"tls_construct_server_done\"},",
          "357:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_HELLO), \"tls_construct_server_hello\"},",
          "358:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE),",
          "359:      \"tls_construct_server_key_exchange\"},",
          "362:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO),",
          "363:      \"tls_post_process_client_hello\"},",
          "369:     {ERR_FUNC(SSL_F_TLS_PROCESS_CERT_VERIFY), \"tls_process_cert_verify\"},",
          "372:     {ERR_FUNC(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE),",
          "373:      \"tls_process_client_certificate\"},",
          "374:     {ERR_FUNC(SSL_F_TLS_PROCESS_CLIENT_HELLO), \"tls_process_client_hello\"},",
          "375:     {ERR_FUNC(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE),",
          "376:      \"tls_process_client_key_exchange\"},",
          "381:     {ERR_FUNC(SSL_F_TLS_PROCESS_NEXT_PROTO), \"tls_process_next_proto\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     s->init_buf = NULL;",
          "229:     clear_ciphers(s);",
          "230:     s->first_packet = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:     s->no_cert_verify = 0;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1161:     void (*msg_callback) (int write_p, int version, int content_type,",
          "1162:                           const void *buf, size_t len, SSL *ssl, void *arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:     unsigned int no_cert_verify;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1557: typedef struct dtls1_state_st {",
          "1558:     unsigned char cookie[DTLS1_COOKIE_LENGTH];",
          "1559:     unsigned int cookie_len;",
          "1562:     unsigned short handshake_write_seq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1563:     unsigned int cookie_verified;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2051: __owur int ssl3_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p);",
          "2052: void ssl3_init_finished_mac(SSL *s);",
          "2053: __owur int ssl3_send_server_certificate(SSL *s);",
          "2054: __owur int ssl3_send_newsession_ticket(SSL *s);",
          "2055: __owur int ssl3_send_cert_status(SSL *s);",
          "2056: __owur int ssl3_get_change_cipher_spec(SSL *s, int a, int b);",
          "2057: __owur int ssl3_get_finished(SSL *s, int state_a, int state_b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2058: __owur int tls_construct_server_certificate(SSL *s);",
          "2060: __owur int tls_construct_new_session_ticket(SSL *s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2193:                                                      enum WORK_STATE wst);",
          "2194: __owur int tls_construct_server_hello(SSL *s);",
          "2195: __owur int ssl3_send_hello_request(SSL *s);",
          "2196: __owur int ssl3_send_server_key_exchange(SSL *s);",
          "2197: __owur int ssl3_send_certificate_request(SSL *s);",
          "2198: __owur int ssl3_send_server_done(SSL *s);",
          "2199: __owur int ssl3_get_client_certificate(SSL *s);",
          "2200: __owur int ssl3_get_client_key_exchange(SSL *s);",
          "2201: __owur int ssl3_get_cert_verify(SSL *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2202: __owur int tls_construct_hello_request(SSL *s);",
          "2204: __owur int tls_construct_server_key_exchange(SSL *s);",
          "2206: __owur int tls_construct_certificate_request(SSL *s);",
          "2208: __owur int tls_construct_server_done(SSL *s);",
          "",
          "---------------"
        ]
      }
    }
  ]
}