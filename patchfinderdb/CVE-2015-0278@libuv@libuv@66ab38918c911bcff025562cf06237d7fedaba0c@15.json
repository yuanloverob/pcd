{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "897463326ba4b504f707736d16f88f8d39bafcc6",
      "candidate_info": {
        "commit_hash": "897463326ba4b504f707736d16f88f8d39bafcc6",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/897463326ba4b504f707736d16f88f8d39bafcc6",
        "files": [
          "src/uv-common.c"
        ],
        "message": "unix, windows: clean up uv_thread_create()\n\nMake uv_thread_create() and its helper function a little more DRY and\na little less impenetrable.",
        "before_after_code_files": [
          "src/uv-common.c||src/uv-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   return uv__udp_recv_stop(handle);",
          "302: }",
          "304: #ifdef _WIN32",
          "306: #else",
          "308: #endif",
          "309: {",
          "324:   return 0;",
          "325: }",
          "328: int uv_thread_create(uv_thread_t *tid, void (*entry)(void *arg), void *arg) {",
          "335:     return -1;",
          "337:   ctx->entry = entry;",
          "",
          "[Removed Lines]",
          "305: static UINT __stdcall uv__thread_start(void *ctx_v)",
          "307: static void *uv__thread_start(void *ctx_v)",
          "310:   void (*entry)(void *arg);",
          "311:   void *arg;",
          "313:   struct {",
          "314:     void (*entry)(void *arg);",
          "315:     void *arg;",
          "316:   } *ctx;",
          "318:   ctx = ctx_v;",
          "319:   arg = ctx->arg;",
          "320:   entry = ctx->entry;",
          "321:   free(ctx);",
          "322:   entry(arg);",
          "329:   struct {",
          "330:     void (*entry)(void *arg);",
          "331:     void *arg;",
          "332:   } *ctx;",
          "334:   if ((ctx = malloc(sizeof *ctx)) == NULL)",
          "",
          "[Added Lines]",
          "305: struct thread_ctx {",
          "306:   void (*entry)(void* arg);",
          "307:   void* arg;",
          "308: };",
          "312: static UINT __stdcall uv__thread_start(void* arg)",
          "314: static void* uv__thread_start(void *arg)",
          "317:   struct thread_ctx *ctx_p;",
          "318:   struct thread_ctx ctx;",
          "320:   ctx_p = arg;",
          "321:   ctx = *ctx_p;",
          "322:   free(ctx_p);",
          "323:   ctx.entry(ctx.arg);",
          "330:   struct thread_ctx* ctx;",
          "331:   int err;",
          "333:   ctx = malloc(sizeof(*ctx));",
          "334:   if (ctx == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340: #ifdef _WIN32",
          "343: #else",
          "345: #endif",
          "346:     free(ctx);",
          "351: }",
          "",
          "[Removed Lines]",
          "342:   if (*tid == 0) {",
          "344:   if (pthread_create(tid, NULL, uv__thread_start, ctx)) {",
          "347:     return -1;",
          "348:   }",
          "350:   return 0;",
          "",
          "[Added Lines]",
          "342:   err = *tid ? 0 : errno;",
          "344:   err = pthread_create(tid, NULL, uv__thread_start, ctx);",
          "347:   if (err)",
          "350:   return err ? -1 : 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c82e7033a5d6c604b891c1f722cf23a063c202b0",
      "candidate_info": {
        "commit_hash": "c82e7033a5d6c604b891c1f722cf23a063c202b0",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c82e7033a5d6c604b891c1f722cf23a063c202b0",
        "files": [
          "src/unix/fsevents.c"
        ],
        "message": "darwin: reduce fsevents thread stack size\n\nThe fsevents watcher thread only needs a minimal amount of stack space\nin order to run. Restrict its stack size so there's more address space\nleft for the libuv user.",
        "before_after_code_files": [
          "src/unix/fsevents.c||src/unix/fsevents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include <assert.h>",
          "45: #include <stdlib.h>",
          "46: #include <CoreFoundation/CFRunLoop.h>",
          "47: #include <CoreServices/CoreServices.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include <pthread.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: static void uv__cf_loop_cb(void* arg);",
          "68: static void uv__cf_loop_signal(uv_loop_t* loop,",
          "69:                                cf_loop_signal_cb cb,",
          "70:                                void* arg);",
          "",
          "[Removed Lines]",
          "67: static void uv__cf_loop_runner(void* arg);",
          "",
          "[Added Lines]",
          "69: static void* uv__cf_loop_runner(void* arg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225: static int uv__fsevents_loop_init(uv_loop_t* loop) {",
          "226:   CFRunLoopSourceContext ctx;",
          "227:   int err;",
          "229:   if (loop->cf_loop != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   pthread_attr_t attr_storage;",
          "230:   pthread_attr_t* attr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:   ctx.perform = uv__cf_loop_cb;",
          "244:   loop->cf_cb = CFRunLoopSourceCreate(NULL, 0, &ctx);",
          "247:   if (err)",
          "248:     goto fail_thread_create;",
          "",
          "[Removed Lines]",
          "246:   err = uv_thread_create(&loop->cf_thread, uv__cf_loop_runner, loop);",
          "",
          "[Added Lines]",
          "254:   attr = &attr_storage;",
          "255:   if (pthread_attr_init(attr))",
          "256:     attr = NULL;",
          "258:   if (attr != NULL)",
          "259:     if (pthread_attr_setstacksize(attr, 3 * PTHREAD_STACK_MIN))",
          "260:       abort();",
          "263:   err = -pthread_create(&loop->cf_thread, attr, uv__cf_loop_runner, loop);",
          "265:   if (attr != NULL)",
          "266:     pthread_attr_destroy(attr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "283: }",
          "287:   uv_loop_t* loop;",
          "289:   loop = arg;",
          "",
          "[Removed Lines]",
          "286: static void uv__cf_loop_runner(void* arg) {",
          "",
          "[Added Lines]",
          "307: static void* uv__cf_loop_runner(void* arg) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "299:   CFRunLoopRemoveSource(loop->cf_loop,",
          "300:                         loop->cf_cb,",
          "301:                         kCFRunLoopDefaultMode);",
          "302: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:   return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca4741b4a586c6f97f8edf91b5b3c87245210e5b",
      "candidate_info": {
        "commit_hash": "ca4741b4a586c6f97f8edf91b5b3c87245210e5b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ca4741b4a586c6f97f8edf91b5b3c87245210e5b",
        "files": [
          "include/uv-win.h",
          "src/win/process.c"
        ],
        "message": "windows: fix build on MinGW",
        "before_after_code_files": [
          "include/uv-win.h||include/uv-win.h",
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: } WSAPOLLFD, *PWSAPOLLFD, *LPWSAPOLLFD;",
          "40: #endif",
          "42: #include <mswsock.h>",
          "43: #include <ws2tcpip.h>",
          "44: #include <windows.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #ifndef LOCALE_INVARIANT",
          "43: # define LOCALE_INVARIANT 0x007f",
          "44: #endif",
          "46: #ifndef _malloca",
          "47: # if defined(_DEBUG)",
          "48: #  define _malloca(size) malloc(size)",
          "49: #  define _freea(ptr) free(ptr)",
          "50: # else",
          "51: #  define _malloca(size) alloca(size)",
          "52: #  define _freea(ptr)",
          "53: # endif",
          "54: #endif",
          "",
          "---------------"
        ],
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "800:       i++;",
          "801:     } else {",
          "804:       len = wcslen(*ptr_copy) + 1;",
          "807:       ptr_copy++;",
          "808:       if (cmp == 0)",
          "809:         i++;",
          "",
          "[Removed Lines]",
          "803:       DWORD r;",
          "805:       r = wmemcpy_s(ptr, (env_len - (ptr - dst)), *ptr_copy, len);",
          "806:       assert(!r);",
          "",
          "[Added Lines]",
          "804:       wmemcpy(ptr, *ptr_copy, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c675c4a4e4d7931104900aeb56827e030d84fa9",
      "candidate_info": {
        "commit_hash": "5c675c4a4e4d7931104900aeb56827e030d84fa9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5c675c4a4e4d7931104900aeb56827e030d84fa9",
        "files": [
          "include/uv.h",
          "src/uv-common.c",
          "test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c",
          "test/benchmark-pound.c",
          "test/benchmark-pump.c",
          "test/benchmark-tcp-write-batch.c",
          "test/test-callback-stack.c",
          "test/test-connection-fail.c",
          "test/test-delayed-accept.c",
          "test/test-getsockname.c",
          "test/test-ipc.c",
          "test/test-multiple-listen.c",
          "test/test-ping-pong.c",
          "test/test-ref.c",
          "test/test-shutdown-close.c",
          "test/test-shutdown-eof.c",
          "test/test-tcp-close-while-connecting.c",
          "test/test-tcp-close.c",
          "test/test-tcp-connect-error-after-write.c",
          "test/test-tcp-connect-error.c",
          "test/test-tcp-connect-timeout.c",
          "test/test-tcp-connect6-error.c",
          "test/test-tcp-open.c",
          "test/test-tcp-read-stop.c",
          "test/test-tcp-shutdown-after-write.c",
          "test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c",
          "test/test-tcp-writealot.c"
        ],
        "message": "include: merge uv_tcp_connect and uv_tcp_connect6\n\nMerge uv_tcp_connect6() into uv_tcp_connect().  uv_tcp_connect() now\ntakes a const struct sockaddr*.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c",
          "test/benchmark-pound.c||test/benchmark-pound.c",
          "test/benchmark-pump.c||test/benchmark-pump.c",
          "test/benchmark-tcp-write-batch.c||test/benchmark-tcp-write-batch.c",
          "test/test-callback-stack.c||test/test-callback-stack.c",
          "test/test-connection-fail.c||test/test-connection-fail.c",
          "test/test-delayed-accept.c||test/test-delayed-accept.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ipc.c||test/test-ipc.c",
          "test/test-multiple-listen.c||test/test-multiple-listen.c",
          "test/test-ping-pong.c||test/test-ping-pong.c",
          "test/test-ref.c||test/test-ref.c",
          "test/test-shutdown-close.c||test/test-shutdown-close.c",
          "test/test-shutdown-eof.c||test/test-shutdown-eof.c",
          "test/test-tcp-close-while-connecting.c||test/test-tcp-close-while-connecting.c",
          "test/test-tcp-close.c||test/test-tcp-close.c",
          "test/test-tcp-connect-error-after-write.c||test/test-tcp-connect-error-after-write.c",
          "test/test-tcp-connect-error.c||test/test-tcp-connect-error.c",
          "test/test-tcp-connect-timeout.c||test/test-tcp-connect-timeout.c",
          "test/test-tcp-connect6-error.c||test/test-tcp-connect6-error.c",
          "test/test-tcp-open.c||test/test-tcp-open.c",
          "test/test-tcp-read-stop.c||test/test-tcp-read-stop.c",
          "test/test-tcp-shutdown-after-write.c||test/test-tcp-shutdown-after-write.c",
          "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c",
          "test/test-tcp-writealot.c||test/test-tcp-writealot.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     int* namelen);",
          "786: UV_EXTERN int uv_tcp_connect(uv_connect_t* req,",
          "787:                              uv_tcp_t* handle,",
          "789:                              uv_connect_cb cb);",
          "797: struct uv_connect_s {",
          "798:   UV_REQ_FIELDS",
          "",
          "[Removed Lines]",
          "788:                              const struct sockaddr_in* addr,",
          "791: UV_EXTERN int uv_tcp_connect6(uv_connect_t* req,",
          "792:                               uv_tcp_t* handle,",
          "793:                               const struct sockaddr_in6* addr,",
          "794:                               uv_connect_cb cb);",
          "",
          "[Added Lines]",
          "790:                              const struct sockaddr* addr,",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: int uv_tcp_connect(uv_connect_t* req,",
          "238:                    uv_tcp_t* handle,",
          "240:                    uv_connect_cb cb) {",
          "264: }",
          "",
          "[Removed Lines]",
          "239:                    const struct sockaddr_in* addr,",
          "241:   if (handle->type == UV_TCP && addr->sin_family == AF_INET) {",
          "242:     return uv__tcp_connect(req,",
          "243:                            handle,",
          "244:                            (const struct sockaddr*) addr,",
          "245:                            sizeof(*addr),",
          "246:                            cb);",
          "247:   }",
          "248:   return UV_EINVAL;",
          "249: }",
          "252: int uv_tcp_connect6(uv_connect_t* req,",
          "253:                     uv_tcp_t* handle,",
          "254:                     const struct sockaddr_in6* addr,",
          "255:                     uv_connect_cb cb) {",
          "256:   if (handle->type == UV_TCP && addr->sin6_family == AF_INET6) {",
          "257:     return uv__tcp_connect(req,",
          "258:                            handle,",
          "259:                            (const struct sockaddr*) addr,",
          "260:                            sizeof(*addr),",
          "261:                            cb);",
          "262:   }",
          "263:   return UV_EINVAL;",
          "",
          "[Added Lines]",
          "239:                    const struct sockaddr* addr,",
          "241:   unsigned int addrlen;",
          "243:   if (handle->type != UV_TCP)",
          "244:     return UV_EINVAL;",
          "246:   if (addr->sa_family == AF_INET)",
          "247:     addrlen = sizeof(struct sockaddr_in);",
          "248:   else if (addr->sa_family == AF_INET6)",
          "249:     addrlen = sizeof(struct sockaddr_in6);",
          "250:   else",
          "251:     return UV_EINVAL;",
          "253:   return uv__tcp_connect(req, handle, addr, addrlen, cb);",
          "",
          "---------------"
        ],
        "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c": [
          "File: test/benchmark-multi-accept.c -> test/benchmark-multi-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   ASSERT(0 == uv_tcp_init(handle->loop, (uv_tcp_t*) &ctx->client_handle));",
          "348:   ASSERT(0 == uv_tcp_connect(&ctx->connect_req,",
          "349:                              (uv_tcp_t*) &ctx->client_handle,",
          "351:                              cl_connect_cb));",
          "352: }",
          "",
          "[Removed Lines]",
          "350:                              &listen_addr,",
          "",
          "[Added Lines]",
          "350:                              (const struct sockaddr*) &listen_addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:     ASSERT(0 == uv_tcp_init(loop, handle));",
          "389:     ASSERT(0 == uv_tcp_connect(&ctx->connect_req,",
          "390:                                handle,",
          "392:                                cl_connect_cb));",
          "393:     ASSERT(0 == uv_idle_init(loop, &ctx->idle_handle));",
          "394:   }",
          "",
          "[Removed Lines]",
          "391:                                &listen_addr,",
          "",
          "[Added Lines]",
          "391:                                (const struct sockaddr*) &listen_addr,",
          "",
          "---------------"
        ],
        "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c": [
          "File: test/benchmark-ping-pongs.c -> test/benchmark-ping-pongs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:   r = uv_tcp_connect(&pinger->connect_req,",
          "197:                      &pinger->tcp,",
          "199:                      pinger_connect_cb);",
          "200:   ASSERT(!r);",
          "201: }",
          "",
          "[Removed Lines]",
          "198:                      &server_addr,",
          "",
          "[Added Lines]",
          "198:                      (const struct sockaddr*) &server_addr,",
          "",
          "---------------"
        ],
        "test/benchmark-pound.c||test/benchmark-pound.c": [
          "File: test/benchmark-pound.c -> test/benchmark-pound.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "208:   if (r) {",
          "209:     fprintf(stderr, \"uv_tcp_connect error %s\\n\", uv_err_name(r));",
          "210:     ASSERT(0);",
          "",
          "[Removed Lines]",
          "207:   r = uv_tcp_connect(&tp->conn_req, (uv_tcp_t*) &p->stream, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "207:   r = uv_tcp_connect(&tp->conn_req,",
          "208:                      (uv_tcp_t*) &p->stream,",
          "209:                      (const struct sockaddr*) &addr,",
          "210:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/benchmark-pump.c||test/benchmark-pump.c": [
          "File: test/benchmark-pump.c -> test/benchmark-pump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:       ASSERT(r == 0);",
          "242:       req = (uv_connect_t*) req_alloc();",
          "244:       ASSERT(r == 0);",
          "245:     } else {",
          "246:       pipe = &pipe_write_handles[max_connect_socket++];",
          "",
          "[Removed Lines]",
          "243:       r = uv_tcp_connect(req, tcp, &connect_addr, connect_cb);",
          "",
          "[Added Lines]",
          "243:       r = uv_tcp_connect(req,",
          "244:                          tcp,",
          "245:                          (const struct sockaddr*) &connect_addr,",
          "246:                          connect_cb);",
          "",
          "---------------"
        ],
        "test/benchmark-tcp-write-batch.c||test/benchmark-tcp-write-batch.c": [
          "File: test/benchmark-tcp-write-batch.c -> test/benchmark-tcp-write-batch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   r = uv_tcp_init(loop, &tcp_client);",
          "118:   ASSERT(r == 0);",
          "121:   ASSERT(r == 0);",
          "123:   start = uv_hrtime();",
          "",
          "[Removed Lines]",
          "120:   r = uv_tcp_connect(&connect_req, &tcp_client, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "120:   r = uv_tcp_connect(&connect_req,",
          "121:                      &tcp_client,",
          "122:                      (const struct sockaddr*) &addr,",
          "123:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-callback-stack.c||test/test-callback-stack.c": [
          "File: test/test-callback-stack.c -> test/test-callback-stack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   nested++;",
          "187:     FATAL(\"uv_tcp_connect failed\");",
          "188:   }",
          "189:   nested--;",
          "",
          "[Removed Lines]",
          "186:   if (uv_tcp_connect(&connect_req, &client, &addr, connect_cb)) {",
          "",
          "[Added Lines]",
          "186:   if (uv_tcp_connect(&connect_req,",
          "187:                      &client,",
          "188:                      (const struct sockaddr*) &addr,",
          "189:                      connect_cb)) {",
          "",
          "---------------"
        ],
        "test/test-connection-fail.c||test/test-connection-fail.c": [
          "File: test/test-connection-fail.c -> test/test-connection-fail.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr));",
          "107:   ASSERT(!r);",
          "109:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "106:   r = uv_tcp_connect(&req, &tcp, &server_addr, connect_cb);",
          "",
          "[Added Lines]",
          "106:   r = uv_tcp_connect(&req,",
          "107:                      &tcp,",
          "108:                      (const struct sockaddr*) &server_addr,",
          "109:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-delayed-accept.c||test/test-delayed-accept.c": [
          "File: test/test-delayed-accept.c -> test/test-delayed-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   r = uv_tcp_init(uv_default_loop(), client);",
          "164:   ASSERT(r == 0);",
          "167:   ASSERT(r == 0);",
          "168: }",
          "",
          "[Removed Lines]",
          "166:   r = uv_tcp_connect(connect_req, client, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "166:   r = uv_tcp_connect(connect_req,",
          "167:                      client,",
          "168:                      (const struct sockaddr*) &addr,",
          "169:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   tcp.data = &connect_req;",
          "220:   ASSERT(!r);",
          "223:   ASSERT(!r);",
          "",
          "[Removed Lines]",
          "222:   r = uv_tcp_connect(&connect_req, &tcp, &server_addr, on_connect);",
          "",
          "[Added Lines]",
          "222:   r = uv_tcp_connect(&connect_req,",
          "223:                      &tcp,",
          "224:                      (const struct sockaddr*) &server_addr,",
          "225:                      on_connect);",
          "",
          "---------------"
        ],
        "test/test-ipc.c||test/test-ipc.c": [
          "File: test/test-ipc.c -> test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     r = uv_tcp_connect(&conn->conn_req,",
          "131:                        (uv_tcp_t*) &conn->conn,",
          "133:                        connect_cb);",
          "134:     ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "132:                        &addr,",
          "",
          "[Added Lines]",
          "132:                        (const struct sockaddr*) &addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633:   r = uv_tcp_connect(&conn.conn_req,",
          "634:                      (uv_tcp_t*) &conn.conn,",
          "636:                      connect_child_process_cb);",
          "637:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "635:                      &addr,",
          "",
          "[Added Lines]",
          "635:                      (const struct sockaddr*) &addr,",
          "",
          "---------------"
        ],
        "test/test-multiple-listen.c||test/test-multiple-listen.c": [
          "File: test/test-multiple-listen.c -> test/test-multiple-listen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   r = uv_tcp_init(uv_default_loop(), &client);",
          "85:   ASSERT(r == 0);",
          "88:   ASSERT(r == 0);",
          "89: }",
          "",
          "[Removed Lines]",
          "87:   r = uv_tcp_connect(connect_req, &client, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "87:   r = uv_tcp_connect(connect_req,",
          "88:                      &client,",
          "89:                      (const struct sockaddr*) &addr,",
          "90:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-ping-pong.c||test/test-ping-pong.c": [
          "File: test/test-ping-pong.c -> test/test-ping-pong.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   ASSERT(!r);",
          "",
          "[Removed Lines]",
          "166:   r = uv_tcp_connect6(&pinger->connect_req,",
          "167:                       &pinger->stream.tcp,",
          "168:                       &server_addr,",
          "169:                       pinger_on_connect);",
          "",
          "[Added Lines]",
          "166:   r = uv_tcp_connect(&pinger->connect_req,",
          "167:                      &pinger->stream.tcp,",
          "168:                      (const struct sockaddr*) &server_addr,",
          "169:                      pinger_on_connect);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:   r = uv_tcp_connect(&pinger->connect_req,",
          "195:                      &pinger->stream.tcp,",
          "197:                      pinger_on_connect);",
          "198:   ASSERT(!r);",
          "",
          "[Removed Lines]",
          "196:                      &server_addr,",
          "",
          "[Added Lines]",
          "196:                      (const struct sockaddr*) &server_addr,",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:   uv_tcp_t h;",
          "259:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "260:   uv_tcp_init(uv_default_loop(), &h);",
          "262:   uv_unref((uv_handle_t*)&h);",
          "263:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "264:   ASSERT(connect_cb_called == 1);",
          "",
          "[Removed Lines]",
          "261:   uv_tcp_connect(&connect_req, &h, &addr, connect_and_shutdown);",
          "",
          "[Added Lines]",
          "261:   uv_tcp_connect(&connect_req,",
          "262:                  &h,",
          "263:                  (const struct sockaddr*) &addr,",
          "264:                  connect_and_shutdown);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   uv_tcp_t h;",
          "275:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "276:   uv_tcp_init(uv_default_loop(), &h);",
          "278:   uv_unref((uv_handle_t*)&h);",
          "279:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "280:   ASSERT(connect_cb_called == 1);",
          "",
          "[Removed Lines]",
          "277:   uv_tcp_connect(&connect_req, &h, &addr, connect_and_write);",
          "",
          "[Added Lines]",
          "280:   uv_tcp_connect(&connect_req,",
          "281:                  &h,",
          "282:                  (const struct sockaddr*) &addr,",
          "283:                  connect_and_write);",
          "",
          "---------------"
        ],
        "test/test-shutdown-close.c||test/test-shutdown-close.c": [
          "File: test/test-shutdown-close.c -> test/test-shutdown-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "73:   r = uv_tcp_init(uv_default_loop(), &h);",
          "74:   ASSERT(r == 0);",
          "76:   ASSERT(r == 0);",
          "77:   r = uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "78:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "75:   r = uv_tcp_connect(&connect_req, &h, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "75:   r = uv_tcp_connect(&connect_req,",
          "76:                      &h,",
          "77:                      (const struct sockaddr*) &addr,",
          "78:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-shutdown-eof.c||test/test-shutdown-eof.c": [
          "File: test/test-shutdown-eof.c -> test/test-shutdown-eof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   r = uv_tcp_init(uv_default_loop(), &tcp);",
          "161:   ASSERT(!r);",
          "164:   ASSERT(!r);",
          "166:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "163:   r = uv_tcp_connect(&connect_req, &tcp, &server_addr, connect_cb);",
          "",
          "[Added Lines]",
          "163:   r = uv_tcp_connect(&connect_req,",
          "164:                      &tcp,",
          "165:                      (const struct sockaddr*) &server_addr,",
          "166:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-close-while-connecting.c||test/test-tcp-close-while-connecting.c": [
          "File: test/test-tcp-close-while-connecting.c -> test/test-tcp-close-while-connecting.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   loop = uv_default_loop();",
          "64:   ASSERT(0 == uv_ip4_addr(\"1.2.3.4\", TEST_PORT, &addr));",
          "65:   ASSERT(0 == uv_tcp_init(loop, &tcp_handle));",
          "67:   ASSERT(0 == uv_timer_init(loop, &timer1_handle));",
          "68:   ASSERT(0 == uv_timer_start(&timer1_handle, timer1_cb, 50, 0));",
          "69:   ASSERT(0 == uv_timer_init(loop, &timer2_handle));",
          "",
          "[Removed Lines]",
          "66:   ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, &addr, connect_cb));",
          "",
          "[Added Lines]",
          "66:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "67:                              &tcp_handle,",
          "68:                              (const struct sockaddr*) &addr,",
          "69:                              connect_cb));",
          "",
          "---------------"
        ],
        "test/test-tcp-close.c||test/test-tcp-close.c": [
          "File: test/test-tcp-close.c -> test/test-tcp-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   r = uv_tcp_init(loop, &tcp_handle);",
          "115:   ASSERT(r == 0);",
          "118:   ASSERT(r == 0);",
          "120:   ASSERT(write_cb_called == 0);",
          "",
          "[Removed Lines]",
          "117:   r = uv_tcp_connect(&connect_req, &tcp_handle, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "117:   r = uv_tcp_connect(&connect_req,",
          "118:                      &tcp_handle,",
          "119:                      (const struct sockaddr*) &addr,",
          "120:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-connect-error-after-write.c||test/test-tcp-connect-error-after-write.c": [
          "File: test/test-tcp-connect-error-after-write.c -> test/test-tcp-connect-error-after-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   r = uv_write(&write_req, (uv_stream_t*)&conn, &buf, 1, write_cb);",
          "78:   ASSERT(r == UV_EBADF);",
          "81:   ASSERT(r == 0);",
          "83:   r = uv_write(&write_req, (uv_stream_t*)&conn, &buf, 1, write_cb);",
          "",
          "[Removed Lines]",
          "80:   r = uv_tcp_connect(&connect_req, &conn, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "80:   r = uv_tcp_connect(&connect_req,",
          "81:                      &conn,",
          "82:                      (const struct sockaddr*) &addr,",
          "83:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-connect-error.c||test/test-tcp-connect-error.c": [
          "File: test/test-tcp-connect-error.c -> test/test-tcp-connect-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   r = uv_tcp_init(uv_default_loop(), &server);",
          "57:   ASSERT(r == 0);",
          "59:   ASSERT(r == UV_EINVAL);",
          "61:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "58:   r = uv_tcp_connect(&req, &server, garbage_addr, connect_cb);",
          "",
          "[Added Lines]",
          "58:   r = uv_tcp_connect(&req,",
          "59:                      &server,",
          "60:                      (const struct sockaddr*) garbage_addr,",
          "61:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-connect-timeout.c||test/test-tcp-connect-timeout.c": [
          "File: test/test-tcp-connect-timeout.c -> test/test-tcp-connect-timeout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   r = uv_tcp_init(uv_default_loop(), &conn);",
          "76:   ASSERT(r == 0);",
          "79:   ASSERT(r == 0);",
          "81:   r = uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "78:   r = uv_tcp_connect(&connect_req, &conn, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "78:   r = uv_tcp_connect(&connect_req,",
          "79:                      &conn,",
          "80:                      (const struct sockaddr*) &addr,",
          "81:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-connect6-error.c||test/test-tcp-connect6-error.c": [
          "File: test/test-tcp-connect6-error.c -> test/test-tcp-connect6-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   r = uv_tcp_init(uv_default_loop(), &server);",
          "55:   ASSERT(r == 0);",
          "57:   ASSERT(r == UV_EINVAL);",
          "59:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "56:   r = uv_tcp_connect6(&req, &server, garbage_addr, connect_cb);",
          "",
          "[Added Lines]",
          "56:   r = uv_tcp_connect(&req,",
          "57:                      &server,",
          "58:                      (const struct sockaddr*) garbage_addr,",
          "59:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-open.c||test/test-tcp-open.c": [
          "File: test/test-tcp-open.c -> test/test-tcp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   r = uv_tcp_open(&client, sock);",
          "165:   ASSERT(r == 0);",
          "168:   ASSERT(r == 0);",
          "170:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "167:   r = uv_tcp_connect(&connect_req, &client, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "167:   r = uv_tcp_connect(&connect_req,",
          "168:                      &client,",
          "169:                      (const struct sockaddr*) &addr,",
          "170:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-read-stop.c||test/test-tcp-read-stop.c": [
          "File: test/test-tcp-read-stop.c -> test/test-tcp-read-stop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "66:   ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));",
          "67:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &tcp_handle));",
          "69:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));",
          "70:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "68:   ASSERT(0 == uv_tcp_connect(&connect_req, &tcp_handle, &addr, connect_cb));",
          "",
          "[Added Lines]",
          "68:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "69:                              &tcp_handle,",
          "70:                              (const struct sockaddr*) &addr,",
          "71:                              connect_cb));",
          "",
          "---------------"
        ],
        "test/test-tcp-shutdown-after-write.c||test/test-tcp-shutdown-after-write.c": [
          "File: test/test-tcp-shutdown-after-write.c -> test/test-tcp-shutdown-after-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   r = uv_tcp_init(loop, &conn);",
          "119:   ASSERT(r == 0);",
          "122:   ASSERT(r == 0);",
          "124:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "121:   r = uv_tcp_connect(&connect_req, &conn, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "121:   r = uv_tcp_connect(&connect_req,",
          "122:                      &conn,",
          "123:                      (const struct sockaddr*) &addr,",
          "124:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c": [
          "File: test/test-tcp-unexpected-read.c -> test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   ASSERT(0 == uv_tcp_init(loop, &peer_handle));",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr));",
          "102:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 1, connection_cb));",
          "104:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "",
          "[Removed Lines]",
          "103:   ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, &addr, connect_cb));",
          "",
          "[Added Lines]",
          "103:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "104:                              &client_handle,",
          "105:                              (const struct sockaddr*) &addr,",
          "106:                              connect_cb));",
          "",
          "---------------"
        ],
        "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c": [
          "File: test/test-tcp-write-to-half-open-connection.c -> test/test-tcp-write-to-half-open-connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   r = uv_tcp_init(loop, &tcp_client);",
          "125:   ASSERT(r == 0);",
          "128:   ASSERT(r == 0);",
          "130:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "127:   r = uv_tcp_connect(&connect_req, &tcp_client, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "127:   r = uv_tcp_connect(&connect_req,",
          "128:                      &tcp_client,",
          "129:                      (const struct sockaddr*) &addr,",
          "130:                      connect_cb);",
          "",
          "---------------"
        ],
        "test/test-tcp-writealot.c||test/test-tcp-writealot.c": [
          "File: test/test-tcp-writealot.c -> test/test-tcp-writealot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   r = uv_tcp_init(uv_default_loop(), &client);",
          "154:   ASSERT(r == 0);",
          "157:   ASSERT(r == 0);",
          "159:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "156:   r = uv_tcp_connect(&connect_req, &client, &addr, connect_cb);",
          "",
          "[Added Lines]",
          "156:   r = uv_tcp_connect(&connect_req,",
          "157:                      &client,",
          "158:                      (const struct sockaddr*) &addr,",
          "159:                      connect_cb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69f9f6ffef18357cfd091faef5e2c385490a8741",
      "candidate_info": {
        "commit_hash": "69f9f6ffef18357cfd091faef5e2c385490a8741",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/69f9f6ffef18357cfd091faef5e2c385490a8741",
        "files": [
          "test/test-spawn.c"
        ],
        "message": "test: fix EPIPE race in spawn_closed_process_io\n\nThe just created stdin should not be closed by a child process before\nwriting to it, otherwise EPIPE happens.",
        "before_after_code_files": [
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:   uv_write_t write_req;",
          "692:   uv_buf_t buf;",
          "693:   uv_stdio_container_t stdio[2];",
          "698:   uv_pipe_init(uv_default_loop(), &in, 0);",
          "699:   options.stdio = stdio;",
          "",
          "[Removed Lines]",
          "694:   static char buffer[] = \"hello-from-spawn_stdin\";",
          "696:   init_process_options(\"spawn_helper1\", exit_cb);",
          "",
          "[Added Lines]",
          "694:   static char buffer[] = \"hello-from-spawn_stdin\\n\";",
          "696:   init_process_options(\"spawn_helper3\", exit_cb);",
          "",
          "---------------"
        ]
      }
    }
  ]
}