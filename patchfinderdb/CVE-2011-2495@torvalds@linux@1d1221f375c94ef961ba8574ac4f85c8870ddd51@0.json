{
  "cve_id": "CVE-2011-2495",
  "cve_desc": "fs/proc/base.c in the Linux kernel before 2.6.39.4 does not properly restrict access to /proc/#####/io files, which allows local users to obtain sensitive I/O statistics by polling a file, as demonstrated by discovering the length of another user's password.",
  "repo": "torvalds/linux",
  "patch_hash": "1d1221f375c94ef961ba8574ac4f85c8870ddd51",
  "patch_info": {
    "commit_hash": "1d1221f375c94ef961ba8574ac4f85c8870ddd51",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/1d1221f375c94ef961ba8574ac4f85c8870ddd51",
    "files": [
      "fs/proc/base.c"
    ],
    "message": "proc: restrict access to /proc/PID/io\n\n/proc/PID/io may be used for gathering private information.  E.g.  for\nopenssh and vsftpd daemons wchars/rchars may be used to learn the\nprecise password length.  Restrict it to processes being able to ptrace\nthe target process.\n\nptrace_may_access() is needed to prevent keeping open file descriptor of\n\"io\" file, executing setuid binary and gathering io information of the\nsetuid'ed process.\n\nSigned-off-by: Vasiliy Kulikov <segoon@openwall.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "fs/proc/base.c||fs/proc/base.c"
    ]
  },
  "patch_diff": {
    "fs/proc/base.c||fs/proc/base.c": [
      "File: fs/proc/base.c -> fs/proc/base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2708:  struct task_io_accounting acct = task->ioac;",
      "2709:  unsigned long flags;",
      "2711:  if (whole && lock_task_sighand(task, &flags)) {",
      "2712:   struct task_struct *t = task;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2711:  if (!ptrace_may_access(task, PTRACE_MODE_READ))",
      "2712:   return -EACCES;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2839:  REG(\"coredump_filter\", S_IRUGO|S_IWUSR, proc_coredump_filter_operations),",
      "2840: #endif",
      "2841: #ifdef CONFIG_TASK_IO_ACCOUNTING",
      "2843: #endif",
      "2844: #ifdef CONFIG_HARDWALL",
      "2845:  INF(\"hardwall\",   S_IRUGO, proc_pid_hardwall),",
      "",
      "[Removed Lines]",
      "2842:  INF(\"io\", S_IRUGO, proc_tgid_io_accounting),",
      "",
      "[Added Lines]",
      "2845:  INF(\"io\", S_IRUSR, proc_tgid_io_accounting),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3181:  REG(\"make-it-fail\", S_IRUGO|S_IWUSR, proc_fault_inject_operations),",
      "3182: #endif",
      "3183: #ifdef CONFIG_TASK_IO_ACCOUNTING",
      "3185: #endif",
      "3186: #ifdef CONFIG_HARDWALL",
      "3187:  INF(\"hardwall\",   S_IRUGO, proc_pid_hardwall),",
      "",
      "[Removed Lines]",
      "3184:  INF(\"io\", S_IRUGO, proc_tid_io_accounting),",
      "",
      "[Added Lines]",
      "3187:  INF(\"io\", S_IRUSR, proc_tid_io_accounting),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "293eb1e7772b25a93647c798c7b89bf26c2da2e0",
      "candidate_info": {
        "commit_hash": "293eb1e7772b25a93647c798c7b89bf26c2da2e0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/293eb1e7772b25a93647c798c7b89bf26c2da2e0",
        "files": [
          "fs/proc/base.c"
        ],
        "message": "proc: fix a race in do_io_accounting()\n\nIf an inode's mode permits opening /proc/PID/io and the resulting file\ndescriptor is kept across execve() of a setuid or similar binary, the\nptrace_may_access() check tries to prevent using this fd against the\ntask with escalated privileges.\n\nUnfortunately, there is a race in the check against execve().  If\nexecve() is processed after the ptrace check, but before the actual io\ninformation gathering, io statistics will be gathered from the\nprivileged process.  At least in theory this might lead to gathering\nsensible information (like ssh/ftp password length) that wouldn't be\navailable otherwise.\n\nHolding task->signal->cred_guard_mutex while gathering the io\ninformation should protect against the race.\n\nThe order of locking is similar to the one inside of ptrace_attach():\nfirst goes cred_guard_mutex, then lock_task_sighand().\n\nSigned-off-by: Vasiliy Kulikov <segoon@openwall.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "fs/proc/base.c||fs/proc/base.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/proc/base.c||fs/proc/base.c"
          ],
          "candidate": [
            "fs/proc/base.c||fs/proc/base.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/proc/base.c||fs/proc/base.c": [
          "File: fs/proc/base.c -> fs/proc/base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2706: {",
          "2707:  struct task_io_accounting acct = task->ioac;",
          "2708:  unsigned long flags;",
          "2713:  if (whole && lock_task_sighand(task, &flags)) {",
          "2714:   struct task_struct *t = task;",
          "",
          "[Removed Lines]",
          "2710:  if (!ptrace_may_access(task, PTRACE_MODE_READ))",
          "2711:   return -EACCES;",
          "",
          "[Added Lines]",
          "2709:  int result;",
          "2711:  result = mutex_lock_killable(&task->signal->cred_guard_mutex);",
          "2712:  if (result)",
          "2713:   return result;",
          "2715:  if (!ptrace_may_access(task, PTRACE_MODE_READ)) {",
          "2716:   result = -EACCES;",
          "2717:   goto out_unlock;",
          "2718:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2720:   unlock_task_sighand(task, &flags);",
          "2721:  }",
          "2723:    \"rchar: %llu\\n\"",
          "2724:    \"wchar: %llu\\n\"",
          "2725:    \"syscr: %llu\\n\"",
          "",
          "[Removed Lines]",
          "2722:  return sprintf(buffer,",
          "",
          "[Added Lines]",
          "2729:  result = sprintf(buffer,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2734:    (unsigned long long)acct.read_bytes,",
          "2735:    (unsigned long long)acct.write_bytes,",
          "2736:    (unsigned long long)acct.cancelled_write_bytes);",
          "2737: }",
          "2739: static int proc_tid_io_accounting(struct task_struct *task, char *buffer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2744: out_unlock:",
          "2745:  mutex_unlock(&task->signal->cred_guard_mutex);",
          "2746:  return result;",
          "",
          "---------------"
        ]
      }
    }
  ]
}