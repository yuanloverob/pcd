{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e7ba080b4c33c1d5f99268328dbc981595cb6c3",
      "candidate_info": {
        "commit_hash": "0e7ba080b4c33c1d5f99268328dbc981595cb6c3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0e7ba080b4c33c1d5f99268328dbc981595cb6c3",
        "files": [
          "include/uv.h",
          "src/unix/fs.c",
          "src/win/fs.c"
        ],
        "message": "unix, windows: make buf arg to uv_fs_write const\n\nChange the uv_fs_write() prototype so the 'buf' argument is now\n`const void*` rather than `void*`.\n\nThe argument is stored in a non-const field in the uv_fs_t but that's\ninconsequential because the memory it points to is not touched.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1632:     uv_fs_cb cb);",
          "1634: UV_EXTERN int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1637: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1638:     int mode, uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "1635:     void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "",
          "[Added Lines]",
          "1635:     const void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934: int uv_fs_write(uv_loop_t* loop,",
          "935:                 uv_fs_t* req,",
          "936:                 uv_file file,",
          "938:                 size_t len,",
          "939:                 int64_t off,",
          "940:                 uv_fs_cb cb) {",
          "941:   INIT(WRITE);",
          "942:   req->file = file;",
          "944:   req->len = len;",
          "945:   req->off = off;",
          "946:   POST;",
          "",
          "[Removed Lines]",
          "937:                 void* buf,",
          "943:   req->buf = buf;",
          "",
          "[Added Lines]",
          "937:                 const void* buf,",
          "943:   req->buf = (void*) buf;",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1521: }",
          "1525:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1526:   uv_fs_req_init(loop, req, UV_FS_WRITE, cb);",
          "1528:   req->fd = fd;",
          "1530:   req->length = length;",
          "1531:   req->offset = offset;",
          "",
          "[Removed Lines]",
          "1524: int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file fd, void* buf,",
          "1529:   req->buf = buf;",
          "",
          "[Added Lines]",
          "1524: int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file fd, const void* buf,",
          "1529:   req->buf = (void*) buf;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a01e68385f52a9de6fce9d1e4c22eb6a3e645d4",
      "candidate_info": {
        "commit_hash": "3a01e68385f52a9de6fce9d1e4c22eb6a3e645d4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3a01e68385f52a9de6fce9d1e4c22eb6a3e645d4",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/version.c"
        ],
        "message": "Now working on v0.11.16",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.15], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.16], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 15",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 16",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0716b3d9f89e3557a482ce499e7abc8db686418",
      "candidate_info": {
        "commit_hash": "c0716b3d9f89e3557a482ce499e7abc8db686418",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c0716b3d9f89e3557a482ce499e7abc8db686418",
        "files": [
          "src/win/core.c",
          "src/win/fs.c",
          "src/win/handle-inl.h",
          "src/win/handle.c",
          "src/win/internal.h",
          "src/win/pipe.c",
          "src/win/poll.c",
          "src/win/process-stdio.c"
        ],
        "message": "windows: improved handling of invalid FDs\n\nIf passed and invalid FD, _get_osfhandle() sets an error code\nthrough errno, not _doserrno. Hence we need to use\nSET_REQ_WIN32_ERROR insted of SET_REQ_RESULT.\n\nIn debug builds, _get_osfhandle() also raises a superfluous\nassert. I implemented a wrapper that disables all asserts\naround the call to _get_osfhandle().\n\nThis fixes node.js unit tests test-fs-read-stream.js and\ntest-listen-fd-ebadf.js.",
        "before_after_code_files": [
          "src/win/core.c||src/win/core.c",
          "src/win/fs.c||src/win/fs.c",
          "src/win/handle-inl.h||src/win/handle-inl.h",
          "src/win/handle.c||src/win/handle.c",
          "src/win/internal.h||src/win/internal.h",
          "src/win/pipe.c||src/win/pipe.c",
          "src/win/poll.c||src/win/poll.c",
          "src/win/process-stdio.c||src/win/process-stdio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "28: #include <string.h>",
          "30: #include \"uv.h\"",
          "31: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <crtdbg.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: static uv_once_t uv_default_loop_init_guard_ = UV_ONCE_INIT;",
          "44: static void uv__crt_invalid_parameter_handler(const wchar_t* expression,",
          "45:     const wchar_t* function, const wchar_t * file, unsigned int line,",
          "46:     uintptr_t reserved) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #ifdef _DEBUG",
          "49: __declspec( thread ) int uv__crt_assert_enabled = TRUE;",
          "51: static int uv__crt_dbg_report_handler(int report_type, char *message, int *ret_val) {",
          "52:   if (uv__crt_assert_enabled || report_type != _CRT_ASSERT)",
          "53:     return FALSE;",
          "55:   if (ret_val) {",
          "59:     if(IsDebuggerPresent())",
          "61:     else",
          "63:   }",
          "66:   return TRUE;",
          "67: }",
          "68: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:   _set_invalid_parameter_handler(uv__crt_invalid_parameter_handler);",
          "60: #endif",
          "64:   uv_winapi_init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #ifdef _DEBUG",
          "93:   _CrtSetReportHook(uv__crt_dbg_report_handler);",
          "94: #endif",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"uv.h\"",
          "35: #include \"internal.h\"",
          "36: #include \"req-inl.h\"",
          "39: #define UV_FS_FREE_PATHS         0x0002",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"handle-inl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:   VERIFY_FD(fd, req);",
          "552:   if (handle == INVALID_HANDLE_VALUE) {",
          "554:     return;",
          "555:   }",
          "",
          "[Removed Lines]",
          "551:   handle = (HANDLE) _get_osfhandle(fd);",
          "553:     SET_REQ_RESULT(req, -1);",
          "",
          "[Added Lines]",
          "552:   handle = uv__get_osfhandle(fd);",
          "555:     SET_REQ_WIN32_ERROR(req, ERROR_INVALID_HANDLE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:   VERIFY_FD(fd, req);",
          "599:   if (handle == INVALID_HANDLE_VALUE) {",
          "601:     return;",
          "602:   }",
          "",
          "[Removed Lines]",
          "598:   handle = (HANDLE) _get_osfhandle(fd);",
          "600:     SET_REQ_RESULT(req, -1);",
          "",
          "[Added Lines]",
          "600:   handle = uv__get_osfhandle(fd);",
          "602:     SET_REQ_WIN32_ERROR(req, ERROR_INVALID_HANDLE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1005:   VERIFY_FD(fd, req);",
          "1009:   if (handle == INVALID_HANDLE_VALUE) {",
          "1010:     SET_REQ_WIN32_ERROR(req, ERROR_INVALID_HANDLE);",
          "",
          "[Removed Lines]",
          "1007:   handle = (HANDLE) _get_osfhandle(fd);",
          "",
          "[Added Lines]",
          "1009:   handle = uv__get_osfhandle(fd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1038:   VERIFY_FD(fd, req);",
          "1041:   if (result == -1) {",
          "1042:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "1043:   } else {",
          "",
          "[Removed Lines]",
          "1040:   result = FlushFileBuffers((HANDLE) _get_osfhandle(fd)) ? 0 : -1;",
          "",
          "[Added Lines]",
          "1042:   result = FlushFileBuffers(uv__get_osfhandle(fd)) ? 0 : -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1066:   VERIFY_FD(fd, req);",
          "1070:   eof_info.EndOfFile.QuadPart = req->offset;",
          "",
          "[Removed Lines]",
          "1068:   handle = (HANDLE)_get_osfhandle(fd);",
          "",
          "[Added Lines]",
          "1070:   handle = uv__get_osfhandle(fd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1146:   VERIFY_FD(fd, req);",
          "1150:   nt_status = pNtQueryInformationFile(handle,",
          "1151:                                       &io_status,",
          "",
          "[Removed Lines]",
          "1148:   handle = (HANDLE) _get_osfhandle(fd);",
          "",
          "[Added Lines]",
          "1150:   handle = uv__get_osfhandle(fd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1226:   HANDLE handle;",
          "1227:   VERIFY_FD(fd, req);",
          "1231:   if (handle == INVALID_HANDLE_VALUE) {",
          "1232:     SET_REQ_WIN32_ERROR(req, ERROR_INVALID_HANDLE);",
          "",
          "[Removed Lines]",
          "1229:   handle = (HANDLE) _get_osfhandle(fd);",
          "",
          "[Added Lines]",
          "1231:   handle = uv__get_osfhandle(fd);",
          "",
          "---------------"
        ],
        "src/win/handle-inl.h||src/win/handle-inl.h": [
          "File: src/win/handle-inl.h -> src/win/handle-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define UV_WIN_HANDLE_INL_H_",
          "25: #include <assert.h>",
          "27: #include \"uv.h\"",
          "28: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <io.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   }",
          "162: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: INLINE static HANDLE uv__get_osfhandle(int fd)",
          "166: {",
          "172:   HANDLE handle;",
          "173:   UV_BEGIN_DISABLE_CRT_ASSERT();",
          "174:   handle = (HANDLE) _get_osfhandle(fd);",
          "175:   UV_END_DISABLE_CRT_ASSERT();",
          "176:   return handle;",
          "177: }",
          "",
          "---------------"
        ],
        "src/win/handle.c||src/win/handle.c": [
          "File: src/win/handle.c -> src/win/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     return UV_UNKNOWN_HANDLE;",
          "37:   }",
          "41:   switch (GetFileType(handle)) {",
          "42:     case FILE_TYPE_CHAR:",
          "",
          "[Removed Lines]",
          "39:   handle = (HANDLE) _get_osfhandle(file);",
          "",
          "[Added Lines]",
          "39:   handle = uv__get_osfhandle(file);",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # define INLINE inline",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #ifdef _DEBUG",
          "40: extern __declspec( thread ) int uv__crt_assert_enabled;",
          "42: #define UV_BEGIN_DISABLE_CRT_ASSERT()                           \\",
          "43:   {                                                             \\",
          "44:     int uv__saved_crt_assert_enabled = uv__crt_assert_enabled;  \\",
          "45:     uv__crt_assert_enabled = FALSE;",
          "48: #define UV_END_DISABLE_CRT_ASSERT()                             \\",
          "49:     uv__crt_assert_enabled = uv__saved_crt_assert_enabled;      \\",
          "50:   }",
          "52: #else",
          "53: #define UV_BEGIN_DISABLE_CRT_ASSERT()",
          "54: #define UV_END_DISABLE_CRT_ASSERT()",
          "55: #endif",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729: int uv_pipe_open(uv_pipe_t* pipe, uv_file file) {",
          "1732:   if (os_handle == INVALID_HANDLE_VALUE ||",
          "1733:       uv_set_pipe_handle(pipe->loop, pipe, os_handle, 0) == -1) {",
          "",
          "[Removed Lines]",
          "1730:   HANDLE os_handle = (HANDLE)_get_osfhandle(file);",
          "",
          "[Added Lines]",
          "1730:   HANDLE os_handle = uv__get_osfhandle(file);",
          "",
          "---------------"
        ],
        "src/win/poll.c||src/win/poll.c": [
          "File: src/win/poll.c -> src/win/poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484: int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd) {",
          "486: }",
          "",
          "[Removed Lines]",
          "485:   return uv_poll_init_socket(loop, handle, (SOCKET) _get_osfhandle(fd));",
          "",
          "[Added Lines]",
          "485:   return uv_poll_init_socket(loop, handle, (SOCKET) uv__get_osfhandle(fd));",
          "",
          "---------------"
        ],
        "src/win/process-stdio.c||src/win/process-stdio.c": [
          "File: src/win/process-stdio.c -> src/win/process-stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"uv.h\"",
          "28: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"handle-inl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:     return ERROR_INVALID_HANDLE;",
          "231:   }",
          "234:   return uv__duplicate_handle(loop, handle, dup);",
          "235: }",
          "",
          "[Removed Lines]",
          "233:   handle = (HANDLE) _get_osfhandle(fd);",
          "",
          "[Added Lines]",
          "234:   handle = uv__get_osfhandle(fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13dd3502a7aedf4284559a88b3662e222723b7ce",
      "candidate_info": {
        "commit_hash": "13dd3502a7aedf4284559a88b3662e222723b7ce",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/13dd3502a7aedf4284559a88b3662e222723b7ce",
        "files": [
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/fs.c",
          "src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h",
          "src/win/fs.c",
          "test/test-fs-event.c",
          "test/test-fs.c",
          "test/test-spawn.c"
        ],
        "message": "fs: vectored IO API for filesystem read/write\n\nThis improves API consistency with uv_read and uv_write and may\nimprove efficiency for some uses. Vectored IO is emulated when the\nrequisite system calls are unavailable.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   uv_file file;                                                               \\",
          "290:   int flags;                                                                  \\",
          "291:   mode_t mode;                                                                \\",
          "294:   off_t off;                                                                  \\",
          "295:   uv_uid_t uid;                                                               \\",
          "296:   uv_gid_t gid;                                                               \\",
          "297:   double atime;                                                               \\",
          "298:   double mtime;                                                               \\",
          "299:   struct uv__work work_req;                                                   \\",
          "301: #define UV_WORK_PRIVATE_FIELDS                                                \\",
          "302:   struct uv__work work_req;",
          "",
          "[Removed Lines]",
          "292:   void* buf;                                                                  \\",
          "293:   size_t len;                                                                 \\",
          "",
          "[Added Lines]",
          "292:   unsigned int nbufs;                                                         \\",
          "293:   uv_buf_t* bufs;                                                             \\",
          "300:   uv_buf_t bufsml[4];                                                         \\",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:       WCHAR* new_pathw;                                                       \\",
          "553:       int file_flags;                                                         \\",
          "554:       int fd_out;                                                             \\",
          "557:       int64_t offset;                                                         \\",
          "558:     };                                                                        \\",
          "559:     struct {                                                                  \\",
          "560:       double atime;                                                           \\",
          "",
          "[Removed Lines]",
          "555:       void* buf;                                                              \\",
          "556:       size_t length;                                                          \\",
          "",
          "[Added Lines]",
          "555:       unsigned int nbufs;                                                     \\",
          "556:       uv_buf_t* bufs;                                                         \\",
          "558:       uv_buf_t bufsml[4];                                                     \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1781:     int flags, int mode, uv_fs_cb cb);",
          "1783: UV_EXTERN int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1786: UV_EXTERN int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1787:     uv_fs_cb cb);",
          "1789: UV_EXTERN int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1792: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1793:     int mode, uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "1784:     void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "1790:     const void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "",
          "[Added Lines]",
          "1784:     const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb);",
          "1790:     const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb);",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include <utime.h>",
          "45: #include <poll.h>",
          "47: #if defined(__linux__) || defined(__sun)",
          "48: # include <sys/sendfile.h>",
          "49: #elif defined(__APPLE__) || defined(__FreeBSD__)",
          "50: # include <sys/socket.h>",
          "51: # include <sys/uio.h>",
          "52: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #if defined(__DragonFly__)  ||                                            \\",
          "48:     defined(__FreeBSD__)    ||                                            \\",
          "49:     defined(__OpenBSD__)    ||                                            \\",
          "50:     defined(__NetBSD__)",
          "51: # define HAVE_PREADV 1",
          "52: #else",
          "53: # define HAVE_PREADV 0",
          "54: #endif",
          "60: #endif",
          "62: #if HAVE_PREADV || defined(__APPLE__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: static ssize_t uv__fs_read(uv_fs_t* req) {",
          "194:   if (req->off < 0)",
          "198: }",
          "",
          "[Removed Lines]",
          "195:     return read(req->file, req->buf, req->len);",
          "196:   else",
          "197:     return pread(req->file, req->buf, req->len, req->off);",
          "",
          "[Added Lines]",
          "206:   ssize_t result;",
          "209:     result = readv(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "210:   else {",
          "211: #if HAVE_PREADV",
          "212:     result = preadv(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "213: #else",
          "214: # if defined(__linux__)",
          "215:     static int no_preadv;",
          "216:     if (no_preadv)",
          "217: # endif",
          "218:     {",
          "219:       off_t nread;",
          "220:       size_t index;",
          "222: # if defined(__linux__)",
          "223:     retry:",
          "224: # endif",
          "225:       nread = 0;",
          "226:       index = 0;",
          "227:       result = 1;",
          "228:       do {",
          "229:         if (req->bufs[index].len > 0) {",
          "230:           result = pread(req->file,",
          "231:                          req->bufs[index].base,",
          "232:                          req->bufs[index].len,",
          "233:                          req->off + nread);",
          "234:           if (result > 0)",
          "235:             nread += result;",
          "236:         }",
          "237:         index++;",
          "238:       } while (index < req->nbufs && result > 0);",
          "239:       if (nread > 0)",
          "240:         result = nread;",
          "241:     }",
          "242: # if defined(__linux__)",
          "243:     else {",
          "244:       result = uv__preadv(req->file,",
          "245:                           (struct iovec*)req->bufs,",
          "246:                           req->nbufs,",
          "247:                           req->off);",
          "248:       if (result == -1 && errno == ENOSYS) {",
          "249:         no_preadv = 1;",
          "250:         goto retry;",
          "251:       }",
          "252:     }",
          "253: # endif",
          "254: #endif",
          "255:   }",
          "256:   if (req->bufs != req->bufsml)",
          "257:     free(req->bufs);",
          "258:   return result;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:   int out_fd;",
          "307:   char buf[8192];",
          "310:   in_fd = req->flags;",
          "311:   out_fd = req->file;",
          "312:   offset = req->off;",
          "",
          "[Removed Lines]",
          "309:   len = req->len;",
          "",
          "[Added Lines]",
          "370:   len = req->bufsml[0].len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "419:     ssize_t r;",
          "421:     off = req->off;",
          "",
          "[Removed Lines]",
          "422:     r = sendfile(out_fd, in_fd, &off, req->len);",
          "",
          "[Added Lines]",
          "483:     r = sendfile(out_fd, in_fd, &off, req->bufsml[0].len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454: #if defined(__FreeBSD__)",
          "455:     len = 0;",
          "457: #else",
          "461:     r = sendfile(in_fd, out_fd, req->off, &len, NULL, 0);",
          "462: #endif",
          "",
          "[Removed Lines]",
          "456:     r = sendfile(in_fd, out_fd, req->off, req->len, NULL, &len, 0);",
          "460:     len = req->len;",
          "",
          "[Added Lines]",
          "517:     r = sendfile(in_fd, out_fd, req->off, req->bufsml[0].len, NULL, &len, 0);",
          "521:     len = req->bufsml[0].len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507: #endif",
          "509:   if (req->off < 0)",
          "514: #if defined(__APPLE__)",
          "515:   pthread_mutex_unlock(&lock);",
          "516: #endif",
          "518:   return r;",
          "519: }",
          "",
          "[Removed Lines]",
          "510:     r = write(req->file, req->buf, req->len);",
          "511:   else",
          "512:     r = pwrite(req->file, req->buf, req->len, req->off);",
          "",
          "[Added Lines]",
          "571:     r = writev(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "572:   else {",
          "573: #if HAVE_PREADV",
          "574:     r = pwritev(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "575: #else",
          "576: # if defined(__linux__)",
          "577:     static int no_pwritev;",
          "578:     if (no_pwritev)",
          "579: # endif",
          "580:     {",
          "581:       off_t written;",
          "582:       size_t index;",
          "584: # if defined(__linux__)",
          "585:     retry:",
          "586: # endif",
          "587:       written = 0;",
          "588:       index = 0;",
          "589:       r = 1;",
          "590:       do {",
          "591:         if (req->bufs[index].len > 0) {",
          "592:           r = pwrite(req->file,",
          "593:                      req->bufs[index].base,",
          "594:                      req->bufs[index].len,",
          "595:                      req->off + written);",
          "596:           if (r > 0)",
          "597:             written += r;",
          "598:         }",
          "599:         index++;",
          "600:       } while (index < req->nbufs && r > 0);",
          "601:       if (written > 0)",
          "602:         r = written;",
          "603:     }",
          "604: # if defined(__linux__)",
          "605:     else {",
          "606:       r = uv__pwritev(req->file,",
          "607:                       (struct iovec*) req->bufs,",
          "608:                       req->nbufs,",
          "609:                       req->off);",
          "610:       if (r == -1 && errno == ENOSYS) {",
          "611:         no_pwritev = 1;",
          "612:         goto retry;",
          "613:       }",
          "614:     }",
          "615: # endif",
          "616: #endif",
          "617:   }",
          "623:   if (req->bufs != req->bufsml)",
          "624:     free(req->bufs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "866: int uv_fs_read(uv_loop_t* loop, uv_fs_t* req,",
          "867:                uv_file file,",
          "870:                int64_t off,",
          "871:                uv_fs_cb cb) {",
          "872:   INIT(READ);",
          "873:   req->file = file;",
          "876:   req->off = off;",
          "877:   POST;",
          "878: }",
          "",
          "[Removed Lines]",
          "868:                void* buf,",
          "869:                size_t len,",
          "874:   req->buf = buf;",
          "875:   req->len = len;",
          "",
          "[Added Lines]",
          "976:                const uv_buf_t bufs[],",
          "977:                unsigned int nbufs,",
          "983:   req->nbufs = nbufs;",
          "984:   req->bufs = req->bufsml;",
          "985:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "986:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "988:   if (req->bufs == NULL)",
          "989:     return -ENOMEM;",
          "991:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "930:   req->file = out_fd;",
          "931:   req->off = off;",
          "933:   POST;",
          "934: }",
          "",
          "[Removed Lines]",
          "932:   req->len = len;",
          "",
          "[Added Lines]",
          "1049:   req->bufsml[0].len = len;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "978: int uv_fs_write(uv_loop_t* loop,",
          "979:                 uv_fs_t* req,",
          "980:                 uv_file file,",
          "983:                 int64_t off,",
          "984:                 uv_fs_cb cb) {",
          "985:   INIT(WRITE);",
          "986:   req->file = file;",
          "989:   req->off = off;",
          "990:   POST;",
          "991: }",
          "",
          "[Removed Lines]",
          "981:                 const void* buf,",
          "982:                 size_t len,",
          "987:   req->buf = (void*) buf;",
          "988:   req->len = len;",
          "",
          "[Added Lines]",
          "1098:                 const uv_buf_t bufs[],",
          "1099:                 unsigned int nbufs,",
          "1105:   req->nbufs = nbufs;",
          "1106:   req->bufs = req->bufsml;",
          "1107:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1108:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1110:   if (req->bufs == NULL)",
          "1111:     return -ENOMEM;",
          "1113:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c": [
          "File: src/unix/linux-syscalls.c -> src/unix/linux-syscalls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: # endif",
          "203: int uv__accept4(int fd, struct sockaddr* addr, socklen_t* addrlen, int flags) {",
          "204: #if defined(__i386__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: #ifndef __NR_preadv",
          "203: # if defined(__x86_64__)",
          "204: #  define __NR_preadv 295",
          "205: # elif defined(__i386__)",
          "206: #  define __NR_preadv 333",
          "207: # elif defined(__arm__)",
          "208: #  define __NR_preadv (UV_SYSCALL_BASE + 361)",
          "209: # endif",
          "212: #ifndef __NR_pwritev",
          "213: # if defined(__x86_64__)",
          "214: #  define __NR_pwritev 296",
          "215: # elif defined(__i386__)",
          "216: #  define __NR_pwritev 334",
          "217: # elif defined(__arm__)",
          "218: #  define __NR_pwritev (UV_SYSCALL_BASE + 362)",
          "219: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:   return errno = ENOSYS, -1;",
          "387: #endif",
          "388: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset) {",
          "411: #if defined(__NR_preadv)",
          "412:   return syscall(__NR_preadv, fd, iov, iovcnt, offset);",
          "413: #else",
          "414:   return errno = ENOSYS, -1;",
          "415: #endif",
          "416: }",
          "418: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset) {",
          "419: #if defined(__NR_pwritev)",
          "420:   return syscall(__NR_pwritev, fd, iov, iovcnt, offset);",
          "421: #else",
          "422:   return errno = ENOSYS, -1;",
          "423: #endif",
          "424: }",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h": [
          "File: src/unix/linux-syscalls.h -> src/unix/linux-syscalls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:                  const char* path,",
          "148:                  const struct timespec times[2],",
          "149:                  int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "151: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "540: void fs__read(uv_fs_t* req) {",
          "541:   int fd = req->fd;",
          "543:   int64_t offset = req->offset;",
          "544:   HANDLE handle;",
          "545:   OVERLAPPED overlapped, *overlapped_ptr;",
          "546:   LARGE_INTEGER offset_;",
          "547:   DWORD bytes;",
          "548:   DWORD error;",
          "550:   VERIFY_FD(fd, req);",
          "",
          "[Removed Lines]",
          "542:   size_t length = req->length;",
          "",
          "[Added Lines]",
          "548:   int result;",
          "549:   unsigned int index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556:     return;",
          "557:   }",
          "564:   if (offset != -1) {",
          "565:     memset(&overlapped, 0, sizeof overlapped);",
          "",
          "[Removed Lines]",
          "559:   if (length > INT_MAX) {",
          "560:     SET_REQ_WIN32_ERROR(req, ERROR_INSUFFICIENT_BUFFER);",
          "561:     return;",
          "562:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "573:     overlapped_ptr = NULL;",
          "574:   }",
          "577:     SET_REQ_RESULT(req, bytes);",
          "578:   } else {",
          "579:     error = GetLastError();",
          "",
          "[Removed Lines]",
          "576:   if (ReadFile(handle, req->buf, req->length, &bytes, overlapped_ptr)) {",
          "",
          "[Added Lines]",
          "572:   index = 0;",
          "573:   bytes = 0;",
          "574:   do {",
          "575:     DWORD incremental_bytes;",
          "576:     result = ReadFile(handle,",
          "577:                       req->bufs[index].base,",
          "578:                       req->bufs[index].len,",
          "579:                       &incremental_bytes,",
          "580:                       overlapped_ptr);",
          "581:     bytes += incremental_bytes;",
          "582:     ++index;",
          "583:   } while (result && index < req->nbufs);",
          "585:   if (result || bytes > 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "589: void fs__write(uv_fs_t* req) {",
          "590:   int fd = req->fd;",
          "592:   int64_t offset = req->offset;",
          "593:   HANDLE handle;",
          "594:   OVERLAPPED overlapped, *overlapped_ptr;",
          "595:   LARGE_INTEGER offset_;",
          "596:   DWORD bytes;",
          "598:   VERIFY_FD(fd, req);",
          "",
          "[Removed Lines]",
          "591:   size_t length = req->length;",
          "",
          "[Added Lines]",
          "605:   int result;",
          "606:   unsigned int index;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "603:     return;",
          "604:   }",
          "611:   if (offset != -1) {",
          "612:     memset(&overlapped, 0, sizeof overlapped);",
          "",
          "[Removed Lines]",
          "606:   if (length > INT_MAX) {",
          "607:     SET_REQ_WIN32_ERROR(req, ERROR_INSUFFICIENT_BUFFER);",
          "608:     return;",
          "609:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "620:     overlapped_ptr = NULL;",
          "621:   }",
          "624:     SET_REQ_RESULT(req, bytes);",
          "625:   } else {",
          "626:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "[Removed Lines]",
          "623:   if (WriteFile(handle, req->buf, length, &bytes, overlapped_ptr)) {",
          "",
          "[Added Lines]",
          "628:   index = 0;",
          "629:   bytes = 0;",
          "630:   do {",
          "631:     DWORD incremental_bytes;",
          "632:     result = WriteFile(handle,",
          "633:                        req->bufs[index].base,",
          "634:                        req->bufs[index].len,",
          "635:                        &incremental_bytes,",
          "636:                        overlapped_ptr);",
          "637:     bytes += incremental_bytes;",
          "638:     ++index;",
          "639:   } while (result && index < req->nbufs);",
          "641:   if (result || bytes > 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1088: static void fs__sendfile(uv_fs_t* req) {",
          "1089:   int fd_in = req->fd, fd_out = req->fd_out;",
          "1091:   int64_t offset = req->offset;",
          "1092:   const size_t max_buf_size = 65536;",
          "1093:   size_t buf_size = length < max_buf_size ? length : max_buf_size;",
          "",
          "[Removed Lines]",
          "1090:   size_t length = req->length;",
          "",
          "[Added Lines]",
          "1108:   size_t length = req->bufsml[0].len;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1569: }",
          "1574:   uv_fs_req_init(loop, req, UV_FS_READ, cb);",
          "1576:   req->fd = fd;",
          "1579:   req->offset = offset;",
          "1581:   if (cb) {",
          "",
          "[Removed Lines]",
          "1572: int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file fd, void* buf,",
          "1573:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1577:   req->buf = buf;",
          "1578:   req->length = length;",
          "",
          "[Added Lines]",
          "1590: int uv_fs_read(uv_loop_t* loop,",
          "1591:                uv_fs_t* req,",
          "1592:                uv_file fd,",
          "1593:                const uv_buf_t bufs[],",
          "1594:                unsigned int nbufs,",
          "1595:                int64_t offset,",
          "1596:                uv_fs_cb cb) {",
          "1601:   req->nbufs = nbufs;",
          "1602:   req->bufs = req->bufsml;",
          "1603:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1604:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1606:   if (req->bufs == NULL)",
          "1607:     return UV_ENOMEM;",
          "1609:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1588: }",
          "1593:   uv_fs_req_init(loop, req, UV_FS_WRITE, cb);",
          "1595:   req->fd = fd;",
          "1598:   req->offset = offset;",
          "1600:   if (cb) {",
          "",
          "[Removed Lines]",
          "1591: int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file fd, const void* buf,",
          "1592:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1596:   req->buf = (void*) buf;",
          "1597:   req->length = length;",
          "",
          "[Added Lines]",
          "1623: int uv_fs_write(uv_loop_t* loop,",
          "1624:                 uv_fs_t* req,",
          "1625:                 uv_file fd,",
          "1626:                 const uv_buf_t bufs[],",
          "1627:                 unsigned int nbufs,",
          "1628:                 int64_t offset,",
          "1629:                 uv_fs_cb cb) {",
          "1634:   req->nbufs = nbufs;",
          "1635:   req->bufs = req->bufsml;",
          "1636:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1637:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1639:   if (req->bufs == NULL)",
          "1640:     return UV_ENOMEM;",
          "1642:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1922:   req->fd = fd_in;",
          "1923:   req->fd_out = fd_out;",
          "1924:   req->offset = in_offset;",
          "1927:   if (cb) {",
          "1928:     QUEUE_FS_TP_JOB(loop, req);",
          "",
          "[Removed Lines]",
          "1925:   req->length = length;",
          "",
          "[Added Lines]",
          "1971:   req->bufsml[0].len = length;",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   int r;",
          "80:   uv_file file;",
          "81:   uv_fs_t req;",
          "83:   r = uv_fs_open(loop, &req, name, O_RDWR, 0, NULL);",
          "84:   ASSERT(r >= 0);",
          "85:   file = r;",
          "86:   uv_fs_req_cleanup(&req);",
          "89:   ASSERT(r >= 0);",
          "90:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "88:   r = uv_fs_write(loop, &req, file, \"foo\", 4, -1, NULL);",
          "",
          "[Added Lines]",
          "82:   uv_buf_t buf;",
          "89:   buf = uv_buf_init(\"foo\", 4);",
          "90:   r = uv_fs_write(loop, &req, file, &buf, 1, -1, NULL);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static char buf[32];",
          "104: static char test_buf[] = \"test-buffer\\n\";",
          "107: static void check_permission(const char* filename, unsigned int mode) {",
          "108:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: static uv_buf_t iov;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:   ASSERT(memcmp(req->path, \"test_file2\\0\", 11) == 0);",
          "285:   uv_fs_req_cleanup(req);",
          "286:   memset(buf, 0, sizeof(buf));",
          "288:       read_cb);",
          "289:   ASSERT(r == 0);",
          "290: }",
          "",
          "[Removed Lines]",
          "287:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "287:   iov = uv_buf_init(buf, sizeof(buf));",
          "288:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:   ASSERT(req->result >= 0);",
          "346:   create_cb_count++;",
          "347:   uv_fs_req_cleanup(req);",
          "350:   ASSERT(r == 0);",
          "351: }",
          "",
          "[Removed Lines]",
          "348:   r = uv_fs_write(loop, &write_req, req->result, test_buf, sizeof(test_buf),",
          "349:       -1, write_cb);",
          "",
          "[Added Lines]",
          "349:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "350:   r = uv_fs_write(loop, &write_req, req->result, &iov, 1, -1, write_cb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:   ASSERT(open_req1.result >= 0);",
          "664:   uv_fs_req_cleanup(&open_req1);",
          "668:   ASSERT(r >= 0);",
          "669:   ASSERT(write_req.result >= 0);",
          "670:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "666:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "667:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "667:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "668:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "679:   ASSERT(open_req1.result >= 0);",
          "680:   uv_fs_req_cleanup(&open_req1);",
          "684:   ASSERT(r >= 0);",
          "685:   ASSERT(read_req.result >= 0);",
          "686:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "682:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "683:       NULL);",
          "",
          "[Added Lines]",
          "683:   iov = uv_buf_init(buf, sizeof(buf));",
          "684:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "707:   uv_fs_req_cleanup(&open_req1);",
          "709:   memset(buf, 0, sizeof(buf));",
          "711:       NULL);",
          "712:   ASSERT(r >= 0);",
          "713:   ASSERT(read_req.result >= 0);",
          "",
          "[Removed Lines]",
          "710:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "711:   iov = uv_buf_init(buf, sizeof(buf));",
          "712:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "910:   file = req.result;",
          "911:   uv_fs_req_cleanup(&req);",
          "914:   ASSERT(r == sizeof(test_buf));",
          "915:   ASSERT(req.result == sizeof(test_buf));",
          "916:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "913:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "915:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "916:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1020:   file = req.result;",
          "1021:   uv_fs_req_cleanup(&req);",
          "1024:   ASSERT(r == sizeof(test_buf));",
          "1025:   ASSERT(req.result == sizeof(test_buf));",
          "1026:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1023:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1026:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1027:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1183:   file = req.result;",
          "1184:   uv_fs_req_cleanup(&req);",
          "1187:   ASSERT(r == sizeof(test_buf));",
          "1188:   ASSERT(req.result == sizeof(test_buf));",
          "1189:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1186:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1190:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1191:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1203:   uv_fs_req_cleanup(&req);",
          "1205:   memset(buf, 0, sizeof(buf));",
          "1207:   ASSERT(r >= 0);",
          "1208:   ASSERT(req.result >= 0);",
          "1209:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1206:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1211:   iov = uv_buf_init(buf, sizeof(buf));",
          "1212:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1223:   uv_fs_req_cleanup(&req);",
          "1225:   memset(buf, 0, sizeof(buf));",
          "1227:   ASSERT(r >= 0);",
          "1228:   ASSERT(req.result >= 0);",
          "1229:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1226:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1232:   iov = uv_buf_init(buf, sizeof(buf));",
          "1233:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1289:   file = req.result;",
          "1290:   uv_fs_req_cleanup(&req);",
          "1293:   ASSERT(r == sizeof(test_buf));",
          "1294:   ASSERT(req.result == sizeof(test_buf));",
          "1295:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1292:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1299:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1300:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1326:   uv_fs_req_cleanup(&req);",
          "1328:   memset(buf, 0, sizeof(buf));",
          "1330:   ASSERT(r >= 0);",
          "1331:   ASSERT(req.result >= 0);",
          "1332:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1329:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1337:   iov = uv_buf_init(buf, sizeof(buf));",
          "1338:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1365:   uv_fs_req_cleanup(&req);",
          "1367:   memset(buf, 0, sizeof(buf));",
          "1369:   ASSERT(r >= 0);",
          "1370:   ASSERT(req.result >= 0);",
          "1371:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1368:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1377:   iov = uv_buf_init(buf, sizeof(buf));",
          "1378:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1774:   ASSERT(open_req1.result >= 0);",
          "1775:   uv_fs_req_cleanup(&open_req1);",
          "1779:   ASSERT(r >= 0);",
          "1780:   ASSERT(write_req.result >= 0);",
          "1781:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1777:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1778:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1787:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1788:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1790:   ASSERT(open_req1.result >= 0);",
          "1791:   uv_fs_req_cleanup(&open_req1);",
          "1795:   ASSERT(r >= 0);",
          "1796:   ASSERT(write_req.result >= 0);",
          "1797:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1793:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1794:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1803:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1804:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1806:   ASSERT(open_req1.result >= 0);",
          "1807:   uv_fs_req_cleanup(&open_req1);",
          "1810:       NULL);",
          "1811:   printf(\"read = %d\\n\", r);",
          "1812:   ASSERT(r == 26);",
          "",
          "[Removed Lines]",
          "1809:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "1819:   iov = uv_buf_init(buf, sizeof(buf));",
          "1820:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1844:   ASSERT(open_req1.result >= 0);",
          "1845:   uv_fs_req_cleanup(&open_req1);",
          "1849:   ASSERT(r >= 0);",
          "1850:   ASSERT(write_req.result >= 0);",
          "1851:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1847:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1848:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1858:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1859:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1877:   uv_fs_req_cleanup(&open_req1);",
          "1879:   memset(buf, 0, sizeof(buf));",
          "1881:       NULL);",
          "1882:   ASSERT(r >= 0);",
          "1883:   ASSERT(read_req.result >= 0);",
          "",
          "[Removed Lines]",
          "1880:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "1891:   iov = uv_buf_init(buf, sizeof(buf));",
          "1892:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1912:   ASSERT(open_req1.result >= 0);",
          "1913:   uv_fs_req_cleanup(&open_req1);",
          "1917:   ASSERT(r >= 0);",
          "1918:   ASSERT(write_req.result >= 0);",
          "1919:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1915:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1916:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1927:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1928:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1929:   uv_fs_req_cleanup(&open_req1);",
          "1931:   memset(buf, 0, sizeof(buf));",
          "1934:   ASSERT(r >= 0);",
          "1935:   ASSERT(read_req.result >= 0);",
          "1936:   ASSERT(strcmp(buf, test_buf) == 0);",
          "1937:   uv_fs_req_cleanup(&read_req);",
          "1941:   ASSERT(r == 0);",
          "1942:   ASSERT(read_req.result == 0);",
          "1943:   uv_fs_req_cleanup(&read_req);",
          "",
          "[Removed Lines]",
          "1932:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "1933:       NULL);",
          "1939:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf),",
          "1940:       read_req.result, NULL);",
          "",
          "[Added Lines]",
          "1944:   iov = uv_buf_init(buf, sizeof(buf));",
          "1945:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "1951:   iov = uv_buf_init(buf, sizeof(buf));",
          "1952:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1,",
          "1953:                  read_req.result, NULL);",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   uv_file file;",
          "231:   uv_fs_t fs_req;",
          "232:   uv_stdio_container_t stdio[2];",
          "235:   unlink(\"stdout_file\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:   uv_buf_t buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   ASSERT(exit_cb_called == 1);",
          "259:   ASSERT(close_cb_called == 1);",
          "263:   ASSERT(r == 12);",
          "264:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "261:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "262:       0, NULL);",
          "",
          "[Added Lines]",
          "262:   buf = uv_buf_init(output, sizeof(output));",
          "263:   r = uv_fs_read(uv_default_loop(), &fs_req, file, &buf, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:   uv_file file;",
          "284:   uv_fs_t fs_req;",
          "285:   uv_stdio_container_t stdio[3];",
          "288:   unlink(\"stdout_file\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:   uv_buf_t buf;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:   ASSERT(exit_cb_called == 1);",
          "314:   ASSERT(close_cb_called == 1);",
          "318:   ASSERT(r == 27);",
          "319:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "316:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "317:       0, NULL);",
          "",
          "[Added Lines]",
          "318:   buf = uv_buf_init(output, sizeof(output));",
          "319:   r = uv_fs_read(uv_default_loop(), &fs_req, file, &buf, 1, 0, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d86d86633e5f7ff07cd94d31a495ec6bef619aa1",
      "candidate_info": {
        "commit_hash": "d86d86633e5f7ff07cd94d31a495ec6bef619aa1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d86d86633e5f7ff07cd94d31a495ec6bef619aa1",
        "files": [
          "include/uv.h"
        ],
        "message": "doc: clarify uv_try_write return values",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    }
  ]
}