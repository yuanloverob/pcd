{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
      "candidate_info": {
        "commit_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a potential use-after-free bug that follows an OOM error in code added two days ago by check-in [84e02d773d60cffe].  Problem discovered by OSSFuzz.\n\nFossilOrigin-Name: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32df5edcfef2605009f45d6ef1b97c63a99df07c7b4e00dc70f93001cfb8d81f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:   pCtx->pVdbe = 0;",
          "369:   pCtx->isError = 0;",
          "370:   pCtx->argc = nArg;",
          "371:   addr = sqlite3VdbeAddOp4(v, eCallCtx ? OP_PureFunc : OP_Function,",
          "372:                            p1, p2, p3, (char*)pCtx, P4_FUNCCTX);",
          "373:   sqlite3VdbeChangeP5(v, eCallCtx & NC_SelfRef);",
          "375:   return addr;",
          "376: }",
          "",
          "[Removed Lines]",
          "374:   pCtx->iOp = addr;",
          "",
          "[Added Lines]",
          "371:   pCtx->iOp = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8357c662b3b0110b7ba0eda82d9fbb787dd20b03",
      "candidate_info": {
        "commit_hash": "8357c662b3b0110b7ba0eda82d9fbb787dd20b03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8357c662b3b0110b7ba0eda82d9fbb787dd20b03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Do not invoke btreeComputeFreeSpace() when not necessary.\n\nFossilOrigin-Name: f11b0ed47402034378ded2c60b82841b81cd1319cdb72d1ef052faef29a5294d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 16eb0fc8f8cce51eaa5305ebc9f3bd8c8d935dd3ebebab6820e5629f9292eec2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7397:     pTo->isInit = 0;",
          "7398:     rc = btreeInitPage(pTo);",
          "7399:     if( rc!=SQLITE_OK ){",
          "7401:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7399:     if( rc==SQLITE_OK ) rc = btreeComputeFreeSpace(pTo);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8294:     int iPage = pCur->iPage;",
          "8295:     MemPage *pPage = pCur->pPage;",
          "8301:     if( iPage==0 ){",
          "8302:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8297:     if( pPage->nFree<0 ){",
          "8298:       rc = btreeComputeFreeSpace(pPage);",
          "8299:       if( rc ) break;",
          "8300:     }",
          "",
          "[Added Lines]",
          "8298:     assert( pPage->nFree>=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7e74904ccd2ed0f6c359ec44709446025b2b110",
      "candidate_info": {
        "commit_hash": "f7e74904ccd2ed0f6c359ec44709446025b2b110",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f7e74904ccd2ed0f6c359ec44709446025b2b110",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/dbfuzz001.test"
        ],
        "message": "Add the \"decode_hexdb\" TCL command to testfixture.  Add the dbfuzz001.test module to demonstration how to use decode_hexdb to deserialize a dbtotxt database description for use in a corruption test.\n\nFossilOrigin-Name: 1f583c53f3b7318c69f6e235934d97ef9493278feeab0837217076d7d071c35b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ffa9858162774cba03a565a7b65135d9e8bfea726af1a29de6898f66c4b1261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7641:   }",
          "7642: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7653: static int SQLITE_TCLAPI test_decode_hexdb(",
          "7654:   void * clientData,",
          "7655:   Tcl_Interp *interp,",
          "7656:   int objc,",
          "7657:   Tcl_Obj *CONST objv[]",
          "7658: ){",
          "7659:   const char *zIn = 0;",
          "7660:   unsigned char *a = 0;",
          "7661:   int n = 0;",
          "7662:   int lineno = 0;",
          "7663:   int i, iNext;",
          "7664:   int iOffset = 0;",
          "7665:   int j, k;",
          "7666:   int rc;",
          "7667:   unsigned char x[16];",
          "7668:   if( objc!=2 ){",
          "7669:     Tcl_WrongNumArgs(interp, 1, objv, \"HEXDB\");",
          "7670:     return TCL_ERROR;",
          "7671:   }",
          "7672:   zIn = Tcl_GetString(objv[1]);",
          "7673:   for(i=0; zIn[i]; i=iNext){",
          "7674:     lineno++;",
          "7675:     for(iNext=i; zIn[iNext] && zIn[iNext]!='\\n'; iNext++){}",
          "7676:     if( zIn[iNext]=='\\n' ) iNext++;",
          "7677:     while( zIn[i]==' ' || zIn[i]=='\\t' ){ i++; }",
          "7678:     if( a==0 ){",
          "7679:       int pgsz;",
          "7680:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7681:       if( rc!=2 ) continue;",
          "7682:       if( n<512 ){",
          "7683:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7684:         return TCL_ERROR;",
          "7685:       }",
          "7686:       a = malloc( n );",
          "7687:       if( a==0 ){",
          "7688:         Tcl_AppendResult(interp, \"out of memory\", (void*)0);",
          "7689:         return TCL_ERROR;",
          "7690:       }",
          "7691:       memset(a, 0, n);",
          "7692:       continue;",
          "7693:     }",
          "7694:     rc = sscanf(zIn+i, \"| page %d offset %d\", &j, &k);",
          "7695:     if( rc==2 ){",
          "7696:       iOffset = k;",
          "7697:       continue;",
          "7698:     }",
          "7699:     rc = sscanf(zIn+i,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "7700:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "7701:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "7702:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "7703:     if( rc==17 ){",
          "7704:       k = iOffset+j;",
          "7705:       if( k+16<=n ){",
          "7706:         memcpy(a+k, x, 16);",
          "7707:       }",
          "7708:       continue;",
          "7709:     }",
          "7710:   }",
          "7711:   Tcl_SetObjResult(interp, Tcl_NewByteArrayObj(a, n));",
          "7712:   free(a);",
          "7713:   return TCL_OK;",
          "7714: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7920:      { \"atomic_batch_write\",      test_atomic_batch_write, 0 },",
          "7921:      { \"sqlite3_mmap_warm\",       test_mmap_warm,          0 },",
          "7922:      { \"sqlite3_config_sorterref\", test_config_sorterref,   0 },",
          "7923:   };",
          "7924:   static int bitmask_size = sizeof(Bitmask)*8;",
          "7925:   static int longdouble_size = sizeof(LONGDOUBLE_TYPE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7996:      { \"decode_hexdb\",             test_decode_hexdb,       0 },",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2012-12-13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for corrupt database files.",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !deserialize {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: do_test dbfuzz001-100 {",
          "23:   sqlite3 db {}",
          "24:   db deserialize [decode_hexdb {",
          "25:     | size 5632 pagesize 512 filename c4.db",
          "26:     | page 1 offset 0",
          "27:     |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "28:     |     16: 02 00 01 01 00 40 20 20 00 00 00 02 00 00 00 0b   .....@  ........",
          "29:     |     32: 00 00 00 06 00 00 00 01 00 00 00 28 00 00 00 04   ...........(....",
          "30:     |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "31:     |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02   ................",
          "32:     |     96: 00 2e 30 38 0d 00 00 00 06 01 06 00 01 da 01 b0   ..08............",
          "33:     |    112: 01 56 01 86 01 2a 01 06 00 00 00 00 00 00 00 00   .V...*..........",
          "34:     |    256: 00 00 00 00 00 00 22 07 06 17 11 11 01 31 74 61   ......\"......1ta",
          "35:     |    272: 62 6c 65 74 34 74 34 07 43 52 45 41 54 45 20 54   blet4t4.CREATE T",
          "36:     |    288: 41 42 4c 45 20 74 34 28 78 29 2a 06 06 17 13 11   ABLE t4(x)*.....",
          "37:     |    304: 01 3f 69 6e 64 65 78 00 00 00 00 00 00 00 00 00   .?index.........",
          "38:     |    336: 20 74 33 28 78 29 2e 04 06 17 15 11 01 45 69 6e    t3(x).......Ein",
          "39:     |    352: 64 65 78 74 32 63 64 74 32 05 43 52 45 41 54 45   dext2cdt2.CREATE",
          "40:     |    368: 20 49 4e 44 45 58 20 74 32 63 64 20 4f 4e 20 74    INDEX t2cd ON t",
          "41:     |    384: 32 28 63 2c 64 29 28 05 06 17 11 11 01 3d 74 61   2(c,d)(......=ta",
          "42:     |    400: 62 6c 65 74 33 74 33 04 43 52 45 41 54 45 20 54   blet3t3.CREATE T",
          "43:     |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "44:     |    432: 28 02 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (......=tablet2t",
          "45:     |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "46:     |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "47:     |    480: 01 35 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .5tablet1t1.CREA",
          "48:     |    496: 54 45 20 54 41 42 4c 45 20 74 31 28 61 2c 62 29   TE TABLE t1(a,b)",
          "49:     | page 2 offset 512",
          "50:     |      0: 0d 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00   ................",
          "51:     | page 3 offset 1024",
          "52:     |      0: 0d 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00   ................",
          "53:     | page 4 offset 1536",
          "54:     |      0: 05 00 00 00 03 01 f1 00 00 00 00 0b 01 fb 01 f6   ................",
          "55:     |     16: 01 f1 00 16 00 00 09 06 05 01 01 01 01 04 04 03   ................",
          "56:     |     32: 03 07 05 05 01 01 09 09 02 02 19 04 05 17 17 17   ................",
          "57:     |     48: 17 73 65 76 65 6e 65 69 67 68 74 65 69 67 68 74   .seveneighteight",
          "58:     |     64: 73 65 76 65 6e 25 03 05 07 07 07 07 40 14 00 00   seven%......@...",
          "59:     |     80: 00 00 00 00 40 18 00 00 00 00 00 00 40 18 00 00   ....@.......@...",
          "60:     |     96: 00 00 00 00 40 14 00 00 00 00 00 00 09 02 05 01   ....@...........",
          "61:     |    112: 01 01 01 03 04 04 03 07 01 05 09 01 01 09 02 02   ................",
          "62:     |    352: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1a   ................",
          "63:     |    496: 00 00 00 00 0a 3e 00 00 00 09 21 00 00 00 08 06   .....>....!.....",
          "64:     | page 5 offset 2048",
          "65:     |      0: 0a 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00   ................",
          "66:     | page 7 offset 3072",
          "67:     |      0: 0d 00 00 00 08 01 c2 00 01 fb 01 f6 01 f1 01 ec   ................",
          "68:     |     16: 01 e0 01 d4 01 cb 01 c2 00 00 00 00 00 00 00 00   ................",
          "69:     |     96: 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00   ................",
          "70:     |    224: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02   ................",
          "71:     |    288: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03   ................",
          "72:     |    448: 00 00 07 08 02 17 65 69 67 68 74 07 07 02 17 65   ......eight....e",
          "73:     |    464: 69 67 68 74 0a 06 02 07 40 18 00 00 00 00 00 00   ight....@.......",
          "74:     |    480: 0a 05 02 07 40 18 00 00 00 00 00 00 03 04 02 01   ....@...........",
          "75:     |    496: 04 03 03 02 01 04 03 02 02 01 02 03 01 02 01 02   ................",
          "76:     | page 8 offset 3584",
          "77:     |      0: 0d 00 21 00 01 00 16 00 00 16 00 16 00 16 00 16   ..!.............",
          "78:     |     16: 00 16 00 16 00 00 09 06 05 01 01 01 01 04 04 03   ................",
          "79:     |     32: 03 00 00 00 5f 01 09 09 02 02 00 00 00 56 17 17   ...._........V..",
          "80:     |     48: 17 73 65 76 65 6e 65 69 67 68 74 65 69 67 68 74   .seveneighteight",
          "81:     |     64: 73 65 76 65 6e 00 00 00 3b 07 07 07 40 14 00 00   seven...;...@...",
          "82:     |     80: 00 00 00 00 40 18 00 00 00 00 00 00 40 18 00 00   ....@.......@...",
          "83:     |     96: 00 00 00 00 40 14 00 00 00 00 00 00 00 00 00 14   ....@...........",
          "84:     |    112: 01 01 01 03 04 04 03 00 00 00 09 01 01 09 02 02   ................",
          "85:     |    352: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1a   ................",
          "86:     | page 9 offset 4096",
          "87:     |      0: 0d 00 00 00 1b 00 47 00 01 d9 01 be 01 af 01 a0   ......G.........",
          "88:     |     16: 01 91 01 82 01 73 01 64 01 55 01 46 01 37 01 28   .....s.d.U.F.7.(",
          "89:     |     32: 01 19 01 0a 00 fb 00 ec 00 dd 00 ce 00 bf 00 b0   ................",
          "90:     |     48: 00 a1 00 92 00 83 00 74 00 65 00 56 00 47 00 00   .......t.e.V.G..",
          "91:     |     64: 00 00 00 00 00 00 00 0d 21 00 00 48 01 54 00 01   ........!..H.T..",
          "92:     |     80: f7 01 ec 01 c5 01 0d 20 00 00 48 01 54 00 01 f7   ....... ..H.T...",
          "93:     |     96: 01 ec 01 c5 01 0d 1f 00 00 48 01 54 00 01 f7 01   .........H.T....",
          "94:     |    112: ec 01 c5 01 0d 1e 00 00 48 01 54 00 01 f7 01 ec   ........H.T.....",
          "95:     |    128: 01 c5 01 0d 1d 00 00 48 01 54 00 01 f7 01 ec 01   .......H.T......",
          "96:     |    144: c5 01 0d 1c 00 00 48 01 54 00 01 f7 01 ec 01 c5   ......H.T.......",
          "97:     |    160: 01 0d 1b 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   .....H.T........",
          "98:     |    176: 0d 1a 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d   ....H.T.........",
          "99:     |    192: 19 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 18   ...H.T..........",
          "100:     |    208: 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 17 00   ..H.T...........",
          "101:     |    224: 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 16 00 00   .H.T............",
          "102:     |    240: 48 01 54 00 01 f7 01 ec 01 c5 01 0d 15 00 00 48   H.T............H",
          "103:     |    256: 01 54 00 01 f7 01 ec 01 c5 01 0d 14 00 00 48 01   .T............H.",
          "104:     |    272: 54 00 01 f7 01 ec 01 c5 01 0d 13 00 00 48 01 54   T............H.T",
          "105:     |    288: 00 01 f7 01 ec 01 c5 01 0d 12 00 00 48 01 54 00   ............H.T.",
          "106:     |    304: 01 f7 01 ec 01 c5 01 0d 11 00 00 48 01 54 00 01   ...........H.T..",
          "107:     |    320: f7 01 ec 01 c5 01 0d 10 00 00 48 01 54 00 01 f7   ..........H.T...",
          "108:     |    336: 01 ec 01 c5 01 0d 0f 00 00 48 01 54 00 01 f7 01   .........H.T....",
          "109:     |    352: ec 01 c5 01 0d 0e 00 00 48 01 54 00 01 f7 01 ec   ........H.T.....",
          "110:     |    368: 01 c5 01 0d 0d 00 00 48 01 54 00 01 f7 01 ec 01   .......H.T......",
          "111:     |    384: c5 01 0d 0c 00 00 48 01 54 00 01 f7 01 ec 01 c5   ......H.T.......",
          "112:     |    400: 01 0d 0b 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   .....H.T........",
          "113:     |    416: 0d 0a 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d   ....H.T.........",
          "114:     |    432: 09 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 19 08   ...H.T..........",
          "115:     |    448: 05 17 17 17 17 65 69 67 68 74 65 69 67 68 74 73   .....eighteights",
          "116:     |    464: 65 76 65 6e 73 65 76 65 6e 25 07 05 07 07 07 07   evenseven%......",
          "117:     |    480: 40 18 00 00 00 00 00 00 40 18 00 00 00 00 00 00   @.......@.......",
          "118:     |    496: 40 14 00 00 00 00 00 00 40 14 00 00 00 00 00 00   @.......@.......",
          "119:     | page 10 offset 4608",
          "120:     |      0: 0d 00 00 00 1d 00 4d 00 01 f1 01 e2 01 d3 01 c4   ......M.........",
          "121:     |     16: 01 b5 01 a6 01 97 01 88 01 79 01 6a 01 5b 01 4c   .........y.j.[.L",
          "122:     |     32: 01 3d 01 2e 01 1f 01 10 01 01 00 f2 00 e3 00 d4   .=..............",
          "123:     |     48: 00 c5 00 b6 00 a7 00 98 00 89 00 7a 00 6b 00 5c   ...........z.k.\\",
          "124:     |     64: 00 4d 00 00 00 00 00 00 00 00 00 00 00 0d 3e 00   .M............>.",
          "125:     |     80: 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 3d 00 00   .H.T.........=..",
          "126:     |     96: 48 01 54 00 01 f7 01 ec 01 c5 01 0d 3c 00 00 48   H.T.........<..H",
          "127:     |    112: 01 54 00 01 f7 01 ec 01 c5 01 0d 3b 00 00 48 01   .T.........;..H.",
          "128:     |    128: 54 00 01 f7 01 ec 01 c5 01 0d 3a 00 00 48 01 54   T.........:..H.T",
          "129:     |    144: 00 01 f7 01 ec 01 c5 01 0d 39 00 00 48 01 54 00   .........9..H.T.",
          "130:     |    160: 01 f7 01 ec 01 c5 01 0d 38 00 00 48 01 54 00 01   ........8..H.T..",
          "131:     |    176: f7 01 ec 01 c5 01 0d 37 00 00 48 01 54 00 01 f7   .......7..H.T...",
          "132:     |    192: 01 ec 01 c5 01 0d 36 00 00 48 01 54 00 01 f7 01   ......6..H.T....",
          "133:     |    208: ec 01 c5 01 0d 35 00 00 48 01 54 00 01 f7 01 ec   .....5..H.T.....",
          "134:     |    224: 01 c5 01 0d 34 00 00 48 01 54 00 01 f7 01 ec 01   ....4..H.T......",
          "135:     |    240: c5 01 0d 33 00 00 48 01 54 00 01 f7 01 ec 01 c5   ...3..H.T.......",
          "136:     |    256: 01 0d 32 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..2..H.T........",
          "137:     |    272: 0d 31 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d   .1..H.T.........",
          "138:     |    288: 30 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2f   0..H.T........./",
          "139:     |    304: 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2e 00   ..H.T...........",
          "140:     |    320: 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2d 00 00   .H.T.........-..",
          "141:     |    336: 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2c 00 00 48   H.T.........,..H",
          "142:     |    352: 01 54 00 01 f7 01 ec 01 c5 01 0d 2b 00 00 48 01   .T.........+..H.",
          "143:     |    368: 54 00 01 f7 01 ec 01 c5 01 0d 2a 00 00 48 01 54   T.........*..H.T",
          "144:     |    384: 00 01 f7 01 ec 01 c5 01 0d 29 00 00 48 01 54 00   .........)..H.T.",
          "145:     |    400: 01 f7 01 ec 01 c5 01 0d 28 00 00 48 01 54 00 01   ........(..H.T..",
          "146:     |    416: f7 01 ec 01 c5 01 0d 27 00 00 48 01 54 00 01 f7   .......'..H.T...",
          "147:     |    432: 01 ec 01 c5 01 0d 26 00 00 48 01 54 00 01 f7 01   ......&..H.T....",
          "148:     |    448: ec 01 c5 01 0d 25 00 00 48 01 54 00 01 f7 01 ec   .....%..H.T.....",
          "149:     |    464: 01 c5 01 0d 24 00 00 48 01 54 00 01 f7 01 ec 01   ....$..H.T......",
          "150:     |    480: c5 01 0d 23 00 00 48 01 54 00 01 f7 01 ec 01 c5   ...#..H.T.......",
          "151:     |    496: 01 0d 22 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..\"..H.T........",
          "152:     | page 11 offset 5120",
          "153:     |      0: 0d 00 00 00 0a 01 6a 00 01 f1 01 e2 01 d3 01 c4   ......j.........",
          "154:     |     16: 01 b5 01 a6 01 97 01 88 01 79 01 6a 00 00 00 00   .........y.j....",
          "155:     |    352: 00 00 00 00 00 00 00 00 00 00 0d 48 00 00 48 01   ...........H..H.",
          "156:     |    368: 54 00 01 f7 01 ec 01 c5 01 0d 47 00 00 48 01 54   T.........G..H.T",
          "157:     |    384: 00 01 f7 01 ec 01 c5 01 0d 46 00 00 48 01 54 00   .........F..H.T.",
          "158:     |    400: 01 f7 01 ec 01 c5 01 0d 45 00 00 48 01 54 00 01   ........E..H.T..",
          "159:     |    416: f7 01 ec 01 c5 01 0d 44 00 00 48 01 54 00 01 f7   .......D..H.T...",
          "160:     |    432: 01 ec 01 c5 01 0d 43 00 00 48 01 54 00 01 f7 01   ......C..H.T....",
          "161:     |    448: ec 01 c5 01 0d 42 00 00 48 01 54 00 01 f7 01 ec   .....B..H.T.....",
          "162:     |    464: 01 c5 01 0d 41 00 00 48 01 54 00 01 f7 01 ec 01   ....A..H.T......",
          "163:     |    480: c5 01 0d 40 00 00 48 01 54 00 01 f7 01 ec 01 c5   ...@..H.T.......",
          "164:     |    496: 01 0d 3f 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..?..H.T........",
          "165:     | end c4.db",
          "166:   }]",
          "167:   db eval {PRAGMA integrity_check}",
          "168: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "170: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ec796d00228854511e3e19772a477e19c99aaac",
      "candidate_info": {
        "commit_hash": "7ec796d00228854511e3e19772a477e19c99aaac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ec796d00228854511e3e19772a477e19c99aaac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/in.test"
        ],
        "message": "Add ALWAYS() to an always true conditional that results from the previous check-in.  Add a test case for ticket [dbaf8a6820be1ece] to supplement those already checked into TH3.\n\nFossilOrigin-Name: aff209804722ac902c7abfde80ad2677e0f51beb2c7f28f65d51105d984a1640",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f5168a76a400fc2e1e40c6950470b1bfb38a0be54fc5518c17c29fdae7d8f1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "750:   SELECT 1 IN (CAST('1' AS text) COLLATE nocase);",
          "751: } 0",
          "753: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753: # 2019-08-27 ticket https://sqlite.org/src/info/dbaf8a6820be1ece",
          "754: #",
          "755: do_execsql_test in-18.1 {",
          "756:   DROP TABLE IF EXISTS t0;",
          "757:   CREATE TABLE t0(c0 INT UNIQUE);",
          "758:   INSERT INTO t0(c0) VALUES (1);",
          "759:   SELECT * FROM t0 WHERE '1' IN (t0.c0);",
          "760: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42ebb01e9fd94c94d4f90b0a59b46194aea28400",
      "candidate_info": {
        "commit_hash": "42ebb01e9fd94c94d4f90b0a59b46194aea28400",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42ebb01e9fd94c94d4f90b0a59b46194aea28400",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Add the \"--lost-and-found\" option to the \".recover\" command. For setting the name of the orphaned rows table.\n\nFossilOrigin-Name: 67bb88e24c74d02ae0c4ac6ff2f873f6b0035ccefe5cccfc71c5686cbc76b4c3",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: };",
          "114: #define DBDATA_COLUMN_PGNO        0",
          "115: #define DBDATA_COLUMN_CELL        1",
          "116: #define DBDATA_COLUMN_FIELD       2",
          "117: #define DBDATA_COLUMN_VALUE       3",
          "118: #define DBDATA_COLUMN_SCHEMA      4",
          "124: #define DBDATA_SCHEMA             \\",
          "125:       \"CREATE TABLE x(\"           \\",
          "126:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "120: #define DBPTR_COLUMN_PGNO         0",
          "121: #define DBPTR_COLUMN_CHILD        1",
          "122: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:       \"  schema TEXT HIDDEN\"      \\",
          "131:       \")\"",
          "133: #define DBPTR_SCHEMA              \\",
          "134:       \"CREATE TABLE x(\"           \\",
          "135:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #define DBPTR_COLUMN_PGNO         0",
          "138: #define DBPTR_COLUMN_CHILD        1",
          "139: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:   return (a[0]<<24)|(a[1]<<16)|(a[2]<<8)|a[3];",
          "290: }",
          "292: static int dbdataLoadPage(",
          "297: ){",
          "298:   int rc2;",
          "299:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "293:   DbdataCursor *pCsr,",
          "294:   u32 pgno,",
          "295:   u8 **ppPage,",
          "296:   int *pnPage",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 91df4b8e0386105d01614921e8410994b621404a3d46ec4af8687b8743c52d52",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3578:   \".quit                    Exit this program\",",
          "3579:   \".read FILE               Read input from FILE\",",
          "3580:   \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",",
          "3581:   \".save FILE               Write in-memory database into FILE\",",
          "3582:   \".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3579:   \".recover                 Recover as much data as possible from corrupt db.\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6208:   return z;",
          "6209: }",
          "6211: typedef struct RecoverTable RecoverTable;",
          "6212: struct RecoverTable {",
          "6218: };",
          "6223: static void recoverFreeTable(RecoverTable *pTab){",
          "6224:   if( pTab ){",
          "6226:     sqlite3_free(pTab->zQuoted);",
          "6227:     if( pTab->azlCol ){",
          "6228:       int i;",
          "",
          "[Removed Lines]",
          "6217:   int iPk;",
          "6225:     sqlite3_free(pTab->zName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6235:   }",
          "6236: }",
          "",
          "[Removed Lines]",
          "6238: static RecoverTable *recoverOldTable(",
          "",
          "[Added Lines]",
          "6275: static RecoverTable *recoverNewTable(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6309:         }",
          "6310:       }",
          "6314:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6315:       pTab->nCol = nSqlCol;",
          "",
          "[Removed Lines]",
          "6312:       pTab->zName = shellMPrintf(&rc, \"%s\", zName);",
          "6313:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", pTab->zName);",
          "",
          "[Added Lines]",
          "6349:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", zName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6349:   return pTab;",
          "6350: }",
          "6353:   ShellState *pState,",
          "6354:   int *pRc,",
          "6355:   int iRoot,",
          "",
          "[Removed Lines]",
          "6352: static RecoverTable *recoverNewTable(",
          "",
          "[Added Lines]",
          "6388: static RecoverTable *recoverFindTable(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6377:     if( sqlite3_stricmp(zType, \"table\")==0 ){",
          "6378:       zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6379:       zSql = (const char*)sqlite3_column_text(pStmt, 2);",
          "6381:       break;",
          "6382:     }",
          "6383:   }",
          "",
          "[Removed Lines]",
          "6380:       pRet = recoverOldTable(pRc, zName, zSql, bIntkey, nCol);",
          "",
          "[Added Lines]",
          "6415:       pRet = recoverNewTable(pRc, zName, zSql, bIntkey, nCol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6390: static RecoverTable *recoverOrphanTable(",
          "6391:   ShellState *pState,",
          "6392:   int *pRc,",
          "6393:   int nCol",
          "6394: ){",
          "6395:   RecoverTable *pTab = 0;",
          "6396:   if( nCol>=0 && *pRc==SQLITE_OK ){",
          "6397:     int i;",
          "6401:     );",
          "6404:     }",
          "6407:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6408:     if( pTab ){",
          "6411:       pTab->nCol = nCol;",
          "6412:       pTab->iPk = -2;",
          "6413:       if( nCol>0 ){",
          "",
          "[Removed Lines]",
          "6398:     raw_printf(pState->out,",
          "6399:         \"CREATE TABLE recover_orphan(rootpgno INTEGER, \"",
          "6400:         \"pgno INTEGER, nfield INTEGER, id INTEGER\"",
          "6402:     for(i=0; i<nCol; i++){",
          "6403:       raw_printf(pState->out, \", c%d\", i);",
          "6405:     raw_printf(pState->out, \");\\n\");",
          "6409:       pTab->zName = shellMPrintf(pRc, \"%s\", \"recover_orphan\");",
          "6410:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", pTab->zName);",
          "",
          "[Added Lines]",
          "6428:   const char *zLostAndFound,",
          "6439:     int iTab = 0;",
          "6440:     char *zTab = shellMPrintf(pRc, \"%s\", zLostAndFound);",
          "6441:     sqlite3_stmt *pTest = 0;",
          "6442:     shellPrepare(pState->db, pRc,",
          "6443:         \"SELECT 1 FROM recovery.schema WHERE name=?\", &pTest",
          "6445:     if( pTest ) sqlite3_bind_text(pTest, 1, zTab, -1, SQLITE_TRANSIENT);",
          "6446:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pTest) ){",
          "6447:       shellReset(pRc, pTest);",
          "6448:       sqlite3_free(zTab);",
          "6449:       zTab = shellMPrintf(pRc, \"%s_%d\", zLostAndFound, iTab++);",
          "6450:       sqlite3_bind_text(pTest, 1, zTab, -1, SQLITE_TRANSIENT);",
          "6452:     shellFinalize(pRc, pTest);",
          "6456:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", zTab);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6419:           }",
          "6420:         }",
          "6421:       }",
          "6427:     }",
          "6428:   }",
          "6429:   return pTab;",
          "6430: }",
          "",
          "[Removed Lines]",
          "6422:     }",
          "6424:     if( *pRc!=SQLITE_OK ){",
          "6425:       recoverFreeTable(pTab);",
          "6426:       pTab = 0;",
          "",
          "[Added Lines]",
          "6469:       if( *pRc!=SQLITE_OK ){",
          "6470:         recoverFreeTable(pTab);",
          "6471:         pTab = 0;",
          "6472:       }else{",
          "6473:         raw_printf(pState->out,",
          "6474:             \"CREATE TABLE %s(rootpgno INTEGER, \"",
          "6475:             \"pgno INTEGER, nfield INTEGER, id INTEGER\", pTab->zQuoted",
          "6476:         );",
          "6477:         for(i=0; i<nCol; i++){",
          "6478:           raw_printf(pState->out, \", c%d\", i);",
          "6479:         }",
          "6480:         raw_printf(pState->out, \");\\n\");",
          "6481:       }",
          "6483:     sqlite3_free(zTab);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6443:   int i;",
          "6444:   int nOrphan = -1;",
          "6445:   RecoverTable *pOrphan = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6499:   const char *zLostAndFound = \"lost_and_found\";",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6452:     n = strlen(z);",
          "6453:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6454:       bFreelist = 0;",
          "6456:     if( n<=12 && memcmp(\"-recovery-db\", z, n)==0 && i<(nArg-1) ){",
          "6457:       i++;",
          "6458:       zRecoveryDb = azArg[i];",
          "6459:     }",
          "6460:     else{",
          "6461:       raw_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6462:       raw_printf(stderr, \"options are:\\n\");",
          "6463:       raw_printf(stderr, \"    --freelist-corrupt\\n\");",
          "6464:       raw_printf(stderr, \"    --recovery-db DATABASE\\n\");",
          "6465:       return 1;",
          "6466:     }",
          "6467:   }",
          "",
          "[Removed Lines]",
          "6455:     }",
          "",
          "[Added Lines]",
          "6512:     }else",
          "6516:     }else",
          "6517:     if( n<=15 && memcmp(\"-lost-and-found\", z, n)==0 && i<(nArg-1) ){",
          "6518:       i++;",
          "6519:       zLostAndFound = azArg[i];",
          "6526:       raw_printf(stderr, \"    --lost-and-found TABLE-NAME\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6599:   }",
          "6600:   shellFinalize(&rc, pLoop);",
          "6601:   pLoop = 0;",
          "6604:   shellPrepare(pState->db, &rc,",
          "6605:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "",
          "[Removed Lines]",
          "6602:   pOrphan = recoverOrphanTable(pState, &rc, nOrphan);",
          "",
          "[Added Lines]",
          "6664:   pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6624:     int bNoop = 0;",
          "6625:     RecoverTable *pTab;",
          "6628:     if( bNoop || rc ) continue;",
          "6629:     if( pTab==0 ) pTab = pOrphan;",
          "6632:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6633:     }",
          "6634:     sqlite3_bind_int(pPages, 1, iRoot);",
          "",
          "[Removed Lines]",
          "6627:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6631:     if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "",
          "[Added Lines]",
          "6689:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6693:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"'sqlite_sequence'\") ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7042:     p->nErr = 0;",
          "7043:     if( zLike==0 ){",
          "7044:       run_schema_dump_query(p,",
          "7048:       run_schema_dump_query(p,",
          "7052:       run_table_dump_query(p,",
          "7056:     }else{",
          "7057:       char *zSql;",
          "7058:       zSql = sqlite3_mprintf(",
          "7062:       run_schema_dump_query(p,zSql);",
          "7063:       sqlite3_free(zSql);",
          "7064:       zSql = sqlite3_mprintf(",
          "7069:       run_table_dump_query(p, zSql, 0);",
          "7070:       sqlite3_free(zSql);",
          "7071:     }",
          "",
          "[Removed Lines]",
          "7045:           \"SELECT name, type, sql FROM sqlite_master \"",
          "7046:           \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "7047:           );",
          "7049:           \"SELECT name, type, sql FROM sqlite_master \"",
          "7050:           \"WHERE name=='sqlite_sequence'\"",
          "7051:           );",
          "7053:           \"SELECT sql FROM sqlite_master \"",
          "7054:           \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "7055:           );",
          "7059:           \"SELECT name, type, sql FROM sqlite_master \"",
          "7060:           \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "7061:           \"  AND sql NOT NULL\", zLike);",
          "7065:           \"SELECT sql FROM sqlite_master \"",
          "7066:           \"WHERE sql NOT NULL\"",
          "7067:           \"  AND type IN ('index','trigger','view')\"",
          "7068:           \"  AND tbl_name LIKE %Q\", zLike);",
          "",
          "[Added Lines]",
          "7107:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7108:         \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "7109:       );",
          "7111:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7112:         \"WHERE name=='sqlite_sequence'\"",
          "7113:       );",
          "7115:         \"SELECT sql FROM sqlite_master \"",
          "7116:         \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "7117:       );",
          "7121:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7122:         \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "7123:         \"  AND sql NOT NULL\", zLike);",
          "7127:         \"SELECT sql FROM sqlite_master \"",
          "7128:         \"WHERE sql NOT NULL\"",
          "7129:         \"  AND type IN ('index','trigger','view')\"",
          "7130:         \"  AND tbl_name LIKE %Q\", zLike);",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   }",
          "40: }",
          "43:   set fd [open \"|$::CLI test.db .recover\"]",
          "44:   fconfigure $fd -encoding binary",
          "45:   fconfigure $fd -translation binary",
          "",
          "[Removed Lines]",
          "42: proc do_recover_test {tn} {",
          "",
          "[Added Lines]",
          "42: proc do_recover_test {tn {tsql {}} {res {}}} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   forcedelete test.db2",
          "50:   sqlite3 db2 test.db2",
          "52:   execsql $sql db2",
          "54:   db2 close",
          "55: }",
          "",
          "[Removed Lines]",
          "51:   breakpoint",
          "53:   uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "",
          "[Added Lines]",
          "52:   if {$tsql==\"\"} {",
          "53:     uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "54:   } else {",
          "55:     uplevel [list do_execsql_test -db db2 $tn $tsql $res]",
          "56:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: do_recover_test 2.1.1",
          "99: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: do_execsql_test 2.2.0 {",
          "103:   PRAGMA writable_schema = 1;",
          "104:   DELETE FROM sqlite_master WHERE name='t1';",
          "105: }",
          "106: do_recover_test 2.2.1 {",
          "107:   SELECT name FROM sqlite_master",
          "108: } {lost_and_found}",
          "110: do_execsql_test 2.3.0 {",
          "111:   CREATE TABLE lost_and_found(a, b, c);",
          "112: }",
          "113: do_recover_test 2.3.1 {",
          "114:   SELECT name FROM sqlite_master",
          "115: } {lost_and_found lost_and_found_0}",
          "117: do_execsql_test 2.4.0 {",
          "118:   CREATE TABLE lost_and_found_0(a, b, c);",
          "119: }",
          "120: do_recover_test 2.4.1 {",
          "121:   SELECT name FROM sqlite_master;",
          "122:   SELECT * FROM lost_and_found_1;",
          "123: } {lost_and_found lost_and_found_0 lost_and_found_1",
          "124:   2 2 3 {} 2 3 1",
          "125:   2 2 3 {} 5 6 4",
          "126:   2 2 3 {} 8 9 7",
          "127: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}