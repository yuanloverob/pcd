{
  "cve_id": "CVE-2019-10898",
  "cve_desc": "In Wireshark 3.0.0, the GSUP dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-gsm_gsup.c by rejecting an invalid Information Element length.",
  "repo": "wireshark/wireshark",
  "patch_hash": "5a8e9e35b36d235930cc70b42f356418c9ea0da1",
  "patch_info": {
    "commit_hash": "5a8e9e35b36d235930cc70b42f356418c9ea0da1",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/5a8e9e35b36d235930cc70b42f356418c9ea0da1",
    "files": [
      "epan/dissectors/packet-gsm_gsup.c"
    ],
    "message": "gsm_gsup: check the current len against the caller length.\n\nWhen the former is greater than the latter, we have a malformed\npacket. Add an expert info and stop the dissection.\n\nBug: 15585\nChange-Id: I37e35ed7bfe96fe6896fa5bf3c32bae50a427c60\nReviewed-on: https://code.wireshark.org/review/32382\nPetri-Dish: Dario Lombardo <lomato@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Oliver Smith <osmith@sysmocom.de>\nReviewed-by: Dario Lombardo <lomato@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c": [
      "File: epan/dissectors/packet-gsm_gsup.c -> epan/dissectors/packet-gsm_gsup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "238: static expert_field ei_sm_rp_da_invalid = EI_INIT;",
      "239: static expert_field ei_sm_rp_oa_invalid = EI_INIT;",
      "241: static dissector_handle_t gsm_map_handle;",
      "242: static dissector_handle_t gsm_sms_handle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "240: static expert_field ei_gsup_ie_len_invalid = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "523:  while (offset - base_offs < length) {",
      "524:   guint8 tag;",
      "526:   proto_item *ti;",
      "527:   proto_tree *att_tree;",
      "528:   const guchar *apn;",
      "",
      "[Removed Lines]",
      "525:   unsigned int len;",
      "",
      "[Added Lines]",
      "526:   guint8 len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "535:   len = tvb_get_guint8(tvb, offset);",
      "536:   offset++;",
      "538:   att_tree = proto_tree_add_subtree_format(tree, tvb, offset-2, len+2, ett_gsup_ie, &ti,",
      "539:       \"IE: %s\",",
      "540:       val_to_str(tag, gsup_iei_types, \"Unknown 0x%02x\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "539:   if (offset - base_offs + len > length) {",
      "540:    expert_add_info(pinfo, gsup_ti, &ei_gsup_ie_len_invalid);",
      "541:    return offset - 2;",
      "542:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "778:   { &ei_sm_rp_oa_invalid,",
      "779:     { \"gsup.sm_rp_oa.invalid\", PI_PROTOCOL, PI_ERROR,",
      "780:       \"Malformed SM-RP-OA IE\", EXPFILL } },",
      "781:  };",
      "783:  proto_gsup = proto_register_protocol(\"Osmocom General Subscriber Update Protocol\", \"gsup\", \"gsup\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "787:   { &ei_gsup_ie_len_invalid,",
      "788:     { \"gsup.ie.len.invalid\", PI_PROTOCOL, PI_MALFORMED,",
      "789:       \"Invalid Information Element Length\", EXPFILL } },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "265e81ca3c4a3706bb56317ab9f3fe7654abb92f",
      "candidate_info": {
        "commit_hash": "265e81ca3c4a3706bb56317ab9f3fe7654abb92f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/265e81ca3c4a3706bb56317ab9f3fe7654abb92f",
        "files": [
          "docbook/release-notes.asciidoc",
          "epan/dissectors/CMakeLists.txt",
          "epan/dissectors/packet-gsm_gsup.c",
          "epan/dissectors/packet-gsm_ipa.c"
        ],
        "message": "Dissector for the Osmocom GSUP Protocol\n\nThe Osmocom GSUP protocol is a light-weight alternative to the\nclassic GSM MAP protocol. It operates between (MSC|SGSN) and HLR.\n\nChange-Id: I954c7e332dce3a8855f7f4ace0b878f66da6f02e\nReviewed-on: https://code.wireshark.org/review/25477\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c",
          "epan/dissectors/packet-gsm_ipa.c||epan/dissectors/packet-gsm_ipa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: [commaize]",
          "56: --",
          "57: NR (5G) PDCP protocol",
          "58: --",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: GSUP (Osmocom Generic Subscriber Update Protocol)",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c": [
          "File: epan/dissectors/packet-gsm_gsup.c -> epan/dissectors/packet-gsm_gsup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"config.h\"",
          "27: #include <epan/packet.h>",
          "28: #include <epan/conversation.h>",
          "30: #include \"packet-e164.h\"",
          "31: #include \"packet-e212.h\"",
          "32: #include \"packet-dns.h\"",
          "47: #define OSMO_GSUP_PORT 4222",
          "48: #define IPAC_PROTO_EXT_GSUP 0x05",
          "53: #define OSMO_GSUP_MAX_NUM_AUTH_INFO  5",
          "55: #define OSMO_GSUP_MAX_MSISDN_LEN  9",
          "57: #define OSMO_GSUP_PDP_TYPE_SIZE   2",
          "60: enum osmo_gsup_iei {",
          "61:  OSMO_GSUP_IMSI_IE   = 0x01,",
          "62:  OSMO_GSUP_CAUSE_IE   = 0x02,",
          "63:  OSMO_GSUP_AUTH_TUPLE_IE   = 0x03,",
          "64:  OSMO_GSUP_PDP_INFO_COMPL_IE  = 0x04,",
          "65:  OSMO_GSUP_PDP_INFO_IE   = 0x05,",
          "66:  OSMO_GSUP_CANCEL_TYPE_IE  = 0x06,",
          "67:  OSMO_GSUP_FREEZE_PTMSI_IE  = 0x07,",
          "68:  OSMO_GSUP_MSISDN_IE   = 0x08,",
          "69:  OSMO_GSUP_HLR_NUMBER_IE   = 0x09,",
          "70:  OSMO_GSUP_PDP_CONTEXT_ID_IE  = 0x10,",
          "71:  OSMO_GSUP_PDP_TYPE_IE   = 0x11,",
          "72:  OSMO_GSUP_ACCESS_POINT_NAME_IE  = 0x12,",
          "73:  OSMO_GSUP_PDP_QOS_IE   = 0x13,",
          "74:  OSMO_GSUP_CHARG_CHAR_IE   = 0x14,",
          "75:  OSMO_GSUP_RAND_IE   = 0x20,",
          "76:  OSMO_GSUP_SRES_IE   = 0x21,",
          "77:  OSMO_GSUP_KC_IE    = 0x22,",
          "79:  OSMO_GSUP_IK_IE    = 0x23,",
          "80:  OSMO_GSUP_CK_IE    = 0x24,",
          "81:  OSMO_GSUP_AUTN_IE   = 0x25,",
          "82:  OSMO_GSUP_AUTS_IE   = 0x26,",
          "83:  OSMO_GSUP_RES_IE   = 0x27,",
          "84:  OSMO_GSUP_CN_DOMAIN_IE   = 0x28,",
          "85: };",
          "88: enum osmo_gsup_message_type {",
          "89:  OSMO_GSUP_MSGT_UPDATE_LOCATION_REQUEST = 0x04,",
          "90:  OSMO_GSUP_MSGT_UPDATE_LOCATION_ERROR = 0x05,",
          "91:  OSMO_GSUP_MSGT_UPDATE_LOCATION_RESULT = 0x06,",
          "93:  OSMO_GSUP_MSGT_SEND_AUTH_INFO_REQUEST = 0x08,",
          "94:  OSMO_GSUP_MSGT_SEND_AUTH_INFO_ERROR = 0x09,",
          "95:  OSMO_GSUP_MSGT_SEND_AUTH_INFO_RESULT = 0x0a,",
          "97:  OSMO_GSUP_MSGT_AUTH_FAIL_REPORT  = 0x0b,",
          "99:  OSMO_GSUP_MSGT_PURGE_MS_REQUEST  = 0x0c,",
          "100:  OSMO_GSUP_MSGT_PURGE_MS_ERROR  = 0x0e,",
          "101:  OSMO_GSUP_MSGT_PURGE_MS_RESULT  = 0x0f,",
          "103:  OSMO_GSUP_MSGT_INSERT_DATA_REQUEST = 0x10,",
          "104:  OSMO_GSUP_MSGT_INSERT_DATA_ERROR = 0x11,",
          "105:  OSMO_GSUP_MSGT_INSERT_DATA_RESULT = 0x12,",
          "107:  OSMO_GSUP_MSGT_DELETE_DATA_REQUEST = 0x14,",
          "108:  OSMO_GSUP_MSGT_DELETE_DATA_ERROR = 0x15,",
          "109:  OSMO_GSUP_MSGT_DELETE_DATA_RESULT = 0x16,",
          "111:  OSMO_GSUP_MSGT_LOCATION_CANCEL_REQUEST = 0x1c,",
          "112:  OSMO_GSUP_MSGT_LOCATION_CANCEL_ERROR = 0x1d,",
          "113:  OSMO_GSUP_MSGT_LOCATION_CANCEL_RESULT = 0x1f,",
          "114: };",
          "116: #define OSMO_GSUP_IS_MSGT_REQUEST(msgt) (((msgt) & 0b00000011) == 0b00)",
          "117: #define OSMO_GSUP_IS_MSGT_ERROR(msgt)   (((msgt) & 0b00000011) == 0b01)",
          "118: #define OSMO_GSUP_TO_MSGT_ERROR(msgt)   (((msgt) & 0b11111100) | 0b01)",
          "120: enum osmo_gsup_cancel_type {",
          "123: };",
          "125: enum osmo_gsup_cn_domain {",
          "126:  OSMO_GSUP_CN_DOMAIN_PS   = 1,",
          "127:  OSMO_GSUP_CN_DOMAIN_CS   = 2,",
          "128: };",
          "135: void proto_register_gsup(void);",
          "136: void proto_reg_handoff_gsup(void);",
          "138: static int proto_gsup = -1;",
          "140: static int hf_gsup_msg_type = -1;",
          "141: static int hf_gsup_iei = -1;",
          "142: static int hf_gsup_ie_len = -1;",
          "143: static int hf_gsup_ie_payload = -1;",
          "144: static int hf_gsup_cause = -1;",
          "145: static int hf_gsup_pdp_info_compl = -1;",
          "146: static int hf_gsup_cancel_type = -1;",
          "147: static int hf_gsup_freeze_ptmsi = -1;",
          "148: static int hf_gsup_pdp_context_id = -1;",
          "149: static int hf_gsup_charg_char = -1;",
          "150: static int hf_gsup_apn = -1;",
          "151: static int hf_gsup_cn_domain = -1;",
          "152: static int hf_gsup_rand = -1;",
          "153: static int hf_gsup_sres = -1;",
          "154: static int hf_gsup_kc = -1;",
          "155: static int hf_gsup_ik = -1;",
          "156: static int hf_gsup_ck = -1;",
          "157: static int hf_gsup_autn = -1;",
          "158: static int hf_gsup_auts = -1;",
          "159: static int hf_gsup_res = -1;",
          "161: static gint ett_gsup = -1;",
          "162: static gint ett_gsup_ie = -1;",
          "164: static const value_string gsup_iei_types[] = {",
          "165:  { OSMO_GSUP_IMSI_IE,  \"IMSI\" },",
          "166:  { OSMO_GSUP_CAUSE_IE,  \"Cause\" },",
          "167:  { OSMO_GSUP_AUTH_TUPLE_IE, \"Authentication Tuple\" },",
          "168:  { OSMO_GSUP_PDP_INFO_COMPL_IE, \"PDP Information Complete\" },",
          "169:  { OSMO_GSUP_PDP_INFO_IE, \"PDP Information\" },",
          "170:  { OSMO_GSUP_CANCEL_TYPE_IE, \"Cancel Type\" },",
          "171:  { OSMO_GSUP_FREEZE_PTMSI_IE, \"Freeze P-TMSI\" },",
          "172:  { OSMO_GSUP_MSISDN_IE,  \"MSISDN\" },",
          "173:  { OSMO_GSUP_HLR_NUMBER_IE, \"HLR Number\" },",
          "174:  { OSMO_GSUP_PDP_CONTEXT_ID_IE, \"PDP Context ID\" },",
          "175:  { OSMO_GSUP_PDP_TYPE_IE, \"PDP Type\" },",
          "176:  { OSMO_GSUP_ACCESS_POINT_NAME_IE, \"Access Point Name (APN)\" },",
          "177:  { OSMO_GSUP_PDP_QOS_IE,  \"PDP Quality of Service (QoS)\" },",
          "178:  { OSMO_GSUP_CHARG_CHAR_IE, \"Charging Character\" },",
          "179:  { OSMO_GSUP_RAND_IE,  \"RAND\" },",
          "180:  { OSMO_GSUP_SRES_IE,  \"SRES\" },",
          "181:  { OSMO_GSUP_KC_IE,  \"Kc\" },",
          "182:  { OSMO_GSUP_IK_IE,  \"IK\" },",
          "183:  { OSMO_GSUP_CK_IE,  \"CK\" },",
          "184:  { OSMO_GSUP_AUTN_IE,  \"AUTN\" },",
          "185:  { OSMO_GSUP_AUTS_IE,  \"AUTS\" },",
          "186:  { OSMO_GSUP_RES_IE,  \"RES\" },",
          "187:  { OSMO_GSUP_CN_DOMAIN_IE, \"CN Domain\" },",
          "188:  { 0, NULL }",
          "189: };",
          "191: static const value_string gsup_msg_types[] = {",
          "192:  { OSMO_GSUP_MSGT_UPDATE_LOCATION_REQUEST,  \"UpdateLocation Request\" },",
          "193:  { OSMO_GSUP_MSGT_UPDATE_LOCATION_ERROR,  \"UpdateLocation Error\" },",
          "194:  { OSMO_GSUP_MSGT_UPDATE_LOCATION_RESULT, \"UpdateLocation Result\" },",
          "195:  { OSMO_GSUP_MSGT_SEND_AUTH_INFO_REQUEST, \"SendAuthInfo Request\" },",
          "196:  { OSMO_GSUP_MSGT_SEND_AUTH_INFO_ERROR,  \"SendAuthInfo Error\" },",
          "197:  { OSMO_GSUP_MSGT_SEND_AUTH_INFO_RESULT,  \"SendAuthInfo Result\" },",
          "198:  { OSMO_GSUP_MSGT_AUTH_FAIL_REPORT,  \"AuthFail Report\" },",
          "199:  { OSMO_GSUP_MSGT_PURGE_MS_REQUEST,  \"PurgeMS Request\" },",
          "200:  { OSMO_GSUP_MSGT_PURGE_MS_ERROR,  \"PurgeMS Error\" },",
          "201:  { OSMO_GSUP_MSGT_PURGE_MS_RESULT,  \"PurgeMS Result\" },",
          "202:  { OSMO_GSUP_MSGT_INSERT_DATA_REQUEST,  \"InsertSubscriberData Request\" },",
          "203:  { OSMO_GSUP_MSGT_INSERT_DATA_ERROR,  \"InsertSubscriberData Error\" },",
          "204:  { OSMO_GSUP_MSGT_INSERT_DATA_RESULT,  \"InsertSubscriberData Result\" },",
          "205:  { OSMO_GSUP_MSGT_DELETE_DATA_REQUEST,  \"DeleteSubscriberData Request\" },",
          "206:  { OSMO_GSUP_MSGT_DELETE_DATA_ERROR,  \"DeleteSubscriberData Error\" },",
          "207:  { OSMO_GSUP_MSGT_DELETE_DATA_RESULT,  \"DeleteSubscriberData Result\" },",
          "208:  { OSMO_GSUP_MSGT_LOCATION_CANCEL_REQUEST, \"LocationCancel Request\" },",
          "209:  { OSMO_GSUP_MSGT_LOCATION_CANCEL_ERROR,  \"LocationCancel Error\" },",
          "210:  { OSMO_GSUP_MSGT_LOCATION_CANCEL_RESULT, \"LocationCancel Result\" },",
          "211:  { 0, NULL }",
          "212: };",
          "214: static const value_string gsup_cancel_types[] = {",
          "215:  { OSMO_GSUP_CANCEL_TYPE_UPDATE,  \"Update\" },",
          "216:  { OSMO_GSUP_CANCEL_TYPE_WITHDRAW, \"Withdraw\" },",
          "217:  { 0, NULL }",
          "218: };",
          "220: static const value_string gsup_cndomain_types[] = {",
          "221:  { OSMO_GSUP_CN_DOMAIN_PS,  \"PS\" },",
          "222:  { OSMO_GSUP_CN_DOMAIN_CS,  \"CS\" },",
          "223:  { 0, NULL }",
          "224: };",
          "226: static gint",
          "227: dissect_gsup_tlvs(tvbuff_t *tvb, int base_offs, int length, packet_info *pinfo, proto_tree *tree,",
          "228:     proto_item *gsup_ti)",
          "229: {",
          "230:  int offset = base_offs;",
          "232:  while (offset - base_offs < length) {",
          "233:   guint8 tag;",
          "234:   unsigned int len;",
          "235:   proto_item *ti;",
          "236:   proto_tree *att_tree;",
          "237:   const guchar *apn;",
          "238:   const gchar *str;",
          "239:   guint apn_len;",
          "241:   tag = tvb_get_guint8(tvb, offset);",
          "242:   offset++;",
          "244:   len = tvb_get_guint8(tvb, offset);",
          "245:   offset++;",
          "247:   att_tree = proto_tree_add_subtree_format(tree, tvb, offset-2, len+2, ett_gsup_ie, &ti,",
          "248:       \"IE: %s\",",
          "249:       val_to_str(tag, gsup_iei_types, \"Unknown 0x%02x\"));",
          "250:   proto_tree_add_item(att_tree, hf_gsup_iei, tvb, offset-2, 1, ENC_BIG_ENDIAN);",
          "251:   proto_tree_add_uint(att_tree, hf_gsup_ie_len, tvb, offset-1, 1, len);",
          "253:   switch (tag) {",
          "255:   case OSMO_GSUP_AUTH_TUPLE_IE:",
          "256:   case OSMO_GSUP_PDP_INFO_IE:",
          "257:    dissect_gsup_tlvs(tvb, offset, len, pinfo, att_tree, gsup_ti);",
          "258:    break;",
          "260:   case OSMO_GSUP_RAND_IE:",
          "261:    proto_tree_add_item(att_tree, hf_gsup_rand, tvb, offset, len, ENC_NA);",
          "262:    break;",
          "263:   case OSMO_GSUP_SRES_IE:",
          "264:    proto_tree_add_item(att_tree, hf_gsup_sres, tvb, offset, len, ENC_NA);",
          "265:    break;",
          "266:   case OSMO_GSUP_KC_IE:",
          "267:    proto_tree_add_item(att_tree, hf_gsup_kc, tvb, offset, len, ENC_NA);",
          "268:    break;",
          "269:   case OSMO_GSUP_IK_IE:",
          "270:    proto_tree_add_item(att_tree, hf_gsup_ik, tvb, offset, len, ENC_NA);",
          "271:    break;",
          "272:   case OSMO_GSUP_CK_IE:",
          "273:    proto_tree_add_item(att_tree, hf_gsup_ck, tvb, offset, len, ENC_NA);",
          "274:    break;",
          "275:   case OSMO_GSUP_AUTN_IE:",
          "276:    proto_tree_add_item(att_tree, hf_gsup_autn, tvb, offset, len, ENC_NA);",
          "277:    break;",
          "278:   case OSMO_GSUP_AUTS_IE:",
          "279:    proto_tree_add_item(att_tree, hf_gsup_auts, tvb, offset, len, ENC_NA);",
          "280:    break;",
          "281:   case OSMO_GSUP_RES_IE:",
          "282:    proto_tree_add_item(att_tree, hf_gsup_res, tvb, offset, len, ENC_NA);",
          "283:    break;",
          "284:   case OSMO_GSUP_CN_DOMAIN_IE:",
          "285:    proto_tree_add_item(att_tree, hf_gsup_cn_domain, tvb, offset, len, ENC_NA);",
          "286:    break;",
          "287:   case OSMO_GSUP_CANCEL_TYPE_IE:",
          "288:    proto_tree_add_item(att_tree, hf_gsup_cancel_type, tvb, offset, len, ENC_NA);",
          "289:    break;",
          "290:   case OSMO_GSUP_IMSI_IE:",
          "291:    str = dissect_e212_imsi(tvb, pinfo, att_tree, offset, len, FALSE);",
          "292:    proto_item_append_text(ti, \", %s\", str);",
          "293:    proto_item_append_text(gsup_ti, \", IMSI: %s\", str);",
          "294:    break;",
          "295:   case OSMO_GSUP_MSISDN_IE:",
          "296:    str = dissect_e164_msisdn(tvb, att_tree, offset+1, len-1, E164_ENC_BCD);",
          "297:    proto_item_append_text(ti, \", %s\", str);",
          "298:    proto_item_append_text(gsup_ti, \", MSISDN: %s\", str);",
          "299:    break;",
          "300:   case OSMO_GSUP_ACCESS_POINT_NAME_IE:",
          "301:    get_dns_name(tvb, offset, len, 0, &apn, &apn_len);",
          "302:    proto_tree_add_string(att_tree, hf_gsup_apn, tvb, offset, len, apn);",
          "303:    proto_item_append_text(ti, \", %s\", apn);",
          "304:    break;",
          "305:   case OSMO_GSUP_PDP_CONTEXT_ID_IE:",
          "306:    proto_tree_add_item(att_tree, hf_gsup_pdp_context_id, tvb, offset, len, ENC_NA);",
          "307:    break;",
          "308:   case OSMO_GSUP_CHARG_CHAR_IE:",
          "309:    proto_tree_add_item(att_tree, hf_gsup_charg_char, tvb, offset, len, ENC_ASCII|ENC_NA);",
          "310:    break;",
          "311:   case OSMO_GSUP_CAUSE_IE:",
          "312:    proto_tree_add_item(att_tree, hf_gsup_cause, tvb, offset, len, ENC_NA);",
          "313:    break;",
          "315:   case OSMO_GSUP_PDP_INFO_COMPL_IE:",
          "316:    proto_tree_add_item(att_tree, hf_gsup_pdp_info_compl, tvb, offset, len, ENC_NA);",
          "317:    break;",
          "318:   case OSMO_GSUP_FREEZE_PTMSI_IE:",
          "319:    proto_tree_add_item(att_tree, hf_gsup_freeze_ptmsi, tvb, offset, len, ENC_NA);",
          "320:    break;",
          "321:   case OSMO_GSUP_HLR_NUMBER_IE:",
          "322:   case OSMO_GSUP_PDP_TYPE_IE:",
          "323:   case OSMO_GSUP_PDP_QOS_IE:",
          "324:   default:",
          "326:    proto_tree_add_item(att_tree, hf_gsup_iei, tvb, offset-2, 1, ENC_BIG_ENDIAN);",
          "327:    proto_tree_add_uint(att_tree, hf_gsup_ie_len, tvb, offset-1, 1, len);",
          "328:    proto_tree_add_item(att_tree, hf_gsup_ie_payload, tvb, offset, len, ENC_NA);",
          "329:    break;",
          "330:   }",
          "332:   offset += len;",
          "333:  }",
          "335:  return offset;",
          "336: }",
          "338: static int",
          "339: dissect_gsup(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "340: {",
          "341:  int len, offset = 0;",
          "342:  proto_item *ti;",
          "343:  proto_tree *gsup_tree = NULL;",
          "344:  guint8 msg_type;",
          "345:  const char *str;",
          "348:  len = tvb_reported_length(tvb);",
          "349:  msg_type = tvb_get_guint8(tvb, offset + 0);",
          "351:  col_set_str(pinfo->cinfo, COL_PROTOCOL, \"GSUP\");",
          "353:  col_clear(pinfo->cinfo, COL_INFO);",
          "354:  str = val_to_str(msg_type, gsup_msg_types, \"Unknown GSUP Message Type 0x%02x\");",
          "355:  col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", str);",
          "357:  if (tree) {",
          "358:   ti = proto_tree_add_protocol_format(tree, proto_gsup, tvb, 0, len, \"GSUP %s\", str);",
          "359:   gsup_tree = proto_item_add_subtree(ti, ett_gsup);",
          "361:   proto_tree_add_item(gsup_tree, hf_gsup_msg_type,",
          "362:         tvb, offset, 1, ENC_BIG_ENDIAN);",
          "363:   offset++;",
          "365:   dissect_gsup_tlvs(tvb, offset, tvb_reported_length_remaining(tvb, offset), pinfo,",
          "366:       gsup_tree, ti);",
          "367:  }",
          "369:  return tvb_captured_length(tvb);",
          "370: }",
          "372: void",
          "373: proto_register_gsup(void)",
          "374: {",
          "375:  static hf_register_info hf[] = {",
          "376:   { &hf_gsup_msg_type, { \"Message Type\", \"gsup.msg_type\",",
          "377:     FT_UINT8, BASE_DEC, VALS(gsup_msg_types), 0, NULL, HFILL } },",
          "378:   { &hf_gsup_iei, { \"Information Element Identifier\", \"gsup.ie.iei\",",
          "379:     FT_UINT8, BASE_DEC, VALS(gsup_iei_types), 0, NULL, HFILL } },",
          "380:   { &hf_gsup_ie_len, { \"Information Element Length\", \"gsup.ie.len\",",
          "381:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "382:   { &hf_gsup_ie_payload, { \"Information Element Payload\", \"gsup.ie.payload\",",
          "383:     FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "385:   { &hf_gsup_rand, { \"RAND\", \"gsup.rand\",",
          "386:     FT_BYTES, BASE_NONE, NULL, 0, \"Random Challenge\", HFILL } },",
          "387:   { &hf_gsup_sres, { \"SRES\", \"gsup.sres\",",
          "388:     FT_BYTES, BASE_NONE, NULL, 0, \"GSM/GPRS Authentication Result SRES Value\", HFILL } },",
          "389:   { &hf_gsup_kc, { \"Kc\", \"gsup.kc\",",
          "390:     FT_BYTES, BASE_NONE, NULL, 0, \"GSM/GPRS Ciphering Key\", HFILL } },",
          "391:   { &hf_gsup_ik, { \"IK\", \"gsup.ik\",",
          "392:     FT_BYTES, BASE_NONE, NULL, 0, \"UMTS Integrity Protection Key\", HFILL } },",
          "393:   { &hf_gsup_ck, { \"CK\", \"gsup.ck\",",
          "394:     FT_BYTES, BASE_NONE, NULL, 0, \"UMTS Ciphering Key\", HFILL } },",
          "395:   { &hf_gsup_autn, { \"AUTN\", \"gsup.autn\",",
          "396:     FT_BYTES, BASE_NONE, NULL, 0, \"UMTS Authentication Nonce\", HFILL } },",
          "397:   { &hf_gsup_auts, { \"AUTN\", \"gsup.auts\",",
          "398:     FT_BYTES, BASE_NONE, NULL, 0, \"UMTS Authentication Sync\", HFILL } },",
          "399:   { &hf_gsup_res, { \"RES\", \"gsup.res\",",
          "400:     FT_BYTES, BASE_NONE, NULL, 0, \"UMTS Authentication Result\", HFILL } },",
          "402:   { &hf_gsup_cn_domain, { \"CN Domain Indicator\", \"gsup.cn_domain\",",
          "403:     FT_UINT8, BASE_DEC, VALS(gsup_cndomain_types), 0, NULL, HFILL } },",
          "404:   { &hf_gsup_cancel_type, { \"Cancel Type\", \"gsup.cancel_type\",",
          "405:     FT_UINT8, BASE_DEC, VALS(gsup_cancel_types), 0, NULL, HFILL } },",
          "406:   { &hf_gsup_pdp_info_compl, { \"PDP Information Complete\", \"gsup.pdp_info_compl\",",
          "407:     FT_BOOLEAN, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "408:   { &hf_gsup_freeze_ptmsi, { \"Freeze P-TMSI\", \"gsup.freeze_ptmsi\",",
          "409:     FT_BOOLEAN, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "410:   { &hf_gsup_apn, { \"APN\", \"gsup.apn\",",
          "411:     FT_STRING, BASE_NONE, NULL, 0, \"Access Point Name\", HFILL } },",
          "412:   { &hf_gsup_pdp_context_id, { \"PDP Context ID\", \"gsup.pdp_context_id\",",
          "413:     FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "414:   { &hf_gsup_charg_char, { \"Charging Character\", \"gsup.charg_char\",",
          "415:     FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "416:   { &hf_gsup_cause, { \"Cause\", \"gsup.cause\",",
          "417:     FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "418:  };",
          "419:  static gint *ett[] = {",
          "420:   &ett_gsup,",
          "421:   &ett_gsup_ie,",
          "422:  };",
          "424:  proto_gsup = proto_register_protocol(\"Osmocom General Subscriber Update Protocol\", \"gsup\", \"gsup\");",
          "425:  proto_register_field_array(proto_gsup, hf, array_length(hf));",
          "426:  proto_register_subtree_array(ett, array_length(ett));",
          "427: }",
          "429: void",
          "430: proto_reg_handoff_gsup(void)",
          "431: {",
          "432:  dissector_handle_t gsup_handle;",
          "433:  gsup_handle = create_dissector_handle(dissect_gsup, proto_gsup);",
          "434:  dissector_add_uint_with_preference(\"ipa.osmo.protocol\", IPAC_PROTO_EXT_GSUP, gsup_handle);",
          "435: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_ipa.c||epan/dissectors/packet-gsm_ipa.c": [
          "File: epan/dissectors/packet-gsm_ipa.c -> epan/dissectors/packet-gsm_ipa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: static dissector_handle_t ipa_tcp_handle;",
          "65: static dissector_handle_t ipa_udp_handle;",
          "",
          "[Removed Lines]",
          "62: #define IPA_TCP_PORTS \"3002,3003,3006,4249,4250,5000\"",
          "",
          "[Added Lines]",
          "62: #define IPA_TCP_PORTS \"3002,3003,3006,4222,4249,4250,5000\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:  { 0x01,  \"MGCP\" },",
          "153:  { 0x02,  \"LAC\" },",
          "154:  { 0x03,  \"SMSC\" },",
          "155:  { 0,  NULL }",
          "156: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:  { 0x05,  \"GSUP\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f80b7d1b279fb6c13f640019a1bbc42b18bf7469",
      "candidate_info": {
        "commit_hash": "f80b7d1b279fb6c13f640019a1bbc42b18bf7469",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f80b7d1b279fb6c13f640019a1bbc42b18bf7469",
        "files": [
          "epan/dissectors/packet-gsm_gsup.c"
        ],
        "message": "gsm_gsup: check the current len against the caller length.\n\nWhen the former is greater than the latter, we have a malformed\npacket. Add an expert info and stop the dissection.\n\nBug: 15585\nChange-Id: I37e35ed7bfe96fe6896fa5bf3c32bae50a427c60\nReviewed-on: https://code.wireshark.org/review/32382\nPetri-Dish: Dario Lombardo <lomato@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Oliver Smith <osmith@sysmocom.de>\nReviewed-by: Dario Lombardo <lomato@gmail.com>\n(cherry picked from commit 5d9d7893d6723b4545d4c2c765002e4830493dc6)\nReviewed-on: https://code.wireshark.org/review/32396",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_gsup.c||epan/dissectors/packet-gsm_gsup.c": [
          "File: epan/dissectors/packet-gsm_gsup.c -> epan/dissectors/packet-gsm_gsup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: static expert_field ei_sm_rp_da_invalid = EI_INIT;",
          "239: static expert_field ei_sm_rp_oa_invalid = EI_INIT;",
          "241: static dissector_handle_t gsm_map_handle;",
          "242: static dissector_handle_t gsm_sms_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: static expert_field ei_gsup_ie_len_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523:  while (offset - base_offs < length) {",
          "524:   guint8 tag;",
          "526:   proto_item *ti;",
          "527:   proto_tree *att_tree;",
          "528:   const guchar *apn;",
          "",
          "[Removed Lines]",
          "525:   unsigned int len;",
          "",
          "[Added Lines]",
          "526:   guint8 len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "535:   len = tvb_get_guint8(tvb, offset);",
          "536:   offset++;",
          "538:   att_tree = proto_tree_add_subtree_format(tree, tvb, offset-2, len+2, ett_gsup_ie, &ti,",
          "539:       \"IE: %s\",",
          "540:       val_to_str(tag, gsup_iei_types, \"Unknown 0x%02x\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:   if (offset - base_offs + len > length) {",
          "540:    expert_add_info(pinfo, gsup_ti, &ei_gsup_ie_len_invalid);",
          "541:    return offset - 2;",
          "542:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "778:   { &ei_sm_rp_oa_invalid,",
          "779:     { \"gsup.sm_rp_oa.invalid\", PI_PROTOCOL, PI_ERROR,",
          "780:       \"Malformed SM-RP-OA IE\", EXPFILL } },",
          "781:  };",
          "783:  proto_gsup = proto_register_protocol(\"Osmocom General Subscriber Update Protocol\", \"gsup\", \"gsup\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:   { &ei_gsup_ie_len_invalid,",
          "788:     { \"gsup.ie.len.invalid\", PI_PROTOCOL, PI_MALFORMED,",
          "789:       \"Invalid Information Element Length\", EXPFILL } },",
          "",
          "---------------"
        ]
      }
    }
  ]
}