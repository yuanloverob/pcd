{
  "cve_id": "CVE-2019-20054",
  "cve_desc": "In the Linux kernel before 5.0.6, there is a NULL pointer dereference in drop_sysctl_table() in fs/proc/proc_sysctl.c, related to put_links, aka CID-23da9588037e.",
  "repo": "torvalds/linux",
  "patch_hash": "23da9588037ecdd4901db76a5b79a42b529c4ec3",
  "patch_info": {
    "commit_hash": "23da9588037ecdd4901db76a5b79a42b529c4ec3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/23da9588037ecdd4901db76a5b79a42b529c4ec3",
    "files": [
      "fs/proc/proc_sysctl.c"
    ],
    "message": "fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links\n\nSyzkaller reports:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 1 PID: 5373 Comm: syz-executor.0 Not tainted 5.0.0-rc8+ #3\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:put_links+0x101/0x440 fs/proc/proc_sysctl.c:1599\nCode: 00 0f 85 3a 03 00 00 48 8b 43 38 48 89 44 24 20 48 83 c0 38 48 89 c2 48 89 44 24 28 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 fe 02 00 00 48 8b 74 24 20 48 c7 c7 60 2a 9d 91\nRSP: 0018:ffff8881d828f238 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8881e01b1140 RCX: ffffffff8ee98267\nRDX: 0000000000000007 RSI: ffffc90001479000 RDI: ffff8881e01b1178\nRBP: dffffc0000000000 R08: ffffed103ee27259 R09: ffffed103ee27259\nR10: 0000000000000001 R11: ffffed103ee27258 R12: fffffffffffffff4\nR13: 0000000000000006 R14: ffff8881f59838c0 R15: dffffc0000000000\nFS:  00007f072254f700(0000) GS:ffff8881f7100000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fff8b286668 CR3: 00000001f0542002 CR4: 00000000007606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n drop_sysctl_table+0x152/0x9f0 fs/proc/proc_sysctl.c:1629\n get_subdir fs/proc/proc_sysctl.c:1022 [inline]\n __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335\n br_netfilter_init+0xbc/0x1000 [br_netfilter]\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f072254ec58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000280 RDI: 0000000000000003\nRBP: 00007f072254ec70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f072254f6bc\nR13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004\nModules linked in: br_netfilter(+) dvb_usb_dibusb_mc_common dib3000mc dibx000_common dvb_usb_dibusb_common dvb_usb_dw2102 dvb_usb classmate_laptop palmas_regulator cn videobuf2_v4l2 v4l2_common snd_soc_bd28623 mptbase snd_usb_usx2y snd_usbmidi_lib snd_rawmidi wmi libnvdimm lockd sunrpc grace rc_kworld_pc150u rc_core rtc_da9063 sha1_ssse3 i2c_cros_ec_tunnel adxl34x_spi adxl34x nfnetlink lib80211 i5500_temp dvb_as102 dvb_core videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops udc_core lnbp22 leds_lp3952 hid_roccat_ryos s1d13xxxfb mtd vport_geneve openvswitch nf_conncount nf_nat_ipv6 nsh geneve udp_tunnel ip6_udp_tunnel snd_soc_mt6351 sis_agp phylink snd_soc_adau1761_spi snd_soc_adau1761 snd_soc_adau17x1 snd_soc_core snd_pcm_dmaengine ac97_bus snd_compress snd_soc_adau_utils snd_soc_sigmadsp_regmap snd_soc_sigmadsp raid_class hid_roccat_konepure hid_roccat_common hid_roccat c2port_duramar2150 core mdio_bcm_unimac iptable_security iptable_raw iptable_mangle\n iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim devlink vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel joydev mousedev ide_pci_generic piix aesni_intel aes_x86_64 ide_core crypto_simd atkbd cryptd glue_helper serio_raw ata_generic pata_acpi i2c_piix4 floppy sch_fq_codel ip_tables x_tables ipv6 [last unloaded: lm73]\nDumping ftrace buffer:\n   (ftrace buffer empty)\n---[ end trace 770020de38961fd0 ]---\n\nA new dir entry can be created in get_subdir and its 'header->parent' is\nset to NULL.  Only after insert_header success, it will be set to 'dir',\notherwise 'header->parent' is set to NULL and drop_sysctl_table is called.\nHowever in err handling path of get_subdir, drop_sysctl_table also be\ncalled on 'new->header' regardless its value of parent pointer.  Then\nput_links is called, which triggers NULL-ptr deref when access member of\nheader->parent.\n\nIn fact we have multiple error paths which call drop_sysctl_table() there,\nupon failure on insert_links() we also call drop_sysctl_table().And even\nin the successful case on __register_sysctl_table() we still always call\ndrop_sysctl_table().This patch fix it.\n\nLink: http://lkml.kernel.org/r/20190314085527.13244-1-yuehaibing@huawei.com\nFixes: 0e47c99d7fe25 (\"sysctl: Replace root_list with links between sysctl_table_sets\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nReported-by: Hulk Robot <hulkci@huawei.com>\nAcked-by: Luis Chamberlain <mcgrof@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Alexey Dobriyan <adobriyan@gmail.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Eric W. Biederman <ebiederm@xmission.com>\nCc: <stable@vger.kernel.org>    [3.4+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c"
    ]
  },
  "patch_diff": {
    "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c": [
      "File: fs/proc/proc_sysctl.c -> fs/proc/proc_sysctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1626:  if (--header->nreg)",
      "1627:   return;",
      "1630:  start_unregistering(header);",
      "1631:  if (!--header->count)",
      "1632:   kfree_rcu(header, rcu);",
      "",
      "[Removed Lines]",
      "1629:  put_links(header);",
      "",
      "[Added Lines]",
      "1629:  if (parent)",
      "1630:   put_links(header);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5e06ba2f76809ad1492fdad312e81335df46bc5",
      "candidate_info": {
        "commit_hash": "c5e06ba2f76809ad1492fdad312e81335df46bc5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c5e06ba2f76809ad1492fdad312e81335df46bc5",
        "files": [
          "drivers/scsi/qedf/qedf_io.c"
        ],
        "message": "scsi: qedf: Add missing return in qedf_post_io_req() in the fcport offload check\n\nFixes the following crash as the return was missing from the check if an\nfcport is offloaded. If we hit this code we continue to try to post an\ninvalid task which can lead to the crash:\n\n[30259.616411] [0000:61:00.3]:[qedf_post_io_req:989]:3: Session not offloaded yet.\n[30259.616413] [0000:61:00.3]:[qedf_upload_connection:1340]:3: Uploading connection port_id=490020.\n[30259.623769] BUG: unable to handle kernel NULL pointer dereference at 0000000000000198\n[30259.631645] IP: [<ffffffffc035b1ed>] qedf_init_task.isra.16+0x3d/0x450 [qedf]\n[30259.638816] PGD 0\n[30259.640841] Oops: 0000 [#1] SMP\n[30259.644098] Modules linked in: fuse xt_CHECKSUM iptable_mangle ipt_MASQUERADE nf_nat_masquerade_ipv4 iptable_nat nf_nat_ipv4 nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 xt_conntrack nf_conntrack ipt_REJECT nf_reject_ipv4 tun bridge stp llc ebtable_filter ebtables devlink ip6table_filter ip6_tables iptable_filter vfat fat ib_isert iscsi_target_mod ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib ib_ucm ib_umad dm_service_time skx_edac intel_powerclamp coretemp intel_rapl iosf_mbi kvm_intel kvm irqbypass crc32_pclmul ghash_clmulni_intel aesni_intel rpcrdma sunrpc rdma_ucm ib_uverbs lrw gf128mul ib_iser rdma_cm iw_cm ib_cm libiscsi scsi_transport_iscsi qedr(OE) glue_helper ablk_helper cryptd ib_core dm_round_robin joydev pcspkr ipmi_ssif ses enclosure ipmi_si ipmi_devintf ipmi_msghandler mei_me\n[30259.715529]  mei sg hpilo hpwdt shpchp wmi lpc_ich acpi_power_meter dm_multipath ip_tables xfs libcrc32c sd_mod crc_t10dif crct10dif_generic uas usb_storage mgag200 qedf(OE) i2c_algo_bit libfcoe drm_kms_helper libfc syscopyarea sysfillrect scsi_transport_fc qede(OE) sysimgblt fb_sys_fops ptp ttm pps_core drm qed(OE) smartpqi crct10dif_pclmul crct10dif_common crc32c_intel i2c_core scsi_transport_sas scsi_tgt dm_mirror dm_region_hash dm_log dm_mod\n[30259.754237] CPU: 9 PID: 977 Comm: kdmwork-253:7 Kdump: loaded Tainted: G        W  OE  ------------   3.10.0-862.el7.x86_64 #1\n[30259.765664] Hardware name: HPE Synergy 480 Gen10/Synergy 480 Gen10 Compute Module, BIOS I42 04/04/2018\n[30259.775000] task: ffff8c801efd0000 ti: ffff8c801efd8000 task.ti: ffff8c801efd8000\n[30259.782505] RIP: 0010:[<ffffffffc035b1ed>]  [<ffffffffc035b1ed>] qedf_init_task.isra.16+0x3d/0x450 [qedf]\n[30259.792116] RSP: 0018:ffff8c801efdbbb0  EFLAGS: 00010046\n[30259.797444] RAX: 0000000000000000 RBX: ffffa7f1450948d8 RCX: ffff8c7fe5bc40c8\n[30259.804600] RDX: ffff8c800715b300 RSI: ffffa7f1450948d8 RDI: ffff8c80169c2480\n[30259.811755] RBP: ffff8c801efdbc30 R08: 00000000000000ae R09: ffff8c800a314540\n[30259.818911] R10: ffff8c7fe5bc40c8 R11: ffff8c801efdb8ae R12: 0000000000000000\n[30259.826068] R13: ffff8c800715b300 R14: ffff8c80169c2480 R15: ffff8c8005da28e0\n[30259.833223] FS:  0000000000000000(0000) GS:ffff8c803f840000(0000) knlGS:0000000000000000\n[30259.841338] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[30259.847100] CR2: 0000000000000198 CR3: 000000081242e000 CR4: 00000000007607e0\n[30259.854256] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[30259.861412] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[30259.868568] PKRU: 00000000\n[30259.871278] Call Trace:\n[30259.873737]  [<ffffffffc035c948>] qedf_post_io_req+0x148/0x680 [qedf]\n[30259.880201]  [<ffffffffc035d070>] qedf_queuecommand+0x1f0/0x240 [qedf]\n[30259.886749]  [<ffffffffa329b050>] scsi_dispatch_cmd+0xb0/0x240\n[30259.892600]  [<ffffffffa32a45bc>] scsi_request_fn+0x4cc/0x680\n[30259.898364]  [<ffffffffa3118ad9>] __blk_run_queue+0x39/0x50\n[30259.903954]  [<ffffffffa3114393>] __elv_add_request+0xd3/0x260\n[30259.909805]  [<ffffffffa311baf0>] blk_insert_cloned_request+0xf0/0x1b0\n[30259.916358]  [<ffffffffc010b622>] map_request+0x142/0x220 [dm_mod]\n[30259.922560]  [<ffffffffc010b716>] map_tio_request+0x16/0x40 [dm_mod]\n[30259.928932]  [<ffffffffa2ebb1f5>] kthread_worker_fn+0x85/0x180\n[30259.934782]  [<ffffffffa2ebb170>] ? kthread_stop+0xf0/0xf0\n[30259.940284]  [<ffffffffa2ebae31>] kthread+0xd1/0xe0\n[30259.945176]  [<ffffffffa2ebad60>] ? insert_kthread_work+0x40/0x40\n[30259.951290]  [<ffffffffa351f61d>] ret_from_fork_nospec_begin+0x7/0x21\n[30259.957750]  [<ffffffffa2ebad60>] ? insert_kthread_work+0x40/0x40\n[30259.963860] Code: fe 41 55 49 89 d5 41 54 53 48 89 f3 48 83 ec 58 4c 8b 67 28 4c 8b 4e 18 65 48 8b 04 25 28 00 00 00 48 89 45 d0 31 c0 4c 8b 7e 58 <49> 8b 84 24 98 01 00 00 48 8b 00 f6 80 31 01 00 00 10 0f 85 0b\n[30259.983372] RIP  [<ffffffffc035b1ed>] qedf_init_task.isra.16+0x3d/0x450 [qedf]\n[30259.990630]  RSP <ffff8c801efdbbb0>\n[30259.994127] CR2: 0000000000000198\n\nSigned-off-by: Chad Dupuis <cdupuis@marvell.com>\nSigned-off-by: Saurav Kashyap <skashyap@marvell.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/qedf/qedf_io.c||drivers/scsi/qedf/qedf_io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/qedf/qedf_io.c||drivers/scsi/qedf/qedf_io.c": [
          "File: drivers/scsi/qedf/qedf_io.c -> drivers/scsi/qedf/qedf_io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "902:  if (!test_bit(QEDF_RPORT_SESSION_READY, &fcport->flags)) {",
          "903:   QEDF_ERR(&(qedf->dbg_ctx), \"Session not offloaded yet.\\n\");",
          "904:   kref_put(&io_req->refcount, qedf_release_cmd);",
          "905:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905:   return -EINVAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46ca3f735f345c9d87383dd3a09fa5d43870770e",
      "candidate_info": {
        "commit_hash": "46ca3f735f345c9d87383dd3a09fa5d43870770e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/46ca3f735f345c9d87383dd3a09fa5d43870770e",
        "files": [
          "drivers/tty/vt/keyboard.c"
        ],
        "message": "tty/vt: fix write/write race in ioctl(KDSKBSENT) handler\n\nThe bug manifests as an attempt to access deallocated memory:\n\n    BUG: unable to handle kernel paging request at ffff9c8735448000\n    #PF error: [PROT] [WRITE]\n    PGD 288a05067 P4D 288a05067 PUD 288a07067 PMD 7f60c2063 PTE 80000007f5448161\n    Oops: 0003 [#1] PREEMPT SMP\n    CPU: 6 PID: 388 Comm: loadkeys Tainted: G         C        5.0.0-rc6-00153-g5ded5871030e #91\n    Hardware name: Gigabyte Technology Co., Ltd. To be filled by O.E.M./H77M-D3H, BIOS F12 11/14/2013\n    RIP: 0010:__memmove+0x81/0x1a0\n    Code: 4c 89 4f 10 4c 89 47 18 48 8d 7f 20 73 d4 48 83 c2 20 e9 a2 00 00 00 66 90 48 89 d1 4c 8b 5c 16 f8 4c 8d 54 17 f8 48 c1 e9 03 <f3> 48 a5 4d 89 1a e9 0c 01 00 00 0f 1f 40 00 48 89 d1 4c 8b 1e 49\n    RSP: 0018:ffffa1b9002d7d08 EFLAGS: 00010203\n    RAX: ffff9c873541af43 RBX: ffff9c873541af43 RCX: 00000c6f105cd6bf\n    RDX: 0000637882e986b6 RSI: ffff9c8735447ffb RDI: ffff9c8735447ffb\n    RBP: ffff9c8739cd3800 R08: ffff9c873b802f00 R09: 00000000fffff73b\n    R10: ffffffffb82b35f1 R11: 00505b1b004d5b1b R12: 0000000000000000\n    R13: ffff9c873541af3d R14: 000000000000000b R15: 000000000000000c\n    FS:  00007f450c390580(0000) GS:ffff9c873f180000(0000) knlGS:0000000000000000\n    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n    CR2: ffff9c8735448000 CR3: 00000007e213c002 CR4: 00000000000606e0\n    Call Trace:\n     vt_do_kdgkb_ioctl+0x34d/0x440\n     vt_ioctl+0xba3/0x1190\n     ? __bpf_prog_run32+0x39/0x60\n     ? mem_cgroup_commit_charge+0x7b/0x4e0\n     tty_ioctl+0x23f/0x920\n     ? preempt_count_sub+0x98/0xe0\n     ? __seccomp_filter+0x67/0x600\n     do_vfs_ioctl+0xa2/0x6a0\n     ? syscall_trace_enter+0x192/0x2d0\n     ksys_ioctl+0x3a/0x70\n     __x64_sys_ioctl+0x16/0x20\n     do_syscall_64+0x54/0xe0\n     entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nThe bug manifests on systemd systems with multiple vtcon devices:\n  # cat /sys/devices/virtual/vtconsole/vtcon0/name\n  (S) dummy device\n  # cat /sys/devices/virtual/vtconsole/vtcon1/name\n  (M) frame buffer device\n\nThere systemd runs 'loadkeys' tool in tapallel for each vtcon\ninstance. This causes two parallel ioctl(KDSKBSENT) calls to\nrace into adding the same entry into 'func_table' array at:\n\n    drivers/tty/vt/keyboard.c:vt_do_kdgkb_ioctl()\n\nThe function has no locking around writes to 'func_table'.\n\nThe simplest reproducer is to have initrams with the following\ninit on a 8-CPU machine x86_64:\n\n    #!/bin/sh\n\n    loadkeys -q windowkeys ru4 &\n    loadkeys -q windowkeys ru4 &\n    loadkeys -q windowkeys ru4 &\n    loadkeys -q windowkeys ru4 &\n\n    loadkeys -q windowkeys ru4 &\n    loadkeys -q windowkeys ru4 &\n    loadkeys -q windowkeys ru4 &\n    loadkeys -q windowkeys ru4 &\n    wait\n\nThe change adds lock on write path only. Reads are still racy.\n\nCC: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nCC: Jiri Slaby <jslaby@suse.com>\nLink: https://lkml.org/lkml/2019/2/17/256\nSigned-off-by: Sergei Trofimovich <slyfox@gentoo.org>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/tty/vt/keyboard.c||drivers/tty/vt/keyboard.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/tty/vt/keyboard.c||drivers/tty/vt/keyboard.c": [
          "File: drivers/tty/vt/keyboard.c -> drivers/tty/vt/keyboard.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1990:  char *p;",
          "1991:  u_char *q;",
          "1992:  u_char __user *up;",
          "1994:  int delta;",
          "1995:  char *first_free, *fj, *fnw;",
          "1996:  int i, j, k;",
          "1997:  int ret;",
          "1999:  if (!capable(CAP_SYS_TTY_CONFIG))",
          "2000:   perm = 0;",
          "",
          "[Removed Lines]",
          "1993:  int sz;",
          "",
          "[Added Lines]",
          "1994:  int sz, fnw_sz;",
          "1999:  unsigned long flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2037:    goto reterr;",
          "2038:   }",
          "2040:   q = func_table[i];",
          "2041:   first_free = funcbufptr + (funcbufsize - funcbufleft);",
          "2042:   for (j = i+1; j < MAX_NR_FUNC && !func_table[j]; j++)",
          "2043:    ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2042:   fnw = NULL;",
          "2043:   fnw_sz = 0;",
          "2045:   again:",
          "2046:   spin_lock_irqsave(&func_buf_lock, flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2061:       sz = 256;",
          "2062:       while (sz < funcbufsize - funcbufleft + delta)",
          "2063:         sz <<= 1;",
          "2068:       }",
          "2070:       if (!q)",
          "2071:         func_table[i] = fj;",
          "2072:       if (fj > funcbufptr)",
          "2073:    memmove(fnw, funcbufptr, fj - funcbufptr);",
          "2074:       for (k = 0; k < j; k++)",
          "2075:         if (func_table[k])",
          "2076:    func_table[k] = fnw + (func_table[k] - funcbufptr);",
          "2078:       if (first_free > fj) {",
          "2079:    memmove(fnw + (fj - funcbufptr) + delta, fj, first_free - fj);",
          "2080:    for (k = j; k < MAX_NR_FUNC; k++)",
          "",
          "[Removed Lines]",
          "2064:       fnw = kmalloc(sz, GFP_KERNEL);",
          "2065:       if(!fnw) {",
          "2066:         ret = -ENOMEM;",
          "2067:         goto reterr;",
          "",
          "[Added Lines]",
          "2075:       if (fnw_sz != sz) {",
          "2076:         spin_unlock_irqrestore(&func_buf_lock, flags);",
          "2077:         kfree(fnw);",
          "2078:         fnw = kmalloc(sz, GFP_KERNEL);",
          "2079:         fnw_sz = sz;",
          "2080:         if (!fnw) {",
          "2081:    ret = -ENOMEM;",
          "2082:    goto reterr;",
          "2083:         }",
          "2084:         goto again;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2087:       funcbufleft = funcbufleft - delta + sz - funcbufsize;",
          "2088:       funcbufsize = sz;",
          "2089:   }",
          "2090:   strcpy(func_table[i], kbs->kb_string);",
          "2091:   break;",
          "2092:  }",
          "2093:  ret = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2111:   spin_unlock_irqrestore(&func_buf_lock, flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25adf50fe25d506d3fc12070a5ff4be858a1ac1b",
      "candidate_info": {
        "commit_hash": "25adf50fe25d506d3fc12070a5ff4be858a1ac1b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/25adf50fe25d506d3fc12070a5ff4be858a1ac1b",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: fix double free in case of fileset regitration failure\n\nWill Deacon reported the following KASAN complaint:\n\n[  149.890370] ==================================================================\n[  149.891266] BUG: KASAN: double-free or invalid-free in io_sqe_files_unregister+0xa8/0x140\n[  149.892218]\n[  149.892411] CPU: 113 PID: 3974 Comm: io_uring_regist Tainted: G    B             5.1.0-rc3-00012-g40b114779944 #3\n[  149.893623] Hardware name: linux,dummy-virt (DT)\n[  149.894169] Call trace:\n[  149.894539]  dump_backtrace+0x0/0x228\n[  149.895172]  show_stack+0x14/0x20\n[  149.895747]  dump_stack+0xe8/0x124\n[  149.896335]  print_address_description+0x60/0x258\n[  149.897148]  kasan_report_invalid_free+0x78/0xb8\n[  149.897936]  __kasan_slab_free+0x1fc/0x228\n[  149.898641]  kasan_slab_free+0x10/0x18\n[  149.899283]  kfree+0x70/0x1f8\n[  149.899798]  io_sqe_files_unregister+0xa8/0x140\n[  149.900574]  io_ring_ctx_wait_and_kill+0x190/0x3c0\n[  149.901402]  io_uring_release+0x2c/0x48\n[  149.902068]  __fput+0x18c/0x510\n[  149.902612]  ____fput+0xc/0x18\n[  149.903146]  task_work_run+0xf0/0x148\n[  149.903778]  do_notify_resume+0x554/0x748\n[  149.904467]  work_pending+0x8/0x10\n[  149.905060]\n[  149.905331] Allocated by task 3974:\n[  149.905934]  __kasan_kmalloc.isra.0.part.1+0x48/0xf8\n[  149.906786]  __kasan_kmalloc.isra.0+0xb8/0xd8\n[  149.907531]  kasan_kmalloc+0xc/0x18\n[  149.908134]  __kmalloc+0x168/0x248\n[  149.908724]  __arm64_sys_io_uring_register+0x2b8/0x15a8\n[  149.909622]  el0_svc_common+0x100/0x258\n[  149.910281]  el0_svc_handler+0x48/0xc0\n[  149.910928]  el0_svc+0x8/0xc\n[  149.911425]\n[  149.911696] Freed by task 3974:\n[  149.912242]  __kasan_slab_free+0x114/0x228\n[  149.912955]  kasan_slab_free+0x10/0x18\n[  149.913602]  kfree+0x70/0x1f8\n[  149.914118]  __arm64_sys_io_uring_register+0xc2c/0x15a8\n[  149.915009]  el0_svc_common+0x100/0x258\n[  149.915670]  el0_svc_handler+0x48/0xc0\n[  149.916317]  el0_svc+0x8/0xc\n[  149.916817]\n[  149.917101] The buggy address belongs to the object at ffff8004ce07ed00\n[  149.917101]  which belongs to the cache kmalloc-128 of size 128\n[  149.919197] The buggy address is located 0 bytes inside of\n[  149.919197]  128-byte region [ffff8004ce07ed00, ffff8004ce07ed80)\n[  149.921142] The buggy address belongs to the page:\n[  149.921953] page:ffff7e0013381f00 count:1 mapcount:0 mapping:ffff800503417c00 index:0x0 compound_mapcount: 0\n[  149.923595] flags: 0x1ffff00000010200(slab|head)\n[  149.924388] raw: 1ffff00000010200 dead000000000100 dead000000000200 ffff800503417c00\n[  149.925706] raw: 0000000000000000 0000000080400040 00000001ffffffff 0000000000000000\n[  149.927011] page dumped because: kasan: bad access detected\n[  149.927956]\n[  149.928224] Memory state around the buggy address:\n[  149.929054]  ffff8004ce07ec00: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc\n[  149.930274]  ffff8004ce07ec80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[  149.931494] >ffff8004ce07ed00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n[  149.932712]                    ^\n[  149.933281]  ffff8004ce07ed80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[  149.934508]  ffff8004ce07ee00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[  149.935725] ==================================================================\n\nwhich is due to a failure in registrering a fileset. This frees the\nctx->user_files pointer, but doesn't clear it. When the io_uring\ninstance is later freed through the normal channels, we free this\npointer again. At this point it's invalid.\n\nEnsure we clear the pointer when we free it for the error case.\n\nReported-by: Will Deacon <will.deacon@arm.com>\nTested-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:    fput(ctx->user_files[i]);",
          "2217:   kfree(ctx->user_files);",
          "2218:   ctx->nr_user_files = 0;",
          "2219:   return ret;",
          "2220:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2218:   ctx->user_files = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89189557b47b35683a27c80ee78aef18248eefb4",
      "candidate_info": {
        "commit_hash": "89189557b47b35683a27c80ee78aef18248eefb4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/89189557b47b35683a27c80ee78aef18248eefb4",
        "files": [
          "fs/proc/proc_sysctl.c"
        ],
        "message": "fs/proc/proc_sysctl.c: Fix a NULL pointer dereference\n\nSyzkaller report this:\n\n  sysctl could not get directory: /net//bridge -12\n  kasan: CONFIG_KASAN_INLINE enabled\n  kasan: GPF could be caused by NULL-ptr deref or user memory access\n  general protection fault: 0000 [#1] SMP KASAN PTI\n  CPU: 1 PID: 7027 Comm: syz-executor.0 Tainted: G         C        5.1.0-rc3+ #8\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\n  RIP: 0010:__write_once_size include/linux/compiler.h:220 [inline]\n  RIP: 0010:__rb_change_child include/linux/rbtree_augmented.h:144 [inline]\n  RIP: 0010:__rb_erase_augmented include/linux/rbtree_augmented.h:186 [inline]\n  RIP: 0010:rb_erase+0x5f4/0x19f0 lib/rbtree.c:459\n  Code: 00 0f 85 60 13 00 00 48 89 1a 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 89 f2 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 75 0c 00 00 4d 85 ed 4c 89 2e 74 ce 4c 89 ea 48\n  RSP: 0018:ffff8881bb507778 EFLAGS: 00010206\n  RAX: dffffc0000000000 RBX: ffff8881f224b5b8 RCX: ffffffff818f3f6a\n  RDX: 000000000000000a RSI: 0000000000000050 RDI: ffff8881f224b568\n  RBP: 0000000000000000 R08: ffffed10376a0ef4 R09: ffffed10376a0ef4\n  R10: 0000000000000001 R11: ffffed10376a0ef4 R12: ffff8881f224b558\n  R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  FS:  00007f3e7ce13700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007fd60fbe9398 CR3: 00000001cb55c001 CR4: 00000000007606e0\n  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n  PKRU: 55555554\n  Call Trace:\n   erase_entry fs/proc/proc_sysctl.c:178 [inline]\n   erase_header+0xe3/0x160 fs/proc/proc_sysctl.c:207\n   start_unregistering fs/proc/proc_sysctl.c:331 [inline]\n   drop_sysctl_table+0x558/0x880 fs/proc/proc_sysctl.c:1631\n   get_subdir fs/proc/proc_sysctl.c:1022 [inline]\n   __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335\n   br_netfilter_init+0x68/0x1000 [br_netfilter]\n   do_one_initcall+0xbc/0x47d init/main.c:901\n   do_init_module+0x1b5/0x547 kernel/module.c:3456\n   load_module+0x6405/0x8c10 kernel/module.c:3804\n   __do_sys_finit_module+0x162/0x190 kernel/module.c:3898\n   do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n   entry_SYSCALL_64_after_hwframe+0x49/0xbe\n  Modules linked in: br_netfilter(+) backlight comedi(C) hid_sensor_hub max3100 ti_ads8688 udc_core fddi snd_mona leds_gpio rc_streamzap mtd pata_netcell nf_log_common rc_winfast udp_tunnel snd_usbmidi_lib snd_usb_toneport snd_usb_line6 snd_rawmidi snd_seq_device snd_hwdep videobuf2_v4l2 videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops rc_gadmei_rm008z 8250_of smm665 hid_tmff hid_saitek hwmon_vid rc_ati_tv_wonder_hd_600 rc_core pata_pdc202xx_old dn_rtmsg as3722 ad714x_i2c ad714x snd_soc_cs4265 hid_kensington panel_ilitek_ili9322 drm drm_panel_orientation_quirks ipack cdc_phonet usbcore phonet hid_jabra hid extcon_arizona can_dev industrialio_triggered_buffer kfifo_buf industrialio adm1031 i2c_mux_ltc4306 i2c_mux ipmi_msghandler mlxsw_core snd_soc_cs35l34 snd_soc_core snd_pcm_dmaengine snd_pcm snd_timer ac97_bus snd_compress snd soundcore gpio_da9055 uio ecdh_generic mdio_thunder of_mdio fixed_phy libphy mdio_cavium iptable_security iptable_raw iptable_mangle\n   iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ide_pci_generic piix aes_x86_64 crypto_simd cryptd ide_core glue_helper input_leds psmouse intel_agp intel_gtt serio_raw ata_generic i2c_piix4 agpgart pata_acpi parport_pc parport floppy rtc_cmos sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: br_netfilter]\n  Dumping ftrace buffer:\n     (ftrace buffer empty)\n  ---[ end trace 68741688d5fbfe85 ]---\n\ncommit 23da9588037e (\"fs/proc/proc_sysctl.c: fix NULL pointer\ndereference in put_links\") forgot to handle start_unregistering() case,\nwhile header->parent is NULL, it calls erase_header() and as seen in the\nabove syzkaller call trace, accessing &header->parent->root will trigger\na NULL pointer dereference.\n\nAs that commit explained, there is also no need to call\nstart_unregistering() if header->parent is NULL.\n\nLink: http://lkml.kernel.org/r/20190409153622.28112-1-yuehaibing@huawei.com\nFixes: 23da9588037e (\"fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links\")\nFixes: 0e47c99d7fe25 (\"sysctl: Replace root_list with links between sysctl_table_sets\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nReported-by: Hulk Robot <hulkci@huawei.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nCc: Luis Chamberlain <mcgrof@kernel.org>\nCc: Alexey Dobriyan <adobriyan@gmail.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c"
          ],
          "candidate": [
            "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c": [
          "File: fs/proc/proc_sysctl.c -> fs/proc/proc_sysctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:  if (--header->nreg)",
          "1627:   return;",
          "1630:   put_links(header);",
          "1632:  if (!--header->count)",
          "1633:   kfree_rcu(header, rcu);",
          "",
          "[Removed Lines]",
          "1629:  if (parent)",
          "1631:  start_unregistering(header);",
          "",
          "[Added Lines]",
          "1629:  if (parent) {",
          "1631:   start_unregistering(header);",
          "1632:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}