{
  "cve_id": "CVE-2017-11368",
  "cve_desc": "In MIT Kerberos 5 (aka krb5) 1.7 and later, an authenticated attacker can cause a KDC assertion failure by sending invalid S4U2Self or S4U2Proxy requests.",
  "repo": "krb5/krb5",
  "patch_hash": "ffb35baac6981f9e8914f8f3bffd37f284b85970",
  "patch_info": {
    "commit_hash": "ffb35baac6981f9e8914f8f3bffd37f284b85970",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/ffb35baac6981f9e8914f8f3bffd37f284b85970",
    "files": [
      "src/kdc/do_as_req.c",
      "src/kdc/do_tgs_req.c",
      "src/kdc/kdc_util.c"
    ],
    "message": "Prevent KDC unset status assertion failures\n\nAssign status values if S4U2Self padata fails to decode, if an\nS4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request\nuses an evidence ticket which does not match the canonicalized request\nserver principal name.  Reported by Samuel Cabrero.\n\nIf a status value is not assigned during KDC processing, default to\n\"UNKNOWN_REASON\" rather than failing an assertion.  This change will\nprevent future denial of service bugs due to similar mistakes, and\nwill allow us to omit assigning status values for unlikely errors such\nas small memory allocation failures.\n\nCVE-2017-11368:\n\nIn MIT krb5 1.7 and later, an authenticated attacker can cause an\nassertion failure in krb5kdc by sending an invalid S4U2Self or\nS4U2Proxy request.\n\n  CVSSv3 Vector: AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/E:H/RL:O/RC:C\n\nticket: 8599 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
    "before_after_code_files": [
      "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
      "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
      "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
    ]
  },
  "patch_diff": {
    "src/kdc/do_as_req.c||src/kdc/do_as_req.c": [
      "File: src/kdc/do_as_req.c -> src/kdc/do_as_req.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "366:     did_log = 1;",
      "368: egress:",
      "372:     au_state->status = state->status;",
      "373:     au_state->reply = &state->reply;",
      "",
      "[Removed Lines]",
      "369:     if (errcode != 0)",
      "370:         assert (state->status != 0);",
      "",
      "[Added Lines]",
      "369:     if (errcode != 0 && state->status == NULL)",
      "370:         state->status = \"UNKNOWN_REASON\";",
      "",
      "---------------"
    ],
    "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
      "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "823:     free(reply.enc_part.ciphertext.data);",
      "825: cleanup:",
      "827:     if (reply_key)",
      "828:         krb5_free_keyblock(kdc_context, reply_key);",
      "829:     if (errcode)",
      "",
      "[Removed Lines]",
      "826:     assert(status != NULL);",
      "",
      "[Added Lines]",
      "826:     if (status == NULL)",
      "827:         status = \"UNKNOWN_REASON\";",
      "",
      "---------------"
    ],
    "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
      "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     req_data.data = (char *)pa_data->contents;",
      "1222:     code = decode_krb5_pa_for_user(&req_data, &for_user);",
      "1224:         return code;",
      "1226:     code = verify_for_user_checksum(kdc_context, tgs_session, for_user);",
      "1227:     if (code) {",
      "",
      "[Removed Lines]",
      "1223:     if (code)",
      "",
      "[Added Lines]",
      "1223:     if (code) {",
      "1226:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1320:     req_data.data = (char *)pa_data->contents;",
      "1322:     code = decode_krb5_pa_s4u_x509_user(&req_data, s4u_x509_user);",
      "1324:         return code;",
      "1326:     code = verify_s4u_x509_user_checksum(context,",
      "1327:                                          tgs_subkey ? tgs_subkey :",
      "",
      "[Removed Lines]",
      "1323:     if (code)",
      "",
      "[Added Lines]",
      "1325:     if (code) {",
      "1328:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1190a43fb6de5b70a11cd6ec97978e05b6083f1",
      "candidate_info": {
        "commit_hash": "f1190a43fb6de5b70a11cd6ec97978e05b6083f1",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/f1190a43fb6de5b70a11cd6ec97978e05b6083f1",
        "files": [
          "src/kdc/do_as_req.c",
          "src/kdc/do_tgs_req.c",
          "src/kdc/kdc_util.c"
        ],
        "message": "Prevent KDC unset status assertion failures\n\nAssign status values if S4U2Self padata fails to decode, if an\nS4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request\nuses an evidence ticket which does not match the canonicalized request\nserver principal name.  Reported by Samuel Cabrero.\n\nIf a status value is not assigned during KDC processing, default to\n\"UNKNOWN_REASON\" rather than failing an assertion.  This change will\nprevent future denial of service bugs due to similar mistakes, and\nwill allow us to omit assigning status values for unlikely errors such\nas small memory allocation failures.\n\nCVE-2017-11368:\n\nIn MIT krb5 1.7 and later, an authenticated attacker can cause an\nassertion failure in krb5kdc by sending an invalid S4U2Self or\nS4U2Proxy request.\n\n  CVSSv3 Vector: AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/E:H/RL:O/RC:C\n\n(cherry picked from commit ffb35baac6981f9e8914f8f3bffd37f284b85970)\n\nticket: 8599\nversion_fixed: 1.14.6",
        "before_after_code_files": [
          "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
          "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
          ],
          "candidate": [
            "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_as_req.c||src/kdc/do_as_req.c": [
          "File: src/kdc/do_as_req.c -> src/kdc/do_as_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:     did_log = 1;",
          "367: egress:",
          "371:     au_state->status = state->status;",
          "372:     au_state->reply = &state->reply;",
          "",
          "[Removed Lines]",
          "368:     if (errcode != 0)",
          "369:         assert (state->status != 0);",
          "",
          "[Added Lines]",
          "368:     if (errcode != 0 && state->status == NULL)",
          "369:         state->status = \"UNKNOWN_REASON\";",
          "",
          "---------------"
        ],
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     free(reply.enc_part.ciphertext.data);",
          "825: cleanup:",
          "827:     if (reply_key)",
          "828:         krb5_free_keyblock(kdc_context, reply_key);",
          "829:     if (errcode)",
          "",
          "[Removed Lines]",
          "826:     assert(status != NULL);",
          "",
          "[Added Lines]",
          "826:     if (status == NULL)",
          "827:         status = \"UNKNOWN_REASON\";",
          "",
          "---------------"
        ],
        "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
          "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1220:     req_data.data = (char *)pa_data->contents;",
          "1222:     code = decode_krb5_pa_for_user(&req_data, &for_user);",
          "1224:         return code;",
          "1226:     code = verify_for_user_checksum(kdc_context, tgs_session, for_user);",
          "1227:     if (code) {",
          "",
          "[Removed Lines]",
          "1223:     if (code)",
          "",
          "[Added Lines]",
          "1223:     if (code) {",
          "1226:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1320:     req_data.data = (char *)pa_data->contents;",
          "1322:     code = decode_krb5_pa_s4u_x509_user(&req_data, s4u_x509_user);",
          "1324:         return code;",
          "1326:     code = verify_s4u_x509_user_checksum(context,",
          "1327:                                          tgs_subkey ? tgs_subkey :",
          "",
          "[Removed Lines]",
          "1323:     if (code)",
          "",
          "[Added Lines]",
          "1325:     if (code) {",
          "1328:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2b06faaf391498da35e014dcfccb0c0792eb116",
      "candidate_info": {
        "commit_hash": "b2b06faaf391498da35e014dcfccb0c0792eb116",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/b2b06faaf391498da35e014dcfccb0c0792eb116",
        "files": [
          "src/kdc/do_as_req.c",
          "src/kdc/do_tgs_req.c",
          "src/kdc/kdc_util.c"
        ],
        "message": "Prevent KDC unset status assertion failures\n\nAssign status values if S4U2Self padata fails to decode, if an\nS4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request\nuses an evidence ticket which does not match the canonicalized request\nserver principal name.  Reported by Samuel Cabrero.\n\nIf a status value is not assigned during KDC processing, default to\n\"UNKNOWN_REASON\" rather than failing an assertion.  This change will\nprevent future denial of service bugs due to similar mistakes, and\nwill allow us to omit assigning status values for unlikely errors such\nas small memory allocation failures.\n\nCVE-2017-11368:\n\nIn MIT krb5 1.7 and later, an authenticated attacker can cause an\nassertion failure in krb5kdc by sending an invalid S4U2Self or\nS4U2Proxy request.\n\n  CVSSv3 Vector: AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/E:H/RL:O/RC:C\n\n(cherry picked from commit ffb35baac6981f9e8914f8f3bffd37f284b85970)\n\nticket: 8599\nversion_fixed: 1.15.2",
        "before_after_code_files": [
          "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
          "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
          ],
          "candidate": [
            "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c",
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_as_req.c||src/kdc/do_as_req.c": [
          "File: src/kdc/do_as_req.c -> src/kdc/do_as_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:     did_log = 1;",
          "367: egress:",
          "371:     au_state->status = state->status;",
          "372:     au_state->reply = &state->reply;",
          "",
          "[Removed Lines]",
          "368:     if (errcode != 0)",
          "369:         assert (state->status != 0);",
          "",
          "[Added Lines]",
          "368:     if (errcode != 0 && state->status == NULL)",
          "369:         state->status = \"UNKNOWN_REASON\";",
          "",
          "---------------"
        ],
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     free(reply.enc_part.ciphertext.data);",
          "825: cleanup:",
          "827:     if (reply_key)",
          "828:         krb5_free_keyblock(kdc_context, reply_key);",
          "829:     if (errcode)",
          "",
          "[Removed Lines]",
          "826:     assert(status != NULL);",
          "",
          "[Added Lines]",
          "826:     if (status == NULL)",
          "827:         status = \"UNKNOWN_REASON\";",
          "",
          "---------------"
        ],
        "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
          "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1220:     req_data.data = (char *)pa_data->contents;",
          "1222:     code = decode_krb5_pa_for_user(&req_data, &for_user);",
          "1224:         return code;",
          "1226:     code = verify_for_user_checksum(kdc_context, tgs_session, for_user);",
          "1227:     if (code) {",
          "",
          "[Removed Lines]",
          "1223:     if (code)",
          "",
          "[Added Lines]",
          "1223:     if (code) {",
          "1226:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1320:     req_data.data = (char *)pa_data->contents;",
          "1322:     code = decode_krb5_pa_s4u_x509_user(&req_data, s4u_x509_user);",
          "1324:         return code;",
          "1326:     code = verify_s4u_x509_user_checksum(context,",
          "1327:                                          tgs_subkey ? tgs_subkey :",
          "",
          "[Removed Lines]",
          "1323:     if (code)",
          "",
          "[Added Lines]",
          "1325:     if (code) {",
          "1328:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d265f16b71058b0cb0546a3993c941975a48b70f",
      "candidate_info": {
        "commit_hash": "d265f16b71058b0cb0546a3993c941975a48b70f",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/d265f16b71058b0cb0546a3993c941975a48b70f",
        "files": [
          "src/kdc/do_as_req.c",
          "src/kdc/do_tgs_req.c"
        ],
        "message": "Simplify KDC status assignment\n\nOmit assigning status values for very unlikely error cases.  Remove\nthe \"UNKNOWN_REASON\" fallback for validate_as_request() and\nvalidate_tgs_request() as that fallback is now applied globally.",
        "before_after_code_files": [
          "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
          "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/krb5/krb5/pull/678"
        ],
        "olp_code_files": {
          "patch": [
            "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ],
          "candidate": [
            "src/kdc/do_as_req.c||src/kdc/do_as_req.c",
            "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/do_as_req.c||src/kdc/do_as_req.c": [
          "File: src/kdc/do_as_req.c -> src/kdc/do_as_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     state->reply.ticket = &state->ticket_reply;",
          "241:     state->reply_encpart.session = &state->session_key;",
          "242:     if ((errcode = fetch_last_req_info(state->client,",
          "245:         goto egress;",
          "247:     state->reply_encpart.nonce = state->request->nonce;",
          "248:     state->reply_encpart.key_exp = get_key_exp(state->client);",
          "249:     state->reply_encpart.flags = state->enc_tkt_reply.flags;",
          "",
          "[Removed Lines]",
          "243:                                        &state->reply_encpart.last_req))) {",
          "244:         state->status = \"FETCH_LAST_REQ\";",
          "246:     }",
          "",
          "[Added Lines]",
          "243:                                        &state->reply_encpart.last_req)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:     errcode = krb5_encrypt_tkt_part(kdc_context, &state->server_keyblock,",
          "303:                                     &state->ticket_reply);",
          "306:         goto egress;",
          "309:     errcode = kau_make_tkt_id(kdc_context, &state->ticket_reply,",
          "310:                               &au_state->tkt_out_id);",
          "313:         goto egress;",
          "316:     state->ticket_reply.enc_part.kvno = server_key->key_data_kvno;",
          "317:     errcode = kdc_fast_response_handle_padata(state->rstate,",
          "318:                                               state->request,",
          "319:                                               &state->reply,",
          "320:                                               state->client_keyblock.enctype);",
          "323:         goto egress;",
          "",
          "[Removed Lines]",
          "304:     if (errcode) {",
          "305:         state->status = \"ENCRYPT_TICKET\";",
          "307:     }",
          "311:     if (errcode) {",
          "312:         state->status = \"GENERATE_TICKET_ID\";",
          "314:     }",
          "321:     if (errcode) {",
          "322:         state->status = \"MAKE_FAST_RESPONSE\";",
          "324:     }",
          "",
          "[Added Lines]",
          "302:     if (errcode)",
          "307:     if (errcode)",
          "315:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:     errcode = kdc_fast_handle_reply_key(state->rstate, &state->client_keyblock,",
          "331:                                         &as_encrypting_key);",
          "334:         goto egress;",
          "336:     errcode = return_enc_padata(kdc_context, state->req_pkt, state->request,",
          "337:                                 as_encrypting_key, state->server,",
          "338:                                 &state->reply_encpart, FALSE);",
          "",
          "[Removed Lines]",
          "332:     if (errcode) {",
          "333:         state->status = \"MAKE_FAST_REPLY_KEY\";",
          "335:     }",
          "",
          "[Added Lines]",
          "324:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:                                   &state->reply, &response);",
          "350:     if (state->client_key != NULL)",
          "351:         state->reply.enc_part.kvno = state->client_key->key_data_kvno;",
          "354:         goto egress;",
          "",
          "[Removed Lines]",
          "352:     if (errcode) {",
          "353:         state->status = \"ENCODE_KDC_REP\";",
          "355:     }",
          "",
          "[Added Lines]",
          "342:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "547:     if (fetch_asn1_field((unsigned char *) req_pkt->data,",
          "548:                          1, 4, &encoded_req_body) != 0) {",
          "549:         errcode = ASN1_BAD_ID;",
          "551:         goto errout;",
          "552:     }",
          "553:     errcode = kdc_find_fast(&state->request, &encoded_req_body, NULL, NULL,",
          "",
          "[Removed Lines]",
          "550:         state->status = \"FETCH_REQ_BODY\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "561:         errcode = krb5_copy_data(kdc_context, &encoded_req_body,",
          "562:                                  &state->inner_body);",
          "565:             goto errout;",
          "567:     }",
          "568:     au_state->request = state->request;",
          "569:     state->rock.request = state->request;",
          "",
          "[Removed Lines]",
          "563:         if (errcode) {",
          "564:             state->status = \"COPY_REQ_BODY\";",
          "566:         }",
          "",
          "[Added Lines]",
          "550:         if (errcode)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "578:     }",
          "579:     if ((errcode = krb5_unparse_name(kdc_context,",
          "580:                                      state->request->client,",
          "583:         goto errout;",
          "585:     limit_string(state->cname);",
          "587:     if (!state->request->server) {",
          "",
          "[Removed Lines]",
          "581:                                      &state->cname))) {",
          "582:         state->status = \"UNPARSE_CLIENT\";",
          "584:     }",
          "",
          "[Added Lines]",
          "566:                                      &state->cname)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "591:     }",
          "592:     if ((errcode = krb5_unparse_name(kdc_context,",
          "593:                                      state->request->server,",
          "596:         goto errout;",
          "598:     limit_string(state->sname);",
          "",
          "[Removed Lines]",
          "594:                                      &state->sname))) {",
          "595:         state->status = \"UNPARSE_SERVER\";",
          "597:     }",
          "",
          "[Added Lines]",
          "577:                                      &state->sname)))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "675:     au_state->stage = VALIDATE_POL;",
          "679:         goto errout;",
          "683:     if ((errcode = validate_as_request(kdc_active_realm,",
          "684:                                        state->request, *state->client,",
          "686:                                        &state->status, &state->e_data))) {",
          "689:         errcode += ERROR_TABLE_BASE_krb5;",
          "690:         goto errout;",
          "691:     }",
          "",
          "[Removed Lines]",
          "677:     if ((errcode = krb5_timeofday(kdc_context, &state->kdc_time))) {",
          "678:         state->status = \"TIMEOFDAY\";",
          "680:     }",
          "687:         if (!state->status)",
          "688:             state->status = \"UNKNOWN_REASON\";",
          "",
          "[Added Lines]",
          "658:     if ((errcode = krb5_timeofday(kdc_context, &state->kdc_time)))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "705:     }",
          "707:     if ((errcode = krb5_c_make_random_key(kdc_context, useenctype,",
          "710:         goto errout;",
          "",
          "[Removed Lines]",
          "708:                                           &state->session_key))) {",
          "709:         state->status = \"MAKE_RANDOM_KEY\";",
          "711:     }",
          "",
          "[Added Lines]",
          "685:                                           &state->session_key)))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "789:         state->request->client = NULL;",
          "790:         errcode = krb5_copy_principal(kdc_context, krb5_anonymous_principal(),",
          "791:                                       &state->request->client);",
          "794:             goto errout;",
          "796:         state->enc_tkt_reply.client = state->request->client;",
          "797:         setflag(state->client->attributes, KRB5_KDB_REQUIRES_PRE_AUTH);",
          "798:     }",
          "",
          "[Removed Lines]",
          "792:         if (errcode) {",
          "793:             state->status = \"COPY_ANONYMOUS_PRINCIPAL\";",
          "795:         }",
          "",
          "[Added Lines]",
          "767:         if (errcode)",
          "",
          "---------------"
        ],
        "src/kdc/do_tgs_req.c||src/kdc/do_tgs_req.c": [
          "File: src/kdc/do_tgs_req.c -> src/kdc/do_tgs_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     if (!header_ticket) {",
          "199:         goto cleanup;",
          "200:     }",
          "201:     errcode = kau_make_tkt_id(kdc_context, header_ticket,",
          "202:                               &au_state->tkt_in_id);",
          "205:         goto cleanup;",
          "208:     scratch.length = pa_tgs_req->length;",
          "209:     scratch.data = (char *) pa_tgs_req->contents;",
          "",
          "[Removed Lines]",
          "198:         status=\"UNEXPECTED NULL in header_ticket\";",
          "203:     if (errcode) {",
          "204:         status = \"GENERATE_TICKET_ID\";",
          "206:     }",
          "",
          "[Added Lines]",
          "202:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:     au_state->stage = VALIDATE_POL;",
          "269:         goto cleanup;",
          "272:     if ((retval = validate_tgs_request(kdc_active_realm,",
          "273:                                        request, *server, header_ticket,",
          "274:                                        kdc_time, &status, &e_data))) {",
          "277:         if (retval == KDC_ERR_POLICY || retval == KDC_ERR_BADOPTION)",
          "278:             au_state->violation = PROT_CONSTRAINT;",
          "279:         errcode = retval + ERROR_TABLE_BASE_krb5;",
          "",
          "[Removed Lines]",
          "267:     if ((errcode = krb5_timeofday(kdc_context, &kdc_time))) {",
          "268:         status = \"TIME_OF_DAY\";",
          "270:     }",
          "275:         if (!status)",
          "276:             status = \"UNKNOWN_REASON\";",
          "",
          "[Added Lines]",
          "264:     if ((errcode = krb5_timeofday(kdc_context, &kdc_time)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340:         retval = kau_make_tkt_id(kdc_context, request->second_ticket[st_idx],",
          "341:                                   &au_state->evid_tkt_id);",
          "342:         if (retval) {",
          "344:             errcode = retval;",
          "345:             goto cleanup;",
          "346:         }",
          "",
          "[Removed Lines]",
          "343:             status = \"GENERATE_TICKET_ID\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "723:                                     &ticket_reply);",
          "724:     if (!isflagset(request->kdc_options, KDC_OPT_ENC_TKT_IN_SKEY))",
          "725:         krb5_free_keyblock_contents(kdc_context, &encrypting_key);",
          "728:         goto cleanup;",
          "730:     ticket_reply.enc_part.kvno = ticket_kvno;",
          "732:     au_state->stage = ENCR_REP;",
          "",
          "[Removed Lines]",
          "726:     if (errcode) {",
          "727:         status = \"ENCRYPT_TICKET\";",
          "729:     }",
          "",
          "[Added Lines]",
          "718:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:                                         s4u_x509_user,",
          "741:                                         &reply,",
          "742:                                         &reply_encpart);",
          "745:             au_state->status = status;",
          "747:         kau_s4u2self(kdc_context, errcode ? FALSE : TRUE, au_state);",
          "748:         if (errcode)",
          "749:             goto cleanup;",
          "",
          "[Removed Lines]",
          "743:         if (errcode) {",
          "744:             status = \"MAKE_S4U2SELF_PADATA\";",
          "746:         }",
          "",
          "[Added Lines]",
          "733:         if (errcode)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "775:         header_ticket->enc_part2->session->enctype;",
          "776:     errcode  = kdc_fast_response_handle_padata(state, request, &reply,",
          "777:                                                subkey ? subkey->enctype : header_ticket->enc_part2->session->enctype);",
          "780:         goto cleanup;",
          "782:     errcode =kdc_fast_handle_reply_key(state,",
          "783:                                        subkey?subkey:header_ticket->enc_part2->session, &reply_key);",
          "786:         goto cleanup;",
          "788:     errcode = return_enc_padata(kdc_context, pkt, request,",
          "789:                                 reply_key, server, &reply_encpart,",
          "790:                                 is_referral &&",
          "",
          "[Removed Lines]",
          "778:     if (errcode !=0 ) {",
          "779:         status = \"MAKE_FAST_RESPONSE\";",
          "781:     }",
          "784:     if (errcode) {",
          "785:         status  = \"MAKE_FAST_REPLY_KEY\";",
          "787:     }",
          "",
          "[Added Lines]",
          "766:     if (errcode)",
          "770:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "796:     }",
          "798:     errcode = kau_make_tkt_id(kdc_context, &ticket_reply, &au_state->tkt_out_id);",
          "801:         goto cleanup;",
          "804:     if (kdc_fast_hide_client(state))",
          "805:         reply.client = (krb5_principal)krb5_anonymous_principal();",
          "",
          "[Removed Lines]",
          "799:     if (errcode) {",
          "800:         status = \"GENERATE_TICKET_ID\";",
          "802:     }",
          "",
          "[Added Lines]",
          "783:     if (errcode)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "807:                                   subkey ? 1 : 0,",
          "808:                                   reply_key,",
          "809:                                   &reply, response);",
          "813:         status = \"ISSUE\";",
          "816:     memset(ticket_reply.enc_part.ciphertext.data, 0,",
          "817:            ticket_reply.enc_part.ciphertext.length);",
          "",
          "[Removed Lines]",
          "810:     if (errcode) {",
          "811:         status = \"ENCODE_KDC_REP\";",
          "812:     } else {",
          "814:     }",
          "",
          "[Added Lines]",
          "792:     if (!errcode)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1054:         retval = get_2ndtkt_enctype(kdc_active_realm, req, &useenctype,",
          "1055:                                     status);",
          "1056:         if (retval != 0)",
          "1058:     }",
          "1059:     if (useenctype == 0) {",
          "1060:         useenctype = select_session_keytype(kdc_active_realm, server,",
          "",
          "[Removed Lines]",
          "1057:             goto cleanup;",
          "",
          "[Added Lines]",
          "1036:             return retval;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1064:     if (useenctype == 0) {",
          "1075:     }",
          "1078: }",
          "",
          "[Removed Lines]",
          "1067:         retval = KRB5KDC_ERR_ETYPE_NOSUPP;",
          "1068:         goto cleanup;",
          "1069:     }",
          "1070:     retval = krb5_c_make_random_key(kdc_context, useenctype, skey);",
          "1071:     if (retval != 0) {",
          "1074:         goto cleanup;",
          "1076: cleanup:",
          "1077:     return retval;",
          "",
          "[Added Lines]",
          "1046:         return KRB5KDC_ERR_ETYPE_NOSUPP;",
          "1049:     return krb5_c_make_random_key(kdc_context, useenctype, skey);",
          "",
          "---------------"
        ]
      }
    }
  ]
}