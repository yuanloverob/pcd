{
  "cve_id": "CVE-2020-11099",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an out of bounds read in license_read_new_or_upgrade_license_packet. A manipulated license packet can lead to out of bound reads to an internal buffer. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
  "patch_info": {
    "commit_hash": "6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
    "files": [
      "libfreerdp/core/license.c"
    ],
    "message": "Fixed OOB Read in license_read_new_or_upgrade_license_packet\n\nCVE-2020-11099 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/license.c||libfreerdp/core/license.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/license.c||libfreerdp/core/license.c": [
      "File: libfreerdp/core/license.c -> libfreerdp/core/license.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1252:  if (!licenseStream)",
      "1253:   goto out_free_blob;",
      "1255:  Stream_Read_UINT16(licenseStream, os_minor);",
      "1256:  Stream_Read_UINT16(licenseStream, os_major);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1255:  if (Stream_GetRemainingLength(licenseStream) < 8)",
      "1256:   goto out_free_stream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1266:  Stream_Seek(licenseStream, cbScope);",
      "1269:  Stream_Read_UINT32(licenseStream, cbCompanyName);",
      "1270:  if (Stream_GetRemainingLength(licenseStream) < cbCompanyName)",
      "1271:   goto out_free_stream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1272:  if (Stream_GetRemainingLength(licenseStream) < 4)",
      "1273:   goto out_free_stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1276:  Stream_Seek(licenseStream, cbCompanyName);",
      "1279:  Stream_Read_UINT32(licenseStream, cbProductId);",
      "1280:  if (Stream_GetRemainingLength(licenseStream) < cbProductId)",
      "1281:   goto out_free_stream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1284:  if (Stream_GetRemainingLength(licenseStream) < 4)",
      "1285:   goto out_free_stream;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1286:  Stream_Seek(licenseStream, cbProductId);",
      "1289:  Stream_Read_UINT32(licenseStream, cbLicenseInfo);",
      "1290:  if (Stream_GetRemainingLength(licenseStream) < cbLicenseInfo)",
      "1291:   goto out_free_stream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1296:  if (Stream_GetRemainingLength(licenseStream) < 4)",
      "1297:   goto out_free_stream;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
      "candidate_info": {
        "commit_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/733ee3208306b1ea32697b356c0215180fc3f049",
        "files": [
          "libfreerdp/core/orders.c",
          "libfreerdp/core/orders.h",
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed invalid access in update_recv_primary_order\n\nCVE-2020-11095 thanks @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
          "libfreerdp/core/orders.h||libfreerdp/core/orders.h",
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #define TAG FREERDP_TAG(\"core.orders\")",
          "77: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "",
          "[Removed Lines]",
          "46: const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[] = { DSTBLT_ORDER_FIELD_BYTES,",
          "47:                                                 PATBLT_ORDER_FIELD_BYTES,",
          "48:                                                 SCRBLT_ORDER_FIELD_BYTES,",
          "49:                                                 0,",
          "50:                                                 0,",
          "51:                                                 0,",
          "52:                                                 0,",
          "53:                                                 DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
          "54:                                                 MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
          "55:                                                 LINE_TO_ORDER_FIELD_BYTES,",
          "56:                                                 OPAQUE_RECT_ORDER_FIELD_BYTES,",
          "57:                                                 SAVE_BITMAP_ORDER_FIELD_BYTES,",
          "58:                                                 0,",
          "59:                                                 MEMBLT_ORDER_FIELD_BYTES,",
          "60:                                                 MEM3BLT_ORDER_FIELD_BYTES,",
          "61:                                                 MULTI_DSTBLT_ORDER_FIELD_BYTES,",
          "62:                                                 MULTI_PATBLT_ORDER_FIELD_BYTES,",
          "63:                                                 MULTI_SCRBLT_ORDER_FIELD_BYTES,",
          "64:                                                 MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES,",
          "65:                                                 FAST_INDEX_ORDER_FIELD_BYTES,",
          "66:                                                 POLYGON_SC_ORDER_FIELD_BYTES,",
          "67:                                                 POLYGON_CB_ORDER_FIELD_BYTES,",
          "68:                                                 POLYLINE_ORDER_FIELD_BYTES,",
          "69:                                                 0,",
          "70:                                                 FAST_GLYPH_ORDER_FIELD_BYTES,",
          "71:                                                 ELLIPSE_SC_ORDER_FIELD_BYTES,",
          "72:                                                 ELLIPSE_CB_ORDER_FIELD_BYTES,",
          "73:                                                 GLYPH_INDEX_ORDER_FIELD_BYTES };",
          "75: #define PRIMARY_DRAWING_ORDER_COUNT (ARRAYSIZE(PRIMARY_DRAWING_ORDER_FIELD_BYTES))",
          "",
          "[Added Lines]",
          "46: BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid)",
          "47: {",
          "48:  if (pValid)",
          "50:  switch (orderType)",
          "51:  {",
          "52:   case 0:",
          "53:    return DSTBLT_ORDER_FIELD_BYTES;",
          "54:   case 1:",
          "55:    return PATBLT_ORDER_FIELD_BYTES;",
          "56:   case 2:",
          "57:    return SCRBLT_ORDER_FIELD_BYTES;",
          "58:   case 3:",
          "59:    return 0;",
          "60:   case 4:",
          "61:    return 0;",
          "62:   case 5:",
          "63:    return 0;",
          "64:   case 6:",
          "65:    return 0;",
          "66:   case 7:",
          "67:    return DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
          "68:   case 8:",
          "69:    return MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
          "70:   case 9:",
          "71:    return LINE_TO_ORDER_FIELD_BYTES;",
          "72:   case 10:",
          "73:    return OPAQUE_RECT_ORDER_FIELD_BYTES;",
          "74:   case 11:",
          "75:    return SAVE_BITMAP_ORDER_FIELD_BYTES;",
          "76:   case 12:",
          "77:    return 0;",
          "78:   case 13:",
          "79:    return MEMBLT_ORDER_FIELD_BYTES;",
          "80:   case 14:",
          "81:    return MEM3BLT_ORDER_FIELD_BYTES;",
          "82:   case 15:",
          "83:    return MULTI_DSTBLT_ORDER_FIELD_BYTES;",
          "84:   case 16:",
          "85:    return MULTI_PATBLT_ORDER_FIELD_BYTES;",
          "86:   case 17:",
          "87:    return MULTI_SCRBLT_ORDER_FIELD_BYTES;",
          "88:   case 18:",
          "89:    return MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES;",
          "90:   case 19:",
          "91:    return FAST_INDEX_ORDER_FIELD_BYTES;",
          "92:   case 20:",
          "93:    return POLYGON_SC_ORDER_FIELD_BYTES;",
          "94:   case 21:",
          "95:    return POLYGON_CB_ORDER_FIELD_BYTES;",
          "96:   case 22:",
          "97:    return POLYLINE_ORDER_FIELD_BYTES;",
          "98:   case 23:",
          "99:    return 0;",
          "100:   case 24:",
          "101:    return FAST_GLYPH_ORDER_FIELD_BYTES;",
          "102:   case 25:",
          "103:    return ELLIPSE_SC_ORDER_FIELD_BYTES;",
          "104:   case 26:",
          "105:    return ELLIPSE_CB_ORDER_FIELD_BYTES;",
          "106:   case 27:",
          "107:    return GLYPH_INDEX_ORDER_FIELD_BYTES;",
          "108:   default:",
          "109:    if (pValid)",
          "111:    WLog_WARN(TAG, \"Invalid orderType 0x%08X received\", orderType);",
          "112:    return 0;",
          "113:  }",
          "114: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3241: static BOOL update_recv_primary_order(rdpUpdate* update, wStream* s, BYTE flags)",
          "3242: {",
          "3243:  BOOL rc = FALSE;",
          "3244:  rdpContext* context = update->context;",
          "3245:  rdpPrimaryUpdate* primary = update->primary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3282:  BYTE field;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3263:  if (!check_primary_order_supported(update->log, settings, orderInfo->orderType, orderName))",
          "3264:   return FALSE;",
          "3268:  {",
          "3269:   WLog_Print(update->log, WLOG_ERROR, \"update_read_field_flags() failed\");",
          "3270:   return FALSE;",
          "",
          "[Removed Lines]",
          "3266:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags,",
          "3267:                               PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]))",
          "",
          "[Added Lines]",
          "3306:  field = get_primary_drawing_order_field_bytes(orderInfo->orderType, &rc);",
          "3307:  if (!rc)",
          "3308:   return FALSE;",
          "3310:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags, field))",
          "",
          "---------------"
        ],
        "libfreerdp/core/orders.h||libfreerdp/core/orders.h": [
          "File: libfreerdp/core/orders.h -> libfreerdp/core/orders.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: #define CG_GLYPH_UNICODE_PRESENT 0x0010",
          "194: FREERDP_LOCAL BOOL update_recv_order(rdpUpdate* update, wStream* s);",
          "",
          "[Removed Lines]",
          "192: FREERDP_LOCAL extern const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[];",
          "",
          "[Added Lines]",
          "192: FREERDP_LOCAL BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid);",
          "",
          "---------------"
        ],
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1087:  orderInfo->controlFlags = ORDER_STANDARD;",
          "1088:  orderInfo->controlFlags |= ORDER_TYPE_CHANGE;",
          "1089:  length += 1;",
          "1091:  length += update_prepare_bounds(context, orderInfo);",
          "1092:  return length;",
          "1093: }",
          "",
          "[Removed Lines]",
          "1090:  length += PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType];",
          "",
          "[Added Lines]",
          "1090:  length += get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1107:  update_write_field_flags(s, orderInfo->fieldFlags, orderInfo->controlFlags,",
          "1109:  update_write_bounds(s, orderInfo);",
          "1110:  Stream_SetPosition(s, position);",
          "1111:  return 0;",
          "",
          "[Removed Lines]",
          "1108:                           PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]);",
          "",
          "[Added Lines]",
          "1108:                           get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
      "candidate_info": {
        "commit_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "files": [
          "server/shadow/shadow_server.c"
        ],
        "message": "Fixed double free",
        "before_after_code_files": [
          "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
          "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   char** list = CommandLineParseCommaSeparatedValuesEx(NULL, server->ipcSocket, &count);",
          "587:   if (!list || (count <= 1))",
          "588:   {",
          "590:    if (server->ipcSocket == NULL)",
          "591:    {",
          "592:     if (!open_port(server, NULL))",
          "593:      return -1;",
          "594:    }",
          "595:    else",
          "596:     return -1;",
          "597:   }",
          "599:   for (x = 1; x < count; x++)",
          "",
          "[Removed Lines]",
          "589:    free(list);",
          "",
          "[Added Lines]",
          "592:     {",
          "593:      free(list);",
          "595:     }",
          "598:    {",
          "599:     free(list);",
          "601:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a45afe9db77a19e5a177fe1dc3e85119013f9587",
      "candidate_info": {
        "commit_hash": "a45afe9db77a19e5a177fe1dc3e85119013f9587",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a45afe9db77a19e5a177fe1dc3e85119013f9587",
        "files": [
          "winpr/libwinpr/sysinfo/sysinfo.c"
        ],
        "message": "Replaced gmtime with gmtime_r",
        "before_after_code_files": [
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: void GetSystemTime(LPSYSTEMTIME lpSystemTime)",
          "214: {",
          "215:  time_t ct = 0;",
          "216:  struct tm* stm = NULL;",
          "217:  WORD wMilliseconds = 0;",
          "218:  ct = time(NULL);",
          "219:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "221:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "223:  if (stm)",
          "",
          "[Removed Lines]",
          "220:  stm = gmtime(&ct);",
          "",
          "[Added Lines]",
          "216:  struct tm tres;",
          "221:  stm = gmtime_r(&ct, &tres);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
      "candidate_info": {
        "commit_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/240fdd07b123594a1f7a460de7e6877b1963d09e",
        "files": [
          "channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Replaced localtime with localtime_r",
        "before_after_code_files": [
          "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c": [
          "File: channels/printer/client/cups/printer_cups.c -> channels/printer/client/cups/printer_cups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static void printer_cups_get_printjob_name(char* buf, size_t size, size_t id)",
          "70: {",
          "71:  time_t tt;",
          "72:  struct tm* t;",
          "74:  tt = time(NULL);",
          "76:  sprintf_s(buf, size - 1, \"FreeRDP Print %04d-%02d-%02d %02d-%02d-%02d - Job %\" PRIdz,",
          "77:            t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec, id);",
          "78: }",
          "",
          "[Removed Lines]",
          "75:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "72:  struct tm tres;",
          "76:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c": [
          "File: channels/printer/client/win/printer_win.c -> channels/printer/client/win/printer_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static WCHAR* printer_win_get_printjob_name(size_t id)",
          "79: {",
          "80:  time_t tt;",
          "81:  struct tm* t;",
          "82:  WCHAR* str;",
          "83:  size_t len = 1024;",
          "84:  int rc;",
          "86:  tt = time(NULL);",
          "89:  str = calloc(len, sizeof(WCHAR));",
          "90:  if (!str)",
          "",
          "[Removed Lines]",
          "87:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "81:  struct tm tres;",
          "88:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242: VOID GetLocalTime(LPSYSTEMTIME lpSystemTime)",
          "243: {",
          "244:  time_t ct = 0;",
          "245:  struct tm* ltm = NULL;",
          "246:  WORD wMilliseconds = 0;",
          "247:  ct = time(NULL);",
          "248:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "250:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "252:  if (ltm)",
          "",
          "[Removed Lines]",
          "249:  ltm = localtime(&ct);",
          "",
          "[Added Lines]",
          "245:  struct tm tres;",
          "250:  ltm = localtime_r(&ct, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm* local_time;",
          "343:  TIME_ZONE_ENTRY* dtz;",
          "344:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "345:  lpTimeZoneInformation->StandardBias = 0;",
          "346:  time(&t);",
          "348:  memset(tz, 0, sizeof(TIME_ZONE_INFORMATION));",
          "349: #ifdef HAVE_TM_GMTOFF",
          "350:  {",
          "",
          "[Removed Lines]",
          "347:  local_time = localtime(&t);",
          "",
          "[Added Lines]",
          "342:  struct tm tres;",
          "343:  ;",
          "349:  local_time = localtime_r(&t, &tres);",
          "350:  if (!local_time)",
          "351:   goto out_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
      "candidate_info": {
        "commit_hash": "f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f753c25ad3d5dae7890fe73cfb3c091c015d97ed",
        "files": [
          "libfreerdp/gdi/graphics.c"
        ],
        "message": "Reset freed HGDI_DC\n\nCVE-2020-4031 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c": [
          "File: libfreerdp/gdi/graphics.c -> libfreerdp/gdi/graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  if (!gdi_bitmap->bitmap)",
          "94:  {",
          "95:   gdi_DeleteDC(gdi_bitmap->hdc);",
          "96:   return FALSE;",
          "97:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   gdi_bitmap->hdc = NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}