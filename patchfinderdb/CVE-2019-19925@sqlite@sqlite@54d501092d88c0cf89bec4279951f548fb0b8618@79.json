{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec123e13014c585d1c408e1583714de438b50aff",
      "candidate_info": {
        "commit_hash": "ec123e13014c585d1c408e1583714de438b50aff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec123e13014c585d1c408e1583714de438b50aff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Fix an indentation error and improve the placement of an assert() based on a tweet from Yuri Kotov.\n\nFossilOrigin-Name: e6314e386c6877c669bd32788d3886253b0a187bee2c3889f4eaba219f5e52c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     rc = pWalker->xExprCallback(pWalker, pExpr);",
          "74:     if( rc ) return rc & WRC_Abort;",
          "75:     if( !ExprHasProperty(pExpr,(EP_TokenOnly|EP_Leaf)) ){",
          "76:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "78:       if( pExpr->pRight ){",
          "79:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "80:         pExpr = pExpr->pRight;",
          "",
          "[Removed Lines]",
          "77:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "",
          "[Added Lines]",
          "76:       assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f72a97925d6a382a58cef98510c8bc430e91ee25",
      "candidate_info": {
        "commit_hash": "f72a97925d6a382a58cef98510c8bc430e91ee25",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f72a97925d6a382a58cef98510c8bc430e91ee25",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add new test cases to test/fuzzdata8.db\n\nFossilOrigin-Name: f908cd40b275a5753d5167ebb25871300381687adcb3a7fcb1f14b57a20ee3d0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e16d3e8fc60d39ca3899759ff15d355fdd7d3e23b325d8d2b0f954e11ce8dce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66c48907a2abc90a78760f7281acb1f720adc1c7",
      "candidate_info": {
        "commit_hash": "66c48907a2abc90a78760f7281acb1f720adc1c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/66c48907a2abc90a78760f7281acb1f720adc1c7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pragma.h",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "test/alter3.test",
          "test/alter4.test",
          "test/conflict3.test",
          "test/corruptC.test",
          "test/corruptE.test",
          "test/descidx1.test",
          "test/descidx2.test",
          "test/descidx3.test",
          "test/distinct2.test",
          "test/filter1.test",
          "test/format4.test",
          "test/indexexpr2.test",
          "test/insert4.test",
          "test/join.test",
          "test/minmax2.test",
          "test/nulls1.test",
          "test/pragma4.test",
          "test/rowvaluevtab.test",
          "test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test",
          "test/tkt3292.test",
          "test/window9.test",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Remove the legacy_file_format PRAGMA.  In its place, provide the SQLITE_DBCONFIG_LEGACY_FILE_FORMAT option to sqlite3_db_config(). Fix for ticket [6484e6ce678fffab]\n\nFossilOrigin-Name: 4d424f3047b48fc441475137f30a719d2f079390c86fe2617710ddfb05c5e240",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pragma.h||src/pragma.h",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "test/alter3.test||test/alter3.test",
          "test/alter4.test||test/alter4.test",
          "test/conflict3.test||test/conflict3.test",
          "test/corruptC.test||test/corruptC.test",
          "test/corruptE.test||test/corruptE.test",
          "test/descidx1.test||test/descidx1.test",
          "test/descidx2.test||test/descidx2.test",
          "test/descidx3.test||test/descidx3.test",
          "test/distinct2.test||test/distinct2.test",
          "test/filter1.test||test/filter1.test",
          "test/format4.test||test/format4.test",
          "test/indexexpr2.test||test/indexexpr2.test",
          "test/insert4.test||test/insert4.test",
          "test/join.test||test/join.test",
          "test/minmax2.test||test/minmax2.test",
          "test/nulls1.test||test/nulls1.test",
          "test/pragma4.test||test/pragma4.test",
          "test/rowvaluevtab.test||test/rowvaluevtab.test",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test",
          "test/tkt3292.test||test/tkt3292.test",
          "test/window9.test||test/window9.test",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4fba090e678ef184736277c9ec9a9374c8bd4df4d41f51a3dc6818e2efcc103b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "852:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "853:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "854:       };",
          "855:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:         { SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,    SQLITE_LegacyFileFmt  },",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: #endif",
          "405: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_ENABLE_LOCKING_STYLE",
          "406:  {/* zName:     */ \"lock_proxy_file\",",
          "",
          "[Removed Lines]",
          "399:  {/* zName:     */ \"legacy_file_format\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7171:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7172:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7173:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "7174:     };",
          "7175:     int ii, v;",
          "7176:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7174:         { \"legacy_file_format\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7682:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7683:     { \"DQS_DML\",            SQLITE_DBCONFIG_DQS_DML },",
          "7684:     { \"DQS_DDL\",            SQLITE_DBCONFIG_DQS_DDL },",
          "7685:   };",
          "7686:   int i;",
          "7688:   const char *zSetting;",
          "7689:   sqlite3 *db;",
          "7693:     return TCL_ERROR;",
          "7694:   }",
          "7695:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db) ) return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "7687:   int v;",
          "7691:   if( objc!=4 ){",
          "7692:     Tcl_WrongNumArgs(interp, 1, objv, \"DB SETTING VALUE\");",
          "",
          "[Added Lines]",
          "7685:     { \"LEGACY_FILE_FORMAT\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT },",
          "7688:   int v = 0;",
          "7692:   if( objc!=4 && objc!=3 ){",
          "7693:     Tcl_WrongNumArgs(interp, 1, objv, \"DB SETTING [VALUE]\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7705:       Tcl_NewStringObj(\"unknown sqlite3_db_config setting\", -1));",
          "7706:     return TCL_ERROR;",
          "7707:   }",
          "7709:   sqlite3_db_config(db, aSetting[i].eVal, v, &v);",
          "7710:   Tcl_SetObjResult(interp, Tcl_NewIntObj(v));",
          "7711:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "7708:   if( Tcl_GetIntFromObj(interp, objv[3], &v) ) return TCL_ERROR;",
          "",
          "[Added Lines]",
          "7709:   if( objc==4 ){",
          "7710:     if( Tcl_GetIntFromObj(interp, objv[3], &v) ) return TCL_ERROR;",
          "7711:   }else{",
          "7712:     v = -1;",
          "7713:   }",
          "",
          "---------------"
        ],
        "test/alter3.test||test/alter3.test": [
          "File: test/alter3.test -> test/alter3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "56: do_test alter3-1.1 {",
          "57:   execsql {",
          "59:     CREATE TABLE abc(a, b, c);",
          "60:     SELECT sql FROM sqlite_master;",
          "61:   }",
          "",
          "[Removed Lines]",
          "58:     PRAGMA legacy_file_format=ON;",
          "",
          "[Added Lines]",
          "57:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:   db close",
          "199:   forcedelete test.db",
          "200:   set ::DB [sqlite3 db test.db]",
          "201:   execsql {",
          "203:     CREATE TABLE t1(a, b);",
          "204:     INSERT INTO t1 VALUES(1, 100);",
          "205:     INSERT INTO t1 VALUES(2, 300);",
          "",
          "[Removed Lines]",
          "202:     PRAGMA legacy_file_format=ON;",
          "",
          "[Added Lines]",
          "201:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/alter4.test||test/alter4.test": [
          "File: test/alter4.test -> test/alter4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "383: do_test alter4-10.1 {",
          "384:   db close",
          "385:   sqlite3 db :memory:",
          "386:   db eval {",
          "388:     CREATE TABLE t1(a,b,c);",
          "389:     CREATE INDEX t1a ON t1(a DESC);",
          "390:     INSERT INTO t1 VALUES(1,2,3);",
          "",
          "[Removed Lines]",
          "387:     PRAGMA legacy_file_format=on;",
          "",
          "[Added Lines]",
          "386:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/conflict3.test||test/conflict3.test": [
          "File: test/conflict3.test -> test/conflict3.test"
        ],
        "test/corruptC.test||test/corruptC.test": [
          "File: test/corruptC.test -> test/corruptC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: # Construct a compact, dense database for testing.",
          "35: #",
          "36: do_test corruptC-1.1 {",
          "37:   execsql {",
          "38:     PRAGMA auto_vacuum = 0;",
          "40:     BEGIN;",
          "41:     CREATE TABLE t1(x,y);",
          "42:     INSERT INTO t1 VALUES(1,1);",
          "",
          "[Removed Lines]",
          "39:     PRAGMA legacy_file_format=1;",
          "",
          "[Added Lines]",
          "37:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/corruptE.test||test/corruptE.test": [
          "File: test/corruptE.test -> test/corruptE.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: # Construct a compact, dense database for testing.",
          "37: #",
          "38: do_test corruptE-1.1 {",
          "39:   execsql {",
          "40:     PRAGMA auto_vacuum = 0;",
          "42:     BEGIN;",
          "43:     CREATE TABLE t1(x,y);",
          "44:     INSERT INTO t1 VALUES(1,1);",
          "",
          "[Removed Lines]",
          "41:     PRAGMA legacy_file_format=1;",
          "",
          "[Added Lines]",
          "39:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/descidx1.test||test/descidx1.test": [
          "File: test/descidx1.test -> test/descidx1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #",
          "23: do_not_use_codec",
          "27: # This procedure sets the value of the file-format in file 'test.db'",
          "28: # to $newval. Also, the schema cookie is incremented.",
          "",
          "[Removed Lines]",
          "25: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "25: #db eval {PRAGMA legacy_file_format=OFF}",
          "26: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     db close",
          "300:     forcedelete test.db test.db-journal",
          "301:     sqlite3 db test.db",
          "303:   } {1}",
          "304: } else {",
          "305:   do_test descidx1-6.1 {",
          "306:     db close",
          "307:     forcedelete test.db test.db-journal",
          "308:     sqlite3 db test.db",
          "310:   } {0}",
          "311: }",
          "312: do_test descidx1-6.2 {",
          "315: } {1}",
          "316: do_test descidx1-6.3 {",
          "317:   execsql {",
          "",
          "[Removed Lines]",
          "302:     execsql {PRAGMA legacy_file_format}",
          "309:     execsql {PRAGMA legacy_file_format}",
          "313:   execsql {PRAGMA legacy_file_format=YES}",
          "314:   execsql {PRAGMA legacy_file_format}",
          "",
          "[Added Lines]",
          "303:     sqlite3_db_config db LEGACY_FILE_FORMAT",
          "310:     sqlite3_db_config db LEGACY_FILE_FORMAT",
          "314:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "315:   sqlite3_db_config db LEGACY_FILE_FORMAT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:   db close",
          "331:   forcedelete test.db test.db-journal",
          "332:   sqlite3 db test.db",
          "335: } {0}",
          "336: do_test descidx1-6.5 {",
          "337:   execsql {",
          "",
          "[Removed Lines]",
          "333:   execsql {PRAGMA legacy_file_format=NO}",
          "334:   execsql {PRAGMA legacy_file_format}",
          "",
          "[Added Lines]",
          "334:   sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "335:   sqlite3_db_config db LEGACY_FILE_FORMAT",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:     get_file_format",
          "352:   } {4}",
          "353:   do_test descidx1-6.7 {",
          "354:     execsql {",
          "356:       VACUUM;",
          "357:     }",
          "358:     get_file_format",
          "",
          "[Removed Lines]",
          "355:       PRAGMA legacy_file_format=ON;",
          "",
          "[Added Lines]",
          "355:     sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/descidx2.test||test/descidx2.test": [
          "File: test/descidx2.test -> test/descidx2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: do_not_use_codec",
          "28: # This procedure sets the value of the file-format in file 'test.db'",
          "29: # to $newval. Also, the schema cookie is incremented.",
          "",
          "[Removed Lines]",
          "26: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "26: #db eval {PRAGMA legacy_file_format=OFF}",
          "27: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/descidx3.test||test/descidx3.test": [
          "File: test/descidx3.test -> test/descidx3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   finish_test",
          "27:   return",
          "28: }",
          "31: # This procedure sets the value of the file-format in file 'test.db'",
          "32: # to $newval. Also, the schema cookie is incremented.",
          "",
          "[Removed Lines]",
          "29: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "29: #db eval {PRAGMA legacy_file_format=OFF}",
          "30: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test"
        ],
        "test/format4.test||test/format4.test": [
          "File: test/format4.test -> test/format4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "22: # The size of the database depends on whether or not autovacuum",
          "23: # is enabled.",
          "",
          "[Removed Lines]",
          "20: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "20: #db eval {PRAGMA legacy_file_format=OFF}",
          "21: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test"
        ],
        "test/insert4.test||test/insert4.test": [
          "File: test/insert4.test -> test/insert4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # Create tables used for testing.",
          "36: #",
          "37: execsql {",
          "39:   CREATE TABLE t1(a int, b int, check(b>a));",
          "40:   CREATE TABLE t2(x int, y int);",
          "41:   CREATE VIEW v2 AS SELECT y, x FROM t2;",
          "",
          "[Removed Lines]",
          "38:   PRAGMA legacy_file_format = 0;",
          "",
          "[Added Lines]",
          "37: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test"
        ],
        "test/minmax2.test||test/minmax2.test": [
          "File: test/minmax2.test -> test/minmax2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: source $testdir/tester.tcl",
          "23: do_test minmax2-1.0 {",
          "24:   execsql {",
          "26:     BEGIN;",
          "27:     CREATE TABLE t1(x, y);",
          "28:     INSERT INTO t1 VALUES(1,1);",
          "",
          "[Removed Lines]",
          "25:     PRAGMA legacy_file_format=0;",
          "",
          "[Added Lines]",
          "24:   sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  14 \"PRAGMA full_column_names = 1\"",
          "45:  15 \"PRAGMA fullfsync = 1\"",
          "46:  16 \"PRAGMA ignore_check_constraints = 1\"",
          "48:  18 \"PRAGMA page_size = 511\"",
          "49:  19 \"PRAGMA page_size = 512\"",
          "50:  20 \"PRAGMA query_only = false\"",
          "",
          "[Removed Lines]",
          "47:  17 \"PRAGMA legacy_file_format = 1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/rowvaluevtab.test||test/rowvaluevtab.test": [
          "File: test/rowvaluevtab.test -> test/rowvaluevtab.test"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test"
        ],
        "test/tkt3292.test||test/tkt3292.test": [
          "File: test/tkt3292.test -> test/tkt3292.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: source $testdir/tester.tcl",
          "22: do_test tkt3292-1.1 {",
          "23:   execsql {",
          "25:     CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT);",
          "26:     INSERT INTO t1 VALUES(0, 1);",
          "27:     INSERT INTO t1 VALUES(1, 1);",
          "",
          "[Removed Lines]",
          "24:     PRAGMA legacy_file_format=OFF;",
          "",
          "[Added Lines]",
          "23:   sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   ARG:  SQLITE_NullCallback",
          "42:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "49:   NAME: fullfsync",
          "50:   TYPE: FLAG",
          "51:   ARG:  SQLITE_FullFSync",
          "",
          "[Removed Lines]",
          "44:   NAME: legacy_file_format",
          "45:   TYPE: FLAG",
          "46:   ARG:  SQLITE_LegacyFileFmt",
          "47:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "122c5142714ea4fe64d6c993adce418869df1aa2",
      "candidate_info": {
        "commit_hash": "122c5142714ea4fe64d6c993adce418869df1aa2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/122c5142714ea4fe64d6c993adce418869df1aa2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a minor typo in a comment.\n\nFossilOrigin-Name: cea8a892f76bddc63b921ffc11ea8dce8f8cf649a2c77aa908c7c5c91eed7f4c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e77d48d1dd140967b18106044dd45e2ba6cd77b6aa5afa8bf3f0a9c16a50eec4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2812:   assert( pOp->p2>0 );",
          "2813:   assert( zAffinity[pOp->p2]==0 );",
          "2814:   pIn1 = &aMem[pOp->p1];",
          "2816:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2817:     assert( memIsValid(pIn1) );",
          "2818:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "",
          "[Removed Lines]",
          "2815:   while( 1 /*edit-by-break*/ ){",
          "",
          "[Added Lines]",
          "2815:   while( 1 /*exit-by-break*/ ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3242c69c9140d54d98b110b72055e17fd6ede5e0",
      "candidate_info": {
        "commit_hash": "3242c69c9140d54d98b110b72055e17fd6ede5e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3242c69c9140d54d98b110b72055e17fd6ede5e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/vdbemem.c"
        ],
        "message": "New testcase macros to ensure that MEM_IntReal is fully tested.\n\nFossilOrigin-Name: 8b8ef445ccccc148af2cda5975986af0d134352fe16283f65d0f8a91c9ffa932",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9838731325e0ca73bd8784c10c74ae043fed7861e6de269fd90e29fa4a19955",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int|MEM_IntReal)) ){",
          "356:         sqlite3VdbeMemStringify(pRec, enc, 1);",
          "357:       }",
          "358:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:         testcase( pRec->flags & MEM_Int );",
          "357:         testcase( pRec->flags & MEM_Real );",
          "358:         testcase( pRec->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417: static u16 numericType(Mem *pMem){",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal);",
          "420:   }",
          "421:   if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "422:     return computeNumericType(pMem);",
          "423:   }",
          "424:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422:     testcase( pMem->flags & MEM_Int );",
          "423:     testcase( pMem->flags & MEM_Real );",
          "424:     testcase( pMem->flags & MEM_IntReal );",
          "428:     testcase( pMem->flags & MEM_Str );",
          "429:     testcase( pMem->flags & MEM_Blob );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1803:   pIn1 = &aMem[pOp->p1];",
          "1804:   if( pIn1->flags & (MEM_Int|MEM_IntReal) ){",
          "1805:     sqlite3VdbeMemRealify(pIn1);",
          "1806:   }",
          "1807:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1813:     testcase( pIn1->flags & MEM_Int );",
          "1814:     testcase( pIn1->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4382:   u64 iKey;",
          "4384:   pIn3 = &aMem[pOp->p3];",
          "4385:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4395:   testcase( pIn3->flags & MEM_Int );",
          "4396:   testcase( pIn3->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866:   }else if( p->pTab->aCol[iIdx].affinity==SQLITE_AFF_REAL ){",
          "1867:     if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "1868:       sqlite3VdbeMemRealify(pMem);",
          "1869:     }",
          "1870:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1868:       testcase( pMem->flags & MEM_Int );",
          "1869:       testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3437: #   define MAX_6BYTE ((((i64)0x00008000)<<32)-1)",
          "3438:     i64 i = pMem->u.i;",
          "3439:     u64 u;",
          "3440:     if( i<0 ){",
          "3441:       u = ~i;",
          "3442:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3440:     testcase( flags & MEM_Int );",
          "3441:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real|MEM_IntReal) ){",
          "4115:     if( (f1 & f2 & (MEM_Int|MEM_IntReal))!=0 ){",
          "4116:       if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4117:       if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4118:       return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4117:     testcase( combined_flags & MEM_Int );",
          "4118:     testcase( combined_flags & MEM_Real );",
          "4119:     testcase( combined_flags & MEM_IntReal );",
          "4121:       testcase( f1 & f2 & MEM_Int );",
          "4122:       testcase( f1 & f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4123:       return 0;",
          "4124:     }",
          "4125:     if( (f1&(MEM_Int|MEM_IntReal))!=0 ){",
          "4126:       if( (f2&MEM_Real)!=0 ){",
          "4127:         return sqlite3IntFloatCompare(pMem1->u.i, pMem2->u.r);",
          "4128:       }else if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4133:       testcase( f1 & MEM_Int );",
          "4134:       testcase( f1 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4135:     }",
          "4136:     if( (f1&MEM_Real)!=0 ){",
          "4137:       if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4138:         return -sqlite3IntFloatCompare(pMem2->u.i, pMem1->u.r);",
          "4139:       }else{",
          "4140:         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4147:         testcase( f2 & MEM_Int );",
          "4148:         testcase( f2 & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4286:     if( pRhs->flags & (MEM_Int|MEM_IntReal) ){",
          "4287:       serial_type = aKey1[idx1];",
          "4288:       testcase( serial_type==12 );",
          "4289:       if( serial_type>=10 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4298:       testcase( pRhs->flags & MEM_Int );",
          "4299:       testcase( pRhs->flags & MEM_IntReal );",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "565:   flags = pMem->flags;",
          "566:   if( flags & (MEM_Int|MEM_IntReal) ){",
          "567:     return pMem->u.i;",
          "568:   }else if( flags & MEM_Real ){",
          "569:     return doubleToInt64(pMem->u.r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:     testcase( flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:   if( pMem->flags & MEM_Real ){",
          "594:     return pMem->u.r;",
          "595:   }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "596:     return (double)pMem->u.i;",
          "597:   }else if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "598:     return memRealValue(pMem);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:     testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609: int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){",
          "610:   if( pMem->flags & (MEM_Int|MEM_IntReal) ) return pMem->u.i!=0;",
          "611:   if( pMem->flags & MEM_Null ) return ifNull;",
          "612:   return sqlite3VdbeRealValue(pMem)!=0.0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:   testcase( pMem->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "690: int sqlite3VdbeMemNumerify(Mem *pMem){",
          "691:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "692:     int rc;",
          "693:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:   testcase( pMem->flags & MEM_Int );",
          "695:   testcase( pMem->flags & MEM_Real );",
          "696:   testcase( pMem->flags & MEM_IntReal );",
          "697:   testcase( pMem->flags & MEM_Null );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1496:     }else{",
          "1497:       sqlite3ValueApplyAffinity(pVal, affinity, SQLITE_UTF8);",
          "1498:     }",
          "1500:     if( enc!=SQLITE_UTF8 ){",
          "1501:       rc = sqlite3VdbeChangeEncoding(pVal, enc);",
          "1502:     }",
          "",
          "[Removed Lines]",
          "1499:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "[Added Lines]",
          "1506:     assert( (pVal->flags & MEM_IntReal)==0 );",
          "1507:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ){",
          "1508:       testcase( pVal->flags & MEM_Int );",
          "1509:       testcase( pVal->flags & MEM_Real );",
          "1510:       pVal->flags &= ~MEM_Str;",
          "1511:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}