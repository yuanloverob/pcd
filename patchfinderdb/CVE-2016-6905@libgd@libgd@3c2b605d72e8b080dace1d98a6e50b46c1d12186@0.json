{
  "cve_id": "CVE-2016-6905",
  "cve_desc": "The read_image_tga function in gd_tga.c in the GD Graphics Library (aka libgd) before 2.2.3 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA image.",
  "repo": "libgd/libgd",
  "patch_hash": "3c2b605d72e8b080dace1d98a6e50b46c1d12186",
  "patch_info": {
    "commit_hash": "3c2b605d72e8b080dace1d98a6e50b46c1d12186",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/3c2b605d72e8b080dace1d98a6e50b46c1d12186",
    "files": [
      "src/gd_tga.c"
    ],
    "message": "bug #248, fix Out-Of-Bounds Read in read_image_tga",
    "before_after_code_files": [
      "src/gd_tga.c||src/gd_tga.c"
    ]
  },
  "patch_diff": {
    "src/gd_tga.c||src/gd_tga.c": [
      "File: src/gd_tga.c -> src/gd_tga.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:   buffer_caret = 0;",
      "280:   while( bitmap_caret < image_block_size ) {",
      "282:    if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {",
      "283:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & 127 ) + 1 );",
      "284:     buffer_caret++;",
      "289:      }",
      "290:     }",
      "291:     buffer_caret += pixel_block_size;",
      "",
      "[Removed Lines]",
      "286:     for (i = 0; i < encoded_pixels; i++) {",
      "287:      for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
      "288:       tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "",
      "[Added Lines]",
      "286:     if (encoded_pixels != 0) {",
      "288:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
      "289:       gdFree( decompression_buffer );",
      "290:       gdFree( conversion_buffer );",
      "291:       return -1;",
      "292:      }",
      "294:      for (i = 0; i < encoded_pixels; i++) {",
      "295:       for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
      "296:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "297:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "293:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
      "294:     buffer_caret++;",
      "299:      }",
      "301:     }",
      "302:    }",
      "303:   }",
      "",
      "[Removed Lines]",
      "296:     for (i = 0; i < encoded_pixels; i++) {",
      "297:      for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
      "298:       tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "300:      buffer_caret += pixel_block_size;",
      "",
      "[Added Lines]",
      "305:     if (encoded_pixels != 0) {",
      "307:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
      "308:       gdFree( decompression_buffer );",
      "309:       gdFree( conversion_buffer );",
      "310:       return -1;",
      "311:      }",
      "313:      for (i = 0; i < encoded_pixels; i++) {",
      "314:       for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
      "315:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "316:       }",
      "317:       buffer_caret += pixel_block_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6bdb31cc19f2c8dcaa7f552537eab333e892ee73",
      "candidate_info": {
        "commit_hash": "6bdb31cc19f2c8dcaa7f552537eab333e892ee73",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/6bdb31cc19f2c8dcaa7f552537eab333e892ee73",
        "files": [
          "tests/tga/.gitignore",
          "tests/tga/CMakeLists.txt",
          "tests/tga/Makemodule.am",
          "tests/tga/bug00248a.c",
          "tests/tga/bug00248a.tga"
        ],
        "message": "Add a further regression test for issue #248",
        "before_after_code_files": [
          "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
          "tests/tga/bug00248a.c||tests/tga/bug00248a.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/tga/Makemodule.am||tests/tga/Makemodule.am": [
          "File: tests/tga/Makemodule.am -> tests/tga/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  tga/bug00247 \\",
          "4:  tga/bug00247a \\",
          "5:  tga/bug00248 \\",
          "6:  tga/tga_null",
          "8: EXTRA_DIST += \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  tga/bug00248a \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:  tga/bug00084.tga \\",
          "11:  tga/bug00247.tga \\",
          "12:  tga/bug00247a.tga \\",
          "",
          "[Removed Lines]",
          "13:  tga/bug00248.tga",
          "",
          "[Added Lines]",
          "14:  tga/bug00248.tga \\",
          "15:  tga/bug00248a.tga",
          "",
          "---------------"
        ],
        "tests/tga/bug00248a.c||tests/tga/bug00248a.c": [
          "File: tests/tga/bug00248a.c -> tests/tga/bug00248a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <stdio.h>",
          "5: #include \"gd.h\"",
          "6: #include \"gdtest.h\"",
          "8: int main()",
          "9: {",
          "10:     gdImagePtr im;",
          "11:     FILE *fp = gdTestFileOpen(\"tga/bug00248a.tga\");",
          "12:     im = gdImageCreateFromTga(fp);",
          "13:     gdTestAssert(im == NULL);",
          "14:     fclose(fp);",
          "15:     return gdNumFailures();",
          "16: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ea5232bfd021f85933385a1ad5a88e114fdcf80",
      "candidate_info": {
        "commit_hash": "2ea5232bfd021f85933385a1ad5a88e114fdcf80",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/2ea5232bfd021f85933385a1ad5a88e114fdcf80",
        "files": [
          "tests/tga/.gitignore",
          "tests/tga/CMakeLists.txt",
          "tests/tga/Makemodule.am",
          "tests/tga/bug00248.c",
          "tests/tga/bug00248.tga"
        ],
        "message": "Tests for #248",
        "before_after_code_files": [
          "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
          "tests/tga/bug00248.c||tests/tga/bug00248.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/tga/Makemodule.am||tests/tga/Makemodule.am": [
          "File: tests/tga/Makemodule.am -> tests/tga/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:  tga/bug00084 \\",
          "3:  tga/bug00247 \\",
          "4:  tga/bug00247a \\",
          "5:  tga/tga_null",
          "7: EXTRA_DIST += \\",
          "8:  tga/CMakeLists.txt \\",
          "9:  tga/bug00084.tga \\",
          "10:  tga/bug00247.tga \\",
          "",
          "[Removed Lines]",
          "11:  tga/bug00247a.tga",
          "",
          "[Added Lines]",
          "5:  tga/bug00248 \\",
          "12:  tga/bug00247a.tga \\",
          "13:  tga/bug00248.tga",
          "",
          "---------------"
        ],
        "tests/tga/bug00248.c||tests/tga/bug00248.c": [
          "File: tests/tga/bug00248.c -> tests/tga/bug00248.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdio.h>",
          "3: #include \"gd.h\"",
          "4: #include \"gdtest.h\"",
          "6: int main(int argc, char **argv)",
          "7: {",
          "8:     gdImagePtr im;",
          "9:     FILE *fp = gdTestFileOpen(\"tga/bug00248.tga\");",
          "10:     im = gdImageCreateFromTga(fp);",
          "11:     gdTestAssert(im == NULL);",
          "12:     fclose(fp);",
          "13:     return gdNumFailures();",
          "14: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b9eaf06e425be4c641e0b8b457e992504993a47",
      "candidate_info": {
        "commit_hash": "8b9eaf06e425be4c641e0b8b457e992504993a47",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/8b9eaf06e425be4c641e0b8b457e992504993a47",
        "files": [
          "src/gd_tga.c",
          "tests/tga/.gitignore",
          "tests/tga/CMakeLists.txt",
          "tests/tga/Makemodule.am",
          "tests/tga/heap_overflow.c",
          "tests/tga/heap_overflow.tga"
        ],
        "message": "Fix OOB reads of the TGA decompression buffer\n\nIt is possible to craft TGA files which will overflow the decompression\nbuffer, but not the image's bitmap. Therefore we augment the check for the\nbitmap's overflow with a check for the buffer's overflow.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org.",
        "before_after_code_files": [
          "src/gd_tga.c||src/gd_tga.c",
          "tests/tgMakemodule.am||tests/tga/Makemodule.am",
          "tests/tgheap_overflow.c||tests/tga/heap_overflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_tga.c||src/gd_tga.c"
          ],
          "candidate": [
            "src/gd_tga.c||src/gd_tga.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_tga.c||src/gd_tga.c": [
          "File: src/gd_tga.c -> src/gd_tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );",
          "301:     buffer_caret++;",
          "304:      gdFree( decompression_buffer );",
          "305:      gdFree( conversion_buffer );",
          "306:      return -1;",
          "",
          "[Removed Lines]",
          "303:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {",
          "",
          "[Added Lines]",
          "303:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size",
          "304:       || buffer_caret + pixel_block_size > rle_size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
          "317:     buffer_caret++;",
          "320:      gdFree( decompression_buffer );",
          "321:      gdFree( conversion_buffer );",
          "322:      return -1;",
          "",
          "[Removed Lines]",
          "319:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {",
          "",
          "[Added Lines]",
          "320:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size",
          "321:       || buffer_caret + (encoded_pixels * pixel_block_size) > rle_size) {",
          "",
          "---------------"
        ],
        "tests/tgMakemodule.am||tests/tga/Makemodule.am": [
          "File: tests/tgMakemodule.am -> tests/tga/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  tga/heap_overflow \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  tga/heap_overflow.tga \\",
          "",
          "---------------"
        ],
        "tests/tgheap_overflow.c||tests/tga/heap_overflow.c": [
          "File: tests/tgheap_overflow.c -> tests/tga/heap_overflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"gd.h\"",
          "7: #include \"gdtest.h\"",
          "10: static size_t read_test_file(char **buffer, char *basename);",
          "13: int main()",
          "14: {",
          "15:     gdImagePtr im;",
          "16:     char *buffer;",
          "17:     size_t size;",
          "19:     size = read_test_file(&buffer, \"heap_overflow.tga\");",
          "20:     im = gdImageCreateFromTgaPtr(size, (void *) buffer);",
          "21:     gdTestAssert(im == NULL);",
          "22:     free(buffer);",
          "24:     return gdNumFailures();",
          "25: }",
          "28: static size_t read_test_file(char **buffer, char *basename)",
          "29: {",
          "30:     char *filename;",
          "31:     FILE *fp;",
          "32:     size_t exp_size, act_size;",
          "34:     filename = gdTestFilePath2(\"tga\", basename);",
          "35:     fp = fopen(filename, \"rb\");",
          "36:     gdTestAssert(fp != NULL);",
          "38:  fseek(fp, 0, SEEK_END);",
          "39:  exp_size = ftell(fp);",
          "40:  fseek(fp, 0, SEEK_SET);",
          "43:     gdTestAssert(*buffer != NULL);",
          "44:     act_size = fread(*buffer, sizeof(**buffer), exp_size, fp);",
          "45:     gdTestAssert(act_size == exp_size);",
          "47:     fclose(fp);",
          "48:     free(filename);",
          "50:     return act_size;",
          "51: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01c61f8ab110a77ae64b5ca67c244c728c506f03",
      "candidate_info": {
        "commit_hash": "01c61f8ab110a77ae64b5ca67c244c728c506f03",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/01c61f8ab110a77ae64b5ca67c244c728c506f03",
        "files": [
          "src/gd_tga.c"
        ],
        "message": "Proper fix for #248",
        "before_after_code_files": [
          "src/gd_tga.c||src/gd_tga.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_tga.c||src/gd_tga.c"
          ],
          "candidate": [
            "src/gd_tga.c||src/gd_tga.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_tga.c||src/gd_tga.c": [
          "File: src/gd_tga.c -> src/gd_tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:  int buffer_caret = 0;",
          "197:  int bitmap_caret = 0;",
          "198:  int i = 0;",
          "200:  uint8_t encoded_pixels;",
          "202:  if(overflow2(tga->width, tga->height)) {",
          "",
          "[Removed Lines]",
          "199:  int j = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   while( bitmap_caret < image_block_size ) {",
          "282:    if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {",
          "284:     buffer_caret++;",
          "299:     }",
          "300:     buffer_caret += pixel_block_size;",
          "301:    } else {",
          "302:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
          "303:     buffer_caret++;",
          "319:     }",
          "320:    }",
          "321:   }",
          "322:   gdFree( decompression_buffer );",
          "",
          "[Removed Lines]",
          "283:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & 127 ) + 1 );",
          "286:     if (encoded_pixels != 0) {",
          "288:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
          "289:       gdFree( decompression_buffer );",
          "290:       gdFree( conversion_buffer );",
          "291:       return -1;",
          "292:      }",
          "294:      for (i = 0; i < encoded_pixels; i++) {",
          "295:       for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
          "296:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
          "297:       }",
          "298:      }",
          "305:     if (encoded_pixels != 0) {",
          "307:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
          "308:       gdFree( decompression_buffer );",
          "309:       gdFree( conversion_buffer );",
          "310:       return -1;",
          "311:      }",
          "313:      for (i = 0; i < encoded_pixels; i++) {",
          "314:       for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
          "315:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
          "316:       }",
          "317:       buffer_caret += pixel_block_size;",
          "318:      }",
          "",
          "[Added Lines]",
          "282:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & !TGA_RLE_FLAG ) + 1 );",
          "285:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) >= image_block_size) {",
          "286:      gdFree( decompression_buffer );",
          "287:      gdFree( conversion_buffer );",
          "288:      return -1;",
          "289:     }",
          "291:     for (i = 0; i < encoded_pixels; i++) {",
          "292:      memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, pixel_block_size);",
          "293:      bitmap_caret += pixel_block_size;",
          "301:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) >= image_block_size) {",
          "302:      gdFree( decompression_buffer );",
          "303:      gdFree( conversion_buffer );",
          "304:      return -1;",
          "307:     memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, encoded_pixels * pixel_block_size);",
          "308:     bitmap_caret += (encoded_pixels * pixel_block_size);",
          "309:     buffer_caret += (encoded_pixels * pixel_block_size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79650b1392738a3f119eb0ea1dcf2073826a59fd",
      "candidate_info": {
        "commit_hash": "79650b1392738a3f119eb0ea1dcf2073826a59fd",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/79650b1392738a3f119eb0ea1dcf2073826a59fd",
        "files": [
          "src/gd_tga.c",
          "tests/tga/Makemodule.am",
          "tests/tga/heap_overflow.c",
          "tests/tga/heap_overflow_1.tga",
          "tests/tga/heap_overflow_2.tga"
        ],
        "message": "Fix OOB reads of the TGA decompression buffer\n\nIt is possible to craft TGA files which will overflow the decompression\nbuffer, but not the image's bitmap. Therefore we also have to check for\npotential decompression buffer overflows.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org;\na modified case exposing an off-by-one error of the first patch had been\nprovided by Konrad Beckmann.\n\nThis commit is an amendment to commit fb0e0cce, so we use CVE-2016-6906\nas well.",
        "before_after_code_files": [
          "src/gd_tga.c||src/gd_tga.c",
          "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
          "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_tga.c||src/gd_tga.c"
          ],
          "candidate": [
            "src/gd_tga.c||src/gd_tga.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_tga.c||src/gd_tga.c": [
          "File: src/gd_tga.c -> src/gd_tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   buffer_caret = 0;",
          "297:   while( bitmap_caret < image_block_size ) {",
          "299:    if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {",
          "300:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );",
          "301:     buffer_caret++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:    if (buffer_caret + pixel_block_size > rle_size) {",
          "300:     gdFree( decompression_buffer );",
          "301:     gdFree( conversion_buffer );",
          "302:     return -1;",
          "303:    }",
          "",
          "---------------"
        ],
        "tests/tga/Makemodule.am||tests/tga/Makemodule.am": [
          "File: tests/tga/Makemodule.am -> tests/tga/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  tga/bug00247a.tga \\",
          "16:  tga/bug00248.tga \\",
          "17:  tga/bug00248a.tga \\",
          "19:  tga/tga_read_rgb.png \\",
          "20:  tga/tga_read_rgb.tga \\",
          "21:  tga/tga_read_rgb_rle.tga",
          "",
          "[Removed Lines]",
          "18:  tga/heap_overflow.tga \\",
          "",
          "[Added Lines]",
          "18:  tga/heap_overflow_1.tga \\",
          "19:  tga/heap_overflow_2.tga \\",
          "",
          "---------------"
        ],
        "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c": [
          "File: tests/tga/heap_overflow.c -> tests/tga/heap_overflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"gdtest.h\"",
          "10: static size_t read_test_file(char **buffer, char *basename);",
          "13: int main()",
          "14: {",
          "15:     gdImagePtr im;",
          "16:     char *buffer;",
          "17:     size_t size;",
          "20:     im = gdImageCreateFromTgaPtr(size, (void *) buffer);",
          "21:     gdTestAssert(im == NULL);",
          "22:     free(buffer);",
          "25: }",
          "",
          "[Removed Lines]",
          "19:     size = read_test_file(&buffer, \"heap_overflow.tga\");",
          "24:     return gdNumFailures();",
          "",
          "[Added Lines]",
          "10: static void check_file(char *basename);",
          "15: {",
          "16:     check_file(\"heap_overflow_1.tga\");",
          "17:     check_file(\"heap_overflow_2.tga\");",
          "19:     return gdNumFailures();",
          "20: }",
          "23: static void check_file(char *basename)",
          "29:     size = read_test_file(&buffer, basename);",
          "",
          "---------------"
        ]
      }
    }
  ]
}