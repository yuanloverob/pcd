{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ffcf5d1a7f5b603125586946c0f0444c0698160c",
      "candidate_info": {
        "commit_hash": "ffcf5d1a7f5b603125586946c0f0444c0698160c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ffcf5d1a7f5b603125586946c0f0444c0698160c",
        "files": [
          "src/unix/darwin.c"
        ],
        "message": "darwin: fix indentation in uv__hrtime()",
        "before_after_code_files": [
          "src/unix/darwin.c||src/unix/darwin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/darwin.c||src/unix/darwin.c": [
          "File: src/unix/darwin.c -> src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: uint64_t uv__hrtime(void) {",
          "189: }",
          "",
          "[Removed Lines]",
          "183:     mach_timebase_info_data_t info;",
          "185:     if (mach_timebase_info(&info) != KERN_SUCCESS)",
          "186:       abort();",
          "188:     return mach_absolute_time() * info.numer / info.denom;",
          "",
          "[Added Lines]",
          "183:   mach_timebase_info_data_t info;",
          "185:   if (mach_timebase_info(&info) != KERN_SUCCESS)",
          "186:     abort();",
          "188:   return mach_absolute_time() * info.numer / info.denom;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cd91f9768361df16505d0c2f67f48a8f1c08c88",
      "candidate_info": {
        "commit_hash": "2cd91f9768361df16505d0c2f67f48a8f1c08c88",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2cd91f9768361df16505d0c2f67f48a8f1c08c88",
        "files": [
          "src/unix/loop.c",
          "src/win/core.c"
        ],
        "message": "unix, windows: move uv_loop_close out of assert\n\nCloses #1387",
        "before_after_code_files": [
          "src/unix/loop.c||src/unix/loop.c",
          "src/win/core.c||src/win/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/loop.c||src/unix/loop.c": [
          "File: src/unix/loop.c -> src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: void uv_loop_delete(uv_loop_t* loop) {",
          "91:   uv_loop_t* default_loop;",
          "92:   default_loop = default_loop_ptr;",
          "94:   if (loop != default_loop)",
          "95:     free(loop);",
          "96: }",
          "",
          "[Removed Lines]",
          "93:   assert(uv_loop_close(loop) == 0);",
          "",
          "[Added Lines]",
          "92:   int err;",
          "94:   err = uv_loop_close(loop);",
          "95:   assert(err == 0);",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261: void uv_loop_delete(uv_loop_t* loop) {",
          "263:   if (loop != &uv_default_loop_)",
          "264:     free(loop);",
          "265: }",
          "",
          "[Removed Lines]",
          "262:   assert(uv_loop_close(loop) == 0);",
          "",
          "[Added Lines]",
          "262:   int err = uv_loop_close(loop);",
          "263:   assert(err == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bec8f3cb244d4a1d150456441ccdb341d7c45245",
      "candidate_info": {
        "commit_hash": "bec8f3cb244d4a1d150456441ccdb341d7c45245",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bec8f3cb244d4a1d150456441ccdb341d7c45245",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "Now working on v0.11.5",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 4",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 5",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c47fcd787fe3c5672b553001beb56b2ffc97f64",
      "candidate_info": {
        "commit_hash": "4c47fcd787fe3c5672b553001beb56b2ffc97f64",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4c47fcd787fe3c5672b553001beb56b2ffc97f64",
        "files": [
          "src/unix/core.c"
        ],
        "message": "freebsd: use accept4, introduced in version 10",
        "before_after_code_files": [
          "src/unix/core.c||src/unix/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: # include <sys/wait.h>",
          "62: #endif",
          "64: static void uv__run_pending(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #if __FreeBSD__ >= 10",
          "65: # define uv__accept4 accept4",
          "66: # define UV__SOCK_NONBLOCK SOCK_NONBLOCK",
          "67: # define UV__SOCK_CLOEXEC  SOCK_CLOEXEC",
          "68: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:   assert(sockfd >= 0);",
          "373:   while (1) {",
          "375:     static int no_accept4;",
          "377:     if (no_accept4)",
          "",
          "[Removed Lines]",
          "374: #if defined(__linux__)",
          "",
          "[Added Lines]",
          "380: #if defined(__linux__) || __FreeBSD__ >= 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d170c915c98fec671f99db6f8d6c15aeacc5d754",
      "candidate_info": {
        "commit_hash": "d170c915c98fec671f99db6f8d6c15aeacc5d754",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d170c915c98fec671f99db6f8d6c15aeacc5d754",
        "files": [
          "src/win/winsock.c"
        ],
        "message": "windows: incorrect check for SOCKET_ERROR",
        "before_after_code_files": [
          "src/win/winsock.c||src/win/winsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/winsock.c||src/win/winsock.c": [
          "File: src/win/winsock.c -> src/win/winsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   if (dummy != INVALID_SOCKET) {",
          "108:     opt_len = (int) sizeof protocol_info;",
          "114:       uv_fatal_error(WSAGetLastError(), \"getsockopt\");",
          "116:     if (!(protocol_info.dwServiceFlags1 & XP1_IFS_HANDLES))",
          "",
          "[Removed Lines]",
          "109:     if (!getsockopt(dummy,",
          "110:                     SOL_SOCKET,",
          "111:                     SO_PROTOCOL_INFOW,",
          "112:                     (char*) &protocol_info,",
          "113:                     &opt_len) == SOCKET_ERROR)",
          "",
          "[Added Lines]",
          "109:     if (getsockopt(dummy,",
          "110:                    SOL_SOCKET,",
          "111:                    SO_PROTOCOL_INFOW,",
          "112:                    (char*) &protocol_info,",
          "113:                    &opt_len) == SOCKET_ERROR)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:   if (dummy != INVALID_SOCKET) {",
          "131:     opt_len = (int) sizeof protocol_info;",
          "137:       uv_fatal_error(WSAGetLastError(), \"getsockopt\");",
          "139:     if (!(protocol_info.dwServiceFlags1 & XP1_IFS_HANDLES))",
          "",
          "[Removed Lines]",
          "132:     if (!getsockopt(dummy,",
          "133:                     SOL_SOCKET,",
          "134:                     SO_PROTOCOL_INFOW,",
          "135:                     (char*) &protocol_info,",
          "136:                     &opt_len) == SOCKET_ERROR)",
          "",
          "[Added Lines]",
          "132:     if (getsockopt(dummy,",
          "133:                    SOL_SOCKET,",
          "134:                    SO_PROTOCOL_INFOW,",
          "135:                    (char*) &protocol_info,",
          "136:                    &opt_len) == SOCKET_ERROR)",
          "",
          "---------------"
        ]
      }
    }
  ]
}