{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49ddaf521a95690ba7ad1c98887996e316eb25d1",
      "candidate_info": {
        "commit_hash": "49ddaf521a95690ba7ad1c98887996e316eb25d1",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/49ddaf521a95690ba7ad1c98887996e316eb25d1",
        "files": [
          "lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi",
          "lib/autoload.jsi",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "tests/interp2.jsi",
          "tests/prob/bind.js",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.13\": Add Jsi_TableObj.  Fix several crash bugs.\n\nFossilOrigin-Name: 2c4f7caa63c06173e976adb447c171c662a4b943a26cb7eb8d7b206fe9a2d6b8",
        "before_after_code_files": [
          "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tests/interp2.jsi||tests/interp2.jsi",
          "tests/prob/bind.js||tests/prob/bind.js",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> lib/Jsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:             }",
          "134:             if (!ver || ver === '') ver = 'tip';",
          "135:             if (!self.quiet && ver !== '')",
          "137:             info = dosplit(self.exec('fossil info \"' + ver + '\" ' + sfx), info);",
          "138:             info.mntTag = ver;",
          "139:             if (ver.match(/^ver-[0-9]+\\.[0-9]+$/))",
          "",
          "[Removed Lines]",
          "136:                 puts('mounting version:', ver);",
          "",
          "[Added Lines]",
          "136:                 puts('Fossil mount:', ver);",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return 'VALUES($'+name+'('+val.keys().join('),$'+name+'(')+'))';",
          "258: }",
          "309: function Jsi_TableObj(db:userobj, table:string, data:object, conf:object=void) {",
          "310:     var self = {};",
          "311:     var options = {",
          "",
          "[Removed Lines]",
          "261: function Jsi_ObjToSchema(db:userobj, table:string, data:object, conf:object=void) {",
          "262:     var self = {};",
          "263:     var options = {",
          "264:         noCreate    :false,     // Create table, if not exists.",
          "265:         objOpts     :{},        // Options for objOpts",
          "266:         verbose     :false",
          "267:     };",
          "268:     parseOpts(self, options, conf);",
          "269:     var cl = {}, cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "273:         return true;",
          "274:     }",
          "275:     for (var c=0; c<cols.length; c++)",
          "276:         cl[cols[c].name] = cols[c];",
          "277:     var oo = self.objOpts;",
          "278:     oo.getSql = true;",
          "280:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo});",
          "281:     var s = fs;",
          "282:     s = ','+s.substr( s.indexOf('(')+1);",
          "283:     s = s.substr(0, s.length-2);",
          "284:     s +=',';",
          "285:     for (var i in data) {",
          "286:         if (cl[i]) continue;",
          "287:         var rec = s.substr( s.indexOf(','+i+' '));",
          "288:         if (!rec) throw('failed to find schema: '+i);",
          "289:         rec = rec.substr(1);",
          "290:         var re = rec.indexOf(',');",
          "291:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "292:             re = rec.indexOf(',', re);",
          "293:         rec = rec.substr(0, re);",
          "294:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "295:         puts(\"RR: \",sql);",
          "296:         if (self.verbose)",
          "297:             LogInfo('SCHEMA:',sql);",
          "298:         db.eval(sql);",
          "299:         cl[i] = rec;",
          "300:     }",
          "303:     if (fs === t)",
          "304:         return true;",
          "306:     return false;",
          "307: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     }",
          "323:     var oo = self.objOpts;",
          "324:     oo.getSql = true;",
          "326:     var cs = db.onecolumn(\"SELECT sql from sqlite_master where type='table' and name=@table\").trim();",
          "327:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo}).trim();",
          "328:     if (fs === cs)",
          "329:         return true;",
          "334:         return true;",
          "335:     var cln = cl.length, fln=fl.length;",
          "338:         return false;",
          "339:     }",
          "347:     }",
          "357:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "359:         if (self.verbose)",
          "363:     }",
          "365:     return false;",
          "366: }",
          "369: function Jsi__Init() {",
          "",
          "[Removed Lines]",
          "330:     var f = fs.substr( fs.indexOf('(')+1, fs.length-1));",
          "331:     var c = cs.substr( cs.indexOf('(')+1, cs.length-1));",
          "332:     var fl = f.split(',[').sort(), cl = c.split(',[').sort();",
          "333:     if (fl.join(',[') == cl.join(',[')",
          "336:     if (cln >= fln) {",
          "337:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"')",
          "340:     var ci = 0, fi = 0;",
          "341:     while (cl<cln && fi<fln) {",
          "342:         if (cl[ci] === fl[fi]) {",
          "343:             ci++; fi++; continue;",
          "344:         }",
          "345:         var cn = cl[ci].substr(0, cl[ci].indexOf(']')-1),",
          "346:             fn = fl[fi].substr(0, fl[fi].indexOf(']')-1);",
          "348:     for (var i in data) {",
          "349:         if (cl[i]) continue;",
          "350:         var rec = s.substr( s.indexOf(','+i+' '));",
          "351:         if (!rec) throw('failed to find schema: '+i);",
          "352:         rec = rec.substr(1);",
          "353:         var re = rec.indexOf(',');",
          "354:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "355:             re = rec.indexOf(',', re);",
          "356:         rec = rec.substr(0, re);",
          "358:         puts(\"RR: \",sql);",
          "360:             LogInfo('SCHEMA:',sql);",
          "361:         db.eval(sql);",
          "362:         cl[i] = rec;",
          "",
          "[Added Lines]",
          "281:     var f = fs.substring( fs.indexOf('([')+2, fs.length-2);",
          "282:     var c = cs.substring( cs.indexOf('([')+2, cs.length-2);",
          "283:     var fl = f.split(', [').sort(), cl = c.split(', [').sort();",
          "284:     if (fl.join('') == cl.join(''))",
          "287:     if (cln > fln) {",
          "288:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"');",
          "291:     var fadds = cl.filter( n => !fl.includes(n) );",
          "292:     if (fadds.length) {",
          "293:         LogWarn('Can not sync, obj is missing fields in table: \"'+table+'\"\\n'+fadds.join('\\n|'));",
          "294:         return false;",
          "296:     var cadds = fl.filter( n => !cl.includes(n) );",
          "297:     for (var i in cadds) {",
          "298:         var rec = '['+cadds[i];",
          "301:             LogInfo('UPGRADE:',sql);",
          "302:         try { db.eval(sql); } catch(e) { LogError('SQL:'+e+' : '+sql); }",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Jsi_LogFile    =",
          "16: Jsi_Auto.Jsi_Opts       =",
          "17: Jsi_Auto.Jsi_SqlValues  =",
          "19: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "20: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "21: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Jsi_ObjToSchema =",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Jsi_TableObj   =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 12",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 13",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:         v = obj->arr[0];",
          "779:         memmove(obj->arr, obj->arr+1, n*sizeof(Jsi_Value*));",
          "780:         obj->arr[n] = NULL;",
          "781:         Jsi_ValueDup2(interp, ret, v);",
          "782:         Jsi_DecrRefCount(interp, v);",
          "783:         Jsi_ObjSetLength(interp, obj, n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:         if (!v) return JSI_OK;",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     f->endPos = l->cur;",
          "517:     f->startPos = -1; // Have to get these from newline count.",
          "518:     if (f->retType & JSI_TT_UNDEFINED)",
          "522:     pstate->argType = 0;",
          "523:     if (localvar && args && (interp->strict)) {",
          "524:         int i, j;",
          "",
          "[Removed Lines]",
          "519:         Jsi_LogWarn(\"illegal use of 'undefined' in a return type: %s\", name?name:\"\");",
          "",
          "[Added Lines]",
          "519:         Jsi_LogWarn(\"invalid use of 'undefined' in a return type: %s\", name?name:\"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:                 if (i != j && !Jsi_Strcmp(args->args[i].name, args->args[j].name)) {",
          "528:                         if (line)",
          "529:                             interp->parseLine = line;",
          "531:                         if (line)",
          "532:                             interp->parseLine = NULL;",
          "536:                 }",
          "537:             }",
          "538:             for (j=0; j<localvar->count; j++) {",
          "539:                 if (!Jsi_Strcmp(localvar->args[j].name, args->args[i].name)) {",
          "540:                         if (line)",
          "541:                             interp->parseLine = line;",
          "543:                         if (line)",
          "544:                             interp->parseLine = NULL;",
          "548:                 }",
          "549:             }",
          "550:         }",
          "",
          "[Removed Lines]",
          "530:                         Jsi_LogWarn(\"function %s():  duplicate parameter name '%s'\", name?name:\"\", args->args[i].name);",
          "533:                         jsi_TypeMismatch(interp);",
          "534:                         if (interp->typeCheck.error)",
          "535:                             pstate->err_count++;",
          "542:                         Jsi_LogWarn(\"function %s():  parameter name conflicts with 'var %s'\", name?name:\"\", localvar->args[j].name);",
          "545:                         jsi_TypeMismatch(interp);",
          "546:                         if (interp->typeCheck.error)",
          "547:                             pstate->err_count++;",
          "",
          "[Added Lines]",
          "529:                         Jsi_LogError(\"function %s():  duplicate parameter name '%s'\", name?name:\"\", args->args[i].name);",
          "532:                         pstate->err_count++;",
          "539:                         Jsi_LogError(\"function %s():  parameter name conflicts with local '%s'\", name?name:\"\", localvar->args[j].name);",
          "542:                         pstate->err_count++;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     JSI_OPT(STRING,Jsi_Interp, scriptFile,  .help=\"Interp init script file\"),",
          "130:     JSI_OPT(STRING,Jsi_Interp, stdinStr,    .help=\"String to use as stdin for console.input()\"),",
          "131:     JSI_OPT(STRING,Jsi_Interp, stdoutStr,   .help=\"String to collect stdout for puts()\"),",
          "133:     JSI_OPT(CUSTOM,Jsi_Interp, subOpts,     .help=\"Infrequently used sub-options\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpSubOptions),",
          "134:     JSI_OPT(BOOL,  Jsi_Interp, subthread,   .help=\"Create a threaded Interp\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "135:     JSI_OPT(CUSTOM,Jsi_Interp, traceCall,   .help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\"),",
          "",
          "[Added Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2143:     if (interp->subOpts.mutexUnlock) Jsi_MutexUnlock(interp, interp->Mutex);",
          "2144:     if (!isthrd) {",
          "2145:         int ostrict = sinterp->strict;",
          "2147:         sinterp->level++;",
          "2148:         if (interp->framePtr->tryDepth)",
          "2149:             sinterp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "2146:         sinterp->strict = 0;",
          "",
          "[Added Lines]",
          "2146:         sinterp->strict = !interp->isSafe;",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "183: {",
          "184:     Jsi_FuncObj *fo = funcPtr->fobj;",
          "185:     Jsi_Value *nargs = args, *fargs = fo->bindArgs;",
          "186:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "187:     int fargc = (fargs? Jsi_ValueGetLength(interp, fargs) : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     if (!fo)",
          "186:         return Jsi_LogError(\"bind failure\"); // TODO: fix via \"call\" failure?",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:                 Jsi_DSAppend(&sStr,\")\", NULL);",
          "592:             }",
          "593:         }",
          "595:     }",
          "596:     if (!create)",
          "597:         Jsi_DSAppend(&vStr, \")\", NULL);",
          "",
          "[Removed Lines]",
          "594:         pre = \",\";",
          "",
          "[Added Lines]",
          "594:         pre = \", \";",
          "",
          "---------------"
        ],
        "tests/interp2.jsi||tests/interp2.jsi": [
          "File: tests/interp2.jsi -> tests/interp2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: ;File.write('/tmp/xx.txt','');",
          "27: ;ii.eval('var db = new Sqlite(\\'/tmp/xx.txt\\'); db.eval(\\'CREATE TABLE foo(a,b)\\');');",
          "31: File.remove('/tmp/xx.txt',true);",
          "32: delete ii;",
          "",
          "[Removed Lines]",
          "29: ;//ii.eval('var db = new Sqlite(\\'/tmp/xx.db\\');//LOCKWRITE');",
          "",
          "[Added Lines]",
          "29: ;//ii.eval('db = new Sqlite(\\'/tmp/xx.db\\');//LOCKWRITE');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: File.remove('/tmp/xx.txt',true) ==> undefined",
          "64: File.write('/tmp/xx.txt','') ==> 0",
          "65: ii.eval('var db = new Sqlite('/tmp/xx.txt'); db.eval('CREATE TABLE foo(a,b)');') ==> undefined",
          "67: PASS!: err = Safe accces denied",
          "68: SAFE EXEC:  no exec in safe mode",
          "69: SUBINTERP:  subinterps disallowed",
          "",
          "[Removed Lines]",
          "66: ii.eval('var db = new Sqlite('/tmp/xx.db');//LOCKWRITE') ==>",
          "",
          "[Added Lines]",
          "66: ii.eval('db = new Sqlite('/tmp/xx.db');//LOCKWRITE') ==>",
          "",
          "---------------"
        ],
        "tests/prob/bind.js||tests/prob/bind.js": [
          "File: tests/prob/bind.js -> tests/prob/bind.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function h(a) { return {a: a, th: this}; }",
          "2: var i = h.bind({str: \"foo\"}, 2);",
          "4: i.call({x: 1});",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "c24abfa77651e7a5d546d794803e0e3bc450ac62",
      "candidate_info": {
        "commit_hash": "c24abfa77651e7a5d546d794803e0e3bc450ac62",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/c24abfa77651e7a5d546d794803e0e3bc450ac62",
        "files": [
          "Makefile",
          "lib/web/jsi.js",
          "lws/Makefile",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiSocket.c"
        ],
        "message": "Pre-switch to liblws\n\nFossilOrigin-Name: 4336b90462cf6b333c8c85639c90ee127cba2396db523ab984373ba2a07ad939",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiSocket.c||src/jsiSocket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:             if (pat === match)",
          "690:                 return;",
          "691:             if (!partial)",
          "693:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "694:             for (i=0; i<ss.length; i++) {",
          "695:                 var st = ss[i].split(':');",
          "",
          "[Removed Lines]",
          "692:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "[Added Lines]",
          "692:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:             }",
          "698:             for (i in msg) {",
          "699:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "701:             }",
          "702:         }",
          "",
          "[Removed Lines]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "[Added Lines]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 22",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 23",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3931: mismatch:",
          "3932:         ok = 0;",
          "3933:         if (interp->asserts && !noerror)",
          "3935:         else",
          "3937:     }",
          "3938: done:",
          "3939:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3934:             rc = Jsi_LogError(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3936:             Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "",
          "[Added Lines]",
          "3934:             rc = Jsi_LogError(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "3936:             Jsi_LogWarn(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "",
          "---------------"
        ],
        "src/jsiSocket.c||src/jsiSocket.c": [
          "File: src/jsiSocket.c -> src/jsiSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <string.h>",
          "18: #include <sys/types.h>",
          "19: #include <assert.h>",
          "21: #ifdef WIN32",
          "22: #define _GET_TIME_OF_DAY_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1103:         Jsi_LogError(\"sock create failed\");",
          "1104:         goto bail;",
          "1105:     }",
          "1106:     on = 1;",
          "1107:     if (cmdPtr->reuse && setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on) )) {",
          "1108:         Jsi_LogError(\"sock reuse failed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:     fcntl(fd, F_SETFD, FD_CLOEXEC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f46c1c26ddda9b6a7206669deefc504fd009ce47",
      "candidate_info": {
        "commit_hash": "f46c1c26ddda9b6a7206669deefc504fd009ce47",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f46c1c26ddda9b6a7206669deefc504fd009ce47",
        "files": [
          "js-demos/shtml/index.shtml",
          "lib/GenDeep.jsi",
          "lib/Websrv.jsi",
          "lib/autoload.jsi",
          "lib/web/jsi.js",
          "lib/web/markdeep.js",
          "lib/web/markdeep/DeepDoc.md",
          "lib/web/markdeep/apidoc.css",
          "lib/web/markdeep/apidoc.md.html",
          "lib/web/markdeep/dark.css",
          "lib/web/markdeep/dark.md.html",
          "lib/web/markdeep/include.shtml",
          "lib/web/markdeep/jsistyle.css",
          "lib/web/markdeep/latex.css",
          "lib/web/markdeep/latex.md.html",
          "lib/web/markdeep/nginx_deepdoc.conf",
          "lib/web/markdeep/slides.css",
          "lib/web/markdeep/slides.md.html",
          "lib/web/markdeep/starter.md.html",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.28\": Prepare to remove curFile bloat.  Fix logTrace bug. Ready to move to Vue. WebSocket fixes.\n\nFossilOrigin-Name: 9dc3a45b1f96e7966b961bc11986dea9da313140922a815363489a10c66790b6",
        "before_after_code_files": [
          "js-demos/shtml/index.shtml||js-demos/shtml/index.shtml",
          "lib/GenDeep.jsi||lib/GenDeep.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/web/jsi.js||lib/web/jsi.js",
          "lib/web/markdeep.js||lib/web/markdeep.js",
          "lib/web/markdeep/apidoc.css||lib/web/markdeep/apidoc.css",
          "lib/web/markdeep/apidoc.md.html||lib/web/markdeep/apidoc.md.html",
          "lib/web/markdeep/dark.css||lib/web/markdeep/dark.css",
          "lib/web/markdeep/dark.md.html||lib/web/markdeep/dark.md.html",
          "lib/web/markdeep/include.shtml||lib/web/markdeep/include.shtml",
          "lib/web/markdeep/jsistyle.css||lib/web/markdeep/jsistyle.css",
          "lib/web/markdeep/latex.css||lib/web/markdeep/latex.css",
          "lib/web/markdeep/latex.md.html||lib/web/markdeep/latex.md.html",
          "lib/web/markdeep/nginx_deepdoc.conf||lib/web/markdeep/nginx_deepdoc.conf",
          "lib/web/markdeep/slides.css||lib/web/markdeep/slides.css",
          "lib/web/markdeep/slides.md.html||lib/web/markdeep/slides.md.html",
          "lib/web/markdeep/starter.md.html||lib/web/markdeep/starter.md.html",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/shtml/index.shtml||js-demos/shtml/index.shtml": [
          "File: js-demos/shtml/index.shtml -> js-demos/shtml/index.shtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <!-- File: index.shtml -->",
          "2: <!--#include file=\"header.html\"-->",
          "3: <!--#include file=\"body.shtml\"-->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!--#set pig='METOO'-->",
          "2: <!--#echo 'Echo Me'-->",
          "3: <!--#echo 'Echo Me ${pig}'-->",
          "",
          "---------------"
        ],
        "lib/GenDeep.jsi||lib/GenDeep.jsi": [
          "File: lib/GenDeep.jsi -> lib/GenDeep.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         url         :\"\",        // The file/url to serve out and clears timeout.",
          "45:         urlPrefix   :'/Websrv', // Prefix for urls",
          "46:         useridPass  :'',        // USER:PASS for web GUI.",
          "47:         wsdebug     :0,         // Debug option for websockets.",
          "48:         wsOpts      :{},        // Websocket options.",
          "49:         zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         return true;",
          "110:     }",
          "113:         if (!opts) opts = {};",
          "115:         data = JSON.stringify(data);",
          "117:         LogTrace(\"SENDING: \"+data);",
          "118:         self.ws.send(id, data);",
          "119:     }",
          "",
          "[Removed Lines]",
          "112:     function wsSend(chan:string, id:number, cmd:string, obj:object, opts:object=void) {",
          "114:         var data = { chan:chan, cmd:cmd, data:obj, opts:opts };",
          "116:         puts(\"SEND:\",data);",
          "",
          "[Added Lines]",
          "113:     function wsSend(mod:string, id:number, cmd:string, obj:object, opts:object=void) {",
          "115:         var data = { mod:mod, cmd:cmd, data:obj, opts:opts };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     }",
          "299:     function onModify(ws:userobj, fname:string) {",
          "302:     }",
          "304:     function WebAdmin(ws:userobj, id:number, url:string, query:array) {",
          "",
          "[Removed Lines]",
          "300:         puts(\"MODIFY\");",
          "301:         setTimeout(function() { wsSend('!', -1, 'reload', {}); }, 300);",
          "",
          "[Added Lines]",
          "300:         LogDebug(\"onModify\", fname);",
          "301:         setTimeout(function() { wsSend('!', -1, 'reload', {fname:fname}); }, 300);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:         self.done = 1;",
          "350:     }",
          "352:     function main() {",
          "353:         var urlarg, urlOrig = self.url;",
          "354:         if (typeof args === 'string')",
          "355:             args = [args];",
          "356:         urlarg = args[0];",
          "357:         args.shift();",
          "358:         if (urlarg) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:     function ConvertVue(fn:string) { // Now builtin.",
          "354:         var s = File.read(fn);",
          "355:         var ts = s.indexOf('<template>');",
          "356:         var te = s.lastIndexOf('\\n</template>');",
          "357:         var sxs = '<script>\\nexport default {';",
          "358:         var sx = s.indexOf(sxs);",
          "359:         var se = s.lastIndexOf('\\n</script>');",
          "360:         if (ts<0||te<0||se<0||sx<0) puts('bad template:',fn);",
          "361:         var tmpl = s.substr(ts+10, te-ts-9);",
          "362:         var sxb = sx+sxs.length;",
          "363:         var scr = s.substr(sxb, se-sxb);",
          "364:         var out = s.substr(0, ts)+'let template=`' + tmpl + '`;\\n\\nexport default {\\n  template, '+scr + s.substr(se+10);",
          "365:         return out;",
          "366:     }",
          "368:     function vueConvAll(args:array) {",
          "369:         for (var f of args) {",
          "370:             var fb = File.rootname(f);",
          "371:             if (File.extension(f) !== '.vue')",
          "372:                 throw('file extension must be .vue'+f);",
          "373:             var to = fb+'.js';",
          "374:             if (self.rootdir)",
          "375:                 to = File.join(self.rootdir, File.tail(to));",
          "376:             var out = ConvertVue(f);",
          "377:             File.write(to, out);",
          "378:         }",
          "379:     }",
          "385:         if (self.vueConvert) {",
          "386:             return vueConvAll(args);",
          "387:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:         for (var i in self.wsOpts)",
          "466:             wo[i] = self.wsOpts[i];",
          "469:         LogTrace(\"Listening on port:\",self.port);",
          "471:         if (!self.noGui && self.url && self.url.length) {",
          "",
          "[Removed Lines]",
          "468:         OpenWebsock();",
          "",
          "[Added Lines]",
          "500:         OpenWebsock();",
          "501:         if (!self.ws.conf('extHandlers'))",
          "502:             self.ws.handler('vue', ConvertVue); // VUE BUILTIN NOW",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: Jsi_Auto.Archive    = 'source(\"'+Info.scriptDir()+'/Archive.jsi\")';",
          "33: Jsi_Auto.Module     = 'source(\"'+Info.scriptDir()+'/Module.jsi\")';",
          "34: Jsi_Auto.Help       = 'source(\"'+Info.scriptDir()+'/Help.jsi\")';",
          "36: Jsi_Auto.DebugUI        = 'source(\"'+Info.scriptDir()+'/DebugUI/DebugUI.jsi\")';",
          "37: Jsi_Auto.SqliteUI       = 'source(\"'+Info.scriptDir()+'/SqliteUI/SqliteUI.jsi\")';",
          "",
          "[Removed Lines]",
          "35: Jsi_Auto.GenDeep    = 'source(\"'+Info.scriptDir()+'/GenDeep.jsi\")';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:         return (function() {});",
          "289:     },",
          "291:     jsigImpl: function(sig, args) { // Check function arguments",
          "292:         function ArgCheckType(o, aind, val) {",
          "293:             var af = o.args[aind];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:     gettype:gettype,",
          "292:     matchType: function(v1, v2) {",
          "293:         return gettype(v1) === getype(v2);",
          "294:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "631:     websock:function(opts) { // Create websocket connection.",
          "632:         var ws;",
          "640:                 }",
          "648:         if (self.wsstarted) {",
          "649:             console.log('websock already started');",
          "650:             return;",
          "651:         }",
          "652:         self.wsstarted = 1;",
          "654:         if (opts) {",
          "655:             for (var i in opts) {",
          "658:                 w[i] = opts[i];",
          "659:             }",
          "660:         }",
          "",
          "[Removed Lines]",
          "633:         function onmessage(obj) {",
          "635:             var msg=JSON.parse(obj.data);",
          "636:             if (msg.mod === '!') {",
          "637:                 switch (msg.cmd) {",
          "638:                     case 'reload': location.reload(); return;",
          "639:                     default: puts('unknown * cmd');",
          "641:                 return;",
          "642:             }",
          "643:             if (msg.mod === '*') {",
          "644:                 puts('TODO: broadcast');",
          "645:                 return;",
          "646:             }",
          "647:         }",
          "653:         var w = {prot:'ws', onmessage:onmessage};",
          "656:                 if (w[opts[i]]===undefined)",
          "657:                     throw('expected: '+Object.keys(w));",
          "",
          "[Added Lines]",
          "637:         var w = {",
          "638:             prot:'ws',",
          "639:             debug:false,",
          "640:             noreloadexts:'',",
          "641:             onchange(fname) {",
          "642:                 location.reload();",
          "643:             },",
          "644:             onmessage(obj) {",
          "646:                 var msg=JSON.parse(obj.data);",
          "647:                 if (msg.mod === '!') {",
          "648:                     switch (msg.cmd) {",
          "649:                         case 'reload':",
          "650:                             var fname = msg.data.fname, fext, fia;",
          "651:                             if (fname)",
          "652:                                 fia = fname.lastIndexOf('.');",
          "653:                             if (fia && fia>0)",
          "654:                                 fext = fname.substr(fia+1);",
          "655:                             if (w.noreloadexts != '' && fname) {",
          "656:                                 if (typeof(w.noreloadexts)==='string')",
          "657:                                     w.noreloadexts = w.noreloadexts.split(',');",
          "658:                                 if (fext && w.noreloadexts.indexOf(fext)>=0) {",
          "659:                                     if (w.debug)",
          "660:                                         puts('ignoring changed file: '+fname);",
          "661:                                     return;",
          "662:                                 }",
          "663:                             }",
          "664:                             if (w.onchange)",
          "665:                                 w.onchange(fname, fext)",
          "666:                         return;",
          "667:                         default: puts('unknown * cmd');",
          "668:                     }",
          "669:                     return;",
          "671:                 if (msg.mod === '*') {",
          "672:                     puts('TODO: broadcast');",
          "673:                     return;",
          "674:                 }",
          "675:             },",
          "676:         };",
          "683:             if (typeof(opts) === 'string') {",
          "684:                 var nops = {}, flst = opts.split('|');",
          "685:                 for (var fli in flst) {",
          "686:                     var fnn = flst[fli].split(':');",
          "687:                     nops[fnn[0]] = fnn[1];",
          "688:                 }",
          "689:                 opts = nops;",
          "690:             }",
          "692:                 if (w[i]===undefined)",
          "693:                     puts('expected: '+Object.keys(w));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:         puts('Websock Started');",
          "665:         return ws;",
          "666:     },",
          "668:         function validate(msg, match, partial) { //msg:object,match:string=void,partial=false",
          "669:             function typeGet(msg) {",
          "670:                 var tt = gettype(msg);",
          "671:                 if (tt !== 'object')",
          "672:                     throw('expected object');",
          "673:                 var pat = '{', pre = '';",
          "676:                     pre = ',';",
          "677:                 }",
          "678:                 pat += '}';",
          "",
          "[Removed Lines]",
          "667:     matchObj:function(msg, match, partial, noerror) { //msg:object,match:string=void,partial=false,noerror=false",
          "674:                 for (var i in msg) {",
          "675:                     pat += pre + i + ':' + gettype(msg[i]);",
          "",
          "[Added Lines]",
          "703:     matchObj:function(msg, match, partial, noerror, pfx) { //msg:object,match:string=void,partial=false,noerror=false",
          "710:                 var keys = Object.keys(msg).sort();",
          "711:                 for (var i=0; i<keys.length; i++) {",
          "712:                     var nni = keys[i];",
          "713:                     pat += pre + nni + ':' + gettype(msg[nni]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "701:             }",
          "702:         }",
          "704:         if (!match)",
          "705:             return validate(msg, match, partial);",
          "706:         try {",
          "707:             validate(msg, match, partial);",
          "708:         } catch(e) {",
          "709:             if (config.interp.asserts && console.assert && !noerror)",
          "711:             else if (console.warn)",
          "713:             else",
          "715:         }",
          "716:         return (function() {});",
          "717:     },",
          "",
          "[Removed Lines]",
          "710:                 return console.assert.bind(console.window, false, 'ASSERT:'+e);",
          "712:                 return console.warn.bind(console.window, 'WARN: '+e);",
          "714:                 return console.log.bind(console.window, 'LOG: '+e);",
          "",
          "[Added Lines]",
          "741:         if (!pfx) pfx = '';",
          "748:                 return console.assert.bind(console.window, false, 'ASSERT:'+pfx+e);",
          "750:                 return console.warn.bind(console.window, 'WARN: '+pfx+e);",
          "752:                 return console.log.bind(console.window, 'LOG: '+pfx+e);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:         if (jsi.config.onload)",
          "741:             jsi.config.onload();",
          "745:     }",
          "746: };",
          "",
          "[Removed Lines]",
          "742:         var scr = $('script[src$=\"/jsi.js?websock=true')[0];",
          "743:         if (scr)",
          "744:             jsi.websock();",
          "",
          "[Added Lines]",
          "780:         var scr = $('script[src*=\"/jsi.js?websock=\"]')[0];",
          "781:         if (scr) {",
          "782:             var ss = scr.src.indexOf('=');",
          "783:             var ssv;",
          "784:             if (ss>0) {",
          "785:                 ssv = scr.src.substr(ss+1);",
          "786:                 if (ssv==='false') return;",
          "787:                 if (ssv==='true') ssv = undefined;",
          "788:             }",
          "789:             jsi.websock(ssv);",
          "790:         }",
          "",
          "---------------"
        ],
        "lib/web/markdeep.js||lib/web/markdeep.js": [
          "File: lib/web/markdeep.js -> lib/web/markdeep.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/apidoc.css||lib/web/markdeep/apidoc.css": [
          "File: lib/web/markdeep/apidoc.css -> lib/web/markdeep/apidoc.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/apidoc.md.html||lib/web/markdeep/apidoc.md.html": [
          "File: lib/web/markdeep/apidoc.md.html -> lib/web/markdeep/apidoc.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/dark.css||lib/web/markdeep/dark.css": [
          "File: lib/web/markdeep/dark.css -> lib/web/markdeep/dark.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/dark.md.html||lib/web/markdeep/dark.md.html": [
          "File: lib/web/markdeep/dark.md.html -> lib/web/markdeep/dark.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/include.shtml||lib/web/markdeep/include.shtml": [
          "File: lib/web/markdeep/include.shtml -> lib/web/markdeep/include.shtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/jsistyle.css||lib/web/markdeep/jsistyle.css": [
          "File: lib/web/markdeep/jsistyle.css -> lib/web/markdeep/jsistyle.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/latex.css||lib/web/markdeep/latex.css": [
          "File: lib/web/markdeep/latex.css -> lib/web/markdeep/latex.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/latex.md.html||lib/web/markdeep/latex.md.html": [
          "File: lib/web/markdeep/latex.md.html -> lib/web/markdeep/latex.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/nginx_deepdoc.conf||lib/web/markdeep/nginx_deepdoc.conf": [
          "File: lib/web/markdeep/nginx_deepdoc.conf -> lib/web/markdeep/nginx_deepdoc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/slides.css||lib/web/markdeep/slides.css": [
          "File: lib/web/markdeep/slides.css -> lib/web/markdeep/slides.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/slides.md.html||lib/web/markdeep/slides.md.html": [
          "File: lib/web/markdeep/slides.md.html -> lib/web/markdeep/slides.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/starter.md.html||lib/web/markdeep/starter.md.html": [
          "File: lib/web/markdeep/starter.md.html -> lib/web/markdeep/starter.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 27",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 28",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4712:         }",
          "4713:         Jsi_TreeSearchDone(&search);",
          "4714:     }",
          "4716:         jsi_Frame *fptr = interp->framePtr;",
          "4717:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4718:         Jsi_ModuleConf *mo = NULL;",
          "4719:         if (pf && pf->pkg)",
          "4720:             mo = &pf->pkg->popts.modConf;",
          "4721:         if (jsi_ModLogEnabled(interp, v1, \"Debug\") || (mo && mo->Debug)) {",
          "4722:             jsi_evalStrFile(interp, NULL, \"this.LogDebug = console.log.bind(null, 'DEBUG:');\", 0, fptr->level);",
          "4724:         }",
          "4725:         if (jsi_ModLogEnabled(interp, v1, \"Trace\") || (mo && mo->Trace)) {",
          "4726:             jsi_evalStrFile(interp, NULL, \"this.LogTrace = console.log.bind(null, 'TRACE:');\", 0, fptr->level);",
          "4728:         }",
          "4729:         if (jsi_ModLogEnabled(interp, v1, \"Test\") || (mo && mo->Test)) {",
          "4730:             jsi_evalStrFile(interp, NULL, \"this.LogTest = console.log.bind(null, 'TEST: ');\", 0, fptr->level);",
          "4732:         }",
          "4733:     }",
          "4734:     return rc;",
          "",
          "[Removed Lines]",
          "4715:     if (rc == JSI_OK) {",
          "4723:             fptr->logflag |= (1<<jsi_Oplf_debug);",
          "4727:             fptr->logflag |= (1<<jsi_Oplf_trace);",
          "4731:             fptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "[Added Lines]",
          "4715:     if (rc == JSI_OK && interp->framePtr->filePtr) {",
          "4717:         jsi_FileInfo *cptr = fptr->filePtr;",
          "4724:             cptr->logflag |= (1<<jsi_Oplf_debug);",
          "4728:             cptr->logflag |= (1<<jsi_Oplf_trace);",
          "4732:             cptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         int oef = newps->eval_flag;",
          "70:         newps->eval_flag = 1;",
          "71:         interp->ps = newps;",
          "73:         if (r) {",
          "74:             Jsi_ValueDup2(interp, &ps->last_exception, newps->last_exception);",
          "75:         }",
          "",
          "[Removed Lines]",
          "72:         r = jsi_evalcode(newps, NULL, newps->opcodes, scope, currentScope, _this, ret);",
          "",
          "[Added Lines]",
          "72:         r = jsi_evalcode(newps, NULL, newps->opcodes, scope, currentScope, _this, ret, interp->framePtr->filePtr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:       }}\\",
          "1070:     continue;\\",
          "1071: }",
          "1074:         if (ip->logflag) { // Mask out LogDebug, etc if not enabled.",
          "1075:             interp->curIp = ip;",
          "",
          "[Removed Lines]",
          "1072: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "[Added Lines]",
          "1072: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && (interp->framePtr->filePtr && !(interp->framePtr->filePtr->logflag &(1<<n)))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2017: Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "2018:          jsi_ScopeChain *scope, Jsi_Value *fargs,",
          "2019:          Jsi_Value *_this,",
          "2021: {",
          "2022:     Jsi_Interp *interp = ps->interp;",
          "2023:     if (interp->exited)",
          "",
          "[Removed Lines]",
          "2020:          Jsi_Value **vret)",
          "",
          "[Added Lines]",
          "2020:          Jsi_Value **vret, jsi_FileInfo* fi)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2032:     frame.incsc = fargs;",
          "2033:     frame.inthis = _this;",
          "2034:     frame.opcodes = opcodes;",
          "2035:     frame.fileName = ((func && func->script)?func->script:interp->curFile);",
          "2036:     frame.funcName = interp->curFunction;",
          "2037:     frame.dirName = interp->curDir;",
          "2042:     frame.level = frame.parent->level+1;",
          "2043:     frame.evalFuncPtr = func;",
          "2044:     frame.arguments = NULL;",
          "",
          "[Removed Lines]",
          "2038:     if (frame.fileName && frame.fileName == frame.parent->fileName)",
          "2039:         frame.logflag = frame.parent->logflag;",
          "2040:     else",
          "2041:         frame.logflag = 0;",
          "",
          "[Added Lines]",
          "2035:     frame.filePtr = fi;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2161:     int oldSp, uskip = 0, fncOfs = 0, fnLen;",
          "2162:     int oldef = interp->evalFlags;",
          "2163:     jsi_Pstate *oldps = interp->ps;",
          "2164:     const char *oldFile = interp->curFile;",
          "2165:     char *origFile = Jsi_ValueString(interp, path, &fnLen);",
          "2166:     const char *fname = origFile;",
          "2167:     char *oldDir = interp->curDir, *cp;",
          "2168:     char dirBuf[PATH_MAX];",
          "2169:     jsi_Pstate *ps = NULL;",
          "2171:     int exists = (flags&JSI_EVAL_EXISTS);",
          "2172:     int ignore = (flags&JSI_EVAL_ERRIGNORE);",
          "2173:     if (flags & JSI_EVAL_GLOBAL)",
          "",
          "[Removed Lines]",
          "2170:     jsi_FileInfo *fi = NULL;",
          "",
          "[Added Lines]",
          "2161:     jsi_FileInfo *fi = interp->framePtr->filePtr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2364:         const char *curFile = interp->curFile;",
          "2366:         if (level <= 0)",
          "2368:         else {",
          "2369:             jsi_Frame *fptr = interp->framePtr;",
          "2370:             while (fptr && fptr->level > level)",
          "",
          "[Removed Lines]",
          "2367:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue);",
          "",
          "[Added Lines]",
          "2364:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue, fi);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2372:             if (!fptr)",
          "2373:                 rc = JSI_ERROR;",
          "2374:             else",
          "2376:         }",
          "2377:         interp->curFile = curFile;",
          "2378:         if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2375:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue);",
          "",
          "[Added Lines]",
          "2372:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue, fi);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:      SIGINIT(func, FUNC);",
          "1077:      func->hPtr = Jsi_HashSet(interp->funcsTbl, func, func);",
          "1078:      func->refCnt = 1;",
          "1079:      interp->funcCnt++;",
          "1080:      return func;",
          "1081: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079:      func->filePtr = interp->framePtr->filePtr;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     int retType;",
          "681: } Jsi_ScopeStrs;",
          "684: typedef struct jsi_Frame {",
          "685:     int level;",
          "686:     const char *fileName;",
          "687:     const char *funcName;",
          "688:     const char *dirName;",
          "689:     int line;",
          "690:     jsi_OpCode *ip;",
          "691:     int Sp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683: typedef struct {",
          "688:     int useCnt;",
          "689:     int logflag;",
          "690: } jsi_FileInfo;",
          "698:     jsi_FileInfo *filePtr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:     Jsi_Value *inthis;",
          "697:     Jsi_OpCodes *opcodes;",
          "698:     struct jsi_Pstate *ps;",
          "700:     Jsi_Func *evalFuncPtr;",
          "701:     struct jsi_Frame *parent, *child;",
          "702:     Jsi_Value *arguments; // Set when arguments are accessed.",
          "",
          "[Removed Lines]",
          "699:     int logflag;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:     Jsi_FuncObj *fobj;",
          "850:     struct jsi_PkgInfo *pkg;",
          "851:     bool isArrow;",
          "852: };",
          "862: enum {",
          "863:     STACK_INIT_SIZE=1024, STACK_INCR_SIZE=1024, STACK_MIN_PAD=100,",
          "",
          "[Removed Lines]",
          "854: typedef struct {",
          "859:     int useCnt;",
          "860: } jsi_FileInfo;",
          "",
          "[Added Lines]",
          "861:     jsi_FileInfo* filePtr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:     Jsi_Value *console;",
          "1191:     const char *scriptStr;",
          "1192:     const char *curFile;",
          "1193:     const char *curFunction;",
          "1194:     const char *homeDir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:     jsi_Frame topFrame;",
          "1195:     jsi_FileInfo topFile;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1400: extern Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "1401:         jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1402:         Jsi_Value *_this,",
          "1405: typedef Jsi_RC (*Jsi_Constructor)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1406:     Jsi_Value **ret, int flags, void *privData);",
          "",
          "[Removed Lines]",
          "1403:         Jsi_Value **vret);",
          "",
          "[Added Lines]",
          "1407:         Jsi_Value **vret, jsi_FileInfo* fi);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:           \"  -c\\t\\tCData: generate .c or JSON output from a .jsc description.\\n\"",
          "783:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "784:           \"  -e CODE ...\\tEvaluate javascript CODE.\\n\"",
          "786:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "787:           \"  -m\\t\\tModule: utility create/manage/invoke a Module.\\n\"",
          "788:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "",
          "[Removed Lines]",
          "785:           \"  -g\\t\\tGendeep: generate html output from markdeep source.\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:                     }",
          "830:                 }",
          "831:                 break;",
          "835:             case 'h':",
          "836:                 goto dohelp;",
          "837:             case 'J':",
          "",
          "[Removed Lines]",
          "832:             case 'g':",
          "833:                 rc = Jsi_EvalString(interp, \"runModule('GenDeep');\", JSI_EVAL_ISMAIN);",
          "834:                 break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1132:     if (opts && parent && (Jsi_ValueIsObjType(parent, opts, JSI_OT_OBJECT)==0 ||",
          "1133:         Jsi_TreeSize(opts->d.obj->tree)<=0))",
          "1134:         opts = NULL;",
          "1137:     if (!parent)",
          "1138:         interp->maxInterpDepth = JSI_MAX_SUBINTERP_DEPTH;",
          "1139:     else {",
          "",
          "[Removed Lines]",
          "1135:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp) + sizeof(jsi_Frame));",
          "1136:     interp->framePtr = (jsi_Frame*)(((uchar*)interp)+sizeof(*interp));",
          "",
          "[Added Lines]",
          "1131:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp));",
          "1132:     interp->framePtr = &interp->topFrame;",
          "1133:     interp->framePtr->filePtr = &interp->topFile;",
          "1134:     interp->topFile.fileName = interp->topFile.dirName = interp->topFile.origFile =\"\";",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         int as_cons = funcPtr->callflags.bits.iscons;",
          "214:         if (funcPtr->type == FC_NORMAL) {",
          "215:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, callee->d.obj->d.fobj->scope,",
          "217:             interp->funcCallCnt++;",
          "218:         } else if (!funcPtr->callback) {",
          "219:             rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "",
          "[Removed Lines]",
          "216:                        args, fthis, ret);",
          "",
          "[Added Lines]",
          "216:                        args, fthis, ret, funcPtr->filePtr);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     int unused;",
          "227: } jsi_wsUser;",
          "229: typedef struct {",
          "230:     Jsi_Value *val, *objVar;",
          "231:     int triedLoad;",
          "232:     int flags;",
          "233: } jsi_wsHander;",
          "235: typedef struct {",
          "236:     Jsi_Value *fileVal;",
          "237:     time_t loadLast, loadFirst;",
          "238:     int flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: typedef Jsi_RC (*jsi_wsHandlerCmd)(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr);",
          "232:     jsi_wsHandlerCmd proc;",
          "239:     const char *fname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "861:             else {",
          "862:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "863:                 fPtr->fileVal = name;",
          "864:                 fPtr->loadFirst = time(NULL);",
          "865:                 Jsi_IncrRefCount(interp, name);",
          "866:                 fPtr->flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:                 fPtr->fname = sname;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:     }",
          "950:     char *cp, *se, pref[] = \"<!--#\", suffix[] = \"-->\";",
          "952:     struct {",
          "953:         int inif, inelse, matched, elide;",
          "954:     } II[11] = {};",
          "",
          "[Removed Lines]",
          "951:     const char *sp, *msg = NULL;",
          "",
          "[Added Lines]",
          "956:     const char *sp, *msg = NULL, *seq;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1002:                     rc = JSI_OK;",
          "1003:                 Jsi_DecrRefCount(interp, fval);",
          "1004:             }",
          "1021:                 }",
          "1022:             }",
          "1024:         } else if (!Jsi_Strncmp(cp, \"#if expr=\\\"\", 10) || !Jsi_Strncmp(cp, \"#elif expr=\\\"\", 12)) {",
          "1025:             if (llen<11 || cp[llen-1] != '\"' || cp[llen-2] == '=') { msg = \"missing end quote\"; break; }",
          "1026:             Jsi_DSSetLength(&lStr, llen-1);",
          "",
          "[Removed Lines]",
          "1005:         } else if (!Jsi_Strncmp(cp, \"#echo \\\"${\", 9)) {",
          "1006:             if (cp[llen-1] != '\"' || cp[llen-2] != '}') { msg = \"missing end quote\"; break; }",
          "1007:             Jsi_DSSetLength(&lStr, llen-2);",
          "1008:             cp += 9;",
          "1009:             llen -= 9;",
          "1010:             if (!Jsi_Strcmp(cp, \"#\")) {",
          "1011:                 if (!pss->key[0])",
          "1012:                     snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1013:                 Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1014:             } else {",
          "1015:                 Jsi_Value *val = NULL;",
          "1016:                 if (!cmdPtr->udata) {",
          "1017:                     val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "1018:                     if (!val) { msg = \"udata lookup failure\"; break; }",
          "1019:                     cp = Jsi_ValueString(interp, val, NULL);",
          "1020:                     Jsi_DSPrintf(dStr, \"'%s'\", cp);",
          "",
          "[Added Lines]",
          "1010:         } else if (cmdPtr->udata && !Jsi_Strncmp(cp, \"#set \", 5) && cp[5] != '=' && ((seq=Jsi_Strchr(cp,'='))) && (seq[1]=='\\'' || seq[1]=='\\\"') && cp[llen-1]==seq[1] ) {",
          "1011:             Jsi_DSSetLength(&lStr, llen-1);",
          "1012:             Jsi_Value *val = Jsi_ValueNewStringDup(interp, (seq+2));",
          "1013:             Jsi_DString tStr = {};",
          "1014:             const char *key = Jsi_DSAppendLen(&tStr, cp+5, seq-cp-5);",
          "1015:             Jsi_ValueInsert(interp, cmdPtr->udata, key, val, 0);",
          "1016:             Jsi_DSFree(&tStr);",
          "1017:         } else if (!Jsi_Strncmp(cp, \"#echo \", 6) && (cp[6]=='\\'' || cp[6]=='\\\"') && cp[llen-1]==cp[6] ) {",
          "1018:             char *esq, *vsq = Jsi_Strstr(cp,\"${\");",
          "1019:             int ptlen = (vsq?((vsq-cp)-7):llen-8);",
          "1020:             if (vsq && !(esq=Jsi_Strchr(vsq+2,'}'))) { msg = \"'${' missing end brace '}'\"; break; }",
          "1021:             Jsi_DSAppendLen(dStr, cp+7, ptlen);",
          "1022:             if (vsq) {",
          "1023:                 Jsi_DSSetLength(&lStr, llen-1);",
          "1024:                 cp = vsq+2;",
          "1026:                 if (cp[0]== '#' && !cp[1]) {",
          "1027:                     if (!pss->key[0])",
          "1028:                         snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1029:                     Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1030:                 } else {",
          "1031:                     Jsi_Value *val = NULL;",
          "1032:                     if (cmdPtr->udata) {",
          "1033:                         val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "1034:                         if (!val) { msg = \"udata lookup failure\"; break; }",
          "1035:                         cp = Jsi_ValueString(interp, val, NULL);",
          "1036:                         Jsi_DSAppend(dStr, cp, NULL);",
          "1037:                     }",
          "1039:                 Jsi_DSAppend(dStr, esq+1, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1101:             if (ii>0)",
          "1102:                 ii--;",
          "1103:         } else {",
          "1105:             break;",
          "1106:         }",
          "1107:         cs = se + 3;",
          "",
          "[Removed Lines]",
          "1104:             msg = \"expected directive #include/#if/#elif/#else/#endif\";",
          "",
          "[Added Lines]",
          "1122:             msg = \"expected directive #include/#if/#elif/#else/#endif/#echo/#set\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1206:     \"jsi\", \"application/x-javascript\", \"cssi\", \"text/css\",",
          "1207:     \"shtml\", \"text/html\",  \"scss\", \"text/css\", \"vtt\", \"text/vtt\",",
          "1208:     \"sjs\", \"application/x-javascript\",",
          "1209:     0, 0",
          "1210: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227:     \"vue\", \"application/x-javascript\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1451:         isSSI = jsi_wsIsSSIExt(interp, cmdPtr, pss, eext);",
          "1455:             Jsi_DString jStr = {};",
          "1456:             Jsi_Value *vrc = NULL;",
          "",
          "[Removed Lines]",
          "1453:         if ((hPtr = Jsi_HashEntryFind(cmdPtr->handlers, ext)) && !cmdPtr->deleted) {",
          "",
          "[Added Lines]",
          "1472:         if (eext && (hPtr = Jsi_HashEntryFind(cmdPtr->handlers, eext)) && !cmdPtr->deleted) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1463:                 jsi_wsServeString(pss, wsi, \"Can not handle quotes in url\", 404, NULL, NULL);",
          "1464:                 return -1;",
          "1465:             }",
          "1466:             cmdPtr->handlersPkg=1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485:             if (hdlPtr->proc) {",
          "1486:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1487:                 Jsi_IncrRefCount(interp, fname);",
          "1488:                 Jsi_DString tStr = {};",
          "1489:                 rc = hdlPtr->proc(interp, cmdPtr, pss, fname, &tStr);",
          "1490:                 if (rc != JSI_OK)",
          "1491:                     hrc = -1;",
          "1492:                 else {",
          "1493:                     hrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&tStr), 0, NULL, mime);",
          "1494:                     jsi_wsFileAdd(interp, cmdPtr, fname);",
          "1495:                 }",
          "1496:                 Jsi_DecrRefCount(interp, fname);",
          "1497:                 return hrc;",
          "1498:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1548:                 Jsi_DecrRefCount(interp, vrc);",
          "1549:             if (hrc<=0)",
          "1550:                 return -1;",
          "1551:             return 1;",
          "1552:         }",
          "1553:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584:             if (cmdPtr->onModify) {",
          "1585:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1586:                 Jsi_IncrRefCount(interp, fname);",
          "1587:                 jsi_wsFileAdd(interp, cmdPtr, fname);",
          "1588:                 Jsi_DecrRefCount(interp, fname);",
          "1589:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2547:     return rc;",
          "2548: }",
          "2552: {",
          "2553:     Jsi_HashEntry *hPtr;",
          "2554:     jsi_wsHander *hdlPtr;",
          "2556:     hPtr = Jsi_HashEntryNew(cmdPtr->handlers, ext, NULL);",
          "2557:     if (!hPtr)",
          "2558:         return JSI_ERROR;",
          "2559:     hdlPtr = (jsi_wsHander *)Jsi_Calloc(1, sizeof(*hdlPtr));",
          "2560:     hdlPtr->val = valPtr;",
          "2561:     hdlPtr->flags = flags;",
          "2562:     Jsi_HashValueSet(hPtr, hdlPtr);",
          "2563:     Jsi_IncrRefCount(interp, valPtr);",
          "2564:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2551: static Jsi_RC jsi_wsHandlerAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char *ext, const char *cmd, int flags)",
          "2555:     Jsi_Value *valPtr = Jsi_ValueNewStringDup(interp, cmd);",
          "",
          "[Added Lines]",
          "2589: static Jsi_RC jsi_wsHandleVue(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr) {",
          "2591:     Jsi_DString dStr = {};",
          "2592:     Jsi_RC rc = jsi_wsFileRead(interp, fn, &dStr, cmdPtr, pss);",
          "2593:     if (rc != JSI_OK)",
          "2594:         return JSI_ERROR;",
          "2595:     char *s = Jsi_DSValue(&dStr),",
          "2601:     if (ts<0||te<0||se<0||sx<0)",
          "2602:         rc = Jsi_LogError(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "2603:     else {",
          "2604:         Jsi_DSAppendLen(tStr, s, ts-s);",
          "2605:         Jsi_DSAppend(tStr, \"let template=`\", NULL);",
          "2606:         Jsi_DSAppendLen(tStr, ts+10, te-ts-9);",
          "2607:         Jsi_DSAppend(tStr, \"`;\\n\\nexport default {\\n  template, \", NULL);",
          "2608:         sxb = sx+Jsi_Strlen(sxs);",
          "2609:         Jsi_DSAppendLen(tStr, sxb, se-sxb);",
          "2610:         Jsi_DSAppend(tStr, se+10, NULL);",
          "2611:     }",
          "2612:     return rc;",
          "2613: }",
          "2615: static Jsi_RC jsi_wsHandlerAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char *ext, const char *cmd, int flags, jsi_wsHandlerCmd proc)",
          "2619:     Jsi_Value *valPtr = Jsi_ValueNewStringDup(interp, (cmd?cmd:\"\"));",
          "2626:     hdlPtr->proc = proc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2598:         return JSI_OK;",
          "2599:     }",
          "2600:     const char *key = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2601:     Jsi_Value *valPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "2602:     if (Jsi_ValueIsNull(interp, valPtr)) {",
          "2603:         hPtr = Jsi_HashEntryFind(cmdPtr->handlers, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2666:     if (!key || !*key)",
          "2667:         return Jsi_LogError(\"handler: extension key must not be empty: %s\", key);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2625:     if (!hPtr)",
          "2626:         return JSI_ERROR;",
          "2627:     hdlPtr = (jsi_wsHander *)Jsi_Calloc(1, sizeof(*hdlPtr));",
          "2629:     Jsi_Number fl = 0;",
          "2630:     if (flagPtr && Jsi_ValueIsNumber(interp, flagPtr))",
          "2631:         Jsi_ValueGetNumber(interp, flagPtr, &fl);",
          "",
          "[Removed Lines]",
          "2628:     Jsi_Value *flagPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Added Lines]",
          "2695:     Jsi_Value *flagPtr = Jsi_ValueArrayIndex(interp, args, 3);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2729:             int n = Jsi_Stat(interp, fPtr->fileVal, &sb);",
          "2730:             if (!n && sb.st_mtime > ll) {",
          "2731:                 changed = fPtr->fileVal;",
          "2732:                 break;",
          "2733:             }",
          "2734:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2799:                 cmdPtr->lastModifyNotify = sb.st_mtime;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2755:         cmdPtr->onModify = NULL;",
          "2756:     }",
          "2757:     cmdPtr->lastModifyCheck = time(NULL);",
          "2759: }",
          "2761: static int jsi_wsService(jsi_wsCmdObj *cmdPtr)",
          "",
          "[Removed Lines]",
          "2758:     cmdPtr->lastModifyNotify = time(NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3209:     cmdPtr->handlers = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_wsfreeHandlers);",
          "3210:     if (cmdPtr->extHandlers) {",
          "3214:     }",
          "3215:     cmdPtr->fobj = fobj;",
          "3216: #ifdef LWS_LIBRARY_VERSION_NUMBER",
          "",
          "[Removed Lines]",
          "3211:         jsi_wsHandlerAdd(interp, cmdPtr, \".jsi\",   \"Jspp\",     1);",
          "3212:         jsi_wsHandlerAdd(interp, cmdPtr, \".htmli\", \"Htmlpp\",   1);",
          "3213:         jsi_wsHandlerAdd(interp, cmdPtr, \".cssi\",  \"Csspp\",    1);",
          "",
          "[Added Lines]",
          "3279:         jsi_wsHandlerAdd(interp, cmdPtr, \"jsi\",   \"Jspp\",     1, NULL);",
          "3280:         jsi_wsHandlerAdd(interp, cmdPtr, \"htmli\", \"Htmlpp\",   1, NULL);",
          "3281:         jsi_wsHandlerAdd(interp, cmdPtr, \"cssi\",  \"Csspp\",    1, NULL);",
          "3282:         jsi_wsHandlerAdd(interp, cmdPtr, \"vue\",   NULL,       1, jsi_wsHandleVue);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "5e0f7fb35c0606f7689bd61d5836b0e266246cfc",
      "candidate_info": {
        "commit_hash": "5e0f7fb35c0606f7689bd61d5836b0e266246cfc",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/5e0f7fb35c0606f7689bd61d5836b0e266246cfc",
        "files": [
          "lib/web/jsi.js",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.2\" Add \"Info.locals()\" to return all local funcs/vars in a function.\n\nFossilOrigin-Name: 85d04564da49c7f738ce9dac40f819a21bf4dea18459c8a4d012af3c2f8c9575",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             if (pat === match)",
          "689:                 return;",
          "690:             if (!partial)",
          "692:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "693:             for (i=0; i<ss.length; i++) {",
          "694:                 var st = ss[i].split(':');",
          "",
          "[Removed Lines]",
          "691:                 throw('invalid obj: '+pat+' != '+match);",
          "",
          "[Added Lines]",
          "691:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:             }",
          "697:             for (i in msg) {",
          "698:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "700:             }",
          "701:         }",
          "",
          "[Removed Lines]",
          "699:                 throw('invalid obj: '+pat+' != '+match);",
          "",
          "[Added Lines]",
          "699:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3420:     return rc;",
          "3421: }",
          "3423: static Jsi_RC InfoCompletionsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3424:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3425: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3423: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3424:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3425: {",
          "3426:     if (!interp->framePtr->funcName)",
          "3427:         return Jsi_LogError(\"Not in function\");",
          "3428:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3429:     bool varsOnly = 0;",
          "3430:     if (arg)",
          "3431:         Jsi_ValueGetBoolean(interp, arg, &varsOnly);",
          "3432:     Jsi_ValueMakeObject(interp, ret, NULL);",
          "3433:     Jsi_Value *cs = interp->framePtr->incsc;",
          "3434:     Jsi_Obj *nobj = (*ret)->d.obj;",
          "3435:     Jsi_TreeEntry* tPtr;",
          "3436:     Jsi_TreeSearch search;",
          "3437:     for (tPtr = Jsi_TreeSearchFirst(cs->d.obj->tree, &search, 0, NULL);",
          "3438:         tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "3439:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "3440:         if (v==NULL) continue;",
          "3441:         if (Jsi_ValueIsFunction(interp, v)) {",
          "3442:             if (varsOnly) continue;",
          "3443:         } else {",
          "3444:             if (arg && !varsOnly) continue;",
          "3445:         }",
          "3447:         const char* key = (char*)Jsi_TreeKeyGet(tPtr);",
          "3448:         Jsi_ObjInsert(interp, nobj, key, v, 0);",
          "3449:     }",
          "3450:     Jsi_TreeSearchDone(&search);",
          "3452:     return JSI_OK;",
          "3453: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3886: mismatch:",
          "3887:             ok = 0;",
          "3888:             if (interp->asserts && !noerror)",
          "3890:             else",
          "3892:         }",
          "3894:     }",
          "",
          "[Removed Lines]",
          "3889:                 rc = Jsi_LogError(\"mismatch: '%s' != '%s'\", cp, sp);",
          "3891:                 Jsi_LogWarn(\"mismatch: '%s' != '%s'\", cp, sp);",
          "",
          "[Added Lines]",
          "3921:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "3923:                 Jsi_LogWarn(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4728:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4729:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4730:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4731:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4732:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4733:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4763:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:         pss->cnt = cmdPtr->idx++;",
          "417:         pss->wid = sid;",
          "418:         pss->sfd = sfd;",
          "420:         pss->udata = Jsi_ValueNewObj(cmdPtr->interp, NULL);",
          "421:         Jsi_IncrRefCount(cmdPtr->interp, pss->udata);",
          "",
          "[Removed Lines]",
          "419:         snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", sid, pss, (int)cmdPtr->startTime);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1008:             Jsi_DSSetLength(&lStr, llen-2);",
          "1009:             cp += 9;",
          "1010:             llen -= 9;",
          "1012:                 Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1014:                 Jsi_Value *val = NULL;",
          "1015:                 if (!cmdPtr->udata) {",
          "1016:                     val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "",
          "[Removed Lines]",
          "1011:             if (!Jsi_Strcmp(cp, \"#\"))",
          "1013:             else {",
          "",
          "[Added Lines]",
          "1010:             if (!Jsi_Strcmp(cp, \"#\")) {",
          "1011:                 if (!pss->key[0])",
          "1012:                     snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1014:             } else {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: Info.prototype.isMain = function():boolean {};",
          "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
          "142: Info.prototype.level = function(level:number=void):number|array|object {};",
          "143: Info.prototype.lookup = function(name:string):any {};",
          "144: Info.prototype.methods = function(val:string|regexp):array|object {};",
          "145: Info.prototype.named = function(name:string=void):array|userobj {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
          "553: Otherwise returns details on the specified level.",
          "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
          "555: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
          "556: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
          "557: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1723: <tr><td>clientName</td><td><i>STRKEY</i></td><td>Client hostname.</td><td><i>readOnly</i></td></tr>",
          "1724: <tr><td>echo</td><td><i>BOOL</i></td><td>LogInfo outputs all websock Send/Recv messages.</td><td><i></i></td></tr>",
          "1725: <tr><td>headers</td><td><i>ARRAY</i></td><td>Headers to send to browser on connection: name/value pairs.</td><td><i></i></td></tr>",
          "1727: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number)</td><td><i></i></td></tr>",
          "1728: <tr><td>onGet</td><td><i>FUNC</i></td><td>Function to call to server handle http-get. @function(ws:userobj, id:number, url:string, query:array)</td><td><i></i></td></tr>",
          "1729: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to server out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1726: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Socket has been upgraded to a websocket connection.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1727: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Is a websocket connection.</td><td><i></i></td></tr>",
          "1728: <tr><td>key</td><td><i>STRBUF</i></td><td>String key lookup in ids command for SSI echo ${#}.</td><td><i>readOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1744: <table border=\"1\" class=\"optstbl table\">",
          "1745: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1746: <tr><td>connectCnt</td><td><i>INT</i></td><td>Number of active connections.</td><td><i>readOnly</i></td></tr>",
          "1747: <tr><td>eventCnt</td><td><i>INT</i></td><td>Number of events of any type.</td><td><i></i></td></tr>",
          "1748: <tr><td>eventLast</td><td><i>TIME_T</i></td><td>Time of last event of any type.</td><td><i></i></td></tr>",
          "1749: <tr><td>httpCnt</td><td><i>INT</i></td><td>Number of http reqs.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1749: <tr><td>createTime</td><td><i>TIME_T</i></td><td>Time created.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a75a11799937b9749637c2e5bdbb9802d08be022",
      "candidate_info": {
        "commit_hash": "a75a11799937b9749637c2e5bdbb9802d08be022",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a75a11799937b9749637c2e5bdbb9802d08be022",
        "files": [
          "c-demos/cdata/Car.jsc",
          "c-demos/cdata/Makefile",
          "c-demos/cdata/ext_test.jsi",
          "c-demos/dyn.js",
          "lib/Cdata.jsi",
          "lib/Zip.jsi",
          "regex/regcomp.c",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFilesys.c",
          "src/jsiFunc.c",
          "src/jsiPstate.c",
          "src/jsiSqlite.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.16\": CData adds pkg.info, fixes for ~/ files.\n\nFossilOrigin-Name: c7a1cbf5d385b03bb18120a46367d3e6b928633f4f4a1232fcdeb6d172dd54dc",
        "before_after_code_files": [
          "c-demos/cdata/Car.jsc||c-demos/cdata/Car.jsc",
          "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi",
          "c-demos/dyn.js||c-demos/dyn.js",
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "regex/regcomp.c||regex/regcomp.c",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "c-demos/cdata/Car.jsc||c-demos/cdata/Car.jsc": [
          "File: c-demos/cdata/Car.jsc -> c-demos/cdata/Car.jsc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             puts(\"Unloading Car\");",
          "48:         } else {",
          "49:             puts(\"Loading Car\");",
          "50:         }",
          "51:         return JSI_OK;",
          "52:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:             static const char *info = \"{carstuff:true, mynum:1}\";  // JSON for pkg.info",
          "51:             Car_PkgInfo = info;",
          "",
          "---------------"
        ],
        "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi": [
          "File: c-demos/cdata/ext_test.jsi -> c-demos/cdata/ext_test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: ;'\\nCar';",
          "36: ;require('Car');",
          "37: ;n=Car.keys();",
          "38: ;m=Info.cmds('Car');",
          "39: ;c=new Car();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: ;require('Car',1).info;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: '",
          "97: Car'",
          "98: require('Car') ==> 1",
          "99: n=Car.keys() ==> [ \"Car\", \"conf\", \"shift\", \"setSpeed\", \"fix\" ]",
          "100: m=Info.cmds('Car') ==> { args:\"options:object=void\", constructor:true, help:\"Extension to create a Car object command.\", name:\"Car\", retType:\"any\", type:\"object\" }",
          "101: c=new Car() ==> \"#Car_1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: require('Car',1).info ==> { carstuff:true, mynum:1 }",
          "",
          "---------------"
        ],
        "c-demos/dyn.js||c-demos/dyn.js": [
          "File: c-demos/dyn.js -> c-demos/dyn.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env jsish",
          "4: require('dyn');",
          "5: dyn(1,2,3);",
          "",
          "[Removed Lines]",
          "3: Interp.conf({pkgDirs:['.']});",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "646:                 self.out += '\\n#define CDATA_CODE_GLOB_VAR_'+name+' 1\\n';",
          "647:             else",
          "648:                 self.out += '\\n#define CDATA_CODE_PER_INTERP_'+name+' 1\\n';",
          "649:         }",
          "651:         for (var ff of def.flds) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "649:             self.out += '\\nstatic const char* '+name+'_PkgInfo = NULL;\\n';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1643:         Jsi_InterpFreeData(interp, \"Demo_InterpData\");",
          "1644: #endif",
          "1645:     if (!isRelease) {",
          "1647: #if (defined(CDATA_CODE_GLOB_VAR_Demo) || defined(CDATA_CODE_PER_INTERP_Demo))",
          "1648:         vr.spec = Demo__Specs;",
          "1649:         vr.data = ddPtr;",
          "1650:         vr.cmdSpec = DemoCmds;",
          "1651: #endif",
          "1655: #ifdef CDATA_CONSTRUCTOR",
          "1656:         Jsi_Hash *wsys;",
          "1657:         if (!(wsys = Jsi_UserObjRegister(interp, &DemoObjReg))) {",
          "",
          "[Removed Lines]",
          "1646:         Jsi_PkgOpts vr = {};",
          "1652:         if (Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, (vr.data?&vr:NULL)) != JSI_OK)",
          "1653:             return JSI_ERROR;",
          "",
          "[Added Lines]",
          "1647:         Jsi_RC rc;",
          "1649:         Jsi_PkgOpts vr = {};",
          "1653:         if (Demo_PkgInfo) {",
          "1654:             vr.info = Jsi_ValueNew1(interp);",
          "1655:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.info, 0);",
          "1656:         }",
          "1657:         if (rc == JSI_OK)",
          "1658:             rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, &vr);",
          "1659:         if (vr.info)",
          "1660:             Jsi_DecrRefCount(interp, vr.info);",
          "1661: #else",
          "1662:         rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, NULL);",
          "1664:         if (rc != JSI_OK)",
          "1665:             return rc;",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         for (var i in flist) {",
          "85:             var fn = flist[i];",
          "86:             var fdst = fn.substr(zdir.length+1);",
          "89:             if (self.verbose)",
          "90:                 puts(\"\"+fn);",
          "91:             var fdir = File.dirname(ddir+fn);",
          "",
          "[Removed Lines]",
          "87:             var ftyp = File.type(zdir+'/'+fn);",
          "88:             if (ftyp === 'directory') continue;",
          "",
          "[Added Lines]",
          "87:             var ftyp = File.perms(zdir+'/'+fn);",
          "88:             if (ftyp[0] === 'd') continue;",
          "",
          "---------------"
        ],
        "regex/regcomp.c||regex/regcomp.c": [
          "File: regex/regcomp.c -> regex/regcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2119:             {",
          "2121:               for (i = 0; tags[i] >= 0; i++)",
          "2124:               if (tags[i] < 0)",
          "2125:             {",
          "2126:               tags[i] = lit->code_max;",
          "",
          "[Removed Lines]",
          "2122:             if (tags[i] == lit->code_max)",
          "2123:               break;",
          "",
          "[Added Lines]",
          "2122:                 if (tags[i] == lit->code_max)",
          "2123:                   break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 15",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 16",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     jsi_Pstate *ps = interp->ps;",
          "79:     Jsi_RC rc = JSI_OK;",
          "80:     int flags = 0;",
          "82:     SourceData data = {.trace = interp->debugOpts.includeTrace, .once = interp->debugOpts.includeOnce};",
          "83:     Jsi_Value *v, *va = Jsi_ValueArrayIndex(interp, args, 0);",
          "84:     Jsi_Value *vo = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Removed Lines]",
          "81:     int i, argc;",
          "",
          "[Added Lines]",
          "81:     int i, argc = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     const char *sop = (data.once?\" <ONCE>\":\"\");",
          "115:     if (!Jsi_ValueIsArray(interp, va)) {",
          "116:         v = va;",
          "126:     }",
          "127:     argc = Jsi_ValueGetLength(interp, va);",
          "128:     for (i=0; i<argc && rc == JSI_OK; i++) {",
          "129:         v = Jsi_ValueArrayIndex(interp, va, i);",
          "130:         if (v && Jsi_ValueIsString(interp,v)) {",
          "131:             if (data.trace)",
          "132:                 Jsi_LogInfo(\"sourcing: %s%s\", Jsi_ValueString(interp, v, 0), sop);",
          "",
          "[Removed Lines]",
          "117:         if (v && Jsi_ValueIsString(interp,v)) {",
          "118:             if (data.trace)",
          "119:                 Jsi_LogInfo(\"sourcing: %s%s\", Jsi_ValueString(interp, v, 0), sop);",
          "120:             rc = jsi_evalStrFile(ps->interp, v, NULL, flags, data.level);",
          "121:         } else {",
          "122:             Jsi_LogError(\"expected string\");",
          "123:             rc = JSI_ERROR;",
          "124:         }",
          "125:         goto done;",
          "",
          "[Added Lines]",
          "117:         goto doit;",
          "122: doit:",
          "123:         if (!v) continue;",
          "124:         if (interp->isSafe && data.exists) {",
          "125:             Jsi_StatBuf sb;",
          "126:             if (Jsi_Stat(interp, v, &sb))",
          "127:                 continue;",
          "128:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:             break;",
          "138:         }",
          "139:     }",
          "141:     if (rc == JSI_OK)",
          "142:         Jsi_ValueCopy(interp, *ret, interp->retValue);",
          "143:     interp->isMain = oisi;",
          "",
          "[Removed Lines]",
          "140: done:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1394:     else",
          "1395: #endif",
          "1396:     apath = realpath(npath, newname);",
          "1398:         if ((path[0] == '.' && path[1] == '/') || (path[0] != '/' &&",
          "1399:         !(path[0] == '.' && path[1] == '.') && path[1] != ':')) {",
          "1400:             Jsi_GetCwd(interp, &eStr);",
          "",
          "[Removed Lines]",
          "1397:     if (!apath) {",
          "",
          "[Added Lines]",
          "1397:     if (!apath && path[0] != '~') {",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:         case 'b': if (Jsi_Strcmp(tname, \"boolean\")==0) return JSI_TT_BOOLEAN; break;",
          "98:         case 's': if (Jsi_Strcmp(tname, \"string\")==0) return JSI_TT_STRING; break;",
          "99:         case 'n': if (Jsi_Strcmp(tname, \"null\")==0) return JSI_TT_NULL;",
          "101:         case 'o': if (Jsi_Strcmp(tname, \"object\")==0) return JSI_TT_OBJECT; break;",
          "102:         case 'r': if (Jsi_Strcmp(tname, \"regexp\")==0) return JSI_TT_REGEXP; break;",
          "103:         case 'f': if (Jsi_Strcmp(tname, \"function\")==0) return JSI_TT_FUNCTION; break;",
          "104:         case 'i': if (Jsi_Strcmp(tname, \"iterobj\")==0) return JSI_TT_ITEROBJ;",
          "105:         case 'u': if (Jsi_Strcmp(tname, \"userobj\")==0) return JSI_TT_USEROBJ;",
          "107:         case 'a': if (Jsi_Strcmp(tname, \"array\")==0) return JSI_TT_ARRAY;",
          "109:         case 'v': if (Jsi_Strcmp(tname, \"void\")==0) return JSI_TT_VOID; break;",
          "110:     }",
          "111:     Jsi_LogWarn(\"Type \\\"%s\\\" is not one of boolean, string, number, function, array, object, regexp, userobj, null, undefined, void or any\", tname);",
          "",
          "[Removed Lines]",
          "100:                   if (Jsi_Strcmp(tname, \"number\")==0) return JSI_TT_NUMBER; break;",
          "106:                   if (Jsi_Strcmp(tname, \"undefined\")==0) return JSI_TT_UNDEFINED; break;",
          "108:                   if (Jsi_Strcmp(tname, \"any\")==0) return JSI_TT_ANY; break;",
          "",
          "[Added Lines]",
          "100:                   if (Jsi_Strcmp(tname, \"number\")==0) return JSI_TT_NUMBER;",
          "101:                   break;",
          "107:                   if (Jsi_Strcmp(tname, \"undefined\")==0) return JSI_TT_UNDEFINED;",
          "108:                   break;",
          "110:                   if (Jsi_Strcmp(tname, \"any\")==0) return JSI_TT_ANY;",
          "111:                   break;",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         Jsi_IncrRefCount(interp, defValue);",
          "110:         if (a->firstDef==0)",
          "111:             a->firstDef = a->argCnt;",
          "114:     } else {",
          "115:         if (a->firstDef && (interp->typeCheck.run || interp->typeCheck.all) )",
          "116:             Jsi_LogWarn(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "[Removed Lines]",
          "112:             if (atyp)",
          "113:                 jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "",
          "[Added Lines]",
          "112:         if (atyp)",
          "113:             jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4666:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4667:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4668:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4670:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4671:     Jsi_DecrRefCount(interp, info);",
          "4672:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4669:     Jsi_PkgOpts dbPkgOpts = { db_ObjCmd_Specs, &dbObjCmd, sqliteCmds, info };",
          "",
          "[Added Lines]",
          "4669:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&dbObjCmd, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}