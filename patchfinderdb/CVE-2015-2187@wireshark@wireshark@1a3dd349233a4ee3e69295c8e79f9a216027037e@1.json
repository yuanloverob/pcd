{
  "cve_id": "CVE-2015-2187",
  "cve_desc": "The dissect_atn_cpdlc_heur function in asn1/atn-cpdlc/packet-atn-cpdlc-template.c in the ATN-CPDLC dissector in Wireshark 1.12.x before 1.12.4 does not properly follow the TRY/ENDTRY code requirements, which allows remote attackers to cause a denial of service (stack memory corruption and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "1a3dd349233a4ee3e69295c8e79f9a216027037e",
  "patch_info": {
    "commit_hash": "1a3dd349233a4ee3e69295c8e79f9a216027037e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/1a3dd349233a4ee3e69295c8e79f9a216027037e",
    "files": [
      "asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
      "epan/dissectors/packet-atn-cpdlc.c"
    ],
    "message": "ATN-CPDLC: never put a break in a TRY block\n\nIt will skip the execution of ENDTRY block\n\nBug: 9952\nChange-Id: I55af248b7d31cf1b75aae695ef8c149367791820\nReviewed-on: https://code.wireshark.org/review/7391\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "asn1/atn-cpdlc/packet-atn-cpdlc-template.c||asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
      "epan/dissectors/packet-atn-cpdlc.c||epan/dissectors/packet-atn-cpdlc.c"
    ]
  },
  "patch_diff": {
    "asn1/atn-cpdlc/packet-atn-cpdlc-template.c||asn1/atn-cpdlc/packet-atn-cpdlc-template.c": [
      "File: asn1/atn-cpdlc/packet-atn-cpdlc-template.c -> asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "218:      TRY {",
      "219:       dissect_ProtectedGroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "220:       is_atn_cpdlc = TRUE;",
      "223:      CATCH_ALL{",
      "224:       is_atn_cpdlc = FALSE;",
      "225:       is_pm = FALSE;}",
      "226:      ENDTRY;",
      "227:      TRY {",
      "228:           dissect_GroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "229:       is_pm = FALSE;",
      "232:      CATCH_ALL{",
      "233:       is_atn_cpdlc = FALSE;",
      "234:       is_pm = FALSE;}",
      "",
      "[Removed Lines]",
      "221:       is_pm = TRUE;",
      "222:       break;}",
      "230:       is_atn_cpdlc = TRUE;",
      "231:       break;}",
      "",
      "[Added Lines]",
      "221:       is_pm = TRUE;}",
      "226:      if (is_atn_cpdlc) {",
      "227:       break;",
      "228:      }",
      "232:       is_atn_cpdlc = TRUE;}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "238:      TRY {",
      "239:       dissect_ProtectedAircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "240:       is_atn_cpdlc = TRUE;",
      "243:      CATCH_ALL {",
      "244:       is_atn_cpdlc = FALSE;",
      "245:       is_pm = FALSE; }",
      "246:      ENDTRY;",
      "247:      TRY{",
      "248:       dissect_AircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "249:       is_atn_cpdlc = TRUE;",
      "252:      CATCH_ALL{",
      "253:       is_atn_cpdlc = FALSE;",
      "254:       is_pm = FALSE;}",
      "",
      "[Removed Lines]",
      "241:       is_pm = TRUE;",
      "242:       break;}",
      "250:       is_pm = FALSE;",
      "251:       break;}",
      "",
      "[Added Lines]",
      "242:       is_pm = TRUE;}",
      "247:      if (is_atn_cpdlc) {",
      "248:       break;",
      "249:      }",
      "253:       is_pm = FALSE;}",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-atn-cpdlc.c||epan/dissectors/packet-atn-cpdlc.c": [
      "File: epan/dissectors/packet-atn-cpdlc.c -> epan/dissectors/packet-atn-cpdlc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5427:      TRY {",
      "5428:       dissect_ProtectedGroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "5429:       is_atn_cpdlc = TRUE;",
      "5432:      CATCH_ALL{",
      "5433:       is_atn_cpdlc = FALSE;",
      "5434:       is_pm = FALSE;}",
      "5435:      ENDTRY;",
      "5436:      TRY {",
      "5437:           dissect_GroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "5438:       is_pm = FALSE;",
      "5441:      CATCH_ALL{",
      "5442:       is_atn_cpdlc = FALSE;",
      "5443:       is_pm = FALSE;}",
      "",
      "[Removed Lines]",
      "5430:       is_pm = TRUE;",
      "5431:       break;}",
      "5439:       is_atn_cpdlc = TRUE;",
      "5440:       break;}",
      "",
      "[Added Lines]",
      "5430:       is_pm = TRUE;}",
      "5435:      if (is_atn_cpdlc) {",
      "5436:       break;",
      "5437:      }",
      "5441:       is_atn_cpdlc = TRUE;}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5447:      TRY {",
      "5448:       dissect_ProtectedAircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "5449:       is_atn_cpdlc = TRUE;",
      "5452:      CATCH_ALL {",
      "5453:       is_atn_cpdlc = FALSE;",
      "5454:       is_pm = FALSE; }",
      "5455:      ENDTRY;",
      "5456:      TRY{",
      "5457:       dissect_AircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
      "5458:       is_atn_cpdlc = TRUE;",
      "5461:      CATCH_ALL{",
      "5462:       is_atn_cpdlc = FALSE;",
      "5463:       is_pm = FALSE;}",
      "",
      "[Removed Lines]",
      "5450:       is_pm = TRUE;",
      "5451:       break;}",
      "5459:       is_pm = FALSE;",
      "5460:       break;}",
      "",
      "[Added Lines]",
      "5451:       is_pm = TRUE;}",
      "5456:      if (is_atn_cpdlc) {",
      "5457:       break;",
      "5458:      }",
      "5462:       is_pm = FALSE;}",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7921:         NULL, HFILL }},",
      "7925:    };",
      "7927:   static gint *ett[] = {",
      "",
      "[Removed Lines]",
      "7924: #line 307 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
      "",
      "[Added Lines]",
      "7926: #line 309 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "8072:     &ett_atn_cpdlc_WindSpeed,",
      "8076:     &ett_atn_cpdlc",
      "8077:   };",
      "",
      "[Removed Lines]",
      "8075: #line 311 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
      "",
      "[Added Lines]",
      "8077: #line 313 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5af152628f84cfddfa3d872d8be5b58d9a0ae03",
      "candidate_info": {
        "commit_hash": "c5af152628f84cfddfa3d872d8be5b58d9a0ae03",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c5af152628f84cfddfa3d872d8be5b58d9a0ae03",
        "files": [
          "asn1/atn-cm/atn-cm.asn",
          "asn1/atn-cm/atn-cm.cnf",
          "asn1/atn-cm/packet-atn-cm-template.c",
          "asn1/atn-cpdlc/atn-cpdlc.asn",
          "asn1/atn-cpdlc/atn-cpdlc.cnf",
          "asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
          "asn1/atn-ulcs/atn-ulcs.asn",
          "asn1/atn-ulcs/atn-ulcs.cnf",
          "asn1/atn-ulcs/packet-atn-ulcs-template.c",
          "asn1/atn-ulcs/packet-atn-ulcs-template.h",
          "epan/dissectors/packet-atn-cm.c",
          "epan/dissectors/packet-atn-cpdlc.c",
          "epan/dissectors/packet-atn-ulcs.c",
          "epan/dissectors/packet-atn-ulcs.h"
        ],
        "message": "Trivial: Convert 'tabs' indentation to '4 space' indentation\n\nChange-Id: If71dd8a04050ce11e37ad88ee862419313c06639\nReviewed-on: https://code.wireshark.org/review/9946\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
        "before_after_code_files": [
          "asn1/atn-cm/atn-cm.asn||asn1/atn-cm/atn-cm.asn",
          "asn1/atn-cm/atn-cm.cnf||asn1/atn-cm/atn-cm.cnf",
          "asn1/atn-cm/packet-atn-cm-template.c||asn1/atn-cm/packet-atn-cm-template.c",
          "asn1/atn-cpdlc/atn-cpdlc.asn||asn1/atn-cpdlc/atn-cpdlc.asn",
          "asn1/atn-cpdlc/atn-cpdlc.cnf||asn1/atn-cpdlc/atn-cpdlc.cnf",
          "asn1/atn-cpdlc/packet-atn-cpdlc-template.c||asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
          "asn1/atn-ulcs/atn-ulcs.asn||asn1/atn-ulcs/atn-ulcs.asn",
          "asn1/atn-ulcs/atn-ulcs.cnf||asn1/atn-ulcs/atn-ulcs.cnf",
          "asn1/atn-ulcs/packet-atn-ulcs-template.c||asn1/atn-ulcs/packet-atn-ulcs-template.c",
          "asn1/atn-ulcs/packet-atn-ulcs-template.h||asn1/atn-ulcs/packet-atn-ulcs-template.h",
          "epan/dissectors/packet-atn-cm.c||epan/dissectors/packet-atn-cm.c",
          "epan/dissectors/packet-atn-cpdlc.c||epan/dissectors/packet-atn-cpdlc.c",
          "epan/dissectors/packet-atn-ulcs.c||epan/dissectors/packet-atn-ulcs.c",
          "epan/dissectors/packet-atn-ulcs.h||epan/dissectors/packet-atn-ulcs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/atn-cpdlc/packet-atn-cpdlc-template.c||asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
            "epan/dissectors/packet-atn-cpdlc.c||epan/dissectors/packet-atn-cpdlc.c"
          ],
          "candidate": [
            "asn1/atn-cpdlc/packet-atn-cpdlc-template.c||asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
            "epan/dissectors/packet-atn-cpdlc.c||epan/dissectors/packet-atn-cpdlc.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/atn-cm/atn-cm.asn||asn1/atn-cm/atn-cm.asn": [
          "File: asn1/atn-cm/atn-cm.asn -> asn1/atn-cm/atn-cm.asn",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: -- ICAO doc 9705 Edition 2 Contact Management  (CM)",
          "8: BEGIN",
          "10: -- ----------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "1: -- c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t",
          "2: -- vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "3: -- :indentSize=2:tabSize=2:noTabs=false:",
          "7: CMMessageSetVersion1 DEFINITIONS AUTOMATIC TAGS ::=",
          "",
          "[Added Lines]",
          "2: CMMessageSetVersion1 DEFINITIONS AUTOMATIC TAGS ::=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: CMAircraftMessage ::= CHOICE",
          "16: {",
          "23: --  Ground-generated messages",
          "25: CMGroundMessage ::=  CHOICE",
          "26: {",
          "36: -- ----------------------------------------------------------------------------------",
          "37: -- CM Message Components",
          "",
          "[Removed Lines]",
          "17:   cmLogonRequest  [0] CMLogonRequest,",
          "18:   cmContactResponse  [1] CMContactResponse,",
          "19:   cmAbortReason  [2] CMAbortReason,",
          "20:   ...",
          "21: }",
          "27:   cmLogonResponse  [0] CMLogonResponse,",
          "28:   cmUpdate    [1] CMUpdate,",
          "29:   cmContactRequest  [2] CMContactRequest,",
          "30:   cmForwardRequest  [3] CMForwardRequest,",
          "31:   cmAbortReason  [4] CMAbortReason,",
          "32:   cmForwardResponse  [5] CMForwardResponse,",
          "33:   ...",
          "34: }",
          "",
          "[Added Lines]",
          "12:     cmLogonRequest    [0] CMLogonRequest,",
          "13:     cmContactResponse   [1] CMContactResponse,",
          "14:     cmAbortReason   [2] CMAbortReason,",
          "15:     ...",
          "16: }",
          "22:     cmLogonResponse   [0] CMLogonResponse,",
          "23:     cmUpdate        [1] CMUpdate,",
          "24:     cmContactRequest    [2] CMContactRequest,",
          "25:     cmForwardRequest    [3] CMForwardRequest,",
          "26:     cmAbortReason   [4] CMAbortReason,",
          "27:     cmForwardResponse   [5] CMForwardResponse,",
          "28:     ...",
          "29: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: APAddress ::= CHOICE",
          "44: {",
          "49: AEQualifier ::= INTEGER (0..255)",
          "52: AEQualifierVersion ::= SEQUENCE",
          "53: {",
          "58: AEQualifierVersionAddress ::= SEQUENCE",
          "59: {",
          "65: CMAbortReason ::= ENUMERATED",
          "66: {",
          "80: CMContactRequest ::= SEQUENCE",
          "81: {",
          "91: CMForwardResponse ::= ENUMERATED",
          "92: {",
          "96: }",
          "98: CMLogonRequest ::= SEQUENCE",
          "99: {",
          "111: CMLogonResponse ::= SEQUENCE",
          "112: {",
          "119: CMUpdate ::= CMLogonResponse",
          "121: Date ::= SEQUENCE",
          "122: {",
          "126: }",
          "133: DateTime ::= SEQUENCE",
          "134: {",
          "139: Day ::= INTEGER (1..31)",
          "142: FacilityDesignation ::= IA5String (SIZE(4..8))",
          "144: LongTsap ::= SEQUENCE",
          "145: {",
          "150: Month ::= INTEGER (1..12)",
          "153: Response ::= ENUMERATED",
          "154: {",
          "159: ShortTsap ::= SEQUENCE",
          "160: {",
          "167: Time ::= SEQUENCE",
          "168: {",
          "174: -- units = hour, range (0..23), resolution = 1 hour",
          "177: -- units = minute, range (0..59), resolution = 1 minute",
          "182: Year ::= INTEGER (1996..2095)",
          "185: END",
          "",
          "[Removed Lines]",
          "45:   longTsap [0] LongTsap,",
          "46:   shortTsap [1] ShortTsap",
          "47: }",
          "50: -- ATN AE-Qualifier Numeric Values are described in 4",
          "54:   aeQualifier  AEQualifier,",
          "55:   apVersion  VersionNumber",
          "56: }",
          "60:   aeQualifier  AEQualifier,",
          "61:   apVersion  VersionNumber,",
          "62:   apAddress  APAddress",
          "63: }",
          "67:   timer-expired     (0),",
          "68:   undefined-error     (1),",
          "69:   invalid-PDU     (2),",
          "70:   protocol-error     (3),",
          "71:   dialogue-acceptance-not-permitted  (4),",
          "72:   dialogue-end-not-accepted   (5),",
          "73:   communication-service-error   (6),",
          "74:   communication-service-failure   (7),",
          "75:   invalid-QOS-parameter    (8),",
          "76:   expected-PDU-missing    (9),",
          "77:   ...",
          "78: }",
          "82:   facilityDesignation  FacilityDesignation,",
          "83:   address    LongTsap",
          "84: }",
          "86: CMContactResponse ::= Response",
          "89: CMForwardRequest ::= CMLogonRequest",
          "93:   success      (0),",
          "94:   incompatible-version  (1),",
          "95:   service-not-supported  (2)",
          "100:   aircraftFlightIdentification [0] AircraftFlightIdentification,",
          "101:   cMLongTSAP   [1] LongTsap,",
          "103:   groundInitiatedApplications [2] SEQUENCE SIZE (1..256) OF  AEQualifierVersionAddress OPTIONAL,",
          "104:   airOnlyInitiatedApplications [3] SEQUENCE SIZE (1..256) OF  AEQualifierVersion OPTIONAL,",
          "105:   facilityDesignation  [4] FacilityDesignation   OPTIONAL,",
          "106:   airportDeparture  [5] Airport    OPTIONAL,",
          "107:   airportDestination  [6] Airport    OPTIONAL,",
          "108:   dateTimeDepartureETD  [7] DateTime    OPTIONAL",
          "109: }",
          "113:   airInitiatedApplications  [0] SEQUENCE SIZE (1..256) OF  AEQualifierVersionAddress",
          "114:   OPTIONAL,",
          "115:   groundOnlyInitiatedApplications [1] SEQUENCE SIZE (1..256) OF  AEQualifierVersion",
          "116:   OPTIONAL",
          "117: }",
          "123:   year  Year,",
          "124:   month  Month,",
          "125:   day  Day",
          "128:  -- The Date field does not have to correspond to the flight if the field is not to be used;",
          "129:  -- the field's value can be assigned a meaningless, but compliant, value locally.  If operational",
          "130:  -- use of the Date field is intended, there must be bilateral agreements in place to ensure its proper",
          "131:  -- use.  This is a local implementation issue.",
          "135:   date  Date,",
          "136:   time  Time",
          "137: }",
          "140:  --unit = Day, Range (1..31), resolution = 1",
          "146:   rDP   OCTET STRING (SIZE(5)),",
          "147:   shortTsap  ShortTsap",
          "148: }",
          "151:  --unit = Month, Range (1..12), resolution = 1",
          "155:   contactSuccess   (0),",
          "156:   contactNotSuccessful  (1)",
          "157: }",
          "161:   aRS  [0] OCTET STRING (SIZE(3))  OPTIONAL,",
          "162:   -- the aRS contains the ICAO 24 bit aircraft address when the ShortTsap belongs to an aircraft;",
          "163:   -- or a ground address when the Short Tsap belongs to a ground system",
          "164:   locSysNselTsel [1] OCTET STRING  (SIZE(10..11))",
          "165: }",
          "169:   hours   Timehours,",
          "170:   minutes  Timeminutes",
          "171: }",
          "173: Timehours ::= INTEGER (0..23)",
          "176: Timeminutes ::= INTEGER (0..59)",
          "179: VersionNumber ::= INTEGER (1..255)",
          "180:  -- VersionNumber 0 is reserved for the Dialogue Service",
          "183:  --unit = Year, Range (1996..2095), resolution = 1",
          "",
          "[Added Lines]",
          "40:     longTsap  [0] LongTsap,",
          "41:     shortTsap [1] ShortTsap",
          "42: }",
          "45: -- ATN AE-Qualifier Numeric Values are described in 4",
          "49:     aeQualifier   AEQualifier,",
          "50:     apVersion   VersionNumber",
          "51: }",
          "55:     aeQualifier   AEQualifier,",
          "56:     apVersion   VersionNumber,",
          "57:     apAddress   APAddress",
          "58: }",
          "62:     timer-expired         (0),",
          "63:     undefined-error         (1),",
          "64:     invalid-PDU         (2),",
          "65:     protocol-error          (3),",
          "66:     dialogue-acceptance-not-permitted   (4),",
          "67:     dialogue-end-not-accepted     (5),",
          "68:     communication-service-error     (6),",
          "69:     communication-service-failure     (7),",
          "70:     invalid-QOS-parameter       (8),",
          "71:     expected-PDU-missing        (9),",
          "72:     ...",
          "73: }",
          "77:     facilityDesignation   FacilityDesignation,",
          "78:     address       LongTsap",
          "79: }",
          "81: CMContactResponse ::= Response",
          "84: CMForwardRequest ::= CMLogonRequest",
          "88:     success           (0),",
          "89:     incompatible-version    (1),",
          "90:     service-not-supported   (2)",
          "95:     aircraftFlightIdentification  [0] AircraftFlightIdentification,",
          "96:     cMLongTSAP      [1] LongTsap,",
          "98:     groundInitiatedApplications [2] SEQUENCE SIZE (1..256) OF  AEQualifierVersionAddress OPTIONAL,",
          "99:     airOnlyInitiatedApplications  [3] SEQUENCE SIZE (1..256) OF  AEQualifierVersion OPTIONAL,",
          "100:     facilityDesignation   [4] FacilityDesignation     OPTIONAL,",
          "101:     airportDeparture    [5] Airport       OPTIONAL,",
          "102:     airportDestination    [6] Airport       OPTIONAL,",
          "103:     dateTimeDepartureETD    [7] DateTime        OPTIONAL",
          "104: }",
          "108:     airInitiatedApplications    [0] SEQUENCE SIZE (1..256) OF  AEQualifierVersionAddress",
          "109:     OPTIONAL,",
          "110:     groundOnlyInitiatedApplications [1] SEQUENCE SIZE (1..256) OF  AEQualifierVersion",
          "111:     OPTIONAL",
          "112: }",
          "118:     year    Year,",
          "119:     month   Month,",
          "120:     day   Day",
          "123:   -- The Date field does not have to correspond to the flight if the field is not to be used;",
          "124:   -- the field's value can be assigned a meaningless, but compliant, value locally.  If operational",
          "125:   -- use of the Date field is intended, there must be bilateral agreements in place to ensure its proper",
          "126:   -- use.  This is a local implementation issue.",
          "130:     date    Date,",
          "131:     time    Time",
          "132: }",
          "135:   --unit = Day, Range (1..31), resolution = 1",
          "141:     rDP     OCTET STRING (SIZE(5)),",
          "142:     shortTsap   ShortTsap",
          "143: }",
          "146:   --unit = Month, Range (1..12), resolution = 1",
          "150:     contactSuccess      (0),",
          "151:     contactNotSuccessful    (1)",
          "152: }",
          "156:     aRS   [0] OCTET STRING (SIZE(3))    OPTIONAL,",
          "157:     -- the aRS contains the ICAO 24 bit aircraft address when the ShortTsap belongs to an aircraft;",
          "158:     -- or a ground address when the Short Tsap belongs to a ground system",
          "159:     locSysNselTsel  [1] OCTET STRING  (SIZE(10..11))",
          "160: }",
          "164:     hours     Timehours,",
          "165:     minutes   Timeminutes",
          "166: }",
          "168: Timehours ::= INTEGER (0..23)",
          "171: Timeminutes ::= INTEGER (0..59)",
          "174: VersionNumber ::= INTEGER (1..255)",
          "175:   -- VersionNumber 0 is reserved for the Dialogue Service",
          "178:   --unit = Year, Range (1996..2095), resolution = 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188: -- Editor modelines  -  http://www.wireshark.org/tools/modelines.html",
          "189: --",
          "190: -- Local variables:",
          "194: -- End:",
          "195: --",
          "198: --",
          "",
          "[Removed Lines]",
          "191: -- c-basic-offset: 2",
          "192: -- tab-width: 2",
          "193: -- indent-tabs-mode: t",
          "196: -- vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "197: -- :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "186: -- c-basic-offset: 4",
          "187: -- tab-width: 8",
          "188: -- indent-tabs-mode: nil",
          "191: -- vi: set shiftwidth=4 tabstop=8 expandtab:",
          "192: -- :indentSize=4:tabSize=8:noTabs=true:",
          "",
          "---------------"
        ],
        "asn1/atn-cm/atn-cm.cnf||asn1/atn-cm/atn-cm.cnf": [
          "File: asn1/atn-cm/atn-cm.cnf -> asn1/atn-cm/atn-cm.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #.MODULE_IMPORT",
          "7: #.EXPORTS",
          "9: #.PDU_NEW",
          "12: #.END",
          "14: #",
          "15: # Editor modelines  -  http://www.wireshark.org/tools/modelines.html",
          "16: #",
          "17: # Local variables:",
          "21: # End:",
          "22: #",
          "",
          "[Removed Lines]",
          "1: # c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t",
          "2: # vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "3: # :indentSize=2:tabSize=2:noTabs=false:",
          "10:  CMAircraftMessage",
          "11:  CMGroundMessage",
          "18: # c-basic-offset: 2",
          "19: # tab-width: 2",
          "20: # indent-tabs-mode: t",
          "23: # vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "24: # :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "6:   CMAircraftMessage",
          "7:   CMGroundMessage",
          "14: # c-basic-offset: 4",
          "15: # tab-width: 8",
          "16: # indent-tabs-mode: nil",
          "19: # vi: set shiftwidth=4 tabstop=8 expandtab:",
          "20: # :indentSize=4:tabSize=8:noTabs=true:",
          "",
          "---------------"
        ],
        "asn1/atn-cm/packet-atn-cm-template.c||asn1/atn-cm/packet-atn-cm-template.c": [
          "File: asn1/atn-cm/packet-atn-cm-template.c -> asn1/atn-cm/packet-atn-cm-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: static int",
          "69: dissect_atn_cm(",
          "74: {",
          "104: }",
          "106: static gboolean",
          "107: dissect_atn_cm_heur(",
          "112: {",
          "194: }",
          "197: void proto_register_atn_cm (void)",
          "198: {",
          "199:     static hf_register_info hf_atn_cm[] = {",
          "201:     };",
          "226: }",
          "228: void proto_reg_handoff_atn_cm(void)",
          "229: {",
          "237: }",
          "",
          "[Removed Lines]",
          "70:   tvbuff_t *tvb,",
          "71:   packet_info *pinfo,",
          "72:   proto_tree *tree,",
          "73:   void *data _U_)",
          "75:   int  type;",
          "76:   proto_tree *sub_tree;",
          "78:   sub_tree = proto_tree_add_subtree(",
          "79:    tree, tvb, 0, -1, ett_atn_cm, NULL, ATN_CM_PROTO);",
          "85:   type = check_heur_msg_type(pinfo);",
          "87:   switch(type){",
          "88:     case um:",
          "89:       dissect_CMGroundMessage_PDU(",
          "90:        tvb,",
          "91:        pinfo,",
          "92:        sub_tree, NULL);",
          "93:       break;",
          "94:     case dm:",
          "95:       dissect_CMAircraftMessage_PDU(",
          "96:        tvb,",
          "97:        pinfo,",
          "98:        sub_tree, NULL);",
          "99:       break;",
          "100:     default:",
          "101:       break;",
          "102:   }",
          "103:   return tvb_reported_length_remaining(tvb, 0);",
          "108:   tvbuff_t *tvb,",
          "109:   packet_info *pinfo,",
          "110:   proto_tree *tree,",
          "111:   void *data _U_)",
          "113:   atn_conversation_t *atn_cv = NULL;",
          "114:   volatile gboolean is_atn_cm = FALSE;",
          "115:   int type;",
          "118:   type = check_heur_msg_type(pinfo);",
          "121:   switch(type){",
          "122:     case um:",
          "123:       TRY {",
          "124:         dissect_CMGroundMessage_PDU(",
          "125:          tvb,",
          "126:          pinfo,",
          "127:          NULL, NULL);",
          "129:         is_atn_cm = TRUE; }",
          "130:       CATCH_ALL {",
          "131:         is_atn_cm = FALSE; }",
          "132:       ENDTRY;",
          "133:       break;",
          "134:     case dm:",
          "135:       TRY {",
          "136:         dissect_CMAircraftMessage_PDU(",
          "137:           tvb,",
          "138:           pinfo,",
          "139:           NULL, NULL);",
          "141:         is_atn_cm = TRUE;}",
          "142:       CATCH_ALL {",
          "143:         is_atn_cm = FALSE; }",
          "144:       ENDTRY;",
          "145:       break;",
          "146:     default:",
          "147:       break;",
          "148:   }",
          "150:   if (is_atn_cm  == TRUE) {",
          "157:     if((pinfo->clnp_dstref) &&",
          "158:       (!pinfo->clnp_srcref)){",
          "160:      atn_cv = find_atn_conversation(",
          "161:         &pinfo->dst,",
          "162:         pinfo->clnp_dstref,",
          "163:         &pinfo->src );",
          "164:     }",
          "166:     if((!pinfo->clnp_dstref) &&",
          "167:       (pinfo->clnp_srcref)){",
          "169:      atn_cv = find_atn_conversation(",
          "170:         &pinfo->src,",
          "171:         pinfo->clnp_srcref,",
          "172:         &pinfo->dst );",
          "174:     }",
          "176:     if((pinfo->clnp_dstref) &&",
          "177:       (pinfo->clnp_srcref)){",
          "178:       atn_cv = find_atn_conversation(",
          "179:         &pinfo->src,",
          "180:         pinfo->clnp_srcref,",
          "181:         &pinfo->dst );",
          "182:     }",
          "183:     if(atn_cv){",
          "184:       atn_cv->ae_qualifier = cma;",
          "185:     }",
          "186:     dissect_atn_cm(",
          "187:       tvb,",
          "188:       pinfo,",
          "189:       tree,",
          "190:       NULL);",
          "191:   }",
          "193:   return is_atn_cm;",
          "200:      #include \"packet-atn-cm-hfarr.c\"",
          "202:   static gint *ett[] = {",
          "203:    #include \"packet-atn-cm-ettarr.c\"",
          "204:    &ett_atn_cm",
          "205:   };",
          "208:   proto_atn_cm = proto_register_protocol(",
          "209:     ATN_CM_PROTO ,",
          "210:     \"ATN-CM\",",
          "211:     \"atn-cm\");",
          "213:   proto_register_field_array(",
          "214:     proto_atn_cm,",
          "215:     hf_atn_cm,",
          "216:     array_length(hf_atn_cm));",
          "218:   proto_register_subtree_array(",
          "219:     ett,",
          "220:     array_length(ett));",
          "222:   new_register_dissector(",
          "223:     \"atn-cm\",",
          "224:     dissect_atn_cm,",
          "225:     proto_atn_cm);",
          "231:   heur_dissector_add(",
          "232:     \"atn-ulcs\",",
          "233:     dissect_atn_cm_heur,",
          "234:     \"ATN-CM over ATN-ULCS\",",
          "235:     \"atn-cm-ulcs\",",
          "236:     proto_atn_cm, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "64:     tvbuff_t *tvb,",
          "65:     packet_info *pinfo,",
          "66:     proto_tree *tree,",
          "67:     void *data _U_)",
          "69:     int   type;",
          "70:     proto_tree *sub_tree;",
          "72:     sub_tree = proto_tree_add_subtree(",
          "73:       tree, tvb, 0, -1, ett_atn_cm, NULL, ATN_CM_PROTO);",
          "79:     type = check_heur_msg_type(pinfo);",
          "81:     switch(type){",
          "82:         case um:",
          "83:             dissect_CMGroundMessage_PDU(",
          "84:               tvb,",
          "85:               pinfo,",
          "86:               sub_tree, NULL);",
          "87:             break;",
          "88:         case dm:",
          "89:             dissect_CMAircraftMessage_PDU(",
          "90:               tvb,",
          "91:               pinfo,",
          "92:               sub_tree, NULL);",
          "93:             break;",
          "94:         default:",
          "95:             break;",
          "96:     }",
          "97:     return tvb_reported_length_remaining(tvb, 0);",
          "102:     tvbuff_t *tvb,",
          "103:     packet_info *pinfo,",
          "104:     proto_tree *tree,",
          "105:     void *data _U_)",
          "107:     atn_conversation_t *atn_cv = NULL;",
          "108:     volatile gboolean is_atn_cm = FALSE;",
          "109:     int type;",
          "112:     type = check_heur_msg_type(pinfo);",
          "115:     switch(type){",
          "116:         case um:",
          "117:             TRY {",
          "118:                 dissect_CMGroundMessage_PDU(",
          "119:                   tvb,",
          "120:                   pinfo,",
          "121:                   NULL, NULL);",
          "123:                 is_atn_cm = TRUE; }",
          "124:             CATCH_ALL {",
          "125:                 is_atn_cm = FALSE; }",
          "126:             ENDTRY;",
          "127:             break;",
          "128:         case dm:",
          "129:             TRY {",
          "130:                 dissect_CMAircraftMessage_PDU(",
          "131:                     tvb,",
          "132:                     pinfo,",
          "133:                     NULL, NULL);",
          "135:                 is_atn_cm = TRUE;}",
          "136:             CATCH_ALL {",
          "137:                 is_atn_cm = FALSE; }",
          "138:             ENDTRY;",
          "139:             break;",
          "140:         default:",
          "141:             break;",
          "142:     }",
          "144:     if (is_atn_cm  == TRUE) {",
          "151:         if((pinfo->clnp_dstref) &&",
          "152:             (!pinfo->clnp_srcref)){",
          "154:           atn_cv = find_atn_conversation(",
          "155:                 &pinfo->dst,",
          "156:                 pinfo->clnp_dstref,",
          "157:                 &pinfo->src );",
          "158:         }",
          "160:         if((!pinfo->clnp_dstref) &&",
          "161:             (pinfo->clnp_srcref)){",
          "163:           atn_cv = find_atn_conversation(",
          "164:                 &pinfo->src,",
          "165:                 pinfo->clnp_srcref,",
          "166:                 &pinfo->dst );",
          "168:         }",
          "170:         if((pinfo->clnp_dstref) &&",
          "171:             (pinfo->clnp_srcref)){",
          "172:             atn_cv = find_atn_conversation(",
          "173:                 &pinfo->src,",
          "174:                 pinfo->clnp_srcref,",
          "175:                 &pinfo->dst );",
          "176:         }",
          "177:         if(atn_cv){",
          "178:             atn_cv->ae_qualifier = cma;",
          "179:         }",
          "180:         dissect_atn_cm(",
          "181:             tvb,",
          "182:             pinfo,",
          "183:             tree,",
          "184:             NULL);",
          "185:     }",
          "187:     return is_atn_cm;",
          "194:           #include \"packet-atn-cm-hfarr.c\"",
          "196:     static gint *ett[] = {",
          "197:       #include \"packet-atn-cm-ettarr.c\"",
          "198:       &ett_atn_cm",
          "199:     };",
          "202:     proto_atn_cm = proto_register_protocol(",
          "203:         ATN_CM_PROTO ,",
          "204:         \"ATN-CM\",",
          "205:         \"atn-cm\");",
          "207:     proto_register_field_array(",
          "208:         proto_atn_cm,",
          "209:         hf_atn_cm,",
          "210:         array_length(hf_atn_cm));",
          "212:     proto_register_subtree_array(",
          "213:         ett,",
          "214:         array_length(ett));",
          "216:     new_register_dissector(",
          "217:         \"atn-cm\",",
          "218:         dissect_atn_cm,",
          "219:         proto_atn_cm);",
          "225:     heur_dissector_add(",
          "226:         \"atn-ulcs\",",
          "227:         dissect_atn_cm_heur,",
          "228:         \"ATN-CM over ATN-ULCS\",",
          "229:         \"atn-cm-ulcs\",",
          "230:         proto_atn_cm, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "asn1/atn-cpdlc/atn-cpdlc.asn||asn1/atn-cpdlc/atn-cpdlc.asn": [
          "File: asn1/atn-cpdlc/atn-cpdlc.asn -> asn1/atn-cpdlc/atn-cpdlc.asn",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: -- Sub-Volume IV ASN.1 reference definitions for ICAO Doc. 9705,",
          "6: -- Second Edition",
          "7: -- Version 1.1, 03 Oct 2001",
          "9: -- protected mode PDR's",
          "11: -- based on \"ACP WGN SG/N2 Version 1.1 (Output Montreal - May 2005)\"",
          "16: BEGIN",
          "18: IMPORTS",
          "24: -- ----------------------------------------------------------------------------------",
          "25: -- Ground Generated Messages - Top level",
          "26: -- ----------------------------------------------------------------------------------",
          "27: GroundPDUs ::= CHOICE",
          "28: {",
          "36: }",
          "38: UplinkMessage ::= CHOICE",
          "39: {",
          "42: }",
          "44: AircraftPDUs::= CHOICE",
          "45: {",
          "51: }",
          "53: StartDownMessage ::= SEQUENCE",
          "54: {",
          "57: }",
          "59: Mode ::= ENUMERATED",
          "60: {",
          "63: }",
          "65: DownlinkMessage ::= CHOICE",
          "66: {",
          "69: }",
          "71: CPDLCUserAbortReason ::= ENUMERATED",
          "72: {",
          "81: }",
          "84: CPDLCProviderAbortReason ::= ENUMERATED",
          "85: {",
          "97: END",
          "",
          "[Removed Lines]",
          "1: -- c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t",
          "2: -- vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "3: -- :indentSize=2:tabSize=2:noTabs=false:",
          "10: -- 2011-10-25  Doc 9705 Draft Ed 3 (ICAO web site - 11/00) including \"9705 PDRS FOR CPDLC\"",
          "14: -- plain old CPDLC",
          "15: CPDLCAPDUsVersion1 DEFINITIONS ::=",
          "19:     ATCUplinkMessage, ATCDownlinkMessage",
          "20:   FROM PMCPDLCMessageSetVersion1",
          "21:     ATCForwardMessage, ATCForwardResponse",
          "22:   FROM PMCPDLCAPDUsVersion1;",
          "29:   abortUser  [0] CPDLCUserAbortReason,",
          "30:   abortProvider  [1] CPDLCProviderAbortReason,",
          "31:   startup   [2] UplinkMessage,",
          "32:   send   [3] ATCUplinkMessage,",
          "33:   forward  [4] ATCForwardMessage,",
          "34:   forwardresponse [5] ATCForwardResponse,",
          "35:   ...",
          "40:   noMessage  [0] NULL,",
          "41:   aTCUplinkMessage [1] ATCUplinkMessage",
          "46:   abortUser [0] CPDLCUserAbortReason,",
          "47:   abortProvider [1] CPDLCProviderAbortReason,",
          "48:   startdown [2] StartDownMessage,",
          "49:   send  [3] ATCDownlinkMessage,",
          "50:   ...",
          "55:   mode   Mode DEFAULT cpdlc,",
          "56:   startDownlinkMessage DownlinkMessage",
          "61:   cpdlc  (0),",
          "62:   dsc  (1)",
          "67:   noMessage   [0] NULL,",
          "68:   aTCDownlinkMessage  [1] ATCDownlinkMessage",
          "73:   undefined     (0),",
          "74:   no-message-identification-numbers-available (1),",
          "75:   duplicate-message-identification-numbers (2),",
          "76:   no-longer-next-data-authority   (3),",
          "77:   current-data-authority-abort   (4),",
          "78:   commanded-termination   (5),",
          "79:   invalid-response    (6),",
          "80:   ...",
          "86:   timer-expired     (0),",
          "87:   undefined-error    (1),",
          "88:   invalid-PDU     (2),",
          "89:   protocol-error     (3),",
          "90:   communication-service-error   (4),",
          "91:   communication-service-failure   (5),",
          "92:   invalid-QOS-parameter    (6),",
          "93:   expected-PDU-missing    (7),",
          "94:   ...",
          "95:  }",
          "",
          "[Added Lines]",
          "6: -- 2011-10-25   Doc 9705 Draft Ed 3 (ICAO web site - 11/00) including \"9705 PDRS FOR CPDLC\"",
          "10: -- plain old CPDLC",
          "11: CPDLCAPDUsVersion1 DEFINITIONS ::=",
          "15:         ATCUplinkMessage, ATCDownlinkMessage",
          "16:     FROM PMCPDLCMessageSetVersion1",
          "17:         ATCForwardMessage, ATCForwardResponse",
          "18:     FROM PMCPDLCAPDUsVersion1;",
          "25:     abortUser   [0] CPDLCUserAbortReason,",
          "26:     abortProvider   [1] CPDLCProviderAbortReason,",
          "27:     startup     [2] UplinkMessage,",
          "28:     send      [3] ATCUplinkMessage,",
          "29:     forward   [4] ATCForwardMessage,",
          "30:     forwardresponse [5] ATCForwardResponse,",
          "31:     ...",
          "36:     noMessage   [0] NULL,",
          "37:     aTCUplinkMessage  [1] ATCUplinkMessage",
          "42:     abortUser [0] CPDLCUserAbortReason,",
          "43:     abortProvider [1] CPDLCProviderAbortReason,",
          "44:     startdown [2] StartDownMessage,",
          "45:     send    [3] ATCDownlinkMessage,",
          "46:     ...",
          "51:     mode      Mode DEFAULT cpdlc,",
          "52:     startDownlinkMessage  DownlinkMessage",
          "57:     cpdlc   (0),",
          "58:     dsc   (1)",
          "63:     noMessage     [0] NULL,",
          "64:     aTCDownlinkMessage    [1] ATCDownlinkMessage",
          "69:     undefined         (0),",
          "70:     no-message-identification-numbers-available (1),",
          "71:     duplicate-message-identification-numbers  (2),",
          "72:     no-longer-next-data-authority     (3),",
          "73:     current-data-authority-abort      (4),",
          "74:     commanded-termination     (5),",
          "75:     invalid-response        (6),",
          "76:     ...",
          "82:     timer-expired         (0),",
          "83:     undefined-error       (1),",
          "84:     invalid-PDU         (2),",
          "85:     protocol-error          (3),",
          "86:     communication-service-error     (4),",
          "87:     communication-service-failure     (5),",
          "88:     invalid-QOS-parameter       (6),",
          "89:     expected-PDU-missing        (7),",
          "90:     ...",
          "91:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: -- ----------------------------------------------------------------------------------",
          "112: ProtectedGroundPDUs ::= CHOICE",
          "113: {",
          "121: }",
          "123: ProtectedUplinkMessage::= SEQUENCE",
          "124: {",
          "127: -- PER encoded ATCUplinkMessage",
          "128: -- (see Module PMCPDLCMessageSetVersion1)",
          "131: }",
          "133: ATCForwardMessage ::= SEQUENCE",
          "134: {",
          "137: }",
          "139: ForwardHeader ::= SEQUENCE",
          "140: {",
          "144: }",
          "146: ForwardMessage ::= CHOICE",
          "147: {",
          "149: --PER encoded ATCUplinkMessageData,",
          "150: -- (see Module PMCPDLCMessageSetVersion1)",
          "152: --PER encoded ATCDownlinkMessageData,",
          "153: -- (see Module PMCPDLCMessageSetVersion1)",
          "154: }",
          "156: ATCForwardResponse ::= ENUMERATED",
          "157: {",
          "162: }",
          "163: -- ----------------------------------------------------------------------------------",
          "164: -- Aircraft Generated Messages - Top level",
          "165: -- ----------------------------------------------------------------------------------",
          "166: ProtectedAircraftPDUs::= CHOICE",
          "167: {",
          "173: }",
          "176: ProtectedStartDownMessage ::= SEQUENCE",
          "177: {",
          "180: }",
          "182: ProtectedMode ::= ENUMERATED",
          "183: {",
          "186: }",
          "188: ProtectedDownlinkMessage::= SEQUENCE",
          "189: {",
          "192: --PER encoded ATCDownlinkMessage,",
          "193: -- (see Module PMCPDLCMessageSetVersion1)",
          "196: }",
          "198: -- ----------------------------------------------------------------------------------",
          "199: -- Uplink and Downlink messages - Common Elements",
          "200: -- ----------------------------------------------------------------------------------",
          "202: --root is {icao-arc atn-algorithms(9)}",
          "204: CPDLCMessage ::= BIT STRING",
          "206: PMCPDLCUserAbortReason ::= ENUMERATED",
          "207: {",
          "222: }",
          "224: PMCPDLCProviderAbortReason ::= ENUMERATED",
          "225: {",
          "235: }",
          "237: END",
          "",
          "[Removed Lines]",
          "114:   abortUser    [0] PMCPDLCUserAbortReason,",
          "115:   abortProvider  [1] PMCPDLCProviderAbortReason,",
          "116:   startup     [2] ProtectedUplinkMessage,",
          "117:   send      [3] ProtectedUplinkMessage,",
          "118:   forward     [4] ATCForwardMessage,",
          "119:   forwardresponse [5] ATCForwardResponse,",
          "120:   ...",
          "125:   algorithmIdentifier [0] AlgorithmIdentifier OPTIONAL,",
          "126:   protectedMessage  [1] CPDLCMessage OPTIONAL,",
          "129:   integrityCheck   [2] BIT STRING,",
          "130:   ...",
          "135:   forwardHeader  ForwardHeader,",
          "136:   forwardMessage ForwardMessage",
          "141:   dateTime DateTimeGroup,",
          "142:   aircraftID AircraftFlightIdentification,",
          "143:   aircraftAddress AircraftAddress",
          "148:   upElementIDs  [0] BIT STRING,",
          "151:   downElementIDs [1] BIT STRING",
          "158:   success        (0),",
          "159:   service-not-supported (1),",
          "160:   version-not-equal   (2),",
          "161:   ...",
          "168:   abortUser   [0] PMCPDLCUserAbortReason,",
          "169:   abortProvider [1] PMCPDLCProviderAbortReason,",
          "170:   startdown   [2] ProtectedStartDownMessage,",
          "171:   send     [3] ProtectedDownlinkMessage,",
          "172:   ...",
          "178:   mode ProtectedMode DEFAULT cpdlc,",
          "179:   startDownlinkMessage ProtectedDownlinkMessage",
          "184:   cpdlc (0),",
          "185:   dsc (1)",
          "190:   algorithmIdentifier [0] AlgorithmIdentifier OPTIONAL,",
          "191:   protectedMessage  [1] CPDLCMessage OPTIONAL,",
          "194:   integrityCheck   [2] BIT STRING,",
          "195:   ...",
          "201: AlgorithmIdentifier ::= RELATIVE-OID",
          "208:   undefined                  (0),",
          "209:   no-message-identification-numbers-available (1),",
          "210:   duplicate-message-identification-numbers  (2),",
          "211:   no-longer-next-data-authority        (3),",
          "212:   current-data-authority-abort        (4),",
          "213:   commanded-termination            (5),",
          "214:   invalid-response              (6),",
          "215:   time-out-of-synchronisation         (7),",
          "216:   unknown-integrity-check           (8),",
          "217:   validation-failure             (9),",
          "218:   unable-to-decode-message          (10),",
          "219:   invalid-pdu                 (11),",
          "220:   invalid-CPDLC-message            (12),",
          "221:   ...",
          "226:   timer-expired                (0),",
          "227:   undefined-error               (1),",
          "228:   invalid-PDU                 (2),",
          "229:   protocol-error               (3),",
          "230:   communication-service-error         (4),",
          "231:   communication-service-failure        (5),",
          "232:   invalid-QOS-parameter            (6),",
          "233:   expected-PDU-missing            (7),",
          "234:   ...",
          "",
          "[Added Lines]",
          "110:     abortUser       [0] PMCPDLCUserAbortReason,",
          "111:     abortProvider   [1] PMCPDLCProviderAbortReason,",
          "112:     startup         [2] ProtectedUplinkMessage,",
          "113:     send            [3] ProtectedUplinkMessage,",
          "114:     forward         [4] ATCForwardMessage,",
          "115:     forwardresponse [5] ATCForwardResponse,",
          "116:     ...",
          "121:     algorithmIdentifier [0] AlgorithmIdentifier OPTIONAL,",
          "122:     protectedMessage    [1] CPDLCMessage OPTIONAL,",
          "125:     integrityCheck      [2] BIT STRING,",
          "126:     ...",
          "131:     forwardHeader   ForwardHeader,",
          "132:     forwardMessage  ForwardMessage",
          "137:     dateTime  DateTimeGroup,",
          "138:     aircraftID  AircraftFlightIdentification,",
          "139:     aircraftAddress AircraftAddress",
          "144:     upElementIDs    [0] BIT STRING,",
          "147:     downElementIDs  [1] BIT STRING",
          "154:     success               (0),",
          "155:     service-not-supported (1),",
          "156:     version-not-equal     (2),",
          "157:     ...",
          "164:     abortUser     [0] PMCPDLCUserAbortReason,",
          "165:     abortProvider [1] PMCPDLCProviderAbortReason,",
          "166:     startdown     [2] ProtectedStartDownMessage,",
          "167:     send          [3] ProtectedDownlinkMessage,",
          "168:     ...",
          "174:     mode  ProtectedMode DEFAULT cpdlc,",
          "175:     startDownlinkMessage ProtectedDownlinkMessage",
          "180:     cpdlc (0),",
          "181:     dsc (1)",
          "186:     algorithmIdentifier [0] AlgorithmIdentifier OPTIONAL,",
          "187:     protectedMessage    [1] CPDLCMessage OPTIONAL,",
          "190:     integrityCheck      [2] BIT STRING,",
          "191:     ...",
          "197: AlgorithmIdentifier ::= RELATIVE-OID",
          "204:     undefined                                   (0),",
          "205:     no-message-identification-numbers-available (1),",
          "206:     duplicate-message-identification-numbers    (2),",
          "207:     no-longer-next-data-authority               (3),",
          "208:     current-data-authority-abort                (4),",
          "209:     commanded-termination                       (5),",
          "210:     invalid-response                            (6),",
          "211:     time-out-of-synchronisation                 (7),",
          "212:     unknown-integrity-check                     (8),",
          "213:     validation-failure                          (9),",
          "214:     unable-to-decode-message                    (10),",
          "215:     invalid-pdu                                 (11),",
          "216:     invalid-CPDLC-message                       (12),",
          "217:     ...",
          "222:     timer-expired                               (0),",
          "223:     undefined-error                             (1),",
          "224:     invalid-PDU                                 (2),",
          "225:     protocol-error                              (3),",
          "226:     communication-service-error                 (4),",
          "227:     communication-service-failure               (5),",
          "228:     invalid-QOS-parameter                       (6),",
          "229:     expected-PDU-missing                        (7),",
          "230:     ...",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242: ATCUplinkMessage ::= SEQUENCE",
          "243: {",
          "246: }",
          "248: ATCUplinkMessageData ::= SEQUENCE",
          "249: {",
          "256: }",
          "258: ATCDownlinkMessage ::= SEQUENCE",
          "259: {",
          "262: }",
          "264: ATCDownlinkMessageData ::= SEQUENCE",
          "265: {",
          "272: }",
          "274: -- ----------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "244:   header ATCMessageHeader,",
          "245:   messageData ATCUplinkMessageData",
          "250:   elementIds SEQUENCE SIZE (1..5) OF ATCUplinkMsgElementId,",
          "251:   constrainedData SEQUENCE",
          "252:   {",
          "253:     routeClearanceData SEQUENCE SIZE (1..2) OF RouteClearance OPTIONAL,",
          "254:     ...",
          "255:   } OPTIONAL",
          "260:   header ATCMessageHeader,",
          "261:   messageData ATCDownlinkMessageData",
          "266:   elementIds SEQUENCE SIZE (1..5) OF ATCDownlinkMsgElementId,",
          "267:   constrainedData SEQUENCE",
          "268:   {",
          "269:     routeClearanceData  SEQUENCE SIZE (1..2) OF RouteClearance OPTIONAL,",
          "270:    ...",
          "271:   } OPTIONAL",
          "",
          "[Added Lines]",
          "240:     header  ATCMessageHeader,",
          "241:     messageData ATCUplinkMessageData",
          "246:     elementIds  SEQUENCE SIZE (1..5) OF ATCUplinkMsgElementId,",
          "247:     constrainedData SEQUENCE",
          "248:     {",
          "249:         routeClearanceData  SEQUENCE SIZE (1..2) OF RouteClearance OPTIONAL,",
          "250:         ...",
          "251:     } OPTIONAL",
          "256:     header  ATCMessageHeader,",
          "257:     messageData ATCDownlinkMessageData",
          "262:     elementIds  SEQUENCE SIZE (1..5) OF ATCDownlinkMsgElementId,",
          "263:     constrainedData SEQUENCE",
          "264:     {",
          "265:         routeClearanceData    SEQUENCE SIZE (1..2) OF RouteClearance OPTIONAL,",
          "266:       ...",
          "267:     } OPTIONAL",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276: -- ----------------------------------------------------------------------------------",
          "277: ATCMessageHeader ::= SEQUENCE",
          "278: {",
          "283: }",
          "285: MsgIdentificationNumber ::= INTEGER (0..63)",
          "",
          "[Removed Lines]",
          "279:   messageIdNumber  [0] MsgIdentificationNumber,",
          "280:   messageRefNumber [1] MsgReferenceNumber OPTIONAL,",
          "281:   dateTime     [2] DateTimeGroup,",
          "282:   logicalAck    [3] LogicalAck DEFAULT notRequired",
          "",
          "[Added Lines]",
          "275:     messageIdNumber   [0] MsgIdentificationNumber,",
          "276:     messageRefNumber  [1] MsgReferenceNumber  OPTIONAL,",
          "277:     dateTime          [2] DateTimeGroup,",
          "278:     logicalAck        [3] LogicalAck  DEFAULT notRequired",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289: LogicalAck ::= ENUMERATED",
          "290: {",
          "293: }",
          "295: -- ----------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "291:   required (0),",
          "292:   notRequired (1)",
          "",
          "[Added Lines]",
          "287:     required  (0),",
          "288:     notRequired (1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "297: -- ----------------------------------------------------------------------------------",
          "298: ATCUplinkMsgElementId ::= CHOICE",
          "299: {",
          "800:    uM125NULL [125] NULL,",
          "1250: }",
          "1252: ------------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "300:   -- UNABLE",
          "301:   -- Urg(N)/Alr(M)/Resp(N)",
          "302:   uM0NULL [0] NULL,",
          "304:   -- STANDBY",
          "305:   -- Urg(N)/Alr(L)/Resp(N)",
          "306:   uM1NULL [1] NULL,",
          "308:   -- REQUEST DEFERRED",
          "309:   -- Urg(N)/Alr(L)/Resp(N)",
          "310:   uM2NULL [2] NULL,",
          "312:   -- ROGER",
          "313:   -- Urg(N)/Alr(L)/Resp(N)",
          "314:   uM3NULL [3] NULL,",
          "316:   -- AFFIRM",
          "317:   -- Urg(N)/Alr(L)/Resp(N)",
          "318:   uM4NULL [4] NULL,",
          "320:   -- NEGATIVE Urg(N)/Alr(L)/Resp(N)",
          "321:   uM5NULL [5] NULL,",
          "323:   -- EXPECT [level] Urg(L)/Alr(L)/Resp(R)",
          "324:   uM6Level [6] Level,",
          "326:   -- EXPECT CLIMB AT [time]",
          "327:   -- Urg(L)/Alr(L)/Resp(R)",
          "328:   uM7Time [7] Time,",
          "330:   -- EXPECT CLIMB AT [position]",
          "331:   -- Urg(L)/Alr(L)/Resp(R)",
          "332:   uM8Position [8] Position,",
          "334:   -- EXPECT DESCENT AT [time]",
          "335:   -- Urg(L)/Alr(L)/Resp(R)",
          "336:   uM9Time [9] Time,",
          "338:   -- EXPECT DESCENT AT [position]",
          "339:   -- Urg(L)/Alr(L)/Resp(R)",
          "340:   uM10Position [10] Position,",
          "342:   -- EXPECT CRUISE CLIMB AT [time]",
          "343:   -- Urg(L)/Alr(L)/Resp(R)",
          "344:   uM11Time [11] Time,",
          "346:   -- EXPECT CRUISE CLIMB AT [position]",
          "347:   -- Urg(L)/Alr(L)/Resp(R)",
          "348:   uM12Position [12] Position,",
          "350:   -- AT [time] EXPECT CLIMB TO [level]",
          "351:   -- Urg(L)/Alr(L)/Resp(R)",
          "352:   uM13TimeLevel [13] TimeLevel,",
          "354:  -- AT [position] EXPECT CLIMB TO [level]",
          "355:  -- Urg(L)/Alr(L)/Resp(R)",
          "356:   uM14PositionLevel [14] PositionLevel,",
          "358:   -- AT [time] EXPECT DESCENT TO [level]",
          "359:   -- Urg(L)/Alr(L)/Resp(R)",
          "360:   uM15TimeLevel [15] TimeLevel,",
          "362:  -- AT [position] EXPECT DESCENT TO [level]",
          "363:  -- Urg(L)/Alr(L)/Resp(R)",
          "364:   uM16PositionLevel [16] PositionLevel,",
          "366:   -- AT [time] EXPECT CRUISE CLIMB TO [level]",
          "367:   -- Urg(L)/Alr(L)/Resp(R)",
          "368:   uM17TimeLevel [17] TimeLevel,",
          "370:   -- AT [position] EXPECT CRUISE CLIMB TO [level]",
          "371:   -- Urg(L)/Alr(L)/Resp(R)",
          "372:   uM18PositionLevel [18] PositionLevel,",
          "374:   -- MAINTAIN [level]",
          "375:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "376:   uM19Level [19] Level,",
          "378:   -- CLIMB TO [level]",
          "379:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "380:   uM20Level [20] Level,",
          "382:   -- AT [time] CLIMB TO [level]",
          "383:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "384:   uM21TimeLevel [21] TimeLevel,",
          "386:   -- AT [position] CLIMB TO [level]",
          "387:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "388:   uM22PositionLevel [22] PositionLevel,",
          "390:   -- DESCEND TO [level]",
          "391:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "392:   uM23Level [23] Level,",
          "394:   -- AT [time] DESCEND TO [level]",
          "395:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "396:   uM24TimeLevel [24] TimeLevel,",
          "398:   -- AT [position] DESCEND TO [level]",
          "399:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "400:   uM25PositionLevel [25] PositionLevel,",
          "402:   -- CLIMB TO REACH [level] BY [time]",
          "403:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "404:   uM26LevelTime [26] LevelTime,",
          "406:   -- CLIMB TO REACH [level] BY [position]",
          "407:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "408:   uM27LevelPosition [27] LevelPosition,",
          "410:   -- DESCEND TO REACH [level] BY [time]",
          "411:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "412:   uM28LevelTime [28] LevelTime,",
          "414:   -- DESCEND TO REACH [level] BY [position]",
          "415:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "416:   uM29LevelPosition [29] LevelPosition,",
          "418:   -- MAINTAIN BLOCK [level] TO [level]",
          "419:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "420:   uM30LevelLevel  [30] LevelLevel,",
          "422:   -- CLIMB TO AND MAINTAIN BLOCK [level] TO [level]",
          "423:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "424:   uM31LevelLevel [31] LevelLevel,",
          "426:   -- DESCEND TO AND MAINTAIN BLOCK [level] TO [level]",
          "427:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "428:   uM32LevelLevel [32] LevelLevel,",
          "430:   -- Reserved",
          "431:   -- Urg(L)/Alr(L)/Resp(Y)",
          "432:   uM33NULL [33] NULL,",
          "434:   -- CRUISE CLIMB TO [level]",
          "435:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "436:   uM34Level [34] Level,",
          "438:   -- CRUISE CLIMB ABOVE [level]",
          "439:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "440:   uM35Level [35] Level,",
          "442:   -- EXPEDITE CLIMB TO [level]",
          "443:   -- Urg(U)/Alr(M)/Resp(W/U)",
          "444:   uM36Level [36] Level,",
          "446:   -- EXPEDITE DESCENT TO [level]",
          "447:   -- Urg(U)/Alr(M)/Resp(W/U)",
          "448:   uM37Level [37] Level,",
          "450:   -- IMMEDIATELY CLIMB TO [level]",
          "451:   -- Urg(D)/Alr(H)/Resp(W/U)",
          "452:   uM38Level [38] Level,",
          "454:   -- IMMEDIATELY DESCEND TO [level]",
          "455:   -- Urg(D)/Alr(H)/Resp(W/U)",
          "456:   uM39Level [39] Level,",
          "458:   -- Reserved",
          "459:   -- Urg(L)/Alr(L)/Resp(Y)",
          "460:   uM40NULL [40] NULL,",
          "462:   -- Reserved Urg(L)/Alr(L)/Resp(Y)",
          "463:   uM41NULL [41] NULL,",
          "465:   -- EXPECT TO CROSS [position] AT [level]",
          "466:   -- Urg(L)/Alr(L)/Resp(R)",
          "467:   uM42PositionLevel [42] PositionLevel,",
          "469:   -- EXPECT TO CROSS [position] AT OR ABOVE [level]",
          "470:   -- Urg(L)/Alr(L)/Resp(R)",
          "471:   uM43PositionLevel [43] PositionLevel,",
          "473:   -- EXPECT TO CROSS [position] AT OR BELOW [level]",
          "474:   -- Urg(L)/Alr(L)/Resp(R)",
          "475:   uM44PositionLevel [44] PositionLevel,",
          "477:   -- EXPECT TO CROSS [position] AT AND MAINTAIN [level]",
          "478:   -- Urg(L)/Alr(L)/Resp(R)",
          "479:   uM45PositionLevel [45] PositionLevel,",
          "481:   -- CROSS [position] AT [level]",
          "482:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "483:   uM46PositionLevel [46] PositionLevel,",
          "485:   -- CROSS [position] AT OR ABOVE [level]",
          "486:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "487:   uM47PositionLevel [47] PositionLevel,",
          "489:   -- CROSS [position] AT OR BELOW [level]",
          "490:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "491:   uM48PositionLevel [48] PositionLevel,",
          "493:   -- CROSS [position] AT AND MAINTAIN [level]",
          "494:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "495:   uM49PositionLevel [49] PositionLevel,",
          "497:   -- CROSS [position] BETWEEN [level] AND [level]",
          "498:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "499:   uM50PositionLevelLevel [50] PositionLevelLevel,",
          "501:   -- CROSS [position] AT [time]",
          "502:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "503:   uM51PositionTime [51] PositionTime,",
          "505:   -- CROSS [position] AT OR BEFORE [time]",
          "506:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "507:   uM52PositionTime [52] PositionTime,",
          "509:   -- CROSS [position] AT OR AFTER [time]",
          "510:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "511:   uM53PositionTime [53] PositionTime,",
          "513:   -- CROSS [position] BETWEEN [time] AND [time]",
          "514:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "515:   uM54PositionTimeTime [54] PositionTimeTime,",
          "517:   -- CROSS [position] AT [speed]",
          "518:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "519:   uM55PositionSpeed [55] PositionSpeed,",
          "521:   -- CROSS [position] AT OR LESS THAN [speed]",
          "522:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "523:   uM56PositionSpeed [56] PositionSpeed,",
          "525:   -- CROSS [position] AT OR GREATER THAN [speed]",
          "526:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "527:   uM57PositionSpeed [57] PositionSpeed,",
          "529:   -- CROSS [position] AT [time] AT [level]",
          "530:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "531:   uM58PositionTimeLevel [58] PositionTimeLevel,",
          "533:   -- CROSS [position] AT OR BEFORE [time] AT [level]",
          "534:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "535:   uM59PositionTimeLevel [59] PositionTimeLevel,",
          "537:   -- CROSS [position] AT OR AFTER [time] AT [level]",
          "538:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "539:   uM60PositionTimeLevel [60] PositionTimeLevel,",
          "541:   -- CROSS [position] AT AND MAINTAIN [level] AT [speed]",
          "542:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "543:   uM61PositionLevelSpeed [61] PositionLevelSpeed,",
          "545:   -- AT [time] CROSS [position] AT AND MAINTAIN [level]",
          "546:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "547:   uM62TimePositionLevel [62] TimePositionLevel,",
          "549:   -- AT [time] CROSS [position] AT AND MAINTAIN [level] AT [speed]",
          "550:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "551:   uM63TimePositionLevelSpeed [63] TimePositionLevelSpeed,",
          "553:   -- OFFSET [specifiedDistance] [direction] OF ROUTE",
          "554:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "555:   uM64DistanceSpecifiedDirection [64] DistanceSpecifiedDirection,",
          "557:   -- AT [position] OFFSET [specifiedDistance] [direction] OF ROUTE",
          "558:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "559:   uM65PositionDistanceSpecifiedDirection[65] PositionDistanceSpecifiedDirection,",
          "561:   -- AT [time] OFFSET [specifiedDistance] [direction] OF ROUTE",
          "562:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "563:   uM66TimeDistanceSpecifiedDirection [66] TimeDistanceSpecifiedDirection,",
          "565:   -- PROCEED BACK ON ROUTE",
          "566:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "567:   uM67NULL [67] NULL,",
          "569:   -- REJOIN ROUTE BY [position]",
          "570:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "571:   uM68Position [68] Position,",
          "573:   -- REJOIN ROUTE BY [time]",
          "574:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "575:   uM69Time [69] Time,",
          "577:   -- EXPECT BACK ON ROUTE BY [position]",
          "578:   -- Urg(L)/Alr(L)/Resp(R)",
          "579:   uM70Position [70] Position,",
          "581:   -- EXPECT BACK ON ROUTE BY [time]",
          "582:   -- Urg(L)/Alr(L)/Resp(R)",
          "583:   uM71Time [71] Time,",
          "585:   -- RESUME OWN NAVIGATION",
          "586:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "587:   uM72NULL [72] NULL,",
          "589:   -- [DepartureClearance]",
          "590:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "591:   uM73DepartureClearance [73] DepartureClearance,",
          "593:   -- PROCEED DIRECT TO [position]",
          "594:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "595:   uM74Position [74] Position,",
          "597:   -- WHEN ABLE PROCEED DIRECT TO [position]",
          "598:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "599:   uM75Position [75] Position,",
          "601:   -- AT [time] PROCEED DIRECT TO [position]",
          "602:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "603:   uM76TimePosition [76] TimePosition,",
          "605:   -- AT [position] PROCEED DIRECT TO [position]",
          "606:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "607:   uM77PositionPosition [77] PositionPosition,",
          "609:   -- AT [level] PROCEED DIRECT TO [position]",
          "610:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "611:   uM78LevelPosition [78] LevelPosition,",
          "613:   -- CLEARED TO [position] VIA [routeClearance]",
          "614:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "615:   uM79PositionRouteClearance [79] PositionRouteClearanceIndex,",
          "617:   -- CLEARED [routeClearance]",
          "618:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "619:   uM80RouteClearance [80] RouteClearanceIndex,",
          "621:   -- CLEARED [procedureName]",
          "622:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "623:   uM81ProcedureName [81] ProcedureName,",
          "625:   -- CLEARED TO DEVIATE UP TO [specifiedDistance] [direction] OF ROUTE",
          "626:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "627:   uM82DistanceSpecifiedDirection [82] DistanceSpecifiedDirection,",
          "629:   -- AT [position] CLEARED [routeClearance]",
          "630:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "631:   uM83PositionRouteClearance [83] PositionRouteClearanceIndex,",
          "633:   -- AT [position] CLEARED [procedureName]",
          "634:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "635:   uM84PositionProcedureName [84] PositionProcedureName,",
          "637:   -- EXPECT [routeClearance]",
          "638:   -- Urg(L)/Alr(L)/Resp(R)",
          "639:   uM85RouteClearance [85] RouteClearanceIndex,",
          "641:   -- AT [position] EXPECT [routeClearance]",
          "642:   -- Urg(L)/Alr(L)/Resp(R)",
          "643:   uM86PositionRouteClearance [86] PositionRouteClearanceIndex,",
          "645:   -- EXPECT DIRECT TO [position]",
          "646:   -- Urg(L)/Alr(L)/Resp(R)",
          "647:   uM87Position [87] Position,",
          "649:   -- AT [position] EXPECT DIRECT TO [position]",
          "650:   -- Urg(L)/Alr(L)/Resp(R)",
          "651:   uM88PositionPosition [88]PositionPosition,",
          "653:   -- AT [time] EXPECT DIRECT TO [position]",
          "654:   -- Urg(L)/Alr(L)/Resp(R)",
          "655:   uM89TimePosition [89] TimePosition,",
          "658:   -- AT [level] EXPECT DIRECT TO [position]",
          "659:   -- Urg(L)/Alr(L)/Resp(R)",
          "660:   uM90LevelPosition [90] LevelPosition,",
          "662:   -- HOLD AT [position] MAINTAIN [level] INBOUND TRACK [degrees][direction] TURNS [legtype]",
          "663:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "664:   uM91HoldClearance [91] HoldClearance,",
          "666:   -- HOLD AT [position] AS PUBLISHED MAINTAIN [level]",
          "667:   --  Urg(N)/Alr(M)/Resp(W/U)",
          "668:   uM92PositionLevel [92] PositionLevel,",
          "670:   -- EXPECT FURTHER CLEARANCE AT [time]",
          "671:   -- Urg(L)/Alr(L)/Resp(R)",
          "672:   uM93Time [93] Time,",
          "674:   -- TURN [direction] HEADING [degrees]",
          "675:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "676:   uM94DirectionDegrees [94] DirectionDegrees,",
          "678:   -- TURN [direction] GROUND TRACK [degrees]",
          "679:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "680:   uM95DirectionDegrees [95] DirectionDegrees,",
          "682:   -- CONTINUE PRESENT HEADING",
          "683:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "684:   uM96NULL [96] NULL,",
          "686:   -- AT [position] FLY HEADING [degrees]",
          "687:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "688:   uM97PositionDegrees [97] PositionDegrees,",
          "690:   -- IMMEDIATELY TURN [direction] HEADING [degrees]",
          "691:   -- Urg(D)/Alr(H)/Resp(W/U)",
          "692:   uM98DirectionDegrees [98] DirectionDegrees,",
          "694:   -- EXPECT [procedureName]",
          "695:   -- Urg(L)/Alr(L)/Resp(R)",
          "696:   uM99ProcedureName [99] ProcedureName,",
          "698:   -- AT [time] EXPECT [speed]",
          "699:   -- Urg(L)/Alr(L)/Resp(R)",
          "700:   uM100TimeSpeed [100] TimeSpeed,",
          "702:   -- AT [position] EXPECT [speed]",
          "703:   -- Urg(L)/Alr(L)/Resp(R)",
          "704:   uM101PositionSpeed [101] PositionSpeed,",
          "706:   -- AT [level] EXPECT [speed]",
          "707:   -- Urg(L)/Alr(L)/Resp(R)",
          "708:   uM102LevelSpeed [102] LevelSpeed,",
          "710:   -- AT [time] EXPECT [speed] TO [speed]",
          "711:   -- Urg(L)/Alr(L)/Resp(R)",
          "712:   uM103TimeSpeedSpeed [103] TimeSpeedSpeed,",
          "714:   -- AT [position] EXPECT [speed] TO [speed]",
          "715:   -- Urg(L)/Alr(L)/Resp(R)",
          "716:   uM104PositionSpeedSpeed [104] PositionSpeedSpeed,",
          "718:   -- AT [level] EXPECT [speed] TO [speed]",
          "719:   -- Urg(L)/Alr(L)/Resp(R)",
          "720:   uM105LevelSpeedSpeed [105] LevelSpeedSpeed,",
          "722:   -- MAINTAIN [speed]",
          "723:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "724:   uM106Speed [106] Speed,",
          "726:   -- MAINTAIN PRESENT SPEED",
          "727:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "728:   uM107NULL [107] NULL,",
          "730:   -- MAINTAIN [speed] OR GREATER",
          "731:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "732:   uM108Speed [108] Speed,",
          "734:   -- MAINTAIN [speed] OR LESS",
          "735:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "736:   uM109Speed [109] Speed,",
          "738:   -- MAINTAIN [speed] TO [speed]",
          "739:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "740:   uM110SpeedSpeed [110] SpeedSpeed,",
          "742:   -- INCREASE SPEED TO [speed]",
          "743:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "744:   uM111Speed [111] Speed,",
          "746:   -- INCREASE SPEED TO [speed] OR GREATER",
          "747:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "748:   uM112Speed [112] Speed,",
          "750:   -- REDUCE SPEED TO [speed]",
          "751:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "752:   uM113Speed [113] Speed,",
          "754:   -- REDUCE SPEED TO [speed] OR LESS",
          "755:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "756:   uM114Speed [114] Speed,",
          "758:   -- DO NOT EXCEED [speed]",
          "759:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "760:   uM115Speed [115] Speed,",
          "762:   -- RESUME NORMAL SPEED",
          "763:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "764:   uM116NULL [116] NULL,",
          "766:   -- CONTACT [unitname] [frequency]",
          "767:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "768:   uM117UnitNameFrequency [117] UnitNameFrequency,",
          "770:   -- AT [position] CONTACT [unitname] [frequency]",
          "771:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "772:   uM118PositionUnitNameFrequency [118] PositionUnitNameFrequency,",
          "774:   -- AT [time] CONTACT [unitname] [frequency]",
          "775:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "776:   uM119TimeUnitNameFrequency [119] TimeUnitNameFrequency,",
          "778:   -- MONITOR [unitname] [frequency]",
          "779:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "780:   uM120UnitNameFrequency [120] UnitNameFrequency,",
          "782:   -- AT [position] MONITOR [unitname] [frequency]",
          "783:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "784:   uM121PositionUnitNameFrequency [121] PositionUnitNameFrequency,",
          "786:   -- AT [time] MONITOR [unitname] [frequency]",
          "787:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "788:   uM122TimeUnitNameFrequency [122] TimeUnitNameFrequency,",
          "790:   -- SQUAWK [code]",
          "791:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "792:   uM123Code [123] Code,",
          "794:   -- STOP SQUAWK",
          "795:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "796:   uM124NULL [124] NULL,",
          "798:   -- SQUAWK MODE CHARLIE",
          "799:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "802:   -- STOP SQUAWK MODE CHARLIE",
          "803:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "804:   uM126NULL [126] NULL,",
          "806:   -- REPORT BACK ON ROUTE",
          "807:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "808:   uM127NULL [127] NULL,",
          "810:   -- REPORT LEAVING [level]",
          "811:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "812:   uM128Level [128] Level,",
          "814:   -- REPORT MAINTAINING [level]",
          "815:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "816:   uM129Level [129] Level,",
          "818:   -- REPORT PASSING [position]",
          "819:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "820:   uM130Position [130] Position,",
          "822:   -- REPORT REMAINING FUEL AND PERSONS ON BOARD",
          "823:   -- Urg(U)/Alr(M)/Resp(Y)",
          "824:   uM131NULL [131] NULL,",
          "826:   -- REPORT POSITION",
          "827:   -- Urg(N)/Alr(M)/Resp(Y)",
          "828:   uM132NULL [132] NULL,",
          "830:   -- REPORT PRESENT LEVEL",
          "831:   -- Urg(N)/Alr(M)/Resp(Y)",
          "832:   uM133NULL [133] NULL,",
          "834:   -- REPORT [speedtype] [speedtype] [speedtype]SPEED",
          "835:   -- Urg(N)/Alr(M)/Resp(Y)",
          "836:   uM134SpeedTypeSpeedTypeSpeedType [134] SpeedTypeSpeedTypeSpeedType,",
          "838:   -- CONFIRM ASSIGNED LEVEL",
          "839:   -- Urg(N)/Alr(L)/Resp(Y)",
          "840:   uM135NULL [135] NULL,",
          "842:   -- CONFIRM ASSIGNED SPEED",
          "843:   -- Urg(N)/Alr(L)/Resp(Y)",
          "844:   uM136NULL [136] NULL,",
          "846:   -- CONFIRM ASSIGNED ROUTE",
          "847:   -- Urg(N)/Alr(L)/Resp(Y)",
          "848:   uM137NULL [137] NULL,",
          "850:  -- CONFIRM TIME OVER REPORTED WAYPOINT",
          "851:  -- Urg(N)/Alr(L)/Resp(Y)",
          "852:   uM138NULL [138] NULL,",
          "854:   -- CONFIRM REPORTED WAYPOINT",
          "855:   -- Urg(N)/Alr(L)/Resp(Y)",
          "856:   uM139NULL [139] NULL,",
          "858:   -- CONFIRM NEXT WAYPOINT",
          "859:   -- Urg(N)/Alr(L)/Resp(Y)",
          "860:   uM140NULL [140] NULL,",
          "862:   -- CONFIRM NEXT WAYPOINT ETA",
          "863:   -- Urg(N)/Alr(L)/Resp(Y)",
          "864:   uM141NULL [141] NULL,",
          "866:   -- CONFIRM ENSUING WAYPOINT",
          "867:   -- Urg(N)/Alr(L)/Resp(Y)",
          "868:   uM142NULL [142] NULL,",
          "870:   -- CONFIRM REQUEST",
          "871:   -- Urg(N)/Alr(L)/Resp(Y)",
          "872:   uM143NULL [143] NULL,",
          "874:   -- CONFIRM SQUAWK",
          "875:   -- Urg(N)/Alr(L)/Resp(Y)",
          "876:   uM144NULL [144] NULL,",
          "878:   -- REPORT HEADING",
          "879:   -- Urg(N)/Alr(M)/Resp(Y)",
          "880:   uM145NULL [145] NULL,",
          "882:   -- REPORT GROUND TRACK",
          "883:   -- Urg(N)/Alr(M)/Resp(Y)",
          "884:   uM146NULL [146] NULL,",
          "886:   -- REQUEST POSITION REPORT",
          "887:   -- Urg(N)/Alr(M)/Resp(Y )",
          "888:   uM147NULL [147] NULL,",
          "890:   -- WHEN CAN YOU ACCEPT [level]",
          "891:   -- Urg(N)/Alr(L)/Resp(Y)",
          "892:   uM148Level [148] Level,",
          "894:   -- CAN YOU ACCEPT [level] AT [position]",
          "895:   -- Urg(N)/Alr(L)/Resp(A/N)",
          "896:   uM149LevelPosition [149] LevelPosition,",
          "898:   -- CAN YOU ACCEPT [level] AT [time]",
          "899:   -- Urg(N)/Alr(L)/Resp(A/N)",
          "900:   uM150LevelTime [150] LevelTime,",
          "902:   -- WHEN CAN YOU ACCEPT [speed]",
          "903:   -- Urg(N)/Alr(L)/Resp(Y)",
          "904:   uM151Speed [151] Speed,",
          "906:   -- WHEN CAN YOU ACCEPT [specifiedDistance] [direction] OFFSET",
          "907:   -- Urg(N)/Alr(L)/Resp(Y)",
          "908:   uM152DistanceSpecifiedDirection [152] DistanceSpecifiedDirection,",
          "910:   -- ALTIMETER [altimeter]",
          "911:   -- Urg(N)/Alr(L)/Resp(R)",
          "912:   uM153Altimeter [153] Altimeter,",
          "914:   -- RADAR SERVICE TERMINATED",
          "915:   -- Urg(N)/Alr(L)/Resp(R)",
          "916:   uM154NULL [154] NULL,",
          "918:   -- RADAR CONTACT [position]",
          "919:   -- Urg(N)/Alr(M)/Resp(R)",
          "920:   uM155Position [155] Position,",
          "922:   -- RADAR CONTACT LOST",
          "923:   -- Urg(N)/Alr(M)/Resp(R)",
          "924:   uM156NULL [156] NULL,",
          "926:   -- CHECK STUCK MICROPHONE [frequency]",
          "927:   -- Urg(U)/Alr(M)/Resp(N)",
          "928:   uM157Frequency [157] Frequency,",
          "930:   -- ATIS [atiscode]",
          "931:   -- Urg(N)/Alr(L)/Resp(R)",
          "932:   uM158AtisCode [158] ATISCode,",
          "934:   -- ERROR [errorInformation]",
          "935:   -- Urg(U)/Alr(M)/Resp(N)",
          "936:   uM159ErrorInformation [159] ErrorInformation,",
          "938:   -- NEXT DATA AUTHORITY [facility]",
          "939:   -- Urg(L)/Alr(N)/Resp(N)",
          "940:   uM160Facility [160] Facility,",
          "942:   -- END SERVICE",
          "943:   -- Urg(L)/Alr(N)/Resp(N)",
          "944:   uM161NULL [161] NULL,",
          "946:   -- SERVICE UNAVAILABLE",
          "947:   -- Urg(L)/Alr(L)/Resp(N )",
          "948:   uM162NULL [162] NULL,",
          "950:   -- [facilitydesignation]",
          "951:   -- Urg(L)/Alr(N)/Resp(N)",
          "952:   uM163FacilityDesignation [163] FacilityDesignation,",
          "954:   -- WHEN READY",
          "955:   -- Urg(L)/Alr(N)/Resp(N)",
          "956:   uM164NULL [164] NULL,",
          "958:   -- THEN",
          "959:   -- Urg(L)/Alr(N)/Resp(N)",
          "960:   uM165NULL [165] NULL,",
          "962:   -- DUE TO [traffictype]TRAFFIC",
          "963:   -- Urg(L)/Alr(N)/Resp(N)",
          "964:   uM166TrafficType [166] TrafficType,",
          "966:   -- DUE TO AIRSPACE RESTRICTION",
          "967:   -- Urg(L)/Alr(N)/Resp(N)",
          "968:   uM167NULL [167] NULL,",
          "970:   -- DISREGARD",
          "971:   -- Urg(U)/Alr(M)/Resp(R)",
          "972:   uM168NULL [168] NULL,",
          "974:   -- [freetext]",
          "975:   -- Urg(N)/Alr(L)/Resp(R)",
          "976:   uM169FreeText [169] FreeText,",
          "978:   -- [freetext]",
          "979:   -- Urg(D)/Alr(H)/Resp(R)",
          "980:   uM170FreeText [170] FreeText,",
          "982:   -- CLIMB AT [verticalRate] MINIMUM",
          "983:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "984:   uM171VerticalRate [171] VerticalRate,",
          "986:   -- CLIMB AT [verticalRate] MAXIMUM",
          "987:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "988:   uM172VerticalRate [172] VerticalRate,",
          "990:   -- DESCEND AT [verticalRate] MINIMUM",
          "991:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "992:   uM173VerticalRate [173] VerticalRate,",
          "994:   -- DESCEND AT [verticalRate] MAXIMUM",
          "995:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "996:   uM174VerticalRate [174] VerticalRate,",
          "998:   -- REPORT REACHING [level]",
          "999:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "1000:   uM175Level [175] Level,",
          "1002:   -- MAINTAIN OWN SEPARATION AND VMC",
          "1003:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1004:   uM176NULL [176] NULL,",
          "1006:   -- AT PILOTS DISCRETION",
          "1007:   -- Urg(L)/Alr(L)/Resp(N)",
          "1008:   uM177NULL [177] NULL,",
          "1010:   -- Reserved",
          "1011:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1012:   uM178NULL [178] NULL,",
          "1014:   -- SQUAWK IDENT",
          "1015:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1016:   uM179NULL [179] NULL,",
          "1018:   -- REPORT REACHING BLOCK [level] TO [level]",
          "1019:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "1020:   uM180LevelLevel [180] LevelLevel,",
          "1022:   -- REPORT DISTANCE [tofrom] [position]",
          "1023:   -- Urg(N)/Alr(M)/Resp(Y)",
          "1024:   uM181ToFromPosition [181] ToFromPosition,",
          "1026:   -- CONFIRM ATIS CODE",
          "1027:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1028:   uM182NULL [182] NULL,",
          "1030:   -- [freetext]",
          "1031:   -- Urg(N)/Alr(M)/Resp(N)",
          "1032:   uM183FreeText [183] FreeText,",
          "1034:   -- AT [time] REPORT DISTANCE [tofrom] [position]",
          "1035:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1036:   uM184TimeToFromPosition [184] TimeToFromPosition,",
          "1038:   -- AFTER PASSING [position] CLIMB TO [level]",
          "1039:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1040:   uM185PositionLevel [185] PositionLevel,",
          "1042:   -- AFTER PASSING [position] DESCEND TO [level]",
          "1043:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1044:   uM186PositionLevel [186] PositionLevel,",
          "1046:   -- [freetext]",
          "1047:   -- Urg(L)/Alr(N)/Resp(N)",
          "1048:   uM187FreeText [187] FreeText,",
          "1050:   -- AFTER PASSING [position] MAINTAIN [speed]",
          "1051:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1052:   uM188PositionSpeed [188] PositionSpeed,",
          "1054:   -- ADJUST SPEED TO [speed]",
          "1055:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1056:   uM189Speed [189] Speed,",
          "1058:   -- FLY HEADING [degrees]",
          "1059:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1060:   uM190Degrees [190] Degrees,",
          "1062:   -- ALL ATS TERMINATED",
          "1063:   -- Urg(N)/Alr(M)/Resp(R)",
          "1064:   uM191NULL [191] NULL,",
          "1066:   -- REACH [level] BY [time]",
          "1067:  -- Urg(N)/Alr(M)/Resp(W/U)",
          "1068:   uM192LevelTime [192] LevelTime,",
          "1070:   -- IDENTIFICATION LOST",
          "1071:   -- Urg(N)/Alr(M)/Resp(R)",
          "1072:   uM193NULL [193] NULL,",
          "1074:   -- [freetext]",
          "1075:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1076:   uM194FreeText [194] FreeText,",
          "1078:   -- [freetext]",
          "1079:   -- Urg(L)/Alr(L)/Resp(R)",
          "1080:   uM195FreeText [195] FreeText,",
          "1082:   -- [freetext]",
          "1083:   -- Urg(N)/Alr(M)/Resp",
          "1084:   uM196FreeText [196] FreeText,",
          "1086:   -- [freetext]",
          "1087:   -- Urg(U)/Alr(M)/Resp(W/U)",
          "1088:   uM197FreeText [197] FreeText,",
          "1090:   -- [freetext]",
          "1091:   -- Urg(D)/Alr(H)/Resp(W/U)",
          "1092:   uM198FreeText [198] FreeText,",
          "1094:   -- [freetext]",
          "1095:   -- Urg(N)/Alr(L)/Resp(N)",
          "1096:   uM199FreeText [199] FreeText,",
          "1098:   -- REPORT REACHING",
          "1099:   -- Urg(N)/Alr(L)/Resp(W/U)",
          "1100:   uM200NULL [200] NULL,",
          "1102:   -- Not Used",
          "1103:   -- Urg(L)/Alr(L)/Resp(N)",
          "1104:   uM201NULL [201] NULL,",
          "1106:   -- Not Used",
          "1107:   -- Urg(L)/Alr(L)/Resp(N)",
          "1108:   uM202NULL [202] NULL,",
          "1110:   -- [freetext]",
          "1111:   -- Urg(N)/Alr(M)/Resp(R)",
          "1112:   uM203FreeText [203] FreeText,",
          "1114:   -- [freetext]",
          "1115:   -- Urg(N)/Alr(M)/Resp(Y)",
          "1116:   uM204FreeText [204] FreeText,",
          "1118:   -- [freetext]",
          "1119:   -- Urg(N)/Alr(M)/Resp(A/N)",
          "1120:   uM205FreeText [205] FreeText,",
          "1122:   -- [freetext]",
          "1123:   -- Urg(L)/Alr(N)/Resp(Y)",
          "1124:   uM206FreeText [206] FreeText,",
          "1126:   -- [freetext]",
          "1127:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1128:   uM207FreeText [207] FreeText,",
          "1130:   -- [freetext]",
          "1131:   -- Urg(L)/Alr(L)/Resp(N)",
          "1132:   uM208FreeText [208] FreeText,",
          "1134:   -- REACH [level] BY [position]",
          "1135:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1136:   uM209LevelPosition [209] LevelPosition,",
          "1138:   -- IDENTIFIED [position]",
          "1139:   -- Urg(N)/Alr(M)/Resp(R)",
          "1140:   uM210Position [210] Position,",
          "1142:   -- REQUEST FORWARDED",
          "1143:   -- Urg(N)/Alr(L)/Resp(N)",
          "1144:   uM211NULL [211] NULL,",
          "1146:   -- [facilitydesignation] ATIS [atiscode] CURRENT",
          "1147:   -- Urg(N)/Alr(L)/Resp(R)",
          "1148:   uM212FacilityDesignationATISCode [212] FacilityDesignationATISCode,",
          "1150:   -- [facilitydesignation] ALTIMETER [altimeter]",
          "1151:   -- Urg(N)/Alr(L)/Resp(R)",
          "1152:   uM213FacilityDesignationAltimeter [213] FacilityDesignationAltimeter,",
          "1154:   -- RVR RUNWAY [runway] [rvr]",
          "1155:   -- Urg(N)/Alr(M)/Resp(R)",
          "1156:   uM214RunwayRVR [214] RunwayRVR,",
          "1158:   -- TURN [direction][degrees]",
          "1159:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1160:   uM215DirectionDegrees [215] DirectionDegrees,",
          "1162:   -- REQUEST FLIGHT PLAN",
          "1163:   -- Urg(N)/Alr(M)/Resp(Y)",
          "1164:   uM216NULL [216] NULL,",
          "1166:   -- REPORT ARRIVAL",
          "1167:   -- Urg(N)/Alr(M)/Resp(Y)",
          "1168:   uM217NULL [217] NULL,",
          "1170:   -- REQUEST ALREADY RECEIVED",
          "1171:   -- Urg(L)/Alr(N)/Resp(N)",
          "1172:   uM218NULL [218] NULL,",
          "1174:   -- STOP CLIMB AT [level]",
          "1175:   -- Urg(U)/Alr(M)/Resp(W/U)",
          "1176:   uM219Level [219] Level,",
          "1178:   -- STOP DESCENT AT [level]",
          "1179:   -- Urg(U)/Alr(M)/Resp(W/U)",
          "1180:   uM220Level [220] Level,",
          "1182:   -- STOP TURN HEADING [degrees]",
          "1183:   -- Urg(U)/Alr(M)/Resp(W/U)",
          "1184:   uM221Degrees [221] Degrees,",
          "1186:   -- NO SPEED RESTRICTION",
          "1187:   -- Urg(L)/Alr(L)/Resp(R)",
          "1188:   uM222NULL [222] NULL,",
          "1190:   -- REDUCE TO MINIMUM APPROACH SPEED",
          "1191:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1192:   uM223NULL [223] NULL,",
          "1194:  -- NO DELAY EXPECTED",
          "1195:  -- Urg(N)/Alr(L)/Resp(R)",
          "1196:   uM224NULL [224] NULL,",
          "1198:   -- DELAY NOT DETERMINED",
          "1199:   -- Urg(N)/Alr(L)/Resp(R)",
          "1200:   uM225NULL [225] NULL,",
          "1202:   -- EXPECTED APPROACH TIME [time]",
          "1203:   -- Urg(N)/Alr(L)/Resp(R)",
          "1204:   uM226Time [226] Time,",
          "1206:   -- LOGICAL ACKNOWLEDGMENT",
          "1207:   -- Urg(N)/Alr(M)/Resp(N)",
          "1208:   uM227NULL [227] NULL,",
          "1210:   -- REPORT ETA [position]",
          "1211:   --Urg(L)/Alr(L)/Resp(Y)",
          "1212:   uM228Position [228] Position,",
          "1214:   -- REPORT ALTERNATE AERODROME",
          "1215:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1216:   uM229NULL [229] NULL,",
          "1218:   -- IMMEDIATELY",
          "1219:   -- Urg(D)/Alr(H)/Resp(N)",
          "1220:   uM230NULL [230] NULL,",
          "1222:   -- STATE PREFERRED LEVEL",
          "1223:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1224:   uM231NULL [231] NULL,",
          "1226:   -- STATE TOP OF DESCENT",
          "1227:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1228:   uM232NULL [232] NULL,",
          "1230:   -- USE OF LOGICAL ACKNOWLEDGMENT PROHIBITED",
          "1231:   -- Urg(N)/Alr(M)/Resp(N)",
          "1232:   uM233NULL [233] NULL,",
          "1234:   -- FLIGHT PLAN NOT HELD",
          "1235:   -- Urg(L)/Alr(L)/Resp(N)",
          "1236:   uM234NULL [234] NULL,",
          "1238:   -- ROGER 7500",
          "1239:   -- Urg(U)/Alr(H)/Resp(N)",
          "1240:   uM235NULL [235] NULL,",
          "1242:   -- LEAVE CONTROLLED AIRSPACE",
          "1243:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1244:   uM236NULL [236] NULL,",
          "1245:   ...,",
          "1247:   -- REQUEST AGAIN WITH NEXT UNIT",
          "1248:   -- Urg(N)/Alr(L)/Resp(N)",
          "1249:   uM237NULL [237]NULL",
          "",
          "[Added Lines]",
          "296:     --  UNABLE",
          "297:     -- Urg(N)/Alr(M)/Resp(N)",
          "298:     uM0NULL [0] NULL,",
          "300:     -- STANDBY",
          "301:     -- Urg(N)/Alr(L)/Resp(N)",
          "302:     uM1NULL [1] NULL,",
          "304:     -- REQUEST DEFERRED",
          "305:     -- Urg(N)/Alr(L)/Resp(N)",
          "306:     uM2NULL [2] NULL,",
          "308:     -- ROGER",
          "309:     -- Urg(N)/Alr(L)/Resp(N)",
          "310:     uM3NULL [3] NULL,",
          "312:     -- AFFIRM",
          "313:     -- Urg(N)/Alr(L)/Resp(N)",
          "314:     uM4NULL [4] NULL,",
          "316:     -- NEGATIVE Urg(N)/Alr(L)/Resp(N)",
          "317:     uM5NULL [5] NULL,",
          "319:     -- EXPECT [level] Urg(L)/Alr(L)/Resp(R)",
          "320:     uM6Level [6] Level,",
          "322:     -- EXPECT CLIMB AT [time]",
          "323:     -- Urg(L)/Alr(L)/Resp(R)",
          "324:     uM7Time [7] Time,",
          "326:     -- EXPECT CLIMB AT [position]",
          "327:     -- Urg(L)/Alr(L)/Resp(R)",
          "328:     uM8Position [8] Position,",
          "330:     -- EXPECT DESCENT AT [time]",
          "331:     -- Urg(L)/Alr(L)/Resp(R)",
          "332:     uM9Time [9] Time,",
          "334:     -- EXPECT DESCENT AT [position]",
          "335:     -- Urg(L)/Alr(L)/Resp(R)",
          "336:     uM10Position [10] Position,",
          "338:     -- EXPECT CRUISE CLIMB AT [time]",
          "339:     -- Urg(L)/Alr(L)/Resp(R)",
          "340:     uM11Time [11] Time,",
          "342:     -- EXPECT CRUISE CLIMB AT [position]",
          "343:     -- Urg(L)/Alr(L)/Resp(R)",
          "344:     uM12Position [12] Position,",
          "346:     -- AT [time] EXPECT CLIMB TO [level]",
          "347:     -- Urg(L)/Alr(L)/Resp(R)",
          "348:     uM13TimeLevel [13] TimeLevel,",
          "350:   -- AT [position] EXPECT CLIMB TO [level]",
          "351:   -- Urg(L)/Alr(L)/Resp(R)",
          "352:     uM14PositionLevel [14] PositionLevel,",
          "354:     -- AT [time] EXPECT DESCENT TO [level]",
          "355:     -- Urg(L)/Alr(L)/Resp(R)",
          "356:     uM15TimeLevel [15] TimeLevel,",
          "358:   -- AT [position] EXPECT DESCENT TO [level]",
          "359:   -- Urg(L)/Alr(L)/Resp(R)",
          "360:     uM16PositionLevel [16] PositionLevel,",
          "362:     -- AT [time] EXPECT CRUISE CLIMB TO [level]",
          "363:     -- Urg(L)/Alr(L)/Resp(R)",
          "364:     uM17TimeLevel [17] TimeLevel,",
          "366:     -- AT [position] EXPECT CRUISE CLIMB TO [level]",
          "367:     -- Urg(L)/Alr(L)/Resp(R)",
          "368:     uM18PositionLevel [18] PositionLevel,",
          "370:     -- MAINTAIN [level]",
          "371:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "372:     uM19Level [19] Level,",
          "374:     -- CLIMB TO [level]",
          "375:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "376:     uM20Level [20] Level,",
          "378:     -- AT [time] CLIMB TO [level]",
          "379:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "380:     uM21TimeLevel [21] TimeLevel,",
          "382:     -- AT [position] CLIMB TO [level]",
          "383:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "384:     uM22PositionLevel [22] PositionLevel,",
          "386:     -- DESCEND TO [level]",
          "387:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "388:     uM23Level [23] Level,",
          "390:     -- AT [time] DESCEND TO [level]",
          "391:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "392:     uM24TimeLevel [24] TimeLevel,",
          "394:     -- AT [position] DESCEND TO [level]",
          "395:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "396:     uM25PositionLevel [25] PositionLevel,",
          "398:     -- CLIMB TO REACH [level] BY [time]",
          "399:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "400:     uM26LevelTime [26] LevelTime,",
          "402:     -- CLIMB TO REACH [level] BY [position]",
          "403:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "404:     uM27LevelPosition [27] LevelPosition,",
          "406:     -- DESCEND TO REACH [level] BY [time]",
          "407:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "408:     uM28LevelTime [28] LevelTime,",
          "410:     -- DESCEND TO REACH [level] BY [position]",
          "411:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "412:     uM29LevelPosition [29] LevelPosition,",
          "414:     -- MAINTAIN BLOCK [level] TO [level]",
          "415:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "416:     uM30LevelLevel  [30] LevelLevel,",
          "418:     -- CLIMB TO AND MAINTAIN BLOCK [level] TO [level]",
          "419:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "420:     uM31LevelLevel  [31] LevelLevel,",
          "422:     -- DESCEND TO AND MAINTAIN BLOCK [level] TO [level]",
          "423:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "424:     uM32LevelLevel [32] LevelLevel,",
          "426:     -- Reserved",
          "427:     -- Urg(L)/Alr(L)/Resp(Y)",
          "428:     uM33NULL [33] NULL,",
          "430:     -- CRUISE CLIMB TO [level]",
          "431:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "432:     uM34Level [34] Level,",
          "434:     -- CRUISE CLIMB ABOVE [level]",
          "435:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "436:     uM35Level [35] Level,",
          "438:     -- EXPEDITE CLIMB TO [level]",
          "439:     -- Urg(U)/Alr(M)/Resp(W/U)",
          "440:     uM36Level [36] Level,",
          "442:     -- EXPEDITE DESCENT TO [level]",
          "443:     -- Urg(U)/Alr(M)/Resp(W/U)",
          "444:     uM37Level [37] Level,",
          "446:     -- IMMEDIATELY CLIMB TO [level]",
          "447:     -- Urg(D)/Alr(H)/Resp(W/U)",
          "448:     uM38Level [38] Level,",
          "450:     -- IMMEDIATELY DESCEND TO [level]",
          "451:     -- Urg(D)/Alr(H)/Resp(W/U)",
          "452:     uM39Level [39] Level,",
          "454:     -- Reserved",
          "455:     -- Urg(L)/Alr(L)/Resp(Y)",
          "456:     uM40NULL [40] NULL,",
          "458:     -- Reserved Urg(L)/Alr(L)/Resp(Y)",
          "459:     uM41NULL [41] NULL,",
          "461:     -- EXPECT TO CROSS [position] AT [level]",
          "462:     -- Urg(L)/Alr(L)/Resp(R)",
          "463:     uM42PositionLevel [42] PositionLevel,",
          "465:     -- EXPECT TO CROSS [position] AT OR ABOVE [level]",
          "466:     -- Urg(L)/Alr(L)/Resp(R)",
          "467:     uM43PositionLevel [43] PositionLevel,",
          "469:     -- EXPECT TO CROSS [position] AT OR BELOW [level]",
          "470:     -- Urg(L)/Alr(L)/Resp(R)",
          "471:     uM44PositionLevel [44] PositionLevel,",
          "473:     -- EXPECT TO CROSS [position] AT AND MAINTAIN [level]",
          "474:     -- Urg(L)/Alr(L)/Resp(R)",
          "475:     uM45PositionLevel [45] PositionLevel,",
          "477:     -- CROSS [position] AT [level]",
          "478:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "479:     uM46PositionLevel [46] PositionLevel,",
          "481:     -- CROSS [position] AT OR ABOVE [level]",
          "482:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "483:     uM47PositionLevel [47] PositionLevel,",
          "485:     -- CROSS [position] AT OR BELOW [level]",
          "486:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "487:     uM48PositionLevel [48]  PositionLevel,",
          "489:     -- CROSS [position] AT AND MAINTAIN [level]",
          "490:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "491:     uM49PositionLevel [49] PositionLevel,",
          "493:     -- CROSS [position] BETWEEN [level] AND [level]",
          "494:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "495:     uM50PositionLevelLevel [50] PositionLevelLevel,",
          "497:     -- CROSS [position] AT [time]",
          "498:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "499:     uM51PositionTime [51] PositionTime,",
          "501:     -- CROSS [position] AT OR BEFORE [time]",
          "502:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "503:     uM52PositionTime [52] PositionTime,",
          "505:     -- CROSS [position] AT OR AFTER [time]",
          "506:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "507:     uM53PositionTime [53] PositionTime,",
          "509:     -- CROSS [position] BETWEEN [time] AND [time]",
          "510:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "511:     uM54PositionTimeTime [54] PositionTimeTime,",
          "513:     -- CROSS [position] AT [speed]",
          "514:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "515:     uM55PositionSpeed [55] PositionSpeed,",
          "517:     -- CROSS [position] AT OR LESS THAN [speed]",
          "518:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "519:     uM56PositionSpeed [56] PositionSpeed,",
          "521:     -- CROSS [position] AT OR GREATER THAN [speed]",
          "522:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "523:     uM57PositionSpeed [57] PositionSpeed,",
          "525:     -- CROSS [position] AT [time] AT [level]",
          "526:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "527:     uM58PositionTimeLevel [58] PositionTimeLevel,",
          "529:     -- CROSS [position] AT OR BEFORE [time] AT [level]",
          "530:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "531:     uM59PositionTimeLevel [59] PositionTimeLevel,",
          "533:     -- CROSS [position] AT OR AFTER [time] AT [level]",
          "534:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "535:     uM60PositionTimeLevel [60] PositionTimeLevel,",
          "537:     -- CROSS [position] AT AND MAINTAIN [level] AT [speed]",
          "538:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "539:     uM61PositionLevelSpeed [61] PositionLevelSpeed,",
          "541:     -- AT [time] CROSS [position] AT AND MAINTAIN [level]",
          "542:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "543:     uM62TimePositionLevel [62] TimePositionLevel,",
          "545:     -- AT [time] CROSS [position] AT AND MAINTAIN [level] AT [speed]",
          "546:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "547:     uM63TimePositionLevelSpeed [63] TimePositionLevelSpeed,",
          "549:     -- OFFSET [specifiedDistance] [direction] OF ROUTE",
          "550:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "551:     uM64DistanceSpecifiedDirection  [64] DistanceSpecifiedDirection,",
          "553:     -- AT [position] OFFSET [specifiedDistance] [direction] OF ROUTE",
          "554:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "555:     uM65PositionDistanceSpecifiedDirection[65] PositionDistanceSpecifiedDirection,",
          "557:     -- AT [time] OFFSET [specifiedDistance] [direction] OF ROUTE",
          "558:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "559:     uM66TimeDistanceSpecifiedDirection [66] TimeDistanceSpecifiedDirection,",
          "561:     -- PROCEED BACK ON ROUTE",
          "562:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "563:     uM67NULL  [67] NULL,",
          "565:     -- REJOIN ROUTE BY [position]",
          "566:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "567:     uM68Position  [68] Position,",
          "569:     -- REJOIN ROUTE BY [time]",
          "570:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "571:     uM69Time  [69] Time,",
          "573:     -- EXPECT BACK ON ROUTE BY [position]",
          "574:     -- Urg(L)/Alr(L)/Resp(R)",
          "575:     uM70Position  [70] Position,",
          "577:     -- EXPECT BACK ON ROUTE BY [time]",
          "578:     -- Urg(L)/Alr(L)/Resp(R)",
          "579:     uM71Time  [71] Time,",
          "581:     -- RESUME OWN NAVIGATION",
          "582:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "583:     uM72NULL  [72] NULL,",
          "585:     -- [DepartureClearance]",
          "586:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "587:     uM73DepartureClearance  [73] DepartureClearance,",
          "589:     -- PROCEED DIRECT TO [position]",
          "590:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "591:     uM74Position  [74] Position,",
          "593:     -- WHEN ABLE PROCEED DIRECT TO [position]",
          "594:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "595:     uM75Position [75] Position,",
          "597:     -- AT [time] PROCEED DIRECT TO [position]",
          "598:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "599:     uM76TimePosition [76] TimePosition,",
          "601:     -- AT [position] PROCEED DIRECT TO [position]",
          "602:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "603:     uM77PositionPosition [77] PositionPosition,",
          "605:     -- AT [level] PROCEED DIRECT TO [position]",
          "606:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "607:     uM78LevelPosition [78] LevelPosition,",
          "609:     -- CLEARED TO [position] VIA [routeClearance]",
          "610:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "611:     uM79PositionRouteClearance [79] PositionRouteClearanceIndex,",
          "613:     -- CLEARED [routeClearance]",
          "614:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "615:     uM80RouteClearance [80] RouteClearanceIndex,",
          "617:     -- CLEARED [procedureName]",
          "618:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "619:     uM81ProcedureName [81] ProcedureName,",
          "621:     -- CLEARED TO DEVIATE UP TO [specifiedDistance] [direction] OF ROUTE",
          "622:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "623:     uM82DistanceSpecifiedDirection [82] DistanceSpecifiedDirection,",
          "625:     -- AT [position] CLEARED [routeClearance]",
          "626:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "627:     uM83PositionRouteClearance [83] PositionRouteClearanceIndex,",
          "629:     -- AT [position] CLEARED [procedureName]",
          "630:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "631:     uM84PositionProcedureName [84] PositionProcedureName,",
          "633:     -- EXPECT [routeClearance]",
          "634:     -- Urg(L)/Alr(L)/Resp(R)",
          "635:     uM85RouteClearance [85] RouteClearanceIndex,",
          "637:     -- AT [position] EXPECT [routeClearance]",
          "638:     -- Urg(L)/Alr(L)/Resp(R)",
          "639:     uM86PositionRouteClearance [86] PositionRouteClearanceIndex,",
          "641:     -- EXPECT DIRECT TO [position]",
          "642:     -- Urg(L)/Alr(L)/Resp(R)",
          "643:     uM87Position [87] Position,",
          "645:     -- AT [position] EXPECT DIRECT TO [position]",
          "646:     -- Urg(L)/Alr(L)/Resp(R)",
          "647:     uM88PositionPosition [88]PositionPosition,",
          "649:     -- AT [time] EXPECT DIRECT TO [position]",
          "650:     -- Urg(L)/Alr(L)/Resp(R)",
          "651:     uM89TimePosition [89] TimePosition,",
          "654:     -- AT [level] EXPECT DIRECT TO [position]",
          "655:     -- Urg(L)/Alr(L)/Resp(R)",
          "656:     uM90LevelPosition [90] LevelPosition,",
          "658:     -- HOLD AT [position] MAINTAIN [level] INBOUND TRACK [degrees][direction] TURNS [legtype]",
          "659:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "660:     uM91HoldClearance [91] HoldClearance,",
          "662:     -- HOLD AT [position] AS PUBLISHED MAINTAIN [level]",
          "663:     --  Urg(N)/Alr(M)/Resp(W/U)",
          "664:     uM92PositionLevel [92] PositionLevel,",
          "666:     -- EXPECT FURTHER CLEARANCE AT [time]",
          "667:     -- Urg(L)/Alr(L)/Resp(R)",
          "668:     uM93Time [93] Time,",
          "670:     -- TURN [direction] HEADING [degrees]",
          "671:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "672:     uM94DirectionDegrees [94] DirectionDegrees,",
          "674:     -- TURN [direction] GROUND TRACK [degrees]",
          "675:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "676:     uM95DirectionDegrees [95] DirectionDegrees,",
          "678:     -- CONTINUE PRESENT HEADING",
          "679:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "680:     uM96NULL [96] NULL,",
          "682:     -- AT [position] FLY HEADING [degrees]",
          "683:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "684:     uM97PositionDegrees [97] PositionDegrees,",
          "686:     -- IMMEDIATELY TURN [direction] HEADING [degrees]",
          "687:     -- Urg(D)/Alr(H)/Resp(W/U)",
          "688:     uM98DirectionDegrees [98] DirectionDegrees,",
          "690:     -- EXPECT [procedureName]",
          "691:     -- Urg(L)/Alr(L)/Resp(R)",
          "692:     uM99ProcedureName [99] ProcedureName,",
          "694:     -- AT [time] EXPECT [speed]",
          "695:     -- Urg(L)/Alr(L)/Resp(R)",
          "696:     uM100TimeSpeed [100] TimeSpeed,",
          "698:     -- AT [position] EXPECT [speed]",
          "699:     -- Urg(L)/Alr(L)/Resp(R)",
          "700:     uM101PositionSpeed [101] PositionSpeed,",
          "702:     -- AT [level] EXPECT [speed]",
          "703:     -- Urg(L)/Alr(L)/Resp(R)",
          "704:     uM102LevelSpeed [102] LevelSpeed,",
          "706:     -- AT [time] EXPECT [speed] TO [speed]",
          "707:     -- Urg(L)/Alr(L)/Resp(R)",
          "708:     uM103TimeSpeedSpeed [103] TimeSpeedSpeed,",
          "710:     -- AT [position] EXPECT [speed] TO [speed]",
          "711:     -- Urg(L)/Alr(L)/Resp(R)",
          "712:     uM104PositionSpeedSpeed [104] PositionSpeedSpeed,",
          "714:     -- AT [level] EXPECT [speed] TO [speed]",
          "715:     -- Urg(L)/Alr(L)/Resp(R)",
          "716:     uM105LevelSpeedSpeed [105] LevelSpeedSpeed,",
          "718:     -- MAINTAIN [speed]",
          "719:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "720:     uM106Speed [106] Speed,",
          "722:     -- MAINTAIN PRESENT SPEED",
          "723:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "724:     uM107NULL [107] NULL,",
          "726:     -- MAINTAIN [speed] OR GREATER",
          "727:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "728:     uM108Speed [108] Speed,",
          "730:     -- MAINTAIN [speed] OR LESS",
          "731:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "732:     uM109Speed [109] Speed,",
          "734:     -- MAINTAIN [speed] TO [speed]",
          "735:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "736:     uM110SpeedSpeed [110] SpeedSpeed,",
          "738:     -- INCREASE SPEED TO [speed]",
          "739:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "740:     uM111Speed [111] Speed,",
          "742:     -- INCREASE SPEED TO [speed] OR GREATER",
          "743:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "744:     uM112Speed [112] Speed,",
          "746:     -- REDUCE SPEED TO [speed]",
          "747:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "748:     uM113Speed [113] Speed,",
          "750:     -- REDUCE SPEED TO [speed] OR LESS",
          "751:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "752:     uM114Speed [114] Speed,",
          "754:     -- DO NOT EXCEED [speed]",
          "755:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "756:     uM115Speed [115] Speed,",
          "758:     -- RESUME NORMAL SPEED",
          "759:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "760:     uM116NULL [116] NULL,",
          "762:     -- CONTACT [unitname] [frequency]",
          "763:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "764:     uM117UnitNameFrequency [117] UnitNameFrequency,",
          "766:     -- AT [position] CONTACT [unitname] [frequency]",
          "767:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "768:     uM118PositionUnitNameFrequency [118] PositionUnitNameFrequency,",
          "770:     -- AT [time] CONTACT [unitname] [frequency]",
          "771:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "772:     uM119TimeUnitNameFrequency [119] TimeUnitNameFrequency,",
          "774:     -- MONITOR [unitname] [frequency]",
          "775:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "776:     uM120UnitNameFrequency [120] UnitNameFrequency,",
          "778:     -- AT [position] MONITOR [unitname] [frequency]",
          "779:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "780:     uM121PositionUnitNameFrequency [121] PositionUnitNameFrequency,",
          "782:     -- AT [time] MONITOR [unitname] [frequency]",
          "783:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "784:     uM122TimeUnitNameFrequency [122] TimeUnitNameFrequency,",
          "786:     -- SQUAWK [code]",
          "787:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "788:     uM123Code [123] Code,",
          "790:     -- STOP SQUAWK",
          "791:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "792:     uM124NULL [124] NULL,",
          "794:     -- SQUAWK MODE CHARLIE",
          "795:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "798:     -- STOP SQUAWK MODE CHARLIE",
          "799:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "800:     uM126NULL [126] NULL,",
          "802:     -- REPORT BACK ON ROUTE",
          "803:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "804:     uM127NULL [127] NULL,",
          "806:     -- REPORT LEAVING [level]",
          "807:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "808:     uM128Level [128] Level,",
          "810:     -- REPORT MAINTAINING [level]",
          "811:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "812:     uM129Level [129] Level,",
          "814:     -- REPORT PASSING [position]",
          "815:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "816:     uM130Position [130] Position,",
          "818:     -- REPORT REMAINING FUEL AND PERSONS ON BOARD",
          "819:     -- Urg(U)/Alr(M)/Resp(Y)",
          "820:     uM131NULL [131] NULL,",
          "822:     -- REPORT POSITION",
          "823:     -- Urg(N)/Alr(M)/Resp(Y)",
          "824:     uM132NULL [132] NULL,",
          "826:     -- REPORT PRESENT LEVEL",
          "827:     -- Urg(N)/Alr(M)/Resp(Y)",
          "828:     uM133NULL [133] NULL,",
          "830:     -- REPORT [speedtype] [speedtype] [speedtype]SPEED",
          "831:     -- Urg(N)/Alr(M)/Resp(Y)",
          "832:     uM134SpeedTypeSpeedTypeSpeedType [134] SpeedTypeSpeedTypeSpeedType,",
          "834:     -- CONFIRM ASSIGNED LEVEL",
          "835:     -- Urg(N)/Alr(L)/Resp(Y)",
          "836:     uM135NULL [135] NULL,",
          "838:     -- CONFIRM ASSIGNED SPEED",
          "839:     -- Urg(N)/Alr(L)/Resp(Y)",
          "840:     uM136NULL [136] NULL,",
          "842:     -- CONFIRM ASSIGNED ROUTE",
          "843:     -- Urg(N)/Alr(L)/Resp(Y)",
          "844:     uM137NULL [137] NULL,",
          "846:   -- CONFIRM TIME OVER REPORTED WAYPOINT",
          "847:   -- Urg(N)/Alr(L)/Resp(Y)",
          "848:     uM138NULL [138] NULL,",
          "850:     -- CONFIRM REPORTED WAYPOINT",
          "851:     -- Urg(N)/Alr(L)/Resp(Y)",
          "852:     uM139NULL [139] NULL,",
          "854:     -- CONFIRM NEXT WAYPOINT",
          "855:     -- Urg(N)/Alr(L)/Resp(Y)",
          "856:     uM140NULL [140] NULL,",
          "858:     -- CONFIRM NEXT WAYPOINT ETA",
          "859:     -- Urg(N)/Alr(L)/Resp(Y)",
          "860:     uM141NULL [141] NULL,",
          "862:     -- CONFIRM ENSUING WAYPOINT",
          "863:     -- Urg(N)/Alr(L)/Resp(Y)",
          "864:     uM142NULL [142] NULL,",
          "866:     -- CONFIRM REQUEST",
          "867:     -- Urg(N)/Alr(L)/Resp(Y)",
          "868:     uM143NULL [143] NULL,",
          "870:     -- CONFIRM SQUAWK",
          "871:     -- Urg(N)/Alr(L)/Resp(Y)",
          "872:     uM144NULL [144] NULL,",
          "874:     -- REPORT HEADING",
          "875:     -- Urg(N)/Alr(M)/Resp(Y)",
          "876:     uM145NULL [145] NULL,",
          "878:     -- REPORT GROUND TRACK",
          "879:     -- Urg(N)/Alr(M)/Resp(Y)",
          "880:     uM146NULL [146] NULL,",
          "882:     -- REQUEST POSITION REPORT",
          "883:     -- Urg(N)/Alr(M)/Resp(Y )",
          "884:     uM147NULL [147] NULL,",
          "886:     -- WHEN CAN YOU ACCEPT [level]",
          "887:     -- Urg(N)/Alr(L)/Resp(Y)",
          "888:     uM148Level [148] Level,",
          "890:     -- CAN YOU ACCEPT [level] AT [position]",
          "891:     -- Urg(N)/Alr(L)/Resp(A/N)",
          "892:     uM149LevelPosition [149] LevelPosition,",
          "894:     -- CAN YOU ACCEPT [level] AT [time]",
          "895:     -- Urg(N)/Alr(L)/Resp(A/N)",
          "896:     uM150LevelTime [150] LevelTime,",
          "898:     -- WHEN CAN YOU ACCEPT [speed]",
          "899:     -- Urg(N)/Alr(L)/Resp(Y)",
          "900:     uM151Speed  [151] Speed,",
          "902:     -- WHEN CAN YOU ACCEPT [specifiedDistance] [direction] OFFSET",
          "903:     -- Urg(N)/Alr(L)/Resp(Y)",
          "904:     uM152DistanceSpecifiedDirection [152] DistanceSpecifiedDirection,",
          "906:     -- ALTIMETER [altimeter]",
          "907:     -- Urg(N)/Alr(L)/Resp(R)",
          "908:     uM153Altimeter  [153] Altimeter,",
          "910:     -- RADAR SERVICE TERMINATED",
          "911:     -- Urg(N)/Alr(L)/Resp(R)",
          "912:     uM154NULL [154] NULL,",
          "914:     -- RADAR CONTACT [position]",
          "915:     -- Urg(N)/Alr(M)/Resp(R)",
          "916:     uM155Position [155] Position,",
          "918:     -- RADAR CONTACT LOST",
          "919:     -- Urg(N)/Alr(M)/Resp(R)",
          "920:     uM156NULL [156] NULL,",
          "922:     -- CHECK STUCK MICROPHONE [frequency]",
          "923:     -- Urg(U)/Alr(M)/Resp(N)",
          "924:     uM157Frequency  [157] Frequency,",
          "926:     -- ATIS [atiscode]",
          "927:     -- Urg(N)/Alr(L)/Resp(R)",
          "928:     uM158AtisCode [158] ATISCode,",
          "930:     -- ERROR [errorInformation]",
          "931:     -- Urg(U)/Alr(M)/Resp(N)",
          "932:     uM159ErrorInformation [159] ErrorInformation,",
          "934:     -- NEXT DATA AUTHORITY [facility]",
          "935:     -- Urg(L)/Alr(N)/Resp(N)",
          "936:     uM160Facility [160] Facility,",
          "938:     -- END SERVICE",
          "939:     -- Urg(L)/Alr(N)/Resp(N)",
          "940:     uM161NULL [161] NULL,",
          "942:     -- SERVICE UNAVAILABLE",
          "943:     -- Urg(L)/Alr(L)/Resp(N )",
          "944:     uM162NULL [162] NULL,",
          "946:     -- [facilitydesignation]",
          "947:     -- Urg(L)/Alr(N)/Resp(N)",
          "948:     uM163FacilityDesignation  [163] FacilityDesignation,",
          "950:     -- WHEN READY",
          "951:     -- Urg(L)/Alr(N)/Resp(N)",
          "952:     uM164NULL [164] NULL,",
          "954:     -- THEN",
          "955:     -- Urg(L)/Alr(N)/Resp(N)",
          "956:     uM165NULL [165] NULL,",
          "958:     -- DUE TO [traffictype]TRAFFIC",
          "959:     -- Urg(L)/Alr(N)/Resp(N)",
          "960:     uM166TrafficType [166] TrafficType,",
          "962:     -- DUE TO AIRSPACE RESTRICTION",
          "963:     -- Urg(L)/Alr(N)/Resp(N)",
          "964:     uM167NULL [167] NULL,",
          "966:     -- DISREGARD",
          "967:     -- Urg(U)/Alr(M)/Resp(R)",
          "968:     uM168NULL [168] NULL,",
          "970:     -- [freetext]",
          "971:     -- Urg(N)/Alr(L)/Resp(R)",
          "972:     uM169FreeText [169] FreeText,",
          "974:     -- [freetext]",
          "975:     -- Urg(D)/Alr(H)/Resp(R)",
          "976:     uM170FreeText [170] FreeText,",
          "978:     -- CLIMB AT [verticalRate] MINIMUM",
          "979:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "980:     uM171VerticalRate [171] VerticalRate,",
          "982:     -- CLIMB AT [verticalRate] MAXIMUM",
          "983:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "984:     uM172VerticalRate [172] VerticalRate,",
          "986:     -- DESCEND AT [verticalRate] MINIMUM",
          "987:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "988:     uM173VerticalRate [173] VerticalRate,",
          "990:     -- DESCEND AT [verticalRate] MAXIMUM",
          "991:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "992:     uM174VerticalRate [174] VerticalRate,",
          "994:     -- REPORT REACHING [level]",
          "995:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "996:     uM175Level [175] Level,",
          "998:     -- MAINTAIN OWN SEPARATION AND VMC",
          "999:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1000:     uM176NULL [176] NULL,",
          "1002:     -- AT PILOTS DISCRETION",
          "1003:     -- Urg(L)/Alr(L)/Resp(N)",
          "1004:     uM177NULL [177] NULL,",
          "1006:     -- Reserved",
          "1007:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1008:     uM178NULL [178] NULL,",
          "1010:     -- SQUAWK IDENT",
          "1011:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1012:     uM179NULL [179] NULL,",
          "1014:     -- REPORT REACHING BLOCK [level] TO [level]",
          "1015:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "1016:     uM180LevelLevel [180] LevelLevel,",
          "1018:     -- REPORT DISTANCE [tofrom] [position]",
          "1019:     -- Urg(N)/Alr(M)/Resp(Y)",
          "1020:     uM181ToFromPosition [181] ToFromPosition,",
          "1022:     -- CONFIRM ATIS CODE",
          "1023:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1024:     uM182NULL [182] NULL,",
          "1026:     -- [freetext]",
          "1027:     -- Urg(N)/Alr(M)/Resp(N)",
          "1028:     uM183FreeText [183] FreeText,",
          "1030:     -- AT [time] REPORT DISTANCE [tofrom] [position]",
          "1031:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1032:     uM184TimeToFromPosition [184] TimeToFromPosition,",
          "1034:     -- AFTER PASSING [position] CLIMB TO [level]",
          "1035:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1036:     uM185PositionLevel [185] PositionLevel,",
          "1038:     -- AFTER PASSING [position] DESCEND TO [level]",
          "1039:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1040:     uM186PositionLevel [186] PositionLevel,",
          "1042:     -- [freetext]",
          "1043:     -- Urg(L)/Alr(N)/Resp(N)",
          "1044:     uM187FreeText [187] FreeText,",
          "1046:     -- AFTER PASSING [position] MAINTAIN [speed]",
          "1047:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1048:     uM188PositionSpeed [188] PositionSpeed,",
          "1050:     -- ADJUST SPEED TO [speed]",
          "1051:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1052:     uM189Speed [189] Speed,",
          "1054:     -- FLY HEADING [degrees]",
          "1055:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1056:     uM190Degrees [190] Degrees,",
          "1058:     -- ALL ATS TERMINATED",
          "1059:     -- Urg(N)/Alr(M)/Resp(R)",
          "1060:     uM191NULL [191] NULL,",
          "1062:     -- REACH [level] BY [time]",
          "1063:   -- Urg(N)/Alr(M)/Resp(W/U)",
          "1064:     uM192LevelTime [192] LevelTime,",
          "1066:     -- IDENTIFICATION LOST",
          "1067:     -- Urg(N)/Alr(M)/Resp(R)",
          "1068:     uM193NULL [193] NULL,",
          "1070:     -- [freetext]",
          "1071:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1072:     uM194FreeText [194] FreeText,",
          "1074:     -- [freetext]",
          "1075:     -- Urg(L)/Alr(L)/Resp(R)",
          "1076:     uM195FreeText [195] FreeText,",
          "1078:     -- [freetext]",
          "1079:     -- Urg(N)/Alr(M)/Resp",
          "1080:     uM196FreeText [196] FreeText,",
          "1082:     -- [freetext]",
          "1083:     -- Urg(U)/Alr(M)/Resp(W/U)",
          "1084:     uM197FreeText [197] FreeText,",
          "1086:     -- [freetext]",
          "1087:     -- Urg(D)/Alr(H)/Resp(W/U)",
          "1088:     uM198FreeText [198] FreeText,",
          "1090:     -- [freetext]",
          "1091:     -- Urg(N)/Alr(L)/Resp(N)",
          "1092:     uM199FreeText [199] FreeText,",
          "1094:     -- REPORT REACHING",
          "1095:     -- Urg(N)/Alr(L)/Resp(W/U)",
          "1096:     uM200NULL [200] NULL,",
          "1098:     -- Not Used",
          "1099:     -- Urg(L)/Alr(L)/Resp(N)",
          "1100:     uM201NULL [201] NULL,",
          "1102:     -- Not Used",
          "1103:     -- Urg(L)/Alr(L)/Resp(N)",
          "1104:     uM202NULL [202] NULL,",
          "1106:     -- [freetext]",
          "1107:     -- Urg(N)/Alr(M)/Resp(R)",
          "1108:     uM203FreeText [203] FreeText,",
          "1110:     -- [freetext]",
          "1111:     -- Urg(N)/Alr(M)/Resp(Y)",
          "1112:     uM204FreeText [204] FreeText,",
          "1114:     -- [freetext]",
          "1115:     -- Urg(N)/Alr(M)/Resp(A/N)",
          "1116:     uM205FreeText [205] FreeText,",
          "1118:     -- [freetext]",
          "1119:     -- Urg(L)/Alr(N)/Resp(Y)",
          "1120:     uM206FreeText [206] FreeText,",
          "1122:     -- [freetext]",
          "1123:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1124:     uM207FreeText [207] FreeText,",
          "1126:     -- [freetext]",
          "1127:     -- Urg(L)/Alr(L)/Resp(N)",
          "1128:     uM208FreeText [208] FreeText,",
          "1130:     -- REACH [level] BY [position]",
          "1131:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1132:     uM209LevelPosition [209] LevelPosition,",
          "1134:     -- IDENTIFIED [position]",
          "1135:     -- Urg(N)/Alr(M)/Resp(R)",
          "1136:     uM210Position [210] Position,",
          "1138:     -- REQUEST FORWARDED",
          "1139:     -- Urg(N)/Alr(L)/Resp(N)",
          "1140:     uM211NULL [211] NULL,",
          "1142:     -- [facilitydesignation] ATIS [atiscode] CURRENT",
          "1143:     -- Urg(N)/Alr(L)/Resp(R)",
          "1144:     uM212FacilityDesignationATISCode [212] FacilityDesignationATISCode,",
          "1146:     -- [facilitydesignation] ALTIMETER [altimeter]",
          "1147:     -- Urg(N)/Alr(L)/Resp(R)",
          "1148:     uM213FacilityDesignationAltimeter [213] FacilityDesignationAltimeter,",
          "1150:     -- RVR RUNWAY [runway] [rvr]",
          "1151:     -- Urg(N)/Alr(M)/Resp(R)",
          "1152:     uM214RunwayRVR [214] RunwayRVR,",
          "1154:     -- TURN [direction][degrees]",
          "1155:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1156:     uM215DirectionDegrees [215] DirectionDegrees,",
          "1158:     -- REQUEST FLIGHT PLAN",
          "1159:     -- Urg(N)/Alr(M)/Resp(Y)",
          "1160:     uM216NULL [216] NULL,",
          "1162:     -- REPORT ARRIVAL",
          "1163:     -- Urg(N)/Alr(M)/Resp(Y)",
          "1164:     uM217NULL [217] NULL,",
          "1166:     -- REQUEST ALREADY RECEIVED",
          "1167:     -- Urg(L)/Alr(N)/Resp(N)",
          "1168:     uM218NULL [218] NULL,",
          "1170:     -- STOP CLIMB AT [level]",
          "1171:     -- Urg(U)/Alr(M)/Resp(W/U)",
          "1172:     uM219Level [219] Level,",
          "1174:     -- STOP DESCENT AT [level]",
          "1175:     -- Urg(U)/Alr(M)/Resp(W/U)",
          "1176:     uM220Level [220] Level,",
          "1178:     -- STOP TURN HEADING [degrees]",
          "1179:     -- Urg(U)/Alr(M)/Resp(W/U)",
          "1180:     uM221Degrees [221] Degrees,",
          "1182:     -- NO SPEED RESTRICTION",
          "1183:     -- Urg(L)/Alr(L)/Resp(R)",
          "1184:     uM222NULL [222] NULL,",
          "1186:     -- REDUCE TO MINIMUM APPROACH SPEED",
          "1187:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1188:     uM223NULL [223] NULL,",
          "1190:   -- NO DELAY EXPECTED",
          "1191:   -- Urg(N)/Alr(L)/Resp(R)",
          "1192:     uM224NULL [224] NULL,",
          "1194:     -- DELAY NOT DETERMINED",
          "1195:     -- Urg(N)/Alr(L)/Resp(R)",
          "1196:     uM225NULL [225] NULL,",
          "1198:     -- EXPECTED APPROACH TIME [time]",
          "1199:     -- Urg(N)/Alr(L)/Resp(R)",
          "1200:     uM226Time [226] Time,",
          "1202:     -- LOGICAL ACKNOWLEDGMENT",
          "1203:     -- Urg(N)/Alr(M)/Resp(N)",
          "1204:     uM227NULL [227] NULL,",
          "1206:     -- REPORT ETA [position]",
          "1207:     --Urg(L)/Alr(L)/Resp(Y)",
          "1208:     uM228Position [228] Position,",
          "1210:     -- REPORT ALTERNATE AERODROME",
          "1211:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1212:     uM229NULL [229] NULL,",
          "1214:     -- IMMEDIATELY",
          "1215:     -- Urg(D)/Alr(H)/Resp(N)",
          "1216:     uM230NULL [230] NULL,",
          "1218:     -- STATE PREFERRED LEVEL",
          "1219:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1220:     uM231NULL [231] NULL,",
          "1222:     -- STATE TOP OF DESCENT",
          "1223:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1224:     uM232NULL [232] NULL,",
          "1226:     -- USE OF LOGICAL ACKNOWLEDGMENT PROHIBITED",
          "1227:     -- Urg(N)/Alr(M)/Resp(N)",
          "1228:     uM233NULL [233] NULL,",
          "1230:     -- FLIGHT PLAN NOT HELD",
          "1231:     -- Urg(L)/Alr(L)/Resp(N)",
          "1232:     uM234NULL [234] NULL,",
          "1234:     -- ROGER 7500",
          "1235:     -- Urg(U)/Alr(H)/Resp(N)",
          "1236:     uM235NULL [235] NULL,",
          "1238:     -- LEAVE CONTROLLED AIRSPACE",
          "1239:     -- Urg(N)/Alr(M)/Resp(W/U)",
          "1240:     uM236NULL [236] NULL,",
          "1241:     ...,",
          "1243:     -- REQUEST AGAIN WITH NEXT UNIT",
          "1244:     -- Urg(N)/Alr(L)/Resp(N)",
          "1245:     uM237NULL [237]NULL",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1254: -- ----------------------------------------------------------------------------------",
          "1255: ATCDownlinkMsgElementId ::= CHOICE",
          "1256: {",
          "1713: }",
          "1715: AircraftAddress ::= BIT STRING (SIZE(24))",
          "",
          "[Removed Lines]",
          "1257:   -- WILCO",
          "1258:   -- Urg(N)/Alr(M)/Resp(N)",
          "1259:   dM0NULL [0] NULL,",
          "1261:   --UNABLE",
          "1262:   -- Urg(N)/Alr(M)/Resp(N)",
          "1263:   dM1NULL [1] NULL,",
          "1265:   -- STANDBY",
          "1266:   -- Urg(N)/Alr(M)/Resp(N)",
          "1267:   dM2NULL [2] NULL,",
          "1269:   -- ROGER",
          "1270:   -- Urg(N)/Alr(M)/Resp(N)",
          "1271:   dM3NULL [3] NULL,",
          "1273:   -- AFFIRM",
          "1274:   -- Urg(N)/Alr(M)/Resp(N)",
          "1275:   dM4NULL [4] NULL,",
          "1277:   -- NEGATIVE",
          "1278:   -- Urg(N)/Alr(M)/Resp(N)",
          "1279:   dM5NULL [5] NULL,",
          "1281:   -- REQUEST [level]",
          "1282:  -- Urg(N)/Alr(L)/Resp(Y)",
          "1283:   dM6Level [6] Level,",
          "1285:   -- REQUEST BLOCK [level] TO [level]",
          "1286:  -- Urg(N)/Alr(L)/Resp(Y)",
          "1287:   dM7LevelLevel [7] LevelLevel,",
          "1289:   -- REQUEST CRUISE CLIMB TO [level]",
          "1290:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1291:   dM8Level [8] Level,",
          "1293:   -- REQUEST CLIMB TO [level]",
          "1294:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1295:   dM9Level [9] Level,",
          "1297:   -- REQUEST DESCENT TO [level]",
          "1298:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1299:   dM10Level [10] Level,",
          "1301:   -- AT [position] REQUEST CLIMB TO [level]",
          "1302:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1303:   dM11PositionLevel [11] PositionLevel,",
          "1305:   -- AT [position] REQUEST DESCENT TO [level]",
          "1306:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1307:   dM12PositionLevel [12] PositionLevel,",
          "1309:   -- AT [time] REQUEST CLIMB TO [level]",
          "1310:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1311:   dM13TimeLevel [13] TimeLevel,",
          "1313:   -- AT [time] REQUEST DESCENT TO [level]",
          "1314:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1315:   dM14TimeLevel [14] TimeLevel,",
          "1317:   -- REQUEST OFFSET [specifiedDistance] [direction] OF ROUTE",
          "1318:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1319:   dM15DistanceSpecifiedDirection [15] DistanceSpecifiedDirection,",
          "1321:   -- AT [position] REQUEST OFFSET [specifiedDistance] [direction] OF ROUTE",
          "1322:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1323:   dM16PositionDistanceSpecifiedDirection [16] PositionDistanceSpecifiedDirection,",
          "1325:   -- AT [time] REQUEST OFFSET [specifiedDistance] [direction] OF ROUTE",
          "1326:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1327:   dM17TimeDistanceSpecifiedDirection [17] TimeDistanceSpecifiedDirection,",
          "1329:   -- REQUEST [speed]",
          "1330:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1331:   dM18Speed [18] Speed,",
          "1333:   -- REQUEST [speed] TO [speed]",
          "1334:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1335:   dM19SpeedSpeed [19] SpeedSpeed,",
          "1337:   -- REQUEST VOICE CONTACT",
          "1338:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1339:   dM20NULL [20] NULL,",
          "1341:   -- REQUEST VOICE CONTACT [frequency]",
          "1342:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1343:   dM21Frequency [21] Frequency,",
          "1345:   -- REQUEST DIRECT TO [position]",
          "1346:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1347:   dM22Position [22] Position,",
          "1349:   -- REQUEST [procedureName]",
          "1350:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1351:   dM23ProcedureName [23] ProcedureName,",
          "1353:   -- REQUEST CLEARANCE [routeClearance]",
          "1354:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1355:   dM24RouteClearance [24] RouteClearanceIndex,",
          "1357:   -- REQUEST [clearanceType] CLEARANCE",
          "1358:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1359:   dM25ClearanceType [25] ClearanceType,",
          "1361:   -- REQUEST WEATHER DEVIATION TO [position] VIA [routeClearance]",
          "1362:   -- Urg(N)/Alr(M)/Resp(Y)",
          "1363:   dM26PositionRouteClearance [26] PositionRouteClearanceIndex,",
          "1365:   -- REQUEST WEATHER DEVIATION UP TO [specifiedDistance] [direction] OF ROUTE",
          "1366:   -- Urg(N)/Alr(M)/Resp(Y)",
          "1367:   dM27DistanceSpecifiedDirection [27] DistanceSpecifiedDirection,",
          "1369:   -- LEAVING [level]",
          "1370:   -- Urg(N)/Alr(L)/Resp(N)",
          "1371:   dM28Level [28] Level,",
          "1373:   -- CLIMBING TO [level]",
          "1374:   -- Urg(N)/Alr(L)/Resp(N)",
          "1375:   dM29Level [29]Level,",
          "1377:   -- DESCENDING TO [level]",
          "1378:   -- Urg(N)/Alr(L)/Resp(N)",
          "1379:   dM30Level [30] Level,",
          "1381:   -- PASSING [position]",
          "1382:   -- Urg(N)/Alr(L)/Resp(N)",
          "1383:   dM31Position [31] Position,",
          "1385:   -- PRESENT LEVEL [level]",
          "1386:   -- Urg(N)/Alr(L)/Resp(N)",
          "1387:   dM32Level [32] Level,",
          "1389:   -- PRESENT POSITION [position]",
          "1390:   -- Urg(N)/Alr(L)/Resp(N)",
          "1391:   dM33Position [33] Position,",
          "1393:   -- PRESENT SPEED [speed]",
          "1394:   -- Urg(N)/Alr(L)/Resp(N)",
          "1395:   dM34Speed [34] Speed,",
          "1397:   -- PRESENT HEADING [degrees]",
          "1398:   -- Urg(N)/Alr(L)/Resp(N)",
          "1399:   dM35Degrees [35] Degrees,",
          "1401:   -- PRESENT GROUND TRACK [degrees]",
          "1402:   -- Urg(N)/Alr(L)/Resp(N)",
          "1403:   dM36Degrees [36] Degrees,",
          "1405:   -- MAINTAINING [level]",
          "1406:   -- Urg(N)/Alr(L)/Resp(N)",
          "1407:   dM37Level [37] Level,",
          "1409:   -- ASSIGNED LEVEL [level]",
          "1410:   -- Urg(N)/Alr(M)/Resp(N)",
          "1411:   dM38Level [38] Level,",
          "1413:   -- ASSIGNED SPEED [speed]",
          "1414:   -- Urg(N)/Alr(M)/Resp(N)",
          "1415:   dM39Speed [39] Speed,",
          "1417:   -- ASSIGNED ROUTE [routeClearance]",
          "1418:   -- Urg(N)/Alr(M)/Resp(N)",
          "1419:   dM40RouteClearance [40] RouteClearanceIndex,",
          "1421:   -- BACK ON ROUTE",
          "1422:   -- Urg(N)/Alr(M)/Resp(N)",
          "1423:   dM41NULL [41] NULL,",
          "1425:   -- NEXT WAYPOINT [position]",
          "1426:   -- Urg(N)/Alr(L)/Resp(N)",
          "1427:   dM42Position [42] Position,",
          "1429:   -- NEXT WAYPOINT ETA [time]",
          "1430:   -- Urg(N)/Alr(L)/Resp(N)",
          "1431:   dM43Time [43] Time,",
          "1433:   -- ENSUING WAYPOINT [position]",
          "1434:   -- Urg(N)/Alr(L)/Resp(N)",
          "1435:   dM44Position [44] Position,",
          "1437:   -- REPORTED WAYPOINT [position]",
          "1438:   -- Urg(N)/Alr(L)/Resp(N)",
          "1439:   dM45Position [45] Position,",
          "1441:   -- REPORTED WAYPOINT [time]",
          "1442:   -- Urg(N)/Alr(L)/Resp(N)",
          "1443:   dM46Time [46] Time,",
          "1445:   -- SQUAWKING [code]",
          "1446:   -- Urg(N)/Alr(L)/Resp(N)",
          "1447:   dM47Code [47] Code,",
          "1449:   -- POSITION REPORT [positionreport]",
          "1450:   -- Urg(N)/Alr(M)/Resp(N)",
          "1451:   dM48PositionReport [48] PositionReport,",
          "1453:   -- WHEN CAN WE EXPECT [speed]",
          "1454:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1455:   dM49Speed [49] Speed,",
          "1457:   -- WHEN CAN WE EXPECT [speed] TO [speed]",
          "1458:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1459:   dM50SpeedSpeed [50] SpeedSpeed,",
          "1461:   -- WHEN CAN WE EXPECT BACK ON ROUTE",
          "1462:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1463:   dM51NULL [51] NULL,",
          "1465:   -- WHEN CAN WE EXPECT LOWER LEVEL",
          "1466:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1467:   dM52NULL [52] NULL,",
          "1469:   -- WHEN CAN WE EXPECT HIGHER LEVEL Urg(L)/Alr(L)/Resp(Y)",
          "1470:   dM53NULL [53] NULL,",
          "1472:   -- WHEN CAN WE EXPECT CRUISE CLIMB TO [level]",
          "1473:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1474:   dM54Level [54] Level,",
          "1476:   -- PAN PAN PAN",
          "1477:   -- Urg(U)/Alr(H)/Resp(Y)",
          "1478:   dM55NULL [55] NULL,",
          "1480:   -- MAYDAY MAYDAY MAYDAY",
          "1481:   -- Urg(D)/Alr(H)/Resp(Y)",
          "1482:   dM56NULL [56] NULL,",
          "1484:   -- [remainingFuel] OF FUEL REMAINING AND [personsonboard] PERSONS ON BOARD",
          "1485:   -- Urg(U)/Alr(H)/Resp(Y)",
          "1486:   dM57RemainingFuelPersonsOnBoard [57] RemainingFuelPersonsOnBoard,",
          "1488:   -- CANCEL EMERGENCY",
          "1489:   -- Urg(U)/Alr(M)/Resp(Y)",
          "1490:   dM58NULL [58] NULL,",
          "1492:   -- DIVERTING TO [position] VIA [routeClearance]",
          "1493:   -- Urg(U)/Alr(H)/Resp(Y)",
          "1494:   dM59PositionRouteClearance [59] PositionRouteClearanceIndex,",
          "1496:   -- OFFSETTING [specifiedDistance] [direction] OF ROUTE",
          "1497:   -- Urg(U)/Alr(H)/Resp(Y)",
          "1498:   dM60DistanceSpecifiedDirection [60] DistanceSpecifiedDirection,",
          "1500:   -- DESCENDING TO [level]",
          "1501:   -- Urg(U)/Alr(H)/Resp(Y)",
          "1502:   dM61Level [61] Level,",
          "1504:   -- ERROR [errorInformation]",
          "1505:   -- Urg(U)/Alr(L)/Resp(N)",
          "1506:   dM62ErrorInformation [62] ErrorInformation,",
          "1508:   -- NOT CURRENT DATA AUTHORITY",
          "1509:   -- Urg(L)/Alr(L)/Resp(N)",
          "1510:   dM63NULL [63] NULL,",
          "1512:   -- [facilitydesignation]",
          "1513:   -- Urg(L)/Alr(L)/Resp(N)",
          "1514:   dM64FacilityDesignation [64] FacilityDesignation,",
          "1516:   --  DUE TO WEATHER",
          "1517:   -- Urg(L)/Alr(L)/Resp(N)",
          "1518:   dM65NULL [65] NULL,",
          "1520:   -- DUE TO AIRCRAFT PERFORMANCE",
          "1521:   -- Urg(L)/Alr(L)/Resp(N)",
          "1522:   dM66NULL [66] NULL,",
          "1524:   -- [freetext]",
          "1525:   -- Urg(N)/Alr(L)/Resp(N)",
          "1526:   dM67FreeText [67] FreeText,",
          "1528:   -- [freetext]",
          "1529:   -- Urg(D)/Alr(H)/Resp(Y)",
          "1530:   dM68FreeText [68] FreeText,",
          "1532:   -- REQUEST VMC DESCENT",
          "1533:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1534:   dM69NULL [69] NULL,",
          "1536:   -- REQUEST HEADING [degrees]",
          "1537:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1538:   dM70Degrees [70] Degrees,",
          "1540:   -- REQUEST GROUND TRACK [degrees]",
          "1541:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1542:   dM71Degrees [71] Degrees,",
          "1544:   -- REACHING [level]",
          "1545:   -- Urg(N)/Alr(L)/Resp(N)",
          "1546:   dM72Level [72] Level,",
          "1548:   -- [versionnumber]",
          "1549:   -- Urg(L)/Alr(L)/Resp(N)",
          "1550:   dM73Versionnumber [73] VersionNumber,",
          "1552:   -- REQUEST TO MAINTAIN OWN SEPARATION AND VMC",
          "1553:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1554:   dM74NULL [74] NULL,",
          "1556:   -- AT PILOTS DISCRETION",
          "1557:   -- Urg(L)/Alr(L)/Resp(N)",
          "1558:   dM75NULL [75] NULL,",
          "1560:   -- REACHING BLOCK [level] TO [level]",
          "1561:   -- Urg(N)/Alr(L)/Resp(N)",
          "1562:   dM76LevelLevel [76] LevelLevel,",
          "1564:   -- ASSIGNED BLOCK [level] TO [level]",
          "1565:   -- Urg(N)/Alr(M)/Resp(N)",
          "1566:   dM77LevelLevel [77] LevelLevel,",
          "1568:   -- AT [time] [distance] [tofrom] [position]",
          "1569:   -- Urg(N)/Alr(L)/Resp(N)",
          "1570:   dM78TimeDistanceToFromPosition [78] TimeDistanceToFromPosition,",
          "1572:   -- ATIS [atiscode]",
          "1573:   -- Urg(N)/Alr(L)/Resp(N)",
          "1574:   dM79AtisCode [79] ATISCode,",
          "1576:   -- DEVIATING UP TO [specifiedDistance] [direction] OF ROUTE",
          "1577:   -- Urg(U)/Alr(H)/Resp(Y)",
          "1578:   dM80DistanceSpecifiedDirection [80] DistanceSpecifiedDirection,",
          "1580:   -- WE CAN ACCEPT [level] AT [time]",
          "1581:   -- Urg(L)/Alr(L)/Resp(N)",
          "1582:   dM81LevelTime [81] LevelTime,",
          "1584:   -- WE CANNOT ACCEPT [level]",
          "1585:   -- Urg(L)/Alr(L)/Resp(N)",
          "1586:   dM82Level [82] Level,",
          "1588:   -- WE CAN ACCEPT [speed] AT [time]",
          "1589:   -- Urg(L)/Alr(L)/Resp(N)",
          "1590:   dM83SpeedTime [83] SpeedTime,",
          "1592:   -- WE CANNOT ACCEPT [speed]",
          "1593:   -- Urg(L)/Alr(L)/Resp(N)",
          "1594:   dM84Speed [84] Speed,",
          "1596:   -- WE CAN ACCEPT [specifiedDistance] [direction] AT [time]",
          "1597:   -- Urg(L)/Alr(L)/Resp(N)",
          "1598:   dM85DistanceSpecifiedDirectionTime [85] DistanceSpecifiedDirectionTime,",
          "1600:   -- WE CANNOT ACCEPT [specifiedDistance] [direction]",
          "1601:   -- Urg(L)/Alr(L)/Resp(N)",
          "1602:   dM86DistanceSpecifiedDirection [86] DistanceSpecifiedDirection,",
          "1604:   -- WHEN CAN WE EXPECT CLIMB TO [level]",
          "1605:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1606:   dM87Level [87] Level,",
          "1608:   -- WHEN CAN WE EXPECT DESCENT TO [level]",
          "1609:   --Urg(L)/Alr(L)/Resp(Y)",
          "1610:   dM88Level [88] Level,",
          "1612:   -- MONITORING [unitname] [frequency]",
          "1613:   -- Urg(U)/Alr(M)/Resp(N)",
          "1614:   dM89UnitnameFrequency [89] UnitNameFrequency,",
          "1616:   -- [freetext]",
          "1617:   -- Urg(N)/Alr(M)/Resp(N)",
          "1618:   dM90FreeText [90] FreeText,",
          "1620:   -- [freetext]",
          "1621:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1622:   dM91FreeText [91] FreeText,",
          "1624:   -- [freetext]",
          "1625:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1626:   dM92FreeText [92] FreeText,",
          "1628:   -- [freetext]",
          "1629:   -- Urg(U)/Alr(H)/Resp(N)",
          "1630:   dM93FreeText [93] FreeText,",
          "1632:   -- [freetext]",
          "1633:   -- Urg(D)/Alr(H)/Resp(N)",
          "1634:   dM94FreeText [94] FreeText,",
          "1636:   -- [freetext]",
          "1637:   -- Urg(U)/Alr(M)/Resp(N)",
          "1638:   dM95FreeText [95] FreeText,",
          "1640:   -- [freetext]",
          "1641:   -- Urg(U)/Alr(L)/Resp(N)",
          "1642:   dM96FreeText [96] FreeText,",
          "1644:   -- [freetext]",
          "1645:   -- Urg(L)/Alr(L)/Resp(N)",
          "1646:   dM97FreeText [97] FreeText,",
          "1648:   -- [freetext]",
          "1649:   -- Urg(N)/Alr(N)/Resp(N)",
          "1650:   dM98FreeText [98] FreeText,",
          "1652:   -- CURRENT DATA AUTHORITY",
          "1653:   -- Urg(L)/Alr(L)/Resp(N)",
          "1654:   dM99NULL [99] NULL,",
          "1656:   -- LOGICAL ACKNOWLEDGMENT",
          "1657:   -- Urg(N)/Alr(M)/Resp(N)",
          "1658:   dM100NULL [100] NULL,",
          "1660:   -- REQUEST END OF SERVICE",
          "1661:   -- Urg(L)/Alr(L)/Resp(Y)",
          "1662:   dM101NULL [101] NULL,",
          "1664:   -- LANDING REPORT",
          "1665:   -- Urg(N)/Alr(N)/Resp(N)",
          "1666:   dM102NULL [102] NULL,",
          "1668:   -- CANCELLING IFR",
          "1669:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1670:   dM103NULL [103] NULL,",
          "1672:   -- ETA[position][time]",
          "1673:   -- Urg(L)/Alr(L)/Resp(N)",
          "1674:   dM104PositionTime [104] PositionTime,",
          "1676:   -- ALTERNATE AERODROME[airport]",
          "1677:   -- Urg(L)/Alr(L)/Resp(N)",
          "1678:   dM105Airport [105] Airport,",
          "1680:   -- PREFERRED LEVEL[level]",
          "1681:   -- Urg(L)/Alr(L)/Resp(N)",
          "1682:   dM106Level [106] Level,",
          "1684:   -- NOT AUTHORIZED NEXT DATA AUTHORITY",
          "1685:   -- Urg(L)/Alr(L)/Resp(N)",
          "1686:   dM107NULL [107] NULL,",
          "1688:   -- DE-ICING COMPLETE",
          "1689:   -- Urg(L)/Alr(L)/Resp(N)",
          "1690:   dM108NULL [108] NULL,",
          "1692:   -- TOP OF DESCENT [time]",
          "1693:   -- Urg(L)/Alr(L)/Resp(N)",
          "1694:   dM109Time [109] Time,",
          "1696:   -- TOP OF DESCENT [position]",
          "1697:   -- Urg(L)/Alr(L)/Resp(N)",
          "1698:   dM110Position [110] Position,",
          "1700:   -- TOP OF DESCENT [time] [position]",
          "1701:   -- Urg(L)/Alr(L)/Resp(N)",
          "1702:   dM111TimePosition [111] TimePosition,",
          "1704:   -- SQUAWKING 7500",
          "1705:   -- Urg(U)/Alr(H)/Resp(N)",
          "1706:   dM112NULL [112] NULL,",
          "1708:   -- [speedType] [speedType] [speedType] SPEED [speed]",
          "1709:   -- Urg(N)/Alr(L)/Resp(N)",
          "1710:   dM113SpeedTypeSpeedTypeSpeedTypeSpeed [113] SpeedTypeSpeedTypeSpeedTypeSpeed,",
          "1712:   ...",
          "",
          "[Added Lines]",
          "1253:     -- WILCO",
          "1254:     -- Urg(N)/Alr(M)/Resp(N)",
          "1255:     dM0NULL [0] NULL,",
          "1257:     --UNABLE",
          "1258:     -- Urg(N)/Alr(M)/Resp(N)",
          "1259:     dM1NULL [1] NULL,",
          "1261:     -- STANDBY",
          "1262:     -- Urg(N)/Alr(M)/Resp(N)",
          "1263:     dM2NULL [2] NULL,",
          "1265:     -- ROGER",
          "1266:     -- Urg(N)/Alr(M)/Resp(N)",
          "1267:     dM3NULL [3] NULL,",
          "1269:     -- AFFIRM",
          "1270:     -- Urg(N)/Alr(M)/Resp(N)",
          "1271:     dM4NULL [4] NULL,",
          "1273:     -- NEGATIVE",
          "1274:     -- Urg(N)/Alr(M)/Resp(N)",
          "1275:     dM5NULL [5] NULL,",
          "1277:     -- REQUEST [level]",
          "1278:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1279:     dM6Level  [6] Level,",
          "1281:     -- REQUEST BLOCK [level] TO [level]",
          "1282:   -- Urg(N)/Alr(L)/Resp(Y)",
          "1283:     dM7LevelLevel [7] LevelLevel,",
          "1285:     -- REQUEST CRUISE CLIMB TO [level]",
          "1286:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1287:     dM8Level [8] Level,",
          "1289:     -- REQUEST CLIMB TO [level]",
          "1290:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1291:     dM9Level  [9] Level,",
          "1293:     -- REQUEST DESCENT TO [level]",
          "1294:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1295:     dM10Level [10] Level,",
          "1297:     -- AT [position] REQUEST CLIMB TO [level]",
          "1298:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1299:     dM11PositionLevel [11] PositionLevel,",
          "1301:     -- AT [position] REQUEST DESCENT TO [level]",
          "1302:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1303:     dM12PositionLevel [12] PositionLevel,",
          "1305:     -- AT [time] REQUEST CLIMB TO [level]",
          "1306:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1307:     dM13TimeLevel [13] TimeLevel,",
          "1309:     -- AT [time] REQUEST DESCENT TO [level]",
          "1310:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1311:     dM14TimeLevel [14] TimeLevel,",
          "1313:     -- REQUEST OFFSET [specifiedDistance] [direction] OF ROUTE",
          "1314:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1315:     dM15DistanceSpecifiedDirection  [15] DistanceSpecifiedDirection,",
          "1317:     -- AT [position] REQUEST OFFSET [specifiedDistance] [direction] OF ROUTE",
          "1318:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1319:     dM16PositionDistanceSpecifiedDirection [16] PositionDistanceSpecifiedDirection,",
          "1321:     -- AT [time] REQUEST OFFSET [specifiedDistance] [direction] OF ROUTE",
          "1322:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1323:     dM17TimeDistanceSpecifiedDirection [17] TimeDistanceSpecifiedDirection,",
          "1325:     -- REQUEST [speed]",
          "1326:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1327:     dM18Speed [18] Speed,",
          "1329:     -- REQUEST [speed] TO [speed]",
          "1330:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1331:     dM19SpeedSpeed  [19] SpeedSpeed,",
          "1333:     -- REQUEST VOICE CONTACT",
          "1334:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1335:     dM20NULL  [20] NULL,",
          "1337:     -- REQUEST VOICE CONTACT [frequency]",
          "1338:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1339:     dM21Frequency [21] Frequency,",
          "1341:     -- REQUEST DIRECT TO [position]",
          "1342:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1343:     dM22Position  [22] Position,",
          "1345:     -- REQUEST [procedureName]",
          "1346:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1347:     dM23ProcedureName [23] ProcedureName,",
          "1349:     -- REQUEST CLEARANCE [routeClearance]",
          "1350:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1351:     dM24RouteClearance  [24] RouteClearanceIndex,",
          "1353:     -- REQUEST [clearanceType] CLEARANCE",
          "1354:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1355:     dM25ClearanceType [25] ClearanceType,",
          "1357:     -- REQUEST WEATHER DEVIATION TO [position] VIA [routeClearance]",
          "1358:     -- Urg(N)/Alr(M)/Resp(Y)",
          "1359:     dM26PositionRouteClearance [26] PositionRouteClearanceIndex,",
          "1361:     -- REQUEST WEATHER DEVIATION UP TO [specifiedDistance] [direction] OF ROUTE",
          "1362:     -- Urg(N)/Alr(M)/Resp(Y)",
          "1363:     dM27DistanceSpecifiedDirection [27] DistanceSpecifiedDirection,",
          "1365:     -- LEAVING [level]",
          "1366:     -- Urg(N)/Alr(L)/Resp(N)",
          "1367:     dM28Level [28] Level,",
          "1369:     -- CLIMBING TO [level]",
          "1370:     -- Urg(N)/Alr(L)/Resp(N)",
          "1371:     dM29Level [29]Level,",
          "1373:     -- DESCENDING TO [level]",
          "1374:     -- Urg(N)/Alr(L)/Resp(N)",
          "1375:     dM30Level [30] Level,",
          "1377:     -- PASSING [position]",
          "1378:     -- Urg(N)/Alr(L)/Resp(N)",
          "1379:     dM31Position  [31] Position,",
          "1381:     -- PRESENT LEVEL [level]",
          "1382:     -- Urg(N)/Alr(L)/Resp(N)",
          "1383:     dM32Level [32] Level,",
          "1385:     -- PRESENT POSITION [position]",
          "1386:     -- Urg(N)/Alr(L)/Resp(N)",
          "1387:     dM33Position [33] Position,",
          "1389:     -- PRESENT SPEED [speed]",
          "1390:     -- Urg(N)/Alr(L)/Resp(N)",
          "1391:     dM34Speed [34] Speed,",
          "1393:     -- PRESENT HEADING [degrees]",
          "1394:     -- Urg(N)/Alr(L)/Resp(N)",
          "1395:     dM35Degrees [35] Degrees,",
          "1397:     -- PRESENT GROUND TRACK [degrees]",
          "1398:     -- Urg(N)/Alr(L)/Resp(N)",
          "1399:     dM36Degrees [36] Degrees,",
          "1401:     -- MAINTAINING [level]",
          "1402:     -- Urg(N)/Alr(L)/Resp(N)",
          "1403:     dM37Level [37] Level,",
          "1405:     -- ASSIGNED LEVEL [level]",
          "1406:     -- Urg(N)/Alr(M)/Resp(N)",
          "1407:     dM38Level [38] Level,",
          "1409:     -- ASSIGNED SPEED [speed]",
          "1410:     -- Urg(N)/Alr(M)/Resp(N)",
          "1411:     dM39Speed [39] Speed,",
          "1413:     -- ASSIGNED ROUTE [routeClearance]",
          "1414:     -- Urg(N)/Alr(M)/Resp(N)",
          "1415:     dM40RouteClearance [40] RouteClearanceIndex,",
          "1417:     -- BACK ON ROUTE",
          "1418:     -- Urg(N)/Alr(M)/Resp(N)",
          "1419:     dM41NULL [41] NULL,",
          "1421:     -- NEXT WAYPOINT [position]",
          "1422:     -- Urg(N)/Alr(L)/Resp(N)",
          "1423:     dM42Position [42] Position,",
          "1425:     -- NEXT WAYPOINT ETA [time]",
          "1426:     -- Urg(N)/Alr(L)/Resp(N)",
          "1427:     dM43Time [43] Time,",
          "1429:     -- ENSUING WAYPOINT [position]",
          "1430:     -- Urg(N)/Alr(L)/Resp(N)",
          "1431:     dM44Position [44] Position,",
          "1433:     -- REPORTED WAYPOINT [position]",
          "1434:     -- Urg(N)/Alr(L)/Resp(N)",
          "1435:     dM45Position [45] Position,",
          "1437:     -- REPORTED WAYPOINT [time]",
          "1438:     -- Urg(N)/Alr(L)/Resp(N)",
          "1439:     dM46Time [46] Time,",
          "1441:     -- SQUAWKING [code]",
          "1442:     -- Urg(N)/Alr(L)/Resp(N)",
          "1443:     dM47Code [47] Code,",
          "1445:     -- POSITION REPORT [positionreport]",
          "1446:     -- Urg(N)/Alr(M)/Resp(N)",
          "1447:     dM48PositionReport [48] PositionReport,",
          "1449:     -- WHEN CAN WE EXPECT [speed]",
          "1450:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1451:     dM49Speed [49] Speed,",
          "1453:     -- WHEN CAN WE EXPECT [speed] TO [speed]",
          "1454:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1455:     dM50SpeedSpeed [50] SpeedSpeed,",
          "1457:     -- WHEN CAN WE EXPECT BACK ON ROUTE",
          "1458:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1459:     dM51NULL [51] NULL,",
          "1461:     -- WHEN CAN WE EXPECT LOWER LEVEL",
          "1462:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1463:     dM52NULL [52] NULL,",
          "1465:     -- WHEN CAN WE EXPECT HIGHER LEVEL Urg(L)/Alr(L)/Resp(Y)",
          "1466:     dM53NULL [53] NULL,",
          "1468:     -- WHEN CAN WE EXPECT CRUISE CLIMB TO [level]",
          "1469:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1470:     dM54Level [54] Level,",
          "1472:     -- PAN PAN PAN",
          "1473:     -- Urg(U)/Alr(H)/Resp(Y)",
          "1474:     dM55NULL  [55] NULL,",
          "1476:     -- MAYDAY MAYDAY MAYDAY",
          "1477:     -- Urg(D)/Alr(H)/Resp(Y)",
          "1478:     dM56NULL  [56] NULL,",
          "1480:     -- [remainingFuel] OF FUEL REMAINING AND [personsonboard] PERSONS ON BOARD",
          "1481:     -- Urg(U)/Alr(H)/Resp(Y)",
          "1482:     dM57RemainingFuelPersonsOnBoard [57] RemainingFuelPersonsOnBoard,",
          "1484:     -- CANCEL EMERGENCY",
          "1485:     -- Urg(U)/Alr(M)/Resp(Y)",
          "1486:     dM58NULL  [58] NULL,",
          "1488:     -- DIVERTING TO [position] VIA [routeClearance]",
          "1489:     -- Urg(U)/Alr(H)/Resp(Y)",
          "1490:     dM59PositionRouteClearance  [59] PositionRouteClearanceIndex,",
          "1492:     -- OFFSETTING [specifiedDistance] [direction] OF ROUTE",
          "1493:     -- Urg(U)/Alr(H)/Resp(Y)",
          "1494:     dM60DistanceSpecifiedDirection [60] DistanceSpecifiedDirection,",
          "1496:     -- DESCENDING TO [level]",
          "1497:     -- Urg(U)/Alr(H)/Resp(Y)",
          "1498:     dM61Level [61] Level,",
          "1500:     -- ERROR [errorInformation]",
          "1501:     -- Urg(U)/Alr(L)/Resp(N)",
          "1502:     dM62ErrorInformation [62] ErrorInformation,",
          "1504:     -- NOT CURRENT DATA AUTHORITY",
          "1505:     -- Urg(L)/Alr(L)/Resp(N)",
          "1506:     dM63NULL [63] NULL,",
          "1508:     -- [facilitydesignation]",
          "1509:     -- Urg(L)/Alr(L)/Resp(N)",
          "1510:     dM64FacilityDesignation [64] FacilityDesignation,",
          "1512:     --  DUE TO WEATHER",
          "1513:     -- Urg(L)/Alr(L)/Resp(N)",
          "1514:     dM65NULL [65] NULL,",
          "1516:     -- DUE TO AIRCRAFT PERFORMANCE",
          "1517:     -- Urg(L)/Alr(L)/Resp(N)",
          "1518:     dM66NULL [66] NULL,",
          "1520:     -- [freetext]",
          "1521:     -- Urg(N)/Alr(L)/Resp(N)",
          "1522:     dM67FreeText [67] FreeText,",
          "1524:     -- [freetext]",
          "1525:     -- Urg(D)/Alr(H)/Resp(Y)",
          "1526:     dM68FreeText [68] FreeText,",
          "1528:     -- REQUEST VMC DESCENT",
          "1529:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1530:     dM69NULL [69] NULL,",
          "1532:     -- REQUEST HEADING [degrees]",
          "1533:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1534:     dM70Degrees [70] Degrees,",
          "1536:     -- REQUEST GROUND TRACK [degrees]",
          "1537:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1538:     dM71Degrees [71] Degrees,",
          "1540:     -- REACHING [level]",
          "1541:     -- Urg(N)/Alr(L)/Resp(N)",
          "1542:     dM72Level [72] Level,",
          "1544:     -- [versionnumber]",
          "1545:     -- Urg(L)/Alr(L)/Resp(N)",
          "1546:     dM73Versionnumber [73] VersionNumber,",
          "1548:     -- REQUEST TO MAINTAIN OWN SEPARATION AND VMC",
          "1549:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1550:     dM74NULL [74] NULL,",
          "1552:     -- AT PILOTS DISCRETION",
          "1553:     -- Urg(L)/Alr(L)/Resp(N)",
          "1554:     dM75NULL [75] NULL,",
          "1556:     -- REACHING BLOCK [level] TO [level]",
          "1557:     -- Urg(N)/Alr(L)/Resp(N)",
          "1558:     dM76LevelLevel [76] LevelLevel,",
          "1560:     -- ASSIGNED BLOCK [level] TO [level]",
          "1561:     -- Urg(N)/Alr(M)/Resp(N)",
          "1562:     dM77LevelLevel  [77] LevelLevel,",
          "1564:     -- AT [time] [distance] [tofrom] [position]",
          "1565:     -- Urg(N)/Alr(L)/Resp(N)",
          "1566:     dM78TimeDistanceToFromPosition  [78] TimeDistanceToFromPosition,",
          "1568:     -- ATIS [atiscode]",
          "1569:     -- Urg(N)/Alr(L)/Resp(N)",
          "1570:     dM79AtisCode  [79] ATISCode,",
          "1572:     -- DEVIATING UP TO [specifiedDistance] [direction] OF ROUTE",
          "1573:     -- Urg(U)/Alr(H)/Resp(Y)",
          "1574:     dM80DistanceSpecifiedDirection [80] DistanceSpecifiedDirection,",
          "1576:     -- WE CAN ACCEPT [level] AT [time]",
          "1577:     -- Urg(L)/Alr(L)/Resp(N)",
          "1578:     dM81LevelTime [81] LevelTime,",
          "1580:     -- WE CANNOT ACCEPT [level]",
          "1581:     -- Urg(L)/Alr(L)/Resp(N)",
          "1582:     dM82Level [82] Level,",
          "1584:     -- WE CAN ACCEPT [speed] AT [time]",
          "1585:     -- Urg(L)/Alr(L)/Resp(N)",
          "1586:     dM83SpeedTime [83] SpeedTime,",
          "1588:     -- WE CANNOT ACCEPT [speed]",
          "1589:     -- Urg(L)/Alr(L)/Resp(N)",
          "1590:     dM84Speed [84] Speed,",
          "1592:     -- WE CAN ACCEPT [specifiedDistance] [direction] AT [time]",
          "1593:     -- Urg(L)/Alr(L)/Resp(N)",
          "1594:     dM85DistanceSpecifiedDirectionTime [85] DistanceSpecifiedDirectionTime,",
          "1596:     -- WE CANNOT ACCEPT [specifiedDistance] [direction]",
          "1597:     -- Urg(L)/Alr(L)/Resp(N)",
          "1598:     dM86DistanceSpecifiedDirection  [86] DistanceSpecifiedDirection,",
          "1600:     -- WHEN CAN WE EXPECT CLIMB TO [level]",
          "1601:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1602:     dM87Level [87] Level,",
          "1604:     -- WHEN CAN WE EXPECT DESCENT TO [level]",
          "1605:     --Urg(L)/Alr(L)/Resp(Y)",
          "1606:     dM88Level [88] Level,",
          "1608:     -- MONITORING [unitname] [frequency]",
          "1609:     -- Urg(U)/Alr(M)/Resp(N)",
          "1610:     dM89UnitnameFrequency [89] UnitNameFrequency,",
          "1612:     -- [freetext]",
          "1613:     -- Urg(N)/Alr(M)/Resp(N)",
          "1614:     dM90FreeText  [90] FreeText,",
          "1616:     -- [freetext]",
          "1617:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1618:     dM91FreeText  [91] FreeText,",
          "1620:     -- [freetext]",
          "1621:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1622:     dM92FreeText [92] FreeText,",
          "1624:     -- [freetext]",
          "1625:     -- Urg(U)/Alr(H)/Resp(N)",
          "1626:     dM93FreeText [93] FreeText,",
          "1628:     -- [freetext]",
          "1629:     -- Urg(D)/Alr(H)/Resp(N)",
          "1630:     dM94FreeText [94] FreeText,",
          "1632:     -- [freetext]",
          "1633:     -- Urg(U)/Alr(M)/Resp(N)",
          "1634:     dM95FreeText [95] FreeText,",
          "1636:     -- [freetext]",
          "1637:     -- Urg(U)/Alr(L)/Resp(N)",
          "1638:     dM96FreeText [96] FreeText,",
          "1640:     -- [freetext]",
          "1641:     -- Urg(L)/Alr(L)/Resp(N)",
          "1642:     dM97FreeText [97] FreeText,",
          "1644:     -- [freetext]",
          "1645:     -- Urg(N)/Alr(N)/Resp(N)",
          "1646:     dM98FreeText [98] FreeText,",
          "1648:     -- CURRENT DATA AUTHORITY",
          "1649:     -- Urg(L)/Alr(L)/Resp(N)",
          "1650:     dM99NULL [99] NULL,",
          "1652:     -- LOGICAL ACKNOWLEDGMENT",
          "1653:     -- Urg(N)/Alr(M)/Resp(N)",
          "1654:     dM100NULL [100] NULL,",
          "1656:     -- REQUEST END OF SERVICE",
          "1657:     -- Urg(L)/Alr(L)/Resp(Y)",
          "1658:     dM101NULL [101] NULL,",
          "1660:     -- LANDING REPORT",
          "1661:     -- Urg(N)/Alr(N)/Resp(N)",
          "1662:     dM102NULL [102] NULL,",
          "1664:     -- CANCELLING IFR",
          "1665:     -- Urg(N)/Alr(L)/Resp(Y)",
          "1666:     dM103NULL [103] NULL,",
          "1668:     -- ETA[position][time]",
          "1669:     -- Urg(L)/Alr(L)/Resp(N)",
          "1670:     dM104PositionTime [104] PositionTime,",
          "1672:     -- ALTERNATE AERODROME[airport]",
          "1673:     -- Urg(L)/Alr(L)/Resp(N)",
          "1674:     dM105Airport [105] Airport,",
          "1676:     -- PREFERRED LEVEL[level]",
          "1677:     -- Urg(L)/Alr(L)/Resp(N)",
          "1678:     dM106Level [106] Level,",
          "1680:     -- NOT AUTHORIZED NEXT DATA AUTHORITY",
          "1681:     -- Urg(L)/Alr(L)/Resp(N)",
          "1682:     dM107NULL [107] NULL,",
          "1684:     -- DE-ICING COMPLETE",
          "1685:     -- Urg(L)/Alr(L)/Resp(N)",
          "1686:     dM108NULL [108] NULL,",
          "1688:     -- TOP OF DESCENT [time]",
          "1689:     -- Urg(L)/Alr(L)/Resp(N)",
          "1690:     dM109Time [109] Time,",
          "1692:     -- TOP OF DESCENT [position]",
          "1693:     -- Urg(L)/Alr(L)/Resp(N)",
          "1694:     dM110Position [110] Position,",
          "1696:     -- TOP OF DESCENT [time] [position]",
          "1697:     -- Urg(L)/Alr(L)/Resp(N)",
          "1698:     dM111TimePosition [111] TimePosition,",
          "1700:     -- SQUAWKING 7500",
          "1701:     -- Urg(U)/Alr(H)/Resp(N)",
          "1702:     dM112NULL [112] NULL,",
          "1704:     -- [speedType] [speedType] [speedType] SPEED [speed]",
          "1705:     -- Urg(N)/Alr(L)/Resp(N)",
          "1706:     dM113SpeedTypeSpeedTypeSpeedTypeSpeed [113] SpeedTypeSpeedTypeSpeedTypeSpeed,",
          "1708:     ...",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1721: Altimeter ::= CHOICE",
          "1722: {",
          "1725: }",
          "1727: AltimeterEnglish ::= INTEGER (2200..3200)",
          "",
          "[Removed Lines]",
          "1723:   altimeterEnglish [0] AltimeterEnglish,",
          "1724:   altimeterMetric [1] AltimeterMetric",
          "",
          "[Added Lines]",
          "1719:     altimeterEnglish  [0] AltimeterEnglish,",
          "1720:     altimeterMetric [1] AltimeterMetric",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1737: ATWAlongTrackWaypoint ::= SEQUENCE",
          "1738: {",
          "1743: }",
          "1745: ATWLevel ::= SEQUENCE",
          "1746: {",
          "1749: }",
          "1751: ATWLevelSequence ::= SEQUENCE SIZE (1..2) OF ATWLevel",
          "1753: ATWLevelTolerance ::= ENUMERATED",
          "1754: {",
          "1758: }",
          "1760: ATWDistance ::= SEQUENCE",
          "1761: {",
          "1764: }",
          "1766: ATWDistanceTolerance ::= ENUMERATED",
          "1767: {",
          "1770: }",
          "1772: ClearanceType ::= ENUMERATED",
          "1773: {",
          "1787: }",
          "1789: Code ::= SEQUENCE SIZE (4) OF CodeOctalDigit",
          "",
          "[Removed Lines]",
          "1739:   position  [0] Position,",
          "1740:   aTWDistance [1] ATWDistance,",
          "1741:   speed    [2] Speed       OPTIONAL,",
          "1742:   aTWLevels  [3] ATWLevelSequence OPTIONAL",
          "1747:   atw ATWLevelTolerance,",
          "1748:   level Level",
          "1755:   at    (0),",
          "1756:   atorabove (1),",
          "1757:   atorbelow (2)",
          "1762:   atwDistanceTolerance ATWDistanceTolerance,",
          "1763:   distance Distance",
          "1768:   plus (0),",
          "1769:   minus (1)",
          "1774:   noneSpecified (0),",
          "1775:   approach   (1),",
          "1776:   departure   (2),",
          "1777:   further    (3),",
          "1778:   start-up   (4),",
          "1779:   pushback   (5),",
          "1780:   taxi     (6),",
          "1781:   take-off   (7),",
          "1782:   landing    (8),",
          "1783:   oceanic    (9),",
          "1784:   en-route   (10),",
          "1785:   downstream  (11),",
          "1786:   ...",
          "",
          "[Added Lines]",
          "1735:     position    [0] Position,",
          "1736:     aTWDistance [1] ATWDistance,",
          "1737:     speed       [2] Speed             OPTIONAL,",
          "1738:     aTWLevels   [3] ATWLevelSequence  OPTIONAL",
          "1743:     atw ATWLevelTolerance,",
          "1744:     level Level",
          "1751:     at        (0),",
          "1752:     atorabove (1),",
          "1753:     atorbelow (2)",
          "1758:     atwDistanceTolerance  ATWDistanceTolerance,",
          "1759:     distance  Distance",
          "1764:     plus  (0),",
          "1765:     minus (1)",
          "1770:     noneSpecified (0),",
          "1771:     approach      (1),",
          "1772:     departure     (2),",
          "1773:     further       (3),",
          "1774:     start-up      (4),",
          "1775:     pushback      (5),",
          "1776:     taxi          (6),",
          "1777:     take-off      (7),",
          "1778:     landing       (8),",
          "1779:     oceanic       (9),",
          "1780:     en-route      (10),",
          "1781:     downstream    (11),",
          "1782:     ...",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1793: ControlledTime ::= SEQUENCE",
          "1794: {",
          "1797: }",
          "1799: Date ::= SEQUENCE",
          "1800: {",
          "1804: }",
          "1806: DateTimeGroup ::= SEQUENCE",
          "1807: {",
          "1810: }",
          "1812: Day ::= INTEGER (1..31)",
          "",
          "[Removed Lines]",
          "1795:   time Time,",
          "1796:   timeTolerance TimeTolerance",
          "1801:   year Year,",
          "1802:   month Month,",
          "1803:   day Day",
          "1808:   date Date,",
          "1809:   timehhmmss Timehhmmss",
          "",
          "[Added Lines]",
          "1791:     time  Time,",
          "1792:     timeTolerance TimeTolerance",
          "1797:     year  Year,",
          "1798:     month Month,",
          "1799:     day Day",
          "1804:     date  Date,",
          "1805:     timehhmmss  Timehhmmss",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1818: Degrees ::= CHOICE",
          "1819: {",
          "1822: }",
          "1824: DegreesMagnetic ::= INTEGER (1..360)",
          "",
          "[Removed Lines]",
          "1820:   degreesMagnetic [0] DegreesMagnetic,",
          "1821:   degreesTrue   [1] DegreesTrue",
          "",
          "[Added Lines]",
          "1816:     degreesMagnetic [0] DegreesMagnetic,",
          "1817:     degreesTrue     [1] DegreesTrue",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1830: DepartureClearance ::= SEQUENCE",
          "1831: {",
          "1836: }",
          "1838: DepartureMinimumInterval ::= INTEGER (1..150)",
          "",
          "[Removed Lines]",
          "1832:   aircraftFlightIdentification [0] AircraftFlightIdentification,",
          "1833:   clearanceLimit        [1] Position,",
          "1834:   flightInformation       [2] FlightInformation      OPTIONAL,",
          "1835:   furtherInstructions      [3] FurtherInstructions     OPTIONAL",
          "",
          "[Added Lines]",
          "1828:     aircraftFlightIdentification  [0] AircraftFlightIdentification,",
          "1829:     clearanceLimit                [1] Position,",
          "1830:     flightInformation             [2] FlightInformation           OPTIONAL,",
          "1831:     furtherInstructions           [3] FurtherInstructions         OPTIONAL",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1841: Direction ::= ENUMERATED",
          "1842: {",
          "1854: }",
          "1856: DirectionDegrees ::= SEQUENCE",
          "1857: {",
          "1860: }",
          "1862: Distance ::= CHOICE",
          "1863: {",
          "1866: }",
          "1869: DistanceKm ::= INTEGER (0..8000)",
          "1872: DistanceNm ::= INTEGER (0..9999)",
          "1875: DistanceSpecified ::= CHOICE",
          "1876: {",
          "1879: }",
          "1882: DistanceSpecifiedDirection ::= SEQUENCE",
          "1883: {",
          "1886: }",
          "1888: DistanceSpecifiedDirectionTime ::= SEQUENCE",
          "1889: {",
          "1892: }",
          "1894: DistanceSpecifiedKm ::= INTEGER (1..500)",
          "1897: DistanceSpecifiedNm ::= INTEGER (1..250)",
          "1900: ErrorInformation ::= ENUMERATED",
          "1901: {",
          "1908: }",
          "1910: Facility ::= CHOICE{",
          "1913: }",
          "1915: FacilityDesignation ::= IA5String (SIZE (4..8))",
          "1917: FacilityFunction ::= ENUMERATED",
          "1918: {",
          "1929: }",
          "1931: FacilityDesignationAltimeter ::= SEQUENCE",
          "1932: {",
          "1935: }",
          "1937: FacilityDesignationATISCode ::= SEQUENCE",
          "1938: {",
          "1941: }",
          "1943: FacilityName ::= IA5String (SIZE (3..18))",
          "",
          "[Removed Lines]",
          "1843:   left    (0),",
          "1844:   right    (1),",
          "1845:   eitherSide (2),",
          "1846:   north    (3),",
          "1847:   south    (4),",
          "1848:   east    (5),",
          "1849:   west    (6),",
          "1850:   northEast  (7),",
          "1851:   northWest  (8),",
          "1852:   southEast  (9),",
          "1853:   southWest  (10)",
          "1858:   direction Direction,",
          "1859:   degrees Degrees",
          "1864:   distanceNm [0] DistanceNm,",
          "1865:   distanceKm [1] DistanceKm",
          "1870: -- unit = Kilometer, Range (0..2000), resolution = 0.25",
          "1873: -- unit = Nautical Mile, Range (0..999.9), resolution = 0.1",
          "1877:   distanceSpecifiedNm [0] DistanceSpecifiedNm,",
          "1878:   distanceSpecifiedKm [1] DistanceSpecifiedKm",
          "1884:   distanceSpecified DistanceSpecified,",
          "1885:   direction Direction",
          "1890:   distanceSpecifiedDirection DistanceSpecifiedDirection,",
          "1891:   time Time",
          "1895: -- unit = Kilometer, Range (1..500), resolution = 1",
          "1898: -- unit = Nautical Mile, Range (1..250), resolution = 1",
          "1902:   unrecognizedMsgReferenceNumber  (0),",
          "1903:   logicalAcknowledgmentNotAccepted (1),",
          "1904:   insufficientResources       (2),",
          "1905:   invalidMessageElementCombination (3),",
          "1906:   invalidMessageElement       (4),",
          "1907:   ...",
          "1911:   noFacility      [0] NULL,",
          "1912:   facilityDesignation  [1] FacilityDesignation",
          "1919:   center      (0),",
          "1920:   approach     (1),",
          "1921:   tower       (2),",
          "1922:   final       (3),",
          "1923:   groundControl   (4),",
          "1924:   clearanceDelivery (5),",
          "1925:   departure     (6),",
          "1926:   control      (7),",
          "1927:   radio       (8),",
          "1928:   ...",
          "1933:   facilityDesignation FacilityDesignation,",
          "1934:   altimeter Altimeter",
          "1939:   facilityDesignation FacilityDesignation,",
          "1940:   aTISCode ATISCode",
          "",
          "[Added Lines]",
          "1839:     left        (0),",
          "1840:     right       (1),",
          "1841:     eitherSide  (2),",
          "1842:     north       (3),",
          "1843:     south       (4),",
          "1844:     east        (5),",
          "1845:     west        (6),",
          "1846:     northEast   (7),",
          "1847:     northWest   (8),",
          "1848:     southEast   (9),",
          "1849:     southWest   (10)",
          "1854:     direction Direction,",
          "1855:     degrees Degrees",
          "1860:     distanceNm  [0] DistanceNm,",
          "1861:     distanceKm  [1] DistanceKm",
          "1866: --  unit = Kilometer, Range (0..2000), resolution = 0.25",
          "1869: --  unit = Nautical Mile, Range (0..999.9), resolution = 0.1",
          "1873:     distanceSpecifiedNm [0] DistanceSpecifiedNm,",
          "1874:     distanceSpecifiedKm [1] DistanceSpecifiedKm",
          "1880:     distanceSpecified DistanceSpecified,",
          "1881:     direction Direction",
          "1886:     distanceSpecifiedDirection  DistanceSpecifiedDirection,",
          "1887:     time  Time",
          "1891: --  unit = Kilometer, Range (1..500), resolution = 1",
          "1894: --  unit = Nautical Mile, Range (1..250), resolution = 1",
          "1898:     unrecognizedMsgReferenceNumber    (0),",
          "1899:     logicalAcknowledgmentNotAccepted  (1),",
          "1900:     insufficientResources             (2),",
          "1901:     invalidMessageElementCombination  (3),",
          "1902:     invalidMessageElement             (4),",
          "1903:     ...",
          "1907:     noFacility            [0] NULL,",
          "1908:     facilityDesignation   [1] FacilityDesignation",
          "1915:     center            (0),",
          "1916:     approach          (1),",
          "1917:     tower             (2),",
          "1918:     final             (3),",
          "1919:     groundControl     (4),",
          "1920:     clearanceDelivery (5),",
          "1921:     departure         (6),",
          "1922:     control           (7),",
          "1923:     radio             (8),",
          "1924:     ...",
          "1929:     facilityDesignation FacilityDesignation,",
          "1930:     altimeter Altimeter",
          "1935:     facilityDesignation FacilityDesignation,",
          "1936:     aTISCode  ATISCode",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1947: FixName ::= SEQUENCE",
          "1948: {",
          "1951: }",
          "1953: FlightInformation ::= CHOICE",
          "1954: {",
          "1958: }",
          "1960: FreeText ::= IA5String (SIZE (1..256))",
          "1962: Frequency ::= CHOICE",
          "1963: {",
          "1968: }",
          "1970: Frequencyhf ::= INTEGER (2850..28000)",
          "1973: Frequencysatchannel ::= NumericString (SIZE (12))",
          "1976: Frequencyuhf ::= INTEGER (9000..15999)",
          "1979: Frequencyvhf ::= INTEGER (23600..27398)",
          "1982: FurtherInstructions ::= SEQUENCE",
          "1983: {",
          "1993: }",
          "1996: Holdatwaypoint ::= SEQUENCE",
          "1997: {",
          "2006: }",
          "2008: HoldClearance ::= SEQUENCE",
          "2009: {",
          "2015: }",
          "2018: Humidity ::= INTEGER (0..100)",
          "2021: InterceptCourseFrom ::= SEQUENCE",
          "2022: {",
          "2025: }",
          "2027: InterceptCourseFromSelection ::= CHOICE",
          "2028: {",
          "2033: }",
          "2035: Icing ::= ENUMERATED",
          "2036: {",
          "2041: }",
          "2044: Latitude ::= SEQUENCE",
          "2045: {",
          "2048: }",
          "2050: LatitudeDegrees ::= INTEGER (0..90000)",
          "",
          "[Removed Lines]",
          "1949:   name  [0] Fix,",
          "1950:   latlon [1] LatitudeLongitude OPTIONAL",
          "1955:   routeOfFlight  [0] RouteInformation,",
          "1956:   levelsOfFlight [1] LevelsOfFlight,",
          "1957:   routeAndLevels [2] RouteAndLevels",
          "1964:   frequencyhf     [0] Frequencyhf,",
          "1965:   frequencyvhf    [1] Frequencyvhf,",
          "1966:   frequencyuhf    [2] Frequencyuhf,",
          "1967:   frequencysatchannel [3] Frequencysatchannel",
          "1971: -- unit = Kilohertz, Range (2850..28000), resolution = 1",
          "1974: -- Frequencysatchannel corresponds to a 12 digit telephone number",
          "1977: -- unit = Megahertz, Range (225.000..399.975), resolution = 0.025",
          "1980: -- unit = Megahertz, Range (118.000..136.990), resolution = 0.005",
          "1984:   code        [0] Code       OPTIONAL,",
          "1985:   frequencyDeparture [1] UnitNameFrequency OPTIONAL,",
          "1986:   clearanceExpiryTime [2] Time       OPTIONAL,",
          "1987:   airportDeparture  [3] Airport      OPTIONAL,",
          "1988:   airportDestination [4] Airport      OPTIONAL,",
          "1989:   timeDeparture    [5] TimeDeparture   OPTIONAL,",
          "1990:   runwayDeparture   [6] Runway      OPTIONAL,",
          "1991:   revisionNumber   [7] RevisionNumber  OPTIONAL,",
          "1992:   aTISCode      [8] ATISCode     OPTIONAL",
          "1998:   position        [0] Position,",
          "1999:   holdatwaypointspeedlow [1] Speed    OPTIONAL,",
          "2000:   aTWlevel        [2] ATWLevel  OPTIONAL,",
          "2001:   holdatwaypointspeedhigh [3] Speed    OPTIONAL,",
          "2002:   direction        [4] Direction  OPTIONAL,",
          "2003:   degrees         [5] Degrees   OPTIONAL,",
          "2004:   eFCtime         [6] Time    OPTIONAL,",
          "2005:   legtype         [7] LegType   OPTIONAL",
          "2010:   position [0] Position,",
          "2011:   level   [1] Level,",
          "2012:   degrees  [2] Degrees,",
          "2013:   direction [3] Direction,",
          "2014:   legType  [4] LegType    OPTIONAL",
          "2019: -- unit = Percent humidity, Range (0..100), resolution = 1",
          "2023:   fromSelection InterceptCourseFromSelection,",
          "2024:   degrees    Degrees",
          "2029:   publishedIdentifier    [0] PublishedIdentifier,",
          "2030:   latitudeLongitude     [1] LatitudeLongitude,",
          "2031:   placeBearingPlaceBearing [2] PlaceBearingPlaceBearing,",
          "2032:   placeBearingDistance   [3] PlaceBearingDistance",
          "2037:   reserved (0),",
          "2038:   light   (1),",
          "2039:   moderate (2),",
          "2040:   severe  (3)",
          "2046:   latitudeType   LatitudeType,",
          "2047:   latitudeDirection LatitudeDirection",
          "",
          "[Added Lines]",
          "1945:     name    [0] Fix,",
          "1946:     latlon  [1] LatitudeLongitude OPTIONAL",
          "1951:     routeOfFlight   [0] RouteInformation,",
          "1952:     levelsOfFlight  [1] LevelsOfFlight,",
          "1953:     routeAndLevels  [2] RouteAndLevels",
          "1960:     frequencyhf         [0] Frequencyhf,",
          "1961:     frequencyvhf        [1] Frequencyvhf,",
          "1962:     frequencyuhf        [2] Frequencyuhf,",
          "1963:     frequencysatchannel [3] Frequencysatchannel",
          "1967: --  unit = Kilohertz, Range (2850..28000), resolution = 1",
          "1970: --  Frequencysatchannel corresponds to a 12 digit telephone number",
          "1973: --  unit = Megahertz, Range (225.000..399.975), resolution = 0.025",
          "1976: --  unit = Megahertz, Range (118.000..136.990), resolution = 0.005",
          "1980:     code                [0] Code              OPTIONAL,",
          "1981:     frequencyDeparture  [1] UnitNameFrequency OPTIONAL,",
          "1982:     clearanceExpiryTime [2] Time              OPTIONAL,",
          "1983:     airportDeparture    [3] Airport           OPTIONAL,",
          "1984:     airportDestination  [4] Airport           OPTIONAL,",
          "1985:     timeDeparture       [5] TimeDeparture     OPTIONAL,",
          "1986:     runwayDeparture     [6] Runway            OPTIONAL,",
          "1987:     revisionNumber      [7] RevisionNumber    OPTIONAL,",
          "1988:     aTISCode            [8] ATISCode          OPTIONAL",
          "1994:     position                [0] Position,",
          "1995:     holdatwaypointspeedlow  [1] Speed       OPTIONAL,",
          "1996:     aTWlevel                [2] ATWLevel    OPTIONAL,",
          "1997:     holdatwaypointspeedhigh [3] Speed       OPTIONAL,",
          "1998:     direction               [4] Direction   OPTIONAL,",
          "1999:     degrees                 [5] Degrees     OPTIONAL,",
          "2000:     eFCtime                 [6] Time        OPTIONAL,",
          "2001:     legtype                 [7] LegType     OPTIONAL",
          "2006:     position  [0] Position,",
          "2007:     level     [1] Level,",
          "2008:     degrees   [2] Degrees,",
          "2009:     direction [3] Direction,",
          "2010:     legType   [4] LegType       OPTIONAL",
          "2015: --  unit = Percent humidity, Range (0..100), resolution = 1",
          "2019:     fromSelection InterceptCourseFromSelection,",
          "2020:     degrees       Degrees",
          "2025:     publishedIdentifier       [0] PublishedIdentifier,",
          "2026:     latitudeLongitude         [1] LatitudeLongitude,",
          "2027:     placeBearingPlaceBearing  [2] PlaceBearingPlaceBearing,",
          "2028:     placeBearingDistance      [3] PlaceBearingDistance",
          "2033:     reserved  (0),",
          "2034:     light     (1),",
          "2035:     moderate  (2),",
          "2036:     severe    (3)",
          "2042:     latitudeType      LatitudeType,",
          "2043:     latitudeDirection LatitudeDirection",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2053: LatitudeDegreesMinutes ::= SEQUENCE",
          "2054: {",
          "2057: }",
          "2059: LatitudeDegreesMinutesSeconds ::= SEQUENCE",
          "2060: {",
          "2064: }",
          "2066: LatitudeDirection ::= ENUMERATED",
          "2067: {",
          "2070: }",
          "2072: LatitudeWholeDegrees ::= INTEGER (0..89)",
          "",
          "[Removed Lines]",
          "2055:   latitudeWholeDegrees LatitudeWholeDegrees,",
          "2056:   minutesLatLon     MinutesLatLon",
          "2061:   latitudeWholeDegrees LatitudeWholeDegrees,",
          "2062:   latlonWholeMinutes  LatLonWholeMinutes,",
          "2063:   secondsLatLon     SecondsLatLon",
          "2068:   north (0),",
          "2069:   south (1)",
          "",
          "[Added Lines]",
          "2051:     latitudeWholeDegrees  LatitudeWholeDegrees,",
          "2052:     minutesLatLon         MinutesLatLon",
          "2057:     latitudeWholeDegrees  LatitudeWholeDegrees,",
          "2058:     latlonWholeMinutes    LatLonWholeMinutes,",
          "2059:     secondsLatLon         SecondsLatLon",
          "2064:     north (0),",
          "2065:     south (1)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2075: LatitudeLongitude ::= SEQUENCE",
          "2076: {",
          "2079: }",
          "2081: LatitudeReportingPoints ::= SEQUENCE",
          "2082: {",
          "2085: }",
          "2087: LatitudeType ::= CHOICE",
          "2088: {",
          "2092: }",
          "2094: LatLonWholeMinutes ::= INTEGER (0..59)",
          "",
          "[Removed Lines]",
          "2077:   latitude [0] Latitude OPTIONAL,",
          "2078:   longitude [1] Longitude OPTIONAL",
          "2083:   latitudeDirection LatitudeDirection,",
          "2084:   latitudeDegrees  LatitudeDegrees",
          "2089:   latitudeDegrees     [0] LatitudeDegrees,",
          "2090:   latitudeDegreesMinutes [1] LatitudeDegreesMinutes,",
          "2091:   latitudeDMS       [2] LatitudeDegreesMinutesSeconds",
          "",
          "[Added Lines]",
          "2073:     latitude  [0] Latitude  OPTIONAL,",
          "2074:     longitude [1] Longitude OPTIONAL",
          "2079:     latitudeDirection LatitudeDirection,",
          "2080:     latitudeDegrees   LatitudeDegrees",
          "2085:     latitudeDegrees         [0] LatitudeDegrees,",
          "2086:     latitudeDegreesMinutes  [1] LatitudeDegreesMinutes,",
          "2087:     latitudeDMS             [2] LatitudeDegreesMinutesSeconds",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2097: LatLonReportingPoints ::= CHOICE",
          "2098: {",
          "2101: }",
          "2103: LegDistance ::= CHOICE",
          "2104: {",
          "2107: }",
          "2109: LegDistanceEnglish ::= INTEGER (0..50)",
          "",
          "[Removed Lines]",
          "2099:   latitudeReportingPoints  [0] LatitudeReportingPoints,",
          "2100:   longitudeReportingPoints [1] LongitudeReportingPoints",
          "2105:   legDistanceEnglish [0] LegDistanceEnglish,",
          "2106:   legDistanceMetric  [1] LegDistanceMetric",
          "",
          "[Added Lines]",
          "2095:     latitudeReportingPoints   [0] LatitudeReportingPoints,",
          "2096:     longitudeReportingPoints  [1] LongitudeReportingPoints",
          "2101:     legDistanceEnglish  [0] LegDistanceEnglish,",
          "2102:     legDistanceMetric   [1] LegDistanceMetric",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2118: LegType ::= CHOICE",
          "2119: {",
          "2122: }",
          "2124: Level ::= CHOICE",
          "2125: {",
          "2128: }",
          "2130: LevelFeet ::= INTEGER (-60..7000)",
          "",
          "[Removed Lines]",
          "2120:   legDistance [0] LegDistance,",
          "2121:   legTime   [1] LegTime",
          "2126:   singleLevel [0] LevelType,",
          "2127:   blockLevel [1] SEQUENCE SIZE (2) OF LevelType",
          "",
          "[Added Lines]",
          "2116:     legDistance [0] LegDistance,",
          "2117:     legTime     [1] LegTime",
          "2122:     singleLevel [0] LevelType,",
          "2123:     blockLevel  [1] SEQUENCE SIZE (2) OF LevelType",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2142: LevelPosition ::= SEQUENCE",
          "2143: {",
          "2146: }",
          "2148: LevelProcedureName ::= SEQUENCE",
          "2149: {",
          "2152: }",
          "2154: LevelsOfFlight ::= CHOICE",
          "2155: {",
          "2159: }",
          "2161: LevelSpeed ::= SEQUENCE",
          "2162: {",
          "2165: }",
          "2167: LevelSpeedSpeed ::= SEQUENCE",
          "2168: {",
          "2171: }",
          "2173: LevelTime ::= SEQUENCE",
          "2174: {",
          "2177: }",
          "2179: LevelType ::= CHOICE",
          "2180: {",
          "2185: }",
          "2187: Longitude ::= SEQUENCE",
          "2188: {",
          "2191: }",
          "2193: LongitudeDegrees ::= INTEGER (0..180000)",
          "",
          "[Removed Lines]",
          "2144:   level   Level,",
          "2145:   position Position",
          "2150:   level     Level,",
          "2151:   procedureName ProcedureName",
          "2156:   level        [0] Level,",
          "2157:   procedureName    [1] ProcedureName,",
          "2158:   levelProcedureName [2] LevelProcedureName",
          "2163:   level Level,",
          "2164:   speed SpeedSpeed",
          "2169:   level  Level,",
          "2170:   speeds SpeedSpeed",
          "2175:   level Level,",
          "2176:   time Time",
          "2181:   levelFeet        [0] LevelFeet,",
          "2182:   levelMeters       [1] LevelMeters,",
          "2183:   levelFlightLevel    [2] LevelFlightLevel,",
          "2184:   levelFlightLevelMetric [3] LevelFlightLevelMetric",
          "2189:   longitudeType    LongitudeType,",
          "2190:   longitudeDirection LongitudeDirection",
          "",
          "[Added Lines]",
          "2140:     level     Level,",
          "2141:     position  Position",
          "2146:     level         Level,",
          "2147:     procedureName ProcedureName",
          "2152:     level               [0] Level,",
          "2153:     procedureName       [1] ProcedureName,",
          "2154:     levelProcedureName  [2] LevelProcedureName",
          "2159:     level Level,",
          "2160:     speed SpeedSpeed",
          "2165:     level   Level,",
          "2166:     speeds  SpeedSpeed",
          "2171:     level Level,",
          "2172:     time  Time",
          "2177:     levelFeet               [0] LevelFeet,",
          "2178:     levelMeters             [1] LevelMeters,",
          "2179:     levelFlightLevel        [2] LevelFlightLevel,",
          "2180:     levelFlightLevelMetric  [3] LevelFlightLevelMetric",
          "2185:     longitudeType       LongitudeType,",
          "2186:     longitudeDirection  LongitudeDirection",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2196: LongitudeDegreesMinutes ::= SEQUENCE",
          "2197: {",
          "2200: }",
          "2202: LongitudeDegreesMinutesSeconds ::= SEQUENCE",
          "2203: {",
          "2207: }",
          "2209: LongitudeDirection ::= ENUMERATED",
          "2210: {",
          "2213: }",
          "2215: LongitudeWholeDegrees ::= INTEGER (0..179)",
          "",
          "[Removed Lines]",
          "2198:   longitudeWholeDegrees LongitudeWholeDegrees,",
          "2199:   minutesLatLon     MinutesLatLon",
          "2204:   longitudeWholeDegrees LongitudeWholeDegrees,",
          "2205:   latLonWholeMinutes  LatLonWholeMinutes,",
          "2206:   secondsLatLon     SecondsLatLon",
          "2211:   east (0),",
          "2212:   west (1)",
          "",
          "[Added Lines]",
          "2194:     longitudeWholeDegrees LongitudeWholeDegrees,",
          "2195:     minutesLatLon         MinutesLatLon",
          "2200:     longitudeWholeDegrees LongitudeWholeDegrees,",
          "2201:     latLonWholeMinutes    LatLonWholeMinutes,",
          "2202:     secondsLatLon         SecondsLatLon",
          "2207:     east  (0),",
          "2208:     west  (1)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2218: LongitudeReportingPoints ::= SEQUENCE",
          "2219: {",
          "2222: }",
          "2224: LongitudeType ::= CHOICE",
          "2225: {",
          "2229: }",
          "2231: MinutesLatLon ::= INTEGER (0..5999)",
          "",
          "[Removed Lines]",
          "2220:   longitudeDirection LongitudeDirection,",
          "2221:   longitudeDegrees  LongitudeDegrees",
          "2226:   longitudeDegrees    [0] LongitudeDegrees,",
          "2227:   longitudeDegreesMinutes [1] LongitudeDegreesMinutes,",
          "2228:   longitudeDMS      [2] LongitudeDegreesMinutesSeconds",
          "",
          "[Added Lines]",
          "2216:     longitudeDirection  LongitudeDirection,",
          "2217:     longitudeDegrees    LongitudeDegrees",
          "2222:     longitudeDegrees        [0] LongitudeDegrees,",
          "2223:     longitudeDegreesMinutes [1] LongitudeDegreesMinutes,",
          "2224:     longitudeDMS            [2] LongitudeDegreesMinutesSeconds",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2237: Navaid ::= SEQUENCE",
          "2238: {",
          "2241: }",
          "2243: NavaidName ::= IA5String (SIZE (1..4))",
          "",
          "[Removed Lines]",
          "2239:   name  [0] NavaidName,",
          "2240:   latlon [1] LatitudeLongitude OPTIONAL",
          "",
          "[Added Lines]",
          "2235:     name    [0] NavaidName,",
          "2236:     latlon  [1] LatitudeLongitude OPTIONAL",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2247: PlaceBearing ::= SEQUENCE",
          "2248: {",
          "2251: }",
          "2253: PlaceBearingDistance ::= SEQUENCE",
          "2254: {",
          "2258: }",
          "2260: PlaceBearingPlaceBearing ::= SEQUENCE SIZE (2) OF PlaceBearing",
          "2262: Position ::= CHOICE",
          "2263: {",
          "2269: }",
          "2271: PositionDegrees ::= SEQUENCE",
          "2272: {",
          "2275: }",
          "2278: PositionDistanceSpecifiedDirection ::= SEQUENCE",
          "2279: {",
          "2282: }",
          "2284: PositionLevel ::= SEQUENCE",
          "2285: {",
          "2288: }",
          "2290: PositionLevelLevel ::= SEQUENCE",
          "2291: {",
          "2294: }",
          "2296: PositionLevelSpeed ::= SEQUENCE",
          "2297: {",
          "2300: }",
          "2302: PositionPosition ::= SEQUENCE SIZE (2) OF Position",
          "2304: PositionProcedureName ::= SEQUENCE",
          "2305: {",
          "2308: }",
          "2310: PositionReport ::= SEQUENCE",
          "2311: {",
          "2334: }",
          "2336: PositionRouteClearanceIndex ::= SEQUENCE",
          "2337: {",
          "2340: }",
          "2342: PositionSpeed ::= SEQUENCE",
          "2343: {",
          "2346: }",
          "2348: PositionSpeedSpeed ::= SEQUENCE",
          "2349: {",
          "2352: }",
          "2354: PositionTime ::= SEQUENCE",
          "2355: {",
          "2358: }",
          "2360: PositionTimeLevel ::= SEQUENCE",
          "2361: {",
          "2364: }",
          "2366: PositionTimeTime ::= SEQUENCE",
          "2367: {",
          "2370: }",
          "2372: PositionUnitNameFrequency ::= SEQUENCE",
          "2373: {",
          "2377: }",
          "2379: Procedure ::= IA5String (SIZE (1..20))",
          "2381: ProcedureName ::= SEQUENCE",
          "2382: {",
          "2386: }",
          "2388: ProcedureTransition ::= IA5String (SIZE (1..5))",
          "2390: ProcedureType ::= ENUMERATED",
          "2391: {",
          "2395: }",
          "2397: PublishedIdentifier ::= CHOICE",
          "2398: {",
          "2401: }",
          "2403: RemainingFuel ::= Time",
          "2405: RemainingFuelPersonsOnBoard ::= SEQUENCE",
          "2406: {",
          "2409: }",
          "2411: ReportingPoints ::= SEQUENCE",
          "2412: {",
          "2415: }",
          "2417: RevisionNumber ::= INTEGER (1..16)",
          "2419: RouteAndLevels ::= SEQUENCE",
          "2420: {",
          "2423: }",
          "2425: RouteClearance ::= SEQUENCE",
          "2426: {",
          "2436: }",
          "2438: RouteClearanceIndex ::= INTEGER (1..2)",
          "",
          "[Removed Lines]",
          "2249:   publishedIdentifier PublishedIdentifier,",
          "2250:   degrees       Degrees",
          "2255:   publishedIdentifier PublishedIdentifier,",
          "2256:   degrees       Degrees,",
          "2257:   distance      Distance",
          "2264:   fixName        [0] FixName,",
          "2265:   navaid        [1] Navaid,",
          "2266:   airport        [2] Airport,",
          "2267:   latitudeLongitude   [3] LatitudeLongitude,",
          "2268:   placeBearingDistance [4] PlaceBearingDistance",
          "2273:   position Position,",
          "2274:   degrees  Degrees",
          "2280:   position Position,",
          "2281:   distanceSpecifiedDirection DistanceSpecifiedDirection",
          "2286:   position Position,",
          "2287:   level   Level",
          "2292:   position Position,",
          "2293:   levels LevelLevel",
          "2298:   positionlevel PositionLevel,",
          "2299:   speed     Speed",
          "2306:   position   Position,",
          "2307:   procedureName ProcedureName",
          "2312:   positioncurrent     [0]  Position,",
          "2313:   timeatpositioncurrent  [1]  Time,",
          "2314:   level          [2]  Level,",
          "2315:   fixnext         [3]  Position    OPTIONAL,",
          "2316:   timeetaatfixnext    [4]  Time      OPTIONAL,",
          "2317:   fixnextplusone     [5]  Position    OPTIONAL,",
          "2318:   timeetaatdestination  [6]  Time      OPTIONAL,",
          "2319:   remainingFuel      [7]  RemainingFuel  OPTIONAL,",
          "2320:   temperature       [8]  Temperature   OPTIONAL,",
          "2321:   winds          [9]  Winds      OPTIONAL,",
          "2322:   turbulence       [10] Turbulence   OPTIONAL,",
          "2323:   icing          [11] Icing      OPTIONAL,",
          "2324:   speed          [12] Speed      OPTIONAL,",
          "2325:   speedground       [13] SpeedGround   OPTIONAL,",
          "2326:   verticalChange     [14] VerticalChange OPTIONAL,",
          "2327:   trackAngle       [15] Degrees     OPTIONAL,",
          "2328:   heading         [16] Degrees     OPTIONAL,",
          "2329:   distance        [17] Distance    OPTIONAL,",
          "2330:   humidity        [18] Humidity    OPTIONAL,",
          "2331:   reportedWaypointPosition[19] Position    OPTIONAL,",
          "2332:   reportedWaypointTime  [20] Time      OPTIONAL,",
          "2333:   reportedWaypointLevel  [21] Level      OPTIONAL",
          "2338:   position      Position,",
          "2339:   routeClearanceIndex RouteClearanceIndex",
          "2344:   position Position,",
          "2345:   speed   Speed",
          "2350:   position Position,",
          "2351:   speeds  SpeedSpeed",
          "2356:   position Position,",
          "2357:   time   Time",
          "2362:   positionTime PositionTime,",
          "2363:   level Level",
          "2368:   position Position,",
          "2369:   times   TimeTime",
          "2374:   position Position,",
          "2375:   unitname UnitName,",
          "2376:  frequency Frequency",
          "2383:   type    [0] ProcedureType,",
          "2384:   procedure  [1] Procedure,",
          "2385:   transition [2] ProcedureTransition OPTIONAL",
          "2392:   arrival  (0),",
          "2393:   approach (1),",
          "2394:   departure (2)",
          "2399:   fixName [0] FixName,",
          "2400:   navaid [1] Navaid",
          "2407:   remainingFuel  RemainingFuel,",
          "2408:   personsOnBoard PersonsOnBoard",
          "2413:   latLonReportingPoints [0] LatLonReportingPoints,",
          "2414:   degreeIncrement    [1] DegreeIncrement     OPTIONAL",
          "2421:   routeOfFlight  RouteInformation,",
          "2422:   levelsOfFlight LevelsOfFlight",
          "2427:   airportDeparture      [0] Airport                   OPTIONAL,",
          "2428:   airportDestination     [1] Airport                   OPTIONAL,",
          "2429:   runwayDeparture       [2] Runway                   OPTIONAL,",
          "2430:   procedureDeparture     [3] ProcedureName                OPTIONAL,",
          "2431:   runwayArrival        [4] Runway                   OPTIONAL,",
          "2432:   procedureApproach      [5] ProcedureName                OPTIONAL,",
          "2433:   procedureArrival      [6] ProcedureName                OPTIONAL,",
          "2434:   routeInformations      [7] SEQUENCE SIZE (1..128) OF RouteInformation OPTIONAL,",
          "2435:   routeInformationAdditional [8] RouteInformationAdditional         OPTIONAL",
          "",
          "[Added Lines]",
          "2245:     publishedIdentifier PublishedIdentifier,",
          "2246:     degrees             Degrees",
          "2251:     publishedIdentifier PublishedIdentifier,",
          "2252:     degrees             Degrees,",
          "2253:     distance            Distance",
          "2260:     fixName               [0] FixName,",
          "2261:     navaid                [1] Navaid,",
          "2262:     airport               [2] Airport,",
          "2263:     latitudeLongitude     [3] LatitudeLongitude,",
          "2264:     placeBearingDistance  [4] PlaceBearingDistance",
          "2269:     position  Position,",
          "2270:     degrees   Degrees",
          "2276:     position  Position,",
          "2277:     distanceSpecifiedDirection  DistanceSpecifiedDirection",
          "2282:     position  Position,",
          "2283:     level     Level",
          "2288:     position  Position,",
          "2289:     levels  LevelLevel",
          "2294:     positionlevel PositionLevel,",
          "2295:     speed         Speed",
          "2302:     position      Position,",
          "2303:     procedureName ProcedureName",
          "2308:     positioncurrent         [0]   Position,",
          "2309:     timeatpositioncurrent   [1]   Time,",
          "2310:     level                   [2]   Level,",
          "2311:     fixnext                 [3]   Position        OPTIONAL,",
          "2312:     timeetaatfixnext        [4]   Time            OPTIONAL,",
          "2313:     fixnextplusone          [5]   Position        OPTIONAL,",
          "2314:     timeetaatdestination    [6]   Time            OPTIONAL,",
          "2315:     remainingFuel           [7]   RemainingFuel   OPTIONAL,",
          "2316:     temperature             [8]   Temperature     OPTIONAL,",
          "2317:     winds                   [9]   Winds           OPTIONAL,",
          "2318:     turbulence              [10]  Turbulence      OPTIONAL,",
          "2319:     icing                   [11]  Icing           OPTIONAL,",
          "2320:     speed                   [12]  Speed           OPTIONAL,",
          "2321:     speedground             [13]  SpeedGround     OPTIONAL,",
          "2322:     verticalChange          [14]  VerticalChange  OPTIONAL,",
          "2323:     trackAngle              [15]  Degrees         OPTIONAL,",
          "2324:     heading                 [16]  Degrees         OPTIONAL,",
          "2325:     distance                [17]  Distance        OPTIONAL,",
          "2326:     humidity                [18]  Humidity        OPTIONAL,",
          "2327:     reportedWaypointPosition[19]  Position        OPTIONAL,",
          "2328:     reportedWaypointTime    [20]  Time            OPTIONAL,",
          "2329:     reportedWaypointLevel   [21]  Level           OPTIONAL",
          "2334:     position            Position,",
          "2335:     routeClearanceIndex RouteClearanceIndex",
          "2340:     position  Position,",
          "2341:     speed     Speed",
          "2346:     position  Position,",
          "2347:     speeds    SpeedSpeed",
          "2352:     position  Position,",
          "2353:     time      Time",
          "2358:     positionTime  PositionTime,",
          "2359:     level Level",
          "2364:     position  Position,",
          "2365:     times     TimeTime",
          "2370:     position  Position,",
          "2371:     unitname  UnitName,",
          "2372:   frequency Frequency",
          "2379:     type        [0] ProcedureType,",
          "2380:     procedure   [1] Procedure,",
          "2381:     transition  [2] ProcedureTransition OPTIONAL",
          "2388:     arrival   (0),",
          "2389:     approach  (1),",
          "2390:     departure (2)",
          "2395:     fixName [0] FixName,",
          "2396:     navaid  [1] Navaid",
          "2403:     remainingFuel   RemainingFuel,",
          "2404:     personsOnBoard  PersonsOnBoard",
          "2409:     latLonReportingPoints [0] LatLonReportingPoints,",
          "2410:     degreeIncrement       [1] DegreeIncrement         OPTIONAL",
          "2417:     routeOfFlight   RouteInformation,",
          "2418:     levelsOfFlight  LevelsOfFlight",
          "2423:     airportDeparture            [0] Airport                                     OPTIONAL,",
          "2424:     airportDestination          [1] Airport                                     OPTIONAL,",
          "2425:     runwayDeparture             [2] Runway                                      OPTIONAL,",
          "2426:     procedureDeparture          [3] ProcedureName                               OPTIONAL,",
          "2427:     runwayArrival               [4] Runway                                      OPTIONAL,",
          "2428:     procedureApproach           [5] ProcedureName                               OPTIONAL,",
          "2429:     procedureArrival            [6] ProcedureName                               OPTIONAL,",
          "2430:     routeInformations           [7] SEQUENCE SIZE (1..128)  OF RouteInformation OPTIONAL,",
          "2431:     routeInformationAdditional  [8] RouteInformationAdditional                  OPTIONAL",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2444: RouteInformation ::= CHOICE",
          "2445: {",
          "2451: }",
          "2454: RouteInformationAdditional ::= SEQUENCE",
          "2455: {",
          "2462: }",
          "2464: RTARequiredTimeArrival ::= SEQUENCE",
          "2465: {",
          "2469: }",
          "2471: RTATime ::= SEQUENCE",
          "2472: {",
          "2475: }",
          "2477: RTATolerance ::= INTEGER (1..150)",
          "",
          "[Removed Lines]",
          "2446:   publishedIdentifier    [0] PublishedIdentifier,",
          "2447:   latitudeLongitude     [1] LatitudeLongitude,",
          "2448:   placeBearingPlaceBearing [2] PlaceBearingPlaceBearing,",
          "2449:   placeBearingDistance   [3] PlaceBearingDistance,",
          "2450:   aTSRouteDesignator    [4] ATSRouteDesignator",
          "2456:   aTWAlongTrackWaypoints [0] SEQUENCE SIZE (1..8) OF ATWAlongTrackWaypoint  OPTIONAL,",
          "2457:   reportingpoints     [1] ReportingPoints                 OPTIONAL,",
          "2458:   interceptCourseFroms  [2] SEQUENCE SIZE (1..4) OF InterceptCourseFrom   OPTIONAL,",
          "2459:   holdAtWaypoints     [3] SEQUENCE SIZE (1..8) OF Holdatwaypoint     OPTIONAL,",
          "2460:   waypointSpeedLevels   [4] SEQUENCE SIZE (1..32) OF WaypointSpeedLevel   OPTIONAL,",
          "2461:   rTARequiredTimeArrivals [5] SEQUENCE SIZE (1..32) OF RTARequiredTimeArrival OPTIONAL",
          "2466:   position   [0] Position,",
          "2467:   rTATime    [1] RTATime,",
          "2468:   rTATolerance [2] RTATolerance OPTIONAL",
          "2473:   time      Time,",
          "2474:   timeTolerance  TimeTolerance",
          "",
          "[Added Lines]",
          "2442:     publishedIdentifier       [0] PublishedIdentifier,",
          "2443:     latitudeLongitude         [1] LatitudeLongitude,",
          "2444:     placeBearingPlaceBearing  [2] PlaceBearingPlaceBearing,",
          "2445:     placeBearingDistance      [3] PlaceBearingDistance,",
          "2446:     aTSRouteDesignator        [4] ATSRouteDesignator",
          "2452:     aTWAlongTrackWaypoints  [0] SEQUENCE SIZE (1..8) OF ATWAlongTrackWaypoint   OPTIONAL,",
          "2453:     reportingpoints         [1] ReportingPoints                                 OPTIONAL,",
          "2454:     interceptCourseFroms    [2] SEQUENCE SIZE (1..4) OF InterceptCourseFrom     OPTIONAL,",
          "2455:     holdAtWaypoints         [3] SEQUENCE SIZE (1..8) OF Holdatwaypoint          OPTIONAL,",
          "2456:     waypointSpeedLevels     [4] SEQUENCE SIZE (1..32) OF WaypointSpeedLevel     OPTIONAL,",
          "2457:     rTARequiredTimeArrivals [5] SEQUENCE SIZE (1..32) OF RTARequiredTimeArrival OPTIONAL",
          "2462:     position      [0] Position,",
          "2463:     rTATime       [1] RTATime,",
          "2464:     rTATolerance  [2] RTATolerance  OPTIONAL",
          "2469:     time            Time,",
          "2470:     timeTolerance   TimeTolerance",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2480: Runway ::= SEQUENCE",
          "2481: {",
          "2484: }",
          "2486: RunwayDirection ::= INTEGER (1..36)",
          "2488: RunwayConfiguration ::= ENUMERATED",
          "2489: {",
          "2494: }",
          "2496: RunwayRVR ::= SEQUENCE",
          "2497: {",
          "2500: }",
          "2502: RVR ::= CHOICE",
          "2503: {",
          "2506: }",
          "2508: RVRFeet ::= INTEGER (0..6100)",
          "",
          "[Removed Lines]",
          "2482:   direction   RunwayDirection,",
          "2483:   configuration RunwayConfiguration",
          "2490:   left  (0),",
          "2491:   right  (1),",
          "2492:   center (2),",
          "2493:   none  (3)",
          "2498:   runway Runway,",
          "2499:   rVR   RVR",
          "2504:   rVRFeet  [0] RVRFeet,",
          "2505:   rVRMeters [1] RVRMeters",
          "",
          "[Added Lines]",
          "2478:     direction     RunwayDirection,",
          "2479:     configuration RunwayConfiguration",
          "2486:     left    (0),",
          "2487:     right   (1),",
          "2488:     center  (2),",
          "2489:     none    (3)",
          "2494:     runway  Runway,",
          "2495:     rVR     RVR",
          "2500:     rVRFeet   [0] RVRFeet,",
          "2501:     rVRMeters [1] RVRMeters",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2517: Speed ::= CHOICE",
          "2518: {",
          "2526: }",
          "2528: SpeedIndicated ::= INTEGER (0..400)",
          "",
          "[Removed Lines]",
          "2519:   speedIndicated    [0] SpeedIndicated,",
          "2520:   speedIndicatedMetric [1] SpeedIndicatedMetric,",
          "2521:   speedTrue       [2] SpeedTrue,",
          "2522:   speedTrueMetric    [3] SpeedTrueMetric,",
          "2523:   speedGround      [4] SpeedGround,",
          "2524:   speedGroundMetric   [5] SpeedGroundMetric,",
          "2525:   speedMach       [6] SpeedMach",
          "",
          "[Added Lines]",
          "2515:     speedIndicated        [0] SpeedIndicated,",
          "2516:     speedIndicatedMetric  [1] SpeedIndicatedMetric,",
          "2517:     speedTrue             [2] SpeedTrue,",
          "2518:     speedTrueMetric       [3] SpeedTrueMetric,",
          "2519:     speedGround           [4] SpeedGround,",
          "2520:     speedGroundMetric     [5] SpeedGroundMetric,",
          "2521:     speedMach             [6] SpeedMach",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2543: SpeedSpeed ::= SEQUENCE SIZE (2) OF Speed",
          "2544: SpeedTime ::= SEQUENCE",
          "2545: {",
          "2548: }",
          "2550: SpeedTrue ::= INTEGER (0..2000)",
          "",
          "[Removed Lines]",
          "2546:  speed Speed,",
          "2547:  time Time",
          "",
          "[Added Lines]",
          "2542:   speed Speed,",
          "2543:   time  Time",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2556: SpeedType ::= ENUMERATED",
          "2557: {",
          "2568: }",
          "2570: SpeedTypeSpeedTypeSpeedType ::= SEQUENCE SIZE (3) OF SpeedType",
          "2572: SpeedTypeSpeedTypeSpeedTypeSpeed ::= SEQUENCE",
          "2573: {",
          "2576: }",
          "2578: Temperature ::= INTEGER (-100..100)",
          "",
          "[Removed Lines]",
          "2558:   noneSpecified (0),",
          "2559:   indicated   (1),",
          "2560:   true     (2),",
          "2561:   ground    (3),",
          "2562:   mach     (4),",
          "2563:   approach   (5),",
          "2564:   cruise    (6),",
          "2565:   minimum    (7),",
          "2566:   maximum    (8),",
          "2567:   ...",
          "2574:   speedTypes SpeedTypeSpeedTypeSpeedType,",
          "2575:   speed    Speed",
          "",
          "[Added Lines]",
          "2554:     noneSpecified (0),",
          "2555:     indicated     (1),",
          "2556:     true          (2),",
          "2557:     ground        (3),",
          "2558:     mach          (4),",
          "2559:     approach      (5),",
          "2560:     cruise        (6),",
          "2561:     minimum       (7),",
          "2562:     maximum       (8),",
          "2563:     ...",
          "2570:     speedTypes  SpeedTypeSpeedTypeSpeedType,",
          "2571:     speed       Speed",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2581: Time ::= SEQUENCE",
          "2582: {",
          "2585: }",
          "2587: TimeLevel ::= SEQUENCE",
          "2588: {",
          "2591: }",
          "2593: TimeDeparture ::= SEQUENCE",
          "2594: {",
          "2599: }",
          "2602: TimeDistanceSpecifiedDirection ::= SEQUENCE",
          "2603: {",
          "2606: }",
          "2608: TimeDistanceToFromPosition ::= SEQUENCE",
          "2609: {",
          "2614: }",
          "2616: Timehhmmss ::= SEQUENCE",
          "2617: {",
          "2620: }",
          "2622: TimeHours ::= INTEGER (0..23)",
          "",
          "[Removed Lines]",
          "2583:   hours  TimeHours,",
          "2584:   minutes TimeMinutes",
          "2589:   time Time,",
          "2590:   level Level",
          "2595:   timeDepartureAllocated     [0] Time           OPTIONAL,",
          "2596:   timeDepartureControlled     [1] ControlledTime      OPTIONAL,",
          "2597:   timeDepartureClearanceExpected [2] Time           OPTIONAL,",
          "2598:   departureMinimumInterval    [3] DepartureMinimumInterval OPTIONAL",
          "2604:   time            Time,",
          "2605:   distanceSpecifiedDirection DistanceSpecifiedDirection",
          "2610:   time   Time,",
          "2611:  distance Distance,",
          "2612:  tofrom  ToFrom,",
          "2613:  position Position",
          "2618:  hoursminutes Time,",
          "2619:  seconds    TimeSeconds",
          "",
          "[Added Lines]",
          "2579:     hours   TimeHours,",
          "2580:     minutes TimeMinutes",
          "2585:     time  Time,",
          "2586:     level Level",
          "2591:     timeDepartureAllocated          [0] Time                      OPTIONAL,",
          "2592:     timeDepartureControlled         [1] ControlledTime            OPTIONAL,",
          "2593:     timeDepartureClearanceExpected  [2] Time                      OPTIONAL,",
          "2594:     departureMinimumInterval        [3] DepartureMinimumInterval  OPTIONAL",
          "2600:     time                        Time,",
          "2601:     distanceSpecifiedDirection  DistanceSpecifiedDirection",
          "2606:     time      Time,",
          "2607:   distance  Distance,",
          "2608:   tofrom    ToFrom,",
          "2609:   position  Position",
          "2614:   hoursminutes  Time,",
          "2615:   seconds       TimeSeconds",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2625: TimeUnitNameFrequency ::= SEQUENCE",
          "2626: {",
          "2630: }",
          "2632: TimeMinutes ::= INTEGER (0..59)",
          "",
          "[Removed Lines]",
          "2627:   time   Time,",
          "2628:   unitName UnitName,",
          "2629:   frequency Frequency",
          "",
          "[Added Lines]",
          "2623:     time      Time,",
          "2624:     unitName  UnitName,",
          "2625:     frequency Frequency",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2635: TimePosition ::= SEQUENCE",
          "2636: {",
          "2639: }",
          "2641: TimePositionLevel ::= SEQUENCE",
          "2642: {",
          "2645: }",
          "2647: TimePositionLevelSpeed ::= SEQUENCE",
          "2648: {",
          "2651: }",
          "2653: TimeSeconds ::= INTEGER (0..59)",
          "",
          "[Removed Lines]",
          "2637:   time   Time,",
          "2638:   position Position",
          "2643:   timeposition TimePosition,",
          "2644:   level     Level",
          "2649:   timeposition TimePosition,",
          "2650:   levelspeed  LevelSpeed",
          "",
          "[Added Lines]",
          "2633:     time      Time,",
          "2634:     position  Position",
          "2639:     timeposition  TimePosition,",
          "2640:     level         Level",
          "2645:     timeposition  TimePosition,",
          "2646:     levelspeed    LevelSpeed",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2656: TimeSpeed ::= SEQUENCE",
          "2657: {",
          "2660: }",
          "2662: TimeSpeedSpeed ::= SEQUENCE",
          "2663: {",
          "2666: }",
          "2668: TimeTime ::= SEQUENCE SIZE (2) OF Time",
          "2670: TimeToFromPosition ::= SEQUENCE",
          "2671: {",
          "2675: }",
          "2676: TimeTolerance ::= ENUMERATED",
          "2677: {",
          "2681: }",
          "2683: ToFrom ::= ENUMERATED",
          "2684: {",
          "2687: }",
          "2689: ToFromPosition ::= SEQUENCE",
          "2690: {",
          "2693: }",
          "2695: TrafficType ::= ENUMERATED",
          "2696: {",
          "2704: }",
          "2706: Turbulence ::= ENUMERATED",
          "2707: {",
          "2711: }",
          "2713: UnitName ::= SEQUENCE",
          "2714: {",
          "2718: }",
          "2720: UnitNameFrequency ::= SEQUENCE",
          "2721: {",
          "2724: }",
          "2726: VersionNumber ::= INTEGER (0..15)",
          "2728: VerticalChange ::= SEQUENCE",
          "2729: {",
          "2732: }",
          "2734: VerticalDirection ::= ENUMERATED",
          "2735: {",
          "2738: }",
          "2740: VerticalRate ::= CHOICE",
          "2741: {",
          "2744: }",
          "2746: VerticalRateEnglish ::= INTEGER (0..3000)",
          "",
          "[Removed Lines]",
          "2658:   time Time,",
          "2659:   speed Speed",
          "2664:   time    Time,",
          "2665:   speedspeed SpeedSpeed",
          "2672:   time   Time,",
          "2673:   tofrom  ToFrom,",
          "2674:   position Position",
          "2678:   at    (0),",
          "2679:   atorafter (1),",
          "2680:   atorbefore(2)",
          "2685:   to  (0),",
          "2686:   from (1)",
          "2691:   toFrom  ToFrom,",
          "2692:   position Position",
          "2697:   noneSpecified   (0),",
          "2698:   oppositeDirection (1),",
          "2699:   sameDirection   (2),",
          "2700:   converging    (3),",
          "2701:   crossing     (4),",
          "2702:   diverging     (5),",
          "2703:   ...",
          "2708:   light   (0),",
          "2709:   moderate (1),",
          "2710:   severe  (2)",
          "2715:   facilityDesignation [0] FacilityDesignation,",
          "2716:   facilityName    [1] FacilityName     OPTIONAL,",
          "2717:   facilityFunction  [2] FacilityFunction",
          "2722:   unitName UnitName,",
          "2723:   frequency Frequency",
          "2730:   direction VerticalDirection,",
          "2731:   rate   VerticalRate",
          "2736:   up  (0),",
          "2737:   down (1)",
          "2742:   verticalRateEnglish [0] VerticalRateEnglish,",
          "2743:   verticalRateMetric [1] VerticalRateMetric",
          "",
          "[Added Lines]",
          "2654:     time  Time,",
          "2655:     speed Speed",
          "2660:     time        Time,",
          "2661:     speedspeed  SpeedSpeed",
          "2668:     time      Time,",
          "2669:     tofrom    ToFrom,",
          "2670:     position  Position",
          "2674:     at        (0),",
          "2675:     atorafter (1),",
          "2676:     atorbefore(2)",
          "2681:     to    (0),",
          "2682:     from  (1)",
          "2687:     toFrom    ToFrom,",
          "2688:     position  Position",
          "2693:     noneSpecified     (0),",
          "2694:     oppositeDirection (1),",
          "2695:     sameDirection     (2),",
          "2696:     converging        (3),",
          "2697:     crossing          (4),",
          "2698:     diverging         (5),",
          "2699:     ...",
          "2704:     light     (0),",
          "2705:     moderate  (1),",
          "2706:     severe    (2)",
          "2711:     facilityDesignation [0] FacilityDesignation,",
          "2712:     facilityName        [1] FacilityName          OPTIONAL,",
          "2713:     facilityFunction    [2] FacilityFunction",
          "2718:     unitName  UnitName,",
          "2719:     frequency Frequency",
          "2726:     direction VerticalDirection,",
          "2727:     rate      VerticalRate",
          "2732:     up    (0),",
          "2733:     down  (1)",
          "2738:     verticalRateEnglish [0] VerticalRateEnglish,",
          "2739:     verticalRateMetric  [1] VerticalRateMetric",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2752: WaypointSpeedLevel ::= SEQUENCE",
          "2753: {",
          "2757: }",
          "2759: WindDirection ::= INTEGER (1..360)",
          "",
          "[Removed Lines]",
          "2754:   position [0] Position,",
          "2755:   speed   [1] Speed       OPTIONAL,",
          "2756:   aTWLevels [2] ATWLevelSequence OPTIONAL",
          "",
          "[Added Lines]",
          "2750:     position  [0] Position,",
          "2751:     speed     [1] Speed             OPTIONAL,",
          "2752:     aTWLevels [2] ATWLevelSequence  OPTIONAL",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2762: Winds ::= SEQUENCE",
          "2763: {",
          "2766: }",
          "2768: WindSpeed ::= CHOICE",
          "2769: {",
          "2772: }",
          "2774: WindSpeedEnglish ::= INTEGER (0..255)",
          "",
          "[Removed Lines]",
          "2764:   direction WindDirection,",
          "2765:   speed   WindSpeed",
          "2770:   windSpeedEnglish [0] WindSpeedEnglish,",
          "2771:   windSpeedMetric  [1] WindSpeedMetric",
          "",
          "[Added Lines]",
          "2760:     direction WindDirection,",
          "2761:     speed     WindSpeed",
          "2766:     windSpeedEnglish  [0] WindSpeedEnglish,",
          "2767:     windSpeedMetric   [1] WindSpeedMetric",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2787: -- Editor modelines  -  http://www.wireshark.org/tools/modelines.html",
          "2788: --",
          "2789: -- Local variables:",
          "2793: -- End:",
          "2794: --",
          "2797: --",
          "",
          "[Removed Lines]",
          "2790: -- c-basic-offset: 2",
          "2791: -- tab-width: 2",
          "2792: -- indent-tabs-mode: t",
          "2795: -- vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "2796: -- :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "2786: -- c-basic-offset: 4",
          "2787: -- tab-width: 8",
          "2788: -- indent-tabs-mode: nil",
          "2791: -- vi: set shiftwidth=4 tabstop=8 expandtab:",
          "2792: -- :indentSize=4:tabSize=8:noTabs=true:",
          "",
          "---------------"
        ],
        "asn1/atn-cpdlc/atn-cpdlc.cnf||asn1/atn-cpdlc/atn-cpdlc.cnf": [
          "File: asn1/atn-cpdlc/atn-cpdlc.cnf -> asn1/atn-cpdlc/atn-cpdlc.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #.MODULE_IMPORT",
          "6: #.END",
          "",
          "[Removed Lines]",
          "1: # c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t",
          "2: # vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "3: # :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: #.PDU_NEW",
          "15:   AircraftPDUs",
          "19: #.END",
          "22: #.FIELD_RENAME",
          "33: Runway/direction runway_direction",
          "45: ProtectedAircraftPDUs/abortProvider pmcpdlcproviderabortreason",
          "53: #.END",
          "56: #.FN_BODY CPDLCMessage",
          "74: #.END",
          "76: #.FN_BODY AlgorithmIdentifier",
          "81: #.END",
          "83: #.FN_BODY AircraftFlightIdentification",
          "85: #.END",
          "87: #.FN_BODY Airport",
          "89: #.END",
          "91: #.FN_BODY FacilityDesignation",
          "93: #.END",
          "95: #.FN_BODY FreeText",
          "97: #.END",
          "99: #.FN_BODY NavaidName",
          "101: #.END",
          "103: #.FN_BODY Procedure",
          "105: #.END",
          "107: #.FN_BODY ProcedureTransition",
          "109: #.END",
          "111: #.FN_BODY Fix",
          "113: #.END",
          "115: #.FN_BODY ATISCode",
          "117: #.END",
          "119: #.FN_BODY ATSRouteDesignator",
          "121: #.END",
          "123: #.FN_BODY FacilityName",
          "125: #.END",
          "127: #",
          "128: # Editor modelines  -  http://www.wireshark.org/tools/modelines.html",
          "129: #",
          "130: # Local variables:",
          "134: # End:",
          "135: #",
          "138: #",
          "",
          "[Removed Lines]",
          "16:  GroundPDUs",
          "17:  ProtectedAircraftPDUs",
          "18:  ProtectedGroundPDUs",
          "23: AircraftPDUs/send aircraftpdus_send",
          "24: GroundPDUs/send groundpdus_send",
          "25: ATCUplinkMessageData/constrainedData atcuplinkmessagedata_constraineddata",
          "26: ATCDownlinkMessageData/constrainedData atcdownlinkmessagedata_constraineddata",
          "27: ATCDownlinkMessageData/elementIds/_item atcdownlinkmessagedata_elementids_item",
          "28: ATCUplinkMessageData/elementIds/_item atcuplinkmessagedata_elementids_item",
          "29: ATCDownlinkMessageData/elementIds atcdownlinkmessagedata_elementids",
          "30: ATCUplinkMessageData/elementIds atcuplinkmessagedata_elementids",
          "31: ATCUplinkMessage/messageData atcuplinkmessage_messagedata",
          "32: ATCDownlinkMessage/messageData atcdownlinkmessage_messagedata",
          "34: Winds/direction winds_direction",
          "35: DirectionDegrees/direction direction",
          "36: DistanceSpecifiedDirection/direction direction",
          "37: Holdatwaypoint/direction direction",
          "38: HoldClearance/direction direction",
          "39: VerticalChange/direction vertical_direction",
          "40: FixName/name fixname_name",
          "41: Navaid/name navaid_name",
          "42: Winds/speed winds_speed",
          "43: LevelSpeed/speed levelspeed_speed",
          "44: ProtectedGroundPDUs/abortProvider pmcpdlcproviderabortreason",
          "46: ProtectedGroundPDUs/abortUser pmcpdlcuserabortreason",
          "47: ProtectedAircraftPDUs/abortUser pmcpdlcuserabortreason",
          "48: ProtectedStartDownMessage/mode protectedmode",
          "49: ProtectedGroundPDUs/send protecteduplinkmessage",
          "50: ProtectedStartDownMessage/startDownlinkMessage protecteddownlinkmessage",
          "51: ProtectedGroundPDUs/startup protecteduplinkmessage",
          "52: ProtectedAircraftPDUs/startdown protectedstartDownmessage",
          "57:   tvbuff_t *tvb_usr = NULL;",
          "59:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &tvb_usr, NULL);",
          "61:   if (tvb_usr) {",
          "62:    switch(check_heur_msg_type(actx->pinfo)){",
          "63:      case dm:",
          "64:        dissect_atn_cpdlc_ATCDownlinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx, tree, hf_index);",
          "65:        break;",
          "66:      case um:",
          "67:        dissect_atn_cpdlc_ATCUplinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx , tree, hf_index);",
          "68:        break;",
          "69:      default:",
          "70:        break;",
          "71:    }",
          "72:   }",
          "77:   proto_tree *top_tree=NULL;",
          "79:   offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, top_tree, NULL);",
          "84:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 8, FALSE, ia5alpha , 127, NULL);",
          "88:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 4, FALSE, ia5alpha , 127, NULL);",
          "92:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 8, FALSE, ia5alpha , 127, NULL);",
          "96:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 256, FALSE, ia5alpha , 127, NULL);",
          "100:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 4, FALSE, ia5alpha , 127, NULL);",
          "104:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 20, FALSE, ia5alpha , 127, NULL);",
          "108:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "112:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "116:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 1, FALSE, ia5alpha , 127, NULL);",
          "120:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 7, FALSE, ia5alpha , 127, NULL);",
          "124:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,3, 18, FALSE, ia5alpha , 127, NULL);",
          "131: # c-basic-offset: 2",
          "132: # tab-width: 2",
          "133: # indent-tabs-mode: t",
          "136: # vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "137: # :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "12:   GroundPDUs",
          "13:   ProtectedAircraftPDUs",
          "14:   ProtectedGroundPDUs",
          "19: AircraftPDUs/send aircraftpdus_send",
          "20: GroundPDUs/send groundpdus_send",
          "21: ATCUplinkMessageData/constrainedData  atcuplinkmessagedata_constraineddata",
          "22: ATCDownlinkMessageData/constrainedData  atcdownlinkmessagedata_constraineddata",
          "23: ATCDownlinkMessageData/elementIds/_item atcdownlinkmessagedata_elementids_item",
          "24: ATCUplinkMessageData/elementIds/_item atcuplinkmessagedata_elementids_item",
          "25: ATCDownlinkMessageData/elementIds atcdownlinkmessagedata_elementids",
          "26: ATCUplinkMessageData/elementIds atcuplinkmessagedata_elementids",
          "27: ATCUplinkMessage/messageData  atcuplinkmessage_messagedata",
          "28: ATCDownlinkMessage/messageData  atcdownlinkmessage_messagedata",
          "30: Winds/direction winds_direction",
          "31: DirectionDegrees/direction  direction",
          "32: DistanceSpecifiedDirection/direction  direction",
          "33: Holdatwaypoint/direction  direction",
          "34: HoldClearance/direction direction",
          "35: VerticalChange/direction  vertical_direction",
          "36: FixName/name  fixname_name",
          "37: Navaid/name navaid_name",
          "38: Winds/speed winds_speed",
          "39: LevelSpeed/speed  levelspeed_speed",
          "40: ProtectedGroundPDUs/abortProvider pmcpdlcproviderabortreason",
          "42: ProtectedGroundPDUs/abortUser pmcpdlcuserabortreason",
          "43: ProtectedAircraftPDUs/abortUser pmcpdlcuserabortreason",
          "44: ProtectedStartDownMessage/mode  protectedmode",
          "45: ProtectedGroundPDUs/send  protecteduplinkmessage",
          "46: ProtectedStartDownMessage/startDownlinkMessage  protecteddownlinkmessage",
          "47: ProtectedGroundPDUs/startup protecteduplinkmessage",
          "48: ProtectedAircraftPDUs/startdown protectedstartDownmessage",
          "53:     tvbuff_t *tvb_usr = NULL;",
          "55:     offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &tvb_usr, NULL);",
          "57:     if (tvb_usr) {",
          "58:       switch(check_heur_msg_type(actx->pinfo)){",
          "59:           case dm:",
          "60:               dissect_atn_cpdlc_ATCDownlinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx, tree, hf_index);",
          "61:               break;",
          "62:           case um:",
          "63:               dissect_atn_cpdlc_ATCUplinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx , tree, hf_index);",
          "64:               break;",
          "65:           default:",
          "66:               break;",
          "67:       }",
          "68:     }",
          "73:     proto_tree *top_tree=NULL;",
          "75:     offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, top_tree, NULL);",
          "80:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 8, FALSE, ia5alpha , 127, NULL);",
          "84:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 4, FALSE, ia5alpha , 127, NULL);",
          "88:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 8, FALSE, ia5alpha , 127, NULL);",
          "92:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 256, FALSE, ia5alpha , 127, NULL);",
          "96:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 4, FALSE, ia5alpha , 127, NULL);",
          "100:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 20, FALSE, ia5alpha , 127, NULL);",
          "104:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "108:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "112:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 1, FALSE, ia5alpha , 127, NULL);",
          "116:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 7, FALSE, ia5alpha , 127, NULL);",
          "120:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,3, 18, FALSE, ia5alpha , 127, NULL);",
          "127: # c-basic-offset: 4",
          "128: # tab-width: 8",
          "129: # indent-tabs-mode: nil",
          "132: # vi: set shiftwidth=4 tabstop=8 expandtab:",
          "133: # :indentSize=4:tabSize=8:noTabs=true:",
          "",
          "---------------"
        ],
        "asn1/atn-cpdlc/packet-atn-cpdlc-template.c||asn1/atn-cpdlc/packet-atn-cpdlc-template.c": [
          "File: asn1/atn-cpdlc/packet-atn-cpdlc-template.c -> asn1/atn-cpdlc/packet-atn-cpdlc-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  developper comments:",
          "50: #include \"config.h\"",
          "",
          "[Removed Lines]",
          "45:  Which CPDLC messages are supported ?",
          "46:   Protected Mode CPDLC (AeQualifier 22) and Plain Old CPDLC (AeQualifier 2)",
          "47:   The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "",
          "[Added Lines]",
          "40:   Which CPDLC messages are supported ?",
          "41:     Protected Mode CPDLC (AeQualifier 22) and Plain Old CPDLC (AeQualifier 2)",
          "42:     The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: static int dissect_GroundPDUs_PDU(",
          "72: static int dissect_AircraftPDUs_PDU(",
          "77: static int dissect_ProtectedGroundPDUs_PDU(",
          "82: static int dissect_ProtectedAircraftPDUs_PDU(",
          "88: #include \"packet-atn-cpdlc-hf.c\"",
          "",
          "[Removed Lines]",
          "68:   tvbuff_t *tvb _U_,",
          "69:   packet_info *pinfo _U_,",
          "70:   proto_tree *tree _U_,",
          "71:   void *data _U_);",
          "73:   tvbuff_t *tvb _U_,",
          "74:   packet_info *pinfo _U_,",
          "75:   proto_tree *tree _U_,",
          "76:   void *data _U_);",
          "78:   tvbuff_t *tvb _U_,",
          "79:   packet_info *pinfo _U_,",
          "80:   proto_tree *tree _U_,",
          "81:   void *data _U_);",
          "83:   tvbuff_t *tvb _U_,",
          "84:   packet_info *pinfo _U_,",
          "85:   proto_tree *tree _U_,",
          "86:   void *data _U_);",
          "",
          "[Added Lines]",
          "63:     tvbuff_t *tvb _U_,",
          "64:     packet_info *pinfo _U_,",
          "65:     proto_tree *tree _U_,",
          "66:     void *data _U_);",
          "68:     tvbuff_t *tvb _U_,",
          "69:     packet_info *pinfo _U_,",
          "70:     proto_tree *tree _U_,",
          "71:     void *data _U_);",
          "73:     tvbuff_t *tvb _U_,",
          "74:     packet_info *pinfo _U_,",
          "75:     proto_tree *tree _U_,",
          "76:     void *data _U_);",
          "78:     tvbuff_t *tvb _U_,",
          "79:     packet_info *pinfo _U_,",
          "80:     proto_tree *tree _U_,",
          "81:     void *data _U_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99: static int",
          "100: dissect_atn_cpdlc(",
          "105: {",
          "200: }",
          "202: static gboolean",
          "203: dissect_atn_cpdlc_heur(",
          "208: {",
          "301: }",
          "",
          "[Removed Lines]",
          "101:   tvbuff_t *tvb,",
          "102:   packet_info *pinfo,",
          "103:   proto_tree *tree,",
          "104:   void *data _U_)",
          "130:   proto_tree *atn_cpdlc_tree = NULL;",
          "131:   atn_conversation_t *atn_cv = NULL;",
          "139:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "140:     atn_cv = find_atn_conversation(",
          "141:       &pinfo->dst,",
          "142:       pinfo->clnp_dstref,",
          "143:       &pinfo->src );",
          "144:   }",
          "146:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "147:     atn_cv = find_atn_conversation(",
          "148:       &pinfo->src,",
          "149:       pinfo->clnp_srcref,",
          "150:       &pinfo->dst );",
          "151:   }",
          "153:   if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "154:     atn_cv = find_atn_conversation(",
          "155:       &pinfo->src,",
          "156:       pinfo->clnp_srcref,",
          "157:       &pinfo->dst );",
          "158:   }",
          "161:    return 0; }",
          "163:   atn_cpdlc_tree = proto_tree_add_subtree(",
          "164:     tree, tvb, 0, -1, ett_atn_cpdlc, NULL,",
          "165:     ATN_CPDLC_PROTO );",
          "167:   switch(atn_cv->ae_qualifier){",
          "168:     case  pmcpdlc:",
          "169:       if( check_heur_msg_type(pinfo) == um ) {",
          "171:         dissect_ProtectedGroundPDUs_PDU(",
          "172:           tvb,",
          "173:           pinfo,",
          "174:           atn_cpdlc_tree, NULL);",
          "176:         dissect_ProtectedAircraftPDUs_PDU(",
          "177:           tvb,",
          "178:           pinfo,",
          "179:          atn_cpdlc_tree, NULL);",
          "180:       }",
          "181:       break;",
          "182:     case cpdlc:",
          "183:       if( check_heur_msg_type(pinfo) == um ) {",
          "185:         dissect_GroundPDUs_PDU(",
          "186:           tvb,",
          "187:           pinfo,",
          "188:           atn_cpdlc_tree, NULL);",
          "190:         dissect_AircraftPDUs_PDU(",
          "191:           tvb,",
          "192:           pinfo,",
          "193:           atn_cpdlc_tree, NULL);",
          "194:       }",
          "195:       break;",
          "196:     default:",
          "197:       break;",
          "198:   }",
          "199:   return tvb_reported_length_remaining(tvb, 0);",
          "204:   tvbuff_t *tvb,",
          "205:   packet_info *pinfo,",
          "206:   proto_tree *tree,",
          "207:   void *data _U_)",
          "209:   atn_conversation_t *atn_cv = NULL;",
          "210:   volatile gboolean is_atn_cpdlc = FALSE;",
          "211:   volatile gboolean is_pm = FALSE;",
          "212:   int type;",
          "214:   type = check_heur_msg_type(pinfo);",
          "216:   switch(type){",
          "217:    case um:",
          "218:      TRY {",
          "219:       dissect_ProtectedGroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "220:       is_atn_cpdlc = TRUE;",
          "221:       is_pm = TRUE;}",
          "222:      CATCH_ALL{",
          "223:       is_atn_cpdlc = FALSE;",
          "224:       is_pm = FALSE;}",
          "225:      ENDTRY;",
          "226:      if (is_atn_cpdlc) {",
          "227:       break;",
          "228:      }",
          "229:      TRY {",
          "230:           dissect_GroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "231:       is_pm = FALSE;",
          "232:       is_atn_cpdlc = TRUE;}",
          "233:      CATCH_ALL{",
          "234:       is_atn_cpdlc = FALSE;",
          "235:       is_pm = FALSE;}",
          "236:      ENDTRY;",
          "237:     break;",
          "238:   case dm:",
          "239:      TRY {",
          "240:       dissect_ProtectedAircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "241:       is_atn_cpdlc = TRUE;",
          "242:       is_pm = TRUE;}",
          "243:      CATCH_ALL {",
          "244:       is_atn_cpdlc = FALSE;",
          "245:       is_pm = FALSE; }",
          "246:      ENDTRY;",
          "247:      if (is_atn_cpdlc) {",
          "248:       break;",
          "249:      }",
          "250:      TRY{",
          "251:       dissect_AircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "252:       is_atn_cpdlc = TRUE;",
          "253:       is_pm = FALSE;}",
          "254:      CATCH_ALL{",
          "255:       is_atn_cpdlc = FALSE;",
          "256:       is_pm = FALSE;}",
          "257:      ENDTRY;",
          "258:    break;",
          "259:   default:",
          "260:    break;",
          "261:  }",
          "263:  if(is_atn_cpdlc){",
          "271:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "272:     atn_cv = find_atn_conversation(&pinfo->dst,",
          "273:              pinfo->clnp_dstref,",
          "274:              &pinfo->src );",
          "275:   }",
          "277:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "278:     atn_cv = find_atn_conversation(&pinfo->src,",
          "279:              pinfo->clnp_srcref,",
          "280:              &pinfo->dst );",
          "281:   }",
          "283:   if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "284:     atn_cv = find_atn_conversation(&pinfo->src,",
          "285:              pinfo->clnp_srcref,",
          "286:              &pinfo->dst );",
          "287:   }",
          "290:    if(is_pm == TRUE) {",
          "291:     atn_cv->ae_qualifier =  pmcpdlc; }",
          "292:    else {",
          "293:     atn_cv->ae_qualifier =  cpdlc; }",
          "294:    dissect_atn_cpdlc(tvb, pinfo, tree, NULL);",
          "295:   }",
          "297:   is_atn_cpdlc = FALSE;",
          "298:  }",
          "300:  return is_atn_cpdlc;",
          "",
          "[Added Lines]",
          "96:     tvbuff_t *tvb,",
          "97:     packet_info *pinfo,",
          "98:     proto_tree *tree,",
          "99:     void *data _U_)",
          "125:     proto_tree *atn_cpdlc_tree = NULL;",
          "126:     atn_conversation_t *atn_cv = NULL;",
          "134:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "135:         atn_cv = find_atn_conversation(",
          "136:             &pinfo->dst,",
          "137:             pinfo->clnp_dstref,",
          "138:             &pinfo->src );",
          "139:     }",
          "141:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "142:         atn_cv = find_atn_conversation(",
          "143:             &pinfo->src,",
          "144:             pinfo->clnp_srcref,",
          "145:             &pinfo->dst );",
          "146:     }",
          "148:     if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "149:         atn_cv = find_atn_conversation(",
          "150:             &pinfo->src,",
          "151:             pinfo->clnp_srcref,",
          "152:             &pinfo->dst );",
          "153:     }",
          "156:       return 0; }",
          "158:     atn_cpdlc_tree = proto_tree_add_subtree(",
          "159:         tree, tvb, 0, -1, ett_atn_cpdlc, NULL,",
          "160:         ATN_CPDLC_PROTO );",
          "162:     switch(atn_cv->ae_qualifier){",
          "163:         case  pmcpdlc:",
          "164:             if( check_heur_msg_type(pinfo) == um ) {",
          "166:                 dissect_ProtectedGroundPDUs_PDU(",
          "167:                     tvb,",
          "168:                     pinfo,",
          "169:                     atn_cpdlc_tree, NULL);",
          "171:                 dissect_ProtectedAircraftPDUs_PDU(",
          "172:                     tvb,",
          "173:                     pinfo,",
          "174:                   atn_cpdlc_tree, NULL);",
          "175:             }",
          "176:             break;",
          "177:         case cpdlc:",
          "178:             if( check_heur_msg_type(pinfo) == um ) {",
          "180:                 dissect_GroundPDUs_PDU(",
          "181:                     tvb,",
          "182:                     pinfo,",
          "183:                     atn_cpdlc_tree, NULL);",
          "185:                 dissect_AircraftPDUs_PDU(",
          "186:                     tvb,",
          "187:                     pinfo,",
          "188:                     atn_cpdlc_tree, NULL);",
          "189:             }",
          "190:             break;",
          "191:         default:",
          "192:             break;",
          "193:     }",
          "194:     return tvb_reported_length_remaining(tvb, 0);",
          "199:     tvbuff_t *tvb,",
          "200:     packet_info *pinfo,",
          "201:     proto_tree *tree,",
          "202:     void *data _U_)",
          "204:     atn_conversation_t *atn_cv = NULL;",
          "205:     volatile gboolean is_atn_cpdlc = FALSE;",
          "206:     volatile gboolean is_pm = FALSE;",
          "207:     int type;",
          "209:     type = check_heur_msg_type(pinfo);",
          "211:     switch(type){",
          "212:       case um:",
          "213:           TRY {",
          "214:             dissect_ProtectedGroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "215:             is_atn_cpdlc = TRUE;",
          "216:             is_pm = TRUE;}",
          "217:           CATCH_ALL{",
          "218:             is_atn_cpdlc = FALSE;",
          "219:             is_pm = FALSE;}",
          "220:           ENDTRY;",
          "221:           if (is_atn_cpdlc) {",
          "222:             break;",
          "223:           }",
          "224:           TRY {",
          "225:             dissect_GroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "226:             is_pm = FALSE;",
          "227:             is_atn_cpdlc = TRUE;}",
          "228:           CATCH_ALL{",
          "229:             is_atn_cpdlc = FALSE;",
          "230:             is_pm = FALSE;}",
          "231:           ENDTRY;",
          "232:         break;",
          "233:     case dm:",
          "234:           TRY {",
          "235:             dissect_ProtectedAircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "236:             is_atn_cpdlc = TRUE;",
          "237:             is_pm = TRUE;}",
          "238:           CATCH_ALL {",
          "239:             is_atn_cpdlc = FALSE;",
          "240:             is_pm = FALSE; }",
          "241:           ENDTRY;",
          "242:           if (is_atn_cpdlc) {",
          "243:             break;",
          "244:           }",
          "245:           TRY{",
          "246:             dissect_AircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "247:             is_atn_cpdlc = TRUE;",
          "248:             is_pm = FALSE;}",
          "249:           CATCH_ALL{",
          "250:             is_atn_cpdlc = FALSE;",
          "251:             is_pm = FALSE;}",
          "252:           ENDTRY;",
          "253:       break;",
          "254:     default:",
          "255:       break;",
          "256:   }",
          "258:   if(is_atn_cpdlc){",
          "266:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "267:         atn_cv = find_atn_conversation(&pinfo->dst,",
          "268:                           pinfo->clnp_dstref,",
          "269:                           &pinfo->src );",
          "270:     }",
          "272:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "273:         atn_cv = find_atn_conversation(&pinfo->src,",
          "274:                           pinfo->clnp_srcref,",
          "275:                           &pinfo->dst );",
          "276:     }",
          "278:     if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "279:         atn_cv = find_atn_conversation(&pinfo->src,",
          "280:                           pinfo->clnp_srcref,",
          "281:                           &pinfo->dst );",
          "282:     }",
          "285:       if(is_pm == TRUE) {",
          "286:           atn_cv->ae_qualifier =  pmcpdlc; }",
          "287:       else {",
          "288:           atn_cv->ae_qualifier =  cpdlc; }",
          "289:       dissect_atn_cpdlc(tvb, pinfo, tree, NULL);",
          "290:     }",
          "292:       is_atn_cpdlc = FALSE;",
          "293:   }",
          "295:   return is_atn_cpdlc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305: void proto_register_atn_cpdlc (void)",
          "306: {",
          "307:     static hf_register_info hf_atn_cpdlc[] = {",
          "335: }",
          "337: void proto_reg_handoff_atn_cpdlc(void)",
          "338: {",
          "346: }",
          "",
          "[Removed Lines]",
          "308:     #include \"packet-atn-cpdlc-hfarr.c\"",
          "309:    };",
          "311:   static gint *ett[] = {",
          "312:     #include \"packet-atn-cpdlc-ettarr.c\"",
          "313:     &ett_atn_cpdlc",
          "314:   };",
          "317:   proto_atn_cpdlc = proto_register_protocol(",
          "318:     ATN_CPDLC_PROTO ,",
          "319:     \"ATN-CPDLC\",",
          "320:     \"atn-cpdlc\");",
          "322:   proto_register_field_array(",
          "323:     proto_atn_cpdlc,",
          "324:     hf_atn_cpdlc,",
          "325:     array_length(hf_atn_cpdlc));",
          "327:   proto_register_subtree_array(",
          "328:     ett,",
          "329:     array_length(ett));",
          "331:   new_register_dissector(",
          "332:     \"atn-cpdlc\",",
          "333:     dissect_atn_cpdlc,",
          "334:     proto_atn_cpdlc);",
          "340:   heur_dissector_add(",
          "341:     \"atn-ulcs\",",
          "342:     dissect_atn_cpdlc_heur,",
          "343:     \"ATN-CPDLC over ATN-ULCS\",",
          "344:     \"atn-cpdlc-ulcs\",",
          "345:     proto_atn_cpdlc, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "303:         #include \"packet-atn-cpdlc-hfarr.c\"",
          "304:       };",
          "306:     static gint *ett[] = {",
          "307:         #include \"packet-atn-cpdlc-ettarr.c\"",
          "308:         &ett_atn_cpdlc",
          "309:     };",
          "312:     proto_atn_cpdlc = proto_register_protocol(",
          "313:         ATN_CPDLC_PROTO ,",
          "314:         \"ATN-CPDLC\",",
          "315:         \"atn-cpdlc\");",
          "317:     proto_register_field_array(",
          "318:         proto_atn_cpdlc,",
          "319:         hf_atn_cpdlc,",
          "320:         array_length(hf_atn_cpdlc));",
          "322:     proto_register_subtree_array(",
          "323:         ett,",
          "324:         array_length(ett));",
          "326:     new_register_dissector(",
          "327:         \"atn-cpdlc\",",
          "328:         dissect_atn_cpdlc,",
          "329:         proto_atn_cpdlc);",
          "335:     heur_dissector_add(",
          "336:         \"atn-ulcs\",",
          "337:         dissect_atn_cpdlc_heur,",
          "338:         \"ATN-CPDLC over ATN-ULCS\",",
          "339:         \"atn-cpdlc-ulcs\",",
          "340:         proto_atn_cpdlc, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "asn1/atn-ulcs/atn-ulcs.asn||asn1/atn-ulcs/atn-ulcs.asn": [
          "File: asn1/atn-ulcs/atn-ulcs.asn -> asn1/atn-ulcs/atn-ulcs.asn",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: -- File: atn-ulcs.asn",
          "6: -- Sub-Volume IV ASN.1 reference definitions for ICAO Doc. 9705,",
          "7: -- Second Edition",
          "8: -- Version 1.1, 03 Oct 2001",
          "11: -- Technical Provisions by reference to ISO/IEC Standards and/or ITU-T",
          "16: -- the latter are assumed to take precedence.",
          "18: -- The following ASN.1 modules are included here:",
          "25: -- easily be verified by an ASN.1 syntax checker.",
          "28: -- module defined in the connection-oriented ACSE protocol standard.",
          "46: -- General ULCS types",
          "",
          "[Removed Lines]",
          "1: -- c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t",
          "2: -- vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "3: -- :indentSize=2:tabSize=2:noTabs=false:",
          "10: -- The majority of the ULCS protocol definitions are specified in the ULCS",
          "12: -- Recommendations.  The ASN.1 definitions are reproduced here for ease of",
          "13: -- reference and to allow explanatory annotations to be added. In the case of",
          "14: -- any discrepancy between the definitions here and the corresponding",
          "15: -- definitions defined in or referenced by the ULCS Technical Provisions,",
          "20: -- * General ULCS types.  These are ASN.1 definitions used in the ULCS",
          "21: -- Technical Provisions, though there is no equivalent ASN.1 module",
          "22: -- defined there.  The definitions in this module would generally be",
          "23: -- incorporated into a wider \"user\" protocol module if using ASN.1 automated",
          "24: -- tools.  They are defined in a separate module here so that their syntax can",
          "27: -- * Connection-oriented ACSE definitions.  This is equivalent to the \"ACSE-1\"",
          "30: -- * Information Framework.  This is an extract of relevant definitions from the",
          "31: -- InformationFramework module in the OSI standard \"Directory : Models\".  The",
          "32: -- types defined in this module are not actively used in the ULCS protocol, but",
          "33: -- they are needed to satisfy IMPORTS statements in the ACSE definitions, and",
          "34: -- to allow certain CHOICE types in the ACSE definitions to be sorted correctly",
          "35: -- into canonical order.",
          "38: -- Note.- In the following definitions, the ASN.1 comment \" X\" indicates",
          "39: -- choice elements and optional elements in sequence types that are defined as",
          "40: -- \"Excluded\" in the ULCS profile.  That is, implementations of ULCS provisions",
          "41: -- are never required to encode values for such elements (though they are",
          "42: -- required to indicate the absence of these elements in all instances, by means",
          "43: -- of bits in the appropriate PER preamble or choice index).",
          "",
          "[Added Lines]",
          "6: -- The majority of the ULCS protocol definitions are specified in the ULCS",
          "8: -- Recommendations.  The ASN.1 definitions are reproduced here for ease of",
          "9: -- reference and to allow explanatory annotations to be added. In the case of",
          "10: -- any discrepancy between the definitions here and the corresponding",
          "11: -- definitions defined in or referenced by the ULCS Technical Provisions,",
          "16: -- * General ULCS types.  These are ASN.1 definitions used in the ULCS",
          "17: -- Technical Provisions, though there is no equivalent ASN.1 module",
          "18: -- defined there.  The definitions in this module would generally be",
          "19: -- incorporated into a wider \"user\" protocol module if using ASN.1 automated",
          "20: -- tools.  They are defined in a separate module here so that their syntax can",
          "23: -- * Connection-oriented ACSE definitions.  This is equivalent to the \"ACSE-1\"",
          "26: -- * Information Framework.  This is an extract of relevant definitions from the",
          "27: -- InformationFramework module in the OSI standard \"Directory : Models\".  The",
          "28: -- types defined in this module are not actively used in the ULCS protocol, but",
          "29: -- they are needed to satisfy IMPORTS statements in the ACSE definitions, and",
          "30: -- to allow certain CHOICE types in the ACSE definitions to be sorted correctly",
          "31: -- into canonical order.",
          "34: -- Note.- In the following definitions, the ASN.1 comment \" X\" indicates",
          "35: -- choice elements and optional elements in sequence types that are defined as",
          "36: -- \"Excluded\" in the ULCS profile.  That is, implementations of ULCS provisions",
          "37: -- are never required to encode values for such elements (though they are",
          "38: -- required to indicate the absence of these elements in all instances, by means",
          "39: -- of bits in the appropriate PER preamble or choice index).",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: --Fully-encoded-data ::= SEQUENCE SIZE (1, ...) OF PDV-list",
          "58: Fully-encoded-data ::= SEQUENCE SIZE (1, ..., 2..MAX) OF PDV-list",
          "59: -- contains one or more presentation-data-value-list (PDV-list) values",
          "62: -- Fully-encoded-data ::= SEQUENCE SIZE (1, ..., 2..MAX) OF PDV-list.",
          "66: -- This simplifies matters for some compilers.",
          "68: PDV-list ::= SEQUENCE  {",
          "80: }",
          "82: Transfer-syntax-name ::= OBJECT IDENTIFIER -- ATN: not used for ATN Upper Layers",
          "91: -- Presentation-context-identifier::= INTEGER (1..127, ..., 128..MAX ).",
          "95: -- This simplifies matters for some compilers.  The list of defined values is",
          "96: -- shown here for guidance only, and has no effect on the PER encoding.",
          "",
          "[Removed Lines]",
          "60: -- ATN commentary: The SIZE constraint above differs from the referenced",
          "61: -- standard, which specifies (in 8.2):",
          "63: -- The ULCS provisions specify a simplified, but compatible, efficiency",
          "64: -- constraint as there will never be more than one element in the SEQUENCE OF",
          "65: -- for the foreseeable future.",
          "69:   transfer-syntax-name              Transfer-syntax-name OPTIONAL,       -- X",
          "70:   presentation-context-identifier   Presentation-context-identifier,",
          "71:   presentation-data-values          CHOICE",
          "72:   { single-ASN1-type  [0] ABSTRACT-SYNTAX.&Type",
          "73:     (CONSTRAINED BY {",
          "74:     -- Type corresponding to presentation context identifier -- }) , -- X",
          "75:       octet-aligned  [1] IMPLICIT OCTET STRING,    -- X",
          "76:       arbitrary      [2] IMPLICIT BIT STRING }",
          "77:   -- contains one or more presentation data values from the same",
          "78:   -- presentation context.",
          "79:   -- ATN Commentary: only the arbitrary BIT STRING encoding choice is used.",
          "84: Presentation-context-identifier::= INTEGER  -- ATN: the following values are",
          "85:                       -- ATN-specific",
          "86: {  acse-apdu     (1),",
          "87:   reserved      (2),",
          "88:   user-ase-apdu (3) } (1..127, ... )",
          "89: -- ATN commentary: The SIZE constraint above differs from the referenced",
          "90: -- standard, which specifies (in 8.2):",
          "92: -- The ULCS provisions specify a simplified, but compatible, efficiency",
          "93: -- constraint as there will never be more than 127 presentation contexts in",
          "94: -- ATN for the foreseeable future.",
          "",
          "[Added Lines]",
          "56: -- ATN commentary: The SIZE constraint above differs from the referenced",
          "57: -- standard, which specifies (in 8.2):",
          "59: -- The ULCS provisions specify a simplified, but compatible, efficiency",
          "60: -- constraint as there will never be more than one element in the SEQUENCE OF",
          "61: -- for the foreseeable future.",
          "65:     transfer-syntax-name              Transfer-syntax-name OPTIONAL,       -- X",
          "66:     presentation-context-identifier   Presentation-context-identifier,",
          "67:     presentation-data-values          CHOICE",
          "68:     { single-ASN1-type  [0] ABSTRACT-SYNTAX.&Type",
          "69:         (CONSTRAINED BY {",
          "70:         -- Type corresponding to presentation context identifier -- }) , -- X",
          "71:             octet-aligned  [1] IMPLICIT OCTET STRING,    -- X",
          "72:             arbitrary      [2] IMPLICIT BIT STRING }",
          "73:     -- contains one or more presentation data values from the same",
          "74:     -- presentation context.",
          "75:     -- ATN Commentary: only the arbitrary BIT STRING encoding choice is used.",
          "80: Presentation-context-identifier::= INTEGER  -- ATN: the following values are",
          "81:                                             -- ATN-specific",
          "82: {   acse-apdu     (1),",
          "83:     reserved      (2),",
          "84:     user-ase-apdu (3) } (1..127, ... )",
          "85: -- ATN commentary: The SIZE constraint above differs from the referenced",
          "86: -- standard, which specifies (in 8.2):",
          "88: -- The ULCS provisions specify a simplified, but compatible, efficiency",
          "89: -- constraint as there will never be more than 127 presentation contexts in",
          "90: -- ATN for the foreseeable future.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106: --*************************************************************************",
          "108: ACSE-1 {joint-iso-itu-t association-control(2) modules(0) apdus(0) version1(1)}",
          "111: BEGIN",
          "126: -- *************************************************************************",
          "127: --  EXTERNAL",
          "",
          "[Removed Lines]",
          "109: --  ACSE-1 refers to ACSE version 1",
          "110: DEFINITIONS ::=",
          "112:   EXPORTS",
          "113:    acse-as-id, ACSE-apdu, aCSE-id, Application-context-name, AP-title,",
          "114:    AE-qualifier, -- AE-title, (ATN: AE-title is not needed)",
          "115:    AP-invocation-identifier,",
          "116:    AE-invocation-identifier, Mechanism-name, Authentication-value,",
          "117:    ACSE-requirements;",
          "118:   IMPORTS    Name, RelativeDistinguishedName",
          "119:    FROM InformationFramework",
          "120:     { joint-iso-ccitt ds(5) module(1) informationFramework(1)  2 };",
          "121:    -- The data types Name and RelativeDistinguishedName are imported",
          "122:    -- from ISO/IEC 9594-2 | ITU-T Rec. X.501.",
          "123:    -- ATN Commentary: The relevant InformationFramework extracts are given",
          "124:    -- below.",
          "",
          "[Added Lines]",
          "105: --  ACSE-1 refers to ACSE version 1",
          "106: DEFINITIONS ::=",
          "108:     EXPORTS",
          "109:       acse-as-id, ACSE-apdu, aCSE-id, Application-context-name, AP-title,",
          "110:       AE-qualifier, -- AE-title, (ATN: AE-title is not needed)",
          "111:       AP-invocation-identifier,",
          "112:       AE-invocation-identifier, Mechanism-name, Authentication-value,",
          "113:       ACSE-requirements;",
          "114:     IMPORTS    Name, RelativeDistinguishedName",
          "115:       FROM InformationFramework",
          "116:         { joint-iso-ccitt ds(5) module(1) informationFramework(1)  2 };",
          "117:       -- The data types Name and RelativeDistinguishedName are imported",
          "118:       -- from ISO/IEC 9594-2 | ITU-T Rec. X.501.",
          "119:       -- ATN Commentary: The relevant InformationFramework extracts are given",
          "120:       -- below.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130: -- EXTERNAL is an ASN.1 UNIVERSAL type.  The definition in the PER standard",
          "131: -- ISO/IEC 8825-2 | ITU-T Rec. X.691 is assumed for ACSE.",
          "133: -- fields.  ASN.1 compilers will not in general allow EXTERNAL to be",
          "135: -- and it is invalid ASN.1 to define a type with tag [UNIVERSAL 8]",
          "136: --",
          "137: -- Workaround for bug in asn2wrs in the .cnf file",
          "",
          "[Removed Lines]",
          "132: -- The type is used in ACSE user-information",
          "134: -- redefined (therefore 'EXTERNALt'),",
          "",
          "[Added Lines]",
          "128: -- The type is used in ACSE user-information",
          "130: -- redefined (therefore 'EXTERNALt'),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140: -- tagged assignments.",
          "141: --",
          "142: EXTERNALt ::= [8] IMPLICIT SEQUENCE {",
          "150: --   ATN: implementations are advised to use arbitrary (BIT STRING)",
          "151: --   encodings only (see Guidance Material section 2.6.5.21).",
          "152: --   BIT STRING values are not padded to octet boundaries.",
          "",
          "[Removed Lines]",
          "143:   direct-reference    OBJECT IDENTIFIER   OPTIONAL,       -- X",
          "144:   indirect-reference  INTEGER             OPTIONAL,",
          "145:   data-value-descriptor    ObjectDescriptor    OPTIONAL,  -- X",
          "146:   encoding       CHOICE {",
          "147:     single-ASN1-type    [0] ABSTRACT-SYNTAX.&Type,",
          "148:     octet-aligned  [1] IMPLICIT OCTET STRING,            -- X",
          "149:     arbitrary [2] IMPLICIT BIT STRING }}",
          "",
          "[Added Lines]",
          "139:     direct-reference    OBJECT IDENTIFIER   OPTIONAL,       -- X",
          "140:     indirect-reference  INTEGER             OPTIONAL,",
          "141:     data-value-descriptor    ObjectDescriptor    OPTIONAL,  -- X",
          "142:     encoding       CHOICE {",
          "143:         single-ASN1-type    [0] ABSTRACT-SYNTAX.&Type,",
          "144:         octet-aligned  [1] IMPLICIT OCTET STRING,            -- X",
          "145:         arbitrary [2] IMPLICIT BIT STRING }}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155: -- object identifier assignments",
          "156: acse-as-id OBJECT IDENTIFIER ::=",
          "157: {joint-iso-itu-t association-control(2) abstract-syntax(1) apdus(0) version1(1)}",
          "160: { joint-iso-itu-t association-control(2) ase-id(3) acse-ase(1) version(1) }",
          "161:      --  may be used to identify the Association Control ASE.",
          "163: -- top level CHOICE",
          "164: ACSE-apdu  ::=  CHOICE",
          "165: {",
          "172: }",
          "174: AARQ-apdu  ::=  [ APPLICATION 0 ]  IMPLICIT SEQUENCE",
          "200: }",
          "203: AARE-apdu  ::=  [ APPLICATION 1 ]  IMPLICIT SEQUENCE",
          "229: }",
          "232: RLRQ-apdu  ::=  [ APPLICATION 2 ] IMPLICIT SEQUENCE",
          "236: }",
          "239: RLRE-apdu  ::=  [ APPLICATION 3 ] IMPLICIT SEQUENCE",
          "243: }",
          "246: ABRT-apdu ::= [ APPLICATION 4 ] IMPLICIT SEQUENCE",
          "253: }",
          "256: ABRT-diagnostic ::= ENUMERATED",
          "270: -- never set for ATN ULCS.  Use of authentication is deprecated",
          "271: -- for Doc 9705 ed 1/ed 2.",
          "274: -- ATN Commentary: the above type is not used for ATN ULCS.",
          "276: Application-context-name ::= OBJECT IDENTIFIER",
          "",
          "[Removed Lines]",
          "158:      -- may be used to reference the abstract syntax of the ACSE APDUs",
          "159: aCSE-id OBJECT IDENTIFIER ::=",
          "166:   aarq      AARQ-apdu,     -- ACSE associate request pdu",
          "167:   aare      AARE-apdu,     -- ACSE associate response pdu",
          "168:   rlrq      RLRQ-apdu,     -- ACSE release request pdu",
          "169:   rlre      RLRE-apdu,     -- ACSE release response pdu",
          "170:   abrt      ABRT-apdu,     -- ACSE abort pdu",
          "171:   ...",
          "175: {  protocol-version         [0] IMPLICIT BIT STRING { version1 (0) } DEFAULT { version1 }, -- X",
          "176:   application-context-name     [1] Application-context-name,",
          "177:   called-AP-title          [2] AP-title         OPTIONAL, -- X",
          "178:   called-AE-qualifier        [3] AE-qualifier       OPTIONAL, -- X",
          "179:   called-AP-invocation-identifier  [4] AP-invocation-identifier OPTIONAL, -- X",
          "180:   called-AE-invocation-identifier  [5] AE-invocation-identifier OPTIONAL, -- X",
          "181:   calling-AP-title         [6] AP-title         OPTIONAL,",
          "182:   calling-AE-qualifier       [7] AE-qualifier       OPTIONAL,",
          "183:   calling-AP-invocation-identifier [8] AP-invocation-identifier OPTIONAL, -- X",
          "184:   calling-AE-invocation-identifier [9] AE-invocation-identifier OPTIONAL, -- X",
          "185:   -- The following field is not present if only the Kernel is used.",
          "186:   -- ATN: For Doc 9705 ed 1/ed 2, only the Kernel is required.",
          "187:   sender-acse-requirements     [10] IMPLICIT ACSE-requirements OPTIONAL,",
          "188:   -- The following field is only present if the Authentication functional",
          "189:   -- unit is selected.  ATN: not used in Doc 9705 ed 1/ed 2.",
          "190:   mechanism-name          [11] IMPLICIT Mechanism-name   OPTIONAL,",
          "191:   -- The following field is only present if the Authentication functional",
          "192:   -- unit is selected.  ATN: use is deprecated in Doc 9705 ed 1/ed 2.",
          "193:   calling-authentication-value   [12] EXPLICIT Authentication-value  OPTIONAL,",
          "194:   application-context-name-list   [13] IMPLICIT Application-context-name-list  OPTIONAL, -- X",
          "195:   -- The above field is only present if the Application Context Negotiation",
          "196:   -- functional unit is selected - never for ATN",
          "197:   implementation-information    [29] IMPLICIT Implementation-data  OPTIONAL, -- X",
          "198:   ..., ...,            -- ATN: Note use of extension marker pair",
          "199:   user-information             [30] IMPLICIT Association-information   OPTIONAL",
          "204: {  protocol-version          [0]  IMPLICIT BIT STRING{ version1 (0) }",
          "205:                            DEFAULT { version1 }, -- X",
          "206:   application-context-name      [1] Application-context-name,",
          "207:   result               [2] Associate-result,",
          "208:   result-source-diagnostic      [3] Associate-source-diagnostic,",
          "209:   responding-AP-title         [4] AP-title       OPTIONAL, -- X",
          "210:   responding-AE-qualifier       [5] AE-qualifier     OPTIONAL, -- X",
          "211:   responding-AP-invocation-identifier [6] AP-invocation-identifier OPTIONAL, -- X",
          "212:   responding-AE-invocation-identifier [7] AE-invocation-identifier OPTIONAL, -- X",
          "213:   -- The following field is not present if only the Kernel is used.",
          "214:   -- ATN: For Doc 9705 ed 1/ed 2, only the Kernel is required.",
          "215:   responder-acse-requirements     [8] IMPLICIT ACSE-requirements OPTIONAL,",
          "216:   -- The following field is only present if the Authentication functional",
          "217:   -- unit is selected.  ATN: not used in Doc 9705 ed 1/ed 2.",
          "218:   mechanism-name           [9] IMPLICIT Mechanism-name OPTIONAL,",
          "219:   -- The following field is only present if the Authentication functional",
          "220:   -- unit is selected.  ATN: use is deprecated in Doc 9705 ed 1/ed 2.",
          "221:   responding-authentication-value [10] EXPLICIT Authentication-value OPTIONAL,",
          "222:   application-context-name-list  [11] IMPLICIT Application-context-name-list",
          "223:                                    OPTIONAL, -- X",
          "224:   --  The above field is only present if the Application Context Negotiation",
          "225:   -- functional unit is selected - never for ATN",
          "226:   implementation-information  [29] IMPLICIT Implementation-data OPTIONAL, --X",
          "227:   ..., ...,  -- ATN: Note use of extension marker pair",
          "228:   user-information       [30] IMPLICIT Association-information OPTIONAL",
          "233: {  reason           [0] IMPLICIT Release-request-reason OPTIONAL,",
          "234:   ..., ...,  -- ATN: Note use of extension marker pair",
          "235:   user-information      [30] IMPLICIT Association-information OPTIONAL",
          "240: {  reason           [0] IMPLICIT Release-response-reason OPTIONAL,",
          "241:   ..., ..., -- ATN: Note use of extension marker pair",
          "242:   user-information      [30] IMPLICIT Association-information OPTIONAL",
          "247: {  abort-source        [0]  IMPLICIT ABRT-source,",
          "248:   abort-diagnostic      [1]  IMPLICIT ABRT-diagnostic OPTIONAL,",
          "249:   -- The above field is not present if only the Kernel is used.",
          "250:   -- ATN: For Doc 9705 ed 1/ed 2, only the Kernel is required.",
          "251:   ..., ...,   -- ATN: Note use of extension marker pair",
          "252:   user-information      [30] IMPLICIT Association-information OPTIONAL",
          "257: {  no-reason-given (1),",
          "258:   protocol-error (2),",
          "259:   authentication-mechanism-name-not-recognized (3),",
          "260:   authentication-mechanism-name-required (4),",
          "261:   authentication-failure (5),",
          "262:   authentication-required (6),",
          "263:   ... }",
          "265: ABRT-source  ::=  INTEGER { acse-service-user (0), acse-service-provider (1)} (0..1, ...)",
          "267: ACSE-requirements  ::=  BIT STRING",
          "268: { authentication (0), application-context-negotiation(1) }",
          "269: -- ATN commentary: application-context-negotiation (bit 1) is",
          "273: Application-context-name-list ::= SEQUENCE OF Application-context-name",
          "",
          "[Added Lines]",
          "154:      -- may be used to reference the abstract syntax of the ACSE APDUs",
          "155: aCSE-id OBJECT IDENTIFIER ::=",
          "162:     aarq      AARQ-apdu,     -- ACSE associate request pdu",
          "163:     aare      AARE-apdu,     -- ACSE associate response pdu",
          "164:     rlrq      RLRQ-apdu,     -- ACSE release request pdu",
          "165:     rlre      RLRE-apdu,     -- ACSE release response pdu",
          "166:     abrt      ABRT-apdu,     -- ACSE abort pdu",
          "167:     ...",
          "171: {   protocol-version                  [0] IMPLICIT BIT STRING { version1 (0) } DEFAULT { version1 }, -- X",
          "172:     application-context-name          [1] Application-context-name,",
          "173:     called-AP-title                   [2] AP-title                  OPTIONAL, -- X",
          "174:     called-AE-qualifier               [3] AE-qualifier              OPTIONAL, -- X",
          "175:     called-AP-invocation-identifier   [4] AP-invocation-identifier  OPTIONAL, -- X",
          "176:     called-AE-invocation-identifier   [5] AE-invocation-identifier  OPTIONAL, -- X",
          "177:     calling-AP-title                  [6] AP-title                  OPTIONAL,",
          "178:     calling-AE-qualifier              [7] AE-qualifier              OPTIONAL,",
          "179:     calling-AP-invocation-identifier  [8] AP-invocation-identifier  OPTIONAL, -- X",
          "180:     calling-AE-invocation-identifier  [9] AE-invocation-identifier  OPTIONAL, -- X",
          "181:     -- The following field is not present if only the Kernel is used.",
          "182:     -- ATN: For Doc 9705 ed 1/ed 2, only the Kernel is required.",
          "183:     sender-acse-requirements          [10]  IMPLICIT ACSE-requirements  OPTIONAL,",
          "184:     -- The following field is only present if the Authentication functional",
          "185:     -- unit is selected.  ATN: not used in Doc 9705 ed 1/ed 2.",
          "186:     mechanism-name                    [11]  IMPLICIT Mechanism-name   OPTIONAL,",
          "187:     -- The following field is only present if the Authentication functional",
          "188:     -- unit is selected.  ATN: use is deprecated in Doc 9705 ed 1/ed 2.",
          "189:     calling-authentication-value      [12]  EXPLICIT Authentication-value  OPTIONAL,",
          "190:     application-context-name-list     [13]  IMPLICIT Application-context-name-list  OPTIONAL, -- X",
          "191:     -- The above field is only present if the Application Context Negotiation",
          "192:     -- functional unit is selected - never for ATN",
          "193:     implementation-information        [29]  IMPLICIT Implementation-data  OPTIONAL, -- X",
          "194:     ..., ...,            -- ATN: Note use of extension marker pair",
          "195:     user-information             [30] IMPLICIT Association-information   OPTIONAL",
          "200: {   protocol-version                    [0]   IMPLICIT BIT STRING{ version1 (0) }",
          "201:                                                       DEFAULT { version1 }, -- X",
          "202:     application-context-name            [1] Application-context-name,",
          "203:     result                              [2] Associate-result,",
          "204:     result-source-diagnostic            [3] Associate-source-diagnostic,",
          "205:     responding-AP-title                 [4] AP-title              OPTIONAL, -- X",
          "206:     responding-AE-qualifier             [5] AE-qualifier          OPTIONAL, -- X",
          "207:     responding-AP-invocation-identifier [6] AP-invocation-identifier  OPTIONAL, -- X",
          "208:     responding-AE-invocation-identifier [7] AE-invocation-identifier  OPTIONAL, -- X",
          "209:     -- The following field is not present if only the Kernel is used.",
          "210:     -- ATN: For Doc 9705 ed 1/ed 2, only the Kernel is required.",
          "211:     responder-acse-requirements         [8] IMPLICIT ACSE-requirements  OPTIONAL,",
          "212:     -- The following field is only present if the Authentication functional",
          "213:     -- unit is selected.  ATN: not used in Doc 9705 ed 1/ed 2.",
          "214:     mechanism-name                      [9] IMPLICIT Mechanism-name OPTIONAL,",
          "215:     -- The following field is only present if the Authentication functional",
          "216:     -- unit is selected.  ATN: use is deprecated in Doc 9705 ed 1/ed 2.",
          "217:     responding-authentication-value [10]  EXPLICIT  Authentication-value OPTIONAL,",
          "218:     application-context-name-list   [11]  IMPLICIT  Application-context-name-list",
          "219:                                                                       OPTIONAL, -- X",
          "220:     --  The above field is only present if the Application Context Negotiation",
          "221:     -- functional unit is selected - never for ATN",
          "222:     implementation-information    [29]  IMPLICIT  Implementation-data OPTIONAL, --X",
          "223:     ..., ...,   -- ATN: Note use of extension marker pair",
          "224:     user-information              [30]  IMPLICIT  Association-information OPTIONAL",
          "229: {   reason                      [0] IMPLICIT  Release-request-reason  OPTIONAL,",
          "230:     ..., ...,   -- ATN: Note use of extension marker pair",
          "231:     user-information            [30]  IMPLICIT Association-information  OPTIONAL",
          "236: {   reason                      [0] IMPLICIT  Release-response-reason OPTIONAL,",
          "237:     ..., ..., -- ATN: Note use of extension marker pair",
          "238:     user-information            [30]  IMPLICIT  Association-information OPTIONAL",
          "243: {   abort-source                [0]   IMPLICIT ABRT-source,",
          "244:     abort-diagnostic            [1]   IMPLICIT ABRT-diagnostic  OPTIONAL,",
          "245:     -- The above field is not present if only the Kernel is used.",
          "246:     -- ATN: For Doc 9705 ed 1/ed 2, only the Kernel is required.",
          "247:     ..., ...,     -- ATN: Note use of extension marker pair",
          "248:     user-information            [30]  IMPLICIT  Association-information OPTIONAL",
          "253: {   no-reason-given (1),",
          "254:     protocol-error  (2),",
          "255:     authentication-mechanism-name-not-recognized (3),",
          "256:     authentication-mechanism-name-required (4),",
          "257:     authentication-failure (5),",
          "258:     authentication-required (6),",
          "259:     ... }",
          "261: ABRT-source   ::=   INTEGER { acse-service-user (0),  acse-service-provider (1)}  (0..1, ...)",
          "263: ACSE-requirements   ::=   BIT STRING",
          "264: { authentication (0), application-context-negotiation(1) }",
          "265: -- ATN commentary: application-context-negotiation (bit 1) is",
          "269: Application-context-name-list ::= SEQUENCE OF Application-context-name",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281: -- MG: asn2wrs cannot handle untagged CHOICEs within either a SET or a SEQUENCE.",
          "282: -- https://wiki.wireshark.org/Asn2wrs_Handmassaging_the_ASN_file",
          "283: AP-title ::= CHOICE { -- ATN: See encoding guidance in 2.5.11",
          "289: AE-qualifier ::= CHOICE {-- ATN: See encoding guidance in 2.5.11",
          "296: -- analysed.",
          "300: --  AE-title as discussed in CCITT Rec. X.665 | ISO/IEC 9834-6.",
          "302: AP-title-form1 ::= Name  -- ATN: Not used for ATN ULCS",
          "304: --   application-process title.",
          "306: AE-qualifier-form1 ::= RelativeDistinguishedName  -- ATN: Not used for ULCS",
          "309: --   AP-title-form1.",
          "311: AP-title-form2 ::= OBJECT IDENTIFIER",
          "",
          "[Removed Lines]",
          "284:              -- \"form2\" is encoded as 0 and \"form1\" as 1",
          "285:   ap-title-form2 [0] IMPLICIT AP-title-form2,   -- Object Identifier form",
          "286:   ap-title-form1 [1] IMPLICIT  AP-title-form1,   -- X (Directory name form)",
          "287:   ... }",
          "290:              -- \"form2\" is encoded as 0 and \"form1\" as 1",
          "291:   ae-qualifier-form2 [0]  IMPLICIT   AE-qualifier-form2,   -- INTEGER form",
          "292:   ae-qualifier-form1  [1]  IMPLICIT   AE-qualifier-form1,   -- X (RDN form)",
          "293:   ... }",
          "294: -- ATN commentary: AE-qualifier is set to \"app-type\" in Doc 9705 1st and",
          "295: -- 2nd editions.  For forward compatibility, the value should not be",
          "298: --  When both AP-title and AE-qualifier data values are present in an AARQ or",
          "299: --  AARE APDU, both have the same form to allow the construction of an",
          "303: --   The value assigned to AP-title-form1 is The Directory Name of an",
          "307: --   The value assigned to AE-qualifier-form1 is the relative distinguished name",
          "308: --   of a particular application-entity of the application-process identified by",
          "",
          "[Added Lines]",
          "280:                           -- \"form2\" is encoded as 0 and \"form1\" as 1",
          "281:     ap-title-form2 [0]  IMPLICIT  AP-title-form2,   -- Object Identifier form",
          "282:     ap-title-form1 [1]  IMPLICIT  AP-title-form1,   -- X (Directory name form)",
          "283:     ... }",
          "286:                           -- \"form2\" is encoded as 0 and \"form1\" as 1",
          "287:     ae-qualifier-form2  [0]  IMPLICIT   AE-qualifier-form2,   -- INTEGER form",
          "288:     ae-qualifier-form1  [1]  IMPLICIT   AE-qualifier-form1,   -- X (RDN form)",
          "289:     ... }",
          "290: -- ATN commentary: AE-qualifier is set to \"app-type\" in Doc 9705 1st and",
          "291: -- 2nd editions.  For forward compatibility, the value should not be",
          "294: --  When both AP-title and AE-qualifier data values are present in an AARQ or",
          "295: --  AARE APDU, both have the same form to allow the construction of an",
          "299: --   The value assigned to AP-title-form1 is The Directory Name of an",
          "303: --   The value assigned to AE-qualifier-form1 is the relative distinguished name",
          "304: --   of a particular application-entity of the application-process identified by",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315: -- ATN commentary: The AE-title productions below are commented out,",
          "316: -- as they are not required for ATN ULCS.",
          "319: --     ae-title-form2    AE-title-form2,",
          "320: --     ... }",
          "321: --",
          "327: -- syntactic structure for AE titles.  (Not used for ATN ULCS)",
          "328: --",
          "331: --    AE title has AE-title-form1.",
          "335: --    CCITT Rec. X.665 | ISO/IEC 9834-6.",
          "336: --",
          "337: -- AE-title-form2 ::= OBJECT IDENTIFIER",
          "339: --  AE-qualifier-form2 may be found in CCITT Rec. X.665 | ISO/IEC 9834-6.",
          "341: AE-invocation-identifier ::= INTEGER  -- ATN: not used in ULCS",
          "",
          "[Removed Lines]",
          "317: -- AE-title ::= CHOICE {",
          "318: --     ae-title-form1    AE-title-form1,",
          "322: -- As defined in CCITT Rec. X.650 | ISO 7498-3, an application-entity title is",
          "323: -- composed of an application-process title and an application-entity qualifier.",
          "324: -- The ACSE protocol provides for the transfer of an application-entity title",
          "325: -- value by the transfer of its component values.  However, the following data",
          "326: -- type is provided for International Standards that reference a single",
          "329: -- AE-title-form1 ::= Name",
          "330: --    For access to The Directory (ITU-T Rec. X.500-Series | ISO/IEC 9594), an",
          "332: --    This value can be constructed from AP-title-form1 and AE-qualifier-form1",
          "333: --    values contained in an AARQ or AARE APDU. A discussion of forming an",
          "334: --    AE-title-form1 from AP-title-form1 and AE-qualifier-form1 may be found in",
          "338: --  A discussion of forming an AE-title-form2 from AP-title-form2 and",
          "",
          "[Added Lines]",
          "313: -- AE-title ::= CHOICE {",
          "314: --     ae-title-form1    AE-title-form1,",
          "318: -- As defined in CCITT Rec. X.650 | ISO 7498-3, an application-entity title is",
          "319: -- composed of an application-process title and an application-entity qualifier.",
          "320: -- The ACSE protocol provides for the transfer of an application-entity title",
          "321: -- value by the transfer of its component values.  However, the following data",
          "322: -- type is provided for International Standards that reference a single",
          "325: -- AE-title-form1 ::= Name",
          "326: --    For access to The Directory (ITU-T Rec. X.500-Series | ISO/IEC 9594), an",
          "328: --    This value can be constructed from AP-title-form1 and AE-qualifier-form1",
          "329: --    values contained in an AARQ or AARE APDU. A discussion of forming an",
          "330: --    AE-title-form1 from AP-title-form1 and AE-qualifier-form1 may be found in",
          "334: --  A discussion of forming an AE-title-form2 from AP-title-form2 and",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344: --  ***************************************************************************",
          "346: Associate-result  ::= INTEGER",
          "351: Associate-source-diagnostic  ::=  CHOICE",
          "352: { acse-service-user           [1]  INTEGER",
          "372: }",
          "374: Association-information ::=  SEQUENCE SIZE (1, ..., 0 | 2..MAX) OF EXTERNALt",
          "",
          "[Removed Lines]",
          "347: {  accepted       (0),",
          "348:   rejected-permanent  (1),",
          "349:   rejected-transient  (2)  } (0..2, ...)",
          "353:   {  null  (0),",
          "354:     no-reason-given  (1),",
          "355:     application-context-name-not-supported  (2),",
          "356:     calling-AP-title-not-recognized  (3),",
          "357:     calling-AP-invocation-identifier-not-recognized  (4),",
          "358:     calling-AE-qualifier-not-recognized  (5),",
          "359:     calling-AE-invocation-identifier-not-recognized  (6),",
          "360:     called-AP-title-not-recognized  (7),",
          "361:     called-AP-invocation-identifier-not-recognized  (8),",
          "362:     called-AE-qualifier-not-recognized  (9),",
          "363:     called-AE-invocation-identifier-not-recognized  (10),",
          "364:     authentication-mechanism-name-not-recognized  (11),",
          "365:     authentication-mechanism-name-required  (12),",
          "366:     authentication-failure  (13),",
          "367:     authentication-required  (14)      }     (0..14 ,  ...),",
          "368:     acse-service-provider    [2]    INTEGER",
          "369:    {  null  (0),",
          "370:      no-reason-given  (1),",
          "371:      no-common-acse-version  (2) }    (0..2 , ...)",
          "",
          "[Added Lines]",
          "343: {   accepted              (0),",
          "344:     rejected-permanent    (1),",
          "345:     rejected-transient    (2)  } (0..2, ...)",
          "349:     {   null  (0),",
          "350:         no-reason-given  (1),",
          "351:         application-context-name-not-supported  (2),",
          "352:         calling-AP-title-not-recognized  (3),",
          "353:         calling-AP-invocation-identifier-not-recognized  (4),",
          "354:         calling-AE-qualifier-not-recognized  (5),",
          "355:         calling-AE-invocation-identifier-not-recognized  (6),",
          "356:         called-AP-title-not-recognized  (7),",
          "357:         called-AP-invocation-identifier-not-recognized  (8),",
          "358:         called-AE-qualifier-not-recognized  (9),",
          "359:         called-AE-invocation-identifier-not-recognized  (10),",
          "360:         authentication-mechanism-name-not-recognized  (11),",
          "361:         authentication-mechanism-name-required  (12),",
          "362:         authentication-failure  (13),",
          "363:         authentication-required  (14)      }     (0..14 ,  ...),",
          "364:         acse-service-provider    [2]    INTEGER",
          "365:       {   null  (0),",
          "366:           no-reason-given  (1),",
          "367:           no-common-acse-version  (2) }    (0..2 , ...)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "391: -- Values are encoded in 5 bits, not 3 as might be expected.",
          "393: Authentication-value  ::=   CHOICE      -- ATN: use is deprecated in ed 1/ed 2",
          "398: --        other-mechanism-name  MECHANISM-NAME.&id ({ObjectSet}),",
          "403: }",
          "406: -- establishment.  The authentication mechanism is either explicitly",
          "408: -- belonging to the class MECHANISM-NAME, or it is known implicitly by",
          "413: -- value is the same as the value for \"other-mechanism-name\"",
          "414: END -- of Connection-Oriented ACSE definitions",
          "417: -- *************************************************************************",
          "419: -- ISO/IEC 9594-2:1993 | ITU-T Rec. X.501 (1993 E).  In case of any discrepancy,",
          "420: -- the ISO/IEC standard takes precedence.",
          "421: -- *************************************************************************",
          "",
          "[Removed Lines]",
          "394: {  charstring   [0]  IMPLICIT OCTET STRING,",
          "395:   bitstring    [1]  IMPLICIT BIT STRING,",
          "396:   external     [2]  IMPLICIT EXTERNAL,",
          "397:   other        [3]  IMPLICIT SEQUENCE {",
          "399:      other-mechanism-name  OBJECT IDENTIFIER,",
          "400: --        other-mechanism-value  MECHANISM-NAME.&Type ({ObjectSet}{@.other-mechanism-name})",
          "401:      other-mechanism-value  ANY",
          "402:      }     -- X",
          "404: -- The abstract syntax of (calling/responding) authentication-value is",
          "405: -- determined by the authentication mechanism used during association",
          "407: -- denoted by the &id field (of type OBJECT IDENTIFIER) for a mechanism",
          "409: -- prior agreement between the communicating partners.  If the \"other\"",
          "410: -- component is chosen, then the \"mechanism-name\" component is present",
          "411: -- in accordance with ITU-T Rec. X.680|ISO/IEC 8824. If the value",
          "412: -- \"mechanism-name\" occurs in the AARQ-apdu or the AARE-apdu, then that",
          "418: -- The following definitions are adapted from the Directory standard",
          "",
          "[Added Lines]",
          "390: {   charstring   [0]  IMPLICIT OCTET STRING,",
          "391:     bitstring    [1]  IMPLICIT BIT STRING,",
          "392:     external     [2]  IMPLICIT EXTERNAL,",
          "393:     other        [3]  IMPLICIT SEQUENCE {",
          "395:           other-mechanism-name  OBJECT IDENTIFIER,",
          "396: --        other-mechanism-value  MECHANISM-NAME.&Type ({ObjectSet}{@.other-mechanism-name})",
          "397:           other-mechanism-value  ANY",
          "398:           }     -- X",
          "400: -- The abstract syntax of (calling/responding) authentication-value is",
          "401: -- determined by the authentication mechanism used during association",
          "403: -- denoted by the &id field (of type OBJECT IDENTIFIER) for a mechanism",
          "405: -- prior agreement between the communicating partners.  If the \"other\"",
          "406: -- component is chosen, then the \"mechanism-name\" component is present",
          "407: -- in accordance with ITU-T Rec. X.680|ISO/IEC 8824. If the value",
          "408: -- \"mechanism-name\" occurs in the AARQ-apdu or the AARE-apdu, then that",
          "414: -- The following definitions are adapted from the Directory standard",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "433: RelativeDistinguishedName ::= SET SIZE (1 .. MAX) OF AttributeTypeAndValue",
          "435: AttributeTypeAndValue ::= SEQUENCE {",
          "439: -- Of the ATTRIBUTE information object class, which is used in the",
          "440: -- Directory standards.",
          "441:       null NULL}",
          "445: -- verified by the OSS syntax checker.",
          "446: --   type      ATTRIBUTE.&id ({SupportedAttributes}),",
          "447: --   value     ATTRIBUTE.&Type ({SupportedAttributes} {@type})",
          "",
          "[Removed Lines]",
          "436: -- ATN commentary: The following line has been inserted to allow the Name and",
          "437: -- RelativeDistinguishedName types, as used by ACSE, to be resolved by an",
          "438: -- ASN.1 compiler, without introducing the unnecessary complexity",
          "442: -- The \"real\" components of AttributeTypeAndValue follow.  They have been",
          "443: -- commented out here, but could be restored if required, for example, for",
          "444: -- sharing data types with a Directory implementation.  The syntax has been",
          "",
          "[Added Lines]",
          "432: -- ATN commentary: The following line has been inserted to allow the Name and",
          "433: -- RelativeDistinguishedName types, as used by ACSE, to be resolved by an",
          "434: -- ASN.1 compiler, without introducing the unnecessary complexity",
          "438: -- The \"real\" components of AttributeTypeAndValue follow.  They have been",
          "439: -- commented out here, but could be restored if required, for example, for",
          "440: -- sharing data types with a Directory implementation.  The syntax has been",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "450: --SupportedAttributes    ATTRIBUTE ::=",
          "451: --   {objectClass | aliasedEntryName, ...}",
          "457: -- AE-qualifier and AE-title are all constrained to be the \"form 2\" variants,",
          "458: -- with types Object Identifier, Integer and Object Identifier, respectively.",
          "459: -- It is however necessary to know the syntax of the \"form 1\" variants (Name,",
          "462: -- for PER encoding (see 2.5.11).",
          "463: --",
          "464: --ATTRIBUTE    ::= CLASS {",
          "",
          "[Removed Lines]",
          "453: -- ATN Commentary: ATTRIBUTE is an information object class, specified in",
          "454: -- ISO/IEC 9594-2 | ITU-T Rec. X.501, using the notation defined in",
          "455: -- ISO/IEC 8824-2 | ITU-T Rec. X.681.  However, for ULCS implementation, it",
          "456: -- is only necessary to note that the ACSE CHOICE types AP-title,",
          "460: -- RelativeDistinguishedName and Name, respectively) so that the CHOICE",
          "461: -- elements can be sorted into canonical order, based on their ASN.1 types,",
          "",
          "[Added Lines]",
          "449: -- ATN Commentary: ATTRIBUTE is an information object class, specified in",
          "450: -- ISO/IEC 9594-2 | ITU-T Rec. X.501, using the notation defined in",
          "451: -- ISO/IEC 8824-2 | ITU-T Rec. X.681.  However, for ULCS implementation, it",
          "452: -- is only necessary to note that the ACSE CHOICE types AP-title,",
          "456: -- RelativeDistinguishedName and Name, respectively) so that the CHOICE",
          "457: -- elements can be sorted into canonical order, based on their ASN.1 types,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "502: -- Editor modelines  -  http://www.wireshark.org/tools/modelines.html",
          "503: --",
          "504: -- Local variables:",
          "508: -- End:",
          "509: --",
          "512: --",
          "",
          "[Removed Lines]",
          "505: -- c-basic-offset: 2",
          "506: -- tab-width: 2",
          "507: -- indent-tabs-mode: t",
          "510: -- vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "511: -- :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "501: -- c-basic-offset: 4",
          "502: -- tab-width: 8",
          "503: -- indent-tabs-mode: nil",
          "506: -- vi: set shiftwidth=4 tabstop=8 expandtab:",
          "507: -- :indentSize=4:tabSize=8:noTabs=true:",
          "",
          "---------------"
        ],
        "asn1/atn-ulcs/atn-ulcs.cnf||asn1/atn-ulcs/atn-ulcs.cnf": [
          "File: asn1/atn-ulcs/atn-ulcs.cnf -> asn1/atn-ulcs/atn-ulcs.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #.MODULE_IMPORT",
          "7: #.FIELD_RENAME",
          "16: PDV-list/presentation-data-values/arbitrary pdv-list_presentation-data-values_arbitrary",
          "17: #.END",
          "19: #.PDU_NEW",
          "22: #.END",
          "",
          "[Removed Lines]",
          "1: # c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t",
          "2: # vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "3: # :indentSize=2:tabSize=2:noTabs=false:",
          "8: AARQ-apdu/protocol-version aarq-apdu_protocol-version",
          "9: AARE-apdu/protocol-version aare-apdu_protocol-version",
          "10: RLRE-apdu/reason rlre-apdu_response_reason",
          "11: RLRQ-apdu/reason rlrq-apdu_request_reason",
          "12: EXTERNALt/encoding/single-ASN1-type externalt_encoding_single-asn1-type",
          "13: EXTERNALt/encoding/arbitrary externalt_encoding_arbitrary",
          "14: EXTERNALt/encoding/octet-aligned externalt_encoding_octet-aligned",
          "15: PDV-list/presentation-data-values/single-ASN1-type pdv-list_presentation-data-values_single-asn1-type",
          "20:  Fully-encoded-data",
          "21:  ACSE-apdu",
          "",
          "[Added Lines]",
          "4: AARQ-apdu/protocol-version  aarq-apdu_protocol-version",
          "5: AARE-apdu/protocol-version  aare-apdu_protocol-version",
          "6: RLRE-apdu/reason  rlre-apdu_response_reason",
          "7: RLRQ-apdu/reason  rlrq-apdu_request_reason",
          "8: EXTERNALt/encoding/single-ASN1-type externalt_encoding_single-asn1-type",
          "9: EXTERNALt/encoding/arbitrary  externalt_encoding_arbitrary",
          "10: EXTERNALt/encoding/octet-aligned  externalt_encoding_octet-aligned",
          "11: PDV-list/presentation-data-values/single-ASN1-type  pdv-list_presentation-data-values_single-asn1-type",
          "16:   Fully-encoded-data",
          "17:   ACSE-apdu",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: #.END",
          "43: #.END",
          "132: #.END",
          "135: #.FN_BODY Authentication-value/other/other-mechanism-value",
          "144: #.END",
          "146: #.FN_BODY       Mechanism-name",
          "156: #.END",
          "159: #.FN_BODY Authentication-value/other/other-mechanism-value",
          "168: #.END",
          "207: #.END",
          "296: #.END",
          "354:         &pinfo->dst);",
          "384: #.END",
          "",
          "[Removed Lines]",
          "30: #.FN_BODY Presentation-context-identifier",
          "32:   offset = dissect_per_constrained_integer(",
          "33:     tvb,",
          "34:     offset,",
          "35:     actx,",
          "36:     tree,",
          "37:     hf_index,",
          "38:     1U,",
          "39:     127U,",
          "40:     &ulcs_context_value,",
          "41:     TRUE);",
          "45: #.FN_BODY PDV-list/presentation-data-values/arbitrary",
          "47:   packet_info * pinfo = actx->pinfo;",
          "48:   tvbuff_t *tvb_usr = NULL;",
          "49:   proto_tree *atn_ulcs_tree = NULL;",
          "50:   atn_conversation_t *atn_cv = NULL;",
          "51:   heur_dtbl_entry_t *hdtbl_entry;",
          "54:   offset = dissect_per_bit_string(",
          "55:     tvb,",
          "56:     offset,",
          "57:     actx,",
          "58:     tree,",
          "59:     hf_index,",
          "60:     NO_BOUND,",
          "61:     NO_BOUND,",
          "62:     FALSE,",
          "63:     &tvb_usr,",
          "64:     NULL);",
          "66:   if (tvb_usr) {",
          "68:    switch(ulcs_context_value){",
          "70:        atn_ulcs_tree = proto_tree_add_subtree(",
          "71:          root_tree, tvb, offset, 0,",
          "72:          ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "74:        dissect_ACSE_apdu_PDU(",
          "75:          tvb_new_subset_remaining(tvb_usr, 0),",
          "76:          pinfo,",
          "77:          atn_ulcs_tree, NULL);",
          "78:        break;",
          "82:         atn_cv = find_atn_conversation(",
          "83:           &pinfo->dst,",
          "84:           pinfo->clnp_dstref,",
          "85:           &pinfo->src);",
          "87:         if(atn_cv) {",
          "88:           switch(atn_cv->ae_qualifier){",
          "90:               call_dissector_with_data(",
          "91:                 atn_cm_handle,",
          "92:                 tvb_new_subset_remaining(tvb_usr, 0),",
          "93:                 pinfo,",
          "94:                 root_tree,",
          "95:                 NULL);",
          "96:               break;",
          "99:               call_dissector_with_data(",
          "100:                 atn_cpdlc_handle,",
          "101:                 tvb_new_subset_remaining(tvb_usr, 0),",
          "102:                 pinfo,",
          "103:                 root_tree,",
          "104:                 NULL);",
          "105:               break;",
          "107:               dissector_try_heuristic(",
          "108:                 atn_ulcs_heur_subdissector_list,",
          "109:                 tvb_new_subset_remaining(tvb_usr,0),",
          "110:                 actx->pinfo,",
          "111:                 root_tree,",
          "112:                 &hdtbl_entry,",
          "113:                 NULL);",
          "114:               break;",
          "115:           }",
          "116:         }",
          "117:         else{",
          "118:           dissector_try_heuristic(",
          "119:             atn_ulcs_heur_subdissector_list,",
          "120:             tvb_new_subset_remaining(tvb_usr,0),",
          "121:             actx->pinfo,",
          "122:             root_tree,",
          "123:             &hdtbl_entry,",
          "124:             NULL);",
          "125:         }",
          "126:         break;",
          "127:       default:",
          "128:         break;",
          "130:   }",
          "137:   offset=call_ber_oid_callback(",
          "138:     object_identifier_id,",
          "139:     tvb,",
          "140:     offset,",
          "141:     actx->pinfo,",
          "142:     tree, NULL);",
          "148:   offset = dissect_per_object_identifier(",
          "149:     tvb,",
          "150:     offset,",
          "151:     actx,",
          "152:     tree,",
          "153:     hf_index,",
          "154:     NULL);",
          "161:   offset=call_ber_oid_callback(",
          "162:     object_identifier_id,",
          "163:     tvb,",
          "164:     offset,",
          "165:     actx->pinfo,",
          "166:     tree, NULL);",
          "170: #.FN_BODY AE-qualifier-form2",
          "171:   packet_info * pinfo = actx->pinfo;",
          "172:   atn_conversation_t *atn_cv = NULL;",
          "173:   guint32 ae_qualifier = 0;",
          "176:   offset = dissect_per_integer(",
          "177:     tvb,",
          "178:     offset,",
          "179:     actx,",
          "180:     tree,",
          "181:     hf_index,",
          "182:     &ae_qualifier);",
          "191:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "192:     atn_cv = find_atn_conversation(&pinfo->dst,",
          "193:       pinfo->clnp_dstref,",
          "194:       &pinfo->src );",
          "195:   }",
          "198:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "199:     atn_cv = find_atn_conversation(&pinfo->src,",
          "200:       pinfo->clnp_srcref,",
          "201:       &pinfo->dst );",
          "202:  }",
          "204:  if(atn_cv){",
          "205:    atn_cv->ae_qualifier = ae_qualifier;",
          "206:  }",
          "209: #.FN_BODY AARQ-apdu",
          "210:   packet_info * pinfo = actx->pinfo;",
          "211:   aarq_data_t *aarq_data = NULL;",
          "212:   atn_conversation_t *atn_cv = NULL;",
          "213:   guint32 aircraft_24_bit_address = 0;",
          "216:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "218:     atn_cv = find_atn_conversation(",
          "219:       &pinfo->dst,",
          "220:       pinfo->clnp_dstref,",
          "221:       &pinfo->src );",
          "222:     if(!atn_cv){",
          "223:       atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "224:       atn_cv->ae_qualifier = unknown;",
          "225:       create_atn_conversation(&pinfo->dst,",
          "226:         pinfo->clnp_dstref,",
          "227:         &pinfo->src ,",
          "228:         atn_cv);",
          "229:     }",
          "230:   }",
          "233:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "234:     atn_cv = find_atn_conversation(&pinfo->src,",
          "235:       pinfo->clnp_srcref,",
          "236:       &pinfo->dst );",
          "237:     if(!atn_cv){",
          "238:       atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "239:       atn_cv->ae_qualifier = unknown;",
          "240:       create_atn_conversation(&pinfo->src,",
          "241:         pinfo->clnp_srcref,",
          "242:         &pinfo->dst ,",
          "243:         atn_cv);",
          "244:     }",
          "245:   }",
          "249:   %(DEFAULT_BODY)s",
          "266:   aircraft_24_bit_address =",
          "267:     get_aircraft_24_bit_address_from_nsap(pinfo);",
          "270:   aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "271:     aarq_data_tree,",
          "272:     aircraft_24_bit_address);",
          "277:     aarq_data = wmem_new(wmem_file_scope(), aarq_data_t);",
          "278:     aarq_data-> aarq_pending = FALSE;",
          "281:     wmem_tree_insert32(aarq_data_tree ,aircraft_24_bit_address,(void*)aarq_data);",
          "282:   }",
          "287:   if (aarq_data-> aarq_pending == FALSE ) {",
          "290:    memset(aarq_data,0,sizeof(aarq_data_t));",
          "292:    aarq_data->cv = atn_cv;",
          "293:    aarq_data-> aarq_pending = TRUE;",
          "294:   }",
          "299: #.FN_BODY AARE-apdu",
          "300:  packet_info * pinfo = actx->pinfo;",
          "301:  guint32 aircraft_24_bit_address = 0 ;",
          "302:  atn_conversation_t *atn_cv = NULL;",
          "303:  aarq_data_t *aarq_data = NULL;",
          "315:  aircraft_24_bit_address = get_aircraft_24_bit_address_from_nsap(pinfo);",
          "318:  aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "319:    aarq_data_tree,",
          "320:    aircraft_24_bit_address);",
          "326:  if(!aarq_data) {",
          "328:   return offset;",
          "329:  }",
          "332:  if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "334:   atn_cv = find_atn_conversation(&pinfo->dst,",
          "335:              pinfo->clnp_dstref,",
          "336:              &pinfo->src );",
          "341:    create_atn_conversation(&pinfo->dst,",
          "342:                pinfo->clnp_dstref,",
          "343:                &pinfo->src ,",
          "344:                aarq_data->cv);",
          "345:   }",
          "346:  }",
          "349:  if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "351:   atn_cv = find_atn_conversation(",
          "352:     &pinfo->src,",
          "353:     pinfo->clnp_srcref,",
          "359:    create_atn_conversation(&pinfo->dst,",
          "360:                pinfo->clnp_dstref,",
          "361:                &pinfo->src ,",
          "362:                aarq_data->cv);",
          "366:    create_atn_conversation(&pinfo->src,",
          "367:                pinfo->clnp_srcref,",
          "368:                &pinfo->dst ,",
          "369:                aarq_data->cv);",
          "370:    create_atn_conversation(&pinfo->dst,",
          "371:                pinfo->clnp_dstref,",
          "372:                &pinfo->src ,",
          "373:                aarq_data->cv);",
          "374:   }",
          "375:  }",
          "378:  memset(aarq_data,0,sizeof(aarq_data_t));",
          "379:  aarq_data-> aarq_pending  =  FALSE;",
          "381:  %(DEFAULT_BODY)s",
          "",
          "[Added Lines]",
          "26: #.FN_BODY Presentation-context-identifier",
          "28:     offset = dissect_per_constrained_integer(",
          "29:         tvb,",
          "30:         offset,",
          "31:         actx,",
          "32:         tree,",
          "33:         hf_index,",
          "34:         1U,",
          "35:         127U,",
          "36:         &ulcs_context_value,",
          "37:         TRUE);",
          "41: #.FN_BODY PDV-list/presentation-data-values/arbitrary",
          "43:     packet_info * pinfo = actx->pinfo;",
          "44:     tvbuff_t *tvb_usr = NULL;",
          "45:     proto_tree *atn_ulcs_tree = NULL;",
          "46:     atn_conversation_t *atn_cv = NULL;",
          "47:     heur_dtbl_entry_t *hdtbl_entry;",
          "50:     offset = dissect_per_bit_string(",
          "51:         tvb,",
          "52:         offset,",
          "53:         actx,",
          "54:         tree,",
          "55:         hf_index,",
          "56:         NO_BOUND,",
          "57:         NO_BOUND,",
          "58:         FALSE,",
          "59:         &tvb_usr,",
          "60:         NULL);",
          "62:     if (tvb_usr) {",
          "64:       switch(ulcs_context_value){",
          "66:               atn_ulcs_tree = proto_tree_add_subtree(",
          "67:                   root_tree, tvb, offset, 0,",
          "68:                   ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "70:               dissect_ACSE_apdu_PDU(",
          "71:                   tvb_new_subset_remaining(tvb_usr, 0),",
          "72:                   pinfo,",
          "73:                   atn_ulcs_tree, NULL);",
          "74:               break;",
          "78:                 atn_cv = find_atn_conversation(",
          "79:                     &pinfo->dst,",
          "80:                     pinfo->clnp_dstref,",
          "81:                     &pinfo->src);",
          "83:                 if(atn_cv) {",
          "84:                     switch(atn_cv->ae_qualifier){",
          "86:                             call_dissector_with_data(",
          "87:                                 atn_cm_handle,",
          "88:                                 tvb_new_subset_remaining(tvb_usr, 0),",
          "89:                                 pinfo,",
          "90:                                 root_tree,",
          "91:                                 NULL);",
          "92:                             break;",
          "95:                             call_dissector_with_data(",
          "96:                                 atn_cpdlc_handle,",
          "97:                                 tvb_new_subset_remaining(tvb_usr, 0),",
          "98:                                 pinfo,",
          "99:                                 root_tree,",
          "100:                                 NULL);",
          "101:                             break;",
          "103:                             dissector_try_heuristic(",
          "104:                                 atn_ulcs_heur_subdissector_list,",
          "105:                                 tvb_new_subset_remaining(tvb_usr,0),",
          "106:                                 actx->pinfo,",
          "107:                                 root_tree,",
          "108:                                 &hdtbl_entry,",
          "109:                                 NULL);",
          "110:                             break;",
          "111:                     }",
          "112:                 }",
          "113:                 else{",
          "114:                     dissector_try_heuristic(",
          "115:                         atn_ulcs_heur_subdissector_list,",
          "116:                         tvb_new_subset_remaining(tvb_usr,0),",
          "117:                         actx->pinfo,",
          "118:                         root_tree,",
          "119:                         &hdtbl_entry,",
          "120:                         NULL);",
          "121:                 }",
          "122:                 break;",
          "123:             default:",
          "124:                 break;",
          "126:     }",
          "133:     offset=call_ber_oid_callback(",
          "134:         object_identifier_id,",
          "135:         tvb,",
          "136:         offset,",
          "137:         actx->pinfo,",
          "138:         tree, NULL);",
          "144:     offset = dissect_per_object_identifier(",
          "145:         tvb,",
          "146:         offset,",
          "147:         actx,",
          "148:         tree,",
          "149:         hf_index,",
          "150:         NULL);",
          "157:     offset=call_ber_oid_callback(",
          "158:         object_identifier_id,",
          "159:         tvb,",
          "160:         offset,",
          "161:         actx->pinfo,",
          "162:         tree, NULL);",
          "166: #.FN_BODY AE-qualifier-form2",
          "167:     packet_info * pinfo = actx->pinfo;",
          "168:     atn_conversation_t *atn_cv = NULL;",
          "169:     guint32 ae_qualifier = 0;",
          "172:     offset = dissect_per_integer(",
          "173:         tvb,",
          "174:         offset,",
          "175:         actx,",
          "176:         tree,",
          "177:         hf_index,",
          "178:         &ae_qualifier);",
          "187:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "188:         atn_cv = find_atn_conversation(&pinfo->dst,",
          "189:             pinfo->clnp_dstref,",
          "190:             &pinfo->src );",
          "191:     }",
          "194:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "195:         atn_cv = find_atn_conversation(&pinfo->src,",
          "196:             pinfo->clnp_srcref,",
          "197:             &pinfo->dst );",
          "198:   }",
          "200:   if(atn_cv){",
          "201:       atn_cv->ae_qualifier = ae_qualifier;",
          "202:   }",
          "205: #.FN_BODY AARQ-apdu",
          "206:     packet_info * pinfo = actx->pinfo;",
          "207:     aarq_data_t *aarq_data = NULL;",
          "208:     atn_conversation_t *atn_cv = NULL;",
          "209:     guint32 aircraft_24_bit_address = 0;",
          "212:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "214:         atn_cv = find_atn_conversation(",
          "215:             &pinfo->dst,",
          "216:             pinfo->clnp_dstref,",
          "217:             &pinfo->src );",
          "218:         if(!atn_cv){",
          "219:             atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "220:             atn_cv->ae_qualifier = unknown;",
          "221:             create_atn_conversation(&pinfo->dst,",
          "222:                 pinfo->clnp_dstref,",
          "223:                 &pinfo->src ,",
          "224:                 atn_cv);",
          "225:         }",
          "226:     }",
          "229:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "230:         atn_cv = find_atn_conversation(&pinfo->src,",
          "231:             pinfo->clnp_srcref,",
          "232:             &pinfo->dst );",
          "233:         if(!atn_cv){",
          "234:             atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "235:             atn_cv->ae_qualifier = unknown;",
          "236:             create_atn_conversation(&pinfo->src,",
          "237:                 pinfo->clnp_srcref,",
          "238:                 &pinfo->dst ,",
          "239:                 atn_cv);",
          "240:         }",
          "241:     }",
          "245:     %(DEFAULT_BODY)s",
          "262:     aircraft_24_bit_address =",
          "263:         get_aircraft_24_bit_address_from_nsap(pinfo);",
          "266:     aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "267:         aarq_data_tree,",
          "268:         aircraft_24_bit_address);",
          "273:         aarq_data = wmem_new(wmem_file_scope(), aarq_data_t);",
          "274:         aarq_data-> aarq_pending = FALSE;",
          "277:         wmem_tree_insert32(aarq_data_tree ,aircraft_24_bit_address,(void*)aarq_data);",
          "278:     }",
          "283:     if (aarq_data-> aarq_pending == FALSE ) {",
          "286:       memset(aarq_data,0,sizeof(aarq_data_t));",
          "288:       aarq_data->cv = atn_cv;",
          "289:       aarq_data-> aarq_pending = TRUE;",
          "290:     }",
          "295: #.FN_BODY AARE-apdu",
          "296:   packet_info * pinfo = actx->pinfo;",
          "297:   guint32 aircraft_24_bit_address = 0 ;",
          "298:   atn_conversation_t *atn_cv = NULL;",
          "299:   aarq_data_t *aarq_data = NULL;",
          "311:   aircraft_24_bit_address = get_aircraft_24_bit_address_from_nsap(pinfo);",
          "314:   aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "315:       aarq_data_tree,",
          "316:       aircraft_24_bit_address);",
          "322:   if(!aarq_data) {",
          "324:     return offset;",
          "325:   }",
          "328:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "330:     atn_cv = find_atn_conversation(&pinfo->dst,",
          "331:                           pinfo->clnp_dstref,",
          "332:                           &pinfo->src );",
          "337:       create_atn_conversation(&pinfo->dst,",
          "338:                               pinfo->clnp_dstref,",
          "339:                               &pinfo->src ,",
          "340:                               aarq_data->cv);",
          "341:     }",
          "342:   }",
          "345:   if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "347:     atn_cv = find_atn_conversation(",
          "348:         &pinfo->src,",
          "349:         pinfo->clnp_srcref,",
          "355:       create_atn_conversation(&pinfo->dst,",
          "356:                               pinfo->clnp_dstref,",
          "357:                               &pinfo->src ,",
          "358:                               aarq_data->cv);",
          "362:       create_atn_conversation(&pinfo->src,",
          "363:                               pinfo->clnp_srcref,",
          "364:                               &pinfo->dst ,",
          "365:                               aarq_data->cv);",
          "366:       create_atn_conversation(&pinfo->dst,",
          "367:                               pinfo->clnp_dstref,",
          "368:                               &pinfo->src ,",
          "369:                               aarq_data->cv);",
          "370:     }",
          "371:   }",
          "374:   memset(aarq_data,0,sizeof(aarq_data_t));",
          "375:   aarq_data-> aarq_pending  =  FALSE;",
          "377:   %(DEFAULT_BODY)s",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:                                                             0U, 2U, NULL, TRUE);",
          "391: #.END",
          "395:  offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "396:                                                             0U, 30U, NULL, TRUE);",
          "397: #.END",
          "402:  offset = dissect_per_constrained_integer(",
          "413: #.END",
          "417:   offset = dissect_per_object_identifier(",
          "425: #.END",
          "439:   actx->external.data_value_descr_present = TRUE;",
          "441: #.END",
          "447: #.END",
          "453: #.END",
          "545: #.END",
          "",
          "[Removed Lines]",
          "393: #.FN_BODY Release-request-reason",
          "399: #.FN_BODY Release-response-reason",
          "403:   tvb,",
          "404:   offset,",
          "405:   actx,",
          "406:   tree,",
          "407:   hf_index,",
          "408:   0U,",
          "409:   30U,",
          "410:   NULL,",
          "411:   TRUE);",
          "415: #.FN_BODY Mechanism-name",
          "418:    tvb,",
          "419:    offset,",
          "420:    actx,",
          "421:    tree,",
          "422:    hf_index,",
          "423:    NULL);",
          "427: #.FN_BODY EXTERNALt/data-value-descriptor",
          "429:  offset = dissect_per_octet_string(",
          "430:    tvb,",
          "431:    offset,",
          "432:    actx,",
          "433:    tree,",
          "434:    hf_index,",
          "435:    -1,",
          "436:    -1,",
          "437:    FALSE,",
          "438:    &actx->external.data_value_descriptor);",
          "443: #.FN_BODY EXTERNALt/encoding/single-ASN1-type",
          "445:  %(DEFAULT_BODY)s",
          "449: #.FN_BODY EXTERNALt/encoding/octet-aligned",
          "451:  %(DEFAULT_BODY)s",
          "455: #.FN_BODY EXTERNALt/encoding/arbitrary",
          "456:  tvbuff_t *tvb_usr = NULL;",
          "457:  packet_info * pinfo = actx->pinfo;",
          "458:  atn_conversation_t *atn_cv = NULL;",
          "459:  heur_dtbl_entry_t *hdtbl_entry;",
          "462:  offset = dissect_per_bit_string(",
          "463:   tvb,",
          "464:   offset,",
          "465:   actx,",
          "466:   tree, hf_index,",
          "467:   NO_BOUND,",
          "468:   NO_BOUND,",
          "469:   FALSE,",
          "470:   &tvb_usr,",
          "471:   NULL);",
          "473:  if (tvb_usr) {",
          "475:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "477:    atn_cv = find_atn_conversation(",
          "478:      &pinfo->dst,",
          "479:      pinfo->clnp_dstref,",
          "480:      &pinfo->src);",
          "481:   }",
          "483:   if((pinfo->clnp_srcref) && (!pinfo->clnp_dstref)){",
          "485:    atn_cv = find_atn_conversation(",
          "486:      &pinfo->src,",
          "487:      pinfo->clnp_srcref,",
          "488:      &pinfo->dst);",
          "489:   }",
          "491:   if((pinfo->clnp_srcref) && (pinfo->clnp_dstref)){",
          "493:    atn_cv = find_atn_conversation(",
          "494:      &pinfo->src,",
          "495:      pinfo->clnp_srcref,",
          "496:      &pinfo->dst);",
          "497:   }",
          "499:   if(atn_cv) {",
          "500:     switch(atn_cv->ae_qualifier){",
          "503:        call_dissector_with_data(",
          "504:           atn_cm_handle,",
          "505:           tvb_new_subset_remaining(tvb_usr, 0),",
          "506:           pinfo,",
          "507:           root_tree,",
          "508:           NULL);",
          "509:        break;",
          "513:        call_dissector_with_data(",
          "514:           atn_cpdlc_handle,",
          "515:           tvb_new_subset_remaining(tvb_usr, 0),",
          "516:           pinfo,",
          "517:           root_tree,",
          "518:           NULL);",
          "519:        break;",
          "522:        dissector_try_heuristic(",
          "523:          atn_ulcs_heur_subdissector_list,",
          "524:          tvb_new_subset_remaining(tvb_usr,0),",
          "525:          actx->pinfo,",
          "526:          root_tree,",
          "527:          &hdtbl_entry,",
          "528:          NULL);",
          "529:         break;",
          "530:      }",
          "531:   }else {",
          "533:    dissector_try_heuristic(",
          "534:        atn_ulcs_heur_subdissector_list,",
          "535:        tvb_new_subset_remaining(tvb_usr,0),",
          "536:        actx->pinfo,",
          "537:        root_tree,",
          "538:        &hdtbl_entry,",
          "539:        NULL);",
          "540:   }",
          "541:  }",
          "543:  offset += tvb_reported_length_remaining(tvb, offset);",
          "",
          "[Added Lines]",
          "389: #.FN_BODY Release-request-reason",
          "395: #.FN_BODY Release-response-reason",
          "399:     tvb,",
          "400:     offset,",
          "401:     actx,",
          "402:     tree,",
          "403:     hf_index,",
          "404:     0U,",
          "405:     30U,",
          "406:     NULL,",
          "407:     TRUE);",
          "411: #.FN_BODY Mechanism-name",
          "414:       tvb,",
          "415:       offset,",
          "416:       actx,",
          "417:       tree,",
          "418:       hf_index,",
          "419:       NULL);",
          "423: #.FN_BODY EXTERNALt/data-value-descriptor",
          "425:   offset = dissect_per_octet_string(",
          "426:       tvb,",
          "427:       offset,",
          "428:       actx,",
          "429:       tree,",
          "430:       hf_index,",
          "431:       -1,",
          "432:       -1,",
          "433:       FALSE,",
          "434:       &actx->external.data_value_descriptor);",
          "439: #.FN_BODY EXTERNALt/encoding/single-ASN1-type",
          "441:   %(DEFAULT_BODY)s",
          "445: #.FN_BODY EXTERNALt/encoding/octet-aligned",
          "447:   %(DEFAULT_BODY)s",
          "451: #.FN_BODY EXTERNALt/encoding/arbitrary",
          "452:   tvbuff_t *tvb_usr = NULL;",
          "453:   packet_info * pinfo = actx->pinfo;",
          "454:   atn_conversation_t *atn_cv = NULL;",
          "455:   heur_dtbl_entry_t *hdtbl_entry;",
          "458:   offset = dissect_per_bit_string(",
          "459:     tvb,",
          "460:     offset,",
          "461:     actx,",
          "462:     tree, hf_index,",
          "463:     NO_BOUND,",
          "464:     NO_BOUND,",
          "465:     FALSE,",
          "466:     &tvb_usr,",
          "467:     NULL);",
          "469:   if (tvb_usr) {",
          "471:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "473:       atn_cv = find_atn_conversation(",
          "474:           &pinfo->dst,",
          "475:           pinfo->clnp_dstref,",
          "476:           &pinfo->src);",
          "477:     }",
          "479:     if((pinfo->clnp_srcref) && (!pinfo->clnp_dstref)){",
          "481:       atn_cv = find_atn_conversation(",
          "482:           &pinfo->src,",
          "483:           pinfo->clnp_srcref,",
          "484:           &pinfo->dst);",
          "485:     }",
          "487:     if((pinfo->clnp_srcref) && (pinfo->clnp_dstref)){",
          "489:       atn_cv = find_atn_conversation(",
          "490:           &pinfo->src,",
          "491:           pinfo->clnp_srcref,",
          "492:           &pinfo->dst);",
          "493:     }",
          "495:     if(atn_cv) {",
          "496:         switch(atn_cv->ae_qualifier){",
          "499:               call_dissector_with_data(",
          "500:                     atn_cm_handle,",
          "501:                     tvb_new_subset_remaining(tvb_usr, 0),",
          "502:                     pinfo,",
          "503:                     root_tree,",
          "504:                     NULL);",
          "505:               break;",
          "509:               call_dissector_with_data(",
          "510:                     atn_cpdlc_handle,",
          "511:                     tvb_new_subset_remaining(tvb_usr, 0),",
          "512:                     pinfo,",
          "513:                     root_tree,",
          "514:                     NULL);",
          "515:               break;",
          "518:               dissector_try_heuristic(",
          "519:                   atn_ulcs_heur_subdissector_list,",
          "520:                   tvb_new_subset_remaining(tvb_usr,0),",
          "521:                   actx->pinfo,",
          "522:                   root_tree,",
          "523:                   &hdtbl_entry,",
          "524:                   NULL);",
          "525:                 break;",
          "526:           }",
          "527:     }else {",
          "529:       dissector_try_heuristic(",
          "530:               atn_ulcs_heur_subdissector_list,",
          "531:               tvb_new_subset_remaining(tvb_usr,0),",
          "532:               actx->pinfo,",
          "533:               root_tree,",
          "534:               &hdtbl_entry,",
          "535:               NULL);",
          "536:     }",
          "537:   }",
          "539:   offset += tvb_reported_length_remaining(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "548: # Editor modelines  -  http://www.wireshark.org/tools/modelines.html",
          "549: #",
          "550: # Local variables:",
          "554: # End:",
          "555: #",
          "558: #",
          "",
          "[Removed Lines]",
          "551: # c-basic-offset: 2",
          "552: # tab-width: 2",
          "553: # indent-tabs-mode: t",
          "556: # vi: set shiftwidth=2 tabstop=2 noexpandtab:",
          "557: # :indentSize=2:tabSize=2:noTabs=false:",
          "",
          "[Added Lines]",
          "547: # c-basic-offset: 4",
          "548: # tab-width: 8",
          "549: # indent-tabs-mode: nil",
          "552: # vi: set shiftwidth=4 tabstop=8 expandtab:",
          "553: # :indentSize=4:tabSize=8:noTabs=true:",
          "",
          "---------------"
        ],
        "asn1/atn-ulcs/packet-atn-ulcs-template.c||asn1/atn-ulcs/packet-atn-ulcs-template.c": [
          "File: asn1/atn-ulcs/packet-atn-ulcs-template.c -> asn1/atn-ulcs/packet-atn-ulcs-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: why not using existing ses, pres and acse dissectors ?",
          "65: why using conversations ?",
          "72: what is the use of AARQ/AARE data ?",
          "87: which ATN standard is supported ?",
          "97:  known defects/deficiencies:",
          "",
          "[Removed Lines]",
          "54:  developper comments:",
          "56:   ATN upper layers are derived from OSI standards for session,",
          "57:   presentation and application but the encoding differs",
          "58:   (it's PER instead of BER encoding to save bandwith).",
          "59:   Session and presentation use the \"null\" encoding option,",
          "60:   meaning that they are only present at connection establishment",
          "61:   and ommitted otherwise.",
          "62:   Instead of adapting existing dissectors it seemed simpler and cleaner",
          "63:   to implement everything the new atn-ulcs dissector.",
          "66:   PER encoded user data is ambigous; the same encoding may apply to a CM or",
          "67:   CPDLC PDU. The workaround is to decode on a transport connection basis.",
          "68:   I use my own version of conversations to identify",
          "69:   the transport connection the PDU belongs to for the standard functions",
          "70:   from \"conversation.h\" didn't work out.",
          "73:   Converstions should be maintained on the COTP layer in a standard way",
          "74:   for there are usually more packets available than in the layers above.",
          "75:   In the worst case my dissector is called from a DT packet which",
          "76:   has destination references but no source reference.",
          "77:   I have to guess the reference used the other way round",
          "78:   (curently I am using ACSE PDU'S used during OSI connection establishment for that).",
          "79:   The idea is that each ACSE AARQ is answered by ACSE AARE and having this sequence",
          "80:   I have all the source/destination references for this transport connection.",
          "81:   I use AARQ/AARE data to store the source/destination reference of AARQ as well",
          "82:   as the optional ae-qualifier which tells me the application and",
          "83:   the dissector I have to use.",
          "84:   This approach donesn't work well when there are interleaving AARQ/AARE sequences for",
          "85:   the same aircraft.",
          "88:   The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "89:   No ATN Secutity is supported.",
          "90:   note:",
          "91:   The ATN upper layers are derived from OSI standards (ICAO DOC 9705)",
          "92:   while ATN/IPS (ICAO DOC 9896) which is entirely based on IPV6.",
          "99: - user-information within AARE is sometines not decoded due to an unset flag",
          "100:   (the field is optional). As far as I can tell asn2wrs is right here,",
          "101:   but on the other hand I know that in all of this cases user-information",
          "102:   is present and is processed by the ATN end system.",
          "103:   Maybe a true ATN expert may help me out here.",
          "105:  - The conversation handling is based on src/dst addresses as well as",
          "106:   source or destination references depending on the TP4 packet type.",
          "107:   This means that after some time these references get reused for",
          "108:   new conversations. This almost certain happens for traces longer",
          "109:   than one day rendering this dissector unsuitable for captures exceeding",
          "110:   this one day.",
          "",
          "[Added Lines]",
          "49:  developer comments:",
          "51:     ATN upper layers are derived from OSI standards for session,",
          "52:     presentation and application but the encoding differs",
          "53:     (it's PER instead of BER encoding to save bandwith).",
          "54:     Session and presentation use the \"null\" encoding option,",
          "55:     meaning that they are only present at connection establishment",
          "56:     and ommitted otherwise.",
          "57:     Instead of adapting existing dissectors it seemed simpler and cleaner",
          "58:     to implement everything the new atn-ulcs dissector.",
          "61:     PER encoded user data is ambigous; the same encoding may apply to a CM or",
          "62:     CPDLC PDU. The workaround is to decode on a transport connection basis.",
          "63:     I use my own version of conversations to identify",
          "64:     the transport connection the PDU belongs to for the standard functions",
          "65:     from \"conversation.h\" didn't work out.",
          "68:     Converstions should be maintained on the COTP layer in a standard way",
          "69:     for there are usually more packets available than in the layers above.",
          "70:     In the worst case my dissector is called from a DT packet which",
          "71:     has destination references but no source reference.",
          "72:     I have to guess the reference used the other way round",
          "73:     (curently I am using ACSE PDU'S used during OSI connection establishment for that).",
          "74:     The idea is that each ACSE AARQ is answered by ACSE AARE and having this sequence",
          "75:     I have all the source/destination references for this transport connection.",
          "76:     I use AARQ/AARE data to store the source/destination reference of AARQ as well",
          "77:     as the optional ae-qualifier which tells me the application and",
          "78:     the dissector I have to use.",
          "79:     This approach donesn't work well when there are interleaving AARQ/AARE sequences for",
          "80:     the same aircraft.",
          "83:     The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "84:     No ATN Secutity is supported.",
          "85:     note:",
          "86:     The ATN upper layers are derived from OSI standards (ICAO DOC 9705)",
          "87:     while ATN/IPS (ICAO DOC 9896) which is entirely based on IPV6.",
          "94: - user-information within AARE is sometines not decoded due to an unset flag",
          "95:     (the field is optional). As far as I can tell asn2wrs is right here,",
          "96:     but on the other hand I know that in all of this cases user-information",
          "97:     is present and is processed by the ATN end system.",
          "98:     Maybe a true ATN expert may help me out here.",
          "100:   - The conversation handling is based on src/dst addresses as well as",
          "101:     source or destination references depending on the TP4 packet type.",
          "102:     This means that after some time these references get reused for",
          "103:     new conversations. This almost certain happens for traces longer",
          "104:     than one day rendering this dissector unsuitable for captures exceeding",
          "105:     this one day.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152: static int dissect_atn_ulcs_T_externalt_encoding_single_asn1_type(",
          "160: static int dissect_atn_ulcs_T_externalt_encoding_octet_aligned(",
          "167: static int dissect_atn_ulcs_T_externalt_encoding_arbitrary(",
          "174: static int dissect_ACSE_apdu_PDU(",
          "180: guint32 dissect_per_object_descriptor_t(",
          "194: #include \"packet-atn-ulcs-hf.c\"",
          "",
          "[Removed Lines]",
          "153:   tvbuff_t *tvb _U_,",
          "154:   int offset _U_,",
          "155:   asn1_ctx_t *actx _U_,",
          "156:   proto_tree *tree _U_,",
          "157:   int hf_index",
          "158:   _U_);",
          "161:   tvbuff_t *tvb _U_,",
          "162:   int offset _U_,",
          "163:   asn1_ctx_t *actx _U_,",
          "164:   proto_tree *tree _U_,",
          "165:   int hf_index _U_);",
          "168:   tvbuff_t *tvb _U_,",
          "169:   int offset _U_,",
          "170:   asn1_ctx_t *actx _U_,",
          "171:   proto_tree *tree _U_,",
          "172:   int hf_index _U_);",
          "175:   tvbuff_t *tvb _U_,",
          "176:   packet_info *pinfo _U_,",
          "177:   proto_tree *tree _U_,",
          "178:   void *data _U_);",
          "181:   tvbuff_t *tvb,",
          "182:   guint32 offset,",
          "183:   asn1_ctx_t *actx,",
          "184:   proto_tree *tree,",
          "185:   int hf_index,",
          "186:   tvbuff_t **value_tvb);",
          "188: static gint dissect_atn_ulcs(",
          "189:   tvbuff_t *tvb,",
          "190:   packet_info *pinfo,",
          "191:   proto_tree *tree,",
          "192:   void *data _U_);",
          "",
          "[Added Lines]",
          "148:     tvbuff_t *tvb _U_,",
          "149:     int offset _U_,",
          "150:     asn1_ctx_t *actx _U_,",
          "151:     proto_tree *tree _U_,",
          "152:     int hf_index",
          "153:     _U_);",
          "156:     tvbuff_t *tvb _U_,",
          "157:     int offset _U_,",
          "158:     asn1_ctx_t *actx _U_,",
          "159:     proto_tree *tree _U_,",
          "160:     int hf_index _U_);",
          "163:     tvbuff_t *tvb _U_,",
          "164:     int offset _U_,",
          "165:     asn1_ctx_t *actx _U_,",
          "166:     proto_tree *tree _U_,",
          "167:     int hf_index _U_);",
          "170:     tvbuff_t *tvb _U_,",
          "171:     packet_info *pinfo _U_,",
          "172:     proto_tree *tree _U_,",
          "173:     void *data _U_);",
          "176:     tvbuff_t *tvb,",
          "177:     guint32 offset,",
          "178:     asn1_ctx_t *actx,",
          "179:     proto_tree *tree,",
          "180:     int hf_index,",
          "181:     tvbuff_t **value_tvb);",
          "183: static gint dissect_atn_ulcs(",
          "184:     tvbuff_t *tvb,",
          "185:     packet_info *pinfo,",
          "186:     proto_tree  *tree,",
          "187:     void *data _U_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212: static const per_choice_t External_encoding_choice[] =",
          "213: {",
          "234: };",
          "235: #endif",
          "243: static int hf_atn_ses_type = -1;",
          "244: static int hf_atn_ses_param_ind = -1;",
          "",
          "[Removed Lines]",
          "214:   {  0,",
          "215:     &hf_atn_ulcs_externalt_encoding_single_asn1_type,",
          "216:     ASN1_NO_EXTENSIONS,",
          "217:     dissect_atn_ulcs_T_externalt_encoding_single_asn1_type",
          "218:   },",
          "219:   {  1,",
          "220:     &hf_atn_ulcs_externalt_encoding_octet_aligned,",
          "221:     ASN1_NO_EXTENSIONS,",
          "222:     dissect_atn_ulcs_T_externalt_encoding_octet_aligned",
          "223:   },",
          "224:   {  2,",
          "225:     &hf_atn_ulcs_externalt_encoding_arbitrary,",
          "226:     ASN1_NO_EXTENSIONS,",
          "227:     dissect_atn_ulcs_T_externalt_encoding_arbitrary",
          "228:   },",
          "229:   {  0,",
          "230:     NULL,",
          "231:     0,",
          "232:     NULL",
          "233:   }",
          "238: #define SES_PDU_TYPE_MASK   0xf8",
          "239: #define SES_PARAM_IND_MASK   0x04",
          "240: #define SES_PARAM_B2_MASK   0x02",
          "241: #define SES_PARAM_B1_MASK   0x01",
          "",
          "[Added Lines]",
          "209:     {   0,",
          "210:         &hf_atn_ulcs_externalt_encoding_single_asn1_type,",
          "211:         ASN1_NO_EXTENSIONS,",
          "212:         dissect_atn_ulcs_T_externalt_encoding_single_asn1_type",
          "213:     },",
          "214:     {   1,",
          "215:         &hf_atn_ulcs_externalt_encoding_octet_aligned,",
          "216:         ASN1_NO_EXTENSIONS,",
          "217:         dissect_atn_ulcs_T_externalt_encoding_octet_aligned",
          "218:     },",
          "219:     {   2,",
          "220:         &hf_atn_ulcs_externalt_encoding_arbitrary,",
          "221:         ASN1_NO_EXTENSIONS,",
          "222:         dissect_atn_ulcs_T_externalt_encoding_arbitrary",
          "223:     },",
          "224:     {   0,",
          "225:         NULL,",
          "226:         0,",
          "227:         NULL",
          "228:     }",
          "233: #define SES_PDU_TYPE_MASK     0xf8",
          "234: #define SES_PARAM_IND_MASK    0x04",
          "235: #define SES_PARAM_B2_MASK     0x02",
          "236: #define SES_PARAM_B1_MASK     0x01",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252: const value_string atn_ses_param_ind[] =",
          "253: {",
          "257: };",
          "259: const value_string srf_b2[] =",
          "260: {",
          "264: };",
          "266: const value_string srf_b1[] =",
          "267: {",
          "271: };",
          "280: const value_string atn_ses_type[] =",
          "281: {",
          "288: };",
          "291: #define ATN_PRES_PROTO \"ICAO Doc9705 ULCS Presentation (ISO 8822/8823-1:1994)\"",
          "294: static int hf_atn_pres_pdu_type = -1;",
          "297: #define ATN_SES_PRES_MASK 0xf803",
          "301: const value_string atn_pres_vals[] =",
          "302: {",
          "310: };",
          "313: const value_string atn_pres_err[] =",
          "314: {",
          "324: };",
          "326: #if 0",
          "334: {",
          "346: }",
          "356: {",
          "378: }",
          "379: #endif",
          "383: guint32 get_aircraft_24_bit_address_from_nsap(",
          "385: {",
          "452: }",
          "456: int check_heur_msg_type(packet_info *pinfo  _U_)",
          "457: {",
          "497: }",
          "500: wmem_tree_t *get_atn_conversation_tree(void){",
          "502: }",
          "",
          "[Removed Lines]",
          "254:   {0, \"No Parameter Indication \"},",
          "255:   {1, \"Parameter Indication \"},",
          "256:   {0, NULL }",
          "261:   {0, \"Transport Connection is kept\"},",
          "262:   {1, \"Transport Connection is released\" },",
          "263:   {0, NULL }",
          "268:   {0, \"Transport Connection is transient\"},",
          "269:   {1, \"Transport Connection is persistent\"},",
          "270:   {0, NULL }",
          "273: #define SES_ATN_SCN    0xe8",
          "274: #define SES_ATN_SCNC   0xf8",
          "275: #define SES_ATN_SAC    0xf0",
          "276: #define SES_ATN_SACC   0xd8",
          "277: #define SES_ATN_SRF    0xe0",
          "278: #define SES_ATN_SRFC   0xa0",
          "282:   { 0x1d, \"Short Connect (SCN) SPDU\" },",
          "283:   { 0x1f, \"Short Connect Accept (SAC) SPDU\" },",
          "284:   { 0x1e, \"Short Connect Accept Continue (SACC) SPDU\" },",
          "285:   { 0x1c, \"Short Refuse (SRF) SPDU\" },",
          "286:   { 0x14, \"Short Refuse Continue (SRFC) SPDU\" },",
          "287:   {0, NULL }",
          "293: static int hf_atn_pres_err  = -1;",
          "295: static gint ett_atn_pres  = -1;",
          "298: #define PRES_CPR_ER_MASK  0x70",
          "303:   { 0xe802, \"Short Presentation Connect PPDU (CP) \" },",
          "304:   { 0xf802, \"Short Presentation Connect PPDU (CP) \" },",
          "305:   { 0xf002, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "306:   { 0xd802, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "307:   { 0xe002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "308:   { 0xa002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "309:   {0,     NULL }",
          "315:   { 0x00, \"Presentation-user\" },",
          "316:   { 0x01, \"Reason not specified (transient)\"},",
          "317:   { 0x02, \"Temporary congestion (transient)\"},",
          "318:   { 0x03, \"Local limit exceeded (transient)\"},",
          "319:   { 0x04, \"Called presentation-address unknown (permanent)\"},",
          "320:   { 0x05, \"Protocol version not supported (permanent)\"},",
          "321:   { 0x06, \"Default context not supported (permanent)\"},",
          "322:   { 0x07, \"User data not readable (permanent)\"},",
          "323:   { 0,     NULL }",
          "328: static int atn_ulcs_Externalt_encoding(",
          "329:   tvbuff_t *tvb _U_,",
          "330:   int offset _U_,",
          "331:   asn1_ctx_t *actx _U_,",
          "332:   proto_tree *tree _U_,",
          "333:   int hf_index _U_)",
          "335:   offset = dissect_per_choice(",
          "336:     tvb,",
          "337:     offset,",
          "338:     actx,",
          "339:     tree,",
          "340:     hf_index,",
          "341:     ett_atn_ulcs_EXTERNALt,",
          "342:     External_encoding_choice,",
          "343:     &actx->external.encoding);",
          "345:   return offset;",
          "349: static guint32 atn_per_external_type(",
          "350:   tvbuff_t *tvb _U_,",
          "351:   guint32 offset,",
          "352:   asn1_ctx_t *actx,",
          "353:   proto_tree *tree _U_,",
          "354:   int hf_index _U_,",
          "355:   per_type_fn type_cb)",
          "357:   memset(&actx->external, '\\0', sizeof(actx->external));",
          "358:   actx->external.hf_index = -1;",
          "359:   actx->external.encoding = -1;",
          "361:   actx->external.u.per.type_cb = type_cb;",
          "362:   offset = atn_ulcs_Externalt_encoding(",
          "363:     tvb,",
          "364:     offset,",
          "365:     actx,",
          "366:     tree,",
          "367:     hf_index);",
          "369:   memset(",
          "370:     &actx->external,",
          "371:     '\\0',",
          "372:     sizeof(actx->external));",
          "374:   actx->external.hf_index = -1;",
          "375:   actx->external.encoding = -1;",
          "377:   return offset;",
          "384:   packet_info *pinfo)",
          "386:   const guint8* addr = NULL;",
          "387:   guint32 ars =0;",
          "388:   guint32 adr_prefix =0;",
          "391:   if( (pinfo->src.type != get_osi_address_type()) ||",
          "392:     (pinfo->dst.type != get_osi_address_type())) {",
          "393:     return ars; }",
          "397:   if( (pinfo->src.len != 20) ||",
          "398:     (pinfo->dst.len != 20)) {",
          "399:     return ars; }",
          "406:   addr = (const guint8 *)pinfo->src.data;",
          "407:   adr_prefix =",
          "408:     ((addr[0]<<24) |",
          "409:     (addr[1]<<16) |",
          "410:     (addr[2]<<8) |",
          "411:     addr[3] );",
          "417:   if((adr_prefix == 0x470027c1) ||",
          "418:     (adr_prefix == 0x47002741)) {",
          "422:     ars = ((addr[8])<<16) |",
          "423:       ((addr[9])<<8) |",
          "424:       (addr[10]);",
          "425:   }",
          "432:   addr = (const guint8 *)pinfo->dst.data;",
          "433:   adr_prefix = ((addr[0]<<24) |",
          "434:     (addr[1]<<16) |",
          "435:     (addr[2]<<8) |",
          "436:     addr[3] );",
          "442:   if((adr_prefix == 0x470027c1) ||",
          "443:     (adr_prefix == 0x47002741)) {",
          "447:    ars = ((addr[8])<<16) |",
          "448:       ((addr[9])<<8) |",
          "449:       (addr[10]);",
          "450:   }",
          "451:   return ars;",
          "458:   int t = no_msg;",
          "459:   const guint8* addr = NULL;",
          "460:   guint32 adr_prefix =0;",
          "463:   if( (pinfo->src.type != get_osi_address_type()) || (pinfo->dst.type != get_osi_address_type())) {",
          "464:     return t; }",
          "467:   if( (pinfo->src.len != 20) || (pinfo->dst.len != 20)) {",
          "468:     return t; }",
          "470:   addr = (const guint8 *)pinfo->src.data;",
          "473:   adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "479:   if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "481:   }",
          "483:   addr = (const guint8 *)pinfo->dst.data;",
          "486:   adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "492:   if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "494:   }",
          "496:   return t;",
          "501:   return atn_conversation_tree;",
          "",
          "[Added Lines]",
          "249:     {0, \"No Parameter Indication \"},",
          "250:     {1, \"Parameter Indication \"},",
          "251:     {0, NULL }",
          "256:     {0, \"Transport Connection is kept\"},",
          "257:     {1, \"Transport Connection is released\" },",
          "258:     {0, NULL }",
          "263:     {0, \"Transport Connection is transient\"},",
          "264:     {1, \"Transport Connection is persistent\"},",
          "265:     {0, NULL }",
          "268: #define SES_ATN_SCN       0xe8",
          "269: #define SES_ATN_SCNC      0xf8",
          "270: #define SES_ATN_SAC       0xf0",
          "271: #define SES_ATN_SACC      0xd8",
          "272: #define SES_ATN_SRF       0xe0",
          "273: #define SES_ATN_SRFC      0xa0",
          "277:     { 0x1d, \"Short Connect (SCN) SPDU\" },",
          "278:     { 0x1f, \"Short Connect Accept (SAC) SPDU\" },",
          "279:     { 0x1e, \"Short Connect Accept Continue (SACC) SPDU\" },",
          "280:     { 0x1c, \"Short Refuse (SRF) SPDU\" },",
          "281:     { 0x14, \"Short Refuse Continue (SRFC) SPDU\" },",
          "282:     {0, NULL }",
          "288: static int hf_atn_pres_err   = -1;",
          "290: static gint ett_atn_pres    = -1;",
          "293: #define PRES_CPR_ER_MASK    0x70",
          "298:     { 0xe802, \"Short Presentation Connect PPDU (CP) \" },",
          "299:     { 0xf802, \"Short Presentation Connect PPDU (CP) \" },",
          "300:     { 0xf002, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "301:     { 0xd802, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "302:     { 0xe002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "303:     { 0xa002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "304:     {0,         NULL }",
          "310:     { 0x00, \"Presentation-user\" },",
          "311:     { 0x01, \"Reason not specified (transient)\"},",
          "312:     { 0x02, \"Temporary congestion (transient)\"},",
          "313:     { 0x03, \"Local limit exceeded (transient)\"},",
          "314:     { 0x04, \"Called presentation-address unknown (permanent)\"},",
          "315:     { 0x05, \"Protocol version not supported (permanent)\"},",
          "316:     { 0x06, \"Default context not supported (permanent)\"},",
          "317:     { 0x07, \"User data not readable (permanent)\"},",
          "318:     { 0,          NULL }",
          "323: static int  atn_ulcs_Externalt_encoding(",
          "324:     tvbuff_t *tvb _U_,",
          "325:     int offset _U_,",
          "326:     asn1_ctx_t *actx _U_,",
          "327:     proto_tree *tree _U_,",
          "328:     int hf_index _U_)",
          "330:     offset = dissect_per_choice(",
          "331:         tvb,",
          "332:         offset,",
          "333:         actx,",
          "334:         tree,",
          "335:         hf_index,",
          "336:         ett_atn_ulcs_EXTERNALt,",
          "337:         External_encoding_choice,",
          "338:         &actx->external.encoding);",
          "340:     return offset;",
          "344: static guint32  atn_per_external_type(",
          "345:     tvbuff_t *tvb _U_,",
          "346:     guint32 offset,",
          "347:     asn1_ctx_t *actx,",
          "348:     proto_tree *tree _U_,",
          "349:     int hf_index _U_,",
          "350:     per_type_fn type_cb)",
          "352:     memset(&actx->external, '\\0', sizeof(actx->external));",
          "353:     actx->external.hf_index = -1;",
          "354:     actx->external.encoding = -1;",
          "356:     actx->external.u.per.type_cb = type_cb;",
          "357:     offset = atn_ulcs_Externalt_encoding(",
          "358:         tvb,",
          "359:         offset,",
          "360:         actx,",
          "361:         tree,",
          "362:         hf_index);",
          "364:     memset(",
          "365:         &actx->external,",
          "366:         '\\0',",
          "367:         sizeof(actx->external));",
          "369:     actx->external.hf_index = -1;",
          "370:     actx->external.encoding = -1;",
          "372:     return offset;",
          "379:     packet_info *pinfo)",
          "381:     const guint8* addr = NULL;",
          "382:     guint32 ars =0;",
          "383:     guint32 adr_prefix =0;",
          "386:     if( (pinfo->src.type != get_osi_address_type()) ||",
          "387:         (pinfo->dst.type != get_osi_address_type())) {",
          "388:         return ars; }",
          "392:     if( (pinfo->src.len != 20) ||",
          "393:         (pinfo->dst.len != 20)) {",
          "394:         return ars; }",
          "401:     addr = (const guint8 *)pinfo->src.data;",
          "402:     adr_prefix =",
          "403:         ((addr[0]<<24) |",
          "404:         (addr[1]<<16) |",
          "405:         (addr[2]<<8) |",
          "406:         addr[3] );",
          "412:     if((adr_prefix == 0x470027c1) ||",
          "413:         (adr_prefix == 0x47002741)) {",
          "417:         ars = ((addr[8])<<16) |",
          "418:             ((addr[9])<<8) |",
          "419:             (addr[10]);",
          "420:     }",
          "427:     addr = (const guint8 *)pinfo->dst.data;",
          "428:     adr_prefix = ((addr[0]<<24) |",
          "429:         (addr[1]<<16) |",
          "430:         (addr[2]<<8) |",
          "431:         addr[3] );",
          "437:     if((adr_prefix == 0x470027c1) ||",
          "438:         (adr_prefix == 0x47002741)) {",
          "442:       ars = ((addr[8])<<16) |",
          "443:             ((addr[9])<<8) |",
          "444:             (addr[10]);",
          "445:     }",
          "446:     return ars;",
          "453:     int t = no_msg;",
          "454:     const guint8* addr = NULL;",
          "455:     guint32 adr_prefix =0;",
          "458:     if( (pinfo->src.type != get_osi_address_type()) || (pinfo->dst.type != get_osi_address_type())) {",
          "459:         return t; }",
          "462:     if( (pinfo->src.len != 20) || (pinfo->dst.len != 20)) {",
          "463:         return t; }",
          "465:     addr = (const guint8 *)pinfo->src.data;",
          "468:     adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "474:     if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "476:     }",
          "478:     addr = (const guint8 *)pinfo->dst.data;",
          "481:     adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "487:     if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "489:     }",
          "491:     return t;",
          "496:     return atn_conversation_tree;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510: atn_conversation_t * find_atn_conversation(",
          "514: {",
          "530: }",
          "535: atn_conversation_t * create_atn_conversation(",
          "540: {",
          "568: }",
          "570: static int",
          "571: dissect_atn_ulcs(",
          "576: {",
          "719: }",
          "721: static gboolean dissect_atn_ulcs_heur(",
          "726: {",
          "787: }",
          "789: void proto_register_atn_ulcs (void)",
          "790: {",
          "884: }",
          "886: void proto_reg_handoff_atn_ulcs(void)",
          "887: {",
          "895: }",
          "",
          "[Removed Lines]",
          "511:   address *address1,",
          "512:   guint16 clnp_ref1,",
          "513:   address *address2 )",
          "515:   atn_conversation_t *cv = NULL;",
          "516:   guint32 key = 0;",
          "517:   guint32 tmp = 0;",
          "519:   ADD_ADDRESS_TO_HASH( tmp, address1);",
          "520:   key = (tmp << 16) | clnp_ref1 ;",
          "522:   ADD_ADDRESS_TO_HASH( tmp, address2);",
          "523:   key = (tmp << 24) | key ;",
          "526:   cv = (atn_conversation_t *)",
          "527:     wmem_tree_lookup32(get_atn_conversation_tree(),key);",
          "529:   return cv;",
          "536:   address *address1,",
          "537:   guint16 clnp_ref1,",
          "538:   address *address2,",
          "539:   atn_conversation_t *conversation)",
          "541:   atn_conversation_t *cv = NULL;",
          "542:   guint32 key = 0;",
          "543:   guint32 tmp = 0;",
          "545:   ADD_ADDRESS_TO_HASH( tmp, address1);",
          "546:   key = (tmp << 16) | clnp_ref1 ;",
          "548:   ADD_ADDRESS_TO_HASH( tmp, address2);",
          "549:   key = (tmp << 24) | key ;",
          "552:   cv = (atn_conversation_t *)",
          "553:   wmem_tree_lookup32(",
          "554:     get_atn_conversation_tree(),",
          "555:     key);",
          "558:   if(cv) {",
          "559:    return NULL; }",
          "562:   wmem_tree_insert32(",
          "563:     get_atn_conversation_tree(),",
          "564:     key,",
          "565:     (void*)conversation);",
          "567:   return conversation;",
          "572:   tvbuff_t *tvb,",
          "573:   packet_info *pinfo,",
          "574:   proto_tree *tree,",
          "575:   void *data _U_)",
          "577:   int offset = 0;",
          "578:   proto_item *ti = NULL;",
          "579:   proto_tree *atn_ulcs_tree = NULL;",
          "580:   guint8 value_pres = 0;",
          "581:   guint8 value_ses = 0;",
          "582:   guint16 value_ses_pres = 0;",
          "584:   root_tree = tree;",
          "588:   if ( (int)(intptr_t)  data == FALSE )",
          "589:   {",
          "590:     ti = proto_tree_add_item(",
          "591:       tree,",
          "592:       proto_atn_ulcs,",
          "593:       tvb,",
          "594:       0,",
          "595:       0 ,",
          "596:       ENC_NA);",
          "598:     atn_ulcs_tree = proto_item_add_subtree(",
          "599:       ti,",
          "600:       ett_atn_ulcs);",
          "602:     dissect_Fully_encoded_data_PDU(",
          "603:       tvb,",
          "604:       pinfo,",
          "605:       atn_ulcs_tree, NULL);",
          "607:     return offset +",
          "608:      tvb_reported_length_remaining(tvb, offset ) ;",
          "609:   }",
          "612:   if ( (int)(intptr_t)  data == TRUE )",
          "613:   {",
          "615:     value_ses_pres = tvb_get_ntohs(tvb, offset);",
          "618:     atn_ulcs_tree = proto_tree_add_subtree(",
          "619:       tree, tvb, offset, 0,",
          "620:       ett_atn_ses, NULL, ATN_SES_PROTO );",
          "623:     value_ses = tvb_get_guint8(tvb, offset);",
          "626:     proto_tree_add_item(atn_ulcs_tree,",
          "627:       hf_atn_ses_type,",
          "628:       tvb,",
          "629:       offset,",
          "630:       1,",
          "631:       ENC_BIG_ENDIAN );",
          "635:     switch(value_ses & SES_PDU_TYPE_MASK){",
          "636:       case SES_ATN_SRF:",
          "637:       case SES_ATN_SRFC:",
          "640:         proto_tree_add_item(atn_ulcs_tree,",
          "641:           hf_atn_ses_param_ind,",
          "642:           tvb,",
          "643:           offset,",
          "644:           1,",
          "645:           ENC_BIG_ENDIAN );",
          "648:         proto_tree_add_item(atn_ulcs_tree,",
          "649:           hf_atn_ses_param_b2,",
          "650:           tvb,",
          "651:           offset,",
          "652:           1,",
          "653:           ENC_BIG_ENDIAN );",
          "656:         proto_tree_add_item(atn_ulcs_tree,",
          "657:           hf_atn_ses_param_b1,",
          "658:           tvb,",
          "659:           offset,",
          "660:           1,",
          "661:           ENC_BIG_ENDIAN );",
          "663:        break;",
          "664:       default:",
          "665:        break;",
          "666:     }",
          "667:     offset++;",
          "670:     atn_ulcs_tree = proto_tree_add_subtree(",
          "671:       tree, tvb, offset, 0,",
          "672:       ett_atn_pres, NULL, ATN_PRES_PROTO );",
          "674:     value_pres = tvb_get_guint8(tvb, offset);",
          "678:     proto_tree_add_uint_format(atn_ulcs_tree, hf_atn_pres_pdu_type,",
          "679:       tvb,",
          "680:       offset,",
          "681:       1,",
          "682:       value_ses_pres,",
          "683:       \"%s (0x%02x)\",",
          "684:       val_to_str( value_ses_pres & ATN_SES_PRES_MASK , atn_pres_vals, \"?\"),",
          "685:       value_pres);",
          "688:     switch(value_ses & SES_PDU_TYPE_MASK){",
          "689:       case SES_ATN_SRF:",
          "690:       case SES_ATN_SRFC:",
          "691:         proto_tree_add_item(",
          "692:           atn_ulcs_tree,",
          "693:           hf_atn_pres_err,",
          "694:           tvb,",
          "695:           offset,",
          "696:           1,",
          "697:           ENC_BIG_ENDIAN );",
          "698:         break;",
          "699:       default:",
          "700:         break;",
          "701:     }",
          "703:     offset++;",
          "706:     atn_ulcs_tree = proto_tree_add_subtree(",
          "707:       tree, tvb, offset, 0,",
          "708:       ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "710:     dissect_ACSE_apdu_PDU(",
          "711:       tvb_new_subset_remaining(tvb, offset),",
          "712:       pinfo,",
          "713:       atn_ulcs_tree, NULL);",
          "715:     return offset +",
          "716:       tvb_reported_length_remaining(tvb, offset );",
          "717:   }",
          "718:   return offset;",
          "722:   tvbuff_t *tvb,",
          "723:   packet_info *pinfo,",
          "724:   proto_tree *tree,",
          "725:   void *data _U_)",
          "729:   if (tvb_captured_length(tvb) < 2){",
          "730:     return FALSE; }",
          "734:   switch( tvb_get_ntohs(tvb, 0) & 0xf8ff ){",
          "758:       dissect_atn_ulcs(",
          "759:         tvb,",
          "760:         pinfo,",
          "761:         tree,",
          "762:         (void*) TRUE);",
          "763:       return TRUE;",
          "765:       break;",
          "766:   }",
          "771:   switch(  tvb_get_ntohs(tvb, 0) & 0xfff0 ){",
          "780:       dissect_atn_ulcs(tvb, pinfo, tree, (void*) FALSE);",
          "781:       return TRUE;",
          "782:       break;",
          "784:       break;",
          "785:   }",
          "786:   return FALSE;",
          "791:   static hf_register_info hf_atn_ulcs[] = {",
          "792:     #include \"packet-atn-ulcs-hfarr.c\"",
          "793:     {&hf_atn_ses_type,",
          "794:     { \"SPDU Type\",",
          "795:      \"atn-ulcs.ses.type\",",
          "796:      FT_UINT8,",
          "797:      BASE_HEX,",
          "798:      VALS(atn_ses_type),",
          "799:      0xf8,",
          "800:      \"Indicates presence of session parameters\",",
          "801:      HFILL}},",
          "802:     {&hf_atn_ses_param_ind,",
          "803:     { \"SPDU Parameter Indication\",",
          "804:      \"atn-ulcs.ses.parameter-indication\",",
          "805:      FT_UINT8,",
          "806:      BASE_HEX,",
          "807:      VALS(atn_ses_param_ind),",
          "808:      SES_PARAM_IND_MASK,",
          "809:      \"Indicates presence of session parameters\",",
          "810:      HFILL}},",
          "811:    {&hf_atn_ses_param_b1,",
          "812:     { \"SRF Parameter B1\",",
          "813:      \"atn-ulcs.ses.srf-b1\",",
          "814:      FT_UINT8,",
          "815:      BASE_HEX,",
          "816:      VALS(srf_b1),",
          "817:      0x01,",
          "818:      \"Determines if transport connection reject is transient or persistent\",",
          "819:      HFILL}},",
          "820:    {&hf_atn_ses_param_b2,",
          "821:     { \"SRF Parameter B2\",",
          "822:      \"atn-ulcs.ses.srf-b2\",",
          "823:      FT_UINT8,",
          "824:      BASE_HEX,",
          "825:      VALS(srf_b2),",
          "826:      0x02,",
          "827:      \"Determines if transport connection is retained or released\",",
          "828:      HFILL}},",
          "829:    { &hf_atn_pres_err,",
          "830:     { \"Error Code\", \"atn-ulcs.pres.cpr-error\",",
          "831:      FT_UINT8,",
          "832:      BASE_HEX,",
          "833:      VALS(atn_pres_err),",
          "834:      PRES_CPR_ER_MASK,",
          "835:      NULL,",
          "836:      HFILL}},",
          "837:    { &hf_atn_pres_pdu_type,",
          "838:     { \"PDU type\", \"atn-ulcs.pres.pdu_type\",",
          "839:      FT_UINT8,",
          "840:      BASE_HEX,",
          "841:      NULL,",
          "842:      ATN_SES_PRES_MASK,",
          "843:      NULL,",
          "844:      HFILL}},",
          "845:   };",
          "847:   static gint *ett[] = {",
          "848:     #include \"packet-atn-ulcs-ettarr.c\"",
          "849:     &ett_atn_ses,",
          "850:     &ett_atn_pres,",
          "851:     &ett_atn_acse,",
          "852:     &ett_atn_ulcs",
          "853:   };",
          "855:   proto_atn_ulcs = proto_register_protocol (",
          "856:     ATN_ULCS_PROTO ,",
          "857:     \"ATN-ULCS\",",
          "858:     \"atn-ulcs\");",
          "860:   proto_register_field_array (",
          "861:     proto_atn_ulcs,",
          "862:     hf_atn_ulcs,",
          "863:     array_length(hf_atn_ulcs));",
          "865:   proto_register_subtree_array (",
          "866:     ett,",
          "867:     array_length (ett));",
          "869:   new_register_dissector(",
          "870:     \"atn-ulcs\",",
          "871:     dissect_atn_ulcs,",
          "872:     proto_atn_ulcs);",
          "874:   atn_cm_handle = find_dissector(\"atn-cm\");",
          "875:   atn_cpdlc_handle = find_dissector(\"atn-cpdlc\");",
          "878:   atn_ulcs_heur_subdissector_list = register_heur_dissector_list(\"atn-ulcs\");",
          "881:   aarq_data_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "883:   atn_conversation_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "889:   heur_dissector_add(",
          "890:     \"cotp\",",
          "891:     dissect_atn_ulcs_heur,",
          "892:     \"ATN-ULCS over COTP\",",
          "893:     \"atn-ucls_cotp\",",
          "894:     proto_atn_ulcs, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "506:     address *address1,",
          "507:     guint16 clnp_ref1,",
          "508:     address *address2 )",
          "510:     atn_conversation_t *cv = NULL;",
          "511:     guint32 key = 0;",
          "512:     guint32 tmp = 0;",
          "514:     ADD_ADDRESS_TO_HASH( tmp, address1);",
          "515:     key = (tmp << 16) | clnp_ref1 ;",
          "517:     ADD_ADDRESS_TO_HASH( tmp, address2);",
          "518:     key = (tmp << 24) | key ;",
          "521:     cv = (atn_conversation_t *)",
          "522:         wmem_tree_lookup32(get_atn_conversation_tree(),key);",
          "524:     return cv;",
          "531:     address *address1,",
          "532:     guint16 clnp_ref1,",
          "533:     address *address2,",
          "534:     atn_conversation_t *conversation)",
          "536:     atn_conversation_t *cv = NULL;",
          "537:     guint32 key = 0;",
          "538:     guint32 tmp = 0;",
          "540:     ADD_ADDRESS_TO_HASH( tmp, address1);",
          "541:     key = (tmp << 16) | clnp_ref1 ;",
          "543:     ADD_ADDRESS_TO_HASH( tmp, address2);",
          "544:     key = (tmp << 24) | key ;",
          "547:     cv = (atn_conversation_t *)",
          "548:     wmem_tree_lookup32(",
          "549:         get_atn_conversation_tree(),",
          "550:         key);",
          "553:     if(cv) {",
          "554:       return NULL; }",
          "557:     wmem_tree_insert32(",
          "558:         get_atn_conversation_tree(),",
          "559:         key,",
          "560:         (void*)conversation);",
          "562:     return conversation;",
          "567:     tvbuff_t *tvb,",
          "568:     packet_info *pinfo,",
          "569:     proto_tree *tree,",
          "570:     void *data _U_)",
          "572:     int offset = 0;",
          "573:     proto_item *ti = NULL;",
          "574:     proto_tree *atn_ulcs_tree = NULL;",
          "575:     guint8 value_pres = 0;",
          "576:     guint8 value_ses = 0;",
          "577:     guint16 value_ses_pres = 0;",
          "579:     root_tree = tree;",
          "583:     if ( (int)(intptr_t)  data == FALSE )",
          "584:     {",
          "585:         ti = proto_tree_add_item(",
          "586:             tree,",
          "587:             proto_atn_ulcs,",
          "588:             tvb,",
          "589:             0,",
          "590:             0 ,",
          "591:             ENC_NA);",
          "593:         atn_ulcs_tree = proto_item_add_subtree(",
          "594:             ti,",
          "595:             ett_atn_ulcs);",
          "597:         dissect_Fully_encoded_data_PDU(",
          "598:             tvb,",
          "599:             pinfo,",
          "600:             atn_ulcs_tree, NULL);",
          "602:         return offset +",
          "603:           tvb_reported_length_remaining(tvb, offset ) ;",
          "604:     }",
          "607:     if ( (int)(intptr_t)  data == TRUE )",
          "608:     {",
          "610:         value_ses_pres = tvb_get_ntohs(tvb, offset);",
          "613:         atn_ulcs_tree = proto_tree_add_subtree(",
          "614:             tree, tvb, offset, 0,",
          "615:             ett_atn_ses, NULL, ATN_SES_PROTO );",
          "618:         value_ses = tvb_get_guint8(tvb, offset);",
          "621:         proto_tree_add_item(atn_ulcs_tree,",
          "622:             hf_atn_ses_type,",
          "623:             tvb,",
          "624:             offset,",
          "625:             1,",
          "626:             ENC_BIG_ENDIAN );",
          "630:         switch(value_ses & SES_PDU_TYPE_MASK){",
          "631:             case SES_ATN_SRF:",
          "632:             case SES_ATN_SRFC:",
          "635:                 proto_tree_add_item(atn_ulcs_tree,",
          "636:                     hf_atn_ses_param_ind,",
          "637:                     tvb,",
          "638:                     offset,",
          "639:                     1,",
          "640:                     ENC_BIG_ENDIAN );",
          "643:                 proto_tree_add_item(atn_ulcs_tree,",
          "644:                     hf_atn_ses_param_b2,",
          "645:                     tvb,",
          "646:                     offset,",
          "647:                     1,",
          "648:                     ENC_BIG_ENDIAN );",
          "651:                 proto_tree_add_item(atn_ulcs_tree,",
          "652:                     hf_atn_ses_param_b1,",
          "653:                     tvb,",
          "654:                     offset,",
          "655:                     1,",
          "656:                     ENC_BIG_ENDIAN );",
          "658:               break;",
          "659:             default:",
          "660:               break;",
          "661:         }",
          "662:         offset++;",
          "665:         atn_ulcs_tree = proto_tree_add_subtree(",
          "666:             tree, tvb, offset, 0,",
          "667:             ett_atn_pres, NULL, ATN_PRES_PROTO );",
          "669:         value_pres = tvb_get_guint8(tvb, offset);",
          "673:         proto_tree_add_uint_format(atn_ulcs_tree, hf_atn_pres_pdu_type,",
          "674:             tvb,",
          "675:             offset,",
          "676:             1,",
          "677:             value_ses_pres,",
          "678:             \"%s (0x%02x)\",",
          "679:             val_to_str( value_ses_pres & ATN_SES_PRES_MASK , atn_pres_vals, \"?\"),",
          "680:             value_pres);",
          "683:         switch(value_ses & SES_PDU_TYPE_MASK){",
          "684:             case SES_ATN_SRF:",
          "685:             case SES_ATN_SRFC:",
          "686:                 proto_tree_add_item(",
          "687:                     atn_ulcs_tree,",
          "688:                     hf_atn_pres_err,",
          "689:                     tvb,",
          "690:                     offset,",
          "691:                     1,",
          "692:                     ENC_BIG_ENDIAN );",
          "693:                 break;",
          "694:             default:",
          "695:                 break;",
          "696:         }",
          "698:         offset++;",
          "701:         atn_ulcs_tree = proto_tree_add_subtree(",
          "702:             tree, tvb, offset, 0,",
          "703:             ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "705:         dissect_ACSE_apdu_PDU(",
          "706:             tvb_new_subset_remaining(tvb, offset),",
          "707:             pinfo,",
          "708:             atn_ulcs_tree, NULL);",
          "710:         return offset +",
          "711:             tvb_reported_length_remaining(tvb, offset );",
          "712:     }",
          "713:     return offset;",
          "717:     tvbuff_t *tvb,",
          "718:     packet_info *pinfo,",
          "719:     proto_tree *tree,",
          "720:     void *data _U_)",
          "724:     if (tvb_captured_length(tvb) < 2){",
          "725:         return FALSE; }",
          "729:     switch( tvb_get_ntohs(tvb, 0) & 0xf8ff ){",
          "753:             dissect_atn_ulcs(",
          "754:                 tvb,",
          "755:                 pinfo,",
          "756:                 tree,",
          "757:                 (void*) TRUE);",
          "758:             return TRUE;",
          "760:             break;",
          "761:     }",
          "766:     switch(  tvb_get_ntohs(tvb, 0) & 0xfff0 ){",
          "775:             dissect_atn_ulcs(tvb, pinfo, tree, (void*) FALSE);",
          "776:             return TRUE;",
          "777:             break;",
          "779:             break;",
          "780:     }",
          "781:     return FALSE;",
          "786:     static hf_register_info hf_atn_ulcs[] = {",
          "787:         #include \"packet-atn-ulcs-hfarr.c\"",
          "788:         {&hf_atn_ses_type,",
          "789:         { \"SPDU Type\",",
          "790:           \"atn-ulcs.ses.type\",",
          "791:           FT_UINT8,",
          "792:           BASE_HEX,",
          "793:           VALS(atn_ses_type),",
          "794:           0xf8,",
          "795:           \"Indicates presence of session parameters\",",
          "796:           HFILL}},",
          "797:         {&hf_atn_ses_param_ind,",
          "798:         { \"SPDU Parameter Indication\",",
          "799:           \"atn-ulcs.ses.parameter-indication\",",
          "800:           FT_UINT8,",
          "801:           BASE_HEX,",
          "802:           VALS(atn_ses_param_ind),",
          "803:           SES_PARAM_IND_MASK,",
          "804:           \"Indicates presence of session parameters\",",
          "805:           HFILL}},",
          "806:       {&hf_atn_ses_param_b1,",
          "807:         { \"SRF Parameter B1\",",
          "808:           \"atn-ulcs.ses.srf-b1\",",
          "809:           FT_UINT8,",
          "810:           BASE_HEX,",
          "811:           VALS(srf_b1),",
          "812:           0x01,",
          "813:           \"Determines if transport connection reject is transient or persistent\",",
          "814:           HFILL}},",
          "815:       {&hf_atn_ses_param_b2,",
          "816:         { \"SRF Parameter B2\",",
          "817:           \"atn-ulcs.ses.srf-b2\",",
          "818:           FT_UINT8,",
          "819:           BASE_HEX,",
          "820:           VALS(srf_b2),",
          "821:           0x02,",
          "822:           \"Determines if transport connection is retained or released\",",
          "823:           HFILL}},",
          "824:       { &hf_atn_pres_err,",
          "825:         { \"Error Code\", \"atn-ulcs.pres.cpr-error\",",
          "826:           FT_UINT8,",
          "827:           BASE_HEX,",
          "828:           VALS(atn_pres_err),",
          "829:           PRES_CPR_ER_MASK,",
          "830:           NULL,",
          "831:           HFILL}},",
          "832:       { &hf_atn_pres_pdu_type,",
          "833:         { \"PDU type\", \"atn-ulcs.pres.pdu_type\",",
          "834:           FT_UINT8,",
          "835:           BASE_HEX,",
          "836:           NULL,",
          "837:           ATN_SES_PRES_MASK,",
          "838:           NULL,",
          "839:           HFILL}},",
          "840:     };",
          "842:     static gint *ett[] = {",
          "843:         #include \"packet-atn-ulcs-ettarr.c\"",
          "844:         &ett_atn_ses,",
          "845:         &ett_atn_pres,",
          "846:         &ett_atn_acse,",
          "847:         &ett_atn_ulcs",
          "848:     };",
          "850:     proto_atn_ulcs = proto_register_protocol (",
          "851:         ATN_ULCS_PROTO ,",
          "852:         \"ATN-ULCS\",",
          "853:         \"atn-ulcs\");",
          "855:     proto_register_field_array (",
          "856:         proto_atn_ulcs,",
          "857:         hf_atn_ulcs,",
          "858:         array_length(hf_atn_ulcs));",
          "860:     proto_register_subtree_array (",
          "861:         ett,",
          "862:         array_length (ett));",
          "864:     new_register_dissector(",
          "865:         \"atn-ulcs\",",
          "866:         dissect_atn_ulcs,",
          "867:         proto_atn_ulcs);",
          "869:     atn_cm_handle = find_dissector(\"atn-cm\");",
          "870:     atn_cpdlc_handle = find_dissector(\"atn-cpdlc\");",
          "873:     atn_ulcs_heur_subdissector_list = register_heur_dissector_list(\"atn-ulcs\");",
          "876:     aarq_data_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "878:     atn_conversation_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "884:     heur_dissector_add(",
          "885:         \"cotp\",",
          "886:         dissect_atn_ulcs_heur,",
          "887:         \"ATN-ULCS over COTP\",",
          "888:         \"atn-ucls_cotp\",",
          "889:         proto_atn_ulcs, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "asn1/atn-ulcs/packet-atn-ulcs-template.h||asn1/atn-ulcs/packet-atn-ulcs-template.h": [
          "File: asn1/atn-ulcs/packet-atn-ulcs-template.h -> asn1/atn-ulcs/packet-atn-ulcs-template.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: static const gchar ia5alpha[] = {",
          "47: };",
          "49: enum msg_type {",
          "53: };",
          "55: enum ae_qualifier {",
          "65: };",
          "67: typedef struct atn_conversation_t {",
          "69: } atn_conversation_t;",
          "71: atn_conversation_t * create_atn_conversation(",
          "77: atn_conversation_t * find_atn_conversation(",
          "",
          "[Removed Lines]",
          "38:   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "39:   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "40:   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, \\",
          "41:   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, \\",
          "42:   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, \\",
          "43:   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, \\",
          "44:   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, \\",
          "45:   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, \\",
          "46:   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, '\\0'",
          "50:   um,",
          "51:   dm,",
          "52:   no_msg",
          "56:   ads = 0,",
          "59:   ati = 3 ,",
          "60:   arf =10 ,",
          "61:   met =11,",
          "62:   gac =12,",
          "64:   unknown = -1",
          "72:   address*,",
          "73:   guint16,",
          "74:   address*,",
          "75:   atn_conversation_t*);",
          "78:   address*,",
          "79:   guint16,",
          "80:   address*);",
          "",
          "[Added Lines]",
          "33:     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "34:     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "35:     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, \\",
          "36:     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, \\",
          "37:     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, \\",
          "38:     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, \\",
          "39:     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, \\",
          "40:     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, \\",
          "41:     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, '\\0'",
          "45:     um,",
          "46:     dm,",
          "47:     no_msg",
          "51:     ads = 0,",
          "54:     ati = 3 ,",
          "55:     arf =10 ,",
          "56:     met =11,",
          "57:     gac =12,",
          "59:     unknown = -1",
          "67:     address*,",
          "68:     guint16,",
          "69:     address*,",
          "70:     atn_conversation_t*);",
          "73:     address*,",
          "74:     guint16,",
          "75:     address*);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-atn-cm.c||epan/dissectors/packet-atn-cm.c": [
          "File: epan/dissectors/packet-atn-cm.c -> epan/dissectors/packet-atn-cm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "113: #line 61 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "",
          "[Added Lines]",
          "107: #line 55 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132: static gint ett_atn_cm_Time = -1;",
          "136: static gint ett_atn_cm = -1;",
          "",
          "[Removed Lines]",
          "135: #line 63 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "",
          "[Added Lines]",
          "129: #line 57 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "639: static int proto_atn_cm = -1;",
          "641: static int",
          "642: dissect_atn_cm(",
          "647: {",
          "677: }",
          "679: static gboolean",
          "680: dissect_atn_cm_heur(",
          "685: {",
          "767: }",
          "",
          "[Removed Lines]",
          "638: #line 66 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "643:   tvbuff_t *tvb,",
          "644:   packet_info *pinfo,",
          "645:   proto_tree *tree,",
          "646:   void *data _U_)",
          "648:   int  type;",
          "649:   proto_tree *sub_tree;",
          "651:   sub_tree = proto_tree_add_subtree(",
          "652:    tree, tvb, 0, -1, ett_atn_cm, NULL, ATN_CM_PROTO);",
          "658:   type = check_heur_msg_type(pinfo);",
          "660:   switch(type){",
          "661:     case um:",
          "662:       dissect_CMGroundMessage_PDU(",
          "663:        tvb,",
          "664:        pinfo,",
          "665:        sub_tree, NULL);",
          "666:       break;",
          "667:     case dm:",
          "668:       dissect_CMAircraftMessage_PDU(",
          "669:        tvb,",
          "670:        pinfo,",
          "671:        sub_tree, NULL);",
          "672:       break;",
          "673:     default:",
          "674:       break;",
          "675:   }",
          "676:   return tvb_reported_length_remaining(tvb, 0);",
          "681:   tvbuff_t *tvb,",
          "682:   packet_info *pinfo,",
          "683:   proto_tree *tree,",
          "684:   void *data _U_)",
          "686:   atn_conversation_t *atn_cv = NULL;",
          "687:   volatile gboolean is_atn_cm = FALSE;",
          "688:   int type;",
          "691:   type = check_heur_msg_type(pinfo);",
          "694:   switch(type){",
          "695:     case um:",
          "696:       TRY {",
          "697:         dissect_CMGroundMessage_PDU(",
          "698:          tvb,",
          "699:          pinfo,",
          "700:          NULL, NULL);",
          "702:         is_atn_cm = TRUE; }",
          "703:       CATCH_ALL {",
          "704:         is_atn_cm = FALSE; }",
          "705:       ENDTRY;",
          "706:       break;",
          "707:     case dm:",
          "708:       TRY {",
          "709:         dissect_CMAircraftMessage_PDU(",
          "710:           tvb,",
          "711:           pinfo,",
          "712:           NULL, NULL);",
          "714:         is_atn_cm = TRUE;}",
          "715:       CATCH_ALL {",
          "716:         is_atn_cm = FALSE; }",
          "717:       ENDTRY;",
          "718:       break;",
          "719:     default:",
          "720:       break;",
          "721:   }",
          "723:   if (is_atn_cm  == TRUE) {",
          "730:     if((pinfo->clnp_dstref) &&",
          "731:       (!pinfo->clnp_srcref)){",
          "733:      atn_cv = find_atn_conversation(",
          "734:         &pinfo->dst,",
          "735:         pinfo->clnp_dstref,",
          "736:         &pinfo->src );",
          "737:     }",
          "739:     if((!pinfo->clnp_dstref) &&",
          "740:       (pinfo->clnp_srcref)){",
          "742:      atn_cv = find_atn_conversation(",
          "743:         &pinfo->src,",
          "744:         pinfo->clnp_srcref,",
          "745:         &pinfo->dst );",
          "747:     }",
          "749:     if((pinfo->clnp_dstref) &&",
          "750:       (pinfo->clnp_srcref)){",
          "751:       atn_cv = find_atn_conversation(",
          "752:         &pinfo->src,",
          "753:         pinfo->clnp_srcref,",
          "754:         &pinfo->dst );",
          "755:     }",
          "756:     if(atn_cv){",
          "757:       atn_cv->ae_qualifier = cma;",
          "758:     }",
          "759:     dissect_atn_cm(",
          "760:       tvb,",
          "761:       pinfo,",
          "762:       tree,",
          "763:       NULL);",
          "764:   }",
          "766:   return is_atn_cm;",
          "",
          "[Added Lines]",
          "632: #line 60 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "637:     tvbuff_t *tvb,",
          "638:     packet_info *pinfo,",
          "639:     proto_tree *tree,",
          "640:     void *data _U_)",
          "642:     int   type;",
          "643:     proto_tree *sub_tree;",
          "645:     sub_tree = proto_tree_add_subtree(",
          "646:       tree, tvb, 0, -1, ett_atn_cm, NULL, ATN_CM_PROTO);",
          "652:     type = check_heur_msg_type(pinfo);",
          "654:     switch(type){",
          "655:         case um:",
          "656:             dissect_CMGroundMessage_PDU(",
          "657:               tvb,",
          "658:               pinfo,",
          "659:               sub_tree, NULL);",
          "660:             break;",
          "661:         case dm:",
          "662:             dissect_CMAircraftMessage_PDU(",
          "663:               tvb,",
          "664:               pinfo,",
          "665:               sub_tree, NULL);",
          "666:             break;",
          "667:         default:",
          "668:             break;",
          "669:     }",
          "670:     return tvb_reported_length_remaining(tvb, 0);",
          "675:     tvbuff_t *tvb,",
          "676:     packet_info *pinfo,",
          "677:     proto_tree *tree,",
          "678:     void *data _U_)",
          "680:     atn_conversation_t *atn_cv = NULL;",
          "681:     volatile gboolean is_atn_cm = FALSE;",
          "682:     int type;",
          "685:     type = check_heur_msg_type(pinfo);",
          "688:     switch(type){",
          "689:         case um:",
          "690:             TRY {",
          "691:                 dissect_CMGroundMessage_PDU(",
          "692:                   tvb,",
          "693:                   pinfo,",
          "694:                   NULL, NULL);",
          "696:                 is_atn_cm = TRUE; }",
          "697:             CATCH_ALL {",
          "698:                 is_atn_cm = FALSE; }",
          "699:             ENDTRY;",
          "700:             break;",
          "701:         case dm:",
          "702:             TRY {",
          "703:                 dissect_CMAircraftMessage_PDU(",
          "704:                     tvb,",
          "705:                     pinfo,",
          "706:                     NULL, NULL);",
          "708:                 is_atn_cm = TRUE;}",
          "709:             CATCH_ALL {",
          "710:                 is_atn_cm = FALSE; }",
          "711:             ENDTRY;",
          "712:             break;",
          "713:         default:",
          "714:             break;",
          "715:     }",
          "717:     if (is_atn_cm  == TRUE) {",
          "724:         if((pinfo->clnp_dstref) &&",
          "725:             (!pinfo->clnp_srcref)){",
          "727:           atn_cv = find_atn_conversation(",
          "728:                 &pinfo->dst,",
          "729:                 pinfo->clnp_dstref,",
          "730:                 &pinfo->src );",
          "731:         }",
          "733:         if((!pinfo->clnp_dstref) &&",
          "734:             (pinfo->clnp_srcref)){",
          "736:           atn_cv = find_atn_conversation(",
          "737:                 &pinfo->src,",
          "738:                 pinfo->clnp_srcref,",
          "739:                 &pinfo->dst );",
          "741:         }",
          "743:         if((pinfo->clnp_dstref) &&",
          "744:             (pinfo->clnp_srcref)){",
          "745:             atn_cv = find_atn_conversation(",
          "746:                 &pinfo->src,",
          "747:                 pinfo->clnp_srcref,",
          "748:                 &pinfo->dst );",
          "749:         }",
          "750:         if(atn_cv){",
          "751:             atn_cv->ae_qualifier = cma;",
          "752:         }",
          "753:         dissect_atn_cm(",
          "754:             tvb,",
          "755:             pinfo,",
          "756:             tree,",
          "757:             NULL);",
          "758:     }",
          "760:     return is_atn_cm;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "935:         \"Timeminutes\", HFILL }},",
          "939:     };",
          "943: #line 1 \"../../asn1/atn-cm/packet-atn-cm-ettarr.c\"",
          "",
          "[Removed Lines]",
          "938: #line 201 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "940:   static gint *ett[] = {",
          "",
          "[Added Lines]",
          "932: #line 195 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "934:     static gint *ett[] = {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "958:     &ett_atn_cm_Time,",
          "984: }",
          "986: void proto_reg_handoff_atn_cm(void)",
          "987: {",
          "995: }",
          "",
          "[Removed Lines]",
          "961: #line 204 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "962:    &ett_atn_cm",
          "963:   };",
          "966:   proto_atn_cm = proto_register_protocol(",
          "967:     ATN_CM_PROTO ,",
          "968:     \"ATN-CM\",",
          "969:     \"atn-cm\");",
          "971:   proto_register_field_array(",
          "972:     proto_atn_cm,",
          "973:     hf_atn_cm,",
          "974:     array_length(hf_atn_cm));",
          "976:   proto_register_subtree_array(",
          "977:     ett,",
          "978:     array_length(ett));",
          "980:   new_register_dissector(",
          "981:     \"atn-cm\",",
          "982:     dissect_atn_cm,",
          "983:     proto_atn_cm);",
          "989:   heur_dissector_add(",
          "990:     \"atn-ulcs\",",
          "991:     dissect_atn_cm_heur,",
          "992:     \"ATN-CM over ATN-ULCS\",",
          "993:     \"atn-cm-ulcs\",",
          "994:     proto_atn_cm, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "955: #line 198 \"../../asn1/atn-cm/packet-atn-cm-template.c\"",
          "956:       &ett_atn_cm",
          "957:     };",
          "960:     proto_atn_cm = proto_register_protocol(",
          "961:         ATN_CM_PROTO ,",
          "962:         \"ATN-CM\",",
          "963:         \"atn-cm\");",
          "965:     proto_register_field_array(",
          "966:         proto_atn_cm,",
          "967:         hf_atn_cm,",
          "968:         array_length(hf_atn_cm));",
          "970:     proto_register_subtree_array(",
          "971:         ett,",
          "972:         array_length(ett));",
          "974:     new_register_dissector(",
          "975:         \"atn-cm\",",
          "976:         dissect_atn_cm,",
          "977:         proto_atn_cm);",
          "983:     heur_dissector_add(",
          "984:         \"atn-ulcs\",",
          "985:         dissect_atn_cm_heur,",
          "986:         \"ATN-CM over ATN-ULCS\",",
          "987:         \"atn-cm-ulcs\",",
          "988:         proto_atn_cm, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-atn-cpdlc.c||epan/dissectors/packet-atn-cpdlc.c": [
          "File: epan/dissectors/packet-atn-cpdlc.c -> epan/dissectors/packet-atn-cpdlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  developper comments:",
          "58: #include \"config.h\"",
          "",
          "[Removed Lines]",
          "53:  Which CPDLC messages are supported ?",
          "54:   Protected Mode CPDLC (AeQualifier 22) and Plain Old CPDLC (AeQualifier 2)",
          "55:   The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "",
          "[Added Lines]",
          "48:   Which CPDLC messages are supported ?",
          "49:     Protected Mode CPDLC (AeQualifier 22) and Plain Old CPDLC (AeQualifier 2)",
          "50:     The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: static int dissect_GroundPDUs_PDU(",
          "80: static int dissect_AircraftPDUs_PDU(",
          "85: static int dissect_ProtectedGroundPDUs_PDU(",
          "90: static int dissect_ProtectedAircraftPDUs_PDU(",
          "",
          "[Removed Lines]",
          "76:   tvbuff_t *tvb _U_,",
          "77:   packet_info *pinfo _U_,",
          "78:   proto_tree *tree _U_,",
          "79:   void *data _U_);",
          "81:   tvbuff_t *tvb _U_,",
          "82:   packet_info *pinfo _U_,",
          "83:   proto_tree *tree _U_,",
          "84:   void *data _U_);",
          "86:   tvbuff_t *tvb _U_,",
          "87:   packet_info *pinfo _U_,",
          "88:   proto_tree *tree _U_,",
          "89:   void *data _U_);",
          "91:   tvbuff_t *tvb _U_,",
          "92:   packet_info *pinfo _U_,",
          "93:   proto_tree *tree _U_,",
          "94:   void *data _U_);",
          "",
          "[Added Lines]",
          "71:     tvbuff_t *tvb _U_,",
          "72:     packet_info *pinfo _U_,",
          "73:     proto_tree *tree _U_,",
          "74:     void *data _U_);",
          "76:     tvbuff_t *tvb _U_,",
          "77:     packet_info *pinfo _U_,",
          "78:     proto_tree *tree _U_,",
          "79:     void *data _U_);",
          "81:     tvbuff_t *tvb _U_,",
          "82:     packet_info *pinfo _U_,",
          "83:     proto_tree *tree _U_,",
          "84:     void *data _U_);",
          "86:     tvbuff_t *tvb _U_,",
          "87:     packet_info *pinfo _U_,",
          "88:     proto_tree *tree _U_,",
          "89:     void *data _U_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "702: #line 89 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "",
          "[Added Lines]",
          "697: #line 84 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "848: static gint ett_atn_cpdlc_WindSpeed = -1;",
          "852: static gint ett_atn_cpdlc = -1;",
          "",
          "[Removed Lines]",
          "851: #line 91 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "",
          "[Added Lines]",
          "846: #line 86 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1187: static int",
          "1188: dissect_atn_cpdlc_Fix(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1191:   return offset;",
          "1192: }",
          "",
          "[Removed Lines]",
          "1189:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "1184:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1468: static int",
          "1469: dissect_atn_cpdlc_NavaidName(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1472:   return offset;",
          "1473: }",
          "",
          "[Removed Lines]",
          "1470:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 4, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "1465:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 4, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1492: static int",
          "1493: dissect_atn_cpdlc_Airport(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1496:   return offset;",
          "1497: }",
          "",
          "[Removed Lines]",
          "1494:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 4, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "1489:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 4, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2117: static int",
          "2118: dissect_atn_cpdlc_AircraftFlightIdentification(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2121:   return offset;",
          "2122: }",
          "",
          "[Removed Lines]",
          "2119:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 8, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2114:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 8, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2155: static int",
          "2156: dissect_atn_cpdlc_ATSRouteDesignator(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2159:   return offset;",
          "2160: }",
          "",
          "[Removed Lines]",
          "2157:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 7, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2152:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,2, 7, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2209: static int",
          "2210: dissect_atn_cpdlc_Procedure(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2213:   return offset;",
          "2214: }",
          "",
          "[Removed Lines]",
          "2211:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 20, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2206:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 20, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2218: static int",
          "2219: dissect_atn_cpdlc_ProcedureTransition(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2222:   return offset;",
          "2223: }",
          "",
          "[Removed Lines]",
          "2220:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2215:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 5, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2345: static int",
          "2346: dissect_atn_cpdlc_FacilityDesignation(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2349:   return offset;",
          "2350: }",
          "",
          "[Removed Lines]",
          "2347:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 8, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2342:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,4, 8, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2354: static int",
          "2355: dissect_atn_cpdlc_FacilityName(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2358:   return offset;",
          "2359: }",
          "",
          "[Removed Lines]",
          "2356:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,3, 18, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2351:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,3, 18, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2595: static int",
          "2596: dissect_atn_cpdlc_ATISCode(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2599:   return offset;",
          "2600: }",
          "",
          "[Removed Lines]",
          "2597:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 1, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "2592:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 1, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3051: static int",
          "3052: dissect_atn_cpdlc_FreeText(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3055:   return offset;",
          "3056: }",
          "",
          "[Removed Lines]",
          "3053:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 256, FALSE, ia5alpha , 127, NULL);",
          "",
          "[Added Lines]",
          "3048:     offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,1, 256, FALSE, ia5alpha , 127, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5111: static int",
          "5112: dissect_atn_cpdlc_AlgorithmIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5118:   return offset;",
          "",
          "[Removed Lines]",
          "5113:   proto_tree *top_tree=NULL;",
          "5115:   offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, top_tree, NULL);",
          "",
          "[Added Lines]",
          "5108:     proto_tree *top_tree=NULL;",
          "5110:     offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, top_tree, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5123: static int",
          "5124: dissect_atn_cpdlc_CPDLCMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5143:   return offset;",
          "",
          "[Removed Lines]",
          "5125:   tvbuff_t *tvb_usr = NULL;",
          "5127:   offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &tvb_usr, NULL);",
          "5129:   if (tvb_usr) {",
          "5130:    switch(check_heur_msg_type(actx->pinfo)){",
          "5131:      case dm:",
          "5132:        dissect_atn_cpdlc_ATCDownlinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx, tree, hf_index);",
          "5133:        break;",
          "5134:      case um:",
          "5135:        dissect_atn_cpdlc_ATCUplinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx , tree, hf_index);",
          "5136:        break;",
          "5137:      default:",
          "5138:        break;",
          "5139:    }",
          "5140:   }",
          "",
          "[Added Lines]",
          "5120:     tvbuff_t *tvb_usr = NULL;",
          "5122:     offset = dissect_per_bit_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &tvb_usr, NULL);",
          "5124:     if (tvb_usr) {",
          "5125:       switch(check_heur_msg_type(actx->pinfo)){",
          "5126:           case dm:",
          "5127:               dissect_atn_cpdlc_ATCDownlinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx, tree, hf_index);",
          "5128:               break;",
          "5129:           case um:",
          "5130:               dissect_atn_cpdlc_ATCUplinkMessage(tvb_new_subset_remaining(tvb_usr, 0), 0, actx , tree, hf_index);",
          "5131:               break;",
          "5132:           default:",
          "5133:               break;",
          "5134:       }",
          "5135:     }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5305: static int proto_atn_cpdlc = -1;",
          "",
          "[Removed Lines]",
          "5302: #line 94 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "",
          "[Added Lines]",
          "5297: #line 89 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5308: static int",
          "5309: dissect_atn_cpdlc(",
          "5314: {",
          "5409: }",
          "5411: static gboolean",
          "5412: dissect_atn_cpdlc_heur(",
          "5417: {",
          "5510: }",
          "",
          "[Removed Lines]",
          "5310:   tvbuff_t *tvb,",
          "5311:   packet_info *pinfo,",
          "5312:   proto_tree *tree,",
          "5313:   void *data _U_)",
          "5339:   proto_tree *atn_cpdlc_tree = NULL;",
          "5340:   atn_conversation_t *atn_cv = NULL;",
          "5348:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "5349:     atn_cv = find_atn_conversation(",
          "5350:       &pinfo->dst,",
          "5351:       pinfo->clnp_dstref,",
          "5352:       &pinfo->src );",
          "5353:   }",
          "5355:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5356:     atn_cv = find_atn_conversation(",
          "5357:       &pinfo->src,",
          "5358:       pinfo->clnp_srcref,",
          "5359:       &pinfo->dst );",
          "5360:   }",
          "5362:   if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5363:     atn_cv = find_atn_conversation(",
          "5364:       &pinfo->src,",
          "5365:       pinfo->clnp_srcref,",
          "5366:       &pinfo->dst );",
          "5367:   }",
          "5370:    return 0; }",
          "5372:   atn_cpdlc_tree = proto_tree_add_subtree(",
          "5373:     tree, tvb, 0, -1, ett_atn_cpdlc, NULL,",
          "5374:     ATN_CPDLC_PROTO );",
          "5376:   switch(atn_cv->ae_qualifier){",
          "5377:     case  pmcpdlc:",
          "5378:       if( check_heur_msg_type(pinfo) == um ) {",
          "5380:         dissect_ProtectedGroundPDUs_PDU(",
          "5381:           tvb,",
          "5382:           pinfo,",
          "5383:           atn_cpdlc_tree, NULL);",
          "5385:         dissect_ProtectedAircraftPDUs_PDU(",
          "5386:           tvb,",
          "5387:           pinfo,",
          "5388:          atn_cpdlc_tree, NULL);",
          "5389:       }",
          "5390:       break;",
          "5391:     case cpdlc:",
          "5392:       if( check_heur_msg_type(pinfo) == um ) {",
          "5394:         dissect_GroundPDUs_PDU(",
          "5395:           tvb,",
          "5396:           pinfo,",
          "5397:           atn_cpdlc_tree, NULL);",
          "5399:         dissect_AircraftPDUs_PDU(",
          "5400:           tvb,",
          "5401:           pinfo,",
          "5402:           atn_cpdlc_tree, NULL);",
          "5403:       }",
          "5404:       break;",
          "5405:     default:",
          "5406:       break;",
          "5407:   }",
          "5408:   return tvb_reported_length_remaining(tvb, 0);",
          "5413:   tvbuff_t *tvb,",
          "5414:   packet_info *pinfo,",
          "5415:   proto_tree *tree,",
          "5416:   void *data _U_)",
          "5418:   atn_conversation_t *atn_cv = NULL;",
          "5419:   volatile gboolean is_atn_cpdlc = FALSE;",
          "5420:   volatile gboolean is_pm = FALSE;",
          "5421:   int type;",
          "5423:   type = check_heur_msg_type(pinfo);",
          "5425:   switch(type){",
          "5426:    case um:",
          "5427:      TRY {",
          "5428:       dissect_ProtectedGroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5429:       is_atn_cpdlc = TRUE;",
          "5430:       is_pm = TRUE;}",
          "5431:      CATCH_ALL{",
          "5432:       is_atn_cpdlc = FALSE;",
          "5433:       is_pm = FALSE;}",
          "5434:      ENDTRY;",
          "5435:      if (is_atn_cpdlc) {",
          "5436:       break;",
          "5437:      }",
          "5438:      TRY {",
          "5439:           dissect_GroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5440:       is_pm = FALSE;",
          "5441:       is_atn_cpdlc = TRUE;}",
          "5442:      CATCH_ALL{",
          "5443:       is_atn_cpdlc = FALSE;",
          "5444:       is_pm = FALSE;}",
          "5445:      ENDTRY;",
          "5446:     break;",
          "5447:   case dm:",
          "5448:      TRY {",
          "5449:       dissect_ProtectedAircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5450:       is_atn_cpdlc = TRUE;",
          "5451:       is_pm = TRUE;}",
          "5452:      CATCH_ALL {",
          "5453:       is_atn_cpdlc = FALSE;",
          "5454:       is_pm = FALSE; }",
          "5455:      ENDTRY;",
          "5456:      if (is_atn_cpdlc) {",
          "5457:       break;",
          "5458:      }",
          "5459:      TRY{",
          "5460:       dissect_AircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5461:       is_atn_cpdlc = TRUE;",
          "5462:       is_pm = FALSE;}",
          "5463:      CATCH_ALL{",
          "5464:       is_atn_cpdlc = FALSE;",
          "5465:       is_pm = FALSE;}",
          "5466:      ENDTRY;",
          "5467:    break;",
          "5468:   default:",
          "5469:    break;",
          "5470:  }",
          "5472:  if(is_atn_cpdlc){",
          "5480:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "5481:     atn_cv = find_atn_conversation(&pinfo->dst,",
          "5482:              pinfo->clnp_dstref,",
          "5483:              &pinfo->src );",
          "5484:   }",
          "5486:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5487:     atn_cv = find_atn_conversation(&pinfo->src,",
          "5488:              pinfo->clnp_srcref,",
          "5489:              &pinfo->dst );",
          "5490:   }",
          "5492:   if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5493:     atn_cv = find_atn_conversation(&pinfo->src,",
          "5494:              pinfo->clnp_srcref,",
          "5495:              &pinfo->dst );",
          "5496:   }",
          "5499:    if(is_pm == TRUE) {",
          "5500:     atn_cv->ae_qualifier =  pmcpdlc; }",
          "5501:    else {",
          "5502:     atn_cv->ae_qualifier =  cpdlc; }",
          "5503:    dissect_atn_cpdlc(tvb, pinfo, tree, NULL);",
          "5504:   }",
          "5506:   is_atn_cpdlc = FALSE;",
          "5507:  }",
          "5509:  return is_atn_cpdlc;",
          "",
          "[Added Lines]",
          "5305:     tvbuff_t *tvb,",
          "5306:     packet_info *pinfo,",
          "5307:     proto_tree *tree,",
          "5308:     void *data _U_)",
          "5334:     proto_tree *atn_cpdlc_tree = NULL;",
          "5335:     atn_conversation_t *atn_cv = NULL;",
          "5343:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "5344:         atn_cv = find_atn_conversation(",
          "5345:             &pinfo->dst,",
          "5346:             pinfo->clnp_dstref,",
          "5347:             &pinfo->src );",
          "5348:     }",
          "5350:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5351:         atn_cv = find_atn_conversation(",
          "5352:             &pinfo->src,",
          "5353:             pinfo->clnp_srcref,",
          "5354:             &pinfo->dst );",
          "5355:     }",
          "5357:     if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5358:         atn_cv = find_atn_conversation(",
          "5359:             &pinfo->src,",
          "5360:             pinfo->clnp_srcref,",
          "5361:             &pinfo->dst );",
          "5362:     }",
          "5365:       return 0; }",
          "5367:     atn_cpdlc_tree = proto_tree_add_subtree(",
          "5368:         tree, tvb, 0, -1, ett_atn_cpdlc, NULL,",
          "5369:         ATN_CPDLC_PROTO );",
          "5371:     switch(atn_cv->ae_qualifier){",
          "5372:         case  pmcpdlc:",
          "5373:             if( check_heur_msg_type(pinfo) == um ) {",
          "5375:                 dissect_ProtectedGroundPDUs_PDU(",
          "5376:                     tvb,",
          "5377:                     pinfo,",
          "5378:                     atn_cpdlc_tree, NULL);",
          "5380:                 dissect_ProtectedAircraftPDUs_PDU(",
          "5381:                     tvb,",
          "5382:                     pinfo,",
          "5383:                   atn_cpdlc_tree, NULL);",
          "5384:             }",
          "5385:             break;",
          "5386:         case cpdlc:",
          "5387:             if( check_heur_msg_type(pinfo) == um ) {",
          "5389:                 dissect_GroundPDUs_PDU(",
          "5390:                     tvb,",
          "5391:                     pinfo,",
          "5392:                     atn_cpdlc_tree, NULL);",
          "5394:                 dissect_AircraftPDUs_PDU(",
          "5395:                     tvb,",
          "5396:                     pinfo,",
          "5397:                     atn_cpdlc_tree, NULL);",
          "5398:             }",
          "5399:             break;",
          "5400:         default:",
          "5401:             break;",
          "5402:     }",
          "5403:     return tvb_reported_length_remaining(tvb, 0);",
          "5408:     tvbuff_t *tvb,",
          "5409:     packet_info *pinfo,",
          "5410:     proto_tree *tree,",
          "5411:     void *data _U_)",
          "5413:     atn_conversation_t *atn_cv = NULL;",
          "5414:     volatile gboolean is_atn_cpdlc = FALSE;",
          "5415:     volatile gboolean is_pm = FALSE;",
          "5416:     int type;",
          "5418:     type = check_heur_msg_type(pinfo);",
          "5420:     switch(type){",
          "5421:       case um:",
          "5422:           TRY {",
          "5423:             dissect_ProtectedGroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5424:             is_atn_cpdlc = TRUE;",
          "5425:             is_pm = TRUE;}",
          "5426:           CATCH_ALL{",
          "5427:             is_atn_cpdlc = FALSE;",
          "5428:             is_pm = FALSE;}",
          "5429:           ENDTRY;",
          "5430:           if (is_atn_cpdlc) {",
          "5431:             break;",
          "5432:           }",
          "5433:           TRY {",
          "5434:             dissect_GroundPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5435:             is_pm = FALSE;",
          "5436:             is_atn_cpdlc = TRUE;}",
          "5437:           CATCH_ALL{",
          "5438:             is_atn_cpdlc = FALSE;",
          "5439:             is_pm = FALSE;}",
          "5440:           ENDTRY;",
          "5441:         break;",
          "5442:     case dm:",
          "5443:           TRY {",
          "5444:             dissect_ProtectedAircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5445:             is_atn_cpdlc = TRUE;",
          "5446:             is_pm = TRUE;}",
          "5447:           CATCH_ALL {",
          "5448:             is_atn_cpdlc = FALSE;",
          "5449:             is_pm = FALSE; }",
          "5450:           ENDTRY;",
          "5451:           if (is_atn_cpdlc) {",
          "5452:             break;",
          "5453:           }",
          "5454:           TRY{",
          "5455:             dissect_AircraftPDUs_PDU(tvb, pinfo, NULL, NULL);",
          "5456:             is_atn_cpdlc = TRUE;",
          "5457:             is_pm = FALSE;}",
          "5458:           CATCH_ALL{",
          "5459:             is_atn_cpdlc = FALSE;",
          "5460:             is_pm = FALSE;}",
          "5461:           ENDTRY;",
          "5462:       break;",
          "5463:     default:",
          "5464:       break;",
          "5465:   }",
          "5467:   if(is_atn_cpdlc){",
          "5475:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "5476:         atn_cv = find_atn_conversation(&pinfo->dst,",
          "5477:                           pinfo->clnp_dstref,",
          "5478:                           &pinfo->src );",
          "5479:     }",
          "5481:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5482:         atn_cv = find_atn_conversation(&pinfo->src,",
          "5483:                           pinfo->clnp_srcref,",
          "5484:                           &pinfo->dst );",
          "5485:     }",
          "5487:     if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "5488:         atn_cv = find_atn_conversation(&pinfo->src,",
          "5489:                           pinfo->clnp_srcref,",
          "5490:                           &pinfo->dst );",
          "5491:     }",
          "5494:       if(is_pm == TRUE) {",
          "5495:           atn_cv->ae_qualifier =  pmcpdlc; }",
          "5496:       else {",
          "5497:           atn_cv->ae_qualifier =  cpdlc; }",
          "5498:       dissect_atn_cpdlc(tvb, pinfo, tree, NULL);",
          "5499:     }",
          "5501:       is_atn_cpdlc = FALSE;",
          "5502:   }",
          "5504:   return is_atn_cpdlc;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7923:         NULL, HFILL }},",
          "7932: #line 1 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-ettarr.c\"",
          "",
          "[Removed Lines]",
          "7926: #line 309 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "7927:    };",
          "7929:   static gint *ett[] = {",
          "",
          "[Added Lines]",
          "7921: #line 304 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "7922:       };",
          "7924:     static gint *ett[] = {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "8074:     &ett_atn_cpdlc_WindSpeed,",
          "8100: }",
          "8102: void proto_reg_handoff_atn_cpdlc(void)",
          "8103: {",
          "8111: }",
          "",
          "[Removed Lines]",
          "8077: #line 313 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "8078:     &ett_atn_cpdlc",
          "8079:   };",
          "8082:   proto_atn_cpdlc = proto_register_protocol(",
          "8083:     ATN_CPDLC_PROTO ,",
          "8084:     \"ATN-CPDLC\",",
          "8085:     \"atn-cpdlc\");",
          "8087:   proto_register_field_array(",
          "8088:     proto_atn_cpdlc,",
          "8089:     hf_atn_cpdlc,",
          "8090:     array_length(hf_atn_cpdlc));",
          "8092:   proto_register_subtree_array(",
          "8093:     ett,",
          "8094:     array_length(ett));",
          "8096:   new_register_dissector(",
          "8097:     \"atn-cpdlc\",",
          "8098:     dissect_atn_cpdlc,",
          "8099:     proto_atn_cpdlc);",
          "8105:   heur_dissector_add(",
          "8106:     \"atn-ulcs\",",
          "8107:     dissect_atn_cpdlc_heur,",
          "8108:     \"ATN-CPDLC over ATN-ULCS\",",
          "8109:     \"atn-cpdlc-ulcs\",",
          "8110:     proto_atn_cpdlc, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "8072: #line 308 \"../../asn1/atn-cpdlc/packet-atn-cpdlc-template.c\"",
          "8073:         &ett_atn_cpdlc",
          "8074:     };",
          "8077:     proto_atn_cpdlc = proto_register_protocol(",
          "8078:         ATN_CPDLC_PROTO ,",
          "8079:         \"ATN-CPDLC\",",
          "8080:         \"atn-cpdlc\");",
          "8082:     proto_register_field_array(",
          "8083:         proto_atn_cpdlc,",
          "8084:         hf_atn_cpdlc,",
          "8085:         array_length(hf_atn_cpdlc));",
          "8087:     proto_register_subtree_array(",
          "8088:         ett,",
          "8089:         array_length(ett));",
          "8091:     new_register_dissector(",
          "8092:         \"atn-cpdlc\",",
          "8093:         dissect_atn_cpdlc,",
          "8094:         proto_atn_cpdlc);",
          "8100:     heur_dissector_add(",
          "8101:         \"atn-ulcs\",",
          "8102:         dissect_atn_cpdlc_heur,",
          "8103:         \"ATN-CPDLC over ATN-ULCS\",",
          "8104:         \"atn-cpdlc-ulcs\",",
          "8105:         proto_atn_cpdlc, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-atn-ulcs.c||epan/dissectors/packet-atn-ulcs.c": [
          "File: epan/dissectors/packet-atn-ulcs.c -> epan/dissectors/packet-atn-ulcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: why not using existing ses, pres and acse dissectors ?",
          "73: why using conversations ?",
          "80: what is the use of AARQ/AARE data ?",
          "95: which ATN standard is supported ?",
          "105:  known defects/deficiencies:",
          "",
          "[Removed Lines]",
          "62:  developper comments:",
          "64:   ATN upper layers are derived from OSI standards for session,",
          "65:   presentation and application but the encoding differs",
          "66:   (it's PER instead of BER encoding to save bandwith).",
          "67:   Session and presentation use the \"null\" encoding option,",
          "68:   meaning that they are only present at connection establishment",
          "69:   and ommitted otherwise.",
          "70:   Instead of adapting existing dissectors it seemed simpler and cleaner",
          "71:   to implement everything the new atn-ulcs dissector.",
          "74:   PER encoded user data is ambigous; the same encoding may apply to a CM or",
          "75:   CPDLC PDU. The workaround is to decode on a transport connection basis.",
          "76:   I use my own version of conversations to identify",
          "77:   the transport connection the PDU belongs to for the standard functions",
          "78:   from \"conversation.h\" didn't work out.",
          "81:   Converstions should be maintained on the COTP layer in a standard way",
          "82:   for there are usually more packets available than in the layers above.",
          "83:   In the worst case my dissector is called from a DT packet which",
          "84:   has destination references but no source reference.",
          "85:   I have to guess the reference used the other way round",
          "86:   (curently I am using ACSE PDU'S used during OSI connection establishment for that).",
          "87:   The idea is that each ACSE AARQ is answered by ACSE AARE and having this sequence",
          "88:   I have all the source/destination references for this transport connection.",
          "89:   I use AARQ/AARE data to store the source/destination reference of AARQ as well",
          "90:   as the optional ae-qualifier which tells me the application and",
          "91:   the dissector I have to use.",
          "92:   This approach donesn't work well when there are interleaving AARQ/AARE sequences for",
          "93:   the same aircraft.",
          "96:   The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "97:   No ATN Secutity is supported.",
          "98:   note:",
          "99:   The ATN upper layers are derived from OSI standards (ICAO DOC 9705)",
          "100:   while ATN/IPS (ICAO DOC 9896) which is entirely based on IPV6.",
          "107: - user-information within AARE is sometines not decoded due to an unset flag",
          "108:   (the field is optional). As far as I can tell asn2wrs is right here,",
          "109:   but on the other hand I know that in all of this cases user-information",
          "110:   is present and is processed by the ATN end system.",
          "111:   Maybe a true ATN expert may help me out here.",
          "113:  - The conversation handling is based on src/dst addresses as well as",
          "114:   source or destination references depending on the TP4 packet type.",
          "115:   This means that after some time these references get reused for",
          "116:   new conversations. This almost certain happens for traces longer",
          "117:   than one day rendering this dissector unsuitable for captures exceeding",
          "118:   this one day.",
          "",
          "[Added Lines]",
          "57:  developer comments:",
          "59:     ATN upper layers are derived from OSI standards for session,",
          "60:     presentation and application but the encoding differs",
          "61:     (it's PER instead of BER encoding to save bandwith).",
          "62:     Session and presentation use the \"null\" encoding option,",
          "63:     meaning that they are only present at connection establishment",
          "64:     and ommitted otherwise.",
          "65:     Instead of adapting existing dissectors it seemed simpler and cleaner",
          "66:     to implement everything the new atn-ulcs dissector.",
          "69:     PER encoded user data is ambigous; the same encoding may apply to a CM or",
          "70:     CPDLC PDU. The workaround is to decode on a transport connection basis.",
          "71:     I use my own version of conversations to identify",
          "72:     the transport connection the PDU belongs to for the standard functions",
          "73:     from \"conversation.h\" didn't work out.",
          "76:     Converstions should be maintained on the COTP layer in a standard way",
          "77:     for there are usually more packets available than in the layers above.",
          "78:     In the worst case my dissector is called from a DT packet which",
          "79:     has destination references but no source reference.",
          "80:     I have to guess the reference used the other way round",
          "81:     (curently I am using ACSE PDU'S used during OSI connection establishment for that).",
          "82:     The idea is that each ACSE AARQ is answered by ACSE AARE and having this sequence",
          "83:     I have all the source/destination references for this transport connection.",
          "84:     I use AARQ/AARE data to store the source/destination reference of AARQ as well",
          "85:     as the optional ae-qualifier which tells me the application and",
          "86:     the dissector I have to use.",
          "87:     This approach donesn't work well when there are interleaving AARQ/AARE sequences for",
          "88:     the same aircraft.",
          "91:     The dissector has been tested with ICAO doc9705 Edition2 compliant traffic.",
          "92:     No ATN Secutity is supported.",
          "93:     note:",
          "94:     The ATN upper layers are derived from OSI standards (ICAO DOC 9705)",
          "95:     while ATN/IPS (ICAO DOC 9896) which is entirely based on IPV6.",
          "102: - user-information within AARE is sometines not decoded due to an unset flag",
          "103:     (the field is optional). As far as I can tell asn2wrs is right here,",
          "104:     but on the other hand I know that in all of this cases user-information",
          "105:     is present and is processed by the ATN end system.",
          "106:     Maybe a true ATN expert may help me out here.",
          "108:   - The conversation handling is based on src/dst addresses as well as",
          "109:     source or destination references depending on the TP4 packet type.",
          "110:     This means that after some time these references get reused for",
          "111:     new conversations. This almost certain happens for traces longer",
          "112:     than one day rendering this dissector unsuitable for captures exceeding",
          "113:     this one day.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: static int dissect_atn_ulcs_T_externalt_encoding_single_asn1_type(",
          "168: static int dissect_atn_ulcs_T_externalt_encoding_octet_aligned(",
          "175: static int dissect_atn_ulcs_T_externalt_encoding_arbitrary(",
          "182: static int dissect_ACSE_apdu_PDU(",
          "188: guint32 dissect_per_object_descriptor_t(",
          "",
          "[Removed Lines]",
          "161:   tvbuff_t *tvb _U_,",
          "162:   int offset _U_,",
          "163:   asn1_ctx_t *actx _U_,",
          "164:   proto_tree *tree _U_,",
          "165:   int hf_index",
          "166:   _U_);",
          "169:   tvbuff_t *tvb _U_,",
          "170:   int offset _U_,",
          "171:   asn1_ctx_t *actx _U_,",
          "172:   proto_tree *tree _U_,",
          "173:   int hf_index _U_);",
          "176:   tvbuff_t *tvb _U_,",
          "177:   int offset _U_,",
          "178:   asn1_ctx_t *actx _U_,",
          "179:   proto_tree *tree _U_,",
          "180:   int hf_index _U_);",
          "183:   tvbuff_t *tvb _U_,",
          "184:   packet_info *pinfo _U_,",
          "185:   proto_tree *tree _U_,",
          "186:   void *data _U_);",
          "189:   tvbuff_t *tvb,",
          "190:   guint32 offset,",
          "191:   asn1_ctx_t *actx,",
          "192:   proto_tree *tree,",
          "193:   int hf_index,",
          "194:   tvbuff_t **value_tvb);",
          "196: static gint dissect_atn_ulcs(",
          "197:   tvbuff_t *tvb,",
          "198:   packet_info *pinfo,",
          "199:   proto_tree *tree,",
          "200:   void *data _U_);",
          "",
          "[Added Lines]",
          "156:     tvbuff_t *tvb _U_,",
          "157:     int offset _U_,",
          "158:     asn1_ctx_t *actx _U_,",
          "159:     proto_tree *tree _U_,",
          "160:     int hf_index",
          "161:     _U_);",
          "164:     tvbuff_t *tvb _U_,",
          "165:     int offset _U_,",
          "166:     asn1_ctx_t *actx _U_,",
          "167:     proto_tree *tree _U_,",
          "168:     int hf_index _U_);",
          "171:     tvbuff_t *tvb _U_,",
          "172:     int offset _U_,",
          "173:     asn1_ctx_t *actx _U_,",
          "174:     proto_tree *tree _U_,",
          "175:     int hf_index _U_);",
          "178:     tvbuff_t *tvb _U_,",
          "179:     packet_info *pinfo _U_,",
          "180:     proto_tree *tree _U_,",
          "181:     void *data _U_);",
          "184:     tvbuff_t *tvb,",
          "185:     guint32 offset,",
          "186:     asn1_ctx_t *actx,",
          "187:     proto_tree *tree,",
          "188:     int hf_index,",
          "189:     tvbuff_t **value_tvb);",
          "191: static gint dissect_atn_ulcs(",
          "192:     tvbuff_t *tvb,",
          "193:     packet_info *pinfo,",
          "194:     proto_tree  *tree,",
          "195:     void *data _U_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277: static int hf_atn_ulcs_ACSE_requirements_application_context_negotiation = -1;",
          "",
          "[Removed Lines]",
          "280: #line 195 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "",
          "[Added Lines]",
          "275: #line 190 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static gint ett_atn_ulcs_AttributeTypeAndValue = -1;",
          "313: static gint ett_atn_ulcs = -1;",
          "314: static gint ett_atn_acse = -1;",
          "",
          "[Removed Lines]",
          "312: #line 197 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "",
          "[Added Lines]",
          "307: #line 192 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337: static int",
          "338: dissect_atn_ulcs_Presentation_context_identifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "352:   return offset;",
          "",
          "[Removed Lines]",
          "340:   offset = dissect_per_constrained_integer(",
          "341:     tvb,",
          "342:     offset,",
          "343:     actx,",
          "344:     tree,",
          "345:     hf_index,",
          "346:     1U,",
          "347:     127U,",
          "348:     &ulcs_context_value,",
          "349:     TRUE);",
          "",
          "[Added Lines]",
          "335:     offset = dissect_per_constrained_integer(",
          "336:         tvb,",
          "337:         offset,",
          "338:         actx,",
          "339:         tree,",
          "340:         hf_index,",
          "341:         1U,",
          "342:         127U,",
          "343:         &ulcs_context_value,",
          "344:         TRUE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376: static int",
          "377: dissect_atn_ulcs_T_pdv_list_presentation_data_values_arbitrary(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "465:   return offset;",
          "",
          "[Removed Lines]",
          "379:   packet_info * pinfo = actx->pinfo;",
          "380:   tvbuff_t *tvb_usr = NULL;",
          "381:   proto_tree *atn_ulcs_tree = NULL;",
          "382:   atn_conversation_t *atn_cv = NULL;",
          "383:   heur_dtbl_entry_t *hdtbl_entry;",
          "386:   offset = dissect_per_bit_string(",
          "387:     tvb,",
          "388:     offset,",
          "389:     actx,",
          "390:     tree,",
          "391:     hf_index,",
          "392:     NO_BOUND,",
          "393:     NO_BOUND,",
          "394:     FALSE,",
          "395:     &tvb_usr,",
          "396:     NULL);",
          "398:   if (tvb_usr) {",
          "400:    switch(ulcs_context_value){",
          "402:        atn_ulcs_tree = proto_tree_add_subtree(",
          "403:          root_tree, tvb, offset, 0,",
          "404:          ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "406:        dissect_ACSE_apdu_PDU(",
          "407:          tvb_new_subset_remaining(tvb_usr, 0),",
          "408:          pinfo,",
          "409:          atn_ulcs_tree, NULL);",
          "410:        break;",
          "414:         atn_cv = find_atn_conversation(",
          "415:           &pinfo->dst,",
          "416:           pinfo->clnp_dstref,",
          "417:           &pinfo->src);",
          "419:         if(atn_cv) {",
          "420:           switch(atn_cv->ae_qualifier){",
          "422:               call_dissector_with_data(",
          "423:                 atn_cm_handle,",
          "424:                 tvb_new_subset_remaining(tvb_usr, 0),",
          "425:                 pinfo,",
          "426:                 root_tree,",
          "427:                 NULL);",
          "428:               break;",
          "431:               call_dissector_with_data(",
          "432:                 atn_cpdlc_handle,",
          "433:                 tvb_new_subset_remaining(tvb_usr, 0),",
          "434:                 pinfo,",
          "435:                 root_tree,",
          "436:                 NULL);",
          "437:               break;",
          "439:               dissector_try_heuristic(",
          "440:                 atn_ulcs_heur_subdissector_list,",
          "441:                 tvb_new_subset_remaining(tvb_usr,0),",
          "442:                 actx->pinfo,",
          "443:                 root_tree,",
          "444:                 &hdtbl_entry,",
          "445:                 NULL);",
          "446:               break;",
          "447:           }",
          "448:         }",
          "449:         else{",
          "450:           dissector_try_heuristic(",
          "451:             atn_ulcs_heur_subdissector_list,",
          "452:             tvb_new_subset_remaining(tvb_usr,0),",
          "453:             actx->pinfo,",
          "454:             root_tree,",
          "455:             &hdtbl_entry,",
          "456:             NULL);",
          "457:         }",
          "458:         break;",
          "459:       default:",
          "460:         break;",
          "462:   }",
          "",
          "[Added Lines]",
          "374:     packet_info * pinfo = actx->pinfo;",
          "375:     tvbuff_t *tvb_usr = NULL;",
          "376:     proto_tree *atn_ulcs_tree = NULL;",
          "377:     atn_conversation_t *atn_cv = NULL;",
          "378:     heur_dtbl_entry_t *hdtbl_entry;",
          "381:     offset = dissect_per_bit_string(",
          "382:         tvb,",
          "383:         offset,",
          "384:         actx,",
          "385:         tree,",
          "386:         hf_index,",
          "387:         NO_BOUND,",
          "388:         NO_BOUND,",
          "389:         FALSE,",
          "390:         &tvb_usr,",
          "391:         NULL);",
          "393:     if (tvb_usr) {",
          "395:       switch(ulcs_context_value){",
          "397:               atn_ulcs_tree = proto_tree_add_subtree(",
          "398:                   root_tree, tvb, offset, 0,",
          "399:                   ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "401:               dissect_ACSE_apdu_PDU(",
          "402:                   tvb_new_subset_remaining(tvb_usr, 0),",
          "403:                   pinfo,",
          "404:                   atn_ulcs_tree, NULL);",
          "405:               break;",
          "409:                 atn_cv = find_atn_conversation(",
          "410:                     &pinfo->dst,",
          "411:                     pinfo->clnp_dstref,",
          "412:                     &pinfo->src);",
          "414:                 if(atn_cv) {",
          "415:                     switch(atn_cv->ae_qualifier){",
          "417:                             call_dissector_with_data(",
          "418:                                 atn_cm_handle,",
          "419:                                 tvb_new_subset_remaining(tvb_usr, 0),",
          "420:                                 pinfo,",
          "421:                                 root_tree,",
          "422:                                 NULL);",
          "423:                             break;",
          "426:                             call_dissector_with_data(",
          "427:                                 atn_cpdlc_handle,",
          "428:                                 tvb_new_subset_remaining(tvb_usr, 0),",
          "429:                                 pinfo,",
          "430:                                 root_tree,",
          "431:                                 NULL);",
          "432:                             break;",
          "434:                             dissector_try_heuristic(",
          "435:                                 atn_ulcs_heur_subdissector_list,",
          "436:                                 tvb_new_subset_remaining(tvb_usr,0),",
          "437:                                 actx->pinfo,",
          "438:                                 root_tree,",
          "439:                                 &hdtbl_entry,",
          "440:                                 NULL);",
          "441:                             break;",
          "442:                     }",
          "443:                 }",
          "444:                 else{",
          "445:                     dissector_try_heuristic(",
          "446:                         atn_ulcs_heur_subdissector_list,",
          "447:                         tvb_new_subset_remaining(tvb_usr,0),",
          "448:                         actx->pinfo,",
          "449:                         root_tree,",
          "450:                         &hdtbl_entry,",
          "451:                         NULL);",
          "452:                 }",
          "453:                 break;",
          "454:             default:",
          "455:                 break;",
          "457:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "542: static int",
          "543: dissect_atn_ulcs_T_data_value_descriptor(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "555:   actx->external.data_value_descr_present = TRUE;",
          "",
          "[Removed Lines]",
          "545:  offset = dissect_per_octet_string(",
          "546:    tvb,",
          "547:    offset,",
          "548:    actx,",
          "549:    tree,",
          "550:    hf_index,",
          "551:    -1,",
          "552:    -1,",
          "553:    FALSE,",
          "554:    &actx->external.data_value_descriptor);",
          "",
          "[Added Lines]",
          "540:   offset = dissect_per_octet_string(",
          "541:       tvb,",
          "542:       offset,",
          "543:       actx,",
          "544:       tree,",
          "545:       hf_index,",
          "546:       -1,",
          "547:       -1,",
          "548:       FALSE,",
          "549:       &actx->external.data_value_descriptor);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "563: static int",
          "564: dissect_atn_ulcs_T_externalt_encoding_single_asn1_type(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "",
          "[Removed Lines]",
          "566:    offset = dissect_per_open_type(tvb, offset, actx, tree, hf_index, NULL);",
          "",
          "[Added Lines]",
          "561:     offset = dissect_per_open_type(tvb, offset, actx, tree, hf_index, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "575: static int",
          "576: dissect_atn_ulcs_T_externalt_encoding_octet_aligned(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "579:                                        NO_BOUND, NO_BOUND, FALSE, NULL);",
          "",
          "[Removed Lines]",
          "578:    offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Added Lines]",
          "573:     offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "588: static int",
          "589: dissect_atn_ulcs_T_externalt_encoding_arbitrary(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "680:   return offset;",
          "",
          "[Removed Lines]",
          "590:  tvbuff_t *tvb_usr = NULL;",
          "591:  packet_info * pinfo = actx->pinfo;",
          "592:  atn_conversation_t *atn_cv = NULL;",
          "593:  heur_dtbl_entry_t *hdtbl_entry;",
          "596:  offset = dissect_per_bit_string(",
          "597:   tvb,",
          "598:   offset,",
          "599:   actx,",
          "600:   tree, hf_index,",
          "601:   NO_BOUND,",
          "602:   NO_BOUND,",
          "603:   FALSE,",
          "604:   &tvb_usr,",
          "605:   NULL);",
          "607:  if (tvb_usr) {",
          "609:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "611:    atn_cv = find_atn_conversation(",
          "612:      &pinfo->dst,",
          "613:      pinfo->clnp_dstref,",
          "614:      &pinfo->src);",
          "615:   }",
          "617:   if((pinfo->clnp_srcref) && (!pinfo->clnp_dstref)){",
          "619:    atn_cv = find_atn_conversation(",
          "620:      &pinfo->src,",
          "621:      pinfo->clnp_srcref,",
          "622:      &pinfo->dst);",
          "623:   }",
          "625:   if((pinfo->clnp_srcref) && (pinfo->clnp_dstref)){",
          "627:    atn_cv = find_atn_conversation(",
          "628:      &pinfo->src,",
          "629:      pinfo->clnp_srcref,",
          "630:      &pinfo->dst);",
          "631:   }",
          "633:   if(atn_cv) {",
          "634:     switch(atn_cv->ae_qualifier){",
          "637:        call_dissector_with_data(",
          "638:           atn_cm_handle,",
          "639:           tvb_new_subset_remaining(tvb_usr, 0),",
          "640:           pinfo,",
          "641:           root_tree,",
          "642:           NULL);",
          "643:        break;",
          "647:        call_dissector_with_data(",
          "648:           atn_cpdlc_handle,",
          "649:           tvb_new_subset_remaining(tvb_usr, 0),",
          "650:           pinfo,",
          "651:           root_tree,",
          "652:           NULL);",
          "653:        break;",
          "656:        dissector_try_heuristic(",
          "657:          atn_ulcs_heur_subdissector_list,",
          "658:          tvb_new_subset_remaining(tvb_usr,0),",
          "659:          actx->pinfo,",
          "660:          root_tree,",
          "661:          &hdtbl_entry,",
          "662:          NULL);",
          "663:         break;",
          "664:      }",
          "665:   }else {",
          "667:    dissector_try_heuristic(",
          "668:        atn_ulcs_heur_subdissector_list,",
          "669:        tvb_new_subset_remaining(tvb_usr,0),",
          "670:        actx->pinfo,",
          "671:        root_tree,",
          "672:        &hdtbl_entry,",
          "673:        NULL);",
          "674:   }",
          "675:  }",
          "677:  offset += tvb_reported_length_remaining(tvb, offset);",
          "",
          "[Added Lines]",
          "585:   tvbuff_t *tvb_usr = NULL;",
          "586:   packet_info * pinfo = actx->pinfo;",
          "587:   atn_conversation_t *atn_cv = NULL;",
          "588:   heur_dtbl_entry_t *hdtbl_entry;",
          "591:   offset = dissect_per_bit_string(",
          "592:     tvb,",
          "593:     offset,",
          "594:     actx,",
          "595:     tree, hf_index,",
          "596:     NO_BOUND,",
          "597:     NO_BOUND,",
          "598:     FALSE,",
          "599:     &tvb_usr,",
          "600:     NULL);",
          "602:   if (tvb_usr) {",
          "604:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "606:       atn_cv = find_atn_conversation(",
          "607:           &pinfo->dst,",
          "608:           pinfo->clnp_dstref,",
          "609:           &pinfo->src);",
          "610:     }",
          "612:     if((pinfo->clnp_srcref) && (!pinfo->clnp_dstref)){",
          "614:       atn_cv = find_atn_conversation(",
          "615:           &pinfo->src,",
          "616:           pinfo->clnp_srcref,",
          "617:           &pinfo->dst);",
          "618:     }",
          "620:     if((pinfo->clnp_srcref) && (pinfo->clnp_dstref)){",
          "622:       atn_cv = find_atn_conversation(",
          "623:           &pinfo->src,",
          "624:           pinfo->clnp_srcref,",
          "625:           &pinfo->dst);",
          "626:     }",
          "628:     if(atn_cv) {",
          "629:         switch(atn_cv->ae_qualifier){",
          "632:               call_dissector_with_data(",
          "633:                     atn_cm_handle,",
          "634:                     tvb_new_subset_remaining(tvb_usr, 0),",
          "635:                     pinfo,",
          "636:                     root_tree,",
          "637:                     NULL);",
          "638:               break;",
          "642:               call_dissector_with_data(",
          "643:                     atn_cpdlc_handle,",
          "644:                     tvb_new_subset_remaining(tvb_usr, 0),",
          "645:                     pinfo,",
          "646:                     root_tree,",
          "647:                     NULL);",
          "648:               break;",
          "651:               dissector_try_heuristic(",
          "652:                   atn_ulcs_heur_subdissector_list,",
          "653:                   tvb_new_subset_remaining(tvb_usr,0),",
          "654:                   actx->pinfo,",
          "655:                   root_tree,",
          "656:                   &hdtbl_entry,",
          "657:                   NULL);",
          "658:                 break;",
          "659:           }",
          "660:     }else {",
          "662:       dissector_try_heuristic(",
          "663:               atn_ulcs_heur_subdissector_list,",
          "664:               tvb_new_subset_remaining(tvb_usr,0),",
          "665:               actx->pinfo,",
          "666:               root_tree,",
          "667:               &hdtbl_entry,",
          "668:               NULL);",
          "669:     }",
          "670:   }",
          "672:   offset += tvb_reported_length_remaining(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "855: static int",
          "856: dissect_atn_ulcs_AE_qualifier_form2(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "894:   return offset;",
          "895: }",
          "",
          "[Removed Lines]",
          "857:   packet_info * pinfo = actx->pinfo;",
          "858:   atn_conversation_t *atn_cv = NULL;",
          "859:   guint32 ae_qualifier = 0;",
          "862:   offset = dissect_per_integer(",
          "863:     tvb,",
          "864:     offset,",
          "865:     actx,",
          "866:     tree,",
          "867:     hf_index,",
          "868:     &ae_qualifier);",
          "877:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "878:     atn_cv = find_atn_conversation(&pinfo->dst,",
          "879:       pinfo->clnp_dstref,",
          "880:       &pinfo->src );",
          "881:   }",
          "884:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "885:     atn_cv = find_atn_conversation(&pinfo->src,",
          "886:       pinfo->clnp_srcref,",
          "887:       &pinfo->dst );",
          "888:  }",
          "890:  if(atn_cv){",
          "891:    atn_cv->ae_qualifier = ae_qualifier;",
          "892:  }",
          "",
          "[Added Lines]",
          "852:     packet_info * pinfo = actx->pinfo;",
          "853:     atn_conversation_t *atn_cv = NULL;",
          "854:     guint32 ae_qualifier = 0;",
          "857:     offset = dissect_per_integer(",
          "858:         tvb,",
          "859:         offset,",
          "860:         actx,",
          "861:         tree,",
          "862:         hf_index,",
          "863:         &ae_qualifier);",
          "872:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "873:         atn_cv = find_atn_conversation(&pinfo->dst,",
          "874:             pinfo->clnp_dstref,",
          "875:             &pinfo->src );",
          "876:     }",
          "879:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "880:         atn_cv = find_atn_conversation(&pinfo->src,",
          "881:             pinfo->clnp_srcref,",
          "882:             &pinfo->dst );",
          "883:   }",
          "885:   if(atn_cv){",
          "886:       atn_cv->ae_qualifier = ae_qualifier;",
          "887:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "958: static int",
          "959: dissect_atn_ulcs_Mechanism_name(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "970:   offset = dissect_per_object_identifier(",
          "979:   return offset;",
          "",
          "[Removed Lines]",
          "961:   offset = dissect_per_object_identifier(",
          "962:     tvb,",
          "963:     offset,",
          "964:     actx,",
          "965:     tree,",
          "966:     hf_index,",
          "967:     NULL);",
          "971:    tvb,",
          "972:    offset,",
          "973:    actx,",
          "974:    tree,",
          "975:    hf_index,",
          "976:    NULL);",
          "",
          "[Added Lines]",
          "956:     offset = dissect_per_object_identifier(",
          "957:         tvb,",
          "958:         offset,",
          "959:         actx,",
          "960:         tree,",
          "961:         hf_index,",
          "962:         NULL);",
          "966:       tvb,",
          "967:       offset,",
          "968:       actx,",
          "969:       tree,",
          "970:       hf_index,",
          "971:       NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1003: static int",
          "1004: dissect_atn_ulcs_T_other_mechanism_value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1022:   return offset;",
          "",
          "[Removed Lines]",
          "1006:   offset=call_ber_oid_callback(",
          "1007:     object_identifier_id,",
          "1008:     tvb,",
          "1009:     offset,",
          "1010:     actx->pinfo,",
          "1011:     tree, NULL);",
          "1014:   offset=call_ber_oid_callback(",
          "1015:     object_identifier_id,",
          "1016:     tvb,",
          "1017:     offset,",
          "1018:     actx->pinfo,",
          "1019:     tree, NULL);",
          "",
          "[Added Lines]",
          "1001:     offset=call_ber_oid_callback(",
          "1002:         object_identifier_id,",
          "1003:         tvb,",
          "1004:         offset,",
          "1005:         actx->pinfo,",
          "1006:         tree, NULL);",
          "1009:     offset=call_ber_oid_callback(",
          "1010:         object_identifier_id,",
          "1011:         tvb,",
          "1012:         offset,",
          "1013:         actx->pinfo,",
          "1014:         tree, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1124: static int",
          "1125: dissect_atn_ulcs_AARQ_apdu(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1166:                                    ett_atn_ulcs_AARQ_apdu, AARQ_apdu_sequence);",
          "1215:   return offset;",
          "",
          "[Removed Lines]",
          "1126:   packet_info * pinfo = actx->pinfo;",
          "1127:   aarq_data_t *aarq_data = NULL;",
          "1128:   atn_conversation_t *atn_cv = NULL;",
          "1129:   guint32 aircraft_24_bit_address = 0;",
          "1132:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "1134:     atn_cv = find_atn_conversation(",
          "1135:       &pinfo->dst,",
          "1136:       pinfo->clnp_dstref,",
          "1137:       &pinfo->src );",
          "1138:     if(!atn_cv){",
          "1139:       atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "1140:       atn_cv->ae_qualifier = unknown;",
          "1141:       create_atn_conversation(&pinfo->dst,",
          "1142:         pinfo->clnp_dstref,",
          "1143:         &pinfo->src ,",
          "1144:         atn_cv);",
          "1145:     }",
          "1146:   }",
          "1149:   if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "1150:     atn_cv = find_atn_conversation(&pinfo->src,",
          "1151:       pinfo->clnp_srcref,",
          "1152:       &pinfo->dst );",
          "1153:     if(!atn_cv){",
          "1154:       atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "1155:       atn_cv->ae_qualifier = unknown;",
          "1156:       create_atn_conversation(&pinfo->src,",
          "1157:         pinfo->clnp_srcref,",
          "1158:         &pinfo->dst ,",
          "1159:         atn_cv);",
          "1160:     }",
          "1161:   }",
          "1165:     offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "1184:   aircraft_24_bit_address =",
          "1185:     get_aircraft_24_bit_address_from_nsap(pinfo);",
          "1188:   aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "1189:     aarq_data_tree,",
          "1190:     aircraft_24_bit_address);",
          "1195:     aarq_data = wmem_new(wmem_file_scope(), aarq_data_t);",
          "1196:     aarq_data-> aarq_pending = FALSE;",
          "1199:     wmem_tree_insert32(aarq_data_tree ,aircraft_24_bit_address,(void*)aarq_data);",
          "1200:   }",
          "1205:   if (aarq_data-> aarq_pending == FALSE ) {",
          "1208:    memset(aarq_data,0,sizeof(aarq_data_t));",
          "1210:    aarq_data->cv = atn_cv;",
          "1211:    aarq_data-> aarq_pending = TRUE;",
          "1212:   }",
          "",
          "[Added Lines]",
          "1121:     packet_info * pinfo = actx->pinfo;",
          "1122:     aarq_data_t *aarq_data = NULL;",
          "1123:     atn_conversation_t *atn_cv = NULL;",
          "1124:     guint32 aircraft_24_bit_address = 0;",
          "1127:     if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "1129:         atn_cv = find_atn_conversation(",
          "1130:             &pinfo->dst,",
          "1131:             pinfo->clnp_dstref,",
          "1132:             &pinfo->src );",
          "1133:         if(!atn_cv){",
          "1134:             atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "1135:             atn_cv->ae_qualifier = unknown;",
          "1136:             create_atn_conversation(&pinfo->dst,",
          "1137:                 pinfo->clnp_dstref,",
          "1138:                 &pinfo->src ,",
          "1139:                 atn_cv);",
          "1140:         }",
          "1141:     }",
          "1144:     if((!pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "1145:         atn_cv = find_atn_conversation(&pinfo->src,",
          "1146:             pinfo->clnp_srcref,",
          "1147:             &pinfo->dst );",
          "1148:         if(!atn_cv){",
          "1149:             atn_cv = wmem_new(wmem_file_scope(), atn_conversation_t);",
          "1150:             atn_cv->ae_qualifier = unknown;",
          "1151:             create_atn_conversation(&pinfo->src,",
          "1152:                 pinfo->clnp_srcref,",
          "1153:                 &pinfo->dst ,",
          "1154:                 atn_cv);",
          "1155:         }",
          "1156:     }",
          "1160:       offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "1179:     aircraft_24_bit_address =",
          "1180:         get_aircraft_24_bit_address_from_nsap(pinfo);",
          "1183:     aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "1184:         aarq_data_tree,",
          "1185:         aircraft_24_bit_address);",
          "1190:         aarq_data = wmem_new(wmem_file_scope(), aarq_data_t);",
          "1191:         aarq_data-> aarq_pending = FALSE;",
          "1194:         wmem_tree_insert32(aarq_data_tree ,aircraft_24_bit_address,(void*)aarq_data);",
          "1195:     }",
          "1200:     if (aarq_data-> aarq_pending == FALSE ) {",
          "1203:       memset(aarq_data,0,sizeof(aarq_data_t));",
          "1205:       aarq_data->cv = atn_cv;",
          "1206:       aarq_data-> aarq_pending = TRUE;",
          "1207:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1333: static int",
          "1334: dissect_atn_ulcs_AARE_apdu(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1389:         &pinfo->dst);",
          "1417:                                    ett_atn_ulcs_AARE_apdu, AARE_apdu_sequence);",
          "",
          "[Removed Lines]",
          "1335:  packet_info * pinfo = actx->pinfo;",
          "1336:  guint32 aircraft_24_bit_address = 0 ;",
          "1337:  atn_conversation_t *atn_cv = NULL;",
          "1338:  aarq_data_t *aarq_data = NULL;",
          "1350:  aircraft_24_bit_address = get_aircraft_24_bit_address_from_nsap(pinfo);",
          "1353:  aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "1354:    aarq_data_tree,",
          "1355:    aircraft_24_bit_address);",
          "1361:  if(!aarq_data) {",
          "1363:   return offset;",
          "1364:  }",
          "1367:  if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "1369:   atn_cv = find_atn_conversation(&pinfo->dst,",
          "1370:              pinfo->clnp_dstref,",
          "1371:              &pinfo->src );",
          "1376:    create_atn_conversation(&pinfo->dst,",
          "1377:                pinfo->clnp_dstref,",
          "1378:                &pinfo->src ,",
          "1379:                aarq_data->cv);",
          "1380:   }",
          "1381:  }",
          "1384:  if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "1386:   atn_cv = find_atn_conversation(",
          "1387:     &pinfo->src,",
          "1388:     pinfo->clnp_srcref,",
          "1394:    create_atn_conversation(&pinfo->dst,",
          "1395:                pinfo->clnp_dstref,",
          "1396:                &pinfo->src ,",
          "1397:                aarq_data->cv);",
          "1401:    create_atn_conversation(&pinfo->src,",
          "1402:                pinfo->clnp_srcref,",
          "1403:                &pinfo->dst ,",
          "1404:                aarq_data->cv);",
          "1405:    create_atn_conversation(&pinfo->dst,",
          "1406:                pinfo->clnp_dstref,",
          "1407:                &pinfo->src ,",
          "1408:                aarq_data->cv);",
          "1409:   }",
          "1410:  }",
          "1413:  memset(aarq_data,0,sizeof(aarq_data_t));",
          "1414:  aarq_data-> aarq_pending  =  FALSE;",
          "1416:    offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Added Lines]",
          "1330:   packet_info * pinfo = actx->pinfo;",
          "1331:   guint32 aircraft_24_bit_address = 0 ;",
          "1332:   atn_conversation_t *atn_cv = NULL;",
          "1333:   aarq_data_t *aarq_data = NULL;",
          "1345:   aircraft_24_bit_address = get_aircraft_24_bit_address_from_nsap(pinfo);",
          "1348:   aarq_data = (aarq_data_t *) wmem_tree_lookup32(",
          "1349:       aarq_data_tree,",
          "1350:       aircraft_24_bit_address);",
          "1356:   if(!aarq_data) {",
          "1358:     return offset;",
          "1359:   }",
          "1362:   if((pinfo->clnp_dstref) && (!pinfo->clnp_srcref)){",
          "1364:     atn_cv = find_atn_conversation(&pinfo->dst,",
          "1365:                           pinfo->clnp_dstref,",
          "1366:                           &pinfo->src );",
          "1371:       create_atn_conversation(&pinfo->dst,",
          "1372:                               pinfo->clnp_dstref,",
          "1373:                               &pinfo->src ,",
          "1374:                               aarq_data->cv);",
          "1375:     }",
          "1376:   }",
          "1379:   if((pinfo->clnp_dstref) && (pinfo->clnp_srcref)){",
          "1381:     atn_cv = find_atn_conversation(",
          "1382:         &pinfo->src,",
          "1383:         pinfo->clnp_srcref,",
          "1389:       create_atn_conversation(&pinfo->dst,",
          "1390:                               pinfo->clnp_dstref,",
          "1391:                               &pinfo->src ,",
          "1392:                               aarq_data->cv);",
          "1396:       create_atn_conversation(&pinfo->src,",
          "1397:                               pinfo->clnp_srcref,",
          "1398:                               &pinfo->dst ,",
          "1399:                               aarq_data->cv);",
          "1400:       create_atn_conversation(&pinfo->dst,",
          "1401:                               pinfo->clnp_dstref,",
          "1402:                               &pinfo->src ,",
          "1403:                               aarq_data->cv);",
          "1404:     }",
          "1405:   }",
          "1408:   memset(aarq_data,0,sizeof(aarq_data_t));",
          "1409:   aarq_data-> aarq_pending  =  FALSE;",
          "1411:     offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1471:  offset = dissect_per_constrained_integer(",
          "1483:   return offset;",
          "",
          "[Removed Lines]",
          "1472:   tvb,",
          "1473:   offset,",
          "1474:   actx,",
          "1475:   tree,",
          "1476:   hf_index,",
          "1477:   0U,",
          "1478:   30U,",
          "1479:   NULL,",
          "1480:   TRUE);",
          "",
          "[Added Lines]",
          "1467:     tvb,",
          "1468:     offset,",
          "1469:     actx,",
          "1470:     tree,",
          "1471:     hf_index,",
          "1472:     0U,",
          "1473:     30U,",
          "1474:     NULL,",
          "1475:     TRUE);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1605: #if 0",
          "",
          "[Removed Lines]",
          "1603: #line 201 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "",
          "[Added Lines]",
          "1598: #line 196 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1615: static const per_choice_t External_encoding_choice[] =",
          "1616: {",
          "1637: };",
          "1638: #endif",
          "1646: static int hf_atn_ses_type = -1;",
          "1647: static int hf_atn_ses_param_ind = -1;",
          "",
          "[Removed Lines]",
          "1617:   {  0,",
          "1618:     &hf_atn_ulcs_externalt_encoding_single_asn1_type,",
          "1619:     ASN1_NO_EXTENSIONS,",
          "1620:     dissect_atn_ulcs_T_externalt_encoding_single_asn1_type",
          "1621:   },",
          "1622:   {  1,",
          "1623:     &hf_atn_ulcs_externalt_encoding_octet_aligned,",
          "1624:     ASN1_NO_EXTENSIONS,",
          "1625:     dissect_atn_ulcs_T_externalt_encoding_octet_aligned",
          "1626:   },",
          "1627:   {  2,",
          "1628:     &hf_atn_ulcs_externalt_encoding_arbitrary,",
          "1629:     ASN1_NO_EXTENSIONS,",
          "1630:     dissect_atn_ulcs_T_externalt_encoding_arbitrary",
          "1631:   },",
          "1632:   {  0,",
          "1633:     NULL,",
          "1634:     0,",
          "1635:     NULL",
          "1636:   }",
          "1641: #define SES_PDU_TYPE_MASK   0xf8",
          "1642: #define SES_PARAM_IND_MASK   0x04",
          "1643: #define SES_PARAM_B2_MASK   0x02",
          "1644: #define SES_PARAM_B1_MASK   0x01",
          "",
          "[Added Lines]",
          "1612:     {   0,",
          "1613:         &hf_atn_ulcs_externalt_encoding_single_asn1_type,",
          "1614:         ASN1_NO_EXTENSIONS,",
          "1615:         dissect_atn_ulcs_T_externalt_encoding_single_asn1_type",
          "1616:     },",
          "1617:     {   1,",
          "1618:         &hf_atn_ulcs_externalt_encoding_octet_aligned,",
          "1619:         ASN1_NO_EXTENSIONS,",
          "1620:         dissect_atn_ulcs_T_externalt_encoding_octet_aligned",
          "1621:     },",
          "1622:     {   2,",
          "1623:         &hf_atn_ulcs_externalt_encoding_arbitrary,",
          "1624:         ASN1_NO_EXTENSIONS,",
          "1625:         dissect_atn_ulcs_T_externalt_encoding_arbitrary",
          "1626:     },",
          "1627:     {   0,",
          "1628:         NULL,",
          "1629:         0,",
          "1630:         NULL",
          "1631:     }",
          "1636: #define SES_PDU_TYPE_MASK     0xf8",
          "1637: #define SES_PARAM_IND_MASK    0x04",
          "1638: #define SES_PARAM_B2_MASK     0x02",
          "1639: #define SES_PARAM_B1_MASK     0x01",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1655: const value_string atn_ses_param_ind[] =",
          "1656: {",
          "1660: };",
          "1662: const value_string srf_b2[] =",
          "1663: {",
          "1667: };",
          "1669: const value_string srf_b1[] =",
          "1670: {",
          "1674: };",
          "1683: const value_string atn_ses_type[] =",
          "1684: {",
          "1691: };",
          "1694: #define ATN_PRES_PROTO \"ICAO Doc9705 ULCS Presentation (ISO 8822/8823-1:1994)\"",
          "1697: static int hf_atn_pres_pdu_type = -1;",
          "1700: #define ATN_SES_PRES_MASK 0xf803",
          "1704: const value_string atn_pres_vals[] =",
          "1705: {",
          "1713: };",
          "1716: const value_string atn_pres_err[] =",
          "1717: {",
          "1727: };",
          "1729: #if 0",
          "1737: {",
          "1749: }",
          "1759: {",
          "1781: }",
          "1782: #endif",
          "1786: guint32 get_aircraft_24_bit_address_from_nsap(",
          "1788: {",
          "1855: }",
          "1859: int check_heur_msg_type(packet_info *pinfo  _U_)",
          "1860: {",
          "1900: }",
          "1903: wmem_tree_t *get_atn_conversation_tree(void){",
          "1905: }",
          "",
          "[Removed Lines]",
          "1657:   {0, \"No Parameter Indication \"},",
          "1658:   {1, \"Parameter Indication \"},",
          "1659:   {0, NULL }",
          "1664:   {0, \"Transport Connection is kept\"},",
          "1665:   {1, \"Transport Connection is released\" },",
          "1666:   {0, NULL }",
          "1671:   {0, \"Transport Connection is transient\"},",
          "1672:   {1, \"Transport Connection is persistent\"},",
          "1673:   {0, NULL }",
          "1676: #define SES_ATN_SCN    0xe8",
          "1677: #define SES_ATN_SCNC   0xf8",
          "1678: #define SES_ATN_SAC    0xf0",
          "1679: #define SES_ATN_SACC   0xd8",
          "1680: #define SES_ATN_SRF    0xe0",
          "1681: #define SES_ATN_SRFC   0xa0",
          "1685:   { 0x1d, \"Short Connect (SCN) SPDU\" },",
          "1686:   { 0x1f, \"Short Connect Accept (SAC) SPDU\" },",
          "1687:   { 0x1e, \"Short Connect Accept Continue (SACC) SPDU\" },",
          "1688:   { 0x1c, \"Short Refuse (SRF) SPDU\" },",
          "1689:   { 0x14, \"Short Refuse Continue (SRFC) SPDU\" },",
          "1690:   {0, NULL }",
          "1696: static int hf_atn_pres_err  = -1;",
          "1698: static gint ett_atn_pres  = -1;",
          "1701: #define PRES_CPR_ER_MASK  0x70",
          "1706:   { 0xe802, \"Short Presentation Connect PPDU (CP) \" },",
          "1707:   { 0xf802, \"Short Presentation Connect PPDU (CP) \" },",
          "1708:   { 0xf002, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "1709:   { 0xd802, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "1710:   { 0xe002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "1711:   { 0xa002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "1712:   {0,     NULL }",
          "1718:   { 0x00, \"Presentation-user\" },",
          "1719:   { 0x01, \"Reason not specified (transient)\"},",
          "1720:   { 0x02, \"Temporary congestion (transient)\"},",
          "1721:   { 0x03, \"Local limit exceeded (transient)\"},",
          "1722:   { 0x04, \"Called presentation-address unknown (permanent)\"},",
          "1723:   { 0x05, \"Protocol version not supported (permanent)\"},",
          "1724:   { 0x06, \"Default context not supported (permanent)\"},",
          "1725:   { 0x07, \"User data not readable (permanent)\"},",
          "1726:   { 0,     NULL }",
          "1731: static int atn_ulcs_Externalt_encoding(",
          "1732:   tvbuff_t *tvb _U_,",
          "1733:   int offset _U_,",
          "1734:   asn1_ctx_t *actx _U_,",
          "1735:   proto_tree *tree _U_,",
          "1736:   int hf_index _U_)",
          "1738:   offset = dissect_per_choice(",
          "1739:     tvb,",
          "1740:     offset,",
          "1741:     actx,",
          "1742:     tree,",
          "1743:     hf_index,",
          "1744:     ett_atn_ulcs_EXTERNALt,",
          "1745:     External_encoding_choice,",
          "1746:     &actx->external.encoding);",
          "1748:   return offset;",
          "1752: static guint32 atn_per_external_type(",
          "1753:   tvbuff_t *tvb _U_,",
          "1754:   guint32 offset,",
          "1755:   asn1_ctx_t *actx,",
          "1756:   proto_tree *tree _U_,",
          "1757:   int hf_index _U_,",
          "1758:   per_type_fn type_cb)",
          "1760:   memset(&actx->external, '\\0', sizeof(actx->external));",
          "1761:   actx->external.hf_index = -1;",
          "1762:   actx->external.encoding = -1;",
          "1764:   actx->external.u.per.type_cb = type_cb;",
          "1765:   offset = atn_ulcs_Externalt_encoding(",
          "1766:     tvb,",
          "1767:     offset,",
          "1768:     actx,",
          "1769:     tree,",
          "1770:     hf_index);",
          "1772:   memset(",
          "1773:     &actx->external,",
          "1774:     '\\0',",
          "1775:     sizeof(actx->external));",
          "1777:   actx->external.hf_index = -1;",
          "1778:   actx->external.encoding = -1;",
          "1780:   return offset;",
          "1787:   packet_info *pinfo)",
          "1789:   const guint8* addr = NULL;",
          "1790:   guint32 ars =0;",
          "1791:   guint32 adr_prefix =0;",
          "1794:   if( (pinfo->src.type != get_osi_address_type()) ||",
          "1795:     (pinfo->dst.type != get_osi_address_type())) {",
          "1796:     return ars; }",
          "1800:   if( (pinfo->src.len != 20) ||",
          "1801:     (pinfo->dst.len != 20)) {",
          "1802:     return ars; }",
          "1809:   addr = (const guint8 *)pinfo->src.data;",
          "1810:   adr_prefix =",
          "1811:     ((addr[0]<<24) |",
          "1812:     (addr[1]<<16) |",
          "1813:     (addr[2]<<8) |",
          "1814:     addr[3] );",
          "1820:   if((adr_prefix == 0x470027c1) ||",
          "1821:     (adr_prefix == 0x47002741)) {",
          "1825:     ars = ((addr[8])<<16) |",
          "1826:       ((addr[9])<<8) |",
          "1827:       (addr[10]);",
          "1828:   }",
          "1835:   addr = (const guint8 *)pinfo->dst.data;",
          "1836:   adr_prefix = ((addr[0]<<24) |",
          "1837:     (addr[1]<<16) |",
          "1838:     (addr[2]<<8) |",
          "1839:     addr[3] );",
          "1845:   if((adr_prefix == 0x470027c1) ||",
          "1846:     (adr_prefix == 0x47002741)) {",
          "1850:    ars = ((addr[8])<<16) |",
          "1851:       ((addr[9])<<8) |",
          "1852:       (addr[10]);",
          "1853:   }",
          "1854:   return ars;",
          "1861:   int t = no_msg;",
          "1862:   const guint8* addr = NULL;",
          "1863:   guint32 adr_prefix =0;",
          "1866:   if( (pinfo->src.type != get_osi_address_type()) || (pinfo->dst.type != get_osi_address_type())) {",
          "1867:     return t; }",
          "1870:   if( (pinfo->src.len != 20) || (pinfo->dst.len != 20)) {",
          "1871:     return t; }",
          "1873:   addr = (const guint8 *)pinfo->src.data;",
          "1876:   adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "1882:   if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "1884:   }",
          "1886:   addr = (const guint8 *)pinfo->dst.data;",
          "1889:   adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "1895:   if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "1897:   }",
          "1899:   return t;",
          "1904:   return atn_conversation_tree;",
          "",
          "[Added Lines]",
          "1652:     {0, \"No Parameter Indication \"},",
          "1653:     {1, \"Parameter Indication \"},",
          "1654:     {0, NULL }",
          "1659:     {0, \"Transport Connection is kept\"},",
          "1660:     {1, \"Transport Connection is released\" },",
          "1661:     {0, NULL }",
          "1666:     {0, \"Transport Connection is transient\"},",
          "1667:     {1, \"Transport Connection is persistent\"},",
          "1668:     {0, NULL }",
          "1671: #define SES_ATN_SCN       0xe8",
          "1672: #define SES_ATN_SCNC      0xf8",
          "1673: #define SES_ATN_SAC       0xf0",
          "1674: #define SES_ATN_SACC      0xd8",
          "1675: #define SES_ATN_SRF       0xe0",
          "1676: #define SES_ATN_SRFC      0xa0",
          "1680:     { 0x1d, \"Short Connect (SCN) SPDU\" },",
          "1681:     { 0x1f, \"Short Connect Accept (SAC) SPDU\" },",
          "1682:     { 0x1e, \"Short Connect Accept Continue (SACC) SPDU\" },",
          "1683:     { 0x1c, \"Short Refuse (SRF) SPDU\" },",
          "1684:     { 0x14, \"Short Refuse Continue (SRFC) SPDU\" },",
          "1685:     {0, NULL }",
          "1691: static int hf_atn_pres_err   = -1;",
          "1693: static gint ett_atn_pres    = -1;",
          "1696: #define PRES_CPR_ER_MASK    0x70",
          "1701:     { 0xe802, \"Short Presentation Connect PPDU (CP) \" },",
          "1702:     { 0xf802, \"Short Presentation Connect PPDU (CP) \" },",
          "1703:     { 0xf002, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "1704:     { 0xd802, \"Short Presentation Connect Accept PPDU (CPA)\" },",
          "1705:     { 0xe002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "1706:     { 0xa002, \"Short Presentation Connect Reject PPDU (CPR)\" },",
          "1707:     {0,         NULL }",
          "1713:     { 0x00, \"Presentation-user\" },",
          "1714:     { 0x01, \"Reason not specified (transient)\"},",
          "1715:     { 0x02, \"Temporary congestion (transient)\"},",
          "1716:     { 0x03, \"Local limit exceeded (transient)\"},",
          "1717:     { 0x04, \"Called presentation-address unknown (permanent)\"},",
          "1718:     { 0x05, \"Protocol version not supported (permanent)\"},",
          "1719:     { 0x06, \"Default context not supported (permanent)\"},",
          "1720:     { 0x07, \"User data not readable (permanent)\"},",
          "1721:     { 0,          NULL }",
          "1726: static int  atn_ulcs_Externalt_encoding(",
          "1727:     tvbuff_t *tvb _U_,",
          "1728:     int offset _U_,",
          "1729:     asn1_ctx_t *actx _U_,",
          "1730:     proto_tree *tree _U_,",
          "1731:     int hf_index _U_)",
          "1733:     offset = dissect_per_choice(",
          "1734:         tvb,",
          "1735:         offset,",
          "1736:         actx,",
          "1737:         tree,",
          "1738:         hf_index,",
          "1739:         ett_atn_ulcs_EXTERNALt,",
          "1740:         External_encoding_choice,",
          "1741:         &actx->external.encoding);",
          "1743:     return offset;",
          "1747: static guint32  atn_per_external_type(",
          "1748:     tvbuff_t *tvb _U_,",
          "1749:     guint32 offset,",
          "1750:     asn1_ctx_t *actx,",
          "1751:     proto_tree *tree _U_,",
          "1752:     int hf_index _U_,",
          "1753:     per_type_fn type_cb)",
          "1755:     memset(&actx->external, '\\0', sizeof(actx->external));",
          "1756:     actx->external.hf_index = -1;",
          "1757:     actx->external.encoding = -1;",
          "1759:     actx->external.u.per.type_cb = type_cb;",
          "1760:     offset = atn_ulcs_Externalt_encoding(",
          "1761:         tvb,",
          "1762:         offset,",
          "1763:         actx,",
          "1764:         tree,",
          "1765:         hf_index);",
          "1767:     memset(",
          "1768:         &actx->external,",
          "1769:         '\\0',",
          "1770:         sizeof(actx->external));",
          "1772:     actx->external.hf_index = -1;",
          "1773:     actx->external.encoding = -1;",
          "1775:     return offset;",
          "1782:     packet_info *pinfo)",
          "1784:     const guint8* addr = NULL;",
          "1785:     guint32 ars =0;",
          "1786:     guint32 adr_prefix =0;",
          "1789:     if( (pinfo->src.type != get_osi_address_type()) ||",
          "1790:         (pinfo->dst.type != get_osi_address_type())) {",
          "1791:         return ars; }",
          "1795:     if( (pinfo->src.len != 20) ||",
          "1796:         (pinfo->dst.len != 20)) {",
          "1797:         return ars; }",
          "1804:     addr = (const guint8 *)pinfo->src.data;",
          "1805:     adr_prefix =",
          "1806:         ((addr[0]<<24) |",
          "1807:         (addr[1]<<16) |",
          "1808:         (addr[2]<<8) |",
          "1809:         addr[3] );",
          "1815:     if((adr_prefix == 0x470027c1) ||",
          "1816:         (adr_prefix == 0x47002741)) {",
          "1820:         ars = ((addr[8])<<16) |",
          "1821:             ((addr[9])<<8) |",
          "1822:             (addr[10]);",
          "1823:     }",
          "1830:     addr = (const guint8 *)pinfo->dst.data;",
          "1831:     adr_prefix = ((addr[0]<<24) |",
          "1832:         (addr[1]<<16) |",
          "1833:         (addr[2]<<8) |",
          "1834:         addr[3] );",
          "1840:     if((adr_prefix == 0x470027c1) ||",
          "1841:         (adr_prefix == 0x47002741)) {",
          "1845:       ars = ((addr[8])<<16) |",
          "1846:             ((addr[9])<<8) |",
          "1847:             (addr[10]);",
          "1848:     }",
          "1849:     return ars;",
          "1856:     int t = no_msg;",
          "1857:     const guint8* addr = NULL;",
          "1858:     guint32 adr_prefix =0;",
          "1861:     if( (pinfo->src.type != get_osi_address_type()) || (pinfo->dst.type != get_osi_address_type())) {",
          "1862:         return t; }",
          "1865:     if( (pinfo->src.len != 20) || (pinfo->dst.len != 20)) {",
          "1866:         return t; }",
          "1868:     addr = (const guint8 *)pinfo->src.data;",
          "1871:     adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "1877:     if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "1879:     }",
          "1881:     addr = (const guint8 *)pinfo->dst.data;",
          "1884:     adr_prefix = ((addr[0]<<24) | (addr[1]<<16) | (addr[2]<<8) | addr[3] );",
          "1890:     if((adr_prefix == 0x470027c1) || (adr_prefix == 0x47002741)) {",
          "1892:     }",
          "1894:     return t;",
          "1899:     return atn_conversation_tree;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1913: atn_conversation_t * find_atn_conversation(",
          "1917: {",
          "1933: }",
          "1938: atn_conversation_t * create_atn_conversation(",
          "1943: {",
          "1971: }",
          "1973: static int",
          "1974: dissect_atn_ulcs(",
          "1979: {",
          "2122: }",
          "2124: static gboolean dissect_atn_ulcs_heur(",
          "2129: {",
          "2190: }",
          "2192: void proto_register_atn_ulcs (void)",
          "2193: {",
          "2197: #line 1 \"../../asn1/atn-ulcs/packet-atn-ulcs-hfarr.c\"",
          "",
          "[Removed Lines]",
          "1914:   address *address1,",
          "1915:   guint16 clnp_ref1,",
          "1916:   address *address2 )",
          "1918:   atn_conversation_t *cv = NULL;",
          "1919:   guint32 key = 0;",
          "1920:   guint32 tmp = 0;",
          "1922:   ADD_ADDRESS_TO_HASH( tmp, address1);",
          "1923:   key = (tmp << 16) | clnp_ref1 ;",
          "1925:   ADD_ADDRESS_TO_HASH( tmp, address2);",
          "1926:   key = (tmp << 24) | key ;",
          "1929:   cv = (atn_conversation_t *)",
          "1930:     wmem_tree_lookup32(get_atn_conversation_tree(),key);",
          "1932:   return cv;",
          "1939:   address *address1,",
          "1940:   guint16 clnp_ref1,",
          "1941:   address *address2,",
          "1942:   atn_conversation_t *conversation)",
          "1944:   atn_conversation_t *cv = NULL;",
          "1945:   guint32 key = 0;",
          "1946:   guint32 tmp = 0;",
          "1948:   ADD_ADDRESS_TO_HASH( tmp, address1);",
          "1949:   key = (tmp << 16) | clnp_ref1 ;",
          "1951:   ADD_ADDRESS_TO_HASH( tmp, address2);",
          "1952:   key = (tmp << 24) | key ;",
          "1955:   cv = (atn_conversation_t *)",
          "1956:   wmem_tree_lookup32(",
          "1957:     get_atn_conversation_tree(),",
          "1958:     key);",
          "1961:   if(cv) {",
          "1962:    return NULL; }",
          "1965:   wmem_tree_insert32(",
          "1966:     get_atn_conversation_tree(),",
          "1967:     key,",
          "1968:     (void*)conversation);",
          "1970:   return conversation;",
          "1975:   tvbuff_t *tvb,",
          "1976:   packet_info *pinfo,",
          "1977:   proto_tree *tree,",
          "1978:   void *data _U_)",
          "1980:   int offset = 0;",
          "1981:   proto_item *ti = NULL;",
          "1982:   proto_tree *atn_ulcs_tree = NULL;",
          "1983:   guint8 value_pres = 0;",
          "1984:   guint8 value_ses = 0;",
          "1985:   guint16 value_ses_pres = 0;",
          "1987:   root_tree = tree;",
          "1991:   if ( (int)(intptr_t)  data == FALSE )",
          "1992:   {",
          "1993:     ti = proto_tree_add_item(",
          "1994:       tree,",
          "1995:       proto_atn_ulcs,",
          "1996:       tvb,",
          "1997:       0,",
          "1998:       0 ,",
          "1999:       ENC_NA);",
          "2001:     atn_ulcs_tree = proto_item_add_subtree(",
          "2002:       ti,",
          "2003:       ett_atn_ulcs);",
          "2005:     dissect_Fully_encoded_data_PDU(",
          "2006:       tvb,",
          "2007:       pinfo,",
          "2008:       atn_ulcs_tree, NULL);",
          "2010:     return offset +",
          "2011:      tvb_reported_length_remaining(tvb, offset ) ;",
          "2012:   }",
          "2015:   if ( (int)(intptr_t)  data == TRUE )",
          "2016:   {",
          "2018:     value_ses_pres = tvb_get_ntohs(tvb, offset);",
          "2021:     atn_ulcs_tree = proto_tree_add_subtree(",
          "2022:       tree, tvb, offset, 0,",
          "2023:       ett_atn_ses, NULL, ATN_SES_PROTO );",
          "2026:     value_ses = tvb_get_guint8(tvb, offset);",
          "2029:     proto_tree_add_item(atn_ulcs_tree,",
          "2030:       hf_atn_ses_type,",
          "2031:       tvb,",
          "2032:       offset,",
          "2033:       1,",
          "2034:       ENC_BIG_ENDIAN );",
          "2038:     switch(value_ses & SES_PDU_TYPE_MASK){",
          "2039:       case SES_ATN_SRF:",
          "2040:       case SES_ATN_SRFC:",
          "2043:         proto_tree_add_item(atn_ulcs_tree,",
          "2044:           hf_atn_ses_param_ind,",
          "2045:           tvb,",
          "2046:           offset,",
          "2047:           1,",
          "2048:           ENC_BIG_ENDIAN );",
          "2051:         proto_tree_add_item(atn_ulcs_tree,",
          "2052:           hf_atn_ses_param_b2,",
          "2053:           tvb,",
          "2054:           offset,",
          "2055:           1,",
          "2056:           ENC_BIG_ENDIAN );",
          "2059:         proto_tree_add_item(atn_ulcs_tree,",
          "2060:           hf_atn_ses_param_b1,",
          "2061:           tvb,",
          "2062:           offset,",
          "2063:           1,",
          "2064:           ENC_BIG_ENDIAN );",
          "2066:        break;",
          "2067:       default:",
          "2068:        break;",
          "2069:     }",
          "2070:     offset++;",
          "2073:     atn_ulcs_tree = proto_tree_add_subtree(",
          "2074:       tree, tvb, offset, 0,",
          "2075:       ett_atn_pres, NULL, ATN_PRES_PROTO );",
          "2077:     value_pres = tvb_get_guint8(tvb, offset);",
          "2081:     proto_tree_add_uint_format(atn_ulcs_tree, hf_atn_pres_pdu_type,",
          "2082:       tvb,",
          "2083:       offset,",
          "2084:       1,",
          "2085:       value_ses_pres,",
          "2086:       \"%s (0x%02x)\",",
          "2087:       val_to_str( value_ses_pres & ATN_SES_PRES_MASK , atn_pres_vals, \"?\"),",
          "2088:       value_pres);",
          "2091:     switch(value_ses & SES_PDU_TYPE_MASK){",
          "2092:       case SES_ATN_SRF:",
          "2093:       case SES_ATN_SRFC:",
          "2094:         proto_tree_add_item(",
          "2095:           atn_ulcs_tree,",
          "2096:           hf_atn_pres_err,",
          "2097:           tvb,",
          "2098:           offset,",
          "2099:           1,",
          "2100:           ENC_BIG_ENDIAN );",
          "2101:         break;",
          "2102:       default:",
          "2103:         break;",
          "2104:     }",
          "2106:     offset++;",
          "2109:     atn_ulcs_tree = proto_tree_add_subtree(",
          "2110:       tree, tvb, offset, 0,",
          "2111:       ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "2113:     dissect_ACSE_apdu_PDU(",
          "2114:       tvb_new_subset_remaining(tvb, offset),",
          "2115:       pinfo,",
          "2116:       atn_ulcs_tree, NULL);",
          "2118:     return offset +",
          "2119:       tvb_reported_length_remaining(tvb, offset );",
          "2120:   }",
          "2121:   return offset;",
          "2125:   tvbuff_t *tvb,",
          "2126:   packet_info *pinfo,",
          "2127:   proto_tree *tree,",
          "2128:   void *data _U_)",
          "2132:   if (tvb_captured_length(tvb) < 2){",
          "2133:     return FALSE; }",
          "2137:   switch( tvb_get_ntohs(tvb, 0) & 0xf8ff ){",
          "2161:       dissect_atn_ulcs(",
          "2162:         tvb,",
          "2163:         pinfo,",
          "2164:         tree,",
          "2165:         (void*) TRUE);",
          "2166:       return TRUE;",
          "2168:       break;",
          "2169:   }",
          "2174:   switch(  tvb_get_ntohs(tvb, 0) & 0xfff0 ){",
          "2183:       dissect_atn_ulcs(tvb, pinfo, tree, (void*) FALSE);",
          "2184:       return TRUE;",
          "2185:       break;",
          "2187:       break;",
          "2188:   }",
          "2189:   return FALSE;",
          "2194:   static hf_register_info hf_atn_ulcs[] = {",
          "",
          "[Added Lines]",
          "1909:     address *address1,",
          "1910:     guint16 clnp_ref1,",
          "1911:     address *address2 )",
          "1913:     atn_conversation_t *cv = NULL;",
          "1914:     guint32 key = 0;",
          "1915:     guint32 tmp = 0;",
          "1917:     ADD_ADDRESS_TO_HASH( tmp, address1);",
          "1918:     key = (tmp << 16) | clnp_ref1 ;",
          "1920:     ADD_ADDRESS_TO_HASH( tmp, address2);",
          "1921:     key = (tmp << 24) | key ;",
          "1924:     cv = (atn_conversation_t *)",
          "1925:         wmem_tree_lookup32(get_atn_conversation_tree(),key);",
          "1927:     return cv;",
          "1934:     address *address1,",
          "1935:     guint16 clnp_ref1,",
          "1936:     address *address2,",
          "1937:     atn_conversation_t *conversation)",
          "1939:     atn_conversation_t *cv = NULL;",
          "1940:     guint32 key = 0;",
          "1941:     guint32 tmp = 0;",
          "1943:     ADD_ADDRESS_TO_HASH( tmp, address1);",
          "1944:     key = (tmp << 16) | clnp_ref1 ;",
          "1946:     ADD_ADDRESS_TO_HASH( tmp, address2);",
          "1947:     key = (tmp << 24) | key ;",
          "1950:     cv = (atn_conversation_t *)",
          "1951:     wmem_tree_lookup32(",
          "1952:         get_atn_conversation_tree(),",
          "1953:         key);",
          "1956:     if(cv) {",
          "1957:       return NULL; }",
          "1960:     wmem_tree_insert32(",
          "1961:         get_atn_conversation_tree(),",
          "1962:         key,",
          "1963:         (void*)conversation);",
          "1965:     return conversation;",
          "1970:     tvbuff_t *tvb,",
          "1971:     packet_info *pinfo,",
          "1972:     proto_tree *tree,",
          "1973:     void *data _U_)",
          "1975:     int offset = 0;",
          "1976:     proto_item *ti = NULL;",
          "1977:     proto_tree *atn_ulcs_tree = NULL;",
          "1978:     guint8 value_pres = 0;",
          "1979:     guint8 value_ses = 0;",
          "1980:     guint16 value_ses_pres = 0;",
          "1982:     root_tree = tree;",
          "1986:     if ( (int)(intptr_t)  data == FALSE )",
          "1987:     {",
          "1988:         ti = proto_tree_add_item(",
          "1989:             tree,",
          "1990:             proto_atn_ulcs,",
          "1991:             tvb,",
          "1992:             0,",
          "1993:             0 ,",
          "1994:             ENC_NA);",
          "1996:         atn_ulcs_tree = proto_item_add_subtree(",
          "1997:             ti,",
          "1998:             ett_atn_ulcs);",
          "2000:         dissect_Fully_encoded_data_PDU(",
          "2001:             tvb,",
          "2002:             pinfo,",
          "2003:             atn_ulcs_tree, NULL);",
          "2005:         return offset +",
          "2006:           tvb_reported_length_remaining(tvb, offset ) ;",
          "2007:     }",
          "2010:     if ( (int)(intptr_t)  data == TRUE )",
          "2011:     {",
          "2013:         value_ses_pres = tvb_get_ntohs(tvb, offset);",
          "2016:         atn_ulcs_tree = proto_tree_add_subtree(",
          "2017:             tree, tvb, offset, 0,",
          "2018:             ett_atn_ses, NULL, ATN_SES_PROTO );",
          "2021:         value_ses = tvb_get_guint8(tvb, offset);",
          "2024:         proto_tree_add_item(atn_ulcs_tree,",
          "2025:             hf_atn_ses_type,",
          "2026:             tvb,",
          "2027:             offset,",
          "2028:             1,",
          "2029:             ENC_BIG_ENDIAN );",
          "2033:         switch(value_ses & SES_PDU_TYPE_MASK){",
          "2034:             case SES_ATN_SRF:",
          "2035:             case SES_ATN_SRFC:",
          "2038:                 proto_tree_add_item(atn_ulcs_tree,",
          "2039:                     hf_atn_ses_param_ind,",
          "2040:                     tvb,",
          "2041:                     offset,",
          "2042:                     1,",
          "2043:                     ENC_BIG_ENDIAN );",
          "2046:                 proto_tree_add_item(atn_ulcs_tree,",
          "2047:                     hf_atn_ses_param_b2,",
          "2048:                     tvb,",
          "2049:                     offset,",
          "2050:                     1,",
          "2051:                     ENC_BIG_ENDIAN );",
          "2054:                 proto_tree_add_item(atn_ulcs_tree,",
          "2055:                     hf_atn_ses_param_b1,",
          "2056:                     tvb,",
          "2057:                     offset,",
          "2058:                     1,",
          "2059:                     ENC_BIG_ENDIAN );",
          "2061:               break;",
          "2062:             default:",
          "2063:               break;",
          "2064:         }",
          "2065:         offset++;",
          "2068:         atn_ulcs_tree = proto_tree_add_subtree(",
          "2069:             tree, tvb, offset, 0,",
          "2070:             ett_atn_pres, NULL, ATN_PRES_PROTO );",
          "2072:         value_pres = tvb_get_guint8(tvb, offset);",
          "2076:         proto_tree_add_uint_format(atn_ulcs_tree, hf_atn_pres_pdu_type,",
          "2077:             tvb,",
          "2078:             offset,",
          "2079:             1,",
          "2080:             value_ses_pres,",
          "2081:             \"%s (0x%02x)\",",
          "2082:             val_to_str( value_ses_pres & ATN_SES_PRES_MASK , atn_pres_vals, \"?\"),",
          "2083:             value_pres);",
          "2086:         switch(value_ses & SES_PDU_TYPE_MASK){",
          "2087:             case SES_ATN_SRF:",
          "2088:             case SES_ATN_SRFC:",
          "2089:                 proto_tree_add_item(",
          "2090:                     atn_ulcs_tree,",
          "2091:                     hf_atn_pres_err,",
          "2092:                     tvb,",
          "2093:                     offset,",
          "2094:                     1,",
          "2095:                     ENC_BIG_ENDIAN );",
          "2096:                 break;",
          "2097:             default:",
          "2098:                 break;",
          "2099:         }",
          "2101:         offset++;",
          "2104:         atn_ulcs_tree = proto_tree_add_subtree(",
          "2105:             tree, tvb, offset, 0,",
          "2106:             ett_atn_acse, NULL, ATN_ACSE_PROTO );",
          "2108:         dissect_ACSE_apdu_PDU(",
          "2109:             tvb_new_subset_remaining(tvb, offset),",
          "2110:             pinfo,",
          "2111:             atn_ulcs_tree, NULL);",
          "2113:         return offset +",
          "2114:             tvb_reported_length_remaining(tvb, offset );",
          "2115:     }",
          "2116:     return offset;",
          "2120:     tvbuff_t *tvb,",
          "2121:     packet_info *pinfo,",
          "2122:     proto_tree *tree,",
          "2123:     void *data _U_)",
          "2127:     if (tvb_captured_length(tvb) < 2){",
          "2128:         return FALSE; }",
          "2132:     switch( tvb_get_ntohs(tvb, 0) & 0xf8ff ){",
          "2156:             dissect_atn_ulcs(",
          "2157:                 tvb,",
          "2158:                 pinfo,",
          "2159:                 tree,",
          "2160:                 (void*) TRUE);",
          "2161:             return TRUE;",
          "2163:             break;",
          "2164:     }",
          "2169:     switch(  tvb_get_ntohs(tvb, 0) & 0xfff0 ){",
          "2178:             dissect_atn_ulcs(tvb, pinfo, tree, (void*) FALSE);",
          "2179:             return TRUE;",
          "2180:             break;",
          "2182:             break;",
          "2183:     }",
          "2184:     return FALSE;",
          "2189:     static hf_register_info hf_atn_ulcs[] = {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2485:         NULL, HFILL }},",
          "2546: #line 1 \"../../asn1/atn-ulcs/packet-atn-ulcs-ettarr.c\"",
          "",
          "[Removed Lines]",
          "2488: #line 793 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "2489:     {&hf_atn_ses_type,",
          "2490:     { \"SPDU Type\",",
          "2491:      \"atn-ulcs.ses.type\",",
          "2492:      FT_UINT8,",
          "2493:      BASE_HEX,",
          "2494:      VALS(atn_ses_type),",
          "2495:      0xf8,",
          "2496:      \"Indicates presence of session parameters\",",
          "2497:      HFILL}},",
          "2498:     {&hf_atn_ses_param_ind,",
          "2499:     { \"SPDU Parameter Indication\",",
          "2500:      \"atn-ulcs.ses.parameter-indication\",",
          "2501:      FT_UINT8,",
          "2502:      BASE_HEX,",
          "2503:      VALS(atn_ses_param_ind),",
          "2504:      SES_PARAM_IND_MASK,",
          "2505:      \"Indicates presence of session parameters\",",
          "2506:      HFILL}},",
          "2507:    {&hf_atn_ses_param_b1,",
          "2508:     { \"SRF Parameter B1\",",
          "2509:      \"atn-ulcs.ses.srf-b1\",",
          "2510:      FT_UINT8,",
          "2511:      BASE_HEX,",
          "2512:      VALS(srf_b1),",
          "2513:      0x01,",
          "2514:      \"Determines if transport connection reject is transient or persistent\",",
          "2515:      HFILL}},",
          "2516:    {&hf_atn_ses_param_b2,",
          "2517:     { \"SRF Parameter B2\",",
          "2518:      \"atn-ulcs.ses.srf-b2\",",
          "2519:      FT_UINT8,",
          "2520:      BASE_HEX,",
          "2521:      VALS(srf_b2),",
          "2522:      0x02,",
          "2523:      \"Determines if transport connection is retained or released\",",
          "2524:      HFILL}},",
          "2525:    { &hf_atn_pres_err,",
          "2526:     { \"Error Code\", \"atn-ulcs.pres.cpr-error\",",
          "2527:      FT_UINT8,",
          "2528:      BASE_HEX,",
          "2529:      VALS(atn_pres_err),",
          "2530:      PRES_CPR_ER_MASK,",
          "2531:      NULL,",
          "2532:      HFILL}},",
          "2533:    { &hf_atn_pres_pdu_type,",
          "2534:     { \"PDU type\", \"atn-ulcs.pres.pdu_type\",",
          "2535:      FT_UINT8,",
          "2536:      BASE_HEX,",
          "2537:      NULL,",
          "2538:      ATN_SES_PRES_MASK,",
          "2539:      NULL,",
          "2540:      HFILL}},",
          "2541:   };",
          "2543:   static gint *ett[] = {",
          "",
          "[Added Lines]",
          "2483: #line 788 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "2484:         {&hf_atn_ses_type,",
          "2485:         { \"SPDU Type\",",
          "2486:           \"atn-ulcs.ses.type\",",
          "2487:           FT_UINT8,",
          "2488:           BASE_HEX,",
          "2489:           VALS(atn_ses_type),",
          "2490:           0xf8,",
          "2491:           \"Indicates presence of session parameters\",",
          "2492:           HFILL}},",
          "2493:         {&hf_atn_ses_param_ind,",
          "2494:         { \"SPDU Parameter Indication\",",
          "2495:           \"atn-ulcs.ses.parameter-indication\",",
          "2496:           FT_UINT8,",
          "2497:           BASE_HEX,",
          "2498:           VALS(atn_ses_param_ind),",
          "2499:           SES_PARAM_IND_MASK,",
          "2500:           \"Indicates presence of session parameters\",",
          "2501:           HFILL}},",
          "2502:       {&hf_atn_ses_param_b1,",
          "2503:         { \"SRF Parameter B1\",",
          "2504:           \"atn-ulcs.ses.srf-b1\",",
          "2505:           FT_UINT8,",
          "2506:           BASE_HEX,",
          "2507:           VALS(srf_b1),",
          "2508:           0x01,",
          "2509:           \"Determines if transport connection reject is transient or persistent\",",
          "2510:           HFILL}},",
          "2511:       {&hf_atn_ses_param_b2,",
          "2512:         { \"SRF Parameter B2\",",
          "2513:           \"atn-ulcs.ses.srf-b2\",",
          "2514:           FT_UINT8,",
          "2515:           BASE_HEX,",
          "2516:           VALS(srf_b2),",
          "2517:           0x02,",
          "2518:           \"Determines if transport connection is retained or released\",",
          "2519:           HFILL}},",
          "2520:       { &hf_atn_pres_err,",
          "2521:         { \"Error Code\", \"atn-ulcs.pres.cpr-error\",",
          "2522:           FT_UINT8,",
          "2523:           BASE_HEX,",
          "2524:           VALS(atn_pres_err),",
          "2525:           PRES_CPR_ER_MASK,",
          "2526:           NULL,",
          "2527:           HFILL}},",
          "2528:       { &hf_atn_pres_pdu_type,",
          "2529:         { \"PDU type\", \"atn-ulcs.pres.pdu_type\",",
          "2530:           FT_UINT8,",
          "2531:           BASE_HEX,",
          "2532:           NULL,",
          "2533:           ATN_SES_PRES_MASK,",
          "2534:           NULL,",
          "2535:           HFILL}},",
          "2536:     };",
          "2538:     static gint *ett[] = {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2571:     &ett_atn_ulcs_AttributeTypeAndValue,",
          "2610: }",
          "2612: void proto_reg_handoff_atn_ulcs(void)",
          "2613: {",
          "2621: }",
          "",
          "[Removed Lines]",
          "2574: #line 849 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "2575:     &ett_atn_ses,",
          "2576:     &ett_atn_pres,",
          "2577:     &ett_atn_acse,",
          "2578:     &ett_atn_ulcs",
          "2579:   };",
          "2581:   proto_atn_ulcs = proto_register_protocol (",
          "2582:     ATN_ULCS_PROTO ,",
          "2583:     \"ATN-ULCS\",",
          "2584:     \"atn-ulcs\");",
          "2586:   proto_register_field_array (",
          "2587:     proto_atn_ulcs,",
          "2588:     hf_atn_ulcs,",
          "2589:     array_length(hf_atn_ulcs));",
          "2591:   proto_register_subtree_array (",
          "2592:     ett,",
          "2593:     array_length (ett));",
          "2595:   new_register_dissector(",
          "2596:     \"atn-ulcs\",",
          "2597:     dissect_atn_ulcs,",
          "2598:     proto_atn_ulcs);",
          "2600:   atn_cm_handle = find_dissector(\"atn-cm\");",
          "2601:   atn_cpdlc_handle = find_dissector(\"atn-cpdlc\");",
          "2604:   atn_ulcs_heur_subdissector_list = register_heur_dissector_list(\"atn-ulcs\");",
          "2607:   aarq_data_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "2609:   atn_conversation_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "2615:   heur_dissector_add(",
          "2616:     \"cotp\",",
          "2617:     dissect_atn_ulcs_heur,",
          "2618:     \"ATN-ULCS over COTP\",",
          "2619:     \"atn-ucls_cotp\",",
          "2620:     proto_atn_ulcs, HEURISTIC_ENABLE);",
          "",
          "[Added Lines]",
          "2569: #line 844 \"../../asn1/atn-ulcs/packet-atn-ulcs-template.c\"",
          "2570:         &ett_atn_ses,",
          "2571:         &ett_atn_pres,",
          "2572:         &ett_atn_acse,",
          "2573:         &ett_atn_ulcs",
          "2574:     };",
          "2576:     proto_atn_ulcs = proto_register_protocol (",
          "2577:         ATN_ULCS_PROTO ,",
          "2578:         \"ATN-ULCS\",",
          "2579:         \"atn-ulcs\");",
          "2581:     proto_register_field_array (",
          "2582:         proto_atn_ulcs,",
          "2583:         hf_atn_ulcs,",
          "2584:         array_length(hf_atn_ulcs));",
          "2586:     proto_register_subtree_array (",
          "2587:         ett,",
          "2588:         array_length (ett));",
          "2590:     new_register_dissector(",
          "2591:         \"atn-ulcs\",",
          "2592:         dissect_atn_ulcs,",
          "2593:         proto_atn_ulcs);",
          "2595:     atn_cm_handle = find_dissector(\"atn-cm\");",
          "2596:     atn_cpdlc_handle = find_dissector(\"atn-cpdlc\");",
          "2599:     atn_ulcs_heur_subdissector_list = register_heur_dissector_list(\"atn-ulcs\");",
          "2602:     aarq_data_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "2604:     atn_conversation_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "2610:     heur_dissector_add(",
          "2611:         \"cotp\",",
          "2612:         dissect_atn_ulcs_heur,",
          "2613:         \"ATN-ULCS over COTP\",",
          "2614:         \"atn-ucls_cotp\",",
          "2615:         proto_atn_ulcs, HEURISTIC_ENABLE);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-atn-ulcs.h||epan/dissectors/packet-atn-ulcs.h": [
          "File: epan/dissectors/packet-atn-ulcs.h -> epan/dissectors/packet-atn-ulcs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: static const gchar ia5alpha[] = {",
          "55: };",
          "57: enum msg_type {",
          "61: };",
          "63: enum ae_qualifier {",
          "73: };",
          "75: typedef struct atn_conversation_t {",
          "77: } atn_conversation_t;",
          "79: atn_conversation_t * create_atn_conversation(",
          "85: atn_conversation_t * find_atn_conversation(",
          "",
          "[Removed Lines]",
          "46:   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "47:   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "48:   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, \\",
          "49:   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, \\",
          "50:   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, \\",
          "51:   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, \\",
          "52:   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, \\",
          "53:   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, \\",
          "54:   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, '\\0'",
          "58:   um,",
          "59:   dm,",
          "60:   no_msg",
          "64:   ads = 0,",
          "67:   ati = 3 ,",
          "68:   arf =10 ,",
          "69:   met =11,",
          "70:   gac =12,",
          "72:   unknown = -1",
          "80:   address*,",
          "81:   guint16,",
          "82:   address*,",
          "83:   atn_conversation_t*);",
          "86:   address*,",
          "87:   guint16,",
          "88:   address*);",
          "",
          "[Added Lines]",
          "41:     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "42:     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, \\",
          "43:     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, \\",
          "44:     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, \\",
          "45:     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, \\",
          "46:     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, \\",
          "47:     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, \\",
          "48:     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, \\",
          "49:     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, '\\0'",
          "53:     um,",
          "54:     dm,",
          "55:     no_msg",
          "59:     ads = 0,",
          "62:     ati = 3 ,",
          "63:     arf =10 ,",
          "64:     met =11,",
          "65:     gac =12,",
          "67:     unknown = -1",
          "75:     address*,",
          "76:     guint16,",
          "77:     address*,",
          "78:     atn_conversation_t*);",
          "81:     address*,",
          "82:     guint16,",
          "83:     address*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}