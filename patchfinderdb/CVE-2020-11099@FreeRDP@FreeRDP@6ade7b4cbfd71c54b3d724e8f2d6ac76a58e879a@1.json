{
  "cve_id": "CVE-2020-11099",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an out of bounds read in license_read_new_or_upgrade_license_packet. A manipulated license packet can lead to out of bound reads to an internal buffer. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
  "patch_info": {
    "commit_hash": "6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6ade7b4cbfd71c54b3d724e8f2d6ac76a58e879a",
    "files": [
      "libfreerdp/core/license.c"
    ],
    "message": "Fixed OOB Read in license_read_new_or_upgrade_license_packet\n\nCVE-2020-11099 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/license.c||libfreerdp/core/license.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/license.c||libfreerdp/core/license.c": [
      "File: libfreerdp/core/license.c -> libfreerdp/core/license.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1252:  if (!licenseStream)",
      "1253:   goto out_free_blob;",
      "1255:  Stream_Read_UINT16(licenseStream, os_minor);",
      "1256:  Stream_Read_UINT16(licenseStream, os_major);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1255:  if (Stream_GetRemainingLength(licenseStream) < 8)",
      "1256:   goto out_free_stream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1266:  Stream_Seek(licenseStream, cbScope);",
      "1269:  Stream_Read_UINT32(licenseStream, cbCompanyName);",
      "1270:  if (Stream_GetRemainingLength(licenseStream) < cbCompanyName)",
      "1271:   goto out_free_stream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1272:  if (Stream_GetRemainingLength(licenseStream) < 4)",
      "1273:   goto out_free_stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1276:  Stream_Seek(licenseStream, cbCompanyName);",
      "1279:  Stream_Read_UINT32(licenseStream, cbProductId);",
      "1280:  if (Stream_GetRemainingLength(licenseStream) < cbProductId)",
      "1281:   goto out_free_stream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1284:  if (Stream_GetRemainingLength(licenseStream) < 4)",
      "1285:   goto out_free_stream;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1286:  Stream_Seek(licenseStream, cbProductId);",
      "1289:  Stream_Read_UINT32(licenseStream, cbLicenseInfo);",
      "1290:  if (Stream_GetRemainingLength(licenseStream) < cbLicenseInfo)",
      "1291:   goto out_free_stream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1296:  if (Stream_GetRemainingLength(licenseStream) < 4)",
      "1297:   goto out_free_stream;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
      "candidate_info": {
        "commit_hash": "3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3ac7bb5d6a743b19e8686410d5ec6dcf74869ebe",
        "files": [
          "libfreerdp/utils/pcap.c"
        ],
        "message": "Fixed pcap cleanup",
        "before_after_code_files": [
          "libfreerdp/utils/pcap.c||libfreerdp/utils/pcap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/utils/pcap.c||libfreerdp/utils/pcap.c": [
          "File: libfreerdp/utils/pcap.c -> libfreerdp/utils/pcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: {",
          "171:  rdpPcap* pcap;",
          "181:  pcap = (rdpPcap*)calloc(1, sizeof(rdpPcap));",
          "182:  if (!pcap)",
          "185:  pcap->name = name;",
          "186:  pcap->write = write;",
          "187:  pcap->record_count = 0;",
          "190:  if (write)",
          "191:  {",
          "",
          "[Removed Lines]",
          "173:  FILE* pcap_fp = fopen(name, write ? \"w+b\" : \"rb\");",
          "175:  if (pcap_fp == NULL)",
          "176:  {",
          "177:   WLog_ERR(TAG, \"opening pcap dump\");",
          "178:   return NULL;",
          "179:  }",
          "183:   goto fail_close;",
          "188:  pcap->fp = pcap_fp;",
          "",
          "[Added Lines]",
          "175:   goto fail;",
          "180:  pcap->fp = fopen(name, write ? \"w+b\" : \"rb\");",
          "182:  if (pcap->fp == NULL)",
          "183:   goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:  return pcap;",
          "213: fail:",
          "217:  return NULL;",
          "218: }",
          "",
          "[Removed Lines]",
          "214:  free(pcap);",
          "215: fail_close:",
          "216:  fclose(pcap_fp);",
          "",
          "[Added Lines]",
          "209:  pcap_close(pcap);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232: void pcap_close(rdpPcap* pcap)",
          "233: {",
          "234:  pcap_flush(pcap);",
          "236:  if (pcap->fp != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:  if (!pcap)",
          "228:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
      "candidate_info": {
        "commit_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "files": [
          "libfreerdp/codec/include/bitmap.c"
        ],
        "message": "Fixed out of bound read in RLEDECOMPRESS\n\nCVE-2020-4033 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c": [
          "File: libfreerdp/codec/include/bitmap.c -> libfreerdp/codec/include/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     if (code == LITE_SET_FG_FG_RUN || code == MEGA_MEGA_SET_FG_RUN)",
          "203:     {",
          "204:      SRCREADPIXEL(fgPel, pbSrc);",
          "205:      SRCNEXTPIXEL(pbSrc);",
          "206:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:      if (pbSrc >= pbEnd)",
          "205:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:    case MEGA_MEGA_DITHERED_RUN:",
          "232:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "233:     pbSrc = pbSrc + advance;",
          "234:     SRCREADPIXEL(pixelA, pbSrc);",
          "235:     SRCNEXTPIXEL(pbSrc);",
          "236:     SRCREADPIXEL(pixelB, pbSrc);",
          "237:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     if (pbSrc >= pbEnd)",
          "237:      return FALSE;",
          "240:     if (pbSrc >= pbEnd)",
          "241:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:    case MEGA_MEGA_COLOR_RUN:",
          "253:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "254:     pbSrc = pbSrc + advance;",
          "255:     SRCREADPIXEL(pixelA, pbSrc);",
          "256:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     if (pbSrc >= pbEnd)",
          "262:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "273:     pbSrc = pbSrc + advance;",
          "275:     if (code == LITE_SET_FG_FGBG_IMAGE || code == MEGA_MEGA_SET_FGBG_IMAGE)",
          "276:     {",
          "277:      SRCREADPIXEL(fgPel, pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     if (pbSrc >= pbEnd)",
          "284:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:      return FALSE;",
          "340:     UNROLL(runLength, {",
          "341:      SRCREADPIXEL(temp, pbSrc);",
          "342:      SRCNEXTPIXEL(pbSrc);",
          "343:      DESTWRITEPIXEL(pbDest, temp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:      if (pbSrc >= pbEnd)",
          "352:       return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
      "candidate_info": {
        "commit_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/36478d3d0b3d7fa378a875f60170a08e94747226",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Replaced getlogin with getlogin_r",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (!path)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char* uname = getlogin();",
          "",
          "[Added Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "---------------"
        ],
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:  if (!settings->Username && !settings->CredentialsFromStdin && !settings->SmartcardLogon)",
          "1183:  {",
          "1187:   {",
          "1188:    settings->Username = _strdup(login_name);",
          "",
          "[Removed Lines]",
          "1184:   char* login_name = getlogin();",
          "1186:   if (login_name)",
          "",
          "[Added Lines]",
          "1184:   char login_name[MAX_PATH] = { 0 };",
          "1186:   if (getlogin_r(login_name, sizeof(login_name)) == 0)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: BOOL GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize)",
          "202: {",
          "203:  size_t length;",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "210:    length = strlen(login);",
          "212:    if (*nSize >= length)",
          "213:    {",
          "214:     CopyMemory(lpNameBuffer, login, length + 1);",
          "216:    }",
          "217:    else",
          "218:    {",
          "",
          "[Removed Lines]",
          "204:  char* login;",
          "209:    login = getlogin();",
          "215:     return 1;",
          "",
          "[Added Lines]",
          "204:  char login[MAX_PATH];",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "216:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:    break;",
          "236:  }",
          "239: }",
          "241: BOOL GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize)",
          "",
          "[Removed Lines]",
          "238:  return 0;",
          "",
          "[Added Lines]",
          "239:  return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "caff01877d4df5f25a983b3aa5e57dde6a16a62f",
      "candidate_info": {
        "commit_hash": "caff01877d4df5f25a983b3aa5e57dde6a16a62f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/caff01877d4df5f25a983b3aa5e57dde6a16a62f",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Fixed fallback to getlogin for android",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:  uid_t uid = getuid();",
          "601:  char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "606:  if (!path)",
          "607:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: #ifndef getlogin_r",
          "604:  strncpy(uname, getlogin(), sizeof(uname));",
          "605: #else",
          "608: #endif",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "211:    length = strlen(login);",
          "213:    if (*nSize >= length)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: #ifndef getlogin_r",
          "210:    strncpy(login, getlogin(), sizeof(login));",
          "211: #else",
          "214: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
      "candidate_info": {
        "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3762:              name, end - start);",
          "3763:   return FALSE;",
          "3764:  }",
          "3766:  if (diff > 0)",
          "3767:  {",
          "3768:   WLog_Print(update->log, WLOG_DEBUG,",
          "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
          "3771:  }",
          "3772:  return rc;",
          "3773: }",
          "",
          "[Removed Lines]",
          "3765:  diff = start - end;",
          "3770:   Stream_Seek(s, diff);",
          "",
          "[Added Lines]",
          "3765:  diff = end - start;",
          "3770:   if (!Stream_SafeSeek(s, diff))",
          "3771:    return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}