{
  "cve_id": "CVE-2020-27208",
  "cve_desc": "The flash read-out protection (RDP) level is not enforced during the device initialization phase of the SoloKeys Solo 4.0.0 & Somu and the Nitrokey FIDO2 token. This allows an adversary to downgrade the RDP level and access secrets such as private ECC keys from SRAM via the debug interface.",
  "repo": "solokeys/solo",
  "patch_hash": "a9c02cd354f34b48195a342c7f524abdef5cbcec",
  "patch_info": {
    "commit_hash": "a9c02cd354f34b48195a342c7f524abdef5cbcec",
    "repo": "solokeys/solo",
    "commit_url": "https://github.com/solokeys/solo/commit/a9c02cd354f34b48195a342c7f524abdef5cbcec",
    "files": [
      "targets/stm32l432/src/device.c",
      "targets/stm32l432/src/flash.c"
    ],
    "message": "patches to improve resistance to fault injection",
    "before_after_code_files": [
      "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
      "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
    ]
  },
  "patch_diff": {
    "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c": [
      "File: targets/stm32l432/src/device.c -> targets/stm32l432/src/device.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "305:     hw_init(LOW_FREQUENCY);",
      "307:     if (! tsc_sensor_exists())",
      "308:     {",
      "309:         _NFC_status = nfc_init();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307: #if BOOT_TO_DFU",
      "308:     flash_option_bytes_init(1);",
      "309: #else",
      "310:     flash_option_bytes_init(0);",
      "311: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "330:     device_migrate();",
      "339: }",
      "",
      "[Removed Lines]",
      "332: #if BOOT_TO_DFU",
      "333:     flash_option_bytes_init(1);",
      "334: #else",
      "335:     flash_option_bytes_init(0);",
      "336: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c": [
      "File: targets/stm32l432/src/flash.c -> targets/stm32l432/src/flash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     flash_lock();",
      "74: }",
      "76: void flash_erase_page(uint8_t page)",
      "",
      "[Removed Lines]",
      "73:     __enable_irq();",
      "",
      "[Added Lines]",
      "75:     FLASH->CR |= FLASH_CR_OBL_LAUNCH;",
      "77:     while (true);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a87e1c6d15ef90b3ff7071abb86d3ef0d035b7fd",
      "candidate_info": {
        "commit_hash": "a87e1c6d15ef90b3ff7071abb86d3ef0d035b7fd",
        "repo": "solokeys/solo",
        "commit_url": "https://github.com/solokeys/solo/commit/a87e1c6d15ef90b3ff7071abb86d3ef0d035b7fd",
        "files": [
          "targets/stm32l432/src/device.c",
          "targets/stm32l432/src/flash.c"
        ],
        "message": "fix init order to prevent reset loop in some cases",
        "before_after_code_files": [
          "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
          "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
            "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
          ],
          "candidate": [
            "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
            "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
          ]
        }
      },
      "candidate_diff": {
        "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c": [
          "File: targets/stm32l432/src/device.c -> targets/stm32l432/src/device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     hw_init(LOW_FREQUENCY);",
          "313:     if (! tsc_sensor_exists())",
          "314:     {",
          "315:         _NFC_status = nfc_init();",
          "",
          "[Removed Lines]",
          "307: #if BOOT_TO_DFU",
          "308:     flash_option_bytes_init(1);",
          "309: #else",
          "310:     flash_option_bytes_init(0);",
          "311: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:         device_init_button();",
          "330:     }",
          "332:     usbhid_init();",
          "333:     ctaphid_init();",
          "334:     ctap_init();",
          "339: }",
          "341: int device_is_nfc(void)",
          "",
          "[Removed Lines]",
          "336:     device_migrate();",
          "",
          "[Added Lines]",
          "326:     device_migrate();",
          "328: #if BOOT_TO_DFU",
          "329:     flash_option_bytes_init(1);",
          "330: #else",
          "331:     flash_option_bytes_init(0);",
          "332: #endif",
          "",
          "---------------"
        ],
        "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c": [
          "File: targets/stm32l432/src/flash.c -> targets/stm32l432/src/flash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     val &= ~(1<<25); // SRAM2_RST = 1 (erase sram on reset)",
          "48:     val &= ~(1<<24); // SRAM2_PE = 1 (parity check en)",
          "51:     {",
          "52:         return;",
          "53:     }",
          "",
          "[Removed Lines]",
          "50:     if (FLASH->OPTR == val)",
          "",
          "[Added Lines]",
          "50:     if ((FLASH->OPTR & 0xb3f77ff) == (val & 0xb3f77ff))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     while (FLASH->SR & (1<<16))",
          "69:         ;",
          "75:     FLASH->CR |= FLASH_CR_OBL_LAUNCH;",
          "78: }",
          "80: void flash_erase_page(uint8_t page)",
          "",
          "[Removed Lines]",
          "71:     flash_lock();",
          "77:     while (true);",
          "",
          "[Added Lines]",
          "71:     if (FLASH->CR & (1<<30))",
          "72:     {",
          "73:         FLASH->OPTKEYR = 0x08192A3B;",
          "74:         FLASH->OPTKEYR = 0x4C5D6E7F;",
          "75:     }",
          "80:     while (true)",
          "81:         ;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ebd049c88db349b8e4ad8e022eeab54bc07c29e",
      "candidate_info": {
        "commit_hash": "0ebd049c88db349b8e4ad8e022eeab54bc07c29e",
        "repo": "solokeys/solo",
        "commit_url": "https://github.com/solokeys/solo/commit/0ebd049c88db349b8e4ad8e022eeab54bc07c29e",
        "files": [
          "targets/stm32l432/src/device.c",
          "targets/stm32l432/src/flash.c"
        ],
        "message": "fix init order to prevent reset loop in some cases",
        "before_after_code_files": [
          "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
          "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
            "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
          ],
          "candidate": [
            "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
            "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
          ]
        }
      },
      "candidate_diff": {
        "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c": [
          "File: targets/stm32l432/src/device.c -> targets/stm32l432/src/device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     hw_init(LOW_FREQUENCY);",
          "313:     if (! tsc_sensor_exists())",
          "314:     {",
          "315:         _NFC_status = nfc_init();",
          "",
          "[Removed Lines]",
          "307: #if BOOT_TO_DFU",
          "308:     flash_option_bytes_init(1);",
          "309: #else",
          "310:     flash_option_bytes_init(0);",
          "311: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:         device_init_button();",
          "330:     }",
          "332:     usbhid_init();",
          "333:     ctaphid_init();",
          "334:     ctap_init();",
          "339: }",
          "341: int device_is_nfc(void)",
          "",
          "[Removed Lines]",
          "336:     device_migrate();",
          "",
          "[Added Lines]",
          "326:     device_migrate();",
          "328: #if BOOT_TO_DFU",
          "329:     flash_option_bytes_init(1);",
          "330: #else",
          "331:     flash_option_bytes_init(0);",
          "332: #endif",
          "",
          "---------------"
        ],
        "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c": [
          "File: targets/stm32l432/src/flash.c -> targets/stm32l432/src/flash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     val &= ~(1<<25); // SRAM2_RST = 1 (erase sram on reset)",
          "48:     val &= ~(1<<24); // SRAM2_PE = 1 (parity check en)",
          "51:     {",
          "52:         return;",
          "53:     }",
          "",
          "[Removed Lines]",
          "50:     if (FLASH->OPTR == val)",
          "",
          "[Added Lines]",
          "50:     if ((FLASH->OPTR & 0xb3f77ff) == (val & 0xb3f77ff))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     while (FLASH->SR & (1<<16))",
          "69:         ;",
          "75:     FLASH->CR |= FLASH_CR_OBL_LAUNCH;",
          "78: }",
          "80: void flash_erase_page(uint8_t page)",
          "",
          "[Removed Lines]",
          "71:     flash_lock();",
          "77:     while (true);",
          "",
          "[Added Lines]",
          "71:     if (FLASH->CR & (1<<30))",
          "72:     {",
          "73:         FLASH->OPTKEYR = 0x08192A3B;",
          "74:         FLASH->OPTKEYR = 0x4C5D6E7F;",
          "75:     }",
          "80:     while (true)",
          "81:         ;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "274d18237933a3994040fbe96885076d7520d695",
      "candidate_info": {
        "commit_hash": "274d18237933a3994040fbe96885076d7520d695",
        "repo": "solokeys/solo",
        "commit_url": "https://github.com/solokeys/solo/commit/274d18237933a3994040fbe96885076d7520d695",
        "files": [
          "targets/stm32l432/src/device.c",
          "targets/stm32l432/src/flash.c"
        ],
        "message": "patches to improve resistance to fault injection",
        "before_after_code_files": [
          "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
          "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
            "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
          ],
          "candidate": [
            "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c",
            "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c"
          ]
        }
      },
      "candidate_diff": {
        "targets/stm32l432/src/device.c||targets/stm32l432/src/device.c": [
          "File: targets/stm32l432/src/device.c -> targets/stm32l432/src/device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     hw_init(LOW_FREQUENCY);",
          "307:     if (! tsc_sensor_exists())",
          "308:     {",
          "309:         _NFC_status = nfc_init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: #if BOOT_TO_DFU",
          "308:     flash_option_bytes_init(1);",
          "309: #else",
          "310:     flash_option_bytes_init(0);",
          "311: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:     device_migrate();",
          "339: }",
          "",
          "[Removed Lines]",
          "332: #if BOOT_TO_DFU",
          "333:     flash_option_bytes_init(1);",
          "334: #else",
          "335:     flash_option_bytes_init(0);",
          "336: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "targets/stm32l432/src/flash.c||targets/stm32l432/src/flash.c": [
          "File: targets/stm32l432/src/flash.c -> targets/stm32l432/src/flash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     flash_lock();",
          "74: }",
          "76: void flash_erase_page(uint8_t page)",
          "",
          "[Removed Lines]",
          "73:     __enable_irq();",
          "",
          "[Added Lines]",
          "75:     FLASH->CR |= FLASH_CR_OBL_LAUNCH;",
          "77:     while (true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}