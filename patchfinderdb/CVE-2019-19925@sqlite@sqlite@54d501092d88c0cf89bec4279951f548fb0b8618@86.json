{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
      "candidate_info": {
        "commit_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31f69626df74d7f5d011cee54da6a05acd32970c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/build.c",
          "src/fkey.c",
          "src/main.c",
          "src/malloc.c",
          "src/parse.y",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Performance optimization to the lookaside-memory disabling mechanism.\n\nFossilOrigin-Name: 17ce1c49cb0ed6fdd8c7c33431bc2afa217f1092c99b8dd608890a8e7aec7fb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855: #ifdef SQLITE_ENABLE_STAT4",
          "1856:   if( rc==SQLITE_OK ){",
          "1858:     rc = loadStat4(db, sInfo.zDatabase);",
          "1860:   }",
          "1861:   for(i=sqliteHashFirst(&pSchema->idxHash); i; i=sqliteHashNext(i)){",
          "1862:     Index *pIdx = sqliteHashData(i);",
          "",
          "[Removed Lines]",
          "1857:     db->lookaside.bDisable++;",
          "1859:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1857:     DisableLookaside;",
          "1859:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2447:     n = pParse->nTab;",
          "2448:     sqlite3SrcListAssignCursors(pParse, pSel->pSrc);",
          "2449:     pTable->nCol = -1;",
          "2451: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2452:     xAuth = db->xAuth;",
          "2453:     db->xAuth = 0;",
          "",
          "[Removed Lines]",
          "2450:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "2450:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2489:     }",
          "2490:     sqlite3DeleteTable(db, pSelTab);",
          "2491:     sqlite3SelectDelete(db, pSel);",
          "2493: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2494:     pParse->eParseMode = eParseMode;",
          "2495: #endif",
          "",
          "[Removed Lines]",
          "2492:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "2492:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:     }",
          "1304:     pTrigger = (Trigger *)sqlite3DbMallocZero(db,",
          "",
          "[Removed Lines]",
          "1302:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "1302:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:     }",
          "1326:     sqlite3ExprDelete(db, pWhere);",
          "1327:     sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "1324:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1324:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   db->lookaside.pInit = 0;",
          "716:   db->lookaside.pFree = 0;",
          "717:   db->lookaside.sz = (u16)sz;",
          "718:   if( pStart ){",
          "719:     int i;",
          "720:     LookasideSlot *p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:   db->lookaside.szTrue = (u16)sz;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     db->lookaside.pStart = db;",
          "734:     db->lookaside.pEnd = db;",
          "735:     db->lookaside.bDisable = 1;",
          "736:     db->lookaside.bMalloced = 0;",
          "737:     db->lookaside.nSlot = 0;",
          "738:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:     db->lookaside.sz = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3064:   db->magic = SQLITE_MAGIC_BUSY;",
          "3065:   db->aDb = db->aDbStatic;",
          "3066:   db->lookaside.bDisable = 1;",
          "3068:   assert( sizeof(db->aLimit)==sizeof(aHardLimit) );",
          "3069:   memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3069:   db->lookaside.sz = 0;",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     return sqlite3GlobalConfig.m.xSize(p);",
          "299:   }else{",
          "300:     assert( sqlite3_mutex_held(db->mutex) );",
          "302:   }",
          "303: }",
          "304: sqlite3_uint64 sqlite3_msize(void *p){",
          "",
          "[Removed Lines]",
          "301:     return db->lookaside.sz;",
          "",
          "[Added Lines]",
          "301:     return db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:       LookasideSlot *pBuf = (LookasideSlot*)p;",
          "351: #ifdef SQLITE_DEBUG",
          "354: #endif",
          "355:       pBuf->pNext = db->lookaside.pFree;",
          "356:       db->lookaside.pFree = pBuf;",
          "",
          "[Removed Lines]",
          "353:       memset(p, 0xaa, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "353:       memset(p, 0xaa, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:   assert( db!=0 );",
          "511:   assert( sqlite3_mutex_held(db->mutex) );",
          "512:   assert( db->pnBytesFreed==0 );",
          "527:     }",
          "530:   }",
          "531: #else",
          "532:   assert( db!=0 );",
          "",
          "[Removed Lines]",
          "513:   if( db->lookaside.bDisable==0 ){",
          "514:     assert( db->mallocFailed==0 );",
          "515:     if( n>db->lookaside.sz ){",
          "516:       db->lookaside.anStat[1]++;",
          "517:     }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "518:       db->lookaside.pFree = pBuf->pNext;",
          "519:       db->lookaside.anStat[0]++;",
          "520:       return (void*)pBuf;",
          "521:     }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "522:       db->lookaside.pInit = pBuf->pNext;",
          "523:       db->lookaside.anStat[0]++;",
          "524:       return (void*)pBuf;",
          "525:     }else{",
          "526:       db->lookaside.anStat[2]++;",
          "528:   }else if( db->mallocFailed ){",
          "529:     return 0;",
          "",
          "[Added Lines]",
          "513:   if( n>db->lookaside.sz ){",
          "514:     if( db->lookaside.bDisable ){",
          "515:       return db->mallocFailed ? 0 : dbMallocRawFinish(db, n);",
          "517:     db->lookaside.anStat[1]++;",
          "518:   }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "519:     db->lookaside.pFree = pBuf->pNext;",
          "520:     db->lookaside.anStat[0]++;",
          "521:     return (void*)pBuf;",
          "522:   }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "523:     db->lookaside.pInit = pBuf->pNext;",
          "524:     db->lookaside.anStat[0]++;",
          "525:     return (void*)pBuf;",
          "526:   }else{",
          "527:     db->lookaside.anStat[2]++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:   assert( db!=0 );",
          "551:   if( p==0 ) return sqlite3DbMallocRawNN(db, n);",
          "552:   assert( sqlite3_mutex_held(db->mutex) );",
          "554:   return dbReallocFinish(db, p, n);",
          "555: }",
          "556: static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){",
          "",
          "[Removed Lines]",
          "553:   if( isLookaside(db,p) && n<=db->lookaside.sz ) return p;",
          "",
          "[Added Lines]",
          "551:   if( isLookaside(db,p) && n<=db->lookaside.szTrue ) return p;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:     if( isLookaside(db, p) ){",
          "562:       pNew = sqlite3DbMallocRawNN(db, n);",
          "563:       if( pNew ){",
          "565:         sqlite3DbFree(db, p);",
          "566:       }",
          "567:     }else{",
          "",
          "[Removed Lines]",
          "564:         memcpy(pNew, p, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "562:         memcpy(pNew, p, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "660:     if( db->nVdbeExec>0 ){",
          "661:       db->u1.isInterrupted = 1;",
          "662:     }",
          "664:     if( db->pParse ){",
          "665:       db->pParse->rc = SQLITE_NOMEM_BKPT;",
          "666:     }",
          "",
          "[Removed Lines]",
          "663:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "661:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "679:     db->mallocFailed = 0;",
          "680:     db->u1.isInterrupted = 0;",
          "681:     assert( db->lookaside.bDisable>0 );",
          "683:   }",
          "684: }",
          "",
          "[Removed Lines]",
          "682:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "680:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: static void disableLookaside(Parse *pParse){",
          "109:   pParse->disableLookaside++;",
          "111: }",
          "113: } // end %include",
          "",
          "[Removed Lines]",
          "110:   pParse->db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "109:   sqlite3 *db = pParse->db;",
          "111:   DisableLookaside;",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:   if( db ){",
          "528:     assert( db->lookaside.bDisable >= pParse->disableLookaside );",
          "529:     db->lookaside.bDisable -= pParse->disableLookaside;",
          "530:   }",
          "531:   pParse->disableLookaside = 0;",
          "532: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     db->lookaside.sz = db->lookaside.bDisable ? 0 : db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561:   if( prepFlags & SQLITE_PREPARE_PERSISTENT ){",
          "562:     sParse.disableLookaside++;",
          "564:   }",
          "565:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "[Removed Lines]",
          "563:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "564:     DisableLookaside;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297: #define DisableLookaside  db->lookaside.bDisable++;db->lookaside.sz=0",
          "1298: #define EnableLookaside   db->lookaside.bDisable--;\\",
          "1299:    db->lookaside.sz=db->lookaside.bDisable?0:db->lookaside.szTrue",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2829df082cdf5feea6cc0be95bf517dd49d33319",
      "candidate_info": {
        "commit_hash": "2829df082cdf5feea6cc0be95bf517dd49d33319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2829df082cdf5feea6cc0be95bf517dd49d33319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Remove an unused variable.\n\nFossilOrigin-Name: a19884455b9bafcdc769362d61cfd02df1b5643263e004cb533698bbcfca752b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5fe15c1d8383989257e11d1806e6b035acacd1b504ae385ba58d20db10f26eee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1587:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1588:       int addrIf = 0;",
          "1590:       if( pWin->pFilter ){",
          "1591:         int regTmp;",
          "1592:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "",
          "[Removed Lines]",
          "1589:       int addrIf2 = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1627:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1628:       }",
          "1629:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1631:     }",
          "1632:   }",
          "1633: }",
          "",
          "[Removed Lines]",
          "1630:       if( addrIf2 ) sqlite3VdbeJumpHere(v, addrIf2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
      "candidate_info": {
        "commit_hash": "db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db3a32ed1cfb3b90cc5baa9df54e48afa9b18ee6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowA.test"
        ],
        "message": "Back out the change at [47cd634c98b502d4] which was incorrect.  Add a test case so that we don't accidently back out that change again.\n\nFossilOrigin-Name: 596ac2a4eab28b74f4050fb4eb71883f2a1421fdbccf302413e4653391bb52c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowA.test||test/windowA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 900464567b2a5ce0c278a3297e4be1968f609258608aa0fbe2fc67709aa22a4b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2016:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "2017:         break;",
          "2018:       case OP_Gt:",
          "2020:         break;",
          "2023:         break;",
          "2024:     }",
          "2025:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "",
          "[Removed Lines]",
          "2019:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "2021:       default: assert( op==OP_Le );",
          "2022:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2019:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "2020:         VdbeCoverage(v);",
          "2022:       case OP_Le:",
          "2023:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "2024:         VdbeCoverage(v);",
          "2026:       default: assert( op==OP_Lt ); /* no-op */ break;",
          "",
          "---------------"
        ],
        "test/windowA.test||test/windowA.test": [
          "File: test/windowA.test -> test/windowA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   1 A   5.4 A        \\",
          "290: ]",
          "292: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: do_execsql_test 4.0 {",
          "293:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "294:   WINDOW w1 AS",
          "295:      (ORDER BY d DESC NULLS FIRST",
          "296:       RANGE BETWEEN 2.50 PRECEDING AND 0.5 PRECEDING)",
          "297:   ORDER BY +d DESC NULLS FIRST, +a;",
          "298: } [list \\",
          "299:   6 N  NULL NN  \\",
          "300:   7 N  NULL NN  \\",
          "301:   5 E 10.26 {}  \\",
          "302:   4 D 10.25 {}  \\",
          "303:   3 C   8.0 ED  \\",
          "304:   2 B  5.55 C   \\",
          "305:   1 A   5.4 {}  \\",
          "306: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e22976c5357fb6501cb0dd40220b8d48bd9295bb",
      "candidate_info": {
        "commit_hash": "e22976c5357fb6501cb0dd40220b8d48bd9295bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e22976c5357fb6501cb0dd40220b8d48bd9295bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix the SQLITE_DIRECT_OVERFLOW_READ compile-time option so that it works with SQLITE_HAS_CODEC.\n\nFossilOrigin-Name: fd085e9260bec18f968704abb2dd324d954baa121d13b67c3f5b801e9e3834aa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d49c32e6e7cc341b5961d2c7b7c68d1649c6542eeec201660e3f82a55aea9e3b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837: int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno){",
          "838:   if( pPager->fd->pMethods==0 ) return 0;",
          "839:   if( sqlite3PCacheIsDirty(pPager->pPCache) ) return 0;",
          "840: #ifndef SQLITE_OMIT_WAL",
          "841:   if( pPager->pWal ){",
          "842:     u32 iRead = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840: #ifdef SQLITE_HAS_CODEC",
          "841:   if( pPager->xCodec!=0 ) return 0;",
          "842: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
      "candidate_info": {
        "commit_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Avoid downgrading SQLITE_CORRUPT errors detected by the schema parser into SQLITE_NOMEM or SQLITE_ERROR errors.\n\nFossilOrigin-Name: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cc5694cbd69749c146679c367860952fdf3f5356426ddfd1dce470569702bc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:       if( db->init.orphanTrigger ){",
          "116:         assert( iDb==1 );",
          "117:       }else{",
          "119:         if( rc==SQLITE_NOMEM ){",
          "120:           sqlite3OomFault(db);",
          "121:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "",
          "[Removed Lines]",
          "118:         pData->rc = rc;",
          "",
          "[Added Lines]",
          "118:         if( rc > pData->rc ) pData->rc = rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}