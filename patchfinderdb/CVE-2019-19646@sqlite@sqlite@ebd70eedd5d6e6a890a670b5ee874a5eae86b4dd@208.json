{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04307c8a3f457760348fd56f474cedc940fd7dc3",
      "candidate_info": {
        "commit_hash": "04307c8a3f457760348fd56f474cedc940fd7dc3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04307c8a3f457760348fd56f474cedc940fd7dc3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Ignore differences in Expr.op2 in sqlite3ExprCompare() in cases where it does matter.  Ticket [1d2a8efc6c3a595a].\n\nFossilOrigin-Name: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aceeaf9e28767a0880a16872867a1f57bff163acd0f10d19d5688068077590fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5028:      && (combinedFlags & EP_Reduced)==0",
          "5029:     ){",
          "5030:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5033:         return 2;",
          "5034:       }",
          "",
          "[Removed Lines]",
          "5031:       if( pA->op2!=pB->op2 && (pA->op!=TK_FUNCTION || iTab<0) ) return 2;",
          "",
          "[Added Lines]",
          "5031:       if( pA->op2!=pB->op2 ){",
          "5032:         if( pA->op==TK_TRUTH ) return 2;",
          "5033:         if( pA->op==TK_FUNCTION && iTab<0 ){",
          "5043:           return 2;",
          "5044:         }",
          "5045:       }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-10-31",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for generated columns.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # ticket 830277d9db6c3ba1 on 2019-10-31",
          "19: do_execsql_test gencol1-100 {",
          "20:   CREATE TABLE t0(c0 AS(TYPEOF(c1)), c1);",
          "21:   INSERT INTO t0(c1) VALUES(0);",
          "22:   CREATE TABLE t1(x AS (typeof(y)), y);",
          "23:   INSERT INTO t1 SELECT * FROM t0;",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
      "candidate_info": {
        "commit_hash": "dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbdddc99d83130fe22ed63a4bfc19a53a408c51b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Detect oversized strings in the OP_String opcode even if the P4 argument is originally UTF8 and has to be converted to UTF16 to match the database file and that conversion causes the string to become shorter and cross below SQLITE_LIMIT_LENGTH threshold.  This might fix an OSSFuzz problem that we have been so far unable to reproduce.\n\nFossilOrigin-Name: c13d563925db12bc2c91ff9432050261e5bd39d960e2739777a66bf804df2e31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be21a6416d47ff7db995006a0422b745044d9b8bb5bad3c53342aa6e2e524771",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:   if( encoding!=SQLITE_UTF8 ){",
          "1103:     rc = sqlite3VdbeMemSetStr(pOut, pOp->p4.z, -1, SQLITE_UTF8, SQLITE_STATIC);",
          "1104:     assert( rc==SQLITE_OK || rc==SQLITE_TOOBIG );",
          "1105:     if( SQLITE_OK!=sqlite3VdbeChangeEncoding(pOut, encoding) ) goto no_mem;",
          "1106:     assert( pOut->szMalloc>0 && pOut->zMalloc==pOut->z );",
          "1107:     assert( VdbeMemDynamic(pOut)==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:     if( rc ) goto too_big;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1114:     pOp->p4.z = pOut->z;",
          "1115:     pOp->p1 = pOut->n;",
          "1116:   }",
          "1118: #endif",
          "1119:   if( pOp->p1>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1120:     goto too_big;",
          "",
          "[Removed Lines]",
          "1117:   testcase( rc==SQLITE_TOOBIG );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a509d56bc530940cbaaeb8dca89099d55808fcd",
      "candidate_info": {
        "commit_hash": "6a509d56bc530940cbaaeb8dca89099d55808fcd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a509d56bc530940cbaaeb8dca89099d55808fcd",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Catch another case of a corrupted structure record in fts5.\n\nFossilOrigin-Name: fb17fea4b9779fbd3adb6ff9500da83a6ca4fa7cba379aa70074e4328814a7f2",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "886:         pLvl->aSeg = (Fts5StructureSegment*)sqlite3Fts5MallocZero(&rc,",
          "887:             nTotal * sizeof(Fts5StructureSegment)",
          "888:         );",
          "889:       }",
          "891:       if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:         nSegment -= nTotal;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901:         }",
          "902:       }",
          "903:     }",
          "904:     if( rc!=SQLITE_OK ){",
          "905:       fts5StructureRelease(pRet);",
          "906:       pRet = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905:     if( nSegment!=0 && rc==SQLITE_OK ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:   INSERT INTO t1(t1, rank) VALUES('merge', 500);",
          "690: } {1 {vtable constructor failed: t1}}",
          "692: sqlite3_fts5_may_be_corrupt 0",
          "693: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692: #-------------------------------------------------------------------------",
          "693: #",
          "694: reset_db",
          "695: do_test 13.0 {",
          "696:   sqlite3 db {}",
          "697:   db deserialize [decode_hexdb {",
          "698: | size 28672 pagesize 4096 filename c13.db",
          "699: | page 1 offset 0",
          "700: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "701: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "702: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 04   ................",
          "703: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "704: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "705: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "706: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "707: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "708: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "709: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "710: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "711: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "712: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "713: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "714: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "715: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "716: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "717: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "718: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "719: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "720: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "721: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "722: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "723: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "724: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "725: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "726: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "727: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 4f 69 64   ATE TABLE 't1Oid",
          "728: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "729: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "730: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "731: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "732: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "733: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "734: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "735: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "736: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "737: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "738: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "739: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "740: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "741: | page 2 offset 4096",
          "742: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "743: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "744: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "745: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "746: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "747: |   4080: 0a 03 00 24 00 eb 00 00 00 01 01 01 00 01 01 01   ...$............",
          "748: | page 3 offset 8192",
          "749: |      0: 01 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00   ................",
          "750: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "751: | page 4 offset 12288",
          "752: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "753: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "754: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "755: | page 5 offset 16384",
          "756: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f2 0f ee 00 00   ................",
          "757: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "758: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "759: | page 6 offset 20480",
          "760: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "761: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "762: | page 7 offset 24576",
          "763: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "764: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "765: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "766: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "767: | end c13.db",
          "768: SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "769: }]} {}",
          "771: do_catchsql_test 14.1 {",
          "772:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "773: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1daaba9fb46706af8ed0669a661c304df999a69cf639d29d93208f422c515d8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
      "candidate_info": {
        "commit_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bce667015ebf61438a009ef19db0d06842ed07",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use 64-bit APIs in the fileio.c extension.\n\nFossilOrigin-Name: b49d56a0faf012978c50fb8662125ea21bdf5054fddf5975644cbc941c153e70",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     fclose(in);",
          "153:     return;",
          "154:   }",
          "156:   if( pBuf==0 ){",
          "157:     sqlite3_result_error_nomem(ctx);",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "161:   if( 1==fread(pBuf, nIn, 1, in) ){",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "165:     sqlite3_free(pBuf);",
          "",
          "[Removed Lines]",
          "155:   pBuf = sqlite3_malloc( nIn );",
          "162:     sqlite3_result_blob(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "[Added Lines]",
          "155:   pBuf = sqlite3_malloc64( nIn );",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d7b1d1d41ff69d5465fcb861420816ecb066c25a9015eefdab5fae15a2e1c9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "328c84f1e9933701bf6dff61dc9024dafff979f7",
      "candidate_info": {
        "commit_hash": "328c84f1e9933701bf6dff61dc9024dafff979f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/328c84f1e9933701bf6dff61dc9024dafff979f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts3varint.test"
        ],
        "message": "Fix the fts3varint.test script so that it works even on versions of TCL for which Tcl_GetWideIntFromObj() does not work.\n\nFossilOrigin-Name: 53f787ad298756027f630bfefade98b46f01539eb152f7e359b280335c77379e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts3varint.test||test/fts3varint.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 858f62274eb727109d0452ad2d80c0e0acab0f569494b1218c404501e103ed39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3varint.test||test/fts3varint.test": [
          "File: test/fts3varint.test -> test/fts3varint.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     2305843009213693951 2305843009213693952 2305843009213693953 }",
          "111: do_fts3_varint_test 2.62 {",
          "112:     4611686018427387903 4611686018427387904 4611686018427387905 }",
          "118: finish_test",
          "",
          "[Removed Lines]",
          "113: do_fts3_varint_test 2.63 {",
          "114:     9223372036854775807 9223372036854775808 9223372036854775809 }",
          "116: do_fts3_varint_test 3.0 { 18446744073709551615 -18446744073709551615 }",
          "",
          "[Added Lines]",
          "114: if {![catch {fts3_test_varint 18446744073709551615}]} {",
          "115:   do_fts3_varint_test 2.63 {",
          "116:       9223372036854775807 9223372036854775808 9223372036854775809 }",
          "118:   do_fts3_varint_test 3.0 { 18446744073709551615 -18446744073709551615 }",
          "119: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}