{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
      "candidate_info": {
        "commit_hash": "8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c9bcb2328b6c2fdd41520911bf67e0cb199f995",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/orderbyA.test",
          "test/tkt-b75a9ca6b0.test"
        ],
        "message": "Allow SQLite to omit redundant ORDER BY sorts in the case where a SELECT statement has GROUP BY and ORDER BY clauses that use the same expressions, even when the ORDER BY expressions are marked \"DESC\".\n\nFossilOrigin-Name: 20f7951bb238ddc0b8932a55145df426b6fdf7b8631e069345902c853c90f191",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/orderbyA.test||test/orderbyA.test",
          "test/tkt-b75a9ca6b0.test||test/tkt-b75a9ca6b0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c17078af6046ba3cb0d7819c915a800c851d7368e13d149140db2a124df32bab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6223:       }",
          "6224:       assert( 66==sqlite3LogEst(100) );",
          "6225:       if( p->nSelectRow>66 ) p->nSelectRow = 66;",
          "6226:     }else{",
          "6227:       assert( 0==sqlite3LogEst(1) );",
          "6228:       p->nSelectRow = 0;",
          "6229:     }",
          "6244:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "6239:     if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6240:       orderByGrp = 1;",
          "6241:     }",
          "",
          "[Added Lines]",
          "6235:       if( sSort.pOrderBy && pGroupBy->nExpr==sSort.pOrderBy->nExpr ){",
          "6236:         int i;",
          "6242:         for(i=0; i<pGroupBy->nExpr; i++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[i].sortFlags = sortFlags;",
          "6245:         }",
          "6246:         if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6247:           orderByGrp = 1;",
          "6248:         }",
          "6249:       }",
          "",
          "---------------"
        ],
        "test/orderbyA.test||test/orderbyA.test": [
          "File: test/orderbyA.test -> test/orderbyA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-09-21",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "13: # Specifically, it tests cases where the expressions in a GROUP BY",
          "14: # clause are the same as those in the ORDER BY clause.",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set ::testprefix orderbyA",
          "21: proc do_sortcount_test {tn sql cnt res} {",
          "22:   set eqp [execsql \"EXPLAIN QUERY PLAN $sql\"]",
          "23:   set rcnt [regexp -all {USE TEMP} $eqp]",
          "24:   uplevel [list do_test         $tn.1 [list set {} $rcnt] $cnt]",
          "25:   uplevel [list do_execsql_test $tn.2 $sql $res]",
          "26: }",
          "28: do_execsql_test 1.0 {",
          "29:   CREATE TABLE t1(a, b, c);",
          "30:   INSERT INTO t1 VALUES('one',   1, 11);",
          "31:   INSERT INTO t1 VALUES('three', 7, 11);",
          "32:   INSERT INTO t1 VALUES('one',   2, 11);",
          "33:   INSERT INTO t1 VALUES('one',   3, 11);",
          "34:   INSERT INTO t1 VALUES('two',   4, 11);",
          "35:   INSERT INTO t1 VALUES('two',   6, 11);",
          "36:   INSERT INTO t1 VALUES('three', 8, 11);",
          "37:   INSERT INTO t1 VALUES('two',   5, 11);",
          "38:   INSERT INTO t1 VALUES('three', 9, 11);",
          "39: }",
          "41: foreach {tn idx} {",
          "42:   1 {}",
          "43:   2 {CREATE INDEX i1 ON t1(a)}",
          "44:   3 {CREATE INDEX i1 ON t1(a DESC)}",
          "45: } {",
          "46:   execsql { DROP INDEX IF EXISTS i1 }",
          "47:   execsql $idx",
          "49:   # $match is the number of temp-table sorts we expect if the GROUP BY",
          "50:   # can use the same sort order as the ORDER BY. $nomatch is the number",
          "51:   # of expected sorts if the GROUP BY and ORDER BY are not compatible.",
          "52:   set match   1",
          "53:   set nomatch 2",
          "54:   if {$tn>=2} {",
          "55:     set match   0",
          "56:     set nomatch 1",
          "57:   }",
          "59:   do_sortcount_test 1.$tn.1.1 {",
          "60:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a",
          "61:   } $match {one 6 three 24 two 15}",
          "62:   do_sortcount_test 1.$tn.1.2 {",
          "63:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a DESC",
          "64:   } $match {two 15 three 24 one 6}",
          "66:   do_sortcount_test 1.$tn.2.1 {",
          "67:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a||''",
          "68:   } $nomatch {one 6 three 24 two 15}",
          "69:   do_sortcount_test 1.$tn.2.2 {",
          "70:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a||'' DESC",
          "71:   } $nomatch {two 15 three 24 one 6}",
          "73:   do_sortcount_test 1.$tn.3.1 {",
          "74:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a NULLS LAST",
          "75:   } $nomatch {one 6 three 24 two 15}",
          "76:   do_sortcount_test 1.$tn.3.2 {",
          "77:     SELECT a, sum(b) FROM t1 GROUP BY a ORDER BY a DESC NULLS FIRST",
          "78:   } $nomatch {two 15 three 24 one 6}",
          "79: }",
          "81: #-------------------------------------------------------------------------",
          "82: do_execsql_test 2.0 {",
          "83:   CREATE TABLE t2(a, b, c);",
          "84:   INSERT INTO t2 VALUES(1, 'one', 1);",
          "85:   INSERT INTO t2 VALUES(1, 'two', 2);",
          "86:   INSERT INTO t2 VALUES(1, 'one', 3);",
          "87:   INSERT INTO t2 VALUES(1, 'two', 4);",
          "88:   INSERT INTO t2 VALUES(1, 'one', 5);",
          "89:   INSERT INTO t2 VALUES(1, 'two', 6);",
          "91:   INSERT INTO t2 VALUES(2, 'one', 7);",
          "92:   INSERT INTO t2 VALUES(2, 'two', 8);",
          "93:   INSERT INTO t2 VALUES(2, 'one', 9);",
          "94:   INSERT INTO t2 VALUES(2, 'two', 10);",
          "95:   INSERT INTO t2 VALUES(2, 'one', 11);",
          "96:   INSERT INTO t2 VALUES(2, 'two', 12);",
          "98:   INSERT INTO t2 VALUES(NULL, 'one', 13);",
          "99:   INSERT INTO t2 VALUES(NULL, 'two', 14);",
          "100:   INSERT INTO t2 VALUES(NULL, 'one', 15);",
          "101:   INSERT INTO t2 VALUES(NULL, 'two', 16);",
          "102:   INSERT INTO t2 VALUES(NULL, 'one', 17);",
          "103:   INSERT INTO t2 VALUES(NULL, 'two', 18);",
          "104: }",
          "106: foreach {tn idx} {",
          "107:   1 {}",
          "109:   2 { CREATE INDEX i2 ON t2(a, b)           }",
          "110:   3 { CREATE INDEX i2 ON t2(a DESC, b DESC) }",
          "112:   4 { CREATE INDEX i2 ON t2(a, b DESC)      }",
          "113:   5 { CREATE INDEX i2 ON t2(a DESC, b)      }",
          "114: } {",
          "115:   execsql { DROP INDEX IF EXISTS i2 }",
          "116:   execsql $idx",
          "119:   set nSort [expr ($tn==2 || $tn==3) ? 0 : 1]",
          "120:   do_sortcount_test 2.$tn.1.1 {",
          "121:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b;",
          "122:   } $nSort {{} one 45  {} two 48  1 one 9  1 two 12  2 one 27  2 two 30}",
          "123:   do_sortcount_test 2.$tn.1.2 {",
          "124:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b DESC;",
          "125:   } $nSort {2 two 30  2 one 27  1 two 12  1 one 9  {} two 48  {} one 45}",
          "127:   set nSort [expr ($tn==4 || $tn==5) ? 0 : 1]",
          "128:   do_sortcount_test 2.$tn.2.1 {",
          "129:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b DESC;",
          "130:   } $nSort { {} two 48  {} one 45  1 two 12  1 one 9  2 two 30 2 one 27 }",
          "131:   do_sortcount_test 2.$tn.2.2 {",
          "132:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b;",
          "133:   } $nSort { 2 one 27  2 two 30  1 one 9  1 two 12  {} one 45 {} two 48 }",
          "135:   # ORDER BY can never piggyback on the GROUP BY sort if it uses",
          "136:   # non-standard NULLS behaviour.",
          "137:   set nSort [expr $tn==1 ? 2 : 1]",
          "138:   do_sortcount_test 2.$tn.3.1 {",
          "139:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a, b DESC NULLS FIRST;",
          "140:   } $nSort { {} two 48  {} one 45  1 two 12  1 one 9  2 two 30 2 one 27 }",
          "141:   do_sortcount_test 2.$tn.3.2 {",
          "142:     SELECT a, b, sum(c) FROM t2 GROUP BY a, b ORDER BY a DESC, b NULLS LAST;",
          "143:   } $nSort { 2 one 27  2 two 30  1 one 9  1 two 12  {} one 45 {} two 48 }",
          "144: }",
          "147: finish_test",
          "",
          "---------------"
        ],
        "test/tkt-b75a9ca6b0.test||test/tkt-b75a9ca6b0.test": [
          "File: test/tkt-b75a9ca6b0.test -> test/tkt-b75a9ca6b0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   {1 3  2 2  3 1} {$idxscan*$sort}",
          "62:   8 \"SELECT * FROM t1 GROUP BY x, y ORDER BY x DESC, y DESC\"",
          "65:   9 \"SELECT * FROM t1 GROUP BY x, y ORDER BY x ASC, y ASC\"",
          "66:   {1 3  2 2  3 1} {$idxscan}",
          "",
          "[Removed Lines]",
          "63:   {3 1  2 2  1 3} {$idxscan*$sort}",
          "",
          "[Added Lines]",
          "63:   {3 1  2 2  1 3} {$idxscan}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e30c7f369856fdbf4b4040dfaa63b9eab64302f",
      "candidate_info": {
        "commit_hash": "1e30c7f369856fdbf4b4040dfaa63b9eab64302f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e30c7f369856fdbf4b4040dfaa63b9eab64302f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/e_vacuum.test"
        ],
        "message": "Change VACUUM so that it preserves ROWID values.\n\nFossilOrigin-Name: 49e5d11d463de078c2b8a963f5ed436210937e6dfddf06942132db9ec685bfd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97744701c3bd414e6c9d7182639d8c2ce7cf124c4fce625071ae65658ac61713",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2347:       sqlite3RowidConstraint(pParse, onError, pDest);",
          "2348:       sqlite3VdbeJumpHere(v, addr2);",
          "2349:       autoIncStep(pParse, regAutoinc, regRowid);",
          "2351:       addr1 = sqlite3VdbeAddOp2(v, OP_NewRowid, iDest, regRowid);",
          "2352:     }else{",
          "2353:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "",
          "[Removed Lines]",
          "2350:     }else if( pDest->pIndex==0 ){",
          "",
          "[Added Lines]",
          "2350:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_Vacuum) ){",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: #   a database is VACUUMed. Tests e_vacuum-3.1.3 - 3.1.4 show that adding",
          "220: #   an INTEGER PRIMARY KEY column to a table stops this from happening.",
          "221: #",
          "222: do_execsql_test e_vacuum-3.1.1 {",
          "223:   CREATE TABLE t4(x);",
          "224:   INSERT INTO t4(x) VALUES('x');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: #   Update 2019-01-07:  Rowids are now preserved by VACUUM.",
          "223: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: do_execsql_test e_vacuum-3.1.2 {",
          "231:   VACUUM;",
          "232:   SELECT rowid, x FROM t4;",
          "235: do_execsql_test e_vacuum-3.1.3 {",
          "236:   CREATE TABLE t5(x, y INTEGER PRIMARY KEY);",
          "",
          "[Removed Lines]",
          "233: } {1 x 2 z}",
          "",
          "[Added Lines]",
          "235: } {1 x 3 z}",
          "236: # Was: {1 x 2 z}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "010bdb4c7968fa7e50a46633bf359d60b144a33e",
      "candidate_info": {
        "commit_hash": "010bdb4c7968fa7e50a46633bf359d60b144a33e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/010bdb4c7968fa7e50a46633bf359d60b144a33e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Further improvements to parser speed by enlarging lookup tables to eliminate the need to do range checking on the index prior to lookup.\n\nFossilOrigin-Name: 47d3e091ae49eb7947af5abef9b5b96b16b86d349e51fe0677795649be6db473",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bafd872398e58766e996963372c7acc03a1e20a6d39a3867ca45d3ea0ed2ac1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4507:   if( lemp->has_fallback ){",
          "4508:     int mx = lemp->nterminal - 1;",
          "4510:     lemp->tablesize += (mx+1)*szCodeType;",
          "4511:     for(i=0; i<=mx; i++){",
          "4512:       struct symbol *p = lemp->symbols[i];",
          "",
          "[Removed Lines]",
          "4509:     while( mx>0 && lemp->symbols[mx]->fallback==0 ){ mx--; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     if( yy_lookahead[i]!=iLookAhead ){",
          "531: #ifdef YYFALLBACK",
          "535: #ifndef NDEBUG",
          "536:         if( yyTraceFILE ){",
          "537:           fprintf(yyTraceFILE, \"%sFALLBACK %s => %s\\n\",",
          "",
          "[Removed Lines]",
          "533:       if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])",
          "534:              && (iFallback = yyFallback[iLookAhead])!=0 ){",
          "",
          "[Added Lines]",
          "533:       assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );",
          "534:       iFallback = yyFallback[iLookAhead];",
          "535:       if( iFallback!=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "546: #ifdef YYWILDCARD",
          "547:       {",
          "548:         int j = i - iLookAhead + YYWILDCARD;",
          "559: #ifndef NDEBUG",
          "560:           if( yyTraceFILE ){",
          "561:             fprintf(yyTraceFILE, \"%sWILDCARD %s => %s\\n\",",
          "",
          "[Removed Lines]",
          "549:         if(",
          "550: #if YY_SHIFT_MIN+YYWILDCARD<0",
          "551:           j>=0 &&",
          "552: #endif",
          "553: #if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT",
          "554:           j<YY_ACTTAB_COUNT &&",
          "555: #endif",
          "556:           j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) &&",
          "557:           yy_lookahead[j]==YYWILDCARD && iLookAhead>0",
          "558:         ){",
          "",
          "[Added Lines]",
          "550:         assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );",
          "551:         if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac6627327c01a1f9655e7ac33cb3adab45abc761",
      "candidate_info": {
        "commit_hash": "ac6627327c01a1f9655e7ac33cb3adab45abc761",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac6627327c01a1f9655e7ac33cb3adab45abc761",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowA.test"
        ],
        "message": "New test cases for window functions with RANGE BETWEEN and DESC NULLS FIRST.\n\nFossilOrigin-Name: f7002f86c780e279c9f8a6268f317586519c059c9de2115ff6f1cad272570c29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowA.test||test/windowA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39b4cad4a51bb5116d62ffb16ac36d96a9280321b049eb2d008605392f52a459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowA.test||test/windowA.test": [
          "File: test/windowA.test -> test/windowA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowA",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b CHAR(1), d FLOAT);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 'A', 5.4),",
          "27:    (2, 'B', 5.55),",
          "28:    (3, 'C', 8.0),",
          "29:    (4, 'D', 10.25),",
          "30:    (5, 'E', 10.26),",
          "31:    (6, 'N', NULL),",
          "32:    (7, 'N', NULL);",
          "33: } {}",
          "35: do_execsql_test 1.1 {",
          "36:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "37:   WINDOW w1 AS",
          "38:      (ORDER BY d DESC NULLS LAST",
          "39:       RANGE BETWEEN 2.50 PRECEDING AND 2.25 FOLLOWING)",
          "40:   ORDER BY +d DESC NULLS LAST, +a;",
          "41: } [list \\",
          "42:   5 E 10.26 ED   \\",
          "43:   4 D 10.25 EDC  \\",
          "44:   3 C   8.0 EDC  \\",
          "45:   2 B  5.55 CBA  \\",
          "46:   1 A   5.4 BA   \\",
          "47:   6 N  NULL NN   \\",
          "48:   7 N  NULL NN   \\",
          "49: ]",
          "51: do_execsql_test 1.2 {",
          "52:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "53:   WINDOW w1 AS",
          "54:      (ORDER BY d DESC NULLS FIRST",
          "55:       RANGE BETWEEN 2.50 PRECEDING AND 2.25 FOLLOWING)",
          "56:   ORDER BY +d DESC NULLS FIRST, +a;",
          "57: } [list \\",
          "58:   6 N  NULL NN   \\",
          "59:   7 N  NULL NN   \\",
          "60:   5 E 10.26 ED   \\",
          "61:   4 D 10.25 EDC  \\",
          "62:   3 C   8.0 EDC  \\",
          "63:   2 B  5.55 CBA  \\",
          "64:   1 A   5.4 BA   \\",
          "65: ]",
          "67: do_execsql_test 1.3 {",
          "68:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "69:   WINDOW w1 AS",
          "70:      (ORDER BY d DESC NULLS LAST",
          "71:       RANGE BETWEEN 2.50 PRECEDING AND UNBOUNDED FOLLOWING)",
          "72:   ORDER BY +d DESC NULLS LAST, +a;",
          "73: } [list \\",
          "74:   5 E 10.26 EDCBANN  \\",
          "75:   4 D 10.25 EDCBANN  \\",
          "76:   3 C   8.0 EDCBANN  \\",
          "77:   2 B  5.55 CBANN    \\",
          "78:   1 A   5.4 BANN     \\",
          "79:   6 N  NULL NN       \\",
          "80:   7 N  NULL NN       \\",
          "81: ]",
          "83: do_execsql_test 1.4 {",
          "84:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "85:   WINDOW w1 AS",
          "86:      (ORDER BY d DESC NULLS FIRST",
          "87:       RANGE BETWEEN 2.50 PRECEDING AND UNBOUNDED FOLLOWING)",
          "88:   ORDER BY +d DESC NULLS FIRST, +a;",
          "89: } [list \\",
          "90:   6 N  NULL NNEDCBA  \\",
          "91:   7 N  NULL NNEDCBA  \\",
          "92:   5 E 10.26 EDCBA    \\",
          "93:   4 D 10.25 EDCBA    \\",
          "94:   3 C   8.0 EDCBA    \\",
          "95:   2 B  5.55 CBA      \\",
          "96:   1 A   5.4 BA       \\",
          "97: ]",
          "99: do_execsql_test 1.5 {",
          "100:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "101:   WINDOW w1 AS",
          "102:      (ORDER BY d DESC NULLS LAST",
          "103:       RANGE BETWEEN 2.50 PRECEDING AND CURRENT ROW)",
          "104:   ORDER BY +d DESC NULLS LAST, +a;",
          "105: } [list \\",
          "106:   5 E 10.26 E    \\",
          "107:   4 D 10.25 ED   \\",
          "108:   3 C   8.0 EDC  \\",
          "109:   2 B  5.55 CB   \\",
          "110:   1 A   5.4 BA   \\",
          "111:   6 N  NULL NN   \\",
          "112:   7 N  NULL NN   \\",
          "113: ]",
          "115: do_execsql_test 1.6 {",
          "116:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "117:   WINDOW w1 AS",
          "118:      (ORDER BY d DESC NULLS FIRST",
          "119:       RANGE BETWEEN 2.50 PRECEDING AND CURRENT ROW)",
          "120:   ORDER BY +d DESC NULLS FIRST, +a;",
          "121: } [list \\",
          "122:   6 N  NULL NN   \\",
          "123:   7 N  NULL NN   \\",
          "124:   5 E 10.26 E    \\",
          "125:   4 D 10.25 ED   \\",
          "126:   3 C   8.0 EDC  \\",
          "127:   2 B  5.55 CB   \\",
          "128:   1 A   5.4 BA   \\",
          "129: ]",
          "131: do_execsql_test 2.1 {",
          "132:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "133:   WINDOW w1 AS",
          "134:      (ORDER BY d DESC NULLS LAST",
          "135:       RANGE BETWEEN UNBOUNDED PRECEDING AND 2.25 FOLLOWING)",
          "136:   ORDER BY +d DESC NULLS LAST, +a;",
          "137: } [list \\",
          "138:   5 E 10.26 ED       \\",
          "139:   4 D 10.25 EDC      \\",
          "140:   3 C   8.0 EDC      \\",
          "141:   2 B  5.55 EDCBA    \\",
          "142:   1 A   5.4 EDCBA    \\",
          "143:   6 N  NULL EDCBANN  \\",
          "144:   7 N  NULL EDCBANN  \\",
          "145: ]",
          "147: do_execsql_test 2.2 {",
          "148:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "149:   WINDOW w1 AS",
          "150:      (ORDER BY d DESC NULLS FIRST",
          "151:       RANGE BETWEEN UNBOUNDED PRECEDING AND 2.25 FOLLOWING)",
          "152:   ORDER BY +d DESC NULLS FIRST, +a;",
          "153: } [list \\",
          "154:   6 N  NULL NN         \\",
          "155:   7 N  NULL NN         \\",
          "156:   5 E 10.26 NNED       \\",
          "157:   4 D 10.25 NNEDC      \\",
          "158:   3 C   8.0 NNEDC      \\",
          "159:   2 B  5.55 NNEDCBA    \\",
          "160:   1 A   5.4 NNEDCBA    \\",
          "161: ]",
          "163: do_execsql_test 2.3 {",
          "164:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "165:   WINDOW w1 AS",
          "166:      (ORDER BY d DESC NULLS LAST",
          "167:       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)",
          "168:   ORDER BY +d DESC NULLS LAST, +a;",
          "169: } [list \\",
          "170:   5 E 10.26 EDCBANN  \\",
          "171:   4 D 10.25 EDCBANN  \\",
          "172:   3 C   8.0 EDCBANN  \\",
          "173:   2 B  5.55 EDCBANN  \\",
          "174:   1 A   5.4 EDCBANN  \\",
          "175:   6 N  NULL EDCBANN  \\",
          "176:   7 N  NULL EDCBANN  \\",
          "177: ]",
          "179: do_execsql_test 2.4 {",
          "180:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "181:   WINDOW w1 AS",
          "182:      (ORDER BY d DESC NULLS FIRST",
          "183:       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)",
          "184:   ORDER BY +d DESC NULLS FIRST, +a;",
          "185: } [list \\",
          "186:   6 N  NULL NNEDCBA  \\",
          "187:   7 N  NULL NNEDCBA  \\",
          "188:   5 E 10.26 NNEDCBA  \\",
          "189:   4 D 10.25 NNEDCBA  \\",
          "190:   3 C   8.0 NNEDCBA  \\",
          "191:   2 B  5.55 NNEDCBA  \\",
          "192:   1 A   5.4 NNEDCBA  \\",
          "193: ]",
          "195: do_execsql_test 2.5 {",
          "196:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "197:   WINDOW w1 AS",
          "198:      (ORDER BY d DESC NULLS LAST",
          "199:       RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "200:   ORDER BY +d DESC NULLS LAST, +a;",
          "201: } [list \\",
          "202:   5 E 10.26 E        \\",
          "203:   4 D 10.25 ED       \\",
          "204:   3 C   8.0 EDC      \\",
          "205:   2 B  5.55 EDCB     \\",
          "206:   1 A   5.4 EDCBA    \\",
          "207:   6 N  NULL EDCBANN  \\",
          "208:   7 N  NULL EDCBANN  \\",
          "209: ]",
          "211: do_execsql_test 2.6 {",
          "212:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "213:   WINDOW w1 AS",
          "214:      (ORDER BY d DESC NULLS FIRST",
          "215:       RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "216:   ORDER BY +d DESC NULLS FIRST, +a;",
          "217: } [list \\",
          "218:   6 N  NULL NN       \\",
          "219:   7 N  NULL NN       \\",
          "220:   5 E 10.26 NNE      \\",
          "221:   4 D 10.25 NNED     \\",
          "222:   3 C   8.0 NNEDC    \\",
          "223:   2 B  5.55 NNEDCB   \\",
          "224:   1 A   5.4 NNEDCBA  \\",
          "225: ]",
          "228: do_execsql_test 3.1 {",
          "229:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "230:   WINDOW w1 AS",
          "231:      (ORDER BY d DESC NULLS LAST",
          "232:       RANGE BETWEEN CURRENT ROW AND 2.25 FOLLOWING)",
          "233:   ORDER BY +d DESC NULLS LAST, +a;",
          "234: } [list \\",
          "235:   5 E 10.26 ED       \\",
          "236:   4 D 10.25 DC       \\",
          "237:   3 C   8.0 C        \\",
          "238:   2 B  5.55 BA       \\",
          "239:   1 A   5.4 A        \\",
          "240:   6 N  NULL NN       \\",
          "241:   7 N  NULL NN       \\",
          "242: ]",
          "244: do_execsql_test 3.2 {",
          "245:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "246:   WINDOW w1 AS",
          "247:      (ORDER BY d DESC NULLS FIRST",
          "248:       RANGE BETWEEN CURRENT ROW AND 2.25 FOLLOWING)",
          "249:   ORDER BY +d DESC NULLS FIRST, +a;",
          "250: } [list \\",
          "251:   6 N  NULL NN       \\",
          "252:   7 N  NULL NN       \\",
          "253:   5 E 10.26 ED       \\",
          "254:   4 D 10.25 DC       \\",
          "255:   3 C   8.0 C        \\",
          "256:   2 B  5.55 BA       \\",
          "257:   1 A   5.4 A        \\",
          "258: ]",
          "260: do_execsql_test 3.3 {",
          "261:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "262:   WINDOW w1 AS",
          "263:      (ORDER BY d DESC NULLS LAST",
          "264:       RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "265:   ORDER BY +d DESC NULLS LAST, +a;",
          "266: } [list \\",
          "267:   5 E 10.26 EDCBANN  \\",
          "268:   4 D 10.25 DCBANN   \\",
          "269:   3 C   8.0 CBANN    \\",
          "270:   2 B  5.55 BANN     \\",
          "271:   1 A   5.4 ANN      \\",
          "272:   6 N  NULL NN       \\",
          "273:   7 N  NULL NN       \\",
          "274: ]",
          "276: do_execsql_test 3.4 {",
          "277:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "278:   WINDOW w1 AS",
          "279:      (ORDER BY d DESC NULLS FIRST",
          "280:       RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "281:   ORDER BY +d DESC NULLS FIRST, +a;",
          "282: } [list \\",
          "283:   6 N  NULL NNEDCBA  \\",
          "284:   7 N  NULL NNEDCBA  \\",
          "285:   5 E 10.26 EDCBA    \\",
          "286:   4 D 10.25 DCBA     \\",
          "287:   3 C   8.0 CBA      \\",
          "288:   2 B  5.55 BA       \\",
          "289:   1 A   5.4 A        \\",
          "290: ]",
          "292: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a47e709e89db6011aa13727cb620bdc566bd33a0",
      "candidate_info": {
        "commit_hash": "a47e709e89db6011aa13727cb620bdc566bd33a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a47e709e89db6011aa13727cb620bdc566bd33a0",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add the ability to process dbsqlfuzz cases in fuzzcheck and add an initial set of interesting dbsqlfuzz cases.\n\nFossilOrigin-Name: fb9074ff450a67feaa62ca61d19154de26d5c8a8d147409ee6d1fbd667b2914f",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:   $(TOP)/test/fuzzdata4.db \\",
          "590:   $(TOP)/test/fuzzdata5.db \\",
          "591:   $(TOP)/test/fuzzdata6.db \\",
          "594: # Standard options to testfixture",
          "595: #",
          "",
          "[Removed Lines]",
          "592:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "592:   $(TOP)/test/fuzzdata7.db \\",
          "593:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "613: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "614: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "615: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "616: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "617: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "618: #FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS5",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:   $(TOP)\\test\\fuzzdata4.db \\",
          "1627:   $(TOP)\\test\\fuzzdata5.db \\",
          "1628:   $(TOP)\\test\\fuzzdata6.db \\",
          "1630: # <</mark>>",
          "1632: # Additional compiler options for the shell.  These are only effective",
          "",
          "[Removed Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db",
          "",
          "[Added Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db \\",
          "1630:   $(TOP)\\test\\fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644: #",
          "1645: MPTESTER_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5",
          "1646: FUZZERSHELL_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1",
          "1648: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1649: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "1650: DBFUZZ_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "1647: FUZZCHECK_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "",
          "[Added Lines]",
          "1648: FUZZCHECK_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "1649: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DESERIALIZE",
          "1650: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4",
          "1651: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1652: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1653: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731:  $(LTLINK) $(NO_WARN) $(DBFUZZ_COMPILE_OPTS) $(TOP)\\test\\dbfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1733: fuzzcheck.exe: $(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1736: ossshell.exe: $(OSSSHELL_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1739: sessionfuzz.exe: zlib $(TOP)\\test\\sessionfuzz.c $(SQLITE3C) $(SQLITE3H)",
          "1740:  $(LTLINK) $(NO_WARN) -I$(ZLIBINCDIR) $(TOP)\\test\\sessionfuzz.c /link $(LDFLAGS) $(LTLINKOPTS) /LIBPATH:$(ZLIBLIBDIR) $(ZLIBLIB)",
          "",
          "[Removed Lines]",
          "1734:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1737:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Added Lines]",
          "1741:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1744:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   $(TOP)/test/fuzzdata4.db \\",
          "511:   $(TOP)/test/fuzzdata5.db \\",
          "512:   $(TOP)/test/fuzzdata6.db \\",
          "515: # Standard options to testfixture",
          "516: #",
          "",
          "[Removed Lines]",
          "513:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "513:   $(TOP)/test/fuzzdata7.db \\",
          "514:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "532: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "533: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "534: DBFUZZ_OPT =",
          "535: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "536: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "539: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0d5689371577b2861d4a9464443d055f3256f3f51d89e0388233a4cbe2601ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <string.h>",
          "70: #include <stdarg.h>",
          "71: #include <ctype.h>",
          "72: #include \"sqlite3.h\"",
          "73: #define ISSPACE(X) isspace((unsigned char)(X))",
          "74: #define ISDIGIT(X) isdigit((unsigned char)(X))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   return t;",
          "420: }",
          "424: static int inmemClose(sqlite3_file *pFile){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: typedef struct FuzzCtx {",
          "439: } FuzzCtx;",
          "442: static int eVerbosity = 0;",
          "445: static int bVdbeDebug = 0;",
          "451: static unsigned int mxProgressCb = 2000;",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "460: static sqlite3_int64 maxDbSize = 104857600;",
          "467: static unsigned int hexToInt(unsigned int h){",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "472: #endif",
          "473:   return h & 0xf;",
          "474: }",
          "483: static int isOffset(",
          "488: ){",
          "489:   int i;",
          "490:   unsigned int k = 0;",
          "491:   unsigned char c;",
          "492:   for(i=1; i<nIn && (c = zIn[i])!=']'; i++){",
          "493:     if( !isxdigit(c) ) return 0;",
          "494:     k = k*16 + hexToInt(c);",
          "495:   }",
          "496:   if( i==nIn ) return 0;",
          "499:   return 1;",
          "500: }",
          "513: static int decodeDatabase(",
          "518: ){",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "529:   a = sqlite3_malloc( nAlloc );",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "534:   memset(a, 0, nAlloc);",
          "535:   for(i=k=0; i<n; i++){",
          "536:     char c = zIn[i];",
          "537:     if( isxdigit(c) ){",
          "538:       k++;",
          "539:       if( k & 1 ){",
          "540:         b = hexToInt(c)*16;",
          "541:       }else{",
          "542:         b += hexToInt(c);",
          "543:         j = k/2 - 1;",
          "544:         if( j>=nAlloc ){",
          "545:           sqlite3_uint64 newSize;",
          "546:           if( nAlloc==MX_FILE_SZ || j>=MX_FILE_SZ ){",
          "547:             if( eVerbosity ){",
          "548:               fprintf(stderr, \"Input database too big: max %d bytes\\n\",",
          "549:                       MX_FILE_SZ);",
          "550:             }",
          "551:             sqlite3_free(a);",
          "552:             return -1;",
          "553:           }",
          "554:           newSize = nAlloc*2;",
          "555:           if( newSize<=j ){",
          "556:             newSize = (j+4096)&~4095;",
          "557:           }",
          "558:           if( newSize>MX_FILE_SZ ){",
          "559:             if( j>=MX_FILE_SZ ){",
          "560:               sqlite3_free(a);",
          "561:               return -1;",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "565:           a = sqlite3_realloc( a, newSize );",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "575:           mx = (j + 4095)&~4095;",
          "576:           if( mx>MX_FILE_SZ ) mx = MX_FILE_SZ;",
          "577:         }",
          "578:         assert( j<nAlloc );",
          "579:         a[j] = b;",
          "580:       }",
          "581:     }else if( zIn[i]=='[' && i<n-3 && isOffset(zIn+i, nIn-i, &k, &i) ){",
          "582:       continue;",
          "583:    }else if( zIn[i]=='\\n' && i<n-4 && memcmp(zIn+i,\"\\n--\\n\",4)==0 ){",
          "584:       i += 4;",
          "585:       break;",
          "586:     }",
          "587:   }",
          "590:   return i;",
          "591: }",
          "599: static int progress_handler(void *pClientData) {",
          "600:   FuzzCtx *p = (FuzzCtx*)pClientData;",
          "601:   sqlite3_int64 iNow = timeOfDay();",
          "602:   int rc = iNow>=p->iCutoffTime;",
          "603:   sqlite3_int64 iDiff = iNow - p->iLastCb;",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "607:   if( rc && !p->timeoutHit && eVerbosity ){",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "611:   }",
          "612:   return rc;",
          "613: }",
          "622: static int block_troublesome_sql(",
          "623:   void *Notused,",
          "624:   int eCode,",
          "625:   const char *zArg1,",
          "626:   const char *zArg2,",
          "627:   const char *zArg3,",
          "628:   const char *zArg4",
          "629: ){",
          "630:   (void)Notused;",
          "631:   (void)zArg2;",
          "632:   (void)zArg3;",
          "633:   (void)zArg4;",
          "634:   if( eCode==SQLITE_PRAGMA ){",
          "635:     if( sqlite3_strnicmp(\"vdbe_\", zArg1, 5)==0",
          "636:      || sqlite3_stricmp(\"parser_trace\", zArg1)==0",
          "637:      || sqlite3_stricmp(\"temp_store_directory\", zArg1)==0",
          "638:     ){",
          "639:       return SQLITE_DENY;",
          "640:     }",
          "641:   }else if( (eCode==SQLITE_ATTACH || eCode==SQLITE_DETACH)",
          "642:             && zArg1 && zArg1[0] ){",
          "643:     return SQLITE_DENY;",
          "644:   }",
          "645:   return SQLITE_OK;",
          "646: }",
          "651: static int runDbSql(sqlite3 *db, const char *zSql){",
          "652:   int rc;",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "656:   if( eVerbosity>=3 ){",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "663:       if( eVerbosity>=4 ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "667:           switch( sqlite3_column_type(pStmt, j) ){",
          "668:             case SQLITE_NULL: {",
          "669:               printf(\"NULL\");",
          "670:               break;",
          "671:             }",
          "672:             case SQLITE_INTEGER:",
          "673:             case SQLITE_FLOAT: {",
          "674:               printf(\"%s\", sqlite3_column_text(pStmt, j));",
          "675:               break;",
          "676:             }",
          "677:             case SQLITE_BLOB: {",
          "678:               int n = sqlite3_column_bytes(pStmt, j);",
          "679:               int i;",
          "680:               const unsigned char *a;",
          "681:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "682:               printf(\"x'\");",
          "683:               for(i=0; i<n; i++){",
          "684:                 printf(\"%02x\", a[i]);",
          "685:               }",
          "686:               printf(\"'\");",
          "687:               break;",
          "688:             }",
          "689:             case SQLITE_TEXT: {",
          "690:               int n = sqlite3_column_bytes(pStmt, j);",
          "691:               int i;",
          "692:               const unsigned char *a;",
          "693:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "694:               printf(\"'\");",
          "695:               for(i=0; i<n; i++){",
          "696:                 if( a[i]=='\\'' ){",
          "697:                   printf(\"''\");",
          "698:                 }else{",
          "699:                   putchar(a[i]);",
          "700:                 }",
          "701:               }",
          "702:               printf(\"'\");",
          "703:               break;",
          "704:             }",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=3 ){",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "715:   }else if( eVerbosity>=3 ){",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "719:   return sqlite3_finalize(pStmt);",
          "720: }",
          "723: int runCombinedDbSqlInput(const uint8_t *aData, size_t nByte){",
          "734:   if( nByte<10 ) return 0;",
          "735:   if( sqlite3_initialize() ) return 0;",
          "736:   if( sqlite3_memory_used()!=0 ){",
          "737:     int nAlloc = 0;",
          "738:     int nNotUsed = 0;",
          "739:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "740:     fprintf(stderr,\"Memory leak in mutator: %lld bytes in %d allocations\\n\",",
          "741:             sqlite3_memory_used(), nAlloc);",
          "742:     exit(1);",
          "743:   }",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "748:   if( eVerbosity>=2 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "752:     fflush(stdout);",
          "753:   }",
          "754:   rc = sqlite3_open(0, &cx.db);",
          "755:   if( rc ) return 1;",
          "756:   if( bVdbeDebug ){",
          "757:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "758:   }",
          "765:   cx.iLastCb = timeOfDay();",
          "767:   cx.mxCb = mxProgressCb;",
          "768: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "769:   sqlite3_progress_handler(cx.db, 10, progress_handler, (void*)&cx);",
          "770: #endif",
          "774:   if( vdbeOpLimit>0 ){",
          "775:     sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, vdbeOpLimit);",
          "776:   }",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "783:   }",
          "784:   rc = sqlite3_deserialize(cx.db, \"main\", aDb, nDb, nDb,",
          "785:           SQLITE_DESERIALIZE_RESIZEABLE |",
          "786:           SQLITE_DESERIALIZE_FREEONCLOSE);",
          "787:   if( rc ){",
          "788:     fprintf(stderr, \"sqlite3_deserialize() failed with %d\\n\", rc);",
          "789:     goto testrun_finished;",
          "790:   }",
          "791:   if( maxDbSize>0 ){",
          "792:     sqlite3_int64 x = maxDbSize;",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "798:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "801:   sqlite3_randomness(0,0);",
          "803:   zSql = sqlite3_malloc( nSql + 1 );",
          "804:   if( zSql==0 ){",
          "805:     fprintf(stderr, \"Out of memory!\\n\");",
          "806:   }else{",
          "807:     memcpy(zSql, aData+iSql, nSql);",
          "808:     zSql[nSql] = 0;",
          "809:     for(i=j=0; zSql[i]; i++){",
          "810:       if( zSql[i]==';' ){",
          "811:         char cSaved = zSql[i+1];",
          "812:         zSql[i+1] = 0;",
          "813:         if( sqlite3_complete(zSql+j) ){",
          "814:           rc = runDbSql(cx.db, zSql+j);",
          "815:           j = i+1;",
          "816:         }",
          "817:         zSql[i+1] = cSaved;",
          "818:         if( rc==SQLITE_INTERRUPT || progress_handler(&cx) ){",
          "819:           goto testrun_finished;",
          "820:         }",
          "821:       }",
          "822:     }",
          "823:     if( j<i ){",
          "824:       runDbSql(cx.db, zSql+j);",
          "825:     }",
          "826:   }",
          "827: testrun_finished:",
          "828:   sqlite3_free(zSql);",
          "829:   rc = sqlite3_close(cx.db);",
          "830:   if( rc!=SQLITE_OK ){",
          "831:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "832:   }",
          "833:   if( eVerbosity ){",
          "834:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "835:        sqlite3_memory_highwater(1) / 1000000.0);",
          "836:   }",
          "837:   if( sqlite3_memory_used()!=0 ){",
          "838:     int nAlloc = 0;",
          "839:     int nNotUsed = 0;",
          "840:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "841:     fprintf(stderr,\"Memory leak: %lld bytes in %d allocations\\n\",",
          "842:             sqlite3_memory_used(), nAlloc);",
          "843:     exit(1);",
          "844:   }",
          "845:   return 0;",
          "846: }",
          "856: static int isDbSql(unsigned char *a, int n){",
          "857:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "858:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "859:   if( n>8 && memcmp(a,\"53514c69\",8)==0 ) return 1;",
          "860:   return 0;",
          "861: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "951:       if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "952:         quietFlag = 1;",
          "953:         verboseFlag = 0;",
          "954:       }else",
          "955:       if( strcmp(z,\"rebuild\")==0 ){",
          "956:         rebuildFlag = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1396:         eVerbosity = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "976:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "977:         quietFlag = 0;",
          "978:         verboseFlag++;",
          "979:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "980:       }else",
          "981:       {",
          "982:         fatalError(\"unknown option: %s\", argv[i]);",
          "983:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1422:         eVerbosity++;",
          "1425:       if( strcmp(z,\"version\")==0 ){",
          "1426:         int ii;",
          "1427:         const char *z;",
          "1428:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1429:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1430:           printf(\"%s\\n\", z);",
          "1431:         }",
          "1432:         return 0;",
          "1433:       }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1231:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1232:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1233:       for(pDb=g.pFirstDb; pDb; pDb=pDb->pNext){",
          "1234:         int openFlags;",
          "1235:         const char *zVfs = \"inmem\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1686:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1687:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1688:         if( verboseFlag ){",
          "1689:           printf(\"%s\\n\", g.zTestName);",
          "1690:           fflush(stdout);",
          "1691:         }else if( !quietFlag ){",
          "1692:           static int prevAmt = -1;",
          "1693:           int idx = pSql->seq;",
          "1694:           int amt = idx*10/(g.nSql);",
          "1695:           if( amt!=prevAmt ){",
          "1696:             printf(\" %d%%\", amt*10);",
          "1697:             fflush(stdout);",
          "1698:             prevAmt = amt;",
          "1699:           }",
          "1700:         }",
          "1701:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1702:         nTest++;",
          "1703:         g.zTestName[0] = 0;",
          "1704:         continue;",
          "1705:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}