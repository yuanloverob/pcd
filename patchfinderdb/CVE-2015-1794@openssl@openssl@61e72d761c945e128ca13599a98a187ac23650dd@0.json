{
  "cve_id": "CVE-2015-1794",
  "cve_desc": "The ssl3_get_key_exchange function in ssl/s3_clnt.c in OpenSSL 1.0.2 before 1.0.2e allows remote servers to cause a denial of service (segmentation fault) via a zero p value in an anonymous Diffie-Hellman (DH) ServerKeyExchange message.",
  "repo": "openssl/openssl",
  "patch_hash": "61e72d761c945e128ca13599a98a187ac23650dd",
  "patch_info": {
    "commit_hash": "61e72d761c945e128ca13599a98a187ac23650dd",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/61e72d761c945e128ca13599a98a187ac23650dd",
    "files": [
      "include/openssl/ssl.h",
      "ssl/s3_clnt.c",
      "ssl/ssl_err.c"
    ],
    "message": "Fix seg fault with 0 p val in SKE\n\nIf a client receives a ServerKeyExchange for an anon DH ciphersuite with the\nvalue of p set to 0 then a seg fault can occur. This commits adds a test to\nreject p, g and pub key parameters that have a 0 value (in accordance with\nRFC 5246)\n\nThe security vulnerability only affects master and 1.0.2, but the fix is\nadditionally applied to 1.0.1 for additional confidence.\n\nCVE-2015-1794\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/s3_clnt.c||ssl/s3_clnt.c",
      "ssl/ssl_err.c||ssl/ssl_err.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2107: # define SSL_R_BAD_DATA_RETURNED_BY_CALLBACK              106",
      "2108: # define SSL_R_BAD_DECOMPRESSION                          107",
      "2109: # define SSL_R_BAD_DH_G_LENGTH                            108",
      "2110: # define SSL_R_BAD_DH_PUB_KEY_LENGTH                      109",
      "2111: # define SSL_R_BAD_DH_P_LENGTH                            110",
      "2112: # define SSL_R_BAD_DIGEST_LENGTH                          111",
      "2113: # define SSL_R_BAD_DSA_SIGNATURE                          112",
      "2114: # define SSL_R_BAD_ECC_CERT                               304",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2110: # define SSL_R_BAD_DH_G_VALUE                             375",
      "2112: # define SSL_R_BAD_DH_PUB_KEY_VALUE                       393",
      "2114: # define SSL_R_BAD_DH_P_VALUE                             395",
      "",
      "---------------"
    ],
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1693:         }",
      "1694:         p += i;",
      "1696:         if (2 > n - param_len) {",
      "1697:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
      "1698:             goto f_err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1696:         if (BN_is_zero(dh->p)) {",
      "1697:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
      "1698:             goto f_err;",
      "1699:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1713:         }",
      "1714:         p += i;",
      "1716:         if (2 > n - param_len) {",
      "1717:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
      "1718:             goto f_err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1722:         if (BN_is_zero(dh->g)) {",
      "1723:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
      "1724:             goto f_err;",
      "1725:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1734:         p += i;",
      "1735:         n -= param_len;",
      "1737:         if (!ssl_security(s, SSL_SECOP_TMP_DH, DH_security_bits(dh), 0, dh)) {",
      "1738:             al = SSL_AD_HANDSHAKE_FAILURE;",
      "1739:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DH_KEY_TOO_SMALL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1748:         if (BN_is_zero(dh->pub_key)) {",
      "1749:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
      "1750:             goto f_err;",
      "1751:         }",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "345:      \"bad data returned by callback\"},",
      "346:     {ERR_REASON(SSL_R_BAD_DECOMPRESSION), \"bad decompression\"},",
      "347:     {ERR_REASON(SSL_R_BAD_DH_G_LENGTH), \"bad dh g length\"},",
      "348:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_LENGTH), \"bad dh pub key length\"},",
      "349:     {ERR_REASON(SSL_R_BAD_DH_P_LENGTH), \"bad dh p length\"},",
      "350:     {ERR_REASON(SSL_R_BAD_DIGEST_LENGTH), \"bad digest length\"},",
      "351:     {ERR_REASON(SSL_R_BAD_DSA_SIGNATURE), \"bad dsa signature\"},",
      "352:     {ERR_REASON(SSL_R_BAD_ECC_CERT), \"bad ecc cert\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "348:     {ERR_REASON(SSL_R_BAD_DH_G_VALUE), \"bad dh g value\"},",
      "350:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_VALUE), \"bad dh pub key value\"},",
      "352:     {ERR_REASON(SSL_R_BAD_DH_P_VALUE), \"bad dh p value\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "329428708d6836676f6a7078aa2e2a1db9a1addb",
      "candidate_info": {
        "commit_hash": "329428708d6836676f6a7078aa2e2a1db9a1addb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/329428708d6836676f6a7078aa2e2a1db9a1addb",
        "files": [
          "include/openssl/ssl.h",
          "ssl/packet_locl.h",
          "ssl/s3_clnt.c",
          "ssl/ssl_err.c"
        ],
        "message": "PACKET: simplify ServerKeyExchange parsing\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/packet_locl.h||ssl/packet_locl.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115: # define SSL_R_BAD_DH_PUB_KEY_VALUE                       393",
          "2116: # define SSL_R_BAD_DH_P_LENGTH                            110",
          "2117: # define SSL_R_BAD_DH_P_VALUE                             395",
          "2118: # define SSL_R_BAD_DIGEST_LENGTH                          111",
          "2119: # define SSL_R_BAD_DSA_SIGNATURE                          112",
          "2120: # define SSL_R_BAD_ECC_CERT                               304",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118: # define SSL_R_BAD_DH_VALUE                               102",
          "",
          "---------------"
        ],
        "ssl/packet_locl.h||ssl/packet_locl.h": [
          "File: ssl/packet_locl.h -> ssl/packet_locl.h"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1434: #endif",
          "1435:     EVP_MD_CTX md_ctx;",
          "1436:     int al, j, verify_ret, ok;",
          "1438:     long n, alg_k, alg_a;",
          "1439:     EVP_PKEY *pkey = NULL;",
          "1440:     const EVP_MD *md = NULL;",
          "",
          "[Removed Lines]",
          "1437:     unsigned int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1449:     BN_CTX *bn_ctx = NULL;",
          "1450:     EC_POINT *srvr_ecpoint = NULL;",
          "1451:     int curve_nid = 0;",
          "1453: #endif",
          "1458:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Removed Lines]",
          "1452:     unsigned int encoded_pt_len = 0;",
          "1454:     PACKET pkt, save_param_start;",
          "1455:     unsigned char *data, *param;",
          "1456:     size_t param_len;",
          "",
          "[Added Lines]",
          "1452:     PACKET pkt, save_param_start, signature;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512: #ifndef OPENSSL_NO_PSK",
          "1514:     if (alg_k & SSL_PSK) {",
          "1518:             goto f_err;",
          "1519:         }",
          "",
          "[Removed Lines]",
          "1516:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1517:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "",
          "[Added Lines]",
          "1511:         PACKET psk_identity_hint;",
          "1512:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity_hint)) {",
          "1513:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1528:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1529:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "1530:             goto f_err;",
          "1531:         }",
          "1554:         }",
          "1555:     }",
          "",
          "[Removed Lines]",
          "1527:         if (i > PSK_MAX_IDENTITY_LEN) {",
          "1532:         if (PACKET_remaining(&pkt) < i) {",
          "1533:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1534:                    SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH);",
          "1535:             goto f_err;",
          "1536:         }",
          "1538:         OPENSSL_free(s->session->psk_identity_hint);",
          "1539:         if (i != 0) {",
          "1540:             unsigned char *hint = NULL;",
          "1542:             if (!PACKET_get_bytes(&pkt, &hint, i)) {",
          "1543:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1544:                 goto f_err;",
          "1545:             }",
          "1546:             s->session->psk_identity_hint = BUF_strndup((char *)hint, i);",
          "1547:             if (s->session->psk_identity_hint == NULL) {",
          "1548:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1549:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1550:                 goto f_err;",
          "1551:             }",
          "1552:         } else {",
          "1553:             s->session->psk_identity_hint = NULL;",
          "",
          "[Added Lines]",
          "1523:         if (PACKET_remaining(&psk_identity_hint) > PSK_MAX_IDENTITY_LEN) {",
          "1529:         if (!PACKET_strndup(&psk_identity_hint,",
          "1530:                             &s->session->psk_identity_hint)) {",
          "1531:             al = SSL_AD_INTERNAL_ERROR;",
          "1532:             goto f_err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1561: #ifndef OPENSSL_NO_SRP",
          "1562:     if (alg_k & SSL_kSRP) {",
          "1585:             goto f_err;",
          "1586:         }",
          "1619:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1620:             goto err;",
          "1621:         }",
          "",
          "[Removed Lines]",
          "1563:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1564:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1565:             goto f_err;",
          "1566:         }",
          "1568:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1569:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_N_LENGTH);",
          "1570:             goto f_err;",
          "1571:         }",
          "1573:         if ((s->srp_ctx.N = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1574:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1575:             goto err;",
          "1576:         }",
          "1578:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1579:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1580:             goto f_err;",
          "1581:         }",
          "1583:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1584:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_G_LENGTH);",
          "1588:         if ((s->srp_ctx.g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1590:             goto err;",
          "1591:         }",
          "1593:         if (!PACKET_get_1(&pkt, &i)) {",
          "1594:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1595:             goto f_err;",
          "1596:         }",
          "1598:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1599:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_S_LENGTH);",
          "1600:             goto f_err;",
          "1601:         }",
          "1603:         if ((s->srp_ctx.s = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1604:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1605:             goto err;",
          "1606:         }",
          "1608:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1609:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1610:             goto f_err;",
          "1611:         }",
          "1613:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1614:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_B_LENGTH);",
          "1615:             goto f_err;",
          "1616:         }",
          "1618:         if ((s->srp_ctx.B = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "[Added Lines]",
          "1542:         PACKET prime, generator, salt, server_pub;",
          "1543:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1544:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1545:             || !PACKET_get_length_prefixed_1(&pkt, &salt)",
          "1546:             || !PACKET_get_length_prefixed_2(&pkt, &server_pub)) {",
          "1547:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1551:         if ((s->srp_ctx.N =",
          "1552:              BN_bin2bn(PACKET_data(&prime),",
          "1553:                        PACKET_remaining(&prime), NULL)) == NULL",
          "1554:             || (s->srp_ctx.g =",
          "1555:                 BN_bin2bn(PACKET_data(&generator),",
          "1556:                           PACKET_remaining(&generator), NULL)) == NULL",
          "1557:             || (s->srp_ctx.s =",
          "1558:                 BN_bin2bn(PACKET_data(&salt),",
          "1559:                           PACKET_remaining(&salt), NULL)) == NULL",
          "1560:             || (s->srp_ctx.B =",
          "1561:                 BN_bin2bn(PACKET_data(&server_pub),",
          "1562:                           PACKET_remaining(&server_pub), NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1633: #ifndef OPENSSL_NO_RSA",
          "1634:     if (alg_k & SSL_kRSA) {",
          "1636:         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher)) {",
          "1637:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1639:             goto f_err;",
          "1640:         }",
          "1648:             goto f_err;",
          "1649:         }",
          "1658:             goto err;",
          "1659:         }",
          "1672:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1673:             goto err;",
          "1674:         }",
          "",
          "[Removed Lines]",
          "1641:         if ((rsa = RSA_new()) == NULL) {",
          "1642:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1643:             goto err;",
          "1644:         }",
          "1646:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1647:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1651:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1652:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_MODULUS_LENGTH);",
          "1653:             goto f_err;",
          "1654:         }",
          "1656:         if ((rsa->n = BN_bin2bn(data, i, rsa->n)) == NULL) {",
          "1657:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1661:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1662:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1663:             goto f_err;",
          "1664:         }",
          "1666:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1667:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_E_LENGTH);",
          "1668:             goto f_err;",
          "1669:         }",
          "1671:         if ((rsa->e = BN_bin2bn(data, i, rsa->e)) == NULL) {",
          "",
          "[Added Lines]",
          "1579:         PACKET mod, exp;",
          "1587:         if (!PACKET_get_length_prefixed_2(&pkt, &mod)",
          "1588:             || !PACKET_get_length_prefixed_2(&pkt, &exp)) {",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1593:         if ((rsa = RSA_new()) == NULL) {",
          "1594:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1598:         if ((rsa->n = BN_bin2bn(PACKET_data(&mod), PACKET_remaining(&mod),",
          "1599:                                 rsa->n)) == NULL",
          "1600:             || (rsa->e = BN_bin2bn(PACKET_data(&exp), PACKET_remaining(&exp),",
          "1601:                                    rsa->e)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1695: #endif",
          "1696: #ifndef OPENSSL_NO_DH",
          "1697:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1710:             goto f_err;",
          "1711:         }",
          "1715:             goto err;",
          "1716:         }",
          "1734:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1735:             goto err;",
          "1736:         }",
          "1760:             goto f_err;",
          "1761:         }",
          "",
          "[Removed Lines]",
          "1698:         if ((dh = DH_new()) == NULL) {",
          "1699:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1700:             goto err;",
          "1701:         }",
          "1703:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1704:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1705:             goto f_err;",
          "1706:         }",
          "1708:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1709:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_LENGTH);",
          "1713:         if ((dh->p = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1714:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1718:         if (BN_is_zero(dh->p)) {",
          "1719:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1720:             goto f_err;",
          "1721:         }",
          "1723:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1724:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1725:             goto f_err;",
          "1726:         }",
          "1728:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1729:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_LENGTH);",
          "1730:             goto f_err;",
          "1731:         }",
          "1733:         if ((dh->g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1738:         if (BN_is_zero(dh->g)) {",
          "1739:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1740:             goto f_err;",
          "1741:         }",
          "1743:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1744:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1745:             goto f_err;",
          "1746:         }",
          "1748:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1749:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_LENGTH);",
          "1750:             goto f_err;",
          "1751:         }",
          "1753:         if ((dh->pub_key = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1754:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1755:             goto err;",
          "1756:         }",
          "1758:         if (BN_is_zero(dh->pub_key)) {",
          "1759:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "",
          "[Added Lines]",
          "1628:         PACKET prime, generator, pub_key;",
          "1630:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1631:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1632:             || !PACKET_get_length_prefixed_2(&pkt, &pub_key)) {",
          "1633:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1637:         if ((dh = DH_new()) == NULL) {",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1642:         if ((dh->p = BN_bin2bn(PACKET_data(&prime),",
          "1643:                                PACKET_remaining(&prime), NULL)) == NULL",
          "1644:             || (dh->g = BN_bin2bn(PACKET_data(&generator),",
          "1645:                                   PACKET_remaining(&generator), NULL)) == NULL",
          "1646:             || (dh->pub_key =",
          "1647:                 BN_bin2bn(PACKET_data(&pub_key),",
          "1648:                           PACKET_remaining(&pub_key), NULL)) == NULL) {",
          "1653:         if (BN_is_zero(dh->p) || BN_is_zero(dh->g) || BN_is_zero(dh->pub_key)) {",
          "1654:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_VALUE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1778:     else if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "1779:         EC_GROUP *ngroup;",
          "1780:         const EC_GROUP *group;",
          "1782:         if ((ecdh = EC_KEY_new()) == NULL) {",
          "1783:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1676:         PACKET encoded_pt;",
          "1677:         unsigned char *ecparams;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1798:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1799:             goto f_err;",
          "1800:         }",
          "",
          "[Removed Lines]",
          "1797:         if (!PACKET_get_bytes(&pkt, &data, 3)) {",
          "",
          "[Added Lines]",
          "1689:         if (!PACKET_get_bytes(&pkt, &ecparams, 3)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1806:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_CURVE);",
          "1807:             goto f_err;",
          "1808:         }",
          "1811:             al = SSL_AD_INTERNAL_ERROR;",
          "1812:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1813:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1805:         if (!tls1_check_curve(s, data, 3)) {",
          "1810:         if ((curve_nid = tls1_ec_curve_id2nid(*(data + 2))) == 0) {",
          "",
          "[Added Lines]",
          "1697:         if (!tls1_check_curve(s, ecparams, 3)) {",
          "1702:         if ((curve_nid = tls1_ec_curve_id2nid(*(ecparams + 2))) == 0) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1842:             goto err;",
          "1843:         }",
          "1847:             goto f_err;",
          "1848:         }",
          "1853:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_ECPOINT);",
          "1854:             goto f_err;",
          "1855:         }",
          "",
          "[Removed Lines]",
          "1845:         if (!PACKET_get_1(&pkt, &encoded_pt_len)) {",
          "1846:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1850:         if (!PACKET_get_bytes(&pkt, &data, encoded_pt_len) ||",
          "1851:             (EC_POINT_oct2point(group, srvr_ecpoint,",
          "1852:                                 data, encoded_pt_len, bn_ctx) == 0)) {",
          "",
          "[Added Lines]",
          "1737:         if (!PACKET_get_length_prefixed_1(&pkt, &encoded_pt)) {",
          "1738:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1742:         if (EC_POINT_oct2point(group, srvr_ecpoint, PACKET_data(&encoded_pt),",
          "1743:                                PACKET_remaining(&encoded_pt), bn_ctx) == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1883:     }",
          "1893:     if (pkey != NULL) {",
          "1894:         if (SSL_USE_SIGALGS(s)) {",
          "1895:             int rv;",
          "1897:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1898:                 goto f_err;",
          "1899:             }",
          "1901:             if (rv == -1)",
          "1902:                 goto err;",
          "1903:             else if (rv == 0) {",
          "",
          "[Removed Lines]",
          "1890:     param_len = PACKET_remaining(&save_param_start) - PACKET_remaining(&pkt);",
          "1896:             if (!PACKET_get_bytes(&pkt, &data, 2)) {",
          "1900:             rv = tls12_check_peer_sigalg(&md, s, data, pkey);",
          "",
          "[Added Lines]",
          "1779:         PACKET params;",
          "1784:         if (!PACKET_get_sub_packet(&save_param_start, &params,",
          "1785:                                    PACKET_remaining(&save_param_start) -",
          "1786:                                    PACKET_remaining(&pkt))) {",
          "1787:             al = SSL_AD_INTERNAL_ERROR;",
          "1788:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1789:             goto f_err;",
          "1790:         }",
          "1793:             unsigned char *sigalgs;",
          "1795:             if (!PACKET_get_bytes(&pkt, &sigalgs, 2)) {",
          "1799:             rv = tls12_check_peer_sigalg(&md, s, sigalgs, pkey);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1906: #ifdef SSL_DEBUG",
          "1907:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "1908: #endif",
          "1910:             md = EVP_sha1();",
          "1914:             goto f_err;",
          "1915:         }",
          "1916:         j = EVP_PKEY_size(pkey);",
          "",
          "[Removed Lines]",
          "1909:         } else",
          "1912:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1913:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "",
          "[Added Lines]",
          "1808:         } else {",
          "1810:         }",
          "1812:         if (!PACKET_get_length_prefixed_2(&pkt, &signature)",
          "1813:             || PACKET_remaining(&pkt) != 0) {",
          "1814:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1929:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "1930:             goto f_err;",
          "1931:         }",
          "1938: #ifndef OPENSSL_NO_RSA",
          "1939:         if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "1940:             int num;",
          "",
          "[Removed Lines]",
          "1925:         if (i > (unsigned int)j",
          "1926:                 || !PACKET_get_bytes(&pkt, &data, i)",
          "1927:                 || PACKET_remaining(&pkt) != 0) {",
          "1932:         pkt = save_param_start;",
          "1933:         if (!PACKET_get_bytes(&pkt, &param, param_len)) {",
          "1934:             al = SSL_AD_INTERNAL_ERROR;",
          "1935:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1936:             goto f_err;",
          "1937:         }",
          "",
          "[Added Lines]",
          "1826:         if (PACKET_remaining(&signature) > (size_t)j) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1950:                                  SSL3_RANDOM_SIZE);",
          "1951:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1952:                                  SSL3_RANDOM_SIZE);",
          "1954:                 EVP_DigestFinal_ex(&md_ctx, q, &size);",
          "1955:                 q += size;",
          "1956:                 j += size;",
          "1957:             }",
          "1958:             verify_ret =",
          "1960:             if (verify_ret < 0) {",
          "1961:                 al = SSL_AD_DECRYPT_ERROR;",
          "1962:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "",
          "[Removed Lines]",
          "1953:                 EVP_DigestUpdate(&md_ctx, param, param_len);",
          "1959:                 RSA_verify(NID_md5_sha1, md_buf, j, data, i, pkey->pkey.rsa);",
          "",
          "[Added Lines]",
          "1846:                 EVP_DigestUpdate(&md_ctx, PACKET_data(&params),",
          "1847:                                  PACKET_remaining(&params));",
          "1853:                 RSA_verify(NID_md5_sha1, md_buf, j, PACKET_data(&signature),",
          "1854:                            PACKET_remaining(&signature), pkey->pkey.rsa);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1976:                              SSL3_RANDOM_SIZE);",
          "1977:             EVP_VerifyUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1978:                              SSL3_RANDOM_SIZE);",
          "1982:                 al = SSL_AD_DECRYPT_ERROR;",
          "1983:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "1979:             EVP_VerifyUpdate(&md_ctx, param, param_len);",
          "1980:             if (EVP_VerifyFinal(&md_ctx, data, (int)i, pkey) <= 0) {",
          "",
          "[Added Lines]",
          "1874:             EVP_VerifyUpdate(&md_ctx, PACKET_data(&params),",
          "1875:                              PACKET_remaining(&params));",
          "1876:             if (EVP_VerifyFinal(&md_ctx, PACKET_data(&signature),",
          "1877:                                 PACKET_remaining(&signature), pkey) <= 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_VALUE), \"bad dh pub key value\"},",
          "352:     {ERR_REASON(SSL_R_BAD_DH_P_LENGTH), \"bad dh p length\"},",
          "353:     {ERR_REASON(SSL_R_BAD_DH_P_VALUE), \"bad dh p value\"},",
          "354:     {ERR_REASON(SSL_R_BAD_DIGEST_LENGTH), \"bad digest length\"},",
          "355:     {ERR_REASON(SSL_R_BAD_DSA_SIGNATURE), \"bad dsa signature\"},",
          "356:     {ERR_REASON(SSL_R_BAD_ECC_CERT), \"bad ecc cert\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:     {ERR_REASON(SSL_R_BAD_DH_VALUE), \"bad dh value\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
      "candidate_info": {
        "commit_hash": "8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "PACKETise ServerKeyExchange\n\nProcess the ServerKeyExchange message using the PACKET API\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "1445: #endif",
          "1446:     EVP_MD_CTX md_ctx;",
          "1450:     EVP_PKEY *pkey = NULL;",
          "1451:     const EVP_MD *md = NULL;",
          "1452: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "1447:     unsigned char *param, *p;",
          "1448:     int al, j, ok;",
          "1449:     long i, param_len, n, alg_k, alg_a;",
          "",
          "[Added Lines]",
          "1447:     int al, j, verify_ret, ok;",
          "1448:     unsigned int i;",
          "1449:     long n, alg_k, alg_a;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1460:     BN_CTX *bn_ctx = NULL;",
          "1461:     EC_POINT *srvr_ecpoint = NULL;",
          "1462:     int curve_nid = 0;",
          "1464: #endif",
          "1466:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Removed Lines]",
          "1463:     int encoded_pt_len = 0;",
          "",
          "[Added Lines]",
          "1463:     unsigned int encoded_pt_len = 0;",
          "1465:     PACKET pkt;",
          "1466:     unsigned char *data, *param;",
          "1467:     size_t startparam, endparam;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1493:         return (1);",
          "1494:     }",
          "1498: #ifndef OPENSSL_NO_RSA",
          "1499:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "1496:     param = p = (unsigned char *)s->init_msg;",
          "",
          "[Added Lines]",
          "1499:     if (!PACKET_buf_init(&pkt, s->init_msg, n)",
          "1500:             || !PACKET_get_bookmark(&pkt, &startparam)) {",
          "1501:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1502:             al = SSL_AD_INTERNAL_ERROR;",
          "1503:             goto f_err;",
          "1504:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1508:     s->s3->peer_ecdh_tmp = NULL;",
          "1509: #endif",
          "1514:     alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1516:     al = SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "1512:     param_len = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1520:     if (alg_k & SSL_PSK) {",
          "1524:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1525:             goto f_err;",
          "1526:         }",
          "",
          "[Removed Lines]",
          "1522:         param_len = 2;",
          "1523:         if (param_len > n) {",
          "1527:         n2s(p, i);",
          "",
          "[Added Lines]",
          "1527:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1537:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "1538:             goto f_err;",
          "1539:         }",
          "1541:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1542:                    SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH);",
          "1543:             goto f_err;",
          "1544:         }",
          "1547:         OPENSSL_free(s->session->psk_identity_hint);",
          "1548:         if (i != 0) {",
          "1550:             if (s->session->psk_identity_hint == NULL) {",
          "1551:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1552:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "1540:         if (i > n - param_len) {",
          "1545:         param_len += i;",
          "1549:             s->session->psk_identity_hint = BUF_strndup((char *)p, i);",
          "",
          "[Added Lines]",
          "1543:         if (PACKET_remaining(&pkt) < i) {",
          "1551:             unsigned char *hint = NULL;",
          "1553:             if (!PACKET_get_bytes(&pkt, &hint, i)) {",
          "1554:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1555:                 goto f_err;",
          "1556:             }",
          "1557:             s->session->psk_identity_hint = BUF_strndup((char *)hint, i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1555:         } else {",
          "1556:             s->session->psk_identity_hint = NULL;",
          "1557:         }",
          "1561:     }",
          "",
          "[Removed Lines]",
          "1559:         p += i;",
          "1560:         n -= param_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1567: #ifndef OPENSSL_NO_SRP",
          "1568:     if (alg_k & SSL_kSRP) {",
          "1571:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1572:             goto f_err;",
          "1573:         }",
          "1577:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_N_LENGTH);",
          "1578:             goto f_err;",
          "1579:         }",
          "1583:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1584:             goto err;",
          "1585:         }",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1590:             goto f_err;",
          "1591:         }",
          "1597:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_G_LENGTH);",
          "1598:             goto f_err;",
          "1599:         }",
          "1603:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1604:             goto err;",
          "1605:         }",
          "1609:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1610:             goto f_err;",
          "1611:         }",
          "1618:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_S_LENGTH);",
          "1619:             goto f_err;",
          "1620:         }",
          "1624:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1625:             goto err;",
          "1626:         }",
          "1630:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1631:             goto f_err;",
          "1632:         }",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_B_LENGTH);",
          "1639:             goto f_err;",
          "1640:         }",
          "1644:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1645:             goto err;",
          "1646:         }",
          "1650:         if (!srp_verify_server_param(s, &al)) {",
          "1651:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1569:         param_len = 2;",
          "1570:         if (param_len > n) {",
          "1574:         n2s(p, i);",
          "1576:         if (i > n - param_len) {",
          "1580:         param_len += i;",
          "1582:         if ((s->srp_ctx.N = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1586:         p += i;",
          "1588:         if (2 > n - param_len) {",
          "1592:         param_len += 2;",
          "1594:         n2s(p, i);",
          "1596:         if (i > n - param_len) {",
          "1600:         param_len += i;",
          "1602:         if ((s->srp_ctx.g = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1606:         p += i;",
          "1608:         if (1 > n - param_len) {",
          "1612:         param_len += 1;",
          "1614:         i = (unsigned int)(p[0]);",
          "1615:         p++;",
          "1617:         if (i > n - param_len) {",
          "1621:         param_len += i;",
          "1623:         if ((s->srp_ctx.s = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1627:         p += i;",
          "1629:         if (2 > n - param_len) {",
          "1633:         param_len += 2;",
          "1635:         n2s(p, i);",
          "1637:         if (i > n - param_len) {",
          "1641:         param_len += i;",
          "1643:         if ((s->srp_ctx.B = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1647:         p += i;",
          "1648:         n -= param_len;",
          "",
          "[Added Lines]",
          "1574:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1579:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1584:         if ((s->srp_ctx.N = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1589:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1594:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1599:         if ((s->srp_ctx.g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1604:         if (!PACKET_get_1(&pkt, &i)) {",
          "1609:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1614:         if ((s->srp_ctx.s = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1619:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1624:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1629:         if ((s->srp_ctx.B = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1670:             goto err;",
          "1671:         }",
          "1675:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1676:             goto f_err;",
          "1677:         }",
          "1681:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_MODULUS_LENGTH);",
          "1682:             goto f_err;",
          "1683:         }",
          "1687:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1688:             goto err;",
          "1689:         }",
          "1693:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1694:             goto f_err;",
          "1695:         }",
          "1701:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_E_LENGTH);",
          "1702:             goto f_err;",
          "1703:         }",
          "1707:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1708:             goto err;",
          "1709:         }",
          "1714:         if (alg_a & SSL_aRSA)",
          "",
          "[Removed Lines]",
          "1673:         param_len = 2;",
          "1674:         if (param_len > n) {",
          "1678:         n2s(p, i);",
          "1680:         if (i > n - param_len) {",
          "1684:         param_len += i;",
          "1686:         if ((rsa->n = BN_bin2bn(p, i, rsa->n)) == NULL) {",
          "1690:         p += i;",
          "1692:         if (2 > n - param_len) {",
          "1696:         param_len += 2;",
          "1698:         n2s(p, i);",
          "1700:         if (i > n - param_len) {",
          "1704:         param_len += i;",
          "1706:         if ((rsa->e = BN_bin2bn(p, i, rsa->e)) == NULL) {",
          "1710:         p += i;",
          "1711:         n -= param_len;",
          "",
          "[Added Lines]",
          "1657:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1662:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1667:         if ((rsa->n = BN_bin2bn(data, i, rsa->n)) == NULL) {",
          "1672:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1677:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1682:         if ((rsa->e = BN_bin2bn(data, i, rsa->e)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1737:             goto err;",
          "1738:         }",
          "1742:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1743:             goto f_err;",
          "1744:         }",
          "1748:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_LENGTH);",
          "1749:             goto f_err;",
          "1750:         }",
          "1754:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1755:             goto err;",
          "1756:         }",
          "1759:         if (BN_is_zero(dh->p)) {",
          "1760:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1761:             goto f_err;",
          "1762:         }",
          "1766:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1767:             goto f_err;",
          "1768:         }",
          "1774:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_LENGTH);",
          "1775:             goto f_err;",
          "1776:         }",
          "1780:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1781:             goto err;",
          "1782:         }",
          "1785:         if (BN_is_zero(dh->g)) {",
          "1786:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1787:             goto f_err;",
          "1788:         }",
          "1791:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1792:             goto f_err;",
          "1793:         }",
          "1799:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_LENGTH);",
          "1800:             goto f_err;",
          "1801:         }",
          "1805:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1806:             goto err;",
          "1807:         }",
          "1811:         if (BN_is_zero(dh->pub_key)) {",
          "1812:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "",
          "[Removed Lines]",
          "1740:         param_len = 2;",
          "1741:         if (param_len > n) {",
          "1745:         n2s(p, i);",
          "1747:         if (i > n - param_len) {",
          "1751:         param_len += i;",
          "1753:         if ((dh->p = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1757:         p += i;",
          "1765:         if (2 > n - param_len) {",
          "1769:         param_len += 2;",
          "1771:         n2s(p, i);",
          "1773:         if (i > n - param_len) {",
          "1777:         param_len += i;",
          "1779:         if ((dh->g = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1783:         p += i;",
          "1790:         if (2 > n - param_len) {",
          "1794:         param_len += 2;",
          "1796:         n2s(p, i);",
          "1798:         if (i > n - param_len) {",
          "1802:         param_len += i;",
          "1804:         if ((dh->pub_key = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1808:         p += i;",
          "1809:         n -= param_len;",
          "",
          "[Added Lines]",
          "1714:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1719:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1724:         if ((dh->p = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1734:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1739:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1744:         if ((dh->g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1754:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1759:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1764:         if ((dh->pub_key = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1853:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1854:             goto f_err;",
          "1855:         }",
          "",
          "[Removed Lines]",
          "1851:         param_len = 4;",
          "1852:         if (param_len > n) {",
          "",
          "[Added Lines]",
          "1808:         if (!PACKET_get_bytes(&pkt, &data, 3)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1861:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_CURVE);",
          "1862:             goto f_err;",
          "1863:         }",
          "1866:             al = SSL_AD_INTERNAL_ERROR;",
          "1867:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1868:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1860:         if (!tls1_check_curve(s, p, 3)) {",
          "1865:         if ((curve_nid = tls1_ec_curve_id2nid(*(p + 2))) == 0) {",
          "",
          "[Added Lines]",
          "1816:         if (!tls1_check_curve(s, data, 3)) {",
          "1821:         if ((curve_nid = tls1_ec_curve_id2nid(*(data + 2))) == 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1890:             goto f_err;",
          "1891:         }",
          "1896:         if (((srvr_ecpoint = EC_POINT_new(group)) == NULL) ||",
          "1897:             ((bn_ctx = BN_CTX_new()) == NULL)) {",
          "",
          "[Removed Lines]",
          "1893:         p += 3;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1899:             goto err;",
          "1900:         }",
          "1906:             (EC_POINT_oct2point(group, srvr_ecpoint,",
          "1908:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_ECPOINT);",
          "1909:             goto f_err;",
          "1910:         }",
          "",
          "[Removed Lines]",
          "1903:         p += 1;",
          "1905:         if ((encoded_pt_len > n - param_len) ||",
          "1907:                                 p, encoded_pt_len, bn_ctx) == 0)) {",
          "1911:         param_len += encoded_pt_len;",
          "1913:         n -= param_len;",
          "1914:         p += encoded_pt_len;",
          "",
          "[Added Lines]",
          "1856:         if (!PACKET_get_1(&pkt, &encoded_pt_len)) {",
          "1857:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1858:             goto f_err;",
          "1859:         }",
          "1861:         if (!PACKET_get_bytes(&pkt, &data, encoded_pt_len) ||",
          "1863:                                 data, encoded_pt_len, bn_ctx) == 0)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1942:     }",
          "1948:     if (pkey != NULL) {",
          "1949:         if (SSL_USE_SIGALGS(s)) {",
          "1950:             int rv;",
          "1952:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1953:                 goto f_err;",
          "1954:             }",
          "1956:             if (rv == -1)",
          "1957:                 goto err;",
          "1958:             else if (rv == 0) {",
          "",
          "[Removed Lines]",
          "1951:             if (2 > n) {",
          "1955:             rv = tls12_check_peer_sigalg(&md, s, p, pkey);",
          "",
          "[Added Lines]",
          "1897:     if (!PACKET_get_bookmark(&pkt, &endparam)) {",
          "1898:         SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1899:         goto f_err;",
          "1900:     }",
          "1906:             if (!PACKET_get_bytes(&pkt, &data, 2)) {",
          "1910:             rv = tls12_check_peer_sigalg(&md, s, data, pkey);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1961: #ifdef SSL_DEBUG",
          "1962:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "1963: #endif",
          "1966:         } else",
          "1967:             md = EVP_sha1();",
          "1970:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1971:             goto f_err;",
          "1972:         }",
          "1975:         j = EVP_PKEY_size(pkey);",
          "1982:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "1983:             goto f_err;",
          "1984:         }",
          "1985: #ifndef OPENSSL_NO_RSA",
          "1986:         if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "1987:             int num;",
          "",
          "[Removed Lines]",
          "1964:             p += 2;",
          "1965:             n -= 2;",
          "1969:         if (2 > n) {",
          "1973:         n2s(p, i);",
          "1974:         n -= 2;",
          "1980:         if ((i != n) || (n > j) || (n <= 0)) {",
          "",
          "[Added Lines]",
          "1922:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1927:         if (j < 0) {",
          "1928:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1929:             goto f_err;",
          "1930:         }",
          "1935:         if (i > (unsigned int)j",
          "1936:                 || !PACKET_get_bytes(&pkt, &data, i)",
          "1937:                 || PACKET_remaining(&pkt) != 0) {",
          "1942:         if (!PACKET_goto_bookmark(&pkt, startparam)",
          "1943:                 || !PACKET_get_bytes(&pkt, &param, endparam - startparam)) {",
          "1944:             al = SSL_AD_INTERNAL_ERROR;",
          "1945:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1946:             goto f_err;",
          "1947:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1997:                                  SSL3_RANDOM_SIZE);",
          "1998:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1999:                                  SSL3_RANDOM_SIZE);",
          "2001:                 EVP_DigestFinal_ex(&md_ctx, q, &size);",
          "2002:                 q += size;",
          "2003:                 j += size;",
          "2004:             }",
          "2007:                 al = SSL_AD_DECRYPT_ERROR;",
          "2008:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "2009:                 goto f_err;",
          "2010:             }",
          "2013:                 al = SSL_AD_DECRYPT_ERROR;",
          "2014:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "2000:                 EVP_DigestUpdate(&md_ctx, param, param_len);",
          "2005:             i = RSA_verify(NID_md5_sha1, md_buf, j, p, n, pkey->pkey.rsa);",
          "2006:             if (i < 0) {",
          "2011:             if (i == 0) {",
          "",
          "[Added Lines]",
          "1963:                 EVP_DigestUpdate(&md_ctx, param, endparam - startparam);",
          "1968:             verify_ret =",
          "1969:                 RSA_verify(NID_md5_sha1, md_buf, j, data, i, pkey->pkey.rsa);",
          "1970:             if (verify_ret < 0) {",
          "1975:             if (verify_ret == 0) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2022:                              SSL3_RANDOM_SIZE);",
          "2023:             EVP_VerifyUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "2024:                              SSL3_RANDOM_SIZE);",
          "2028:                 al = SSL_AD_DECRYPT_ERROR;",
          "2029:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "2025:             EVP_VerifyUpdate(&md_ctx, param, param_len);",
          "2026:             if (EVP_VerifyFinal(&md_ctx, p, (int)n, pkey) <= 0) {",
          "",
          "[Added Lines]",
          "1989:             EVP_VerifyUpdate(&md_ctx, param, endparam - startparam);",
          "1990:             if (EVP_VerifyFinal(&md_ctx, data, (int)i, pkey) <= 0) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2040:             goto err;",
          "2041:         }",
          "2044:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "2045:             goto f_err;",
          "2046:         }",
          "",
          "[Removed Lines]",
          "2043:         if (n != 0) {",
          "",
          "[Added Lines]",
          "2007:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f15c99f4d4a96b692bdbb6f343c9112f2fa5a8ed",
      "candidate_info": {
        "commit_hash": "f15c99f4d4a96b692bdbb6f343c9112f2fa5a8ed",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f15c99f4d4a96b692bdbb6f343c9112f2fa5a8ed",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl.h",
          "ssl/ssl_err.c"
        ],
        "message": "Fix seg fault with 0 p val in SKE\n\nIf a client receives a ServerKeyExchange for an anon DH ciphersuite with the\nvalue of p set to 0 then a seg fault can occur. This commits adds a test to\nreject p, g and pub key parameters that have a 0 value (in accordance with\nRFC 5246)\n\nThe security vulnerability only affects master and 1.0.2, but the fix is\nadditionally applied to 1.0.1 for additional confidence.\n\nCVE-2015-1794\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1624:         }",
          "1625:         p += i;",
          "1627:         if (2 > n - param_len) {",
          "1628:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1629:             goto f_err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1627:         if (BN_is_zero(dh->p)) {",
          "1628:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1629:             goto f_err;",
          "1630:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644:         }",
          "1645:         p += i;",
          "1647:         if (2 > n - param_len) {",
          "1648:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1649:             goto f_err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1653:         if (BN_is_zero(dh->g)) {",
          "1654:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1655:             goto f_err;",
          "1656:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1665:         p += i;",
          "1666:         n -= param_len;",
          "1668: # ifndef OPENSSL_NO_RSA",
          "1669:         if (alg_a & SSL_aRSA)",
          "1670:             pkey =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:         if (BN_is_zero(dh->pub_key)) {",
          "1680:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "1681:             goto f_err;",
          "1682:         }",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2465: # define SSL_R_BAD_DATA_RETURNED_BY_CALLBACK              106",
          "2466: # define SSL_R_BAD_DECOMPRESSION                          107",
          "2467: # define SSL_R_BAD_DH_G_LENGTH                            108",
          "2468: # define SSL_R_BAD_DH_PUB_KEY_LENGTH                      109",
          "2469: # define SSL_R_BAD_DH_P_LENGTH                            110",
          "2470: # define SSL_R_BAD_DIGEST_LENGTH                          111",
          "2471: # define SSL_R_BAD_DSA_SIGNATURE                          112",
          "2472: # define SSL_R_BAD_ECC_CERT                               304",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2468: # define SSL_R_BAD_DH_G_VALUE                             375",
          "2470: # define SSL_R_BAD_DH_PUB_KEY_VALUE                       393",
          "2472: # define SSL_R_BAD_DH_P_VALUE                             395",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:      \"bad data returned by callback\"},",
          "370:     {ERR_REASON(SSL_R_BAD_DECOMPRESSION), \"bad decompression\"},",
          "371:     {ERR_REASON(SSL_R_BAD_DH_G_LENGTH), \"bad dh g length\"},",
          "372:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_LENGTH), \"bad dh pub key length\"},",
          "373:     {ERR_REASON(SSL_R_BAD_DH_P_LENGTH), \"bad dh p length\"},",
          "374:     {ERR_REASON(SSL_R_BAD_DIGEST_LENGTH), \"bad digest length\"},",
          "375:     {ERR_REASON(SSL_R_BAD_DSA_SIGNATURE), \"bad dsa signature\"},",
          "376:     {ERR_REASON(SSL_R_BAD_ECC_CERT), \"bad ecc cert\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:     {ERR_REASON(SSL_R_BAD_DH_G_VALUE), \"bad dh g value\"},",
          "374:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_VALUE), \"bad dh pub key value\"},",
          "376:     {ERR_REASON(SSL_R_BAD_DH_P_VALUE), \"bad dh p value\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ada57746b6b80beae73111fe1291bf8dd89af91c",
      "candidate_info": {
        "commit_hash": "ada57746b6b80beae73111fe1291bf8dd89af91c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ada57746b6b80beae73111fe1291bf8dd89af91c",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl.h",
          "ssl/ssl_err.c"
        ],
        "message": "Fix seg fault with 0 p val in SKE\n\nIf a client receives a ServerKeyExchange for an anon DH ciphersuite with the\nvalue of p set to 0 then a seg fault can occur. This commits adds a test to\nreject p, g and pub key parameters that have a 0 value (in accordance with\nRFC 5246)\n\nThe security vulnerability only affects master and 1.0.2, but the fix is\nadditionally applied to 1.0.1 for additional confidence.\n\nCVE-2015-1794\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1699:         }",
          "1700:         p += i;",
          "1702:         if (2 > n - param_len) {",
          "1703:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1704:             goto f_err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1702:         if (BN_is_zero(dh->p)) {",
          "1703:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1704:             goto f_err;",
          "1705:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1719:         }",
          "1720:         p += i;",
          "1722:         if (2 > n - param_len) {",
          "1723:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1724:             goto f_err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1728:         if (BN_is_zero(dh->g)) {",
          "1729:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1730:             goto f_err;",
          "1731:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1740:         p += i;",
          "1741:         n -= param_len;",
          "1743: # ifndef OPENSSL_NO_RSA",
          "1744:         if (alg_a & SSL_aRSA)",
          "1745:             pkey =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1754:         if (BN_is_zero(dh->pub_key)) {",
          "1755:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "1756:             goto f_err;",
          "1757:         }",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2846: # define SSL_R_BAD_DATA_RETURNED_BY_CALLBACK              106",
          "2847: # define SSL_R_BAD_DECOMPRESSION                          107",
          "2848: # define SSL_R_BAD_DH_G_LENGTH                            108",
          "2849: # define SSL_R_BAD_DH_PUB_KEY_LENGTH                      109",
          "2850: # define SSL_R_BAD_DH_P_LENGTH                            110",
          "2851: # define SSL_R_BAD_DIGEST_LENGTH                          111",
          "2852: # define SSL_R_BAD_DSA_SIGNATURE                          112",
          "2853: # define SSL_R_BAD_ECC_CERT                               304",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2849: # define SSL_R_BAD_DH_G_VALUE                             375",
          "2851: # define SSL_R_BAD_DH_PUB_KEY_VALUE                       393",
          "2853: # define SSL_R_BAD_DH_P_VALUE                             395",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:      \"bad data returned by callback\"},",
          "387:     {ERR_REASON(SSL_R_BAD_DECOMPRESSION), \"bad decompression\"},",
          "388:     {ERR_REASON(SSL_R_BAD_DH_G_LENGTH), \"bad dh g length\"},",
          "389:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_LENGTH), \"bad dh pub key length\"},",
          "390:     {ERR_REASON(SSL_R_BAD_DH_P_LENGTH), \"bad dh p length\"},",
          "391:     {ERR_REASON(SSL_R_BAD_DIGEST_LENGTH), \"bad digest length\"},",
          "392:     {ERR_REASON(SSL_R_BAD_DSA_SIGNATURE), \"bad dsa signature\"},",
          "393:     {ERR_REASON(SSL_R_BAD_ECC_CERT), \"bad ecc cert\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:     {ERR_REASON(SSL_R_BAD_DH_G_VALUE), \"bad dh g value\"},",
          "391:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_VALUE), \"bad dh pub key value\"},",
          "393:     {ERR_REASON(SSL_R_BAD_DH_P_VALUE), \"bad dh p value\"},",
          "",
          "---------------"
        ]
      }
    }
  ]
}