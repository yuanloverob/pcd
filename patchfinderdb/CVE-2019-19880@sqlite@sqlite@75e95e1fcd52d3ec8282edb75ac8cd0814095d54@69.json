{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
      "candidate_info": {
        "commit_hash": "2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Early detection of SQLITE_TOOBIG when processing nested queries.\n\nFossilOrigin-Name: 5d85d80ef8b216639244c6f4e6a2c0050af3cf9c3998f372bae4a19c0430f2fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b2ce5ed175cb5029ac07392ae371c86eeec23c74624aad007dee51cf359f3eeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4797:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "4798:   pTab->tabFlags |= TF_Ephemeral;",
          "4801: }",
          "",
          "[Removed Lines]",
          "4800:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "4800:   return pParse->rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2ea77e5b2e8846976ea8ba00faa97d30ee39b9d",
      "candidate_info": {
        "commit_hash": "c2ea77e5b2e8846976ea8ba00faa97d30ee39b9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2ea77e5b2e8846976ea8ba00faa97d30ee39b9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/insertfault.test"
        ],
        "message": "Fix a segfault that could follow an OOM when querying a table that has one or more columns with default values \"true\" or \"false\".\n\nFossilOrigin-Name: 202f9919c222ee933924c63c15ad36ec4481457b1e4d9179af14c9f284117c0c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/insertfault.test||test/insertfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93f8ec146d63af13f04e337ada4fa75e9254f72b1394df09701ae12e185f27e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:   }",
          "1531: #endif",
          "1532:   else if( op==TK_TRUEFALSE ){",
          "1536:   }",
          "",
          "[Removed Lines]",
          "1533:      pVal = valueNew(db, pCtx);",
          "1534:      pVal->flags = MEM_Int;",
          "1535:      pVal->u.i = pExpr->u.zToken[4]==0;",
          "",
          "[Added Lines]",
          "1533:     pVal = valueNew(db, pCtx);",
          "1534:     if( pVal ){",
          "1535:       pVal->flags = MEM_Int;",
          "1536:       pVal->u.i = pExpr->u.zToken[4]==0;",
          "1537:     }",
          "",
          "---------------"
        ],
        "test/insertfault.test||test/insertfault.test": [
          "File: test/insertfault.test -> test/insertfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-01-26",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for INSERT",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix insertfault",
          "18: do_execsql_test 1.0 {",
          "19:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c, d DEFAULT true);",
          "20:   INSERT INTO t1 DEFAULT VALUES;",
          "21:   SELECT * FROM t1;",
          "22: } {1 {} {} 1}",
          "23: faultsim_save_and_close",
          "25: breakpoint",
          "26: do_faultsim_test 1 -faults oom* -prep {",
          "27:   faultsim_restore_and_reopen",
          "28:   db eval { SELECT * FROM sqlite_master }",
          "29: } -body {",
          "30:   execsql { SELECT * FROM t1 }",
          "31: } -test {",
          "32:   faultsim_test_result {0 {1 {} {} 1}}",
          "33: }",
          "36: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25f933ad93e5990cf5b02fb5447790b027273710",
      "candidate_info": {
        "commit_hash": "25f933ad93e5990cf5b02fb5447790b027273710",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25f933ad93e5990cf5b02fb5447790b027273710",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "In the \"pgidx\" report from \"showdb\", also show the number of rows on each database btree page.\n\nFossilOrigin-Name: 2bda9dc41c07092ae37d0c6001c1271e0622bfff7151201fc2bb4c95422c087b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eed701ef919c70d891727250be6a1b626aeb894c562d221e319ae6d74fc71d3d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   int nCell;",
          "862:   int i;",
          "863:   int hdr = pgno==1 ? 100 : 0;",
          "865:   if( pgno<=0 || pgno>g.mxPage ) return;",
          "866:   a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864:   char zEntry[30];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "884:       zType = \"corrupt node\";",
          "885:     }",
          "886:   }",
          "887:   if( parent>0 ){",
          "890:   }else if( parent==0 ){",
          "892:   }else{",
          "894:   }",
          "896:   if( a[hdr]==2 || a[hdr]==5 ){",
          "897:     int cellstart = hdr+12;",
          "898:     unsigned int child;",
          "",
          "[Removed Lines]",
          "888:     page_usage_msg(pgno, \"%s [%s], child %d of page %d\",",
          "889:                    zType, zName, idx, parent);",
          "891:     page_usage_msg(pgno, \"root %s [%s]\", zType, zName);",
          "893:     page_usage_msg(pgno, \"orphaned %s\", zType);",
          "895:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "",
          "[Added Lines]",
          "888:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "889:   if( nCell==1 ){",
          "890:     sqlite3_snprintf(sizeof(zEntry),zEntry,\"1 row\");",
          "891:   }else{",
          "892:     sqlite3_snprintf(sizeof(zEntry),zEntry,\"%d rows\", nCell);",
          "893:   }",
          "895:     page_usage_msg(pgno, \"%s [%s], child %d of page %d, %s\",",
          "896:                    zType, zName, idx, parent, zEntry);",
          "898:     page_usage_msg(pgno, \"root %s [%s], %s\", zType, zName, zEntry);",
          "900:     page_usage_msg(pgno, \"orphaned %s, %s\", zType, zEntry);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16dd3985f0c78b77f0fd753ff151363d663d7413",
      "candidate_info": {
        "commit_hash": "16dd3985f0c78b77f0fd753ff151363d663d7413",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16dd3985f0c78b77f0fd753ff151363d663d7413",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/triggerC.test"
        ],
        "message": "Fix a segfault caused by using the RAISE function incorrectly (library now returns an error instead of crashing).\n\nFossilOrigin-Name: ddf06db702761d663119d508afe21d7dfebe963d576bb42fc2f2024205ab86f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/triggerC.test||test/triggerC.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23e200da5cfbde0798e67cd9e016e4a1cd73b67981e1af841493fcd123d8f547",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4745:     }",
          "4746:     return 2;",
          "4747:   }",
          "4749:     if( pA->op==TK_COLLATE && sqlite3ExprCompare(pParse, pA->pLeft,pB,iTab)<2 ){",
          "4750:       return 1;",
          "4751:     }",
          "",
          "[Removed Lines]",
          "4748:   if( pA->op!=pB->op ){",
          "",
          "[Added Lines]",
          "4748:   if( pA->op!=pB->op || pA->op==TK_RAISE ){",
          "",
          "---------------"
        ],
        "test/triggerC.test||test/triggerC.test": [
          "File: test/triggerC.test -> test/triggerC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: do_execsql_test 15.2.2 { SELECT * FROM x2;       } {1 2 3 4}",
          "1043: do_execsql_test 15.2.3 { SELECT * FROM \"\"\"x2\"\"\"; } {3 11 x y}",
          "1045: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045: #-------------------------------------------------------------------------",
          "1046: # At one point queries such as the following were causing segfaults.",
          "1047: #",
          "1048: do_catchsql_test 16.1 {",
          "1049:   SELECT raise(ABORT, 'msg') FROM sqlite_master",
          "1050:   UNION SELECT 1",
          "1051:   ORDER BY raise(IGNORE);",
          "1052: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "1054: do_catchsql_test 16.2 {",
          "1055:   SELECT count(*) FROM sqlite_master",
          "1056:   GROUP BY raise(IGNORE)",
          "1057:   HAVING raise(ABORT, 'msg');",
          "1058: } {1 {RAISE() may only be used within a trigger-program}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "790b37a2403eb479fcb9e33e0d7622b78524c579",
      "candidate_info": {
        "commit_hash": "790b37a2403eb479fcb9e33e0d7622b78524c579",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/790b37a2403eb479fcb9e33e0d7622b78524c579",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "test/in4.test"
        ],
        "message": "Omit the \"x IN (y)\" to \"x==y\" optimization of check-in [e68b427afbc82e20] (and ticket [e39d032577df6942]) as it causes difficult affinity problems as demonstrated by ticket [dbaf8a6820be1ece] and the original assertion fault is no longer a factor due to countless other changes of the previous 5 years.\n\nFossilOrigin-Name: 7f5168a76a400fc2e1e40c6950470b1bfb38a0be54fc5518c17c29fdae7d8f1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "test/in4.test||test/in4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 069c2f4c61f06211a8981abc412afcc1536ece13380b13a70aa99123f8f527cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(Expr *pExpr){",
          "46:   int op;",
          "48:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "49:     assert( pExpr->op==TK_COLLATE );",
          "50:     pExpr = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "47:   if( pExpr->flags & EP_Generic ) return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   Expr *p = pExpr;",
          "157:   while( p ){",
          "158:     int op = p->op;",
          "160:     if( op==TK_REGISTER ) op = p->op2;",
          "161:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN || op==TK_TRIGGER)",
          "162:      && p->y.pTab!=0",
          "",
          "[Removed Lines]",
          "159:     if( p->flags & EP_Generic ) break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1178:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1206:     }else{",
          "1207:       A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "1208:       if( A ){",
          "",
          "[Removed Lines]",
          "1179:     }else if( Y->nExpr==1 ){",
          "1196:       Expr *pRHS = Y->a[0].pExpr;",
          "1197:       Y->a[0].pExpr = 0;",
          "1198:       sqlite3ExprListDelete(pParse->db, Y);",
          "1201:       if( ALWAYS(pRHS) ){",
          "1202:         pRHS->flags &= ~EP_Collate;",
          "1203:         pRHS->flags |= EP_Generic;",
          "1204:       }",
          "1205:       A = sqlite3PExpr(pParse, N ? TK_NE : TK_EQ, A, pRHS);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3476:           pNew->iRightJoinTable = pExpr->iRightJoinTable;",
          "3477:           ExprSetProperty(pNew, EP_FromJoin);",
          "3478:         }",
          "3482:         sqlite3ExprDelete(db, pExpr);",
          "3483:         pExpr = pNew;",
          "3484:       }",
          "",
          "[Removed Lines]",
          "3479:         if( pNew && ExprHasProperty(pExpr,EP_Generic) ){",
          "3480:           ExprSetProperty(pNew, EP_Generic);",
          "3481:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5445:   assert( pOp->opcode!=OP_Next",
          "5446:        || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE",
          "5449:   assert( pOp->opcode!=OP_Prev",
          "5450:        || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE",
          "5452:        || pC->seekOp==OP_NullRow);",
          "5454:   rc = pOp->p4.xAdvance(pC->uc.pCursor, pOp->p3);",
          "",
          "[Removed Lines]",
          "5447:        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found",
          "5448:        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid);",
          "5451:        || pC->seekOp==OP_Last",
          "",
          "[Added Lines]",
          "5447:        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found",
          "5448:        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid",
          "5449:        || pC->seekOp==OP_IfNoHope);",
          "5452:        || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2517:       }else if( ALWAYS(pExpr->x.pList && pExpr->x.pList->nExpr) ){",
          "2519:         nIn = sqlite3LogEst(pExpr->x.pList->nExpr);",
          "2522:       }",
          "2523:       if( pProbe->hasStat1 ){",
          "2524:         LogEst M, logK, safetyMargin;",
          "",
          "[Removed Lines]",
          "2520:         assert( nIn>0 );  /* RHS always has 2 or more terms...  The parser",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/in4.test||test/in4.test": [
          "File: test/in4.test -> test/in4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: do_execsql_test in4-3.43 {",
          "227:   SELECT * FROM t3 WHERE x IN (10);",
          "228: } {10 10 10}",
          "233: do_execsql_test in4-3.45 {",
          "234:   SELECT * FROM t3 WHERE x NOT IN (10,11,99999);",
          "235: } {1 1 1}",
          "",
          "[Removed Lines]",
          "229: do_execsql_test in4-3.44 {",
          "230:   EXPLAIN",
          "231:   SELECT * FROM t3 WHERE x IN (10);",
          "232: } {~/OpenEphemeral/}",
          "",
          "[Added Lines]",
          "230: # This test would verify that the \"X IN (Y)\" -> \"X==Y\" optimization",
          "231: # was working.  But we have now taken that optimization out.",
          "232: #do_execsql_test in4-3.44 {",
          "233: #  EXPLAIN",
          "234: #  SELECT * FROM t3 WHERE x IN (10);",
          "235: #} {~/OpenEphemeral/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326: do_execsql_test in4-6.1-eqp {",
          "327:   EXPLAIN QUERY PLAN",
          "328:   SELECT * FROM t6a, t6b WHERE a=3 AND b IN (c);",
          "330: do_execsql_test in4-6.2 {",
          "331:   SELECT * FROM t6a, t6b WHERE a=3 AND c IN (b);",
          "332: } {3 4 4 44}",
          "",
          "[Removed Lines]",
          "329: } {~/SCAN/}",
          "",
          "[Added Lines]",
          "332: } {~/SCAN TABLE t6a/}",
          "",
          "---------------"
        ]
      }
    }
  ]
}