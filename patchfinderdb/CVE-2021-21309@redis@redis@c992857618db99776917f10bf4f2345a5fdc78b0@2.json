{
  "cve_id": "CVE-2021-21309",
  "cve_desc": "Redis is an open-source, in-memory database that persists on disk. In affected versions of Redis an integer overflow bug in 32-bit Redis version 4.0 or newer could be exploited to corrupt the heap and potentially result with remote code execution. Redis 4.0 or newer uses a configurable limit for the maximum supported bulk input size. By default, it is 512MB which is a safe value for all platforms. If the limit is significantly increased, receiving a large request from a client may trigger several integer overflow scenarios, which would result with buffer overflow and heap corruption. We believe this could in certain conditions be exploited for remote code execution. By default, authenticated Redis users have access to all configuration parameters and can therefore use the \u201cCONFIG SET proto-max-bulk-len\u201d to change the safe default, making the system vulnerable. **This problem only affects 32-bit Redis (on a 32-bit system, or as a 32-bit executable running on a 64-bit system).** The problem is fixed in version 6.2, and the fix is back ported to 6.0.11 and 5.0.11. Make sure you use one of these versions if you are running 32-bit Redis. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent clients from directly executing `CONFIG SET`: Using Redis 6.0 or newer, ACL configuration can be used to block the command. Using older versions, the `rename-command` configuration directive can be used to rename the command to a random string unknown to users, rendering it inaccessible. Please note that this workaround may have an additional impact on users or operational systems that expect `CONFIG SET` to behave in certain ways.",
  "repo": "redis/redis",
  "patch_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
  "patch_info": {
    "commit_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/c992857618db99776917f10bf4f2345a5fdc78b0",
    "files": [
      "src/config.c",
      "src/sds.c",
      "src/zmalloc.c"
    ],
    "message": "Fix integer overflow (CVE-2021-21309). (#8522)\n\nOn 32-bit systems, setting the proto-max-bulk-len config parameter to a high value may result with integer overflow and a subsequent heap overflow when parsing an input bulk (CVE-2021-21309).\n\nThis fix has two parts:\n\nSet a reasonable limit to the config parameter.\nAdd additional checks to prevent the problem in other potential but unknown code paths.\n\n(cherry picked from commit d32f2e9999ce003bad0bd2c3bca29f64dcce4433)",
    "before_after_code_files": [
      "src/config.c||src/config.c",
      "src/sds.c||src/sds.c",
      "src/zmalloc.c||src/zmalloc.c"
    ]
  },
  "patch_diff": {
    "src/config.c||src/config.c": [
      "File: src/config.c -> src/config.c"
    ],
    "src/sds.c||src/sds.c": [
      "File: src/sds.c -> src/sds.c"
    ],
    "src/zmalloc.c||src/zmalloc.c": [
      "File: src/zmalloc.c -> src/zmalloc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: #endif",
      "57: #endif",
      "60: #if defined(USE_TCMALLOC)",
      "61: #define malloc(size) tc_malloc(size)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: #if PREFIX_SIZE > 0",
      "60: #define ASSERT_NO_SIZE_OVERFLOW(sz) assert((sz) + PREFIX_SIZE > (sz))",
      "61: #else",
      "62: #define ASSERT_NO_SIZE_OVERFLOW(sz)",
      "63: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96: static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;",
      "98: void *zmalloc(size_t size) {",
      "99:     void *ptr = malloc(size+PREFIX_SIZE);",
      "101:     if (!ptr) zmalloc_oom_handler(size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115: #ifdef HAVE_DEFRAG",
      "116: void *zmalloc_no_tcache(size_t size) {",
      "117:     void *ptr = mallocx(size+PREFIX_SIZE, MALLOCX_TCACHE_NONE);",
      "118:     if (!ptr) zmalloc_oom_handler(size);",
      "119:     update_zmalloc_stat_alloc(zmalloc_size(ptr));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "128: #endif",
      "130: void *zcalloc(size_t size) {",
      "131:     void *ptr = calloc(1, size+PREFIX_SIZE);",
      "133:     if (!ptr) zmalloc_oom_handler(size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "139:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "142: }",
      "144: void *zrealloc(void *ptr, size_t size) {",
      "145: #ifndef HAVE_MALLOC_SIZE",
      "146:     void *realptr;",
      "147: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "154:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d182820fa7fc95b3d87718a2cb096dc53c5168f3",
      "candidate_info": {
        "commit_hash": "d182820fa7fc95b3d87718a2cb096dc53c5168f3",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/d182820fa7fc95b3d87718a2cb096dc53c5168f3",
        "files": [
          "src/server.c"
        ],
        "message": "Fix firstkey,lastkey,step in COMMAND command for some commands (#8367)\n\nThe output for COMMAND command was wrong for some commands.\nclients can use firstkey,lastkey,step to find (some) key name arguments, and the\n\"movablekeys\" flag to know that they can't know all (or any) of the key name arguments.\n\nThese commands had the wrong output:\n1. GEORADIUS*_RO used to have \"movablekeys\" (which it doesn't really need)\n2. XREAD and XREADGROUP used to have (1,1,1). but that's completely wrong.\n3. Z*STORE used to have (0,0,0) but it can at lest give the index of the dstkey (1,1,1)\n\n(cherry picked from commit baf92f3f1c15cf188fafaf802202da1c54caa709)",
        "before_after_code_files": [
          "src/server.c||src/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:     {\"zunionstore\",zunionstoreCommand,-4,",
          "429:      \"write use-memory @sortedset\",",
          "432:     {\"zinterstore\",zinterstoreCommand,-4,",
          "433:      \"write use-memory @sortedset\",",
          "436:     {\"zrange\",zrangeCommand,-4,",
          "437:      \"read-only @sortedset\",",
          "",
          "[Removed Lines]",
          "430:      0,zunionInterGetKeys,0,0,0,0,0,0},",
          "434:      0,zunionInterGetKeys,0,0,0,0,0,0},",
          "",
          "[Added Lines]",
          "430:      0,zunionInterGetKeys,1,1,1,0,0,0},",
          "434:      0,zunionInterGetKeys,1,1,1,0,0,0},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:     {\"georadius_ro\",georadiusroCommand,-6,",
          "893:      \"read-only @geo\",",
          "896:     {\"georadiusbymember\",georadiusbymemberCommand,-5,",
          "897:      \"write use-memory @geo\",",
          "",
          "[Removed Lines]",
          "894:      0,georadiusGetKeys,1,1,1,0,0,0},",
          "",
          "[Added Lines]",
          "894:      0,NULL,1,1,1,0,0,0},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "900:     {\"georadiusbymember_ro\",georadiusbymemberroCommand,-5,",
          "901:      \"read-only @geo\",",
          "904:     {\"geohash\",geohashCommand,-2,",
          "905:      \"read-only @geo\",",
          "",
          "[Removed Lines]",
          "902:      0,georadiusGetKeys,1,1,1,0,0,0},",
          "",
          "[Added Lines]",
          "902:      0,NULL,1,1,1,0,0,0},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "956:     {\"xread\",xreadCommand,-4,",
          "957:      \"read-only @stream @blocking\",",
          "960:     {\"xreadgroup\",xreadCommand,-7,",
          "961:      \"write @stream @blocking\",",
          "964:     {\"xgroup\",xgroupCommand,-2,",
          "965:      \"write use-memory @stream\",",
          "",
          "[Removed Lines]",
          "958:      0,xreadGetKeys,1,1,1,0,0,0},",
          "962:      0,xreadGetKeys,1,1,1,0,0,0},",
          "",
          "[Added Lines]",
          "958:      0,xreadGetKeys,0,0,0,0,0,0},",
          "962:      0,xreadGetKeys,0,0,0,0,0,0},",
          "",
          "---------------"
        ]
      }
    }
  ]
}