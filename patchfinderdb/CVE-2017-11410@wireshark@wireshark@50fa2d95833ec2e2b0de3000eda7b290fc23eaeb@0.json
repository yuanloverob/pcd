{
  "cve_id": "CVE-2017-11410",
  "cve_desc": "In Wireshark through 2.0.13 and 2.2.x through 2.2.7, the WBXML dissector could go into an infinite loop, triggered by packet injection or a malformed capture file. This was addressed in epan/dissectors/packet-wbxml.c by adding validation of the relationships between indexes and lengths. NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-7702.",
  "repo": "wireshark/wireshark",
  "patch_hash": "50fa2d95833ec2e2b0de3000eda7b290fc23eaeb",
  "patch_info": {
    "commit_hash": "50fa2d95833ec2e2b0de3000eda7b290fc23eaeb",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/50fa2d95833ec2e2b0de3000eda7b290fc23eaeb",
    "files": [
      "epan/dissectors/packet-wbxml.c"
    ],
    "message": "WBXML: Fix some more potential infinite loops.\n\ntvb_get_guintvar can generate some unrealistic values so do some\nsanity checking on them.\n\nBug: 13796\nChange-Id: I2d5f7a48c2e982a419ea6ab3ac0000be3b6bcbc7\nReviewed-on: https://code.wireshark.org/review/22121\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
      "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7233:      }",
      "7234:     } else {",
      "7235:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "7237:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7238:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
      "7239:             level, *codepage_attr, Indent (level), idx);",
      "",
      "[Removed Lines]",
      "7236:      if (len <= tvb_len) {",
      "",
      "[Added Lines]",
      "7236:      if ((len <= tvb_len) && (idx < tvb_len)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7496:      off += 1 + len;",
      "7497:     } else {",
      "7498:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "7503:     }",
      "7505:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
      "",
      "[Removed Lines]",
      "7499:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7500:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
      "7502:      off += 1+len+idx;",
      "",
      "[Added Lines]",
      "7499:      if ((len <= tvb_len) && (idx < tvb_len))",
      "7500:      {",
      "7501:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7502:                \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
      "7504:       off += 1+len+idx;",
      "7505:      } else {",
      "7507:       off = tvb_len;",
      "7508:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75e2c7ef57643639484a07da98a7fb2629bd000c",
      "candidate_info": {
        "commit_hash": "75e2c7ef57643639484a07da98a7fb2629bd000c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/75e2c7ef57643639484a07da98a7fb2629bd000c",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "WBXML: Fix some more potential infinite loops.\n\ntvb_get_guintvar can generate some unrealistic values so do some\nsanity checking on them.\n\nBug: 13796\nChange-Id: I2d5f7a48c2e982a419ea6ab3ac0000be3b6bcbc7\nReviewed-on: https://code.wireshark.org/review/22121\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 50fa2d95833ec2e2b0de3000eda7b290fc23eaeb)\nReviewed-on: https://code.wireshark.org/review/22128",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7233:      }",
          "7234:     } else {",
          "7235:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7237:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7238:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7239:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Removed Lines]",
          "7236:      if (len <= tvb_len) {",
          "",
          "[Added Lines]",
          "7236:      if ((len <= tvb_len) && (idx < tvb_len)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7496:      off += 1 + len;",
          "7497:     } else {",
          "7498:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7503:     }",
          "7505:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "",
          "[Removed Lines]",
          "7499:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7500:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7502:      off += 1+len+idx;",
          "",
          "[Added Lines]",
          "7499:      if ((len <= tvb_len) && (idx < tvb_len))",
          "7500:      {",
          "7501:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7502:                \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7504:       off += 1+len+idx;",
          "7505:      } else {",
          "7507:       off = tvb_len;",
          "7508:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "651a974a4e175ac9bdc6410ac759e5f86621a0b6",
      "candidate_info": {
        "commit_hash": "651a974a4e175ac9bdc6410ac759e5f86621a0b6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/651a974a4e175ac9bdc6410ac759e5f86621a0b6",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "WBXML: Fix some more potential infinite loops.\n\ntvb_get_guintvar can generate some unrealistic values so do some\nsanity checking on them.\n\nBug: 13796\nChange-Id: I2d5f7a48c2e982a419ea6ab3ac0000be3b6bcbc7\nReviewed-on: https://code.wireshark.org/review/22121\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 50fa2d95833ec2e2b0de3000eda7b290fc23eaeb)\nReviewed-on: https://code.wireshark.org/review/22128\n(cherry picked from commit 75e2c7ef57643639484a07da98a7fb2629bd000c)\nReviewed-on: https://code.wireshark.org/review/22129",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7231:      }",
          "7232:     } else {",
          "7233:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7235:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7236:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7237:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Removed Lines]",
          "7234:      if (len <= tvb_len) {",
          "",
          "[Added Lines]",
          "7234:      if ((len <= tvb_len) && (idx < tvb_len)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7496:      off += 1 + len;",
          "7497:     } else {",
          "7498:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7503:     }",
          "7505:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "",
          "[Removed Lines]",
          "7499:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7500:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7502:      off += 1+len+idx;",
          "",
          "[Added Lines]",
          "7499:      if ((len <= tvb_len) && (idx < tvb_len))",
          "7500:      {",
          "7501:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7502:                \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7504:       off += 1+len+idx;",
          "7505:      } else {",
          "7507:       off = tvb_len;",
          "7508:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c7168cc5f044b4da8747d35da0b2b204dabf398",
      "candidate_info": {
        "commit_hash": "3c7168cc5f044b4da8747d35da0b2b204dabf398",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3c7168cc5f044b4da8747d35da0b2b204dabf398",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "WBXML: Fix some more potential infinite loops.\n\ntvb_get_guintvar can generate some unrealistic values so do some\nsanity checking on them.\n\nBug: 13796\nChange-Id: I2d5f7a48c2e982a419ea6ab3ac0000be3b6bcbc7\nReviewed-on: https://code.wireshark.org/review/22121\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 50fa2d95833ec2e2b0de3000eda7b290fc23eaeb)\nReviewed-on: https://code.wireshark.org/review/22130",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7228:      }",
          "7229:     } else {",
          "7230:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7232:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7233:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7234:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Removed Lines]",
          "7231:      if (len <= tvb_len) {",
          "",
          "[Added Lines]",
          "7231:      if ((len <= tvb_len) && (idx < tvb_len)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7492:      off += 1 + len;",
          "7493:     } else {",
          "7494:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7499:     }",
          "7501:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "",
          "[Removed Lines]",
          "7495:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7496:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7498:      off += 1+len+idx;",
          "",
          "[Added Lines]",
          "7495:      if ((len <= tvb_len) && (idx < tvb_len))",
          "7496:      {",
          "7497:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7498:                \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "7500:       off += 1+len+idx;",
          "7501:      } else {",
          "7503:       off = tvb_len;",
          "7504:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e1befc4777431851f7026b059ecf6ce9a518781",
      "candidate_info": {
        "commit_hash": "8e1befc4777431851f7026b059ecf6ce9a518781",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8e1befc4777431851f7026b059ecf6ce9a518781",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "packet-wbxml.c: Fix potential infinite loops\n\nBug: 13477\nChange-Id: Ib6c440bbcbb5011e8f23fb87418acd87bb38c272\nReviewed-on: https://code.wireshark.org/review/20513\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7096:    return (off - offset);",
          "7098:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7103:    break;",
          "7105:    len = tvb_strsize (tvb, off+1);",
          "",
          "[Removed Lines]",
          "7099:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7100:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7101:           level, *codepage_attr, Indent (level), ent);",
          "7102:    off += 1+len;",
          "",
          "[Added Lines]",
          "7099:    if (len <= tvb_len) {",
          "7100:     proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7101:               \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7102:               level, *codepage_attr, Indent (level), ent);",
          "7103:     off += 1+len;",
          "7104:    } else {",
          "7106:     off = tvb_len;",
          "7107:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7116:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7125:    break;",
          "",
          "[Removed Lines]",
          "7117:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7118:    attr_save_known = 0;",
          "7119:    attr_save_literal = tvb_format_text (tvb,",
          "7120:             str_tbl+idx, str_len-1);",
          "7121:    proto_tree_add_string_format(tree, hf_wbxml_literal, tvb, off, 1+len, attr_save_literal,",
          "7122:           \"  %3d |  Attr | A %3d    | LITERAL (Literal Attribute)     |   %s<%s />\",",
          "7123:           level, *codepage_attr, Indent (level), attr_save_literal);",
          "7124:    off += 1+len;",
          "",
          "[Added Lines]",
          "7122:    if (len <= tvb_len) {",
          "7123:     str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7124:     attr_save_known = 0;",
          "7125:     attr_save_literal = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7126:     proto_tree_add_string_format(tree, hf_wbxml_literal, tvb, off, 1+len, attr_save_literal,",
          "7127:               \"  %3d |  Attr | A %3d    | LITERAL (Literal Attribute)     |   %s<%s />\",",
          "7128:               level, *codepage_attr, Indent (level), attr_save_literal);",
          "7129:     off += 1+len;",
          "7130:    } else {",
          "7132:     off = tvb_len;",
          "7133:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7159:            level, *codepage_attr, peek & 0x0f, Indent (level),",
          "7160:            s);",
          "7161:    }",
          "7163:    break;",
          "7165:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7172:    break;",
          "",
          "[Removed Lines]",
          "7162:    off += 1+len;",
          "7166:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7167:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7168:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "7169:           \"  %3d |  Attr | A %3d    | STR_T (Tableref string)         |     %s\\'%s\\'\",",
          "7170:           level, *codepage_attr, Indent (level), str);",
          "7171:    off += 1+len;",
          "",
          "[Added Lines]",
          "7171:    if (len <= tvb_len) {",
          "7172:     off += 1+len;",
          "7173:    } else {",
          "7175:     off = tvb_len;",
          "7176:    }",
          "7180:    if (len <= tvb_len) {",
          "7181:     str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7182:     str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7183:     proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "7184:               \"  %3d |  Attr | A %3d    | STR_T (Tableref string)         |     %s\\'%s\\'\",",
          "7185:               level, *codepage_attr, Indent (level), str);",
          "7186:     off += 1+len;",
          "7187:    } else {",
          "7189:     off = tvb_len;",
          "7190:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7202:             attr_save_literal, *codepage_attr, &len, pinfo);",
          "7203:       }",
          "7204:      }",
          "7209:     } else {",
          "7210:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7212:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7213:             level, *codepage_attr, Indent (level), idx);",
          "7215:     }",
          "7217:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "",
          "[Removed Lines]",
          "7205:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "7206:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s%s\",",
          "7207:             level, *codepage_attr, Indent (level), tmp_str);",
          "7208:      off += 1 + len;",
          "7211:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7214:      off += 1+len+idx;",
          "",
          "[Added Lines]",
          "7225:      if (len <= tvb_len) {",
          "7226:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "7227:                 \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s%s\",",
          "7228:                 level, *codepage_attr, Indent (level), tmp_str);",
          "7229:       off += 1 + len;",
          "7230:      } else {",
          "7232:       off = tvb_len;",
          "7233:      }",
          "7236:      if (len <= tvb_len) {",
          "7237:       proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7240:       off += 1+len+idx;",
          "7241:      } else {",
          "7243:       off = tvb_len;",
          "7244:      }",
          "",
          "---------------"
        ]
      }
    }
  ]
}