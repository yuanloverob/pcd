{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f914721c240eba73be89b9b40b6d227ad98a0425",
      "candidate_info": {
        "commit_hash": "f914721c240eba73be89b9b40b6d227ad98a0425",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f914721c240eba73be89b9b40b6d227ad98a0425",
        "files": [
          "README.md",
          "common.gypi"
        ],
        "message": "build: add x32 support to gyp build\n\nThis commit adds x32 support to the gyp build.  Configure with:\n\n    $ ./gyp_uv.py -Dtarget_arch=x32",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:             'cflags': [ '-m32' ],",
          "144:             'ldflags': [ '-m32' ],",
          "145:           }],",
          "146:           [ 'OS==\"linux\"', {",
          "147:             'cflags': [ '-ansi' ],",
          "148:           }],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:           [ 'target_arch==\"x32\"', {",
          "147:             'cflags': [ '-mx32' ],",
          "148:             'ldflags': [ '-mx32' ],",
          "149:           }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5baf210dfcd4d48a42216279bde3895e3b83fcd",
      "candidate_info": {
        "commit_hash": "f5baf210dfcd4d48a42216279bde3895e3b83fcd",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f5baf210dfcd4d48a42216279bde3895e3b83fcd",
        "files": [
          "test/benchmark-async.c",
          "test/benchmark-ping-pongs.c",
          "test/benchmark-pound.c",
          "test/benchmark-pump.c",
          "test/benchmark-udp-pummel.c",
          "test/dns-server.c",
          "test/runner-win.c",
          "test/runner.c",
          "test/test-fs.c",
          "test/test-get-currentexe.c",
          "test/test-ping-pong.c",
          "test/test-spawn.c",
          "test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c"
        ],
        "message": "test: wrap long lines at 80 columns",
        "before_after_code_files": [
          "test/benchmark-async.c||test/benchmark-async.c",
          "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c",
          "test/benchmark-pound.c||test/benchmark-pound.c",
          "test/benchmark-pump.c||test/benchmark-pump.c",
          "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c",
          "test/dns-server.c||test/dns-server.c",
          "test/runner-win.c||test/runner-win.c",
          "test/runner.c||test/runner.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-get-currentexe.c||test/test-get-currentexe.c",
          "test/test-ping-pong.c||test/test-ping-pong.c",
          "test/test-spawn.c||test/test-spawn.c",
          "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/benchmark-async.c||test/benchmark-async.c": [
          "File: test/benchmark-async.c -> test/benchmark-async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     ctx->loop = uv_loop_new();",
          "87:     ASSERT(ctx->loop != NULL);",
          "88:     ASSERT(0 == uv_async_init(ctx->loop, &ctx->worker_async, worker_async_cb));",
          "90:     ASSERT(0 == uv_thread_create(&ctx->thread, worker, ctx));",
          "91:   }",
          "",
          "[Removed Lines]",
          "89:     ASSERT(0 == uv_async_init(uv_default_loop(), &ctx->main_async, main_async_cb));",
          "",
          "[Added Lines]",
          "89:     ASSERT(0 == uv_async_init(uv_default_loop(),",
          "90:                               &ctx->main_async,",
          "91:                               main_async_cb));",
          "",
          "---------------"
        ],
        "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c": [
          "File: test/benchmark-ping-pongs.c -> test/benchmark-ping-pongs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     if (pinger->state == 0) {",
          "149:       pinger->pongs++;",
          "150:       if (uv_now(loop) - start_time > TIME) {",
          "152:         break;",
          "153:       } else {",
          "154:         pinger_write_ping(pinger);",
          "",
          "[Removed Lines]",
          "151:         uv_shutdown(&pinger->shutdown_req, (uv_stream_t*) tcp, pinger_shutdown_cb);",
          "",
          "[Added Lines]",
          "151:         uv_shutdown(&pinger->shutdown_req,",
          "152:                     (uv_stream_t*) tcp,",
          "153:                     pinger_shutdown_cb);",
          "",
          "---------------"
        ],
        "test/benchmark-pound.c||test/benchmark-pound.c": [
          "File: test/benchmark-pound.c -> test/benchmark-pound.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   r = uv_pipe_init(loop, (uv_pipe_t*)&p->stream, 0);",
          "230:   ASSERT(r == 0);",
          "234: #if DEBUG",
          "235:   printf(\"make connect %d\\n\", p->i);",
          "",
          "[Removed Lines]",
          "232:   uv_pipe_connect(&((pipe_conn_rec*)p)->conn_req, (uv_pipe_t*)&p->stream, TEST_PIPENAME, connect_cb);",
          "",
          "[Added Lines]",
          "232:   uv_pipe_connect(&((pipe_conn_rec*) p)->conn_req,",
          "233:                   (uv_pipe_t*) &p->stream,",
          "234:                   TEST_PIPENAME,",
          "235:                   connect_cb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310: BENCHMARK_IMPL(tcp4_pound_100) {",
          "312: }",
          "315: BENCHMARK_IMPL(tcp4_pound_1000) {",
          "317: }",
          "320: BENCHMARK_IMPL(pipe_pound_100) {",
          "322: }",
          "325: BENCHMARK_IMPL(pipe_pound_1000) {",
          "327: }",
          "",
          "[Removed Lines]",
          "311:   return pound_it(100, \"tcp\", tcp_do_setup, tcp_do_connect, tcp_make_connect, NULL);",
          "316:   return pound_it(1000, \"tcp\", tcp_do_setup, tcp_do_connect, tcp_make_connect, NULL);",
          "321:   return pound_it(100, \"pipe\", pipe_do_setup, pipe_do_connect, pipe_make_connect, NULL);",
          "326:   return pound_it(1000, \"pipe\", pipe_do_setup, pipe_do_connect, pipe_make_connect, NULL);",
          "",
          "[Added Lines]",
          "314:   return pound_it(100,",
          "315:                   \"tcp\",",
          "316:                   tcp_do_setup,",
          "317:                   tcp_do_connect,",
          "318:                   tcp_make_connect,",
          "319:                   NULL);",
          "324:   return pound_it(1000,",
          "325:                   \"tcp\",",
          "326:                   tcp_do_setup,",
          "327:                   tcp_do_connect,",
          "328:                   tcp_make_connect,",
          "329:                   NULL);",
          "334:   return pound_it(100,",
          "335:                   \"pipe\",",
          "336:                   pipe_do_setup,",
          "337:                   pipe_do_connect,",
          "338:                   pipe_make_connect,",
          "339:                   NULL);",
          "344:   return pound_it(1000,",
          "345:                   \"pipe\",",
          "346:                   pipe_do_setup,",
          "347:                   pipe_do_connect,",
          "348:                   pipe_make_connect,",
          "349:                   NULL);",
          "",
          "---------------"
        ],
        "test/benchmark-pump.c||test/benchmark-pump.c": [
          "File: test/benchmark-pump.c -> test/benchmark-pump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     uv_update_time(loop);",
          "102:     diff = uv_now(loop) - start_time;",
          "107:     for (i = 0; i < write_sockets; i++) {",
          "109:     }",
          "111:     exit(0);",
          "",
          "[Removed Lines]",
          "104:     LOGF(\"%s_pump%d_client: %.1f gbit/s\\n\", type == TCP ? \"tcp\" : \"pipe\", write_sockets,",
          "105:         gbit(nsent_total, diff));",
          "108:       uv_close(type == TCP ? (uv_handle_t*)&tcp_write_handles[i] : (uv_handle_t*)&pipe_write_handles[i], NULL);",
          "",
          "[Added Lines]",
          "104:     LOGF(\"%s_pump%d_client: %.1f gbit/s\\n\",",
          "105:          type == TCP ? \"tcp\" : \"pipe\",",
          "106:          write_sockets,",
          "107:          gbit(nsent_total, diff));",
          "110:       if (type == TCP)",
          "111:         uv_close((uv_handle_t*) &tcp_write_handles[i], NULL);",
          "112:       else",
          "113:         uv_close((uv_handle_t*) &pipe_write_handles[i], NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   uv_update_time(loop);",
          "124:   diff = uv_now(loop) - start_time;",
          "128: }",
          "",
          "[Removed Lines]",
          "126:   LOGF(\"%s_pump%d_server: %.1f gbit/s\\n\", type == TCP ? \"tcp\" : \"pipe\", max_read_sockets,",
          "127:       gbit(nrecv_total, diff));",
          "",
          "[Added Lines]",
          "131:   LOGF(\"%s_pump%d_server: %.1f gbit/s\\n\",",
          "132:        type == TCP ? \"tcp\" : \"pipe\",",
          "133:        max_read_sockets,",
          "134:        gbit(nrecv_total, diff));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:     for (i = 0; i < write_sockets; i++) {",
          "223:     }",
          "224:   }",
          "225: }",
          "",
          "[Removed Lines]",
          "222:       do_write(type == TCP ? (uv_stream_t*)&tcp_write_handles[i] : (uv_stream_t*)&pipe_write_handles[i]);",
          "",
          "[Added Lines]",
          "229:       if (type == TCP)",
          "230:         do_write((uv_stream_t*) &tcp_write_handles[i]);",
          "231:       else",
          "232:         do_write((uv_stream_t*) &pipe_write_handles[i]);",
          "",
          "---------------"
        ],
        "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c": [
          "File: test/benchmark-udp-pummel.c -> test/benchmark-udp-pummel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #define EXPECTED \"RANG TANG DING DONG I AM THE JAPANESE SANDMAN\"",
          "",
          "---------------"
        ],
        "test/dns-server.c||test/dns-server.c": [
          "File: test/dns-server.c -> test/dns-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         if (readbuf_remaining < hdrbuf_remaining) {",
          "163:           hdrbuf_remaining = DNSREC_LEN - readbuf_remaining;",
          "164:           break;",
          "165:         } else {",
          "168:           dnsreq += hdrbuf_remaining;",
          "169:           readbuf_remaining -= hdrbuf_remaining;",
          "170:           hdrbuf_remaining = 0;",
          "",
          "[Removed Lines]",
          "162:           memcpy(&hdrbuf[DNSREC_LEN - hdrbuf_remaining], dnsreq, readbuf_remaining);",
          "167:           memcpy(&hdrbuf[DNSREC_LEN - hdrbuf_remaining], dnsreq, hdrbuf_remaining);",
          "",
          "[Added Lines]",
          "162:           memcpy(&hdrbuf[DNSREC_LEN - hdrbuf_remaining],",
          "163:                  dnsreq,",
          "164:                  readbuf_remaining);",
          "169:           memcpy(&hdrbuf[DNSREC_LEN - hdrbuf_remaining],",
          "170:                  dnsreq,",
          "171:                  hdrbuf_remaining);",
          "",
          "---------------"
        ],
        "test/runner-win.c||test/runner-win.c": [
          "File: test/runner-win.c -> test/runner-win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   if (!SetHandleInformation(nul, HANDLE_FLAG_INHERIT, HANDLE_FLAG_INHERIT))",
          "111:     goto error;",
          "114:   if (result == 0 || result == sizeof(image))",
          "115:     goto error;",
          "",
          "[Removed Lines]",
          "113:   result = GetModuleFileNameW(NULL, (WCHAR*)&image, sizeof(image) / sizeof(WCHAR));",
          "",
          "[Added Lines]",
          "113:   result = GetModuleFileNameW(NULL,",
          "114:                               (WCHAR*) &image,",
          "115:                               sizeof(image) / sizeof(WCHAR));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:   char buf[1024];",
          "215:   char *line, *start;",
          "218:     return -1;",
          "220:   if (tap_output)",
          "221:     write(fd, \"#\", 1);",
          "",
          "[Removed Lines]",
          "217:   if (SetFilePointer(p->stdio_out, 0, 0, FILE_BEGIN) == INVALID_SET_FILE_POINTER)",
          "",
          "[Added Lines]",
          "219:   if (SetFilePointer(p->stdio_out,",
          "220:                      0,",
          "221:                      0,",
          "222:                      FILE_BEGIN) == INVALID_SET_FILE_POINTER) {",
          "224:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "337:   if (!SetConsoleCursorPosition(handle, coord))",
          "338:     return -1;",
          "341:     return -1;",
          "343:   return 0;",
          "344: }",
          "",
          "[Removed Lines]",
          "340:   if (!FillConsoleOutputCharacterW(handle, 0x20, info.dwSize.X, coord, &written))",
          "",
          "[Added Lines]",
          "346:   if (!FillConsoleOutputCharacterW(handle,",
          "347:                                    0x20,",
          "348:                                    info.dwSize.X,",
          "349:                                    coord,",
          "350:                                    &written)) {",
          "352:   }",
          "",
          "---------------"
        ],
        "test/runner.c||test/runner.c": [
          "File: test/runner.c -> test/runner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410: }",
          "414:   const task_entry_t* helper;",
          "415:   int n_helpers;",
          "",
          "[Removed Lines]",
          "413: static int find_helpers(const task_entry_t* task, const task_entry_t** helpers) {",
          "",
          "[Added Lines]",
          "413: static int find_helpers(const task_entry_t* task,",
          "414:                         const task_entry_t** helpers) {",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1334:   close(link);",
          "1337:   ASSERT(r == 0);",
          "1338:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1336:   r = uv_fs_symlink(loop, &req, \"test_file_symlink\", \"test_file_symlink_symlink\", 0, NULL);",
          "",
          "[Added Lines]",
          "1336:   r = uv_fs_symlink(loop,",
          "1337:                     &req,",
          "1338:                     \"test_file_symlink\",",
          "1339:                     \"test_file_symlink_symlink\",",
          "1340:                     0,",
          "1341:                     NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1343:   uv_fs_req_cleanup(&req);",
          "1347:   ASSERT(r == 0);",
          "1348:   uv_run(loop, UV_RUN_DEFAULT);",
          "1349:   ASSERT(symlink_cb_count == 1);",
          "",
          "[Removed Lines]",
          "1346:   r = uv_fs_symlink(loop, &req, \"test_file\", \"test_file_symlink2\", 0, symlink_cb);",
          "",
          "[Added Lines]",
          "1351:   r = uv_fs_symlink(loop,",
          "1352:                     &req,",
          "1353:                     \"test_file\",",
          "1354:                     \"test_file_symlink2\",",
          "1355:                     0,",
          "1356:                     symlink_cb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   close(link);",
          "1366:   ASSERT(r == 0);",
          "1367:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1365:   r = uv_fs_symlink(loop, &req, \"test_file_symlink2\", \"test_file_symlink2_symlink\", 0, NULL);",
          "",
          "[Added Lines]",
          "1375:   r = uv_fs_symlink(loop,",
          "1376:                     &req,",
          "1377:                     \"test_file_symlink2\",",
          "1378:                     \"test_file_symlink2_symlink\",",
          "1379:                     0,",
          "1380:                     NULL);",
          "",
          "---------------"
        ],
        "test/test-get-currentexe.c||test/test-get-currentexe.c": [
          "File: test/test-get-currentexe.c -> test/test-get-currentexe.c"
        ],
        "test/test-ping-pong.c||test/test-ping-pong.c": [
          "File: test/test-ping-pong.c -> test/test-ping-pong.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   buf = uv_buf_init(PING, sizeof(PING) - 1);",
          "80:   req = malloc(sizeof(*req));",
          "82:     FATAL(\"uv_write failed\");",
          "83:   }",
          "",
          "[Removed Lines]",
          "81:   if (uv_write(req, (uv_stream_t*)&pinger->stream.tcp, &buf, 1, pinger_after_write)) {",
          "",
          "[Added Lines]",
          "81:   if (uv_write(req,",
          "82:                (uv_stream_t*) &pinger->stream.tcp,",
          "83:                &buf,",
          "84:                1,",
          "85:                pinger_after_write)) {",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   ASSERT(err == UV_ESRCH);",
          "114: }",
          "117:   printf(\"detach_cb\\n\");",
          "118:   exit_cb_called++;",
          "119: }",
          "",
          "[Removed Lines]",
          "116: static void detach_failure_cb(uv_process_t* process, int64_t exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "116: static void detach_failure_cb(uv_process_t* process,",
          "117:                               int64_t exit_status,",
          "118:                               int term_signal) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   options.stdio_count = 2;",
          "634:   pipe_handle = CreateNamedPipeA(name,",
          "635:                                 PIPE_ACCESS_INBOUND | FILE_FLAG_OVERLAPPED,",
          "636:                                 PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT,",
          "",
          "[Removed Lines]",
          "633:   _snprintf(name, sizeof(name), \"\\\\\\\\.\\\\pipe\\\\uv\\\\%p-%d\", &out, GetCurrentProcessId());",
          "",
          "[Added Lines]",
          "635:   _snprintf(name,",
          "636:             sizeof(name),",
          "637:             \"\\\\\\\\.\\\\pipe\\\\uv\\\\%p-%d\",",
          "638:             &out,",
          "639:             GetCurrentProcessId());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "729:   wprintf(L\"    verbatim_output: %s\\n\", verbatim_output);",
          "730:   wprintf(L\"non_verbatim_output: %s\\n\", non_verbatim_output);",
          "735:   free(verbatim_output);",
          "736:   free(non_verbatim_output);",
          "",
          "[Removed Lines]",
          "732:   ASSERT(wcscmp(verbatim_output, L\"cmd.exe /c c:\\\\path\\\\to\\\\node.exe --eval \\\"require('c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js')\\\"\") == 0);",
          "733:   ASSERT(wcscmp(non_verbatim_output, L\"cmd.exe /c \\\"c:\\\\path\\\\to\\\\node.exe --eval \\\\\\\"require('c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js')\\\\\\\"\\\"\") == 0);",
          "",
          "[Added Lines]",
          "738:   ASSERT(wcscmp(verbatim_output,",
          "739:                 L\"cmd.exe /c c:\\\\path\\\\to\\\\node.exe --eval \"",
          "740:                 L\"\\\"require('c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js')\\\"\") == 0);",
          "741:   ASSERT(wcscmp(non_verbatim_output,",
          "742:                 L\"cmd.exe /c \\\"c:\\\\path\\\\to\\\\node.exe --eval \"",
          "743:                 L\"\\\\\\\"require('c:\\\\\\\\path\\\\\\\\to\\\\\\\\test.js')\\\\\\\"\\\"\") == 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "758:   WCHAR* env;",
          "760:   for (i = 0; i < sizeof(environment) / sizeof(environment[0]) - 1; i++) {",
          "762:   }",
          "764:   memcpy(ptr, L\"SYSTEMROOT=\", sizeof(L\"SYSTEMROOT=\"));",
          "765:   ptr += sizeof(L\"SYSTEMROOT=\")/sizeof(WCHAR) - 1;",
          "767:   ++ptr;",
          "769:   memcpy(ptr, L\"SYSTEMDRIVE=\", sizeof(L\"SYSTEMDRIVE=\"));",
          "770:   ptr += sizeof(L\"SYSTEMDRIVE=\")/sizeof(WCHAR) - 1;",
          "772:   ++ptr;",
          "",
          "[Removed Lines]",
          "761:     ptr += uv_utf8_to_utf16(environment[i], ptr, expected + sizeof(expected) - ptr);",
          "766:   ptr += GetEnvironmentVariableW(L\"SYSTEMROOT\", ptr, expected + sizeof(expected) - ptr);",
          "771:   ptr += GetEnvironmentVariableW(L\"SYSTEMDRIVE\", ptr, expected + sizeof(expected) - ptr);",
          "",
          "[Added Lines]",
          "771:     ptr += uv_utf8_to_utf16(environment[i],",
          "772:                             ptr,",
          "773:                             expected + sizeof(expected) - ptr);",
          "778:   ptr += GetEnvironmentVariableW(L\"SYSTEMROOT\",",
          "779:                                  ptr,",
          "780:                                  expected + sizeof(expected) - ptr);",
          "785:   ptr += GetEnvironmentVariableW(L\"SYSTEMDRIVE\",",
          "786:                                  ptr,",
          "787:                                  expected + sizeof(expected) - ptr);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c": [
          "File: test/test-tcp-bind-error.c -> test/test-tcp-bind-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: TEST_IMPL(tcp_bind_error_fault) {",
          "120:   struct sockaddr_in* garbage_addr;",
          "121:   uv_tcp_t server;",
          "122:   int r;",
          "",
          "[Removed Lines]",
          "119:   char garbage[] = \"blah blah blah blah blah blah blah blah blah blah blah blah\";",
          "",
          "[Added Lines]",
          "119:   char garbage[] =",
          "120:       \"blah blah blah blah blah blah blah blah blah blah blah blah\";",
          "",
          "---------------"
        ],
        "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c": [
          "File: test/test-tcp-bind6-error.c -> test/test-tcp-bind6-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: TEST_IMPL(tcp_bind6_error_fault) {",
          "96:   struct sockaddr_in6* garbage_addr;",
          "97:   uv_tcp_t server;",
          "98:   int r;",
          "",
          "[Removed Lines]",
          "95:   char garbage[] = \"blah blah blah blah blah blah blah blah blah blah blah blah\";",
          "",
          "[Added Lines]",
          "95:   char garbage[] =",
          "96:       \"blah blah blah blah blah blah blah blah blah blah blah blah\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9a4872c29a8f90e5755ff11699a3957e751470b",
      "candidate_info": {
        "commit_hash": "a9a4872c29a8f90e5755ff11699a3957e751470b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a9a4872c29a8f90e5755ff11699a3957e751470b",
        "files": [
          "ChangeLog",
          "configure.ac",
          "include/uv-version.h"
        ],
        "message": "Now working on v0.11.29",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.28], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.29], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_PATCH 28",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_PATCH 29",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f75bb7c3379d4398de8ed588a110aa7ab8708a91",
      "candidate_info": {
        "commit_hash": "f75bb7c3379d4398de8ed588a110aa7ab8708a91",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f75bb7c3379d4398de8ed588a110aa7ab8708a91",
        "files": [
          "configure.ac",
          "m4/libuv-check-flags.m4"
        ],
        "message": "build: enable all compiler warnings",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "m4/libuv-check-flags.m4||m4/libuv-check-flags.m4"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "16: AC_INIT([libuv], [0.11.23], [https://github.com/joyent/libuv/issues])",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "20: AC_CANONICAL_HOST",
          "21: AC_ENABLE_SHARED",
          "22: AC_ENABLE_STATIC",
          "23: AC_PROG_CC",
          "24: AM_PROG_CC_C_O",
          "25: # AM_PROG_AR is not available in automake v0.11 but it's essential in v0.12.",
          "26: m4_ifdef([AM_PROG_AR], [AM_PROG_AR])",
          "27: m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])",
          "",
          "[Removed Lines]",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "",
          "[Added Lines]",
          "15: m4_include([m4/libuv-check-flags.m4])",
          "16: m4_include([m4/libuv-extra-automake-flags.m4])",
          "26: CC_CHECK_CFLAGS_APPEND([ \\",
          "27:   -Waggregate-return \\",
          "28:   -Wall \\",
          "29:   -Wcast-align \\",
          "30:   -Wcast-qual \\",
          "31:   -Wconversion \\",
          "32:   -Wdeclaration-after-statement \\",
          "33:   -Wextra \\",
          "34:   -Wfloat-equal \\",
          "35:   -Wformat=2 \\",
          "36:   -Wimplicit \\",
          "37:   -Winit-self \\",
          "38:   -Wmissing-declarations \\",
          "39:   -Wmissing-field-initializers \\",
          "40:   -Wmissing-format-attribute \\",
          "41:   -Wmissing-include-dirs \\",
          "42:   -Wmissing-noreturn \\",
          "43:   -Wmissing-prototypes \\",
          "44:   -Wnested-externs \\",
          "45:   -Wno-unused-parameter \\",
          "46:   -Wold-style-definition \\",
          "47:   -Wpacked \\",
          "48:   -Wpointer-arith \\",
          "49:   -Wredundant-decls \\",
          "50:   -Wshadow \\",
          "51:   -Wsign-compare \\",
          "52:   -Wstrict-aliasing=2 \\",
          "53:   -Wstrict-prototypes \\",
          "54:   -Wswitch-enum \\",
          "55:   -Wundef \\",
          "56:   -Wuninitialized \\",
          "57:   -Wunsafe-loop-optimizations \\",
          "58:   -Wwrite-strings \\",
          "59:   -fno-common \\",
          "60:   -fvisibility=hidden])",
          "",
          "---------------"
        ],
        "m4/libuv-check-flags.m4||m4/libuv-check-flags.m4": [
          "File: m4/libuv-check-flags.m4 -> m4/libuv-check-flags.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: dnl Macros to check the presence of generic (non-typed) symbols.",
          "2: dnl Copyright (c) 2006-2008 Diego Petten\u00c3 <flameeyes gmail com>",
          "3: dnl Copyright (c) 2006-2008 xine project",
          "4: dnl",
          "5: dnl This program is free software; you can redistribute it and/or modify",
          "6: dnl it under the terms of the GNU General Public License as published by",
          "7: dnl the Free Software Foundation; either version 3, or (at your option)",
          "8: dnl any later version.",
          "9: dnl",
          "10: dnl This program is distributed in the hope that it will be useful,",
          "11: dnl but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: dnl GNU General Public License for more details.",
          "14: dnl",
          "15: dnl You should have received a copy of the GNU General Public License",
          "16: dnl along with this program; if not, write to the Free Software",
          "17: dnl Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA",
          "18: dnl 02110-1301, USA.",
          "19: dnl",
          "20: dnl As a special exception, the copyright owners of the",
          "21: dnl macro gives unlimited permission to copy, distribute and modify the",
          "22: dnl configure scripts that are the output of Autoconf when processing the",
          "23: dnl Macro. You need not follow the terms of the GNU General Public",
          "24: dnl License when using or distributing such scripts, even though portions",
          "25: dnl of the text of the Macro appear in them. The GNU General Public",
          "26: dnl License (GPL) does govern all other use of the material that",
          "27: dnl constitutes the Autoconf Macro.",
          "28: dnl",
          "29: dnl This special exception to the GPL applies to versions of the",
          "30: dnl Autoconf Macro released by this project. When you make and",
          "31: dnl distribute a modified version of the Autoconf Macro, you may extend",
          "32: dnl this special exception to the GPL to apply to your modified version as",
          "33: dnl well.",
          "35: dnl Check if the flag is supported by compiler",
          "36: dnl CC_CHECK_CFLAGS_SILENT([FLAG], [ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])",
          "38: AC_DEFUN([CC_CHECK_CFLAGS_SILENT], [",
          "39:   AC_CACHE_VAL(AS_TR_SH([cc_cv_cflags_$1]),",
          "40:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "41:      CFLAGS=\"$CFLAGS $1\"",
          "42:      AC_COMPILE_IFELSE([AC_LANG_SOURCE([int a;])],",
          "43:        [eval \"AS_TR_SH([cc_cv_cflags_$1])='yes'\"],",
          "44:        [eval \"AS_TR_SH([cc_cv_cflags_$1])='no'\"])",
          "45:      CFLAGS=\"$ac_save_CFLAGS\"",
          "46:     ])",
          "48:   AS_IF([eval test x$]AS_TR_SH([cc_cv_cflags_$1])[ = xyes],",
          "49:     [$2], [$3])",
          "50: ])",
          "52: dnl Check if the flag is supported by compiler (cacheable)",
          "53: dnl CC_CHECK_CFLAGS([FLAG], [ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])",
          "55: AC_DEFUN([CC_CHECK_CFLAGS], [",
          "56:   AC_CACHE_CHECK([if $CC supports $1 flag],",
          "57:     AS_TR_SH([cc_cv_cflags_$1]),",
          "58:     CC_CHECK_CFLAGS_SILENT([$1]) dnl Don't execute actions here!",
          "59:   )",
          "61:   AS_IF([eval test x$]AS_TR_SH([cc_cv_cflags_$1])[ = xyes],",
          "62:     [$2], [$3])",
          "63: ])",
          "65: dnl CC_CHECK_CFLAG_APPEND(FLAG, [action-if-found], [action-if-not-found])",
          "66: dnl Check for CFLAG and appends them to CFLAGS if supported",
          "67: AC_DEFUN([CC_CHECK_CFLAG_APPEND], [",
          "68:   AC_CACHE_CHECK([if $CC supports $1 flag],",
          "69:     AS_TR_SH([cc_cv_cflags_$1]),",
          "70:     CC_CHECK_CFLAGS_SILENT([$1]) dnl Don't execute actions here!",
          "71:   )",
          "73:   AS_IF([eval test x$]AS_TR_SH([cc_cv_cflags_$1])[ = xyes],",
          "74:     [CFLAGS=\"$CFLAGS $1\"; DEBUG_CFLAGS=\"$DEBUG_CFLAGS $1\"; $2], [$3])",
          "75: ])",
          "77: dnl CC_CHECK_CFLAGS_APPEND([FLAG1 FLAG2], [action-if-found], [action-if-not])",
          "78: AC_DEFUN([CC_CHECK_CFLAGS_APPEND], [",
          "79:   for flag in $1; do",
          "80:     CC_CHECK_CFLAG_APPEND($flag, [$2], [$3])",
          "81:   done",
          "82: ])",
          "84: dnl Check if the flag is supported by linker (cacheable)",
          "85: dnl CC_CHECK_LDFLAGS([FLAG], [ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])",
          "87: AC_DEFUN([CC_CHECK_LDFLAGS], [",
          "88:   AC_CACHE_CHECK([if $CC supports $1 flag],",
          "89:     AS_TR_SH([cc_cv_ldflags_$1]),",
          "90:     [ac_save_LDFLAGS=\"$LDFLAGS\"",
          "91:      LDFLAGS=\"$LDFLAGS $1\"",
          "92:      AC_LANG_PUSH([C])",
          "93:      AC_LINK_IFELSE([AC_LANG_SOURCE([int main() { return 1; }])],",
          "94:        [eval \"AS_TR_SH([cc_cv_ldflags_$1])='yes'\"],",
          "95:        [eval \"AS_TR_SH([cc_cv_ldflags_$1])=\"])",
          "96:      AC_LANG_POP([C])",
          "97:      LDFLAGS=\"$ac_save_LDFLAGS\"",
          "98:     ])",
          "100:   AS_IF([eval test x$]AS_TR_SH([cc_cv_ldflags_$1])[ = xyes],",
          "101:     [$2], [$3])",
          "102: ])",
          "104: dnl define the LDFLAGS_NOUNDEFINED variable with the correct value for",
          "105: dnl the current linker to avoid undefined references in a shared object.",
          "106: AC_DEFUN([CC_NOUNDEFINED], [",
          "107:   dnl We check $host for which systems to enable this for.",
          "108:   AC_REQUIRE([AC_CANONICAL_HOST])",
          "110:   case $host in",
          "111:      dnl FreeBSD (et al.) does not complete linking for shared objects when pthreads",
          "112:      dnl are requested, as different implementations are present; to avoid problems",
          "113:      dnl use -Wl,-z,defs only for those platform not behaving this way.",
          "116:         dnl First of all check for the --no-undefined variant of GNU ld. This allows",
          "117:         dnl for a much more readable commandline, so that people can understand what",
          "118:         dnl it does without going to look for what the heck -z defs does.",
          "119:         for possible_flags in \"-Wl,--no-undefined\" \"-Wl,-z,defs\"; do",
          "120:           CC_CHECK_LDFLAGS([$possible_flags], [LDFLAGS_NOUNDEFINED=\"$possible_flags\"])",
          "121:    break",
          "122:         done",
          "123:  ;;",
          "124:   esac",
          "126:   AC_SUBST([LDFLAGS_NOUNDEFINED])",
          "127: ])",
          "129: dnl Check for a -Werror flag or equivalent. -Werror is the GCC",
          "130: dnl and ICC flag that tells the compiler to treat all the warnings",
          "131: dnl as fatal. We usually need this option to make sure that some",
          "132: dnl constructs (like attributes) are not simply ignored.",
          "133: dnl",
          "134: dnl Other compilers don't support -Werror per se, but they support",
          "135: dnl an equivalent flag:",
          "136: dnl  - Sun Studio compiler supports -errwarn=%all",
          "137: AC_DEFUN([CC_CHECK_WERROR], [",
          "138:   AC_CACHE_CHECK(",
          "139:     [for $CC way to treat warnings as errors],",
          "140:     [cc_cv_werror],",
          "141:     [CC_CHECK_CFLAGS_SILENT([-Werror], [cc_cv_werror=-Werror],",
          "142:       [CC_CHECK_CFLAGS_SILENT([-errwarn=%all], [cc_cv_werror=-errwarn=%all])])",
          "143:     ])",
          "144: ])",
          "146: AC_DEFUN([CC_CHECK_ATTRIBUTE], [",
          "147:   AC_REQUIRE([CC_CHECK_WERROR])",
          "148:   AC_CACHE_CHECK([if $CC supports __attribute__(( ifelse([$2], , [$1], [$2]) ))],",
          "149:     AS_TR_SH([cc_cv_attribute_$1]),",
          "150:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "151:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "152:      AC_LANG_PUSH([C])",
          "153:      AC_COMPILE_IFELSE([AC_LANG_SOURCE([$3])],",
          "154:        [eval \"AS_TR_SH([cc_cv_attribute_$1])='yes'\"],",
          "155:        [eval \"AS_TR_SH([cc_cv_attribute_$1])='no'\"])",
          "156:      AC_LANG_POP([C])",
          "157:      CFLAGS=\"$ac_save_CFLAGS\"",
          "158:     ])",
          "160:   AS_IF([eval test x$]AS_TR_SH([cc_cv_attribute_$1])[ = xyes],",
          "161:     [AC_DEFINE(",
          "162:        AS_TR_CPP([SUPPORT_ATTRIBUTE_$1]), 1,",
          "163:          [Define this if the compiler supports __attribute__(( ifelse([$2], , [$1], [$2]) ))]",
          "164:          )",
          "165:      $4],",
          "166:     [$5])",
          "167: ])",
          "169: AC_DEFUN([CC_ATTRIBUTE_CONSTRUCTOR], [",
          "170:   CC_CHECK_ATTRIBUTE(",
          "171:     [constructor],,",
          "172:     [void __attribute__((constructor)) ctor() { int a; }],",
          "173:     [$1], [$2])",
          "174: ])",
          "176: AC_DEFUN([CC_ATTRIBUTE_FORMAT], [",
          "177:   CC_CHECK_ATTRIBUTE(",
          "178:     [format], [format(printf, n, n)],",
          "179:     [void __attribute__((format(printf, 1, 2))) printflike(const char *fmt, ...) { fmt = (void *)0; }],",
          "180:     [$1], [$2])",
          "181: ])",
          "183: AC_DEFUN([CC_ATTRIBUTE_FORMAT_ARG], [",
          "184:   CC_CHECK_ATTRIBUTE(",
          "185:     [format_arg], [format_arg(printf)],",
          "186:     [char *__attribute__((format_arg(1))) gettextlike(const char *fmt) { fmt = (void *)0; }],",
          "187:     [$1], [$2])",
          "188: ])",
          "190: AC_DEFUN([CC_ATTRIBUTE_VISIBILITY], [",
          "191:   CC_CHECK_ATTRIBUTE(",
          "192:     [visibility_$1], [visibility(\"$1\")],",
          "193:     [void __attribute__((visibility(\"$1\"))) $1_function() { }],",
          "194:     [$2], [$3])",
          "195: ])",
          "197: AC_DEFUN([CC_ATTRIBUTE_NONNULL], [",
          "198:   CC_CHECK_ATTRIBUTE(",
          "199:     [nonnull], [nonnull()],",
          "200:     [void __attribute__((nonnull())) some_function(void *foo, void *bar) { foo = (void*)0; bar = (void*)0; }],",
          "201:     [$1], [$2])",
          "202: ])",
          "204: AC_DEFUN([CC_ATTRIBUTE_UNUSED], [",
          "205:   CC_CHECK_ATTRIBUTE(",
          "206:     [unused], ,",
          "207:     [void some_function(void *foo, __attribute__((unused)) void *bar);],",
          "208:     [$1], [$2])",
          "209: ])",
          "211: AC_DEFUN([CC_ATTRIBUTE_SENTINEL], [",
          "212:   CC_CHECK_ATTRIBUTE(",
          "213:     [sentinel], ,",
          "214:     [void some_function(void *foo, ...) __attribute__((sentinel));],",
          "215:     [$1], [$2])",
          "216: ])",
          "218: AC_DEFUN([CC_ATTRIBUTE_DEPRECATED], [",
          "219:   CC_CHECK_ATTRIBUTE(",
          "220:     [deprecated], ,",
          "221:     [void some_function(void *foo, ...) __attribute__((deprecated));],",
          "222:     [$1], [$2])",
          "223: ])",
          "225: AC_DEFUN([CC_ATTRIBUTE_ALIAS], [",
          "226:   CC_CHECK_ATTRIBUTE(",
          "227:     [alias], [weak, alias],",
          "228:     [void other_function(void *foo) { }",
          "229:      void some_function(void *foo) __attribute__((weak, alias(\"other_function\")));],",
          "230:     [$1], [$2])",
          "231: ])",
          "233: AC_DEFUN([CC_ATTRIBUTE_MALLOC], [",
          "234:   CC_CHECK_ATTRIBUTE(",
          "235:     [malloc], ,",
          "236:     [void * __attribute__((malloc)) my_alloc(int n);],",
          "237:     [$1], [$2])",
          "238: ])",
          "240: AC_DEFUN([CC_ATTRIBUTE_PACKED], [",
          "241:   CC_CHECK_ATTRIBUTE(",
          "242:     [packed], ,",
          "243:     [struct astructure { char a; int b; long c; void *d; } __attribute__((packed));],",
          "244:     [$1], [$2])",
          "245: ])",
          "247: AC_DEFUN([CC_ATTRIBUTE_CONST], [",
          "248:   CC_CHECK_ATTRIBUTE(",
          "249:     [const], ,",
          "250:     [int __attribute__((const)) twopow(int n) { return 1 << n; } ],",
          "251:     [$1], [$2])",
          "252: ])",
          "254: AC_DEFUN([CC_FLAG_VISIBILITY], [",
          "255:   AC_REQUIRE([CC_CHECK_WERROR])",
          "256:   AC_CACHE_CHECK([if $CC supports -fvisibility=hidden],",
          "257:     [cc_cv_flag_visibility],",
          "258:     [cc_flag_visibility_save_CFLAGS=\"$CFLAGS\"",
          "259:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "260:      CC_CHECK_CFLAGS_SILENT([-fvisibility=hidden],",
          "261:  cc_cv_flag_visibility='yes',",
          "262:  cc_cv_flag_visibility='no')",
          "263:      CFLAGS=\"$cc_flag_visibility_save_CFLAGS\"])",
          "265:   AS_IF([test \"x$cc_cv_flag_visibility\" = \"xyes\"],",
          "266:     [AC_DEFINE([SUPPORT_FLAG_VISIBILITY], 1,",
          "267:        [Define this if the compiler supports the -fvisibility flag])",
          "268:      $1],",
          "269:     [$2])",
          "270: ])",
          "272: AC_DEFUN([CC_FUNC_EXPECT], [",
          "273:   AC_REQUIRE([CC_CHECK_WERROR])",
          "274:   AC_CACHE_CHECK([if compiler has __builtin_expect function],",
          "275:     [cc_cv_func_expect],",
          "276:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "277:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "278:      AC_LANG_PUSH([C])",
          "279:      AC_COMPILE_IFELSE([AC_LANG_SOURCE(",
          "280:        [int some_function() {",
          "281:         int a = 3;",
          "282:         return (int)__builtin_expect(a, 3);",
          "283:  }])],",
          "284:        [cc_cv_func_expect=yes],",
          "285:        [cc_cv_func_expect=no])",
          "286:      AC_LANG_POP([C])",
          "287:      CFLAGS=\"$ac_save_CFLAGS\"",
          "288:     ])",
          "290:   AS_IF([test \"x$cc_cv_func_expect\" = \"xyes\"],",
          "291:     [AC_DEFINE([SUPPORT__BUILTIN_EXPECT], 1,",
          "292:      [Define this if the compiler supports __builtin_expect() function])",
          "293:      $1],",
          "294:     [$2])",
          "295: ])",
          "297: AC_DEFUN([CC_ATTRIBUTE_ALIGNED], [",
          "298:   AC_REQUIRE([CC_CHECK_WERROR])",
          "299:   AC_CACHE_CHECK([highest __attribute__ ((aligned ())) supported],",
          "300:     [cc_cv_attribute_aligned],",
          "301:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "302:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "303:      AC_LANG_PUSH([C])",
          "304:      for cc_attribute_align_try in 64 32 16 8 4 2; do",
          "305:         AC_COMPILE_IFELSE([AC_LANG_SOURCE([",
          "306:           int main() {",
          "307:             static char c __attribute__ ((aligned($cc_attribute_align_try))) = 0;",
          "308:             return c;",
          "309:           }])], [cc_cv_attribute_aligned=$cc_attribute_align_try; break])",
          "310:      done",
          "311:      AC_LANG_POP([C])",
          "312:      CFLAGS=\"$ac_save_CFLAGS\"",
          "313:   ])",
          "315:   if test \"x$cc_cv_attribute_aligned\" != \"x\"; then",
          "316:      AC_DEFINE_UNQUOTED([ATTRIBUTE_ALIGNED_MAX], [$cc_cv_attribute_aligned],",
          "317:        [Define the highest alignment supported])",
          "318:   fi",
          "319: ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feb2a9e6947d892f449b2770c4090f7d8c88381b",
      "candidate_info": {
        "commit_hash": "feb2a9e6947d892f449b2770c4090f7d8c88381b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/feb2a9e6947d892f449b2770c4090f7d8c88381b",
        "files": [
          ".mailmap",
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "include/uv-version.h"
        ],
        "message": "2014.11.21, Version 1.0.0 (Stable)\n\nChanges since version 1.0.0-rc2:\n\n* doc: fix git/svn url for gyp repo in README (Emmanuel Odeke)\n\n* windows: fix fs_read with nbufs > 1 and offset (Unknown W. Brackets)\n\n* win: add missing IP_ADAPTER_UNICAST_ADDRESS_LH definition for MinGW\n  (huxingyi)\n\n* doc: mention homebrew in README (Mikhail Mukovnikov)\n\n* doc: add learnuv workshop to README (Thorsten Lorenz)\n\n* doc: fix parameter name in uv_fs_access (Sa\u00fal Ibarra Corretg\u00e9)\n\n* unix: use cfmakeraw() for setting raw TTY mode (Yuri D'Elia)\n\n* win: fix uv_thread_self() (Alexis Campailla)\n\n* build: add x32 support to gyp build (Ben Noordhuis)\n\n* build: remove dtrace probes (Ben Noordhuis)\n\n* doc: fix link in misc.rst (Manos Nikolaidis)\n\n* mailmap: remove duplicated entries (Sa\u00fal Ibarra Corretg\u00e9)\n\n* gyp: fix comment regarding version info location (Sa\u00fal Ibarra\n  Corretg\u00e9)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [1.0.0-rc3], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [1.0.0], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 1",
          "34: #define UV_VERSION_MINOR 0",
          "35: #define UV_VERSION_PATCH 0",
          "",
          "[Removed Lines]",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "37: #define UV_VERSION_SUFFIX \"rc3\"",
          "",
          "[Added Lines]",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "37: #define UV_VERSION_SUFFIX \"\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}