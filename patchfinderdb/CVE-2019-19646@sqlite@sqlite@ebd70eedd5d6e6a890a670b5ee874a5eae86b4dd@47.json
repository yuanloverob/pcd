{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55700bcd7255b15861fec4a0c4ab24eda965420d",
      "candidate_info": {
        "commit_hash": "55700bcd7255b15861fec4a0c4ab24eda965420d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55700bcd7255b15861fec4a0c4ab24eda965420d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Remove code in the round() SQL function that became unreachable due to the optimization of check-in [e95138f5f4febde5]\n\nFossilOrigin-Name: b141bae3f6d16c0ebb59dac9b02086a4370839e71ade34004f647b09b1083d1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "404:     sqlite3_free(zBuf);",
          "405:   }",
          "406:   sqlite3_result_double(context, r);",
          "",
          "[Removed Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Added Lines]",
          "400:     sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
      "candidate_info": {
        "commit_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2b893a7e0688556eed1a4150942742bb4d5c977",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Performance enhancement in sqlite3AtoF().  About 8% faster.\n\nFossilOrigin-Name: 81721aa54587e20d031d528fb6b74d91671a6e950fa926dc63f4284466e70f0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e2ebad3ab636c4c65814ad41d417b105be8e254d609d0e08fbba4c5bd107bf3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   double result;",
          "429:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "",
          "[Removed Lines]",
          "426:   int nDigits = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:   }",
          "458:     s = s*10 + (*z - '0');",
          "460:   }",
          "465:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) && s<((LARGEST_INT64-9)/10) ){",
          "459:     z+=incr; nDigits++;",
          "464:   while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; nDigits++; d++; }",
          "",
          "[Added Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) ){",
          "459:     z+=incr; nDigit++;",
          "460:     if( s>=((LARGEST_INT64-9)/10) ){",
          "463:       while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; d++; }",
          "464:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:       if( s<((LARGEST_INT64-9)/10) ){",
          "474:         s = s*10 + (*z - '0');",
          "475:         d--;",
          "476:       }",
          "478:     }",
          "479:   }",
          "480:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "477:       z+=incr; nDigits++;",
          "",
          "[Added Lines]",
          "477:         nDigit++;",
          "479:       z+=incr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585: #else",
          "586:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "584:   return z==zEnd && nDigits>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f88a24dc63ee8b5323c2236769517ad03d13926",
      "candidate_info": {
        "commit_hash": "7f88a24dc63ee8b5323c2236769517ad03d13926",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f88a24dc63ee8b5323c2236769517ad03d13926",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.30.0 for the next release cycle.\n\nFossilOrigin-Name: 2578e3c64b0a92ab92143f18d107a1a180bd6fa87243661930771c4c080f8098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d837ab0da52632699abc09320980606aef020df5020c253f99c97e24bf3c6d00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2d2ad6ece4611d7e548e14ab61bf0fe1d70bf11",
      "candidate_info": {
        "commit_hash": "e2d2ad6ece4611d7e548e14ab61bf0fe1d70bf11",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2d2ad6ece4611d7e548e14ab61bf0fe1d70bf11",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Update the test/fuzzdata8.db database with new interesting cases from dbsqlfuzz.\n\nFossilOrigin-Name: e467e4c8fa256ddd6c26c1f21bc26289a21f18b781737eaf706bc813ed8234fa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0da6e0dd1f9a9ba7646ee6bb3c14945e570303c9a42d20fa8a653570e12c3f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59145813d20c9bf91775928d4899eab20fb93f0d",
      "candidate_info": {
        "commit_hash": "59145813d20c9bf91775928d4899eab20fb93f0d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/59145813d20c9bf91775928d4899eab20fb93f0d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/with1.test"
        ],
        "message": "Renumber the Select.selId values in the copies of SELECT statements that implement VIEWs when the VIEW is expanded, so that when the same VIEW is used twice in the same join, each expansion as a distinct selId. This fixes ticket [ce823231949d3abf42453c8].\n\nFossilOrigin-Name: 3cacc4b940fd69776d930deec9512df47a2f22cb04fb955e354a0b25bdec287c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 42af7c819bc52ccb6953a58b1c05d3bd47cc438c5119a9555b1b796764eb9f20",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4843:   if( (selFlags & SF_Expanded)!=0 ){",
          "4844:     return WRC_Prune;",
          "4845:   }",
          "4846:   pTabList = p->pSrc;",
          "4847:   pEList = p->pEList;",
          "4848:   sqlite3WithPush(pParse, p->pWith, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4846:   if( pWalker->eCode ){",
          "4848:     p->selId = ++pParse->nSelect;",
          "4849:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4892: #if !defined(SQLITE_OMIT_VIEW) || !defined (SQLITE_OMIT_VIRTUALTABLE)",
          "4893:       if( IsVirtual(pTab) || pTab->pSelect ){",
          "4894:         i16 nCol;",
          "4895:         if( sqlite3ViewGetColumnNames(pParse, pTab) ) return WRC_Abort;",
          "4896:         assert( pFrom->pSelect==0 );",
          "4897:         pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);",
          "4898:         nCol = pTab->nCol;",
          "4899:         pTab->nCol = -1;",
          "4900:         sqlite3WalkSelect(pWalker, pFrom->pSelect);",
          "4901:         pTab->nCol = nCol;",
          "4902:       }",
          "4903: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4899:         u8 eCodeOrig = pWalker->eCode;",
          "4907:         pWalker->eCode = eCodeOrig;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5147:   }",
          "5148:   w.xSelectCallback = selectExpander;",
          "5149:   w.xSelectCallback2 = selectPopWith;",
          "5150:   sqlite3WalkSelect(&w, pSelect);",
          "5151: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5157:   w.eCode = 0;",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {too many FROM clause terms, max: 200}}",
          "1094: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1094: # 2019-05-22",
          "1095: # ticket https://www.sqlite.org/src/tktview/ce823231949d3abf42453c8f20",
          "1096: #",
          "1097: sqlite3 db :memory:",
          "1098: do_execsql_test 23.1 {",
          "1099:   CREATE TABLE t1(id INTEGER NULL PRIMARY KEY, name Text);",
          "1100:   INSERT INTO t1 VALUES (1, 'john');",
          "1101:   INSERT INTO t1 VALUES (2, 'james');",
          "1102:   INSERT INTO t1 VALUES (3, 'jingle');",
          "1103:   INSERT INTO t1 VALUES (4, 'himer');",
          "1104:   INSERT INTO t1 VALUES (5, 'smith');",
          "1105:   CREATE VIEW v2 AS",
          "1106:     WITH t4(Name) AS (VALUES ('A'), ('B'))",
          "1107:     SELECT Name Name FROM t4;",
          "1108:   CREATE VIEW v3 AS",
          "1109:     WITH t4(Att, Val, Act) AS (VALUES",
          "1110:       ('C', 'D', 'E'),",
          "1111:       ('F', 'G', 'H')",
          "1112:     )",
          "1113:     SELECT D.Id Id, P.Name Protocol, T.Att Att, T.Val Val, T.Act Act",
          "1114:     FROM t1 D",
          "1115:     CROSS JOIN v2 P",
          "1116:     CROSS JOIN t4 T;",
          "1117:   SELECT * FROM v3;",
          "1118: } {1 A C D E 1 A F G H 1 B C D E 1 B F G H 2 A C D E 2 A F G H 2 B C D E 2 B F G H 3 A C D E 3 A F G H 3 B C D E 3 B F G H 4 A C D E 4 A F G H 4 B C D E 4 B F G H 5 A C D E 5 A F G H 5 B C D E 5 B F G H}",
          "",
          "---------------"
        ]
      }
    }
  ]
}