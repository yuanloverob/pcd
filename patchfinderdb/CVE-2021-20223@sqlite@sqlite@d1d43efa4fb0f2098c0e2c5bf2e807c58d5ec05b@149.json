{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d07a5f4e0590e7c688508307f3bd53af2626b23",
      "candidate_info": {
        "commit_hash": "7d07a5f4e0590e7c688508307f3bd53af2626b23",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d07a5f4e0590e7c688508307f3bd53af2626b23",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereInt.h"
        ],
        "message": "Clean up the definitions of the TERM_ constants in the code generator. Formatting only - no logic changes.\n\nFossilOrigin-Name: af06f80a590e20f64fa2f630e85fa728c266ea4696b975cc5f2ab72a3b914379",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereInt.h||src/whereInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 03b003c988d27f3aa1b1e44972ee5a3c7e44ad667ec7f2b8a31d0411c66583d3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ]
      }
    },
    {
      "candidate_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
      "candidate_info": {
        "commit_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Slightly faster keyword hash table.\n\nFossilOrigin-Name: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: static Keyword aKeywordTable[] = {",
          "306: };",
          "",
          "[Removed Lines]",
          "161:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER       },",
          "162:   { \"ACTION\",           \"TK_ACTION\",       FKEY                   },",
          "163:   { \"ADD\",              \"TK_ADD\",          ALTER                  },",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "168:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "169:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "170:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "171:   { \"ASC\",              \"TK_ASC\",          ALWAYS                 },",
          "172:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH                 },",
          "173:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR               },",
          "174:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER                },",
          "175:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS                 },",
          "176:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS                 },",
          "177:   { \"BY\",               \"TK_BY\",           ALWAYS                 },",
          "178:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY                   },",
          "179:   { \"CASE\",             \"TK_CASE\",         ALWAYS                 },",
          "180:   { \"CAST\",             \"TK_CAST\",         CAST                   },",
          "181:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS                 },",
          "182:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS                 },",
          "183:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER                  },",
          "184:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS                 },",
          "185:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT               },",
          "186:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS                 },",
          "187:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS                 },",
          "188:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "189:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC             },",
          "190:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "191:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "192:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS                 },",
          "193:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH                 },",
          "194:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS                 },",
          "195:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS                 },",
          "196:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY                   },",
          "197:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS                 },",
          "198:   { \"DESC\",             \"TK_DESC\",         ALWAYS                 },",
          "199:   { \"DETACH\",           \"TK_DETACH\",       ATTACH                 },",
          "200:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS                 },",
          "201:   { \"DO\",               \"TK_DO\",           UPSERT                 },",
          "202:   { \"DROP\",             \"TK_DROP\",         ALWAYS                 },",
          "203:   { \"END\",              \"TK_END\",          ALWAYS                 },",
          "204:   { \"EACH\",             \"TK_EACH\",         TRIGGER                },",
          "205:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS                 },",
          "206:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS                 },",
          "207:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND               },",
          "208:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS                 },",
          "209:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC             },",
          "210:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS                 },",
          "211:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "212:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "213:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "214:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "215:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "216:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "217:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "218:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "219:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "221:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "222:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "223:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "224:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS                 },",
          "225:   { \"IF\",               \"TK_IF\",           ALWAYS                 },",
          "226:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER       },",
          "227:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS                 },",
          "228:   { \"IN\",               \"TK_IN\",           ALWAYS                 },",
          "229:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS                 },",
          "230:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS                 },",
          "231:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY                   },",
          "232:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "233:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS                 },",
          "234:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER                },",
          "235:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND               },",
          "236:   { \"INTO\",             \"TK_INTO\",         ALWAYS                 },",
          "237:   { \"IS\",               \"TK_IS\",           ALWAYS                 },",
          "238:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "239:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "240:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "241:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "242:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "243:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "244:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "245:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS                 },",
          "246:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS                 },",
          "247:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC        },",
          "248:   { \"NOT\",              \"TK_NOT\",          ALWAYS                 },",
          "249:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "250:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "251:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "252:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "253:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "254:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "255:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "256:   { \"OR\",               \"TK_OR\",           ALWAYS                 },",
          "257:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS                 },",
          "258:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC             },",
          "259:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "260:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC             },",
          "261:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC             },",
          "262:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN                },",
          "263:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA                 },",
          "264:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC             },",
          "265:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS                 },",
          "266:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN                },",
          "267:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER                },",
          "268:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC             },",
          "269:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE                    },",
          "270:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY                   },",
          "271:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS                 },",
          "272:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX                },",
          "273:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS                 },",
          "274:   { \"RENAME\",           \"TK_RENAME\",       ALTER                  },",
          "275:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT               },",
          "276:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY                   },",
          "277:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "278:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS                 },",
          "279:   { \"ROW\",              \"TK_ROW\",          TRIGGER                },",
          "280:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS                 },",
          "281:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS                 },",
          "282:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS                 },",
          "283:   { \"SET\",              \"TK_SET\",          ALWAYS                 },",
          "284:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS                 },",
          "285:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS                 },",
          "286:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS                 },",
          "287:   { \"THEN\",             \"TK_THEN\",         ALWAYS                 },",
          "288:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC             },",
          "289:   { \"TO\",               \"TK_TO\",           ALWAYS                 },",
          "290:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS                 },",
          "291:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER                },",
          "292:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC             },",
          "293:   { \"UNION\",            \"TK_UNION\",        COMPOUND               },",
          "294:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS                 },",
          "295:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS                 },",
          "296:   { \"USING\",            \"TK_USING\",        ALWAYS                 },",
          "297:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM                 },",
          "298:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS                 },",
          "299:   { \"VIEW\",             \"TK_VIEW\",         VIEW                   },",
          "300:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB                   },",
          "301:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "302:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "303:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC             },",
          "304:   { \"WITH\",             \"TK_WITH\",         CTE                    },",
          "305:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS                 },",
          "",
          "[Added Lines]",
          "162:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER, 0      },",
          "163:   { \"ACTION\",           \"TK_ACTION\",       FKEY,             0      },",
          "164:   { \"ADD\",              \"TK_ADD\",          ALTER,            1      },",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "172:   { \"ASC\",              \"TK_ASC\",          ALWAYS,           0      },",
          "173:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH,           1      },",
          "174:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR,         0      },",
          "175:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER,          0      },",
          "176:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS,           1      },",
          "177:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS,           5      },",
          "178:   { \"BY\",               \"TK_BY\",           ALWAYS,           10     },",
          "179:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY,             1      },",
          "180:   { \"CASE\",             \"TK_CASE\",         ALWAYS,           5      },",
          "181:   { \"CAST\",             \"TK_CAST\",         CAST,             5      },",
          "182:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS,           1      },",
          "183:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS,           1      },",
          "184:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER,            1      },",
          "185:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS,           1      },",
          "186:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT,         0      },",
          "187:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS,           1      },",
          "188:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS,           2      },",
          "189:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "190:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC,       1      },",
          "191:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "192:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "193:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS,           1      },",
          "194:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH,           0      },",
          "195:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS,           1      },",
          "196:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS,           1      },",
          "197:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY,             1      },",
          "198:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS,           10     },",
          "199:   { \"DESC\",             \"TK_DESC\",         ALWAYS,           3      },",
          "200:   { \"DETACH\",           \"TK_DETACH\",       ATTACH,           0      },",
          "201:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS,           5      },",
          "202:   { \"DO\",               \"TK_DO\",           UPSERT,           2      },",
          "203:   { \"DROP\",             \"TK_DROP\",         ALWAYS,           1      },",
          "204:   { \"END\",              \"TK_END\",          ALWAYS,           1      },",
          "205:   { \"EACH\",             \"TK_EACH\",         TRIGGER,          1      },",
          "206:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS,           2      },",
          "207:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS,           4      },",
          "208:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND,         4      },",
          "209:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS,           1      },",
          "210:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC,       1      },",
          "211:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS,           4      },",
          "212:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN,          1      },",
          "213:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER, 1      },",
          "214:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC,       4      },",
          "215:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS,           4      },",
          "216:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC,       4      },",
          "217:   { \"FOR\",              \"TK_FOR\",          TRIGGER,          2      },",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "225:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS,           5      },",
          "226:   { \"IF\",               \"TK_IF\",           ALWAYS,           2      },",
          "227:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER, 1      },",
          "228:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS,           1      },",
          "229:   { \"IN\",               \"TK_IN\",           ALWAYS,           10     },",
          "230:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS,           1      },",
          "231:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS,           0      },",
          "232:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY,             1      },",
          "233:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS,           1      },",
          "234:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS,           10     },",
          "235:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER,          1      },",
          "236:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND,         5      },",
          "237:   { \"INTO\",             \"TK_INTO\",         ALWAYS,           10     },",
          "238:   { \"IS\",               \"TK_IS\",           ALWAYS,           5      },",
          "239:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS,           5      },",
          "240:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS,           5      },",
          "241:   { \"KEY\",              \"TK_KEY\",          ALWAYS,           1      },",
          "242:   { \"LAST\",             \"TK_LAST\",         ALWAYS,           4      },",
          "243:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "244:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS,           5      },",
          "245:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS,           3      },",
          "246:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS,           2      },",
          "247:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "248:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC,  2      },",
          "249:   { \"NOT\",              \"TK_NOT\",          ALWAYS,           10     },",
          "250:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT,           1      },",
          "251:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS,           3      },",
          "252:   { \"NULL\",             \"TK_NULL\",         ALWAYS,           10     },",
          "253:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS,           3      },",
          "254:   { \"OF\",               \"TK_OF\",           ALWAYS,           3      },",
          "255:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS,           1      },",
          "256:   { \"ON\",               \"TK_ON\",           ALWAYS,           1      },",
          "257:   { \"OR\",               \"TK_OR\",           ALWAYS,           9      },",
          "258:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS,           10     },",
          "259:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC,       3      },",
          "260:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "261:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC,       3      },",
          "262:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC,       3      },",
          "263:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN,          0      },",
          "264:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA,           0      },",
          "265:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC,       3      },",
          "266:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS,           1      },",
          "267:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN,          0      },",
          "268:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER,          1      },",
          "269:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC,       3      },",
          "270:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE,              3      },",
          "271:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY,             1      },",
          "272:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "273:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX,          1      },",
          "274:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS,           1      },",
          "275:   { \"RENAME\",           \"TK_RENAME\",       ALTER,            1      },",
          "276:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT,         10     },",
          "277:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY,             1      },",
          "278:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS,           0      },",
          "279:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS,           1      },",
          "280:   { \"ROW\",              \"TK_ROW\",          TRIGGER,          1      },",
          "281:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS,           1      },",
          "282:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS,           1      },",
          "283:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS,           10     },",
          "284:   { \"SET\",              \"TK_SET\",          ALWAYS,           10     },",
          "285:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS,           1      },",
          "286:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS,           1      },",
          "287:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS,           1      },",
          "288:   { \"THEN\",             \"TK_THEN\",         ALWAYS,           3      },",
          "289:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC,       3      },",
          "290:   { \"TO\",               \"TK_TO\",           ALWAYS,           3      },",
          "291:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS,           1      },",
          "292:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER,          1      },",
          "293:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC,       3      },",
          "294:   { \"UNION\",            \"TK_UNION\",        COMPOUND,         3      },",
          "295:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS,           1      },",
          "296:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS,           10     },",
          "297:   { \"USING\",            \"TK_USING\",        ALWAYS,           8      },",
          "298:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM,           1      },",
          "299:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS,           10     },",
          "300:   { \"VIEW\",             \"TK_VIEW\",         VIEW,             1      },",
          "301:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB,             1      },",
          "302:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS,           1      },",
          "303:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS,           10     },",
          "304:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC,       3      },",
          "305:   { \"WITH\",             \"TK_WITH\",         CTE,              4      },",
          "306:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS,           1      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:   return &aKeywordTable[i];",
          "358: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "367:   int j = aKeywordTable[i].iNext;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "371:   aKeywordTable[i].iNext = aKeywordTable[j].iNext;",
          "372:   aKeywordTable[j].iNext = i+1;",
          "374:   reorder(&aKeywordTable[i].iNext);",
          "375: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491:     h = aKeywordTable[i].hash % bestSize;",
          "492:     aKeywordTable[i].iNext = aKWHash[h];",
          "493:     aKWHash[h] = i+1;",
          "494:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     reorder(&aKWHash[h]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:     }",
          "606:   }",
          "607:   printf(\"%s};\\n\", j==0 ? \"\" : \"\\n\");",
          "608:   printf(\"/* Check to see if z[0..n-1] is a keyword. If it is, write the\\n\");",
          "609:   printf(\"** parser symbol code for that keyword into *pType.  Always\\n\");",
          "610:   printf(\"** return the integer n (the length of the token). */\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   printf(\"/* Hash table decoded:\\n\");",
          "627:   for(i=0; i<bestSize; i++){",
          "628:     j = aKWHash[i];",
          "629:     printf(\"** %3d:\", i);",
          "630:     while( j ){",
          "631:       printf(\" %s\", aKeywordTable[j-1].zOrigName);",
          "632:       j = aKeywordTable[j-1].iNext;",
          "633:     }",
          "634:     printf(\"\\n\");",
          "635:   }",
          "636:   printf(\"*/\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8afc09dea3a4b180312feb6d6774c958d0d7cb83",
      "candidate_info": {
        "commit_hash": "8afc09dea3a4b180312feb6d6774c958d0d7cb83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8afc09dea3a4b180312feb6d6774c958d0d7cb83",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix the check-in at [41474548ef3f7454] so that it computes the pointer in time for error checking at the end of the routine in the case of a non-OOM error.\n\nFossilOrigin-Name: 13d2fed760e7d0def573c56b7181f45622b0ed78d61952a6de901f96949d074e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b412d1d175fde9c6402b6fda7c73ac2db2471f2c9416d5c5073549732dea6d98",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2497:   }else{",
          "2498:     const int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_SUPER_JOURNAL);",
          "2499:     rc = sqlite3OsOpen(pVfs, zSuper, pSuper, flags, 0);",
          "2500:   }",
          "2501:   if( rc!=SQLITE_OK ) goto delsuper_out;",
          "",
          "[Removed Lines]",
          "2502:   pJournal = (sqlite3_file *)(((u8 *)pSuper) + pVfs->szOsFile);",
          "",
          "[Added Lines]",
          "2500:     pJournal = (sqlite3_file *)(((u8 *)pSuper) + pVfs->szOsFile);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b13d5c25d648559b9dbf50fa41d33b540839aff4",
      "candidate_info": {
        "commit_hash": "b13d5c25d648559b9dbf50fa41d33b540839aff4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b13d5c25d648559b9dbf50fa41d33b540839aff4",
        "files": [
          "configure",
          "configure.ac",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove bashism from configure script.\n\nFossilOrigin-Name: 138beebb2aa21ed18525dbe02c80426c6caabf6a5f6532a95b738a39b31ad4d5",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "569: # See whether we should use the amalgamation to build",
          "570: AC_ARG_ENABLE(amalgamation, AC_HELP_STRING([--disable-amalgamation],",
          "571:       [Disable the amalgamation and instead build all files separately]))",
          "573:   USE_AMALGAMATION=0",
          "574: fi",
          "575: AC_SUBST(USE_AMALGAMATION)",
          "",
          "[Removed Lines]",
          "572: if test \"${enable_amalgamation}\" == \"no\" ; then",
          "",
          "[Added Lines]",
          "572: if test \"${enable_amalgamation}\" = \"no\" ; then",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 612eb590ea44fd402e630f2d62558beb7ce57d7d0ba113c8b72ea60a895c5a43",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "243210b79b1467a727a75c175f0cb6673c28d3f8",
      "candidate_info": {
        "commit_hash": "243210b79b1467a727a75c175f0cb6673c28d3f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/243210b79b1467a727a75c175f0cb6673c28d3f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/update.c",
          "test/triggerupfrom.test"
        ],
        "message": "Fix a problem in SQLITE_ENABLE_HIDDEN_COLUMN builds occuring when an UPDATE...FROM fired an INSTEAD OF trigger.\n\nFossilOrigin-Name: 5176cb7a6a4e8cfa1973aaae46fcd7d39baedb70ae20bfacc82d62ca39fb0aa3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "test/triggerupfrom.test||test/triggerupfrom.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53b8b507a10364f5d580655d89c950a5f14c2a8114625fd8749d77f289413b22",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:       );",
          "238:     }",
          "239:   }",
          "242:   );",
          "243:   sqlite3SelectDestInit(&dest, eDest, iEph);",
          "244:   dest.iSDParm2 = (pPk ? pPk->nKeyCol : -1);",
          "",
          "[Removed Lines]",
          "240:   pSelect = sqlite3SelectNew(",
          "241:       pParse, pList, pSrc, pWhere2, pGroupBy, 0, pOrderBy2, 0, pLimit2",
          "",
          "[Added Lines]",
          "240:   pSelect = sqlite3SelectNew(pParse, pList,",
          "241:       pSrc, pWhere2, pGroupBy, 0, pOrderBy2, SF_IncludeHidden, pLimit2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "288:   int iRowidExpr = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "312:   int nChangeFrom = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/triggerupfrom.test||test/triggerupfrom.test": [
          "File: test/triggerupfrom.test -> test/triggerupfrom.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   SELECT * FROM t1;",
          "116: } {2 TWO}",
          "119: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: #-------------------------------------------------------------------------",
          "119: # Test that INSTEAD OF UPDATE triggers on views work with UPDATE...FROM",
          "120: # statements. Including, if the library is built with ENABLE_HIDDEN_COLUMNS,",
          "121: # that they work correctly on views with hidden columns.",
          "122: #",
          "123: reset_db",
          "124: do_execsql_test 4.0 {",
          "125:   CREATE TABLE t1(k, a, b);",
          "126:   INSERT INTO t1 VALUES('a', 1, 'one');",
          "127:   INSERT INTO t1 VALUES('b', 2, 'two');",
          "128:   INSERT INTO t1 VALUES('c', 3, 'three');",
          "129:   INSERT INTO t1 VALUES('d', 4, 'four');",
          "131:   CREATE TABLE log(x);",
          "132:   CREATE VIEW v1 AS SELECT k, a, b AS __hidden__b FROM t1;",
          "133:   CREATE TRIGGER tr1 INSTEAD OF UPDATE ON v1 BEGIN",
          "134:     INSERT INTO log VALUES(",
          "135:       '('||old.a||','||old.__hidden__b||')->('||new.a||','||new.__hidden__b||')'",
          "136:     );",
          "137:   END;",
          "138: }",
          "140: ifcapable hiddencolumns {",
          "141:   do_execsql_test 4.1-hc-enabled {",
          "142:     SELECT * FROM v1",
          "143:   } {a 1 b 2 c 3 d 4}",
          "144: } else {",
          "145:   do_execsql_test 4.1-hc-disabled {",
          "146:     SELECT * FROM v1",
          "147:   } {a 1 one b 2 two c 3 three d 4 four}",
          "148: }",
          "150: do_execsql_test 4.2 {",
          "151:   UPDATE v1 SET a='xyz' WHERE k IN ('a', 'c');",
          "152:   SELECT * FROM log;",
          "153:   DELETE FROM log;",
          "154: } {",
          "155:   (1,one)->(xyz,one)",
          "156:   (3,three)->(xyz,three)",
          "157: }",
          "159: do_execsql_test 4.3 {",
          "160:   CREATE TABLE map(k, v);",
          "161:   INSERT INTO map VALUES('b', 'twelve');",
          "162:   INSERT INTO map VALUES('d', 'fourteen');",
          "163:   UPDATE v1 SET a=map.v FROM map WHERE v1.k=map.k;",
          "164:   SELECT * FROM log;",
          "165:   DELETE FROM log;",
          "166: } {",
          "167:   (2,two)->(twelve,two)",
          "168:   (4,four)->(fourteen,four)",
          "169: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}