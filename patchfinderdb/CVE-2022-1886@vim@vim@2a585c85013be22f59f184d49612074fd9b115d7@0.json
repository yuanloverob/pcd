{
  "cve_id": "CVE-2022-1886",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "2a585c85013be22f59f184d49612074fd9b115d7",
  "patch_info": {
    "commit_hash": "2a585c85013be22f59f184d49612074fd9b115d7",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/2a585c85013be22f59f184d49612074fd9b115d7",
    "files": [
      "src/register.c",
      "src/testdir/test_put.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.5016: access before start of text with a put command\n\nProblem:    Access before start of text with a put command.\nSolution:   Check the length is more than zero.",
    "before_after_code_files": [
      "src/register.c||src/register.c",
      "src/testdir/test_put.vim||src/testdir/test_put.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/register.c||src/register.c": [
      "File: src/register.c -> src/register.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2219:      len = STRLEN(y_array[y_size - 1]);",
      "2220:      col = (colnr_T)len - lendiff;",
      "2221:      if (col > 1)",
      "2224:       y_array[y_size - 1] + len - 1);",
      "2225:      else",
      "2226:   curbuf->b_op_end.col = 0;",
      "",
      "[Removed Lines]",
      "2222:   curbuf->b_op_end.col = col - 1",
      "2223:     - mb_head_off(y_array[y_size - 1],",
      "",
      "[Added Lines]",
      "2222:      {",
      "2223:   curbuf->b_op_end.col = col - 1;",
      "2224:   if (len > 0)",
      "2225:       curbuf->b_op_end.col -= mb_head_off(y_array[y_size - 1],",
      "2227:      }",
      "",
      "---------------"
    ],
    "src/testdir/test_put.vim||src/testdir/test_put.vim": [
      "File: src/testdir/test_put.vim -> src/testdir/test_put.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:   bwipe!",
      "211: endfunc",
      "214: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213: \" this was putting a mark before the start of a line",
      "214: func Test_put_empty_register()",
      "215:   new",
      "216:   norm yy",
      "217:   norm [Pi00\u0014\u0014\u0003ggv)s0",
      "218:   sil! norm [P",
      "219:   bwipe!",
      "220: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "735: static int included_patches[] =",
      "738:     5015,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "738:     5016,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4d07253a485819b3a9fd923d263e722ea2109c12",
      "candidate_info": {
        "commit_hash": "4d07253a485819b3a9fd923d263e722ea2109c12",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/4d07253a485819b3a9fd923d263e722ea2109c12",
        "files": [
          "src/register.c",
          "src/testdir/test_put.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3677: after a put the '] mark is on the last byte\n\nProblem:    After a put the '] mark is on the last byte of a multi-byte\n            character.\nSolution:   Move it to the first byte. (closes #9047)",
        "before_after_code_files": [
          "src/register.c||src/register.c",
          "src/testdir/test_put.vim||src/testdir/test_put.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/register.c||src/register.c",
            "src/testdir/test_put.vim||src/testdir/test_put.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/register.c||src/register.c",
            "src/testdir/test_put.vim||src/testdir/test_put.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/register.c||src/register.c": [
          "File: src/register.c -> src/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2004:  {",
          "2005:      linenr_T end_lnum = 0; // init for gcc",
          "2006:      linenr_T start_lnum = lnum;",
          "2008:      if (VIsual_active)",
          "2009:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2007:      int  first_byte_off = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2065:       }",
          "2066:       STRMOVE(ptr, oldp + col);",
          "2067:       ml_replace(lnum, newp, FALSE);",
          "2069:       if (lnum == curwin->w_cursor.lnum)",
          "2070:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2071:       first_byte_off = mb_head_off(newp, ptr - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2080:       lnum--;",
          "2081:      }",
          "2083:      curbuf->b_op_end = curwin->w_cursor;",
          "2085:      if (totlen && (restart_edit != 0 || (flags & PUT_CURSEND)))",
          "2086:   ++curwin->w_cursor.col;",
          "2087:      changed_bytes(lnum, col);",
          "2088:  }",
          "2089:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2090:      curbuf->b_op_end.col -= first_byte_off;",
          "2095:      else",
          "2096:   curwin->w_cursor.col -= first_byte_off;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2198:   changed_lines(curbuf->b_op_start.lnum, 0,",
          "2199:         curbuf->b_op_start.lnum, nr_lines);",
          "2202:      curbuf->b_op_end.lnum = new_lnum;",
          "2204:      col = (colnr_T)STRLEN(y_array[y_size - 1]) - lendiff;",
          "2205:      if (col > 1)",
          "2207:      else",
          "2208:   curbuf->b_op_end.col = 0;",
          "",
          "[Removed Lines]",
          "2206:   curbuf->b_op_end.col = col - 1;",
          "",
          "[Added Lines]",
          "2216:   curbuf->b_op_end.col = col - 1",
          "2217:     - mb_head_off(y_array[y_size - 1],",
          "2218:       y_array[y_size - 1] + col - 1);",
          "",
          "---------------"
        ],
        "src/testdir/test_put.vim||src/testdir/test_put.vim": [
          "File: src/testdir/test_put.vim -> src/testdir/test_put.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   bwipe!",
          "198: endfunc",
          "201: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: func Test_multibyte_op_end_mark()",
          "201:   new",
          "202:   call setline(1, '\u0442\u0435\u0441\u0442')",
          "203:   normal viwdp",
          "204:   call assert_equal([0, 1, 7, 0], getpos(\"'>\"))",
          "205:   call assert_equal([0, 1, 7, 0], getpos(\"']\"))",
          "207:   normal Vyp",
          "208:   call assert_equal([0, 1, 2147483647, 0], getpos(\"'>\"))",
          "209:   call assert_equal([0, 2, 7, 0], getpos(\"']\"))",
          "210:   bwipe!",
          "211: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3676,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3677,",
          "",
          "---------------"
        ]
      }
    }
  ]
}