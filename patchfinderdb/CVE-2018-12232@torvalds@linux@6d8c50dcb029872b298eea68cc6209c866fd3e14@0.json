{
  "cve_id": "CVE-2018-12232",
  "cve_desc": "In net/socket.c in the Linux kernel through 4.17.1, there is a race condition between fchownat and close in cases where they target the same socket file descriptor, related to the sock_close and sockfs_setattr functions. fchownat does not increment the file descriptor reference count, which allows close to set the socket to NULL during fchownat's execution, leading to a NULL pointer dereference and system crash.",
  "repo": "torvalds/linux",
  "patch_hash": "6d8c50dcb029872b298eea68cc6209c866fd3e14",
  "patch_info": {
    "commit_hash": "6d8c50dcb029872b298eea68cc6209c866fd3e14",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6d8c50dcb029872b298eea68cc6209c866fd3e14",
    "files": [
      "net/socket.c"
    ],
    "message": "socket: close race condition between sock_close() and sockfs_setattr()\n\nfchownat() doesn't even hold refcnt of fd until it figures out\nfd is really needed (otherwise is ignored) and releases it after\nit resolves the path. This means sock_close() could race with\nsockfs_setattr(), which leads to a NULL pointer dereference\nsince typically we set sock->sk to NULL in ->release().\n\nAs pointed out by Al, this is unique to sockfs. So we can fix this\nin socket layer by acquiring inode_lock in sock_close() and\nchecking against NULL in sockfs_setattr().\n\nsock_release() is called in many places, only the sock_close()\npath matters here. And fortunately, this should not affect normal\nsock_close() as it is only called when the last fd refcnt is gone.\nIt only affects sock_close() with a parallel sockfs_setattr() in\nprogress, which is not common.\n\nFixes: 86741ec25462 (\"net: core: Add a UID field to struct sock.\")\nReported-by: shankarapailoor <shankarapailoor@gmail.com>\nCc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>\nCc: Lorenzo Colitti <lorenzo@google.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/socket.c||net/socket.c"
    ]
  },
  "patch_diff": {
    "net/socket.c||net/socket.c": [
      "File: net/socket.c -> net/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "541:  if (!err && (iattr->ia_valid & ATTR_UID)) {",
      "542:   struct socket *sock = SOCKET_I(d_inode(dentry));",
      "545:  }",
      "547:  return err;",
      "",
      "[Removed Lines]",
      "544:   sock->sk->sk_uid = iattr->ia_uid;",
      "",
      "[Added Lines]",
      "544:   if (sock->sk)",
      "545:    sock->sk->sk_uid = iattr->ia_uid;",
      "546:   else",
      "547:    err = -ENOENT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "594: {",
      "595:  if (sock->ops) {",
      "596:   struct module *owner = sock->ops->owner;",
      "598:   sock->ops->release(sock);",
      "599:   sock->ops = NULL;",
      "600:   module_put(owner);",
      "601:  }",
      "",
      "[Removed Lines]",
      "593: void sock_release(struct socket *sock)",
      "",
      "[Added Lines]",
      "596: static void __sock_release(struct socket *sock, struct inode *inode)",
      "601:   if (inode)",
      "602:    inode_lock(inode);",
      "604:   if (inode)",
      "605:    inode_unlock(inode);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "609:  }",
      "610:  sock->file = NULL;",
      "611: }",
      "612: EXPORT_SYMBOL(sock_release);",
      "614: void __sock_tx_timestamp(__u16 tsflags, __u8 *tx_flags)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "620: void sock_release(struct socket *sock)",
      "621: {",
      "622:  __sock_release(sock, NULL);",
      "623: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1172: static int sock_close(struct inode *inode, struct file *filp)",
      "1173: {",
      "1175:  return 0;",
      "1176: }",
      "",
      "[Removed Lines]",
      "1174:  sock_release(SOCKET_I(inode));",
      "",
      "[Added Lines]",
      "1186:  __sock_release(SOCKET_I(inode), inode);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "152524231023c76b3b7b3e71017c7f951812868d",
      "candidate_info": {
        "commit_hash": "152524231023c76b3b7b3e71017c7f951812868d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/152524231023c76b3b7b3e71017c7f951812868d",
        "files": [
          "include/linux/net.h",
          "net/socket.c"
        ],
        "message": "net: add support for ->poll_mask in proto_ops\n\nThe socket file operations still implement ->poll until all protocols are\nswitched over.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>",
        "before_after_code_files": [
          "include/linux/net.h||include/linux/net.h",
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/socket.c||net/socket.c"
          ],
          "candidate": [
            "net/socket.c||net/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/net.h||include/linux/net.h": [
          "File: include/linux/net.h -> include/linux/net.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  int  (*getname)   (struct socket *sock,",
          "148:           struct sockaddr *addr,",
          "149:           int peer);",
          "150:  __poll_t (*poll)      (struct file *file, struct socket *sock,",
          "151:           struct poll_table_struct *wait);",
          "152:  int  (*ioctl)     (struct socket *sock, unsigned int cmd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:  __poll_t (*poll_mask) (struct socket *sock, __poll_t events);",
          "",
          "---------------"
        ],
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: static int sock_mmap(struct file *file, struct vm_area_struct *vma);",
          "119: static int sock_close(struct inode *inode, struct file *file);",
          "122: static long sock_ioctl(struct file *file, unsigned int cmd, unsigned long arg);",
          "123: #ifdef CONFIG_COMPAT",
          "124: static long compat_sock_ioctl(struct file *file,",
          "",
          "[Removed Lines]",
          "120: static __poll_t sock_poll(struct file *file,",
          "121:          struct poll_table_struct *wait);",
          "",
          "[Added Lines]",
          "120: static struct wait_queue_head *sock_get_poll_head(struct file *file,",
          "121:   __poll_t events);",
          "122: static __poll_t sock_poll_mask(struct file *file, __poll_t);",
          "123: static __poll_t sock_poll(struct file *file, struct poll_table_struct *wait);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:  .llseek = no_llseek,",
          "142:  .read_iter = sock_read_iter,",
          "143:  .write_iter = sock_write_iter,",
          "144:  .poll =  sock_poll,",
          "145:  .unlocked_ioctl = sock_ioctl,",
          "146: #ifdef CONFIG_COMPAT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:  .get_poll_head = sock_get_poll_head,",
          "147:  .poll_mask = sock_poll_mask,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1114: }",
          "1115: EXPORT_SYMBOL(sock_create_lite);",
          "1118: static __poll_t sock_poll(struct file *file, poll_table *wait)",
          "1119: {",
          "1120:  struct socket *sock = file->private_data;",
          "1125: }",
          "1127: static int sock_mmap(struct file *file, struct vm_area_struct *vma)",
          "",
          "[Removed Lines]",
          "1121:  __poll_t events = poll_requested_events(wait);",
          "1123:  sock_poll_busy_loop(sock, events);",
          "1124:  return sock->ops->poll(file, sock, wait) | sock_poll_busy_flag(sock);",
          "",
          "[Added Lines]",
          "1121: static struct wait_queue_head *sock_get_poll_head(struct file *file,",
          "1122:   __poll_t events)",
          "1123: {",
          "1124:  struct socket *sock = file->private_data;",
          "1126:  if (!sock->ops->poll_mask)",
          "1127:   return NULL;",
          "1128:  sock_poll_busy_loop(sock, events);",
          "1129:  return sk_sleep(sock->sk);",
          "1130: }",
          "1132: static __poll_t sock_poll_mask(struct file *file, __poll_t events)",
          "1133: {",
          "1134:  struct socket *sock = file->private_data;",
          "1141:  smp_mb();",
          "1144:  return sock->ops->poll_mask(sock, events) |",
          "1145:   (sk_can_busy_loop(sock->sk) ? POLL_BUSY_LOOP : 0);",
          "1146: }",
          "1152:  __poll_t events = poll_requested_events(wait), mask = 0;",
          "1154:  if (sock->ops->poll) {",
          "1155:   sock_poll_busy_loop(sock, events);",
          "1156:   mask = sock->ops->poll(file, sock, wait);",
          "1157:  } else if (sock->ops->poll_mask) {",
          "1158:   sock_poll_wait(file, sock_get_poll_head(file, events), wait);",
          "1159:   mask = sock->ops->poll_mask(sock, events);",
          "1160:  }",
          "1162:  return mask | sock_poll_busy_flag(sock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cafb37633a1230011c5415e6f394b05260d21ad",
      "candidate_info": {
        "commit_hash": "3cafb37633a1230011c5415e6f394b05260d21ad",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3cafb37633a1230011c5415e6f394b05260d21ad",
        "files": [
          "include/net/busy_poll.h",
          "net/socket.c"
        ],
        "message": "net: refactor socket_poll\n\nFactor out two busy poll related helpers for late reuse, and remove\na command that isn't very helpful, especially with the __poll_t\nannotations in place.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>",
        "before_after_code_files": [
          "include/net/busy_poll.h||include/net/busy_poll.h",
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/socket.c||net/socket.c"
          ],
          "candidate": [
            "net/socket.c||net/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/busy_poll.h||include/net/busy_poll.h": [
          "File: include/net/busy_poll.h -> include/net/busy_poll.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: #endif",
          "122: }",
          "125: static inline void skb_mark_napi_id(struct sk_buff *skb,",
          "126:         struct napi_struct *napi)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: static inline void sock_poll_busy_loop(struct socket *sock, __poll_t events)",
          "125: {",
          "126:  if (sk_can_busy_loop(sock->sk) &&",
          "127:      events && (events & POLL_BUSY_LOOP)) {",
          "129:   sk_busy_loop(sock->sk, 1);",
          "130:  }",
          "131: }",
          "134: static inline __poll_t sock_poll_busy_flag(struct socket *sock)",
          "135: {",
          "136:  return sk_can_busy_loop(sock->sk) ? POLL_BUSY_LOOP : 0;",
          "137: }",
          "",
          "---------------"
        ],
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118: static __poll_t sock_poll(struct file *file, poll_table *wait)",
          "1119: {",
          "1138: }",
          "1140: static int sock_mmap(struct file *file, struct vm_area_struct *vma)",
          "",
          "[Removed Lines]",
          "1120:  __poll_t busy_flag = 0;",
          "1121:  struct socket *sock;",
          "1126:  sock = file->private_data;",
          "1128:  if (sk_can_busy_loop(sock->sk)) {",
          "1130:   busy_flag = POLL_BUSY_LOOP;",
          "1133:   if (wait && (wait->_key & POLL_BUSY_LOOP))",
          "1134:    sk_busy_loop(sock->sk, 1);",
          "1135:  }",
          "1137:  return busy_flag | sock->ops->poll(file, sock, wait);",
          "",
          "[Added Lines]",
          "1120:  struct socket *sock = file->private_data;",
          "1121:  __poll_t events = poll_requested_events(wait);",
          "1123:  sock_poll_busy_loop(sock, events);",
          "1124:  return sock->ops->poll(file, sock, wait) | sock_poll_busy_flag(sock);",
          "",
          "---------------"
        ]
      }
    }
  ]
}