{
  "cve_id": "CVE-2011-4127",
  "cve_desc": "The Linux kernel before 3.2.2 does not properly restrict SG_IO ioctl calls, which allows local users to bypass intended restrictions on disk read and write operations by sending a SCSI command to (1) a partition block device or (2) an LVM volume.",
  "repo": "torvalds/linux",
  "patch_hash": "0bfc96cb77224736dfa35c3c555d37b3646ef35e",
  "patch_info": {
    "commit_hash": "0bfc96cb77224736dfa35c3c555d37b3646ef35e",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/0bfc96cb77224736dfa35c3c555d37b3646ef35e",
    "files": [
      "block/scsi_ioctl.c",
      "drivers/scsi/sd.c",
      "include/linux/blkdev.h"
    ],
    "message": "block: fail SCSI passthrough ioctls on partition devices\n\nLinux allows executing the SG_IO ioctl on a partition or LVM volume, and\nwill pass the command to the underlying block device.  This is\nwell-known, but it is also a large security problem when (via Unix\npermissions, ACLs, SELinux or a combination thereof) a program or user\nneeds to be granted access only to part of the disk.\n\nThis patch lets partitions forward a small set of harmless ioctls;\nothers are logged with printk so that we can see which ioctls are\nactually sent.  In my tests only CDROM_GET_CAPABILITY actually occurred.\nOf course it was being sent to a (partition on a) hard disk, so it would\nhave failed with ENOTTY and the patch isn't changing anything in\npractice.  Still, I'm treating it specially to avoid spamming the logs.\n\nIn principle, this restriction should include programs running with\nCAP_SYS_RAWIO.  If for example I let a program access /dev/sda2 and\n/dev/sdb, it still should not be able to read/write outside the\nboundaries of /dev/sda2 independent of the capabilities.  However, for\nnow programs with CAP_SYS_RAWIO will still be allowed to send the\nioctls.  Their actions will still be logged.\n\nThis patch does not affect the non-libata IDE driver.  That driver\nhowever already tests for bd != bd->bd_contains before issuing some\nioctl; it could be restricted further to forbid these ioctls even for\nprograms running with CAP_SYS_ADMIN/CAP_SYS_RAWIO.\n\nCc: linux-scsi@vger.kernel.org\nCc: Jens Axboe <axboe@kernel.dk>\nCc: James Bottomley <JBottomley@parallels.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\n[ Make it also print the command name when warning - Linus ]\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "block/scsi_ioctl.c||block/scsi_ioctl.c",
      "drivers/scsi/sd.c||drivers/scsi/sd.c",
      "include/linux/blkdev.h||include/linux/blkdev.h"
    ]
  },
  "patch_diff": {
    "block/scsi_ioctl.c||block/scsi_ioctl.c": [
      "File: block/scsi_ioctl.c -> block/scsi_ioctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include <linux/capability.h>",
      "25: #include <linux/completion.h>",
      "26: #include <linux/cdrom.h>",
      "27: #include <linux/slab.h>",
      "28: #include <linux/times.h>",
      "29: #include <asm/uaccess.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #include <linux/ratelimit.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "690: }",
      "691: EXPORT_SYMBOL(scsi_cmd_ioctl);",
      "693: int scsi_cmd_blk_ioctl(struct block_device *bd, fmode_t mode,",
      "694:          unsigned int cmd, void __user *arg)",
      "695: {",
      "696:  return scsi_cmd_ioctl(bd->bd_disk->queue, bd->bd_disk, mode, cmd, arg);",
      "697: }",
      "698: EXPORT_SYMBOL(scsi_cmd_blk_ioctl);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "694: int scsi_verify_blk_ioctl(struct block_device *bd, unsigned int cmd)",
      "695: {",
      "696:  if (bd && bd == bd->bd_contains)",
      "697:   return 0;",
      "702:  switch (cmd) {",
      "703:  case SCSI_IOCTL_GET_IDLUN:",
      "704:  case SCSI_IOCTL_GET_BUS_NUMBER:",
      "705:  case SCSI_IOCTL_GET_PCI:",
      "706:  case SCSI_IOCTL_PROBE_HOST:",
      "707:  case SG_GET_VERSION_NUM:",
      "708:  case SG_SET_TIMEOUT:",
      "709:  case SG_GET_TIMEOUT:",
      "710:  case SG_GET_RESERVED_SIZE:",
      "711:  case SG_SET_RESERVED_SIZE:",
      "712:  case SG_EMULATED_HOST:",
      "713:   return 0;",
      "714:  case CDROM_GET_CAPABILITY:",
      "719:   return -ENOIOCTLCMD;",
      "720:  default:",
      "721:   break;",
      "722:  }",
      "725:  printk_ratelimited(KERN_WARNING",
      "726:       \"%s: sending ioctl %x to a partition!\\n\", current->comm, cmd);",
      "728:  return capable(CAP_SYS_RAWIO) ? 0 : -ENOIOCTLCMD;",
      "729: }",
      "730: EXPORT_SYMBOL(scsi_verify_blk_ioctl);",
      "735:  int ret;",
      "737:  ret = scsi_verify_blk_ioctl(bd, cmd);",
      "738:  if (ret < 0)",
      "739:   return ret;",
      "",
      "---------------"
    ],
    "drivers/scsi/sd.c||drivers/scsi/sd.c": [
      "File: drivers/scsi/sd.c -> drivers/scsi/sd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1075:  SCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, \"sd_ioctl: disk=%s, \"",
      "1076:         \"cmd=0x%x\\n\", disk->disk_name, cmd));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1078:  error = scsi_verify_blk_ioctl(bdev, cmd);",
      "1079:  if (error < 0)",
      "1080:   return error;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1267:       unsigned int cmd, unsigned long arg)",
      "1268: {",
      "1269:  struct scsi_device *sdev = scsi_disk(bdev->bd_disk)->device;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1274:  int ret;",
      "1276:  ret = scsi_verify_blk_ioctl(bdev, cmd);",
      "1277:  if (ret < 0)",
      "1278:   return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1278:   return -ENODEV;",
      "1280:  if (sdev->host->hostt->compat_ioctl) {",
      "1283:   ret = sdev->host->hostt->compat_ioctl(sdev, cmd, (void __user *)arg);",
      "1285:   return ret;",
      "",
      "[Removed Lines]",
      "1281:   int ret;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/linux/blkdev.h||include/linux/blkdev.h": [
      "File: include/linux/blkdev.h -> include/linux/blkdev.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "675:          struct request *rq);",
      "676: extern void blk_delay_queue(struct request_queue *, unsigned long);",
      "677: extern void blk_recount_segments(struct request_queue *, struct bio *);",
      "678: extern int scsi_cmd_blk_ioctl(struct block_device *, fmode_t,",
      "679:          unsigned int, void __user *);",
      "680: extern int scsi_cmd_ioctl(struct request_queue *, struct gendisk *, fmode_t,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "678: extern int scsi_verify_blk_ioctl(struct block_device *, unsigned int);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6d9359280753d2955f86d6411047516a9431eb51",
      "candidate_info": {
        "commit_hash": "6d9359280753d2955f86d6411047516a9431eb51",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6d9359280753d2955f86d6411047516a9431eb51",
        "files": [
          "block/scsi_ioctl.c"
        ],
        "message": "scsi: Silence unnecessary warnings about ioctl to partition\n\nSometimes, warnings about ioctls to partition happen often enough that they\nform majority of the warnings in the kernel log and users complain. In some\ncases warnings are about ioctls such as SG_IO so it's not good to get rid of\nthe warnings completely as they can ease debugging of userspace problems\nwhen ioctl is refused.\n\nSince I have seen warnings from lots of commands, including some proprietary\nuserspace applications, I don't think disallowing the ioctls for processes\nwith CAP_SYS_RAWIO will happen in the near future if ever. So lets just\nstop warning for processes with CAP_SYS_RAWIO for which ioctl is allowed.\n\nCC: Paolo Bonzini <pbonzini@redhat.com>\nCC: James Bottomley <JBottomley@parallels.com>\nCC: linux-scsi@vger.kernel.org\nAcked-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "block/scsi_ioctl.c||block/scsi_ioctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "block/scsi_ioctl.c||block/scsi_ioctl.c"
          ],
          "candidate": [
            "block/scsi_ioctl.c||block/scsi_ioctl.c"
          ]
        }
      },
      "candidate_diff": {
        "block/scsi_ioctl.c||block/scsi_ioctl.c": [
          "File: block/scsi_ioctl.c -> block/scsi_ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "721:   break;",
          "722:  }",
          "725:  printk_ratelimited(KERN_WARNING",
          "726:       \"%s: sending ioctl %x to a partition!\\n\", current->comm, cmd);",
          "729: }",
          "730: EXPORT_SYMBOL(scsi_verify_blk_ioctl);",
          "",
          "[Removed Lines]",
          "728:  return capable(CAP_SYS_RAWIO) ? 0 : -ENOIOCTLCMD;",
          "",
          "[Added Lines]",
          "724:  if (capable(CAP_SYS_RAWIO))",
          "725:   return 0;",
          "731:  return -ENOIOCTLCMD;",
          "",
          "---------------"
        ]
      }
    }
  ]
}