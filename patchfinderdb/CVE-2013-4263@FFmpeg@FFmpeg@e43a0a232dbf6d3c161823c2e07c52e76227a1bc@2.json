{
  "cve_id": "CVE-2013-4263",
  "cve_desc": "libavfilter in FFmpeg before 2.0.1 has unspecified impact and remote vectors related to a crafted \"plane,\" which triggers an out-of-bounds heap write.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
  "patch_info": {
    "commit_hash": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "files": [
      "libavfilter/vf_boxblur.c",
      "libavfilter/vf_delogo.c",
      "libavfilter/vf_fieldmatch.c",
      "libavfilter/vf_fieldorder.c",
      "libavfilter/vf_gradfun.c",
      "libavfilter/vf_hflip.c",
      "libavfilter/vf_kerndeint.c",
      "libavfilter/vf_lut.c",
      "libavfilter/vf_pad.c",
      "libavfilter/vf_showinfo.c",
      "libavfilter/vf_vignette.c"
    ],
    "message": "avfilter: fix plane validity checks\n\nFixes out of array accesses\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
      "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
      "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c",
      "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
      "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
      "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
      "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
      "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
      "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
      "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c",
      "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c"
    ]
  },
  "patch_diff": {
    "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c": [
      "File: libavfilter/vf_boxblur.c -> libavfilter/vf_boxblur.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "313:     }",
      "314:     av_frame_copy_props(out, in);",
      "317:         hblur(out->data[plane], out->linesize[plane],",
      "318:               in ->data[plane], in ->linesize[plane],",
      "319:               w[plane], h[plane], s->radius[plane], s->power[plane],",
      "320:               s->temp);",
      "323:         vblur(out->data[plane], out->linesize[plane],",
      "324:               out->data[plane], out->linesize[plane],",
      "325:               w[plane], h[plane], s->radius[plane], s->power[plane],",
      "",
      "[Removed Lines]",
      "316:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
      "322:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
      "",
      "[Added Lines]",
      "316:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
      "322:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c": [
      "File: libavfilter/vf_delogo.c -> libavfilter/vf_delogo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "237:     if (!sar.num)",
      "238:         sar.num = sar.den = 1;",
      "241:         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;",
      "242:         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;",
      "",
      "[Removed Lines]",
      "240:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "240:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c": [
      "File: libavfilter/vf_fieldmatch.c -> libavfilter/vf_fieldmatch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "608:                         const AVFrame *src, int field)",
      "609: {",
      "610:     int plane;",
      "612:         av_image_copy_plane(dst->data[plane] + field*dst->linesize[plane], dst->linesize[plane] << 1,",
      "613:                             src->data[plane] + field*src->linesize[plane], src->linesize[plane] << 1,",
      "614:                             get_width(fm, src, plane), get_height(fm, src, plane) / 2);",
      "",
      "[Removed Lines]",
      "611:     for (plane = 0; plane < 4 && src->data[plane]; plane++)",
      "",
      "[Added Lines]",
      "611:     for (plane = 0; plane < 4 && src->data[plane] && src->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c": [
      "File: libavfilter/vf_fieldorder.c -> libavfilter/vf_fieldorder.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:             \"picture will move %s one line\\n\",",
      "107:             s->dst_tff ? \"up\" : \"down\");",
      "108:     h = frame->height;",
      "110:         line_step = frame->linesize[plane];",
      "111:         line_size = s->line_size[plane];",
      "112:         data = frame->data[plane];",
      "",
      "[Removed Lines]",
      "109:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "109:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c": [
      "File: libavfilter/vf_gradfun.c -> libavfilter/vf_gradfun.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "199:         av_frame_copy_props(out, in);",
      "200:     }",
      "203:         int w = inlink->w;",
      "204:         int h = inlink->h;",
      "205:         int r = s->radius;",
      "",
      "[Removed Lines]",
      "202:     for (p = 0; p < 4 && in->data[p]; p++) {",
      "",
      "[Added Lines]",
      "202:     for (p = 0; p < 4 && in->data[p] && in->linesize[p]; p++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c": [
      "File: libavfilter/vf_hflip.c -> libavfilter/vf_hflip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:     if (av_pix_fmt_desc_get(inlink->format)->flags & AV_PIX_FMT_FLAG_PAL)",
      "91:         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);",
      "94:         const int width  = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->w, s->hsub) : inlink->w;",
      "95:         const int height = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->h, s->vsub) : inlink->h;",
      "96:         step = s->max_step[plane];",
      "",
      "[Removed Lines]",
      "93:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "93:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c": [
      "File: libavfilter/vf_kerndeint.c -> libavfilter/vf_kerndeint.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:     av_frame_copy_props(outpic, inpic);",
      "151:     outpic->interlaced_frame = 0;",
      "154:         h = plane == 0 ? inlink->h : FF_CEIL_RSHIFT(inlink->h, kerndeint->vsub);",
      "155:         bwidth = kerndeint->tmp_bwidth[plane];",
      "",
      "[Removed Lines]",
      "153:     for (plane = 0; inpic->data[plane] && plane < 4; plane++) {",
      "",
      "[Added Lines]",
      "153:     for (plane = 0; plane < 4 && inpic->data[plane] && inpic->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_lut.c||libavfilter/vf_lut.c": [
      "File: libavfilter/vf_lut.c -> libavfilter/vf_lut.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:         }",
      "305:     } else {",
      "308:             int vsub = plane == 1 || plane == 2 ? s->vsub : 0;",
      "309:             int hsub = plane == 1 || plane == 2 ? s->hsub : 0;",
      "310:             int h = FF_CEIL_RSHIFT(inlink->h, vsub);",
      "",
      "[Removed Lines]",
      "307:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "307:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_pad.c||libavfilter/vf_pad.c": [
      "File: libavfilter/vf_pad.c -> libavfilter/vf_pad.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "214:     frame->width  = w;",
      "215:     frame->height = h;",
      "218:         int hsub = s->draw.hsub[plane];",
      "219:         int vsub = s->draw.vsub[plane];",
      "220:         frame->data[plane] += (s->x >> hsub) * s->draw.pixelstep[plane] +",
      "",
      "[Removed Lines]",
      "217:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "217:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "311:         int i;",
      "313:         out = in;",
      "315:             int hsub = s->draw.hsub[i];",
      "316:             int vsub = s->draw.vsub[i];",
      "317:             out->data[i] -= (s->x >> hsub) * s->draw.pixelstep[i] +",
      "",
      "[Removed Lines]",
      "314:         for (i = 0; i < 4 && out->data[i]; i++) {",
      "",
      "[Added Lines]",
      "314:         for (i = 0; i < 4 && out->data[i] && out->linesize[i]; i++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
      "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     uint32_t plane_checksum[4] = {0}, checksum = 0;",
      "39:     int i, plane, vsub = desc->log2_chroma_h;",
      "42:         int64_t linesize = av_image_get_linesize(frame->format, frame->width, plane);",
      "43:         uint8_t *data = frame->data[plane];",
      "44:         int h = plane == 1 || plane == 2 ? FF_CEIL_RSHIFT(inlink->h, vsub) : inlink->h;",
      "",
      "[Removed Lines]",
      "41:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "41:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:            av_get_picture_type_char(frame->pict_type),",
      "69:            checksum, plane_checksum[0]);",
      "72:         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);",
      "73:     av_log(ctx, AV_LOG_INFO, \"]\\n\");",
      "",
      "[Removed Lines]",
      "71:     for (plane = 1; plane < 4 && frame->data[plane]; plane++)",
      "",
      "[Added Lines]",
      "71:     for (plane = 1; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c": [
      "File: libavfilter/vf_vignette.c -> libavfilter/vf_vignette.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     } else {",
      "240:         int plane;",
      "243:             uint8_t       *dst = out->data[plane];",
      "244:             const uint8_t *src = in ->data[plane];",
      "245:             const float *fmap = s->fmap;",
      "",
      "[Removed Lines]",
      "242:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "242:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49dd71a6f1bc9e5875ff98cf5e45710b8943b0f5",
      "candidate_info": {
        "commit_hash": "49dd71a6f1bc9e5875ff98cf5e45710b8943b0f5",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/49dd71a6f1bc9e5875ff98cf5e45710b8943b0f5",
        "files": [
          "libavfilter/vf_fieldorder.c"
        ],
        "message": "vf_fieldorder: reindent",
        "before_after_code_files": [
          "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c"
          ],
          "candidate": [
            "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c": [
          "File: libavfilter/vf_fieldorder.c -> libavfilter/vf_fieldorder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         frame->video->top_field_first == s->dst_tff)",
          "134:         return ff_filter_frame(outlink, frame);",
          "157:                 }",
          "172:                 }",
          "173:             }",
          "174:         }",
          "177:     return ff_filter_frame(outlink, frame);",
          "178: }",
          "",
          "[Removed Lines]",
          "136:         av_dlog(ctx,",
          "137:                 \"picture will move %s one line\\n\",",
          "138:                 s->dst_tff ? \"up\" : \"down\");",
          "139:         h = frame->video->h;",
          "140:         for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "141:             line_step = frame->linesize[plane];",
          "142:             line_size = s->line_size[plane];",
          "143:             data = frame->data[plane];",
          "144:             if (s->dst_tff) {",
          "150:                 for (line = 0; line < h; line++) {",
          "151:                     if (1 + line < frame->video->h) {",
          "152:                         memcpy(data, data + line_step, line_size);",
          "153:                     } else {",
          "154:                         memcpy(data, data - line_step - line_step, line_size);",
          "155:                     }",
          "156:                     data += line_step;",
          "158:             } else {",
          "164:                 data += (h - 1) * line_step;",
          "165:                 for (line = h - 1; line >= 0 ; line--) {",
          "166:                     if (line > 0) {",
          "167:                         memcpy(data, data - line_step, line_size);",
          "168:                     } else {",
          "169:                         memcpy(data, data + line_step + line_step, line_size);",
          "170:                     }",
          "171:                     data -= line_step;",
          "175:         frame->video->top_field_first = s->dst_tff;",
          "",
          "[Added Lines]",
          "136:     av_dlog(ctx,",
          "137:             \"picture will move %s one line\\n\",",
          "138:             s->dst_tff ? \"up\" : \"down\");",
          "139:     h = frame->video->h;",
          "140:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
          "141:         line_step = frame->linesize[plane];",
          "142:         line_size = s->line_size[plane];",
          "143:         data = frame->data[plane];",
          "144:         if (s->dst_tff) {",
          "150:             for (line = 0; line < h; line++) {",
          "151:                 if (1 + line < frame->video->h) {",
          "152:                     memcpy(data, data + line_step, line_size);",
          "153:                 } else {",
          "154:                     memcpy(data, data - line_step - line_step, line_size);",
          "156:                 data += line_step;",
          "157:             }",
          "158:         } else {",
          "164:             data += (h - 1) * line_step;",
          "165:             for (line = h - 1; line >= 0 ; line--) {",
          "166:                 if (line > 0) {",
          "167:                     memcpy(data, data - line_step, line_size);",
          "168:                 } else {",
          "169:                     memcpy(data, data + line_step + line_step, line_size);",
          "171:                 data -= line_step;",
          "174:     }",
          "175:     frame->video->top_field_first = s->dst_tff;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2aecfd4f209688a8365f18b351f0ecf12fe5f873",
      "candidate_info": {
        "commit_hash": "2aecfd4f209688a8365f18b351f0ecf12fe5f873",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2aecfd4f209688a8365f18b351f0ecf12fe5f873",
        "files": [
          "libavfilter/vf_showinfo.c"
        ],
        "message": "vf_showinfo: check return code of av_image_get_linesize()\n\nFixes CID703716\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ],
          "candidate": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
          "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     int i, plane, vsub = desc->log2_chroma_h;",
          "54:     for (plane = 0; picref->data[plane] && plane < 4; plane++) {",
          "56:         uint8_t *data = picref->data[plane];",
          "57:         int h = plane == 1 || plane == 2 ? inlink->h >> vsub : inlink->h;",
          "59:         for (i = 0; i < h; i++) {",
          "60:             plane_checksum[plane] = av_adler32_update(plane_checksum[plane], data, linesize);",
          "61:             checksum = av_adler32_update(checksum, data, linesize);",
          "",
          "[Removed Lines]",
          "55:         size_t linesize = av_image_get_linesize(picref->format, picref->video->w, plane);",
          "",
          "[Added Lines]",
          "55:         int64_t linesize = av_image_get_linesize(picref->format, picref->video->w, plane);",
          "59:         if (linesize < 0)",
          "60:             return linesize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb7e7e82e17b0353fbcfdee616cfe89e525eae53",
      "candidate_info": {
        "commit_hash": "eb7e7e82e17b0353fbcfdee616cfe89e525eae53",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/eb7e7e82e17b0353fbcfdee616cfe89e525eae53",
        "files": [
          "libavfilter/vf_hflip.c"
        ],
        "message": "vf_hflip: switch to filter_frame\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c"
          ],
          "candidate": [
            "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c": [
          "File: libavfilter/vf_hflip.c -> libavfilter/vf_hflip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     return 0;",
          "87: }",
          "90: {",
          "98:     if (av_pix_fmt_desc_get(inlink->format)->flags & PIX_FMT_PAL)",
          "113:         step = flip->max_step[plane];",
          "114:         hsub = (plane == 1 || plane == 2) ? flip->hsub : 0;",
          "115:         vsub = (plane == 1 || plane == 2) ? flip->vsub : 0;",
          "120:             switch (step) {",
          "121:             case 1:",
          "122:                 for (j = 0; j < (inlink->w >> hsub); j++)",
          "",
          "[Removed Lines]",
          "89: static int start_frame(AVFilterLink *inlink, AVFilterBufferRef *picref)",
          "91:     AVFilterLink *outlink = inlink->dst->outputs[0];",
          "93:     outlink->out_buf =",
          "94:         ff_get_video_buffer(outlink, AV_PERM_WRITE, outlink->w, outlink->h);",
          "95:     avfilter_copy_buffer_ref_props(outlink->out_buf, picref);",
          "99:         memcpy(inlink->dst->outputs[0]->out_buf->data[1], picref->data[1], AVPALETTE_SIZE);",
          "101:     return ff_start_frame(outlink, avfilter_ref_buffer(outlink->out_buf, ~0));",
          "102: }",
          "104: static int draw_slice(AVFilterLink *inlink, int y, int h, int slice_dir)",
          "105: {",
          "106:     FlipContext *flip = inlink->dst->priv;",
          "107:     AVFilterBufferRef *inpic  = inlink->cur_buf;",
          "108:     AVFilterBufferRef *outpic = inlink->dst->outputs[0]->out_buf;",
          "109:     uint8_t *inrow, *outrow;",
          "110:     int i, j, plane, step, hsub, vsub;",
          "112:     for (plane = 0; plane < 4 && inpic->data[plane]; plane++) {",
          "117:         outrow = outpic->data[plane] + (y>>vsub) * outpic->linesize[plane];",
          "118:         inrow  = inpic ->data[plane] + (y>>vsub) * inpic ->linesize[plane] + ((inlink->w >> hsub) - 1) * step;",
          "119:         for (i = 0; i < h>>vsub; i++) {",
          "",
          "[Added Lines]",
          "89: static int filter_frame(AVFilterLink *inlink, AVFilterBufferRef *in)",
          "91:     AVFilterContext *ctx  = inlink->dst;",
          "92:     FlipContext *flip     = ctx->priv;",
          "93:     AVFilterLink *outlink = ctx->outputs[0];",
          "94:     AVFilterBufferRef *out;",
          "95:     uint8_t *inrow, *outrow;",
          "96:     int i, j, plane, step, hsub, vsub;",
          "98:     out = ff_get_video_buffer(outlink, AV_PERM_WRITE, outlink->w, outlink->h);",
          "99:     if (!out) {",
          "100:         avfilter_unref_bufferp(&in);",
          "101:         return AVERROR(ENOMEM);",
          "102:     }",
          "103:     avfilter_copy_buffer_ref_props(out, in);",
          "107:         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);",
          "109:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "114:         outrow = out->data[plane];",
          "115:         inrow  = in ->data[plane] + ((inlink->w >> hsub) - 1) * step;",
          "116:         for (i = 0; i < in->video->h >> vsub; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:                     memcpy(outrow + j*step, inrow - j*step, step);",
          "158:             }",
          "162:         }",
          "163:     }",
          "166: }",
          "168: static const AVFilterPad avfilter_vf_hflip_inputs[] = {",
          "169:     {",
          "170:         .name         = \"default\",",
          "171:         .type         = AVMEDIA_TYPE_VIDEO,",
          "174:         .config_props = config_props,",
          "175:         .min_perms    = AV_PERM_READ,",
          "176:     },",
          "",
          "[Removed Lines]",
          "160:             inrow  += inpic ->linesize[plane];",
          "161:             outrow += outpic->linesize[plane];",
          "165:     return ff_draw_slice(inlink->dst->outputs[0], y, h, slice_dir);",
          "172:         .start_frame  = start_frame,",
          "173:         .draw_slice   = draw_slice,",
          "",
          "[Added Lines]",
          "157:             inrow  += in ->linesize[plane];",
          "158:             outrow += out->linesize[plane];",
          "162:     avfilter_unref_bufferp(&in);",
          "163:     return ff_filter_frame(outlink, out);",
          "170:         .filter_frame = filter_frame,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bff576c779476c5325edb2e90828051138416759",
      "candidate_info": {
        "commit_hash": "bff576c779476c5325edb2e90828051138416759",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/bff576c779476c5325edb2e90828051138416759",
        "files": [
          "libavfilter/vf_lut.c"
        ],
        "message": "vf_lut: switch to filter_frame\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_lut.c||libavfilter/vf_lut.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_lut.c||libavfilter/vf_lut.c"
          ],
          "candidate": [
            "libavfilter/vf_lut.c||libavfilter/vf_lut.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_lut.c||libavfilter/vf_lut.c": [
          "File: libavfilter/vf_lut.c -> libavfilter/vf_lut.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     return 0;",
          "260: }",
          "263: {",
          "264:     AVFilterContext *ctx = inlink->dst;",
          "265:     LutContext *lut = ctx->priv;",
          "266:     AVFilterLink *outlink = ctx->outputs[0];",
          "269:     uint8_t *inrow, *outrow, *inrow0, *outrow0;",
          "270:     int i, j, plane;",
          "272:     if (lut->is_rgb) {",
          "278:             int w = inlink->w;",
          "279:             const uint8_t (*tab)[256] = (const uint8_t (*)[256])lut->lut;",
          "280:             inrow  = inrow0;",
          "",
          "[Removed Lines]",
          "262: static int draw_slice(AVFilterLink *inlink, int y, int h, int slice_dir)",
          "267:     AVFilterBufferRef *inpic  = inlink ->cur_buf;",
          "268:     AVFilterBufferRef *outpic = outlink->out_buf;",
          "274:         inrow0  = inpic ->data[0] + y * inpic ->linesize[0];",
          "275:         outrow0 = outpic->data[0] + y * outpic->linesize[0];",
          "277:         for (i = 0; i < h; i ++) {",
          "",
          "[Added Lines]",
          "262: static int filter_frame(AVFilterLink *inlink, AVFilterBufferRef *in)",
          "267:     AVFilterBufferRef *out;",
          "271:     out = ff_get_video_buffer(outlink, AV_PERM_WRITE, outlink->w, outlink->h);",
          "272:     if (!out) {",
          "273:         avfilter_unref_bufferp(&in);",
          "274:         return AVERROR(ENOMEM);",
          "275:     }",
          "276:     avfilter_copy_buffer_ref_props(out, in);",
          "280:         inrow0  = in ->data[0];",
          "281:         outrow0 = out->data[0];",
          "283:         for (i = 0; i < in->video->h; i ++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:                 outrow += lut->step;",
          "294:                 inrow  += lut->step;",
          "295:             }",
          "298:         }",
          "299:     } else {",
          "302:             int vsub = plane == 1 || plane == 2 ? lut->vsub : 0;",
          "303:             int hsub = plane == 1 || plane == 2 ? lut->hsub : 0;",
          "309:                 const uint8_t *tab = lut->lut[plane];",
          "310:                 int w = (inlink->w + (1<<hsub) - 1)>>hsub;",
          "311:                 for (j = 0; j < w; j++)",
          "312:                     outrow[j] = tab[inrow[j]];",
          "315:             }",
          "316:         }",
          "317:     }",
          "320: }",
          "322: static const AVFilterPad inputs[] = {",
          "323:     { .name            = \"default\",",
          "324:       .type            = AVMEDIA_TYPE_VIDEO,",
          "326:       .config_props    = config_props,",
          "327:       .min_perms       = AV_PERM_READ, },",
          "328:     { .name = NULL}",
          "",
          "[Removed Lines]",
          "296:             inrow0  += inpic ->linesize[0];",
          "297:             outrow0 += outpic->linesize[0];",
          "301:         for (plane = 0; plane < 4 && inpic->data[plane]; plane++) {",
          "305:             inrow  = inpic ->data[plane] + (y>>vsub) * inpic ->linesize[plane];",
          "306:             outrow = outpic->data[plane] + (y>>vsub) * outpic->linesize[plane];",
          "308:             for (i = 0; i < (h + (1<<vsub) - 1)>>vsub; i ++) {",
          "313:                 inrow  += inpic ->linesize[plane];",
          "314:                 outrow += outpic->linesize[plane];",
          "319:     return ff_draw_slice(outlink, y, h, slice_dir);",
          "325:       .draw_slice      = draw_slice,",
          "",
          "[Added Lines]",
          "302:             inrow0  += in ->linesize[0];",
          "303:             outrow0 += out->linesize[0];",
          "307:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
          "311:             inrow  = in ->data[plane];",
          "312:             outrow = out->data[plane];",
          "314:             for (i = 0; i < (in->video->h + (1<<vsub) - 1)>>vsub; i ++) {",
          "319:                 inrow  += in ->linesize[plane];",
          "320:                 outrow += out->linesize[plane];",
          "325:     avfilter_unref_bufferp(&in);",
          "326:     return ff_filter_frame(outlink, out);",
          "332:       .filter_frame    = filter_frame,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a06bc10e7cb489c13613ac15c48b274013641d3",
      "candidate_info": {
        "commit_hash": "2a06bc10e7cb489c13613ac15c48b274013641d3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2a06bc10e7cb489c13613ac15c48b274013641d3",
        "files": [
          "libavfilter/vf_gradfun.c"
        ],
        "message": "vf_gradfun: switch to filter_frame, this filter did not support slices\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c"
          ],
          "candidate": [
            "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c": [
          "File: libavfilter/vf_gradfun.c -> libavfilter/vf_gradfun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     return 0;",
          "183: }",
          "191: {",
          "192:     GradFunContext *gf = inlink->dst->priv;",
          "194:     AVFilterLink *outlink = inlink->dst->outputs[0];",
          "199:         int w = inlink->w;",
          "200:         int h = inlink->h;",
          "201:         int r = gf->radius;",
          "",
          "[Removed Lines]",
          "185: static int null_draw_slice(AVFilterLink *link, int y, int h, int slice_dir)",
          "186: {",
          "187:     return 0;",
          "188: }",
          "190: static int end_frame(AVFilterLink *inlink)",
          "193:     AVFilterBufferRef *inpic = inlink->cur_buf;",
          "195:     AVFilterBufferRef *outpic = outlink->out_buf;",
          "196:     int p, ret;",
          "198:     for (p = 0; p < 4 && inpic->data[p]; p++) {",
          "",
          "[Added Lines]",
          "185: static int filter_frame(AVFilterLink *inlink, AVFilterBufferRef *in)",
          "189:     AVFilterBufferRef *out;",
          "190:     int p, direct;",
          "192:     if ((in->perms & AV_PERM_WRITE) && !(in->perms & AV_PERM_PRESERVE)) {",
          "193:         direct = 1;",
          "194:         out = in;",
          "195:     } else {",
          "196:         out = ff_get_video_buffer(outlink, AV_PERM_WRITE, outlink->w, outlink->h);",
          "197:         if (!out) {",
          "198:             avfilter_unref_bufferp(&in);",
          "199:             return AVERROR(ENOMEM);",
          "200:         }",
          "202:         avfilter_copy_buffer_ref_props(out, in);",
          "203:         out->video->w = outlink->w;",
          "204:         out->video->h = outlink->h;",
          "205:     }",
          "207:     for (p = 0; p < 4 && in->data[p]; p++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         }",
          "208:         if (FFMIN(w, h) > 2 * r)",
          "212:     }",
          "218: }",
          "220: static const AVFilterPad avfilter_vf_gradfun_inputs[] = {",
          "",
          "[Removed Lines]",
          "209:             filter(gf, outpic->data[p], inpic->data[p], w, h, outpic->linesize[p], inpic->linesize[p], r);",
          "210:         else if (outpic->data[p] != inpic->data[p])",
          "211:             av_image_copy_plane(outpic->data[p], outpic->linesize[p], inpic->data[p], inpic->linesize[p], w, h);",
          "214:     if ((ret = ff_draw_slice(outlink, 0, inlink->h, 1)) < 0 ||",
          "215:         (ret = ff_end_frame(outlink)) < 0)",
          "216:         return ret;",
          "217:     return 0;",
          "",
          "[Added Lines]",
          "218:             filter(gf, out->data[p], in->data[p], w, h, out->linesize[p], in->linesize[p], r);",
          "219:         else if (out->data[p] != in->data[p])",
          "220:             av_image_copy_plane(out->data[p], out->linesize[p], in->data[p], in->linesize[p], w, h);",
          "223:     if (!direct)",
          "224:         avfilter_unref_bufferp(&in);",
          "226:     return ff_filter_frame(outlink, out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:         .name         = \"default\",",
          "223:         .type         = AVMEDIA_TYPE_VIDEO,",
          "224:         .config_props = config_input,",
          "228:         .min_perms    = AV_PERM_READ,",
          "229:     },",
          "230:     { NULL }",
          "",
          "[Removed Lines]",
          "225:         .start_frame  = ff_inplace_start_frame,",
          "226:         .draw_slice   = null_draw_slice,",
          "227:         .end_frame    = end_frame,",
          "",
          "[Added Lines]",
          "234:         .filter_frame = filter_frame,",
          "",
          "---------------"
        ]
      }
    }
  ]
}