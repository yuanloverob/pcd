{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f585a84966f8f5de951705d746b264900ba205c5",
      "candidate_info": {
        "commit_hash": "f585a84966f8f5de951705d746b264900ba205c5",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f585a84966f8f5de951705d746b264900ba205c5",
        "files": [
          "bindings/java/capstone/Ppc_const.java",
          "bindings/ocaml/ppc_const.ml",
          "bindings/python/capstone/__init__.py",
          "bindings/python/capstone/ppc_const.py",
          "cstool/cstool.c",
          "include/capstone.h"
        ],
        "message": "add CS_VERSION_{MAJOR, MINOR, EXTRA}",
        "before_after_code_files": [
          "bindings/javcapstone/Ppc_const.java||bindings/java/capstone/Ppc_const.java",
          "bindings/ocaml/ppc_const.ml||bindings/ocaml/ppc_const.ml",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/capstone/ppc_const.py||bindings/python/capstone/ppc_const.py",
          "cstool/cstool.c||cstool/cstool.c",
          "include/capstone.h||include/capstone.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/Ppc_const.java||bindings/java/capstone/Ppc_const.java": [
          "File: bindings/javcapstone/Ppc_const.java -> bindings/java/capstone/Ppc_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:  public static final int PPC_OP_INVALID = 0;",
          "211:  public static final int PPC_OP_REG = 1;",
          "212:  public static final int PPC_OP_IMM = 2;",
          "213:  public static final int PPC_OP_MEM = 3;",
          "214:  public static final int PPC_OP_CRX = 64;",
          "",
          "---------------"
        ],
        "bindings/ocaml/ppc_const.ml||bindings/ocaml/ppc_const.ml": [
          "File: bindings/ocaml/ppc_const.ml -> bindings/ocaml/ppc_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: let _PPC_BH_PLUS = 1;;",
          "21: let _PPC_BH_MINUS = 2;;",
          "31: (* PPC registers *)",
          "33: let _PPC_REG_INVALID = 0;;",
          "",
          "[Removed Lines]",
          "23: (* Operand type for instruction's operands *)",
          "25: let _PPC_OP_INVALID = 0;;",
          "26: let _PPC_OP_REG = 1;;",
          "27: let _PPC_OP_IMM = 2;;",
          "28: let _PPC_OP_MEM = 3;;",
          "29: let _PPC_OP_CRX = 64;;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: let _PPC_REG_CR1EQ = 177;;",
          "211: let _PPC_REG_ENDING = 178;;",
          "213: (* PPC instruction *)",
          "215: let _PPC_INS_INVALID = 0;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: (* Operand type for instruction's operands *)",
          "207: let _PPC_OP_INVALID = 0;;",
          "208: let _PPC_OP_REG = 1;;",
          "209: let _PPC_OP_IMM = 2;;",
          "210: let _PPC_OP_MEM = 3;;",
          "211: let _PPC_OP_CRX = 64;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     'CS_API_MAJOR',",
          "20:     'CS_API_MINOR',",
          "22:     'CS_ARCH_ARM',",
          "23:     'CS_ARCH_ARM64',",
          "24:     'CS_ARCH_MIPS',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     'CS_VERSION_MAJOR',",
          "23:     'CS_VERSION_MINOR',",
          "24:     'CS_VERSION_EXTRA',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: CS_API_MAJOR = 3",
          "101: CS_API_MINOR = 0",
          "105: # architectures",
          "106: CS_ARCH_ARM = 0",
          "",
          "[Removed Lines]",
          "103: __version__ = \"%s.%s\" %(CS_API_MAJOR, CS_API_MINOR)",
          "",
          "[Added Lines]",
          "107: # Package version",
          "108: CS_VERSION_MAJOR = CS_API_MAJOR",
          "109: CS_VERSION_MINOR = CS_API_MINOR",
          "110: CS_VERSION_EXTRA = 5",
          "112: __version__ = \"%u.%u.%u\" %(CS_VERSION_MAJOR, CS_VERSION_MINOR, CS_VERSION_EXTRA)",
          "",
          "---------------"
        ],
        "bindings/python/capstone/ppc_const.py||bindings/python/capstone/ppc_const.py": [
          "File: bindings/python/capstone/ppc_const.py -> bindings/python/capstone/ppc_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: PPC_BH_PLUS = 1",
          "21: PPC_BH_MINUS = 2",
          "31: # PPC registers",
          "33: PPC_REG_INVALID = 0",
          "",
          "[Removed Lines]",
          "23: # Operand type for instruction's operands",
          "25: PPC_OP_INVALID = 0",
          "26: PPC_OP_REG = 1",
          "27: PPC_OP_IMM = 2",
          "28: PPC_OP_MEM = 3",
          "29: PPC_OP_CRX = 64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: PPC_REG_CR1EQ = 177",
          "211: PPC_REG_ENDING = 178",
          "213: # PPC instruction",
          "215: PPC_INS_INVALID = 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: # Operand type for instruction's operands",
          "207: PPC_OP_INVALID = 0",
          "208: PPC_OP_REG = 1",
          "209: PPC_OP_IMM = 2",
          "210: PPC_OP_MEM = 3",
          "211: PPC_OP_CRX = 64",
          "",
          "---------------"
        ],
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static void usage(char *prog)",
          "75: {",
          "77:  printf(\"Syntax: %s [-d] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "78:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "",
          "[Removed Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (core v%u.%u)\\n\\n\", VERSION, CS_API_MAJOR, CS_API_MINOR);",
          "",
          "[Added Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (core v%u.%u.%u)\\n\\n\", VERSION, CS_VERSION_MAJOR, CS_VERSION_MINOR, CS_VERSION_EXTRA);",
          "",
          "---------------"
        ],
        "include/capstone.h||include/capstone.h": [
          "File: include/capstone.h -> include/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #define CS_API_MAJOR 3",
          "55: #define CS_API_MINOR 0",
          "59: #define CS_MAKE_VERSION(major, minor) ((major << 8) + minor)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #define CS_VERSION_MAJOR CS_API_MAJOR",
          "59: #define CS_VERSION_MINOR CS_API_MINOR",
          "60: #define CS_VERSION_EXTRA 5",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae02bf1c5d15f9746c4187baa3a0510b0d87867b",
      "candidate_info": {
        "commit_hash": "ae02bf1c5d15f9746c4187baa3a0510b0d87867b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/ae02bf1c5d15f9746c4187baa3a0510b0d87867b",
        "files": [
          "CMakeLists.txt",
          "cstool/CMakeLists.txt",
          "cstool/cstool.c"
        ],
        "message": "cstool: compile with CMake using CMakeLists.txt in root dir",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: static void usage(char *prog)",
          "54: {",
          "56:  printf(\"Syntax: %s <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "57:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "",
          "[Removed Lines]",
          "55:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\", VERSION);",
          "",
          "[Added Lines]",
          "55:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\\n\", VERSION);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "972a6a67f3b49d851e14d1e31449b202966e9169",
      "candidate_info": {
        "commit_hash": "972a6a67f3b49d851e14d1e31449b202966e9169",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/972a6a67f3b49d851e14d1e31449b202966e9169",
        "files": [
          "suite/regress.py"
        ],
        "message": "added regression test for issue #702",
        "before_after_code_files": [
          "suite/regress.py||suite/regress.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "suite/regress.py||suite/regress.py": [
          "File: suite/regress.py -> suite/regress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:         (CS_ARCH_X86, CS_MODE_64, CS_OPT_SYNTAX_INTEL, 0x649123ffe1, b\"\\x0f\\x01\\x1d\\xa0\\x90\\x04\\x08\", \"lidt [rip + 0x80490a0]\"),",
          "461:         (CS_ARCH_X86, CS_MODE_32, CS_OPT_SYNTAX_INTEL, 0x9123ffe1, b\"\\x0f\\x01\\x1d\\xa0\\x90\\x04\\x08\", \"lidt [0x80490a0]\"),",
          "462:         (CS_ARCH_X86, CS_MODE_16, CS_OPT_SYNTAX_INTEL, 0xffe1, b\"\\x0f\\x01\\x1d\", \"lidt [di]\"),",
          "463: )",
          "465: _python3 = sys.version_info.major == 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:         # issues 702 https://github.com/aquynh/capstone/issues/702",
          "465:         (CS_ARCH_X86, CS_MODE_32, CS_OPT_SYNTAX_INTEL, 0, b\"\\x85\\xC8\", \"test eax, ecx\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f48111db0e346b12ced3282acf0aca2d9ee468ba",
      "candidate_info": {
        "commit_hash": "f48111db0e346b12ced3282acf0aca2d9ee468ba",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f48111db0e346b12ced3282acf0aca2d9ee468ba",
        "files": [
          "bindings/java/capstone/Arm64_const.java",
          "bindings/ocaml/arm64_const.ml",
          "bindings/python/capstone/arm64_const.py"
        ],
        "message": "bindings: update after #1064",
        "before_after_code_files": [
          "bindings/javcapstone/Arm64_const.java||bindings/java/capstone/Arm64_const.java",
          "bindings/ocaml/arm64_const.ml||bindings/ocaml/arm64_const.ml",
          "bindings/python/capstone/arm64_const.py||bindings/python/capstone/arm64_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/Arm64_const.java||bindings/java/capstone/Arm64_const.java": [
          "File: bindings/javcapstone/Arm64_const.java -> bindings/java/capstone/Arm64_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:  public static final int ARM64_REG_IP0 = ARM64_REG_X16;",
          "574:  public static final int ARM64_REG_IP1 = ARM64_REG_X17;",
          "",
          "---------------"
        ],
        "bindings/ocaml/arm64_const.ml||bindings/ocaml/arm64_const.ml": [
          "File: bindings/ocaml/arm64_const.ml -> bindings/ocaml/arm64_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "567: let _ARM64_REG_ENDING = 260;;",
          "569: (* alias registers *)",
          "572: let _ARM64_REG_FP = _ARM64_REG_X29;;",
          "573: let _ARM64_REG_LR = _ARM64_REG_X30;;",
          "",
          "[Removed Lines]",
          "570: let _ARM64_REG_IP1 = _ARM64_REG_X16;;",
          "571: let _ARM64_REG_IP0 = _ARM64_REG_X17;;",
          "",
          "[Added Lines]",
          "570: let _ARM64_REG_IP0 = _ARM64_REG_X16;;",
          "571: let _ARM64_REG_IP1 = _ARM64_REG_X17;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/arm64_const.py||bindings/python/capstone/arm64_const.py": [
          "File: bindings/python/capstone/arm64_const.py -> bindings/python/capstone/arm64_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "567: ARM64_REG_ENDING = 260",
          "569: # alias registers",
          "572: ARM64_REG_FP = ARM64_REG_X29",
          "573: ARM64_REG_LR = ARM64_REG_X30",
          "",
          "[Removed Lines]",
          "570: ARM64_REG_IP1 = ARM64_REG_X16",
          "571: ARM64_REG_IP0 = ARM64_REG_X17",
          "",
          "[Added Lines]",
          "570: ARM64_REG_IP0 = ARM64_REG_X16",
          "571: ARM64_REG_IP1 = ARM64_REG_X17",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9ec8b0df2eeb99af56d4dbd614ed51245ae5cad",
      "candidate_info": {
        "commit_hash": "a9ec8b0df2eeb99af56d4dbd614ed51245ae5cad",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a9ec8b0df2eeb99af56d4dbd614ed51245ae5cad",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: print out core version",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static void usage(char *prog)",
          "75: {",
          "77:  printf(\"Syntax: %s [-d:print all detail information] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "78:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "",
          "[Removed Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\\n\", VERSION);",
          "",
          "[Added Lines]",
          "76:  printf(\"Cstool v%s for Capstone Disassembler Engine (core v%u.%u)\\n\\n\", VERSION, CS_API_MAJOR, CS_API_MINOR);",
          "",
          "---------------"
        ]
      }
    }
  ]
}