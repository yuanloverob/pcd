{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90c21df2338651335ad7a922dd573f50c5f161ab",
      "candidate_info": {
        "commit_hash": "90c21df2338651335ad7a922dd573f50c5f161ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90c21df2338651335ad7a922dd573f50c5f161ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz find added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 42af7c819bc52ccb6953a58b1c05d3bd47cc438c5119a9555b1b796764eb9f20",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1660d7733eb443ab085ddef7666b998a1c75ac81cc54a9620960a8d3b377e28e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df21659a40e9dcaaeb4faecb0d13704e359296f2",
      "candidate_info": {
        "commit_hash": "df21659a40e9dcaaeb4faecb0d13704e359296f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df21659a40e9dcaaeb4faecb0d13704e359296f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Improved automatic detection of dbsqlfuzz cases in fuzzcheck.\n\nFossilOrigin-Name: 1ef24e89c9630fd383ba32f5aefcf9c27907f27f5072f3537a1cfd75a093a8d7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb9074ff450a67feaa62ca61d19154de26d5c8a8d147409ee6d1fbd667b2914f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "",
          "[Removed Lines]",
          "607:   if( rc && !p->timeoutHit && eVerbosity ){",
          "",
          "[Added Lines]",
          "607:   if( rc && !p->timeoutHit && eVerbosity>=2 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "",
          "[Removed Lines]",
          "656:   if( eVerbosity>=3 ){",
          "663:       if( eVerbosity>=4 ){",
          "",
          "[Added Lines]",
          "656:   if( eVerbosity>=4 ){",
          "663:       if( eVerbosity>=5 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "",
          "[Removed Lines]",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=3 ){",
          "715:   }else if( eVerbosity>=3 ){",
          "",
          "[Added Lines]",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=4 ){",
          "715:   }else if( eVerbosity>=4 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "",
          "[Removed Lines]",
          "748:   if( eVerbosity>=2 ){",
          "",
          "[Added Lines]",
          "748:   if( eVerbosity>=3 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "830:   if( rc!=SQLITE_OK ){",
          "831:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "832:   }",
          "834:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "835:        sqlite3_memory_highwater(1) / 1000000.0);",
          "836:   }",
          "",
          "[Removed Lines]",
          "833:   if( eVerbosity ){",
          "",
          "[Added Lines]",
          "833:   if( eVerbosity>=2 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "856: static int isDbSql(unsigned char *a, int n){",
          "857:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "858:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "860:   return 0;",
          "861: }",
          "",
          "[Removed Lines]",
          "859:   if( n>8 && memcmp(a,\"53514c69\",8)==0 ) return 1;",
          "",
          "[Added Lines]",
          "857:   unsigned char buf[12];",
          "858:   int i;",
          "861:   for(i=0; n>0 && i<8; n--, a++){",
          "862:     if( isxdigit(a[0]) ) buf[i++] = a[0];",
          "863:   }",
          "864:   if( i==8 && memcmp(buf,\"53514c69\",8)==0 ) return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4cd292c2aa7e453ee3879d47df0c0503b47db75",
      "candidate_info": {
        "commit_hash": "d4cd292c2aa7e453ee3879d47df0c0503b47db75",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4cd292c2aa7e453ee3879d47df0c0503b47db75",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Bug fix with INSERT using an explicit column list on a table with a non-final STORED column.\n\nFossilOrigin-Name: 61b4459ae6a6cc182c11abbc8b1dd629f77beb088d7ccad5e563d8d4769056df",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fe7517bf4d360597576ab9aba29627d7926d23f2bbbfb3e7bf4d32761617574c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   if( pColumn ){",
          "699:     for(i=0; i<pColumn->nId; i++){",
          "700:       pColumn->a[i].idx = -1;",
          "",
          "[Removed Lines]",
          "697:   bIdListInOrder = (pTab->tabFlags & TF_OOOHidden)==0;",
          "",
          "[Added Lines]",
          "697:   bIdListInOrder = (pTab->tabFlags & (TF_OOOHidden|TF_HasStored))==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
      "candidate_info": {
        "commit_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/112e174020809d0b91249716fb9de4aa3ee7437d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/releasetest.tcl"
        ],
        "message": "Avoid a sanitizer error in test1.c. Have releasetest.tcl/wapptest.tcl create a file called \"makecommand.sh\" that can be used to rerun a test from the command line.\n\nFossilOrigin-Name: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee886600297c2a03d9d1d10db88d3d107b48e5d4de5e5d91b0ab16cc7c447ede",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:   }",
          "4273:   pzTail = objc>=5 ? &zTail : 0;",
          "4274:   rc = sqlite3_prepare_v2(db, zCopy, bytes, &pStmt, pzTail);",
          "4275:   free(zCopy);",
          "4278:   assert(rc==SQLITE_OK || pStmt==0);",
          "4279:   Tcl_ResetResult(interp);",
          "4280:   if( sqlite3TestErrCode(interp, db, rc) ) return TCL_ERROR;",
          "4282:     if( bytes>=0 ){",
          "4283:       bytes = bytes - (int)(zTail-zSql);",
          "4284:     }",
          "",
          "[Removed Lines]",
          "4276:   zTail = &zSql[(zTail - zCopy)];",
          "4281:   if( rc==SQLITE_OK && zTail && objc>=5 ){",
          "",
          "[Added Lines]",
          "4275:   if( objc>=5 ){",
          "4276:     zTail = &zSql[(zTail - zCopy)];",
          "4277:   }",
          "4283:   if( rc==SQLITE_OK && objc>=5 && zTail ){",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:       unset -nocomplain savedEnv(TCLSH_CMD)",
          "502:     }",
          "503:     set ::env(TCLSH_CMD) [file nativename [info nameofexecutable]]",
          "505:     if {[info exists savedEnv(TCLSH_CMD)]} {",
          "506:       set ::env(TCLSH_CMD) $savedEnv(TCLSH_CMD)",
          "507:     } else {",
          "",
          "[Removed Lines]",
          "504:     set rc [catch [makeCommand $testtarget $makeOpts $cflags $opts]]",
          "",
          "[Added Lines]",
          "505:     # Create a file called \"makecommand.sh\" containing the text of",
          "506:     # the make command line.",
          "507:     catch {",
          "508:       set cmd [makeCommand $testtarget $makeOpts $cflags $opts]",
          "509:       set fd [open makecommand.sh w]",
          "510:       foreach e $cmd {",
          "511:         if {[string first \" \" $e]>=0} {",
          "512:           puts -nonewline $fd \"\\\"$e\\\"\"",
          "513:         } else {",
          "514:           puts -nonewline $fd $e",
          "515:         }",
          "516:         puts -nonewline $fd \" \"",
          "517:       }",
          "518:       puts $fd \"\"",
          "519:       close $fd",
          "520:     } msg",
          "522:     # Run the make command.",
          "523:     set rc [catch {trace_cmd exec {*}$cmd >>& test.log} msg]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737: # specified targets, compiler flags, and options.",
          "738: #",
          "739: proc makeCommand { targets makeOpts cflags opts } {",
          "741:   if {$::MSVC} {",
          "742:     set nmakeDir [file nativename $::SRCDIR]",
          "743:     set nmakeFile [file nativename [file join $nmakeDir Makefile.msc]]",
          "",
          "[Removed Lines]",
          "740:   set result [list trace_cmd exec]",
          "",
          "[Added Lines]",
          "759:   set result [list]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:   foreach target $targets {",
          "759:     lappend result $target",
          "760:   }",
          "762: }",
          "764: # The following procedure prints its arguments if ::TRACE is true.",
          "",
          "[Removed Lines]",
          "761:   lappend result CFLAGS=$cflags OPTS=$opts >>& test.log",
          "",
          "[Added Lines]",
          "780:   lappend result CFLAGS=$cflags OPTS=$opts",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87c889cfa5067f433259794f9796e6b44232bbd6",
      "candidate_info": {
        "commit_hash": "87c889cfa5067f433259794f9796e6b44232bbd6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c889cfa5067f433259794f9796e6b44232bbd6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the CLI, give better error messages if something goes wrong with the \".dbinfo\" command.\n\nFossilOrigin-Name: 3649a77b79001ea6c5defe882f9934521b20b9d36aab26d03b5d42006c7fa228",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9e2393cf201e3fc24519c5ae65d0a5953147d78884e53d44a7958747b4a7e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4773:      { \"schema size:\",",
          "4774:        \"SELECT total(length(sql)) FROM %s\" },",
          "4775:   };",
          "4777:   unsigned iDataVersion;",
          "4778:   char *zSchemaTab;",
          "4779:   char *zDb = nArg>=2 ? azArg[1] : \"main\";",
          "",
          "[Removed Lines]",
          "4776:   int i;",
          "",
          "[Added Lines]",
          "4776:   int i, rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4781:   unsigned char aHdr[100];",
          "4782:   open_db(p, 0);",
          "4783:   if( p->db==0 ) return 1;",
          "4786:   sqlite3_bind_text(pStmt, 1, zDb, -1, SQLITE_STATIC);",
          "4787:   if( sqlite3_step(pStmt)==SQLITE_ROW",
          "4788:    && sqlite3_column_bytes(pStmt,0)>100",
          "",
          "[Removed Lines]",
          "4784:   sqlite3_prepare_v2(p->db,\"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "4785:                      -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "4784:   rc = sqlite3_prepare_v2(p->db,",
          "4785:              \"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "4786:              -1, &pStmt, 0);",
          "4787:   if( rc ){",
          "4788:     if( !sqlite3_compileoption_used(\"ENABLE_DBPAGE_VTAB\") ){",
          "4789:       utf8_printf(stderr, \"the \\\".dbinfo\\\" command requires the \"",
          "4790:                           \"-DSQLITE_ENABLE_DBPAGE_VTAB compile-time options\\n\");",
          "4791:     }else{",
          "4792:       utf8_printf(stderr, \"error: %s\\n\", sqlite3_errmsg(p->db));",
          "4793:     }",
          "4794:     sqlite3_finalize(pStmt);",
          "4795:     return 1;",
          "4796:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}