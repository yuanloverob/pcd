{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96ca59fbf382773bd937e9e4ca06d23845dae46d",
      "candidate_info": {
        "commit_hash": "96ca59fbf382773bd937e9e4ca06d23845dae46d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/96ca59fbf382773bd937e9e4ca06d23845dae46d",
        "files": [
          "src/node.cc"
        ],
        "message": "process: fix setuid() and setgid() error reporting\n\nZero errno before calling getgrnam_r() or getpwnam_r(). If errno had previously\nbeen clobbered, node would report the wrong error.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1508:     struct group grp, *grpp = NULL;",
          "1509:     int err;",
          "1511:     if ((err = getgrnam_r(*grpnam, &grp, getbuf, ARRAY_SIZE(getbuf), &grpp)) ||",
          "1512:         grpp == NULL) {",
          "1513:       if (errno == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1511:     errno = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1548:     struct passwd pwd, *pwdp = NULL;",
          "1549:     int err;",
          "1551:     if ((err = getpwnam_r(*pwnam, &pwd, getbuf, ARRAY_SIZE(getbuf), &pwdp)) ||",
          "1552:         pwdp == NULL) {",
          "1553:       if (errno == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1552:     errno = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3116522e7c33c579bbb8ac0ee12c27ff3ff9825c",
      "candidate_info": {
        "commit_hash": "3116522e7c33c579bbb8ac0ee12c27ff3ff9825c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3116522e7c33c579bbb8ac0ee12c27ff3ff9825c",
        "files": [
          "lib/child_process.js",
          "src/handle_wrap.cc",
          "src/handle_wrap.h",
          "src/process_wrap.cc"
        ],
        "message": "child_process: spawn().ref() and spawn().unref()",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/handle_wrap.h||src/handle_wrap.h",
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:     }",
          "846:   }",
          "847: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }",
          "55: Handle<Value> HandleWrap::Unref(const Arguments& args) {",
          "56:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: Handle<Value> HandleWrap::Ref(const Arguments& args) {",
          "54:   HandleScope scope;",
          "56:   UNWRAP(HandleWrap)",
          "58:   uv_ref(wrap->handle__);",
          "59:   wrap->unref_ = false;",
          "61:   return v8::Undefined();",
          "62: }",
          "",
          "---------------"
        ],
        "src/handle_wrap.h||src/handle_wrap.h": [
          "File: src/handle_wrap.h -> src/handle_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   public:",
          "51:     static void Initialize(v8::Handle<v8::Object> target);",
          "52:     static v8::Handle<v8::Value> Close(const v8::Arguments& args);",
          "53:     static v8::Handle<v8::Value> Unref(const v8::Arguments& args);",
          "55:   protected:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     static v8::Handle<v8::Value> Ref(const v8::Arguments& args);",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     NODE_SET_PROTOTYPE_METHOD(constructor, \"spawn\", Spawn);",
          "68:     NODE_SET_PROTOTYPE_METHOD(constructor, \"kill\", Kill);",
          "70:     target->Set(String::NewSymbol(\"Process\"), constructor->GetFunction());",
          "71:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     NODE_SET_PROTOTYPE_METHOD(constructor, \"ref\", HandleWrap::Ref);",
          "71:     NODE_SET_PROTOTYPE_METHOD(constructor, \"unref\", HandleWrap::Unref);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17da4242b0dd8bd45f34d7f1610d83d1036b9e6d",
      "candidate_info": {
        "commit_hash": "17da4242b0dd8bd45f34d7f1610d83d1036b9e6d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/17da4242b0dd8bd45f34d7f1610d83d1036b9e6d",
        "files": [
          "benchmark/http_server_lag.js"
        ],
        "message": "A server with configurable lag for testing",
        "before_after_code_files": [
          "benchmark/http_server_lag.js||benchmark/http_server_lag.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_server_lag.js||benchmark/http_server_lag.js": [
          "File: benchmark/http_server_lag.js -> benchmark/http_server_lag.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var http = require('http');",
          "2: var port = parseInt(process.env.PORT, 10) || 8000;",
          "3: var defaultLag = parseInt(process.argv[2], 10) || 100;",
          "5: http.createServer(function(req, res) {",
          "6:   res.writeHead(200, { 'content-type': 'text/plain',",
          "7:                        'content-lengt': '2' });",
          "9:   var lag = parseInt(req.url.split(\"/\").pop(), 10) || defaultLag;",
          "10:   setTimeout(function() {",
          "11:     res.end('ok');",
          "12:   }, lag);",
          "13: }).listen(port, 'localhost');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12fc9fa8a7b30b701103e11ef4e76a444a4e9e19",
      "candidate_info": {
        "commit_hash": "12fc9fa8a7b30b701103e11ef4e76a444a4e9e19",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/12fc9fa8a7b30b701103e11ef4e76a444a4e9e19",
        "files": [
          "test/simple/test-dgram-ref.js"
        ],
        "message": "test: add failing dgram refcount test\n\nIdle UDP sockets (reading nor writing) should not keep the event loop alive.\nThis will get fixed in v0.8 one way or the other.",
        "before_after_code_files": [
          "test/simple/test-dgram-ref.js||test/simple/test-dgram-ref.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-dgram-ref.js||test/simple/test-dgram-ref.js": [
          "File: test/simple/test-dgram-ref.js -> test/simple/test-dgram-ref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var dgram = require('dgram');",
          "26: dgram.createSocket('udp4');",
          "27: dgram.createSocket('udp6');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1fba8d1f5e7411f055c00ca4b46646e5b840cf2",
      "candidate_info": {
        "commit_hash": "f1fba8d1f5e7411f055c00ca4b46646e5b840cf2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f1fba8d1f5e7411f055c00ca4b46646e5b840cf2",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-read-stream.js"
        ],
        "message": "fs: fix ReadStream / WriteStream missing callback\n\nThe (undocumented) callback argument to .destroy() was not called if the\nstream was no longer readable / writable.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-read-stream.js||test/simple/test-fs-read-stream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1367: ReadStream.prototype.destroy = function(cb) {",
          "1368:   var self = this;",
          "1371:   this.readable = false;",
          "1373:   function close() {",
          "",
          "[Removed Lines]",
          "1370:   if (!this.readable) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1570: WriteStream.prototype.destroy = function(cb) {",
          "1571:   var self = this;",
          "1574:   this.writable = false;",
          "1576:   function close() {",
          "",
          "[Removed Lines]",
          "1573:   if (!this.writable) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-read-stream.js||test/simple/test-fs-read-stream.js": [
          "File: test/simple/test-fs-read-stream.js -> test/simple/test-fs-read-stream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: file2.destroy(function(err) {",
          "87:   assert.ok(!err);",
          "88:   callbacks.destroy++;",
          "89: });",
          "91: var file3 = fs.createReadStream(fn, {encoding: 'utf8'});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   file2.destroy(function(err) {",
          "91:     assert.ok(!err);",
          "92:     callbacks.destroy++;",
          "93:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: process.on('exit', function() {",
          "108:   assert.equal(1, callbacks.open);",
          "109:   assert.equal(1, callbacks.end);",
          "112:   assert.equal(2, callbacks.close);",
          "",
          "[Removed Lines]",
          "110:   assert.equal(1, callbacks.destroy);",
          "",
          "[Added Lines]",
          "115:   assert.equal(2, callbacks.destroy);",
          "",
          "---------------"
        ]
      }
    }
  ]
}