{
  "cve_id": "CVE-2019-20054",
  "cve_desc": "In the Linux kernel before 5.0.6, there is a NULL pointer dereference in drop_sysctl_table() in fs/proc/proc_sysctl.c, related to put_links, aka CID-23da9588037e.",
  "repo": "torvalds/linux",
  "patch_hash": "23da9588037ecdd4901db76a5b79a42b529c4ec3",
  "patch_info": {
    "commit_hash": "23da9588037ecdd4901db76a5b79a42b529c4ec3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/23da9588037ecdd4901db76a5b79a42b529c4ec3",
    "files": [
      "fs/proc/proc_sysctl.c"
    ],
    "message": "fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links\n\nSyzkaller reports:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 1 PID: 5373 Comm: syz-executor.0 Not tainted 5.0.0-rc8+ #3\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:put_links+0x101/0x440 fs/proc/proc_sysctl.c:1599\nCode: 00 0f 85 3a 03 00 00 48 8b 43 38 48 89 44 24 20 48 83 c0 38 48 89 c2 48 89 44 24 28 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 fe 02 00 00 48 8b 74 24 20 48 c7 c7 60 2a 9d 91\nRSP: 0018:ffff8881d828f238 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8881e01b1140 RCX: ffffffff8ee98267\nRDX: 0000000000000007 RSI: ffffc90001479000 RDI: ffff8881e01b1178\nRBP: dffffc0000000000 R08: ffffed103ee27259 R09: ffffed103ee27259\nR10: 0000000000000001 R11: ffffed103ee27258 R12: fffffffffffffff4\nR13: 0000000000000006 R14: ffff8881f59838c0 R15: dffffc0000000000\nFS:  00007f072254f700(0000) GS:ffff8881f7100000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fff8b286668 CR3: 00000001f0542002 CR4: 00000000007606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n drop_sysctl_table+0x152/0x9f0 fs/proc/proc_sysctl.c:1629\n get_subdir fs/proc/proc_sysctl.c:1022 [inline]\n __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335\n br_netfilter_init+0xbc/0x1000 [br_netfilter]\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f072254ec58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000280 RDI: 0000000000000003\nRBP: 00007f072254ec70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f072254f6bc\nR13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004\nModules linked in: br_netfilter(+) dvb_usb_dibusb_mc_common dib3000mc dibx000_common dvb_usb_dibusb_common dvb_usb_dw2102 dvb_usb classmate_laptop palmas_regulator cn videobuf2_v4l2 v4l2_common snd_soc_bd28623 mptbase snd_usb_usx2y snd_usbmidi_lib snd_rawmidi wmi libnvdimm lockd sunrpc grace rc_kworld_pc150u rc_core rtc_da9063 sha1_ssse3 i2c_cros_ec_tunnel adxl34x_spi adxl34x nfnetlink lib80211 i5500_temp dvb_as102 dvb_core videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops udc_core lnbp22 leds_lp3952 hid_roccat_ryos s1d13xxxfb mtd vport_geneve openvswitch nf_conncount nf_nat_ipv6 nsh geneve udp_tunnel ip6_udp_tunnel snd_soc_mt6351 sis_agp phylink snd_soc_adau1761_spi snd_soc_adau1761 snd_soc_adau17x1 snd_soc_core snd_pcm_dmaengine ac97_bus snd_compress snd_soc_adau_utils snd_soc_sigmadsp_regmap snd_soc_sigmadsp raid_class hid_roccat_konepure hid_roccat_common hid_roccat c2port_duramar2150 core mdio_bcm_unimac iptable_security iptable_raw iptable_mangle\n iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim devlink vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel joydev mousedev ide_pci_generic piix aesni_intel aes_x86_64 ide_core crypto_simd atkbd cryptd glue_helper serio_raw ata_generic pata_acpi i2c_piix4 floppy sch_fq_codel ip_tables x_tables ipv6 [last unloaded: lm73]\nDumping ftrace buffer:\n   (ftrace buffer empty)\n---[ end trace 770020de38961fd0 ]---\n\nA new dir entry can be created in get_subdir and its 'header->parent' is\nset to NULL.  Only after insert_header success, it will be set to 'dir',\notherwise 'header->parent' is set to NULL and drop_sysctl_table is called.\nHowever in err handling path of get_subdir, drop_sysctl_table also be\ncalled on 'new->header' regardless its value of parent pointer.  Then\nput_links is called, which triggers NULL-ptr deref when access member of\nheader->parent.\n\nIn fact we have multiple error paths which call drop_sysctl_table() there,\nupon failure on insert_links() we also call drop_sysctl_table().And even\nin the successful case on __register_sysctl_table() we still always call\ndrop_sysctl_table().This patch fix it.\n\nLink: http://lkml.kernel.org/r/20190314085527.13244-1-yuehaibing@huawei.com\nFixes: 0e47c99d7fe25 (\"sysctl: Replace root_list with links between sysctl_table_sets\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nReported-by: Hulk Robot <hulkci@huawei.com>\nAcked-by: Luis Chamberlain <mcgrof@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Alexey Dobriyan <adobriyan@gmail.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Eric W. Biederman <ebiederm@xmission.com>\nCc: <stable@vger.kernel.org>    [3.4+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c"
    ]
  },
  "patch_diff": {
    "fs/proc/proc_sysctl.c||fs/proc/proc_sysctl.c": [
      "File: fs/proc/proc_sysctl.c -> fs/proc/proc_sysctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1626:  if (--header->nreg)",
      "1627:   return;",
      "1630:  start_unregistering(header);",
      "1631:  if (!--header->count)",
      "1632:   kfree_rcu(header, rcu);",
      "",
      "[Removed Lines]",
      "1629:  put_links(header);",
      "",
      "[Added Lines]",
      "1629:  if (parent)",
      "1630:   put_links(header);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3eec13b8fd2b9791a21fa16e38dfea8111579bf",
      "candidate_info": {
        "commit_hash": "a3eec13b8fd2b9791a21fa16e38dfea8111579bf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a3eec13b8fd2b9791a21fa16e38dfea8111579bf",
        "files": [
          "arch/arm64/boot/dts/rockchip/rk3399.dtsi"
        ],
        "message": "arm64: dts: rockchip: Disable DCMDs on RK3399's eMMC controller.\n\nWhen using direct commands (DCMDs) on an RK3399, we get spurious\nCQE completion interrupts for the DCMD transaction slot (#31):\n\n[  931.196520] ------------[ cut here ]------------\n[  931.201702] mmc1: cqhci: spurious TCN for tag 31\n[  931.206906] WARNING: CPU: 0 PID: 1433 at /usr/src/kernel/drivers/mmc/host/cqhci.c:725 cqhci_irq+0x2e4/0x490\n[  931.206909] Modules linked in:\n[  931.206918] CPU: 0 PID: 1433 Comm: irq/29-mmc1 Not tainted 4.19.8-rt6-funkadelic #1\n[  931.206920] Hardware name: Theobroma Systems RK3399-Q7 SoM (DT)\n[  931.206924] pstate: 40000005 (nZcv daif -PAN -UAO)\n[  931.206927] pc : cqhci_irq+0x2e4/0x490\n[  931.206931] lr : cqhci_irq+0x2e4/0x490\n[  931.206933] sp : ffff00000e54bc80\n[  931.206934] x29: ffff00000e54bc80 x28: 0000000000000000\n[  931.206939] x27: 0000000000000001 x26: ffff000008f217e8\n[  931.206944] x25: ffff8000f02ef030 x24: ffff0000091417b0\n[  931.206948] x23: ffff0000090aa000 x22: ffff8000f008b000\n[  931.206953] x21: 0000000000000002 x20: 000000000000001f\n[  931.206957] x19: ffff8000f02ef018 x18: ffffffffffffffff\n[  931.206961] x17: 0000000000000000 x16: 0000000000000000\n[  931.206966] x15: ffff0000090aa6c8 x14: 0720072007200720\n[  931.206970] x13: 0720072007200720 x12: 0720072007200720\n[  931.206975] x11: 0720072007200720 x10: 0720072007200720\n[  931.206980] x9 : 0720072007200720 x8 : 0720072007200720\n[  931.206984] x7 : 0720073107330720 x6 : 00000000000005a0\n[  931.206988] x5 : ffff00000860d4b0 x4 : 0000000000000000\n[  931.206993] x3 : 0000000000000001 x2 : 0000000000000001\n[  931.206997] x1 : 1bde3a91b0d4d900 x0 : 0000000000000000\n[  931.207001] Call trace:\n[  931.207005]  cqhci_irq+0x2e4/0x490\n[  931.207009]  sdhci_arasan_cqhci_irq+0x5c/0x90\n[  931.207013]  sdhci_irq+0x98/0x930\n[  931.207019]  irq_forced_thread_fn+0x2c/0xa0\n[  931.207023]  irq_thread+0x114/0x1c0\n[  931.207027]  kthread+0x128/0x130\n[  931.207032]  ret_from_fork+0x10/0x20\n[  931.207035] ---[ end trace 0000000000000002 ]---\n\nThe driver shows this message only for the first spurious interrupt\nby using WARN_ONCE(). Changing this to WARN() shows, that this is\nhappening quite frequently (up to once a second).\n\nSince the eMMC 5.1 specification, where CQE and CQHCI are specified,\ndoes not mention that spurious TCN interrupts for DCMDs can be simply\nignored, we must assume that using this feature is not working reliably.\n\nThe current implementation uses DCMD for REQ_OP_FLUSH only, and\nI could not see any performance/power impact when disabling\nthis optional feature for RK3399.\n\nTherefore this patch disables DCMDs for RK3399.\n\nSigned-off-by: Christoph Muellner <christoph.muellner@theobroma-systems.com>\nSigned-off-by: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\nFixes: 84362d79f436 (\"mmc: sdhci-of-arasan: Add CQHCI support for arasan,sdhci-5.1\")\nCc: stable@vger.kernel.org\n[the corresponding code changes are queued for 5.2 so doing that as well]\nSigned-off-by: Heiko Stuebner <heiko@sntech.de>",
        "before_after_code_files": [
          "arch/arm64/boot/dts/rockchip/rk3399.dtsi||arch/arm64/boot/dts/rockchip/rk3399.dtsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/arm64/boot/dts/rockchip/rk3399.dtsi||arch/arm64/boot/dts/rockchip/rk3399.dtsi": [
          "File: arch/arm64/boot/dts/rockchip/rk3399.dtsi -> arch/arm64/boot/dts/rockchip/rk3399.dtsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   phys = <&emmc_phy>;",
          "340:   phy-names = \"phy_arasan\";",
          "341:   power-domains = <&power RK3399_PD_EMMC>;",
          "342:   status = \"disabled\";",
          "343:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:   disable-cqe-dcmd;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a5a90d167b0e5fe3d47af16b68fd09ce64085cd",
      "candidate_info": {
        "commit_hash": "9a5a90d167b0e5fe3d47af16b68fd09ce64085cd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9a5a90d167b0e5fe3d47af16b68fd09ce64085cd",
        "files": [
          "net/core/dev.c"
        ],
        "message": "net: core: netif_receive_skb_list: unlist skb before passing to pt->func\n\n__netif_receive_skb_list_ptype() leaves skb->next poisoned before passing\nit to pt_prev->func handler, what may produce (in certain cases, e.g. DSA\nsetup) crashes like:\n\n[ 88.606777] CPU 0 Unable to handle kernel paging request at virtual address 0000000e, epc == 80687078, ra == 8052cc7c\n[ 88.618666] Oops[#1]:\n[ 88.621196] CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc2-dlink-00206-g4192a172-dirty #1473\n[ 88.630885] $ 0 : 00000000 10000400 00000002 864d7850\n[ 88.636709] $ 4 : 87c0ddf0 864d7800 87c0ddf0 00000000\n[ 88.642526] $ 8 : 00000000 49600000 00000001 00000001\n[ 88.648342] $12 : 00000000 c288617b dadbee27 25d17c41\n[ 88.654159] $16 : 87c0ddf0 85cff080 80790000 fffffffd\n[ 88.659975] $20 : 80797b20 ffffffff 00000001 864d7800\n[ 88.665793] $24 : 00000000 8011e658\n[ 88.671609] $28 : 80790000 87c0dbc0 87cabf00 8052cc7c\n[ 88.677427] Hi : 00000003\n[ 88.680622] Lo : 7b5b4220\n[ 88.683840] epc : 80687078 vlan_dev_hard_start_xmit+0x1c/0x1a0\n[ 88.690532] ra : 8052cc7c dev_hard_start_xmit+0xac/0x188\n[ 88.696734] Status: 10000404\tIEp\n[ 88.700422] Cause : 50000008 (ExcCode 02)\n[ 88.704874] BadVA : 0000000e\n[ 88.708069] PrId : 0001a120 (MIPS interAptiv (multi))\n[ 88.713005] Modules linked in:\n[ 88.716407] Process swapper (pid: 0, threadinfo=(ptrval), task=(ptrval), tls=00000000)\n[ 88.725219] Stack : 85f61c28 00000000 0000000e 80780000 87c0ddf0 85cff080 80790000 8052cc7c\n[ 88.734529] 87cabf00 00000000 00000001 85f5fb40 807b0000 864d7850 87cabf00 807d0000\n[ 88.743839] 864d7800 8655f600 00000000 85cff080 87c1c000 0000006a 00000000 8052d96c\n[ 88.753149] 807a0000 8057adb8 87c0dcc8 87c0dc50 85cfff08 00000558 87cabf00 85f58c50\n[ 88.762460] 00000002 85f58c00 864d7800 80543308 fffffff4 00000001 85f58c00 864d7800\n[ 88.771770] ...\n[ 88.774483] Call Trace:\n[ 88.777199] [<80687078>] vlan_dev_hard_start_xmit+0x1c/0x1a0\n[ 88.783504] [<8052cc7c>] dev_hard_start_xmit+0xac/0x188\n[ 88.789326] [<8052d96c>] __dev_queue_xmit+0x6e8/0x7d4\n[ 88.794955] [<805a8640>] ip_finish_output2+0x238/0x4d0\n[ 88.800677] [<805ab6a0>] ip_output+0xc8/0x140\n[ 88.805526] [<805a68f4>] ip_forward+0x364/0x560\n[ 88.810567] [<805a4ff8>] ip_rcv+0x48/0xe4\n[ 88.815030] [<80528d44>] __netif_receive_skb_one_core+0x44/0x58\n[ 88.821635] [<8067f220>] dsa_switch_rcv+0x108/0x1ac\n[ 88.827067] [<80528f80>] __netif_receive_skb_list_core+0x228/0x26c\n[ 88.833951] [<8052ed84>] netif_receive_skb_list+0x1d4/0x394\n[ 88.840160] [<80355a88>] lunar_rx_poll+0x38c/0x828\n[ 88.845496] [<8052fa78>] net_rx_action+0x14c/0x3cc\n[ 88.850835] [<806ad300>] __do_softirq+0x178/0x338\n[ 88.856077] [<8012a2d4>] irq_exit+0xbc/0x100\n[ 88.860846] [<802f8b70>] plat_irq_dispatch+0xc0/0x144\n[ 88.866477] [<80105974>] handle_int+0x14c/0x158\n[ 88.871516] [<806acfb0>] r4k_wait+0x30/0x40\n[ 88.876462] Code: afb10014 8c8200a0 00803025 <9443000c> 94a20468 00000000 10620042 00a08025 9605046a\n[ 88.887332]\n[ 88.888982] ---[ end trace eb863d007da11cf1 ]---\n[ 88.894122] Kernel panic - not syncing: Fatal exception in interrupt\n[ 88.901202] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---\n\nFix this by pulling skb off the sublist and zeroing skb->next pointer\nbefore calling ptype callback.\n\nFixes: 88eb1944e18c (\"net: core: propagate SKB lists through packet_type lookup\")\nReviewed-by: Edward Cree <ecree@solarflare.com>\nSigned-off-by: Alexander Lobakin <alobakin@dlink.ru>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:  if (pt_prev->list_func != NULL)",
          "5015:   pt_prev->list_func(head, pt_prev, orig_dev);",
          "5016:  else",
          "5018:    pt_prev->func(skb, skb->dev, pt_prev, orig_dev);",
          "5019: }",
          "5021: static void __netif_receive_skb_list_core(struct list_head *head, bool pfmemalloc)",
          "",
          "[Removed Lines]",
          "5017:   list_for_each_entry_safe(skb, next, head, list)",
          "",
          "[Added Lines]",
          "5017:   list_for_each_entry_safe(skb, next, head, list) {",
          "5018:    skb_list_del_init(skb);",
          "5020:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9de2640b06ecf0e6ef4b24b07a5573a2804d77d0",
      "candidate_info": {
        "commit_hash": "9de2640b06ecf0e6ef4b24b07a5573a2804d77d0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9de2640b06ecf0e6ef4b24b07a5573a2804d77d0",
        "files": [
          "tools/testing/selftests/bpf/test_btf.c"
        ],
        "message": "bpf: add bpffs multi-dimensional array tests in test_btf\n\nFor multiple dimensional arrays like below,\n  int a[2][3]\nboth llvm and pahole generated one BTF_KIND_ARRAY type like\n  . element_type: int\n  . index_type: unsigned int\n  . number of elements: 6\n\nSuch a collapsed BTF_KIND_ARRAY type will cause the divergence\nin BTF vs. the user code. In the compile-once-run-everywhere\nproject, the header file is generated from BTF and used for bpf\nprogram, and the definition in the header file will be different\nfrom what user expects.\n\nBut the kernel actually supports chained multi-dimensional array\ntypes properly. The above \"int a[2][3]\" can be represented as\n  Type #n:\n    . element_type: int\n    . index_type: unsigned int\n    . number of elements: 3\n  Type #(n+1):\n    . element_type: type #n\n    . index_type: unsigned int\n    . number of elements: 2\n\nThe following llvm commit\n  https://reviews.llvm.org/rL357215\nalso enables llvm to generated proper chained multi-dimensional arrays.\n\nThe test_btf already has a raw test (\"struct test #1\") for chained\nmulti-dimensional arrays. This patch added amended bpffs test for\nchained multi-dimensional arrays.\n\nAcked-by: Martin KaFai Lau <kafai@fb.com>\nSigned-off-by: Yonghong Song <yhs@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
        "before_after_code_files": [
          "tools/testing/selftests/bpf/test_btf.c||tools/testing/selftests/bpf/test_btf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/testing/selftests/bpf/test_btf.c||tools/testing/selftests/bpf/test_btf.c": [
          "File: tools/testing/selftests/bpf/test_btf.c -> tools/testing/selftests/bpf/test_btf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3677:  } aenum;",
          "3678:  uint32_t ui32b;",
          "3679:  uint32_t bits2c:2;",
          "3680: };",
          "3682: #ifdef __SIZEOF_INT128__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3680:  uint8_t si8_4[2][2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3729:   BTF_ENUM_ENC(NAME_TBD, 2),",
          "3730:   BTF_ENUM_ENC(NAME_TBD, 3),",
          "",
          "[Removed Lines]",
          "3732:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 10), 40),",
          "",
          "[Added Lines]",
          "3733:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 0, 11), 40),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3743:   BTF_END_RAW,",
          "3744:  },",
          "3746:  .key_size = sizeof(unsigned int),",
          "3747:  .value_size = sizeof(struct pprint_mapv),",
          "",
          "[Removed Lines]",
          "3745:  BTF_STR_SEC(\"\\0unsigned char\\0unsigned short\\0unsigned int\\0int\\0unsigned long long\\0uint8_t\\0uint16_t\\0uint32_t\\0int32_t\\0uint64_t\\0ui64\\0ui8a\\0ENUM_ZERO\\0ENUM_ONE\\0ENUM_TWO\\0ENUM_THREE\\0pprint_mapv\\0ui32\\0ui16\\0si32\\0unused_bits2a\\0bits28\\0unused_bits2b\\0aenum\\0ui32b\\0bits2c\"),",
          "",
          "[Added Lines]",
          "3749:  BTF_STR_SEC(\"\\0unsigned char\\0unsigned short\\0unsigned int\\0int\\0unsigned long long\\0uint8_t\\0uint16_t\\0uint32_t\\0int32_t\\0uint64_t\\0ui64\\0ui8a\\0ENUM_ZERO\\0ENUM_ONE\\0ENUM_TWO\\0ENUM_THREE\\0pprint_mapv\\0ui32\\0ui16\\0si32\\0unused_bits2a\\0bits28\\0unused_bits2b\\0aenum\\0ui32b\\0bits2c\\0si8_4\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3791:   BTF_ENUM_ENC(NAME_TBD, 2),",
          "3792:   BTF_ENUM_ENC(NAME_TBD, 3),",
          "",
          "[Removed Lines]",
          "3794:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 1, 10), 40),",
          "",
          "[Added Lines]",
          "3798:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 1, 11), 40),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3805:   BTF_END_RAW,",
          "3806:  },",
          "3808:  .key_size = sizeof(unsigned int),",
          "3809:  .value_size = sizeof(struct pprint_mapv),",
          "",
          "[Removed Lines]",
          "3807:  BTF_STR_SEC(\"\\0unsigned char\\0unsigned short\\0unsigned int\\0int\\0unsigned long long\\0uint8_t\\0uint16_t\\0uint32_t\\0int32_t\\0uint64_t\\0ui64\\0ui8a\\0ENUM_ZERO\\0ENUM_ONE\\0ENUM_TWO\\0ENUM_THREE\\0pprint_mapv\\0ui32\\0ui16\\0si32\\0unused_bits2a\\0bits28\\0unused_bits2b\\0aenum\\0ui32b\\0bits2c\"),",
          "",
          "[Added Lines]",
          "3814:  BTF_STR_SEC(\"\\0unsigned char\\0unsigned short\\0unsigned int\\0int\\0unsigned long long\\0uint8_t\\0uint16_t\\0uint32_t\\0int32_t\\0uint64_t\\0ui64\\0ui8a\\0ENUM_ZERO\\0ENUM_ONE\\0ENUM_TWO\\0ENUM_THREE\\0pprint_mapv\\0ui32\\0ui16\\0si32\\0unused_bits2a\\0bits28\\0unused_bits2b\\0aenum\\0ui32b\\0bits2c\\0si8_4\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3855:   BTF_ENUM_ENC(NAME_TBD, 2),",
          "3856:   BTF_ENUM_ENC(NAME_TBD, 3),",
          "",
          "[Removed Lines]",
          "3858:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 1, 10), 40),",
          "",
          "[Added Lines]",
          "3865:   BTF_TYPE_ENC(NAME_TBD, BTF_INFO_ENC(BTF_KIND_STRUCT, 1, 11), 40),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3870:   BTF_TYPEDEF_ENC(NAME_TBD, 18),",
          "3873:   BTF_END_RAW,",
          "3874:  },",
          "3876:  .key_size = sizeof(unsigned int),",
          "3877:  .value_size = sizeof(struct pprint_mapv),",
          "",
          "[Removed Lines]",
          "3875:  BTF_STR_SEC(\"\\0unsigned char\\0unsigned short\\0unsigned int\\0int\\0unsigned long long\\0uint8_t\\0uint16_t\\0uint32_t\\0int32_t\\0uint64_t\\0ui64\\0ui8a\\0ENUM_ZERO\\0ENUM_ONE\\0ENUM_TWO\\0ENUM_THREE\\0pprint_mapv\\0ui32\\0ui16\\0si32\\0unused_bits2a\\0bits28\\0unused_bits2b\\0aenum\\0ui32b\\0bits2c\\0___int\"),",
          "",
          "[Added Lines]",
          "3885:  BTF_STR_SEC(\"\\0unsigned char\\0unsigned short\\0unsigned int\\0int\\0unsigned long long\\0uint8_t\\0uint16_t\\0uint32_t\\0int32_t\\0uint64_t\\0ui64\\0ui8a\\0ENUM_ZERO\\0ENUM_ONE\\0ENUM_TWO\\0ENUM_THREE\\0pprint_mapv\\0ui32\\0ui16\\0si32\\0unused_bits2a\\0bits28\\0unused_bits2b\\0aenum\\0ui32b\\0bits2c\\0___int\\0si8_4\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4007:    v->aenum = i & 0x03;",
          "4008:    v->ui32b = 4;",
          "4009:    v->bits2c = 1;",
          "4010:    v = (void *)v + rounded_value_size;",
          "4011:   }",
          "4012:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4020:    v->si8_4[0][0] = (cpu + i) & 0xff;",
          "4021:    v->si8_4[0][1] = (cpu + i + 1) & 0xff;",
          "4022:    v->si8_4[1][0] = (cpu + i + 2) & 0xff;",
          "4023:    v->si8_4[1][1] = (cpu + i + 3) & 0xff;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4040:   nexpected_line = snprintf(expected_line, line_size,",
          "4041:        \"%s%u: {%u,0,%d,0x%x,0x%x,0x%x,\"",
          "4042:        \"{%lu|[%u,%u,%u,%u,%u,%u,%u,%u]},%s,\"",
          "4044:        percpu_map ? \"\\tcpu\" : \"\",",
          "4045:        percpu_map ? cpu : next_key,",
          "4046:        v->ui32, v->si32,",
          "",
          "[Removed Lines]",
          "4043:        \"%u,0x%x}\\n\",",
          "",
          "[Added Lines]",
          "4057:        \"%u,0x%x,[[%d,%d],[%d,%d]]}\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4054:        v->ui8a[6], v->ui8a[7],",
          "4055:        pprint_enum_str[v->aenum],",
          "4056:        v->ui32b,",
          "4058:  }",
          "4060: #ifdef __SIZEOF_INT128__",
          "",
          "[Removed Lines]",
          "4057:        v->bits2c);",
          "",
          "[Added Lines]",
          "4071:        v->bits2c,",
          "4072:        v->si8_4[0][0], v->si8_4[0][1],",
          "4073:        v->si8_4[1][0], v->si8_4[1][1]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "242ec1455151267fe35a0834aa9038e4c4670884",
      "candidate_info": {
        "commit_hash": "242ec1455151267fe35a0834aa9038e4c4670884",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/242ec1455151267fe35a0834aa9038e4c4670884",
        "files": [
          "drivers/s390/scsi/zfcp_erp.c",
          "drivers/s390/scsi/zfcp_ext.h",
          "drivers/s390/scsi/zfcp_scsi.c"
        ],
        "message": "scsi: zfcp: fix scsi_eh host reset with port_forced ERP for non-NPIV FCP devices\n\nSuppose more than one non-NPIV FCP device is active on the same channel.\nSend I/O to storage and have some of the pending I/O run into a SCSI\ncommand timeout, e.g. due to bit errors on the fibre. Now the error\nsituation stops. However, we saw FCP requests continue to timeout in the\nchannel. The abort will be successful, but the subsequent TUR fails.\nScsi_eh starts. The LUN reset fails. The target reset fails.  The host\nreset only did an FCP device recovery. However, for non-NPIV FCP devices,\nthis does not close and reopen ports on the SAN-side if other non-NPIV FCP\ndevice(s) share the same open ports.\n\nIn order to resolve the continuing FCP request timeouts, we need to\nexplicitly close and reopen ports on the SAN-side.\n\nThis was missing since the beginning of zfcp in v2.6.0 history commit\nea127f975424 (\"[PATCH] s390 (7/7): zfcp host adapter.\").\n\nNote: The FSF requests for forced port reopen could run into FSF request\ntimeouts due to other reasons. This would trigger an internal FCP device\nrecovery. Pending forced port reopen recoveries would get dismissed. So\nsome ports might not get fully reopened during this host reset handler.\nHowever, subsequent I/O would trigger the above described escalation and\neventually all ports would be forced reopen to resolve any continuing FCP\nrequest timeouts due to earlier bit errors.\n\nSigned-off-by: Steffen Maier <maier@linux.ibm.com>\nFixes: 1da177e4c3f4 (\"Linux-2.6.12-rc2\")\nCc: <stable@vger.kernel.org> #3.0+\nReviewed-by: Jens Remus <jremus@linux.ibm.com>\nReviewed-by: Benjamin Block <bblock@linux.ibm.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/s390/scsi/zfcp_erp.c||drivers/s390/scsi/zfcp_erp.c",
          "drivers/s390/scsi/zfcp_ext.h||drivers/s390/scsi/zfcp_ext.h",
          "drivers/s390/scsi/zfcp_scsi.c||drivers/s390/scsi/zfcp_scsi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/s390/scsi/zfcp_erp.c||drivers/s390/scsi/zfcp_erp.c": [
          "File: drivers/s390/scsi/zfcp_erp.c -> drivers/s390/scsi/zfcp_erp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:  add_timer(&erp_action->timer);",
          "625: }",
          "627: static void _zfcp_erp_port_reopen_all(struct zfcp_adapter *adapter,",
          "628:           int clear, char *dbftag)",
          "629: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627: void zfcp_erp_port_forced_reopen_all(struct zfcp_adapter *adapter,",
          "628:          int clear, char *dbftag)",
          "629: {",
          "630:  unsigned long flags;",
          "631:  struct zfcp_port *port;",
          "633:  write_lock_irqsave(&adapter->erp_lock, flags);",
          "634:  read_lock(&adapter->port_list_lock);",
          "635:  list_for_each_entry(port, &adapter->port_list, list)",
          "636:   _zfcp_erp_port_forced_reopen(port, clear, dbftag);",
          "637:  read_unlock(&adapter->port_list_lock);",
          "638:  write_unlock_irqrestore(&adapter->erp_lock, flags);",
          "639: }",
          "",
          "---------------"
        ],
        "drivers/s390/scsi/zfcp_ext.h||drivers/s390/scsi/zfcp_ext.h": [
          "File: drivers/s390/scsi/zfcp_ext.h -> drivers/s390/scsi/zfcp_ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:      char *dbftag);",
          "71: extern void zfcp_erp_port_shutdown(struct zfcp_port *, int, char *);",
          "72: extern void zfcp_erp_port_forced_reopen(struct zfcp_port *, int, char *);",
          "73: extern void zfcp_erp_set_lun_status(struct scsi_device *, u32);",
          "74: extern void zfcp_erp_clear_lun_status(struct scsi_device *, u32);",
          "75: extern void zfcp_erp_lun_reopen(struct scsi_device *, int, char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: extern void zfcp_erp_port_forced_reopen_all(struct zfcp_adapter *adapter,",
          "74:          int clear, char *dbftag);",
          "",
          "---------------"
        ],
        "drivers/s390/scsi/zfcp_scsi.c||drivers/s390/scsi/zfcp_scsi.c": [
          "File: drivers/s390/scsi/zfcp_scsi.c -> drivers/s390/scsi/zfcp_scsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:  struct zfcp_adapter *adapter = zfcp_sdev->port->adapter;",
          "369:  int ret = SUCCESS, fc_ret;",
          "371:  zfcp_erp_adapter_reopen(adapter, 0, \"schrh_1\");",
          "372:  zfcp_erp_wait(adapter);",
          "373:  fc_ret = fc_block_scsi_eh(scpnt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:  if (!(adapter->connection_features & FSF_FEATURE_NPIV_MODE)) {",
          "372:   zfcp_erp_port_forced_reopen_all(adapter, 0, \"schrh_p\");",
          "373:   zfcp_erp_wait(adapter);",
          "374:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c446e6f96997f2a95bf0037ef463802162d2323",
      "candidate_info": {
        "commit_hash": "3c446e6f96997f2a95bf0037ef463802162d2323",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3c446e6f96997f2a95bf0037ef463802162d2323",
        "files": [
          "net/kcm/kcmsock.c"
        ],
        "message": "kcm: switch order of device registration to fix a crash\n\nWhen kcm is loaded while many processes try to create a KCM socket, a\ncrash occurs:\n BUG: unable to handle kernel NULL pointer dereference at 000000000000000e\n IP: mutex_lock+0x27/0x40 kernel/locking/mutex.c:240\n PGD 8000000016ef2067 P4D 8000000016ef2067 PUD 3d6e9067 PMD 0\n Oops: 0002 [#1] SMP KASAN PTI\n CPU: 0 PID: 7005 Comm: syz-executor.5 Not tainted 4.12.14-396-default #1 SLE15-SP1 (unreleased)\n RIP: 0010:mutex_lock+0x27/0x40 kernel/locking/mutex.c:240\n RSP: 0018:ffff88000d487a00 EFLAGS: 00010246\n RAX: 0000000000000000 RBX: 000000000000000e RCX: 1ffff100082b0719\n ...\n CR2: 000000000000000e CR3: 000000004b1bc003 CR4: 0000000000060ef0\n Call Trace:\n  kcm_create+0x600/0xbf0 [kcm]\n  __sock_create+0x324/0x750 net/socket.c:1272\n ...\n\nThis is due to race between sock_create and unfinished\nregister_pernet_device. kcm_create tries to do \"net_generic(net,\nkcm_net_id)\". but kcm_net_id is not initialized yet.\n\nSo switch the order of the two to close the race.\n\nThis can be reproduced with mutiple processes doing socket(PF_KCM, ...)\nand one process doing module removal.\n\nFixes: ab7ac4eb9832 (\"kcm: Kernel Connection Multiplexor module\")\nReviewed-by: Michal Kubecek <mkubecek@suse.cz>\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/kcm/kcmsock.c||net/kcm/kcmsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/kcm/kcmsock.c||net/kcm/kcmsock.c": [
          "File: net/kcm/kcmsock.c -> net/kcm/kcmsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2054:  if (err)",
          "2055:   goto fail;",
          "2061:  err = register_pernet_device(&kcm_net_ops);",
          "2062:  if (err)",
          "2063:   goto net_ops_fail;",
          "2065:  err = kcm_proc_init();",
          "2066:  if (err)",
          "2067:   goto proc_init_fail;",
          "",
          "[Removed Lines]",
          "2057:  err = sock_register(&kcm_family_ops);",
          "2058:  if (err)",
          "2059:   goto sock_register_fail;",
          "",
          "[Added Lines]",
          "2061:  err = sock_register(&kcm_family_ops);",
          "2062:  if (err)",
          "2063:   goto sock_register_fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2069:  return 0;",
          "2071: proc_init_fail:",
          "2075:  sock_unregister(PF_KCM);",
          "2077: sock_register_fail:",
          "2078:  proto_unregister(&kcm_proto);",
          "2080: fail:",
          "",
          "[Removed Lines]",
          "2072:  unregister_pernet_device(&kcm_net_ops);",
          "2074: net_ops_fail:",
          "",
          "[Added Lines]",
          "2075:  unregister_pernet_device(&kcm_net_ops);",
          "2077: net_ops_fail:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2090: static void __exit kcm_exit(void)",
          "2091: {",
          "2092:  kcm_proc_exit();",
          "2094:  sock_unregister(PF_KCM);",
          "2095:  proto_unregister(&kcm_proto);",
          "2096:  destroy_workqueue(kcm_wq);",
          "",
          "[Removed Lines]",
          "2093:  unregister_pernet_device(&kcm_net_ops);",
          "",
          "[Added Lines]",
          "2094:  unregister_pernet_device(&kcm_net_ops);",
          "",
          "---------------"
        ]
      }
    }
  ]
}