{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ad84bd849e00917b9007edea4521da48a6a00ed1",
      "candidate_info": {
        "commit_hash": "ad84bd849e00917b9007edea4521da48a6a00ed1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ad84bd849e00917b9007edea4521da48a6a00ed1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Begin an enhancement effort for the built-in DBSTAT virtual table.\n\nFossilOrigin-Name: 9b5722f0fe666b99677e5f333dd8413aefb9ace7a461d74f6558f0ac53768719",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4330f0795dbc2ab41dddd41d5979331fb9b78c477c66367c4be52f929531a45f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   \");\"",
          "75: typedef struct StatTable StatTable;",
          "76: typedef struct StatCursor StatCursor;",
          "77: typedef struct StatPage StatPage;",
          "78: typedef struct StatCell StatCell;",
          "80: struct StatCell {",
          "",
          "[Removed Lines]",
          "59: #define VTAB_SCHEMA                                                         \\",
          "60:   \"CREATE TABLE xx( \"                                                       \\",
          "61:   \"  name       TEXT,             /* Name of table or index */\"             \\",
          "62:   \"  path       TEXT,             /* Path to page from root */\"             \\",
          "63:   \"  pageno     INTEGER,          /* Page number */\"                        \\",
          "64:   \"  pagetype   TEXT,             /* 'internal', 'leaf' or 'overflow' */\"   \\",
          "65:   \"  ncell      INTEGER,          /* Cells on page (0 for overflow) */\"     \\",
          "66:   \"  payload    INTEGER,          /* Bytes of payload on this page */\"      \\",
          "67:   \"  unused     INTEGER,          /* Bytes of unused space on this page */\" \\",
          "68:   \"  mx_payload INTEGER,          /* Largest payload size of all cells */\"  \\",
          "69:   \"  pgoffset   INTEGER,          /* Offset of page in file */\"             \\",
          "70:   \"  pgsize     INTEGER,          /* Size of the page */\"                   \\",
          "71:   \"  schema     TEXT HIDDEN       /* Database schema being analyzed */\"     \\",
          "",
          "[Added Lines]",
          "59: #define VTAB_SCHEMA                                                          \\",
          "60:   \"CREATE TABLE xx( \"                                                        \\",
          "61:   \"  name       TEXT,\"          /*  0 Name of table or index */              \\",
          "62:   \"  path       TEXT,\"          /*  1 Path to page from root */              \\",
          "63:   \"  pageno     INTEGER,\"       /*  2 Page number */                         \\",
          "64:   \"  pagetype   TEXT,\"          /*  3 'internal', 'leaf' or 'overflow' */    \\",
          "65:   \"  ncell      INTEGER,\"       /*  4 Cells on page (0 for overflow) */      \\",
          "66:   \"  payload    INTEGER,\"       /*  5 Bytes of payload on this page */       \\",
          "67:   \"  unused     INTEGER,\"       /*  6 Bytes of unused space on this page */  \\",
          "68:   \"  mx_payload INTEGER,\"       /*  7 Largest payload size of all cells */   \\",
          "69:   \"  pgoffset   INTEGER,\"       /*  8 Offset of page in file */              \\",
          "70:   \"  pgsize     INTEGER,\"       /*  9 Size of the page */                    \\",
          "71:   \"  schema     TEXT HIDDEN,\"   /* 10 Database schema being analyzed */      \\",
          "72:   \"  aggregate  BOOLEAN HIDDEN\" /* 11 aggregate info for each table */       \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: };",
          "89: struct StatPage {",
          "",
          "[Removed Lines]",
          "90:   u32 iPgno;",
          "91:   DbPage *pPg;",
          "92:   int iCell;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: };",
          "105: struct StatCursor {",
          "",
          "[Removed Lines]",
          "106:   sqlite3_vtab_cursor base;",
          "111:   StatPage aPage[32];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125: };",
          "127: struct StatTable {",
          "131: };",
          "",
          "[Removed Lines]",
          "128:   sqlite3_vtab base;",
          "129:   sqlite3 *db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185: }",
          "194: static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "195:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:   int iSchema = -1;",
          "206:   int iName = -1;",
          "207:   int iAgg = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "205:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "211:   }",
          "",
          "[Removed Lines]",
          "203:     if( pIdxInfo->aConstraint[i].iColumn!=10 ) continue;",
          "204:     if( pIdxInfo->aConstraint[i].usable==0 ) return SQLITE_CONSTRAINT;",
          "206:     pIdxInfo->idxNum = 1;",
          "207:     pIdxInfo->estimatedCost = 1.0;",
          "208:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "209:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "210:     break;",
          "",
          "[Added Lines]",
          "216:     if( pIdxInfo->aConstraint[i].usable==0 ){",
          "218:       return SQLITE_CONSTRAINT;",
          "219:     }",
          "220:     switch( pIdxInfo->aConstraint[i].iColumn ){",
          "222:         iName = i;",
          "223:         break;",
          "224:       }",
          "226:         iSchema = i;",
          "227:         break;",
          "228:       }",
          "230:         iAgg = i;",
          "231:         break;",
          "232:       }",
          "233:     }",
          "235:   i = 0;",
          "236:   if( iSchema>=0 ){",
          "237:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "238:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "239:     pIdxInfo->idxNum |= 0x01;",
          "240:   }",
          "241:   if( iName>=0 ){",
          "242:     pIdxInfo->aConstraintUsage[iName].argvIndex = ++i;",
          "243:     pIdxInfo->aConstraintUsage[iName].omit = 1;",
          "244:     pIdxInfo->idxNum |= 0x02;",
          "245:   }",
          "246:   if( iAgg>=0 ){",
          "247:     pIdxInfo->aConstraintUsage[iAgg].argvIndex = ++i;",
          "248:     pIdxInfo->aConstraintUsage[iAgg].omit = 1;",
          "249:     pIdxInfo->idxNum |= 0x04;",
          "250:   }",
          "251:   pIdxInfo->estimatedCost = 1.0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:      )",
          "228:   ){",
          "229:     pIdxInfo->orderByConsumed = 1;",
          "230:   }",
          "232:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     pIdxInfo->idxNum |= 0x08;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:   return SQLITE_OK;",
          "295: }",
          "302: ){",
          "303:   int nLocal;",
          "304:   int nMinLocal;",
          "",
          "[Removed Lines]",
          "297: static void getLocalPayload(",
          "",
          "[Added Lines]",
          "342: static int getLocalPayload(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "315:   nLocal = nMinLocal + (nTotal - nMinLocal) % (nUsable - 4);",
          "316:   if( nLocal>nMaxLocal ) nLocal = nMinLocal;",
          "318: }",
          "320: static int statDecodePage(Btree *pBt, StatPage *p){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:   return nLocal;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "387:           iOff += sqlite3GetVarint(&aData[iOff], &dummy);",
          "388:         }",
          "389:         if( nPayload>(u32)p->nMxPayload ) p->nMxPayload = nPayload;",
          "391:         if( nLocal<0 ) goto statPageIsCorrupt;",
          "392:         pCell->nLocal = nLocal;",
          "393:         assert( nPayload>=(u32)nLocal );",
          "",
          "[Removed Lines]",
          "390:         getLocalPayload(nUsable, p->flags, nPayload, &nLocal);",
          "",
          "[Added Lines]",
          "434:         nLocal = getLocalPayload(nUsable, p->flags, nPayload);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "604: ){",
          "605:   StatCursor *pCsr = (StatCursor *)pCursor;",
          "606:   StatTable *pTab = (StatTable*)(pCursor->pVtab);",
          "612:     pCsr->iDb = sqlite3FindDbName(pTab->db, zDbase);",
          "613:     if( pCsr->iDb<0 ){",
          "614:       sqlite3_free(pCursor->pVtab->zErrMsg);",
          "",
          "[Removed Lines]",
          "607:   char *zSql;",
          "608:   int rc = SQLITE_OK;",
          "610:   if( idxNum==1 ){",
          "611:     const char *zDbase = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "[Added Lines]",
          "661:   statResetCsr(pCsr);",
          "662:   sqlite3_finalize(pCsr->pStmt);",
          "663:   pCsr->pStmt = 0;",
          "664:   if( idxNum & 0x01 ){",
          "666:     const char *zDbase = (const char*)sqlite3_value_text(argv[iArg++]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "618:   }else{",
          "619:     pCsr->iDb = pTab->iDb;",
          "620:   }",
          "630:   if( zSql==0 ){",
          "631:     return SQLITE_NOMEM_BKPT;",
          "632:   }else{",
          "",
          "[Removed Lines]",
          "621:   statResetCsr(pCsr);",
          "622:   sqlite3_finalize(pCsr->pStmt);",
          "623:   pCsr->pStmt = 0;",
          "624:   zSql = sqlite3_mprintf(",
          "625:       \"SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type\"",
          "626:       \"  UNION ALL  \"",
          "627:       \"SELECT name, rootpage, type\"",
          "628:       \"  FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0\"",
          "629:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName);",
          "",
          "[Added Lines]",
          "676:   if( idxNum & 0x02 ){",
          "678:     zName = (const char*)sqlite3_value_text(argv[iArg++]);",
          "679:   }",
          "680:   if( idxNum & 0x04 ){",
          "682:     pCsr->isAgg = sqlite3_value_double(argv[iArg++])!=0.0;",
          "683:   }else{",
          "684:     pCsr->isAgg = 0;",
          "685:   }",
          "686:   pSql = sqlite3_str_new(pTab->db);",
          "687:   sqlite3_str_appendf(pSql,",
          "688:       \"SELECT * FROM (\"",
          "689:         \"SELECT 'sqlite_master' AS name,1 AS rootpage,'table' AS type\"",
          "690:         \" UNION ALL \"",
          "691:         \"SELECT name,rootpage,type\"",
          "692:         \" FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0)\",",
          "693:       pTab->db->aDb[pCsr->iDb].zDbSName);",
          "694:   if( zName ){",
          "695:     sqlite3_str_appendf(pSql, \"WHERE name=%Q\", zName);",
          "696:   }",
          "697:   if( idxNum & 0x08 ){",
          "698:     sqlite3_str_appendf(pSql, \" ORDER BY name\");",
          "699:   }",
          "700:   zSql = sqlite3_str_finish(pSql);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "678:       sqlite3_result_int(ctx, pCsr->szPage);",
          "679:       break;",
          "681:       sqlite3 *db = sqlite3_context_db_handle(ctx);",
          "682:       int iDb = pCsr->iDb;",
          "683:       sqlite3_result_text(ctx, db->aDb[iDb].zDbSName, -1, SQLITE_STATIC);",
          "684:       break;",
          "685:     }",
          "686:   }",
          "687:   return SQLITE_OK;",
          "688: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:       sqlite3_result_int(ctx, pCsr->isAgg);",
          "759:       break;",
          "760:     }",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   INSERT INTO t3 SELECT a_string(110+rowid), a_string(221+rowid) FROM t3",
          "109:    ORDER BY rowid;",
          "110:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "112: } [list \\",
          "113:   sqlite_autoindex_t3_1 / 3 internal 3 368 623 125       \\",
          "114:   sqlite_autoindex_t3_1 /000/ 8 leaf 8 946 46 123        \\",
          "",
          "[Removed Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master';",
          "",
          "[Added Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:   CREATE INDEX i4 ON t4(x);",
          "151:   INSERT INTO t4(rowid, x) VALUES(2, a_string(7777));",
          "152:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "154: } [list \\",
          "155:   i4 / 3 leaf 1 103 905 7782                 \\",
          "156:   i4 /000+000000 4 overflow 0 1020 0 0       \\",
          "",
          "[Removed Lines]",
          "153:     FROM stat WHERE name != 'sqlite_master';",
          "",
          "[Added Lines]",
          "153:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16dd3985f0c78b77f0fd753ff151363d663d7413",
      "candidate_info": {
        "commit_hash": "16dd3985f0c78b77f0fd753ff151363d663d7413",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16dd3985f0c78b77f0fd753ff151363d663d7413",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/triggerC.test"
        ],
        "message": "Fix a segfault caused by using the RAISE function incorrectly (library now returns an error instead of crashing).\n\nFossilOrigin-Name: ddf06db702761d663119d508afe21d7dfebe963d576bb42fc2f2024205ab86f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/triggerC.test||test/triggerC.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23e200da5cfbde0798e67cd9e016e4a1cd73b67981e1af841493fcd123d8f547",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4745:     }",
          "4746:     return 2;",
          "4747:   }",
          "4749:     if( pA->op==TK_COLLATE && sqlite3ExprCompare(pParse, pA->pLeft,pB,iTab)<2 ){",
          "4750:       return 1;",
          "4751:     }",
          "",
          "[Removed Lines]",
          "4748:   if( pA->op!=pB->op ){",
          "",
          "[Added Lines]",
          "4748:   if( pA->op!=pB->op || pA->op==TK_RAISE ){",
          "",
          "---------------"
        ],
        "test/triggerC.test||test/triggerC.test": [
          "File: test/triggerC.test -> test/triggerC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: do_execsql_test 15.2.2 { SELECT * FROM x2;       } {1 2 3 4}",
          "1043: do_execsql_test 15.2.3 { SELECT * FROM \"\"\"x2\"\"\"; } {3 11 x y}",
          "1045: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045: #-------------------------------------------------------------------------",
          "1046: # At one point queries such as the following were causing segfaults.",
          "1047: #",
          "1048: do_catchsql_test 16.1 {",
          "1049:   SELECT raise(ABORT, 'msg') FROM sqlite_master",
          "1050:   UNION SELECT 1",
          "1051:   ORDER BY raise(IGNORE);",
          "1052: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "1054: do_catchsql_test 16.2 {",
          "1055:   SELECT count(*) FROM sqlite_master",
          "1056:   GROUP BY raise(IGNORE)",
          "1057:   HAVING raise(ABORT, 'msg');",
          "1058: } {1 {RAISE() may only be used within a trigger-program}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
      "candidate_info": {
        "commit_hash": "463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Get indexes working on virtual columns.\n\nFossilOrigin-Name: 450c48766c8e62653d074c95f69b0576de3880d183a1d1e5992d88b6fce6cc39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d236698e64b2a4b46f91a25279c406e0bf392fe66116678456f0a034c11d7b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1755:         sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[i].pExpr, regIdx+i);",
          "1756:         pParse->iSelfTab = 0;",
          "1757:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1758:       }else{",
          "1766:       }",
          "1767:     }",
          "1768:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "",
          "[Removed Lines]",
          "1759:         if( iField==XN_ROWID || iField==pTab->iPKey ){",
          "1760:           x = regNewData;",
          "1761:         }else{",
          "1762:           x = iField + regNewData + 1;",
          "1763:         }",
          "1764:         sqlite3VdbeAddOp2(v, iField<0 ? OP_IntCopy : OP_SCopy, x, regIdx+i);",
          "1765:         VdbeComment((v, \"%s\", iField<0 ? \"rowid\" : pTab->aCol[iField].zName));",
          "",
          "[Added Lines]",
          "1758:       }else if( iField==XN_ROWID || iField==pTab->iPKey ){",
          "1759:         x = regNewData;",
          "1760:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1761:         VdbeComment((v, \"rowid\"));",
          "1762: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1763:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1764:         pParse->iSelfTab = -(regNewData+1);",
          "1765:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1766:         pParse->iSelfTab = 0;",
          "1767:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1768: #endif",
          "1770:         x = sqlite3ColumnOfTable(pTab, iField) + regNewData + 1;",
          "1771:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1772:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
      "candidate_info": {
        "commit_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a faulty assert() in walker.c that could fail when processing an ALTER TABLE statement on a schema containing invalid table references that are part of a WINDOW definition.\n\nFossilOrigin-Name: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47e23064ba0205148f89e12803a62d5a4d6d2054f593f60c031e815112170b9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   {",
          "121:     Parse *pParse = pWalker->pParse;",
          "122:     if( pParse && IN_RENAME_OBJECT ){",
          "123:       int rc = walkWindowList(pWalker, p->pWinDefn);",
          "125:       return rc;",
          "126:     }",
          "127:   }",
          "",
          "[Removed Lines]",
          "124:       assert( rc==WRC_Continue );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   ) IN () OR t1.a=5}",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: reset_db",
          "242: do_execsql_test 11.1 {",
          "243:   CREATE TABLE t1(",
          "244:       a,b,c,d,e,f,g,h,j,jj,jjb,k,aa,bb,cc,dd,ee DEFAULT 3.14,",
          "245:       ff DEFAULT('hiccup'),Wg NOD NULL DEFAULT(false)",
          "246:   );",
          "248:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "249:     SELECT a, sum() w3 FROM t1",
          "250:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM abc));",
          "251:   END;",
          "252: }",
          "254: do_catchsql_test 11.2 {",
          "255:   ALTER TABLE t1 RENAME TO t1x;",
          "256: } {1 {error in trigger b: no such table: abc}}",
          "258: do_execsql_test 11.3 {",
          "259:   DROP TRIGGER b;",
          "260:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "261:     SELECT a, sum() w3 FROM t1",
          "262:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM t1));",
          "263:   END;",
          "264: } {}",
          "266: do_execsql_test 11.4 {",
          "267:   ALTER TABLE t1 RENAME TO t1x;",
          "268:   SELECT sql FROM sqlite_master WHERE name = 'b';",
          "269: } {",
          "270: {CREATE TRIGGER b AFTER INSERT ON \"t1x\" WHEN new.a BEGIN",
          "271:     SELECT a, sum() w3 FROM \"t1x\"",
          "272:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM \"t1x\"));",
          "273:   END}",
          "274: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
      "candidate_info": {
        "commit_hash": "3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_test.c",
          "ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_tokenizer.c",
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use the 64-bit memory allocator interfaces in extensions, whenever possible.\n\nFossilOrigin-Name: 07ee06fd390bfebebc014b47583d489747b0423bb96c810bed5c605ce0e3be71",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c",
          "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){",
          "132:   MatchinfoBuffer *pRet;",
          "137:   if( pRet ){",
          "138:     memset(pRet, 0, nByte);",
          "139:     pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet;",
          "",
          "[Removed Lines]",
          "133:   int nByte = sizeof(u32) * (2*nElem + 1) + sizeof(MatchinfoBuffer);",
          "134:   int nStr = (int)strlen(zMatchinfo);",
          "136:   pRet = sqlite3_malloc(nByte + nStr+1);",
          "",
          "[Added Lines]",
          "133:   sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1)",
          "134:                            + sizeof(MatchinfoBuffer);",
          "135:   sqlite3_int64 nStr = strlen(zMatchinfo);",
          "137:   pRet = sqlite3_malloc64(nByte + nStr+1);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c": [
          "File: ext/fts3/fts3_test.c -> ext/fts3/fts3_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   }else{",
          "450:     const char *pToken = p;",
          "452:     while( p<pEnd && testIsTokenChar(*p) ) p++;",
          "456:     if( nToken>pCsr->nBuffer ){",
          "457:       sqlite3_free(pCsr->aBuffer);",
          "459:     }",
          "460:     if( pCsr->aBuffer==0 ){",
          "461:       rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "451:     int nToken;",
          "453:     nToken = (int)(p-pToken);",
          "458:       pCsr->aBuffer = sqlite3_malloc(nToken);",
          "",
          "[Added Lines]",
          "451:     sqlite3_int64 nToken;",
          "453:     nToken = (sqlite3_int64)(p-pToken);",
          "458:       pCsr->aBuffer = sqlite3_malloc64(nToken);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c": [
          "File: ext/fts3/fts3_tokenize_vtab.c -> ext/fts3/fts3_tokenize_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:   if( idxNum==1 ){",
          "347:     const char *zByte = (const char *)sqlite3_value_text(apVal[0]);",
          "348:     int nByte = sqlite3_value_bytes(apVal[0]);",
          "350:     if( pCsr->zInput==0 ){",
          "351:       rc = SQLITE_NOMEM;",
          "352:     }else{",
          "",
          "[Removed Lines]",
          "349:     pCsr->zInput = sqlite3_malloc(nByte+1);",
          "",
          "[Added Lines]",
          "349:     pCsr->zInput = sqlite3_malloc64(nByte+1);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     int iArg = 0;",
          "197:     z = &z[n+1];",
          "198:     while( z<zEnd && (NULL!=(z = (char *)sqlite3Fts3NextToken(z, &n))) ){",
          "201:       if( !aNew ){",
          "202:         sqlite3_free(zCopy);",
          "203:         sqlite3_free((void *)aArg);",
          "",
          "[Removed Lines]",
          "199:       int nNew = sizeof(char *)*(iArg+1);",
          "200:       char const **aNew = (const char **)sqlite3_realloc((void *)aArg, nNew);",
          "",
          "[Added Lines]",
          "199:       sqlite3_int64 nNew = sizeof(char *)*(iArg+1);",
          "200:       char const **aNew = (const char **)sqlite3_realloc64((void *)aArg, nNew);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1752:   }",
          "1754:   if( nElem>0 ){",
          "1757:     if( !pReader ){",
          "1758:       rc = SQLITE_NOMEM;",
          "1759:     }else{",
          "",
          "[Removed Lines]",
          "1755:     int nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *);",
          "1756:     pReader = (Fts3SegReader *)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "1755:     sqlite3_int64 nByte;",
          "1756:     nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *);",
          "1757:     pReader = (Fts3SegReader *)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3369:   if( *pRC ) return;",
          "3371:   if( pBlob==0 ){",
          "3373:     return;",
          "",
          "[Removed Lines]",
          "3370:   pBlob = sqlite3_malloc( 10*p->nColumn );",
          "",
          "[Added Lines]",
          "3371:   pBlob = sqlite3_malloc64( 10*(sqlite3_int64)p->nColumn );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3417:   const int nStat = p->nColumn+2;",
          "3419:   if( *pRC ) return;",
          "3421:   if( a==0 ){",
          "3423:     return;",
          "",
          "[Removed Lines]",
          "3420:   a = sqlite3_malloc( (sizeof(u32)+10)*nStat );",
          "",
          "[Added Lines]",
          "3421:   a = sqlite3_malloc64( (sizeof(u32)+10)*(sqlite3_int64)nStat );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3538:     }",
          "3540:     if( rc==SQLITE_OK ){",
          "3543:       if( aSz==0 ){",
          "3544:         rc = SQLITE_NOMEM;",
          "3545:       }else{",
          "",
          "[Removed Lines]",
          "3541:       int nByte = sizeof(u32) * (p->nColumn+1)*3;",
          "3542:       aSz = (u32 *)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "3542:       sqlite3_int64 nByte = sizeof(u32) * ((sqlite3_int64)p->nColumn+1)*3;",
          "3543:       aSz = (u32 *)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3605: ){",
          "3611:   memset(pCsr, 0, sizeof(*pCsr));",
          "3612:   nByte = sizeof(Fts3SegReader *) * nSeg;",
          "3615:   if( pCsr->apSegment==0 ){",
          "3616:     rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "3613:   pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "3614:   pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5590:   }",
          "5594:   if( aSzDel==0 ){",
          "5595:     rc = SQLITE_NOMEM;",
          "5596:     goto update_out;",
          "",
          "[Removed Lines]",
          "5593:   aSzDel = sqlite3_malloc( sizeof(aSzDel[0])*(p->nColumn+1)*2 );",
          "",
          "[Added Lines]",
          "5594:   aSzDel = sqlite3_malloc64(sizeof(aSzDel[0])*((sqlite3_int64)p->nColumn+1)*2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:       p->eRemoveDiacritic = FTS5_REMOVE_DIACRITICS_SIMPLE;",
          "371:       p->nFold = 64;",
          "373:       if( p->aFold==0 ){",
          "374:         rc = SQLITE_NOMEM;",
          "375:       }",
          "",
          "[Removed Lines]",
          "372:       p->aFold = sqlite3_malloc(p->nFold * sizeof(char));",
          "",
          "[Added Lines]",
          "372:       p->aFold = sqlite3_malloc64(p->nFold * sizeof(char));",
          "",
          "---------------"
        ],
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:       GeoPoly *pOut;",
          "270:       int x = 1;",
          "273:       x = 1;",
          "274:       if( pOut==0 ) goto parse_json_err;",
          "275:       pOut->nVertex = s.nVertex;",
          "",
          "[Removed Lines]",
          "272:       pOut = sqlite3_malloc64( GEOPOLY_SZ(s.nVertex) );",
          "",
          "[Added Lines]",
          "272:       pOut = sqlite3_malloc64( GEOPOLY_SZ((sqlite3_int64)s.nVertex) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:     if( pRc ) *pRc = SQLITE_OK;",
          "656:     if( aCoord==0 ){",
          "657:       geopolyBboxFill:",
          "659:       if( pOut==0 ){",
          "660:         sqlite3_free(p);",
          "661:         if( context ) sqlite3_result_error_nomem(context);",
          "",
          "[Removed Lines]",
          "658:       pOut = sqlite3_realloc(p, GEOPOLY_SZ(4));",
          "",
          "[Added Lines]",
          "658:       pOut = sqlite3_realloc64(p, GEOPOLY_SZ(4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1053: static int geopolyOverlap(GeoPoly *p1, GeoPoly *p2){",
          "1055:   GeoOverlap *p;",
          "1057:   GeoEvent *pThisEvent;",
          "1058:   double rX;",
          "1059:   int rc = 0;",
          "",
          "[Removed Lines]",
          "1054:   int nVertex = p1->nVertex + p2->nVertex + 2;",
          "1056:   int nByte;",
          "",
          "[Added Lines]",
          "1054:   sqlite3_int64 nVertex = p1->nVertex + p2->nVertex + 2;",
          "1056:   sqlite3_int64 nByte;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1065:   nByte = sizeof(GeoEvent)*nVertex*2",
          "1066:            + sizeof(GeoSegment)*nVertex",
          "1067:            + sizeof(GeoOverlap);",
          "1069:   if( p==0 ) return -1;",
          "1070:   p->aEvent = (GeoEvent*)&p[1];",
          "1071:   p->aSegment = (GeoSegment*)&p->aEvent[nVertex*2];",
          "",
          "[Removed Lines]",
          "1068:   p = sqlite3_malloc( nByte );",
          "",
          "[Added Lines]",
          "1068:   p = sqlite3_malloc64( nByte );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1233:   sqlite3_vtab_config(db, SQLITE_VTAB_CONSTRAINT_SUPPORT, 1);",
          "1239:   if( !pRtree ){",
          "1240:     return SQLITE_NOMEM;",
          "1241:   }",
          "",
          "[Removed Lines]",
          "1236:   nDb = (int)strlen(argv[1]);",
          "1237:   nName = (int)strlen(argv[2]);",
          "1238:   pRtree = (Rtree *)sqlite3_malloc(sizeof(Rtree)+nDb+nName+2);",
          "",
          "[Added Lines]",
          "1236:   nDb = strlen(argv[1]);",
          "1237:   nName = strlen(argv[2]);",
          "1238:   pRtree = (Rtree *)sqlite3_malloc64(sizeof(Rtree)+nDb+nName+2);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b6ae032c28e7fe34d81d1769f6e2901addbd1b95cd9a255dcef274061fb0164",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}