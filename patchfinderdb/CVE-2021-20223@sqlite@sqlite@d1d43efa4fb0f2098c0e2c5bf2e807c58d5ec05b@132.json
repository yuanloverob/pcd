{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80aff0847e4b0c792f88efa97ed39a58366d8bb6",
      "candidate_info": {
        "commit_hash": "80aff0847e4b0c792f88efa97ed39a58366d8bb6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/80aff0847e4b0c792f88efa97ed39a58366d8bb6",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/misc7.test",
          "test/permutations.test",
          "test/pragma4.test"
        ],
        "message": "Fix minor test script problems.\n\nFossilOrigin-Name: 5d54cd44d076cfede60bd404a59bd700a950420b961ae9fdec4365a3e4ed18ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/misc7.test||test/misc7.test",
          "test/permutations.test||test/permutations.test",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6f91769fdb0734905f05e1f4d1c81364e6e874450c9f13a0de2259d564f582a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/misc7.test||test/misc7.test": [
          "File: test/misc7.test -> test/misc7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:       catchsql {",
          "456:         SELECT count(*) FROM t3;",
          "457:       }",
          "459:   }",
          "460: }",
          "462: # Ticket #2470",
          "463: #",
          "464: do_test misc7-18.1 {",
          "465:   execsql {",
          "466:     CREATE TABLE table_1 (col_10);",
          "",
          "[Removed Lines]",
          "458:     } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "458:     } {1 {malformed database schema (t3) - invalid rootpage}}",
          "464: reset_db",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "975:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "976:   delete_db.test shmlock.test chunksize.test",
          "977: }]",
          "979: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "977:   busy2.test",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   sqlite3 db2 test.db2",
          "121:   execsql { DROP TABLE t1 } db3",
          "122:   execsql { DROP TABLE t2 } db2",
          "125: do_execsql_test 4.1.6 { PRAGMA table_info(t2) }",
          "127: db2 close",
          "",
          "[Removed Lines]",
          "123: } {}",
          "124: do_execsql_test 4.1.5 { PRAGMA table_info(t1) }",
          "",
          "[Added Lines]",
          "123: } {}",
          "124: if {[permutation]==\"prepare\"} {",
          "125:   do_catchsql_test 4.1.5a {",
          "126:     PRAGMA table_info(t1)",
          "127:   } {1 {database schema has changed}}",
          "128: }",
          "129: do_execsql_test 4.1.5 {",
          "130:   PRAGMA table_info(t1)",
          "131: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
      "candidate_info": {
        "commit_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94febb3a77a8c79bc090119585fc7878f44bbf38",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Improved detection of corrupt shadow tables in FTS3.  Enable the debugging special-inserts for FTS3 for both SQLITE_DEBUG and SQLITE_TEST.\n\nFossilOrigin-Name: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int bIncrOk = (bOptOk",
          "4338:    && pCsr->bDesc==pTab->bDescIdx",
          "4339:    && p->nToken<=MAX_INCR_PHRASE_TOKENS && p->nToken>0",
          "4341:    && pTab->bNoIncrDoclist==0",
          "4342: #endif",
          "4343:   );",
          "",
          "[Removed Lines]",
          "4340: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "4340: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: #endif",
          "303:   int bNoIncrDoclist;",
          "",
          "[Removed Lines]",
          "300: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "300: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <string.h>",
          "24: #include <assert.h>",
          "25: #include <stdlib.h>",
          "28: #define FTS_MAX_APPENDABLE_HEIGHT 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2030:     nPrefix = fts3PrefixCompress(pTree->zTerm, pTree->nTerm, zTerm, nTerm);",
          "2031:     nSuffix = nTerm-nPrefix;",
          "2033:     nReq += sqlite3Fts3VarintLen(nPrefix)+sqlite3Fts3VarintLen(nSuffix)+nSuffix;",
          "2034:     if( nReq<=p->nNodeSize || !pTree->zTerm ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2036:     if( nSuffix<=0 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2324:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nPrefix);",
          "2325:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nSuffix);",
          "2326:   memcpy(&pWriter->aData[nData], &zTerm[nPrefix], nSuffix);",
          "2327:   nData += nSuffix;",
          "2328:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nDoclist);",
          "2329:   memcpy(&pWriter->aData[nData], aDoclist, nDoclist);",
          "2330:   pWriter->nData = nData + nDoclist;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:   assert( nSuffix>0 );",
          "2335:   assert( nDoclist>0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2345:       pWriter->zTerm = zNew;",
          "2346:     }",
          "2347:     assert( pWriter->zTerm==pWriter->zMalloc );",
          "2348:     memcpy(pWriter->zTerm, zTerm, nTerm);",
          "2349:   }else{",
          "2350:     pWriter->zTerm = (char *)zTerm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:     assert( nTerm>0 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2653:     pMsr->aBuffer = pNew;",
          "2654:   }",
          "2656:   memcpy(pMsr->aBuffer, pList, nList);",
          "2657:   return SQLITE_OK;",
          "2658: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2664:   assert( nList>0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3842:     nPrefix = fts3PrefixCompress(pNode->key.a, pNode->key.n, zTerm, nTerm);",
          "3843:     nSuffix = nTerm - nPrefix;",
          "3844:     nSpace  = sqlite3Fts3VarintLen(nPrefix);",
          "3845:     nSpace += sqlite3Fts3VarintLen(nSuffix) + nSuffix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3853:     if( NEVER(nSuffix<=0) ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5360:     rc = fts3DoIncrmerge(p, &zVal[6]);",
          "5361:   }else if( nVal>10 && 0==sqlite3_strnicmp(zVal, \"automerge=\", 10) ){",
          "5362:     rc = fts3DoAutoincrmerge(p, &zVal[10]);",
          "5374:   }else{",
          "5376:   }",
          "5378:   return rc;",
          "5379: }",
          "",
          "[Removed Lines]",
          "5363: #ifdef SQLITE_TEST",
          "5364:   }else if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5365:     p->nNodeSize = atoi(&zVal[9]);",
          "5366:     rc = SQLITE_OK;",
          "5367:   }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5368:     p->nMaxPendingData = atoi(&zVal[11]);",
          "5369:     rc = SQLITE_OK;",
          "5370:   }else if( nVal>21 && 0==sqlite3_strnicmp(zVal, \"test-no-incr-doclist=\", 21) ){",
          "5371:     p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5372:     rc = SQLITE_OK;",
          "5373: #endif",
          "5375:     rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "5373: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "5375:     int v;",
          "5376:     if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5377:       v = atoi(&zVal[9]);",
          "5378:       if( v>=24 && v<=p->nPgsz-35 ) p->nNodeSize = v;",
          "5379:       rc = SQLITE_OK;",
          "5380:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5381:       v = atoi(&zVal[11]);",
          "5382:       if( v>=64 && v<=FTS3_MAX_PENDING_DATA ) p->nMaxPendingData = v;",
          "5383:       rc = SQLITE_OK;",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d33d9e7ac064aed9de16d25544c7f45dcb76465",
      "candidate_info": {
        "commit_hash": "9d33d9e7ac064aed9de16d25544c7f45dcb76465",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d33d9e7ac064aed9de16d25544c7f45dcb76465",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Background work for experiments trying to enhance ANALYZE so that it runs off of samples of the entire index and does not need to read the entire index.\n\nFossilOrigin-Name: 29d1cc5c3619a88229f18c3c8131228f8a2d151ac3d9203f0c7fc538a996ecec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3df07e5a9a3781a4cf866fc6ee0e5c6f9cd7ca35ce0a6eb3aa7f5f3502e0ffae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "189:   int aRoot[ArraySize(aTable)];",
          "190:   u8 aCreateTbl[ArraySize(aTable)];",
          "192:   if( v==0 ) return;",
          "193:   assert( sqlite3BtreeHoldsAllMutexes(db) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: #ifdef SQLITE_ENABLE_STAT4",
          "192:   const int nToOpen = OptimizationEnabled(db,SQLITE_Stat4) ? 2 : 1;",
          "193: #else",
          "194:   const int nToOpen = 1;",
          "195: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   for(i=0; i<ArraySize(aTable); i++){",
          "201:     const char *zTab = aTable[i].zName;",
          "202:     Table *pStat;",
          "203:     if( (pStat = sqlite3FindTable(db, zTab, pDb->zDbSName))==0 ){",
          "",
          "[Removed Lines]",
          "204:       if( aTable[i].zCols ){",
          "",
          "[Added Lines]",
          "208:     aCreateTbl[i] = 0;",
          "210:       if( i<nToOpen ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:       aRoot[i] = pStat->tnum;",
          "221:       sqlite3TableLock(pParse, iDb, aRoot[i], 1, zTab);",
          "222:       if( zWhere ){",
          "223:         sqlite3NestedParse(pParse,",
          "",
          "[Removed Lines]",
          "220:       aCreateTbl[i] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:   }",
          "240:     assert( i<ArraySize(aTable) );",
          "241:     sqlite3VdbeAddOp4Int(v, OP_OpenWrite, iStatCur+i, aRoot[i], iDb, 3);",
          "242:     sqlite3VdbeChangeP5(v, aCreateTbl[i]);",
          "",
          "[Removed Lines]",
          "239:   for(i=0; aTable[i].zCols; i++){",
          "",
          "[Added Lines]",
          "244:   for(i=0; i<nToOpen; i++){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357: static void statAccumDestructor(void *pOld){",
          "358:   StatAccum *p = (StatAccum*)pOld;",
          "359: #ifdef SQLITE_ENABLE_STAT4",
          "364: #endif",
          "365:   sqlite3DbFree(p->db, p);",
          "366: }",
          "",
          "[Removed Lines]",
          "360:   int i;",
          "361:   for(i=0; i<p->nCol; i++) sampleClear(p->db, p->aBest+i);",
          "362:   for(i=0; i<p->mxSample; i++) sampleClear(p->db, p->a+i);",
          "363:   sampleClear(p->db, &p->current);",
          "",
          "[Added Lines]",
          "365:   if( p->mxSample ){",
          "366:     int i;",
          "367:     for(i=0; i<p->nCol; i++) sampleClear(p->db, p->aBest+i);",
          "368:     for(i=0; i<p->mxSample; i++) sampleClear(p->db, p->a+i);",
          "369:     sampleClear(p->db, &p->current);",
          "370:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "402: #ifdef SQLITE_ENABLE_STAT4",
          "404: #endif",
          "",
          "[Removed Lines]",
          "403:   int mxSample = SQLITE_STAT4_SAMPLES;",
          "",
          "[Added Lines]",
          "410:   int mxSample = sqlite3_value_int(argv[2]) ? SQLITE_STAT4_SAMPLES : 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "437:   p->current.anEq = &p->current.anDLt[nColUp];",
          "439: #ifdef SQLITE_ENABLE_STAT4",
          "",
          "[Removed Lines]",
          "440:   {",
          "",
          "[Added Lines]",
          "447:   if( mxSample ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "704:   }else{",
          "706: #ifdef SQLITE_ENABLE_STAT4",
          "708: #endif",
          "",
          "[Removed Lines]",
          "707:     samplePushPrevious(p, iChng);",
          "",
          "[Added Lines]",
          "714:     if( p->mxSample ) samplePushPrevious(p, iChng);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "715:     for(i=iChng; i<p->nCol; i++){",
          "716:       p->current.anDLt[i]++;",
          "717: #ifdef SQLITE_ENABLE_STAT4",
          "719: #endif",
          "720:       p->current.anEq[i] = 1;",
          "721:     }",
          "722:   }",
          "723:   p->nRow++;",
          "724: #ifdef SQLITE_ENABLE_STAT4",
          "739:     if( (nLt/p->nPSample)!=(nLt+1)/p->nPSample ){",
          "740:       p->current.isPSample = 1;",
          "",
          "[Removed Lines]",
          "718:       p->current.anLt[i] += p->current.anEq[i];",
          "725:   if( sqlite3_value_type(argv[2])==SQLITE_INTEGER ){",
          "726:     sampleSetRowidInt64(p->db, &p->current, sqlite3_value_int64(argv[2]));",
          "727:   }else{",
          "728:     sampleSetRowid(p->db, &p->current, sqlite3_value_bytes(argv[2]),",
          "729:                                        sqlite3_value_blob(argv[2]));",
          "730:   }",
          "731:   p->current.iHash = p->iPrn = p->iPrn*1103515245 + 12345;",
          "732: #endif",
          "734: #ifdef SQLITE_ENABLE_STAT4",
          "735:   {",
          "736:     tRowcnt nLt = p->current.anLt[p->nCol-1];",
          "",
          "[Added Lines]",
          "725:       if( p->mxSample ) p->current.anLt[i] += p->current.anEq[i];",
          "732:   if( p->mxSample ){",
          "733:     tRowcnt nLt;",
          "734:     if( sqlite3_value_type(argv[2])==SQLITE_INTEGER ){",
          "735:       sampleSetRowidInt64(p->db, &p->current, sqlite3_value_int64(argv[2]));",
          "736:     }else{",
          "737:       sampleSetRowid(p->db, &p->current, sqlite3_value_bytes(argv[2]),",
          "738:                                          sqlite3_value_blob(argv[2]));",
          "739:     }",
          "740:     p->current.iHash = p->iPrn = p->iPrn*1103515245 + 12345;",
          "742:     nLt = p->current.anLt[p->nCol-1];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "804:        || eCall==STAT_GET_ROWID || eCall==STAT_GET_NLT",
          "805:        || eCall==STAT_GET_NDLT",
          "806:   );",
          "807:   if( eCall==STAT_GET_STAT1 )",
          "808: #else",
          "809:   assert( argc==1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:   assert( eCall==STAT_GET_STAT1 || p->mxSample );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1091: #ifdef SQLITE_ENABLE_STAT4",
          "1093: #endif",
          "1094:     sqlite3VdbeAddOp2(v, OP_Integer, nCol, regStat4+1);",
          "1095:     sqlite3VdbeAddOp2(v, OP_Integer, pIdx->nKeyCol, regStat4+2);",
          "",
          "[Removed Lines]",
          "1092:     sqlite3VdbeAddOp2(v, OP_Count, iIdxCur, regStat4+3);",
          "",
          "[Added Lines]",
          "1098:     if( OptimizationEnabled(db, SQLITE_Stat4) ){",
          "1099:       sqlite3VdbeAddOp2(v, OP_Count, iIdxCur, regStat4+3);",
          "1100:     }else{",
          "1101:       sqlite3VdbeAddOp2(v, OP_Integer, 0, regStat4+3);",
          "1102:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1173: #ifdef SQLITE_ENABLE_STAT4",
          "1186:       }",
          "1189:     }",
          "1190: #endif",
          "1191:     assert( regChng==(regStat4+1) );",
          "",
          "[Removed Lines]",
          "1174:     assert( regRowid==(regStat4+2) );",
          "1175:     if( HasRowid(pTab) ){",
          "1176:       sqlite3VdbeAddOp2(v, OP_IdxRowid, iIdxCur, regRowid);",
          "1177:     }else{",
          "1178:       Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);",
          "1179:       int j, k, regKey;",
          "1180:       regKey = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "1181:       for(j=0; j<pPk->nKeyCol; j++){",
          "1182:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "1183:         assert( k>=0 && k<pIdx->nColumn );",
          "1184:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, regKey+j);",
          "1185:         VdbeComment((v, \"%s\", pTab->aCol[pPk->aiColumn[j]].zName));",
          "1187:       sqlite3VdbeAddOp3(v, OP_MakeRecord, regKey, pPk->nKeyCol, regRowid);",
          "1188:       sqlite3ReleaseTempRange(pParse, regKey, pPk->nKeyCol);",
          "",
          "[Added Lines]",
          "1184:     if( OptimizationEnabled(db, SQLITE_Stat4) ){",
          "1185:       assert( regRowid==(regStat4+2) );",
          "1186:       if( HasRowid(pTab) ){",
          "1187:         sqlite3VdbeAddOp2(v, OP_IdxRowid, iIdxCur, regRowid);",
          "1188:       }else{",
          "1189:         Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);",
          "1190:         int j, k, regKey;",
          "1191:         regKey = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "1192:         for(j=0; j<pPk->nKeyCol; j++){",
          "1193:           k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "1194:           assert( k>=0 && k<pIdx->nColumn );",
          "1195:           sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, regKey+j);",
          "1196:           VdbeComment((v, \"%s\", pTab->aCol[pPk->aiColumn[j]].zName));",
          "1197:         }",
          "1198:         sqlite3VdbeAddOp3(v, OP_MakeRecord, regKey, pPk->nKeyCol, regRowid);",
          "1199:         sqlite3ReleaseTempRange(pParse, regKey, pPk->nKeyCol);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1208: #ifdef SQLITE_ENABLE_STAT4",
          "1210:       int regEq = regStat1;",
          "1211:       int regLt = regStat1+1;",
          "1212:       int regDLt = regStat1+2;",
          "",
          "[Removed Lines]",
          "1209:     {",
          "",
          "[Added Lines]",
          "1221:     if( OptimizationEnabled(db, SQLITE_Stat4) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
      "candidate_info": {
        "commit_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c904885b1ab038346a6a47752c3b88deefba2b4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "In the SQLITE_OPEN_NOFOLLOW processing, distinguish between an I/O error on the xAccess() call and an actual symlink encounter.\n\nFossilOrigin-Name: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4790:     const char *z;",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4798:     }",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "",
          "[Removed Lines]",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "",
          "[Added Lines]",
          "4793:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4794:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4795:       if( rc ) return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0c4ef711f625e1cdcc1340803e87e681e21e5f3",
      "candidate_info": {
        "commit_hash": "b0c4ef711f625e1cdcc1340803e87e681e21e5f3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0c4ef711f625e1cdcc1340803e87e681e21e5f3",
        "files": [
          "doc/trusted-schema.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Design notes for the new-security-options branch.\n\nFossilOrigin-Name: af7c1ed4f8a7293d0ecacca3cfbe9414e0de5ec40b418ce7831b8dc724feb747",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d662129a601e05e8fca5717a890b5bc920b80a750d061f3c2494788d32b917a5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}