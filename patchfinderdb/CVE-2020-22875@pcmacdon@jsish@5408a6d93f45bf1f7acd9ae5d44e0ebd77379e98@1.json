{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "302b16da546cfe23faaff60ce903c455918648d6",
      "candidate_info": {
        "commit_hash": "302b16da546cfe23faaff60ce903c455918648d6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/302b16da546cfe23faaff60ce903c455918648d6",
        "files": [
          "Makefile",
          "make.conf",
          "src/jsi.h",
          "tests/freeze.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.0\": Revised build system to not require configure\n\nFossilOrigin-Name: 61320a09ce69800eba082103b7f69db537d58b6891dbe8877ca26fb77760ef0e",
        "before_after_code_files": [
          "make.conf||make.conf",
          "src/jsi.h||src/jsi.h",
          "tests/freeze.jsi||tests/freeze.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "make.conf||make.conf": [
          "File: make.conf -> make.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   1",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   2",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------"
        ],
        "tests/freeze.jsi||tests/freeze.jsi": [
          "File: tests/freeze.jsi -> tests/freeze.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x, j;",
          "2: ;x = {a:1, b:2};",
          "3: ;'\\n---- Freeze object';",
          "4: ;Object.freeze(x);",
          "6: ;'\\n---- Query freeze state';",
          "7: ;Info.obj(x);",
          "8: ;x.a = 9;",
          "9: ;++x.b;",
          "11: ;'\\n---- Bad write/read';",
          "12: ;//x.c = 8;",
          "13: ;//j= x.c;",
          "15: ;'\\n---- Disable modify';",
          "16: ;Object.freeze(x,true,false);",
          "17: ;//x.a = 10;",
          "19: ;'\\n---- Disable modify and readcheck';",
          "20: ;Object.freeze(x,true,false,false);",
          "21: ;//x.a = 11;",
          "22: ;x.e;",
          "24: ;'\\n---- Unfreeze';",
          "25: ;Object.freeze(x,false);",
          "26: ;x.f=13;",
          "30: =!EXPECTSTART!=",
          "31: x = {a:1, b:2} ==> { a:1, b:2 }",
          "32: '",
          "33: ---- Freeze object'",
          "34: Object.freeze(x) ==> undefined",
          "35: '",
          "36: ---- Query freeze state'",
          "37: Info.obj(x) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[], objType:\"object\", setters:[], spec:undefined }",
          "38: x.a = 9 ==> 9",
          "39: ++x.b ==> 3",
          "40: '",
          "41: ---- Bad write/read'",
          "42: x.c = 8 ==>",
          "43: [PASS]!: err = object freeze: attempted assign \"c\"",
          "44: j= x.c ==>",
          "45: [PASS]!: err = object freeze: read undefined \"c\"",
          "46: '",
          "47: ---- Disable modify'",
          "48: Object.freeze(x,true,false) ==> undefined",
          "49: x.a = 10 ==>",
          "50: [PASS]!: err = object freeze: attempted assign/modify \"a\"",
          "51: '",
          "52: ---- Disable modify and readcheck'",
          "53: Object.freeze(x,true,false,false) ==> undefined",
          "54: x.a = 11 ==>",
          "55: [PASS]!: err = object freeze: attempted assign/modify \"a\"",
          "56: x.e ==> undefined",
          "57: '",
          "58: ---- Unfreeze'",
          "59: Object.freeze(x,false) ==> undefined",
          "60: x.f=13 ==> 13",
          "61: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "eeaab226ef4d8750ddc4b5b1172f90f90080cf44",
      "candidate_info": {
        "commit_hash": "eeaab226ef4d8750ddc4b5b1172f90f90080cf44",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/eeaab226ef4d8750ddc4b5b1172f90f90080cf44",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiSocket.c",
          "src/jsiValue.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.3\": fix memory leak in WebSocket. \"source()\" now returns the value from the last file sourced.\n\nFossilOrigin-Name: a08428e74ea7f4eaf225ced9b8c6e9455ea4e0c0f49fe1bb2bec9841ce8c1085",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiSocket.c||src/jsiSocket.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         }",
          "139:     }",
          "140: done:",
          "141:     interp->isMain = oisi;",
          "142:     interp->includeDepth--;",
          "143:     return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     if (rc == JSI_OK)",
          "142:         Jsi_ValueCopy(interp, *ret, interp->retValue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3423: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3424:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3425: {",
          "3428:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3429:     bool varsOnly = 0;",
          "3430:     if (arg)",
          "",
          "[Removed Lines]",
          "3426:     if (!interp->framePtr->funcName)",
          "3427:         return Jsi_LogError(\"Not in function\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4867:     { \"setInterval\",setIntervalCmd,  2,  2, \"callback:function, ms:number\", .help=\"Setup recurring function to run every given millisecs\", .retType=(uint)JSI_TT_NUMBER },",
          "4868:     { \"setTimeout\", setTimeoutCmd,   2,  2, \"callback:function, ms:number\", .help=\"Setup function to run after given millisecs\", .retType=(uint)JSI_TT_NUMBER },",
          "4869: #endif",
          "4871:     { \"strftime\",   DateStrftimeCmd, 0,  2, \"num:number=null, options:string|object=void\",  .help=\"Format numeric time (in ms) to a string\", .retType=(uint)JSI_TT_STRING, .flags=0, .info=FN_strftime, .opts=DateOptions },",
          "4872:     { \"strptime\",   DateStrptimeCmd, 0,  2, \"val:string=void, options:string|object=void\",  .help=\"Parse time from string and return ms time since 1970-01-01 in UTC, or NaN\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=0, .opts=DateOptions },",
          "4873:     { \"times\",      SysTimesCmd,     1,  2, \"callback:function|boolean, count:number=1\", .help=\"Call function count times and return execution time in microseconds\", .retType=(uint)JSI_TT_NUMBER },",
          "",
          "[Removed Lines]",
          "4870:     { \"source\",     SysSourceCmd,    1,  2, \"val:string|array, options:object=void\",  .help=\"Load and evaluate source files: trailing '/' appends PARENTDIR.jsi\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "[Added Lines]",
          "4872:     { \"source\",     SysSourceCmd,    1,  2, \"val:string|array, options:object=void\",  .help=\"Load and evaluate source files: trailing '/' appends PARENTDIR.jsi\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "753:     Jsi_FuncObj *fobj = tocall->d.obj->d.fobj;",
          "754:     Jsi_Func *funcPtr = fobj->func;",
          "756:         goto empty_func;",
          "757:     if (!interp->asserts && funcPtr->callback == jsi_AssertCmd)",
          "758:         goto empty_func;",
          "759:     const char *onam = funcPtr->name;",
          "",
          "[Removed Lines]",
          "755:     if (funcPtr->callback == jsi_NoOpCmd || tocall->d.obj->isNoOp)",
          "",
          "[Added Lines]",
          "755:     if (funcPtr->callback == jsi_NoOpCmd || tocall->d.obj->isNoOp) {",
          "756:         jsi_NoOpCmd(interp, NULL, NULL, NULL, NULL);",
          "758:     }",
          "",
          "---------------"
        ],
        "src/jsiSocket.c||src/jsiSocket.c": [
          "File: src/jsiSocket.c -> src/jsiSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:     }",
          "361:     Jsi_StackFreeElements(pss->cmdPtr->interp, pss->stack, sockFreeStackPss);",
          "362:     Jsi_StackFree(pss->stack);",
          "365:     pss->cmdPtr->connectCnt--;",
          "366:     pss->state = PSS_DEAD;",
          "367:     Jsi_Free(pss);",
          "",
          "[Removed Lines]",
          "363:     if (pss->udata)",
          "364:         Jsi_DecrRefCount(pss->cmdPtr->interp, pss->udata);",
          "",
          "[Added Lines]",
          "363:     Jsi_OptionsFree(pss->cmdPtr->interp, SPSOptions, pss, 0);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     return ValueDup(interp, v);",
          "93: }",
          "94: #else",
          "97: {",
          "98:     return;",
          "99: }",
          "101: {",
          "102:     return;",
          "103: }",
          "109: void jsi_ValueDebugUpdate_(Jsi_Interp *interp, jsi_ValueDebug *vd, void *v, Jsi_Hash* tbl, const char *fname, int line, const char *func)",
          "110: {",
          "",
          "[Removed Lines]",
          "96: void jsi_DebugValue(Jsi_Value* v, const char *reason, uint idx, Jsi_Interp *interp)",
          "100: void jsi_DebugObj(Jsi_Obj* o, const char *reason, uint idx, Jsi_Interp *interp)",
          "105: static uint jsi_memDebugBreakIdx = 0;  // Debug memory by setting this, and adding BP on following func.",
          "106: void jsi_memDebugBreak() {",
          "107: }",
          "",
          "[Added Lines]",
          "95: static uint jsi_memDebugBreakIdx = 0;  // Debug memory by setting this, and adding BP on following func.",
          "96: void jsi_memDebugBreak() {",
          "97: }",
          "100: void jsi_DebugValue(Jsi_Value* v, const char *reason, uint cidx, Jsi_Interp *interp)",
          "102:     if (jsi_memDebugBreakIdx && jsi_memDebugBreakIdx == v->VD.Idx)",
          "103:         jsi_memDebugBreak();",
          "106: void jsi_DebugObj(Jsi_Obj* o, const char *reason, uint cidx, Jsi_Interp *interp)",
          "108:     if (jsi_memDebugBreakIdx && jsi_memDebugBreakIdx == o->VD.Idx)",
          "109:         jsi_memDebugBreak();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:         vd->ipFname = vd->ip->fname;",
          "122:     }",
          "123:     vd->interp = interp;",
          "125:         jsi_memDebugBreak();",
          "126: }",
          "",
          "[Removed Lines]",
          "124:     if (jsi_memDebugBreakIdx == vd->Idx)",
          "",
          "[Added Lines]",
          "129:     if (jsi_memDebugBreakIdx && jsi_memDebugBreakIdx == vd->Idx)",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:     }",
          "470:     jsi_wsCmdObj*cmdPtr = pss->cmdPtr;",
          "471:     cmdPtr->sfd = pss->sfd;",
          "474:     Jsi_DSFree(&pss->dHdrs);",
          "475:     if (pss->isWebsock)",
          "476:         pss->cmdPtr->stats.connectCnt--;",
          "",
          "[Removed Lines]",
          "472:     pss->clientName = cmdPtr->clientName;",
          "473:     pss->clientIP = cmdPtr->clientIP;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:     pss->state = PWS_DEAD;",
          "479:     Jsi_DSFree(&pss->resultStr);",
          "480:     Jsi_DSFree(&pss->paramDS);",
          "486:     if (pss->lastData)",
          "487:         Jsi_Free(pss->lastData);",
          "490:     pss->lastData = NULL;",
          "491:     if (pss->spa)",
          "492:         lws_spa_destroy(pss->spa);",
          "493:     Jsi_Free(pss);",
          "494: }",
          "",
          "[Removed Lines]",
          "481:     Jsi_DSFree(&pss->url);",
          "482:     if (pss->query)",
          "483:         Jsi_DecrRefCount(interp, pss->query);",
          "484:     if (pss->queryObj)",
          "485:         Jsi_DecrRefCount(interp, pss->queryObj);",
          "488:     if (pss->udata)",
          "489:         Jsi_DecrRefCount(interp, pss->udata);",
          "",
          "[Added Lines]",
          "486:     Jsi_OptionsFree(cmdPtr->interp, WPSOptions, pss, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1682:     Jsi_IncrRefCount(interp, vpargs);",
          "1684:     Jsi_Value *ret = Jsi_ValueNew1(interp);",
          "1688:     if (rc == JSI_OK && Jsi_ValueIsUndef(interp, ret)==0 && !isClose) {",
          "1690:     }",
          "",
          "[Removed Lines]",
          "1685:     Jsi_ValueMakeUndef(interp, &ret);",
          "1686:     Jsi_RC rc;",
          "1687:         rc = Jsi_FunctionInvoke(interp, func, vpargs, &ret, NULL);",
          "",
          "[Added Lines]",
          "1679:     Jsi_RC rc = Jsi_FunctionInvoke(interp, func, vpargs, &ret, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2409: static Jsi_RC WebSocketIdCmdOp(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2410:     Jsi_Value **ret, Jsi_Func *funcPtr, int op)",
          "2411: {",
          "2412:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2413:     if (!cmdPtr)",
          "2414:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "2416:     Jsi_Number vid;",
          "2417:     if (Jsi_ValueGetNumber(interp, valPtr, &vid) != JSI_OK || vid < 0)",
          "2418:         return Jsi_LogError(\"Expected connection number id\");",
          "",
          "[Removed Lines]",
          "2415:     Jsi_Value *valPtr = Jsi_ValueArrayIndex(interp, args, 0);",
          "",
          "[Added Lines]",
          "2404:     Jsi_RC rc = JSI_OK;",
          "2408:     Jsi_Value *v, *valPtr = Jsi_ValueArrayIndex(interp, args, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2433:     if (!pss)",
          "2434:         return Jsi_LogError(\"No such id: %d\", id);",
          "2435:     switch (op) {",
          "2437:         case 1:",
          "2438:             jsi_wsDumpHeaders(cmdPtr, pss, Jsi_ValueArrayIndexToStr(interp, args, 1, NULL), ret);",
          "2439:             break;",
          "",
          "[Removed Lines]",
          "2436:         case 0: return Jsi_OptionsConf(interp, WPSOptions, pss, Jsi_ValueArrayIndex(interp, args, 1), ret, 0);",
          "",
          "[Added Lines]",
          "2429:         case 0:",
          "2430:             v = Jsi_ValueArrayIndex(interp, args, 1);",
          "2431:             rc = Jsi_OptionsConf(interp, WPSOptions, pss, v, ret, 0);",
          "2432:             break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2442:             jsi_wsDumpQuery(cmdPtr, pss, Jsi_ValueArrayIndexToStr(interp, args, 1, NULL), ret);",
          "2443:             break;",
          "2444:     }",
          "2446: }",
          "2448: static Jsi_RC WebSocketIdConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "2445:     return JSI_OK;",
          "",
          "[Added Lines]",
          "2441:     return rc;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: Math.prototype.sqrt = function(num:number):number {};",
          "185: Math.prototype.srand = function(seed:number):number {};",
          "186: Math.prototype.tan = function(num:number):number {};",
          "187: var Number = function(cmd,args) {};",
          "188: Number.prototype.isFinite = function():boolean {};",
          "189: Number.prototype.isInteger = function():boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: var MySql = function(cmd,args) {};",
          "188: MySql.prototype.affectedRows = function():number {};",
          "189: MySql.prototype.complete = function(sql:string):boolean {};",
          "190: MySql.prototype.conf = function(options:string|object=void):any {};",
          "191: MySql.prototype.errorNo = function():number {};",
          "192: MySql.prototype.errorState = function():string {};",
          "193: MySql.prototype.eval = function(sql:string):number {};",
          "194: MySql.prototype.exists = function(sql:string):boolean {};",
          "195: MySql.prototype.info = function():object {};",
          "196: MySql.prototype.lastQuery = function():string {};",
          "197: MySql.prototype.lastRowid = function():number {};",
          "198: MySql.prototype.onecolumn = function(sql:string):any {};",
          "199: MySql.prototype.ping = function(noError:boolean=false):number {};",
          "200: MySql.prototype.query = function(sql:string, options:function|string|array|object=void):any {};",
          "201: MySql.prototype.reconnect = function():void {};",
          "202: MySql.prototype.reset = function():number {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291: System.prototype.setInterval = function(callback:function, ms:number):number {};",
          "292: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
          "293: System.prototype.sleep = function(secs:number=1.0):void {};",
          "295: System.prototype.strftime = function(num:number=null, options:string|object=void):string {};",
          "296: System.prototype.strptime = function(val:string=void, options:string|object=void):number {};",
          "297: System.prototype.times = function(callback:function|boolean, count:number=1):number {};",
          "",
          "[Removed Lines]",
          "294: System.prototype.source = function(val:string|array, options:object=void):void {};",
          "",
          "[Added Lines]",
          "310: System.prototype.source = function(val:string|array, options:object=void):any {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382: var setInterval = function(callback:function, ms:number):number {};",
          "383: var setTimeout = function(callback:function, ms:number):number {};",
          "384: var sleep = function(secs:number=1.0):void {};",
          "386: var strftime = function(num:number=null, options:string|object=void):string {};",
          "387: var strptime = function(val:string=void, options:string|object=void):number {};",
          "388: var times = function(callback:function|boolean, count:number=1):number {};",
          "",
          "[Removed Lines]",
          "385: var source = function(val:string|array, options:object=void):void {};",
          "",
          "[Added Lines]",
          "401: var source = function(val:string|array, options:object=void):any {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
          "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
          "1367: <tr><td>sleep</td><td>sleep(secs:number=1.0):void </td><td>sleep for N milliseconds, minimum .001.</td></tr>",
          "1369: <tr><td>strftime</td><td>strftime(num:number=null, <a href='#System.strftimeOptions'>options</a>:string|object=void):string </td><td>Format numeric time (in ms) to a string. Null or no value will use current time.</td></tr>",
          "1370: <tr><td>strptime</td><td>strptime(val:string=void, <a href='#System.strptimeOptions'>options</a>:string|object=void):number </td><td>Parse time from string and return ms time since 1970-01-01 in UTC, or NaN.</td></tr>",
          "1371: <tr><td>times</td><td>times(callback:function|boolean, count:number=1):number </td><td>Call function count times and return execution time in microseconds.</td></tr>",
          "",
          "[Removed Lines]",
          "1368: <tr><td>source</td><td>source(val:string|array, <a href='#System.sourceOptions'>options</a>:object=void):void </td><td>Load and evaluate source files: trailing '/' appends PARENTDIR.jsi.</td></tr>",
          "",
          "[Added Lines]",
          "1368: <tr><td>source</td><td>source(val:string|array, <a href='#System.sourceOptions'>options</a>:object=void) </td><td>Load and evaluate source files: trailing '/' appends PARENTDIR.jsi.</td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27239bdfee26ad83bd0a17223bd0a04d91e21d9b",
      "candidate_info": {
        "commit_hash": "27239bdfee26ad83bd0a17223bd0a04d91e21d9b",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/27239bdfee26ad83bd0a17223bd0a04d91e21d9b",
        "files": [
          "Makefile",
          "lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi",
          "lib/Manage.jsi",
          "lib/Module.jsi",
          "lib/Wget.jsi",
          "lib/Zip.jsi",
          "lib/autoload.jsi",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "lib/www/version.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "src/jsiZvfs.c",
          "src/main.c",
          "tools/protos.jsi",
          "zhash.txt"
        ],
        "message": "Pre 3.5\n\nFossilOrigin-Name: 84000d3a84a0d2dccf0981281d324bb569f659464727eab6e8f6c5cf4bde0df5",
        "before_after_code_files": [
          "lib/Jsi_Vfs.jsi||liJsi_Vfs.jsi",
          "lib/Jsish.jsi||liJsish.jsi",
          "lib/Module.jsi||liManage.jsi",
          "lib/Wget.jsi||liWget.jsi",
          "lib/Zip.jsi||liZip.jsi",
          "lib/autoload.jsi||liautoload.jsi",
          "lib/www/js/Jsish.js||liwww/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "src/main.c||src/main.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsi_Vfs.jsi||liJsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> liJsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                 }",
          "135:             }",
          "136:             if (!ver || ver === '') ver = 'tip';",
          "139:             info = dosplit(self.exec('fossil info \"' + ver + '\" ' + sfx), info);",
          "140:             info.mntTag = ver;",
          "141:             if (ver.match(/^ver-[0-9]+\\.[0-9]+$/))",
          "",
          "[Removed Lines]",
          "137:             if (!self.quiet && ver !== '')",
          "138:                 puts('Fossil mount:', ver, mount, repoFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||liJsish.jsi": [
          "File: lib/Jsish.jsi -> liJsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:         return true;",
          "286:     var cln = cl.length, fln=fl.length;",
          "287:     if (cln > fln) {",
          "289:         return false;",
          "290:     }",
          "291:     var fadds = cl.filter( n => !fl.includes(n) );",
          "292:     if (fadds.length) {",
          "294:         return false;",
          "295:     }",
          "296:     var cadds = fl.filter( n => !cl.includes(n) );",
          "",
          "[Removed Lines]",
          "288:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"');",
          "293:         LogWarn('Can not sync, obj is missing fields in table: \"'+table+'\"\\n'+fadds.join('\\n|'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     }",
          "323: }",
          "329:     if (args.length > 0) {",
          "331:         if (!alen) throw 'null length';",
          "336:             if (sn.substr(0,alen) == a0) {",
          "337:                 if (sub) { emsg = 'Error: prefix not unique\\n'; sub=null; break; }",
          "339:             }",
          "340:         }",
          "341:         if (sub)",
          "343:     }",
          "344:     emsg += 'Arg 1 must be unique prefix of:\\n';",
          "345:     var len = 0;",
          "352:     throw emsg;",
          "353: }",
          "",
          "[Removed Lines]",
          "325: function Jsi_CmdTable(args:array, cmdList:array) {",
          "326:     if (typeof(cmdList[0]) != 'array' || cmdList[0].length != 3)",
          "327:         throw 'expected list of [string, func, string]';",
          "328:     var emsg = '';",
          "330:         var sub, a0 = args[0], alen = a0.length;",
          "332:         for (var i of cmdList) {",
          "333:             var sn = i[0];",
          "334:             if (sn == a0)",
          "335:                 return i[1].apply(null, args.slice(1));",
          "338:                 sub = i;",
          "342:             return sub[1].apply(null, args.slice(1));",
          "346:     for (i of cmdList)",
          "347:         if (i[0].length>len)",
          "348:             len = i[0].length;",
          "349:     for (i of cmdList)",
          "350:         emsg += format(\"  %-*s - %s\\n\", len, i[0], i[2]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Module.jsi||liManage.jsi": [
          "File: lib/Module.jsi -> liManage.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: require('Jsi', '2.4');",
          "7:     const options = { // Run or create a Jsi module.",
          "8:         output  :'',        // Override the output filename default of create + .jsi.",
          "9:         quiet   :false,     // No messages.",
          "10:         repo    :'https://jsish.org/afossil',        // Repo source for parent of subproject",
          "11:     };",
          "12:     var self = {",
          "13:         rootdir      :'',   // Root directory.",
          "",
          "[Removed Lines]",
          "5: function Module(args:array, conf:object=void) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         File.chmod(out, 0755);",
          "27:     }",
          "30:     function sclone(app:string='pdq', name:string='') {",
          "31:         var ver;",
          "32:         if (Info.platform().platform == 'unix')",
          "33:             ver = exec('which fossil');",
          "34:         else",
          "36:         if (!ver)",
          "37:             throw 'install fossil first, eg. use \"sudo apt install fossil\" or \"sudo jsish -M getfossil\"';",
          "38:         var cnt = File.glob('*', {retCount:true});",
          "39:         if (cnt)",
          "40:             throw 'setup must be used in an empty directory';",
          "44:             throw 'sorry: already in open fossil: '+ver.split('\\n')[0];",
          "46:         var dname = File.tail(File.pwd());",
          "48:         if (!name)",
          "",
          "[Removed Lines]",
          "35:             ver = exec('fossil version', {noError:true});",
          "42:         if (File.exists('.fslckout')) {",
          "43:             ver = exec('fossil info', {noError:true});",
          "45:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         var pfn = name+'.fossil';",
          "62:         if (url[0] == '/' && File.exists(url+'.fossil'))",
          "63:             url += '.fossil';",
          "65:         if (!self.quiet)",
          "66:             puts(ccmd);",
          "68:         if (!self.quiet)",
          "69:             puts(cval);",
          "70:         var db = new Sqlite(pfn);",
          "71:         var now = parseInt(strptime()/1000);",
          "73:             \"UPDATE config SET name='parent-project-name' WHERE name='project-name';\");",
          "74:         db.query(\"INSERT INTO config(name,mtime,value) VALUES('project-code',@now, lower(hex(randomblob(20))));\");",
          "75:         db.query(\"INSERT INTO config(name,mtime,value) VALUES('parent-project-url', @now,(SELECT value FROM config WHERE name == 'last-sync-url'));\");",
          "76:         db.query(\"INSERT INTO config(name,mtime,value)  VALUES('project-name', @now, @proj);\");",
          "77:         if (self.quiet)",
          "78:             return;",
          "82:             Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "85:         var dfn = 'html/index.html';",
          "86:         if (!File.exists('index.html') && File.exists(dfn)) {",
          "87:             var idat = File.read(dfn);",
          "88:             idat = idat.map(['\"../', '\"']);",
          "89:             File.write('index.html', idat);",
          "90:         }",
          "92:         if (File.exists('main.jsi'))",
          "93:             puts('DONE! To finish setup run: \"jsish .\"');",
          "94:         else",
          "95:             puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "96:     }",
          "100:         if (!url)",
          "102:         if (url[0] == \"'\" && url.length>3)",
          "103:             url = url.substr(1,url.length-3);",
          "105:         if (dif)",
          "106:             throw 'must run \"fossil commit\" first';",
          "108:     }",
          "110:     function jsonify(name) {",
          "",
          "[Removed Lines]",
          "64:         var ccmd = 'fossil clone '+url+' '+pfn;",
          "67:         var cval = exec(ccmd);",
          "72:         db.eval(\"UPDATE config SET name='parent-project-code' WHERE name='project-code';\"+",
          "79:         exec('fossil open '+pfn);",
          "80:         exec('fossil remote-url off');",
          "81:         if (!File.isdir('jsi')) {",
          "83:             exec('fossil add jsi');",
          "84:         }",
          "91:         exec('fossil commit -m sclone --no-warnings');",
          "98:     function supdate() {",
          "99:         var url = exec(`fossil sql \"SELECT value FROM config WHERE name = 'parent-project-url'\"`);",
          "101:             throw 'not a subproject';",
          "104:         var dif = exec('fossil diff');",
          "107:         return exec('fossil pull --from-parent-project '+url);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:         return moduleRun(fn);",
          "156:     }",
          "158:     function createmod(fn:string, tmpname='Module') {",
          "159:         if (self.rootdir === '')",
          "160:             self.rootdir=Info.scriptDir();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:             console.printf(\"Created module '%s' in %s\\n\", pat, fn);",
          "179:     }",
          "191:     return Jsi_CmdTable(args, cmdList);",
          "192: }",
          "",
          "[Removed Lines]",
          "181:     var cmdList = [",
          "182:         [\"createmod\",   createmod,  \"Create a .jsi module from template\" ],",
          "183:         [\"es5lint\",     es5lint,    \"Perform lint check with ES6 features disabled\"],",
          "184:         [\"getfossil\",   getfossil,  \"Download fossil executable\"],",
          "185:         [\"jsonify\",     jsonify,    \"Normalize a json file\"],",
          "186:         [\"run\",         run,        \"Run a module\" ],",
          "187:         [\"sclone\",      sclone,     \"Clone a sub-project from fossil parent (pdq)\"],",
          "188:         [\"supdate\",     supdate,    \"Update a sub-project created with sclone: pulls changes\"]",
          "189:     ];",
          "194: module(Module);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||liWget.jsi": [
          "File: lib/Wget.jsi -> liWget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             self.response += str;",
          "46:             return;",
          "47:         }",
          "51:     }",
          "53:     function WsClose(ws:userobj|null, id:number, isError:boolean) {",
          "",
          "[Removed Lines]",
          "48:         if (!self.fd)",
          "49:             self.fd = new Channel((self.O==='-'?\"stdout\":self.O), 'wb+');",
          "50:         self.fd.write(str);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||liZip.jsi": [
          "File: lib/Zip.jsi -> liZip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     function list(fname:string) {",
          "58:         fname = File.realpath(fname);",
          "59:         if (fname === Info.executable())",
          "60:             zdir = '/zvfs';",
          "61:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:         return create.apply(null, args);",
          "128:     }",
          "139:     var zdir, rc = 0;",
          "140:     if (!args || args.length < 1) {",
          "141:         usage('');",
          "",
          "[Removed Lines]",
          "130:     var cmdList = [",
          "131:         [\"create\",  create,  \"Create standalone executable\"],",
          "132:         [\"fuse\",    fuse,    \"Use .zip file to produce a standalone executable\"],",
          "133:         [\"list\",    list,    \"List files in zip\"],",
          "134:         [\"trunc\",   trunc,   \"Truncate zip files off of executable\"],",
          "135:         [\"unzip\",   unzip,   \"Unpack files from zip archive, optionally into dest dir\"],",
          "136:         [\"zip\",     zip,     \"Create zip File\"],",
          "137:         [\"zvfs\",    zvfs,    \"Add zvfs files from jsish to a standalone executable\"]",
          "138:     ];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||liautoload.jsi": [
          "File: lib/autoload.jsi -> liautoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: Jsi_Auto.Testing    = 'source(\"'+Info.scriptDir()+'/Testing.jsi\")';",
          "27: Jsi_Auto.Vfs        = 'source(\"'+Info.scriptDir()+'/Jsi_VFS.jsi\")';",
          "28: Jsi_Auto.Archive    = 'source(\"'+Info.scriptDir()+'/Archive.jsi\")';",
          "30: Jsi_Auto.Help       = 'source(\"'+Info.scriptDir()+'/Help.jsi\")';",
          "31: Jsi_Auto.DebugUI        = 'source(\"'+Info.scriptDir()+'/DebugUI/DebugUI.jsi\")';",
          "32: Jsi_Auto.SqliteUI       = 'source(\"'+Info.scriptDir()+'/SqliteUI/SqliteUI.jsi\")';",
          "",
          "[Removed Lines]",
          "29: Jsi_Auto.Module     = 'source(\"'+Info.scriptDir()+'/Module.jsi\")';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||liwww/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> liwww/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:                         window.onerror = (vals[i]?errHandler:undefined);",
          "445:                         break;",
          "446:                     case 'interp':",
          "450:                         break;",
          "451:                 }",
          "452:                 if (jsi.config[i] !== null && tt !== (ti=gettype(vals[i])))",
          "",
          "[Removed Lines]",
          "447:                         if (vv.logOpts.Debug) Log.conf('debug', true);",
          "448:                         if (vv.logOpts.Trace) Log.conf('trace', true);",
          "449:                         if (vv.logOpts.Test)  Log.conf('test', true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   4",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   5",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:     uint reserved:11;           // Reserved for future use.",
          "288:     int exitCode:16;            // Call exit with this code.",
          "289:     Jsi_Interp* interp;         // Jsi_InterpNew sets this to let Jsi_Main use this interp.",
          "291: } Jsi_InterpOpts;",
          "",
          "[Removed Lines]",
          "290:     void *reserved2[8];         // Reserved for future",
          "",
          "[Added Lines]",
          "290:     const char *zhash;          // Zvfs sha code for appended zip files.",
          "291:     void *reserved2[7];         // Reserved for future",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1192: static char *url_decode(char *str, int *len, bool comp) {",
          "1195:   while (*pstr) {",
          "1196:     if (*pstr == '%') {",
          "1197:       if (pstr[1] && pstr[2]) {",
          "",
          "[Removed Lines]",
          "1193:   char *comps = \";,/?:@&=+$#\", cc;",
          "1194:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "",
          "[Added Lines]",
          "1193:   const char *comps = \";,/?:@&=+$#\";",
          "1194:   char cc = 0, *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1495:             if (rc)",
          "1496:                 no = 0;",
          "1497:             restricted = 1;",
          "1498:         }",
          "1499:         if (no)",
          "1500:             return Jsi_LogError(\"no exec in safe mode\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1498:         } else if (interp->lockDown && !Jsi_Strcmp(interp->lockDown, \".\") && !Jsi_Strncmp(cp, \"fossil \", 7)) {",
          "1499:             no = 0;",
          "1500:             restricted = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2757:             release = n;",
          "2758:         }",
          "2759:         snprintf(buf, sizeof(buf),",
          "2762:         return Jsi_JSONParse(interp, buf, ret, 0);",
          "2763:     }",
          "2764:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2760:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\", version:%g}\",",
          "2761:             major, minor, release, major, minor, release, v);",
          "",
          "[Added Lines]",
          "2763:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\", version:%g, zhash:\\\"%s\\\"}\",",
          "2764:             major, minor, release, major, minor, release, v, interp->opts.zhash);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4591:     uint i, n = 0, siz, anum = 0, acnt=0;",
          "4592:     Jsi_Value **arr, *oargs;",
          "4593:     Jsi_Obj *obj;",
          "4594:     const char *anam;",
          "4595:     bool oisMain = interp->isMain, isMain = jsi_isMain(interp);",
          "4596:     if (interp->isMain) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4597:     Jsi_Func *func;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4629:         rc = Jsi_LogError(\"unknown command: %s\", (mod?mod:\"\"));",
          "4630:         goto done;",
          "4631:     }",
          "4633:     if (!isMain && func->filePtr->fileName == interp->framePtr->filePtr->fileName) {",
          "4634:         interp->framePtr->filePtr->pkg->loadLine = interp->curIp->Line; // for backtrace.",
          "4635:         goto done;",
          "",
          "[Removed Lines]",
          "4632:     Jsi_Func *func = cmd->d.obj->d.fobj->func;",
          "",
          "[Added Lines]",
          "4636:     func = cmd->d.obj->d.fobj->func;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:     jsi_OpCode *ip = (iPtr ? iPtr : interp->curIp);",
          "631:     if (!ip)",
          "632:         return;",
          "634:     if ((tc&jsi_callTraceFullPath)==0 && ((ff=Jsi_Strrchr(fname,'/'))))",
          "635:         fname = ff+1;",
          "636:     if (interp->traceHook)",
          "",
          "[Removed Lines]",
          "633:     const char *ff, *fname = ip->filePtr->fileName;",
          "",
          "[Added Lines]",
          "633:     const char *ff, *fname = (ip->filePtr?ip->filePtr->fileName:\"\");",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         || (create && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_CREATE) != JSI_OK))) \\",
          "53:         return Jsi_LogError(\"%s access denied by safe interp: %s\", writ?\"write\":\"read\", GSVal(fname));",
          "55: static char* getFileTypeCh(int mode, char smode[])",
          "56: {",
          "57:     char c = '-';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: static Jsi_RC jsi_SAFEACCESS(Jsi_Interp *interp, Jsi_Value *fname, bool write, bool create)",
          "56: {",
          "57:     SAFEACCESS(fname, write, create);",
          "58:     return JSI_OK;",
          "59: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: {",
          "99:     int rc;",
          "100:     Jsi_StatBuf st;",
          "102:     int islstat = flags&1;",
          "103:     int isshort = flags&2;",
          "104:     if (islstat)",
          "",
          "[Removed Lines]",
          "101:     SAFEACCESS(fnam, 0, 1)",
          "",
          "[Added Lines]",
          "107:     SAFEACCESS(fnam, 0, 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:     return JSI_OK;",
          "307: }",
          "315: static Jsi_RC FileTempfileCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "316:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "309: static Jsi_RC jsi_SAFEACCESS(Jsi_Interp *interp, Jsi_Value *fname, bool write)",
          "310: {",
          "311:     SAFEACCESS(fname, write, 1);",
          "312:     return JSI_OK;",
          "313: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:     if (Jsi_InterpSafe(interp)) {",
          "328:         Jsi_Value *fname = Jsi_ValueNewStringConst(interp, templ, -1);",
          "329:         Jsi_IncrRefCount(interp, fname);",
          "331:         Jsi_DecrRefCount(interp, fname);",
          "332:         if (rc != JSI_OK)",
          "333:             return rc;",
          "",
          "[Removed Lines]",
          "330:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1);",
          "",
          "[Added Lines]",
          "331:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "347:     if (Jsi_InterpSafe(interp)) {",
          "348:         Jsi_Value *fname = Jsi_ValueNewStringConst(interp, name, -1);",
          "349:         Jsi_IncrRefCount(interp, fname);",
          "351:         Jsi_DecrRefCount(interp, fname);",
          "352:         if (rc != JSI_OK)",
          "353:             return rc;",
          "",
          "[Removed Lines]",
          "350:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1);",
          "",
          "[Added Lines]",
          "351:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1, 1);",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:             || (Jsi_InterpAccess(interp, file, aflag) != JSI_OK",
          "525:                 && (aflag || !interp->opts.argv[0] || Jsi_Strcmp(fileName, Jsi_FileRealpathStr(interp, interp->opts.argv[0], pbuf))))",
          "526:             ) {",
          "529:             }",
          "530:         }",
          "531:         FILE *fp = fopen(fileName, Mode);",
          "",
          "[Removed Lines]",
          "527:                 Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "528:                 goto done;",
          "",
          "[Added Lines]",
          "527:                 if (writ || Jsi_Strcmp(fileName, jsiIntData.execName)) {",
          "528:                     Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "529:                     goto done;",
          "530:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:     void *data;",
          "619:     int rc = 0;",
          "620:     const char *pathPtr = Jsi_ValueToString(interp, path, NULL);",
          "623:     Jsi_Filesystem *fsPtr = Jsi_FilesystemForPath(interp, path, &data);",
          "624:     if (fsPtr == &jsiFilesystem) {",
          "625:         rc = chdir(pathPtr);",
          "",
          "[Removed Lines]",
          "621:     if (interp->isSafe && Jsi_InterpAccess(interp, path, JSI_INTACCESS_READ) != JSI_OK)",
          "622:         return Jsi_LogError(\"read access denied\");",
          "",
          "[Added Lines]",
          "623:     if (interp->isSafe && Jsi_InterpAccess(interp, path, JSI_INTACCESS_READ) != JSI_OK)",
          "624:         return Jsi_LogError(\"read access denied: %s\", pathPtr);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "789:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "790:           \"  -i MOD\\tInvoke named Module.\\n\"",
          "792:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "793:           \"  -t\\t\\tTesting of scripts or directories of scripts with .js/.jsi extension.\\n\"",
          "794:           \"  -w\\t\\tWget: web client to download file from url.\\n\"",
          "",
          "[Removed Lines]",
          "791:           \"  -m\\t\\tModule utilities\\n\"",
          "",
          "[Added Lines]",
          "791:           \"  -m\\t\\tManagement operatoins and utilities\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834:                 rc = Jsi_EvalString(interp, \"moduleRun('Jspp');\", JSI_EVAL_ISMAIN);",
          "835:                 break;",
          "836:             case 'm':",
          "838:                 break;",
          "839:             case 'i':",
          "840:                 if (argc <= 2)",
          "",
          "[Removed Lines]",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Manage');\", JSI_EVAL_ISMAIN);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:         return Jsi_LogError(\"must call via Object.assign\");",
          "534:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "536:         return Jsi_LogError(\"arg1: expected object\");",
          "537:     Jsi_Obj *obj = v->d.obj;",
          "538:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "535:     if (!v || !Jsi_ValueIsObjType(interp, v, JSI_VT_OBJECT))",
          "",
          "[Added Lines]",
          "535:     if (!v || !Jsi_ValueIsObjType(interp, v, JSI_OT_OBJECT))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:         Jsi_TreeEntry *tPtr;",
          "543:         Jsi_TreeSearch search;",
          "544:         Jsi_Value *vs = Jsi_ValueArrayIndex(interp, args, i);",
          "546:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "547:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "548:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "",
          "[Removed Lines]",
          "545:         if (!vs || !Jsi_ValueIsObjType(interp, vs, JSI_VT_OBJECT))",
          "",
          "[Added Lines]",
          "545:         if (!vs || !Jsi_ValueIsObjType(interp, vs, JSI_OT_OBJECT))",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"71408ed876f077893cd984b2f9f21794\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"66a604e16467a7a4ac605486b9ae23fc\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     Jsi_TreeEntry*(*_Jsi_TreeSearchFirst)(Jsi_Tree *treePtr, Jsi_TreeSearch *searchPtr, int flags, const void *startKey);",
          "309:     Jsi_TreeEntry*(*_Jsi_TreeSearchNext)(Jsi_TreeSearch *searchPtr);",
          "310:     void(*_Jsi_TreeSearchDone)(Jsi_TreeSearch *searchPtr);",
          "312:     Jsi_TreeEntry*(*_Jsi_TreeSet)(Jsi_Tree *treePtr, const void *key, void *value);",
          "313:     void*(*_Jsi_TreeGet)(Jsi_Tree *treePtr, void *key, int flags);",
          "314:     bool(*_Jsi_TreeUnset)(Jsi_Tree *treePtr, void *key);",
          "",
          "[Removed Lines]",
          "311:     int(*_Jsi_TreeWalk)(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags);",
          "",
          "[Added Lines]",
          "311:     Jsi_RC(*_Jsi_TreeWalk)(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags);",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:     return true;",
          "827: }",
          "830:     uint epoch = treePtr->epoch;",
          "831:     if (hPtr == NULL) return JSI_OK;",
          "832:     if (hPtr->right != NULL) {",
          "",
          "[Removed Lines]",
          "829: static int tree_inorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "[Added Lines]",
          "829: static Jsi_RC tree_inorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "844: }",
          "848:     uint epoch = treePtr->epoch;",
          "849:     if (hPtr == NULL) return JSI_OK;",
          "850:     if (callback(treePtr, hPtr, data) != JSI_OK || epoch != treePtr->epoch)",
          "",
          "[Removed Lines]",
          "847: static int tree_preorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "[Added Lines]",
          "847: static Jsi_RC tree_preorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "861: }",
          "865:     uint epoch = treePtr->epoch;",
          "866:     if (hPtr == NULL) return JSI_OK;",
          "867:     if (hPtr->right != NULL) {",
          "",
          "[Removed Lines]",
          "864: static int tree_postorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "[Added Lines]",
          "864: static Jsi_RC tree_postorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "878: }",
          "882:     void *data, int curlev, int level, int *cnt) {",
          "883:     uint epoch = treePtr->epoch;",
          "884:     if (hPtr == NULL) return JSI_OK;",
          "",
          "[Removed Lines]",
          "881: static int tree_levelorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback,",
          "",
          "[Added Lines]",
          "881: static Jsi_RC tree_levelorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900: }",
          "904:     Jsi_Interp *interp = treePtr->opts.interp;",
          "905:     JSI_NOTUSED(interp);",
          "906:     int n = 0, m = -1, lastm, order;",
          "",
          "[Removed Lines]",
          "903: int Jsi_TreeWalk(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags) {",
          "",
          "[Added Lines]",
          "903: Jsi_RC Jsi_TreeWalk(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags) {",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "984:     }",
          "985:     res = Jsi_Strdup(Jsi_DSValue(&dStr));",
          "986:     Jsi_DSFree(&dStr);",
          "988:     return res;",
          "989: }",
          "",
          "[Removed Lines]",
          "987:     printf(\"READ: %s\\n\", res);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1471:     bool isJsiWeb = 0, isSSI = 0, fallbackTry = 0;",
          "1472:     cmdPtr->stats.httpLast = now;",
          "1473:     Jsi_DString hStr = {};",
          "1476:     if (lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1474:     char extBuf[JSI_BUFSIZ], *cpde;",
          "1475:     bool isgzip = 0, native = 0;",
          "1476:     Jsi_Value *rdir;",
          "1477:     Jsi_DString sStr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1590:     }",
          "1591:     ext = Jsi_Strrchr(inPtr, '.');",
          "1594:     cmdPtr->curRoot = (rdir?Jsi_ValueString(cmdPtr->interp, rdir, NULL):\"./\");",
          "1596:     Jsi_DSInit(&sStr);",
          "1597:     jsi_wsPathAlias(interp, cmdPtr, &inPtr, &sStr);",
          "1598:     snprintf(buf, sizeof(buf), \"%s/%s\", cmdPtr->curRoot, inPtr);",
          "",
          "[Removed Lines]",
          "1593:     Jsi_Value *rdir = (pss->rootdir?pss->rootdir:cmdPtr->rootdir);",
          "1595:     Jsi_DString sStr;",
          "",
          "[Added Lines]",
          "1597:     rdir = (pss->rootdir?pss->rootdir:cmdPtr->rootdir);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1602:     Jsi_DSFree(&sStr);",
          "1603:     if (cmdPtr->debug>1)",
          "1604:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
          "1606:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
          "1608:     if (!ext || !ext[1])",
          "1609:         mime = \"text/html\";",
          "1610:     else {",
          "",
          "[Removed Lines]",
          "1605:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
          "1607:     bool isgzip = 0;",
          "",
          "[Added Lines]",
          "1608:     cpde = Jsi_Strrchr(buf, '/');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1806:     Jsi_IncrRefCount(interp, fname);",
          "1808:     Jsi_StatBuf jsb;",
          "1810:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1811:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "1812: nofile:",
          "",
          "[Removed Lines]",
          "1809:     bool native = Jsi_FSNative(interp, fname);",
          "",
          "[Added Lines]",
          "1811:     native = Jsi_FSNative(interp, fname);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1980:         return JSI_OK;",
          "1981:     vargs[n++] = (cmdPtr->deleted || !cmdPtr->fobj?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1982:     vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss?pss->wid:0));",
          "1983:     if (isClose)",
          "1984:         vargs[n++] = Jsi_ValueNewBoolean(interp, isError);",
          "1985:     else {",
          "1986:         if (nlen<=0)",
          "1987:             return JSI_OK;",
          "1988:         vargs[n++]  = Jsi_ValueNewBlob(interp, (uchar*)inPtr, nlen);",
          "1990:             Jsi_LogInfo(\"WS-RECV: %s\", inPtr);",
          "1991:         Jsi_LogTraceExt(\"WS-RECV: %s\", inPtr);",
          "1992:     }",
          "",
          "[Removed Lines]",
          "1989:         if ((cmdPtr->echo||(pss && pss->echo)) && inPtr)",
          "",
          "[Added Lines]",
          "1985:     int echo = (cmdPtr->echo||(pss && pss->echo));",
          "1992:         if (echo && inPtr)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1996:     Jsi_Value *ret = Jsi_ValueNew1(interp);",
          "1997:     Jsi_RC rc = Jsi_FunctionInvoke(interp, func, vpargs, &ret, NULL);",
          "1998:     if (rc == JSI_OK && Jsi_ValueIsUndef(interp, ret)==0 && !isClose) {",
          "2000:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2001:     if (rc != JSI_OK && echo && !Jsi_InterpGone(interp))",
          "2002:         Jsi_LogWarn(\"WS-RECV ERROR\");",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         p->nByteCompr = INT32(zBuf, 20);",
          "353:         p->nByte = INT32(zBuf, 24);",
          "354:         p->nExtra = INT32(zBuf, 28);",
          "357:         if (nFile < 0)",
          "358:             break;",
          "",
          "[Removed Lines]",
          "355:         p->iCRC = INT32(zBuf, 32);",
          "",
          "[Added Lines]",
          "355:         p->iCRC = INT32(zBuf, 16);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1623:     Jsi_Obj *sobj;",
          "1624:     Jsi_Value *sval;",
          "1627:     chan = Jsi_Open(interp, Filename, \"rb\");",
          "1628:     if (chan==0)",
          "1629:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "1626:     Jsi_Value *Filename = Jsi_ValueArrayIndex(interp, args, 0);;",
          "",
          "[Added Lines]",
          "1626:     Jsi_Value *Filename = Jsi_ValueArrayIndex(interp, args, 0);",
          "1627:     if (!Filename)",
          "1628:         Filename = jsiIntData.execValue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1637:     Jsi_ValueMakeArrayObject(interp, ret, nobj);",
          "1638:     sobj = Jsi_ObjNew(interp);",
          "1639:     sval = Jsi_ValueMakeArrayObject(interp, NULL, sobj);",
          "1641:     int i;",
          "1642:     for (i=0; keys[i]; i++)",
          "1643:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewStringKey(interp, keys[i]));",
          "",
          "[Removed Lines]",
          "1640:     static const char *keys[] = {\"Name\", \"Special\", \"Offset\", \"Bytes\", \"BytesCompressed\", 0 };",
          "",
          "[Added Lines]",
          "1642:     static const char *keys[] = {\"Name\", \"Special\", \"Offset\", \"Bytes\", \"BytesCompressed\", \"CRC\", 0 };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1654:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewNumber(interp, (Jsi_Number)pList->iOffset));",
          "1655:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewNumber(interp, (Jsi_Number)pList->nByte));",
          "1656:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewNumber(interp, (Jsi_Number)pList->nByteCompr));",
          "1657:         pNext = pList->pNext;",
          "1658:         Jsi_Free((char*)pList);",
          "1659:         pList = pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1659:         char sbuf[100];",
          "1660:         snprintf(sbuf, sizeof(sbuf), \"%x\", pList->iCRC);",
          "1661:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewStringDup(interp, sbuf));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2168:     int zipStart;",
          "2170:     Jsi_Value *Archive = Jsi_ValueArrayIndex(interp, args, 0);",
          "2171:     chan = Jsi_Open(interp, Archive, \"rb\");",
          "2172:     if( chan==0 ) return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2176:     if (!Archive)",
          "2177:         Archive = jsiIntData.execValue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2349: static Jsi_CmdSpec zvfsCmds[] = {",
          "2350:     { \"append\",     ZvfsAppendCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...\",  .help=\"Like 'create()', but appends to an existing archive (with no dup checking)\", .retType=(uint)JSI_TT_VOID },",
          "2351:     { \"create\",     ZvfsCreateCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...\",  .help=\"Create a zip with the given files in prefix path\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_create },",
          "2353:     { \"mount\",      ZvfsMountCmd,       1,  2, \"archive:string, mountdir:string=void\",  .help=\"Mount zip on mount point\", .retType=(uint)JSI_TT_STRING, .flags=0, .info=FN_mount },",
          "2354:     { \"names\",      ZvfsNamesCmd,       0,  1, \"mountdir:string=void\",  .help=\"Return all zvfs mounted zips, or archive for specified mount\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_info },",
          "2356:     { \"stat\",       ZvfsStatCmd,        1,  1, \"filename:string\",  .help=\"Return details on file in zvfs mount\", .retType=(uint)JSI_TT_OBJECT, .flags=0, .info=FN_stat },",
          "2357:     { \"truncate\",   ZvfsTruncateCmd,    1,  2, \"archive:string, noerror:boolean=false\",  .help=\"Truncate zip data from archive\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_truncate },",
          "2358:     { \"unmount\",    ZvfsUnmountCmd,     1,  1, \"archive:string\",  .help=\"Unmount zip\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Removed Lines]",
          "2352:     { \"list\",       ZvfsListCmd,        1,  1, \"archive:string\",  .help=\"List files in archive\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_list },",
          "2355:     { \"offset\",     ZvfsOffsetCmd,      1,  1, \"archive:string\",  .help=\"Return the start offset of zip data\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_truncate },",
          "",
          "[Added Lines]",
          "2359:     { \"list\",       ZvfsListCmd,        0,  1, \"archive:string=void\",  .help=\"List files in archive\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_list },",
          "2362:     { \"offset\",     ZvfsOffsetCmd,      0,  1, \"archive:string=void\",  .help=\"Return the start offset of zip data\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_truncate },",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         }",
          "42:     }",
          "43:     Jsi_InterpOpts opts = {.argc=argc, .argv=argv};",
          "44:     Jsi_Interp *interp = Jsi_Main(&opts);",
          "45:     if (interp)",
          "46:         Jsi_InterpDelete(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #ifdef JSI__ZHASH",
          "45:     opts.zhash = JSI__ZHASH;",
          "46: #endif",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: Zvfs.prototype.create = function(archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...):void {};",
          "351: Zvfs.prototype.deflate = function(data:string):string {};",
          "352: Zvfs.prototype.inflate = function(data:string):string {};",
          "354: Zvfs.prototype.mount = function(archive:string, mountdir:string=void):string {};",
          "355: Zvfs.prototype.names = function(mountdir:string=void):array {};",
          "357: Zvfs.prototype.stat = function(filename:string):object {};",
          "358: Zvfs.prototype.truncate = function(archive:string, noerror:boolean=false):number {};",
          "359: Zvfs.prototype.unmount = function(archive:string):void {};",
          "",
          "[Removed Lines]",
          "353: Zvfs.prototype.list = function(archive:string):array {};",
          "356: Zvfs.prototype.offset = function(archive:string):number {};",
          "",
          "[Added Lines]",
          "353: Zvfs.prototype.list = function(archive:string=void):array {};",
          "356: Zvfs.prototype.offset = function(archive:string=void):number {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
      "candidate_info": {
        "commit_hash": "788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
        "files": [
          "lib/Websrv.jsi",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tests/func.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.4\": object member dup detection, returned function invoke\n\nFossilOrigin-Name: 364d399b70459f7a23ae78c2650f2ee5b12270a26c25aea12b12a165d4de4503",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tests/func.jsi||tests/func.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 .js scripts in file or dir and below, then exit.",
          "",
          "[Added Lines]",
          "30:         es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:         }",
          "401:     }",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "",
          "[Removed Lines]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "",
          "[Added Lines]",
          "403:     function es5lint() {",
          "404:         var d = self.es5lint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:         }",
          "414:     }",
          "419:     if (self.srcFile !== '')",
          "420:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "416:     if (self.es5test)",
          "417:         return es5test();",
          "",
          "[Added Lines]",
          "416:     if (self.es5lint)",
          "417:         return es5lint();",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1880:                 int itemcount = (uintptr_t)ip->data;",
          "1881:                 Assert(itemcount>=0);",
          "1882:                 jsiVarDeref(interp, itemcount * 2);",
          "1885:                 jsiClearStack(interp,1);",
          "1886:                 Jsi_ValueMakeObject(interp, &_jsi_TOP, obj);",
          "",
          "[Removed Lines]",
          "1883:                 Jsi_Obj *obj = Jsi_ObjNewObj(interp, _jsi_STACK+(fp->Sp-itemcount*2), itemcount*2);",
          "",
          "[Added Lines]",
          "1883:                 Jsi_Obj *obj = jsi_ObjNewObj(interp, _jsi_STACK+(fp->Sp-itemcount*2), itemcount*2, 1);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547: extern bool jsi_ModBlacklisted(Jsi_Interp *interp, const char *mod);",
          "1548: extern bool jsi_FuncIsNoop(Jsi_Interp* interp, Jsi_Value *func);",
          "1549: extern Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcsOnly, bool varsOnly, Jsi_Value **ret);",
          "1551: typedef enum {",
          "1552:     _JSI_CDATA_INFO=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: extern Jsi_Obj *jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count, bool unique);",
          "1551: extern Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     hPtr = Jsi_TreeEntryNew(treePtr, key, &isNew);",
          "39:     if (!hPtr)",
          "40:         return NULL;",
          "42:         Jsi_LogWarn(\"add duplicate key: %s\", key);",
          "43:     if (val)",
          "44:         SIGASSERT(val,VALUE);",
          "",
          "[Removed Lines]",
          "41:     if (unique && !isNew)",
          "",
          "[Added Lines]",
          "41:     if (unique && !isNew) // Want this only from OP_OBJECT in jsiEval.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: {",
          "496:     const char *key = NULL;",
          "497:     int flags = 0;",
          "",
          "[Removed Lines]",
          "494: static Jsi_RC ObjInsertFromValue(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *keyVal, Jsi_Value *nv)",
          "",
          "[Added Lines]",
          "494: static Jsi_RC ObjInsertFromValue(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *keyVal, Jsi_Value *nv, bool unique)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "508:         key = Jsi_ValueGetDString(interp, keyVal, &dStr, 0);",
          "509:     if (!key)",
          "510:         return JSI_ERROR;",
          "512: }",
          "514: Jsi_RC Jsi_ObjFreeze(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck) {",
          "",
          "[Removed Lines]",
          "511:     return Jsi_ObjInsert(interp, obj, key, nv, flags);",
          "",
          "[Added Lines]",
          "511:     return jsi_ObjValInsert(interp, obj, key, nv, NULL, flags, unique);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "660:     return adp;",
          "661: }",
          "664: {",
          "665:     Jsi_Obj *obj = Jsi_ObjNewType(interp, JSI_OT_OBJECT);",
          "666:     if (count%2) return obj;",
          "",
          "[Removed Lines]",
          "663: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "",
          "[Added Lines]",
          "663: Jsi_Obj *jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count, bool unique)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:             }",
          "698:         }",
          "699:         v = Jsi_ValueDup(interp, v);",
          "701:         Jsi_DecrRefCount(interp, v);",
          "702:     }",
          "703:     return obj;",
          "704: }",
          "706: void Jsi_ObjSetLength(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
          "707: {",
          "708:     if (obj->isarrlist) {",
          "",
          "[Removed Lines]",
          "700:         ObjInsertFromValue(interp, obj, items[i], v);",
          "",
          "[Added Lines]",
          "700:         ObjInsertFromValue(interp, obj, items[i], v, unique);",
          "706: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "707: {",
          "708:     return jsi_ObjNewObj(interp, items, count, 0);",
          "709: }",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     return rc;",
          "1400: }",
          "1403: {",
          "1404:     Jsi_TreeEntry *hPtr;",
          "1405:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "[Added Lines]",
          "1402: Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1442: {",
          "1444: }",
          "1446: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "",
          "[Removed Lines]",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 1);",
          "",
          "[Added Lines]",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 0);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:         int expr_cnt = opl ? opl->expr_counter:0;",
          "738:         $$ = codes_join3(ff, (opl ? opl : code_nop()), code_fcall(pstate, &@3, expr_cnt, NULL, NULL, opl, NULL));",
          "739:     }",
          "740:     | '(' expr ')' '(' exprlist_opt ')' {",
          "741:         Jsi_OpCodes *opl = $5;",
          "742:         int expr_cnt = opl ? opl->expr_counter:0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:     | fcall_exprs '(' exprlist_opt ')' {",
          "741:         Jsi_OpCodes *opl = $3;",
          "742:         int expr_cnt = opl ? opl->expr_counter:0;",
          "743:         $$ = codes_join4($1, code_chthis(pstate,&@1, 0), (opl ? opl : code_nop()), code_fcall(pstate, &@2,expr_cnt, NULL, NULL, opl, NULL));",
          "744:     }",
          "",
          "---------------"
        ],
        "tests/func.jsi||tests/func.jsi": [
          "File: tests/func.jsi -> tests/func.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     return sum;",
          "8: };",
          "10: ;'===Begin Test===';",
          "11: ;a(10);",
          "12: ;a(100);",
          "13: ;a(1000);",
          "16: =!EXPECTSTART!=",
          "17: '===Begin Test==='",
          "18: a(10) ==> 45",
          "19: a(100) ==> 4950",
          "20: a(1000) ==> 499500",
          "21: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: function foo() {",
          "11:   return function (x) { return('FOO',x); };",
          "12: }",
          "13: function bar() {",
          "14:   return function () { return foo(); };",
          "15: }",
          "22: ;'===Func return-invoke===';",
          "23: ;(foo())(1);",
          "24: ;foo()(2);",
          "25: ;bar()()(3);",
          "34: '===Func return-invoke==='",
          "35: (foo())(1) ==> 1",
          "36: foo()(2) ==> 2",
          "37: bar()()(3) ==> 3",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "0ab8e4d02734762101ddbda80a005b8c5a3ab554",
      "candidate_info": {
        "commit_hash": "0ab8e4d02734762101ddbda80a005b8c5a3ab554",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0ab8e4d02734762101ddbda80a005b8c5a3ab554",
        "files": [
          "lib/Jsish.jsi",
          "lib/UnitTest.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "tests/logging.jsi",
          "tools/mkproto.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.39\": make LogXXX commands instead of binds.\n\nFossilOrigin-Name: 3716675268ecaaf7573cbdd3602708d7684882863cd51ab8f0c59b8e19ac5d64",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/UnitTest.jsi||lib/UnitTest.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tests/logging.jsi||tests/logging.jsi",
          "tools/mkproto.jsi||tools/mkproto.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     return false;",
          "307: }",
          "333: if (Info.isMain()) {",
          "335:     var self = {};",
          "",
          "[Removed Lines]",
          "310: function Jsi__Init() {",
          "312:     if (Interp.conf('debugOpts.debugCallback')) {",
          "313:         var scope = Info.level(1).scope;",
          "314:         scope.LogDebug = console.logp.bind(null, \"DEBUG:\");",
          "315:         scope.LogTrace = console.logp.bind(null, \"TRACE:\");",
          "316:         scope.LogTest  = console.logp.bind(null, \"TEST: \");",
          "317:         scope.LogWarn  = console.logp.bind(null, \"WARN: \");",
          "318:         scope.LogInfo  = console.logp.bind(null, \"INFO: \");",
          "319:         scope.LogError = console.logp.bind(null, \"ERROR:\");",
          "320:     } else {",
          "321:         Interp.alias('LogTrace', console.logp, [\"TRACE:\"]);",
          "322:         Interp.alias('LogDebug', console.logp, [\"DEBUG:\"]);",
          "323:         Interp.alias('LogTest',  console.logp, [\"TEST: \"]);",
          "324:         Interp.alias('LogWarn',  console.logp, [\"WARN: \"]);",
          "325:         Interp.alias('LogInfo',  console.logp, [\"INFO: \"]);",
          "326:         Interp.alias('LogError', console.logp, [\"ERROR:\"]);",
          "327:     }",
          "328:     Interp.conf({logOpts:{file:true, func:true, before:true}});",
          "329: }",
          "331: Jsi__Init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/UnitTest.jsi||lib/UnitTest.jsi": [
          "File: lib/UnitTest.jsi -> lib/UnitTest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "292: provide(UnitTest, 1);",
          "",
          "[Removed Lines]",
          "294: moduleRun(UnitTest);",
          "",
          "[Added Lines]",
          "294: if (Info.isMain())",
          "295:     exit(moduleRun(UnitTest));",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: if (Jsi_Auto.__autoloaded__)",
          "4:     return;",
          "11: Jsi_Auto.Jsi_AutoMake   =",
          "12: Jsi_Auto.Jsi_AutoPkg    =",
          "13: Jsi_Auto.Jsi_Main       =",
          "",
          "[Removed Lines]",
          "5: Jsi_Auto.LogTrace       =",
          "6: Jsi_Auto.LogDebug       =",
          "7: Jsi_Auto.LogTest        =",
          "8: Jsi_Auto.LogInfo        =",
          "9: Jsi_Auto.LogWarn        =",
          "10: Jsi_Auto.LogError       =",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: Jsi_Auto.DebugUI        = 'require(\"DebugUI\");';",
          "43: source(Info.scriptDir()+'/user/autoload.jsi', {exists:true, once:true});",
          "46: Jsi_Auto.__autoloaded__ =true;",
          "",
          "[Removed Lines]",
          "44: source(File.pwd()+'/autoload.jsi', {exists:true, once:true});",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 38",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 39",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1648:     if (argStr)",
          "1649:         Jsi_DSAppend(&dStr, argStr, NULL);",
          "1650:     if (args) { // Assert may call with a null args",
          "1652:             if (   ((!(interp->log&(1<<JSI_LOG_ERROR))) && jsi_PrefixMatch(argStr, \"ERROR: \"))",
          "1653:                 || ((!(interp->log&(1<<JSI_LOG_WARN))) && jsi_PrefixMatch(argStr, \"WARN: \"))",
          "1654:                 || ((!(interp->log&(1<<JSI_LOG_INFO))) && jsi_PrefixMatch(argStr, \"INFO: \")))",
          "1655:                 goto done;",
          "1657:         for (; i < argc; ++i) {",
          "1658:             if (isbool && i==1)",
          "1659:                 continue;",
          "",
          "[Removed Lines]",
          "1651:         if (conLog && argc>0 && (argStr=Jsi_ValueString(interp, Jsi_ValueArrayIndex(interp, args, 0), NULL))) {",
          "1656:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1685:     }",
          "1686:     Jsi_DSAppend(&dStr, \"\\n\", NULL);",
          "1687:     Jsi_Puts(interp, chan, Jsi_DSValue(&dStr), Jsi_DSLength(&dStr));",
          "1689:     Jsi_DSFree(&dStr);",
          "1690:     Jsi_DSFree(&oStr);",
          "1691:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "1688: done:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4954:     return JSI_OK;",
          "4955: }",
          "4957: static Jsi_CmdSpec utilCmds[] = {",
          "4958: #ifndef JSI_OMIT_BASE64",
          "4959:     { \"argArray\",   SysArgArrayCmd,  1,  1, \"arg:any|undefined\", .help=\"Coerces non-null to an array, if necessary\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_NULL },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4957: static Jsi_RC SysLogDebugCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4958: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"DEBUG: \", 3, 2); }",
          "4959: static Jsi_RC SysLogTraceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4960: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TRACE: \", 3, 2); }",
          "4961: static Jsi_RC SysLogTestCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4962: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TEST: \", 3, 2); }",
          "4963: static Jsi_RC SysLogInfoCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4964: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"INFO: \", 3, 2); }",
          "4965: static Jsi_RC SysLogWarnCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4966: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"WARN: \", 3, 2); }",
          "4967: static Jsi_RC SysLogErrorCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4968: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 3, 2); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5023: #ifndef JSI_OMIT_EVENT",
          "5024:     { \"update\",     SysUpdateCmd,    0,  1, \"options:number|object=void\", .help=\"Service all events, eg. setInterval/setTimeout\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_update, .opts=jsiUpdateOptions },",
          "5025: #endif",
          "5026:     { NULL, 0,0,0,0, .help=\"Builtin system commands. All methods are exported as global\" }",
          "5027: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5040:     { \"LogDebug\",   SysLogDebugCmd,  1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5041:     { \"LogTrace\",   SysLogTraceCmd,  1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5042:     { \"LogTest\",    SysLogTestCmd,   1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5043:     { \"LogInfo\",    SysLogInfoCmd,   1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5044:     { \"LogWarn\",    SysLogWarnCmd,   1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "5045:     { \"LogError\",   SysLogErrorCmd,  1,  -1, \"str:string|boolean,...\", .help=\"Debug logging command\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101:     }",
          "1102:     interp->logOpts.file = 1;",
          "1103:     interp->logOpts.func = 1;",
          "1104:     interp->typeCheck.strict = 1;",
          "1105:     interp->log = jsi_LogDefMaskVal;",
          "1106:     int argc = interp->opts.argc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:     interp->logOpts.before = 1;",
          "",
          "---------------"
        ],
        "tests/logging.jsi||tests/logging.jsi": [
          "File: tests/logging.jsi -> tests/logging.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: =!EXPECTSTART!=",
          "35: Interp.conf({noStderr:true}) ==> undefined",
          "37: undefined",
          "38: console.puts('hello cat') ==> hello cat",
          "39: undefined",
          "41: undefined",
          "43: undefined",
          "44: console.printf('hello %s', 'snail') ==> hello snailundefined",
          "45: console.puts('MANKY:', 'hello', 'slug') ==> MANKY: hello slug",
          "",
          "[Removed Lines]",
          "33: \"Starting\", logging.jsi:3,",
          "34: \"DEBUG:  testing 1, 2, 3: call2\", logging.jsi:6,",
          "36: log('hello worm') ==> \"hello worm\", logging.jsi:14, foo()",
          "40: console.log('hello bird') ==> \"hello bird\", logging.jsi:16, foo()",
          "42: console.log('hello dog') ==> \"hello dog\", logging.jsi:17, foo()",
          "",
          "[Added Lines]",
          "33: logging.jsi:3:   \"Starting\",",
          "34: logging.jsi:6:   \"DEBUG:  testing 1, 2, 3: call2\",",
          "36: log('hello worm') ==> logging.jsi:14:  \"hello worm\", foo()",
          "40: console.log('hello bird') ==> logging.jsi:16:  \"hello bird\", foo()",
          "42: console.log('hello dog') ==> logging.jsi:17:  \"hello dog\", foo()",
          "",
          "---------------"
        ],
        "tools/mkproto.jsi||tools/mkproto.jsi": [
          "File: tools/mkproto.jsi -> tools/mkproto.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     return '//JSI Command Prototypes: version '+ver+'\\nthrow(\"NOT EXECUTABLE: USE FILE IN GEANY EDITOR FOR CMD LINE COMPLETION + GOTO TAG\");\\n\\n' + rv;",
          "63: }",
          "",
          "[Removed Lines]",
          "65: runModule(mkproto);",
          "",
          "[Added Lines]",
          "65: moduleRun(mkproto);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: JSON.prototype.check = function(str:string, strict:boolean=true):boolean {};",
          "165: JSON.prototype.parse = function(str:string, strict:boolean=true):any {};",
          "166: JSON.prototype.stringify = function(value:any,  strict:boolean=true):string {};",
          "167: var Math = function(cmd,args) {};",
          "168: Math.prototype.abs = function(num:number):number {};",
          "169: Math.prototype.acos = function(num:number):number {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: var LogDebug = function(str:string|boolean,...):void {};",
          "168: var LogError = function(str:string|boolean,...):void {};",
          "169: var LogInfo = function(str:string|boolean,...):void {};",
          "170: var LogTest = function(str:string|boolean,...):void {};",
          "171: var LogTrace = function(str:string|boolean,...):void {};",
          "172: var LogWarn = function(str:string|boolean,...):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282: String.prototype.trimLeft = function(chars:string):string {};",
          "283: String.prototype.trimRight = function(chars:string):string {};",
          "284: var System = function(cmd,args) {};",
          "285: System.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "286: System.prototype.clearInterval = function(id:number):void {};",
          "287: System.prototype.decodeURI = function(val:string):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: System.prototype.LogDebug = function(str:string|boolean,...):void {};",
          "292: System.prototype.LogError = function(str:string|boolean,...):void {};",
          "293: System.prototype.LogInfo = function(str:string|boolean,...):void {};",
          "294: System.prototype.LogTest = function(str:string|boolean,...):void {};",
          "295: System.prototype.LogTrace = function(str:string|boolean,...):void {};",
          "296: System.prototype.LogWarn = function(str:string|boolean,...):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343: <h2>Methods for \"System\"</h2>",
          "1344: <table border=\"1\"class=\"cmdstbl table\">",
          "1345: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "1346: <tr><td>assert</td><td>assert(expr:boolean|number|function, msg:string=void, <a href='#System.assertOptions'>options</a>:object=void):void </td><td>Throw or output msg if expr is false. Assertions.  Enable with jsish --I Assert or using the -Assert module option.</td></tr>",
          "1347: <tr><td>clearInterval</td><td>clearInterval(id:number):void </td><td>Delete event id returned from setInterval/setTimeout/info.events().</td></tr>",
          "1348: <tr><td>decodeURI</td><td>decodeURI(val:string):string </td><td>Decode an HTTP URL.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346: <tr><td>LogDebug</td><td>LogDebug(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1347: <tr><td>LogError</td><td>LogError(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1348: <tr><td>LogInfo</td><td>LogInfo(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1349: <tr><td>LogTest</td><td>LogTest(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1350: <tr><td>LogTrace</td><td>LogTrace(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "1351: <tr><td>LogWarn</td><td>LogWarn(str:string|boolean,...):void </td><td>Debug logging command.</td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}