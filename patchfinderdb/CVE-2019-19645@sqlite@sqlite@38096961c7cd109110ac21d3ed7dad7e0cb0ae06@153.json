{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b19131a8c655715c2daa690eb7629cdd827a1dfd",
      "candidate_info": {
        "commit_hash": "b19131a8c655715c2daa690eb7629cdd827a1dfd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b19131a8c655715c2daa690eb7629cdd827a1dfd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 36d35dbd5a80dc4a149ed7409cc4b43712622fc4c6a8915b4fbb62fd1d6b7763",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a19884455b9bafcdc769362d61cfd02df1b5643263e004cb533698bbcfca752b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2158:     sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2159:     sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2160:     sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2161:     sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2162:     sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2163:     assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2161:     VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6ad201ac2a17178799e7b530ee4f81876cc3808",
      "candidate_info": {
        "commit_hash": "f6ad201ac2a17178799e7b530ee4f81876cc3808",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6ad201ac2a17178799e7b530ee4f81876cc3808",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/rbu/sqlite3rbu.c",
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/hash.c",
          "src/hash.h",
          "src/vdbeaux.c",
          "src/wal.c"
        ],
        "message": "Fixes for harmless compiler warnings.\n\nFossilOrigin-Name: c28c973ad6debd63f13e5d4d3da036f680baaec9d863eda039f2747db9f1cfd5",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/hash.c||src/hash.c",
          "src/hash.h||src/hash.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1000:   return SQLITE_ERROR;",
          "1001: }",
          "1006:   switch( cArg ){",
          "1007:     case FTS3_MATCHINFO_NDOC:",
          "",
          "[Removed Lines]",
          "1003: static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){",
          "",
          "[Added Lines]",
          "1003: static size_t fts3MatchinfoSize(MatchInfo *pInfo, char cArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:       case FTS3_MATCHINFO_LHITS_BM:",
          "1287:       case FTS3_MATCHINFO_LHITS: {",
          "1289:         memset(pInfo->aMatchinfo, 0, nZero);",
          "1290:         rc = fts3ExprLHitGather(pCsr->pExpr, pInfo);",
          "1291:         break;",
          "",
          "[Removed Lines]",
          "1288:         int nZero = fts3MatchinfoSize(pInfo, zArg[i]) * sizeof(u32);",
          "",
          "[Added Lines]",
          "1288:         size_t nZero = fts3MatchinfoSize(pInfo, zArg[i]) * sizeof(u32);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3691:     if( aDlidx==0 ){",
          "3692:       p->rc = SQLITE_NOMEM;",
          "3693:     }else{",
          "3695:       memset(&aDlidx[pWriter->nDlidx], 0, nByte);",
          "3696:       pWriter->aDlidx = aDlidx;",
          "3697:       pWriter->nDlidx = nLvl;",
          "",
          "[Removed Lines]",
          "3694:       int nByte = sizeof(Fts5DlidxWriter) * (nLvl - pWriter->nDlidx);",
          "",
          "[Added Lines]",
          "3694:       size_t nByte = sizeof(Fts5DlidxWriter) * (nLvl - pWriter->nDlidx);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2468:   int rc = sqlite3_overload_function(pGlobal->db, zName, -1);",
          "2469:   if( rc==SQLITE_OK ){",
          "2470:     Fts5Auxiliary *pAux;",
          "2475:     nByte = sizeof(Fts5Auxiliary) + nName;",
          "2477:     if( pAux ){",
          "2479:       pAux->zFunc = (char*)&pAux[1];",
          "2480:       memcpy(pAux->zFunc, zName, nName);",
          "2481:       pAux->pGlobal = pGlobal;",
          "",
          "[Removed Lines]",
          "2474:     nName = (int)strlen(zName) + 1;",
          "2476:     pAux = (Fts5Auxiliary*)sqlite3_malloc(nByte);",
          "2478:       memset(pAux, 0, nByte);",
          "",
          "[Added Lines]",
          "2474:     nName = strlen(zName) + 1;",
          "2476:     pAux = (Fts5Auxiliary*)sqlite3_malloc64(nByte);",
          "2478:       memset(pAux, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2505: ){",
          "2506:   Fts5Global *pGlobal = (Fts5Global*)pApi;",
          "2507:   Fts5TokenizerModule *pNew;",
          "2510:   int rc = SQLITE_OK;",
          "2513:   nByte = sizeof(Fts5TokenizerModule) + nName;",
          "2515:   if( pNew ){",
          "2517:     pNew->zName = (char*)&pNew[1];",
          "2518:     memcpy(pNew->zName, zName, nName);",
          "2519:     pNew->pUserData = pUserData;",
          "",
          "[Removed Lines]",
          "2512:   nName = (int)strlen(zName) + 1;",
          "2514:   pNew = (Fts5TokenizerModule*)sqlite3_malloc(nByte);",
          "2516:     memset(pNew, 0, nByte);",
          "",
          "[Added Lines]",
          "2512:   nName = strlen(zName) + 1;",
          "2514:   pNew = (Fts5TokenizerModule*)sqlite3_malloc64(nByte);",
          "2516:     memset(pNew, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:   void *pRet = 0;",
          "1045:   if( p->rc==SQLITE_OK ){",
          "1046:     assert( nByte>0 );",
          "",
          "[Removed Lines]",
          "1043: static void *rbuMalloc(sqlite3rbu *p, int nByte){",
          "",
          "[Added Lines]",
          "1043: static void *rbuMalloc(sqlite3rbu *p, sqlite3_int64 nByte){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1063: static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){",
          "1065:   char **azNew;",
          "1067:   azNew = (char**)rbuMalloc(p, nByte);",
          "",
          "[Removed Lines]",
          "1064:   int nByte = (2*sizeof(char*) + sizeof(int) + 3*sizeof(u8)) * nCol;",
          "",
          "[Added Lines]",
          "1064:   sqlite3_int64 nByte = (2*sizeof(char*) + sizeof(int) + 3*sizeof(u8)) * nCol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1706: static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){",
          "1707:   char *zRet = 0;",
          "1710:   zRet = (char*)rbuMalloc(p, nByte);",
          "1711:   if( zRet ){",
          "",
          "[Removed Lines]",
          "1708:   int nByte = nBind*2 + 1;",
          "",
          "[Added Lines]",
          "1708:   sqlite3_int64 nByte = 2*(sqlite3_int64)nBind + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4561:   assert( p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) );",
          "4562:   if( eStage==RBU_STAGE_OAL || eStage==RBU_STAGE_MOVE ){",
          "4563:     if( iRegion<=p->nShm ){",
          "4565:       char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4566:       if( apNew==0 ){",
          "4567:         rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "4564:       int nByte = (iRegion+1) * sizeof(char*);",
          "",
          "[Added Lines]",
          "4564:       sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "",
          "---------------"
        ],
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "902:   if( pTab->nChange==0 || pTab->nEntry>=(pTab->nChange/2) ){",
          "903:     int i;",
          "904:     SessionChange **apNew;",
          "907:     apNew = (SessionChange **)sqlite3_malloc64(sizeof(SessionChange *) * nNew);",
          "908:     if( apNew==0 ){",
          "",
          "[Removed Lines]",
          "905:     int nNew = (pTab->nChange ? pTab->nChange : 128) * 2;",
          "",
          "[Added Lines]",
          "905:     sqlite3_int64 nNew = 2*(sqlite3_int64)(pTab->nChange ? pTab->nChange : 128);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   if( *pRc==SQLITE_OK && p->nAlloc-p->nBuf<nByte ){",
          "1834:     u8 *aNew;",
          "1835:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "",
          "[Removed Lines]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){",
          "",
          "[Added Lines]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, size_t nByte, int *pRc){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2947:   }",
          "2949:   if( rc==SQLITE_OK ){",
          "2951:     memset(p->tblhdr.aBuf, 0, iPK);",
          "2952:     memcpy(&p->tblhdr.aBuf[iPK], &p->in.aData[p->in.iNext], nCopy);",
          "2953:     p->in.iNext += nCopy;",
          "",
          "[Removed Lines]",
          "2950:     int iPK = sizeof(sqlite3_value*)*p->nCol*2;",
          "",
          "[Added Lines]",
          "2950:     size_t iPK = sizeof(sqlite3_value*)*p->nCol*2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4252:     rc = sessionChangesetStart(&pIter2, 0, 0, cons.nBuf, cons.aBuf, 0);",
          "4253:     if( rc==SQLITE_OK ){",
          "4255:       int rc2;",
          "4256:       pIter2->bPatchset = bPatchset;",
          "4257:       pIter2->zTab = (char*)zTab;",
          "",
          "[Removed Lines]",
          "4254:       int nByte = 2*pApply->nCol*sizeof(sqlite3_value*);",
          "",
          "[Added Lines]",
          "4254:       size_t nByte = 2*pApply->nCol*sizeof(sqlite3_value*);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07ee06fd390bfebebc014b47583d489747b0423bb96c810bed5c605ce0e3be71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769: ){",
          "3770:   char *z;",
          "3772:   if( (n & (n-1))==0 ){",
          "3773:     sqlite3_int64 sz = (n==0) ? 1 : 2*n;",
          "3774:     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);",
          "",
          "[Removed Lines]",
          "3771:   sqlite3_int64 n = *pnEntry;",
          "",
          "[Added Lines]",
          "3771:   sqlite3_int64 n = *pIdx = *pnEntry;",
          "",
          "---------------"
        ],
        "src/hash.c||src/hash.c": [
          "File: src/hash.c -> src/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     if( pEntry->chain==elem ){",
          "199:       pEntry->chain = elem->next;",
          "200:     }",
          "201:     pEntry->count--;",
          "203:   }",
          "204:   sqlite3_free( elem );",
          "205:   pH->count--;",
          "",
          "[Removed Lines]",
          "202:     assert( pEntry->count>=0 );",
          "",
          "[Added Lines]",
          "201:     assert( pEntry->count>0 );",
          "",
          "---------------"
        ],
        "src/hash.h||src/hash.h": [
          "File: src/hash.h -> src/hash.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:                         : (sqlite3_int64)v->nOpAlloc+nOp);",
          "160: #else",
          "161:   sqlite3_int64 nNew = (v->nOpAlloc ? 2*(sqlite3_int64)v->nOpAlloc",
          "163:   UNUSED_PARAMETER(nOp);",
          "164: #endif",
          "",
          "[Removed Lines]",
          "162:                         : (sqlite3_int64)1024/sizeof(Op));",
          "",
          "[Added Lines]",
          "162:                         : (sqlite3_int64)(1024/sizeof(Op)));",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577:   if( pWal->nWiData<=iPage ){",
          "579:     volatile u32 **apNew;",
          "580:     apNew = (volatile u32 **)sqlite3_realloc64((void *)pWal->apWiData, nByte);",
          "581:     if( !apNew ){",
          "",
          "[Removed Lines]",
          "578:     int nByte = sizeof(u32*)*(iPage+1);",
          "",
          "[Added Lines]",
          "578:     sqlite3_int64 nByte = sizeof(u32*)*(iPage+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:   assert( nByte>=8 );",
          "681:   assert( (nByte&0x00000007)==0 );",
          "683:   if( nativeCksum ){",
          "684:     do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:   assert( nByte<=65536 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a0db87a2fbd50aa8fd22fe4362549f31b1a82b1",
      "candidate_info": {
        "commit_hash": "6a0db87a2fbd50aa8fd22fe4362549f31b1a82b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a0db87a2fbd50aa8fd22fe4362549f31b1a82b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "If the amalgamation file \"sqlite3.c\" is generated using the SQLITE_ENABLE_UPDATE_DELETE_LIMIT option, but then subsequently (mis-)compiled without that option, and then a particular syntax error could cause a memory leak, but for this fix.\n\nFossilOrigin-Name: 1bb17c863a269ab8b28df94b9fdaac3ee70777ccd0a30300131bf67df6722052",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 507c43537f00d089efb3c3020fb6e826e8f89f3efa2caaa12c5309d35dd0c22e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "826: cmd ::= with DELETE FROM xfullname(X) indexed_opt(I) where_opt(W)",
          "827:         orderby_opt(O) limit_opt(L). {",
          "828:   sqlite3SrcListIndexedBy(pParse, X, &I);",
          "829:   sqlite3DeleteFrom(pParse,X,W,O,L);",
          "830: }",
          "831: %endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: #ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "830:   sqlite3ExprListDelete(pParse->db, O); O = 0;",
          "831:   sqlite3ExprDelete(pParse->db, L); L = 0;",
          "832: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
      "candidate_info": {
        "commit_hash": "4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "Fix a bug introduced earlier today by check-in [88833a9c2849c959]. Ticket [29f635e0af71234b]\n\nFossilOrigin-Name: 6e7b4527d32cc1be0294614b9d7363d4b59cf654a954b86515b3f6888975ce73",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9490683ae883561fa347cbe54ebdd61188d849b4852d904b508250ba5d0807ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3132:     }",
          "3133:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3134:     for(ii=0; ii<pList->nExpr; ii++){",
          "3136:       if( bLhsReal ){",
          "3137:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3138:       }",
          "3139:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3140:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "",
          "[Removed Lines]",
          "3135:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "[Added Lines]",
          "3136:         r2 = regToFree = sqlite3GetTempReg(pParse);",
          "3137:         sqlite3ExprCode(pParse, pList->a[ii].pExpr, r2);",
          "3139:       }else{",
          "3140:         r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "763: # For the IN_INDEX_NOOP optimization, apply REAL affinity to the LHS",
          "764: # values prior to comparison if the RHS has REAL affinity.",
          "765: #",
          "766: do_execsql_test in-19.1 {",
          "767:   DROP TABLE IF EXISTS t0;",
          "768:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766: # Also ticket https://sqlite.org/src/info/29f635e0af71234b",
          "767: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775: do_execsql_test in-19.3 {",
          "776:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "777: } {1}",
          "779: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "780: do_execsql_test in-19.4 {",
          "781:   DROP TABLE t0;",
          "782:   CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));",
          "783:   CREATE INDEX i0 ON t0(c1 IN (c0));",
          "784:   INSERT INTO t0(c0, c2) VALUES (0, NULL) ON CONFLICT(c2, c1, c0) DO NOTHING;",
          "785:   PRAGMA integrity_check;",
          "786: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af94adf049218f9d3675fd796663aa3e021f7d88",
      "candidate_info": {
        "commit_hash": "af94adf049218f9d3675fd796663aa3e021f7d88",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af94adf049218f9d3675fd796663aa3e021f7d88",
        "files": [
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the autoconf makefile for MSVC.\n\nFossilOrigin-Name: 9455643eecb74c8ac93ad3b3566f30e380dd912cdce3de993da5af42973ac59c",
        "before_after_code_files": [
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "283: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "284: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "286: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "287: !ENDIF",
          "288: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "285: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_INTROSPECTION_PRAGMAS=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73a82114733af2a316f20eb8578badef307d14286c6ec03197744a6793425161",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}