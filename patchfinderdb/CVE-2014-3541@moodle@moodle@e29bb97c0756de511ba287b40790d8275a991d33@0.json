{
  "cve_id": "CVE-2014-3541",
  "cve_desc": "The Repositories component in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote attackers to conduct PHP object injection attacks and execute arbitrary code via serialized data associated with an add-on.",
  "repo": "moodle/moodle",
  "patch_hash": "e29bb97c0756de511ba287b40790d8275a991d33",
  "patch_info": {
    "commit_hash": "e29bb97c0756de511ba287b40790d8275a991d33",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/e29bb97c0756de511ba287b40790d8275a991d33",
    "files": [
      "repository/lib.php",
      "repository/upgrade.txt"
    ],
    "message": "MDL-45616 repositories: API changes to avoid serialized data in user input",
    "before_after_code_files": [
      "repository/lib.php||repository/lib.php"
    ]
  },
  "patch_diff": {
    "repository/lib.php||repository/lib.php": [
      "File: repository/lib.php -> repository/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1671:     public function get_file_reference($source) {",
      "1672:         if ($source && $this->has_moodle_files()) {",
      "1673:             $params = @json_decode(base64_decode($source), true);",
      "1682:             if (!is_array($params) || empty($params['contextid'])) {",
      "1683:                 throw new repository_exception('invalidparams', 'repository');",
      "1684:             }",
      "",
      "[Removed Lines]",
      "1674:             if (!$params && !in_array($this->get_typename(), array('recent', 'user', 'local', 'coursefiles'))) {",
      "1679:                 $params = file_storage::unpack_reference($source, true);",
      "1680:                 return file_storage::pack_reference($params);",
      "1681:             }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56964b7948338ecb265ac0920e0e5c2fe3c861f6",
      "candidate_info": {
        "commit_hash": "56964b7948338ecb265ac0920e0e5c2fe3c861f6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/56964b7948338ecb265ac0920e0e5c2fe3c861f6",
        "files": [
          "repository/coursefiles/lib.php",
          "repository/equella/callback.php",
          "repository/equella/lib.php",
          "repository/lib.php",
          "repository/local/lib.php",
          "repository/recent/lib.php",
          "repository/user/lib.php"
        ],
        "message": "MDL-45616 repositories: use json encoding instead of serialization",
        "before_after_code_files": [
          "repository/coursefiles/lib.php||repository/coursefiles/lib.php",
          "repository/equella/callback.php||repository/equella/callback.php",
          "repository/equella/lib.php||repository/equella/lib.php",
          "repository/lib.php||repository/lib.php",
          "repository/local/lib.php||repository/local/lib.php",
          "repository/recent/lib.php||repository/recent/lib.php",
          "repository/user/lib.php||repository/user/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "repository/lib.php||repository/lib.php"
          ],
          "candidate": [
            "repository/lib.php||repository/lib.php"
          ]
        }
      },
      "candidate_diff": {
        "repository/coursefiles/lib.php||repository/coursefiles/lib.php": [
          "File: repository/coursefiles/lib.php -> repository/coursefiles/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         $browser = get_file_browser();",
          "65:         if (!empty($encodedpath)) {",
          "67:             if (is_array($params)) {",
          "68:                 $filepath  = is_null($params['filepath']) ? NULL : clean_param($params['filepath'], PARAM_PATH);",
          "69:                 $filename  = is_null($params['filename']) ? NULL : clean_param($params['filename'], PARAM_FILE);",
          "",
          "[Removed Lines]",
          "66:             $params = unserialize(base64_decode($encodedpath));",
          "",
          "[Added Lines]",
          "66:             $params = json_decode(base64_decode($encodedpath), true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         if ($fileinfo = $browser->get_file_info($context, $component, $filearea, $itemid, $filepath, $filename)) {",
          "82:             $pathnodes = array();",
          "84:             $pathnodes[] = array('name'=>$fileinfo->get_visible_name(), 'path'=>$encodedpath);",
          "85:             $level = $fileinfo->get_parent();",
          "86:             while ($level) {",
          "87:                 $params = $level->get_params();",
          "89:                 if ($params['contextid'] != $context->id) {",
          "90:                     break;",
          "91:                 }",
          "",
          "[Removed Lines]",
          "83:             $encodedpath = base64_encode(serialize($fileinfo->get_params()));",
          "88:                 $encodedpath = base64_encode(serialize($params));",
          "",
          "[Added Lines]",
          "83:             $encodedpath = base64_encode(json_encode($fileinfo->get_params()));",
          "88:                 $encodedpath = base64_encode(json_encode($params));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:                 if ($child->is_directory()) {",
          "103:                     $params = $child->get_params();",
          "104:                     $subdir_children = $child->get_children();",
          "106:                     $node = array(",
          "107:                         'title' => $child->get_visible_name(),",
          "108:                         'datemodified' => $child->get_timemodified(),",
          "",
          "[Removed Lines]",
          "105:                     $encodedpath = base64_encode(serialize($params));",
          "",
          "[Added Lines]",
          "105:                     $encodedpath = base64_encode(json_encode($params));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:                     );",
          "114:                     $list[] = $node;",
          "115:                 } else {",
          "117:                     $node = array(",
          "118:                         'title' => $child->get_visible_name(),",
          "119:                         'size' => $child->get_filesize(),",
          "",
          "[Removed Lines]",
          "116:                     $encodedpath = base64_encode(serialize($child->get_params()));",
          "",
          "[Added Lines]",
          "116:                     $encodedpath = base64_encode(json_encode($child->get_params()));",
          "",
          "---------------"
        ],
        "repository/equella/callback.php||repository/equella/callback.php": [
          "File: repository/equella/callback.php -> repository/equella/callback.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     $license = s(clean_param($info->license, PARAM_ALPHAEXT));",
          "56: }",
          "60: $js =<<<EOD",
          "61: <html>",
          "",
          "[Removed Lines]",
          "58: $source = base64_encode(serialize((object)array('url'=>$url,'filename'=>$filename)));",
          "",
          "[Added Lines]",
          "58: $source = base64_encode(json_encode(array('url'=>$url,'filename'=>$filename)));",
          "",
          "---------------"
        ],
        "repository/equella/lib.php||repository/equella/lib.php": [
          "File: repository/equella/lib.php -> repository/equella/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     public function get_file_reference($source) {",
          "129:     }",
          "",
          "[Removed Lines]",
          "128:         return $source;",
          "",
          "[Added Lines]",
          "129:         $ref = json_decode(base64_decode($source));",
          "130:         $filename  = clean_param($ref->filename, PARAM_FILE);",
          "131:         $url = clean_param($ref->url, PARAM_URL);",
          "132:         return base64_encode(serialize((object)array('url' => $url, 'filename' => $filename)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "409:     }",
          "",
          "[Removed Lines]",
          "406:     public function get_file_source_info($url) {",
          "407:         $ref = unserialize(base64_decode($url));",
          "408:         return 'EQUELLA: ' . $ref->filename;",
          "",
          "[Added Lines]",
          "410:     public function get_file_source_info($source) {",
          "411:         $ref = json_decode(base64_decode($source));",
          "412:         $filename  = clean_param($ref->filename, PARAM_FILE);",
          "413:         return 'EQUELLA: ' . $filename;",
          "",
          "---------------"
        ],
        "repository/lib.php||repository/lib.php": [
          "File: repository/lib.php -> repository/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1671:     public function get_file_reference($source) {",
          "1672:         if ($source && $this->has_moodle_files()) {",
          "1675:                 throw new repository_exception('invalidparams', 'repository');",
          "1676:             }",
          "1677:             return file_storage::pack_reference($params);",
          "",
          "[Removed Lines]",
          "1673:             $params = file_storage::unpack_reference($source);",
          "1674:             if (!is_array($params)) {",
          "",
          "[Added Lines]",
          "1673:             $params = @json_decode(base64_decode($source), true);",
          "1674:             if (!$params && !in_array($this->get_typename(), array('recent', 'user', 'local', 'coursefiles'))) {",
          "1679:                 $params = file_storage::unpack_reference($source, true);",
          "1680:                 return file_storage::pack_reference($params);",
          "1681:             }",
          "1682:             if (!is_array($params) || empty($params['contextid'])) {",
          "1683:                 throw new repository_exception('invalidparams', 'repository');",
          "1684:             }",
          "1685:             $params = array(",
          "1686:                 'component' => empty($params['component']) ? ''   : clean_param($params['component'], PARAM_COMPONENT),",
          "1687:                 'filearea'  => empty($params['filearea'])  ? ''   : clean_param($params['filearea'], PARAM_AREA),",
          "1688:                 'itemid'    => empty($params['itemid'])    ? 0    : clean_param($params['itemid'], PARAM_INT),",
          "1689:                 'filename'  => empty($params['filename'])  ? null : clean_param($params['filename'], PARAM_FILE),",
          "1690:                 'filepath'  => empty($params['filepath'])  ? null : clean_param($params['filepath'], PARAM_PATH),",
          "1691:                 'contextid' => clean_param($params['contextid'], PARAM_INT)",
          "1692:             );",
          "1694:             if (!context::instance_by_id($params['contextid'], IGNORE_MISSING)) {",
          "",
          "---------------"
        ],
        "repository/local/lib.php||repository/local/lib.php": [
          "File: repository/local/lib.php -> repository/local/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         $component = null;",
          "58:         if (!empty($encodedpath)) {",
          "60:             if (is_array($params) && isset($params['contextid'])) {",
          "61:                 $component = is_null($params['component']) ? NULL : clean_param($params['component'], PARAM_COMPONENT);",
          "62:                 $filearea  = is_null($params['filearea']) ? NULL : clean_param($params['filearea'], PARAM_AREA);",
          "",
          "[Removed Lines]",
          "59:             $params = unserialize(base64_decode($encodedpath));",
          "",
          "[Added Lines]",
          "59:             $params = json_decode(base64_decode($encodedpath), true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:     private function get_node(file_info $fileinfo) {",
          "207:         global $OUTPUT;",
          "209:         $node = array(",
          "210:             'title' => $fileinfo->get_visible_name(),",
          "211:             'datemodified' => $fileinfo->get_timemodified(),",
          "",
          "[Removed Lines]",
          "208:         $encodedpath = base64_encode(serialize($fileinfo->get_params()));",
          "",
          "[Added Lines]",
          "208:         $encodedpath = base64_encode(json_encode($fileinfo->get_params()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:     private function get_node_path(file_info $fileinfo) {",
          "249:         return array(",
          "250:             'path' => $encodedpath,",
          "251:             'name' => $fileinfo->get_visible_name()",
          "",
          "[Removed Lines]",
          "248:         $encodedpath = base64_encode(serialize($fileinfo->get_params()));",
          "",
          "[Added Lines]",
          "248:         $encodedpath = base64_encode(json_encode($fileinfo->get_params()));",
          "",
          "---------------"
        ],
        "repository/recent/lib.php||repository/recent/lib.php": [
          "File: repository/recent/lib.php -> repository/recent/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:                 $fileinfo = $browser->get_file_info($context, $file['component'],",
          "127:                         $file['filearea'], $file['itemid'], $file['filepath'], $file['filename']);",
          "128:                 if ($fileinfo) {",
          "130:                     $node = array(",
          "131:                         'title' => $fileinfo->get_visible_name(),",
          "132:                         'size' => $fileinfo->get_filesize(),",
          "",
          "[Removed Lines]",
          "129:                     $params = base64_encode(serialize($file));",
          "",
          "[Added Lines]",
          "129:                     $params = base64_encode(json_encode($file));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:     public function file_is_accessible($source) {",
          "194:         global $USER;",
          "196:         return (!empty($file) && $file->get_userid() == $USER->id);",
          "197:     }",
          "",
          "[Removed Lines]",
          "195:         $file = self::get_moodle_file($source);",
          "",
          "[Added Lines]",
          "195:         $reference = $this->get_file_reference($source);",
          "196:         $file = self::get_moodle_file($reference);",
          "",
          "---------------"
        ],
        "repository/user/lib.php||repository/user/lib.php": [
          "File: repository/user/lib.php -> repository/user/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         $list = array();",
          "63:         if (!empty($encodedpath)) {",
          "65:             if (is_array($params)) {",
          "66:                 $filepath = clean_param($params['filepath'], PARAM_PATH);",
          "67:                 $filename = clean_param($params['filename'], PARAM_FILE);",
          "",
          "[Removed Lines]",
          "64:             $params = unserialize(base64_decode($encodedpath));",
          "",
          "[Added Lines]",
          "64:             $params = json_decode(base64_decode($encodedpath), true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                 $level = $fileinfo;",
          "85:                 $params = $fileinfo->get_params();",
          "86:                 while ($level && $params['component'] == 'user' && $params['filearea'] == 'private') {",
          "88:                     $pathnodes[] = array('name'=>$level->get_visible_name(), 'path'=>$encodedpath);",
          "89:                     $level = $level->get_parent();",
          "90:                     $params = $level->get_params();",
          "",
          "[Removed Lines]",
          "87:                     $encodedpath = base64_encode(serialize($level->get_params()));",
          "",
          "[Added Lines]",
          "87:                     $encodedpath = base64_encode(json_encode($level->get_params()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:                 $children = $fileinfo->get_children();",
          "96:                 foreach ($children as $child) {",
          "97:                     if ($child->is_directory()) {",
          "99:                         $node = array(",
          "100:                             'title' => $child->get_visible_name(),",
          "101:                             'datemodified' => $child->get_timemodified(),",
          "",
          "[Removed Lines]",
          "98:                         $encodedpath = base64_encode(serialize($child->get_params()));",
          "",
          "[Added Lines]",
          "98:                         $encodedpath = base64_encode(json_encode($child->get_params()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:                         );",
          "107:                         $list[] = $node;",
          "108:                     } else {",
          "110:                         $node = array(",
          "111:                             'title' => $child->get_visible_name(),",
          "112:                             'size' => $child->get_filesize(),",
          "",
          "[Removed Lines]",
          "109:                         $encodedpath = base64_encode(serialize($child->get_params()));",
          "",
          "[Added Lines]",
          "109:                         $encodedpath = base64_encode(json_encode($child->get_params()));",
          "",
          "---------------"
        ]
      }
    }
  ]
}