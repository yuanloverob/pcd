{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
  "patch_info": {
    "commit_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/28a31a0a10f41ef855cabab4e18c994c44225125",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c",
      "test/dtls_mtu_test.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nIn 1.1.0 changing the ciphersuite during a renegotiation can result in\na crash leading to a DoS attack. In master this does not occur with TLS\n(instead you get an internal error, which is still wrong but not a security\nissue) - but the problem still exists in the DTLS code.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/d1_lib.c||ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/statem/extensions.c||ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "265: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "271: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "273: # define SSL3_MT_HELLO_REQUEST                   0",
      "274: # define SSL3_MT_CLIENT_HELLO                    1",
      "275: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "269: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "274: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/d1_lib.c||ssl/d1_lib.c": [
      "File: ssl/d1_lib.c -> ssl/d1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "937:                                  &blocksize, &ext_overhead))",
      "938:         return 0;",
      "941:         ext_overhead += mac_overhead;",
      "942:     else",
      "943:         int_overhead += mac_overhead;",
      "",
      "[Removed Lines]",
      "940:     if (SSL_USE_ETM(s))",
      "",
      "[Added Lines]",
      "940:     if (SSL_READ_ETM(s))",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1033:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1034:                                       &(p[SSL3_RECORD_get_length(&wr) + eivlen]),",
      "1035:                                       1))",
      "",
      "[Removed Lines]",
      "1032:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1032:     if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1047:     if (s->method->ssl3_enc->enc(s, &wr, 1, 1) < 1)",
      "1048:         goto err;",
      "1051:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1052:                                       &(p[SSL3_RECORD_get_length(&wr)]), 1))",
      "1053:             goto err;",
      "",
      "[Removed Lines]",
      "1050:     if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1050:     if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "402:         len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "403:         s->compress == NULL && s->msg_callback == NULL &&",
      "405:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "406:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "407:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "404:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "404:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "874:             unsigned char *mac;",
      "876:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "873:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "873:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "923:             SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
      "924:             goto err;",
      "925:         }",
      "927:             unsigned char *mac;",
      "929:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "926:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "926:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "387:         unsigned char *mac;",
      "389:         imac_size = EVP_MD_CTX_size(s->read_hash);",
      "",
      "[Removed Lines]",
      "386:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "386:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:     if ((sess != NULL) &&",
      "442:         (s->enc_read_ctx != NULL) &&",
      "445:         unsigned char *mac = NULL;",
      "446:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "443:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "443:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "915:         }",
      "917:         ret = 1;",
      "919:             imac_size = EVP_MD_CTX_size(s->read_hash);",
      "920:             if (imac_size < 0)",
      "921:                 return -1;",
      "",
      "[Removed Lines]",
      "918:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "[Added Lines]",
      "918:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1092:     header[11] = (unsigned char)(rec->length >> 8);",
      "1093:     header[12] = (unsigned char)(rec->length & 0xff);",
      "1096:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1097:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1095:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1095:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1118:             EVP_MD_CTX_free(hmac);",
      "1119:             return 0;",
      "1120:         }",
      "1122:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1123:                                        mac_ctx, rec->input,",
      "1124:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1121:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1121:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1408:     rr->data = rr->input;",
      "1409:     rr->orig_len = rr->length;",
      "1412:         unsigned char *mac;",
      "1413:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "1414:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "1411:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "1411:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1452: #endif",
      "1456:         (s->enc_read_ctx != NULL) && (EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "1458:         unsigned char *mac = NULL;",
      "",
      "[Removed Lines]",
      "1455:     if ((sess != NULL) && !SSL_USE_ETM(s) &&",
      "",
      "[Added Lines]",
      "1455:     if ((sess != NULL) && !SSL_READ_ETM(s) &&",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "395: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "396:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "401: # define SSL_PKEY_RSA            0",
      "",
      "[Removed Lines]",
      "398: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "398: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "399: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1134:         int psk_kex_mode;",
      "1135:     } ext;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:         int use_etm;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions.c||ssl/statem/extensions.c": [
      "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: #endif",
      "208:     {",
      "209:         TLSEXT_TYPE_encrypt_then_mac,",
      "211:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
      "212:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
      "213:     },",
      "",
      "[Removed Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
      "",
      "[Added Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY | EXT_SSL3_ALLOWED,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "913: static int init_etm(SSL *s, unsigned int context)",
      "914: {",
      "917:     return 1;",
      "918: }",
      "",
      "[Removed Lines]",
      "915:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "915:     s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
      "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1172:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
      "1173:             && s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "1174:             && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "1177:     return 1;",
      "1178: }",
      "",
      "[Removed Lines]",
      "1175:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1175:         s->ext.use_etm = 1;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
      "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "451:                        size_t chainidx, int *al)",
      "452: {",
      "453:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
      "456:     return 1;",
      "457: }",
      "",
      "[Removed Lines]",
      "454:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "454:         s->ext.use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "953: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, unsigned int context, X509 *x,",
      "954:                            size_t chainidx, int *al)",
      "955: {",
      "957:         return 1;",
      "",
      "[Removed Lines]",
      "956:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
      "",
      "[Added Lines]",
      "956:     if (!s->ext.use_etm)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "964:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "965:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "966:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12) {",
      "968:         return 1;",
      "969:     }",
      "",
      "[Removed Lines]",
      "967:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "967:         s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: #endif",
      "131:     if (which & SSL3_CC_READ) {",
      "132:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "133:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "134:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132:         if (s->ext.use_etm)",
      "133:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "134:         else",
      "135:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "167:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "168:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "169:     } else {",
      "170:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "171:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "172:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:         if (s->ext.use_etm)",
      "176:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "177:         else",
      "178:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "369:     if (s->s3->tmp.key_block_length != 0)",
      "370:         return (1);",
      "375:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "376:         return (0);",
      "377:     }",
      "",
      "[Removed Lines]",
      "372:     if (!ssl_cipher_get_evp",
      "373:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "374:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "382:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "383:                             &comp, s->ext.use_etm)) {",
      "",
      "---------------"
    ],
    "test/dtls_mtu_test.c||test/dtls_mtu_test.c": [
      "File: test/dtls_mtu_test.c -> test/dtls_mtu_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         }",
      "134:     }",
      "135:     rv = 1;",
      "137:         rv = 2;",
      "138:  out:",
      "139:     SSL_free(clnt_ssl);",
      "",
      "[Removed Lines]",
      "136:     if (SSL_USE_ETM(clnt_ssl))",
      "",
      "[Added Lines]",
      "136:     if (SSL_READ_ETM(clnt_ssl))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1266eefdb66db6c01e859ae672ccc19261e75bbf",
      "candidate_info": {
        "commit_hash": "1266eefdb66db6c01e859ae672ccc19261e75bbf",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1266eefdb66db6c01e859ae672ccc19261e75bbf",
        "files": [
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_trce.c"
        ],
        "message": "Various style updates following extensions refactor\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_trce.c||ssl/t1_trce.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"../ssl_locl.h\"",
          "11: #include \"statem_locl.h\"",
          "14:                                      int *al);",
          "17:                                      int *al);",
          "18: #ifndef OPENSSL_NO_EC",
          "20:                                        int *al);",
          "21: #endif",
          "25:                                         int *al);",
          "26: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "28: #endif",
          "32: #ifndef OPENSSL_NO_SRP",
          "34: #endif",
          "38: #ifndef OPENSSL_NO_SRTP",
          "40: #endif",
          "45:     unsigned int type;",
          "66: } EXTENSION_DEFINITION;",
          "",
          "[Removed Lines]",
          "13: static int tls_ext_final_renegotiate(SSL *s, unsigned int context, int sent,",
          "15: static int tls_ext_init_server_name(SSL *s, unsigned int context);",
          "16: static int tls_ext_final_server_name(SSL *s, unsigned int context, int sent,",
          "19: static int tls_ext_final_ec_pt_formats(SSL *s, unsigned int context, int sent,",
          "22: static int tls_ext_init_session_ticket(SSL *s, unsigned int context);",
          "23: static int tls_ext_init_status_request(SSL *s, unsigned int context);",
          "24: static int tls_ext_final_status_request(SSL *s, unsigned int context, int sent,",
          "27: static int tls_ext_init_npn(SSL *s, unsigned int context);",
          "29: static int tls_ext_init_alpn(SSL *s, unsigned int context);",
          "30: static int tls_ext_final_alpn(SSL *s, unsigned int context, int sent, int *al);",
          "31: static int tls_ext_init_sig_algs(SSL *s, unsigned int context);",
          "33: static int tls_ext_init_srp(SSL *s, unsigned int context);",
          "35: static int tls_ext_init_etm(SSL *s, unsigned int context);",
          "36: static int tls_ext_init_ems(SSL *s, unsigned int context);",
          "37: static int tls_ext_final_ems(SSL *s, unsigned int context, int sent, int *al);",
          "39: static int tls_ext_init_srtp(SSL *s, unsigned int context);",
          "43: typedef struct {",
          "50:     int (*init_ext)(SSL *s, unsigned int context);",
          "52:     int (*parse_client_ext)(SSL *s, PACKET *pkt, int *al);",
          "54:     int (*parse_server_ext)(SSL *s, PACKET *pkt, int *al);",
          "56:     int (*construct_server_ext)(SSL *s, WPACKET *pkt, int *al);",
          "58:     int (*construct_client_ext)(SSL *s, WPACKET *pkt, int *al);",
          "64:     int (*finalise_ext)(SSL *s, unsigned int context, int sent, int *al);",
          "65:     unsigned int context;",
          "",
          "[Added Lines]",
          "13: static int final_renegotiate(SSL *s, unsigned int context, int sent,",
          "15: static int init_server_name(SSL *s, unsigned int context);",
          "16: static int final_server_name(SSL *s, unsigned int context, int sent,",
          "19: static int final_ec_pt_formats(SSL *s, unsigned int context, int sent,",
          "22: static int init_session_ticket(SSL *s, unsigned int context);",
          "23: static int init_status_request(SSL *s, unsigned int context);",
          "24: static int final_status_request(SSL *s, unsigned int context, int sent,",
          "27: static int init_npn(SSL *s, unsigned int context);",
          "29: static int init_alpn(SSL *s, unsigned int context);",
          "30: static int final_alpn(SSL *s, unsigned int context, int sent, int *al);",
          "31: static int init_sig_algs(SSL *s, unsigned int context);",
          "33: static int init_srp(SSL *s, unsigned int context);",
          "35: static int init_etm(SSL *s, unsigned int context);",
          "36: static int init_ems(SSL *s, unsigned int context);",
          "37: static int final_ems(SSL *s, unsigned int context, int sent, int *al);",
          "39: static int init_srtp(SSL *s, unsigned int context);",
          "43: typedef struct extensions_definition_st {",
          "50:     unsigned int context;",
          "55:     int (*init)(SSL *s, unsigned int context);",
          "57:     int (*parse_ctos)(SSL *s, PACKET *pkt, int *al);",
          "59:     int (*parse_stoc)(SSL *s, PACKET *pkt, int *al);",
          "61:     int (*construct_stoc)(SSL *s, WPACKET *pkt, int *al);",
          "63:     int (*construct_ctos)(SSL *s, WPACKET *pkt, int *al);",
          "69:     int (*final)(SSL *s, unsigned int context, int sent, int *al);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: static const EXTENSION_DEFINITION ext_defs[] = {",
          "92:     {",
          "93:         TLSEXT_TYPE_renegotiate,",
          "100:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "102:     },",
          "103:     {",
          "104:         TLSEXT_TYPE_server_name,",
          "111:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "113:     },",
          "114: #ifndef OPENSSL_NO_SRP",
          "115:     {",
          "116:         TLSEXT_TYPE_srp,",
          "124:     },",
          "125: #endif",
          "126: #ifndef OPENSSL_NO_EC",
          "127:     {",
          "128:         TLSEXT_TYPE_ec_point_formats,",
          "136:     },",
          "137:     {",
          "138:         TLSEXT_TYPE_supported_groups,",
          "142:         NULL /* TODO(TLS1.3): Need to add this */,",
          "146:     },",
          "147: #endif",
          "148:     {",
          "149:         TLSEXT_TYPE_session_ticket,",
          "157:     },",
          "158:     {",
          "159:         TLSEXT_TYPE_signature_algorithms,",
          "167:     },",
          "168: #ifndef OPENSSL_NO_OCSP",
          "169:     {",
          "170:         TLSEXT_TYPE_status_request,",
          "177:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "179:     },",
          "180: #endif",
          "181: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "182:     {",
          "183:         TLSEXT_TYPE_next_proto_neg,",
          "191:     },",
          "192: #endif",
          "193:     {",
          "",
          "[Removed Lines]",
          "94:         NULL,",
          "95:         tls_parse_client_renegotiate,",
          "96:         tls_parse_server_renegotiate,",
          "97:         tls_construct_server_renegotiate,",
          "98:         tls_construct_client_renegotiate,",
          "99:         tls_ext_final_renegotiate,",
          "101:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "105:         tls_ext_init_server_name,",
          "106:         tls_parse_client_server_name,",
          "107:         tls_parse_server_server_name,",
          "108:         tls_construct_server_server_name,",
          "109:         tls_construct_client_server_name,",
          "110:         tls_ext_final_server_name,",
          "112:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "117:         tls_ext_init_srp,",
          "118:         tls_parse_client_srp,",
          "119:         NULL,",
          "120:         NULL,",
          "121:         tls_construct_client_srp,",
          "122:         NULL,",
          "123:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "129:         NULL,",
          "130:         tls_parse_client_ec_pt_formats,",
          "131:         tls_parse_server_ec_pt_formats,",
          "132:         tls_construct_server_ec_pt_formats,",
          "133:         tls_construct_client_ec_pt_formats,",
          "134:         tls_ext_final_ec_pt_formats,",
          "135:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "139:         NULL,",
          "140:         tls_parse_client_supported_groups,",
          "141:         NULL,",
          "143:         tls_construct_client_supported_groups,",
          "144:         NULL,",
          "145:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "150:         tls_ext_init_session_ticket,",
          "151:         tls_parse_client_session_ticket,",
          "152:         tls_parse_server_session_ticket,",
          "153:         tls_construct_server_session_ticket,",
          "154:         tls_construct_client_session_ticket,",
          "155:         NULL,",
          "156:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "160:         tls_ext_init_sig_algs,",
          "161:         tls_parse_client_sig_algs,",
          "162:         NULL,",
          "163:         NULL,",
          "164:         tls_construct_client_sig_algs,",
          "165:         NULL,",
          "166:         EXT_CLIENT_HELLO",
          "171:         tls_ext_init_status_request,",
          "172:         tls_parse_client_status_request,",
          "173:         tls_parse_server_status_request,",
          "174:         tls_construct_server_status_request,",
          "175:         tls_construct_client_status_request,",
          "176:         tls_ext_final_status_request,",
          "178:         | EXT_TLS1_3_CERTIFICATE",
          "184:         tls_ext_init_npn,",
          "185:         tls_parse_client_npn,",
          "186:         tls_parse_server_npn,",
          "187:         tls_construct_server_next_proto_neg,",
          "188:         tls_construct_client_npn,",
          "189:         NULL,",
          "190:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Added Lines]",
          "99:         | EXT_TLS1_2_AND_BELOW_ONLY,",
          "100:         NULL, tls_parse_ctos_renegotiate, tls_parse_stoc_renegotiate,",
          "101:         tls_construct_stoc_renegotiate, tls_construct_ctos_renegotiate,",
          "102:         final_renegotiate",
          "107:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "108:         init_server_name,",
          "109:         tls_parse_ctos_server_name, tls_parse_stoc_server_name,",
          "110:         tls_construct_stoc_server_name, tls_construct_ctos_server_name,",
          "111:         final_server_name",
          "116:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "117:         init_srp, tls_parse_ctos_srp, NULL, NULL, tls_construct_ctos_srp, NULL",
          "123:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "124:         NULL, tls_parse_ctos_ec_pt_formats, tls_parse_stoc_ec_pt_formats,",
          "125:         tls_construct_stoc_ec_pt_formats, tls_construct_ctos_ec_pt_formats,",
          "126:         final_ec_pt_formats",
          "130:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "131:         NULL, tls_parse_ctos_supported_groups, NULL,",
          "133:         tls_construct_ctos_supported_groups, NULL",
          "138:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "139:         init_session_ticket, tls_parse_ctos_session_ticket,",
          "140:         tls_parse_stoc_session_ticket, tls_construct_stoc_session_ticket,",
          "141:         tls_construct_ctos_session_ticket, NULL",
          "145:         EXT_CLIENT_HELLO,",
          "146:         init_sig_algs, tls_parse_ctos_sig_algs, NULL, NULL,",
          "147:         tls_construct_ctos_sig_algs, NULL",
          "153:         | EXT_TLS1_3_CERTIFICATE,",
          "154:         init_status_request, tls_parse_ctos_status_request,",
          "155:         tls_parse_stoc_status_request, tls_construct_stoc_status_request,",
          "156:         tls_construct_ctos_status_request, final_status_request",
          "162:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "163:         init_npn, tls_parse_ctos_npn, tls_parse_stoc_npn,",
          "164:         tls_construct_stoc_next_proto_neg, tls_construct_ctos_npn, NULL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "205:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "207:     },",
          "208: #ifndef OPENSSL_NO_SRTP",
          "209:     {",
          "210:         TLSEXT_TYPE_use_srtp,",
          "217:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "219:     },",
          "220: #endif",
          "221:     {",
          "222:         TLSEXT_TYPE_encrypt_then_mac,",
          "230:     },",
          "231: #ifndef OPENSSL_NO_CT",
          "232:     {",
          "233:         TLSEXT_TYPE_signed_certificate_timestamp,",
          "234:         NULL,",
          "247:     },",
          "248: #endif",
          "249:     {",
          "250:         TLSEXT_TYPE_extended_master_secret,",
          "258:     },",
          "259:     {",
          "260:         TLSEXT_TYPE_supported_versions,",
          "261:         NULL,",
          "269:     },",
          "270:     {",
          "",
          "[Removed Lines]",
          "199:         tls_ext_init_alpn,",
          "200:         tls_parse_client_alpn,",
          "201:         tls_parse_server_alpn,",
          "202:         tls_construct_server_alpn,",
          "203:         tls_construct_client_alpn,",
          "204:         tls_ext_final_alpn,",
          "206:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "211:         tls_ext_init_srtp,",
          "212:         tls_parse_client_use_srtp,",
          "213:         tls_parse_server_use_srtp,",
          "214:         tls_construct_server_use_srtp,",
          "215:         tls_construct_client_use_srtp,",
          "216:         NULL,",
          "218:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "223:         tls_ext_init_etm,",
          "224:         tls_parse_client_etm,",
          "225:         tls_parse_server_etm,",
          "226:         tls_construct_server_etm,",
          "227:         tls_construct_client_etm,",
          "228:         NULL,",
          "229:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "240:         NULL,",
          "241:         tls_parse_server_sct,",
          "242:         NULL,",
          "243:         tls_construct_client_sct,",
          "244:         NULL,",
          "245:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "246:         | EXT_TLS1_3_CERTIFICATE",
          "251:         tls_ext_init_ems,",
          "252:         tls_parse_client_ems,",
          "253:         tls_parse_server_ems,",
          "254:         tls_construct_server_ems,",
          "255:         tls_construct_client_ems,",
          "256:         tls_ext_final_ems,",
          "257:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "263:         NULL,",
          "264:         NULL,",
          "265:         NULL,",
          "266:         tls_construct_client_supported_versions,",
          "267:         NULL,",
          "268:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY",
          "",
          "[Added Lines]",
          "174:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "175:         init_alpn, tls_parse_ctos_alpn, tls_parse_stoc_alpn,",
          "176:         tls_construct_stoc_alpn, tls_construct_ctos_alpn, final_alpn",
          "182:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY,",
          "183:         init_srtp, tls_parse_ctos_use_srtp, tls_parse_stoc_use_srtp,",
          "184:         tls_construct_stoc_use_srtp, tls_construct_ctos_use_srtp, NULL",
          "189:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "190:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
          "191:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
          "196:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "197:         | EXT_TLS1_3_CERTIFICATE,",
          "204:         NULL, tls_parse_stoc_sct, NULL, tls_construct_ctos_sct,  NULL",
          "209:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "210:         init_ems, tls_parse_ctos_ems, tls_parse_stoc_ems,",
          "211:         tls_construct_stoc_ems, tls_construct_ctos_ems, final_ems",
          "215:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY,",
          "218:         NULL, NULL, NULL, tls_construct_ctos_supported_versions, NULL",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:         TLSEXT_TYPE_key_share,",
          "282:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "283:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "285:     },",
          "286:     {",
          "",
          "[Removed Lines]",
          "276:         NULL,",
          "277:         tls_parse_client_key_share,",
          "278:         tls_parse_server_key_share,",
          "279:         tls_construct_server_key_share,",
          "280:         tls_construct_client_key_share,",
          "281:         NULL,",
          "284:         | EXT_TLS1_3_ONLY",
          "",
          "[Added Lines]",
          "228:         | EXT_TLS1_3_ONLY,",
          "229:         NULL, tls_parse_ctos_key_share, tls_parse_stoc_key_share,",
          "230:         tls_construct_stoc_key_share, tls_construct_ctos_key_share, NULL",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:         TLSEXT_TYPE_cryptopro_bug,",
          "299:     },",
          "300:     {",
          "302:         TLSEXT_TYPE_padding,",
          "303:         NULL,",
          "311:     }",
          "312: };",
          "",
          "[Removed Lines]",
          "292:         NULL,",
          "293:         NULL,",
          "294:         NULL,",
          "295:         tls_construct_server_cryptopro_bug,",
          "296:         NULL,",
          "297:         NULL,",
          "298:         EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "305:         NULL,",
          "306:         NULL,",
          "307:         NULL,",
          "308:         tls_construct_client_padding,",
          "309:         NULL,",
          "310:         EXT_CLIENT_HELLO",
          "",
          "[Added Lines]",
          "238:         EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "239:         NULL, NULL, NULL, tls_construct_stoc_cryptopro_bug, NULL, NULL",
          "244:         EXT_CLIENT_HELLO,",
          "247:         NULL, NULL, NULL, tls_construct_ctos_padding, NULL",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "320: static int verify_extension(SSL *s, unsigned int context, unsigned int type,",
          "322: {",
          "323:     size_t i;",
          "324:     size_t builtin_num = OSSL_NELEM(ext_defs);",
          "330:                 return 0;",
          "332:             if (SSL_IS_DTLS(s)) {",
          "334:                     return 0;",
          "336:                     return 0;",
          "337:             }",
          "341:             return 1;",
          "342:         }",
          "343:     }",
          "",
          "[Removed Lines]",
          "321:                             custom_ext_methods *meths, int *found, size_t *idx)",
          "326:     for (i = 0; i < builtin_num; i++) {",
          "327:         if (type == ext_defs[i].type) {",
          "329:             if ((context & ext_defs[i].context) == 0)",
          "333:                 if ((ext_defs[i].context & EXT_TLS_ONLY) != 0)",
          "335:             } else if ((ext_defs[i].context & EXT_DTLS_ONLY) != 0) {",
          "",
          "[Added Lines]",
          "258:                             custom_ext_methods *meths, RAW_EXTENSION *rawexlist,",
          "259:                             RAW_EXTENSION **found)",
          "263:     EXTENSION_DEFINITION *thisext;",
          "265:     for (i = 0, thisext = ext_defs; i < builtin_num; i++, thisext++) {",
          "266:         if (type == thisext->type) {",
          "268:             if ((context & thisext->context) == 0)",
          "272:                 if ((thisext->context & EXT_TLS_ONLY) != 0)",
          "274:             } else if ((thisext->context & EXT_DTLS_ONLY) != 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "410:     int found = 0;",
          "411:     custom_ext_methods *exts = NULL;",
          "412:     RAW_EXTENSION *raw_extensions = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:     EXTENSION_DEFINITION *thisexd;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "434:     while (PACKET_remaining(&extensions) > 0) {",
          "435:         unsigned int type;",
          "436:         PACKET extension;",
          "438:         if (!PACKET_get_net_2(&extensions, &type) ||",
          "439:             !PACKET_get_length_prefixed_2(&extensions, &extension)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:         RAW_EXTENSION *thisex;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "451:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "453:             goto err;",
          "454:         }",
          "459:         }",
          "460:     }",
          "",
          "[Removed Lines]",
          "448:         if (!verify_extension(s, context, type, exts, &found, &idx)",
          "449:                 || (found == 1",
          "450:                     && raw_extensions[idx].present == 1)) {",
          "455:         if (found) {",
          "456:             raw_extensions[idx].data = extension;",
          "457:             raw_extensions[idx].present = 1;",
          "458:             raw_extensions[idx].type = type;",
          "",
          "[Added Lines]",
          "388:         if (!verify_extension(s, context, type, exts, raw_extensions, &thisex)",
          "389:                 || (thisex != NULL && thisex->present == 1)) {",
          "394:         if (thisex != NULL) {",
          "395:             thisex->data = extension;",
          "396:             thisex->present = 1;",
          "397:             thisex->type = type;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "471:             goto err;",
          "472:         }",
          "",
          "[Removed Lines]",
          "466:     for (i = 0; i < OSSL_NELEM(ext_defs); i++) {",
          "467:         if(ext_defs[i].init_ext != NULL && (ext_defs[i].context & context) != 0",
          "468:                 && extension_is_relevant(s, ext_defs[i].context, context)",
          "469:                 && !ext_defs[i].init_ext(s, context)) {",
          "",
          "[Added Lines]",
          "405:     for (thisexd = ext_defs, i = 0; i < OSSL_NELEM(ext_defs); i++, thisexd++) {",
          "406:         if(thisexd->init != NULL && (thisexd->context & context) != 0",
          "407:                 && extension_is_relevant(s, thisexd->context, context)",
          "408:                 && !thisexd->init(s, context)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "518:         if (!extension_is_relevant(s, extdef->context, context))",
          "519:             return 1;",
          "",
          "[Removed Lines]",
          "521:         parser = s->server ? extdef->parse_client_ext : extdef->parse_server_ext;",
          "523:         if (parser != NULL) {",
          "524:             if (!parser(s, &currext->data, al))",
          "525:                 return 0;",
          "527:             return 1;",
          "528:         }",
          "",
          "[Added Lines]",
          "460:         parser = s->server ? extdef->parse_ctos : extdef->parse_stoc;",
          "462:         if (parser != NULL)",
          "463:             return parser(s, &currext->data, al);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "562: int tls_parse_all_extensions(SSL *s, int context, RAW_EXTENSION *exts, int *al)",
          "563: {",
          "567:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "",
          "[Removed Lines]",
          "564:     size_t loop, numexts = OSSL_NELEM(ext_defs);",
          "",
          "[Added Lines]",
          "499:     size_t i, numexts = OSSL_NELEM(ext_defs);",
          "500:     EXTENSION_DEFINITION *thisexd;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "571:     }",
          "575:         if (!tls_parse_extension(s, loop, context, exts, al))",
          "576:             return 0;",
          "577:     }",
          "",
          "[Removed Lines]",
          "574:     for (loop = 0; loop < numexts; loop++) {",
          "",
          "[Added Lines]",
          "510:     for (i = 0; i < numexts; i++) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "588:             return 0;",
          "589:     }",
          "",
          "[Removed Lines]",
          "583:     for (loop = 0; loop < OSSL_NELEM(ext_defs); loop++) {",
          "584:         if(ext_defs[loop].finalise_ext != NULL",
          "585:                 && (ext_defs[loop].context & context) != 0",
          "586:                 && !ext_defs[loop].finalise_ext(s, context, exts[loop].present,",
          "587:                                                 al))",
          "",
          "[Added Lines]",
          "519:     for (i = 0, thisexd = ext_defs; i < OSSL_NELEM(ext_defs); i++, thisexd++) {",
          "520:         if(thisexd->final != NULL",
          "521:                 && (thisexd->context & context) != 0",
          "522:                 && !thisexd->final(s, context, exts[i].present, al))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "599: int tls_construct_extensions(SSL *s, WPACKET *pkt, unsigned int context,",
          "600:                              int *al)",
          "601: {",
          "",
          "[Removed Lines]",
          "602:     size_t loop;",
          "603:     int addcustom = 0;",
          "604:     int min_version, max_version = 0, reason, tmpal;",
          "",
          "[Added Lines]",
          "538:     size_t i;",
          "539:     int addcustom = 0, min_version, max_version = 0, reason, tmpal;",
          "540:     EXTENSION_DEFINITION *thisexd;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "651:         goto err;",
          "652:     }",
          "655:         int (*construct)(SSL *s, WPACKET *pkt, int *al);",
          "658:         if ((ext_defs[loop].context & context) == 0)",
          "659:             continue;",
          "665:         if ((SSL_IS_DTLS(s)",
          "667:                        != 0)",
          "668:                 || (s->version == SSL3_VERSION",
          "670:                 || (SSL_IS_TLS13(s)",
          "672:                        != 0)",
          "673:                 || (!SSL_IS_TLS13(s)",
          "675:                     && (context & EXT_CLIENT_HELLO) == 0)",
          "677:                     && (context & EXT_CLIENT_HELLO) != 0",
          "678:                     && (SSL_IS_DTLS(s) || max_version < TLS1_3_VERSION))",
          "679:                 || construct == NULL)",
          "",
          "[Removed Lines]",
          "654:     for (loop = 0; loop < OSSL_NELEM(ext_defs); loop++) {",
          "661:         construct = s->server ? ext_defs[loop].construct_server_ext",
          "662:                               : ext_defs[loop].construct_client_ext;",
          "666:                     && (ext_defs[loop].context & EXT_TLS_IMPLEMENTATION_ONLY)",
          "669:                         && (ext_defs[loop].context & EXT_SSL3_ALLOWED) == 0)",
          "671:                     && (ext_defs[loop].context & EXT_TLS1_2_AND_BELOW_ONLY)",
          "674:                     && (ext_defs[loop].context & EXT_TLS1_3_ONLY) != 0",
          "676:                 || ((ext_defs[loop].context & EXT_TLS1_3_ONLY) != 0",
          "",
          "[Added Lines]",
          "590:     for (i = 0, thisexd = ext_defs; i < OSSL_NELEM(ext_defs); i++, thisexd++) {",
          "597:         construct = s->server ? thisexd->construct_stoc",
          "598:                               : thisexd->construct_ctos;",
          "602:                     && (thisexd->context & EXT_TLS_IMPLEMENTATION_ONLY)",
          "605:                         && (thisexd->context & EXT_SSL3_ALLOWED) == 0)",
          "607:                     && (thisexd->context & EXT_TLS1_2_AND_BELOW_ONLY)",
          "610:                     && (thisexd->context & EXT_TLS1_3_ONLY) != 0",
          "612:                 || ((thisexd->context & EXT_TLS1_3_ONLY) != 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "707:                                      int *al)",
          "708: {",
          "709:     if (!s->server) {",
          "",
          "[Removed Lines]",
          "706: static int tls_ext_final_renegotiate(SSL *s, unsigned int context, int sent,",
          "",
          "[Added Lines]",
          "642: static int final_renegotiate(SSL *s, unsigned int context, int sent,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "737:     return 1;",
          "738: }",
          "741: {",
          "742:     if (s->server)",
          "743:         s->servername_done = 0;",
          "",
          "[Removed Lines]",
          "740: static int tls_ext_init_server_name(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "676: static int init_server_name(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "745:     return 1;",
          "746: }",
          "749:                                      int *al)",
          "750: {",
          "751:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "",
          "[Removed Lines]",
          "748: static int tls_ext_final_server_name(SSL *s, unsigned int context, int sent,",
          "",
          "[Added Lines]",
          "684: static int final_server_name(SSL *s, unsigned int context, int sent,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "778: }",
          "780: #ifndef OPENSSL_NO_EC",
          "782:                                        int *al)",
          "783: {",
          "784:     unsigned long alg_k, alg_a;",
          "",
          "[Removed Lines]",
          "781: static int tls_ext_final_ec_pt_formats(SSL *s, unsigned int context, int sent,",
          "",
          "[Added Lines]",
          "717: static int final_ec_pt_formats(SSL *s, unsigned int context, int sent,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "803:         size_t i;",
          "807:         for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++) {",
          "810:                 break;",
          "812:         }",
          "814:             SSLerr(SSL_F_TLS_EXT_FINAL_EC_PT_FORMATS,",
          "815:                    SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST);",
          "816:             return 0;",
          "",
          "[Removed Lines]",
          "797:     if ((s->tlsext_ecpointformatlist != NULL)",
          "798:         && (s->tlsext_ecpointformatlist_length > 0)",
          "799:         && (s->session->tlsext_ecpointformatlist != NULL)",
          "800:         && (s->session->tlsext_ecpointformatlist_length > 0)",
          "801:         && ((alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA))) {",
          "804:         unsigned char *list;",
          "805:         int found_uncompressed = 0;",
          "806:         list = s->session->tlsext_ecpointformatlist;",
          "808:             if (*(list++) == TLSEXT_ECPOINTFORMAT_uncompressed) {",
          "809:                 found_uncompressed = 1;",
          "811:             }",
          "813:         if (!found_uncompressed) {",
          "",
          "[Added Lines]",
          "733:     if (s->tlsext_ecpointformatlist != NULL",
          "734:             && s->tlsext_ecpointformatlist_length > 0",
          "735:             && s->session->tlsext_ecpointformatlist != NULL",
          "736:             && s->session->tlsext_ecpointformatlist_length > 0",
          "737:             && ((alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA))) {",
          "740:         unsigned char *list = s->session->tlsext_ecpointformatlist;",
          "743:             if (*list++ == TLSEXT_ECPOINTFORMAT_uncompressed)",
          "746:         if (i == s->session->tlsext_ecpointformatlist_length) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "821: }",
          "822: #endif",
          "825: {",
          "826:     if (!s->server)",
          "827:         s->tlsext_ticket_expected = 0;",
          "",
          "[Removed Lines]",
          "824: static int tls_ext_init_session_ticket(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "757: static int init_session_ticket(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "829:     return 1;",
          "830: }",
          "833: {",
          "834:     if (s->server)",
          "835:         s->tlsext_status_type = -1;",
          "",
          "[Removed Lines]",
          "832: static int tls_ext_init_status_request(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "765: static int init_status_request(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "837:     return 1;",
          "838: }",
          "841:                                         int *al)",
          "842: {",
          "843:     if (s->server)",
          "",
          "[Removed Lines]",
          "840: static int tls_ext_final_status_request(SSL *s, unsigned int context, int sent,",
          "",
          "[Added Lines]",
          "773: static int final_status_request(SSL *s, unsigned int context, int sent,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "855: }",
          "857: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "859: {",
          "860:     s->s3->next_proto_neg_seen = 0;",
          "",
          "[Removed Lines]",
          "858: static int tls_ext_init_npn(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "791: static int init_npn(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "863: }",
          "864: #endif",
          "867: {",
          "868:     OPENSSL_free(s->s3->alpn_selected);",
          "869:     s->s3->alpn_selected = NULL;",
          "",
          "[Removed Lines]",
          "866: static int tls_ext_init_alpn(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "799: static int init_alpn(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "876:     return 1;",
          "877: }",
          "880: {",
          "881:     const unsigned char *selected = NULL;",
          "882:     unsigned char selected_len = 0;",
          "",
          "[Removed Lines]",
          "879: static int tls_ext_final_alpn(SSL *s, unsigned int context, int sent, int *al)",
          "",
          "[Added Lines]",
          "812: static int final_alpn(SSL *s, unsigned int context, int sent, int *al)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "911:     return 1;",
          "912: }",
          "915: {",
          "917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "",
          "[Removed Lines]",
          "914: static int tls_ext_init_sig_algs(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "847: static int init_sig_algs(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "921: }",
          "923: #ifndef OPENSSL_NO_SRP",
          "925: {",
          "926:     OPENSSL_free(s->srp_ctx.login);",
          "927:     s->srp_ctx.login = NULL;",
          "",
          "[Removed Lines]",
          "924: static int tls_ext_init_srp(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "857: static int init_srp(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "930: }",
          "931: #endif",
          "934: {",
          "935:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "937:     return 1;",
          "938: }",
          "941: {",
          "942:     if (!s->server)",
          "943:         s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "",
          "[Removed Lines]",
          "933: static int tls_ext_init_etm(SSL *s, unsigned int context)",
          "940: static int tls_ext_init_ems(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "866: static int init_etm(SSL *s, unsigned int context)",
          "873: static int init_ems(SSL *s, unsigned int context)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "945:     return 1;",
          "946: }",
          "949: {",
          "950:     if (!s->server && s->hit) {",
          "",
          "[Removed Lines]",
          "948: static int tls_ext_final_ems(SSL *s, unsigned int context, int sent, int *al)",
          "",
          "[Added Lines]",
          "881: static int final_ems(SSL *s, unsigned int context, int sent, int *al)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "964: }",
          "966: #ifndef OPENSSL_NO_SRTP",
          "968: {",
          "969:     if (s->server)",
          "970:         s->srtp_profile = NULL;",
          "",
          "[Removed Lines]",
          "967: static int tls_ext_init_srtp(SSL *s, unsigned int context)",
          "",
          "[Added Lines]",
          "900: static int init_srtp(SSL *s, unsigned int context)",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"../ssl_locl.h\"",
          "13: #include \"statem_locl.h\"",
          "16: {",
          "18:     if (!s->renegotiate)",
          "",
          "[Removed Lines]",
          "15: int tls_construct_client_renegotiate(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "15: int tls_construct_ctos_renegotiate(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     return 1;",
          "31: }",
          "34: {",
          "35:     if (s->tlsext_hostname == NULL)",
          "36:         return 1;",
          "",
          "[Removed Lines]",
          "33: int tls_construct_client_server_name(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "33: int tls_construct_ctos_server_name(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: }",
          "56: #ifndef OPENSSL_NO_SRP",
          "58: {",
          "60:     if (s->srp_ctx.login == NULL)",
          "",
          "[Removed Lines]",
          "57: int tls_construct_client_srp(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "57: int tls_construct_ctos_srp(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81: #ifndef OPENSSL_NO_EC",
          "82: static int use_ecc(SSL *s)",
          "83: {",
          "86:     unsigned long alg_k, alg_a;",
          "87:     STACK_OF(SSL_CIPHER) *cipher_stack = NULL;",
          "",
          "[Removed Lines]",
          "84:     int using_ecc = 0;",
          "85:     int i;",
          "",
          "[Added Lines]",
          "84:     int i, end;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:     if (s->version == SSL3_VERSION)",
          "91:         return 0;",
          "94:     cipher_stack = SSL_get_ciphers(s);",
          "97:         const SSL_CIPHER *c = sk_SSL_CIPHER_value(cipher_stack, i);",
          "99:         alg_k = c->algorithm_mkey;",
          "100:         alg_a = c->algorithm_auth;",
          "101:         if ((alg_k & (SSL_kECDHE | SSL_kECDHEPSK))",
          "105:             break;",
          "107:     }",
          "110: }",
          "113: {",
          "114:     const unsigned char *pformats;",
          "115:     size_t num_formats;",
          "",
          "[Removed Lines]",
          "96:     for (i = 0; i < sk_SSL_CIPHER_num(cipher_stack); i++) {",
          "102:             || (alg_a & SSL_aECDSA)",
          "103:             || c->min_tls >= TLS1_3_VERSION) {",
          "104:             using_ecc = 1;",
          "106:         }",
          "109:     return using_ecc;",
          "112: int tls_construct_client_ec_pt_formats(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "93:     end = sk_SSL_CIPHER_num(cipher_stack);",
          "94:     for (i = 0; i < end; i++) {",
          "100:                 || (alg_a & SSL_aECDSA)",
          "101:                 || c->min_tls >= TLS1_3_VERSION)",
          "105:     return i < end;",
          "108: int tls_construct_ctos_ec_pt_formats(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134: }",
          "138: {",
          "139:     const unsigned char *pcurves = NULL, *pcurvestmp;",
          "140:     size_t num_curves = 0, i;",
          "",
          "[Removed Lines]",
          "137: int tls_construct_client_supported_groups(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "132: int tls_construct_ctos_supported_groups(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "183: }",
          "184: #endif",
          "187: {",
          "188:     size_t ticklen;",
          "",
          "[Removed Lines]",
          "186: int tls_construct_client_session_ticket(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "181: int tls_construct_ctos_session_ticket(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "222:     return 1;",
          "223: }",
          "226: {",
          "227:     size_t salglen;",
          "228:     const unsigned char *salg;",
          "",
          "[Removed Lines]",
          "225: int tls_construct_client_sig_algs(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "220: int tls_construct_ctos_sig_algs(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "248: }",
          "250: #ifndef OPENSSL_NO_OCSP",
          "252: {",
          "253:     int i;",
          "",
          "[Removed Lines]",
          "251: int tls_construct_client_status_request(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "245: int tls_construct_ctos_status_request(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "266:     }",
          "267:     for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++) {",
          "268:         unsigned char *idbytes;",
          "274:         if (idlen <= 0",
          "276:                 || !WPACKET_sub_allocate_bytes_u16(pkt, idlen, &idbytes)",
          "",
          "[Removed Lines]",
          "269:         int idlen;",
          "270:         OCSP_RESPID *id;",
          "272:         id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);",
          "273:         idlen = i2d_OCSP_RESPID(id, NULL);",
          "",
          "[Added Lines]",
          "263:         OCSP_RESPID *id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);",
          "264:         int idlen = i2d_OCSP_RESPID(id, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312: #endif",
          "314: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "316: {",
          "317:     if (s->ctx->next_proto_select_cb == NULL || s->s3->tmp.finish_md_len != 0)",
          "318:         return 1;",
          "",
          "[Removed Lines]",
          "315: int tls_construct_client_npn(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "307: int tls_construct_ctos_npn(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "331: }",
          "332: #endif",
          "335: {",
          "336:     s->s3->alpn_sent = 0;",
          "",
          "[Removed Lines]",
          "334: int tls_construct_client_alpn(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "326: int tls_construct_ctos_alpn(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "361: #ifndef OPENSSL_NO_SRTP",
          "363: {",
          "364:     STACK_OF(SRTP_PROTECTION_PROFILE) *clnt = SSL_get_srtp_profiles(s);",
          "368:     if (clnt == NULL)",
          "369:         return 1;",
          "",
          "[Removed Lines]",
          "362: int tls_construct_client_use_srtp(SSL *s, WPACKET *pkt, int *al)",
          "365:     SRTP_PROTECTION_PROFILE *prof;",
          "366:     int i, ct;",
          "",
          "[Added Lines]",
          "354: int tls_construct_ctos_use_srtp(SSL *s, WPACKET *pkt, int *al)",
          "357:     int i, end;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "376:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP, ERR_R_INTERNAL_ERROR);",
          "377:         return 0;",
          "378:     }",
          "382:         if (prof == NULL || !WPACKET_put_bytes_u16(pkt, prof->id)) {",
          "383:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP, ERR_R_INTERNAL_ERROR);",
          "384:             return 0;",
          "",
          "[Removed Lines]",
          "379:     ct = sk_SRTP_PROTECTION_PROFILE_num(clnt);",
          "380:     for (i = 0; i < ct; i++) {",
          "381:         prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);",
          "",
          "[Added Lines]",
          "371:     end = sk_SRTP_PROTECTION_PROFILE_num(clnt);",
          "372:     for (i = 0; i < end; i++) {",
          "373:         const SRTP_PROTECTION_PROFILE *prof =",
          "374:             sk_SRTP_PROTECTION_PROFILE_value(clnt, i);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "396: }",
          "397: #endif",
          "400: {",
          "401:     if (s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
          "402:         return 1;",
          "",
          "[Removed Lines]",
          "399: int tls_construct_client_etm(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "393: int tls_construct_ctos_etm(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "411: }",
          "413: #ifndef OPENSSL_NO_CT",
          "415: {",
          "416:     if (s->ct_validation_callback == NULL)",
          "417:         return 1;",
          "",
          "[Removed Lines]",
          "414: int tls_construct_client_sct(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "408: int tls_construct_ctos_sct(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "426: }",
          "427: #endif",
          "430: {",
          "431:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)",
          "432:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "",
          "[Removed Lines]",
          "429: int tls_construct_client_ems(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "423: int tls_construct_ctos_ems(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "437:     return 1;",
          "438: }",
          "441: {",
          "442:     int currv, min_version, max_version, reason;",
          "",
          "[Removed Lines]",
          "440: int tls_construct_client_supported_versions(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "434: int tls_construct_ctos_supported_versions(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "484: }",
          "488: {",
          "489:     size_t i, sharessent = 0, num_curves = 0;",
          "490:     const unsigned char *pcurves = NULL;",
          "",
          "[Removed Lines]",
          "487: int tls_construct_client_key_share(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "481: int tls_construct_ctos_key_share(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "569:     return 1;",
          "570: }",
          "573: {",
          "574:     unsigned char *padbytes;",
          "575:     size_t hlen;",
          "",
          "[Removed Lines]",
          "572: int tls_construct_client_padding(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "566: #define F5_WORKAROUND_MIN_MSG_LEN   0xff",
          "567: #define F5_WORKAROUND_MAX_MSG_LEN   0x200",
          "569: int tls_construct_ctos_padding(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "588:         return 0;",
          "589:     }",
          "593:         if (hlen >= 4)",
          "594:             hlen -= 4;",
          "595:         else",
          "",
          "[Removed Lines]",
          "591:     if (hlen > 0xff && hlen < 0x200) {",
          "592:         hlen = 0x200 - hlen;",
          "",
          "[Added Lines]",
          "588:     if (hlen > F5_WORKAROUND_MIN_MSG_LEN && hlen < F5_WORKAROUND_MAX_MSG_LEN) {",
          "590:         hlen = F5_WORKAROUND_MAX_MSG_LEN - hlen;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "613: {",
          "614:     size_t expected_len = s->s3->previous_client_finished_len",
          "615:         + s->s3->previous_server_finished_len;",
          "",
          "[Removed Lines]",
          "612: int tls_parse_server_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "615: int tls_parse_stoc_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "666:     return 1;",
          "667: }",
          "670: {",
          "671:     if (s->tlsext_hostname == NULL || PACKET_remaining(pkt) > 0) {",
          "",
          "[Removed Lines]",
          "669: int tls_parse_server_server_name(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "672: int tls_parse_stoc_server_name(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "689: }",
          "691: #ifndef OPENSSL_NO_EC",
          "693: {",
          "694:     unsigned int ecpointformatlist_length;",
          "695:     PACKET ecptformatlist;",
          "",
          "[Removed Lines]",
          "692: int tls_parse_server_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "695: int tls_parse_stoc_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "724: }",
          "725: #endif",
          "728: {",
          "730:         !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "731:                                       PACKET_remaining(pkt),",
          "732:                                       s->tls_session_ticket_ext_cb_arg)) {",
          "734:         return 0;",
          "735:     }",
          "736:     if (!tls_use_ticket(s) || PACKET_remaining(pkt) > 0) {",
          "738:         return 0;",
          "739:     }",
          "740:     s->tlsext_ticket_expected = 1;",
          "742:     return 1;",
          "743: }",
          "745: #ifndef OPENSSL_NO_OCSP",
          "747: {",
          "",
          "[Removed Lines]",
          "727: int tls_parse_server_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "729:     if (s->tls_session_ticket_ext_cb &&",
          "746: int tls_parse_server_status_request(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "730: int tls_parse_stoc_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "732:     if (s->tls_session_ticket_ext_cb != NULL &&",
          "751: int tls_parse_stoc_status_request(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "764: #ifndef OPENSSL_NO_CT",
          "766: {",
          "",
          "[Removed Lines]",
          "765: int tls_parse_server_sct(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "770: int tls_parse_stoc_sct(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "773:         size_t size = PACKET_remaining(pkt);",
          "780:         s->tlsext_scts_len = size;",
          "781:         if (size > 0) {",
          "782:             s->tlsext_scts = OPENSSL_malloc(size);",
          "",
          "[Removed Lines]",
          "776:         if (s->tlsext_scts != NULL) {",
          "777:             OPENSSL_free(s->tlsext_scts);",
          "778:             s->tlsext_scts = NULL;",
          "779:         }",
          "",
          "[Added Lines]",
          "781:         OPENSSL_free(s->tlsext_scts);",
          "782:         s->tlsext_scts = NULL;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "816:     return 1;",
          "817: }",
          "820: {",
          "821:     unsigned char *selected;",
          "822:     unsigned char selected_len;",
          "823:     PACKET tmppkt;",
          "825:     if (s->s3->tmp.finish_md_len != 0)",
          "826:         return 1;",
          "",
          "[Removed Lines]",
          "819: int tls_parse_server_npn(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "823: int tls_parse_stoc_npn(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "863: }",
          "864: #endif",
          "867: {",
          "868:     size_t len;",
          "",
          "[Removed Lines]",
          "866: int tls_parse_server_alpn(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "873: int tls_parse_stoc_alpn(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "900: }",
          "902: #ifndef OPENSSL_NO_SRTP",
          "904: {",
          "905:     unsigned int id, ct, mki;",
          "906:     int i;",
          "907:     STACK_OF(SRTP_PROTECTION_PROFILE) *clnt;",
          "908:     SRTP_PROTECTION_PROFILE *prof;",
          "914:         SSLerr(SSL_F_TLS_PARSE_SERVER_USE_SRTP,",
          "915:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "",
          "[Removed Lines]",
          "903: int tls_parse_server_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "910:     if (!PACKET_get_net_2(pkt, &ct)",
          "911:         || ct != 2 || !PACKET_get_net_2(pkt, &id)",
          "912:         || !PACKET_get_1(pkt, &mki)",
          "913:         || PACKET_remaining(pkt) != 0) {",
          "",
          "[Added Lines]",
          "910: int tls_parse_stoc_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "917:     if (!PACKET_get_net_2(pkt, &ct) || ct != 2",
          "918:             || !PACKET_get_net_2(pkt, &id)",
          "919:             || !PACKET_get_1(pkt, &mki)",
          "920:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "924:         return 0;",
          "925:     }",
          "930:     if (clnt == NULL) {",
          "931:         SSLerr(SSL_F_TLS_PARSE_SERVER_USE_SRTP, SSL_R_NO_SRTP_PROFILES);",
          "",
          "[Removed Lines]",
          "927:     clnt = SSL_get_srtp_profiles(s);",
          "",
          "[Added Lines]",
          "935:     clnt = SSL_get_srtp_profiles(s);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "954: }",
          "955: #endif",
          "958: {",
          "960:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
          "",
          "[Removed Lines]",
          "957: int tls_parse_server_etm(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "963: int tls_parse_stoc_etm(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "965:     return 1;",
          "966: }",
          "969: {",
          "970:     s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "971:     if (!s->hit)",
          "",
          "[Removed Lines]",
          "968: int tls_parse_server_ems(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "974: int tls_parse_stoc_ems(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "974:     return 1;",
          "975: }",
          "978: {",
          "979:     unsigned int group_id;",
          "980:     PACKET encoded_pt;",
          "",
          "[Removed Lines]",
          "977: int tls_parse_server_key_share(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "983: int tls_parse_stoc_key_share(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: {",
          "19:     unsigned int ilen;",
          "20:     const unsigned char *data;",
          "",
          "[Removed Lines]",
          "17: int tls_parse_client_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "17: int tls_parse_ctos_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     return 1;",
          "50: }",
          "53: {",
          "54:     unsigned int servname_type;",
          "55:     PACKET sni, hostname;",
          "81:     if (!PACKET_as_length_prefixed_2(pkt, &sni)",
          "83:         || PACKET_remaining(&sni) == 0) {",
          "",
          "[Removed Lines]",
          "52: int tls_parse_client_server_name(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "75: int tls_parse_ctos_server_name(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135: }",
          "137: #ifndef OPENSSL_NO_SRP",
          "139: {",
          "140:     PACKET srp_I;",
          "",
          "[Removed Lines]",
          "138: int tls_parse_client_srp(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "137: int tls_parse_ctos_srp(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159: #endif",
          "161: #ifndef OPENSSL_NO_EC",
          "163: {",
          "164:     PACKET ec_point_format_list;",
          "",
          "[Removed Lines]",
          "162: int tls_parse_client_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "161: int tls_parse_ctos_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182: }",
          "186: {",
          "187:     if (s->tls_session_ticket_ext_cb &&",
          "188:             !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "",
          "[Removed Lines]",
          "185: int tls_parse_client_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "184: int tls_parse_ctos_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:     return 1;",
          "196: }",
          "199: {",
          "200:     PACKET supported_sig_algs;",
          "",
          "[Removed Lines]",
          "198: int tls_parse_client_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "197: int tls_parse_ctos_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216: }",
          "218: #ifndef OPENSSL_NO_OCSP",
          "220: {",
          "221:     if (!PACKET_get_1(pkt, (unsigned int *)&s->tlsext_status_type)) {",
          "223:         return 0;",
          "224:     }",
          "281:         }",
          "286:             return 0;",
          "287:         }",
          "300:         }",
          "306:     }",
          "308:     return 1;",
          "",
          "[Removed Lines]",
          "219: int tls_parse_client_status_request(SSL *s, PACKET *pkt, int *al)",
          "226:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "227:         const unsigned char *ext_data;",
          "228:         PACKET responder_id_list, exts;",
          "229:         if (!PACKET_get_length_prefixed_2 (pkt, &responder_id_list)) {",
          "231:             return 0;",
          "232:         }",
          "238:         sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);",
          "239:         if (PACKET_remaining(&responder_id_list) > 0) {",
          "240:             s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "241:             if (s->tlsext_ocsp_ids == NULL) {",
          "243:                 return 0;",
          "244:             }",
          "245:         } else {",
          "246:             s->tlsext_ocsp_ids = NULL;",
          "247:         }",
          "249:         while (PACKET_remaining(&responder_id_list) > 0) {",
          "250:             OCSP_RESPID *id;",
          "251:             PACKET responder_id;",
          "252:             const unsigned char *id_data;",
          "254:             if (!PACKET_get_length_prefixed_2(&responder_id_list,",
          "255:                                               &responder_id)",
          "256:                     || PACKET_remaining(&responder_id) == 0) {",
          "258:                 return 0;",
          "259:             }",
          "261:             id_data = PACKET_data(&responder_id);",
          "263:             id = d2i_OCSP_RESPID(NULL, &id_data,",
          "264:                                  (int)PACKET_remaining(&responder_id));",
          "265:             if (id == NULL) {",
          "267:                 return 0;",
          "268:             }",
          "270:             if (id_data != PACKET_end(&responder_id)) {",
          "271:                 OCSP_RESPID_free(id);",
          "273:                 return 0;",
          "274:             }",
          "276:             if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "277:                 OCSP_RESPID_free(id);",
          "279:                 return 0;",
          "280:             }",
          "284:         if (!PACKET_as_length_prefixed_2(pkt, &exts)) {",
          "289:         if (PACKET_remaining(&exts) > 0) {",
          "290:             ext_data = PACKET_data(&exts);",
          "291:             sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "292:                                        X509_EXTENSION_free);",
          "293:             s->tlsext_ocsp_exts =",
          "294:                 d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "295:                                     (int)PACKET_remaining(&exts));",
          "296:             if (s->tlsext_ocsp_exts == NULL || ext_data != PACKET_end(&exts)) {",
          "298:                 return 0;",
          "299:             }",
          "301:     } else {",
          "305:         s->tlsext_status_type = -1;",
          "",
          "[Added Lines]",
          "218: int tls_parse_ctos_status_request(SSL *s, PACKET *pkt, int *al)",
          "220:     PACKET responder_id_list, exts;",
          "227:     if (s->tlsext_status_type != TLSEXT_STATUSTYPE_ocsp) {",
          "231:         s->tlsext_status_type = -1;",
          "232:         return 1;",
          "233:     }",
          "235:     if (!PACKET_get_length_prefixed_2 (pkt, &responder_id_list)) {",
          "237:         return 0;",
          "238:     }",
          "244:     sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);",
          "245:     if (PACKET_remaining(&responder_id_list) > 0) {",
          "246:         s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "247:         if (s->tlsext_ocsp_ids == NULL) {",
          "249:             return 0;",
          "250:         }",
          "251:     } else {",
          "252:         s->tlsext_ocsp_ids = NULL;",
          "253:     }",
          "255:     while (PACKET_remaining(&responder_id_list) > 0) {",
          "256:         OCSP_RESPID *id;",
          "257:         PACKET responder_id;",
          "258:         const unsigned char *id_data;",
          "260:         if (!PACKET_get_length_prefixed_2(&responder_id_list, &responder_id)",
          "261:                 || PACKET_remaining(&responder_id) == 0) {",
          "263:             return 0;",
          "264:         }",
          "266:         id_data = PACKET_data(&responder_id);",
          "268:         id = d2i_OCSP_RESPID(NULL, &id_data,",
          "269:                              (int)PACKET_remaining(&responder_id));",
          "270:         if (id == NULL) {",
          "272:             return 0;",
          "275:         if (id_data != PACKET_end(&responder_id)) {",
          "276:             OCSP_RESPID_free(id);",
          "281:         if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "282:             OCSP_RESPID_free(id);",
          "284:             return 0;",
          "285:         }",
          "286:     }",
          "289:     if (!PACKET_as_length_prefixed_2(pkt, &exts)) {",
          "291:         return 0;",
          "292:     }",
          "294:     if (PACKET_remaining(&exts) > 0) {",
          "295:         const unsigned char *ext_data = PACKET_data(&exts);",
          "297:         sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "298:                                    X509_EXTENSION_free);",
          "299:         s->tlsext_ocsp_exts =",
          "300:             d2i_X509_EXTENSIONS(NULL, &ext_data, (int)PACKET_remaining(&exts));",
          "301:         if (s->tlsext_ocsp_exts == NULL || ext_data != PACKET_end(&exts)) {",
          "303:             return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "310: #endif",
          "312: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "314: {",
          "333:         s->s3->next_proto_neg_seen = 1;",
          "336:     return 1;",
          "337: }",
          "338: #endif",
          "347: {",
          "348:     PACKET protocol_list, save_protocol_list, protocol;",
          "",
          "[Removed Lines]",
          "313: int tls_parse_client_npn(SSL *s, PACKET *pkt, int *al)",
          "315:     if (s->s3->tmp.finish_md_len == 0) {",
          "334:     }",
          "346: int tls_parse_client_alpn(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "312: int tls_parse_ctos_npn(SSL *s, PACKET *pkt, int *al)",
          "331:     if (s->s3->tmp.finish_md_len == 0)",
          "343: int tls_parse_ctos_alpn(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "376: }",
          "378: #ifndef OPENSSL_NO_SRTP",
          "380: {",
          "382:     STACK_OF(SRTP_PROTECTION_PROFILE) *srvr;",
          "383:     unsigned int ct, mki_len, id;",
          "384:     int i, srtp_pref;",
          "",
          "[Removed Lines]",
          "379: int tls_parse_client_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "381:     SRTP_PROTECTION_PROFILE *sprof;",
          "",
          "[Added Lines]",
          "376: int tls_parse_ctos_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "389:         return 1;",
          "394:         SSLerr(SSL_F_TLS_PARSE_CLIENT_USE_SRTP,",
          "395:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "",
          "[Removed Lines]",
          "392:     if (!PACKET_get_net_2(pkt, &ct)",
          "393:         || (ct & 1) != 0 || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "",
          "[Added Lines]",
          "388:     if (!PACKET_get_net_2(pkt, &ct) || (ct & 1) != 0",
          "389:             || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "419:         for (i = 0; i < srtp_pref; i++) {",
          "421:             if (sprof->id == id) {",
          "422:                 s->srtp_profile = sprof;",
          "423:                 srtp_pref = i;",
          "",
          "[Removed Lines]",
          "420:             sprof = sk_SRTP_PROTECTION_PROFILE_value(srvr, i);",
          "",
          "[Added Lines]",
          "416:             const SRTP_PROTECTION_PROFILE *sprof =",
          "417:                 sk_SRTP_PROTECTION_PROFILE_value(srvr, i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "447: }",
          "448: #endif",
          "451: {",
          "452:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "453:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Removed Lines]",
          "450: int tls_parse_client_etm(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "446: int tls_parse_ctos_etm(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "474:         unsigned int share_id = (groups[0] << 8) | (groups[1]);",
          "476:         if (group_id == share_id",
          "479:             break;",
          "480:         }",
          "481:     }",
          "",
          "[Removed Lines]",
          "477:                 && (!checkallow || tls_curve_allowed(s, groups,",
          "478:                                                      SSL_SECOP_CURVE_CHECK))) {",
          "",
          "[Added Lines]",
          "473:                 && (!checkallow",
          "474:                     || tls_curve_allowed(s, groups, SSL_SECOP_CURVE_CHECK))) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "493: {",
          "494:     unsigned int group_id;",
          "495:     PACKET key_share_list, encoded_pt;",
          "",
          "[Removed Lines]",
          "492: int tls_parse_client_key_share(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "488: int tls_parse_ctos_key_share(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "615: }",
          "617: #ifndef OPENSSL_NO_EC",
          "619: {",
          "620:     PACKET supported_groups_list;",
          "",
          "[Removed Lines]",
          "618: int tls_parse_client_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "615: int tls_parse_ctos_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "639: }",
          "640: #endif",
          "643: {",
          "645:     if (PACKET_remaining(pkt) != 0) {",
          "",
          "[Removed Lines]",
          "642: int tls_parse_client_ems(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "639: int tls_parse_ctos_ems(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "652:     return 1;",
          "653: }",
          "657: {",
          "658:     if (!s->s3->send_connection_binding)",
          "659:         return 1;",
          "",
          "[Removed Lines]",
          "656: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "655: int tls_construct_stoc_renegotiate(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "674:     return 1;",
          "675: }",
          "678: {",
          "679:     if (s->hit || s->servername_done != 1",
          "680:             || s->session->tlsext_hostname == NULL)",
          "",
          "[Removed Lines]",
          "677: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "676: int tls_construct_stoc_server_name(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "690: }",
          "692: #ifndef OPENSSL_NO_EC",
          "694: {",
          "695:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "696:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "",
          "[Removed Lines]",
          "693: int tls_construct_server_ec_pt_formats(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "692: int tls_construct_stoc_ec_pt_formats(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "716: }",
          "717: #endif",
          "720: {",
          "721:     if (!s->tlsext_ticket_expected || !tls_use_ticket(s)) {",
          "722:         s->tlsext_ticket_expected = 0;",
          "",
          "[Removed Lines]",
          "719: int tls_construct_server_session_ticket(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "717: int tls_construct_stoc_session_ticket(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "733: }",
          "735: #ifndef OPENSSL_NO_OCSP",
          "737: {",
          "738:     if (!s->tlsext_status_expected)",
          "739:         return 1;",
          "",
          "[Removed Lines]",
          "736: int tls_construct_server_status_request(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "734: int tls_construct_stoc_status_request(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "752: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "754: {",
          "755:     const unsigned char *npa;",
          "756:     unsigned int npalen;",
          "",
          "[Removed Lines]",
          "753: int tls_construct_server_next_proto_neg(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "751: int tls_construct_stoc_next_proto_neg(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "777: }",
          "778: #endif",
          "781: {",
          "782:     if (s->s3->alpn_selected == NULL)",
          "783:         return 1;",
          "",
          "[Removed Lines]",
          "780: int tls_construct_server_alpn(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "778: int tls_construct_stoc_alpn(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "798: }",
          "800: #ifndef OPENSSL_NO_SRTP",
          "802: {",
          "803:     if (s->srtp_profile == NULL)",
          "804:         return 1;",
          "",
          "[Removed Lines]",
          "801: int tls_construct_server_use_srtp(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "799: int tls_construct_stoc_use_srtp(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "817: }",
          "818: #endif",
          "821: {",
          "822:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
          "823:         return 1;",
          "",
          "[Removed Lines]",
          "820: int tls_construct_server_etm(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "818: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "843:     return 1;",
          "844: }",
          "847: {",
          "848:     if ((s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) == 0)",
          "849:         return 1;",
          "",
          "[Removed Lines]",
          "846: int tls_construct_server_ems(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "844: int tls_construct_stoc_ems(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "857:     return 1;",
          "858: }",
          "861: {",
          "862:     unsigned char *encodedPoint;",
          "863:     size_t encoded_pt_len = 0;",
          "",
          "[Removed Lines]",
          "860: int tls_construct_server_key_share(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "858: int tls_construct_stoc_key_share(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "911:     return 1;",
          "912: }",
          "915: {",
          "916:     const unsigned char cryptopro_ext[36] = {",
          "",
          "[Removed Lines]",
          "914: int tls_construct_server_cryptopro_bug(SSL *s, WPACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "912: int tls_construct_stoc_cryptopro_bug(SSL *s, WPACKET *pkt, int *al)",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:     if (s->version >= TLS1_VERSION && !SSL_IS_TLS13(s)",
          "1136:         const SSL_CIPHER *pref_cipher = NULL;",
          "",
          "[Removed Lines]",
          "1135:             && s->tls_session_secret_cb && s->session->tlsext_tick) {",
          "",
          "[Added Lines]",
          "1135:             && s->tls_session_secret_cb != NULL && s->session->tlsext_tick) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3113:     if (!tls_collect_extensions(s, &extensions,",
          "3114:                                 EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "3116:             || !tls_parse_all_extensions(s,",
          "3117:                                          EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "3119:                                          rawexts, &al))",
          "3120:         goto err;",
          "",
          "[Removed Lines]",
          "3115:                                 | EXT_TLS1_3_CERTIFICATE, &rawexts, &al)",
          "3118:                                          | EXT_TLS1_3_CERTIFICATE,",
          "",
          "[Added Lines]",
          "3115:                                     | EXT_TLS1_3_CERTIFICATE,",
          "3116:                                 &rawexts, &al)",
          "3119:                                             | EXT_TLS1_3_CERTIFICATE,",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:                                     int *al);",
          "168: #ifndef OPENSSL_NO_SRP",
          "170: #endif",
          "171: #ifndef OPENSSL_NO_EC",
          "174: #endif",
          "177: #ifndef OPENSSL_NO_OCSP",
          "179: #endif",
          "180: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "182: #endif",
          "184: #ifndef OPENSSL_NO_SRTP",
          "186: #endif",
          "193: #ifndef OPENSSL_NO_EC",
          "195: #endif",
          "197: #ifndef OPENSSL_NO_OCSP",
          "199: #endif",
          "200: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "202: #endif",
          "204: #ifndef OPENSSL_NO_SRTP",
          "206: #endif",
          "214: #define TLSEXT_TYPE_cryptopro_bug      0xfde8",
          "220: #ifndef OPENSSL_NO_SRP",
          "222: #endif",
          "223: #ifndef OPENSSL_NO_EC",
          "226: #endif",
          "229: #ifndef OPENSSL_NO_OCSP",
          "231: #endif",
          "232: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "234: #endif",
          "236: #ifndef OPENSSL_NO_SRTP",
          "238: #endif",
          "240: #ifndef OPENSSL_NO_CT",
          "242: #endif",
          "249: #ifndef OPENSSL_NO_EC",
          "251: #endif",
          "253: #ifndef OPENSSL_NO_OCSP",
          "255: #endif",
          "256: #ifndef OPENSSL_NO_CT",
          "258: #endif",
          "259: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "261: #endif",
          "263: #ifndef OPENSSL_NO_SRTP",
          "265: #endif",
          "",
          "[Removed Lines]",
          "166: int tls_parse_client_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "167: int tls_parse_client_server_name(SSL *s, PACKET *pkt, int *al);",
          "169: int tls_parse_client_srp(SSL *s, PACKET *pkt, int *al);",
          "172: int tls_parse_client_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "173: int tls_parse_client_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "175: int tls_parse_client_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "176: int tls_parse_client_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "178: int tls_parse_client_status_request(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_client_npn(SSL *s, PACKET *pkt, int *al);",
          "183: int tls_parse_client_alpn(SSL *s, PACKET *pkt, int *al);",
          "185: int tls_parse_client_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "187: int tls_parse_client_etm(SSL *s, PACKET *pkt, int *al);",
          "188: int tls_parse_client_key_share(SSL *s, PACKET *pkt, int *al);",
          "189: int tls_parse_client_ems(SSL *s, PACKET *pkt, int *al);",
          "191: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "192: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al);",
          "194: int tls_construct_server_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "196: int tls_construct_server_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "198: int tls_construct_server_status_request(SSL *s, WPACKET *pkt, int *al);",
          "201: int tls_construct_server_next_proto_neg(SSL *s, WPACKET *pkt, int *al);",
          "203: int tls_construct_server_alpn(SSL *s, WPACKET *pkt, int *al);",
          "205: int tls_construct_server_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "207: int tls_construct_server_etm(SSL *s, WPACKET *pkt, int *al);",
          "208: int tls_construct_server_ems(SSL *s, WPACKET *pkt, int *al);",
          "209: int tls_construct_server_key_share(SSL *s, WPACKET *pkt, int *al);",
          "215: int tls_construct_server_cryptopro_bug(SSL *s, WPACKET *pkt, int *al);",
          "218: int tls_construct_client_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "219: int tls_construct_client_server_name(SSL *s, WPACKET *pkt, int *al);",
          "221: int tls_construct_client_srp(SSL *s, WPACKET *pkt, int *al);",
          "224: int tls_construct_client_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "225: int tls_construct_client_supported_groups(SSL *s, WPACKET *pkt, int *al);",
          "227: int tls_construct_client_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "228: int tls_construct_client_sig_algs(SSL *s, WPACKET *pkt, int *al);",
          "230: int tls_construct_client_status_request(SSL *s, WPACKET *pkt, int *al);",
          "233: int tls_construct_client_npn(SSL *s, WPACKET *pkt, int *al);",
          "235: int tls_construct_client_alpn(SSL *s, WPACKET *pkt, int *al);",
          "237: int tls_construct_client_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "239: int tls_construct_client_etm(SSL *s, WPACKET *pkt, int *al);",
          "241: int tls_construct_client_sct(SSL *s, WPACKET *pkt, int *al);",
          "243: int tls_construct_client_ems(SSL *s, WPACKET *pkt, int *al);",
          "244: int tls_construct_client_supported_versions(SSL *s, WPACKET *pkt, int *al);",
          "245: int tls_construct_client_key_share(SSL *s, WPACKET *pkt, int *al);",
          "246: int tls_construct_client_padding(SSL *s, WPACKET *pkt, int *al);",
          "247: int tls_parse_server_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "248: int tls_parse_server_server_name(SSL *s, PACKET *pkt, int *al);",
          "250: int tls_parse_server_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "252: int tls_parse_server_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "254: int tls_parse_server_status_request(SSL *s, PACKET *pkt, int *al);",
          "257: int tls_parse_server_sct(SSL *s, PACKET *pkt, int *al);",
          "260: int tls_parse_server_npn(SSL *s, PACKET *pkt, int *al);",
          "262: int tls_parse_server_alpn(SSL *s, PACKET *pkt, int *al);",
          "264: int tls_parse_server_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "266: int tls_parse_server_etm(SSL *s, PACKET *pkt, int *al);",
          "267: int tls_parse_server_ems(SSL *s, PACKET *pkt, int *al);",
          "268: int tls_parse_server_key_share(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "166: int tls_parse_ctos_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "167: int tls_parse_ctos_server_name(SSL *s, PACKET *pkt, int *al);",
          "169: int tls_parse_ctos_srp(SSL *s, PACKET *pkt, int *al);",
          "172: int tls_parse_ctos_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "173: int tls_parse_ctos_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "175: int tls_parse_ctos_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "176: int tls_parse_ctos_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "178: int tls_parse_ctos_status_request(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_ctos_npn(SSL *s, PACKET *pkt, int *al);",
          "183: int tls_parse_ctos_alpn(SSL *s, PACKET *pkt, int *al);",
          "185: int tls_parse_ctos_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "187: int tls_parse_ctos_etm(SSL *s, PACKET *pkt, int *al);",
          "188: int tls_parse_ctos_key_share(SSL *s, PACKET *pkt, int *al);",
          "189: int tls_parse_ctos_ems(SSL *s, PACKET *pkt, int *al);",
          "191: int tls_construct_stoc_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "192: int tls_construct_stoc_server_name(SSL *s, WPACKET *pkt, int *al);",
          "194: int tls_construct_stoc_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "196: int tls_construct_stoc_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "198: int tls_construct_stoc_status_request(SSL *s, WPACKET *pkt, int *al);",
          "201: int tls_construct_stoc_next_proto_neg(SSL *s, WPACKET *pkt, int *al);",
          "203: int tls_construct_stoc_alpn(SSL *s, WPACKET *pkt, int *al);",
          "205: int tls_construct_stoc_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "207: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, int *al);",
          "208: int tls_construct_stoc_ems(SSL *s, WPACKET *pkt, int *al);",
          "209: int tls_construct_stoc_key_share(SSL *s, WPACKET *pkt, int *al);",
          "215: int tls_construct_stoc_cryptopro_bug(SSL *s, WPACKET *pkt, int *al);",
          "218: int tls_construct_ctos_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "219: int tls_construct_ctos_server_name(SSL *s, WPACKET *pkt, int *al);",
          "221: int tls_construct_ctos_srp(SSL *s, WPACKET *pkt, int *al);",
          "224: int tls_construct_ctos_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "225: int tls_construct_ctos_supported_groups(SSL *s, WPACKET *pkt, int *al);",
          "227: int tls_construct_ctos_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "228: int tls_construct_ctos_sig_algs(SSL *s, WPACKET *pkt, int *al);",
          "230: int tls_construct_ctos_status_request(SSL *s, WPACKET *pkt, int *al);",
          "233: int tls_construct_ctos_npn(SSL *s, WPACKET *pkt, int *al);",
          "235: int tls_construct_ctos_alpn(SSL *s, WPACKET *pkt, int *al);",
          "237: int tls_construct_ctos_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "239: int tls_construct_ctos_etm(SSL *s, WPACKET *pkt, int *al);",
          "241: int tls_construct_ctos_sct(SSL *s, WPACKET *pkt, int *al);",
          "243: int tls_construct_ctos_ems(SSL *s, WPACKET *pkt, int *al);",
          "244: int tls_construct_ctos_supported_versions(SSL *s, WPACKET *pkt, int *al);",
          "245: int tls_construct_ctos_key_share(SSL *s, WPACKET *pkt, int *al);",
          "246: int tls_construct_ctos_padding(SSL *s, WPACKET *pkt, int *al);",
          "247: int tls_parse_stoc_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "248: int tls_parse_stoc_server_name(SSL *s, PACKET *pkt, int *al);",
          "250: int tls_parse_stoc_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "252: int tls_parse_stoc_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "254: int tls_parse_stoc_status_request(SSL *s, PACKET *pkt, int *al);",
          "257: int tls_parse_stoc_sct(SSL *s, PACKET *pkt, int *al);",
          "260: int tls_parse_stoc_npn(SSL *s, PACKET *pkt, int *al);",
          "262: int tls_parse_stoc_alpn(SSL *s, PACKET *pkt, int *al);",
          "264: int tls_parse_stoc_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "266: int tls_parse_stoc_etm(SSL *s, PACKET *pkt, int *al);",
          "267: int tls_parse_stoc_ems(SSL *s, PACKET *pkt, int *al);",
          "268: int tls_parse_stoc_key_share(SSL *s, PACKET *pkt, int *al);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1079: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "1080: {",
          "1085:     static const unsigned char kSafariExtensionsBlock[] = {",
          "",
          "[Removed Lines]",
          "1081:     unsigned int type;",
          "1082:     PACKET sni, tmppkt;",
          "1083:     size_t ext_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1106:     };",
          "1109:     static const size_t kSafariCommonExtensionsLength = 18;",
          "1111:     tmppkt = hello->extensions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:     unsigned int type;",
          "1106:     PACKET sni, tmppkt;",
          "1107:     size_t ext_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1710:         int ret;",
          "1714:         if (certpkey != NULL) {",
          "",
          "[Removed Lines]",
          "1709:     if ((s->tlsext_status_type != -1) && s->ctx && s->ctx->tlsext_status_cb) {",
          "1711:         CERT_PKEY *certpkey;",
          "1712:         certpkey = ssl_get_server_send_pkey(s);",
          "",
          "[Added Lines]",
          "1707:     if (s->tlsext_status_type != -1 && s->ctx != NULL",
          "1708:             && s->ctx->tlsext_status_cb != NULL) {",
          "1710:         CERT_PKEY *certpkey = ssl_get_server_send_pkey(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1912:                 && !WPACKET_put_bytes_u8(pkt, compm))",
          "1913:             || !tls_construct_extensions(s, pkt,",
          "1914:                                          SSL_IS_TLS13(s)",
          "1917:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1918:         goto err;",
          "1919:     }",
          "",
          "[Removed Lines]",
          "1915:                                          ? EXT_TLS1_3_SERVER_HELLO",
          "1916:                                          : EXT_TLS1_2_SERVER_HELLO, &al)) {",
          "",
          "[Added Lines]",
          "1914:                                             ? EXT_TLS1_3_SERVER_HELLO",
          "1915:                                             : EXT_TLS1_2_SERVER_HELLO, &al)) {",
          "",
          "---------------"
        ],
        "ssl/t1_trce.c||ssl/t1_trce.c": [
          "File: ssl/t1_trce.c -> ssl/t1_trce.c"
        ]
      }
    },
    {
      "candidate_hash": "fe874d27d33faa527b5e945137787bf6b0f5c253",
      "candidate_info": {
        "commit_hash": "fe874d27d33faa527b5e945137787bf6b0f5c253",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fe874d27d33faa527b5e945137787bf6b0f5c253",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_sess.c",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Move the extensions context codes into the public API\n\nThis move prepares for the later addition of the new custom extensions\nAPI. The context codes have an additional \"SSL_\" added to their name to\nensure we don't have name clashes with other applications.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3139)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:                                          STACK_OF(SSL_CIPHER) *peer_ciphers,",
          "251:                                          const SSL_CIPHER **cipher, void *arg);",
          "255: typedef int (*custom_ext_add_cb) (SSL *s, unsigned int ext_type,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: #define SSL_EXT_TLS_ONLY                        0x0001",
          "257: #define SSL_EXT_DTLS_ONLY                       0x0002",
          "259: #define SSL_EXT_TLS_IMPLEMENTATION_ONLY         0x0004",
          "261: #define SSL_EXT_SSL3_ALLOWED                    0x0008",
          "263: #define SSL_EXT_TLS1_2_AND_BELOW_ONLY           0x0010",
          "265: #define SSL_EXT_TLS1_3_ONLY                     0x0020",
          "266: #define SSL_EXT_CLIENT_HELLO                    0x0040",
          "268: #define SSL_EXT_TLS1_2_SERVER_HELLO             0x0080",
          "269: #define SSL_EXT_TLS1_3_SERVER_HELLO             0x0100",
          "270: #define SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x0200",
          "271: #define SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST      0x0400",
          "272: #define SSL_EXT_TLS1_3_CERTIFICATE              0x0800",
          "273: #define SSL_EXT_TLS1_3_NEW_SESSION_TICKET       0x1000",
          "274: #define SSL_EXT_TLS1_3_CERTIFICATE_REQUEST      0x2000",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:     TICKET_RETURN r;",
          "470:     if (SSL_IS_TLS13(s)) {",
          "474:                                         hello->pre_proc_exts, NULL, 0, al))",
          "475:             return -1;",
          "",
          "[Removed Lines]",
          "471:         if (!tls_parse_extension(s, TLSEXT_IDX_psk_kex_modes, EXT_CLIENT_HELLO,",
          "472:                                  hello->pre_proc_exts, NULL, 0, al)",
          "473:                 || !tls_parse_extension(s, TLSEXT_IDX_psk, EXT_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "471:         if (!tls_parse_extension(s, TLSEXT_IDX_psk_kex_modes,",
          "472:                                  SSL_EXT_CLIENT_HELLO, hello->pre_proc_exts,",
          "473:                                  NULL, 0, al)",
          "474:                 || !tls_parse_extension(s, TLSEXT_IDX_psk, SSL_EXT_CLIENT_HELLO,",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: static const EXTENSION_DEFINITION ext_defs[] = {",
          "115:     {",
          "116:         TLSEXT_TYPE_renegotiate,",
          "119:         NULL, tls_parse_ctos_renegotiate, tls_parse_stoc_renegotiate,",
          "120:         tls_construct_stoc_renegotiate, tls_construct_ctos_renegotiate,",
          "121:         final_renegotiate",
          "122:     },",
          "123:     {",
          "124:         TLSEXT_TYPE_server_name,",
          "127:         init_server_name,",
          "128:         tls_parse_ctos_server_name, tls_parse_stoc_server_name,",
          "129:         tls_construct_stoc_server_name, tls_construct_ctos_server_name,",
          "",
          "[Removed Lines]",
          "117:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "118:         | EXT_TLS1_2_AND_BELOW_ONLY,",
          "125:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "126:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "[Added Lines]",
          "117:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "118:         | SSL_EXT_SSL3_ALLOWED | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "125:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "126:         | SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132: #ifndef OPENSSL_NO_SRP",
          "133:     {",
          "134:         TLSEXT_TYPE_srp,",
          "136:         init_srp, tls_parse_ctos_srp, NULL, NULL, tls_construct_ctos_srp, NULL",
          "137:     },",
          "138: #else",
          "",
          "[Removed Lines]",
          "135:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "",
          "[Added Lines]",
          "135:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: #ifndef OPENSSL_NO_EC",
          "142:     {",
          "143:         TLSEXT_TYPE_ec_point_formats,",
          "145:         NULL, tls_parse_ctos_ec_pt_formats, tls_parse_stoc_ec_pt_formats,",
          "146:         tls_construct_stoc_ec_pt_formats, tls_construct_ctos_ec_pt_formats,",
          "147:         final_ec_pt_formats",
          "148:     },",
          "149:     {",
          "150:         TLSEXT_TYPE_supported_groups,",
          "152:         NULL, tls_parse_ctos_supported_groups, NULL,",
          "153:         NULL /* TODO(TLS1.3): Need to add this */,",
          "154:         tls_construct_ctos_supported_groups, NULL",
          "",
          "[Removed Lines]",
          "144:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "151:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "[Added Lines]",
          "144:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "145:         | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "152:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159: #endif",
          "160:     {",
          "161:         TLSEXT_TYPE_session_ticket,",
          "163:         init_session_ticket, tls_parse_ctos_session_ticket,",
          "164:         tls_parse_stoc_session_ticket, tls_construct_stoc_session_ticket,",
          "165:         tls_construct_ctos_session_ticket, NULL",
          "166:     },",
          "167:     {",
          "168:         TLSEXT_TYPE_signature_algorithms,",
          "170:         init_sig_algs, tls_parse_ctos_sig_algs,",
          "171:         tls_parse_ctos_sig_algs, tls_construct_ctos_sig_algs,",
          "172:         tls_construct_ctos_sig_algs, final_sig_algs",
          "",
          "[Removed Lines]",
          "162:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "169:         EXT_CLIENT_HELLO | EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "",
          "[Added Lines]",
          "163:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "164:         | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "171:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174: #ifndef OPENSSL_NO_OCSP",
          "175:     {",
          "176:         TLSEXT_TYPE_status_request,",
          "179:         init_status_request, tls_parse_ctos_status_request,",
          "180:         tls_parse_stoc_status_request, tls_construct_stoc_status_request,",
          "181:         tls_construct_ctos_status_request, NULL",
          "",
          "[Removed Lines]",
          "177:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "178:         | EXT_TLS1_3_CERTIFICATE,",
          "",
          "[Added Lines]",
          "179:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "180:         | SSL_EXT_TLS1_3_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "187:     {",
          "188:         TLSEXT_TYPE_next_proto_neg,",
          "190:         init_npn, tls_parse_ctos_npn, tls_parse_stoc_npn,",
          "191:         tls_construct_stoc_next_proto_neg, tls_construct_ctos_npn, NULL",
          "192:     },",
          "",
          "[Removed Lines]",
          "189:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "",
          "[Added Lines]",
          "191:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "192:         | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "201:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "204:         init_alpn, tls_parse_ctos_alpn, tls_parse_stoc_alpn,",
          "205:         tls_construct_stoc_alpn, tls_construct_ctos_alpn, final_alpn",
          "206:     },",
          "207: #ifndef OPENSSL_NO_SRTP",
          "208:     {",
          "209:         TLSEXT_TYPE_use_srtp,",
          "212:         init_srtp, tls_parse_ctos_use_srtp, tls_parse_stoc_use_srtp,",
          "213:         tls_construct_stoc_use_srtp, tls_construct_ctos_use_srtp, NULL",
          "214:     },",
          "",
          "[Removed Lines]",
          "202:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "203:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "211:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY,",
          "",
          "[Added Lines]",
          "205:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "206:         | SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "213:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "214:         | SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS | SSL_EXT_DTLS_ONLY,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "217: #endif",
          "218:     {",
          "219:         TLSEXT_TYPE_encrypt_then_mac,",
          "221:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
          "222:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
          "223:     },",
          "224: #ifndef OPENSSL_NO_CT",
          "225:     {",
          "226:         TLSEXT_TYPE_signed_certificate_timestamp,",
          "229:         NULL,",
          "",
          "[Removed Lines]",
          "220:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY | EXT_SSL3_ALLOWED,",
          "227:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "228:         | EXT_TLS1_3_CERTIFICATE,",
          "",
          "[Added Lines]",
          "223:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "224:         | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "231:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "232:         | SSL_EXT_TLS1_3_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "239: #endif",
          "240:     {",
          "241:         TLSEXT_TYPE_extended_master_secret,",
          "243:         init_ems, tls_parse_ctos_ems, tls_parse_stoc_ems,",
          "244:         tls_construct_stoc_ems, tls_construct_ctos_ems, final_ems",
          "245:     },",
          "246:     {",
          "247:         TLSEXT_TYPE_supported_versions,",
          "249:         NULL,",
          "251:         NULL, NULL, NULL, tls_construct_ctos_supported_versions, NULL",
          "252:     },",
          "253:     {",
          "254:         TLSEXT_TYPE_psk_kex_modes,",
          "256:         init_psk_kex_modes, tls_parse_ctos_psk_kex_modes, NULL, NULL,",
          "257:         tls_construct_ctos_psk_kex_modes, NULL",
          "258:     },",
          "",
          "[Removed Lines]",
          "242:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "248:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY,",
          "255:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY,",
          "",
          "[Added Lines]",
          "246:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO",
          "247:         | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "253:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS_IMPLEMENTATION_ONLY",
          "254:         | SSL_EXT_TLS1_3_ONLY,",
          "261:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS_IMPLEMENTATION_ONLY",
          "262:         | SSL_EXT_TLS1_3_ONLY,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "265:         TLSEXT_TYPE_key_share,",
          "269:         NULL, tls_parse_ctos_key_share, tls_parse_stoc_key_share,",
          "270:         tls_construct_stoc_key_share, tls_construct_ctos_key_share,",
          "271:         final_key_share",
          "",
          "[Removed Lines]",
          "266:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "267:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "268:         | EXT_TLS1_3_ONLY,",
          "",
          "[Added Lines]",
          "273:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_SERVER_HELLO",
          "274:         | SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST | SSL_EXT_TLS_IMPLEMENTATION_ONLY",
          "275:         | SSL_EXT_TLS1_3_ONLY,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "273: #endif",
          "274:     {",
          "275:         TLSEXT_TYPE_cookie,",
          "278:         NULL, NULL, tls_parse_stoc_cookie, NULL, tls_construct_ctos_cookie,",
          "279:         NULL",
          "280:     },",
          "",
          "[Removed Lines]",
          "276:         EXT_CLIENT_HELLO | EXT_TLS1_3_HELLO_RETRY_REQUEST",
          "277:         | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY,",
          "",
          "[Added Lines]",
          "283:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST",
          "284:         | SSL_EXT_TLS_IMPLEMENTATION_ONLY | SSL_EXT_TLS1_3_ONLY,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "286:         TLSEXT_TYPE_cryptopro_bug,",
          "288:         NULL, NULL, NULL, tls_construct_stoc_cryptopro_bug, NULL, NULL",
          "289:     },",
          "290:     {",
          "291:         TLSEXT_TYPE_early_data,",
          "294:         NULL, tls_parse_ctos_early_data, tls_parse_stoc_early_data,",
          "295:         tls_construct_stoc_early_data, tls_construct_ctos_early_data,",
          "296:         final_early_data",
          "297:     },",
          "298:     {",
          "299:         TLSEXT_TYPE_certificate_authorities,",
          "301:         init_certificate_authorities,",
          "302:         tls_parse_certificate_authorities, tls_parse_certificate_authorities,",
          "303:         tls_construct_certificate_authorities,",
          "",
          "[Removed Lines]",
          "287:         EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "292:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "293:         | EXT_TLS1_3_NEW_SESSION_TICKET,",
          "300:         EXT_CLIENT_HELLO | EXT_TLS1_3_CERTIFICATE_REQUEST | EXT_TLS1_3_ONLY,",
          "",
          "[Added Lines]",
          "294:         SSL_EXT_TLS1_2_SERVER_HELLO | SSL_EXT_TLS1_2_AND_BELOW_ONLY,",
          "299:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "300:         | SSL_EXT_TLS1_3_NEW_SESSION_TICKET,",
          "307:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_CERTIFICATE_REQUEST",
          "308:         | SSL_EXT_TLS1_3_ONLY,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "306:     {",
          "308:         TLSEXT_TYPE_padding,",
          "310:         NULL,",
          "312:         NULL, NULL, NULL, tls_construct_ctos_padding, NULL",
          "",
          "[Removed Lines]",
          "309:         EXT_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "317:         SSL_EXT_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "314:     {",
          "316:         TLSEXT_TYPE_psk,",
          "319:         NULL, tls_parse_ctos_psk, tls_parse_stoc_psk, tls_construct_stoc_psk,",
          "320:         tls_construct_ctos_psk, NULL",
          "321:     }",
          "",
          "[Removed Lines]",
          "317:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO | EXT_TLS_IMPLEMENTATION_ONLY",
          "318:         | EXT_TLS1_3_ONLY,",
          "",
          "[Added Lines]",
          "325:         SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_3_SERVER_HELLO",
          "326:         | SSL_EXT_TLS_IMPLEMENTATION_ONLY | SSL_EXT_TLS1_3_ONLY,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "342:                 return 0;",
          "344:             if (SSL_IS_DTLS(s)) {",
          "346:                     return 0;",
          "348:                     return 0;",
          "349:             }",
          "",
          "[Removed Lines]",
          "345:                 if ((thisext->context & EXT_TLS_ONLY) != 0)",
          "347:             } else if ((thisext->context & EXT_DTLS_ONLY) != 0) {",
          "",
          "[Added Lines]",
          "353:                 if ((thisext->context & SSL_EXT_TLS_ONLY) != 0)",
          "355:             } else if ((thisext->context & SSL_EXT_DTLS_ONLY) != 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "353:         }",
          "354:     }",
          "",
          "[Removed Lines]",
          "356:     if ((context & (EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO)) == 0) {",
          "",
          "[Added Lines]",
          "364:     if ((context & (SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO)) == 0) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "386:                                  unsigned int thisctx)",
          "387: {",
          "388:     if ((SSL_IS_DTLS(s)",
          "390:             || (s->version == SSL3_VERSION",
          "392:             || (SSL_IS_TLS13(s)",
          "395:         return 0;",
          "397:     return 1;",
          "",
          "[Removed Lines]",
          "389:                 && (extctx & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "391:                     && (extctx & EXT_SSL3_ALLOWED) == 0)",
          "393:                 && (extctx & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "394:             || (!SSL_IS_TLS13(s) && (extctx & EXT_TLS1_3_ONLY) != 0))",
          "",
          "[Added Lines]",
          "397:                 && (extctx & SSL_EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "399:                     && (extctx & SSL_EXT_SSL3_ALLOWED) == 0)",
          "401:                 && (extctx & SSL_EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "402:             || (!SSL_IS_TLS13(s) && (extctx & SSL_EXT_TLS1_3_ONLY) != 0))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "433:         exts = &s->cert->srv_ext;",
          "434:         custom_ext_init(&s->cert->srv_ext);",
          "436:         exts = &s->cert->cli_ext;",
          "437:     }",
          "",
          "[Removed Lines]",
          "432:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "435:     } else if ((context & EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "",
          "[Added Lines]",
          "440:     if ((context & SSL_EXT_CLIENT_HELLO) != 0) {",
          "443:     } else if ((context & SSL_EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "463:         if (!verify_extension(s, context, type, exts, raw_extensions, &thisex)",
          "464:                 || (thisex != NULL && thisex->present == 1)",
          "465:                 || (type == TLSEXT_TYPE_psk",
          "467:                     && PACKET_remaining(&extensions) != 0)) {",
          "468:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "",
          "[Removed Lines]",
          "466:                     && (context & EXT_CLIENT_HELLO) != 0",
          "",
          "[Added Lines]",
          "474:                     && (context & SSL_EXT_CLIENT_HELLO) != 0",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "563:     if ((!s->hit || !s->server)",
          "564:             && (context",
          "566:             && custom_ext_parse(s, s->server, currext->type,",
          "567:                                 PACKET_data(&currext->data),",
          "568:                                 PACKET_remaining(&currext->data),",
          "",
          "[Removed Lines]",
          "565:                 & (EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO)) != 0",
          "",
          "[Added Lines]",
          "573:                 & (SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO)) != 0",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "587:     const EXTENSION_DEFINITION *thisexd;",
          "591:         numexts += s->cert->srv_ext.meths_count;",
          "593:         numexts += s->cert->cli_ext.meths_count;",
          "594:     }",
          "",
          "[Removed Lines]",
          "590:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "592:     } else if ((context & EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "",
          "[Added Lines]",
          "598:     if ((context & SSL_EXT_CLIENT_HELLO) != 0) {",
          "600:     } else if ((context & SSL_EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "646:                                      WPACKET_FLAGS_ABANDON_ON_ZERO_LENGTH))) {",
          "647:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "648:         goto err;",
          "649:     }",
          "652:         reason = ssl_get_client_min_max_version(s, &min_version, &max_version);",
          "653:         if (reason != 0) {",
          "654:             SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, reason);",
          "",
          "[Removed Lines]",
          "643:             || ((context & (EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO)) != 0",
          "644:                && s->version == SSL3_VERSION",
          "645:                && !WPACKET_set_flags(pkt,",
          "651:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "",
          "[Added Lines]",
          "651:             || ((context &",
          "652:                  (SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO)) != 0",
          "653:                 && s->version == SSL3_VERSION",
          "654:                 && !WPACKET_set_flags(pkt,",
          "660:     if ((context & SSL_EXT_CLIENT_HELLO) != 0) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "657:     }",
          "661:         custom_ext_init(&s->cert->cli_ext);",
          "662:         addcustom = 1;",
          "",
          "[Removed Lines]",
          "660:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "663:     } else if ((context & EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "",
          "[Added Lines]",
          "669:     if ((context & SSL_EXT_CLIENT_HELLO) != 0) {",
          "672:     } else if ((context & SSL_EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "692:         if ((SSL_IS_DTLS(s)",
          "694:                        != 0)",
          "695:                 || (s->version == SSL3_VERSION",
          "697:                 || (SSL_IS_TLS13(s)",
          "699:                        != 0)",
          "700:                 || (!SSL_IS_TLS13(s)",
          "705:                     && (SSL_IS_DTLS(s) || max_version < TLS1_3_VERSION))",
          "706:                 || construct == NULL)",
          "707:             continue;",
          "",
          "[Removed Lines]",
          "693:                     && (thisexd->context & EXT_TLS_IMPLEMENTATION_ONLY)",
          "696:                         && (thisexd->context & EXT_SSL3_ALLOWED) == 0)",
          "698:                     && (thisexd->context & EXT_TLS1_2_AND_BELOW_ONLY)",
          "701:                     && (thisexd->context & EXT_TLS1_3_ONLY) != 0",
          "702:                     && (context & EXT_CLIENT_HELLO) == 0)",
          "703:                 || ((thisexd->context & EXT_TLS1_3_ONLY) != 0",
          "704:                     && (context & EXT_CLIENT_HELLO) != 0",
          "",
          "[Added Lines]",
          "702:                     && (thisexd->context & SSL_EXT_TLS_IMPLEMENTATION_ONLY)",
          "705:                         && (thisexd->context & SSL_EXT_SSL3_ALLOWED) == 0)",
          "707:                     && (thisexd->context & SSL_EXT_TLS1_2_AND_BELOW_ONLY)",
          "710:                     && (thisexd->context & SSL_EXT_TLS1_3_ONLY) != 0",
          "711:                     && (context & SSL_EXT_CLIENT_HELLO) == 0)",
          "712:                 || ((thisexd->context & SSL_EXT_TLS1_3_ONLY) != 0",
          "713:                     && (context & SSL_EXT_CLIENT_HELLO) != 0",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307:         return 0;",
          "1308:     }",
          "1311:         unsigned const char *pcurves = NULL;",
          "1312:         size_t i, num_curves;",
          "",
          "[Removed Lines]",
          "1310:     if ((context & EXT_TLS1_3_HELLO_RETRY_REQUEST) != 0) {",
          "",
          "[Added Lines]",
          "1310:     if ((context & SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST) != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1411: int tls_parse_stoc_early_data(SSL *s, PACKET *pkt, unsigned int context,",
          "1412:                               X509 *x, size_t chainidx, int *al)",
          "1413: {",
          "1415:         unsigned long max_early_data;",
          "1417:         if (!PACKET_get_net_4(pkt, &max_early_data)",
          "",
          "[Removed Lines]",
          "1414:     if (context == EXT_TLS1_3_NEW_SESSION_TICKET) {",
          "",
          "[Added Lines]",
          "1414:     if (context == SSL_EXT_TLS1_3_NEW_SESSION_TICKET) {",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133: int tls_construct_stoc_early_data(SSL *s, WPACKET *pkt, unsigned int context,",
          "1134:                                   X509 *x, size_t chainidx, int *al)",
          "1135: {",
          "1137:         if (s->max_early_data == 0)",
          "1138:             return 1;",
          "",
          "[Removed Lines]",
          "1136:     if (context == EXT_TLS1_3_NEW_SESSION_TICKET) {",
          "",
          "[Added Lines]",
          "1136:     if (context == SSL_EXT_TLS1_3_NEW_SESSION_TICKET) {",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1200:     }",
          "1204:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1205:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "1206:         return 0;",
          "",
          "[Removed Lines]",
          "1203:     if (!tls_construct_extensions(s, pkt, EXT_CLIENT_HELLO, NULL, 0, &al)) {",
          "",
          "[Added Lines]",
          "1203:     if (!tls_construct_extensions(s, pkt, SSL_EXT_CLIENT_HELLO, NULL, 0, &al)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1390:         goto f_err;",
          "1391:     }",
          "1395:     if (!tls_collect_extensions(s, &extpkt, context, &extensions, &al, NULL))",
          "1396:         goto f_err;",
          "",
          "[Removed Lines]",
          "1393:     context = SSL_IS_TLS13(s) ? EXT_TLS1_3_SERVER_HELLO",
          "1394:                               : EXT_TLS1_2_SERVER_HELLO;",
          "",
          "[Added Lines]",
          "1393:     context = SSL_IS_TLS13(s) ? SSL_EXT_TLS1_3_SERVER_HELLO",
          "1394:                               : SSL_EXT_TLS1_2_SERVER_HELLO;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1400:     if (SSL_IS_TLS13(s)) {",
          "1402:         if (!tls_parse_extension(s, TLSEXT_IDX_psk,",
          "1404:                                  extensions, NULL, 0, &al))",
          "1405:             goto f_err;",
          "1406:     } else {",
          "",
          "[Removed Lines]",
          "1403:                                  EXT_TLS1_3_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1403:                                  SSL_EXT_TLS1_3_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1634:         goto f_err;",
          "1635:     }",
          "1638:                                 &extensions, &al, NULL)",
          "1640:                                          extensions, NULL, 0, &al))",
          "1641:         goto f_err;",
          "",
          "[Removed Lines]",
          "1637:     if (!tls_collect_extensions(s, &extpkt, EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "1639:             || !tls_parse_all_extensions(s, EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "",
          "[Added Lines]",
          "1637:     if (!tls_collect_extensions(s, &extpkt, SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "1639:             || !tls_parse_all_extensions(s, SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1728:                 SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, SSL_R_BAD_LENGTH);",
          "1729:                 goto f_err;",
          "1730:             }",
          "1734:                                                  rawexts, x, chainidx, &al)) {",
          "1735:                 OPENSSL_free(rawexts);",
          "1736:                 goto f_err;",
          "",
          "[Removed Lines]",
          "1731:             if (!tls_collect_extensions(s, &extensions, EXT_TLS1_3_CERTIFICATE,",
          "1732:                                         &rawexts, &al, NULL)",
          "1733:                     || !tls_parse_all_extensions(s, EXT_TLS1_3_CERTIFICATE,",
          "",
          "[Added Lines]",
          "1731:             if (!tls_collect_extensions(s, &extensions,",
          "1732:                                         SSL_EXT_TLS1_3_CERTIFICATE, &rawexts,",
          "1733:                                         &al, NULL)",
          "1734:                     || !tls_parse_all_extensions(s, SSL_EXT_TLS1_3_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2357:                 goto err;",
          "2358:         }",
          "2359:         if (!tls_collect_extensions(s, &extensions,",
          "2361:                                     &rawexts, &al, NULL)",
          "2363:                                          rawexts, NULL, 0, &al)) {",
          "2364:             OPENSSL_free(rawexts);",
          "2365:             goto err;",
          "",
          "[Removed Lines]",
          "2360:                                     EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "2362:             || !tls_parse_all_extensions(s, EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "",
          "[Added Lines]",
          "2361:                                     SSL_EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "2363:             || !tls_parse_all_extensions(s, SSL_EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2512:         if (!PACKET_as_length_prefixed_2(pkt, &extpkt)",
          "2513:                 || !tls_collect_extensions(s, &extpkt,",
          "2515:                                            &exts, &al, NULL)",
          "2517:                                              exts, NULL, 0, &al)) {",
          "2518:             SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, SSL_R_BAD_EXTENSION);",
          "2519:             goto f_err;",
          "",
          "[Removed Lines]",
          "2514:                                            EXT_TLS1_3_NEW_SESSION_TICKET,",
          "2516:                 || !tls_parse_all_extensions(s, EXT_TLS1_3_NEW_SESSION_TICKET,",
          "",
          "[Added Lines]",
          "2515:                                            SSL_EXT_TLS1_3_NEW_SESSION_TICKET,",
          "2517:                 || !tls_parse_all_extensions(s,",
          "2518:                                              SSL_EXT_TLS1_3_NEW_SESSION_TICKET,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3479:         goto err;",
          "3480:     }",
          "3485:                                          rawexts, NULL, 0, &al))",
          "3486:         goto err;",
          "",
          "[Removed Lines]",
          "3482:     if (!tls_collect_extensions(s, &extensions, EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "3483:                                 &rawexts, &al, NULL)",
          "3484:             || !tls_parse_all_extensions(s, EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "[Added Lines]",
          "3484:     if (!tls_collect_extensions(s, &extensions,",
          "3485:                                 SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS, &rawexts,",
          "3486:                                 &al, NULL)",
          "3487:             || !tls_parse_all_extensions(s, SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:     }",
          "803:     if (SSL_IS_TLS13(s)",
          "805:                                          chain, al))",
          "806:         return 0;",
          "",
          "[Removed Lines]",
          "804:             && !tls_construct_extensions(s, pkt, EXT_TLS1_3_CERTIFICATE, x,",
          "",
          "[Added Lines]",
          "804:             && !tls_construct_extensions(s, pkt, SSL_EXT_TLS1_3_CERTIFICATE, x,",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define MAX_KEY_UPDATE_MESSAGES     32",
          "59: #define SSL3_MT_DUMMY   -1",
          "",
          "[Removed Lines]",
          "37: #define EXT_TLS_ONLY                        0x0001",
          "39: #define EXT_DTLS_ONLY                       0x0002",
          "41: #define EXT_TLS_IMPLEMENTATION_ONLY         0x0004",
          "43: #define EXT_SSL3_ALLOWED                    0x0008",
          "45: #define EXT_TLS1_2_AND_BELOW_ONLY           0x0010",
          "47: #define EXT_TLS1_3_ONLY                     0x0020",
          "48: #define EXT_CLIENT_HELLO                    0x0040",
          "50: #define EXT_TLS1_2_SERVER_HELLO             0x0080",
          "51: #define EXT_TLS1_3_SERVER_HELLO             0x0100",
          "52: #define EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x0200",
          "53: #define EXT_TLS1_3_HELLO_RETRY_REQUEST      0x0400",
          "54: #define EXT_TLS1_3_CERTIFICATE              0x0800",
          "55: #define EXT_TLS1_3_NEW_SESSION_TICKET       0x1000",
          "56: #define EXT_TLS1_3_CERTIFICATE_REQUEST      0x2000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:     extensions = clienthello->extensions;",
          "1446:                                 &clienthello->pre_proc_exts, &al,",
          "1447:                                 &clienthello->pre_proc_exts_len)) {",
          "",
          "[Removed Lines]",
          "1445:     if (!tls_collect_extensions(s, &extensions, EXT_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "1445:     if (!tls_collect_extensions(s, &extensions, SSL_EXT_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1582:     if (!tls_parse_extension(s, TLSEXT_IDX_extended_master_secret,",
          "1584:                              clienthello->pre_proc_exts, NULL, 0, al)) {",
          "1585:         SSLerr(SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1586:         goto err;",
          "",
          "[Removed Lines]",
          "1583:                              EXT_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "1583:                              SSL_EXT_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1712:                                   clienthello->pre_proc_exts, NULL, 0, al)) {",
          "1713:         SSLerr(SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO, SSL_R_PARSE_TLSEXT);",
          "1714:         goto err;",
          "",
          "[Removed Lines]",
          "1711:     if (!tls_parse_all_extensions(s, EXT_CLIENT_HELLO,",
          "",
          "[Added Lines]",
          "1711:     if (!tls_parse_all_extensions(s, SSL_EXT_CLIENT_HELLO,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2127:                 && !WPACKET_put_bytes_u8(pkt, compm))",
          "2128:             || !tls_construct_extensions(s, pkt,",
          "2129:                                          SSL_IS_TLS13(s)",
          "2132:                                          NULL, 0, &al)) {",
          "2133:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "2134:         goto err;",
          "",
          "[Removed Lines]",
          "2130:                                             ? EXT_TLS1_3_SERVER_HELLO",
          "2131:                                             : EXT_TLS1_2_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "2130:                                             ? SSL_EXT_TLS1_3_SERVER_HELLO",
          "2131:                                             : SSL_EXT_TLS1_2_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2510:             goto err;",
          "2511:         }",
          "2515:             SSLerr(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST,",
          "2516:                    ERR_R_INTERNAL_ERROR);",
          "2517:             goto err;",
          "",
          "[Removed Lines]",
          "2513:         if (!tls_construct_extensions(s, pkt, EXT_TLS1_3_CERTIFICATE_REQUEST,",
          "2514:                                       NULL, 0, &al)) {",
          "",
          "[Added Lines]",
          "2513:         if (!tls_construct_extensions(s, pkt,",
          "2514:                                       SSL_EXT_TLS1_3_CERTIFICATE_REQUEST, NULL,",
          "2515:                                       0, &al)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3251:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, SSL_R_BAD_LENGTH);",
          "3252:                 goto f_err;",
          "3253:             }",
          "3257:                                                  rawexts, x, chainidx, &al)) {",
          "3258:                 OPENSSL_free(rawexts);",
          "3259:                 goto f_err;",
          "",
          "[Removed Lines]",
          "3254:             if (!tls_collect_extensions(s, &extensions, EXT_TLS1_3_CERTIFICATE,",
          "3255:                                         &rawexts, &al, NULL)",
          "3256:                     || !tls_parse_all_extensions(s, EXT_TLS1_3_CERTIFICATE,",
          "",
          "[Added Lines]",
          "3255:             if (!tls_collect_extensions(s, &extensions,",
          "3256:                                         SSL_EXT_TLS1_3_CERTIFICATE, &rawexts,",
          "3257:                                         &al, NULL)",
          "3258:                     || !tls_parse_all_extensions(s, SSL_EXT_TLS1_3_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3550:             || !WPACKET_close(pkt)",
          "3551:             || (SSL_IS_TLS13(s)",
          "3552:                 && !tls_construct_extensions(s, pkt,",
          "3554:                                              NULL, 0, &al))) {",
          "3555:         SSLerr(SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "3556:         goto err;",
          "",
          "[Removed Lines]",
          "3553:                                              EXT_TLS1_3_NEW_SESSION_TICKET,",
          "",
          "[Added Lines]",
          "3555:                                              SSL_EXT_TLS1_3_NEW_SESSION_TICKET,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3637: {",
          "3638:     int al;",
          "3641:                                   NULL, 0, &al)) {",
          "3642:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3643:         SSLerr(SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "3640:     if (!tls_construct_extensions(s, pkt, EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "[Added Lines]",
          "3642:     if (!tls_construct_extensions(s, pkt, SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3660:     if (!WPACKET_put_bytes_u16(pkt, TLS1_3_VERSION_DRAFT)",
          "3661:             || !s->method->put_cipher_by_char(s->s3->tmp.new_cipher, pkt, &len)",
          "3663:                                          NULL, 0, &al)) {",
          "3664:         SSLerr(SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST, ERR_R_INTERNAL_ERROR);",
          "3665:         goto err;",
          "",
          "[Removed Lines]",
          "3662:             || !tls_construct_extensions(s, pkt, EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "",
          "[Added Lines]",
          "3664:             || !tls_construct_extensions(s, pkt,",
          "3665:                                          SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab83e31414286ccdc35fbacf976f64a910a6c718",
      "candidate_info": {
        "commit_hash": "ab83e31414286ccdc35fbacf976f64a910a6c718",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ab83e31414286ccdc35fbacf976f64a910a6c718",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h",
          "ssl/t1_lib.c"
        ],
        "message": "Move client construction of ClientHello extensions into new framework\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2265: # define SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE             407",
          "2266: # define SSL_F_TLS_CONSTRUCT_CKE_RSA                      409",
          "2267: # define SSL_F_TLS_CONSTRUCT_CKE_SRP                      410",
          "2268: # define SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE           355",
          "2269: # define SSL_F_TLS_CONSTRUCT_CLIENT_HELLO                 356",
          "2270: # define SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE          357",
          "2271: # define SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY                358",
          "2272: # define SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS         443",
          "2273: # define SSL_F_TLS_CONSTRUCT_EXTENSIONS                   447",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2268: # define SSL_F_TLS_CONSTRUCT_CLIENT_ALPN                  466",
          "2270: # define SSL_F_TLS_CONSTRUCT_CLIENT_EC_PT_FORMATS         467",
          "2271: # define SSL_F_TLS_CONSTRUCT_CLIENT_EMS                   468",
          "2272: # define SSL_F_TLS_CONSTRUCT_CLIENT_ETM                   469",
          "2275: # define SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE             470",
          "2276: # define SSL_F_TLS_CONSTRUCT_CLIENT_NPN                   471",
          "2277: # define SSL_F_TLS_CONSTRUCT_CLIENT_PADDING               472",
          "2278: # define SSL_F_TLS_CONSTRUCT_CLIENT_RENEGOTIATE           473",
          "2279: # define SSL_F_TLS_CONSTRUCT_CLIENT_SCT                   474",
          "2280: # define SSL_F_TLS_CONSTRUCT_CLIENT_SERVER_NAME           475",
          "2281: # define SSL_F_TLS_CONSTRUCT_CLIENT_SESSION_TICKET        476",
          "2282: # define SSL_F_TLS_CONSTRUCT_CLIENT_SIG_ALGS              477",
          "2283: # define SSL_F_TLS_CONSTRUCT_CLIENT_SRP                   478",
          "2284: # define SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST        479",
          "2285: # define SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_GROUPS      480",
          "2286: # define SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS    481",
          "2287: # define SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP              482",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:      \"tls_construct_cke_psk_preamble\"},",
          "266:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CKE_RSA), \"tls_construct_cke_rsa\"},",
          "267:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CKE_SRP), \"tls_construct_cke_srp\"},",
          "268:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE),",
          "269:      \"tls_construct_client_certificate\"},",
          "270:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO),",
          "271:      \"tls_construct_client_hello\"},",
          "272:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE),",
          "273:      \"tls_construct_client_key_exchange\"},",
          "274:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY),",
          "275:      \"tls_construct_client_verify\"},",
          "276:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_ALPN), \"tls_construct_client_alpn\"},",
          "271:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_EC_PT_FORMATS),",
          "272:      \"tls_construct_client_ec_pt_formats\"},",
          "273:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_EMS), \"tls_construct_client_ems\"},",
          "274:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_ETM), \"tls_construct_client_etm\"},",
          "279:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE),",
          "280:      \"tls_construct_client_key_share\"},",
          "281:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_NPN), \"tls_construct_client_npn\"},",
          "282:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_PADDING),",
          "283:      \"tls_construct_client_padding\"},",
          "284:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_RENEGOTIATE),",
          "285:      \"tls_construct_client_renegotiate\"},",
          "286:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SCT), \"tls_construct_client_sct\"},",
          "287:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SERVER_NAME),",
          "288:      \"tls_construct_client_server_name\"},",
          "289:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SESSION_TICKET),",
          "290:      \"tls_construct_client_session_ticket\"},",
          "291:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SIG_ALGS),",
          "292:      \"tls_construct_client_sig_algs\"},",
          "293:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SRP), \"tls_construct_client_srp\"},",
          "294:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST),",
          "295:      \"tls_construct_client_status_request\"},",
          "296:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_GROUPS),",
          "297:      \"tls_construct_client_supported_groups\"},",
          "298:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS),",
          "299:      \"tls_construct_client_supported_versions\"},",
          "300:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP),",
          "301:      \"tls_construct_client_use_srtp\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2077: __owur  int tls1_get_curvelist(SSL *s, int sess, const unsigned char **pcurves,",
          "2078:                                size_t *num_curves);",
          "2081: void ssl_set_default_md(SSL *s);",
          "2082: __owur int tls1_set_server_sigalgs(SSL *s);",
          "2083: __owur int ssl_check_clienthello_tlsext_late(SSL *s, int *al);",
          "2084: __owur int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt);",
          "2086: __owur RAW_EXTENSION *tls_get_extension_by_type(RAW_EXTENSION *exts,",
          "2087:                                                 size_t numexts,",
          "2088:                                                 unsigned int type);",
          "",
          "[Removed Lines]",
          "2080: __owur int ssl_add_clienthello_tlsext(SSL *s, WPACKET *pkt, int *al);",
          "2085: __owur int ssl_prepare_clienthello_tlsext(SSL *s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         tls_parse_client_renegotiate,",
          "37:         tls_parse_server_renegotiate,",
          "38:         tls_construct_server_renegotiate,",
          "40:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "41:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "42:     },",
          "",
          "[Removed Lines]",
          "39:         NULL,",
          "",
          "[Added Lines]",
          "39:         tls_construct_client_renegotiate,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         tls_parse_client_server_name,",
          "46:         tls_parse_server_server_name,",
          "47:         tls_construct_server_server_name,",
          "49:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "50:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "51:     },",
          "",
          "[Removed Lines]",
          "48:         NULL,",
          "",
          "[Added Lines]",
          "48:         tls_construct_client_server_name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         tls_parse_client_srp,",
          "56:         NULL,",
          "57:         NULL,",
          "59:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "60:     },",
          "61: #endif",
          "",
          "[Removed Lines]",
          "58:         NULL,",
          "",
          "[Added Lines]",
          "58:         tls_construct_client_srp,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:         tls_parse_client_ec_pt_formats,",
          "66:         tls_parse_server_ec_pt_formats,",
          "67:         tls_construct_server_ec_pt_formats,",
          "69:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "70:     },",
          "71:     {",
          "",
          "[Removed Lines]",
          "68:         NULL,",
          "",
          "[Added Lines]",
          "68:         tls_construct_client_ec_pt_formats,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "73:         tls_parse_client_supported_groups,",
          "74:         NULL,",
          "75:         NULL /* TODO(TLS1.3): Need to add this */,",
          "77:         EXT_CLIENT_HELLO",
          "78:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "79:     },",
          "",
          "[Removed Lines]",
          "76:         NULL,",
          "",
          "[Added Lines]",
          "76:         tls_construct_client_supported_groups,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "83:         tls_parse_client_session_ticket,",
          "84:         tls_parse_server_session_ticket,",
          "85:         tls_construct_server_session_ticket,",
          "87:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "88:     },",
          "89:     {",
          "",
          "[Removed Lines]",
          "86:         NULL,",
          "",
          "[Added Lines]",
          "86:         tls_construct_client_session_ticket,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "91:         tls_parse_client_sig_algs,",
          "92:         NULL,",
          "93:         NULL,",
          "95:         EXT_CLIENT_HELLO",
          "96:     },",
          "97:     {",
          "98:         TLSEXT_TYPE_status_request,",
          "99:         tls_parse_client_status_request,",
          "100:         tls_parse_server_status_request,",
          "101:         tls_construct_server_status_request,",
          "103:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "104:         | EXT_TLS1_3_CERTIFICATE",
          "105:     },",
          "106: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "107:     {",
          "108:         TLSEXT_TYPE_next_proto_neg,",
          "109:         tls_parse_client_npn,",
          "110:         tls_parse_server_npn,",
          "111:         tls_construct_server_next_proto_neg,",
          "113:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "114:     },",
          "115: #endif",
          "",
          "[Removed Lines]",
          "94:         NULL,",
          "102:         NULL,",
          "112:         NULL,",
          "",
          "[Added Lines]",
          "94:         tls_construct_client_sig_algs,",
          "97: #ifndef OPENSSL_NO_OCSP",
          "103:         tls_construct_client_status_request,",
          "107: #endif",
          "114:         tls_construct_client_npn,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "118:         tls_parse_client_alpn,",
          "119:         tls_parse_server_alpn,",
          "120:         tls_construct_server_alpn,",
          "122:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "123:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "124:     },",
          "",
          "[Removed Lines]",
          "121:         NULL,",
          "",
          "[Added Lines]",
          "123:         tls_construct_client_alpn,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "128:         tls_parse_client_use_srtp,",
          "129:         tls_parse_server_use_srtp,",
          "130:         tls_construct_server_use_srtp,",
          "132:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "133:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "134:     },",
          "",
          "[Removed Lines]",
          "131:         NULL,",
          "",
          "[Added Lines]",
          "133:         tls_construct_client_use_srtp,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "138:         tls_parse_client_etm,",
          "139:         tls_parse_server_etm,",
          "140:         tls_construct_server_etm,",
          "142:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "143:     },",
          "144: #ifndef OPENSSL_NO_CT",
          "",
          "[Removed Lines]",
          "141:         NULL,",
          "",
          "[Added Lines]",
          "143:         tls_construct_client_etm,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "152:         NULL,",
          "153:         tls_parse_server_sct,",
          "154:         NULL,",
          "156:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "157:         | EXT_TLS1_3_CERTIFICATE",
          "158:     },",
          "",
          "[Removed Lines]",
          "155:         NULL,",
          "",
          "[Added Lines]",
          "157:         tls_construct_client_sct,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "162:         tls_parse_client_ems,",
          "163:         tls_parse_server_ems,",
          "164:         tls_construct_server_ems,",
          "166:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "167:     },",
          "168:     {",
          "",
          "[Removed Lines]",
          "165:         NULL,",
          "",
          "[Added Lines]",
          "167:         tls_construct_client_ems,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "171:         NULL,",
          "172:         NULL,",
          "173:         NULL,",
          "185:     },",
          "186:     {",
          "187:         TLSEXT_TYPE_key_share,",
          "188:         tls_parse_client_key_share,",
          "189:         tls_parse_server_key_share,",
          "190:         tls_construct_server_key_share,",
          "192:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "193:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "194:         | EXT_TLS1_3_ONLY",
          "",
          "[Removed Lines]",
          "174:         NULL,",
          "175:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY",
          "176:     },",
          "177:     {",
          "178:         TLSEXT_TYPE_padding,",
          "180:         NULL,",
          "181:         NULL,",
          "182:         NULL,",
          "183:         NULL,",
          "184:         EXT_CLIENT_HELLO",
          "191:         NULL,",
          "",
          "[Added Lines]",
          "176:         tls_construct_client_supported_versions,",
          "177:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY",
          "184:         tls_construct_client_key_share,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "204:         tls_construct_server_cryptopro_bug,",
          "205:         NULL,",
          "206:         EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "207:     }",
          "208: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     },",
          "201:     {",
          "203:         TLSEXT_TYPE_padding,",
          "205:         NULL,",
          "206:         NULL,",
          "207:         NULL,",
          "208:         tls_construct_client_padding,",
          "209:         EXT_CLIENT_HELLO",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "457: {",
          "458:     size_t loop;",
          "459:     int addcustom = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     int min_version, max_version = 0, reason;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "477:         return 0;",
          "478:     }",
          "480:     for (loop = 0; loop < OSSL_NELEM(ext_defs); loop++) {",
          "481:         int (*construct)(SSL *s, WPACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "485:         reason = ssl_get_client_min_max_version(s, &min_version, &max_version);",
          "486:         if (reason != 0) {",
          "487:             SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, reason);",
          "488:             return 0;",
          "489:         }",
          "490:     }",
          "493:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "494:         custom_ext_init(&s->cert->cli_ext);",
          "495:         addcustom = 1;",
          "496:     } else if ((context & EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "505:         addcustom = 1;",
          "506:     }",
          "508:     if (addcustom && !custom_ext_add(s, s->server, pkt, al)) {",
          "509:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "510:         return 0;",
          "511:     }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "499:                 || (!SSL_IS_TLS13(s)",
          "500:                     && (ext_defs[loop].context & EXT_TLS1_3_ONLY) != 0",
          "501:                     && (context & EXT_CLIENT_HELLO) == 0)",
          "502:                 || construct == NULL)",
          "503:             continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:                 || ((ext_defs[loop].context & EXT_TLS1_3_ONLY) != 0",
          "536:                     && (context & EXT_CLIENT_HELLO) != 0",
          "537:                     && (SSL_IS_DTLS(s) || max_version < TLS1_3_VERSION))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "506:             return 0;",
          "507:     }",
          "530:     if (!WPACKET_close(pkt)) {",
          "531:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "532:         return 0;",
          "",
          "[Removed Lines]",
          "510:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "511:         custom_ext_init(&s->cert->cli_ext);",
          "512:         addcustom = 1;",
          "513:     } else if ((context & EXT_TLS1_2_SERVER_HELLO) != 0) {",
          "522:         addcustom = 1;",
          "523:     }",
          "525:     if (addcustom && !custom_ext_add(s, s->server, pkt, al)) {",
          "526:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "527:         return 0;",
          "528:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <assert.h>",
          "11: #include \"../ssl_locl.h\"",
          "12: #include \"statem_locl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <openssl/ocsp.h>",
          "15: int tls_construct_client_renegotiate(SSL *s, WPACKET *pkt, int *al)",
          "16: {",
          "18:     if (!s->renegotiate)",
          "19:         return 1;",
          "21:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)",
          "22:             || !WPACKET_start_sub_packet_u16(pkt)",
          "23:             || !WPACKET_sub_memcpy_u8(pkt, s->s3->previous_client_finished,",
          "24:                                s->s3->previous_client_finished_len)",
          "25:             || !WPACKET_close(pkt)) {",
          "26:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_RENEGOTIATE, ERR_R_INTERNAL_ERROR);",
          "27:         return 0;",
          "28:     }",
          "30:     return 1;",
          "31: }",
          "33: int tls_construct_client_server_name(SSL *s, WPACKET *pkt, int *al)",
          "34: {",
          "35:     if (s->tlsext_hostname == NULL)",
          "36:         return 1;",
          "39:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_server_name)",
          "41:             || !WPACKET_start_sub_packet_u16(pkt)",
          "43:             || !WPACKET_start_sub_packet_u16(pkt)",
          "44:             || !WPACKET_put_bytes_u8(pkt, TLSEXT_NAMETYPE_host_name)",
          "45:             || !WPACKET_sub_memcpy_u16(pkt, s->tlsext_hostname,",
          "46:                                        strlen(s->tlsext_hostname))",
          "47:             || !WPACKET_close(pkt)",
          "48:             || !WPACKET_close(pkt)) {",
          "49:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SERVER_NAME, ERR_R_INTERNAL_ERROR);",
          "50:         return 0;",
          "51:     }",
          "53:     return 1;",
          "54: }",
          "56: #ifndef OPENSSL_NO_SRP",
          "57: int tls_construct_client_srp(SSL *s, WPACKET *pkt, int *al)",
          "58: {",
          "60:     if (s->srp_ctx.login == NULL)",
          "61:         return 1;",
          "63:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_srp)",
          "65:             || !WPACKET_start_sub_packet_u16(pkt)",
          "66:             || !WPACKET_start_sub_packet_u8(pkt)",
          "68:             || !WPACKET_set_flags(pkt, WPACKET_FLAGS_NON_ZERO_LENGTH)",
          "69:             || !WPACKET_memcpy(pkt, s->srp_ctx.login,",
          "70:                                strlen(s->srp_ctx.login))",
          "71:             || !WPACKET_close(pkt)",
          "72:             || !WPACKET_close(pkt)) {",
          "73:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SRP, ERR_R_INTERNAL_ERROR);",
          "74:         return 0;",
          "75:     }",
          "77:     return 1;",
          "78: }",
          "79: #endif",
          "81: #ifndef OPENSSL_NO_EC",
          "82: static int use_ecc(SSL *s)",
          "83: {",
          "84:     int using_ecc = 0;",
          "85:     int i;",
          "86:     unsigned long alg_k, alg_a;",
          "87:     STACK_OF(SSL_CIPHER) *cipher_stack = NULL;",
          "90:     if (s->version == SSL3_VERSION)",
          "91:         return 0;",
          "94:     cipher_stack = SSL_get_ciphers(s);",
          "96:     for (i = 0; i < sk_SSL_CIPHER_num(cipher_stack); i++) {",
          "97:         const SSL_CIPHER *c = sk_SSL_CIPHER_value(cipher_stack, i);",
          "99:         alg_k = c->algorithm_mkey;",
          "100:         alg_a = c->algorithm_auth;",
          "101:         if ((alg_k & (SSL_kECDHE | SSL_kECDHEPSK))",
          "102:             || (alg_a & SSL_aECDSA)",
          "103:             || c->min_tls >= TLS1_3_VERSION) {",
          "104:             using_ecc = 1;",
          "105:             break;",
          "106:         }",
          "107:     }",
          "109:     return using_ecc;",
          "110: }",
          "112: int tls_construct_client_ec_pt_formats(SSL *s, WPACKET *pkt, int *al)",
          "113: {",
          "114:     const unsigned char *pformats;",
          "115:     size_t num_formats;",
          "117:     if (!use_ecc(s))",
          "118:         return 1;",
          "122:     tls1_get_formatlist(s, &pformats, &num_formats);",
          "124:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_ec_point_formats)",
          "126:             || !WPACKET_start_sub_packet_u16(pkt)",
          "127:             || !WPACKET_sub_memcpy_u8(pkt, pformats, num_formats)",
          "128:             || !WPACKET_close(pkt)) {",
          "129:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_EC_PT_FORMATS, ERR_R_INTERNAL_ERROR);",
          "130:         return 0;",
          "131:     }",
          "133:     return 1;",
          "134: }",
          "137: int tls_construct_client_supported_groups(SSL *s, WPACKET *pkt, int *al)",
          "138: {",
          "139:     const unsigned char *pcurves = NULL, *pcurvestmp;",
          "140:     size_t num_curves = 0, i;",
          "142:     if (!use_ecc(s))",
          "143:         return 1;",
          "149:     pcurves = s->tlsext_supportedgroupslist;",
          "150:     if (!tls1_get_curvelist(s, 0, &pcurves, &num_curves)) {",
          "151:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_GROUPS,",
          "152:                ERR_R_INTERNAL_ERROR);",
          "153:         return 0;",
          "154:     }",
          "155:     pcurvestmp = pcurves;",
          "157:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_supported_groups)",
          "159:             || !WPACKET_start_sub_packet_u16(pkt)",
          "160:             || !WPACKET_start_sub_packet_u16(pkt)) {",
          "161:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_GROUPS,",
          "162:                ERR_R_INTERNAL_ERROR);",
          "163:         return 0;",
          "164:     }",
          "166:     for (i = 0; i < num_curves; i++, pcurvestmp += 2) {",
          "167:         if (tls_curve_allowed(s, pcurves, SSL_SECOP_CURVE_SUPPORTED)) {",
          "168:             if (!WPACKET_put_bytes_u8(pkt, pcurvestmp[0])",
          "169:                 || !WPACKET_put_bytes_u8(pkt, pcurvestmp[1])) {",
          "170:                     SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_GROUPS,",
          "171:                            ERR_R_INTERNAL_ERROR);",
          "172:                     return 0;",
          "173:                 }",
          "174:         }",
          "175:     }",
          "176:     if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "177:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_GROUPS,",
          "178:                ERR_R_INTERNAL_ERROR);",
          "179:         return 0;",
          "180:     }",
          "182:     return 1;",
          "183: }",
          "184: #endif",
          "186: int tls_construct_client_session_ticket(SSL *s, WPACKET *pkt, int *al)",
          "187: {",
          "188:     size_t ticklen;",
          "190:     if (!tls_use_ticket(s))",
          "191:         return 1;",
          "193:     if (!s->new_session && s->session != NULL",
          "194:             && s->session->tlsext_tick != NULL) {",
          "195:         ticklen = s->session->tlsext_ticklen;",
          "196:     } else if (s->session && s->tlsext_session_ticket != NULL",
          "197:                && s->tlsext_session_ticket->data != NULL) {",
          "198:         ticklen = s->tlsext_session_ticket->length;",
          "199:         s->session->tlsext_tick = OPENSSL_malloc(ticklen);",
          "200:         if (s->session->tlsext_tick == NULL) {",
          "201:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SESSION_TICKET,",
          "202:                    ERR_R_INTERNAL_ERROR);",
          "203:             return 0;",
          "204:         }",
          "205:         memcpy(s->session->tlsext_tick,",
          "206:                s->tlsext_session_ticket->data, ticklen);",
          "207:         s->session->tlsext_ticklen = ticklen;",
          "208:     } else {",
          "209:         ticklen = 0;",
          "210:     }",
          "212:     if (ticklen == 0 && s->tlsext_session_ticket != NULL &&",
          "213:             s->tlsext_session_ticket->data == NULL)",
          "214:         return 1;",
          "216:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_session_ticket)",
          "217:             || !WPACKET_sub_memcpy_u16(pkt, s->session->tlsext_tick, ticklen)) {",
          "218:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "219:         return 0;",
          "220:     }",
          "222:     return 1;",
          "223: }",
          "225: int tls_construct_client_sig_algs(SSL *s, WPACKET *pkt, int *al)",
          "226: {",
          "227:     size_t salglen;",
          "228:     const unsigned char *salg;",
          "230:     if (!SSL_CLIENT_USE_SIGALGS(s))",
          "231:         return 1;",
          "233:     salglen = tls12_get_psigalgs(s, &salg);",
          "235:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_signature_algorithms)",
          "237:             || !WPACKET_start_sub_packet_u16(pkt)",
          "239:             || !WPACKET_start_sub_packet_u16(pkt)",
          "240:             || !tls12_copy_sigalgs(s, pkt, salg, salglen)",
          "241:             || !WPACKET_close(pkt)",
          "242:             || !WPACKET_close(pkt)) {",
          "243:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SIG_ALGS, ERR_R_INTERNAL_ERROR);",
          "244:         return 0;",
          "245:     }",
          "247:     return 1;",
          "248: }",
          "250: #ifndef OPENSSL_NO_OCSP",
          "251: int tls_construct_client_status_request(SSL *s, WPACKET *pkt, int *al)",
          "252: {",
          "253:     int i;",
          "255:     if (s->tlsext_status_type != TLSEXT_STATUSTYPE_ocsp)",
          "256:         return 1;",
          "258:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_status_request)",
          "260:             || !WPACKET_start_sub_packet_u16(pkt)",
          "261:             || !WPACKET_put_bytes_u8(pkt, TLSEXT_STATUSTYPE_ocsp)",
          "263:             || !WPACKET_start_sub_packet_u16(pkt)) {",
          "264:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST, ERR_R_INTERNAL_ERROR);",
          "265:         return 0;",
          "266:     }",
          "267:     for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++) {",
          "268:         unsigned char *idbytes;",
          "269:         int idlen;",
          "270:         OCSP_RESPID *id;",
          "272:         id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);",
          "273:         idlen = i2d_OCSP_RESPID(id, NULL);",
          "274:         if (idlen <= 0",
          "276:                 || !WPACKET_sub_allocate_bytes_u16(pkt, idlen, &idbytes)",
          "277:                 || i2d_OCSP_RESPID(id, &idbytes) != idlen) {",
          "278:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST,",
          "279:                    ERR_R_INTERNAL_ERROR);",
          "280:             return 0;",
          "281:         }",
          "282:     }",
          "283:     if (!WPACKET_close(pkt)",
          "284:             || !WPACKET_start_sub_packet_u16(pkt)) {",
          "285:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST, ERR_R_INTERNAL_ERROR);",
          "286:         return 0;",
          "287:     }",
          "288:     if (s->tlsext_ocsp_exts) {",
          "289:         unsigned char *extbytes;",
          "290:         int extlen = i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, NULL);",
          "292:         if (extlen < 0) {",
          "293:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST,",
          "294:                    ERR_R_INTERNAL_ERROR);",
          "295:             return 0;",
          "296:         }",
          "297:         if (!WPACKET_allocate_bytes(pkt, extlen, &extbytes)",
          "298:                 || i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, &extbytes)",
          "299:                    != extlen) {",
          "300:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST,",
          "301:                    ERR_R_INTERNAL_ERROR);",
          "302:             return 0;",
          "303:        }",
          "304:     }",
          "305:     if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "306:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_STATUS_REQUEST, ERR_R_INTERNAL_ERROR);",
          "307:         return 0;",
          "308:     }",
          "310:     return 1;",
          "311: }",
          "312: #endif",
          "314: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "315: int tls_construct_client_npn(SSL *s, WPACKET *pkt, int *al)",
          "316: {",
          "317:     if (s->ctx->next_proto_select_cb == NULL || s->s3->tmp.finish_md_len != 0)",
          "318:         return 1;",
          "324:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_next_proto_neg)",
          "325:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "326:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_NPN, ERR_R_INTERNAL_ERROR);",
          "327:         return 0;",
          "328:     }",
          "330:     return 1;",
          "331: }",
          "332: #endif",
          "334: int tls_construct_client_alpn(SSL *s, WPACKET *pkt, int *al)",
          "335: {",
          "336:     s->s3->alpn_sent = 0;",
          "342:     if (s->alpn_client_proto_list == NULL || s->s3->tmp.finish_md_len != 0)",
          "343:         return 1;",
          "345:     if (!WPACKET_put_bytes_u16(pkt,",
          "346:                 TLSEXT_TYPE_application_layer_protocol_negotiation)",
          "348:             || !WPACKET_start_sub_packet_u16(pkt)",
          "349:             || !WPACKET_sub_memcpy_u16(pkt, s->alpn_client_proto_list,",
          "350:                                        s->alpn_client_proto_list_len)",
          "351:             || !WPACKET_close(pkt)) {",
          "352:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_ALPN, ERR_R_INTERNAL_ERROR);",
          "353:         return 0;",
          "354:     }",
          "355:     s->s3->alpn_sent = 1;",
          "357:     return 1;",
          "358: }",
          "361: #ifndef OPENSSL_NO_SRTP",
          "362: int tls_construct_client_use_srtp(SSL *s, WPACKET *pkt, int *al)",
          "363: {",
          "364:     STACK_OF(SRTP_PROTECTION_PROFILE) *clnt = SSL_get_srtp_profiles(s);",
          "365:     SRTP_PROTECTION_PROFILE *prof;",
          "366:     int i, ct;",
          "368:     if (clnt == NULL)",
          "369:         return 1;",
          "371:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_use_srtp)",
          "373:             || !WPACKET_start_sub_packet_u16(pkt)",
          "375:             || !WPACKET_start_sub_packet_u16(pkt)) {",
          "376:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP, ERR_R_INTERNAL_ERROR);",
          "377:         return 0;",
          "378:     }",
          "379:     ct = sk_SRTP_PROTECTION_PROFILE_num(clnt);",
          "380:     for (i = 0; i < ct; i++) {",
          "381:         prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);",
          "382:         if (prof == NULL || !WPACKET_put_bytes_u16(pkt, prof->id)) {",
          "383:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP, ERR_R_INTERNAL_ERROR);",
          "384:             return 0;",
          "385:         }",
          "386:     }",
          "387:     if (!WPACKET_close(pkt)",
          "389:             || !WPACKET_put_bytes_u8(pkt, 0)",
          "390:             || !WPACKET_close(pkt)) {",
          "391:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_USE_SRTP, ERR_R_INTERNAL_ERROR);",
          "392:         return 0;",
          "393:     }",
          "395:     return 1;",
          "396: }",
          "397: #endif",
          "399: int tls_construct_client_etm(SSL *s, WPACKET *pkt, int *al)",
          "400: {",
          "401:     if (s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
          "402:         return 1;",
          "404:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_encrypt_then_mac)",
          "405:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "406:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_ETM, ERR_R_INTERNAL_ERROR);",
          "407:         return 0;",
          "408:     }",
          "410:     return 1;",
          "411: }",
          "413: #ifndef OPENSSL_NO_CT",
          "414: int tls_construct_client_sct(SSL *s, WPACKET *pkt, int *al)",
          "415: {",
          "416:     if (s->ct_validation_callback == NULL)",
          "417:         return 1;",
          "419:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_signed_certificate_timestamp)",
          "420:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "421:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SCT, ERR_R_INTERNAL_ERROR);",
          "422:         return 0;",
          "423:     }",
          "425:     return 1;",
          "426: }",
          "427: #endif",
          "429: int tls_construct_client_ems(SSL *s, WPACKET *pkt, int *al)",
          "430: {",
          "431:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)",
          "432:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "433:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_EMS, ERR_R_INTERNAL_ERROR);",
          "434:         return 0;",
          "435:     }",
          "437:     return 1;",
          "438: }",
          "440: int tls_construct_client_supported_versions(SSL *s, WPACKET *pkt, int *al)",
          "441: {",
          "442:     int currv, min_version, max_version, reason;",
          "444:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_supported_versions)",
          "445:             || !WPACKET_start_sub_packet_u16(pkt)",
          "446:             || !WPACKET_start_sub_packet_u8(pkt)) {",
          "447:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS,",
          "448:                ERR_R_INTERNAL_ERROR);",
          "449:         return 0;",
          "450:     }",
          "452:     reason = ssl_get_client_min_max_version(s, &min_version, &max_version);",
          "453:     if (reason != 0) {",
          "454:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS, reason);",
          "455:         return 0;",
          "456:     }",
          "463:     for (currv = max_version; currv >= min_version; currv--) {",
          "465:         if (currv == TLS1_3_VERSION) {",
          "466:             if (!WPACKET_put_bytes_u16(pkt, TLS1_3_VERSION_DRAFT)) {",
          "467:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS,",
          "468:                        ERR_R_INTERNAL_ERROR);",
          "469:                 return 0;",
          "470:             }",
          "471:         } else if (!WPACKET_put_bytes_u16(pkt, currv)) {",
          "472:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS,",
          "473:                    ERR_R_INTERNAL_ERROR);",
          "474:             return 0;",
          "475:         }",
          "476:     }",
          "477:     if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "478:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_SUPPORTED_VERSIONS,",
          "479:                ERR_R_INTERNAL_ERROR);",
          "480:         return 0;",
          "481:     }",
          "483:     return 1;",
          "484: }",
          "487: int tls_construct_client_key_share(SSL *s, WPACKET *pkt, int *al)",
          "488: {",
          "489:     size_t i, sharessent = 0, num_curves = 0;",
          "490:     const unsigned char *pcurves = NULL;",
          "493:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_key_share)",
          "495:             || !WPACKET_start_sub_packet_u16(pkt)",
          "497:             || !WPACKET_start_sub_packet_u16(pkt)) {",
          "498:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "499:         return 0;",
          "500:     }",
          "502:     pcurves = s->tlsext_supportedgroupslist;",
          "503:     if (!tls1_get_curvelist(s, 0, &pcurves, &num_curves)) {",
          "504:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "505:         return 0;",
          "506:     }",
          "512:     for (i = 0; i < num_curves && sharessent < 1; i++, pcurves += 2) {",
          "513:         unsigned char *encodedPoint = NULL;",
          "514:         unsigned int curve_id = 0;",
          "515:         EVP_PKEY *key_share_key = NULL;",
          "516:         size_t encodedlen;",
          "518:         if (!tls_curve_allowed(s, pcurves, SSL_SECOP_CURVE_SUPPORTED))",
          "519:             continue;",
          "521:         if (s->s3->tmp.pkey != NULL) {",
          "523:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "524:             return 0;",
          "525:         }",
          "528:         curve_id = (pcurves[0] << 8) | pcurves[1];",
          "529:         key_share_key = ssl_generate_pkey_curve(curve_id);",
          "530:         if (key_share_key == NULL) {",
          "531:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_EVP_LIB);",
          "532:             return 0;",
          "533:         }",
          "536:         encodedlen = EVP_PKEY_get1_tls_encodedpoint(key_share_key,",
          "537:                                                     &encodedPoint);",
          "538:         if (encodedlen == 0) {",
          "539:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_EC_LIB);",
          "540:             EVP_PKEY_free(key_share_key);",
          "541:             return 0;",
          "542:         }",
          "545:         if (!WPACKET_put_bytes_u16(pkt, curve_id)",
          "546:                 || !WPACKET_sub_memcpy_u16(pkt, encodedPoint, encodedlen)) {",
          "547:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "548:             EVP_PKEY_free(key_share_key);",
          "549:             OPENSSL_free(encodedPoint);",
          "550:             return 0;",
          "551:         }",
          "558:         s->s3->group_id = curve_id;",
          "559:         s->s3->tmp.pkey = key_share_key;",
          "560:         sharessent++;",
          "561:         OPENSSL_free(encodedPoint);",
          "562:     }",
          "564:     if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "565:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "566:         return 0;",
          "567:     }",
          "569:     return 1;",
          "570: }",
          "572: int tls_construct_client_padding(SSL *s, WPACKET *pkt, int *al)",
          "573: {",
          "574:     unsigned char *padbytes;",
          "575:     size_t hlen;",
          "577:     if ((s->options & SSL_OP_TLSEXT_PADDING) == 0)",
          "578:         return 1;",
          "586:     if (!WPACKET_get_total_written(pkt, &hlen)) {",
          "587:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_PADDING, ERR_R_INTERNAL_ERROR);",
          "588:         return 0;",
          "589:     }",
          "591:     if (hlen > 0xff && hlen < 0x200) {",
          "592:         hlen = 0x200 - hlen;",
          "593:         if (hlen >= 4)",
          "594:             hlen -= 4;",
          "595:         else",
          "596:             hlen = 0;",
          "598:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_padding)",
          "599:                 || !WPACKET_sub_allocate_bytes_u16(pkt, hlen, &padbytes)) {",
          "600:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_PADDING, ERR_R_INTERNAL_ERROR);",
          "601:             return 0;",
          "602:         }",
          "603:         memset(padbytes, 0, hlen);",
          "604:     }",
          "606:     return 1;",
          "607: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:     return 1;",
          "148: }",
          "150: int tls_parse_server_status_request(SSL *s, PACKET *pkt, int *al)",
          "151: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745: #ifndef OPENSSL_NO_OCSP",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:     return 1;",
          "164: }",
          "167: #ifndef OPENSSL_NO_CT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761: #endif",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     return 1;",
          "216: }",
          "218: int tls_parse_client_status_request(SSL *s, PACKET *pkt, int *al)",
          "219: {",
          "220:     if (!PACKET_get_1(pkt, (unsigned int *)&s->tlsext_status_type)) {",
          "222:         return 0;",
          "223:     }",
          "225:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "226:         const unsigned char *ext_data;",
          "227:         PACKET responder_id_list, exts;",
          "",
          "[Removed Lines]",
          "224: #ifndef OPENSSL_NO_OCSP",
          "",
          "[Added Lines]",
          "218: #ifndef OPENSSL_NO_OCSP",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:                 return 0;",
          "298:             }",
          "299:         }",
          "",
          "[Removed Lines]",
          "300:     } else",
          "301: #endif",
          "302:     {",
          "",
          "[Added Lines]",
          "301:     } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:     return 1;",
          "310: }",
          "312: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "313: int tls_parse_client_npn(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "949:     return 1;",
          "950: }",
          "952: int tls_construct_server_status_request(SSL *s, WPACKET *pkt, int *al)",
          "953: {",
          "954:     if (!s->tlsext_status_expected)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952: #ifndef OPENSSL_NO_OCSP",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "963:     return 1;",
          "964: }",
          "967: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "966: #endif",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1011:     }",
          "1026:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1027:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "1028:         return 0;",
          "",
          "[Removed Lines]",
          "1014:     if (ssl_prepare_clienthello_tlsext(s) <= 0) {",
          "1015:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1016:         return 0;",
          "1017:     }",
          "1018:     if (!WPACKET_start_sub_packet_u16(pkt)",
          "1023:             || !WPACKET_set_flags(pkt, WPACKET_FLAGS_ABANDON_ON_ZERO_LENGTH)",
          "1024:             || !ssl_add_clienthello_tlsext(s, pkt, &al)",
          "1025:             || !WPACKET_close(pkt)) {",
          "",
          "[Added Lines]",
          "1014:     if (!tls_construct_extensions(s, pkt, EXT_CLIENT_HELLO, &al)) {",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: #endif",
          "169: int tls_parse_client_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "170: int tls_parse_client_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "171: int tls_parse_client_status_request(SSL *s, PACKET *pkt, int *al);",
          "172: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "173: int tls_parse_client_npn(SSL *s, PACKET *pkt, int *al);",
          "174: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: #ifndef OPENSSL_NO_OCSP",
          "173: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "186: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al);",
          "187: int tls_construct_server_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "188: int tls_construct_server_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "189: int tls_construct_server_status_request(SSL *s, WPACKET *pkt, int *al);",
          "190: int tls_construct_server_next_proto_neg(SSL *s, WPACKET *pkt, int *al);",
          "191: int tls_construct_server_alpn(SSL *s, WPACKET *pkt, int *al);",
          "192: int tls_construct_server_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "193: int tls_construct_server_etm(SSL *s, WPACKET *pkt, int *al);",
          "194: int tls_construct_server_ems(SSL *s, WPACKET *pkt, int *al);",
          "195: int tls_construct_server_key_share(SSL *s, WPACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: #ifndef OPENSSL_NO_EC",
          "191: #endif",
          "193: #ifndef OPENSSL_NO_OCSP",
          "195: #endif",
          "196: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "198: #endif",
          "200: #ifndef OPENSSL_NO_SRTP",
          "202: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201: int tls_construct_server_cryptopro_bug(SSL *s, WPACKET *pkt, int *al);",
          "204: int tls_parse_server_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "205: int tls_parse_server_server_name(SSL *s, PACKET *pkt, int *al);",
          "206: #ifndef OPENSSL_NO_EC",
          "207: int tls_parse_server_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "208: #endif",
          "209: int tls_parse_server_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "210: int tls_parse_server_status_request(SSL *s, PACKET *pkt, int *al);",
          "211: #ifndef OPENSSL_NO_CT",
          "212: int tls_parse_server_sct(SSL *s, PACKET *pkt, int *al);",
          "213: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: int tls_construct_client_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "215: int tls_construct_client_server_name(SSL *s, WPACKET *pkt, int *al);",
          "216: #ifndef OPENSSL_NO_SRP",
          "217: int tls_construct_client_srp(SSL *s, WPACKET *pkt, int *al);",
          "218: #endif",
          "219: #ifndef OPENSSL_NO_EC",
          "220: int tls_construct_client_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "221: int tls_construct_client_supported_groups(SSL *s, WPACKET *pkt, int *al);",
          "222: #endif",
          "223: int tls_construct_client_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "224: int tls_construct_client_sig_algs(SSL *s, WPACKET *pkt, int *al);",
          "225: #ifndef OPENSSL_NO_OCSP",
          "226: int tls_construct_client_status_request(SSL *s, WPACKET *pkt, int *al);",
          "227: #endif",
          "228: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "229: int tls_construct_client_npn(SSL *s, WPACKET *pkt, int *al);",
          "230: #endif",
          "231: int tls_construct_client_alpn(SSL *s, WPACKET *pkt, int *al);",
          "232: #ifndef OPENSSL_NO_SRTP",
          "233: int tls_construct_client_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "234: #endif",
          "235: int tls_construct_client_etm(SSL *s, WPACKET *pkt, int *al);",
          "236: #ifndef OPENSSL_NO_CT",
          "237: int tls_construct_client_sct(SSL *s, WPACKET *pkt, int *al);",
          "238: #endif",
          "239: int tls_construct_client_ems(SSL *s, WPACKET *pkt, int *al);",
          "240: int tls_construct_client_supported_versions(SSL *s, WPACKET *pkt, int *al);",
          "241: int tls_construct_client_key_share(SSL *s, WPACKET *pkt, int *al);",
          "242: int tls_construct_client_padding(SSL *s, WPACKET *pkt, int *al);",
          "249: #ifndef OPENSSL_NO_OCSP",
          "251: #endif",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "945:     return ssl_security(s, SSL_SECOP_TICKET, 0, 0, NULL);",
          "946: }",
          "1446: void ssl_set_default_md(SSL *s)",
          "1447: {",
          "",
          "[Removed Lines]",
          "948: int ssl_add_clienthello_tlsext(SSL *s, WPACKET *pkt, int *al)",
          "949: {",
          "950: #ifndef OPENSSL_NO_EC",
          "951:     const unsigned char *pcurves = NULL;",
          "952:     size_t num_curves = 0;",
          "953:     int using_ecc = 0;",
          "954:     int min_version, max_version, reason;",
          "957:     if ((s->version >= TLS1_VERSION && s->version <= TLS1_3_VERSION)",
          "958:             || SSL_IS_DTLS(s)) {",
          "959:         int i;",
          "960:         unsigned long alg_k, alg_a;",
          "961:         STACK_OF(SSL_CIPHER) *cipher_stack = SSL_get_ciphers(s);",
          "963:         for (i = 0; i < sk_SSL_CIPHER_num(cipher_stack); i++) {",
          "964:             const SSL_CIPHER *c = sk_SSL_CIPHER_value(cipher_stack, i);",
          "966:             alg_k = c->algorithm_mkey;",
          "967:             alg_a = c->algorithm_auth;",
          "968:             if ((alg_k & (SSL_kECDHE | SSL_kECDHEPSK))",
          "969:                 || (alg_a & SSL_aECDSA)",
          "970:                 || c->min_tls >= TLS1_3_VERSION) {",
          "971:                 using_ecc = 1;",
          "972:                 break;",
          "973:             }",
          "974:         }",
          "975:     }",
          "976: #else",
          "977:     if (SSL_IS_TLS13(s)) {",
          "979:         SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "980:         return 0;",
          "981:     }",
          "982: #endif",
          "985:     if (s->renegotiate) {",
          "986:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)",
          "987:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "988:                 || !WPACKET_sub_memcpy_u8(pkt, s->s3->previous_client_finished,",
          "989:                                    s->s3->previous_client_finished_len)",
          "990:                 || !WPACKET_close(pkt)) {",
          "991:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "992:             return 0;",
          "993:         }",
          "994:     }",
          "996:     if (s->client_version == SSL3_VERSION)",
          "997:         goto done;",
          "999:     if (s->tlsext_hostname != NULL) {",
          "1001:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_server_name)",
          "1003:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1005:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1006:                 || !WPACKET_put_bytes_u8(pkt, TLSEXT_NAMETYPE_host_name)",
          "1007:                 || !WPACKET_sub_memcpy_u16(pkt, s->tlsext_hostname,",
          "1008:                                            strlen(s->tlsext_hostname))",
          "1009:                 || !WPACKET_close(pkt)",
          "1010:                 || !WPACKET_close(pkt)) {",
          "1011:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1012:             return 0;",
          "1013:         }",
          "1014:     }",
          "1015: #ifndef OPENSSL_NO_SRP",
          "1017:     if (s->srp_ctx.login != NULL) {",
          "1018:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_srp)",
          "1020:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1021:                 || !WPACKET_start_sub_packet_u8(pkt)",
          "1023:                 || !WPACKET_set_flags(pkt, WPACKET_FLAGS_NON_ZERO_LENGTH)",
          "1024:                 || !WPACKET_memcpy(pkt, s->srp_ctx.login,",
          "1025:                                    strlen(s->srp_ctx.login))",
          "1026:                 || !WPACKET_close(pkt)",
          "1027:                 || !WPACKET_close(pkt)) {",
          "1028:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1029:             return 0;",
          "1030:         }",
          "1031:     }",
          "1032: #endif",
          "1034: #ifndef OPENSSL_NO_EC",
          "1035:     if (using_ecc) {",
          "1039:         const unsigned char *pformats, *pcurvestmp;",
          "1040:         size_t num_formats;",
          "1041:         size_t i;",
          "1043:         tls1_get_formatlist(s, &pformats, &num_formats);",
          "1045:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_ec_point_formats)",
          "1047:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1048:                 || !WPACKET_sub_memcpy_u8(pkt, pformats, num_formats)",
          "1049:                 || !WPACKET_close(pkt)) {",
          "1050:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1051:             return 0;",
          "1052:         }",
          "1058:         pcurves = s->tlsext_supportedgroupslist;",
          "1059:         if (!tls1_get_curvelist(s, 0, &pcurves, &num_curves)) {",
          "1060:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1061:             return 0;",
          "1062:         }",
          "1063:         pcurvestmp = pcurves;",
          "1065:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_supported_groups)",
          "1067:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1068:                 || !WPACKET_start_sub_packet_u16(pkt)) {",
          "1069:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1070:             return 0;",
          "1071:         }",
          "1073:         for (i = 0; i < num_curves; i++, pcurvestmp += 2) {",
          "1074:             if (tls_curve_allowed(s, pcurves, SSL_SECOP_CURVE_SUPPORTED)) {",
          "1075:                 if (!WPACKET_put_bytes_u8(pkt, pcurvestmp[0])",
          "1076:                     || !WPACKET_put_bytes_u8(pkt, pcurvestmp[1])) {",
          "1077:                         SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT,",
          "1078:                                ERR_R_INTERNAL_ERROR);",
          "1079:                         return 0;",
          "1080:                     }",
          "1081:             }",
          "1082:         }",
          "1083:         if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "1084:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1085:             return 0;",
          "1086:         }",
          "1087:     }",
          "1090:     if (tls_use_ticket(s)) {",
          "1091:         size_t ticklen;",
          "1092:         if (!s->new_session && s->session && s->session->tlsext_tick)",
          "1093:             ticklen = s->session->tlsext_ticklen;",
          "1094:         else if (s->session && s->tlsext_session_ticket &&",
          "1095:                  s->tlsext_session_ticket->data) {",
          "1096:             ticklen = s->tlsext_session_ticket->length;",
          "1097:             s->session->tlsext_tick = OPENSSL_malloc(ticklen);",
          "1098:             if (s->session->tlsext_tick == NULL) {",
          "1099:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1100:                 return 0;",
          "1101:             }",
          "1102:             memcpy(s->session->tlsext_tick,",
          "1103:                    s->tlsext_session_ticket->data, ticklen);",
          "1104:             s->session->tlsext_ticklen = ticklen;",
          "1105:         } else",
          "1106:             ticklen = 0;",
          "1107:         if (ticklen == 0 && s->tlsext_session_ticket &&",
          "1108:             s->tlsext_session_ticket->data == NULL)",
          "1109:             goto skip_ext;",
          "1111:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_session_ticket)",
          "1112:                 || !WPACKET_sub_memcpy_u16(pkt, s->session->tlsext_tick,",
          "1113:                                            ticklen)) {",
          "1114:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1115:             return 0;",
          "1116:         }",
          "1117:     }",
          "1118:  skip_ext:",
          "1120:     if (SSL_CLIENT_USE_SIGALGS(s)) {",
          "1121:         size_t salglen;",
          "1122:         const unsigned char *salg;",
          "1124:         salglen = tls12_get_psigalgs(s, &salg);",
          "1126:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_signature_algorithms)",
          "1128:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1130:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1131:                 || !tls12_copy_sigalgs(s, pkt, salg, salglen)",
          "1132:                 || !WPACKET_close(pkt)",
          "1133:                 || !WPACKET_close(pkt)) {",
          "1134:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1135:             return 0;",
          "1136:         }",
          "1137:     }",
          "1138: #ifndef OPENSSL_NO_OCSP",
          "1139:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "1140:         int i;",
          "1142:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_status_request)",
          "1144:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1145:                 || !WPACKET_put_bytes_u8(pkt, TLSEXT_STATUSTYPE_ocsp)",
          "1147:                 || !WPACKET_start_sub_packet_u16(pkt)) {",
          "1148:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1149:             return 0;",
          "1150:         }",
          "1151:         for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++) {",
          "1152:             unsigned char *idbytes;",
          "1153:             int idlen;",
          "1154:             OCSP_RESPID *id;",
          "1156:             id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);",
          "1157:             idlen = i2d_OCSP_RESPID(id, NULL);",
          "1158:             if (idlen <= 0",
          "1160:                     || !WPACKET_sub_allocate_bytes_u16(pkt, idlen, &idbytes)",
          "1161:                     || i2d_OCSP_RESPID(id, &idbytes) != idlen) {",
          "1162:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1163:                 return 0;",
          "1164:             }",
          "1165:         }",
          "1166:         if (!WPACKET_close(pkt)",
          "1167:                 || !WPACKET_start_sub_packet_u16(pkt)) {",
          "1168:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1169:             return 0;",
          "1170:         }",
          "1171:         if (s->tlsext_ocsp_exts) {",
          "1172:             unsigned char *extbytes;",
          "1173:             int extlen = i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, NULL);",
          "1175:             if (extlen < 0) {",
          "1176:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1177:                 return 0;",
          "1178:             }",
          "1179:             if (!WPACKET_allocate_bytes(pkt, extlen, &extbytes)",
          "1180:                     || i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, &extbytes)",
          "1181:                        != extlen) {",
          "1182:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1183:                 return 0;",
          "1184:            }",
          "1185:         }",
          "1186:         if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "1187:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1188:             return 0;",
          "1189:         }",
          "1190:     }",
          "1191: #endif",
          "1193: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1194:     if (s->ctx->next_proto_select_cb && !s->s3->tmp.finish_md_len) {",
          "1199:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_next_proto_neg)",
          "1200:                 || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1201:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1202:             return 0;",
          "1203:         }",
          "1204:     }",
          "1205: #endif",
          "1212:     if (s->alpn_client_proto_list && !s->s3->tmp.finish_md_len) {",
          "1213:         if (!WPACKET_put_bytes_u16(pkt,",
          "1214:                     TLSEXT_TYPE_application_layer_protocol_negotiation)",
          "1216:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1217:                 || !WPACKET_sub_memcpy_u16(pkt, s->alpn_client_proto_list,",
          "1218:                                            s->alpn_client_proto_list_len)",
          "1219:                 || !WPACKET_close(pkt)) {",
          "1220:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1221:             return 0;",
          "1222:         }",
          "1223:         s->s3->alpn_sent = 1;",
          "1224:     }",
          "1225: #ifndef OPENSSL_NO_SRTP",
          "1226:     if (SSL_IS_DTLS(s) && SSL_get_srtp_profiles(s)) {",
          "1227:         STACK_OF(SRTP_PROTECTION_PROFILE) *clnt = SSL_get_srtp_profiles(s);",
          "1228:         SRTP_PROTECTION_PROFILE *prof;",
          "1229:         int i, ct;",
          "1231:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_use_srtp)",
          "1233:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1235:                 || !WPACKET_start_sub_packet_u16(pkt)) {",
          "1236:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1237:             return 0;",
          "1238:         }",
          "1239:         ct = sk_SRTP_PROTECTION_PROFILE_num(clnt);",
          "1240:         for (i = 0; i < ct; i++) {",
          "1241:             prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);",
          "1242:             if (prof == NULL || !WPACKET_put_bytes_u16(pkt, prof->id)) {",
          "1243:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1244:                 return 0;",
          "1245:             }",
          "1246:         }",
          "1247:         if (!WPACKET_close(pkt)",
          "1249:                 || !WPACKET_put_bytes_u8(pkt, 0)",
          "1250:                 || !WPACKET_close(pkt)) {",
          "1251:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1252:             return 0;",
          "1253:         }",
          "1254:     }",
          "1255: #endif",
          "1256:     custom_ext_init(&s->cert->cli_ext);",
          "1258:     if (!custom_ext_add(s, 0, pkt, al)) {",
          "1259:         SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1260:         return 0;",
          "1261:     }",
          "1263:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)) {",
          "1264:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_encrypt_then_mac)",
          "1265:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1266:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1267:             return 0;",
          "1268:         }",
          "1269:     }",
          "1271: #ifndef OPENSSL_NO_CT",
          "1272:     if (s->ct_validation_callback != NULL) {",
          "1273:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_signed_certificate_timestamp)",
          "1274:                 || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1275:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1276:             return 0;",
          "1277:         }",
          "1278:     }",
          "1279: #endif",
          "1281:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)",
          "1282:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1283:         SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1284:         return 0;",
          "1285:     }",
          "1287:     reason = ssl_get_client_min_max_version(s, &min_version, &max_version);",
          "1288:     if (reason != 0) {",
          "1289:         SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, reason);",
          "1290:         return 0;",
          "1291:     }",
          "1294:     if (!SSL_IS_DTLS(s) && max_version >= TLS1_3_VERSION) {",
          "1295:         int currv;",
          "1296:         size_t i, sharessent = 0;",
          "1300:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_supported_versions)",
          "1301:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1302:                 || !WPACKET_start_sub_packet_u8(pkt)) {",
          "1303:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1304:             return 0;",
          "1305:         }",
          "1312:         for (currv = max_version; currv >= min_version; currv--) {",
          "1314:             if (currv == TLS1_3_VERSION) {",
          "1315:                 if (!WPACKET_put_bytes_u16(pkt, TLS1_3_VERSION_DRAFT)) {",
          "1316:                     SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT,",
          "1317:                            ERR_R_INTERNAL_ERROR);",
          "1318:                     return 0;",
          "1319:                 }",
          "1320:             } else if (!WPACKET_put_bytes_u16(pkt, currv)) {",
          "1321:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1322:                 return 0;",
          "1323:             }",
          "1324:         }",
          "1325:         if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "1326:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1327:             return 0;",
          "1328:         }",
          "1332:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_key_share)",
          "1334:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1336:                 || !WPACKET_start_sub_packet_u16(pkt)) {",
          "1337:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1338:             return 0;",
          "1339:         }",
          "1345:         for (i = 0; i < num_curves && sharessent < 1; i++, pcurves += 2) {",
          "1346:             unsigned char *encodedPoint = NULL;",
          "1347:             unsigned int curve_id = 0;",
          "1348:             EVP_PKEY *key_share_key = NULL;",
          "1349:             size_t encodedlen;",
          "1351:             if (!tls_curve_allowed(s, pcurves, SSL_SECOP_CURVE_SUPPORTED))",
          "1352:                 continue;",
          "1354:             if (s->s3->tmp.pkey != NULL) {",
          "1356:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT,",
          "1357:                        ERR_R_INTERNAL_ERROR);",
          "1358:                 return 0;",
          "1359:             }",
          "1362:             curve_id = (pcurves[0] << 8) | pcurves[1];",
          "1363:             key_share_key = ssl_generate_pkey_curve(curve_id);",
          "1364:             if (key_share_key == NULL) {",
          "1365:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_EVP_LIB);",
          "1366:                 return 0;",
          "1367:             }",
          "1370:             encodedlen = EVP_PKEY_get1_tls_encodedpoint(key_share_key,",
          "1371:                                                         &encodedPoint);",
          "1372:             if (encodedlen == 0) {",
          "1373:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_EC_LIB);",
          "1374:                 EVP_PKEY_free(key_share_key);",
          "1375:                 return 0;",
          "1376:             }",
          "1379:             if (!WPACKET_put_bytes_u16(pkt, curve_id)",
          "1380:                     || !WPACKET_sub_memcpy_u16(pkt, encodedPoint, encodedlen)) {",
          "1381:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT,",
          "1382:                        ERR_R_INTERNAL_ERROR);",
          "1383:                 EVP_PKEY_free(key_share_key);",
          "1384:                 OPENSSL_free(encodedPoint);",
          "1385:                 return 0;",
          "1386:             }",
          "1393:             s->s3->group_id = curve_id;",
          "1394:             s->s3->tmp.pkey = key_share_key;",
          "1395:             sharessent++;",
          "1396:             OPENSSL_free(encodedPoint);",
          "1397:         }",
          "1398:         if (!WPACKET_close(pkt) || !WPACKET_close(pkt)) {",
          "1399:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1400:             return 0;",
          "1401:         }",
          "1402:     }",
          "1410:     if (s->options & SSL_OP_TLSEXT_PADDING) {",
          "1411:         unsigned char *padbytes;",
          "1412:         size_t hlen;",
          "1414:         if (!WPACKET_get_total_written(pkt, &hlen)) {",
          "1415:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1416:             return 0;",
          "1417:         }",
          "1419:         if (hlen > 0xff && hlen < 0x200) {",
          "1420:             hlen = 0x200 - hlen;",
          "1421:             if (hlen >= 4)",
          "1422:                 hlen -= 4;",
          "1423:             else",
          "1424:                 hlen = 0;",
          "1426:             if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_padding)",
          "1427:                     || !WPACKET_sub_allocate_bytes_u16(pkt, hlen, &padbytes)) {",
          "1428:                 SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1429:                 return 0;",
          "1430:             }",
          "1431:             memset(padbytes, 0, hlen);",
          "1432:         }",
          "1433:     }",
          "1435:  done:",
          "1436:     return 1;",
          "1437: }",
          "1439: int ssl_prepare_clienthello_tlsext(SSL *s)",
          "1440: {",
          "1441:     s->s3->alpn_sent = 0;",
          "1442:     return 1;",
          "1443: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "332eb3908883fcaac8483dcc895571b0a3c2813a",
      "candidate_info": {
        "commit_hash": "332eb3908883fcaac8483dcc895571b0a3c2813a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/332eb3908883fcaac8483dcc895571b0a3c2813a",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h"
        ],
        "message": "Move ServerHello extension parsing into the new extension framework\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2308: # define SSL_F_TLS_CONSTRUCT_SERVER_SESSION_TICKET        460",
          "2309: # define SSL_F_TLS_CONSTRUCT_SERVER_STATUS_REQUEST        461",
          "2310: # define SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP              462",
          "2311: # define SSL_F_TLS_EXT_FINAL_RENEGOTIATE                  483",
          "2312: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2313: # define SSL_F_TLS_GET_MESSAGE_HEADER                     387",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311: # define SSL_F_TLS_EXT_FINAL_                             484",
          "2312: # define SSL_F_TLS_EXT_FINAL_EC_PT_FORMATS                485",
          "2313: # define SSL_F_TLS_EXT_FINAL_EMS                          486",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:      \"tls_construct_server_status_request\"},",
          "339:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP),",
          "340:      \"tls_construct_server_use_srtp\"},",
          "341:     {ERR_FUNC(SSL_F_TLS_EXT_FINAL_RENEGOTIATE), \"tls_ext_final_renegotiate\"},",
          "342:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "343:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     {ERR_FUNC(SSL_F_TLS_EXT_FINAL_), \"tls_ext_final_ems\"},",
          "342:     {ERR_FUNC(SSL_F_TLS_EXT_FINAL_EC_PT_FORMATS),",
          "343:      \"tls_ext_final_ec_pt_formats\"},",
          "344:     {ERR_FUNC(SSL_F_TLS_EXT_FINAL_EMS), \"tls_ext_final_ems\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2104: void ssl_set_default_md(SSL *s);",
          "2105: __owur int tls1_set_server_sigalgs(SSL *s);",
          "2107: __owur RAW_EXTENSION *tls_get_extension_by_type(RAW_EXTENSION *exts,",
          "2108:                                                 size_t numexts,",
          "2109:                                                 unsigned int type);",
          "",
          "[Removed Lines]",
          "2106: __owur int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: static int tls_ext_init_server_name(SSL *s, unsigned int context);",
          "16: static int tls_ext_final_server_name(SSL *s, unsigned int context, int sent,",
          "17:                                      int *al);",
          "18: static int tls_ext_init_status_request(SSL *s, unsigned int context);",
          "19: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "20: static int tls_ext_init_npn(SSL *s, unsigned int context);",
          "21: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #ifndef OPENSSL_NO_EC",
          "19: static int tls_ext_final_ec_pt_formats(SSL *s, unsigned int context, int sent,",
          "20:                                        int *al);",
          "21: #endif",
          "22: static int tls_ext_init_session_ticket(SSL *s, unsigned int context);",
          "24: static int tls_ext_final_status_request(SSL *s, unsigned int context, int sent,",
          "25:                                         int *al);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: static int tls_ext_init_srp(SSL *s, unsigned int context);",
          "27: #endif",
          "28: static int tls_ext_init_etm(SSL *s, unsigned int context);",
          "29: #ifndef OPENSSL_NO_SRTP",
          "30: static int tls_ext_init_srtp(SSL *s, unsigned int context);",
          "31: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: static int tls_ext_init_ems(SSL *s, unsigned int context);",
          "37: static int tls_ext_final_ems(SSL *s, unsigned int context, int sent, int *al);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         tls_parse_server_ec_pt_formats,",
          "123:         tls_construct_server_ec_pt_formats,",
          "124:         tls_construct_client_ec_pt_formats,",
          "126:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "127:     },",
          "128:     {",
          "",
          "[Removed Lines]",
          "125:         NULL,",
          "",
          "[Added Lines]",
          "134:         tls_ext_final_ec_pt_formats,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138: #endif",
          "139:     {",
          "140:         TLSEXT_TYPE_session_ticket,",
          "142:         tls_parse_client_session_ticket,",
          "143:         tls_parse_server_session_ticket,",
          "144:         tls_construct_server_session_ticket,",
          "",
          "[Removed Lines]",
          "141:         NULL,",
          "",
          "[Added Lines]",
          "150:         tls_ext_init_session_ticket,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:         tls_parse_server_status_request,",
          "165:         tls_construct_server_status_request,",
          "166:         tls_construct_client_status_request,",
          "168:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "169:         | EXT_TLS1_3_CERTIFICATE",
          "170:     },",
          "",
          "[Removed Lines]",
          "167:         NULL,",
          "",
          "[Added Lines]",
          "176:         tls_ext_final_status_request,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239: #endif",
          "240:     {",
          "241:         TLSEXT_TYPE_extended_master_secret,",
          "243:         tls_parse_client_ems,",
          "244:         tls_parse_server_ems,",
          "245:         tls_construct_server_ems,",
          "246:         tls_construct_client_ems,",
          "248:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "249:     },",
          "250:     {",
          "",
          "[Removed Lines]",
          "242:         NULL,",
          "247:         NULL,",
          "",
          "[Added Lines]",
          "251:         tls_ext_init_ems,",
          "256:         tls_ext_final_ems,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "697: static int tls_ext_final_renegotiate(SSL *s, unsigned int context, int sent,",
          "698:                                      int *al)",
          "699: {",
          "701:         return 1;",
          "704:     if (s->renegotiate",
          "",
          "[Removed Lines]",
          "700:     if (!s->server)",
          "",
          "[Added Lines]",
          "709:     if (!s->server) {",
          "714:         if (!(s->options & SSL_OP_LEGACY_SERVER_CONNECT)",
          "715:                 && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "716:                 && !sent) {",
          "718:             SSLerr(SSL_F_TLS_EXT_FINAL_RENEGOTIATE,",
          "719:                    SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "720:             return 0;",
          "721:         }",
          "724:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "727:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "728:     int altmp = SSL_AD_UNRECOGNIZED_NAME;",
          "733:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "734:         ret = s->ctx->tlsext_servername_callback(s, &altmp,",
          "735:                                                  s->ctx->tlsext_servername_arg);",
          "",
          "[Removed Lines]",
          "730:     if (!s->server)",
          "731:         return 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "756:     }",
          "757: }",
          "759: static int tls_ext_init_status_request(SSL *s, unsigned int context)",
          "760: {",
          "761:     if (s->server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "780: #ifndef OPENSSL_NO_EC",
          "781: static int tls_ext_final_ec_pt_formats(SSL *s, unsigned int context, int sent,",
          "782:                                        int *al)",
          "783: {",
          "784:     unsigned long alg_k, alg_a;",
          "786:     if (s->server)",
          "787:         return 1;",
          "789:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "790:     alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "797:     if ((s->tlsext_ecpointformatlist != NULL)",
          "798:         && (s->tlsext_ecpointformatlist_length > 0)",
          "799:         && (s->session->tlsext_ecpointformatlist != NULL)",
          "800:         && (s->session->tlsext_ecpointformatlist_length > 0)",
          "801:         && ((alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA))) {",
          "803:         size_t i;",
          "804:         unsigned char *list;",
          "805:         int found_uncompressed = 0;",
          "806:         list = s->session->tlsext_ecpointformatlist;",
          "807:         for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++) {",
          "808:             if (*(list++) == TLSEXT_ECPOINTFORMAT_uncompressed) {",
          "809:                 found_uncompressed = 1;",
          "810:                 break;",
          "811:             }",
          "812:         }",
          "813:         if (!found_uncompressed) {",
          "814:             SSLerr(SSL_F_TLS_EXT_FINAL_EC_PT_FORMATS,",
          "815:                    SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST);",
          "816:             return 0;",
          "817:         }",
          "818:     }",
          "820:     return 1;",
          "821: }",
          "822: #endif",
          "824: static int tls_ext_init_session_ticket(SSL *s, unsigned int context)",
          "825: {",
          "826:     if (!s->server)",
          "827:         s->tlsext_ticket_expected = 0;",
          "829:     return 1;",
          "830: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764:     return 1;",
          "765: }",
          "767: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "768: static int tls_ext_init_npn(SSL *s, unsigned int context)",
          "769: {",
          "773:     return 1;",
          "774: }",
          "",
          "[Removed Lines]",
          "770:     if (s->server)",
          "771:         s->s3->next_proto_neg_seen = 0;",
          "",
          "[Added Lines]",
          "840: static int tls_ext_final_status_request(SSL *s, unsigned int context, int sent,",
          "841:                                         int *al)",
          "842: {",
          "843:     if (s->server)",
          "844:         return 1;",
          "850:     OPENSSL_free(s->tlsext_ocsp_resp);",
          "851:     s->tlsext_ocsp_resp = NULL;",
          "852:     s->tlsext_ocsp_resplen = 0;",
          "854:     return 1;",
          "855: }",
          "860:     s->s3->next_proto_neg_seen = 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "777: static int tls_ext_init_alpn(SSL *s, unsigned int context)",
          "778: {",
          "779:     if (s->server) {",
          "782:         s->s3->alpn_selected_len = 0;",
          "783:         OPENSSL_free(s->s3->alpn_proposed);",
          "784:         s->s3->alpn_proposed = NULL;",
          "785:         s->s3->alpn_proposed_len = 0;",
          "786:     }",
          "788:     return 1;",
          "789: }",
          "",
          "[Removed Lines]",
          "780:         OPENSSL_free(s->s3->alpn_selected);",
          "781:         s->s3->alpn_selected = NULL;",
          "",
          "[Added Lines]",
          "868:     OPENSSL_free(s->s3->alpn_selected);",
          "869:     s->s3->alpn_selected = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "845: static int tls_ext_init_etm(SSL *s, unsigned int context)",
          "846: {",
          "850:     return 1;",
          "851: }",
          "",
          "[Removed Lines]",
          "847:     if (s->server)",
          "848:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "935:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "937:     return 1;",
          "938: }",
          "940: static int tls_ext_init_ems(SSL *s, unsigned int context)",
          "941: {",
          "942:     if (!s->server)",
          "943:         s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "945:     return 1;",
          "946: }",
          "948: static int tls_ext_final_ems(SSL *s, unsigned int context, int sent, int *al)",
          "949: {",
          "950:     if (!s->server && s->hit) {",
          "955:         if (!(s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) !=",
          "956:             !(s->session->flags & SSL_SESS_FLAG_EXTMS)) {",
          "958:             SSLerr(SSL_F_TLS_EXT_FINAL_EMS, SSL_R_INCONSISTENT_EXTMS);",
          "959:             return 0;",
          "960:         }",
          "961:     }",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1034:     return 1;",
          "1035: }",
          "",
          "[Removed Lines]",
          "1037: static int ssl_scan_serverhello_tlsext(SSL *s, PACKET *pkt, int *al)",
          "1038: {",
          "1039:     RAW_EXTENSION *extensions = NULL;",
          "1040:     PACKET extpkt;",
          "1042: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1043:     s->s3->next_proto_neg_seen = 0;",
          "1044: #endif",
          "1045:     s->tlsext_ticket_expected = 0;",
          "1047:     OPENSSL_free(s->s3->alpn_selected);",
          "1048:     s->s3->alpn_selected = NULL;",
          "1050:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1052:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "1054:     if (!PACKET_as_length_prefixed_2(pkt, &extpkt)) {",
          "1056:         if (s->version != SSL3_VERSION || PACKET_remaining(pkt) != 0) {",
          "1058:             SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, SSL_R_BAD_LENGTH);",
          "1059:             return 0;",
          "1060:         }",
          "1061:         PACKET_null_init(&extpkt);",
          "1062:     }",
          "1069:     if (!tls_collect_extensions(s, &extpkt, EXT_TLS1_2_SERVER_HELLO",
          "1070:                                             | EXT_TLS1_3_SERVER_HELLO",
          "1071:                                             | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "1072:                                             | EXT_TLS1_3_CERTIFICATE,",
          "1073:                                 &extensions, al))",
          "1074:         return 0;",
          "1083:     if (!(s->options & SSL_OP_LEGACY_SERVER_CONNECT)",
          "1084:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "1085:             && !extensions[TLSEXT_IDX_renegotiate].present) {",
          "1087:         SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT,",
          "1088:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "1089:         return 0;",
          "1090:     }",
          "1092:     if (!tls_parse_all_extensions(s, EXT_TLS1_2_SERVER_HELLO",
          "1093:                                      | EXT_TLS1_3_SERVER_HELLO",
          "1094:                                      | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "1095:                                      | EXT_TLS1_3_CERTIFICATE,",
          "1096:                                   extensions,al))",
          "1097:         return 0;",
          "1099:     if (s->hit) {",
          "1104:         if (!(s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) !=",
          "1105:             !(s->session->flags & SSL_SESS_FLAG_EXTMS)) {",
          "1107:             SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, SSL_R_INCONSISTENT_EXTMS);",
          "1108:             return 0;",
          "1109:         }",
          "1110:     }",
          "1112:     return 1;",
          "1113: }",
          "1115: static int ssl_check_serverhello_tlsext(SSL *s)",
          "1116: {",
          "1117:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "1118:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "1120: #ifndef OPENSSL_NO_EC",
          "1126:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1127:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1128:     if ((s->tlsext_ecpointformatlist != NULL)",
          "1129:         && (s->tlsext_ecpointformatlist_length > 0)",
          "1130:         && (s->session->tlsext_ecpointformatlist != NULL)",
          "1131:         && (s->session->tlsext_ecpointformatlist_length > 0)",
          "1132:         && ((alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA))) {",
          "1134:         size_t i;",
          "1135:         unsigned char *list;",
          "1136:         int found_uncompressed = 0;",
          "1137:         list = s->session->tlsext_ecpointformatlist;",
          "1138:         for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++) {",
          "1139:             if (*(list++) == TLSEXT_ECPOINTFORMAT_uncompressed) {",
          "1140:                 found_uncompressed = 1;",
          "1141:                 break;",
          "1142:             }",
          "1143:         }",
          "1144:         if (!found_uncompressed) {",
          "1145:             SSLerr(SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT,",
          "1146:                    SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST);",
          "1147:             return -1;",
          "1148:         }",
          "1149:     }",
          "1150:     ret = SSL_TLSEXT_ERR_OK;",
          "1153:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "1154:         ret =",
          "1155:             s->ctx->tlsext_servername_callback(s, &al,",
          "1156:                                                s->ctx->tlsext_servername_arg);",
          "1157:     else if (s->initial_ctx != NULL",
          "1158:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "1159:         ret =",
          "1160:             s->initial_ctx->tlsext_servername_callback(s, &al,",
          "1161:                                                        s->",
          "1162:                                                        initial_ctx->tlsext_servername_arg);",
          "1168:     OPENSSL_free(s->tlsext_ocsp_resp);",
          "1169:     s->tlsext_ocsp_resp = NULL;",
          "1170:     s->tlsext_ocsp_resplen = 0;",
          "1172:     switch (ret) {",
          "1173:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "1174:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1175:         return -1;",
          "1177:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "1178:         ssl3_send_alert(s, SSL3_AL_WARNING, al);",
          "1179:         return 1;",
          "1181:     case SSL_TLSEXT_ERR_NOACK:",
          "1182:         s->servername_done = 0;",
          "1183:     default:",
          "1184:         return 1;",
          "1185:     }",
          "1186: }",
          "1188: int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt)",
          "1189: {",
          "1190:     int al = -1;",
          "1191:     if (s->version < SSL3_VERSION)",
          "1192:         return 1;",
          "1193:     if (ssl_scan_serverhello_tlsext(s, pkt, &al) <= 0) {",
          "1194:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1195:         return 0;",
          "1196:     }",
          "1198:     if (ssl_check_serverhello_tlsext(s) <= 0) {",
          "1199:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT, SSL_R_SERVERHELLO_TLSEXT);",
          "1200:         return 0;",
          "1201:     }",
          "1202:     return 1;",
          "1203: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058: {",
          "1059:     STACK_OF(SSL_CIPHER) *sk;",
          "1060:     const SSL_CIPHER *c;",
          "1062:     size_t session_id_len;",
          "1063:     const unsigned char *cipherchars;",
          "1064:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "1065:     unsigned int compression;",
          "1066:     unsigned int sversion;",
          "1067:     int protverr;",
          "1068: #ifndef OPENSSL_NO_COMP",
          "1069:     SSL_COMP *comp;",
          "1070: #endif",
          "",
          "[Removed Lines]",
          "1061:     PACKET session_id;",
          "",
          "[Added Lines]",
          "1061:     PACKET session_id, extpkt;",
          "1068:     RAW_EXTENSION *extensions = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1297: #endif",
          "1307:         al = SSL_AD_DECODE_ERROR;",
          "1309:         goto f_err;",
          "1310:     }",
          "1311: #ifndef OPENSSL_NO_SCTP",
          "1312:     if (SSL_IS_DTLS(s) && s->hit) {",
          "1313:         unsigned char sctpauthkey[64];",
          "",
          "[Removed Lines]",
          "1300:     if (!ssl_parse_serverhello_tlsext(s, pkt)) {",
          "1301:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "1302:         goto err;",
          "1303:     }",
          "1305:     if (PACKET_remaining(pkt) != 0) {",
          "1308:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_PACKET_LENGTH);",
          "",
          "[Added Lines]",
          "1301:     if (PACKET_remaining(pkt) == 0) {",
          "1302:         PACKET_null_init(&extpkt);",
          "1303:     } else if (!PACKET_as_length_prefixed_2(pkt, &extpkt)) {",
          "1305:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_LENGTH);",
          "1314:     if (!tls_collect_extensions(s, &extpkt, EXT_TLS1_2_SERVER_HELLO",
          "1315:                                             | EXT_TLS1_3_SERVER_HELLO",
          "1316:                                             | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "1317:                                             | EXT_TLS1_3_CERTIFICATE,",
          "1318:                                 &extensions, &al))",
          "1319:         goto f_err;",
          "1322:     if (!tls_parse_all_extensions(s, EXT_TLS1_2_SERVER_HELLO",
          "1323:                                      | EXT_TLS1_3_SERVER_HELLO",
          "1324:                                      | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "1325:                                      | EXT_TLS1_3_CERTIFICATE,",
          "1326:                                   extensions, &al))",
          "1327:         goto f_err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1350:     return MSG_PROCESS_CONTINUE_READING;",
          "1351:  f_err:",
          "1352:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1354:     ossl_statem_set_error(s);",
          "1355:     return MSG_PROCESS_ERROR;",
          "1356: }",
          "",
          "[Removed Lines]",
          "1353:  err:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: int tls_parse_server_etm(SSL *s, PACKET *pkt, int *al);",
          "267: int tls_parse_server_ems(SSL *s, PACKET *pkt, int *al);",
          "268: int tls_parse_server_key_share(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "269: int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d102d9df8625cb6f75c537b7f2a696bb5f305ff2",
      "candidate_info": {
        "commit_hash": "d102d9df8625cb6f75c537b7f2a696bb5f305ff2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d102d9df8625cb6f75c537b7f2a696bb5f305ff2",
        "files": [
          "include/openssl/ssl.h",
          "ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/record.h",
          "ssl/record/record_locl.h",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_record.c",
          "ssl/s3_msg.c",
          "ssl/ssl_err.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Implement write pipeline support in libssl\n\nUse the new pipeline cipher capability to encrypt multiple records being\nwritten out all in one go. Two new SSL/SSL_CTX parameters can be used to\ncontrol how this works: max_pipelines and split_send_fragment.\n\nmax_pipelines defines the maximum number of pipelines that can ever be used\nin one go for a single connection. It must always be less than or equal to\nSSL_MAX_PIPELINES (currently defined to be 32). By default only one\npipeline will be used (i.e. normal non-parallel operation).\n\nsplit_send_fragment defines how data is split up into pipelines. The number\nof pipelines used will be determined by the amount of data provided to the\nSSL_write call divided by split_send_fragment. For example if\nsplit_send_fragment is set to 2000 and max_pipelines is 4 then:\nSSL_write called with 0-2000 bytes == 1 pipeline used\nSSL_write called with 2001-4000 bytes == 2 pipelines used\nSSL_write called with 4001-6000 bytes == 3 pipelines used\nSSL_write_called with 6001+ bytes == 4 pipelines used\n\nsplit_send_fragment must always be less than or equal to max_send_fragment.\nBy default it is set to be equal to max_send_fragment. This will mean that\nthe same number of records will always be created as would have been\ncreated in the non-parallel case, although the data will be apportioned\ndifferently. In the parallel case data will be spread equally between the\npipelines.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/record.h||ssl/record/record.h",
          "ssl/record/record_locl.h||ssl/record/record_locl.h",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/s3_msg.c||ssl/s3_msg.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ],
          "candidate": [
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: # define SSL_MAX_KEY_ARG_LENGTH                  8",
          "182: # define SSL_MAX_MASTER_KEY_LENGTH               48",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: # define SSL_MAX_PIPELINES  32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1233: # define SSL_CTRL_GET_EXTMS_SUPPORT              122",
          "1234: # define SSL_CTRL_SET_MIN_PROTO_VERSION          123",
          "1235: # define SSL_CTRL_SET_MAX_PROTO_VERSION          124",
          "1236: # define SSL_CERT_SET_FIRST                      1",
          "1237: # define SSL_CERT_SET_NEXT                       2",
          "1238: # define SSL_CERT_SET_SERVER                     3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1239: # define SSL_CTRL_SET_SPLIT_SEND_FRAGMENT        125",
          "1240: # define SSL_CTRL_SET_MAX_PIPELINES              126",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1794:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)",
          "1795: # define SSL_set_max_send_fragment(ssl,m) \\",
          "1796:         SSL_ctrl(ssl,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)",
          "1799: # ifndef OPENSSL_NO_DH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1802: # define SSL_CTX_set_split_send_fragment(ctx,m) \\",
          "1803:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)",
          "1804: # define SSL_set_split_send_fragment(ssl,m) \\",
          "1805:         SSL_ctrl(ssl,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)",
          "1806: # define SSL_CTX_set_max_pipelines(ctx,m) \\",
          "1807:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)",
          "1808: # define SSL_set_max_pipelines(ssl,m) \\",
          "1809:         SSL_ctrl(ssl,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2193: # define SSL_F_TLS1_CHANGE_CIPHER_STATE                   209",
          "2194: # define SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS            341",
          "2195: # define SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT              274",
          "2196: # define SSL_F_TLS1_EXPORT_KEYING_MATERIAL                314",
          "2197: # define SSL_F_TLS1_GET_CURVELIST                         338",
          "2198: # define SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT            275",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2209: # define SSL_F_TLS1_ENC                                   401",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2412: # define SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE          199",
          "2413: # define SSL_R_PEM_NAME_BAD_PREFIX                        391",
          "2414: # define SSL_R_PEM_NAME_TOO_SHORT                         392",
          "2415: # define SSL_R_PRE_MAC_LENGTH_TOO_LONG                    205",
          "2416: # define SSL_R_PROTOCOL_IS_SHUTDOWN                       207",
          "2417: # define SSL_R_PSK_IDENTITY_NOT_FOUND                     223",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2429: # define SSL_R_PIPELINE_FAILURE                           406",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:     SSL3_BUFFER *wb;",
          "1040:     SSL_SESSION *sess;",
          "",
          "[Removed Lines]",
          "1042:     wb = &s->rlayer.wbuf;",
          "",
          "[Added Lines]",
          "1042:     wb = &s->rlayer.wbuf[0];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1130:     if (s->compress != NULL) {",
          "1132:             SSLerr(SSL_F_DO_DTLS1_WRITE, SSL_R_COMPRESSION_FAILURE);",
          "1133:             goto err;",
          "1134:         }",
          "",
          "[Removed Lines]",
          "1131:         if (!ssl3_do_compress(s)) {",
          "",
          "[Added Lines]",
          "1131:         if (!ssl3_do_compress(s, wr)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:     if (mac_size != 0) {",
          "1149:                 &(p[SSL3_RECORD_get_length(wr) + eivlen]), 1) < 0)",
          "1150:             goto err;",
          "1151:         SSL3_RECORD_add_length(wr, mac_size);",
          "",
          "[Removed Lines]",
          "1148:         if (s->method->ssl3_enc->mac(s,",
          "",
          "[Added Lines]",
          "1148:         if (s->method->ssl3_enc->mac(s, wr,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1158:     if (eivlen)",
          "1159:         SSL3_RECORD_add_length(wr, eivlen);",
          "1162:         goto err;",
          "",
          "[Removed Lines]",
          "1161:     if (s->method->ssl3_enc->enc(s, 1) < 1)",
          "",
          "[Added Lines]",
          "1161:     if (s->method->ssl3_enc->enc(s, wr, 1, 1) < 1)",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: void RECORD_LAYER_clear(RECORD_LAYER *rl)",
          "143: {",
          "144:     rl->rstate = SSL_ST_READ_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     unsigned int pipes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     rl->wpend_buf = NULL;",
          "163:     SSL3_BUFFER_clear(&rl->rbuf);",
          "165:     SSL3_RECORD_clear(&rl->rrec);",
          "166:     SSL3_RECORD_clear(&rl->wrec);",
          "",
          "[Removed Lines]",
          "164:     SSL3_BUFFER_clear(&rl->wbuf);",
          "",
          "[Added Lines]",
          "166:     for(pipes = 0; pipes < rl->numwpipes; pipes++)",
          "167:         SSL3_BUFFER_clear(&rl->wbuf[pipes]);",
          "168:     rl->numwpipes = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176: {",
          "177:     if (SSL3_BUFFER_is_initialised(&rl->rbuf))",
          "178:         ssl3_release_read_buffer(rl->s);",
          "180:         ssl3_release_write_buffer(rl->s);",
          "181:     SSL3_RECORD_release(&rl->rrec);",
          "182: }",
          "",
          "[Removed Lines]",
          "179:     if (SSL3_BUFFER_is_initialised(&rl->wbuf))",
          "",
          "[Added Lines]",
          "183:     if (rl->numwpipes > 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189: int RECORD_LAYER_write_pending(RECORD_LAYER *rl)",
          "190: {",
          "192: }",
          "194: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len)",
          "",
          "[Removed Lines]",
          "191:     return SSL3_BUFFER_get_left(&rl->wbuf) != 0;",
          "",
          "[Added Lines]",
          "195:     return (rl->numwpipes > 0)",
          "196:             && SSL3_BUFFER_get_left(&rl->wbuf[rl->numwpipes-1]) != 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:     int tot;",
          "434:     unsigned int n, nw;",
          "435: #if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "437:     unsigned int u_len = (unsigned int)len;",
          "438: #endif",
          "440:     int i;",
          "442:     if (len < 0) {",
          "",
          "[Removed Lines]",
          "436:     unsigned int max_send_fragment;",
          "439:     SSL3_BUFFER *wb = &s->rlayer.wbuf;",
          "",
          "[Added Lines]",
          "441:     unsigned int max_send_fragment, split_send_fragment, maxpipes;",
          "444:     SSL3_BUFFER *wb = &s->rlayer.wbuf[0];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "622:     }",
          "624:     n = (len - tot);",
          "625:     for (;;) {",
          "628:         else",
          "632:         if (i <= 0) {",
          "634:             s->rlayer.wnum = tot;",
          "",
          "[Removed Lines]",
          "626:         if (n > s->max_send_fragment)",
          "627:             nw = s->max_send_fragment;",
          "629:             nw = n;",
          "631:         i = do_ssl3_write(s, type, &(buf[tot]), nw, 0);",
          "",
          "[Added Lines]",
          "631:     split_send_fragment = s->split_send_fragment;",
          "638:     maxpipes = s->max_pipelines;",
          "639:     if (maxpipes > SSL_MAX_PIPELINES) {",
          "644:         SSLerr(SSL_F_SSL3_WRITE_BYTES, ERR_R_INTERNAL_ERROR);",
          "645:         return -1;",
          "646:     }",
          "647:     if (maxpipes == 0",
          "648:             || s->enc_write_ctx == NULL",
          "649:             || !(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx))",
          "650:                  & EVP_CIPH_FLAG_PIPELINE)",
          "651:             || !SSL_USE_EXPLICIT_IV(s))",
          "652:         maxpipes = 1;",
          "653:     if (s->max_send_fragment == 0 || split_send_fragment > s->max_send_fragment",
          "654:             || split_send_fragment == 0) {",
          "659:         SSLerr(SSL_F_SSL3_WRITE_BYTES, ERR_R_INTERNAL_ERROR);",
          "660:         return -1;",
          "661:     }",
          "664:         unsigned int pipelens[SSL_MAX_PIPELINES], tmppipelen, remain;",
          "665:         unsigned int numpipes, j;",
          "667:         if (n == 0)",
          "668:             numpipes = 1;",
          "670:             numpipes = ((n - 1) / split_send_fragment) + 1;",
          "671:         if (numpipes > maxpipes)",
          "672:             numpipes = maxpipes;",
          "674:         if (n / numpipes >= s->max_send_fragment) {",
          "679:             for (j = 0; j < numpipes; j++) {",
          "680:                 pipelens[j] = s->max_send_fragment;",
          "681:             }",
          "682:         } else {",
          "684:             tmppipelen = n / numpipes;",
          "685:             remain = n % numpipes;",
          "686:             for (j = 0; j < numpipes; j++) {",
          "687:                 pipelens[j] = tmppipelen;",
          "688:                 if (j < remain)",
          "689:                     pipelens[j]++;",
          "690:             }",
          "691:         }",
          "693:         i = do_ssl3_write(s, type, &(buf[tot]), pipelens, numpipes, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "657: }",
          "659: int do_ssl3_write(SSL *s, int type, const unsigned char *buf,",
          "661: {",
          "663:     int i, mac_size, clear = 0;",
          "664:     int prefix_len = 0;",
          "665:     int eivlen;",
          "666:     size_t align = 0;",
          "669:     SSL_SESSION *sess;",
          "679:     if (s->s3->alert_dispatch) {",
          "",
          "[Removed Lines]",
          "660:                   unsigned int len, int create_empty_fragment)",
          "662:     unsigned char *p, *plen;",
          "667:     SSL3_RECORD *wr;",
          "668:     SSL3_BUFFER *wb = &s->rlayer.wbuf;",
          "675:     if (SSL3_BUFFER_get_left(wb) != 0)",
          "676:         return (ssl3_write_pending(s, type, buf, len));",
          "",
          "[Added Lines]",
          "722:                   unsigned int *pipelens, unsigned int numpipes,",
          "723:                   int create_empty_fragment)",
          "725:     unsigned char *outbuf[SSL_MAX_PIPELINES], *plen[SSL_MAX_PIPELINES];",
          "726:     SSL3_RECORD wr[SSL_MAX_PIPELINES];",
          "731:     SSL3_BUFFER *wb;",
          "733:     unsigned int totlen = 0;",
          "734:     unsigned int j;",
          "736:     for (j = 0; j < numpipes; j++)",
          "737:         totlen += pipelens[j];",
          "742:     if (RECORD_LAYER_write_pending(&s->rlayer))",
          "743:         return (ssl3_write_pending(s, type, buf, totlen));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "684:     }",
          "688:             return -1;",
          "691:         return 0;",
          "694:     sess = s->session;",
          "696:     if ((sess == NULL) ||",
          "",
          "[Removed Lines]",
          "686:     if (!SSL3_BUFFER_is_initialised(wb))",
          "687:         if (!ssl3_setup_write_buffer(s))",
          "690:     if (len == 0 && !create_empty_fragment)",
          "693:     wr = &s->rlayer.wrec;",
          "",
          "[Added Lines]",
          "753:     if (s->rlayer.numwpipes < numpipes)",
          "754:         if (!ssl3_setup_write_buffer(s, numpipes))",
          "757:     if (totlen == 0 && !create_empty_fragment)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "724:             if (prefix_len <= 0)",
          "725:                 goto err;",
          "",
          "[Removed Lines]",
          "723:             prefix_len = do_ssl3_write(s, type, buf, 0, 1);",
          "",
          "[Added Lines]",
          "789:             unsigned int tmppipelen = 0;",
          "791:             prefix_len = do_ssl3_write(s, type, buf, &tmppipelen, 1, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "737:     }",
          "739:     if (create_empty_fragment) {",
          "740: #if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:         wb = &s->rlayer.wbuf[0];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "746:         align = (size_t)SSL3_BUFFER_get_buf(wb) + 2 * SSL3_RT_HEADER_LENGTH;",
          "747:         align = (0-align) & (SSL3_ALIGN_PAYLOAD - 1);",
          "748: #endif",
          "750:         SSL3_BUFFER_set_offset(wb, align);",
          "751:     } else if (prefix_len) {",
          "753:     } else {",
          "754: #if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0",
          "757: #endif",
          "760:     }",
          "782:     if (s->enc_write_ctx && SSL_USE_EXPLICIT_IV(s)) {",
          "783:         int mode = EVP_CIPHER_CTX_mode(s->enc_write_ctx);",
          "",
          "[Removed Lines]",
          "749:         p = SSL3_BUFFER_get_buf(wb) + align;",
          "752:         p = SSL3_BUFFER_get_buf(wb) + SSL3_BUFFER_get_offset(wb) + prefix_len;",
          "755:         align = (size_t)SSL3_BUFFER_get_buf(wb) + SSL3_RT_HEADER_LENGTH;",
          "756:         align = (0-align) & (SSL3_ALIGN_PAYLOAD - 1);",
          "758:         p = SSL3_BUFFER_get_buf(wb) + align;",
          "759:         SSL3_BUFFER_set_offset(wb, align);",
          "765:     SSL3_RECORD_set_type(wr, type);",
          "772:     if (SSL_get_state(s) == TLS_ST_CW_CLNT_HELLO",
          "773:         && !s->renegotiate && TLS1_get_version(s) > TLS1_VERSION)",
          "775:     else",
          "779:     plen = p;",
          "780:     p += 2;",
          "",
          "[Added Lines]",
          "818:         outbuf[0] = SSL3_BUFFER_get_buf(wb) + align;",
          "821:         wb = &s->rlayer.wbuf[0];",
          "822:         outbuf[0] = SSL3_BUFFER_get_buf(wb) + SSL3_BUFFER_get_offset(wb)",
          "823:                     + prefix_len;",
          "825:         for (j=0; j < numpipes; j++) {",
          "826:             wb = &s->rlayer.wbuf[j];",
          "828:             align = (size_t)SSL3_BUFFER_get_buf(wb) + SSL3_RT_HEADER_LENGTH;",
          "829:             align = (-align) & (SSL3_ALIGN_PAYLOAD - 1);",
          "831:             outbuf[j] = SSL3_BUFFER_get_buf(wb) + align;",
          "832:             SSL3_BUFFER_set_offset(wb, align);",
          "833:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "796:     } else",
          "797:         eivlen = 0;",
          "849:     }",
          "871:     }",
          "881:     s->rlayer.wpend_buf = buf;",
          "882:     s->rlayer.wpend_type = type;",
          "887:  err:",
          "888:     return -1;",
          "889: }",
          "",
          "[Removed Lines]",
          "800:     SSL3_RECORD_set_data(wr, p + eivlen);",
          "801:     SSL3_RECORD_set_length(wr, (int)len);",
          "802:     SSL3_RECORD_set_input(wr, (unsigned char *)buf);",
          "810:     if (s->compress != NULL) {",
          "811:         if (!ssl3_do_compress(s)) {",
          "812:             SSLerr(SSL_F_DO_SSL3_WRITE, SSL_R_COMPRESSION_FAILURE);",
          "813:             goto err;",
          "814:         }",
          "815:     } else {",
          "816:         memcpy(wr->data, wr->input, wr->length);",
          "817:         SSL3_RECORD_reset_input(wr);",
          "818:     }",
          "826:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "827:         if (s->method->ssl3_enc->mac(s, &(p[wr->length + eivlen]), 1) < 0)",
          "828:             goto err;",
          "829:         SSL3_RECORD_add_length(wr, mac_size);",
          "830:     }",
          "832:     SSL3_RECORD_set_data(wr, p);",
          "833:     SSL3_RECORD_reset_input(wr);",
          "835:     if (eivlen) {",
          "839:         SSL3_RECORD_add_length(wr, eivlen);",
          "840:     }",
          "842:     if (s->method->ssl3_enc->enc(s, 1) < 1)",
          "843:         goto err;",
          "845:     if (SSL_USE_ETM(s) && mac_size != 0) {",
          "846:         if (s->method->ssl3_enc->mac(s, p + wr->length, 1) < 0)",
          "847:             goto err;",
          "848:         SSL3_RECORD_add_length(wr, mac_size);",
          "852:     s2n(SSL3_RECORD_get_length(wr), plen);",
          "854:     if (s->msg_callback)",
          "855:         s->msg_callback(1, 0, SSL3_RT_HEADER, plen - 5, 5, s,",
          "856:                         s->msg_callback_arg);",
          "863:     SSL3_RECORD_add_length(wr, SSL3_RT_HEADER_LENGTH);",
          "865:     if (create_empty_fragment) {",
          "870:         return SSL3_RECORD_get_length(wr);",
          "874:     SSL3_BUFFER_set_left(wb, prefix_len + SSL3_RECORD_get_length(wr));",
          "880:     s->rlayer.wpend_tot = len;",
          "883:     s->rlayer.wpend_ret = len;",
          "886:     return ssl3_write_pending(s, type, buf, len);",
          "",
          "[Added Lines]",
          "855:     totlen = 0;",
          "857:     memset(wr, 0, sizeof wr);",
          "858:     for (j=0; j < numpipes; j++) {",
          "861:         SSL3_RECORD_set_type(&wr[j], type);",
          "868:         if (SSL_get_state(s) == TLS_ST_CW_CLNT_HELLO",
          "869:             && !s->renegotiate && TLS1_get_version(s) > TLS1_VERSION)",
          "871:         else",
          "875:         plen[j] = outbuf[j];",
          "876:         outbuf[j] += 2;",
          "879:         SSL3_RECORD_set_data(&wr[j], outbuf[j] + eivlen);",
          "880:         SSL3_RECORD_set_length(&wr[j], (int)pipelens[j]);",
          "881:         SSL3_RECORD_set_input(&wr[j], (unsigned char *)&buf[totlen]);",
          "882:         totlen += pipelens[j];",
          "889:         if (s->compress != NULL) {",
          "890:             if (!ssl3_do_compress(s, &wr[j])) {",
          "891:                 SSLerr(SSL_F_DO_SSL3_WRITE, SSL_R_COMPRESSION_FAILURE);",
          "892:                 goto err;",
          "893:             }",
          "894:         } else {",
          "895:             memcpy(wr[j].data, wr[j].input, wr[j].length);",
          "896:             SSL3_RECORD_reset_input(&wr[j]);",
          "897:         }",
          "905:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "906:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "907:                     &(outbuf[j][wr[j].length + eivlen]), 1) < 0)",
          "908:                 goto err;",
          "909:             SSL3_RECORD_add_length(&wr[j], mac_size);",
          "910:         }",
          "913:         SSL3_RECORD_set_data(&wr[j], outbuf[j]);",
          "914:         SSL3_RECORD_reset_input(&wr[j]);",
          "916:         if (eivlen) {",
          "920:             SSL3_RECORD_add_length(&wr[j], eivlen);",
          "921:         }",
          "924:     if (s->method->ssl3_enc->enc(s, wr, numpipes, 1) < 1)",
          "925:         goto err;",
          "927:     for (j=0; j < numpipes; j++) {",
          "928:         if (SSL_USE_ETM(s) && mac_size != 0) {",
          "929:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "930:                                          outbuf[j] + wr[j].length, 1) < 0)",
          "931:                 goto err;",
          "932:             SSL3_RECORD_add_length(&wr[j], mac_size);",
          "933:         }",
          "936:         s2n(SSL3_RECORD_get_length(&wr[j]), plen[j]);",
          "938:         if (s->msg_callback)",
          "939:             s->msg_callback(1, 0, SSL3_RT_HEADER, plen[j] - 5, 5, s,",
          "940:                             s->msg_callback_arg);",
          "947:         SSL3_RECORD_add_length(&wr[j], SSL3_RT_HEADER_LENGTH);",
          "949:         if (create_empty_fragment) {",
          "954:             if (j > 0) {",
          "956:                 SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
          "957:                 goto err;",
          "958:             }",
          "959:             return SSL3_RECORD_get_length(wr);",
          "960:         }",
          "963:         SSL3_BUFFER_set_left(&s->rlayer.wbuf[j],",
          "964:             prefix_len + SSL3_RECORD_get_length(&wr[j]));",
          "973:     s->rlayer.wpend_tot = totlen;",
          "976:     s->rlayer.wpend_ret = totlen;",
          "979:     return ssl3_write_pending(s, type, buf, totlen);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "893:                        unsigned int len)",
          "894: {",
          "895:     int i;",
          "899:     if ((s->rlayer.wpend_tot > (int)len)",
          "",
          "[Removed Lines]",
          "896:     SSL3_BUFFER *wb = &s->rlayer.wbuf;",
          "",
          "[Added Lines]",
          "989:     SSL3_BUFFER *wb = s->rlayer.wbuf;",
          "990:     unsigned int currbuf = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "905:     }",
          "907:     for (;;) {",
          "908:         clear_sys_error();",
          "909:         if (s->wbio != NULL) {",
          "910:             s->rwstate = SSL_WRITING;",
          "911:             i = BIO_write(s->wbio,",
          "914:         } else {",
          "915:             SSLerr(SSL_F_SSL3_WRITE_PENDING, SSL_R_BIO_NOT_SET);",
          "916:             i = -1;",
          "917:         }",
          "921:             s->rwstate = SSL_NOTHING;",
          "922:             return (s->rlayer.wpend_ret);",
          "923:         } else if (i <= 0) {",
          "",
          "[Removed Lines]",
          "912:                 (char *)&(SSL3_BUFFER_get_buf(wb)[SSL3_BUFFER_get_offset(wb)]),",
          "913:                 (unsigned int)SSL3_BUFFER_get_left(wb));",
          "918:         if (i == SSL3_BUFFER_get_left(wb)) {",
          "919:             SSL3_BUFFER_set_left(wb, 0);",
          "920:             SSL3_BUFFER_add_offset(wb, i);",
          "",
          "[Added Lines]",
          "1003:         if (SSL3_BUFFER_get_left(&wb[currbuf]) == 0",
          "1004:                 && currbuf < s->rlayer.numwpipes - 1) {",
          "1005:             currbuf++;",
          "1006:             continue;",
          "1007:         }",
          "1012:                 (char *)&(SSL3_BUFFER_get_buf(&wb[currbuf])[",
          "1013:                                 SSL3_BUFFER_get_offset(&wb[currbuf])]),",
          "1014:                 (unsigned int)SSL3_BUFFER_get_left(&wb[currbuf]));",
          "1019:         if (i == SSL3_BUFFER_get_left(&wb[currbuf])) {",
          "1020:             SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "1021:             SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "1022:             if (currbuf + 1 < s->rlayer.numwpipes)",
          "1023:                 continue;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "930:             }",
          "931:             return (i);",
          "932:         }",
          "935:     }",
          "936: }",
          "",
          "[Removed Lines]",
          "929:                 SSL3_BUFFER_set_left(wb, 0);",
          "933:         SSL3_BUFFER_add_offset(wb, i);",
          "934:         SSL3_BUFFER_add_left(wb, -i);",
          "",
          "[Added Lines]",
          "1032:                 SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "1036:         SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "1037:         SSL3_BUFFER_add_left(&wb[currbuf], -i);",
          "",
          "---------------"
        ],
        "ssl/record/record.h||ssl/record/record.h": [
          "File: ssl/record/record.h -> ssl/record/record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:     int read_ahead;",
          "254:     int rstate;",
          "256:     SSL3_BUFFER rbuf;",
          "260:     SSL3_RECORD rrec;",
          "",
          "[Removed Lines]",
          "258:     SSL3_BUFFER wbuf;",
          "",
          "[Added Lines]",
          "256:     unsigned int numwpipes;",
          "260:     SSL3_BUFFER wbuf[SSL_MAX_PIPELINES];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326: __owur int ssl3_pending(const SSL *s);",
          "327: __owur int ssl3_write_bytes(SSL *s, int type, const void *buf, int len);",
          "328: __owur int do_ssl3_write(SSL *s, int type, const unsigned char *buf,",
          "330: __owur int ssl3_read_bytes(SSL *s, int type, int *recvd_type,",
          "331:                            unsigned char *buf, int len, int peek);",
          "332: __owur int ssl3_setup_buffers(SSL *s);",
          "335: __owur int ssl3_write_pending(SSL *s, int type, const unsigned char *buf,",
          "336:                        unsigned int len);",
          "339: int DTLS_RECORD_LAYER_new(RECORD_LAYER *rl);",
          "340: void DTLS_RECORD_LAYER_free(RECORD_LAYER *rl);",
          "341: void DTLS_RECORD_LAYER_clear(RECORD_LAYER *rl);",
          "",
          "[Removed Lines]",
          "329:                          unsigned int len, int create_empty_fragment);",
          "333: __owur int ssl3_enc(SSL *s, int send_data);",
          "334: __owur int n_ssl3_mac(SSL *ssl, unsigned char *md, int send_data);",
          "337: __owur int tls1_enc(SSL *s, int snd);",
          "338: __owur int tls1_mac(SSL *ssl, unsigned char *md, int snd);",
          "",
          "[Added Lines]",
          "331:                          unsigned int *pipelens, unsigned int numpipes,",
          "332:                          int create_empty_fragment);",
          "336: __owur int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int numpipes,",
          "337:                     int send);",
          "338: __owur int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);",
          "341: __owur int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int numpipes,",
          "342:                     int send);",
          "343: __owur int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);",
          "",
          "---------------"
        ],
        "ssl/record/record_locl.h||ssl/record/record_locl.h": [
          "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->rbuf)",
          "123: #define RECORD_LAYER_get_rrec(rl)               (&(rl)->rrec)",
          "124: #define RECORD_LAYER_get_wrec(rl)               (&(rl)->wrec)",
          "125: #define RECORD_LAYER_set_packet(rl, p)          ((rl)->packet = (p))",
          "",
          "[Removed Lines]",
          "122: #define RECORD_LAYER_get_wbuf(rl)               (&(rl)->wbuf)",
          "",
          "[Added Lines]",
          "122: #define RECORD_LAYER_get_wbuf(rl)               ((rl)->wbuf)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, const unsigned char *d, int n);",
          "166: void SSL3_BUFFER_release(SSL3_BUFFER *b);",
          "167: __owur int ssl3_setup_read_buffer(SSL *s);",
          "169: int ssl3_release_read_buffer(SSL *s);",
          "170: int ssl3_release_write_buffer(SSL *s);",
          "",
          "[Removed Lines]",
          "168: __owur int ssl3_setup_write_buffer(SSL *s);",
          "",
          "[Added Lines]",
          "168: __owur int ssl3_setup_write_buffer(SSL *s, unsigned int numwpipes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194: int SSL3_RECORD_setup(SSL3_RECORD *r);",
          "195: void SSL3_RECORD_set_seq_num(SSL3_RECORD *r, const unsigned char *seq_num);",
          "196: int ssl3_get_record(SSL *s);",
          "198: __owur int ssl3_do_uncompress(SSL *ssl);",
          "199: void ssl3_cbc_copy_mac(unsigned char *out,",
          "200:                        const SSL3_RECORD *rec, unsigned md_size);",
          "",
          "[Removed Lines]",
          "197: __owur int ssl3_do_compress(SSL *ssl);",
          "",
          "[Added Lines]",
          "197: __owur int ssl3_do_compress(SSL *ssl, SSL3_RECORD *wr);",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     return 0;",
          "177: }",
          "180: {",
          "181:     unsigned char *p;",
          "182:     size_t len, align = 0, headerlen;",
          "183:     SSL3_BUFFER *wb;",
          "187:     if (SSL_IS_DTLS(s))",
          "188:         headerlen = DTLS1_RT_HEADER_LENGTH + 1;",
          "",
          "[Removed Lines]",
          "179: int ssl3_setup_write_buffer(SSL *s)",
          "185:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "",
          "[Added Lines]",
          "179: int ssl3_setup_write_buffer(SSL *s, unsigned int numwpipes)",
          "184:     unsigned int currpipe;",
          "186:     s->rlayer.numwpipes = numwpipes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:     align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);",
          "194: #endif",
          "199: #ifndef OPENSSL_NO_COMP",
          "202: #endif",
          "210:     }",
          "212:     return 1;",
          "",
          "[Removed Lines]",
          "196:     if (wb->buf == NULL) {",
          "197:         len = s->max_send_fragment",
          "198:             + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "200:         if (ssl_allow_compression(s))",
          "201:             len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;",
          "203:         if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))",
          "204:             len += headerlen + align + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;",
          "206:         if ((p = OPENSSL_malloc(len)) == NULL)",
          "207:             goto err;",
          "208:         wb->buf = p;",
          "209:         wb->len = len;",
          "",
          "[Added Lines]",
          "198:     len = s->max_send_fragment",
          "199:         + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "201:     if (ssl_allow_compression(s))",
          "202:         len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;",
          "204:     if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))",
          "205:         len += headerlen + align + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;",
          "207:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "208:     for (currpipe = 0; currpipe < numwpipes; currpipe++) {",
          "209:         if (wb[currpipe].buf == NULL) {",
          "210:             if ((p = OPENSSL_malloc(len)) == NULL) {",
          "211:                 s->rlayer.numwpipes = currpipe;",
          "212:                 goto err;",
          "213:             }",
          "214:             wb[currpipe].buf = p;",
          "215:             wb[currpipe].len = len;",
          "216:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220: {",
          "221:     if (!ssl3_setup_read_buffer(s))",
          "222:         return 0;",
          "224:         return 0;",
          "225:     return 1;",
          "226: }",
          "",
          "[Removed Lines]",
          "223:     if (!ssl3_setup_write_buffer(s))",
          "",
          "[Added Lines]",
          "230:     if (!ssl3_setup_write_buffer(s, 1))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228: int ssl3_release_write_buffer(SSL *s)",
          "229: {",
          "230:     SSL3_BUFFER *wb;",
          "236:     return 1;",
          "237: }",
          "",
          "[Removed Lines]",
          "232:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "234:     OPENSSL_free(wb->buf);",
          "235:     wb->buf = NULL;",
          "",
          "[Added Lines]",
          "238:     unsigned int pipes;",
          "240:     pipes = s->rlayer.numwpipes;",
          "241:     while (pipes > 0) {",
          "242:         wb = &RECORD_LAYER_get_wbuf(&s->rlayer)[pipes - 1];",
          "244:         OPENSSL_free(wb->buf);",
          "245:         wb->buf = NULL;",
          "246:         pipes--;",
          "247:     }",
          "248:     s->rlayer.numwpipes = 0;",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:         }",
          "374:         rr->length -= mac_size;",
          "375:         mac = rr->data + rr->length;",
          "377:         if (i < 0 || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0) {",
          "378:             al = SSL_AD_BAD_RECORD_MAC;",
          "379:             SSLerr(SSL_F_SSL3_GET_RECORD,",
          "",
          "[Removed Lines]",
          "376:         i = s->method->ssl3_enc->mac(s, md, 0 /* not send */ );",
          "",
          "[Added Lines]",
          "376:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:         }",
          "383:     }",
          "",
          "[Removed Lines]",
          "385:     enc_err = s->method->ssl3_enc->enc(s, 0);",
          "",
          "[Added Lines]",
          "385:     enc_err = s->method->ssl3_enc->enc(s, rr, 1, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:             mac = &rr->data[rr->length];",
          "450:         }",
          "453:         if (i < 0 || mac == NULL",
          "454:             || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0)",
          "455:             enc_err = -1;",
          "",
          "[Removed Lines]",
          "452:         i = s->method->ssl3_enc->mac(s, md, 0 /* not send */ );",
          "",
          "[Added Lines]",
          "452:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     return (1);",
          "543: }",
          "546: {",
          "547: #ifndef OPENSSL_NO_COMP",
          "548:     int i;",
          "552:     i = COMP_compress_block(ssl->compress, wr->data,",
          "553:                             SSL3_RT_MAX_COMPRESSED_LENGTH,",
          "554:                             wr->input, (int)wr->length);",
          "",
          "[Removed Lines]",
          "545: int ssl3_do_compress(SSL *ssl)",
          "549:     SSL3_RECORD *wr;",
          "551:     wr = RECORD_LAYER_get_wrec(&ssl->rlayer);",
          "",
          "[Added Lines]",
          "545: int ssl3_do_compress(SSL *ssl, SSL3_RECORD *wr)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "576: {",
          "577:     SSL3_RECORD *rec;",
          "578:     EVP_CIPHER_CTX *ds;",
          "",
          "[Removed Lines]",
          "575: int ssl3_enc(SSL *s, int send)",
          "",
          "[Added Lines]",
          "573: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int numpipes, int send)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "580:     int bs, i, mac_size = 0;",
          "581:     const EVP_CIPHER *enc;",
          "583:     if (send) {",
          "584:         ds = s->enc_write_ctx;",
          "586:         if (s->enc_write_ctx == NULL)",
          "587:             enc = NULL;",
          "588:         else",
          "589:             enc = EVP_CIPHER_CTX_cipher(s->enc_write_ctx);",
          "590:     } else {",
          "591:         ds = s->enc_read_ctx;",
          "593:         if (s->enc_read_ctx == NULL)",
          "594:             enc = NULL;",
          "595:         else",
          "",
          "[Removed Lines]",
          "585:         rec = RECORD_LAYER_get_wrec(&s->rlayer);",
          "592:         rec = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "[Added Lines]",
          "581:     rec = inrecs;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "650: {",
          "652:     EVP_CIPHER_CTX *ds;",
          "654:     int bs, i, j, k, pad = 0, ret, mac_size = 0;",
          "655:     const EVP_CIPHER *enc;",
          "657:     if (send) {",
          "658:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "",
          "[Removed Lines]",
          "649: int tls1_enc(SSL *s, int send)",
          "651:     SSL3_RECORD *rec;",
          "653:     unsigned long l;",
          "",
          "[Added Lines]",
          "646: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int numpipes, int send)",
          "649:     size_t reclen[SSL_MAX_PIPELINES];",
          "650:     unsigned char buf[SSL_MAX_PIPELINES][EVP_AEAD_TLS1_AAD_LEN];",
          "653:     unsigned int ctr;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "660:             OPENSSL_assert(n >= 0);",
          "661:         }",
          "662:         ds = s->enc_write_ctx;",
          "664:         if (s->enc_write_ctx == NULL)",
          "665:             enc = NULL;",
          "666:         else {",
          "",
          "[Removed Lines]",
          "663:         rec = RECORD_LAYER_get_wrec(&s->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "673:             else",
          "674:                 ivlen = 0;",
          "675:             if (ivlen > 1) {",
          "684:             }",
          "685:         }",
          "686:     } else {",
          "",
          "[Removed Lines]",
          "676:                 if (rec->data != rec->input)",
          "681:                     fprintf(stderr, \"tls1_enc(): rec->data != rec->input\\n\");",
          "682:                 else if (RAND_bytes(rec->input, ivlen) <= 0)",
          "683:                     return -1;",
          "",
          "[Added Lines]",
          "673:                 for (ctr = 0; ctr < numpipes; ctr++) {",
          "674:                     if (recs[ctr].data != recs[ctr].input) {",
          "679:                         SSLerr(SSL_F_TLS1_ENC, ERR_R_INTERNAL_ERROR);",
          "680:                         return -1;",
          "681:                     } else if (RAND_bytes(recs[ctr].input, ivlen) <= 0) {",
          "682:                         SSLerr(SSL_F_TLS1_ENC, ERR_R_INTERNAL_ERROR);",
          "683:                         return -1;",
          "684:                     }",
          "685:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "689:             OPENSSL_assert(n >= 0);",
          "690:         }",
          "691:         ds = s->enc_read_ctx;",
          "693:         if (s->enc_read_ctx == NULL)",
          "694:             enc = NULL;",
          "695:         else",
          "",
          "[Removed Lines]",
          "692:         rec = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "697:     }",
          "699:     if ((s->session == NULL) || (ds == NULL) || (enc == NULL)) {",
          "702:         ret = 1;",
          "703:     } else {",
          "726:                 }",
          "753:         }",
          "758:         }",
          "762:             ? (i < 0)",
          "763:             : (i == 0))",
          "765:         if (send == 0) {",
          "766:             if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {",
          "770:             } else if (EVP_CIPHER_mode(enc) == EVP_CIPH_CCM_MODE) {",
          "774:             }",
          "775:         }",
          "777:         ret = 1;",
          "778:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "779:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "782:         if (pad && !send)",
          "784:     }",
          "785:     return ret;",
          "786: }",
          "789: {",
          "791:     unsigned char *mac_sec, *seq;",
          "792:     const EVP_MD_CTX *hash;",
          "793:     unsigned char *p, rec_char;",
          "",
          "[Removed Lines]",
          "700:         memmove(rec->data, rec->input, rec->length);",
          "701:         rec->input = rec->data;",
          "704:         l = rec->length;",
          "705:         bs = EVP_CIPHER_CTX_block_size(ds);",
          "707:         if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds)) & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "708:             unsigned char buf[EVP_AEAD_TLS1_AAD_LEN], *seq;",
          "710:             seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "711:                 : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "713:             if (SSL_IS_DTLS(s)) {",
          "714:                 unsigned char dtlsseq[9], *p = dtlsseq;",
          "716:                 s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "717:                     DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "718:                 memcpy(p, &seq[2], 6);",
          "719:                 memcpy(buf, dtlsseq, 8);",
          "720:             } else {",
          "721:                 memcpy(buf, seq, 8);",
          "723:                     ++seq[i];",
          "724:                     if (seq[i] != 0)",
          "725:                         break;",
          "727:             }",
          "729:             buf[8] = rec->type;",
          "730:             buf[9] = (unsigned char)(s->version >> 8);",
          "731:             buf[10] = (unsigned char)(s->version);",
          "732:             buf[11] = rec->length >> 8;",
          "733:             buf[12] = rec->length & 0xff;",
          "734:             pad = EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_AEAD_TLS1_AAD,",
          "735:                                       EVP_AEAD_TLS1_AAD_LEN, buf);",
          "736:             if (pad <= 0)",
          "737:                 return -1;",
          "738:             if (send) {",
          "739:                 l += pad;",
          "740:                 rec->length += pad;",
          "741:             }",
          "742:         } else if ((bs != 1) && send) {",
          "743:             i = bs - ((int)l % bs);",
          "748:             j = i - 1;",
          "749:             for (k = (int)l; k < (int)(l + i); k++)",
          "750:                 rec->input[k] = j;",
          "751:             l += i;",
          "752:             rec->length += i;",
          "755:         if (!send) {",
          "756:             if (l == 0 || l % bs != 0)",
          "757:                 return 0;",
          "760:         i = EVP_Cipher(ds, rec->data, rec->input, l);",
          "761:         if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds)) & EVP_CIPH_FLAG_CUSTOM_CIPHER)",
          "767:                 rec->data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "768:                 rec->input += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "769:                 rec->length -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "771:                 rec->data += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "772:                 rec->input += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "773:                 rec->length -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "780:         if ((bs != 1) && !send)",
          "781:             ret = tls1_cbc_remove_padding(s, rec, bs, mac_size);",
          "783:             rec->length -= pad;",
          "788: int n_ssl3_mac(SSL *ssl, unsigned char *md, int send)",
          "790:     SSL3_RECORD *rec;",
          "",
          "[Added Lines]",
          "701:         for (ctr = 0; ctr < numpipes; ctr++) {",
          "702:             memmove(recs[ctr].data, recs[ctr].input, recs[ctr].length);",
          "703:             recs[ctr].input = recs[ctr].data;",
          "704:         }",
          "707:         bs = EVP_CIPHER_block_size(EVP_CIPHER_CTX_cipher(ds));",
          "709:         if (numpipes > 1) {",
          "710:             if(!(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "711:                                   & EVP_CIPH_FLAG_PIPELINE)) {",
          "716:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "717:                 return -1;",
          "718:             }",
          "719:         }",
          "720:         for (ctr = 0; ctr < numpipes; ctr++) {",
          "721:             reclen[ctr] = recs[ctr].length;",
          "723:             if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "724:                     & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "725:                 unsigned char *seq;",
          "727:                 seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "728:                     : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "730:                 if (SSL_IS_DTLS(s)) {",
          "732:                     unsigned char dtlsseq[9], *p = dtlsseq;",
          "734:                     s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "735:                         DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "736:                     memcpy(p, &seq[2], 6);",
          "737:                     memcpy(buf[ctr], dtlsseq, 8);",
          "738:                 } else {",
          "739:                     memcpy(buf[ctr], seq, 8);",
          "741:                         ++seq[i];",
          "742:                         if (seq[i] != 0)",
          "743:                             break;",
          "744:                     }",
          "745:                 }",
          "747:                 buf[ctr][8] = recs[ctr].type;",
          "748:                 buf[ctr][9] = (unsigned char)(s->version >> 8);",
          "749:                 buf[ctr][10] = (unsigned char)(s->version);",
          "750:                 buf[ctr][11] = recs[ctr].length >> 8;",
          "751:                 buf[ctr][12] = recs[ctr].length & 0xff;",
          "752:                 pad = EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_AEAD_TLS1_AAD,",
          "753:                                           EVP_AEAD_TLS1_AAD_LEN, buf[ctr]);",
          "754:                 if (pad <= 0)",
          "755:                     return -1;",
          "757:                 if (send) {",
          "758:                     reclen[ctr] += pad;",
          "759:                     recs[ctr].length += pad;",
          "762:             } else if ((bs != 1) && send) {",
          "763:                 i = bs - ((int)reclen[ctr] % bs);",
          "768:                 j = i - 1;",
          "769:                 for (k = (int)reclen[ctr]; k < (int)(reclen[ctr] + i); k++)",
          "770:                     recs[ctr].input[k] = j;",
          "771:                 reclen[ctr] += i;",
          "772:                 recs[ctr].length += i;",
          "773:             }",
          "775:             if (!send) {",
          "776:                 if (reclen[ctr] == 0 || reclen[ctr] % bs != 0)",
          "777:                     return 0;",
          "778:             }",
          "780:         if (numpipes > 1) {",
          "781:             unsigned char *data[SSL_MAX_PIPELINES];",
          "784:             for(ctr = 0; ctr < numpipes; ctr++) {",
          "785:                 data[ctr] = recs[ctr].data;",
          "786:             }",
          "787:             if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS,",
          "788:                                       numpipes, data) <= 0) {",
          "789:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "790:             }",
          "792:             for(ctr = 0; ctr < numpipes; ctr++) {",
          "793:                 data[ctr] = recs[ctr].input;",
          "794:             }",
          "795:             if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_BUFS,",
          "796:                                       numpipes, data) <= 0",
          "797:                 || EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_LENS,",
          "798:                                       numpipes, reclen) <= 0) {",
          "799:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "800:                 return -1;",
          "801:             }",
          "804:         i = EVP_Cipher(ds, recs[0].data, recs[0].input, reclen[0]);",
          "805:         if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "806:                 & EVP_CIPH_FLAG_CUSTOM_CIPHER)",
          "812:                 for (ctr = 0; ctr < numpipes; ctr++) {",
          "813:                     recs[ctr].data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "814:                     recs[ctr].input += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "815:                     recs[ctr].length -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "816:                 }",
          "818:                 for (ctr = 0; ctr < numpipes; ctr++) {",
          "819:                     recs[ctr].data += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "820:                     recs[ctr].input += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "821:                     recs[ctr].length -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "822:                 }",
          "829:         if ((bs != 1) && !send) {",
          "831:             ret = tls1_cbc_remove_padding(s, recs, bs, mac_size);",
          "832:         }",
          "834:             recs[0].length -= pad;",
          "839: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "796:     int t;",
          "798:     if (send) {",
          "800:         mac_sec = &(ssl->s3->write_mac_secret[0]);",
          "801:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "802:         hash = ssl->write_hash;",
          "803:     } else {",
          "805:         mac_sec = &(ssl->s3->read_mac_secret[0]);",
          "806:         seq = RECORD_LAYER_get_read_sequence(&ssl->rlayer);",
          "807:         hash = ssl->read_hash;",
          "",
          "[Removed Lines]",
          "799:         rec = RECORD_LAYER_get_wrec(&ssl->rlayer);",
          "804:         rec = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "885:     return (md_size);",
          "886: }",
          "889: {",
          "891:     unsigned char *seq;",
          "892:     EVP_MD_CTX *hash;",
          "893:     size_t md_size;",
          "",
          "[Removed Lines]",
          "888: int tls1_mac(SSL *ssl, unsigned char *md, int send)",
          "890:     SSL3_RECORD *rec;",
          "",
          "[Added Lines]",
          "936: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "899:     int t;",
          "901:     if (send) {",
          "903:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "904:         hash = ssl->write_hash;",
          "905:     } else {",
          "907:         seq = RECORD_LAYER_get_read_sequence(&ssl->rlayer);",
          "908:         hash = ssl->read_hash;",
          "909:     }",
          "",
          "[Removed Lines]",
          "902:         rec = RECORD_LAYER_get_wrec(&ssl->rlayer);",
          "906:         rec = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1253:     rr->data = rr->input;",
          "1254:     rr->orig_len = rr->length;",
          "",
          "[Removed Lines]",
          "1256:     enc_err = s->method->ssl3_enc->enc(s, 0);",
          "",
          "[Added Lines]",
          "1301:     enc_err = s->method->ssl3_enc->enc(s, rr, 1, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1320:             mac = &rr->data[rr->length];",
          "1321:         }",
          "1324:         if (i < 0 || mac == NULL",
          "1325:             || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0)",
          "1326:             enc_err = -1;",
          "",
          "[Removed Lines]",
          "1323:         i = s->method->ssl3_enc->mac(s, md, 0 /* not send */ );",
          "",
          "[Added Lines]",
          "1368:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "",
          "---------------"
        ],
        "ssl/s3_msg.c||ssl/s3_msg.c": [
          "File: ssl/s3_msg.c -> ssl/s3_msg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: int ssl3_dispatch_alert(SSL *s)",
          "193: {",
          "194:     int i, j;",
          "195:     void (*cb) (const SSL *ssl, int type, int val) = NULL;",
          "197:     s->s3->alert_dispatch = 0;",
          "199:     if (i <= 0) {",
          "200:         s->s3->alert_dispatch = 1;",
          "201:     } else {",
          "",
          "[Removed Lines]",
          "198:     i = do_ssl3_write(s, SSL3_RT_ALERT, &s->s3->send_alert[0], 2, 0);",
          "",
          "[Added Lines]",
          "195:     unsigned int alertlen;",
          "199:     alertlen = 2;",
          "200:     i = do_ssl3_write(s, SSL3_RT_ALERT, &s->s3->send_alert[0], &alertlen, 1, 0);",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:      \"tls1_check_duplicate_extensions\"},",
          "291:     {ERR_FUNC(SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT),",
          "292:      \"TLS1_CHECK_SERVERHELLO_TLSEXT\"},",
          "293:     {ERR_FUNC(SSL_F_TLS1_EXPORT_KEYING_MATERIAL),",
          "294:      \"tls1_export_keying_material\"},",
          "295:     {ERR_FUNC(SSL_F_TLS1_GET_CURVELIST), \"tls1_get_curvelist\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:     {ERR_FUNC(SSL_F_TLS1_ENC), \"tls1_enc\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:      \"peer did not return a certificate\"},",
          "571:     {ERR_REASON(SSL_R_PEM_NAME_BAD_PREFIX), \"pem name bad prefix\"},",
          "572:     {ERR_REASON(SSL_R_PEM_NAME_TOO_SHORT), \"pem name too short\"},",
          "573:     {ERR_REASON(SSL_R_PRE_MAC_LENGTH_TOO_LONG), \"pre mac length too long\"},",
          "574:     {ERR_REASON(SSL_R_PROTOCOL_IS_SHUTDOWN), \"protocol is shutdown\"},",
          "575:     {ERR_REASON(SSL_R_PSK_IDENTITY_NOT_FOUND), \"psk identity not found\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:     {ERR_REASON(SSL_R_PIPELINE_FAILURE), \"pipeline failure\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     ssl_undefined_function,",
          "176:     (int (*)(SSL *, unsigned char *, unsigned char *, int))",
          "177:         ssl_undefined_function,",
          "",
          "[Removed Lines]",
          "173:     (int (*)(SSL *, int))ssl_undefined_function,",
          "174:     (int (*)(SSL *, unsigned char *, int))ssl_undefined_function,",
          "",
          "[Added Lines]",
          "173:     (int (*)(SSL *, SSL3_RECORD *, unsigned int, int))ssl_undefined_function,",
          "174:     (int (*)(SSL *, SSL3_RECORD *, unsigned char *, int))ssl_undefined_function,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:     X509_VERIFY_PARAM_inherit(s->param, ctx->param);",
          "671:     s->quiet_shutdown = ctx->quiet_shutdown;",
          "672:     s->max_send_fragment = ctx->max_send_fragment;",
          "674:     CRYPTO_add(&ctx->references, 1, CRYPTO_LOCK_SSL_CTX);",
          "675:     s->ctx = ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:     s->split_send_fragment = ctx->split_send_fragment;",
          "674:     s->max_pipelines = ctx->max_pipelines;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1680:         if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1681:             return 0;",
          "1682:         s->max_send_fragment = larg;",
          "1683:         return 1;",
          "1684:     case SSL_CTRL_GET_RI_SUPPORT:",
          "1685:         if (s->s3)",
          "1686:             return s->s3->send_connection_binding;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1685:         if (s->max_send_fragment < s->split_send_fragment)",
          "1686:             s->split_send_fragment = s->max_send_fragment;",
          "1687:         return 1;",
          "1688:     case SSL_CTRL_SET_SPLIT_SEND_FRAGMENT:",
          "1689:         if (larg > s->max_send_fragment || larg == 0)",
          "1690:             return 0;",
          "1691:         s->split_send_fragment = larg;",
          "1693:     case SSL_CTRL_SET_MAX_PIPELINES:",
          "1694:         if (larg < 1 || larg > SSL_MAX_PIPELINES)",
          "1695:             return 0;",
          "1696:         s->max_pipelines = larg;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1820:         if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1821:             return 0;",
          "1822:         ctx->max_send_fragment = larg;",
          "1823:         return 1;",
          "1824:     case SSL_CTRL_CERT_FLAGS:",
          "1825:         return (ctx->cert->cert_flags |= larg);",
          "1826:     case SSL_CTRL_CLEAR_CERT_FLAGS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1836:         if (ctx->max_send_fragment < ctx->split_send_fragment)",
          "1837:             ctx->split_send_fragment = ctx->split_send_fragment;",
          "1839:     case SSL_CTRL_SET_SPLIT_SEND_FRAGMENT:",
          "1840:         if (larg > ctx->max_send_fragment || larg == 0)",
          "1841:             return 0;",
          "1842:         ctx->split_send_fragment = larg;",
          "1843:         return 1;",
          "1844:     case SSL_CTRL_SET_MAX_PIPELINES:",
          "1845:         if (larg < 1 || larg > SSL_MAX_PIPELINES)",
          "1846:             return 0;",
          "1847:         ctx->max_pipelines = larg;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2370:         ret->comp_methods = SSL_COMP_get_compression_methods();",
          "2372:     ret->max_send_fragment = SSL3_RT_MAX_PLAIN_LENGTH;",
          "2375:     if ((RAND_bytes(ret->tlsext_tick_key_name, 16) <= 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2397:     ret->split_send_fragment = SSL3_RT_MAX_PLAIN_LENGTH;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:     void *ct_validation_callback_arg;",
          "830: #  endif",
          "836:     unsigned int max_send_fragment;",
          "838: #  ifndef OPENSSL_NO_ENGINE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:     unsigned int split_send_fragment;",
          "844:     unsigned int max_pipelines;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1085:     int first_packet;",
          "1087:     int client_version;",
          "1088:     unsigned int max_send_fragment;",
          "1091:     void (*tlsext_debug_cb) (SSL *s, int client_server, int type,",
          "1092:                              const unsigned char *data, int len, void *arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:     unsigned int split_send_fragment;",
          "1109:     unsigned int max_pipelines;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1637: typedef struct ssl3_enc_method {",
          "1640:     int (*setup_key_block) (SSL *);",
          "1641:     int (*generate_master_secret) (SSL *, unsigned char *, unsigned char *,",
          "1642:                                    int);",
          "",
          "[Removed Lines]",
          "1638:     int (*enc) (SSL *, int);",
          "1639:     int (*mac) (SSL *, unsigned char *, int);",
          "",
          "[Added Lines]",
          "1659:     int (*enc) (SSL *, SSL3_RECORD *, unsigned int, int);",
          "1660:     int (*mac) (SSL *, SSL3_RECORD *, unsigned char *, int);",
          "",
          "---------------"
        ]
      }
    }
  ]
}