{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e93798dc52bacfce476eb0c65eb5ea731433f443",
      "candidate_info": {
        "commit_hash": "e93798dc52bacfce476eb0c65eb5ea731433f443",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/e93798dc52bacfce476eb0c65eb5ea731433f443",
        "files": [
          "lib/krb5/send_to_kdc.c"
        ],
        "message": "krb5_sendto_kdc: failover for multiple AAAA/A RRs on one domain\n\nWe found that the libraries behaviour when dealing with domains with\nmore than one entry in them is slightly suboptimal.  The situation\nwas\n\nkdc1\t\tIN\tA\t1.2.3.4\nkdc1\t\tIN\tAAAA\tff02::1\n\nI.e. a single hostmame with both IPv6 and IPv4 addresses.  When we\nrun krb5_sendto_kdc on a box with only IPv4 addresses, there is a\n3s delay before it fails back to the IPv4 address.  This is because\nthe library sets the 2nd address on each hostname to be 3s in the\nfuture and each additional one another 3s.\n\nWe change wait_response() s.t. if one is able to make progress, we\niterate over the list of hosts and move them all 1s forward.  We\nalso modify submit_request() to skip hosts if host_connect() fails.\n\n(cherry picked from commit d497d7e4a796c6bda153e7f10fe9478724b855ab)",
        "before_after_code_files": [
          "lib/krb5/send_to_kdc.c||lib/krb5/send_to_kdc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/krb5/send_to_kdc.c||lib/krb5/send_to_kdc.c": [
          "File: lib/krb5/send_to_kdc.c -> lib/krb5/send_to_kdc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: debug_host(krb5_context context, int level, struct host *host, const char *fmt, ...)",
          "315: {",
          "316:     const char *proto = \"unknown\";",
          "317:     char name[NI_MAXHOST], port[NI_MAXSERV];",
          "318:     char *text = NULL;",
          "319:     va_list ap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     const char *state;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:       name, sizeof(name), port, sizeof(port), NI_NUMERICHOST) != 0)",
          "340:  name[0] = '\\0';",
          "344:     free(text);",
          "345: }",
          "",
          "[Removed Lines]",
          "342:     _krb5_debug(context, level, \"%s: %s %s:%s (%s) tid: %08x\", text,",
          "343:   proto, name, port, host->hi->hostname, host->tid);",
          "",
          "[Added Lines]",
          "343:     switch (host->state) {",
          "344:     case CONNECT: state = \"CONNECT\";  break;",
          "345:     case CONNECTING: state = \"CONNECTING\";  break;",
          "346:     case CONNECTED: state = \"CONNECTED\";  break;",
          "347:     case WAITING_REPLY: state = \"WAITING_REPLY\"; break;",
          "348:     case DEAD:  state = \"DEAD\";   break;",
          "349:     default:  state = \"unknown\";  break;",
          "350:     }",
          "352:     _krb5_debug(context, level, \"%s: %s %s:%s (%s) state=%s tid: %08x\", text,",
          "353:   proto, name, port, host->hi->hostname, state, host->tid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "881:  host->tries = host->fun->ntries;",
          "887:      host_connect(context, ctx, host);",
          "889:      debug_host(context, 5, host,",
          "890:          \"Queuing host in future (in %ds), its the %lu address on the same name\",",
          "891:          (int)(context->host_timeout * submitted_host), submitted_host + 1);",
          "",
          "[Removed Lines]",
          "886:  if (submitted_host == 0)",
          "888:  else {",
          "",
          "[Added Lines]",
          "901:  if (submitted_host == 0) {",
          "903:      if (host->state == DEAD)",
          "904:   continue;",
          "905:  } else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "893:  }",
          "895:  heim_array_append_value(ctx->hosts, host);",
          "897:  heim_release(host);",
          "899:  submitted_host++;",
          "900:     }",
          "902:     if (freeai)",
          "903:  freeaddrinfo(ai);",
          "906:  return KRB5_KDC_UNREACH;",
          "908:     return 0;",
          "",
          "[Removed Lines]",
          "905:     if (!submitted_host)",
          "",
          "[Added Lines]",
          "920:     if (submitted_host == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:     krb5_sendto_ctx ctx;",
          "914:     fd_set rfds;",
          "915:     fd_set wfds;",
          "917:     int got_reply;",
          "918:     time_t timenow;",
          "919: };",
          "",
          "[Removed Lines]",
          "916:     unsigned max_fd;",
          "",
          "[Added Lines]",
          "931:     int max_fd;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "924:     struct wait_ctx *wait_ctx = iter_ctx;",
          "925:     struct host *h = (struct host *)obj;",
          "928:     if (h->state == DEAD)",
          "929:  return;",
          "938:     if (h->timeout < wait_ctx->timenow) {",
          "939:  heim_assert(h->tries != 0, \"tries should not reach 0\");",
          "",
          "[Removed Lines]",
          "931:     if (h->state == CONNECT) {",
          "932:  if (h->timeout < wait_ctx->timenow)",
          "933:      host_connect(wait_ctx->context, wait_ctx->ctx, h);",
          "934:  return;",
          "935:     }",
          "",
          "[Added Lines]",
          "942:     if (h->state == CONNECT) {",
          "943:  if (h->timeout >= wait_ctx->timenow)",
          "944:      return;",
          "945:  host_connect(wait_ctx->context, wait_ctx->ctx, h);",
          "946:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "961:  FD_SET(h->fd, &wait_ctx->wfds);",
          "962:  break;",
          "963:     default:",
          "964:  heim_abort(\"invalid sendto host state\");",
          "965:     }",
          "966:     if (h->fd > wait_ctx->max_fd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979:  debug_host(wait_ctx->context, 5, h, \"invalid sendto host state\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "974:     return (int)((h->state == DEAD) ? true : false);",
          "975: }",
          "977: static void",
          "978: wait_process(heim_object_t obj, void *ctx, int *stop)",
          "979: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993: static void",
          "994: wait_accelerate(heim_object_t obj, void *ctx, int *stop)",
          "995: {",
          "996:     struct host *h = (struct host *)obj;",
          "998:     if (h->state == CONNECT && h->timeout > 0)",
          "999:  h->timeout--;",
          "1000: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1007:     wait_ctx.ctx = ctx;",
          "1008:     FD_ZERO(&wait_ctx.rfds);",
          "1009:     FD_ZERO(&wait_ctx.wfds);",
          "1013:     if (ctx->response.length) {",
          "",
          "[Removed Lines]",
          "1010:     wait_ctx.max_fd = 0;",
          "",
          "[Added Lines]",
          "1035:     wait_ctx.max_fd = -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1033:  return 0;",
          "1034:     }",
          "1036:     tv.tv_sec = 1;",
          "1037:     tv.tv_usec = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1061:     if (wait_ctx.max_fd == -1) {",
          "1067:  _krb5_debug(context, 5, \"wait_response: moving the contestants forward\");",
          "1068:  heim_array_iterate_f(ctx->hosts, &wait_ctx, wait_accelerate);",
          "1069:  return 0;",
          "1070:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd249257e397a26c48164122c892c96a10b64c44",
      "candidate_info": {
        "commit_hash": "dd249257e397a26c48164122c892c96a10b64c44",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/dd249257e397a26c48164122c892c96a10b64c44",
        "files": [
          "lib/kadm5/init_s.c"
        ],
        "message": "Don't lose error status in kadm5_s_init_with_context\n\nIf either krb5_parse_name() or _kadm5_acl_init() fail\nwe could return success and a NULL kadm5_handle.",
        "before_after_code_files": [
          "lib/kadm5/init_s.c||lib/kadm5/init_s.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/init_s.c||lib/kadm5/init_s.c": [
          "File: lib/kadm5/init_s.c -> lib/kadm5/init_s.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         kadm5_s_destroy(ctx);",
          "104:     else",
          "107: }",
          "109: kadm5_ret_t",
          "",
          "[Removed Lines]",
          "106:     return 0;",
          "",
          "[Added Lines]",
          "106:     return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d931cb316b998be255876d9a8738b9bd9d42cd0b",
      "candidate_info": {
        "commit_hash": "d931cb316b998be255876d9a8738b9bd9d42cd0b",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/d931cb316b998be255876d9a8738b9bd9d42cd0b",
        "files": [
          "lib/krb5/init_creds.c",
          "lib/krb5/krb5_locl.h",
          "lib/krb5/pkinit.c"
        ],
        "message": "krb5: don't require krbtgt otherName match for Win2K\n\nMerged from Apple branch: when the Win2K PKINIT compatibility option is set, do\nnot require krbtgt otherName to match when validating KDC certificate.\n\n(cherry picked from commit 8350f34a05ba2cbc1ead0214eb85352f8e7805ef)",
        "before_after_code_files": [
          "lib/krb5/init_creds.c||lib/krb5/init_creds.c",
          "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
          "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ],
          "candidate": [
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/krb5/init_creds.c||lib/krb5/init_creds.c": [
          "File: lib/krb5/init_creds.c -> lib/krb5/init_creds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:     if (req) {",
          "367:  opt->opt_private->flags |= KRB5_INIT_CREDS_NO_C_CANON_CHECK;",
          "368:  opt->opt_private->flags |= KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK;",
          "369:     } else {",
          "370:  opt->opt_private->flags &= ~KRB5_INIT_CREDS_NO_C_CANON_CHECK;",
          "371:  opt->opt_private->flags &= ~KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK;",
          "372:     }",
          "373:     return 0;",
          "374: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:  opt->opt_private->flags |= KRB5_INIT_CREDS_PKINIT_NO_KRBTGT_OTHERNAME_CHECK;",
          "373:  opt->opt_private->flags &= ~KRB5_INIT_CREDS_PKINIT_NO_KRBTGT_OTHERNAME_CHECK;",
          "",
          "---------------"
        ],
        "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
          "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
          "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
          "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
          "212:     struct {",
          "213:         krb5_gic_process_last_req func;",
          "214:         void *ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: #define KRB5_INIT_CREDS_PKINIT_NO_KRBTGT_OTHERNAME_CHECK    64",
          "",
          "---------------"
        ],
        "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
          "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:          req_body->realm,",
          "785:          \"pkinit_require_krbtgt_otherName\",",
          "786:          NULL);",
          "788:     ctx->require_hostname_match =",
          "789:  krb5_config_get_bool_default(context, NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:     if (ic_flags & KRB5_INIT_CREDS_PKINIT_NO_KRBTGT_OTHERNAME_CHECK)",
          "788:  ctx->require_krbtgt_otherName = FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7c7e310e11cbeaa988561c9f8659e74073ecfa7",
      "candidate_info": {
        "commit_hash": "a7c7e310e11cbeaa988561c9f8659e74073ecfa7",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/a7c7e310e11cbeaa988561c9f8659e74073ecfa7",
        "files": [
          "kdc/hprop.8"
        ],
        "message": "Fixes #550 - Note that encrypt is the default option\n\nThere are two options to hprop.  It's important to note that the default\nbehavior is to transmit the database with encrypted keys.\n\n(cherry picked from commit 68f74fbaf11344c802a8a46ecf05115c120b86d5)",
        "before_after_code_files": [
          "kdc/hprop.8||kdc/hprop.8"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/hprop.8||kdc/hprop.8": [
          "File: kdc/hprop.8 -> kdc/hprop.8",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: encrypted with a master key. This option transmits the database with",
          "116: unencrypted keys.",
          "117: .It Fl E , Fl Fl encrypt",
          "119: .It Fl n , Fl Fl stdout",
          "120: Dump the database on stdout, in a format that can be fed to hpropd.",
          "121: .El",
          "",
          "[Removed Lines]",
          "118: This option transmits the database with encrypted keys.",
          "",
          "[Added Lines]",
          "118: This option transmits the database with encrypted keys. This is the",
          "119: default if no option is supplied.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4757a1235326840ddfe054154e1e58c10ec97de0",
      "candidate_info": {
        "commit_hash": "4757a1235326840ddfe054154e1e58c10ec97de0",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/4757a1235326840ddfe054154e1e58c10ec97de0",
        "files": [
          "configure.ac",
          "include/config.h.w32",
          "lib/kadm5/ipropd_master.c",
          "lib/kadm5/ipropd_slave.c",
          "lib/kadm5/kadm5_locl.h"
        ],
        "message": "Disable Nagle in iprop master and slave",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/config.h.w32||include/config.h.w32",
          "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c",
          "lib/kadm5/ipropd_slave.c||lib/kadm5/ipropd_slave.c",
          "lib/kadm5/kadm5_locl.h||lib/kadm5/kadm5_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:  maillock.h    \\",
          "346:  netgroup.h    \\",
          "347:  netinet/in6_machtypes.h   \\",
          "348:  pthread.h    \\",
          "349:  pty.h     \\",
          "350:  sac.h     \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:  netinet/tcp.h    \\",
          "",
          "---------------"
        ],
        "include/config.h.w32||include/config.h.w32": [
          "File: include/config.h.w32 -> include/config.h.w32"
        ],
        "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c": [
          "File: lib/kadm5/ipropd_master.c -> lib/kadm5/ipropd_master.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:     socket_set_nonblocking(s->fd, 1);",
          "321:     krb5_free_principal (context, server);",
          "322:     if (ret) {",
          "323:  krb5_warn (context, ret, \"krb5_recvauth\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: #if defined(IPPROTO_TCP) && defined(TCP_NODELAY)",
          "328:     {",
          "329:         int nodelay = 1;",
          "330:         (void) setsockopt(s->fd, IPPROTO_TCP, TCP_NODELAY,",
          "331:                           (void *)&nodelay, sizeof(nodelay));",
          "332:     }",
          "333: #endif",
          "",
          "---------------"
        ],
        "lib/kadm5/ipropd_slave.c||lib/kadm5/ipropd_slave.c": [
          "File: lib/kadm5/ipropd_slave.c -> lib/kadm5/ipropd_slave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     if (setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, &one, sizeof(one)) < 0)",
          "100:         krb5_warn(context, errno, \"setsockopt(SO_KEEPALIVE) failed\");",
          "102:     return s;",
          "103: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: #if defined(IPPROTO_TCP) && defined(TCP_NODELAY)",
          "107:     (void) setsockopt(s, IPPROTO_TCP, TCP_NODELAY,",
          "108:                       (void *)&one, sizeof(one));",
          "109: #endif",
          "",
          "---------------"
        ],
        "lib/kadm5/kadm5_locl.h||lib/kadm5/kadm5_locl.h": [
          "File: lib/kadm5/kadm5_locl.h -> lib/kadm5/kadm5_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #ifdef HAVE_SYS_SOCKET_H",
          "68: #include <sys/socket.h>",
          "69: #endif",
          "70: #ifdef HAVE_SYS_UN_H",
          "71: #include <sys/un.h>",
          "72: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: #ifdef HAVE_NETINET_IN_H",
          "71: #include <netinet/in.h>",
          "72: #endif",
          "73: #ifdef HAVE_NETINET_TCP_H",
          "74: #include <netinet/tcp.h>",
          "75: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}