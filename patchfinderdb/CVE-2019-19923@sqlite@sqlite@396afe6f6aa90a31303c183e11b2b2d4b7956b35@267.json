{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
      "candidate_info": {
        "commit_hash": "86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Do not place arbitrary restrictions on the length of the failure message for a uniqueness constraint.\n\nFossilOrigin-Name: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c77fbbe5d54248821161d708d0631fab65659bef31f95a61af681d4639f5918",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4398:   StrAccum errMsg;",
          "4399:   Table *pTab = pIdx->pTable;",
          "4402:   if( pIdx->aColExpr ){",
          "4403:     sqlite3_str_appendf(&errMsg, \"index '%q'\", pIdx->zName);",
          "4404:   }else{",
          "",
          "[Removed Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0, 200);",
          "",
          "[Added Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0,",
          "4402:                       pParse->db->aLimit[SQLITE_LIMIT_LENGTH]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d2566dfc2d38beb03665867df144aae5cc9eba1",
      "candidate_info": {
        "commit_hash": "6d2566dfc2d38beb03665867df144aae5cc9eba1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6d2566dfc2d38beb03665867df144aae5cc9eba1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/tkt-3a77c9714e.test"
        ],
        "message": "Always clear the temporary register cache after coding a subroutine.\n\nFossilOrigin-Name: b6f2a7f9cdb547c925f08306df82519e41a7a0dd2cabd9861a48917bb6eef845",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/tkt-3a77c9714e.test||test/tkt-3a77c9714e.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40e29a47d1266c16a4992e43579a51addcc632503099c4cd128f77dd4e67da3c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2868:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2869:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2870:   }",
          "2871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2870:     sqlite3ClearTempRegCache(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2978:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2979:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2980:   }",
          "2982:   return rReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2981:     sqlite3ClearTempRegCache(pParse);",
          "",
          "---------------"
        ],
        "test/tkt-3a77c9714e.test||test/tkt-3a77c9714e.test": [
          "File: test/tkt-3a77c9714e.test -> test/tkt-3a77c9714e.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2011 December 06",
          "",
          "[Added Lines]",
          "1: # 2011-12-06",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     )",
          "69: } {FACTORING FACTOR SWIMMING SWIMM}",
          "72: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: # Similar problem discovered by dbsqlfuzz on 2019-09-18",
          "72: #",
          "73: do_execsql_test 3.0 {",
          "74:   DROP TABLE IF EXISTS t1;",
          "75:   CREATE TABLE t1(i INT PRIMARY KEY, a, b);",
          "76:   INSERT INTO t1 VALUES(NULL,'one','i');",
          "77:   CREATE INDEX i1a ON t1(a);",
          "78:   CREATE INDEX i1b ON t1(b);",
          "79:   SELECT (SELECT 1",
          "80:             FROM (SELECT 1 FROM t1 WHERE a=1 OR b='i')",
          "81:            WHERE a='o'",
          "82:               OR b IN (SELECT a=('b' IN (SELECT 'a'))))",
          "83:     FROM t1;",
          "84: } {{}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a42325e7313c3391fc045d084653000871c9f347",
      "candidate_info": {
        "commit_hash": "a42325e7313c3391fc045d084653000871c9f347",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a42325e7313c3391fc045d084653000871c9f347",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "The OP_Eq and OP_Ne operators have a special P5 value SQLITE_NOTNULL that asserts that the values are not null.  Except that is not always true for a corrupt database.  Adjust the assert() and add a testcase() to make this point clear.\n\nFossilOrigin-Name: a3fdb2c78d23b94d68dc08126b22d03152ac6068496a42402cdfb336cd4a7e33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48438bb35b48955a1df83ef90f0ef6c9cfed0b16d2e938f36d74ad9d53b4b5b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1926:       assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );",
          "1927:       assert( (flags1 & MEM_Cleared)==0 );",
          "1929:       if( (flags1&flags3&MEM_Null)!=0",
          "1930:        && (flags3&MEM_Cleared)==0",
          "1931:       ){",
          "",
          "[Removed Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 );",
          "",
          "[Added Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 || CORRUPT_DB );",
          "1929:       testcase( (pOp->p5 & SQLITE_JUMPIFNULL)!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
      "candidate_info": {
        "commit_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57e141bc28db0ac6fee77e24fadb437758060830",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Fix the filename normalization in the dbtotxt utility program.\n\nFossilOrigin-Name: 29a00a05dd40ff59be340969e1aca4fee41e092f2faa1cea85a3448265a83c2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0a49d5e6df116bb5eacb60a0bb0f482760aec38bd417d4250d9e57d43bdbb13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   }",
          "113:   zBaseName = zInputFile;",
          "114:   for(i=0; zInputFile[i]; i++){",
          "116:   }",
          "117:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "118:   for(i=0; i<szFile; i+=16){",
          "",
          "[Removed Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "",
          "[Added Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+i+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
      "candidate_info": {
        "commit_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join5.test"
        ],
        "message": "Fix an assert() failure that could occur in a join query if the RHS of an IN() operator is a list containing correlated expressions. This problem was introduced by checkin [e130319317e7611938] which was part of the fix for ticket [787fa716be3a7f650c] - so this commit is part of that ticket's fix too.\n\nFossilOrigin-Name: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join5.test||test/join5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2810:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2811:         addrOnce = 0;",
          "2812:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:         ExprClearProperty(pExpr, EP_Subrtn);",
          "",
          "---------------"
        ],
        "test/join5.test||test/join5.test": [
          "File: test/join5.test -> test/join5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   `--SEARCH TABLE t4 USING INDEX t4xz (x=?)",
          "307: }",
          "309: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: reset_db",
          "310: do_execsql_test 8.0 {",
          "311:   CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
          "312:   CREATE TABLE t1 (c0);",
          "314:   INSERT INTO t1 VALUES (2);",
          "316:   INSERT INTO t0 VALUES(0, 10);",
          "317:   INSERT INTO t0 VALUES(1, 10);",
          "318:   INSERT INTO t0 VALUES(2, 10);",
          "319:   INSERT INTO t0 VALUES(3, 10);",
          "320: }",
          "322: do_execsql_test 8.1 {",
          "323:   SELECT * FROM t0, t1",
          "324:   WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1;",
          "325: } {",
          "326:   1 10 2",
          "327:   2 10 2",
          "328: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}