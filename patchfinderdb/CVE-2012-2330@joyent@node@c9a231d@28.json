{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a90bc78534d94940a6b726c01cf8427c296b4c63",
      "candidate_info": {
        "commit_hash": "a90bc78534d94940a6b726c01cf8427c296b4c63",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a90bc78534d94940a6b726c01cf8427c296b4c63",
        "files": [
          "lib/dns.js",
          "src/cares_wrap.cc",
          "test/internet/test-dns.js"
        ],
        "message": "Revert \"DNS: Support NAPTR queries\"\n\nThis reverts commit 91bf18fcc5340262d0672dbebcc1a34bc4a8cd95.",
        "before_after_code_files": [
          "lib/dns.js||lidns.js",
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "test/internet/test-dns.js||test/internet/test-dns.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dns.js||lidns.js": [
          "File: lib/dns.js -> lidns.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: exports.resolveNs = resolveMap.NS = resolver('queryNs');",
          "170: exports.resolveTxt = resolveMap.TXT = resolver('queryTxt');",
          "171: exports.resolveSrv = resolveMap.SRV = resolver('querySrv');",
          "173: exports.reverse = resolveMap.PTR = resolver('getHostByAddr');",
          "",
          "[Removed Lines]",
          "172: exports.resolveNaptr = resolveMap.NAPTR = resolver('queryNaptr');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:   }",
          "486: };",
          "544: class GetHostByAddrWrap: public QueryWrap {",
          "545:  public:",
          "",
          "[Removed Lines]",
          "488: class QueryNaptrWrap: public QueryWrap {",
          "489:  public:",
          "490:   int Send(const char* name) {",
          "491:     ares_query(ares_channel,",
          "492:                name,",
          "493:                ns_c_in,",
          "494:                ns_t_naptr,",
          "495:                Callback,",
          "496:                GetQueryArg());",
          "497:     return 0;",
          "498:   }",
          "500:  protected:",
          "501:   void Parse(unsigned char* buf, int len) {",
          "502:     HandleScope scope;",
          "504:     ares_naptr_reply* naptr_start;",
          "505:     int status = ares_parse_naptr_reply(buf, len, &naptr_start);",
          "507:     if (status != ARES_SUCCESS) {",
          "508:       this->ParseError(status);",
          "509:       return;",
          "510:     }",
          "512:     Local<Array> naptr_records = Array::New();",
          "513:     Local<String> flags_symbol = String::NewSymbol(\"flags\");",
          "514:     Local<String> service_symbol = String::NewSymbol(\"service\");",
          "515:     Local<String> regexp_symbol = String::NewSymbol(\"regexp\");",
          "516:     Local<String> replacement_symbol = String::NewSymbol(\"replacement\");",
          "517:     Local<String> order_symbol = String::NewSymbol(\"order\");",
          "518:     Local<String> preference_symbol = String::NewSymbol(\"preference\");",
          "520:     int i = 0;",
          "521:     for (ares_naptr_reply* naptr_current = naptr_start;",
          "522:          naptr_current;",
          "523:          naptr_current = naptr_current->next) {",
          "525:       Local<Object> naptr_record = Object::New();",
          "527:       naptr_record->Set(flags_symbol, String::New(naptr_current->flags));",
          "528:       naptr_record->Set(service_symbol, String::New(naptr_current->service));",
          "529:       naptr_record->Set(regexp_symbol, String::New(naptr_current->regexp));",
          "530:       naptr_record->Set(replacement_symbol, String::New(naptr_current->replacement));",
          "531:       naptr_record->Set(order_symbol, Integer::New(naptr_current->order));",
          "532:       naptr_record->Set(preference_symbol, Integer::New(naptr_current->preference));",
          "534:       naptr_records->Set(Integer::New(i++), naptr_record);",
          "535:     }",
          "537:     ares_free_data(naptr_start);",
          "539:     this->CallOnComplete(naptr_records);",
          "540:   }",
          "541: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:   NODE_SET_METHOD(target, \"queryNs\", Query<QueryNsWrap>);",
          "802:   NODE_SET_METHOD(target, \"queryTxt\", Query<QueryTxtWrap>);",
          "803:   NODE_SET_METHOD(target, \"querySrv\", Query<QuerySrvWrap>);",
          "805:   NODE_SET_METHOD(target, \"getHostByAddr\", Query<GetHostByAddrWrap>);",
          "806:   NODE_SET_METHOD(target, \"getHostByName\", QueryWithFamily<GetHostByNameWrap>);",
          "",
          "[Removed Lines]",
          "804:   NODE_SET_METHOD(target, \"queryNaptr\", Query<QueryNaptrWrap>);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/internet/test-dns.js||test/internet/test-dns.js": [
          "File: test/internet/test-dns.js -> test/internet/test-dns.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   checkWrap(req);",
          "220: });",
          "247: TEST(function test_resolveCname(done) {",
          "248:   var req = dns.resolveCname('www.google.com', function(err, names) {",
          "",
          "[Removed Lines]",
          "222: TEST(function test_resolveNaptr(done) {",
          "223:   var req = dns.resolveNaptr('sip.voice.google.com', function(err, result) {",
          "224:     if (err) throw err;",
          "226:     assert.ok(result.length > 0);",
          "228:     for (var i = 0; i < result.length; i++) {",
          "229:       var item = result[i];",
          "230:       assert.ok(item);",
          "231:       assert.ok(typeof item === 'object');",
          "233:       assert.ok(typeof item.flags === 'string');",
          "234:       assert.ok(typeof item.service === 'string');",
          "235:       assert.ok(typeof item.regexp === 'string');",
          "236:       assert.ok(typeof item.replacement === 'string');",
          "237:       assert.ok(typeof item.order === 'number');",
          "238:       assert.ok(typeof item.preference === 'number');",
          "239:     }",
          "241:     done();",
          "242:   });",
          "244:   checkWrap(req);",
          "245: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0c1376e07e6d5a4deb3d088bd3153d7f6af1298",
      "candidate_info": {
        "commit_hash": "f0c1376e07e6d5a4deb3d088bd3153d7f6af1298",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f0c1376e07e6d5a4deb3d088bd3153d7f6af1298",
        "files": [
          "lib/net.js",
          "test/simple/test-net-connect-buffer.js"
        ],
        "message": "net: make .write() throw on bad input\n\nPassing a non-buffer or non-string argument to Socket.prototype.write triggered\nan assert:\n\n  Assertion failed: (Buffer::HasInstance(args[0])), function Write,\n  file ../src/stream_wrap.cc, line 289.\n\nFixes #2532.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-connect-buffer.js||test/simple/test-net-connect-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   }",
          "428:     data = new Buffer(data, encoding);",
          "429:   }",
          "431:   this.bytesWritten += data.length;",
          "",
          "[Removed Lines]",
          "427:   if (typeof data == 'string') {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-connect-buffer.js||test/simple/test-net-connect-buffer.js": [
          "File: test/simple/test-net-connect-buffer.js -> test/simple/test-net-connect-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   assert.equal('opening', socket.readyState);",
          "68:   var a = \"L'\u00c9tat, c'est \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:   [ null,",
          "68:     true,",
          "69:     false,",
          "70:     undefined,",
          "71:     1,",
          "72:     1.0,",
          "73:     1 / 0,",
          "74:     +Infinity",
          "75:     -Infinity,",
          "76:     [],",
          "77:     {}",
          "78:   ].forEach(function(v) {",
          "79:     function f() {",
          "80:       socket.write(v);",
          "81:     }",
          "82:     assert.throws(f, TypeError);",
          "83:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67cd05472e0c3b2859469d2f1d83400b99464447",
      "candidate_info": {
        "commit_hash": "67cd05472e0c3b2859469d2f1d83400b99464447",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/67cd05472e0c3b2859469d2f1d83400b99464447",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c",
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/test/test-fs.c"
        ],
        "message": "uv: upgrade to 267e75d",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   XX( 46, ESHUTDOWN, \"\") \\",
          "117:   XX( 47, EEXIST, \"file already exists\") \\",
          "118:   XX( 48, ESRCH, \"no such process\") \\",
          "122: #define UV_ERRNO_GEN(val, name, s) UV_##name = val,",
          "",
          "[Removed Lines]",
          "119:   XX( 49, ENAMETOOLONG, \"name too long\")",
          "",
          "[Added Lines]",
          "119:   XX( 49, ENAMETOOLONG, \"name too long\") \\",
          "120:   XX( 50, EPERM, \"operation not permitted\")",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/error.c||deps/uv/src/unix/error.c": [
          "File: deps/uv/src/unix/error.c -> deps/uv/src/unix/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: uv_err_code uv_translate_sys_error(int sys_errno) {",
          "60:   switch (sys_errno) {",
          "61:     case 0: return UV_OK;",
          "62:     case ENOSYS: return UV_ENOSYS;",
          "63:     case ENOTSOCK: return UV_ENOTSOCK;",
          "64:     case ENOENT: return UV_ENOENT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     case EPERM: return UV_EPERM;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     case ERROR_SUCCESS:                     return UV_OK;",
          "70:     case ERROR_FILE_NOT_FOUND:              return UV_ENOENT;",
          "71:     case ERROR_PATH_NOT_FOUND:              return UV_ENOENT;",
          "73:     case ERROR_NOACCESS:                    return UV_EACCES;",
          "74:     case WSAEACCES:                         return UV_EACCES;",
          "75:     case ERROR_ADDRESS_ALREADY_ASSOCIATED:  return UV_EADDRINUSE;",
          "",
          "[Removed Lines]",
          "72:     case ERROR_ACCESS_DENIED:               return UV_EACCES;",
          "",
          "[Added Lines]",
          "72:     case ERROR_ACCESS_DENIED:               return UV_EPERM;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "489: }",
          "592:   int result;",
          "594:   req->ptr = NULL;",
          "617:     return;",
          "618:   }",
          "624:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "625:     return;",
          "626:   }",
          "656:     req->stat.st_mode |= (_S_IREAD + (_S_IREAD >> 3) + (_S_IREAD >> 6));",
          "657:   } else {",
          "658:     req->stat.st_mode |= ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "659:       ((_S_IREAD|_S_IWRITE) >> 6));",
          "660:   }",
          "663:     req->stat.st_mode |= _S_IFDIR;",
          "664:   } else {",
          "665:     req->stat.st_mode |= _S_IFREG;",
          "666:   }",
          "675:   req->ptr = &req->stat;",
          "676:   req->result = 0;",
          "677: }",
          "",
          "[Removed Lines]",
          "492: #define IS_SLASH(c) \\",
          "493:   ((wchar_t) c == L'/' || (wchar_t) c == L'\\\\')",
          "494: #define IS_COLON(c) \\",
          "495:   ((wchar_t) c == L':')",
          "496: #define IS_LETTER(c) \\",
          "497:   ((((wchar_t) c >= L'a') && ((wchar_t) c <= L'z')) || \\",
          "498:    (((wchar_t) c >= L'A') && ((wchar_t) c <= L'Z')))",
          "499: #define IS_QUESTION(c) \\",
          "500:   ((wchar_t) c == L'?')",
          "503: static int uv__count_slash_separated_words(const wchar_t* pos,",
          "504:                                            const wchar_t* end,",
          "505:                                            int limit) {",
          "506:   char last_was_slash = 1, count = 0;",
          "508:   for (; pos < end; pos++) {",
          "509:     if (IS_SLASH(*pos)) {",
          "511:       if (last_was_slash) {",
          "512:         return 0;",
          "513:       } else {",
          "514:         last_was_slash = 1;",
          "515:       }",
          "516:     } else {",
          "517:       if (last_was_slash) {",
          "519:         count++;",
          "520:         if (count > limit) {",
          "521:           return -1;",
          "522:         }",
          "523:         last_was_slash = 0;",
          "524:       }",
          "525:     }",
          "526:   }",
          "528:   return count;",
          "529: }",
          "540: static int uv__is_root(const wchar_t* path) {",
          "541:   size_t len = wcslen(path);",
          "544:   if (len == 1 && IS_SLASH(path[0])) {",
          "545:     return 1;",
          "546:   }",
          "548:   if (len < 3) {",
          "549:     return 0;",
          "550:   }",
          "553:   if (IS_LETTER(path[0]) && IS_COLON(path[1]) && IS_SLASH(path[2])) {",
          "554:     return 1;",
          "555:   }",
          "557:   if (!IS_SLASH(path[0]) || !IS_SLASH(path[1])) {",
          "558:     return 0;",
          "559:   }",
          "562:   if (!IS_QUESTION(path[2])) {",
          "563:     return uv__count_slash_separated_words(path + 2, path + len, 2) == 2;",
          "564:   }",
          "566:   if (!IS_SLASH(path[3])) {",
          "567:     return 0;",
          "568:   }",
          "570:   if ((len == 6 || len == 7) &&",
          "571:       IS_LETTER(path[4]) && IS_COLON(path[5]) &&",
          "572:       (len == 6 || IS_SLASH(path[6]))) {",
          "573:     return 1;",
          "574:   }",
          "577:   if (len >= 8 &&",
          "578:       (path[4] == L'u' || path[4] == L'U') &&",
          "579:       (path[5] == L'n' || path[5] == L'N') &&",
          "580:       (path[6] == L'c' || path[6] == L'C') &&",
          "581:       IS_SLASH(path[7])) {",
          "582:     return uv__count_slash_separated_words(path + 8, path + len, 2) == 2;",
          "583:   }",
          "585:   return 0;",
          "586: }",
          "589: void fs__stat(uv_fs_t* req, const wchar_t* path) {",
          "590:   HANDLE file;",
          "591:   WIN32_FIND_DATAW ent;",
          "596:   if (uv__is_root(path)) {",
          "599:     DWORD drive_type = GetDriveTypeW(path);",
          "600:     if (drive_type == DRIVE_UNKNOWN || drive_type == DRIVE_NO_ROOT_DIR) {",
          "601:       req->last_error = ERROR_PATH_NOT_FOUND;",
          "602:       req->errorno = UV_ENOENT;",
          "603:       req->result = -1;",
          "604:       return;",
          "605:     }",
          "607:     memset(&req->stat, 0, sizeof req->stat);",
          "609:     req->stat.st_nlink = 1;",
          "610:     req->stat.st_mode = ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "611:         ((_S_IREAD|_S_IWRITE) >> 6)) | S_IFDIR;",
          "613:     req->last_error = ERROR_SUCCESS;",
          "614:     req->errorno = UV_OK;",
          "615:     req->result = 0;",
          "616:     req->ptr = &req->stat;",
          "620:   file = FindFirstFileExW(path, FindExInfoStandard, &ent,",
          "621:     FindExSearchNameMatch, NULL, 0);",
          "623:   if (file == INVALID_HANDLE_VALUE) {",
          "628:   FindClose(file);",
          "630:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT &&",
          "631:       ent.dwReserved0 == IO_REPARSE_TAG_SYMLINK) {",
          "632:     fs__open(req, path, _O_RDONLY, 0);",
          "633:     if (req->result != -1) {",
          "634:       result = _fstati64(req->result, &req->stat);",
          "635:       _close(req->result);",
          "637:       if (result != -1) {",
          "638:         req->ptr = &req->stat;",
          "639:       }",
          "641:       SET_REQ_RESULT(req, result);",
          "642:     }",
          "644:     return;",
          "645:   }",
          "647:   req->stat.st_ino = 0;",
          "648:   req->stat.st_uid = 0;",
          "649:   req->stat.st_gid = 0;",
          "650:   req->stat.st_mode = 0;",
          "651:   req->stat.st_rdev = 0;",
          "652:   req->stat.st_dev = 0;",
          "653:   req->stat.st_nlink = 1;",
          "655:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_READONLY ) {",
          "662:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {",
          "668:   uv_filetime_to_time_t(&ent.ftLastWriteTime, &(req->stat.st_mtime));",
          "669:   uv_filetime_to_time_t(&ent.ftLastAccessTime, &(req->stat.st_atime));",
          "670:   uv_filetime_to_time_t(&ent.ftCreationTime, &(req->stat.st_ctime));",
          "672:   req->stat.st_size = ((int64_t)ent.nFileSizeHigh << 32) +",
          "673:     (int64_t)ent.nFileSizeLow;",
          "",
          "[Added Lines]",
          "492: static void fs__stat(uv_fs_t* req, const wchar_t* path) {",
          "493:   HANDLE handle;",
          "495:   BY_HANDLE_FILE_INFORMATION info;",
          "499:   handle = CreateFileW(path,",
          "500:                        FILE_READ_ATTRIBUTES,",
          "501:                        FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,",
          "502:                        NULL,",
          "503:                        OPEN_EXISTING,",
          "504:                        FILE_FLAG_BACKUP_SEMANTICS,",
          "505:                        NULL);",
          "506:   if (handle == INVALID_HANDLE_VALUE) {",
          "507:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "511:   if (!GetFileInformationByHandle(handle, &info)) {",
          "513:     CloseHandle(handle);",
          "517:   memset(&req->stat, 0, sizeof req->stat);",
          "521:   if (info.dwFileAttributes & FILE_ATTRIBUTE_READONLY) {",
          "528:   if (info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {",
          "534:   uv_filetime_to_time_t(&info.ftLastWriteTime, &(req->stat.st_mtime));",
          "535:   uv_filetime_to_time_t(&info.ftLastAccessTime, &(req->stat.st_atime));",
          "536:   uv_filetime_to_time_t(&info.ftCreationTime, &(req->stat.st_ctime));",
          "538:   req->stat.st_size = ((int64_t) info.nFileSizeHigh << 32) +",
          "539:                       (int64_t) info.nFileSizeLow;",
          "541:   req->stat.st_nlink = info.nNumberOfLinks;",
          "546:   CloseHandle(handle);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   uv_fs_req_cleanup(req);",
          "185: }",
          "188: static void unlink_cb(uv_fs_t* req) {",
          "189:   ASSERT(req == &unlink_req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: static void chown_root_cb(uv_fs_t* req) {",
          "188:   ASSERT(req->fs_type == UV_FS_CHOWN);",
          "189:   ASSERT(req->result == -1);",
          "190:   ASSERT(req->errorno == UV_EPERM);",
          "191:   chown_cb_count++;",
          "192:   uv_fs_req_cleanup(req);",
          "193: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1018:   uv_run(loop);",
          "1019:   ASSERT(chown_cb_count == 1);",
          "1022:   r = uv_fs_fchown(loop, &req, file, -1, -1, fchown_cb);",
          "1023:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1029:   chown_cb_count = 0;",
          "1030:   r = uv_fs_chown(loop, &req, \"test_file\", 0, 0, chown_root_cb);",
          "1031:   uv_run(loop);",
          "1032:   ASSERT(chown_cb_count == 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296:   r = uv_fs_stat(loop, &stat_req, \"\\\\\", NULL);",
          "1297:   ASSERT(r == 0);",
          "1299:   r = uv_fs_stat(loop, &stat_req, \"c:\\\\\", NULL);",
          "1300:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1312:   r = uv_fs_stat(loop, &stat_req, \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\", NULL);",
          "1313:   ASSERT(r == 0);",
          "1315:   r = uv_fs_stat(loop, &stat_req, \"..\", NULL);",
          "1316:   ASSERT(r == 0);",
          "1318:   r = uv_fs_stat(loop, &stat_req, \"..\\\\\", NULL);",
          "1319:   ASSERT(r == 0);",
          "1322:   r = uv_fs_stat(loop, &stat_req, \"c:\", NULL);",
          "1323:   ASSERT(r == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9918e5d4f6fbc8fe63d0395170a2daef2484d17a",
      "candidate_info": {
        "commit_hash": "9918e5d4f6fbc8fe63d0395170a2daef2484d17a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9918e5d4f6fbc8fe63d0395170a2daef2484d17a",
        "files": [
          "lib/fs.js"
        ],
        "message": "windows: make junctions work again\n\nCloses GH-3879",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:   var type = (typeof type_ === 'string' ? type_ : null);",
          "550:   var callback = makeCallback(arguments[arguments.length - 1]);",
          "553:                   pathModule._makeLong(path),",
          "554:                   type,",
          "555:                   callback);",
          "",
          "[Removed Lines]",
          "552:   binding.symlink(preprocessSymlinkDestination(destination),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "558: fs.symlinkSync = function(destination, path, type) {",
          "559:   type = (typeof type === 'string' ? type : null);",
          "562:                          pathModule._makeLong(path),",
          "563:                          type);",
          "564: };",
          "",
          "[Removed Lines]",
          "561:   return binding.symlink(preprocessSymlinkDestination(destination),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39d23378592458bfe0644c43567e4103979a0236",
      "candidate_info": {
        "commit_hash": "39d23378592458bfe0644c43567e4103979a0236",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/39d23378592458bfe0644c43567e4103979a0236",
        "files": [
          "src/node.cc",
          "src/node_win32_etw_provider-inl.h"
        ],
        "message": "Windows: don't fire GC ETW events without ETW consumers",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_win32_etw_provider-inl.h||src/node_win32_etw_provider-inl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: # include \"node_dtrace.h\"",
          "31: #endif",
          "37: #include <locale.h>",
          "38: #include <signal.h>",
          "39: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "33: #ifdef HAVE_ETW",
          "34: # include \"node_win32_etw_provider.h\"",
          "35: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2902:     uv_run(uv_default_loop());",
          "2908:     EmitExit(process_l);",
          "2909:     RunAtExit();",
          "",
          "[Removed Lines]",
          "2904: #ifdef HAVE_ETW",
          "2905:     shutdown_etw();",
          "2906: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_win32_etw_provider-inl.h||src/node_win32_etw_provider-inl.h": [
          "File: src/node_win32_etw_provider-inl.h -> src/node_win32_etw_provider-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: void NODE_GC_START(GCType type, GCCallbackFlags flags) {",
          "122: }",
          "125: void NODE_GC_DONE(GCType type, GCCallbackFlags flags) {",
          "129: }",
          "",
          "[Removed Lines]",
          "119:   EVENT_DATA_DESCRIPTOR descriptors[2];",
          "120:   ETW_WRITE_GC(descriptors, type, flags);",
          "121:   ETW_WRITE_EVENT(NODE_GC_START_EVENT, descriptors);",
          "126:   EVENT_DATA_DESCRIPTOR descriptors[2];",
          "127:   ETW_WRITE_GC(descriptors, type, flags);",
          "128:   ETW_WRITE_EVENT(NODE_GC_DONE_EVENT, descriptors);",
          "",
          "[Added Lines]",
          "119:   if (events_enabled > 0) {",
          "120:     EVENT_DATA_DESCRIPTOR descriptors[2];",
          "121:     ETW_WRITE_GC(descriptors, type, flags);",
          "122:     ETW_WRITE_EVENT(NODE_GC_START_EVENT, descriptors);",
          "123:   }",
          "128:   if (events_enabled > 0) {",
          "129:     EVENT_DATA_DESCRIPTOR descriptors[2];",
          "130:     ETW_WRITE_GC(descriptors, type, flags);",
          "131:     ETW_WRITE_EVENT(NODE_GC_DONE_EVENT, descriptors);",
          "132:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}