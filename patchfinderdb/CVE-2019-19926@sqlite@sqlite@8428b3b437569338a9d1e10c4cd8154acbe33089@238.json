{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
      "candidate_info": {
        "commit_hash": "8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/index.test"
        ],
        "message": "Avoid unwelcomed side effects on the input operands in the OP_Concat operator.  Fix for ticket [3be1295b264be2fac49b681]\n\nFossilOrigin-Name: 713caa382cf7ddef872e510a76a5fca40be1a8d8876ce2f91b632bb0810a6630",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 09623cc4cc82e3c123d1fd5d88b2f4b50ec5f2cc7e579a7203258bf0c246a74f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   }",
          "196: #endif",
          "",
          "[Removed Lines]",
          "202: #define Stringify(P, enc) \\",
          "203:    if(((P)->flags&(MEM_Str|MEM_Blob))==0 && sqlite3VdbeMemStringify(P,enc,0)) \\",
          "204:      { goto no_mem; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1468:   pIn1 = &aMem[pOp->p1];",
          "1469:   pIn2 = &aMem[pOp->p2];",
          "1470:   pOut = &aMem[pOp->p3];",
          "1471:   assert( pIn1!=pOut );",
          "1473:     sqlite3VdbeMemSetNull(pOut);",
          "1474:     break;",
          "1475:   }",
          "1479:   nByte = pIn1->n + pIn2->n;",
          "1480:   if( nByte>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1481:     goto too_big;",
          "",
          "[Removed Lines]",
          "1466:   i64 nByte;",
          "1472:   if( (pIn1->flags | pIn2->flags) & MEM_Null ){",
          "1476:   if( ExpandBlob(pIn1) || ExpandBlob(pIn2) ) goto no_mem;",
          "1477:   Stringify(pIn1, encoding);",
          "1478:   Stringify(pIn2, encoding);",
          "",
          "[Added Lines]",
          "1465:   testcase( pIn1==pIn2 );",
          "1466:   testcase( pOut==pIn2 );",
          "1468:   flags1 = pIn1->flags;",
          "1469:   testcase( flags1 & MEM_Null );",
          "1470:   testcase( pIn2->flags & MEM_Null );",
          "1471:   if( (flags1 | pIn2->flags) & MEM_Null ){",
          "1475:   if( (flags1 & (MEM_Str|MEM_Blob))==0 ){",
          "1476:     if( sqlite3VdbeMemStringify(pIn1,encoding,0) ) goto no_mem;",
          "1477:   }else if( (flags1 & MEM_Zero)!=0 ){",
          "1478:     if( sqlite3VdbeMemExpandBlob(pIn1) ) goto no_mem;",
          "1479:   }",
          "1480:   flags2 = pIn2->flags;",
          "1481:   if( (flags2 & (MEM_Str|MEM_Blob))==0 ){",
          "1482:     if( sqlite3VdbeMemStringify(pIn2,encoding,0) ) goto no_mem;",
          "1483:   }else if( (flags2 & MEM_Zero)!=0 ){",
          "1484:     if( sqlite3VdbeMemExpandBlob(pIn2) ) goto no_mem;",
          "1485:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1486:   MemSetTypeFlag(pOut, MEM_Str);",
          "1487:   if( pOut!=pIn2 ){",
          "1488:     memcpy(pOut->z, pIn2->z, pIn2->n);",
          "1489:   }",
          "1490:   memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);",
          "1491:   pOut->z[nByte]=0;",
          "1492:   pOut->z[nByte+1] = 0;",
          "1493:   pOut->flags |= MEM_Term;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496:     assert( (pIn2->flags & MEM_Dyn) == (flags2 & MEM_Dyn) );",
          "1497:     pIn2->flags = flags2;",
          "1500:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "1501:   pIn1->flags = flags1;",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:   }",
          "739: } {0 {9 5 1}}",
          "743: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741: # 2019-05-01 ticket https://www.sqlite.org/src/info/3be1295b264be2fa",
          "742: do_execsql_test index-22.0 {",
          "743:   DROP TABLE IF EXISTS t1;",
          "744:   CREATE TABLE t1(a, b TEXT);",
          "745:   CREATE UNIQUE INDEX IF NOT EXISTS x1 ON t1(b==0);",
          "746:   CREATE INDEX IF NOT EXISTS x2 ON t1(a || 0) WHERE b;",
          "747:   INSERT INTO t1(a,b) VALUES('a',1),('a',0);",
          "748:   SELECT a, b, '|' FROM t1;",
          "749: } {a 1 | a 0 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
      "candidate_info": {
        "commit_hash": "94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94f0a8342106b4e1af85bf658bdf1c12ed010c73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Fix the xFetch method of the \"memdb\" VFS (used by deserialize) so that it is robust against corrupt database file.\n\nFossilOrigin-Name: 2c1ef40e787a6bc355b50168527a47eb09acd30d0d88cff8336a434ad554115d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   void **pp",
          "311: ){",
          "312:   MemFile *p = (MemFile *)pFile;",
          "315:   return SQLITE_OK;",
          "316: }",
          "",
          "[Removed Lines]",
          "313:   p->nMmap++;",
          "",
          "[Added Lines]",
          "313:   if( iOfst+iAmt>p->sz ){",
          "314:     assert( CORRUPT_DB );",
          "316:   }else{",
          "317:     p->nMmap++;",
          "319:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76e4990b259dd2e56883c224a0a70bcab9365cd3",
      "candidate_info": {
        "commit_hash": "76e4990b259dd2e56883c224a0a70bcab9365cd3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76e4990b259dd2e56883c224a0a70bcab9365cd3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Add test cases to test file walvfs.test.\n\nFossilOrigin-Name: d697f6f3ca47350dad30feb529914fc5254fa662ece783408eea963d912918c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8c1235c02b745138ac2b12e8bbb00dda4cac321176be92a2fa9547be029b3d0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1616:   return TCL_OK;",
          "1617: }",
          "1620: int Sqlitetestvfs_Init(Tcl_Interp *interp){",
          "1621:   Tcl_CreateObjCommand(interp, \"testvfs\", testvfs_cmd, 0, 0);",
          "1622:   Tcl_CreateObjCommand(interp, \"vfs_shmlock\", test_vfs_shmlock, 0, 0);",
          "1623:   return TCL_OK;",
          "1624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1619: static int SQLITE_TCLAPI test_vfs_set_readmark(",
          "1620:   void * clientData,",
          "1621:   Tcl_Interp *interp,",
          "1622:   int objc,",
          "1623:   Tcl_Obj *CONST objv[]",
          "1624: ){",
          "1625:   sqlite3 *db = 0;",
          "1626:   int rc = SQLITE_OK;",
          "1627:   const char *zDbname = 0;",
          "1628:   int iSlot = 0;",
          "1629:   int iVal = -1;",
          "1630:   sqlite3_file *pFd;",
          "1631:   void volatile *pShm = 0;",
          "1632:   u32 *aShm;",
          "1633:   int iOff;",
          "1635:   if( objc!=4 && objc!=5 ){",
          "1636:     Tcl_WrongNumArgs(interp, 1, objv, \"DB DBNAME SLOT ?VALUE?\");",
          "1637:     return TCL_ERROR;",
          "1638:   }",
          "1640:   zDbname = Tcl_GetString(objv[2]);",
          "1641:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db)",
          "1642:    || Tcl_GetIntFromObj(interp, objv[3], &iSlot)",
          "1643:    || (objc==5 && Tcl_GetIntFromObj(interp, objv[4], &iVal))",
          "1644:   ){",
          "1645:     return TCL_ERROR;",
          "1646:   }",
          "1648:   sqlite3_file_control(db, zDbname, SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);",
          "1649:   if( pFd==0 ){",
          "1650:     return TCL_ERROR;",
          "1651:   }",
          "1652:   rc = pFd->pMethods->xShmMap(pFd, 0, 32*1024, 0, &pShm);",
          "1653:   if( rc!=SQLITE_OK ){",
          "1654:     Tcl_SetObjResult(interp, Tcl_NewStringObj(sqlite3ErrName(rc), -1));",
          "1655:     return TCL_ERROR;",
          "1656:   }",
          "1657:   if( pShm==0 ){",
          "1658:     Tcl_AppendResult(interp, \"*-shm is not yet mapped\", 0);",
          "1659:     return TCL_ERROR;",
          "1660:   }",
          "1661:   aShm = (u32*)pShm;",
          "1662:   iOff = 12*2+1+iSlot;",
          "1664:   if( objc==5 ){",
          "1665:     aShm[iOff] = iVal;",
          "1666:   }",
          "1667:   Tcl_SetObjResult(interp, Tcl_NewIntObj(aShm[iOff]));",
          "1669:   return TCL_OK;",
          "1670: }",
          "1675:   Tcl_CreateObjCommand(interp, \"vfs_set_readmark\", test_vfs_set_readmark, 0, 0);",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:   SELECT count(*) FROM t1",
          "183: } {1 {attempt to write a readonly database}}",
          "185: db close",
          "186: tvfs delete",
          "187: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: #-------------------------------------------------------------------------",
          "186: #",
          "187: reset_db",
          "188: db close",
          "189: sqlite3 db test.db -vfs tvfs",
          "190: tvfs filter {}",
          "191: do_execsql_test 5.0 {",
          "192:   PRAGMA auto_vacuum = 0;",
          "193:   PRAGMA page_size = 1024;",
          "194:   CREATE TABLE t1(x);",
          "195:   PRAGMA journal_mode = wal;",
          "196:   WITH s(i) AS (",
          "197:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "198:   )",
          "199:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "200: } {wal}",
          "202: do_execsql_test 5.1 {",
          "203:   SELECT count(*) FROM t1",
          "204: } {20}",
          "206: do_test 5.2 {",
          "207:   vfs_set_readmark db main 1 100",
          "208:   vfs_set_readmark db main 2 100",
          "209:   vfs_set_readmark db main 3 100",
          "210:   vfs_set_readmark db main 4 100",
          "211: } {100}",
          "213: do_execsql_test 5.3 {",
          "214:   SELECT count(*) FROM t1",
          "215: } {20}",
          "217: do_test 5.3 {",
          "218:   list [vfs_set_readmark db main 1] \\",
          "219:        [vfs_set_readmark db main 2] \\",
          "220:        [vfs_set_readmark db main 3] \\",
          "221:        [vfs_set_readmark db main 4]",
          "222: } {24 100 100 100}",
          "224: tvfs script xShmLock",
          "225: tvfs filter xShmLock",
          "226: set ::cnt 20",
          "227: proc xShmLock {args} {",
          "228:   incr ::cnt -1",
          "229:   if {$::cnt>0} { return SQLITE_BUSY }",
          "230:   return SQLITE_OK",
          "231: }",
          "233: do_test 5.4 {",
          "234:   vfs_set_readmark db main 1 100",
          "235:   execsql { SELECT count(*) FROM t1 }",
          "236: } {20}",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "243: sqlite3 db test.db -vfs tvfs",
          "244: do_execsql_test 6.0 {",
          "245:   PRAGMA auto_vacuum = 0;",
          "246:   PRAGMA page_size = 1024;",
          "247:   CREATE TABLE t1(x);",
          "248:   PRAGMA journal_mode = wal;",
          "249:   WITH s(i) AS (",
          "250:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "251:   )",
          "252:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "253: } {wal}",
          "255: do_test 6.1 {",
          "256:   execsql { PRAGMA wal_checkpoint }",
          "257:   set {} {}",
          "258: } {}",
          "260: tvfs filter xShmLock",
          "261: set ::flag 0",
          "262: proc xShmLock {method file handle spec} {",
          "263:   if {$::flag && [lrange $spec 2 end]==\"lock shared\"} {",
          "264:     return SQLITE_BUSY",
          "265:   }",
          "266:   if {$spec==\"3 1 unlock shared\"} {",
          "267:     set ::flag 1",
          "268:   }",
          "269:   return SQLITE_OK",
          "270: }",
          "272: puts \"# WARNING: This next test takes around 12 seconds\"",
          "273: do_catchsql_test 6.2 {",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "746461f1b81fc952a2793f5f0b19099dc06e9510",
      "candidate_info": {
        "commit_hash": "746461f1b81fc952a2793f5f0b19099dc06e9510",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/746461f1b81fc952a2793f5f0b19099dc06e9510",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pager.c",
          "src/sqliteInt.h"
        ],
        "message": "Ensure that the main filename and the journal filenames in the pager object are all correctly double-zero terminated.\n\nFossilOrigin-Name: df51ae19c1aa4c26f2dcd427eddc1c9cc24b698e1ab0a948b198a57432e25e1e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4187:   return rc;",
          "4188: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4190: #ifdef SQLITE_DEBUG",
          "4196: int sqlite3UriCount(const char *z){",
          "4197:   int n = 0;",
          "4198:   if( z==0 ) return 0;",
          "4199:   z += strlen(z)+1;",
          "4200:   while( z[0] ){",
          "4201:     z += strlen(z)+1;",
          "4202:     z += strlen(z)+1;",
          "4203:     n++;",
          "4204:   }",
          "4205:   return n;",
          "4206: }",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4764: #ifdef SQLITE_DEBUG",
          "4766: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4797:     nPathname = sqlite3Strlen30(zPathname);",
          "4798:     z = zUri = &zFilename[sqlite3Strlen30(zFilename)+1];",
          "4799:     while( *z ){",
          "4802:     }",
          "4805:     if( rc==SQLITE_OK && nPathname+8>pVfs->mxPathname ){",
          "",
          "[Removed Lines]",
          "4800:       z += sqlite3Strlen30(z)+1;",
          "4801:       z += sqlite3Strlen30(z)+1;",
          "4803:     nUri = (int)(&z[1] - zUri);",
          "4804:     assert( nUri>=0 );",
          "",
          "[Added Lines]",
          "4803:       z += strlen(z)+1;",
          "4804:       z += strlen(z)+1;",
          "4805: #ifdef SQLITE_DEBUG",
          "4806:       nUri++;",
          "4807: #endif",
          "4809:     nUriByte = (int)(&z[2] - zUri);",
          "4810:     assert( nUriByte>=1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4857:   if( zPathname ){",
          "4858:     assert( nPathname>0 );",
          "4860:     memcpy(pPager->zFilename, zPathname, nPathname);",
          "4862:     memcpy(pPager->zJournal, zPathname, nPathname);",
          "4864:     sqlite3FileSuffix3(pPager->zFilename, pPager->zJournal);",
          "4865: #ifndef SQLITE_OMIT_WAL",
          "4867:     memcpy(pPager->zWal, zPathname, nPathname);",
          "4869:     sqlite3FileSuffix3(pPager->zFilename, pPager->zWal);",
          "4870: #endif",
          "4871:     sqlite3DbFree(0, zPathname);",
          "4872:   }",
          "4873:   pPager->pVfs = pVfs;",
          "",
          "[Removed Lines]",
          "4859:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUri);",
          "4861:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);",
          "4863:     memcpy(&pPager->zJournal[nPathname], \"-journal\\000\", 8+2);",
          "4866:     pPager->zWal = &pPager->zJournal[nPathname+8+1];",
          "4868:     memcpy(&pPager->zWal[nPathname], \"-wal\\000\", 4+1);",
          "",
          "[Added Lines]",
          "4866:     if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUriByte);",
          "4867:     pPager->zJournal =   (char*)(pPtr += nPathname + 1 + nUriByte);",
          "4869:     memcpy(&pPager->zJournal[nPathname], \"-journal\", 8);",
          "4872:     pPager->zWal = (char*)(pPtr += nPathname + 8 + 2);",
          "4874:     memcpy(&pPager->zWal[nPathname], \"-wal\", 4);",
          "4876:     assert( sqlite3UriCount(pPager->zWal)==0 );",
          "4878:     assert( sqlite3UriCount(pPager->zFilename)==nUri );",
          "4879:     assert( sqlite3UriCount(pPager->zJournal)==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3992: void sqlite3AddCollateType(Parse*, Token*);",
          "3993: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "3994: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3995: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3996:                     sqlite3_vfs**,char**,char **);",
          "3997: #ifdef SQLITE_HAS_CODEC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3995: #ifdef SQLITE_DEBUG",
          "3996:   int sqlite3UriCount(const char*);",
          "3997: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
      "candidate_info": {
        "commit_hash": "19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19d9a3ca6ce3d0f8ee0d6c249faf4e972af47e00",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vtab1.test",
          "test/without_rowid1.test",
          "test/without_rowid6.test"
        ],
        "message": "New test cases for PRAGMA index_xinfo on a WITHOUT ROWID table.  And new testcases using index_xinfo to verify that WITHOUT ROWID tables are constructed correctly.\n\nFossilOrigin-Name: 340378c1e60da80263523776f4b6366a9d332a7ee25986637e8b157f4e8e4bd3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vtab1.test||test/vtab1.test",
          "test/without_rowid1.test||test/without_rowid1.test",
          "test/without_rowid6.test||test/without_rowid6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62274ff683ba077d8b0fa34ad653ce235a8c5cbfdb7ab8558469af7333d03698",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:   }",
          "876: } {}",
          "878: ifcapable attach {",
          "879:   do_test vtab1.8-1 {",
          "880:     set echo_module \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878: # PRAGMA index_info and index_xinfo are no-ops on a virtual table",
          "879: do_test vtab1.7-14 {",
          "880:   execsql {",
          "881:     PRAGMA index_info('echo_abc');",
          "882:     PRAGMA index_xinfo('echo_abc');",
          "883:   }",
          "884: } {}",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: integrity_check without_rowid1-1.0ic",
          "34: do_execsql_test without_rowid1-1.1 {",
          "35:   SELECT *, '|' FROM t1 ORDER BY +c, a;",
          "36: } {arctic sleep ammonia helena | journal sherman ammonia helena | dynamic juliet flipper command | journal sherman gamma patriot |}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: do_execsql_test without_rowid1-1.0ixi {",
          "35:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "36: } {c 1 a 1 b 0 d 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   UPDATE t4 SET a = 'ABC';",
          "121:   SELECT * FROM t4;",
          "122: } {ABC def}",
          "124: do_execsql_test 2.2.1 {",
          "125:   DROP TABLE t4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: do_execsql_test 2.1.3 {",
          "128:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "129: } {a nocase 1 b BINARY 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   SELECT * FROM t4;",
          "134: } {xyz ABC}",
          "136: do_execsql_test 2.3.1 {",
          "137:   CREATE TABLE t5 (a, b, PRIMARY KEY(b, a)) WITHOUT ROWID;",
          "138:   INSERT INTO t5(a, b) VALUES('abc', 'def');",
          "139:   UPDATE t5 SET a='abc', b='def';",
          "140: } {}",
          "142: do_execsql_test 2.4.1 {",
          "143:   CREATE TABLE t6 (",
          "144:     a COLLATE nocase, b, c UNIQUE, PRIMARY KEY(b, a)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: do_execsql_test 2.2.3 {",
          "144:   SELECT name, coll, key FROM pragma_index_xinfo('t4');",
          "145: } {a nocase 1 b BINARY 0}",
          "154: do_execsql_test 2.3.2 {",
          "155:   SELECT name, coll, key FROM pragma_index_xinfo('t5');",
          "156: } {b BINARY 1 a BINARY 1}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:   SELECT * FROM t6 ORDER BY c;",
          "154: } {ABC def ghi ABC def ghi}",
          "156: #-------------------------------------------------------------------------",
          "157: # Unless the destination table is completely empty, the xfer optimization",
          "158: # is disabled for WITHOUT ROWID tables. The following tests check for",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: do_execsql_test 2.4.3 {",
          "174:   SELECT name, coll, key FROM pragma_index_xinfo('t6');",
          "175: } {b BINARY 1 a nocase 1 c BINARY 0}",
          "",
          "---------------"
        ],
        "test/without_rowid6.test||test/without_rowid6.test": [
          "File: test/without_rowid6.test -> test/without_rowid6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   INSERT INTO t1(a,b,c,d,e) SELECT i, i+1000, printf('x%dy',i), 0, 0 FROM c;",
          "25:   ANALYZE;",
          "26: } {}",
          "27: do_execsql_test without_rowid6-110 {",
          "28:   SELECT c FROM t1 WHERE a=123;",
          "29: } {x123y}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: do_execsql_test without_rowid6-101 {",
          "28:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "29: } {a 1 b 1 c 1 d 1 e 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "52:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "53: } {4 1}",
          "54: do_execsql_test without_rowid6-210 {",
          "55:   EXPLAIN QUERY PLAN",
          "56:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: do_execsql_test without_rowid6-201 {",
          "58:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "59: } {b 1 a 0 c 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   INSERT INTO t1(a,b,c) VALUES(1,8,3),(4,5,6),(7,2,9);",
          "106:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "107: } {4 1}",
          "108: do_execsql_test without_rowid6-510 {",
          "109:   EXPLAIN QUERY PLAN",
          "110:   SELECT a FROM t1 WHERE b>3 ORDER BY b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: do_execsql_test without_rowid6-501 {",
          "115:   SELECT name, key FROM pragma_index_xinfo('t1');",
          "116: } {b 1 c 1 a 0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}