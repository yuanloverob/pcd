{
  "cve_id": "CVE-2016-3841",
  "cve_desc": "The IPv6 stack in the Linux kernel before 4.3.3 mishandles options data, which allows local users to gain privileges or cause a denial of service (use-after-free and system crash) via a crafted sendmsg system call.",
  "repo": "torvalds/linux",
  "patch_hash": "45f6fad84cc305103b28d73482b344d7f5b76f39",
  "patch_info": {
    "commit_hash": "45f6fad84cc305103b28d73482b344d7f5b76f39",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/45f6fad84cc305103b28d73482b344d7f5b76f39",
    "files": [
      "include/linux/ipv6.h",
      "include/net/ipv6.h",
      "net/dccp/ipv6.c",
      "net/ipv6/af_inet6.c",
      "net/ipv6/datagram.c",
      "net/ipv6/exthdrs.c",
      "net/ipv6/inet6_connection_sock.c",
      "net/ipv6/ipv6_sockglue.c",
      "net/ipv6/raw.c",
      "net/ipv6/syncookies.c",
      "net/ipv6/tcp_ipv6.c",
      "net/ipv6/udp.c",
      "net/l2tp/l2tp_ip6.c"
    ],
    "message": "ipv6: add complete rcu protection around np->opt\n\nThis patch addresses multiple problems :\n\nUDP/RAW sendmsg() need to get a stable struct ipv6_txoptions\nwhile socket is not locked : Other threads can change np->opt\nconcurrently. Dmitry posted a syzkaller\n(http://github.com/google/syzkaller) program desmonstrating\nuse-after-free.\n\nStarting with TCP/DCCP lockless listeners, tcp_v6_syn_recv_sock()\nand dccp_v6_request_recv_sock() also need to use RCU protection\nto dereference np->opt once (before calling ipv6_dup_options())\n\nThis patch adds full RCU protection to np->opt\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/linux/ipv6.h||include/linux/ipv6.h",
      "include/net/ipv6.h||include/net/ipv6.h",
      "net/dccp/ipv6.c||net/dccp/ipv6.c",
      "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
      "net/ipv6/datagram.c||net/ipv6/datagram.c",
      "net/ipv6/exthdrs.c||net/ipv6/exthdrs.c",
      "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c",
      "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
      "net/ipv6/raw.c||net/ipv6/raw.c",
      "net/ipv6/syncookies.c||net/ipv6/syncookies.c",
      "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
      "net/ipv6/udp.c||net/ipv6/udp.c",
      "net/l2tp/l2tp_ip6.c||net/l2tp/l2tp_ip6.c"
    ]
  },
  "patch_diff": {
    "include/linux/ipv6.h||include/linux/ipv6.h": [
      "File: include/linux/ipv6.h -> include/linux/ipv6.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  struct ipv6_ac_socklist *ipv6_ac_list;",
      "228:  struct ipv6_fl_socklist __rcu *ipv6_fl_list;",
      "231:  struct sk_buff  *pktoptions;",
      "232:  struct sk_buff  *rxpmtu;",
      "233:  struct inet6_cork cork;",
      "",
      "[Removed Lines]",
      "230:  struct ipv6_txoptions *opt;",
      "",
      "[Added Lines]",
      "230:  struct ipv6_txoptions __rcu *opt;",
      "",
      "---------------"
    ],
    "include/net/ipv6.h||include/net/ipv6.h": [
      "File: include/net/ipv6.h -> include/net/ipv6.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: struct ipv6_txoptions {",
      "209:  int   tot_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:  atomic_t  refcnt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:  struct ipv6_opt_hdr *dst0opt;",
      "219:  struct ipv6_opt_hdr *dst1opt;",
      "222: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "221:  struct rcu_head  rcu;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "252:  struct rcu_head   rcu;",
      "253: };",
      "255: struct ip6_flowlabel *fl6_sock_lookup(struct sock *sk, __be32 label);",
      "256: struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *opt_space,",
      "257:       struct ip6_flowlabel *fl,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256: static inline struct ipv6_txoptions *txopt_get(const struct ipv6_pinfo *np)",
      "257: {",
      "258:  struct ipv6_txoptions *opt;",
      "260:  rcu_read_lock();",
      "261:  opt = rcu_dereference(np->opt);",
      "262:  if (opt && !atomic_inc_not_zero(&opt->refcnt))",
      "263:   opt = NULL;",
      "264:  rcu_read_unlock();",
      "265:  return opt;",
      "266: }",
      "268: static inline void txopt_put(struct ipv6_txoptions *opt)",
      "269: {",
      "270:  if (opt && atomic_dec_and_test(&opt->refcnt))",
      "271:   kfree_rcu(opt, rcu);",
      "272: }",
      "",
      "---------------"
    ],
    "net/dccp/ipv6.c||net/dccp/ipv6.c": [
      "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:  security_req_classify_flow(req, flowi6_to_flowi(&fl6));",
      "207:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "208:  if (IS_ERR(dst)) {",
      "",
      "[Removed Lines]",
      "205:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "205:  rcu_read_lock();",
      "206:  final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt), &final);",
      "207:  rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "219:         &ireq->ir_v6_loc_addr,",
      "220:         &ireq->ir_v6_rmt_addr);",
      "221:   fl6.daddr = ireq->ir_v6_rmt_addr;",
      "223:   err = net_xmit_eval(err);",
      "224:  }",
      "",
      "[Removed Lines]",
      "222:   err = ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "224:   rcu_read_lock();",
      "225:   err = ip6_xmit(sk, skb, &fl6, rcu_dereference(np->opt),",
      "226:           np->tclass);",
      "227:   rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "387:  struct inet_request_sock *ireq = inet_rsk(req);",
      "388:  struct ipv6_pinfo *newnp;",
      "389:  const struct ipv6_pinfo *np = inet6_sk(sk);",
      "390:  struct inet_sock *newinet;",
      "391:  struct dccp6_sock *newdp6;",
      "392:  struct sock *newsk;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "395:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "494:  inet_csk(newsk)->icsk_ext_hdr_len = 0;",
      "499:  dccp_sync_mss(newsk, dst_mtu(dst));",
      "",
      "[Removed Lines]",
      "491:  if (np->opt != NULL)",
      "492:   newnp->opt = ipv6_dup_options(newsk, np->opt);",
      "495:  if (newnp->opt != NULL)",
      "496:   inet_csk(newsk)->icsk_ext_hdr_len = (newnp->opt->opt_nflen +",
      "497:            newnp->opt->opt_flen);",
      "",
      "[Added Lines]",
      "497:  opt = rcu_dereference(np->opt);",
      "498:  if (opt) {",
      "499:   opt = ipv6_dup_options(newsk, opt);",
      "500:   RCU_INIT_POINTER(newnp->opt, opt);",
      "501:  }",
      "503:  if (opt)",
      "504:   inet_csk(newsk)->icsk_ext_hdr_len = opt->opt_nflen +",
      "505:           opt->opt_flen;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "757:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "758:  struct dccp_sock *dp = dccp_sk(sk);",
      "759:  struct in6_addr *saddr = NULL, *final_p, final;",
      "760:  struct flowi6 fl6;",
      "761:  struct dst_entry *dst;",
      "762:  int addr_type;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "768:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "856:  fl6.fl6_sport = inet->inet_sport;",
      "857:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "861:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "862:  if (IS_ERR(dst)) {",
      "",
      "[Removed Lines]",
      "859:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "868:  opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "869:  final_p = fl6_update_dst(&fl6, opt, &final);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "876:  __ip6_dst_store(sk, dst, NULL, NULL);",
      "878:  icsk->icsk_ext_hdr_len = 0;",
      "883:  inet->inet_dport = usin->sin6_port;",
      "",
      "[Removed Lines]",
      "879:  if (np->opt != NULL)",
      "880:   icsk->icsk_ext_hdr_len = (np->opt->opt_flen +",
      "881:        np->opt->opt_nflen);",
      "",
      "[Added Lines]",
      "889:  if (opt)",
      "890:   icsk->icsk_ext_hdr_len = opt->opt_flen + opt->opt_nflen;",
      "",
      "---------------"
    ],
    "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c": [
      "File: net/ipv6/af_inet6.c -> net/ipv6/af_inet6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "434: }",
      "435: EXPORT_SYMBOL_GPL(inet6_destroy_sock);",
      "",
      "[Removed Lines]",
      "431:  opt = xchg(&np->opt, NULL);",
      "432:  if (opt)",
      "433:   sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "431:  opt = xchg((__force struct ipv6_txoptions **)&np->opt, NULL);",
      "432:  if (opt) {",
      "433:   atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "434:   txopt_put(opt);",
      "435:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "659:   fl6.fl6_sport = inet->inet_sport;",
      "660:   security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "664:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "665:   if (IS_ERR(dst)) {",
      "",
      "[Removed Lines]",
      "662:   final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "664:   rcu_read_lock();",
      "665:   final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt),",
      "666:       &final);",
      "667:   rcu_read_unlock();",
      "",
      "---------------"
    ],
    "net/ipv6/datagram.c||net/ipv6/datagram.c": [
      "File: net/ipv6/datagram.c -> net/ipv6/datagram.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "171:  final_p = fl6_update_dst(&fl6, opt, &final);",
      "173:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
      "174:  err = 0;",
      "",
      "[Removed Lines]",
      "170:  opt = flowlabel ? flowlabel->opt : np->opt;",
      "",
      "[Added Lines]",
      "170:  rcu_read_lock();",
      "171:  opt = flowlabel ? flowlabel->opt : rcu_dereference(np->opt);",
      "173:  rcu_read_unlock();",
      "",
      "---------------"
    ],
    "net/ipv6/exthdrs.c||net/ipv6/exthdrs.c": [
      "File: net/ipv6/exthdrs.c -> net/ipv6/exthdrs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "728:   if (opt2->srcrt)",
      "730:  }",
      "731:  return opt2;",
      "732: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "730:   atomic_set(&opt2->refcnt, 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "790:   return ERR_PTR(-ENOBUFS);",
      "792:  memset(opt2, 0, tot_len);",
      "794:  opt2->tot_len = tot_len;",
      "795:  p = (char *)(opt2 + 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:  atomic_set(&opt2->refcnt, 1);",
      "",
      "---------------"
    ],
    "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c": [
      "File: net/ipv6/inet6_connection_sock.c -> net/ipv6/inet6_connection_sock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:  memset(fl6, 0, sizeof(*fl6));",
      "79:  fl6->flowi6_proto = proto;",
      "80:  fl6->daddr = ireq->ir_v6_rmt_addr;",
      "82:  fl6->saddr = ireq->ir_v6_loc_addr;",
      "83:  fl6->flowi6_oif = ireq->ir_iif;",
      "84:  fl6->flowi6_mark = ireq->ir_mark;",
      "",
      "[Removed Lines]",
      "81:  final_p = fl6_update_dst(fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "81:  rcu_read_lock();",
      "82:  final_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);",
      "83:  rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:  fl6->fl6_dport = inet->inet_dport;",
      "143:  security_sk_classify_flow(sk, flowi6_to_flowi(fl6));",
      "147:  dst = __inet6_csk_dst_check(sk, np->dst_cookie);",
      "148:  if (!dst) {",
      "",
      "[Removed Lines]",
      "145:  final_p = fl6_update_dst(fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "147:  rcu_read_lock();",
      "148:  final_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);",
      "149:  rcu_read_unlock();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "176:  fl6.daddr = sk->sk_v6_daddr;",
      "179:  rcu_read_unlock();",
      "180:  return res;",
      "181: }",
      "",
      "[Removed Lines]",
      "178:  res = ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "182:  res = ip6_xmit(sk, skb, &fl6, rcu_dereference(np->opt),",
      "183:          np->tclass);",
      "",
      "---------------"
    ],
    "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c": [
      "File: net/ipv6/ipv6_sockglue.c -> net/ipv6/ipv6_sockglue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:    icsk->icsk_sync_mss(sk, icsk->icsk_pmtu_cookie);",
      "112:   }",
      "113:  }",
      "115:  sk_dst_reset(sk);",
      "117:  return opt;",
      "",
      "[Removed Lines]",
      "114:  opt = xchg(&inet6_sk(sk)->opt, opt);",
      "",
      "[Added Lines]",
      "114:  opt = xchg((__force struct ipv6_txoptions **)&inet6_sk(sk)->opt,",
      "115:      opt);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:     sk->sk_socket->ops = &inet_dgram_ops;",
      "232:     sk->sk_family = PF_INET;",
      "233:    }",
      "237:    pktopt = xchg(&np->pktoptions, NULL);",
      "238:    kfree_skb(pktopt);",
      "",
      "[Removed Lines]",
      "234:    opt = xchg(&np->opt, NULL);",
      "235:    if (opt)",
      "236:     sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "235:    opt = xchg((__force struct ipv6_txoptions **)&np->opt,",
      "236:        NULL);",
      "237:    if (opt) {",
      "238:     atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "239:     txopt_put(opt);",
      "240:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "403:   if (optname != IPV6_RTHDR && !ns_capable(net->user_ns, CAP_NET_RAW))",
      "404:    break;",
      "407:       (struct ipv6_opt_hdr __user *)optval,",
      "408:       optlen);",
      "409:   if (IS_ERR(opt)) {",
      "",
      "[Removed Lines]",
      "406:   opt = ipv6_renew_options(sk, np->opt, optname,",
      "",
      "[Added Lines]",
      "410:   opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "411:   opt = ipv6_renew_options(sk, opt, optname,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "432:   retv = 0;",
      "433:   opt = ipv6_update_options(sk, opt);",
      "434: sticky_done:",
      "437:   break;",
      "438:  }",
      "",
      "[Removed Lines]",
      "435:   if (opt)",
      "436:    sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "440:   if (opt) {",
      "441:    atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "442:    txopt_put(opt);",
      "443:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "486:    break;",
      "488:   memset(opt, 0, sizeof(*opt));",
      "489:   opt->tot_len = sizeof(*opt) + optlen;",
      "490:   retv = -EFAULT;",
      "491:   if (copy_from_user(opt+1, optval, optlen))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "496:   atomic_set(&opt->refcnt, 1);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "502:   retv = 0;",
      "503:   opt = ipv6_update_options(sk, opt);",
      "504: done:",
      "507:   break;",
      "508:  }",
      "509:  case IPV6_UNICAST_HOPS:",
      "",
      "[Removed Lines]",
      "505:   if (opt)",
      "506:    sock_kfree_s(sk, opt, opt->tot_len);",
      "",
      "[Added Lines]",
      "513:   if (opt) {",
      "514:    atomic_sub(opt->tot_len, &sk->sk_omem_alloc);",
      "515:    txopt_put(opt);",
      "516:   }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1110:  case IPV6_RTHDR:",
      "1111:  case IPV6_DSTOPTS:",
      "1112:  {",
      "1114:   lock_sock(sk);",
      "1117:   release_sock(sk);",
      "1119:   if (len < 0)",
      "",
      "[Removed Lines]",
      "1115:   len = ipv6_getsockopt_sticky(sk, np->opt,",
      "1116:           optname, optval, len);",
      "",
      "[Added Lines]",
      "1123:   struct ipv6_txoptions *opt;",
      "1126:   opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "1127:   len = ipv6_getsockopt_sticky(sk, opt, optname, optval, len);",
      "",
      "---------------"
    ],
    "net/ipv6/raw.c||net/ipv6/raw.c": [
      "File: net/ipv6/raw.c -> net/ipv6/raw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "734: static int rawv6_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)",
      "735: {",
      "736:  struct ipv6_txoptions opt_space;",
      "737:  DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);",
      "738:  struct in6_addr *daddr, *final_p, final;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "736:  struct ipv6_txoptions *opt_to_free = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "839:   if (!(opt->opt_nflen|opt->opt_flen))",
      "840:    opt = NULL;",
      "841:  }",
      "844:  if (flowlabel)",
      "845:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
      "846:  opt = ipv6_fixup_options(&opt_space, opt);",
      "",
      "[Removed Lines]",
      "842:  if (!opt)",
      "843:   opt = np->opt;",
      "",
      "[Added Lines]",
      "843:  if (!opt) {",
      "844:   opt = txopt_get(np);",
      "845:   opt_to_free = opt;",
      "846:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "906:  dst_release(dst);",
      "907: out:",
      "908:  fl6_sock_release(flowlabel);",
      "909:  return err < 0 ? err : len;",
      "910: do_confirm:",
      "911:  dst_confirm(dst);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "912:  txopt_put(opt_to_free);",
      "",
      "---------------"
    ],
    "net/ipv6/syncookies.c||net/ipv6/syncookies.c": [
      "File: net/ipv6/syncookies.c -> net/ipv6/syncookies.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "222:   memset(&fl6, 0, sizeof(fl6));",
      "223:   fl6.flowi6_proto = IPPROTO_TCP;",
      "224:   fl6.daddr = ireq->ir_v6_rmt_addr;",
      "226:   fl6.saddr = ireq->ir_v6_loc_addr;",
      "227:   fl6.flowi6_oif = sk->sk_bound_dev_if;",
      "228:   fl6.flowi6_mark = ireq->ir_mark;",
      "",
      "[Removed Lines]",
      "225:   final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "225:   final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt), &final);",
      "",
      "---------------"
    ],
    "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
      "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "121:  struct tcp_sock *tp = tcp_sk(sk);",
      "122:  struct in6_addr *saddr = NULL, *final_p, final;",
      "123:  struct flowi6 fl6;",
      "124:  struct dst_entry *dst;",
      "125:  int addr_type;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "235:  fl6.fl6_dport = usin->sin6_port;",
      "236:  fl6.fl6_sport = inet->inet_sport;",
      "240:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
      "",
      "[Removed Lines]",
      "238:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
      "",
      "[Added Lines]",
      "239:  opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
      "240:  final_p = fl6_update_dst(&fl6, opt, &final);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:   tcp_fetch_timewait_stamp(sk, dst);",
      "265:  icsk->icsk_ext_hdr_len = 0;",
      "270:  tp->rx_opt.mss_clamp = IPV6_MIN_MTU - sizeof(struct tcphdr) - sizeof(struct ipv6hdr);",
      "",
      "[Removed Lines]",
      "266:  if (np->opt)",
      "267:   icsk->icsk_ext_hdr_len = (np->opt->opt_flen +",
      "268:        np->opt->opt_nflen);",
      "",
      "[Added Lines]",
      "268:  if (opt)",
      "269:   icsk->icsk_ext_hdr_len = opt->opt_flen +",
      "270:       opt->opt_nflen;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "461:   if (np->repflow && ireq->pktopts)",
      "462:    fl6->flowlabel = ip6_flowlabel(ipv6_hdr(ireq->pktopts));",
      "465:   err = net_xmit_eval(err);",
      "466:  }",
      "",
      "[Removed Lines]",
      "464:   err = ip6_xmit(sk, skb, fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "466:   err = ip6_xmit(sk, skb, fl6, rcu_dereference(np->opt),",
      "467:           np->tclass);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "972:  struct inet_request_sock *ireq;",
      "973:  struct ipv6_pinfo *newnp;",
      "974:  const struct ipv6_pinfo *np = inet6_sk(sk);",
      "975:  struct tcp6_sock *newtcp6sk;",
      "976:  struct inet_sock *newinet;",
      "977:  struct tcp_sock *newtp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978:  struct ipv6_txoptions *opt;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1098:     but we make one more one thing there: reattach optmem",
      "1099:     to newsk.",
      "1104:  inet_csk(newsk)->icsk_ext_hdr_len = 0;",
      "1109:  tcp_ca_openreq_child(newsk, dst);",
      "",
      "[Removed Lines]",
      "1101:  if (np->opt)",
      "1102:   newnp->opt = ipv6_dup_options(newsk, np->opt);",
      "1105:  if (newnp->opt)",
      "1106:   inet_csk(newsk)->icsk_ext_hdr_len = (newnp->opt->opt_nflen +",
      "1107:            newnp->opt->opt_flen);",
      "",
      "[Added Lines]",
      "1105:  opt = rcu_dereference(np->opt);",
      "1106:  if (opt) {",
      "1107:   opt = ipv6_dup_options(newsk, opt);",
      "1108:   RCU_INIT_POINTER(newnp->opt, opt);",
      "1109:  }",
      "1111:  if (opt)",
      "1112:   inet_csk(newsk)->icsk_ext_hdr_len = opt->opt_nflen +",
      "1113:           opt->opt_flen;",
      "",
      "---------------"
    ],
    "net/ipv6/udp.c||net/ipv6/udp.c": [
      "File: net/ipv6/udp.c -> net/ipv6/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1110:  DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);",
      "1111:  struct in6_addr *daddr, *final_p, final;",
      "1112:  struct ipv6_txoptions *opt = NULL;",
      "1113:  struct ip6_flowlabel *flowlabel = NULL;",
      "1114:  struct flowi6 fl6;",
      "1115:  struct dst_entry *dst;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1113:  struct ipv6_txoptions *opt_to_free = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1263:    opt = NULL;",
      "1264:   connected = 0;",
      "1265:  }",
      "1268:  if (flowlabel)",
      "1269:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
      "1270:  opt = ipv6_fixup_options(&opt_space, opt);",
      "",
      "[Removed Lines]",
      "1266:  if (!opt)",
      "1267:   opt = np->opt;",
      "",
      "[Added Lines]",
      "1267:  if (!opt) {",
      "1268:   opt = txopt_get(np);",
      "1269:   opt_to_free = opt;",
      "1270:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1373: out:",
      "1374:  dst_release(dst);",
      "1375:  fl6_sock_release(flowlabel);",
      "1376:  if (!err)",
      "1377:   return len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1379:  txopt_put(opt_to_free);",
      "",
      "---------------"
    ],
    "net/l2tp/l2tp_ip6.c||net/l2tp/l2tp_ip6.c": [
      "File: net/l2tp/l2tp_ip6.c -> net/l2tp/l2tp_ip6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "486:  DECLARE_SOCKADDR(struct sockaddr_l2tpip6 *, lsa, msg->msg_name);",
      "487:  struct in6_addr *daddr, *final_p, final;",
      "488:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "489:  struct ipv6_txoptions *opt = NULL;",
      "490:  struct ip6_flowlabel *flowlabel = NULL;",
      "491:  struct dst_entry *dst = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "489:  struct ipv6_txoptions *opt_to_free = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "575:    opt = NULL;",
      "576:  }",
      "580:  if (flowlabel)",
      "581:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
      "582:  opt = ipv6_fixup_options(&opt_space, opt);",
      "",
      "[Removed Lines]",
      "578:  if (opt == NULL)",
      "579:   opt = np->opt;",
      "",
      "[Added Lines]",
      "579:  if (!opt) {",
      "580:   opt = txopt_get(np);",
      "581:   opt_to_free = opt;",
      "582:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "631:  dst_release(dst);",
      "632: out:",
      "633:  fl6_sock_release(flowlabel);",
      "635:  return err < 0 ? err : len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "637:  txopt_put(opt_to_free);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e2040db1539a904924b997a14ebd3de53172100",
      "candidate_info": {
        "commit_hash": "7e2040db1539a904924b997a14ebd3de53172100",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7e2040db1539a904924b997a14ebd3de53172100",
        "files": [
          "net/ipv6/datagram.c"
        ],
        "message": "ipv6: datagram: Refactor dst lookup and update codes to a new function\n\nThis patch moves the route lookup and update codes for connected\ndatagram sk to a newly created function ip6_datagram_dst_update()\n\nIt will be reused during the pmtu update in the later patch.\n\nSigned-off-by: Martin KaFai Lau <kafai@fb.com>\nCc: Cong Wang <xiyou.wangcong@gmail.com>\nCc: Eric Dumazet <edumazet@google.com>\nCc: Wei Wang <weiwan@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/datagram.c||net/ipv6/datagram.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/datagram.c||net/ipv6/datagram.c"
          ],
          "candidate": [
            "net/ipv6/datagram.c||net/ipv6/datagram.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/datagram.c||net/ipv6/datagram.c": [
          "File: net/ipv6/datagram.c -> net/ipv6/datagram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  security_sk_classify_flow(sk, flowi6_to_flowi(fl6));",
          "65: }",
          "67: static int __ip6_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)",
          "68: {",
          "69:  struct sockaddr_in6 *usin = (struct sockaddr_in6 *) uaddr;",
          "70:  struct inet_sock *inet = inet_sk(sk);",
          "71:  struct ipv6_pinfo *np = inet6_sk(sk);",
          "77:  int   addr_type;",
          "78:  int   err;",
          "79:  __be32   fl6_flowlabel = 0;",
          "",
          "[Removed Lines]",
          "72:  struct in6_addr *daddr, *final_p, final;",
          "73:  struct dst_entry *dst;",
          "74:  struct flowi6  fl6;",
          "75:  struct ip6_flowlabel *flowlabel = NULL;",
          "76:  struct ipv6_txoptions *opt;",
          "",
          "[Added Lines]",
          "67: static int ip6_datagram_dst_update(struct sock *sk)",
          "68: {",
          "69:  struct ip6_flowlabel *flowlabel = NULL;",
          "70:  struct in6_addr *final_p, final;",
          "71:  struct ipv6_txoptions *opt;",
          "72:  struct dst_entry *dst;",
          "73:  struct inet_sock *inet = inet_sk(sk);",
          "74:  struct ipv6_pinfo *np = inet6_sk(sk);",
          "75:  struct flowi6 fl6;",
          "76:  int err = 0;",
          "78:  if (np->sndflow && (np->flow_label & IPV6_FLOWLABEL_MASK)) {",
          "79:   flowlabel = fl6_sock_lookup(sk, np->flow_label);",
          "80:   if (!flowlabel)",
          "81:    return -EINVAL;",
          "82:  }",
          "83:  ip6_datagram_flow_key_init(&fl6, sk);",
          "85:  rcu_read_lock();",
          "86:  opt = flowlabel ? flowlabel->opt : rcu_dereference(np->opt);",
          "87:  final_p = fl6_update_dst(&fl6, opt, &final);",
          "88:  rcu_read_unlock();",
          "90:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "91:  if (IS_ERR(dst)) {",
          "92:   err = PTR_ERR(dst);",
          "93:   goto out;",
          "94:  }",
          "96:  if (ipv6_addr_any(&np->saddr))",
          "97:   np->saddr = fl6.saddr;",
          "99:  if (ipv6_addr_any(&sk->sk_v6_rcv_saddr)) {",
          "100:   sk->sk_v6_rcv_saddr = fl6.saddr;",
          "101:   inet->inet_rcv_saddr = LOOPBACK4_IPV6;",
          "102:   if (sk->sk_prot->rehash)",
          "103:    sk->sk_prot->rehash(sk);",
          "104:  }",
          "106:  ip6_dst_store(sk, dst,",
          "107:         ipv6_addr_equal(&fl6.daddr, &sk->sk_v6_daddr) ?",
          "108:         &sk->sk_v6_daddr : NULL,",
          "109: #ifdef CONFIG_IPV6_SUBTREES",
          "110:         ipv6_addr_equal(&fl6.saddr, &np->saddr) ?",
          "111:         &np->saddr :",
          "112: #endif",
          "113:         NULL);",
          "115: out:",
          "116:  fl6_sock_release(flowlabel);",
          "117:  return err;",
          "118: }",
          "125:  struct in6_addr  *daddr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  if (usin->sin6_family != AF_INET6)",
          "92:   return -EAFNOSUPPORT;",
          "95:   fl6_flowlabel = usin->sin6_flowinfo & IPV6_FLOWINFO_MASK;",
          "103:  addr_type = ipv6_addr_type(&usin->sin6_addr);",
          "",
          "[Removed Lines]",
          "94:  if (np->sndflow) {",
          "96:   if (fl6_flowlabel & IPV6_FLOWLABEL_MASK) {",
          "97:    flowlabel = fl6_sock_lookup(sk, fl6_flowlabel);",
          "98:    if (!flowlabel)",
          "99:     return -EINVAL;",
          "100:   }",
          "101:  }",
          "",
          "[Added Lines]",
          "143:  if (np->sndflow)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:   goto out;",
          "216:  sk->sk_state = TCP_ESTABLISHED;",
          "217:  sk_set_txhash(sk);",
          "218: out:",
          "220:  return err;",
          "221: }",
          "",
          "[Removed Lines]",
          "181:  ip6_datagram_flow_key_init(&fl6, sk);",
          "183:  rcu_read_lock();",
          "184:  opt = flowlabel ? flowlabel->opt : rcu_dereference(np->opt);",
          "185:  final_p = fl6_update_dst(&fl6, opt, &final);",
          "186:  rcu_read_unlock();",
          "188:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "189:  err = 0;",
          "190:  if (IS_ERR(dst)) {",
          "191:   err = PTR_ERR(dst);",
          "193:  }",
          "197:  if (ipv6_addr_any(&np->saddr))",
          "198:   np->saddr = fl6.saddr;",
          "200:  if (ipv6_addr_any(&sk->sk_v6_rcv_saddr)) {",
          "201:   sk->sk_v6_rcv_saddr = fl6.saddr;",
          "202:   inet->inet_rcv_saddr = LOOPBACK4_IPV6;",
          "203:   if (sk->sk_prot->rehash)",
          "204:    sk->sk_prot->rehash(sk);",
          "205:  }",
          "207:  ip6_dst_store(sk, dst,",
          "208:         ipv6_addr_equal(&fl6.daddr, &sk->sk_v6_daddr) ?",
          "209:         &sk->sk_v6_daddr : NULL,",
          "210: #ifdef CONFIG_IPV6_SUBTREES",
          "211:         ipv6_addr_equal(&fl6.saddr, &np->saddr) ?",
          "212:         &np->saddr :",
          "213: #endif",
          "214:         NULL);",
          "219:  fl6_sock_release(flowlabel);",
          "",
          "[Added Lines]",
          "224:  err = ip6_datagram_dst_update(sk);",
          "225:  if (err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e1d04e678cf72442f57ce82803c7a407769135f",
      "candidate_info": {
        "commit_hash": "1e1d04e678cf72442f57ce82803c7a407769135f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1e1d04e678cf72442f57ce82803c7a407769135f",
        "files": [
          "include/net/sock.h",
          "net/dccp/ipv4.c",
          "net/dccp/ipv6.c",
          "net/ipv4/af_inet.c",
          "net/ipv4/cipso_ipv4.c",
          "net/ipv4/ip_sockglue.c",
          "net/ipv4/tcp_ipv4.c",
          "net/ipv6/ipv6_sockglue.c",
          "net/ipv6/tcp_ipv6.c",
          "net/socket.c"
        ],
        "message": "net: introduce lockdep_is_held and update various places to use it\n\nThe socket is either locked if we hold the slock spin_lock for\nlock_sock_fast and unlock_sock_fast or we own the lock (sk_lock.owned\n!= 0). Check for this and at the same time improve that the current\nthread/cpu is really holding the lock.\n\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/sock.h||include/net/sock.h",
          "net/dccp/ipv4.c||net/dccp/ipv4.c",
          "net/dccp/ipv6.c||net/dccp/ipv6.c",
          "net/ipv4/af_inet.c||net/ipv4/af_inet.c",
          "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c",
          "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c",
          "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c",
          "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/dccp/ipv6.c||net/dccp/ipv6.c",
            "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
          ],
          "candidate": [
            "net/dccp/ipv6.c||net/dccp/ipv6.c",
            "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/sock.h||include/net/sock.h": [
          "File: include/net/sock.h -> include/net/sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1360:  lockdep_init_map(&(sk)->sk_lock.dep_map, (name), (key), 0); \\",
          "1361: } while (0)",
          "1363: void lock_sock_nested(struct sock *sk, int subclass);",
          "1365: static inline void lock_sock(struct sock *sk)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1363: static bool lockdep_sock_is_held(const struct sock *csk)",
          "1364: {",
          "1365:  struct sock *sk = (struct sock *)csk;",
          "1367:  return lockdep_is_held(&sk->sk_lock) ||",
          "1368:         lockdep_is_held(&sk->sk_lock.slock);",
          "1369: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1598: static inline struct dst_entry *",
          "1599: __sk_dst_get(struct sock *sk)",
          "1600: {",
          "1603: }",
          "1605: static inline struct dst_entry *",
          "",
          "[Removed Lines]",
          "1601:  return rcu_dereference_check(sk->sk_dst_cache, sock_owned_by_user(sk) ||",
          "1602:              lockdep_is_held(&sk->sk_lock.slock));",
          "",
          "[Added Lines]",
          "1609:  return rcu_dereference_check(sk->sk_dst_cache,",
          "1610:          lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/dccp/ipv4.c||net/dccp/ipv4.c": [
          "File: net/dccp/ipv4.c -> net/dccp/ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  nexthop = daddr = usin->sin_addr.s_addr;",
          "64:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
          "66:  if (inet_opt != NULL && inet_opt->opt.srr) {",
          "67:   if (daddr == 0)",
          "68:    return -EINVAL;",
          "",
          "[Removed Lines]",
          "65:           sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "65:           lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/dccp/ipv6.c||net/dccp/ipv6.c": [
          "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:  fl6.fl6_sport = inet->inet_sport;",
          "869:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "872:  final_p = fl6_update_dst(&fl6, opt, &final);",
          "874:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "[Removed Lines]",
          "871:  opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "871:  opt = rcu_dereference_protected(np->opt, lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/ipv4/af_inet.c||net/ipv4/af_inet.c": [
          "File: net/ipv4/af_inet.c -> net/ipv4/af_inet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1107:  struct ip_options_rcu *inet_opt;",
          "1109:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
          "1111:  if (inet_opt && inet_opt->opt.srr)",
          "1112:   daddr = inet_opt->opt.faddr;",
          "",
          "[Removed Lines]",
          "1110:           sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "1110:           lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c": [
          "File: net/ipv4/cipso_ipv4.c -> net/ipv4/cipso_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1934:  sk_inet = inet_sk(sk);",
          "1937:  if (sk_inet->is_icsk) {",
          "1938:   sk_conn = inet_csk(sk);",
          "1939:   if (old)",
          "",
          "[Removed Lines]",
          "1936:  old = rcu_dereference_protected(sk_inet->inet_opt, sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "1936:  old = rcu_dereference_protected(sk_inet->inet_opt,",
          "1937:      lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c": [
          "File: net/ipv4/ip_sockglue.c -> net/ipv4/ip_sockglue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "642:   if (err)",
          "643:    break;",
          "644:   old = rcu_dereference_protected(inet->inet_opt,",
          "646:   if (inet->is_icsk) {",
          "647:    struct inet_connection_sock *icsk = inet_csk(sk);",
          "648: #if IS_ENABLED(CONFIG_IPV6)",
          "",
          "[Removed Lines]",
          "645:       sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "645:       lockdep_sock_is_held(sk));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:   struct ip_options_rcu *inet_opt;",
          "1304:   inet_opt = rcu_dereference_protected(inet->inet_opt,",
          "1306:   opt->optlen = 0;",
          "1307:   if (inet_opt)",
          "1308:    memcpy(optbuf, &inet_opt->opt,",
          "",
          "[Removed Lines]",
          "1305:            sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "1305:            lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
          "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  nexthop = daddr = usin->sin_addr.s_addr;",
          "159:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
          "161:  if (inet_opt && inet_opt->opt.srr) {",
          "162:   if (!daddr)",
          "163:    return -EINVAL;",
          "",
          "[Removed Lines]",
          "160:           sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "160:           lockdep_sock_is_held(sk));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "884:  md5sig = rcu_dereference_check(tp->md5sig_info,",
          "887:  if (!md5sig)",
          "888:   return NULL;",
          "889: #if IS_ENABLED(CONFIG_IPV6)",
          "",
          "[Removed Lines]",
          "885:            sock_owned_by_user(sk) ||",
          "886:            lockdep_is_held((spinlock_t *)&sk->sk_lock.slock));",
          "",
          "[Added Lines]",
          "885:            lockdep_sock_is_held(sk));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:  }",
          "930:  md5sig = rcu_dereference_protected(tp->md5sig_info,",
          "933:  if (!md5sig) {",
          "934:   md5sig = kmalloc(sizeof(*md5sig), gfp);",
          "935:   if (!md5sig)",
          "",
          "[Removed Lines]",
          "931:         sock_owned_by_user(sk) ||",
          "932:         lockdep_is_held(&sk->sk_lock.slock));",
          "",
          "[Added Lines]",
          "930:         lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c": [
          "File: net/ipv6/ipv6_sockglue.c -> net/ipv6/ipv6_sockglue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:   if (optname != IPV6_RTHDR && !ns_capable(net->user_ns, CAP_NET_RAW))",
          "408:    break;",
          "411:   opt = ipv6_renew_options(sk, opt, optname,",
          "412:       (struct ipv6_opt_hdr __user *)optval,",
          "413:       optlen);",
          "",
          "[Removed Lines]",
          "410:   opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "410:   opt = rcu_dereference_protected(np->opt,",
          "411:       lockdep_sock_is_held(sk));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:   struct ipv6_txoptions *opt;",
          "1126:   lock_sock(sk);",
          "1128:   len = ipv6_getsockopt_sticky(sk, opt, optname, optval, len);",
          "1129:   release_sock(sk);",
          "",
          "[Removed Lines]",
          "1127:   opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "1128:   opt = rcu_dereference_protected(np->opt,",
          "1129:       lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:  fl6.fl6_dport = usin->sin6_port;",
          "235:  fl6.fl6_sport = inet->inet_sport;",
          "238:  final_p = fl6_update_dst(&fl6, opt, &final);",
          "240:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "",
          "[Removed Lines]",
          "237:  opt = rcu_dereference_protected(np->opt, sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "237:  opt = rcu_dereference_protected(np->opt, lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ],
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1046:   return -EINVAL;",
          "1048:  lock_sock(sk);",
          "1050:  fasync_helper(fd, filp, on, &wq->fasync_list);",
          "1052:  if (!wq->fasync_list)",
          "",
          "[Removed Lines]",
          "1049:  wq = rcu_dereference_protected(sock->wq, sock_owned_by_user(sk));",
          "",
          "[Added Lines]",
          "1049:  wq = rcu_dereference_protected(sock->wq, lockdep_sock_is_held(sk));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86fe8f892013228eef324c42e77c6b54b0bbc6dd",
      "candidate_info": {
        "commit_hash": "86fe8f892013228eef324c42e77c6b54b0bbc6dd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/86fe8f892013228eef324c42e77c6b54b0bbc6dd",
        "files": [
          "net/ipv6/ipv6_sockglue.c"
        ],
        "message": "ipv6: remove useless spin_lock/spin_unlock\n\nxchg is atomic, so there is no necessary to use spin_lock/spin_unlock\nto protect it. At last, remove the redundant\nopt = xchg(&inet6_sk(sk)->opt, opt); statement.\n\nSigned-off-by: Duan Jiong <duanj.fnst@cn.fujitsu.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c"
          ],
          "candidate": [
            "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c": [
          "File: net/ipv6/ipv6_sockglue.c -> net/ipv6/ipv6_sockglue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:    icsk->icsk_ext_hdr_len = opt->opt_flen + opt->opt_nflen;",
          "111:    icsk->icsk_sync_mss(sk, icsk->icsk_pmtu_cookie);",
          "112:   }",
          "118:  }",
          "119:  sk_dst_reset(sk);",
          "121:  return opt;",
          "",
          "[Removed Lines]",
          "113:   opt = xchg(&inet6_sk(sk)->opt, opt);",
          "114:  } else {",
          "115:   spin_lock(&sk->sk_dst_lock);",
          "116:   opt = xchg(&inet6_sk(sk)->opt, opt);",
          "117:   spin_unlock(&sk->sk_dst_lock);",
          "",
          "[Added Lines]",
          "114:  opt = xchg(&inet6_sk(sk)->opt, opt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63159f29be1df7f93563a8a0f78c5e65fc844ed6",
      "candidate_info": {
        "commit_hash": "63159f29be1df7f93563a8a0f78c5e65fc844ed6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/63159f29be1df7f93563a8a0f78c5e65fc844ed6",
        "files": [
          "net/ipv6/addrconf.c",
          "net/ipv6/af_inet6.c",
          "net/ipv6/ah6.c",
          "net/ipv6/anycast.c",
          "net/ipv6/datagram.c",
          "net/ipv6/esp6.c",
          "net/ipv6/exthdrs_core.c",
          "net/ipv6/icmp.c",
          "net/ipv6/ip6_flowlabel.c",
          "net/ipv6/ip6_gre.c",
          "net/ipv6/ip6_output.c",
          "net/ipv6/ip6_tunnel.c",
          "net/ipv6/ip6_vti.c",
          "net/ipv6/ip6mr.c",
          "net/ipv6/ipv6_sockglue.c",
          "net/ipv6/mcast.c",
          "net/ipv6/ndisc.c",
          "net/ipv6/raw.c",
          "net/ipv6/reassembly.c",
          "net/ipv6/route.c",
          "net/ipv6/sit.c",
          "net/ipv6/sysctl_net_ipv6.c",
          "net/ipv6/tcp_ipv6.c",
          "net/ipv6/udp.c",
          "net/ipv6/xfrm6_policy.c"
        ],
        "message": "ipv6: coding style: comparison for equality with NULL\n\nThe ipv6 code uses a mixture of coding styles. In some instances check for NULL\npointer is done as x == NULL and sometimes as !x. !x is preferred according to\ncheckpatch and this patch makes the code consistent by adopting the latter\nform.\n\nNo changes detected by objdiff.\n\nSigned-off-by: Ian Morris <ipm@chirality.org.uk>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/addrconf.c||net/ipv6/addrconf.c",
          "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
          "net/ipv6/ah6.c||net/ipv6/ah6.c",
          "net/ipv6/anycast.c||net/ipv6/anycast.c",
          "net/ipv6/datagram.c||net/ipv6/datagram.c",
          "net/ipv6/esp6.c||net/ipv6/esp6.c",
          "net/ipv6/exthdrs_core.c||net/ipv6/exthdrs_core.c",
          "net/ipv6/icmp.c||net/ipv6/icmp.c",
          "net/ipv6/ip6_flowlabel.c||net/ipv6/ip6_flowlabel.c",
          "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c",
          "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c",
          "net/ipv6/ip6_tunnel.c||net/ipv6/ip6_tunnel.c",
          "net/ipv6/ip6_vti.c||net/ipv6/ip6_vti.c",
          "net/ipv6/ip6mr.c||net/ipv6/ip6mr.c",
          "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
          "net/ipv6/mcast.c||net/ipv6/mcast.c",
          "net/ipv6/ndisc.c||net/ipv6/ndisc.c",
          "net/ipv6/raw.c||net/ipv6/raw.c",
          "net/ipv6/reassembly.c||net/ipv6/reassembly.c",
          "net/ipv6/route.c||net/ipv6/route.c",
          "net/ipv6/sit.c||net/ipv6/sit.c",
          "net/ipv6/sysctl_net_ipv6.c||net/ipv6/sysctl_net_ipv6.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
          "net/ipv6/udp.c||net/ipv6/udp.c",
          "net/ipv6/xfrm6_policy.c||net/ipv6/xfrm6_policy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
            "net/ipv6/datagram.c||net/ipv6/datagram.c",
            "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
            "net/ipv6/raw.c||net/ipv6/raw.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
            "net/ipv6/udp.c||net/ipv6/udp.c"
          ],
          "candidate": [
            "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
            "net/ipv6/datagram.c||net/ipv6/datagram.c",
            "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c",
            "net/ipv6/raw.c||net/ipv6/raw.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
            "net/ipv6/udp.c||net/ipv6/udp.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/addrconf.c||net/ipv6/addrconf.c": [
          "File: net/ipv6/addrconf.c -> net/ipv6/addrconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:   return ERR_PTR(-EINVAL);",
          "336:  ndev = kzalloc(sizeof(struct inet6_dev), GFP_KERNEL);",
          "338:   return ERR_PTR(err);",
          "340:  rwlock_init(&ndev->lock);",
          "",
          "[Removed Lines]",
          "337:  if (ndev == NULL)",
          "",
          "[Added Lines]",
          "337:  if (!ndev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:  ndev->cnf.mtu6 = dev->mtu;",
          "347:  ndev->cnf.sysctl = NULL;",
          "348:  ndev->nd_parms = neigh_parms_alloc(dev, &nd_tbl);",
          "350:   kfree(ndev);",
          "351:   return ERR_PTR(err);",
          "352:  }",
          "",
          "[Removed Lines]",
          "349:  if (ndev->nd_parms == NULL) {",
          "",
          "[Added Lines]",
          "349:  if (!ndev->nd_parms) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct netconfmsg),",
          "483:    flags);",
          "485:   return -EMSGSIZE;",
          "487:  ncm = nlmsg_data(nlh);",
          "",
          "[Removed Lines]",
          "484:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "484:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "519:  int err = -ENOBUFS;",
          "521:  skb = nlmsg_new(inet6_netconf_msgsize_devconf(type), GFP_ATOMIC);",
          "523:   goto errout;",
          "525:  err = inet6_netconf_fill_devconf(skb, ifindex, devconf, 0, 0,",
          "",
          "[Removed Lines]",
          "522:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "522:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "574:   break;",
          "575:  default:",
          "576:   dev = __dev_get_by_index(net, ifindex);",
          "578:    goto errout;",
          "579:   in6_dev = __in6_dev_get(dev);",
          "581:    goto errout;",
          "582:   devconf = &in6_dev->cnf;",
          "583:   break;",
          "",
          "[Removed Lines]",
          "577:   if (dev == NULL)",
          "580:   if (in6_dev == NULL)",
          "",
          "[Added Lines]",
          "577:   if (!dev)",
          "580:   if (!in6_dev)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "586:  err = -ENOBUFS;",
          "587:  skb = nlmsg_new(inet6_netconf_msgsize_devconf(-1), GFP_ATOMIC);",
          "589:   goto errout;",
          "591:  err = inet6_netconf_fill_devconf(skb, ifindex, devconf,",
          "",
          "[Removed Lines]",
          "588:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "588:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "855:  ifa = kzalloc(sizeof(struct inet6_ifaddr), GFP_ATOMIC);",
          "858:   ADBG(\"ipv6_add_addr: malloc failed\\n\");",
          "859:   err = -ENOBUFS;",
          "860:   goto out;",
          "",
          "[Removed Lines]",
          "857:  if (ifa == NULL) {",
          "",
          "[Added Lines]",
          "857:  if (!ifa) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1558:        : ifp->flags;",
          "1559:   if (ipv6_addr_equal(&ifp->addr, addr) &&",
          "1560:       !(ifp_flags&banned_flags) &&",
          "1562:        !(ifp->scope&(IFA_LINK|IFA_HOST) || strict))) {",
          "1563:    rcu_read_unlock_bh();",
          "1564:    return 1;",
          "",
          "[Removed Lines]",
          "1561:       (dev == NULL || ifp->idev->dev == dev ||",
          "",
          "[Added Lines]",
          "1561:       (!dev || ifp->idev->dev == dev ||",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1580:   if (!net_eq(dev_net(ifp->idev->dev), net))",
          "1581:    continue;",
          "1582:   if (ipv6_addr_equal(&ifp->addr, addr)) {",
          "1584:     return true;",
          "1585:   }",
          "1586:  }",
          "",
          "[Removed Lines]",
          "1583:    if (dev == NULL || ifp->idev->dev == dev)",
          "",
          "[Added Lines]",
          "1583:    if (!dev || ifp->idev->dev == dev)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1649:   if (!net_eq(dev_net(ifp->idev->dev), net))",
          "1650:    continue;",
          "1651:   if (ipv6_addr_equal(&ifp->addr, addr)) {",
          "1653:        !(ifp->scope&(IFA_LINK|IFA_HOST) || strict)) {",
          "1654:     result = ifp;",
          "1655:     in6_ifa_hold(ifp);",
          "",
          "[Removed Lines]",
          "1652:    if (dev == NULL || ifp->idev->dev == dev ||",
          "",
          "[Added Lines]",
          "1652:    if (!dev || ifp->idev->dev == dev ||",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2114:  struct fib6_table *table;",
          "2116:  table = fib6_get_table(dev_net(dev), RT6_TABLE_PREFIX);",
          "2118:   return NULL;",
          "2120:  read_lock_bh(&table->tb6_lock);",
          "",
          "[Removed Lines]",
          "2117:  if (table == NULL)",
          "",
          "[Added Lines]",
          "2117:  if (!table)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2279:  in6_dev = in6_dev_get(dev);",
          "2282:   net_dbg_ratelimited(\"addrconf: device %s not configured\\n\",",
          "2283:         dev->name);",
          "2284:   return;",
          "",
          "[Removed Lines]",
          "2281:  if (in6_dev == NULL) {",
          "",
          "[Added Lines]",
          "2281:  if (!in6_dev) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2378:   ifp = ipv6_get_ifaddr(net, &addr, dev, 1);",
          "2381:    int max_addresses = in6_dev->cnf.max_addresses;",
          "2383: #ifdef CONFIG_IPV6_OPTIMISTIC_DAD",
          "",
          "[Removed Lines]",
          "2380:   if (ifp == NULL && valid_lft) {",
          "",
          "[Added Lines]",
          "2380:   if (!ifp && valid_lft) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2486:  dev = __dev_get_by_index(net, ireq.ifr6_ifindex);",
          "2488:  err = -ENODEV;",
          "2490:   goto err_exit;",
          "2492: #if IS_ENABLED(CONFIG_IPV6_SIT)",
          "",
          "[Removed Lines]",
          "2489:  if (dev == NULL)",
          "",
          "[Added Lines]",
          "2489:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2658:   return -ENODEV;",
          "2660:  idev = __in6_dev_get(dev);",
          "2662:   return -ENXIO;",
          "2664:  read_lock_bh(&idev->lock);",
          "",
          "[Removed Lines]",
          "2661:  if (idev == NULL)",
          "",
          "[Added Lines]",
          "2661:  if (!idev)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2810:  ASSERT_RTNL();",
          "2812:  idev = ipv6_find_idev(dev);",
          "2814:   pr_debug(\"%s: add_dev failed\\n\", __func__);",
          "2815:   return;",
          "2816:  }",
          "",
          "[Removed Lines]",
          "2813:  if (idev == NULL) {",
          "",
          "[Added Lines]",
          "2813:  if (!idev) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3021:  idev = ipv6_find_idev(dev);",
          "3023:   pr_debug(\"%s: add_dev failed\\n\", __func__);",
          "3024:   return;",
          "3025:  }",
          "",
          "[Removed Lines]",
          "3022:  if (idev == NULL) {",
          "",
          "[Added Lines]",
          "3022:  if (!idev) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3044:  ASSERT_RTNL();",
          "3046:  idev = ipv6_find_idev(dev);",
          "3048:   pr_debug(\"%s: add_dev failed\\n\", __func__);",
          "3049:   return;",
          "3050:  }",
          "",
          "[Removed Lines]",
          "3047:  if (idev == NULL) {",
          "",
          "[Added Lines]",
          "3047:  if (!idev) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3241:  neigh_ifdown(&nd_tbl, dev);",
          "3243:  idev = __in6_dev_get(dev);",
          "3245:   return -ENODEV;",
          "",
          "[Removed Lines]",
          "3244:  if (idev == NULL)",
          "",
          "[Added Lines]",
          "3244:  if (!idev)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3997:  ifm = nlmsg_data(nlh);",
          "3998:  pfx = extract_addr(tb[IFA_ADDRESS], tb[IFA_LOCAL], &peer_pfx);",
          "4000:   return -EINVAL;",
          "4002:  ifa_flags = tb[IFA_FLAGS] ? nla_get_u32(tb[IFA_FLAGS]) : ifm->ifa_flags;",
          "",
          "[Removed Lines]",
          "3999:  if (pfx == NULL)",
          "",
          "[Added Lines]",
          "3999:  if (!pfx)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4109:  ifm = nlmsg_data(nlh);",
          "4110:  pfx = extract_addr(tb[IFA_ADDRESS], tb[IFA_LOCAL], &peer_pfx);",
          "4112:   return -EINVAL;",
          "4114:  if (tb[IFA_CACHEINFO]) {",
          "",
          "[Removed Lines]",
          "4111:  if (pfx == NULL)",
          "",
          "[Added Lines]",
          "4111:  if (!pfx)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4123:  }",
          "4125:  dev =  __dev_get_by_index(net, ifm->ifa_index);",
          "4127:   return -ENODEV;",
          "4129:  ifa_flags = tb[IFA_FLAGS] ? nla_get_u32(tb[IFA_FLAGS]) : ifm->ifa_flags;",
          "",
          "[Removed Lines]",
          "4126:  if (dev == NULL)",
          "",
          "[Added Lines]",
          "4126:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4133:        IFA_F_NOPREFIXROUTE | IFA_F_MCAUTOJOIN;",
          "4135:  ifa = ipv6_get_ifaddr(net, pfx, dev, 1);",
          "",
          "[Removed Lines]",
          "4136:  if (ifa == NULL) {",
          "",
          "[Added Lines]",
          "4136:  if (!ifa) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4208:  u32 preferred, valid;",
          "4210:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct ifaddrmsg), flags);",
          "4212:   return -EMSGSIZE;",
          "4214:  put_ifaddrmsg(nlh, ifa->prefix_len, ifa->flags, rt_scope(ifa->scope),",
          "",
          "[Removed Lines]",
          "4211:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "4211:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4269:   scope = RT_SCOPE_SITE;",
          "4271:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct ifaddrmsg), flags);",
          "4273:   return -EMSGSIZE;",
          "4275:  put_ifaddrmsg(nlh, 128, IFA_F_PERMANENT, scope, ifindex);",
          "",
          "[Removed Lines]",
          "4272:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "4272:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4295:   scope = RT_SCOPE_SITE;",
          "4297:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(struct ifaddrmsg), flags);",
          "4299:   return -EMSGSIZE;",
          "4301:  put_ifaddrmsg(nlh, 128, IFA_F_PERMANENT, scope, ifindex);",
          "",
          "[Removed Lines]",
          "4298:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "4298:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4468:   goto errout;",
          "4470:  addr = extract_addr(tb[IFA_ADDRESS], tb[IFA_LOCAL], &peer);",
          "4472:   err = -EINVAL;",
          "4473:   goto errout;",
          "4474:  }",
          "",
          "[Removed Lines]",
          "4471:  if (addr == NULL) {",
          "",
          "[Added Lines]",
          "4471:  if (!addr) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4511:  int err = -ENOBUFS;",
          "4513:  skb = nlmsg_new(inet6_ifaddr_msgsize(), GFP_ATOMIC);",
          "4515:   goto errout;",
          "4517:  err = inet6_fill_ifaddr(skb, ifa, 0, 0, event, 0);",
          "",
          "[Removed Lines]",
          "4514:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "4514:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4664:  if (nla_put(skb, IFLA_INET6_CACHEINFO, sizeof(ci), &ci))",
          "4665:   goto nla_put_failure;",
          "4666:  nla = nla_reserve(skb, IFLA_INET6_CONF, DEVCONF_MAX * sizeof(s32));",
          "4668:   goto nla_put_failure;",
          "4669:  ipv6_store_devconf(&idev->cnf, nla_data(nla), nla_len(nla));",
          "4673:  nla = nla_reserve(skb, IFLA_INET6_STATS, IPSTATS_MIB_MAX * sizeof(u64));",
          "4675:   goto nla_put_failure;",
          "4676:  snmp6_fill_stats(nla_data(nla), idev, IFLA_INET6_STATS, nla_len(nla));",
          "4678:  nla = nla_reserve(skb, IFLA_INET6_ICMP6STATS, ICMP6_MIB_MAX * sizeof(u64));",
          "4680:   goto nla_put_failure;",
          "4681:  snmp6_fill_stats(nla_data(nla), idev, IFLA_INET6_ICMP6STATS, nla_len(nla));",
          "4683:  nla = nla_reserve(skb, IFLA_INET6_TOKEN, sizeof(struct in6_addr));",
          "4685:   goto nla_put_failure;",
          "4687:  if (nla_put_u8(skb, IFLA_INET6_ADDR_GEN_MODE, idev->addr_gen_mode))",
          "",
          "[Removed Lines]",
          "4667:  if (nla == NULL)",
          "4674:  if (nla == NULL)",
          "4679:  if (nla == NULL)",
          "4684:  if (nla == NULL)",
          "",
          "[Added Lines]",
          "4667:  if (!nla)",
          "4674:  if (!nla)",
          "4679:  if (!nla)",
          "4684:  if (!nla)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4728:  ASSERT_RTNL();",
          "4731:   return -EINVAL;",
          "4732:  if (ipv6_addr_any(token))",
          "4733:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "4730:  if (token == NULL)",
          "",
          "[Added Lines]",
          "4730:  if (!token)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4843:  void *protoinfo;",
          "4845:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(*hdr), flags);",
          "4847:   return -EMSGSIZE;",
          "4849:  hdr = nlmsg_data(nlh);",
          "",
          "[Removed Lines]",
          "4846:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "4846:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4862:       nla_put_u32(skb, IFLA_LINK, dev->iflink)))",
          "4863:   goto nla_put_failure;",
          "4864:  protoinfo = nla_nest_start(skb, IFLA_PROTINFO);",
          "4866:   goto nla_put_failure;",
          "4868:  if (inet6_fill_ifla6_attrs(skb, idev) < 0)",
          "",
          "[Removed Lines]",
          "4865:  if (protoinfo == NULL)",
          "",
          "[Added Lines]",
          "4865:  if (!protoinfo)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4923:  int err = -ENOBUFS;",
          "4925:  skb = nlmsg_new(inet6_if_nlmsg_size(), GFP_ATOMIC);",
          "4927:   goto errout;",
          "4929:  err = inet6_fill_ifinfo(skb, idev, 0, 0, event, 0);",
          "",
          "[Removed Lines]",
          "4926:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "4926:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4956:  struct prefix_cacheinfo ci;",
          "4958:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(*pmsg), flags);",
          "4960:   return -EMSGSIZE;",
          "4962:  pmsg = nlmsg_data(nlh);",
          "",
          "[Removed Lines]",
          "4959:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "4959:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4995:  int err = -ENOBUFS;",
          "4997:  skb = nlmsg_new(inet6_prefix_nlmsg_size(), GFP_ATOMIC);",
          "4999:   goto errout;",
          "5001:  err = inet6_fill_prefix(skb, idev, pinfo, 0, 0, event, 0);",
          "",
          "[Removed Lines]",
          "4998:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "4998:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "5596:  char path[sizeof(\"net/ipv6/conf/\") + IFNAMSIZ];",
          "5598:  t = kmemdup(&addrconf_sysctl, sizeof(*t), GFP_KERNEL);",
          "5600:   goto out;",
          "5602:  for (i = 0; t->addrconf_vars[i].data; i++) {",
          "",
          "[Removed Lines]",
          "5599:  if (t == NULL)",
          "",
          "[Added Lines]",
          "5599:  if (!t)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5608:  snprintf(path, sizeof(path), \"net/ipv6/conf/%s\", dev_name);",
          "5610:  t->sysctl_header = register_net_sysctl(net, path, t->addrconf_vars);",
          "5612:   goto free;",
          "5614:  p->sysctl = t;",
          "",
          "[Removed Lines]",
          "5611:  if (t->sysctl_header == NULL)",
          "",
          "[Added Lines]",
          "5611:  if (!t->sysctl_header)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5624: {",
          "5625:  struct addrconf_sysctl_table *t;",
          "5628:   return;",
          "5630:  t = p->sysctl;",
          "",
          "[Removed Lines]",
          "5627:  if (p->sysctl == NULL)",
          "",
          "[Added Lines]",
          "5627:  if (!p->sysctl)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5667:  struct ipv6_devconf *all, *dflt;",
          "5669:  all = kmemdup(&ipv6_devconf, sizeof(ipv6_devconf), GFP_KERNEL);",
          "5671:   goto err_alloc_all;",
          "5673:  dflt = kmemdup(&ipv6_devconf_dflt, sizeof(ipv6_devconf_dflt), GFP_KERNEL);",
          "5675:   goto err_alloc_dflt;",
          "",
          "[Removed Lines]",
          "5670:  if (all == NULL)",
          "5674:  if (dflt == NULL)",
          "",
          "[Added Lines]",
          "5670:  if (!all)",
          "5674:  if (!dflt)",
          "",
          "---------------"
        ],
        "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c": [
          "File: net/ipv6/af_inet6.c -> net/ipv6/af_inet6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  answer_flags = answer->flags;",
          "165:  rcu_read_unlock();",
          "169:  err = -ENOBUFS;",
          "170:  sk = sk_alloc(net, PF_INET6, GFP_KERNEL, answer_prot);",
          "172:   goto out;",
          "174:  sock_init_data(sock, sk);",
          "",
          "[Removed Lines]",
          "167:  WARN_ON(answer_prot->slab == NULL);",
          "171:  if (sk == NULL)",
          "",
          "[Added Lines]",
          "167:  WARN_ON(!answer_prot->slab);",
          "171:  if (!sk)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: {",
          "392:  struct sock *sk = sock->sk;",
          "395:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "394:  if (sk == NULL)",
          "",
          "[Added Lines]",
          "394:  if (!sk)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "641:  dst = __sk_dst_check(sk, np->dst_cookie);",
          "644:   struct inet_sock *inet = inet_sk(sk);",
          "645:   struct in6_addr *final_p, final;",
          "646:   struct flowi6 fl6;",
          "",
          "[Removed Lines]",
          "643:  if (dst == NULL) {",
          "",
          "[Added Lines]",
          "643:  if (!dst) {",
          "",
          "---------------"
        ],
        "net/ipv6/ah6.c||net/ipv6/ah6.c": [
          "File: net/ipv6/ah6.c -> net/ipv6/ah6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:   goto error;",
          "683:  ahp = kzalloc(sizeof(*ahp), GFP_KERNEL);",
          "685:   return -ENOMEM;",
          "687:  ahash = crypto_alloc_ahash(x->aalg->alg_name, 0, 0);",
          "",
          "[Removed Lines]",
          "684:  if (ahp == NULL)",
          "",
          "[Added Lines]",
          "684:  if (!ahp)",
          "",
          "---------------"
        ],
        "net/ipv6/anycast.c||net/ipv6/anycast.c": [
          "File: net/ipv6/anycast.c -> net/ipv6/anycast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   return -EINVAL;",
          "72:  pac = sock_kmalloc(sk, sizeof(struct ipv6_ac_socklist), GFP_KERNEL);",
          "74:   return -ENOMEM;",
          "75:  pac->acl_next = NULL;",
          "76:  pac->acl_addr = *addr;",
          "",
          "[Removed Lines]",
          "73:  if (pac == NULL)",
          "",
          "[Added Lines]",
          "73:  if (!pac)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:  } else",
          "94:   dev = __dev_get_by_index(net, ifindex);",
          "97:   err = -ENODEV;",
          "98:   goto error;",
          "99:  }",
          "",
          "[Removed Lines]",
          "96:  if (dev == NULL) {",
          "",
          "[Added Lines]",
          "96:  if (!dev) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:  struct ifacaddr6 *aca;",
          "224:  aca = kzalloc(sizeof(*aca), GFP_ATOMIC);",
          "226:   return NULL;",
          "228:  aca->aca_addr = *addr;",
          "",
          "[Removed Lines]",
          "225:  if (aca == NULL)",
          "",
          "[Added Lines]",
          "225:  if (!aca)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:   goto out;",
          "269:  }",
          "270:  aca = aca_alloc(rt, addr);",
          "272:   ip6_rt_put(rt);",
          "273:   err = -ENOMEM;",
          "274:   goto out;",
          "",
          "[Removed Lines]",
          "271:  if (aca == NULL) {",
          "",
          "[Added Lines]",
          "271:  if (!aca) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337: {",
          "338:  struct inet6_dev *idev = __in6_dev_get(dev);",
          "341:   return -ENODEV;",
          "342:  return __ipv6_dev_ac_dec(idev, addr);",
          "343: }",
          "",
          "[Removed Lines]",
          "340:  if (idev == NULL)",
          "",
          "[Added Lines]",
          "340:  if (!idev)",
          "",
          "---------------"
        ],
        "net/ipv6/datagram.c||net/ipv6/datagram.c": [
          "File: net/ipv6/datagram.c -> net/ipv6/datagram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   fl6.flowlabel = usin->sin6_flowinfo&IPV6_FLOWINFO_MASK;",
          "72:   if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {",
          "73:    flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);",
          "75:     return -EINVAL;",
          "76:   }",
          "77:  }",
          "",
          "[Removed Lines]",
          "74:    if (flowlabel == NULL)",
          "",
          "[Added Lines]",
          "74:    if (!flowlabel)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:  err = -EAGAIN;",
          "375:  skb = sock_dequeue_err_skb(sk);",
          "377:   goto out;",
          "379:  copied = skb->len;",
          "",
          "[Removed Lines]",
          "376:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "376:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "464:  err = -EAGAIN;",
          "465:  skb = xchg(&np->rxpmtu, NULL);",
          "467:   goto out;",
          "469:  copied = skb->len;",
          "",
          "[Removed Lines]",
          "466:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "466:  if (!skb)",
          "",
          "---------------"
        ],
        "net/ipv6/esp6.c||net/ipv6/esp6.c": [
          "File: net/ipv6/esp6.c -> net/ipv6/esp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:  int err;",
          "497:  err = -EINVAL;",
          "499:   goto error;",
          "501:  err = -ENAMETOOLONG;",
          "",
          "[Removed Lines]",
          "498:  if (x->ealg == NULL)",
          "",
          "[Added Lines]",
          "498:  if (!x->ealg)",
          "",
          "---------------"
        ],
        "net/ipv6/exthdrs_core.c||net/ipv6/exthdrs_core.c": [
          "File: net/ipv6/exthdrs_core.c -> net/ipv6/exthdrs_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   if (nexthdr == NEXTHDR_NONE)",
          "83:    return -1;",
          "84:   hp = skb_header_pointer(skb, start, sizeof(_hdr), &_hdr);",
          "86:    return -1;",
          "87:   if (nexthdr == NEXTHDR_FRAGMENT) {",
          "88:    __be16 _frag_off, *fp;",
          "",
          "[Removed Lines]",
          "85:   if (hp == NULL)",
          "",
          "[Added Lines]",
          "85:   if (!hp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:               frag_off),",
          "92:       sizeof(_frag_off),",
          "93:       &_frag_off);",
          "95:     return -1;",
          "",
          "[Removed Lines]",
          "94:    if (fp == NULL)",
          "",
          "[Added Lines]",
          "94:    if (!fp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   }",
          "220:   hp = skb_header_pointer(skb, start, sizeof(_hdr), &_hdr);",
          "222:    return -EBADMSG;",
          "224:   if (nexthdr == NEXTHDR_ROUTING) {",
          "",
          "[Removed Lines]",
          "221:   if (hp == NULL)",
          "",
          "[Added Lines]",
          "221:   if (!hp)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:    rh = skb_header_pointer(skb, start, sizeof(_rh),",
          "228:       &_rh);",
          "230:     return -EBADMSG;",
          "232:    if (flags && (*flags & IP6_FH_F_SKIP_RH) &&",
          "",
          "[Removed Lines]",
          "229:    if (rh == NULL)",
          "",
          "[Added Lines]",
          "229:    if (!rh)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:               frag_off),",
          "246:       sizeof(_frag_off),",
          "247:       &_frag_off);",
          "249:     return -EBADMSG;",
          "251:    _frag_off = ntohs(*fp) & ~0x7;",
          "",
          "[Removed Lines]",
          "248:    if (fp == NULL)",
          "",
          "[Added Lines]",
          "248:    if (!fp)",
          "",
          "---------------"
        ],
        "net/ipv6/icmp.c||net/ipv6/icmp.c": [
          "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   tp = skb_header_pointer(skb,",
          "161:    ptr+offsetof(struct icmp6hdr, icmp6_type),",
          "162:    sizeof(_type), &_type);",
          "165:    return true;",
          "166:  }",
          "167:  return false;",
          "",
          "[Removed Lines]",
          "163:   if (tp == NULL ||",
          "164:       !(*tp & ICMPV6_INFOMSG_MASK))",
          "",
          "[Added Lines]",
          "163:   if (!tp || !(*tp & ICMPV6_INFOMSG_MASK))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  offset += skb_network_offset(skb);",
          "233:  op = skb_header_pointer(skb, offset, sizeof(_optval), &_optval);",
          "235:   return true;",
          "236:  return (*op & 0xC0) == 0x80;",
          "237: }",
          "",
          "[Removed Lines]",
          "234:  if (op == NULL)",
          "",
          "[Added Lines]",
          "233:  if (!op)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:  int err = 0;",
          "246:  skb = skb_peek(&sk->sk_write_queue);",
          "248:   goto out;",
          "250:  icmp6h = icmp6_hdr(skb);",
          "",
          "[Removed Lines]",
          "247:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "246:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "479:  security_skb_classify_flow(skb, flowi6_to_flowi(&fl6));",
          "481:  sk = icmpv6_xmit_lock(net);",
          "483:   return;",
          "484:  sk->sk_mark = mark;",
          "485:  np = inet6_sk(sk);",
          "",
          "[Removed Lines]",
          "482:  if (sk == NULL)",
          "",
          "[Added Lines]",
          "481:  if (!sk)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "582:  security_skb_classify_flow(skb, flowi6_to_flowi(&fl6));",
          "584:  sk = icmpv6_xmit_lock(net);",
          "586:   return;",
          "587:  sk->sk_mark = mark;",
          "588:  np = inet6_sk(sk);",
          "",
          "[Removed Lines]",
          "585:  if (sk == NULL)",
          "",
          "[Added Lines]",
          "584:  if (!sk)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "840:  net->ipv6.icmp_sk =",
          "841:   kzalloc(nr_cpu_ids * sizeof(struct sock *), GFP_KERNEL);",
          "843:   return -ENOMEM;",
          "845:  for_each_possible_cpu(i) {",
          "",
          "[Removed Lines]",
          "842:  if (net->ipv6.icmp_sk == NULL)",
          "",
          "[Added Lines]",
          "841:  if (!net->ipv6.icmp_sk)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_flowlabel.c||net/ipv6/ip6_flowlabel.c": [
          "File: net/ipv6/ip6_flowlabel.c -> net/ipv6/ip6_flowlabel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:    fl->label = htonl(prandom_u32())&IPV6_FLOWLABEL_MASK;",
          "206:    if (fl->label) {",
          "207:     lfl = __fl_lookup(net, fl->label);",
          "209:      break;",
          "210:    }",
          "211:   }",
          "",
          "[Removed Lines]",
          "208:     if (lfl == NULL)",
          "",
          "[Added Lines]",
          "208:     if (!lfl)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297: {",
          "298:  struct ipv6_txoptions *fl_opt = fl->opt;",
          "301:   return fl_opt;",
          "303:  if (fl_opt != NULL) {",
          "",
          "[Removed Lines]",
          "300:  if (fopt == NULL || fopt->opt_flen == 0)",
          "",
          "[Added Lines]",
          "300:  if (!fopt || fopt->opt_flen == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:  err = -ENOMEM;",
          "368:  fl = kzalloc(sizeof(*fl), GFP_KERNEL);",
          "370:   goto done;",
          "372:  if (olen > 0) {",
          "",
          "[Removed Lines]",
          "369:  if (fl == NULL)",
          "",
          "[Added Lines]",
          "369:  if (!fl)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:   err = -ENOMEM;",
          "378:   fl->opt = kmalloc(sizeof(*fl->opt) + olen, GFP_KERNEL);",
          "380:    goto done;",
          "382:   memset(fl->opt, 0, sizeof(*fl->opt));",
          "",
          "[Removed Lines]",
          "379:   if (fl->opt == NULL)",
          "",
          "[Added Lines]",
          "379:   if (!fl->opt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "596:    return -EINVAL;",
          "598:   fl = fl_create(net, sk, &freq, optval, optlen, &err);",
          "600:    return err;",
          "601:   sfl1 = kmalloc(sizeof(*sfl1), GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "599:   if (fl == NULL)",
          "",
          "[Added Lines]",
          "599:   if (!fl)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "616:    }",
          "617:    rcu_read_unlock_bh();",
          "620:     fl1 = fl_lookup(net, freq.flr_label);",
          "621:    if (fl1) {",
          "622: recheck:",
          "",
          "[Removed Lines]",
          "619:    if (fl1 == NULL)",
          "",
          "[Added Lines]",
          "619:    if (!fl1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "633:      goto release;",
          "635:     err = -ENOMEM;",
          "637:      goto release;",
          "638:     if (fl->linger > fl1->linger)",
          "639:      fl1->linger = fl->linger;",
          "",
          "[Removed Lines]",
          "636:     if (sfl1 == NULL)",
          "",
          "[Added Lines]",
          "636:     if (!sfl1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "653:    goto done;",
          "655:   err = -ENOMEM;",
          "657:    goto done;",
          "659:   err = mem_check(sk);",
          "",
          "[Removed Lines]",
          "656:   if (sfl1 == NULL)",
          "",
          "[Added Lines]",
          "656:   if (!sfl1)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c": [
          "File: net/ipv6/ip6_gre.c -> net/ipv6/ip6_gre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:     flags & GRE_KEY ?",
          "397:     p[1]);",
          "399:   return;",
          "401:  switch (type) {",
          "",
          "[Removed Lines]",
          "398:  if (t == NULL)",
          "",
          "[Added Lines]",
          "398:  if (!t)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "980:        &p->raddr, &p->laddr,",
          "981:        p->link, strict);",
          "984:    return;",
          "986:   if (rt->dst.dev) {",
          "",
          "[Removed Lines]",
          "983:   if (rt == NULL)",
          "",
          "[Added Lines]",
          "983:   if (!rt)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1073:    }",
          "1074:    ip6gre_tnl_parm_from_user(&p1, &p);",
          "1075:    t = ip6gre_tunnel_locate(net, &p1, 0);",
          "1077:     t = netdev_priv(dev);",
          "1078:   }",
          "1079:   memset(&p, 0, sizeof(p));",
          "",
          "[Removed Lines]",
          "1076:    if (t == NULL)",
          "",
          "[Added Lines]",
          "1076:    if (!t)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1144:    err = -ENOENT;",
          "1145:    ip6gre_tnl_parm_from_user(&p1, &p);",
          "1146:    t = ip6gre_tunnel_locate(net, &p1, 0);",
          "1148:     goto done;",
          "1149:    err = -EPERM;",
          "1150:    if (t == netdev_priv(ign->fb_tunnel_dev))",
          "",
          "[Removed Lines]",
          "1147:    if (t == NULL)",
          "",
          "[Added Lines]",
          "1147:    if (!t)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c": [
          "File: net/ipv6/ip6_output.c -> net/ipv6/ip6_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   if (skb_headroom(skb) < head_room) {",
          "179:    struct sk_buff *skb2 = skb_realloc_headroom(skb, head_room);",
          "181:     IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),",
          "182:            IPSTATS_MIB_OUTDISCARDS);",
          "183:     kfree_skb(skb);",
          "",
          "[Removed Lines]",
          "180:    if (skb2 == NULL) {",
          "",
          "[Added Lines]",
          "180:    if (!skb2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "823:           const struct in6_addr *addr_cache)",
          "824: {",
          "825:  return (rt_key->plen != 128 || !ipv6_addr_equal(fl_addr, &rt_key->addr)) &&",
          "827: }",
          "829: static struct dst_entry *ip6_sk_dst_check(struct sock *sk,",
          "",
          "[Removed Lines]",
          "826:   (addr_cache == NULL || !ipv6_addr_equal(fl_addr, addr_cache));",
          "",
          "[Added Lines]",
          "826:   (!addr_cache || !ipv6_addr_equal(fl_addr, addr_cache));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "882: #endif",
          "883:  int err;",
          "888:  err = (*dst)->error;",
          "",
          "[Removed Lines]",
          "885:  if (*dst == NULL)",
          "",
          "[Added Lines]",
          "885:  if (!*dst)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1047:  skb = skb_peek_tail(queue);",
          "1049:   skb = sock_alloc_send_skb(sk,",
          "1050:    hh_len + fragheaderlen + transhdrlen + 20,",
          "1051:    (flags & MSG_DONTWAIT), &err);",
          "1053:    return err;",
          "",
          "[Removed Lines]",
          "1048:  if (skb == NULL) {",
          "1052:   if (skb == NULL)",
          "",
          "[Added Lines]",
          "1048:  if (!skb) {",
          "1052:   if (!skb)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1107:     unsigned int orig_mtu)",
          "1108: {",
          "1109:  if (!(rt->dst.flags & DST_XFRM_TUNNEL)) {",
          "",
          "[Removed Lines]",
          "1110:   if (skb == NULL) {",
          "",
          "[Added Lines]",
          "1110:   if (!skb) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1139:    return -EINVAL;",
          "1141:   v6_cork->opt = kzalloc(opt->tot_len, sk->sk_allocation);",
          "1143:    return -ENOBUFS;",
          "1145:   v6_cork->opt->tot_len = opt->tot_len;",
          "",
          "[Removed Lines]",
          "1142:   if (unlikely(v6_cork->opt == NULL))",
          "",
          "[Added Lines]",
          "1142:   if (unlikely(!v6_cork->opt))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1331:    else",
          "1332:     fraggap = 0;",
          "1335:     ip6_append_data_mtu(&mtu, &maxfraglen,",
          "1336:           fragheaderlen, skb, rt,",
          "1337:           orig_mtu);",
          "",
          "[Removed Lines]",
          "1334:    if (skb == NULL || skb_prev == NULL)",
          "",
          "[Added Lines]",
          "1334:    if (!skb || !skb_prev)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1383:      skb = sock_wmalloc(sk,",
          "1384:           alloclen + hh_len, 1,",
          "1385:           sk->sk_allocation);",
          "1387:      err = -ENOBUFS;",
          "1388:    }",
          "1390:     goto error;",
          "",
          "[Removed Lines]",
          "1386:     if (unlikely(skb == NULL))",
          "1389:    if (skb == NULL)",
          "",
          "[Added Lines]",
          "1386:     if (unlikely(!skb))",
          "1389:    if (!skb)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1578:  unsigned char proto = fl6->flowi6_proto;",
          "1580:  skb = __skb_dequeue(queue);",
          "1582:   goto out;",
          "1583:  tail_skb = &(skb_shinfo(skb)->frag_list);",
          "",
          "[Removed Lines]",
          "1581:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "1581:  if (!skb)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_tunnel.c||net/ipv6/ip6_tunnel.c": [
          "File: net/ipv6/ip6_tunnel.c -> net/ipv6/ip6_tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:  struct dst_entry *dst = t->dst_cache;",
          "133:  if (dst && dst->obsolete &&",
          "135:   t->dst_cache = NULL;",
          "136:   dst_release(dst);",
          "137:   return NULL;",
          "",
          "[Removed Lines]",
          "134:      dst->ops->check(dst, t->dst_cookie) == NULL) {",
          "",
          "[Added Lines]",
          "134:      !dst->ops->check(dst, t->dst_cookie)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:  dev = alloc_netdev(sizeof(*t), name, NET_NAME_UNKNOWN,",
          "327:       ip6_tnl_dev_setup);",
          "329:   goto failed;",
          "331:  dev_net_set(dev, net);",
          "",
          "[Removed Lines]",
          "328:  if (dev == NULL)",
          "",
          "[Added Lines]",
          "328:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "497:  rcu_read_lock();",
          "498:  t = ip6_tnl_lookup(dev_net(skb->dev), &ipv6h->daddr, &ipv6h->saddr);",
          "500:   goto out;",
          "502:  tproto = ACCESS_ONCE(t->parms.proto);",
          "",
          "[Removed Lines]",
          "499:  if (t == NULL)",
          "",
          "[Added Lines]",
          "499:  if (!t)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1274:        &p->raddr, &p->laddr,",
          "1275:        p->link, strict);",
          "1278:    return;",
          "1280:   if (rt->dst.dev) {",
          "",
          "[Removed Lines]",
          "1277:   if (rt == NULL)",
          "",
          "[Added Lines]",
          "1277:   if (!rt)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_vti.c||net/ipv6/ip6_vti.c": [
          "File: net/ipv6/ip6_vti.c -> net/ipv6/ip6_vti.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   sprintf(name, \"ip6_vti%%d\");",
          "220:  dev = alloc_netdev(sizeof(*t), name, NET_NAME_UNKNOWN, vti6_dev_setup);",
          "222:   goto failed;",
          "224:  dev_net_set(dev, net);",
          "",
          "[Removed Lines]",
          "221:  if (dev == NULL)",
          "",
          "[Added Lines]",
          "221:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "716:   } else {",
          "717:    memset(&p, 0, sizeof(p));",
          "718:   }",
          "720:    t = netdev_priv(dev);",
          "721:   vti6_parm_to_user(&p, &t->parms);",
          "722:   if (copy_to_user(ifr->ifr_ifru.ifru_data, &p, sizeof(p)))",
          "",
          "[Removed Lines]",
          "719:   if (t == NULL)",
          "",
          "[Added Lines]",
          "719:   if (!t)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "767:    err = -ENOENT;",
          "768:    vti6_parm_from_user(&p1, &p);",
          "769:    t = vti6_locate(net, &p1, 0);",
          "771:     break;",
          "772:    err = -EPERM;",
          "773:    if (t->dev == ip6n->fb_tnl_dev)",
          "",
          "[Removed Lines]",
          "770:    if (t == NULL)",
          "",
          "[Added Lines]",
          "770:    if (!t)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6mr.c||net/ipv6/ip6mr.c": [
          "File: net/ipv6/ip6mr.c -> net/ipv6/ip6mr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:  }",
          "175:  mrt = ip6mr_get_table(rule->fr_net, rule->table);",
          "177:   return -EAGAIN;",
          "178:  res->mrt = mrt;",
          "179:  return 0;",
          "",
          "[Removed Lines]",
          "176:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "176:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  INIT_LIST_HEAD(&net->ipv6.mr6_tables);",
          "239:  mrt = ip6mr_new_table(net, RT6_TABLE_DFLT);",
          "241:   err = -ENOMEM;",
          "242:   goto err1;",
          "243:  }",
          "",
          "[Removed Lines]",
          "240:  if (mrt == NULL) {",
          "",
          "[Added Lines]",
          "240:  if (!mrt) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:   return mrt;",
          "311:  mrt = kzalloc(sizeof(*mrt), GFP_KERNEL);",
          "313:   return NULL;",
          "314:  mrt->id = id;",
          "315:  write_pnet(&mrt->net, net);",
          "",
          "[Removed Lines]",
          "312:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "312:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408:  struct mr6_table *mrt;",
          "410:  mrt = ip6mr_get_table(net, RT6_TABLE_DFLT);",
          "412:   return ERR_PTR(-ENOENT);",
          "414:  iter->mrt = mrt;",
          "",
          "[Removed Lines]",
          "411:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "411:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "492:  struct mr6_table *mrt;",
          "494:  mrt = ip6mr_get_table(net, RT6_TABLE_DFLT);",
          "496:   return ERR_PTR(-ENOENT);",
          "498:  it->mrt = mrt;",
          "",
          "[Removed Lines]",
          "495:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "495:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "665:   dev_hold(reg_dev);",
          "666:  read_unlock(&mrt_lock);",
          "669:   goto drop;",
          "671:  skb->mac_header = skb->network_header;",
          "",
          "[Removed Lines]",
          "668:  if (reg_dev == NULL)",
          "",
          "[Added Lines]",
          "668:  if (!reg_dev)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "743:   sprintf(name, \"pim6reg%u\", mrt->id);",
          "745:  dev = alloc_netdev(0, name, NET_NAME_UNKNOWN, reg_vif_setup);",
          "747:   return NULL;",
          "749:  dev_net_set(dev, net);",
          "",
          "[Removed Lines]",
          "746:  if (dev == NULL)",
          "",
          "[Added Lines]",
          "746:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1072: static struct mfc6_cache *ip6mr_cache_alloc(void)",
          "1073: {",
          "1074:  struct mfc6_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_KERNEL);",
          "1076:   return NULL;",
          "1077:  c->mfc_un.res.minvif = MAXMIFS;",
          "1078:  return c;",
          "",
          "[Removed Lines]",
          "1075:  if (c == NULL)",
          "",
          "[Added Lines]",
          "1075:  if (!c)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1081: static struct mfc6_cache *ip6mr_cache_alloc_unres(void)",
          "1082: {",
          "1083:  struct mfc6_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_ATOMIC);",
          "1085:   return NULL;",
          "1086:  skb_queue_head_init(&c->mfc_un.unres.unresolved);",
          "1087:  c->mfc_un.unres.expires = jiffies + 10 * HZ;",
          "",
          "[Removed Lines]",
          "1084:  if (c == NULL)",
          "",
          "[Added Lines]",
          "1084:  if (!c)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1198:  skb->ip_summed = CHECKSUM_UNNECESSARY;",
          "1199:  }",
          "1202:   kfree_skb(skb);",
          "1203:   return -EINVAL;",
          "1204:  }",
          "",
          "[Removed Lines]",
          "1201:  if (mrt->mroute6_sk == NULL) {",
          "",
          "[Added Lines]",
          "1201:  if (!mrt->mroute6_sk) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1493:   return -EINVAL;",
          "1495:  c = ip6mr_cache_alloc();",
          "1497:   return -ENOMEM;",
          "1499:  c->mf6c_origin = mfc->mf6cc_origin.sin6_addr;",
          "",
          "[Removed Lines]",
          "1496:  if (c == NULL)",
          "",
          "[Added Lines]",
          "1496:  if (!c)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1663:  struct mr6_table *mrt;",
          "1665:  mrt = ip6mr_get_table(net, raw6_sk(sk)->ip6mr_table ? : RT6_TABLE_DFLT);",
          "1667:   return -ENOENT;",
          "1669:  if (optname != MRT6_INIT) {",
          "",
          "[Removed Lines]",
          "1666:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "1666:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1812:  struct mr6_table *mrt;",
          "1814:  mrt = ip6mr_get_table(net, raw6_sk(sk)->ip6mr_table ? : RT6_TABLE_DFLT);",
          "1816:   return -ENOENT;",
          "1818:  switch (optname) {",
          "",
          "[Removed Lines]",
          "1815:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "1815:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1859:  struct mr6_table *mrt;",
          "1861:  mrt = ip6mr_get_table(net, raw6_sk(sk)->ip6mr_table ? : RT6_TABLE_DFLT);",
          "1863:   return -ENOENT;",
          "1865:  switch (cmd) {",
          "",
          "[Removed Lines]",
          "1862:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "1862:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1933:  struct mr6_table *mrt;",
          "1935:  mrt = ip6mr_get_table(net, raw6_sk(sk)->ip6mr_table ? : RT6_TABLE_DFLT);",
          "1937:   return -ENOENT;",
          "1939:  switch (cmd) {",
          "",
          "[Removed Lines]",
          "1936:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "1936:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2003:  struct dst_entry *dst;",
          "2004:  struct flowi6 fl6;",
          "2007:   goto out_free;",
          "2009: #ifdef CONFIG_IPV6_PIMSM_V2",
          "",
          "[Removed Lines]",
          "2006:  if (vif->dev == NULL)",
          "",
          "[Added Lines]",
          "2006:  if (!vif->dev)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2192:  read_lock(&mrt_lock);",
          "2193:  cache = ip6mr_cache_find(mrt,",
          "2194:      &ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr);",
          "2196:   int vif = ip6mr_find_vif(mrt, skb->dev);",
          "2198:   if (vif >= 0)",
          "",
          "[Removed Lines]",
          "2195:  if (cache == NULL) {",
          "",
          "[Added Lines]",
          "2195:  if (!cache) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2208:   int vif;",
          "2210:   vif = ip6mr_find_vif(mrt, skb->dev);",
          "",
          "[Removed Lines]",
          "2207:  if (cache == NULL) {",
          "",
          "[Added Lines]",
          "2207:  if (!cache) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2243:      nla_put_u32(skb, RTA_IIF, mrt->vif6_table[c->mf6c_parent].dev->ifindex) < 0)",
          "2244:   return -EMSGSIZE;",
          "2245:  mp_attr = nla_nest_start(skb, RTA_MULTIPATH);",
          "2247:   return -EMSGSIZE;",
          "2249:  for (ct = c->mfc_un.res.minvif; ct < c->mfc_un.res.maxvif; ct++) {",
          "2250:   if (MIF_EXISTS(mrt, ct) && c->mfc_un.res.ttls[ct] < 255) {",
          "2251:    nhp = nla_reserve_nohdr(skb, sizeof(*nhp));",
          "2253:     nla_nest_cancel(skb, mp_attr);",
          "2254:     return -EMSGSIZE;",
          "2255:    }",
          "",
          "[Removed Lines]",
          "2246:  if (mp_attr == NULL)",
          "2252:    if (nhp == NULL) {",
          "",
          "[Added Lines]",
          "2246:  if (!mp_attr)",
          "2252:    if (!nhp) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2282:  struct rt6_info *rt = (struct rt6_info *)skb_dst(skb);",
          "2284:  mrt = ip6mr_get_table(net, RT6_TABLE_DFLT);",
          "2286:   return -ENOENT;",
          "2288:  read_lock(&mrt_lock);",
          "",
          "[Removed Lines]",
          "2285:  if (mrt == NULL)",
          "",
          "[Added Lines]",
          "2285:  if (!mrt)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2307:   }",
          "2309:   dev = skb->dev;",
          "2311:    read_unlock(&mrt_lock);",
          "2312:    return -ENODEV;",
          "2313:   }",
          "",
          "[Removed Lines]",
          "2310:   if (dev == NULL || (vif = ip6mr_find_vif(mrt, dev)) < 0) {",
          "",
          "[Added Lines]",
          "2310:   if (!dev || (vif = ip6mr_find_vif(mrt, dev)) < 0) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2359:  int err;",
          "2361:  nlh = nlmsg_put(skb, portid, seq, cmd, sizeof(*rtm), flags);",
          "2363:   return -EMSGSIZE;",
          "2365:  rtm = nlmsg_data(nlh);",
          "",
          "[Removed Lines]",
          "2362:  if (nlh == NULL)",
          "",
          "[Added Lines]",
          "2362:  if (!nlh)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2425:  skb = nlmsg_new(mr6_msgsize(mfc->mf6c_parent >= MAXMIFS, mrt->maxvif),",
          "2426:    GFP_ATOMIC);",
          "2428:   goto errout;",
          "2430:  err = ip6mr_fill_mroute(mrt, skb, 0, 0, mfc, cmd, 0);",
          "",
          "[Removed Lines]",
          "2427:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "2427:  if (!skb)",
          "",
          "---------------"
        ],
        "net/ipv6/ipv6_sockglue.c||net/ipv6/ipv6_sockglue.c": [
          "File: net/ipv6/ipv6_sockglue.c -> net/ipv6/ipv6_sockglue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:    return 0;",
          "86:   }",
          "87:  }",
          "89:   write_unlock_bh(&ip6_ra_lock);",
          "90:   return -ENOBUFS;",
          "91:  }",
          "",
          "[Removed Lines]",
          "88:  if (new_ra == NULL) {",
          "",
          "[Added Lines]",
          "88:  if (!new_ra) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:  int retv = -ENOPROTOOPT;",
          "146:  bool needs_rtnl = setsockopt_needs_rtnl(optname);",
          "149:   val = 0;",
          "150:  else {",
          "151:   if (optlen >= sizeof(int)) {",
          "",
          "[Removed Lines]",
          "148:  if (optval == NULL)",
          "",
          "[Added Lines]",
          "148:  if (!optval)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:   if (optlen == 0)",
          "394:    optval = NULL;",
          "396:    goto e_inval;",
          "397:   else if (optlen < sizeof(struct ipv6_opt_hdr) ||",
          "398:     optlen & 0x7 || optlen > 8 * 255)",
          "",
          "[Removed Lines]",
          "395:   else if (optval == NULL)",
          "",
          "[Added Lines]",
          "395:   else if (!optval)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444:   if (optlen == 0)",
          "445:    goto e_inval;",
          "447:    goto e_inval;",
          "449:   if (copy_from_user(&pkt, optval, sizeof(struct in6_pktinfo))) {",
          "",
          "[Removed Lines]",
          "446:   else if (optlen < sizeof(struct in6_pktinfo) || optval == NULL)",
          "",
          "[Added Lines]",
          "446:   else if (optlen < sizeof(struct in6_pktinfo) || !optval)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "483:   opt = sock_kmalloc(sk, sizeof(*opt) + optlen, GFP_KERNEL);",
          "484:   retv = -ENOBUFS;",
          "486:    break;",
          "488:   memset(opt, 0, sizeof(*opt));",
          "",
          "[Removed Lines]",
          "485:   if (opt == NULL)",
          "",
          "[Added Lines]",
          "485:   if (!opt)",
          "",
          "---------------"
        ],
        "net/ipv6/mcast.c||net/ipv6/mcast.c": [
          "File: net/ipv6/mcast.c -> net/ipv6/mcast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  mc_lst = sock_kmalloc(sk, sizeof(struct ipv6_mc_socklist), GFP_KERNEL);",
          "161:   return -ENOMEM;",
          "163:  mc_lst->next = NULL;",
          "",
          "[Removed Lines]",
          "160:  if (mc_lst == NULL)",
          "",
          "[Added Lines]",
          "160:  if (!mc_lst)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  } else",
          "174:   dev = __dev_get_by_index(net, ifindex);",
          "177:   sock_kfree_s(sk, mc_lst, sizeof(*mc_lst));",
          "178:   return -ENODEV;",
          "179:  }",
          "",
          "[Removed Lines]",
          "176:  if (dev == NULL) {",
          "",
          "[Added Lines]",
          "176:  if (!dev) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "823:  struct ifmcaddr6 *mc;",
          "825:  mc = kzalloc(sizeof(*mc), GFP_ATOMIC);",
          "827:   return NULL;",
          "829:  setup_timer(&mc->mca_timer, igmp6_timer_handler, (unsigned long)mc);",
          "",
          "[Removed Lines]",
          "826:  if (mc == NULL)",
          "",
          "[Added Lines]",
          "826:  if (!mc)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "861:  idev = in6_dev_get(dev);",
          "864:   return -EINVAL;",
          "866:  write_lock_bh(&idev->lock);",
          "",
          "[Removed Lines]",
          "863:  if (idev == NULL)",
          "",
          "[Added Lines]",
          "863:  if (!idev)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1328:   return -EINVAL;",
          "1330:  idev = __in6_dev_get(skb->dev);",
          "1332:   return 0;",
          "1334:  mld = (struct mld_msg *)icmp6_hdr(skb);",
          "",
          "[Removed Lines]",
          "1331:  if (idev == NULL)",
          "",
          "[Added Lines]",
          "1331:  if (!idev)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1443:   return -EINVAL;",
          "1445:  idev = __in6_dev_get(skb->dev);",
          "1447:   return -ENODEV;",
          "",
          "[Removed Lines]",
          "1446:  if (idev == NULL)",
          "",
          "[Added Lines]",
          "1446:  if (!idev)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1963:  skb = sock_alloc_send_skb(sk, hlen + tlen + full_len, 1, &err);",
          "1966:   rcu_read_lock();",
          "1967:   IP6_INC_STATS(net, __in6_dev_get(dev),",
          "1968:          IPSTATS_MIB_OUTDISCARDS);",
          "",
          "[Removed Lines]",
          "1965:  if (skb == NULL) {",
          "",
          "[Added Lines]",
          "1965:  if (!skb) {",
          "",
          "---------------"
        ],
        "net/ipv6/ndisc.c||net/ipv6/ndisc.c": [
          "File: net/ipv6/ndisc.c -> net/ipv6/ndisc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:  bool is_multicast = ipv6_addr_is_multicast(addr);",
          "313:  in6_dev = in6_dev_get(dev);",
          "315:   return -EINVAL;",
          "316:  }",
          "",
          "[Removed Lines]",
          "314:  if (in6_dev == NULL) {",
          "",
          "[Added Lines]",
          "314:  if (!in6_dev) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:  struct in6_addr maddr;",
          "357:  struct net_device *dev = n->dev;",
          "360:   return -EINVAL;",
          "361:  addrconf_addr_solict_mult(addr, &maddr);",
          "362:  ipv6_dev_mc_inc(dev, &maddr);",
          "",
          "[Removed Lines]",
          "359:  if (dev == NULL || __in6_dev_get(dev) == NULL)",
          "",
          "[Added Lines]",
          "359:  if (!dev || !__in6_dev_get(dev))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:  struct in6_addr maddr;",
          "370:  struct net_device *dev = n->dev;",
          "373:   return;",
          "374:  addrconf_addr_solict_mult(addr, &maddr);",
          "375:  ipv6_dev_mc_dec(dev, &maddr);",
          "",
          "[Removed Lines]",
          "372:  if (dev == NULL || __in6_dev_get(dev) == NULL)",
          "",
          "[Added Lines]",
          "372:  if (!dev || !__in6_dev_get(dev))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "560:  int optlen = 0;",
          "561:  struct nd_msg *msg;",
          "564:   if (ipv6_get_lladdr(dev, &addr_buf,",
          "565:        (IFA_F_TENTATIVE|IFA_F_OPTIMISTIC)))",
          "566:    return;",
          "",
          "[Removed Lines]",
          "563:  if (saddr == NULL) {",
          "",
          "[Added Lines]",
          "563:  if (!saddr) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1030:  size_t msg_size = base_size + nla_total_size(sizeof(struct in6_addr));",
          "1032:  skb = nlmsg_new(msg_size, GFP_ATOMIC);",
          "1034:   err = -ENOBUFS;",
          "1035:   goto errout;",
          "1036:  }",
          "1038:  nlh = nlmsg_put(skb, 0, 0, RTM_NEWNDUSEROPT, base_size, 0);",
          "1040:   goto nla_put_failure;",
          "1041:  }",
          "",
          "[Removed Lines]",
          "1033:  if (skb == NULL) {",
          "1039:  if (nlh == NULL) {",
          "",
          "[Added Lines]",
          "1033:  if (!skb) {",
          "1039:  if (!nlh) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1106:  in6_dev = __in6_dev_get(skb->dev);",
          "1108:   ND_PRINTK(0, err, \"RA: can't find inet6 device for %s\\n\",",
          "1109:      skb->dev->name);",
          "1110:   return;",
          "",
          "[Removed Lines]",
          "1107:  if (in6_dev == NULL) {",
          "",
          "[Added Lines]",
          "1107:  if (!in6_dev) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1200:  ND_PRINTK(3, info, \"RA: rt: %p  lifetime: %d, for dev: %s\\n\",",
          "1201:     rt, lifetime, skb->dev->name);",
          "1203:   ND_PRINTK(3, info, \"RA: adding default router\\n\");",
          "1205:   rt = rt6_add_dflt_router(&ipv6_hdr(skb)->saddr, skb->dev, pref);",
          "1207:    ND_PRINTK(0, err,",
          "1208:       \"RA: %s failed to add default route\\n\",",
          "1209:       __func__);",
          "",
          "[Removed Lines]",
          "1202:  if (rt == NULL && lifetime) {",
          "1206:   if (rt == NULL) {",
          "",
          "[Added Lines]",
          "1202:  if (!rt && lifetime) {",
          "1206:   if (!rt) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1211:   }",
          "1213:   neigh = dst_neigh_lookup(&rt->dst, &ipv6_hdr(skb)->saddr);",
          "1215:    ND_PRINTK(0, err,",
          "1216:       \"RA: %s got default router without neighbour\\n\",",
          "1217:       __func__);",
          "",
          "[Removed Lines]",
          "1214:   if (neigh == NULL) {",
          "",
          "[Added Lines]",
          "1214:   if (!neigh) {",
          "",
          "---------------"
        ],
        "net/ipv6/raw.c||net/ipv6/raw.c": [
          "File: net/ipv6/raw.c -> net/ipv6/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:  read_lock(&raw_v6_hashinfo.lock);",
          "173:  sk = sk_head(&raw_v6_hashinfo.ht[hash]);",
          "176:   goto out;",
          "178:  net = dev_net(skb->dev);",
          "",
          "[Removed Lines]",
          "175:  if (sk == NULL)",
          "",
          "[Added Lines]",
          "175:  if (!sk)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:  skb = sock_alloc_send_skb(sk,",
          "631:       length + hlen + tlen + 15,",
          "632:       flags & MSG_DONTWAIT, &err);",
          "634:   goto error;",
          "635:  skb_reserve(skb, hlen);",
          "",
          "[Removed Lines]",
          "633:  if (skb == NULL)",
          "",
          "[Added Lines]",
          "633:  if (!skb)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "789:    fl6.flowlabel = sin6->sin6_flowinfo&IPV6_FLOWINFO_MASK;",
          "790:    if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {",
          "791:     flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);",
          "793:      return -EINVAL;",
          "794:    }",
          "795:   }",
          "",
          "[Removed Lines]",
          "792:     if (flowlabel == NULL)",
          "",
          "[Added Lines]",
          "792:     if (!flowlabel)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "831:   }",
          "832:   if ((fl6.flowlabel&IPV6_FLOWLABEL_MASK) && !flowlabel) {",
          "833:    flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);",
          "835:     return -EINVAL;",
          "836:   }",
          "837:   if (!(opt->opt_nflen|opt->opt_flen))",
          "838:    opt = NULL;",
          "839:  }",
          "841:   opt = np->opt;",
          "842:  if (flowlabel)",
          "843:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
          "",
          "[Removed Lines]",
          "834:    if (flowlabel == NULL)",
          "840:  if (opt == NULL)",
          "",
          "[Added Lines]",
          "834:    if (!flowlabel)",
          "840:  if (!opt)",
          "",
          "---------------"
        ],
        "net/ipv6/reassembly.c||net/ipv6/reassembly.c": [
          "File: net/ipv6/reassembly.c -> net/ipv6/reassembly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   int i, plen = 0;",
          "432:   clone = alloc_skb(0, GFP_ATOMIC);",
          "434:    goto out_oom;",
          "435:   clone->next = head->next;",
          "436:   head->next = clone;",
          "",
          "[Removed Lines]",
          "433:   if (clone == NULL)",
          "",
          "[Added Lines]",
          "433:   if (!clone)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:  table = ip6_frags_ns_ctl_table;",
          "633:  if (!net_eq(net, &init_net)) {",
          "634:   table = kmemdup(table, sizeof(ip6_frags_ns_ctl_table), GFP_KERNEL);",
          "636:    goto err_alloc;",
          "638:   table[0].data = &net->ipv6.frags.high_thresh;",
          "",
          "[Removed Lines]",
          "635:   if (table == NULL)",
          "",
          "[Added Lines]",
          "635:   if (!table)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "648:  }",
          "650:  hdr = register_net_sysctl(net, \"net/ipv6\", table);",
          "652:   goto err_reg;",
          "654:  net->ipv6.sysctl.frags_hdr = hdr;",
          "",
          "[Removed Lines]",
          "651:  if (hdr == NULL)",
          "",
          "[Added Lines]",
          "651:  if (!hdr)",
          "",
          "---------------"
        ],
        "net/ipv6/route.c||net/ipv6/route.c": [
          "File: net/ipv6/route.c -> net/ipv6/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476:  int remaining;",
          "1477:  u32 *mp;",
          "1480:   return 0;",
          "1482:  mp = kzalloc(sizeof(u32) * RTAX_MAX, GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "1479:  if (cfg->fc_mx == NULL)",
          "",
          "[Added Lines]",
          "1479:  if (!cfg->fc_mx)",
          "",
          "---------------"
        ],
        "net/ipv6/sit.c||net/ipv6/sit.c": [
          "File: net/ipv6/sit.c -> net/ipv6/sit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:  dev = alloc_netdev(sizeof(*t), name, NET_NAME_UNKNOWN,",
          "253:       ipip6_tunnel_setup);",
          "255:   return NULL;",
          "257:  dev_net_set(dev, net);",
          "",
          "[Removed Lines]",
          "254:  if (dev == NULL)",
          "",
          "[Added Lines]",
          "254:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:     skb->dev,",
          "556:     iph->daddr,",
          "557:     iph->saddr);",
          "559:   goto out;",
          "561:  if (type == ICMP_DEST_UNREACH && code == ICMP_FRAG_NEEDED) {",
          "",
          "[Removed Lines]",
          "558:  if (t == NULL)",
          "",
          "[Added Lines]",
          "558:  if (!t)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "838:   if (skb_dst(skb))",
          "839:    neigh = dst_neigh_lookup(skb_dst(skb), &iph6->daddr);",
          "842:    net_dbg_ratelimited(\"nexthop == NULL\\n\");",
          "843:    goto tx_error;",
          "844:   }",
          "",
          "[Removed Lines]",
          "841:   if (neigh == NULL) {",
          "",
          "[Added Lines]",
          "841:   if (!neigh) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "867:   if (skb_dst(skb))",
          "868:    neigh = dst_neigh_lookup(skb_dst(skb), &iph6->daddr);",
          "871:    net_dbg_ratelimited(\"nexthop == NULL\\n\");",
          "872:    goto tx_error;",
          "873:   }",
          "",
          "[Removed Lines]",
          "870:   if (neigh == NULL) {",
          "",
          "[Added Lines]",
          "870:   if (!neigh) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1158:     break;",
          "1159:    }",
          "1160:    t = ipip6_tunnel_locate(net, &p, 0);",
          "1162:     t = netdev_priv(dev);",
          "1163:   }",
          "",
          "[Removed Lines]",
          "1161:    if (t == NULL)",
          "",
          "[Added Lines]",
          "1161:    if (!t)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1242:     goto done;",
          "1243:    err = -ENOENT;",
          "1244:    t = ipip6_tunnel_locate(net, &p, 0);",
          "1246:     goto done;",
          "1247:    err = -EPERM;",
          "1248:    if (t == netdev_priv(sitn->fb_tunnel_dev))",
          "",
          "[Removed Lines]",
          "1245:    if (t == NULL)",
          "",
          "[Added Lines]",
          "1245:    if (!t)",
          "",
          "---------------"
        ],
        "net/ipv6/sysctl_net_ipv6.c||net/ipv6/sysctl_net_ipv6.c": [
          "File: net/ipv6/sysctl_net_ipv6.c -> net/ipv6/sysctl_net_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:  int err = -ENOMEM;",
          "181:  ip6_header = register_net_sysctl(&init_net, \"net/ipv6\", ipv6_rotable);",
          "183:   goto out;",
          "185:  err = register_pernet_subsys(&ipv6_sysctl_net_ops);",
          "",
          "[Removed Lines]",
          "182:  if (ip6_header == NULL)",
          "",
          "[Added Lines]",
          "182:  if (!ip6_header)",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {",
          "142:    struct ip6_flowlabel *flowlabel;",
          "143:    flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);",
          "145:     return -EINVAL;",
          "146:    fl6_sock_release(flowlabel);",
          "147:   }",
          "",
          "[Removed Lines]",
          "144:    if (flowlabel == NULL)",
          "",
          "[Added Lines]",
          "144:    if (!flowlabel)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:   goto failure;",
          "248:  }",
          "251:   saddr = &fl6.saddr;",
          "252:   sk->sk_v6_rcv_saddr = *saddr;",
          "253:  }",
          "",
          "[Removed Lines]",
          "250:  if (saddr == NULL) {",
          "",
          "[Added Lines]",
          "250:  if (!saddr) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "416:    break;",
          "418:   if (!sock_owned_by_user(sk)) {",
          "",
          "[Removed Lines]",
          "415:   if (fastopen && fastopen->sk == NULL)",
          "",
          "[Added Lines]",
          "415:   if (fastopen && !fastopen->sk)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "751:  buff = alloc_skb(MAX_HEADER + sizeof(struct ipv6hdr) + tot_len,",
          "752:     GFP_ATOMIC);",
          "754:   return;",
          "756:  skb_reserve(buff, MAX_HEADER + sizeof(struct ipv6hdr) + tot_len);",
          "",
          "[Removed Lines]",
          "753:  if (buff == NULL)",
          "",
          "[Added Lines]",
          "753:  if (!buff)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1009:   newsk = tcp_v4_syn_recv_sock(sk, skb, req, dst);",
          "1012:    return NULL;",
          "1014:   newtcp6sk = (struct tcp6_sock *)newsk;",
          "",
          "[Removed Lines]",
          "1011:   if (newsk == NULL)",
          "",
          "[Added Lines]",
          "1011:   if (!newsk)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1065:  }",
          "1067:  newsk = tcp_create_openreq_child(sk, req, skb);",
          "1069:   goto out_nonewsk;",
          "",
          "[Removed Lines]",
          "1068:  if (newsk == NULL)",
          "",
          "[Added Lines]",
          "1068:  if (!newsk)",
          "",
          "---------------"
        ],
        "net/ipv6/udp.c||net/ipv6/udp.c": [
          "File: net/ipv6/udp.c -> net/ipv6/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:  sk = __udp6_lib_lookup(net, daddr, uh->dest,",
          "552:           saddr, uh->source, inet6_iif(skb), udptable);",
          "554:   ICMP6_INC_STATS_BH(net, __in6_dev_get(skb->dev),",
          "555:        ICMP6_MIB_INERRORS);",
          "556:   return;",
          "",
          "[Removed Lines]",
          "553:  if (sk == NULL) {",
          "",
          "[Added Lines]",
          "553:  if (!sk) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "750:  for (i = 0; i < count; i++) {",
          "751:   sk = stack[i];",
          "753:    skb1 = (i == final) ? skb : skb_clone(skb, GFP_ATOMIC);",
          "754:   if (!skb1) {",
          "755:    atomic_inc(&sk->sk_drops);",
          "",
          "[Removed Lines]",
          "752:   if (likely(skb1 == NULL))",
          "",
          "[Added Lines]",
          "752:   if (likely(!skb1))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1207:    fl6.flowlabel = sin6->sin6_flowinfo&IPV6_FLOWINFO_MASK;",
          "1208:    if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {",
          "1209:     flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);",
          "1211:      return -EINVAL;",
          "1212:    }",
          "1213:   }",
          "",
          "[Removed Lines]",
          "1210:     if (flowlabel == NULL)",
          "",
          "[Added Lines]",
          "1210:     if (!flowlabel)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1255:   }",
          "1256:   if ((fl6.flowlabel&IPV6_FLOWLABEL_MASK) && !flowlabel) {",
          "1257:    flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);",
          "1259:     return -EINVAL;",
          "1260:   }",
          "1261:   if (!(opt->opt_nflen|opt->opt_flen))",
          "1262:    opt = NULL;",
          "1263:   connected = 0;",
          "1264:  }",
          "1266:   opt = np->opt;",
          "1267:  if (flowlabel)",
          "1268:   opt = fl6_merge_options(&opt_space, flowlabel, opt);",
          "",
          "[Removed Lines]",
          "1258:    if (flowlabel == NULL)",
          "1265:  if (opt == NULL)",
          "",
          "[Added Lines]",
          "1258:    if (!flowlabel)",
          "1265:  if (!opt)",
          "",
          "---------------"
        ],
        "net/ipv6/xfrm6_policy.c||net/ipv6/xfrm6_policy.c": [
          "File: net/ipv6/xfrm6_policy.c -> net/ipv6/xfrm6_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370: {",
          "371:  struct ctl_table *table;",
          "374:   return;",
          "376:  table = net->ipv6.sysctl.xfrm6_hdr->ctl_table_arg;",
          "",
          "[Removed Lines]",
          "373:  if (net->ipv6.sysctl.xfrm6_hdr == NULL)",
          "",
          "[Added Lines]",
          "373:  if (!net->ipv6.sysctl.xfrm6_hdr)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e550785c30f639b3cc6ca70c489a6463ff298453",
      "candidate_info": {
        "commit_hash": "e550785c30f639b3cc6ca70c489a6463ff298453",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e550785c30f639b3cc6ca70c489a6463ff298453",
        "files": [
          "include/net/ipv6.h"
        ],
        "message": "ipv6: Annotate change of locking mechanism for np->opt\n\nfollows up commit 45f6fad84cc3 (\"ipv6: add complete rcu protection around\nnp->opt\") which added mixed rcu/refcount protection to np->opt.\n\nGiven the current implementation of rcu_pointer_handoff(), this has no\neffect at runtime.\n\nSigned-off-by: Benjamin Poirier <bpoirier@suse.com>\nAcked-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/ipv6.h||include/net/ipv6.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/ipv6.h||include/net/ipv6.h"
          ],
          "candidate": [
            "include/net/ipv6.h||include/net/ipv6.h"
          ]
        }
      },
      "candidate_diff": {
        "include/net/ipv6.h||include/net/ipv6.h": [
          "File: include/net/ipv6.h -> include/net/ipv6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:  rcu_read_lock();",
          "261:  opt = rcu_dereference(np->opt);",
          "264:  rcu_read_unlock();",
          "265:  return opt;",
          "266: }",
          "",
          "[Removed Lines]",
          "262:  if (opt && !atomic_inc_not_zero(&opt->refcnt))",
          "263:   opt = NULL;",
          "",
          "[Added Lines]",
          "262:  if (opt) {",
          "263:   if (!atomic_inc_not_zero(&opt->refcnt))",
          "264:    opt = NULL;",
          "265:   else",
          "266:    opt = rcu_pointer_handoff(opt);",
          "267:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}