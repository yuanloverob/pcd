{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e653b6cd74f70c04b0b96b07df00680b427603af",
      "candidate_info": {
        "commit_hash": "e653b6cd74f70c04b0b96b07df00680b427603af",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e653b6cd74f70c04b0b96b07df00680b427603af",
        "files": [
          "crypto/rsa/rsa_pss.c"
        ],
        "message": "Fix a crash or unbounded allocation in RSA_padding_add_PKCS1_PSS_mgf1 and RSA_verify_PKCS1_PSS_mgf1 with 512-bit RSA vs. sha-512.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2881)",
        "before_after_code_files": [
          "crypto/rsrsa_pss.c||crypto/rsa/rsa_pss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rsrsa_pss.c||crypto/rsa/rsa_pss.c": [
          "File: crypto/rsrsa_pss.c -> crypto/rsa/rsa_pss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     if (emLen < hLen + 2) {",
          "80:         RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_DATA_TOO_LARGE);",
          "81:         goto err;",
          "82:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     if (emLen < hLen + 2) {",
          "183:         RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,",
          "184:                RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);",
          "185:         goto err;",
          "186:     }",
          "189:     } else if (sLen > emLen - hLen - 2) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e01cee6d8fbba09dc811af91a5e24dab95fc66a1",
      "candidate_info": {
        "commit_hash": "e01cee6d8fbba09dc811af91a5e24dab95fc66a1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e01cee6d8fbba09dc811af91a5e24dab95fc66a1",
        "files": [
          "crypto/ui/ui_lib.c",
          "crypto/ui/ui_openssl.c"
        ],
        "message": "UI code style cleanup\n\nMostly condition check changes.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2047)\n(cherry picked from commit 120fb9e43656e1801c75a4fbb7c178ebec9bac18)",
        "before_after_code_files": [
          "crypto/ui/ui_lib.c||crypto/ui/ui_lib.c",
          "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ui/ui_lib.c||crypto/ui/ui_lib.c": [
          "File: crypto/ui/ui_lib.c -> crypto/ui/ui_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     UI_STRING *s = general_allocate_prompt(ui, prompt, prompt_freeable,",
          "121:                                            type, input_flags, result_buf);",
          "124:         if (allocate_string_stack(ui) >= 0) {",
          "125:             s->_.string_data.result_minsize = minsize;",
          "126:             s->_.string_data.result_maxsize = maxsize;",
          "",
          "[Removed Lines]",
          "123:     if (s) {",
          "",
          "[Added Lines]",
          "123:     if (s != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:     } else if (cancel_chars == NULL) {",
          "156:         UIerr(UI_F_GENERAL_ALLOCATE_BOOLEAN, ERR_R_PASSED_NULL_PARAMETER);",
          "157:     } else {",
          "160:                 UIerr(UI_F_GENERAL_ALLOCATE_BOOLEAN,",
          "161:                       UI_R_COMMON_OK_AND_CANCEL_CHARACTERS);",
          "162:             }",
          "",
          "[Removed Lines]",
          "158:         for (p = ok_chars; *p; p++) {",
          "159:             if (strchr(cancel_chars, *p)) {",
          "",
          "[Added Lines]",
          "158:         for (p = ok_chars; *p != '\\0'; p++) {",
          "159:             if (strchr(cancel_chars, *p) != NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:         s = general_allocate_prompt(ui, prompt, prompt_freeable,",
          "166:                                     type, input_flags, result_buf);",
          "169:             if (allocate_string_stack(ui) >= 0) {",
          "170:                 s->_.boolean_data.action_desc = action_desc;",
          "171:                 s->_.boolean_data.ok_chars = ok_chars;",
          "",
          "[Removed Lines]",
          "168:         if (s) {",
          "",
          "[Added Lines]",
          "168:         if (s != NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203: {",
          "204:     char *prompt_copy = NULL;",
          "207:         prompt_copy = OPENSSL_strdup(prompt);",
          "208:         if (prompt_copy == NULL) {",
          "209:             UIerr(UI_F_UI_DUP_INPUT_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "206:     if (prompt) {",
          "",
          "[Added Lines]",
          "206:     if (prompt != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231: {",
          "232:     char *prompt_copy = NULL;",
          "235:         prompt_copy = OPENSSL_strdup(prompt);",
          "236:         if (prompt_copy == NULL) {",
          "237:             UIerr(UI_F_UI_DUP_VERIFY_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "234:     if (prompt) {",
          "",
          "[Added Lines]",
          "234:     if (prompt != NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:     char *ok_chars_copy = NULL;",
          "263:     char *cancel_chars_copy = NULL;",
          "266:         prompt_copy = OPENSSL_strdup(prompt);",
          "267:         if (prompt_copy == NULL) {",
          "268:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "265:     if (prompt) {",
          "",
          "[Added Lines]",
          "265:     if (prompt != NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "270:         }",
          "271:     }",
          "274:         action_desc_copy = OPENSSL_strdup(action_desc);",
          "275:         if (action_desc_copy == NULL) {",
          "276:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "273:     if (action_desc) {",
          "",
          "[Added Lines]",
          "273:     if (action_desc != NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:         }",
          "279:     }",
          "282:         ok_chars_copy = OPENSSL_strdup(ok_chars);",
          "283:         if (ok_chars_copy == NULL) {",
          "284:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "281:     if (ok_chars) {",
          "",
          "[Added Lines]",
          "281:     if (ok_chars != NULL) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "286:         }",
          "287:     }",
          "290:         cancel_chars_copy = OPENSSL_strdup(cancel_chars);",
          "291:         if (cancel_chars_copy == NULL) {",
          "292:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "289:     if (cancel_chars) {",
          "",
          "[Added Lines]",
          "289:     if (cancel_chars != NULL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "315: {",
          "316:     char *text_copy = NULL;",
          "319:         text_copy = OPENSSL_strdup(text);",
          "320:         if (text_copy == NULL) {",
          "321:             UIerr(UI_F_UI_DUP_INFO_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "318:     if (text) {",
          "",
          "[Added Lines]",
          "318:     if (text != NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "337: {",
          "338:     char *text_copy = NULL;",
          "341:         text_copy = OPENSSL_strdup(text);",
          "342:         if (text_copy == NULL) {",
          "343:             UIerr(UI_F_UI_DUP_ERROR_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "340:     if (text) {",
          "",
          "[Added Lines]",
          "340:     if (text != NULL) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "353: {",
          "354:     char *prompt = NULL;",
          "357:         prompt = ui->meth->ui_construct_prompt(ui, object_desc, object_name);",
          "358:     else {",
          "359:         char prompt1[] = \"Enter \";",
          "",
          "[Removed Lines]",
          "356:     if (ui->meth->ui_construct_prompt)",
          "",
          "[Added Lines]",
          "356:     if (ui->meth->ui_construct_prompt != NULL)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "364:         if (object_desc == NULL)",
          "365:             return NULL;",
          "366:         len = sizeof(prompt1) - 1 + strlen(object_desc);",
          "368:             len += sizeof(prompt2) - 1 + strlen(object_name);",
          "369:         len += sizeof(prompt3) - 1;",
          "",
          "[Removed Lines]",
          "367:         if (object_name)",
          "",
          "[Added Lines]",
          "367:         if (object_name != NULL)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "373:             return NULL;",
          "374:         OPENSSL_strlcpy(prompt, prompt1, len + 1);",
          "375:         OPENSSL_strlcat(prompt, object_desc, len + 1);",
          "377:             OPENSSL_strlcat(prompt, prompt2, len + 1);",
          "378:             OPENSSL_strlcat(prompt, object_name, len + 1);",
          "379:         }",
          "",
          "[Removed Lines]",
          "376:         if (object_name) {",
          "",
          "[Added Lines]",
          "376:         if (object_name != NULL) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "415:     uis.type = UIT_ERROR;",
          "416:     uis.out_string = str;",
          "419:         return -1;",
          "420:     return 0;",
          "421: }",
          "",
          "[Removed Lines]",
          "418:     if (ui->meth->ui_write_string && !ui->meth->ui_write_string(ui, &uis))",
          "",
          "[Added Lines]",
          "418:     if (ui->meth->ui_write_string != NULL",
          "419:         && ui->meth->ui_write_string(ui, &uis) <= 0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "425:     int i, ok = 0;",
          "426:     const char *state = \"processing\";",
          "429:         state = \"opening session\";",
          "430:         ok = -1;",
          "431:         goto err;",
          "",
          "[Removed Lines]",
          "428:     if (ui->meth->ui_open_session && !ui->meth->ui_open_session(ui)) {",
          "",
          "[Added Lines]",
          "429:     if (ui->meth->ui_open_session != NULL",
          "430:         && ui->meth->ui_open_session(ui) <= 0) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "436:                             print_error, (void *)ui);",
          "438:     for (i = 0; i < sk_UI_STRING_num(ui->strings); i++) {",
          "442:         {",
          "443:             state = \"writing strings\";",
          "444:             ok = -1;",
          "",
          "[Removed Lines]",
          "439:         if (ui->meth->ui_write_string",
          "440:             && !ui->meth->ui_write_string(ui,",
          "441:                                           sk_UI_STRING_value(ui->strings, i)))",
          "",
          "[Added Lines]",
          "441:         if (ui->meth->ui_write_string != NULL",
          "442:             && (ui->meth->ui_write_string(ui,",
          "443:                                           sk_UI_STRING_value(ui->strings, i))",
          "444:                 <= 0))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "446:         }",
          "447:     }",
          "450:         switch (ui->meth->ui_flush(ui)) {",
          "452:             ok = -2;",
          "",
          "[Removed Lines]",
          "449:     if (ui->meth->ui_flush)",
          "",
          "[Added Lines]",
          "452:     if (ui->meth->ui_flush != NULL)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "461:         }",
          "463:     for (i = 0; i < sk_UI_STRING_num(ui->strings); i++) {",
          "465:             switch (ui->meth->ui_read_string(ui,",
          "466:                                              sk_UI_STRING_value(ui->strings,",
          "467:                                                                 i))) {",
          "",
          "[Removed Lines]",
          "464:         if (ui->meth->ui_read_string) {",
          "",
          "[Added Lines]",
          "467:         if (ui->meth->ui_read_string != NULL) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "479:         }",
          "480:     }",
          "481:  err:",
          "483:         if (state == NULL)",
          "484:             state = \"closing session\";",
          "485:         ok = -1;",
          "",
          "[Removed Lines]",
          "482:     if (ui->meth->ui_close_session && !ui->meth->ui_close_session(ui)) {",
          "",
          "[Added Lines]",
          "485:     if (ui->meth->ui_close_session != NULL",
          "486:         && !ui->meth->ui_close_session(ui) <= 0) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "581: int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui))",
          "582: {",
          "584:         method->ui_open_session = opener;",
          "585:         return 0;",
          "588: }",
          "590: int UI_method_set_writer(UI_METHOD *method,",
          "591:                          int (*writer) (UI *ui, UI_STRING *uis))",
          "592: {",
          "594:         method->ui_write_string = writer;",
          "595:         return 0;",
          "598: }",
          "600: int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui))",
          "601: {",
          "603:         method->ui_flush = flusher;",
          "604:         return 0;",
          "607: }",
          "609: int UI_method_set_reader(UI_METHOD *method,",
          "610:                          int (*reader) (UI *ui, UI_STRING *uis))",
          "611: {",
          "613:         method->ui_read_string = reader;",
          "614:         return 0;",
          "617: }",
          "619: int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui))",
          "620: {",
          "622:         method->ui_close_session = closer;",
          "623:         return 0;",
          "626: }",
          "628: int UI_method_set_prompt_constructor(UI_METHOD *method,",
          "",
          "[Removed Lines]",
          "583:     if (method) {",
          "586:     } else",
          "587:         return -1;",
          "593:     if (method) {",
          "596:     } else",
          "597:         return -1;",
          "602:     if (method) {",
          "605:     } else",
          "606:         return -1;",
          "612:     if (method) {",
          "615:     } else",
          "616:         return -1;",
          "621:     if (method) {",
          "624:     } else",
          "625:         return -1;",
          "",
          "[Added Lines]",
          "587:     if (method != NULL) {",
          "590:     }",
          "591:     return -1;",
          "597:     if (method != NULL) {",
          "600:     }",
          "601:     return -1;",
          "606:     if (method != NULL) {",
          "609:     }",
          "610:     return -1;",
          "616:     if (method != NULL) {",
          "619:     }",
          "620:     return -1;",
          "625:     if (method != NULL) {",
          "628:     }",
          "629:     return -1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "632:                                                                   const char",
          "634: {",
          "636:         method->ui_construct_prompt = prompt_constructor;",
          "637:         return 0;",
          "640: }",
          "644:         return method->ui_open_session;",
          "647: }",
          "651:         return method->ui_write_string;",
          "654: }",
          "658:         return method->ui_flush;",
          "661: }",
          "665:         return method->ui_read_string;",
          "668: }",
          "672:         return method->ui_close_session;",
          "675: }",
          "677: char *(*UI_method_get_prompt_constructor(UI_METHOD *method)) (UI *,",
          "678:                                                               const char *,",
          "681:         return method->ui_construct_prompt;",
          "684: }",
          "686: enum UI_string_types UI_get_string_type(UI_STRING *uis)",
          "",
          "[Removed Lines]",
          "635:     if (method) {",
          "638:     } else",
          "639:         return -1;",
          "642: int (*UI_method_get_opener(UI_METHOD *method)) (UI *) {",
          "643:     if (method)",
          "645:     else",
          "646:         return NULL;",
          "649: int (*UI_method_get_writer(UI_METHOD *method)) (UI *, UI_STRING *) {",
          "650:     if (method)",
          "652:     else",
          "653:         return NULL;",
          "656: int (*UI_method_get_flusher(UI_METHOD *method)) (UI *) {",
          "657:     if (method)",
          "659:     else",
          "660:         return NULL;",
          "663: int (*UI_method_get_reader(UI_METHOD *method)) (UI *, UI_STRING *) {",
          "664:     if (method)",
          "666:     else",
          "667:         return NULL;",
          "670: int (*UI_method_get_closer(UI_METHOD *method)) (UI *) {",
          "671:     if (method)",
          "673:     else",
          "674:         return NULL;",
          "679:                                                               const char *) {",
          "680:     if (method)",
          "682:     else",
          "683:         return NULL;",
          "",
          "[Added Lines]",
          "639:     if (method != NULL) {",
          "642:     }",
          "643:     return -1;",
          "646: int (*UI_method_get_opener(UI_METHOD *method)) (UI *)",
          "647: {",
          "648:     if (method != NULL)",
          "650:     return NULL;",
          "653: int (*UI_method_get_writer(UI_METHOD *method)) (UI *, UI_STRING *)",
          "654: {",
          "655:     if (method != NULL)",
          "657:     return NULL;",
          "660: int (*UI_method_get_flusher(UI_METHOD *method)) (UI *)",
          "661: {",
          "662:     if (method != NULL)",
          "664:     return NULL;",
          "667: int (*UI_method_get_reader(UI_METHOD *method)) (UI *, UI_STRING *)",
          "668: {",
          "669:     if (method != NULL)",
          "671:     return NULL;",
          "674: int (*UI_method_get_closer(UI_METHOD *method)) (UI *)",
          "675: {",
          "676:     if (method != NULL)",
          "678:     return NULL;",
          "683:                                                               const char *)",
          "684: {",
          "685:     if (method != NULL)",
          "687:     return NULL;",
          "",
          "---------------"
        ],
        "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c": [
          "File: crypto/ui/ui_openssl.c -> crypto/ui/ui_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:     } else",
          "345: # endif",
          "346:     p = fgets(result, maxsize, tty_in);",
          "348:         goto error;",
          "349:     if (feof(tty_in))",
          "350:         goto error;",
          "",
          "[Removed Lines]",
          "347:     if (!p)",
          "",
          "[Added Lines]",
          "347:     if (p == NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d41526f4f76b2f9384540503c21e8ef41e1fbbb",
      "candidate_info": {
        "commit_hash": "0d41526f4f76b2f9384540503c21e8ef41e1fbbb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0d41526f4f76b2f9384540503c21e8ef41e1fbbb",
        "files": [
          "crypto/rsa/rsa_gen.c",
          "test/recipes/15-test_genrsa.t"
        ],
        "message": "Fix an endless loop in rsa_builtin_keygen.\n\nAnd add a test case.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2757)\n\n(cherry picked from commit 697958313ba48c8ebc832ab8f9f2b845fb7acfd4)",
        "before_after_code_files": [
          "crypto/rsrsa_gen.c||crypto/rsa/rsa_gen.c",
          "test/recipes/15-test_genrsa.t||test/recipes/15-test_genrsa.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rsrsa_gen.c||crypto/rsa/rsa_gen.c": [
          "File: crypto/rsrsa_gen.c -> crypto/rsa/rsa_gen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     if (bits < 16) {",
          "52:         RSAerr(RSA_F_RSA_BUILTIN_KEYGEN, RSA_R_KEY_SIZE_TOO_SMALL);",
          "53:         goto err;",
          "54:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:         } while (BN_cmp(rsa->p, rsa->q) == 0);",
          "",
          "---------------"
        ],
        "test/recipes/15-test_genrsa.t||test/recipes/15-test_genrsa.t": [
          "File: test/recipes/15-test_genrsa.t -> test/recipes/15-test_genrsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use strict;",
          "11: use warnings;",
          "13: use File::Spec;",
          "14: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "15: use OpenSSL::Test::Utils;",
          "17: setup(\"test_genrsa\");",
          "19: plan tests => 5;",
          "21: is(run(app([ 'openssl', 'genrsa', '-3', '-out', 'genrsatest.pem', '8'])), 0, \"genrsa -3 8\");",
          "22: ok(run(app([ 'openssl', 'genrsa', '-3', '-out', 'genrsatest.pem', '16'])), \"genrsa -3 16\");",
          "23: ok(run(app([ 'openssl', 'rsa', '-check', '-in', 'genrsatest.pem', '-noout'])), \"rsa -check\");",
          "24: ok(run(app([ 'openssl', 'genrsa', '-f4', '-out', 'genrsatest.pem', '16'])), \"genrsa -f4 16\");",
          "25: ok(run(app([ 'openssl', 'rsa', '-check', '-in', 'genrsatest.pem', '-noout'])), \"rsa -check\");",
          "26: unlink 'genrsatest.pem';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff7256e75928be74101f3ce2d1fbf62f7e10a1f3",
      "candidate_info": {
        "commit_hash": "ff7256e75928be74101f3ce2d1fbf62f7e10a1f3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ff7256e75928be74101f3ce2d1fbf62f7e10a1f3",
        "files": [
          "crypto/x509/x509_vpm.c",
          "doc/crypto/X509_VERIFY_PARAM_set_flags.pod",
          "include/openssl/x509_vfy.h",
          "test/crltest.c",
          "util/libcrypto.num"
        ],
        "message": "GH2176: Add X509_VERIFY_PARAM_get_time\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2208)\n(cherry picked from commit 329f2f4a428b0acb7a579869a13f6cd6bf0a3551)",
        "before_after_code_files": [
          "crypto/x509/x509_vpm.c||crypto/x509/x509_vpm.c",
          "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h",
          "test/crltest.c||test/crltest.c",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vpm.c||crypto/x509/x509_vpm.c": [
          "File: crypto/x509/x509_vpm.c -> crypto/x509/x509_vpm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:     param->auth_level = auth_level;",
          "338: }",
          "340: void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)",
          "341: {",
          "342:     param->check_time = t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param)",
          "341: {",
          "342:     return param->check_time;",
          "343: }",
          "",
          "---------------"
        ],
        "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h": [
          "File: include/openssl/x509_vfy.h -> include/openssl/x509_vfy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "459: int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);",
          "460: void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);",
          "461: void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param, int auth_level);",
          "462: void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);",
          "463: int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,",
          "464:                                   ASN1_OBJECT *policy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462: time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param);",
          "",
          "---------------"
        ],
        "test/crltest.c||test/crltest.c": [
          "File: test/crltest.c -> test/crltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:         goto err;",
          "253:     X509_STORE_CTX_set0_trusted_stack(ctx, roots);",
          "254:     X509_STORE_CTX_set0_crls(ctx, crls);",
          "256:     X509_VERIFY_PARAM_set_depth(param, 16);",
          "257:     if (flags)",
          "258:         X509_VERIFY_PARAM_set_flags(param, flags);",
          "",
          "[Removed Lines]",
          "255:     X509_VERIFY_PARAM_set_time(param, 1474934400 /* Sep 27th, 2016 */);",
          "",
          "[Added Lines]",
          "257:     X509_VERIFY_PARAM_set_time(param, PARAM_TIME);",
          "258:     if (X509_VERIFY_PARAM_get_time(param) != PARAM_TIME) {",
          "259:         fprintf(stderr, \"set_time/get_time mismatch.\\n\");",
          "260:         goto err;",
          "261:     }",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_0d EXIST::FUNCTION:CT",
          "4213: X509_VERIFY_PARAM_set_inh_flags         4174 1_1_0d EXIST::FUNCTION:",
          "4214: X509_VERIFY_PARAM_get_inh_flags         4175 1_1_0d EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4215: X509_VERIFY_PARAM_get_time              4181 1_1_0d EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6542af0571ccf491022c8d3494871c73c2127389",
      "candidate_info": {
        "commit_hash": "6542af0571ccf491022c8d3494871c73c2127389",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6542af0571ccf491022c8d3494871c73c2127389",
        "files": [
          "Configurations/unix-Makefile.tmpl"
        ],
        "message": "Unix Makefile: Have manual generation use the same perl script as Windows and VMS\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2864)",
        "before_after_code_files": [
          "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl": [
          "File: Configurations/unix-Makefile.tmpl -> Configurations/unix-Makefile.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:  @ : {- output_on() unless windowsdll(); \"\" -}",
          "550:  -$(RMDIR) $(DESTDIR)$(INSTALLTOP)/bin",
          "628: install_man_docs:",
          "629:  @[ -n \"$(INSTALLTOP)\" ] || (echo INSTALLTOP should not be empty; exit 1)",
          "630:  @echo \"*** Installing manpages\"",
          "637: uninstall_man_docs:",
          "638:  @echo \"*** Uninstalling manpages\"",
          "644: install_html_docs:",
          "645:  @[ -n \"$(INSTALLTOP)\" ] || (echo INSTALLTOP should not be empty; exit 1)",
          "646:  @echo \"*** Installing HTML manpages\"",
          "655: uninstall_html_docs:",
          "656:  @echo \"*** Uninstalling manpages\"",
          "663: # Developer targets (note: these are only available on Unix) #########",
          "",
          "[Removed Lines]",
          "552: # A method to extract all names from a .pod file",
          "553: # The first sed extracts everything between \"=head1 NAME\" and the next =head1",
          "554: # The perl command joins all the lines into one",
          "555: # The second sed removes the description and turns all commas into spaces",
          "556: # Voil\u00e0, you have a space separated list of names!",
          "557: EXTRACT_NAMES=sed -e '1,/^=head1  *NAME *$$/d;/^=head1/,$$d' | \\",
          "558:               $(PERL) -p -0 -e 's/\\n/ /g; END {print \"\\n\"}' | \\",
          "559:               sed -e 's/ - .*$$//;s/,/ /g'",
          "560: PROCESS_PODS=\\",
          "561:  set -e; \\",
          "562:  here=`cd $(SRCDIR); pwd`; \\",
          "563:  point=$$here/util/point.sh; \\",
          "564:  for ds in apps:1 crypto:3 ssl:3; do \\",
          "565:      defdir=`echo $$ds | cut -f1 -d:`; \\",
          "566:      defsec=`echo $$ds | cut -f2 -d:`; \\",
          "567:      for p in $(SRCDIR)/doc/$$defdir/*.pod; do \\",
          "568:   SEC=`sed -ne 's/^=for  *comment  *openssl_manual_section: *\\([0-9]\\) *$$/\\1/p' $$p`; \\",
          "569:   [ -z \"$$SEC\" ] && SEC=$$defsec; \\",
          "570:   fn=`basename $$p .pod`; \\",
          "571:   Name=$$fn; \\",
          "572:   NAME=`echo $$fn | tr '[a-z]' '[A-Z]'`; \\",
          "573:   suf=`eval \"echo $$OUTSUFFIX\"`; \\",
          "574:   top=`eval \"echo $$OUTTOP\"`; \\",
          "575:   $(PERL) $(SRCDIR)/util/mkdir-p.pl $$top/man$$SEC; \\",
          "576:   echo \"install $$p -> $$top/man$$SEC/$$fn$$suf\"; \\",
          "577:   cat $$p | eval \"$$GENERATE\" \\",
          "578:    >  $$top/man$$SEC/$$fn$$suf; \\",
          "579:   names=`cat $$p | $(EXTRACT_NAMES)`; \\",
          "580:   ( cd $$top/man$$SEC; \\",
          "581:     for n in $$names; do \\",
          "582:         comp_n=\"$$n\"; \\",
          "583:         comp_fn=\"$$fn\"; \\",
          "584:         case \"$(PLATFORM)\" in DJGPP|Cygwin*|mingw*|darwin*-*-cc) \\",
          "585:      comp_n=`echo \"$$n\" | tr '[A-Z]' '[a-z]'`; \\",
          "586:      comp_fn=`echo \"$$fn\" | tr '[A-Z]' '[a-z]'`; \\",
          "587:      ;; \\",
          "588:         esac; \\",
          "589:         if [ \"$$comp_n\" != \"$$comp_fn\" ]; then \\",
          "590:      echo \"link $$top/man$$SEC/$$n$$suf -> $$top/man$$SEC/$$fn$$suf\"; \\",
          "591:      PLATFORM=$(PLATFORM) $$point $$fn$$suf $$n$$suf; \\",
          "592:         fi; \\",
          "593:     done ); \\",
          "594:      done; \\",
          "595:  done",
          "596: UNINSTALL_DOCS=\\",
          "597:  set -e; \\",
          "598:  here=`cd $(SRCDIR); pwd`; \\",
          "599:  for ds in apps:1 crypto:3 ssl:3; do \\",
          "600:      defdir=`echo $$ds | cut -f1 -d:`; \\",
          "601:      defsec=`echo $$ds | cut -f2 -d:`; \\",
          "602:      for p in $(SRCDIR)/doc/$$defdir/*.pod; do \\",
          "603:   SEC=`sed -ne 's/^=for  *comment  *openssl_manual_section: *\\([0-9]\\) *$$/\\1/p' $$p`; \\",
          "604:   [ -z \"$$SEC\" ] && SEC=$$defsec; \\",
          "605:   fn=`basename $$p .pod`; \\",
          "606:   suf=`eval \"echo $$OUTSUFFIX\"`; \\",
          "607:   top=`eval \"echo $$OUTTOP\"`; \\",
          "608:   echo \"$(RM) $$top/man$$SEC/$$fn$$suf\"; \\",
          "609:          $(RM) $$top/man$$SEC/$$fn$$suf; \\",
          "610:   names=`cat $$p | $(EXTRACT_NAMES)`; \\",
          "611:   for n in $$names; do \\",
          "612:       comp_n=\"$$n\"; \\",
          "613:       comp_fn=\"$$fn\"; \\",
          "614:       case \"$(PLATFORM)\" in DJGPP|Cygwin*|mingw*|darwin*-*-cc) \\",
          "615:    comp_n=`echo \"$$n\" | tr '[A-Z]' '[a-z]'`; \\",
          "616:    comp_fn=`echo \"$$fn\" | tr '[A-Z]' '[a-z]'`; \\",
          "617:    ;; \\",
          "618:       esac; \\",
          "619:       if [ \"$$comp_n\" != \"$$comp_fn\" ]; then \\",
          "620:    echo \"$(RM) $$top/man$$SEC/$$n$$suf\"; \\",
          "621:    $(RM) $$top/man$$SEC/$$n$$suf; \\",
          "622:       fi; \\",
          "623:   done; \\",
          "624:   ( $(RMDIR) $$top/man$$SEC 2>/dev/null || exit 0 ); \\",
          "625:      done; \\",
          "626:  done",
          "631:  @\\",
          "632:  OUTSUFFIX='.$${SEC}$(MANSUFFIX)'; \\",
          "633:  OUTTOP=\"$(DESTDIR)$(MANDIR)\"; \\",
          "634:  GENERATE='pod2man --name=$$NAME --section=$$SEC --center=OpenSSL --release=$(VERSION)'; \\",
          "635:  $(PROCESS_PODS)",
          "639:  @\\",
          "640:  OUTSUFFIX='.$${SEC}$(MANSUFFIX)'; \\",
          "641:  OUTTOP=\"$(DESTDIR)$(MANDIR)\"; \\",
          "642:  $(UNINSTALL_DOCS)",
          "647:  @\\",
          "648:  OUTSUFFIX='.$(HTMLSUFFIX)'; \\",
          "649:  OUTTOP=\"$(DESTDIR)$(HTMLDIR)\"; \\",
          "650:  GENERATE=\"pod2html --podroot=$(SRCDIR)/doc --htmldir=.. \\",
          "651:       --podpath=apps:crypto:ssl --title=\\$$Name \\",
          "652:     | perl -pe 's|href=\\\"http://man.he.net/man|href=\\\"../man|g; s|href=\\\"(.*/man.*)(?<!\\.html)\\\">|href=\\\"\\$$1.html\\\">|g;'\"; \\",
          "653:  $(PROCESS_PODS)",
          "657:  @\\",
          "658:  OUTSUFFIX='.$(HTMLSUFFIX)'; \\",
          "659:  OUTTOP=\"$(DESTDIR)$(HTMLDIR)\"; \\",
          "660:  $(UNINSTALL_DOCS)",
          "",
          "[Added Lines]",
          "556:  $(PERL) $(SRCDIR)/util/process_docs.pl \\",
          "557:   --destdir=$(DESTDIR)$(MANDIR) --type=man --suffix=$(MANSUFFIX)",
          "561:  $(PERL) $(SRCDIR)/util/process_docs.pl \\",
          "562:   --destdir=$(DESTDIR)$(MANDIR) --type=man --suffix=$(MANSUFFIX) \\",
          "563:   --remove",
          "568:  $(PERL) $(SRCDIR)/util/process_docs.pl \\",
          "569:   --destdir=$(DESTDIR)$(HTMLDIR) --type=html",
          "573:  $(PERL) $(SRCDIR)/util/process_docs.pl \\",
          "574:   --destdir=$(DESTDIR)$(HTMLDIR) --type=html --remove",
          "",
          "---------------"
        ]
      }
    }
  ]
}