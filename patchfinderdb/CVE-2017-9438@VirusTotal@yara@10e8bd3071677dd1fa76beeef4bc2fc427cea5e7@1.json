{
  "cve_id": "CVE-2017-9438",
  "cve_desc": "libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule (involving hex strings) that is mishandled in the _yr_re_emit function, a different vulnerability than CVE-2017-9304.",
  "repo": "VirusTotal/yara",
  "patch_hash": "10e8bd3071677dd1fa76beeef4bc2fc427cea5e7",
  "patch_info": {
    "commit_hash": "10e8bd3071677dd1fa76beeef4bc2fc427cea5e7",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7",
    "files": [
      "libyara/hex_grammar.c",
      "libyara/hex_grammar.h",
      "libyara/hex_grammar.y"
    ],
    "message": "Fix issue #674 for hex strings.",
    "before_after_code_files": [
      "libyara/hex_grammar.c||libyara/hex_grammar.c",
      "libyara/hex_grammar.h||libyara/hex_grammar.h",
      "libyara/hex_grammar.y||libyara/hex_grammar.y"
    ]
  },
  "patch_diff": {
    "libyara/hex_grammar.c||libyara/hex_grammar.c": [
      "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "93: #define mark_as_not_fast_regexp() \\",
      "94:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
      "96: #define ERROR_IF(x, error) \\",
      "97:     if (x) \\",
      "98:     { \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: #define incr_ast_levels() \\",
      "97:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
      "98:     { \\",
      "99:       lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\",
      "100:       YYABORT; \\",
      "101:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477: static const yytype_uint16 yyrline[] =",
      "478: {",
      "482: };",
      "483: #endif",
      "",
      "[Removed Lines]",
      "479:        0,   105,   105,   114,   118,   127,   189,   193,   206,   210,",
      "480:      219,   233,   232,   245,   268,   300,   322,   342,   346,   360,",
      "481:      368",
      "",
      "[Added Lines]",
      "486:        0,   112,   112,   121,   125,   136,   200,   204,   219,   223,",
      "487:      232,   246,   245,   258,   281,   313,   335,   355,   359,   374,",
      "488:      382",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1321:   switch (yyn)",
      "1322:     {",
      "1323:         case 2:",
      "1325:     {",
      "1326:         RE_AST* re_ast = yyget_extra(yyscanner);",
      "1327:         re_ast->root_node = (yyvsp[-1].re_node);",
      "1328:       }",
      "1330:     break;",
      "1332:   case 3:",
      "1334:     {",
      "1335:         (yyval.re_node) = (yyvsp[0].re_node);",
      "1336:       }",
      "1338:     break;",
      "1340:   case 4:",
      "1342:     {",
      "1343:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
      "1345:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1350:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1348:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
      "1349:       }",
      "1351:     break;",
      "1353:   case 5:",
      "1355:     {",
      "1356:         RE_NODE* new_concat;",
      "1357:         RE_NODE* leftmost_concat = NULL;",
      "1358:         RE_NODE* leftmost_node = (yyvsp[-1].re_node);",
      "1360:         (yyval.re_node) = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1410:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
      "1411:       }",
      "1413:     break;",
      "1415:   case 6:",
      "1417:     {",
      "1418:         (yyval.re_node) = (yyvsp[0].re_node);",
      "1419:       }",
      "1421:     break;",
      "1423:   case 7:",
      "1425:     {",
      "1426:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
      "1428:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1437:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1590:         (yyval.re_node)->start = 0;",
      "1591:         (yyval.re_node)->end = INT_MAX;",
      "1592:       }",
      "1594:     break;",
      "1596:   case 17:",
      "1598:     {",
      "1599:           (yyval.re_node) = (yyvsp[0].re_node);",
      "1600:       }",
      "1602:     break;",
      "1604:   case 18:",
      "1606:     {",
      "1607:         mark_as_not_fast_regexp();",
      "1609:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1621:         incr_ast_levels();",
      "",
      "---------------"
    ],
    "libyara/hex_grammar.h||libyara/hex_grammar.h": [
      "File: libyara/hex_grammar.h -> libyara/hex_grammar.h"
    ],
    "libyara/hex_grammar.y||libyara/hex_grammar.y": [
      "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: #define mark_as_not_fast_regexp() \\",
      "52:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
      "54: #define ERROR_IF(x, error) \\",
      "55:     if (x) \\",
      "56:     { \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54: #define incr_ast_levels() \\",
      "55:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
      "56:     { \\",
      "57:       lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\",
      "58:       YYABORT; \\",
      "59:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:       }",
      "118:     | token token",
      "119:       {",
      "120:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
      "122:         DESTROY_NODE_IF($$ == NULL, $1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "130:         RE_NODE* leftmost_concat = NULL;",
      "131:         RE_NODE* leftmost_node = $2;",
      "133:         $$ = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192:       }",
      "193:     | token_sequence token_or_range",
      "194:       {",
      "195:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
      "197:         DESTROY_NODE_IF($$ == NULL, $1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "346:     | alternatives '|' tokens",
      "347:       {",
      "348:         mark_as_not_fast_regexp();",
      "350:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "362:         incr_ast_levels();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3799a180000846d44dda84be6dc7170ebf2147f0",
      "candidate_info": {
        "commit_hash": "3799a180000846d44dda84be6dc7170ebf2147f0",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/3799a180000846d44dda84be6dc7170ebf2147f0",
        "files": [
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.h",
          "libyara/hex_grammar.y",
          "libyara/re_grammar.c",
          "libyara/re_grammar.h",
          "libyara/re_grammar.y"
        ],
        "message": "Fix memory leaks in hex and regexp grammars\n\nA memory leak occurred when parsing a hex string or regexp exceeding the RE_MAX_AST_LEVELS limit. In those cases the parsing was aborted without releasing some RE_NODE structs.",
        "before_after_code_files": [
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.h||libyara/hex_grammar.h",
          "libyara/hex_grammar.y||libyara/hex_grammar.y",
          "libyara/re_grammar.c||libyara/re_grammar.c",
          "libyara/re_grammar.h||libyara/re_grammar.h",
          "libyara/re_grammar.y||libyara/re_grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.h||libyara/hex_grammar.h",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ],
          "candidate": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.h||libyara/hex_grammar.h",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: #define mark_as_not_fast_regexp() \\",
          "94:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "97:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "98:     { \\",
          "99:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "100:       YYABORT; \\",
          "101:     }",
          "",
          "[Removed Lines]",
          "96: #define incr_ast_levels() \\",
          "",
          "[Added Lines]",
          "96: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "99:       { cleanup_code } \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484: static const yytype_uint16 yyrline[] =",
          "485: {",
          "489: };",
          "490: #endif",
          "",
          "[Removed Lines]",
          "486:        0,   112,   112,   121,   125,   136,   200,   204,   219,   223,",
          "487:      232,   237,   236,   249,   272,   304,   326,   346,   350,   365,",
          "488:      373",
          "",
          "[Added Lines]",
          "487:        0,   113,   113,   122,   126,   140,   208,   212,   230,   234,",
          "488:      243,   248,   247,   260,   283,   315,   337,   357,   361,   380,",
          "489:      388",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1328:   switch (yyn)",
          "1329:     {",
          "1330:         case 2:",
          "1332:     {",
          "1333:         RE_AST* re_ast = yyget_extra(yyscanner);",
          "1334:         re_ast->root_node = (yyvsp[-1].re_node);",
          "1335:       }",
          "1337:     break;",
          "1339:   case 3:",
          "1341:     {",
          "1342:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1343:       }",
          "1345:     break;",
          "1347:   case 4:",
          "1349:     {",
          "1352:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "",
          "[Removed Lines]",
          "1350:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1351:         fail_if_too_many_ast_levels({",
          "1352:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1353:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1354:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1357:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1358:       }",
          "1360:     break;",
          "1362:   case 5:",
          "1364:     {",
          "1365:         RE_NODE* new_concat;",
          "1366:         RE_NODE* leftmost_concat = NULL;",
          "1367:         RE_NODE* leftmost_node = (yyvsp[-1].re_node);",
          "1371:         (yyval.re_node) = NULL;",
          "",
          "[Removed Lines]",
          "1369:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1373:         fail_if_too_many_ast_levels({",
          "1374:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1375:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1376:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1377:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1421:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1422:       }",
          "1424:     break;",
          "1426:   case 6:",
          "1428:     {",
          "1429:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1430:       }",
          "1432:     break;",
          "1434:   case 7:",
          "1436:     {",
          "1439:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "",
          "[Removed Lines]",
          "1437:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1445:         fail_if_too_many_ast_levels({",
          "1446:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1447:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1448:         });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1594:         (yyval.re_node)->start = 0;",
          "1595:         (yyval.re_node)->end = INT_MAX;",
          "1596:       }",
          "1598:     break;",
          "1600:   case 17:",
          "1602:     {",
          "1603:           (yyval.re_node) = (yyvsp[0].re_node);",
          "1604:       }",
          "1606:     break;",
          "1608:   case 18:",
          "1610:     {",
          "1611:         mark_as_not_fast_regexp();",
          "1614:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "",
          "[Removed Lines]",
          "1612:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1624:         fail_if_too_many_ast_levels({",
          "1625:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1626:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1627:         });",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.h||libyara/hex_grammar.h": [
          "File: libyara/hex_grammar.h -> libyara/hex_grammar.h"
        ],
        "libyara/hex_grammar.y||libyara/hex_grammar.y": [
          "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #define mark_as_not_fast_regexp() \\",
          "52:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "55:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "56:     { \\",
          "57:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "58:       YYABORT; \\",
          "59:     }",
          "",
          "[Removed Lines]",
          "54: #define incr_ast_levels() \\",
          "",
          "[Added Lines]",
          "54: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "57:       { cleanup_code } \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:       }",
          "125:     | token token",
          "126:       {",
          "129:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "",
          "[Removed Lines]",
          "127:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "128:         fail_if_too_many_ast_levels({",
          "129:           yr_re_node_destroy($1);",
          "130:           yr_re_node_destroy($2);",
          "131:         });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:         RE_NODE* leftmost_concat = NULL;",
          "140:         RE_NODE* leftmost_node = $2;",
          "144:         $$ = NULL;",
          "",
          "[Removed Lines]",
          "142:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "146:         fail_if_too_many_ast_levels({",
          "147:           yr_re_node_destroy($1);",
          "148:           yr_re_node_destroy($2);",
          "149:           yr_re_node_destroy($3);",
          "150:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:       }",
          "204:     | token_sequence token_or_range",
          "205:       {",
          "208:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "",
          "[Removed Lines]",
          "206:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "214:         fail_if_too_many_ast_levels({",
          "215:           yr_re_node_destroy($1);",
          "216:           yr_re_node_destroy($2);",
          "217:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "350:     | alternatives '|' tokens",
          "351:       {",
          "352:         mark_as_not_fast_regexp();",
          "355:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
          "",
          "[Removed Lines]",
          "353:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "365:         fail_if_too_many_ast_levels({",
          "366:           yr_re_node_destroy($1);",
          "367:           yr_re_node_destroy($3);",
          "368:         });",
          "",
          "---------------"
        ],
        "libyara/re_grammar.c||libyara/re_grammar.c": [
          "File: libyara/re_grammar.c -> libyara/re_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: #define mark_as_not_fast_regexp() \\",
          "89:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "92:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "93:     { \\",
          "94:       yyerror(yyscanner, lex_env, \"regexp too long\"); \\",
          "95:       YYABORT; \\",
          "96:     }",
          "99: #define ERROR_IF(x, error) \\",
          "100:     if (x) \\",
          "101:     { \\",
          "",
          "[Removed Lines]",
          "91: #define incr_ast_levels() \\",
          "",
          "[Added Lines]",
          "91: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "94:       { cleanup_code } \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500: static const yytype_uint16 yyrline[] =",
          "501: {",
          "506: };",
          "507: #endif",
          "",
          "[Removed Lines]",
          "502:        0,   112,   112,   117,   121,   125,   137,   156,   160,   173,",
          "503:      187,   203,   217,   233,   256,   280,   302,   325,   329,   335,",
          "504:      341,   347,   356,   362,   368,   376,   382,   388,   394,   400,",
          "505:      406,   412",
          "",
          "[Added Lines]",
          "502:        0,   112,   112,   117,   121,   125,   141,   163,   167,   184,",
          "503:      198,   214,   228,   244,   267,   291,   313,   336,   340,   346,",
          "504:      352,   358,   367,   375,   381,   389,   395,   401,   407,   413,",
          "505:      419,   425",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1339:   switch (yyn)",
          "1340:     {",
          "1341:         case 2:",
          "1343:     {",
          "1344:         RE_AST* re_ast = yyget_extra(yyscanner);",
          "1345:         re_ast->root_node = (yyvsp[0].re_node);",
          "1346:       }",
          "1348:     break;",
          "1350:   case 4:",
          "1352:     {",
          "1353:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1354:       }",
          "1356:     break;",
          "1358:   case 5:",
          "1360:     {",
          "1361:         mark_as_not_fast_regexp();",
          "1364:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "",
          "[Removed Lines]",
          "1362:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1363:         fail_if_too_many_ast_levels({",
          "1364:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1365:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1366:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1369:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1370:       }",
          "1372:     break;",
          "1374:   case 6:",
          "1376:     {",
          "1377:         RE_NODE* node;",
          "1379:         mark_as_not_fast_regexp();",
          "1382:         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);",
          "",
          "[Removed Lines]",
          "1380:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1385:         fail_if_too_many_ast_levels({",
          "1386:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1387:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1389:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1390:       }",
          "1392:     break;",
          "1394:   case 7:",
          "1396:     {",
          "1397:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1398:       }",
          "1400:     break;",
          "1402:   case 8:",
          "1404:     {",
          "1407:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1409:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1410:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1411:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1412:       }",
          "1414:     break;",
          "1416:   case 9:",
          "1418:     {",
          "1419:         RE_AST* re_ast;",
          "",
          "[Removed Lines]",
          "1405:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1412:         fail_if_too_many_ast_levels({",
          "1413:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1414:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1415:         });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1594:         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;",
          "1595:         (yyval.re_node)->greedy = FALSE;",
          "1596:       }",
          "1598:     break;",
          "1600:   case 17:",
          "1602:     {",
          "1603:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1604:       }",
          "1606:     break;",
          "1608:   case 18:",
          "1610:     {",
          "1611:         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);",
          "1613:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1614:       }",
          "1616:     break;",
          "1618:   case 19:",
          "1620:     {",
          "1621:         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);",
          "1623:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1624:       }",
          "1626:     break;",
          "1628:   case 20:",
          "1630:     {",
          "1631:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);",
          "1633:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1634:       }",
          "1636:     break;",
          "1638:   case 21:",
          "1640:     {",
          "1641:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);",
          "1643:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1644:       }",
          "1646:     break;",
          "1648:   case 22:",
          "1650:     {",
          "1653:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1654:       }",
          "1656:     break;",
          "1658:   case 23:",
          "1660:     {",
          "1661:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "1663:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1664:       }",
          "1666:     break;",
          "1668:   case 24:",
          "1670:     {",
          "1671:         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "",
          "[Removed Lines]",
          "1651:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1662:         fail_if_too_many_ast_levels({",
          "1663:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1664:         });",
          "",
          "---------------"
        ],
        "libyara/re_grammar.h||libyara/re_grammar.h": [
          "File: libyara/re_grammar.h -> libyara/re_grammar.h"
        ],
        "libyara/re_grammar.y||libyara/re_grammar.y": [
          "File: libyara/re_grammar.y -> libyara/re_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define mark_as_not_fast_regexp() \\",
          "47:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "50:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "51:     { \\",
          "52:       yyerror(yyscanner, lex_env, \"regexp too long\"); \\",
          "53:       YYABORT; \\",
          "54:     }",
          "57: #define ERROR_IF(x, error) \\",
          "58:     if (x) \\",
          "59:     { \\",
          "",
          "[Removed Lines]",
          "49: #define incr_ast_levels() \\",
          "",
          "[Added Lines]",
          "49: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "52:       { cleanup_code } \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     | alternative '|' concatenation",
          "126:       {",
          "127:         mark_as_not_fast_regexp();",
          "130:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
          "",
          "[Removed Lines]",
          "128:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "129:         fail_if_too_many_ast_levels({",
          "130:           yr_re_node_destroy($1);",
          "131:           yr_re_node_destroy($3);",
          "132:         });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:         RE_NODE* node;",
          "141:         mark_as_not_fast_regexp();",
          "144:         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);",
          "",
          "[Removed Lines]",
          "142:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "147:         fail_if_too_many_ast_levels({",
          "148:           yr_re_node_destroy($1);",
          "149:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:       }",
          "160:     | concatenation repeat",
          "161:       {",
          "164:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "166:         DESTROY_NODE_IF($$ == NULL, $1);",
          "167:         DESTROY_NODE_IF($$ == NULL, $2);",
          "168:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "169:       }",
          "170:     ;",
          "",
          "[Removed Lines]",
          "162:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "169:         fail_if_too_many_ast_levels({",
          "170:           yr_re_node_destroy($1);",
          "171:           yr_re_node_destroy($2);",
          "172:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355: single",
          "356:     : '(' alternative ')'",
          "357:       {",
          "360:         $$ = $2;",
          "361:       }",
          "",
          "[Removed Lines]",
          "358:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "369:         fail_if_too_many_ast_levels({",
          "370:           yr_re_node_destroy($2);",
          "371:         });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c57f0bd66a118c62e43c0a7da57a3d8134fe168",
      "candidate_info": {
        "commit_hash": "0c57f0bd66a118c62e43c0a7da57a3d8134fe168",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/0c57f0bd66a118c62e43c0a7da57a3d8134fe168",
        "files": [
          ".gitignore",
          "Makefile.am",
          "libyara/Makefile.am",
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.h",
          "libyara/hex_grammar.y",
          "libyara/include/yara/macho.h",
          "libyara/modules/macho.c",
          "libyara/modules/module_list",
          "tests/blob.h",
          "tests/data/tiny-universal",
          "tests/test-macho.c",
          "windows/vs2015/libyara/libyara.vcxproj"
        ],
        "message": "Mach-O file format support (#617)\n\nAdd module for parsing Mach-O files.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "libyara/Makefile.am||libyara/Makefile.am",
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.h||libyara/hex_grammar.h",
          "libyara/hex_grammar.y||libyara/hex_grammar.y",
          "libyara/include/yara/macho.h||libyara/include/yara/macho.h",
          "libyara/modules/macho.c||libyara/modules/macho.c",
          "tests/blob.h||tests/blob.h",
          "tests/test-macho.c||tests/test-macho.c",
          "windows/vs2015/libyara/libyara.vcxproj||windows/vs2015/libyara/libyara.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.h||libyara/hex_grammar.h",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ],
          "candidate": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.h||libyara/hex_grammar.h",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: yarac_LDADD = libyara/.libs/libyara.a",
          "31: TESTS = $(check_PROGRAMS)",
          "34: # The -fsanitize=address option makes test-exception fail. Include the test",
          "35: # only if the option is not enabled.",
          "",
          "[Removed Lines]",
          "32: check_PROGRAMS = test-alignment test-api test-rules test-pe test-elf test-version",
          "",
          "[Added Lines]",
          "32: check_PROGRAMS = test-alignment test-api test-rules test-pe test-elf test-macho test-version",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: test_pe_LDADD = libyara/.libs/libyara.a",
          "46: test_elf_SOURCES = tests/test-elf.c tests/util.c",
          "47: test_elf_LDADD = libyara/.libs/libyara.a",
          "48: test_exception_SOURCES = tests/test-exception.c tests/util.c",
          "49: test_exception_LDADD = libyara/.libs/libyara.a",
          "50: test_version_SOURCES = tests/test-version.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: test_macho_SOURCES = tests/test-macho.c tests/util.c",
          "49: test_macho_LDADD = libyara/.libs/libyara.a",
          "",
          "---------------"
        ],
        "libyara/Makefile.am||libyara/Makefile.am": [
          "File: libyara/Makefile.am -> libyara/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: MODULES =  modules/tests.c",
          "3: MODULES += modules/pe.c",
          "4: MODULES += modules/elf.c",
          "5: MODULES += modules/math.c",
          "6: MODULES += modules/time.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: MODULES += modules/macho.c",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: #define mark_as_not_fast_regexp() \\",
          "94:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "97:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "98:     { \\",
          "100:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "101:       YYABORT; \\",
          "102:     }",
          "105:     if (x) \\",
          "106:     { \\",
          "107:       lex_env->last_error_code = error; \\",
          "108:       YYABORT; \\",
          "109:     } \\",
          "112:     if (x) \\",
          "113:     { \\",
          "114:       yr_re_node_destroy(node); \\",
          "115:     } \\",
          "120: # ifndef YY_NULLPTR",
          "121: #  if defined __cplusplus && 201103L <= __cplusplus",
          "",
          "[Removed Lines]",
          "96: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "99:       { cleanup_code } \\",
          "104: #define fail_if(x, error) \\",
          "111: #define destroy_node_if(x, node) \\",
          "",
          "[Added Lines]",
          "96: #define incr_ast_levels() \\",
          "103: #define ERROR_IF(x, error) \\",
          "110: #define DESTROY_NODE_IF(x, node) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485: static const yytype_uint16 yyrline[] =",
          "486: {",
          "490: };",
          "491: #endif",
          "",
          "[Removed Lines]",
          "487:        0,   113,   113,   122,   126,   140,   208,   212,   230,   234,",
          "488:      243,   248,   247,   260,   283,   315,   337,   357,   361,   380,",
          "489:      388",
          "",
          "[Added Lines]",
          "486:        0,   112,   112,   121,   125,   136,   200,   204,   219,   223,",
          "487:      232,   237,   236,   249,   272,   304,   326,   346,   350,   365,",
          "488:      373",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1025:   switch (yytype)",
          "1026:     {",
          "1031:         break;",
          "1037:         break;",
          "1043:         break;",
          "1049:         break;",
          "1055:         break;",
          "1061:         break;",
          "1067:         break;",
          "",
          "[Removed Lines]",
          "1029:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1035:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1041:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1047:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1053:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1059:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1065:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "",
          "[Added Lines]",
          "1028:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1034:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1040:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1046:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1052:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1058:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1064:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1329:   switch (yyn)",
          "1330:     {",
          "1331:         case 2:",
          "1333:     {",
          "1334:         RE_AST* re_ast = yyget_extra(yyscanner);",
          "1335:         re_ast->root_node = (yyvsp[-1].re_node);",
          "1336:       }",
          "1338:     break;",
          "1340:   case 3:",
          "1342:     {",
          "1343:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1344:       }",
          "1346:     break;",
          "1348:   case 4:",
          "1350:     {",
          "1356:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1362:       }",
          "1364:     break;",
          "1366:   case 5:",
          "1368:     {",
          "1369:         RE_NODE* new_concat;",
          "1370:         RE_NODE* leftmost_concat = NULL;",
          "1371:         RE_NODE* leftmost_node = (yyvsp[-1].re_node);",
          "1379:         (yyval.re_node) = NULL;",
          "",
          "[Removed Lines]",
          "1351:         fail_if_too_many_ast_levels({",
          "1352:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1353:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1354:         });",
          "1358:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1359:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1361:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1373:         fail_if_too_many_ast_levels({",
          "1374:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1375:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1376:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1377:         });",
          "",
          "[Added Lines]",
          "1350:         incr_ast_levels();",
          "1354:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1355:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1357:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1369:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1422:           }",
          "1423:         }",
          "1430:       }",
          "1432:     break;",
          "1434:   case 6:",
          "1436:     {",
          "1437:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1438:       }",
          "1440:     break;",
          "1442:   case 7:",
          "1444:     {",
          "1450:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1456:       }",
          "1458:     break;",
          "1460:   case 8:",
          "1462:     {",
          "1463:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1464:       }",
          "1466:     break;",
          "1468:   case 9:",
          "1470:     {",
          "1471:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1472:         (yyval.re_node)->greedy = FALSE;",
          "1473:       }",
          "1475:     break;",
          "1477:   case 10:",
          "1479:     {",
          "1480:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1481:       }",
          "1483:     break;",
          "1485:   case 11:",
          "1487:     {",
          "1488:         lex_env->inside_or++;",
          "1489:       }",
          "1491:     break;",
          "1493:   case 12:",
          "1495:     {",
          "1496:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1497:         lex_env->inside_or--;",
          "1498:       }",
          "1500:     break;",
          "1502:   case 13:",
          "1504:     {",
          "1505:         if ((yyvsp[-1].integer) <= 0)",
          "1506:         {",
          "",
          "[Removed Lines]",
          "1425:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1426:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1427:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1429:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1445:         fail_if_too_many_ast_levels({",
          "1446:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1447:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1448:         });",
          "1452:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1453:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1455:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1417:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1418:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1419:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1421:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1437:         incr_ast_levels();",
          "1441:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1442:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1444:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1519:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1523:         (yyval.re_node)->start = (int) (yyvsp[-1].integer);",
          "1524:         (yyval.re_node)->end = (int) (yyvsp[-1].integer);",
          "1525:       }",
          "1527:     break;",
          "1529:   case 14:",
          "1531:     {",
          "1532:         if (lex_env->inside_or &&",
          "1533:             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||",
          "",
          "[Removed Lines]",
          "1521:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1510:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1555:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1559:         (yyval.re_node)->start = (int) (yyvsp[-3].integer);",
          "1560:         (yyval.re_node)->end = (int) (yyvsp[-1].integer);",
          "1561:       }",
          "1563:     break;",
          "1565:   case 15:",
          "1567:     {",
          "1568:         if (lex_env->inside_or)",
          "1569:         {",
          "",
          "[Removed Lines]",
          "1557:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1546:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1581:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1585:         (yyval.re_node)->start = (int) (yyvsp[-2].integer);",
          "1586:         (yyval.re_node)->end = INT_MAX;",
          "1587:       }",
          "1589:     break;",
          "1591:   case 16:",
          "1593:     {",
          "1594:         if (lex_env->inside_or)",
          "1595:         {",
          "",
          "[Removed Lines]",
          "1583:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1572:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1601:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1605:         (yyval.re_node)->start = 0;",
          "1606:         (yyval.re_node)->end = INT_MAX;",
          "1607:       }",
          "1609:     break;",
          "1611:   case 17:",
          "1613:     {",
          "1614:           (yyval.re_node) = (yyvsp[0].re_node);",
          "1615:       }",
          "1617:     break;",
          "1619:   case 18:",
          "1621:     {",
          "1622:         mark_as_not_fast_regexp();",
          "1629:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "1635:       }",
          "1637:     break;",
          "1639:   case 19:",
          "1641:     {",
          "1642:         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "1646:         (yyval.re_node)->value = (int) (yyvsp[0].integer);",
          "1647:       }",
          "1649:     break;",
          "1651:   case 20:",
          "1653:     {",
          "1654:         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);",
          "",
          "[Removed Lines]",
          "1603:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1624:         fail_if_too_many_ast_levels({",
          "1625:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1626:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1627:         });",
          "1631:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1632:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1634:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1644:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1592:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1612:         incr_ast_levels();",
          "1616:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1617:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1619:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1629:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1657:         {",
          "1658:           (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "1661:         }",
          "1662:         else",
          "1663:         {",
          "1664:           (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);",
          "1668:           (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;",
          "1669:           (yyval.re_node)->mask = mask;",
          "1670:         }",
          "1671:       }",
          "1673:     break;",
          "1677:       default: break;",
          "1678:     }",
          "",
          "[Removed Lines]",
          "1660:           fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1666:           fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1645:           ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1651:           ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.h||libyara/hex_grammar.h": [
          "File: libyara/hex_grammar.h -> libyara/hex_grammar.h"
        ],
        "libyara/hex_grammar.y||libyara/hex_grammar.y": [
          "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #define mark_as_not_fast_regexp() \\",
          "52:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "55:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "56:     { \\",
          "58:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "59:       YYABORT; \\",
          "60:     }",
          "63:     if (x) \\",
          "64:     { \\",
          "65:       lex_env->last_error_code = error; \\",
          "66:       YYABORT; \\",
          "67:     } \\",
          "70:     if (x) \\",
          "71:     { \\",
          "72:       yr_re_node_destroy(node); \\",
          "",
          "[Removed Lines]",
          "54: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "57:       { cleanup_code } \\",
          "62: #define fail_if(x, error) \\",
          "69: #define destroy_node_if(x, node) \\",
          "",
          "[Added Lines]",
          "54: #define incr_ast_levels() \\",
          "61: #define ERROR_IF(x, error) \\",
          "68: #define DESTROY_NODE_IF(x, node) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: %}",
          "78: %pure-parser",
          "80: %parse-param {void *yyscanner}",
          "",
          "[Removed Lines]",
          "77: %name-prefix \"hex_yy\"",
          "",
          "[Added Lines]",
          "76: %name-prefix=\"hex_yy\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99: %type <re_node> alternatives",
          "100: %type <re_node> range",
          "110: %%",
          "",
          "[Removed Lines]",
          "102: %destructor { yr_re_node_destroy($$); $$ = NULL; } tokens",
          "103: %destructor { yr_re_node_destroy($$); $$ = NULL; } token_sequence",
          "104: %destructor { yr_re_node_destroy($$); $$ = NULL; } token_or_range",
          "105: %destructor { yr_re_node_destroy($$); $$ = NULL; } token",
          "106: %destructor { yr_re_node_destroy($$); $$ = NULL; } byte",
          "107: %destructor { yr_re_node_destroy($$); $$ = NULL; } alternatives",
          "108: %destructor { yr_re_node_destroy($$); $$ = NULL; } range",
          "",
          "[Added Lines]",
          "101: %destructor { yr_re_node_destroy($$); } tokens",
          "102: %destructor { yr_re_node_destroy($$); } token_sequence",
          "103: %destructor { yr_re_node_destroy($$); } token_or_range",
          "104: %destructor { yr_re_node_destroy($$); } token",
          "105: %destructor { yr_re_node_destroy($$); } byte",
          "106: %destructor { yr_re_node_destroy($$); } alternatives",
          "107: %destructor { yr_re_node_destroy($$); } range",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:       }",
          "126:     | token token",
          "127:       {",
          "133:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "139:       }",
          "140:     | token token_sequence token",
          "141:       {",
          "",
          "[Removed Lines]",
          "128:         fail_if_too_many_ast_levels({",
          "129:           yr_re_node_destroy($1);",
          "130:           yr_re_node_destroy($2);",
          "131:         });",
          "135:         destroy_node_if($$ == NULL, $1);",
          "136:         destroy_node_if($$ == NULL, $2);",
          "138:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "127:         incr_ast_levels();",
          "131:         DESTROY_NODE_IF($$ == NULL, $1);",
          "132:         DESTROY_NODE_IF($$ == NULL, $2);",
          "134:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:         RE_NODE* leftmost_concat = NULL;",
          "144:         RE_NODE* leftmost_node = $2;",
          "152:         $$ = NULL;",
          "",
          "[Removed Lines]",
          "146:         fail_if_too_many_ast_levels({",
          "147:           yr_re_node_destroy($1);",
          "148:           yr_re_node_destroy($2);",
          "149:           yr_re_node_destroy($3);",
          "150:         });",
          "",
          "[Added Lines]",
          "142:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:           }",
          "196:         }",
          "203:       }",
          "204:     ;",
          "",
          "[Removed Lines]",
          "198:         destroy_node_if($$ == NULL, $1);",
          "199:         destroy_node_if($$ == NULL, $2);",
          "200:         destroy_node_if($$ == NULL, $3);",
          "202:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "190:         DESTROY_NODE_IF($$ == NULL, $1);",
          "191:         DESTROY_NODE_IF($$ == NULL, $2);",
          "192:         DESTROY_NODE_IF($$ == NULL, $3);",
          "194:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:       }",
          "212:     | token_sequence token_or_range",
          "213:       {",
          "219:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "225:       }",
          "226:     ;",
          "",
          "[Removed Lines]",
          "214:         fail_if_too_many_ast_levels({",
          "215:           yr_re_node_destroy($1);",
          "216:           yr_re_node_destroy($2);",
          "217:         });",
          "221:         destroy_node_if($$ == NULL, $1);",
          "222:         destroy_node_if($$ == NULL, $2);",
          "224:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "206:         incr_ast_levels();",
          "210:         DESTROY_NODE_IF($$ == NULL, $1);",
          "211:         DESTROY_NODE_IF($$ == NULL, $2);",
          "213:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "276:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "280:         $$->start = (int) $2;",
          "281:         $$->end = (int) $2;",
          "",
          "[Removed Lines]",
          "278:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "267:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "312:         $$->start = (int) $2;",
          "313:         $$->end = (int) $4;",
          "",
          "[Removed Lines]",
          "310:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "299:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "330:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "334:         $$->start = (int) $2;",
          "335:         $$->end = INT_MAX;",
          "",
          "[Removed Lines]",
          "332:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "321:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "346:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "350:         $$->start = 0;",
          "351:         $$->end = INT_MAX;",
          "",
          "[Removed Lines]",
          "348:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "337:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "361:     | alternatives '|' tokens",
          "362:       {",
          "363:         mark_as_not_fast_regexp();",
          "370:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
          "376:       }",
          "377:     ;",
          "",
          "[Removed Lines]",
          "365:         fail_if_too_many_ast_levels({",
          "366:           yr_re_node_destroy($1);",
          "367:           yr_re_node_destroy($3);",
          "368:         });",
          "372:         destroy_node_if($$ == NULL, $1);",
          "373:         destroy_node_if($$ == NULL, $3);",
          "375:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "353:         incr_ast_levels();",
          "357:         DESTROY_NODE_IF($$ == NULL, $1);",
          "358:         DESTROY_NODE_IF($$ == NULL, $3);",
          "360:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "381:       {",
          "382:         $$ = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "386:         $$->value = (int) $1;",
          "387:       }",
          "",
          "[Removed Lines]",
          "384:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "369:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "393:         {",
          "394:           $$ = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "397:         }",
          "398:         else",
          "399:         {",
          "400:           $$ = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);",
          "404:           $$->value = $1 & 0xFF;",
          "405:           $$->mask = mask;",
          "",
          "[Removed Lines]",
          "396:           fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "402:           fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "381:           ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "387:           ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------"
        ],
        "libyara/include/yara/macho.h||libyara/include/yara/macho.h": [
          "File: libyara/include/yara/macho.h -> libyara/include/yara/macho.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright (c) 2014. The YARA Authors. All Rights Reserved.",
          "4: Redistribution and use in source and binary forms, with or without modification,",
          "5: are permitted provided that the following conditions are met:",
          "7: 1. Redistributions of source code must retain the above copyright notice, this",
          "8: list of conditions and the following disclaimer.",
          "10: 2. Redistributions in binary form must reproduce the above copyright notice,",
          "11: this list of conditions and the following disclaimer in the documentation and/or",
          "12: other materials provided with the distribution.",
          "14: 3. Neither the name of the copyright holder nor the names of its contributors",
          "15: may be used to endorse or promote products derived from this software without",
          "16: specific prior written permission.",
          "18: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
          "19: ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
          "20: WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",
          "21: DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR",
          "22: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",
          "23: (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
          "24: LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON",
          "25: ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
          "26: (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",
          "27: SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "30: #ifndef _MACHO_H",
          "31: #define _MACHO_H",
          "33: #include <yara/integers.h>",
          "37: #define MH_MAGIC     0xfeedface",
          "38: #define MH_CIGAM     0xcefaedfe",
          "39: #define MH_MAGIC_64  0xfeedfacf",
          "40: #define MH_CIGAM_64  0xcffaedfe",
          "44: #define FAT_MAGIC     0xcafebabe",
          "45: #define FAT_CIGAM     0xbebafeca",
          "46: #define FAT_MAGIC_64  0xcafebabf",
          "47: #define FAT_CIGAM_64  0xbfbafeca",
          "51: #define CPU_ARCH_ABI64     0x01000000  // 64-bit ABI mask (for cputype)",
          "52: #define CPU_SUBTYPE_LIB64  0x80000000  // 64-bit library mask (for cpusubtype)",
          "56: #define CPU_TYPE_MC680X0    0x00000006  // Motorola 68000",
          "57: #define CPU_TYPE_I386       0x00000007  // AMD/Intel x86",
          "58: #define CPU_TYPE_X86        0x00000007  // AMD/Intel x86",
          "59: #define CPU_TYPE_X86_64     0x01000007  // AMD/Intel x86-64",
          "60: #define CPU_TYPE_MIPS       0x00000008  // MIPS",
          "61: #define CPU_TYPE_MC98000    0x0000000a  // Motorola PowerPC",
          "62: #define CPU_TYPE_HPPA       0x0000000b  // HP PA-RISC",
          "63: #define CPU_TYPE_ARM        0x0000000c  // ARM",
          "64: #define CPU_TYPE_ARM64      0x0100000c  // ARM 64-bit",
          "65: #define CPU_TYPE_MC88000    0x0000000d  // Motorola 88000",
          "66: #define CPU_TYPE_SPARC      0x0000000e  // SPARC",
          "67: #define CPU_TYPE_I860       0x0000000f  // Intel i860",
          "68: #define CPU_TYPE_ALPHA      0x00000010  // DEC Alpha",
          "69: #define CPU_TYPE_POWERPC    0x00000012  // PowerPC",
          "70: #define CPU_TYPE_POWERPC64  0x01000012  // PowerPC 64-bit",
          "74: #define CPU_SUBTYPE_INTEL_MODEL_ALL  0x00",
          "75: #define CPU_SUBTYPE_386              0x03",
          "76: #define CPU_SUBTYPE_486              0x04",
          "77: #define CPU_SUBTYPE_486SX            0x84",
          "78: #define CPU_SUBTYPE_586              0x05",
          "79: #define CPU_SUBTYPE_PENT             0x05",
          "80: #define CPU_SUBTYPE_PENTPRO          0x16",
          "81: #define CPU_SUBTYPE_PENTII_M3        0x36",
          "82: #define CPU_SUBTYPE_PENTII_M5        0x56",
          "83: #define CPU_SUBTYPE_CELERON          0x67",
          "84: #define CPU_SUBTYPE_CELERON_MOBILE   0x77",
          "85: #define CPU_SUBTYPE_PENTIUM_3        0x08",
          "86: #define CPU_SUBTYPE_PENTIUM_3_M      0x18",
          "87: #define CPU_SUBTYPE_PENTIUM_3_XEON   0x28",
          "88: #define CPU_SUBTYPE_PENTIUM_M        0x09",
          "89: #define CPU_SUBTYPE_PENTIUM_4        0x0a",
          "90: #define CPU_SUBTYPE_PENTIUM_4_M      0x1a",
          "91: #define CPU_SUBTYPE_ITANIUM          0x0b",
          "92: #define CPU_SUBTYPE_ITANIUM_2        0x1b",
          "93: #define CPU_SUBTYPE_XEON             0x0c",
          "94: #define CPU_SUBTYPE_XEON_MP          0x1c",
          "98: #define CPU_SUBTYPE_ARM_ALL          0x00",
          "99: #define CPU_SUBTYPE_ARM_V4T          0x05",
          "100: #define CPU_SUBTYPE_ARM_V6           0x06",
          "101: #define CPU_SUBTYPE_ARM_V5           0x07",
          "102: #define CPU_SUBTYPE_ARM_V5TEJ        0x07",
          "103: #define CPU_SUBTYPE_ARM_XSCALE       0x08",
          "104: #define CPU_SUBTYPE_ARM_V7           0x09",
          "105: #define CPU_SUBTYPE_ARM_V7F          0x0a",
          "106: #define CPU_SUBTYPE_ARM_V7S          0x0b",
          "107: #define CPU_SUBTYPE_ARM_V7K          0x0c",
          "108: #define CPU_SUBTYPE_ARM_V6M          0x0e",
          "109: #define CPU_SUBTYPE_ARM_V7M          0x0f",
          "110: #define CPU_SUBTYPE_ARM_V7EM         0x10",
          "114: #define CPU_SUBTYPE_ARM64_ALL        0x00",
          "118: #define CPU_SUBTYPE_SPARC_ALL        0x00",
          "122: #define CPU_SUBTYPE_POWERPC_ALL      0x00",
          "123: #define CPU_SUBTYPE_MC980000_ALL     0x00",
          "124: #define CPU_SUBTYPE_POWERPC_601      0x01",
          "125: #define CPU_SUBTYPE_MC98601          0x01",
          "126: #define CPU_SUBTYPE_POWERPC_602      0x02",
          "127: #define CPU_SUBTYPE_POWERPC_603      0x03",
          "128: #define CPU_SUBTYPE_POWERPC_603e     0x04",
          "129: #define CPU_SUBTYPE_POWERPC_603ev    0x05",
          "130: #define CPU_SUBTYPE_POWERPC_604      0x06",
          "131: #define CPU_SUBTYPE_POWERPC_604e     0x07",
          "132: #define CPU_SUBTYPE_POWERPC_620      0x08",
          "133: #define CPU_SUBTYPE_POWERPC_750      0x09",
          "134: #define CPU_SUBTYPE_POWERPC_7400     0x0a",
          "135: #define CPU_SUBTYPE_POWERPC_7450     0x0b",
          "136: #define CPU_SUBTYPE_POWERPC_970      0x64",
          "140: #define MH_OBJECT       0x01  // Object file",
          "141: #define MH_EXECUTE      0x02  // Executable file",
          "142: #define MH_FVMLIB       0x03  // Fixed VM shared library",
          "143: #define MH_CORE         0x04  // Core dump file",
          "144: #define MH_PRELOAD      0x05  // Preloaded executable file",
          "145: #define MH_DYLIB        0x06  // Dynamic shared library",
          "146: #define MH_DYLINKER     0x07  // Dynamic linker shared library",
          "147: #define MH_BUNDLE       0x08  // Bundle file",
          "148: #define MH_DYLIB_STUB   0x09  // Dynamic shared library stub",
          "149: #define MH_DSYM         0x0a  // Companion debug sections file",
          "150: #define MH_KEXT_BUNDLE  0x0b  // Kernel extension",
          "154: #define MH_NOUNDEFS                 0x00000001",
          "155: #define MH_INCRLINK                 0x00000002",
          "156: #define MH_DYLDLINK                 0x00000004",
          "157: #define MH_BINDATLOAD               0x00000008",
          "158: #define MH_PREBOUND                 0x00000010",
          "159: #define MH_SPLIT_SEGS               0x00000020",
          "160: #define MH_LAZY_INIT                0x00000040",
          "161: #define MH_TWOLEVEL                 0x00000080",
          "162: #define MH_FORCE_FLAT               0x00000100",
          "163: #define MH_NOMULTIDEFS              0x00000200",
          "164: #define MH_NOFIXPREBINDING          0x00000400",
          "165: #define MH_PREBINDABLE              0x00000800",
          "166: #define MH_ALLMODSBOUND             0x00001000",
          "167: #define MH_SUBSECTIONS_VIA_SYMBOLS  0x00002000",
          "168: #define MH_CANONICAL                0x00004000",
          "169: #define MH_WEAK_DEFINES             0x00008000",
          "170: #define MH_BINDS_TO_WEAK            0x00010000",
          "171: #define MH_ALLOW_STACK_EXECUTION    0x00020000",
          "172: #define MH_ROOT_SAFE                0x00040000",
          "173: #define MH_SETUID_SAFE              0x00080000",
          "174: #define MH_NO_REEXPORTED_DYLIBS     0x00100000",
          "175: #define MH_PIE                      0x00200000",
          "176: #define MH_DEAD_STRIPPABLE_DYLIB    0x00400000",
          "177: #define MH_HAS_TLV_DESCRIPTORS      0x00800000",
          "178: #define MH_NO_HEAP_EXECUTION        0x01000000",
          "179: #define MH_APP_EXTENSION_SAFE       0x02000000",
          "183: #define LC_SEGMENT                   0x00000001",
          "184: #define LC_SYMTAB                    0x00000002",
          "185: #define LC_SYMSEG                    0x00000003",
          "186: #define LC_THREAD                    0x00000004",
          "187: #define LC_UNIXTHREAD                0x00000005",
          "188: #define LC_LOADFVMLIB                0x00000006",
          "189: #define LC_IDFVMLIB                  0x00000007",
          "190: #define LC_IDENT                     0x00000008",
          "191: #define LC_FVMFILE                   0x00000009",
          "192: #define LC_PREPAGE                   0x0000000a",
          "193: #define LC_DYSYMTAB                  0x0000000b",
          "194: #define LC_LOAD_DYLIB                0x0000000c",
          "195: #define LC_ID_DYLIB                  0x0000000d",
          "196: #define LC_LOAD_DYLINKER             0x0000000e",
          "197: #define LC_ID_DYLINKER               0x0000000f",
          "198: #define LC_PREBOUND_DYLIB            0x00000010",
          "199: #define LC_ROUTINES                  0x00000011",
          "200: #define LC_SUB_FRAMEWORK             0x00000012",
          "201: #define LC_SUB_UMBRELLA              0x00000013",
          "202: #define LC_SUB_CLIENT                0x00000014",
          "203: #define LC_SUB_LIBRARY               0x00000015",
          "204: #define LC_TWOLEVEL_HINTS            0x00000016",
          "205: #define LC_PREBIND_CKSUM             0x00000017",
          "206: #define LC_LOAD_WEAK_DYLIB           0x80000018",
          "207: #define LC_SEGMENT_64                0x00000019",
          "208: #define LC_ROUTINES_64               0x0000001A",
          "209: #define LC_UUID                      0x0000001B",
          "210: #define LC_RPATH                     0x8000001C",
          "211: #define LC_CODE_SIGNATURE            0x0000001D",
          "212: #define LC_SEGMENT_SPLIT_INFO        0x0000001E",
          "213: #define LC_REEXPORT_DYLIB            0x8000001F",
          "214: #define LC_LAZY_LOAD_DYLIB           0x00000020",
          "215: #define LC_ENCRYPTION_INFO           0x00000021",
          "216: #define LC_DYLD_INFO                 0x00000022",
          "217: #define LC_DYLD_INFO_ONLY            0x80000022",
          "218: #define LC_LOAD_UPWARD_DYLIB         0x80000023",
          "219: #define LC_VERSION_MIN_MACOSX        0x00000024",
          "220: #define LC_VERSION_MIN_IPHONEOS      0x00000025",
          "221: #define LC_FUNCTION_STARTS           0x00000026",
          "222: #define LC_DYLD_ENVIRONMENT          0x00000027",
          "223: #define LC_MAIN                      0x80000028",
          "224: #define LC_DATA_IN_CODE              0x00000029",
          "225: #define LC_SOURCE_VERSION            0x0000002A",
          "226: #define LC_DYLIB_CODE_SIGN_DRS       0x0000002B",
          "227: #define LC_ENCRYPTION_INFO_64        0x0000002C",
          "228: #define LC_LINKER_OPTION             0x0000002D",
          "229: #define LC_LINKER_OPTIMIZATION_HINT  0x0000002E",
          "230: #define LC_VERSION_MIN_TVOS          0x0000002F",
          "231: #define LC_VERSION_MIN_WATCHOS       0x00000030",
          "235: #define SG_HIGHVM               0x00000001  // Use high part of VM (stack)",
          "236: #define SG_FVMLIB               0x00000002  // Allocated by a fixed VM library",
          "237: #define SG_NORELOC              0x00000004  // No associated relocations",
          "238: #define SG_PROTECTED_VERSION_1  0x00000008  // Segment is encryption protected",
          "242: #define SECTION_TYPE            0x000000ff  // Section type mask",
          "243: #define SECTION_ATTRIBUTES      0xffffff00  // Section attributes mask",
          "247: #define S_REGULAR                              0x00",
          "248: #define S_ZEROFILL                             0x01",
          "249: #define S_CSTRING_LITERALS                     0x02",
          "250: #define S_4BYTE_LITERALS                       0x03",
          "251: #define S_8BYTE_LITERALS                       0x04",
          "252: #define S_LITERAL_POINTERS                     0x05",
          "253: #define S_NON_LAZY_SYMBOL_POINTERS             0x06",
          "254: #define S_LAZY_SYMBOL_POINTERS                 0x07",
          "255: #define S_SYMBOL_STUBS                         0x08",
          "256: #define S_MOD_INIT_FUNC_POINTERS               0x09",
          "257: #define S_MOD_TERM_FUNC_POINTERS               0x0a",
          "258: #define S_COALESCED                            0x0b",
          "259: #define S_GB_ZEROFILL                          0x0c",
          "260: #define S_INTERPOSING                          0x0d",
          "261: #define S_16BYTE_LITERALS                      0x0e",
          "262: #define S_DTRACE_DOF                           0x0f",
          "263: #define S_LAZY_DYLIB_SYMBOL_POINTERS           0x10",
          "264: #define S_THREAD_LOCAL_REGULAR                 0x11",
          "265: #define S_THREAD_LOCAL_ZEROFILL                0x12",
          "266: #define S_THREAD_LOCAL_VARIABLES               0x13",
          "267: #define S_THREAD_LOCAL_VARIABLE_POINTERS       0x14",
          "268: #define S_THREAD_LOCAL_INIT_FUNCTION_POINTERS  0x15",
          "272: #define S_ATTR_PURE_INSTRUCTIONS    0x80000000  // Only pure instructions",
          "273: #define S_ATTR_NO_TOC               0x40000000  // Contains coalesced symbols",
          "274: #define S_ATTR_STRIP_STATIC_SYMS    0x20000000  // Can strip static symbols",
          "275: #define S_ATTR_NO_DEAD_STRIP        0x10000000  // No dead stripping",
          "276: #define S_ATTR_LIVE_SUPPORT         0x08000000  // Live blocks support",
          "277: #define S_ATTR_SELF_MODIFYING_CODE  0x04000000  // Self modifying code",
          "278: #define S_ATTR_DEBUG                0x02000000  // Debug section",
          "279: #define S_ATTR_SOME_INSTRUCTIONS    0x00000400  // Some machine instructions",
          "280: #define S_ATTR_EXT_RELOC            0x00000200  // Has external relocations",
          "281: #define S_ATTR_LOC_RELOC            0x00000100  // Has local relocations",
          "283: #pragma pack(push,1)",
          "285: typedef struct {",
          "286:   uint32_t magic;",
          "287:   uint32_t cputype;",
          "288:   uint32_t cpusubtype;",
          "289:   uint32_t filetype;",
          "290:   uint32_t ncmds;",
          "291:   uint32_t sizeofcmds;",
          "292:   uint32_t flags;",
          "293: } mach_header_32_t;",
          "296: typedef struct {",
          "297:   uint32_t magic;",
          "298:   uint32_t cputype;",
          "299:   uint32_t cpusubtype;",
          "300:   uint32_t filetype;",
          "301:   uint32_t ncmds;",
          "302:   uint32_t sizeofcmds;",
          "303:   uint32_t flags;",
          "304:   uint32_t reserved;",
          "305: } mach_header_64_t;",
          "308: typedef struct {",
          "309:   uint32_t cmd;",
          "310:   uint32_t cmdsize;",
          "311: } load_command_t;",
          "314: typedef struct {",
          "315:   uint32_t cmd;",
          "316:   uint32_t cmdsize;",
          "317:   char segname[16];",
          "318:   uint32_t vmaddr;",
          "319:   uint32_t vmsize;",
          "320:   uint32_t fileoff;",
          "321:   uint32_t filesize;",
          "322:   uint32_t maxprot;",
          "323:   uint32_t initprot;",
          "324:   uint32_t nsects;",
          "325:   uint32_t flags;",
          "326: } segment_command_32_t;",
          "329: typedef struct {",
          "330:   uint32_t cmd;",
          "331:   uint32_t cmdsize;",
          "332:   char segname[16];",
          "333:   uint64_t vmaddr;",
          "334:   uint64_t vmsize;",
          "335:   uint64_t fileoff;",
          "336:   uint64_t filesize;",
          "337:   uint32_t maxprot;",
          "338:   uint32_t initprot;",
          "339:   uint32_t nsects;",
          "340:   uint32_t flags;",
          "341: } segment_command_64_t;",
          "344: typedef struct {",
          "345:   char sectname[16];",
          "346:   char segname[16];",
          "347:   uint32_t addr;",
          "348:   uint32_t size;",
          "349:   uint32_t offset;",
          "350:   uint32_t align;",
          "351:   uint32_t reloff;",
          "352:   uint32_t nreloc;",
          "353:   uint32_t flags;",
          "354:   uint32_t reserved1;",
          "355:   uint32_t reserved2;",
          "356: } section_32_t;",
          "359: typedef struct {",
          "360:   char sectname[16];",
          "361:   char segname[16];",
          "362:   uint64_t addr;",
          "363:   uint64_t size;",
          "364:   uint32_t offset;",
          "365:   uint32_t align;",
          "366:   uint32_t reloff;",
          "367:   uint32_t nreloc;",
          "368:   uint32_t flags;",
          "369:   uint32_t reserved1;",
          "370:   uint32_t reserved2;",
          "371:   uint32_t reserved3;",
          "372: } section_64_t;",
          "375: typedef struct {",
          "376:   uint32_t cmd;",
          "377:   uint32_t cmdsize;",
          "378:   uint8_t uuid[16];",
          "379: } uuid_command_t;",
          "382: typedef struct {",
          "383:   uint32_t cmd;",
          "384:   uint32_t cmdsize;",
          "385:   uint64_t entryoff;",
          "386:   uint64_t stacksize;",
          "387: } entry_point_command_t;",
          "390: typedef struct {",
          "391:   uint32_t cmd;",
          "392:   uint32_t cmdsize;",
          "393:   uint32_t flavor;",
          "394:   uint32_t count;",
          "396: } thread_command_t;",
          "399: typedef struct {",
          "400:   uint32_t eax;",
          "401:   uint32_t ebx;",
          "402:   uint32_t ecx;",
          "403:   uint32_t edx;",
          "404:   uint32_t edi;",
          "405:   uint32_t esi;",
          "406:   uint32_t ebp;",
          "407:   uint32_t esp;",
          "408:   uint32_t ss;",
          "409:   uint32_t eflags;",
          "410:   uint32_t eip;",
          "411:   uint32_t cs;",
          "412:   uint32_t ds;",
          "413:   uint32_t es;",
          "414:   uint32_t fs;",
          "415:   uint32_t gs;",
          "416: } x86_thread_state_t;",
          "419: typedef struct {",
          "420:   uint32_t r[13];",
          "421:   uint32_t sp;",
          "422:   uint32_t lr;",
          "423:   uint32_t pc;",
          "424:   uint32_t cpsr;",
          "425: } arm_thread_state_t;",
          "428: typedef struct {",
          "429:   uint32_t srr0;",
          "430:   uint32_t srr1;",
          "431:   uint32_t r[32];",
          "432:   uint32_t cr;",
          "433:   uint32_t xer;",
          "434:   uint32_t lr;",
          "435:   uint32_t ctr;",
          "436:   uint32_t mq;",
          "437:   uint32_t vrsavead;",
          "438: } ppc_thread_state_t;",
          "441: typedef struct {",
          "442:   uint32_t psr;",
          "443:   uint32_t pc;",
          "444:   uint32_t npc;",
          "445:   uint32_t y;",
          "446:   uint32_t g1;",
          "447:   uint32_t g2;",
          "448:   uint32_t g3;",
          "449:   uint32_t g4;",
          "450:   uint32_t g5;",
          "451:   uint32_t g6;",
          "452:   uint32_t g7;",
          "453:   uint32_t o0;",
          "454:   uint32_t o1;",
          "455:   uint32_t o2;",
          "456:   uint32_t o3;",
          "457:   uint32_t o4;",
          "458:   uint32_t o5;",
          "459:   uint32_t o6;",
          "460:   uint32_t o7;",
          "461: } sparc_thread_state_t;",
          "464: typedef struct {",
          "465:   uint32_t dreg[8];",
          "466:   uint32_t areg[8];",
          "467:   uint16_t pad;",
          "468:   uint16_t sr;",
          "469:   uint32_t pc;",
          "470: } m68k_thread_state_t;",
          "473: typedef struct {",
          "474:   uint32_t r1;",
          "475:   uint32_t r2;",
          "476:   uint32_t r3;",
          "477:   uint32_t r4;",
          "478:   uint32_t r5;",
          "479:   uint32_t r6;",
          "480:   uint32_t r7;",
          "481:   uint32_t r8;",
          "482:   uint32_t r9;",
          "483:   uint32_t r10;",
          "484:   uint32_t r11;",
          "485:   uint32_t r12;",
          "486:   uint32_t r13;",
          "487:   uint32_t r14;",
          "488:   uint32_t r15;",
          "489:   uint32_t r16;",
          "490:   uint32_t r17;",
          "491:   uint32_t r18;",
          "492:   uint32_t r19;",
          "493:   uint32_t r20;",
          "494:   uint32_t r21;",
          "495:   uint32_t r22;",
          "496:   uint32_t r23;",
          "497:   uint32_t r24;",
          "498:   uint32_t r25;",
          "499:   uint32_t r26;",
          "500:   uint32_t r27;",
          "501:   uint32_t r28;",
          "502:   uint32_t r29;",
          "503:   uint32_t r30;",
          "504:   uint32_t r31;",
          "505:   uint32_t xip;",
          "506:   uint32_t xip_in_bd;",
          "507:   uint32_t nip;",
          "508: } m88k_thread_state_t;",
          "511: typedef struct {",
          "512:   uint64_t rax;",
          "513:   uint64_t rbx;",
          "514:   uint64_t rcx;",
          "515:   uint64_t rdx;",
          "516:   uint64_t rdi;",
          "517:   uint64_t rsi;",
          "518:   uint64_t rbp;",
          "519:   uint64_t rsp;",
          "520:   uint64_t r8;",
          "521:   uint64_t r9;",
          "522:   uint64_t r10;",
          "523:   uint64_t r11;",
          "524:   uint64_t r12;",
          "525:   uint64_t r13;",
          "526:   uint64_t r14;",
          "527:   uint64_t r15;",
          "528:   uint64_t rip;",
          "529:   uint64_t rflags;",
          "530:   uint64_t cs;",
          "531:   uint64_t fs;",
          "532:   uint64_t gs;",
          "533: } x86_thread_state64_t;",
          "536: typedef struct {",
          "537:   uint64_t r[29];",
          "538:   uint64_t fp;",
          "539:   uint64_t lr;",
          "540:   uint64_t sp;",
          "541:   uint64_t pc;",
          "542:   uint64_t cpsr;",
          "543: } arm_thread_state64_t;",
          "546: typedef struct {",
          "547:   uint64_t srr0;",
          "548:   uint64_t srr1;",
          "549:   uint64_t r[32];",
          "550:   uint32_t cr;",
          "551:   uint64_t xer;",
          "552:   uint64_t lr;",
          "553:   uint64_t ctr;",
          "554:   uint32_t vrsave;",
          "555: } ppc_thread_state64_t;",
          "558: typedef struct {",
          "559:   uint32_t magic;",
          "560:   uint32_t nfat_arch;",
          "561: } fat_header_t;",
          "564: typedef struct {",
          "565:   uint32_t cputype;",
          "566:   uint32_t cpusubtype;",
          "567:   uint32_t offset;",
          "568:   uint32_t size;",
          "569:   uint32_t align;",
          "570: } fat_arch_32_t;",
          "573: typedef struct {",
          "574:   uint32_t cputype;",
          "575:   uint32_t cpusubtype;",
          "576:   uint64_t offset;",
          "577:   uint64_t size;",
          "578:   uint32_t align;",
          "579:   uint32_t reserved;",
          "580: } fat_arch_64_t;",
          "582: #pragma pack(pop)",
          "584: #endif",
          "",
          "---------------"
        ],
        "libyara/modules/macho.c||libyara/modules/macho.c": [
          "File: libyara/modules/macho.c -> libyara/modules/macho.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeff/*",
          "2: Copyright (c) 2014. The YARA Authors. All Rights Reserved.",
          "4: Redistribution and use in source and binary forms, with or without modification,",
          "5: are permitted provided that the following conditions are met:",
          "7: 1. Redistributions of source code must retain the above copyright notice, this",
          "8: list of conditions and the following disclaimer.",
          "10: 2. Redistributions in binary form must reproduce the above copyright notice,",
          "11: this list of conditions and the following disclaimer in the documentation and/or",
          "12: other materials provided with the distribution.",
          "14: 3. Neither the name of the copyright holder nor the names of its contributors",
          "15: may be used to endorse or promote products derived from this software without",
          "16: specific prior written permission.",
          "18: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
          "19: ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
          "20: WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",
          "21: DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR",
          "22: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",
          "23: (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
          "24: LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON",
          "25: ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
          "26: (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",
          "27: SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "30: #include <yara/macho.h>",
          "31: #include <yara/endian.h>",
          "32: #include <yara/modules.h>",
          "33: #include <yara/mem.h>",
          "35: #define MODULE_NAME macho",
          "40: int is_macho_file_block(",
          "41:     const uint32_t* magic)",
          "42: {",
          "43:   return *magic == MH_MAGIC",
          "44:       || *magic == MH_CIGAM",
          "45:       || *magic == MH_MAGIC_64",
          "46:       || *magic == MH_CIGAM_64;",
          "47: }",
          "52: int macho_is_32(",
          "53:     const uint8_t* magic)",
          "54: {",
          "56:   return magic[0] == 0xce || magic[3] == 0xce;",
          "57: }",
          "62: int macho_is_big(",
          "63:     const uint8_t* magic)",
          "64: {",
          "66:   return magic[0] == 0xfe;",
          "67: }",
          "72: int is_fat_macho_file_block(",
          "73:     const uint32_t* magic)",
          "74: {",
          "75:   return *magic == FAT_MAGIC",
          "76:       || *magic == FAT_CIGAM",
          "77:       || *magic == FAT_MAGIC_64",
          "78:       || *magic == FAT_CIGAM_64;",
          "79: }",
          "84: int macho_fat_is_32(",
          "85:     const uint8_t* magic)",
          "86: {",
          "88:   return magic[3] == 0xbe;",
          "89: }",
          "94: int macho_rva_to_offset(",
          "95:     uint64_t address,",
          "96:     uint64_t* result,",
          "97:     YR_OBJECT* object)",
          "98: {",
          "99:   uint64_t segment_count = get_integer(object, \"number_of_segments\");",
          "100:   for (uint64_t i = 0; i < segment_count; i++)",
          "101:   {",
          "102:     uint64_t start = get_integer(object, \"segments[%i].vmaddr\", i);",
          "103:     uint64_t end = start + get_integer(object, \"segments[%i].vmsize\", i);",
          "105:     if (address >= start && address < end)",
          "106:     {",
          "107:       uint64_t fileoff = get_integer(object, \"segments[%i].fileoff\", i);",
          "109:       return TRUE;",
          "110:     }",
          "111:   }",
          "112:   return FALSE;",
          "113: }",
          "118: int macho_offset_to_rva(",
          "119:     uint64_t offset,",
          "120:     uint64_t* result,",
          "121:     YR_OBJECT* object)",
          "122: {",
          "123:   uint64_t segment_count = get_integer(object, \"number_of_segments\");",
          "124:   for (uint64_t i = 0; i < segment_count; i++)",
          "125:   {",
          "126:     uint64_t start = get_integer(object, \"segments[%i].fileoff\", i);",
          "127:     uint64_t end = start + get_integer(object, \"segments[%i].filesize\", i);",
          "129:     if (offset >= start && offset < end)",
          "130:     {",
          "131:       uint64_t vmaddr = get_integer(object, \"segments[%i].vmaddr\", i);",
          "133:       return TRUE;",
          "134:     }",
          "135:   }",
          "136:   return FALSE;",
          "137: }",
          "142: #define MACHO_HANDLE_UNIXTHREAD(bo)                                            \\",
          "143: void macho_handle_unixthread_##bo(                                             \\",
          "144:     void* command,                                                             \\",
          "145:     YR_OBJECT* object,                                                         \\",
          "146:     YR_SCAN_CONTEXT* context)                                                  \\",
          "147: {                                                                              \\",
          "148:   command = (void*)((uint8_t*)command + sizeof(thread_command_t));             \\",
          "149:   uint64_t address = 0;                                                        \\",
          "150:                                                                                \\",
          "151:   switch (get_integer(object, \"cputype\"))                                      \\",
          "152:   {                                                                            \\",
          "153:     case CPU_TYPE_MC680X0:                                                     \\",
          "154:     {                                                                          \\",
          "155:       m68k_thread_state_t* m68k_state = (m68k_thread_state_t*)command;         \\",
          "156:       address = yr_##bo##32toh(m68k_state->pc);                                \\",
          "157:       break;                                                                   \\",
          "158:     }                                                                          \\",
          "159:     case CPU_TYPE_MC88000:                                                     \\",
          "160:     {                                                                          \\",
          "161:       m88k_thread_state_t* m88k_state = (m88k_thread_state_t*)command;         \\",
          "162:       address = yr_##bo##32toh(m88k_state->xip);                               \\",
          "163:       break;                                                                   \\",
          "164:     }                                                                          \\",
          "165:     case CPU_TYPE_SPARC:                                                       \\",
          "166:     {                                                                          \\",
          "167:       sparc_thread_state_t* sparc_state = (sparc_thread_state_t*)command;      \\",
          "168:       address = yr_##bo##32toh(sparc_state->pc);                               \\",
          "169:       break;                                                                   \\",
          "170:     }                                                                          \\",
          "171:     case CPU_TYPE_POWERPC:                                                     \\",
          "172:     {                                                                          \\",
          "173:       ppc_thread_state_t* ppc_state = (ppc_thread_state_t*)command;            \\",
          "174:       address = yr_##bo##32toh(ppc_state->srr0);                               \\",
          "175:       break;                                                                   \\",
          "176:     }                                                                          \\",
          "177:     case CPU_TYPE_X86:                                                         \\",
          "178:     {                                                                          \\",
          "179:       x86_thread_state_t* x86_state = (x86_thread_state_t*)command;            \\",
          "180:       address = yr_##bo##32toh(x86_state->eip);                                \\",
          "181:       break;                                                                   \\",
          "182:     }                                                                          \\",
          "183:     case CPU_TYPE_ARM:                                                         \\",
          "184:     {                                                                          \\",
          "185:       arm_thread_state_t* arm_state = (arm_thread_state_t*)command;            \\",
          "186:       address = yr_##bo##32toh(arm_state->pc);                                 \\",
          "187:       break;                                                                   \\",
          "188:     }                                                                          \\",
          "189:     case CPU_TYPE_X86_64:                                                      \\",
          "190:     {                                                                          \\",
          "191:       x86_thread_state64_t* x64_state = (x86_thread_state64_t*)command;        \\",
          "192:       address = yr_##bo##64toh(x64_state->rip);                                \\",
          "193:       break;                                                                   \\",
          "194:     }                                                                          \\",
          "195:     case CPU_TYPE_ARM64:                                                       \\",
          "196:     {                                                                          \\",
          "197:       arm_thread_state64_t* arm64_state = (arm_thread_state64_t*)command;      \\",
          "198:       address = yr_##bo##64toh(arm64_state->pc);                               \\",
          "199:       break;                                                                   \\",
          "200:     }                                                                          \\",
          "201:     case CPU_TYPE_POWERPC64:                                                   \\",
          "202:     {                                                                          \\",
          "203:       ppc_thread_state64_t* ppc64_state = (ppc_thread_state64_t*)command;      \\",
          "204:       address = yr_##bo##64toh(ppc64_state->srr0);                             \\",
          "205:       break;                                                                   \\",
          "206:     }                                                                          \\",
          "207:                                                                                \\",
          "208:     default:                                                                   \\",
          "209:       return;                                                                  \\",
          "210:   }                                                                            \\",
          "211:                                                                                \\",
          "212:   if (context->flags & SCAN_FLAGS_PROCESS_MEMORY)                              \\",
          "213:   {                                                                            \\",
          "214:     set_integer(address, object, \"entry_point\");                               \\",
          "215:   }                                                                            \\",
          "216:   else                                                                         \\",
          "217:   {                                                                            \\",
          "218:     uint64_t offset = 0;                                                       \\",
          "219:     if (macho_rva_to_offset(address, &offset, object))                         \\",
          "220:     {                                                                          \\",
          "221:       set_integer(offset, object, \"entry_point\");                              \\",
          "222:     }                                                                          \\",
          "223:   }                                                                            \\",
          "224: }                                                                              \\",
          "226: MACHO_HANDLE_UNIXTHREAD(le)",
          "227: MACHO_HANDLE_UNIXTHREAD(be)",
          "232: #define MACHO_HANDLE_MAIN(bo)                                                  \\",
          "233: void macho_handle_main_##bo(                                                   \\",
          "234:     void* command,                                                             \\",
          "235:     YR_OBJECT* object,                                                         \\",
          "236:     YR_SCAN_CONTEXT* context)                                                  \\",
          "237: {                                                                              \\",
          "238:   entry_point_command_t* ep_command = (entry_point_command_t*)command;         \\",
          "239:                                                                                \\",
          "240:   uint64_t offset = yr_##bo##64toh(ep_command->entryoff);                      \\",
          "241:   if (context->flags & SCAN_FLAGS_PROCESS_MEMORY)                              \\",
          "242:   {                                                                            \\",
          "243:     uint64_t address = 0;                                                      \\",
          "244:     if (macho_offset_to_rva(offset, &address, object))                         \\",
          "245:     {                                                                          \\",
          "246:       set_integer(address, object, \"entry_point\");                             \\",
          "247:     }                                                                          \\",
          "248:   }                                                                            \\",
          "249:   else                                                                         \\",
          "250:   {                                                                            \\",
          "251:     set_integer(offset, object, \"entry_point\");                                \\",
          "252:   }                                                                            \\",
          "253:   set_integer(yr_##bo##64toh(ep_command->stacksize), object, \"stack_size\");    \\",
          "254: }                                                                              \\",
          "256: MACHO_HANDLE_MAIN(le)",
          "257: MACHO_HANDLE_MAIN(be)",
          "262: #define MACHO_HANDLE_SEGMENT(bits,bo)                                          \\",
          "263: void macho_handle_segment_##bits##_##bo(                                       \\",
          "264:     const uint8_t* command,                                                    \\",
          "265:     const uint32_t i,                                                          \\",
          "266:     YR_OBJECT* object)                                                         \\",
          "267: {                                                                              \\",
          "268:   segment_command_##bits##_t* sg = (segment_command_##bits##_t*)command;       \\",
          "269:   uint64_t command_size = yr_##bo##bits##toh(sg->cmdsize);                     \\",
          "270:                                                                                \\",
          "271:   set_sized_string(sg->segname, strnlen(sg->segname, 16),                      \\",
          "272:                    object, \"segments[%i].segname\", i);                         \\",
          "273:                                                                                \\",
          "274:   set_integer(yr_##bo##bits##toh(sg->vmaddr),                                  \\",
          "275:               object, \"segments[%i].vmaddr\", i);                               \\",
          "276:   set_integer(yr_##bo##bits##toh(sg->vmsize),                                  \\",
          "277:               object, \"segments[%i].vmsize\", i);                               \\",
          "278:   set_integer(yr_##bo##bits##toh(sg->fileoff),                                 \\",
          "279:               object, \"segments[%i].fileoff\", i);                              \\",
          "280:   set_integer(yr_##bo##bits##toh(sg->filesize),                                \\",
          "281:               object, \"segments[%i].fsize\", i);                                \\",
          "282:   set_integer(yr_##bo##32toh(sg->maxprot),                                     \\",
          "283:               object, \"segments[%i].maxprot\", i);                              \\",
          "284:   set_integer(yr_##bo##32toh(sg->initprot),                                    \\",
          "285:               object, \"segments[%i].initprot\", i);                             \\",
          "286:   set_integer(yr_##bo##32toh(sg->nsects),                                      \\",
          "287:               object, \"segments[%i].nsects\", i);                               \\",
          "288:   set_integer(yr_##bo##32toh(sg->flags),                                       \\",
          "289:               object, \"segments[%i].flags\", i);                                \\",
          "290:                                                                                \\",
          "291:   uint64_t parsed_size = sizeof(segment_command_##bits##_t);                   \\",
          "292:   for (unsigned j = 0; j < yr_##bo##32toh(sg->nsects); ++j)                    \\",
          "293:   {                                                                            \\",
          "294:     parsed_size += sizeof(section_##bits##_t);                                 \\",
          "295:     if (command_size < parsed_size)                                            \\",
          "296:       break;                                                                   \\",
          "297:                                                                                \\",
          "298:     section_##bits##_t* sec = ((section_##bits##_t*)(sg + 1)) + j;             \\",
          "299:     set_sized_string(sec->segname, strnlen(sec->segname, 16),                  \\",
          "300:                      object, \"segments[%i].sections[%i].segname\", i, j);       \\",
          "301:     set_sized_string(sec->sectname, strnlen(sec->sectname, 16),                \\",
          "302:                      object, \"segments[%i].sections[%i].sectname\", i, j);      \\",
          "303:                                                                                \\",
          "304:     set_integer(yr_##bo##bits##toh(sec->addr),                                 \\",
          "305:                 object, \"segments[%i].sections[%i].addr\", i, j);               \\",
          "306:     set_integer(yr_##bo##bits##toh(sec->size),                                 \\",
          "307:                 object, \"segments[%i].sections[%i].size\", i, j);               \\",
          "308:     set_integer(yr_##bo##32toh(sec->offset),                                   \\",
          "309:                 object, \"segments[%i].sections[%i].offset\", i, j);             \\",
          "310:     set_integer(yr_##bo##32toh(sec->align),                                    \\",
          "311:                 object, \"segments[%i].sections[%i].align\", i, j);              \\",
          "312:     set_integer(yr_##bo##32toh(sec->reloff),                                   \\",
          "313:                 object, \"segments[%i].sections[%i].reloff\", i, j);             \\",
          "314:     set_integer(yr_##bo##32toh(sec->nreloc),                                   \\",
          "315:                 object, \"segments[%i].sections[%i].nreloc\", i, j);             \\",
          "316:     set_integer(yr_##bo##32toh(sec->flags),                                    \\",
          "317:                 object, \"segments[%i].sections[%i].flags\", i, j);              \\",
          "318:     set_integer(yr_##bo##32toh(sec->reserved1),                                \\",
          "319:                 object, \"segments[%i].sections[%i].reserved1\", i, j);          \\",
          "320:     set_integer(yr_##bo##32toh(sec->reserved2),                                \\",
          "321:                 object, \"segments[%i].sections[%i].reserved2\", i, j);          \\",
          "322:     if (bits == 64)                                                            \\",
          "323:     {                                                                          \\",
          "324:       section_64_t* sec_64 = (section_64_t*)sec;                               \\",
          "325:       set_integer(yr_##bo##32toh(sec_64->reserved3),                           \\",
          "326:                   object, \"segments[%i].sections[%i].reserved3\", i, j);        \\",
          "327:     }                                                                          \\",
          "328:   }                                                                            \\",
          "329: }                                                                              \\",
          "331: MACHO_HANDLE_SEGMENT(32,le)",
          "332: MACHO_HANDLE_SEGMENT(64,le)",
          "333: MACHO_HANDLE_SEGMENT(32,be)",
          "334: MACHO_HANDLE_SEGMENT(64,be)",
          "339: #define MACHO_PARSE_FILE(bits,bo)                                              \\",
          "340: void macho_parse_file_##bits##_##bo(                                           \\",
          "341:     const uint8_t* data,                                                       \\",
          "342:     const uint64_t size,                                                       \\",
          "343:     YR_OBJECT* object,                                                         \\",
          "344:     YR_SCAN_CONTEXT* context)                                                  \\",
          "345: {                                                                              \\",
          "346:   if (size < sizeof(mach_header_##bits##_t))                                   \\",
          "347:     return;                                                                    \\",
          "348:                                                                                \\",
          "349:   mach_header_##bits##_t* header = (mach_header_##bits##_t*)data;              \\",
          "350:   set_integer(yr_##bo##32toh(header->magic), object, \"magic\");                 \\",
          "351:   set_integer(yr_##bo##32toh(header->cputype), object, \"cputype\");             \\",
          "352:   set_integer(yr_##bo##32toh(header->cpusubtype), object, \"cpusubtype\");       \\",
          "353:   set_integer(yr_##bo##32toh(header->filetype), object, \"filetype\");           \\",
          "354:   set_integer(yr_##bo##32toh(header->ncmds), object, \"ncmds\");                 \\",
          "355:   set_integer(yr_##bo##32toh(header->sizeofcmds), object, \"sizeofcmds\");       \\",
          "356:   set_integer(yr_##bo##32toh(header->flags), object, \"flags\");                 \\",
          "357:   if (bits == 64)                                                              \\",
          "358:   {                                                                            \\",
          "359:     mach_header_64_t* header_64 = (mach_header_64_t*)data;                     \\",
          "360:     set_integer(yr_##bo##32toh(header_64->reserved), object, \"reserved\");      \\",
          "361:   }                                                                            \\",
          "362:                                                                                \\",
          "363:   uint64_t seg_count = 0;                                                      \\",
          "364:   uint64_t parsed_size = sizeof(mach_header_##bits##_t);                       \\",
          "365:                                                                                \\",
          "366:   uint8_t *command = (uint8_t*)(header + 1);                                   \\",
          "367:   for (unsigned i = 0; i < yr_##bo##32toh(header->ncmds); i++)                 \\",
          "368:   {                                                                            \\",
          "369:     load_command_t* command_struct = (load_command_t*)command;                 \\",
          "370:     uint64_t command_size = yr_##bo##32toh(command_struct->cmdsize);           \\",
          "371:                                                                                \\",
          "372:     if (size < parsed_size + command_size)                                     \\",
          "373:       break;                                                                   \\",
          "374:                                                                                \\",
          "375:     switch(yr_##bo##32toh(command_struct->cmd))                                \\",
          "376:     {                                                                          \\",
          "377:       case LC_SEGMENT:                                                         \\",
          "378:       case LC_SEGMENT_64:                                                      \\",
          "379:       {                                                                        \\",
          "380:         macho_handle_segment_##bits##_##bo(command, seg_count++, object);      \\",
          "381:         break;                                                                 \\",
          "382:       }                                                                        \\",
          "383:       case LC_UNIXTHREAD:                                                      \\",
          "384:       {                                                                        \\",
          "385:         macho_handle_unixthread_##bo(command, object, context);                \\",
          "386:         break;                                                                 \\",
          "387:       }                                                                        \\",
          "388:       case LC_MAIN:                                                            \\",
          "389:       {                                                                        \\",
          "390:         macho_handle_main_##bo(command, object, context);                      \\",
          "391:         break;                                                                 \\",
          "392:       }                                                                        \\",
          "393:     }                                                                          \\",
          "394:                                                                                \\",
          "395:     command += command_size;                                                   \\",
          "396:     parsed_size += command_size;                                               \\",
          "397:   }                                                                            \\",
          "398:                                                                                \\",
          "399:   set_integer(seg_count, object, \"number_of_segments\");                        \\",
          "400: }                                                                              \\",
          "402: MACHO_PARSE_FILE(32,le)",
          "403: MACHO_PARSE_FILE(64,le)",
          "404: MACHO_PARSE_FILE(32,be)",
          "405: MACHO_PARSE_FILE(64,be)",
          "410: void macho_parse_file(",
          "411:     const uint8_t* data,",
          "412:     const uint64_t size,",
          "413:     YR_OBJECT* object,",
          "414:     YR_SCAN_CONTEXT* context)",
          "415: {",
          "416:   if (macho_is_32(data))",
          "417:   {",
          "418:     if (macho_is_big(data)) {",
          "420:       macho_parse_file_32_be(data, size, object, context);",
          "421:     }",
          "422:     else {",
          "424:       macho_parse_file_32_le(data, size, object, context);",
          "425:     }",
          "426:   }",
          "427:   else",
          "428:   {",
          "429:     if (macho_is_big(data)) {",
          "431:       macho_parse_file_64_be(data, size, object, context);",
          "432:     }",
          "433:     else {",
          "435:       macho_parse_file_64_le(data, size, object, context);",
          "436:     }",
          "437:   }",
          "438: }",
          "443: #define MACHO_PARSE_FAT_FILE(bits)                                             \\",
          "444: void macho_parse_fat_file_##bits(                                              \\",
          "445:     const uint8_t* data,                                                       \\",
          "446:     const uint64_t size,                                                       \\",
          "447:     YR_OBJECT* object,                                                         \\",
          "448:     YR_SCAN_CONTEXT* context)                                                  \\",
          "449: {                                                                              \\",
          "450:   if (size < sizeof(fat_header_t))                                             \\",
          "451:     return;                                                                    \\",
          "452:                                                                                \\",
          "454:                                                                                \\",
          "455:   const fat_header_t* header = (fat_header_t*)data;                            \\",
          "456:   set_integer(yr_be32toh(header->magic), object, \"fat_magic\");                 \\",
          "457:                                                                                \\",
          "458:   uint32_t count = yr_be32toh(header->nfat_arch);                              \\",
          "459:   set_integer(count, object, \"nfat_arch\");                                     \\",
          "460:                                                                                \\",
          "461:   if (size < sizeof(fat_header_t) + count * sizeof(fat_arch_##bits##_t))       \\",
          "462:     return;                                                                    \\",
          "463:                                                                                \\",
          "464:   fat_arch_##bits##_t* archs = (fat_arch_##bits##_t*)(header + 1);             \\",
          "465:   for (uint32_t i = 0; i < count; i++)                                         \\",
          "466:   {                                                                            \\",
          "467:     set_integer(yr_be32toh(archs[i].cputype),                                  \\",
          "468:                 object, \"fat_arch[%i].cputype\", i);                            \\",
          "469:     set_integer(yr_be32toh(archs[i].cpusubtype),                               \\",
          "470:                 object, \"fat_arch[%i].cpusubtype\", i);                         \\",
          "471:                                                                                \\",
          "472:     uint64_t offset = yr_be##bits##toh(archs[i].offset);                       \\",
          "473:     set_integer(offset, object, \"fat_arch[%i].offset\", i);                     \\",
          "474:     uint64_t file_size = yr_be##bits##toh(archs[i].size);                      \\",
          "475:     set_integer(file_size, object, \"fat_arch[%i].size\", i);                    \\",
          "476:                                                                                \\",
          "477:     set_integer(yr_be32toh(archs[i].align),                                    \\",
          "478:                 object, \"fat_arch[%i].align\", i);                              \\",
          "479:                                                                                \\",
          "480:     if (size < offset + file_size)                                             \\",
          "481:         continue;                                                              \\",
          "482:                                                                                \\",
          "484:     set_integer(UNDEFINED, object, \"file[%i].magic\", i);                       \\",
          "485:                                                                                \\",
          "487:     macho_parse_file(data + offset, file_size,                                 \\",
          "488:                      get_object(object, \"file[%i]\", i), context);              \\",
          "489:   }                                                                            \\",
          "490: }                                                                              \\",
          "492: MACHO_PARSE_FAT_FILE(32)",
          "493: MACHO_PARSE_FAT_FILE(64)",
          "498: void macho_parse_fat_file(",
          "499:     const uint8_t* data,",
          "500:     const uint64_t size,",
          "501:     YR_OBJECT* object,",
          "502:     YR_SCAN_CONTEXT* context)",
          "503: {",
          "504:   if (macho_fat_is_32(data)) {",
          "506:     macho_parse_fat_file_32(data, size, object, context);",
          "507:   }",
          "508:   else {",
          "510:     macho_parse_fat_file_64(data, size, object, context);",
          "511:   }",
          "512: }",
          "517: void macho_set_definitions(",
          "518:     YR_OBJECT* object)",
          "519: {",
          "522:   set_integer(MH_MAGIC, object, \"MH_MAGIC\");",
          "523:   set_integer(MH_CIGAM, object, \"MH_CIGAM\");",
          "524:   set_integer(MH_MAGIC_64, object, \"MH_MAGIC_64\");",
          "525:   set_integer(MH_CIGAM_64, object, \"MH_CIGAM_64\");",
          "529:   set_integer(FAT_MAGIC, object, \"FAT_MAGIC\");",
          "530:   set_integer(FAT_CIGAM, object, \"FAT_CIGAM\");",
          "531:   set_integer(FAT_MAGIC_64, object, \"FAT_MAGIC_64\");",
          "532:   set_integer(FAT_CIGAM_64, object, \"FAT_CIGAM_64\");",
          "536:   set_integer(CPU_ARCH_ABI64, object, \"CPU_ARCH_ABI64\");",
          "537:   set_integer(CPU_SUBTYPE_LIB64, object, \"CPU_SUBTYPE_LIB64\");",
          "541:   set_integer(CPU_TYPE_MC680X0, object, \"CPU_TYPE_MC680X0\");",
          "542:   set_integer(CPU_TYPE_X86, object, \"CPU_TYPE_X86\");",
          "543:   set_integer(CPU_TYPE_X86, object, \"CPU_TYPE_I386\");",
          "544:   set_integer(CPU_TYPE_X86_64, object, \"CPU_TYPE_X86_64\");",
          "545:   set_integer(CPU_TYPE_MIPS, object, \"CPU_TYPE_MIPS\");",
          "546:   set_integer(CPU_TYPE_MC98000, object, \"CPU_TYPE_MC98000\");",
          "547:   set_integer(CPU_TYPE_ARM, object, \"CPU_TYPE_ARM\");",
          "548:   set_integer(CPU_TYPE_ARM64, object, \"CPU_TYPE_ARM64\");",
          "549:   set_integer(CPU_TYPE_MC88000, object, \"CPU_TYPE_MC88000\");",
          "550:   set_integer(CPU_TYPE_SPARC, object, \"CPU_TYPE_SPARC\");",
          "551:   set_integer(CPU_TYPE_POWERPC, object, \"CPU_TYPE_POWERPC\");",
          "552:   set_integer(CPU_TYPE_POWERPC64, object, \"CPU_TYPE_POWERPC64\");",
          "556:   set_integer(CPU_SUBTYPE_INTEL_MODEL_ALL, object,",
          "557:               \"CPU_SUBTYPE_INTEL_MODEL_ALL\");",
          "558:   set_integer(CPU_SUBTYPE_386, object,\"CPU_SUBTYPE_386\");",
          "559:   set_integer(CPU_SUBTYPE_386, object,\"CPU_SUBTYPE_I386_ALL\");",
          "560:   set_integer(CPU_SUBTYPE_386, object,\"CPU_SUBTYPE_X86_64_ALL\");",
          "561:   set_integer(CPU_SUBTYPE_486, object, \"CPU_SUBTYPE_486\");",
          "562:   set_integer(CPU_SUBTYPE_486SX, object, \"CPU_SUBTYPE_486SX\");",
          "563:   set_integer(CPU_SUBTYPE_586, object, \"CPU_SUBTYPE_586\");",
          "564:   set_integer(CPU_SUBTYPE_PENT, object, \"CPU_SUBTYPE_PENT\");",
          "565:   set_integer(CPU_SUBTYPE_PENTPRO, object, \"CPU_SUBTYPE_PENTPRO\");",
          "566:   set_integer(CPU_SUBTYPE_PENTII_M3, object, \"CPU_SUBTYPE_PENTII_M3\");",
          "567:   set_integer(CPU_SUBTYPE_PENTII_M5, object, \"CPU_SUBTYPE_PENTII_M5\");",
          "568:   set_integer(CPU_SUBTYPE_CELERON, object, \"CPU_SUBTYPE_CELERON\");",
          "569:   set_integer(CPU_SUBTYPE_CELERON_MOBILE, object,",
          "570:               \"CPU_SUBTYPE_CELERON_MOBILE\");",
          "571:   set_integer(CPU_SUBTYPE_PENTIUM_3, object, \"CPU_SUBTYPE_PENTIUM_3\");",
          "572:   set_integer(CPU_SUBTYPE_PENTIUM_3_M, object, \"CPU_SUBTYPE_PENTIUM_3_M\");",
          "573:   set_integer(CPU_SUBTYPE_PENTIUM_3_XEON, object,",
          "574:               \"CPU_SUBTYPE_PENTIUM_3_XEON\");",
          "575:   set_integer(CPU_SUBTYPE_PENTIUM_M, object, \"CPU_SUBTYPE_PENTIUM_M\");",
          "576:   set_integer(CPU_SUBTYPE_PENTIUM_4, object, \"CPU_SUBTYPE_PENTIUM_4\");",
          "577:   set_integer(CPU_SUBTYPE_PENTIUM_4_M, object, \"CPU_SUBTYPE_PENTIUM_4_M\");",
          "578:   set_integer(CPU_SUBTYPE_ITANIUM, object, \"CPU_SUBTYPE_ITANIUM\");",
          "579:   set_integer(CPU_SUBTYPE_ITANIUM_2, object, \"CPU_SUBTYPE_ITANIUM_2\");",
          "580:   set_integer(CPU_SUBTYPE_XEON, object, \"CPU_SUBTYPE_XEON\");",
          "581:   set_integer(CPU_SUBTYPE_XEON_MP, object, \"CPU_SUBTYPE_XEON_MP\");",
          "582:   set_integer(CPU_SUBTYPE_ARM_ALL, object, \"CPU_SUBTYPE_ARM_ALL\");",
          "583:   set_integer(CPU_SUBTYPE_ARM_V4T, object, \"CPU_SUBTYPE_ARM_V4T\");",
          "584:   set_integer(CPU_SUBTYPE_ARM_V6, object, \"CPU_SUBTYPE_ARM_V6\");",
          "585:   set_integer(CPU_SUBTYPE_ARM_V5, object, \"CPU_SUBTYPE_ARM_V5\");",
          "586:   set_integer(CPU_SUBTYPE_ARM_V5TEJ, object, \"CPU_SUBTYPE_ARM_V5TEJ\");",
          "587:   set_integer(CPU_SUBTYPE_ARM_XSCALE, object, \"CPU_SUBTYPE_ARM_XSCALE\");",
          "588:   set_integer(CPU_SUBTYPE_ARM_V7, object, \"CPU_SUBTYPE_ARM_V7\");",
          "589:   set_integer(CPU_SUBTYPE_ARM_V7F, object, \"CPU_SUBTYPE_ARM_V7F\");",
          "590:   set_integer(CPU_SUBTYPE_ARM_V7S, object, \"CPU_SUBTYPE_ARM_V7S\");",
          "591:   set_integer(CPU_SUBTYPE_ARM_V7K, object, \"CPU_SUBTYPE_ARM_V7K\");",
          "592:   set_integer(CPU_SUBTYPE_ARM_V6M, object, \"CPU_SUBTYPE_ARM_V6M\");",
          "593:   set_integer(CPU_SUBTYPE_ARM_V7M, object, \"CPU_SUBTYPE_ARM_V7M\");",
          "594:   set_integer(CPU_SUBTYPE_ARM_V7EM, object, \"CPU_SUBTYPE_ARM_V7EM\");",
          "595:   set_integer(CPU_SUBTYPE_ARM64_ALL, object, \"CPU_SUBTYPE_ARM64_ALL\");",
          "596:   set_integer(CPU_SUBTYPE_SPARC_ALL, object, \"CPU_SUBTYPE_SPARC_ALL\");",
          "597:   set_integer(CPU_SUBTYPE_POWERPC_ALL, object, \"CPU_SUBTYPE_POWERPC_ALL\");",
          "598:   set_integer(CPU_SUBTYPE_MC980000_ALL, object, \"CPU_SUBTYPE_MC980000_ALL\");",
          "599:   set_integer(CPU_SUBTYPE_POWERPC_601, object, \"CPU_SUBTYPE_POWERPC_601\");",
          "600:   set_integer(CPU_SUBTYPE_MC98601, object, \"CPU_SUBTYPE_MC98601\");",
          "601:   set_integer(CPU_SUBTYPE_POWERPC_602, object, \"CPU_SUBTYPE_POWERPC_602\");",
          "602:   set_integer(CPU_SUBTYPE_POWERPC_603, object, \"CPU_SUBTYPE_POWERPC_603\");",
          "603:   set_integer(CPU_SUBTYPE_POWERPC_603e, object, \"CPU_SUBTYPE_POWERPC_603e\");",
          "604:   set_integer(CPU_SUBTYPE_POWERPC_603ev, object, \"CPU_SUBTYPE_POWERPC_603ev\");",
          "605:   set_integer(CPU_SUBTYPE_POWERPC_604, object, \"CPU_SUBTYPE_POWERPC_604\");",
          "606:   set_integer(CPU_SUBTYPE_POWERPC_604e, object, \"CPU_SUBTYPE_POWERPC_604e\");",
          "607:   set_integer(CPU_SUBTYPE_POWERPC_620, object, \"CPU_SUBTYPE_POWERPC_620\");",
          "608:   set_integer(CPU_SUBTYPE_POWERPC_750, object, \"CPU_SUBTYPE_POWERPC_750\");",
          "609:   set_integer(CPU_SUBTYPE_POWERPC_7400, object, \"CPU_SUBTYPE_POWERPC_7400\");",
          "610:   set_integer(CPU_SUBTYPE_POWERPC_7450, object, \"CPU_SUBTYPE_POWERPC_7450\");",
          "611:   set_integer(CPU_SUBTYPE_POWERPC_970, object, \"CPU_SUBTYPE_POWERPC_970\");",
          "615:   set_integer(MH_OBJECT, object, \"MH_OBJECT\");",
          "616:   set_integer(MH_EXECUTE, object, \"MH_EXECUTE\");",
          "617:   set_integer(MH_FVMLIB, object, \"MH_FVMLIB\");",
          "618:   set_integer(MH_CORE, object, \"MH_CORE\");",
          "619:   set_integer(MH_PRELOAD, object, \"MH_PRELOAD\");",
          "620:   set_integer(MH_DYLIB, object, \"MH_DYLIB\");",
          "621:   set_integer(MH_DYLINKER, object, \"MH_DYLINKER\");",
          "622:   set_integer(MH_BUNDLE, object, \"MH_BUNDLE\");",
          "623:   set_integer(MH_DYLIB_STUB, object, \"MH_DYLIB_STUB\");",
          "624:   set_integer(MH_DSYM, object, \"MH_DSYM\");",
          "625:   set_integer(MH_KEXT_BUNDLE, object, \"MH_KEXT_BUNDLE\");",
          "629:   set_integer(MH_NOUNDEFS, object, \"MH_NOUNDEFS\");",
          "630:   set_integer(MH_INCRLINK, object, \"MH_INCRLINK\");",
          "631:   set_integer(MH_DYLDLINK, object, \"MH_DYLDLINK\");",
          "632:   set_integer(MH_BINDATLOAD, object, \"MH_BINDATLOAD\");",
          "633:   set_integer(MH_PREBOUND, object, \"MH_PREBOUND\");",
          "634:   set_integer(MH_SPLIT_SEGS, object, \"MH_SPLIT_SEGS\");",
          "635:   set_integer(MH_LAZY_INIT, object, \"MH_LAZY_INIT\");",
          "636:   set_integer(MH_TWOLEVEL, object, \"MH_TWOLEVEL\");",
          "637:   set_integer(MH_FORCE_FLAT, object, \"MH_FORCE_FLAT\");",
          "638:   set_integer(MH_NOMULTIDEFS, object, \"MH_NOMULTIDEFS\");",
          "639:   set_integer(MH_NOFIXPREBINDING, object, \"MH_NOFIXPREBINDING\");",
          "640:   set_integer(MH_PREBINDABLE, object, \"MH_PREBINDABLE\");",
          "641:   set_integer(MH_ALLMODSBOUND, object, \"MH_ALLMODSBOUND\");",
          "642:   set_integer(MH_SUBSECTIONS_VIA_SYMBOLS, object,",
          "643:               \"MH_SUBSECTIONS_VIA_SYMBOLS\");",
          "644:   set_integer(MH_CANONICAL, object, \"MH_CANONICAL\");",
          "645:   set_integer(MH_WEAK_DEFINES, object, \"MH_WEAK_DEFINES\");",
          "646:   set_integer(MH_BINDS_TO_WEAK, object, \"MH_BINDS_TO_WEAK\");",
          "647:   set_integer(MH_ALLOW_STACK_EXECUTION, object, \"MH_ALLOW_STACK_EXECUTION\");",
          "648:   set_integer(MH_ROOT_SAFE, object, \"MH_ROOT_SAFE\");",
          "649:   set_integer(MH_SETUID_SAFE, object, \"MH_SETUID_SAFE\");",
          "650:   set_integer(MH_NO_REEXPORTED_DYLIBS, object, \"MH_NO_REEXPORTED_DYLIBS\");",
          "651:   set_integer(MH_PIE, object, \"MH_PIE\");",
          "652:   set_integer(MH_DEAD_STRIPPABLE_DYLIB, object, \"MH_DEAD_STRIPPABLE_DYLIB\");",
          "653:   set_integer(MH_HAS_TLV_DESCRIPTORS, object, \"MH_HAS_TLV_DESCRIPTORS\");",
          "654:   set_integer(MH_NO_HEAP_EXECUTION, object, \"MH_NO_HEAP_EXECUTION\");",
          "655:   set_integer(MH_APP_EXTENSION_SAFE, object, \"MH_APP_EXTENSION_SAFE\");",
          "659:   set_integer(SG_HIGHVM, object, \"SG_HIGHVM\");",
          "660:   set_integer(SG_FVMLIB, object, \"SG_FVMLIB\");",
          "661:   set_integer(SG_NORELOC, object, \"SG_NORELOC\");",
          "662:   set_integer(SG_PROTECTED_VERSION_1, object, \"SG_PROTECTED_VERSION_1\");",
          "666:   set_integer(SECTION_TYPE, object, \"SECTION_TYPE\");",
          "667:   set_integer(SECTION_ATTRIBUTES, object, \"SECTION_ATTRIBUTES\");",
          "671:   set_integer(S_REGULAR, object, \"S_REGULAR\");",
          "672:   set_integer(S_ZEROFILL, object, \"S_ZEROFILL\");",
          "673:   set_integer(S_CSTRING_LITERALS, object, \"S_CSTRING_LITERALS\");",
          "674:   set_integer(S_4BYTE_LITERALS, object, \"S_4BYTE_LITERALS\");",
          "675:   set_integer(S_8BYTE_LITERALS, object, \"S_8BYTE_LITERALS\");",
          "676:   set_integer(S_NON_LAZY_SYMBOL_POINTERS, object,",
          "677:               \"S_NON_LAZY_SYMBOL_POINTERS\");",
          "678:   set_integer(S_LAZY_SYMBOL_POINTERS, object, \"S_LAZY_SYMBOL_POINTERS\");",
          "679:   set_integer(S_LITERAL_POINTERS, object, \"S_LITERAL_POINTERS\");",
          "680:   set_integer(S_SYMBOL_STUBS, object, \"S_SYMBOL_STUBS\");",
          "681:   set_integer(S_MOD_INIT_FUNC_POINTERS, object, \"S_MOD_INIT_FUNC_POINTERS\");",
          "682:   set_integer(S_MOD_TERM_FUNC_POINTERS, object, \"S_MOD_TERM_FUNC_POINTERS\");",
          "683:   set_integer(S_COALESCED, object, \"S_COALESCED\");",
          "684:   set_integer(S_GB_ZEROFILL, object, \"S_GB_ZEROFILL\");",
          "685:   set_integer(S_INTERPOSING, object, \"S_INTERPOSING\");",
          "686:   set_integer(S_16BYTE_LITERALS, object, \"S_16BYTE_LITERALS\");",
          "687:   set_integer(S_DTRACE_DOF, object, \"S_DTRACE_DOF\");",
          "688:   set_integer(S_LAZY_DYLIB_SYMBOL_POINTERS, object,",
          "689:               \"S_LAZY_DYLIB_SYMBOL_POINTERS\");",
          "690:   set_integer(S_THREAD_LOCAL_REGULAR, object, \"S_THREAD_LOCAL_REGULAR\");",
          "691:   set_integer(S_THREAD_LOCAL_ZEROFILL, object, \"S_THREAD_LOCAL_ZEROFILL\");",
          "692:   set_integer(S_THREAD_LOCAL_VARIABLES, object, \"S_THREAD_LOCAL_VARIABLES\");",
          "693:   set_integer(S_THREAD_LOCAL_VARIABLE_POINTERS, object,",
          "694:               \"S_THREAD_LOCAL_VARIABLE_POINTERS\");",
          "695:   set_integer(S_THREAD_LOCAL_INIT_FUNCTION_POINTERS, object,",
          "696:               \"S_THREAD_LOCAL_INIT_FUNCTION_POINTERS\");",
          "700:   set_integer(S_ATTR_PURE_INSTRUCTIONS, object, \"S_ATTR_PURE_INSTRUCTIONS\");",
          "701:   set_integer(S_ATTR_NO_TOC, object, \"S_ATTR_NO_TOC\");",
          "702:   set_integer(S_ATTR_STRIP_STATIC_SYMS, object, \"S_ATTR_STRIP_STATIC_SYMS\");",
          "703:   set_integer(S_ATTR_NO_DEAD_STRIP, object, \"S_ATTR_NO_DEAD_STRIP\");",
          "704:   set_integer(S_ATTR_LIVE_SUPPORT, object, \"S_ATTR_LIVE_SUPPORT\");",
          "705:   set_integer(S_ATTR_SELF_MODIFYING_CODE, object,",
          "706:               \"S_ATTR_SELF_MODIFYING_CODE\");",
          "707:   set_integer(S_ATTR_DEBUG, object, \"S_ATTR_DEBUG\");",
          "708:   set_integer(S_ATTR_SOME_INSTRUCTIONS, object, \"S_ATTR_SOME_INSTRUCTIONS\");",
          "709:   set_integer(S_ATTR_EXT_RELOC, object, \"S_ATTR_EXT_RELOC\");",
          "710:   set_integer(S_ATTR_LOC_RELOC, object, \"S_ATTR_LOC_RELOC\");",
          "711: }",
          "716: define_function(file_index_type)",
          "717: {",
          "718:   YR_OBJECT* module = module();",
          "719:   int64_t type_arg = integer_argument(1);",
          "721:   uint32_t nfat = get_integer(module, \"nfat_arch\");",
          "722:   if (is_undefined(module, \"nfat_arch\"))",
          "723:     return_integer(UNDEFINED);",
          "725:   for (uint32_t i = 0; i < nfat; i++)",
          "726:   {",
          "727:     int64_t type = get_integer(module, \"file[%i].cputype\", i);",
          "728:     if (type == type_arg)",
          "729:     {",
          "730:       return_integer(i);",
          "731:     }",
          "732:   }",
          "733:   return_integer(UNDEFINED);",
          "734: }",
          "739: define_function(file_index_subtype)",
          "740: {",
          "741:   YR_OBJECT* module = module();",
          "742:   int64_t type_arg = integer_argument(1);",
          "743:   int64_t subtype_arg = integer_argument(2);",
          "745:   uint32_t nfat = get_integer(module, \"nfat_arch\");",
          "746:   if (is_undefined(module, \"nfat_arch\"))",
          "747:     return_integer(UNDEFINED);",
          "749:   for (uint32_t i = 0; i < nfat; i++)",
          "750:   {",
          "751:     int64_t type = get_integer(module, \"file[%i].cputype\", i);",
          "752:     int64_t subtype = get_integer(module, \"file[%i].cpusubtype\", i);",
          "754:     if (type == type_arg && subtype == subtype_arg)",
          "755:     {",
          "756:       return_integer(i);",
          "757:     }",
          "758:   }",
          "759:   return_integer(UNDEFINED);",
          "760: }",
          "765: define_function(ep_for_arch_type)",
          "766: {",
          "767:   YR_OBJECT* module = module();",
          "768:   int64_t type_arg = integer_argument(1);",
          "770:   uint32_t nfat = get_integer(module, \"nfat_arch\");",
          "771:   if (is_undefined(module, \"nfat_arch\"))",
          "772:     return_integer(UNDEFINED);",
          "774:   for (uint32_t i = 0; i < nfat; i++)",
          "775:   {",
          "776:     int64_t type = get_integer(module, \"fat_arch[%i].cputype\", i);",
          "777:     if (type == type_arg)",
          "778:     {",
          "779:       uint64_t file_offset = get_integer(module, \"fat_arch[%i].offset\", i);",
          "780:       uint64_t entry_point = get_integer(module, \"file[%i].entry_point\", i);",
          "781:       return_integer(file_offset + entry_point);",
          "782:     }",
          "783:   }",
          "784:   return_integer(UNDEFINED);",
          "785: }",
          "790: define_function(ep_for_arch_subtype)",
          "791: {",
          "792:   YR_OBJECT* module = module();",
          "793:   int64_t type_arg = integer_argument(1);",
          "794:   int64_t subtype_arg = integer_argument(2);",
          "796:   uint32_t nfat = get_integer(module, \"nfat_arch\");",
          "797:   if (is_undefined(module, \"nfat_arch\"))",
          "798:     return_integer(UNDEFINED);",
          "800:   for (uint32_t i = 0; i < nfat; i++)",
          "801:   {",
          "802:     int64_t type = get_integer(module, \"fat_arch[%i].cputype\", i);",
          "803:     int64_t subtype = get_integer(module, \"fat_arch[%i].cpusubtype\", i);",
          "804:     if (type == type_arg && subtype == subtype_arg)",
          "805:     {",
          "806:       uint64_t file_offset = get_integer(module, \"fat_arch[%i].offset\", i);",
          "807:       uint64_t entry_point = get_integer(module, \"file[%i].entry_point\", i);",
          "808:       return_integer(file_offset + entry_point);",
          "809:     }",
          "810:   }",
          "811:   return_integer(UNDEFINED);",
          "812: }",
          "815: begin_declarations;",
          "819:   declare_integer(\"MH_MAGIC\");",
          "820:   declare_integer(\"MH_CIGAM\");",
          "821:   declare_integer(\"MH_MAGIC_64\");",
          "822:   declare_integer(\"MH_CIGAM_64\");",
          "826:   declare_integer(\"FAT_MAGIC\");",
          "827:   declare_integer(\"FAT_CIGAM\");",
          "828:   declare_integer(\"FAT_MAGIC_64\");",
          "829:   declare_integer(\"FAT_CIGAM_64\");",
          "833:   declare_integer(\"CPU_ARCH_ABI64\");",
          "834:   declare_integer(\"CPU_SUBTYPE_LIB64\");",
          "838:   declare_integer(\"CPU_TYPE_MC680X0\");",
          "839:   declare_integer(\"CPU_TYPE_X86\");",
          "840:   declare_integer(\"CPU_TYPE_I386\");",
          "841:   declare_integer(\"CPU_TYPE_X86_64\");",
          "842:   declare_integer(\"CPU_TYPE_MIPS\");",
          "843:   declare_integer(\"CPU_TYPE_MC98000\");",
          "844:   declare_integer(\"CPU_TYPE_ARM\");",
          "845:   declare_integer(\"CPU_TYPE_ARM64\");",
          "846:   declare_integer(\"CPU_TYPE_MC88000\");",
          "847:   declare_integer(\"CPU_TYPE_SPARC\");",
          "848:   declare_integer(\"CPU_TYPE_POWERPC\");",
          "849:   declare_integer(\"CPU_TYPE_POWERPC64\");",
          "853:   declare_integer(\"CPU_SUBTYPE_INTEL_MODEL_ALL\");",
          "854:   declare_integer(\"CPU_SUBTYPE_386\");",
          "855:   declare_integer(\"CPU_SUBTYPE_I386_ALL\");",
          "856:   declare_integer(\"CPU_SUBTYPE_X86_64_ALL\");",
          "857:   declare_integer(\"CPU_SUBTYPE_486\");",
          "858:   declare_integer(\"CPU_SUBTYPE_486SX\");",
          "859:   declare_integer(\"CPU_SUBTYPE_586\");",
          "860:   declare_integer(\"CPU_SUBTYPE_PENT\");",
          "861:   declare_integer(\"CPU_SUBTYPE_PENTPRO\");",
          "862:   declare_integer(\"CPU_SUBTYPE_PENTII_M3\");",
          "863:   declare_integer(\"CPU_SUBTYPE_PENTII_M5\");",
          "864:   declare_integer(\"CPU_SUBTYPE_CELERON\");",
          "865:   declare_integer(\"CPU_SUBTYPE_CELERON_MOBILE\");",
          "866:   declare_integer(\"CPU_SUBTYPE_PENTIUM_3\");",
          "867:   declare_integer(\"CPU_SUBTYPE_PENTIUM_3_M\");",
          "868:   declare_integer(\"CPU_SUBTYPE_PENTIUM_3_XEON\");",
          "869:   declare_integer(\"CPU_SUBTYPE_PENTIUM_M\");",
          "870:   declare_integer(\"CPU_SUBTYPE_PENTIUM_4\");",
          "871:   declare_integer(\"CPU_SUBTYPE_PENTIUM_4_M\");",
          "872:   declare_integer(\"CPU_SUBTYPE_ITANIUM\");",
          "873:   declare_integer(\"CPU_SUBTYPE_ITANIUM_2\");",
          "874:   declare_integer(\"CPU_SUBTYPE_XEON\");",
          "875:   declare_integer(\"CPU_SUBTYPE_XEON_MP\");",
          "876:   declare_integer(\"CPU_SUBTYPE_ARM_ALL\");",
          "877:   declare_integer(\"CPU_SUBTYPE_ARM_V4T\");",
          "878:   declare_integer(\"CPU_SUBTYPE_ARM_V6\");",
          "879:   declare_integer(\"CPU_SUBTYPE_ARM_V5\");",
          "880:   declare_integer(\"CPU_SUBTYPE_ARM_V5TEJ\");",
          "881:   declare_integer(\"CPU_SUBTYPE_ARM_XSCALE\");",
          "882:   declare_integer(\"CPU_SUBTYPE_ARM_V7\");",
          "883:   declare_integer(\"CPU_SUBTYPE_ARM_V7F\");",
          "884:   declare_integer(\"CPU_SUBTYPE_ARM_V7S\");",
          "885:   declare_integer(\"CPU_SUBTYPE_ARM_V7K\");",
          "886:   declare_integer(\"CPU_SUBTYPE_ARM_V6M\");",
          "887:   declare_integer(\"CPU_SUBTYPE_ARM_V7M\");",
          "888:   declare_integer(\"CPU_SUBTYPE_ARM_V7EM\");",
          "889:   declare_integer(\"CPU_SUBTYPE_ARM64_ALL\");",
          "890:   declare_integer(\"CPU_SUBTYPE_SPARC_ALL\");",
          "891:   declare_integer(\"CPU_SUBTYPE_POWERPC_ALL\");",
          "892:   declare_integer(\"CPU_SUBTYPE_MC980000_ALL\");",
          "893:   declare_integer(\"CPU_SUBTYPE_POWERPC_601\");",
          "894:   declare_integer(\"CPU_SUBTYPE_MC98601\");",
          "895:   declare_integer(\"CPU_SUBTYPE_POWERPC_602\");",
          "896:   declare_integer(\"CPU_SUBTYPE_POWERPC_603\");",
          "897:   declare_integer(\"CPU_SUBTYPE_POWERPC_603e\");",
          "898:   declare_integer(\"CPU_SUBTYPE_POWERPC_603ev\");",
          "899:   declare_integer(\"CPU_SUBTYPE_POWERPC_604\");",
          "900:   declare_integer(\"CPU_SUBTYPE_POWERPC_604e\");",
          "901:   declare_integer(\"CPU_SUBTYPE_POWERPC_620\");",
          "902:   declare_integer(\"CPU_SUBTYPE_POWERPC_750\");",
          "903:   declare_integer(\"CPU_SUBTYPE_POWERPC_7400\");",
          "904:   declare_integer(\"CPU_SUBTYPE_POWERPC_7450\");",
          "905:   declare_integer(\"CPU_SUBTYPE_POWERPC_970\");",
          "909:   declare_integer(\"MH_OBJECT\");",
          "910:   declare_integer(\"MH_EXECUTE\");",
          "911:   declare_integer(\"MH_FVMLIB\");",
          "912:   declare_integer(\"MH_CORE\");",
          "913:   declare_integer(\"MH_PRELOAD\");",
          "914:   declare_integer(\"MH_DYLIB\");",
          "915:   declare_integer(\"MH_DYLINKER\");",
          "916:   declare_integer(\"MH_BUNDLE\");",
          "917:   declare_integer(\"MH_DYLIB_STUB\");",
          "918:   declare_integer(\"MH_DSYM\");",
          "919:   declare_integer(\"MH_KEXT_BUNDLE\");",
          "923:   declare_integer(\"MH_NOUNDEFS\");",
          "924:   declare_integer(\"MH_INCRLINK\");",
          "925:   declare_integer(\"MH_DYLDLINK\");",
          "926:   declare_integer(\"MH_BINDATLOAD\");",
          "927:   declare_integer(\"MH_PREBOUND\");",
          "928:   declare_integer(\"MH_SPLIT_SEGS\");",
          "929:   declare_integer(\"MH_LAZY_INIT\");",
          "930:   declare_integer(\"MH_TWOLEVEL\");",
          "931:   declare_integer(\"MH_FORCE_FLAT\");",
          "932:   declare_integer(\"MH_NOMULTIDEFS\");",
          "933:   declare_integer(\"MH_NOFIXPREBINDING\");",
          "934:   declare_integer(\"MH_PREBINDABLE\");",
          "935:   declare_integer(\"MH_ALLMODSBOUND\");",
          "936:   declare_integer(\"MH_SUBSECTIONS_VIA_SYMBOLS\");",
          "937:   declare_integer(\"MH_CANONICAL\");",
          "938:   declare_integer(\"MH_WEAK_DEFINES\");",
          "939:   declare_integer(\"MH_BINDS_TO_WEAK\");",
          "940:   declare_integer(\"MH_ALLOW_STACK_EXECUTION\");",
          "941:   declare_integer(\"MH_ROOT_SAFE\");",
          "942:   declare_integer(\"MH_SETUID_SAFE\");",
          "943:   declare_integer(\"MH_NO_REEXPORTED_DYLIBS\");",
          "944:   declare_integer(\"MH_PIE\");",
          "945:   declare_integer(\"MH_DEAD_STRIPPABLE_DYLIB\");",
          "946:   declare_integer(\"MH_HAS_TLV_DESCRIPTORS\");",
          "947:   declare_integer(\"MH_NO_HEAP_EXECUTION\");",
          "948:   declare_integer(\"MH_APP_EXTENSION_SAFE\");",
          "952:   declare_integer(\"SG_HIGHVM\");",
          "953:   declare_integer(\"SG_FVMLIB\");",
          "954:   declare_integer(\"SG_NORELOC\");",
          "955:   declare_integer(\"SG_PROTECTED_VERSION_1\");",
          "959:   declare_integer(\"SECTION_TYPE\");",
          "960:   declare_integer(\"SECTION_ATTRIBUTES\");",
          "964:   declare_integer(\"S_REGULAR\");",
          "965:   declare_integer(\"S_ZEROFILL\");",
          "966:   declare_integer(\"S_CSTRING_LITERALS\");",
          "967:   declare_integer(\"S_4BYTE_LITERALS\");",
          "968:   declare_integer(\"S_8BYTE_LITERALS\");",
          "969:   declare_integer(\"S_LITERAL_POINTERS\");",
          "970:   declare_integer(\"S_NON_LAZY_SYMBOL_POINTERS\");",
          "971:   declare_integer(\"S_LAZY_SYMBOL_POINTERS\");",
          "972:   declare_integer(\"S_SYMBOL_STUBS\");",
          "973:   declare_integer(\"S_MOD_INIT_FUNC_POINTERS\");",
          "974:   declare_integer(\"S_MOD_TERM_FUNC_POINTERS\");",
          "975:   declare_integer(\"S_COALESCED\");",
          "976:   declare_integer(\"S_GB_ZEROFILL\");",
          "977:   declare_integer(\"S_INTERPOSING\");",
          "978:   declare_integer(\"S_16BYTE_LITERALS\");",
          "979:   declare_integer(\"S_DTRACE_DOF\");",
          "980:   declare_integer(\"S_LAZY_DYLIB_SYMBOL_POINTERS\");",
          "981:   declare_integer(\"S_THREAD_LOCAL_REGULAR\");",
          "982:   declare_integer(\"S_THREAD_LOCAL_ZEROFILL\");",
          "983:   declare_integer(\"S_THREAD_LOCAL_VARIABLES\");",
          "984:   declare_integer(\"S_THREAD_LOCAL_VARIABLE_POINTERS\");",
          "985:   declare_integer(\"S_THREAD_LOCAL_INIT_FUNCTION_POINTERS\");",
          "989:   declare_integer(\"S_ATTR_PURE_INSTRUCTIONS\");",
          "990:   declare_integer(\"S_ATTR_NO_TOC\");",
          "991:   declare_integer(\"S_ATTR_STRIP_STATIC_SYMS\");",
          "992:   declare_integer(\"S_ATTR_NO_DEAD_STRIP\");",
          "993:   declare_integer(\"S_ATTR_LIVE_SUPPORT\");",
          "994:   declare_integer(\"S_ATTR_SELF_MODIFYING_CODE\");",
          "995:   declare_integer(\"S_ATTR_DEBUG\");",
          "996:   declare_integer(\"S_ATTR_SOME_INSTRUCTIONS\");",
          "997:   declare_integer(\"S_ATTR_EXT_RELOC\");",
          "998:   declare_integer(\"S_ATTR_LOC_RELOC\");",
          "1002:   declare_integer(\"magic\");",
          "1003:   declare_integer(\"cputype\");",
          "1004:   declare_integer(\"cpusubtype\");",
          "1005:   declare_integer(\"filetype\");",
          "1006:   declare_integer(\"ncmds\");",
          "1007:   declare_integer(\"sizeofcmds\");",
          "1008:   declare_integer(\"flags\");",
          "1009:   declare_integer(\"reserved\");",
          "1013:   declare_integer(\"number_of_segments\");",
          "1015:   begin_struct_array(\"segments\");",
          "1016:     declare_string(\"segname\");",
          "1017:     declare_integer(\"vmaddr\");",
          "1018:     declare_integer(\"vmsize\");",
          "1019:     declare_integer(\"fileoff\");",
          "1020:     declare_integer(\"fsize\");",
          "1021:     declare_integer(\"maxprot\");",
          "1022:     declare_integer(\"initprot\");",
          "1023:     declare_integer(\"nsects\");",
          "1024:     declare_integer(\"flags\");",
          "1025:     begin_struct_array(\"sections\");",
          "1026:       declare_string(\"sectname\");",
          "1027:       declare_string(\"segname\");",
          "1028:       declare_integer(\"addr\");",
          "1029:       declare_integer(\"size\");",
          "1030:       declare_integer(\"offset\");",
          "1031:       declare_integer(\"align\");",
          "1032:       declare_integer(\"reloff\");",
          "1033:       declare_integer(\"nreloc\");",
          "1034:       declare_integer(\"flags\");",
          "1035:       declare_integer(\"reserved1\");",
          "1036:       declare_integer(\"reserved2\");",
          "1037:       declare_integer(\"reserved3\");",
          "1038:     end_struct_array(\"sections\");",
          "1039:   end_struct_array(\"segments\");",
          "1043:   declare_integer(\"entry_point\");",
          "1044:   declare_integer(\"stack_size\");",
          "1048:   declare_integer(\"fat_magic\");",
          "1049:   declare_integer(\"nfat_arch\");",
          "1051:   begin_struct_array(\"fat_arch\");",
          "1052:     declare_integer(\"cputype\");",
          "1053:     declare_integer(\"cpusubtype\");",
          "1054:     declare_integer(\"offset\");",
          "1055:     declare_integer(\"size\");",
          "1056:     declare_integer(\"align\");",
          "1057:   end_struct_array(\"fat_arch\");",
          "1061:   begin_struct_array(\"file\");",
          "1065:     declare_integer(\"magic\");",
          "1066:     declare_integer(\"cputype\");",
          "1067:     declare_integer(\"cpusubtype\");",
          "1068:     declare_integer(\"filetype\");",
          "1069:     declare_integer(\"ncmds\");",
          "1070:     declare_integer(\"sizeofcmds\");",
          "1071:     declare_integer(\"flags\");",
          "1072:     declare_integer(\"reserved\");",
          "1076:     declare_integer(\"number_of_segments\");",
          "1078:     begin_struct_array(\"segments\");",
          "1079:       declare_string(\"segname\");",
          "1080:       declare_integer(\"vmaddr\");",
          "1081:       declare_integer(\"vmsize\");",
          "1082:       declare_integer(\"fileoff\");",
          "1083:       declare_integer(\"fsize\");",
          "1084:       declare_integer(\"maxprot\");",
          "1085:       declare_integer(\"initprot\");",
          "1086:       declare_integer(\"nsects\");",
          "1087:       declare_integer(\"flags\");",
          "1088:       begin_struct_array(\"sections\");",
          "1089:         declare_string(\"sectname\");",
          "1090:         declare_string(\"segname\");",
          "1091:         declare_integer(\"addr\");",
          "1092:         declare_integer(\"size\");",
          "1093:         declare_integer(\"offset\");",
          "1094:         declare_integer(\"align\");",
          "1095:         declare_integer(\"reloff\");",
          "1096:         declare_integer(\"nreloc\");",
          "1097:         declare_integer(\"flags\");",
          "1098:         declare_integer(\"reserved1\");",
          "1099:         declare_integer(\"reserved2\");",
          "1100:         declare_integer(\"reserved3\");",
          "1101:       end_struct_array(\"sections\");",
          "1102:     end_struct_array(\"segments\");",
          "1106:     declare_integer(\"entry_point\");",
          "1107:     declare_integer(\"stack_size\");",
          "1109:   end_struct_array(\"file\");",
          "1113:   declare_function(\"file_index_for_arch\", \"i\", \"i\", file_index_type);",
          "1114:   declare_function(\"file_index_for_arch\", \"ii\", \"i\", file_index_subtype);",
          "1115:   declare_function(\"entry_point_for_arch\", \"i\", \"i\", ep_for_arch_type);",
          "1116:   declare_function(\"entry_point_for_arch\", \"ii\", \"i\", ep_for_arch_subtype);",
          "1118: end_declarations;",
          "1120: int module_initialize(",
          "1121:     YR_MODULE* module)",
          "1122: {",
          "1123:   return ERROR_SUCCESS;",
          "1124: }",
          "1126: int module_finalize(",
          "1127:     YR_MODULE* module)",
          "1128: {",
          "1129:   return ERROR_SUCCESS;",
          "1130: }",
          "1132: int module_load(",
          "1133:     YR_SCAN_CONTEXT* context,",
          "1134:     YR_OBJECT* module_object,",
          "1135:     void* module_data,",
          "1136:     size_t module_data_size)",
          "1137: {",
          "1138:   YR_MEMORY_BLOCK* block;",
          "1139:   YR_MEMORY_BLOCK_ITERATOR* iterator = context->iterator;",
          "1141:   foreach_memory_block(iterator, block)",
          "1142:   {",
          "1143:     const uint8_t* block_data = block->fetch_data(block);",
          "1144:     if (block_data == NULL || block->size < 4)",
          "1145:       continue;",
          "1148:     if (is_macho_file_block((uint32_t*)block_data))",
          "1149:     {",
          "1150:       macho_parse_file(block_data, block->size, module_object, context);",
          "1151:       break;",
          "1152:     }",
          "1155:     if (is_fat_macho_file_block((uint32_t*)block_data))",
          "1156:     {",
          "1157:       macho_parse_fat_file(block_data, block->size, module_object, context);",
          "1158:       break;",
          "1159:     }",
          "1160:   }",
          "1162:   macho_set_definitions(module_object);",
          "1163:   return ERROR_SUCCESS;",
          "1164: }",
          "1166: int module_unload(",
          "1167:     YR_OBJECT* module_object)",
          "1168: {",
          "1169:   return ERROR_SUCCESS;",
          "1170: }",
          "",
          "---------------"
        ],
        "tests/blob.h||tests/blob.h": [
          "File: tests/blob.h -> tests/blob.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2136:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2137:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00",
          "2138: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2142: uint8_t MACHO_X86_FILE[] = {",
          "2143:   0xce, 0xfa, 0xed, 0xfe, 0x07, 0x00, 0x00, 0x00,",
          "2144:   0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2145:   0x10, 0x00, 0x00, 0x00, 0x24, 0x04, 0x00, 0x00,",
          "2146:   0x85, 0x00, 0x20, 0x01, 0x01, 0x00, 0x00, 0x00,",
          "2147:   0x38, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x50, 0x41,",
          "2148:   0x47, 0x45, 0x5a, 0x45, 0x52, 0x4f, 0x00, 0x00,",
          "2149:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2150:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2151:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2152:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2153:   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2154:   0x8c, 0x01, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2155:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2156:   0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,",
          "2157:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2158:   0x00, 0x10, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,",
          "2159:   0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,",
          "2160:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x74, 0x65,",
          "2161:   0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2162:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2163:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2164:   0x00, 0x00, 0x00, 0x00, 0x90, 0x1e, 0x00, 0x00,",
          "2165:   0xa6, 0x00, 0x00, 0x00, 0x90, 0x0e, 0x00, 0x00,",
          "2166:   0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2167:   0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80,",
          "2168:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2169:   0x5f, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,",
          "2170:   0x5f, 0x73, 0x74, 0x75, 0x62, 0x00, 0x00, 0x00,",
          "2171:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2172:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2173:   0x36, 0x1f, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,",
          "2174:   0x36, 0x0f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2175:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2176:   0x08, 0x05, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,",
          "2177:   0x06, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x73, 0x74,",
          "2178:   0x75, 0x62, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65,",
          "2179:   0x72, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2180:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2181:   0x00, 0x00, 0x00, 0x00, 0x44, 0x1f, 0x00, 0x00,",
          "2182:   0x20, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x00, 0x00,",
          "2183:   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2184:   0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x80,",
          "2185:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2186:   0x5f, 0x5f, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6e,",
          "2187:   0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2188:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2189:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2190:   0x64, 0x1f, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,",
          "2191:   0x64, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2192:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2193:   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2194:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x75, 0x6e,",
          "2195:   0x77, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66,",
          "2196:   0x6f, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2197:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2198:   0x00, 0x00, 0x00, 0x00, 0xac, 0x1f, 0x00, 0x00,",
          "2199:   0x48, 0x00, 0x00, 0x00, 0xac, 0x0f, 0x00, 0x00,",
          "2200:   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2201:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2202:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2203:   0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,",
          "2204:   0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x00, 0x00,",
          "2205:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2206:   0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,",
          "2207:   0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,",
          "2208:   0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,",
          "2209:   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2210:   0x5f, 0x5f, 0x6e, 0x6c, 0x5f, 0x73, 0x79, 0x6d,",
          "2211:   0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x74, 0x72, 0x00,",
          "2212:   0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x00, 0x00,",
          "2213:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2214:   0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,",
          "2215:   0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2216:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2217:   0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2218:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x6c, 0x61,",
          "2219:   0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,",
          "2220:   0x70, 0x74, 0x72, 0x00, 0x5f, 0x5f, 0x44, 0x41,",
          "2221:   0x54, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2222:   0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00,",
          "2223:   0x08, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00,",
          "2224:   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2225:   0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,",
          "2226:   0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2227:   0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,",
          "2228:   0x5f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,",
          "2229:   0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2230:   0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,",
          "2231:   0x00, 0x20, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00,",
          "2232:   0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2233:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2234:   0x22, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00,",
          "2235:   0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2236:   0x10, 0x20, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2237:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2238:   0x28, 0x20, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,",
          "2239:   0x44, 0x20, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,",
          "2240:   0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2241:   0x88, 0x20, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,",
          "2242:   0xdc, 0x20, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,",
          "2243:   0x0b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,",
          "2244:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2245:   0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2246:   0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,",
          "2247:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2248:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2249:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2250:   0xc4, 0x20, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,",
          "2251:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2252:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2253:   0x0e, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,",
          "2254:   0x0c, 0x00, 0x00, 0x00, 0x2f, 0x75, 0x73, 0x72,",
          "2255:   0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x64, 0x79, 0x6c,",
          "2256:   0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,",
          "2257:   0x18, 0x00, 0x00, 0x00, 0x5f, 0xb5, 0x95, 0x0f,",
          "2258:   0x40, 0x25, 0x3d, 0x4f, 0xa8, 0xfb, 0x96, 0x48,",
          "2259:   0xc1, 0x74, 0x07, 0x90, 0x24, 0x00, 0x00, 0x00,",
          "2260:   0x10, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x00,",
          "2261:   0x00, 0x0a, 0x0a, 0x00, 0x2a, 0x00, 0x00, 0x00,",
          "2262:   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2263:   0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x80,",
          "2264:   0x18, 0x00, 0x00, 0x00, 0x90, 0x0e, 0x00, 0x00,",
          "2265:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2266:   0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,",
          "2267:   0x34, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2268:   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x04,",
          "2269:   0x00, 0x00, 0x01, 0x00, 0x2f, 0x75, 0x73, 0x72,",
          "2270:   0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6c, 0x69, 0x62,",
          "2271:   0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42,",
          "2272:   0x2e, 0x64, 0x79, 0x6c, 0x69, 0x62, 0x00, 0x00,",
          "2273:   0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2274:   0x70, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,",
          "2275:   0x29, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2276:   0x74, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2277:   0x2b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2278:   0x74, 0x20, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,",
          "2279:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2280:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2281:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2282:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2283:   0x00, 0x00, 0x00, 0x00",
          "2284: };",
          "2287: uint8_t MACHO_PPC_FILE[] = {",
          "2288:   0xfe, 0xed, 0xfa, 0xce, 0x00, 0x00, 0x00, 0x12,",
          "2289:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,",
          "2290:   0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x05, 0xcc,",
          "2291:   0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01,",
          "2292:   0x00, 0x00, 0x00, 0x38, 0x5f, 0x5f, 0x50, 0x41,",
          "2293:   0x47, 0x45, 0x5a, 0x45, 0x52, 0x4f, 0x00, 0x00,",
          "2294:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2295:   0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2296:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2297:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2298:   0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,",
          "2299:   0x00, 0x00, 0x02, 0x14, 0x5f, 0x5f, 0x54, 0x45,",
          "2300:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2301:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,",
          "2302:   0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2303:   0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07,",
          "2304:   0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07,",
          "2305:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x74, 0x65,",
          "2306:   0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2307:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2308:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2309:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xb8,",
          "2310:   0x00, 0x00, 0xb8, 0x38, 0x00, 0x00, 0x0e, 0xb8,",
          "2311:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,",
          "2312:   0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x04, 0x00,",
          "2313:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2314:   0x5f, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x79, 0x6d,",
          "2315:   0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x62,",
          "2316:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2317:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2318:   0x00, 0x00, 0xd6, 0xf0, 0x00, 0x00, 0x00, 0x00,",
          "2319:   0x00, 0x00, 0xc6, 0xf0, 0x00, 0x00, 0x00, 0x02,",
          "2320:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2321:   0x80, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,",
          "2322:   0x00, 0x00, 0x00, 0x24, 0x5f, 0x5f, 0x73, 0x79,",
          "2323:   0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x75,",
          "2324:   0x62, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2325:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2326:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xf0,",
          "2327:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xf0,",
          "2328:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,",
          "2329:   0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x08,",
          "2330:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,",
          "2331:   0x5f, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x79, 0x6d,",
          "2332:   0x62, 0x6f, 0x6c, 0x73, 0x74, 0x75, 0x62, 0x31,",
          "2333:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2334:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2335:   0x00, 0x00, 0xd6, 0xf0, 0x00, 0x00, 0x0a, 0x00,",
          "2336:   0x00, 0x00, 0xc6, 0xf0, 0x00, 0x00, 0x00, 0x02,",
          "2337:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2338:   0x80, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,",
          "2339:   0x00, 0x00, 0x00, 0x20, 0x5f, 0x5f, 0x63, 0x73,",
          "2340:   0x74, 0x72, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00,",
          "2341:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2342:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2343:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0,",
          "2344:   0x00, 0x00, 0x1e, 0x88, 0x00, 0x00, 0xd0, 0xf0,",
          "2345:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,",
          "2346:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,",
          "2347:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2348:   0x5f, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,",
          "2349:   0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2350:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2351:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2352:   0x00, 0x00, 0xff, 0x78, 0x00, 0x00, 0x00, 0x50,",
          "2353:   0x00, 0x00, 0xef, 0x78, 0x00, 0x00, 0x00, 0x03,",
          "2354:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2355:   0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,",
          "2356:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x65, 0x68,",
          "2357:   0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x00, 0x00,",
          "2358:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2359:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2360:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc8,",
          "2361:   0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0xef, 0xc8,",
          "2362:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,",
          "2363:   0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x0b,",
          "2364:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2365:   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0xd0,",
          "2366:   0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x00, 0x00,",
          "2367:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2368:   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,",
          "2369:   0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x10, 0x00,",
          "2370:   0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03,",
          "2371:   0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,",
          "2372:   0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,",
          "2373:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2374:   0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x00, 0x00,",
          "2375:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2376:   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x54,",
          "2377:   0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03,",
          "2378:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2379:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2380:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x6c, 0x61,",
          "2381:   0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,",
          "2382:   0x70, 0x74, 0x72, 0x00, 0x5f, 0x5f, 0x44, 0x41,",
          "2383:   0x54, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2384:   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x54,",
          "2385:   0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0xf2, 0x54,",
          "2386:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,",
          "2387:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,",
          "2388:   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,",
          "2389:   0x5f, 0x5f, 0x6e, 0x6c, 0x5f, 0x73, 0x79, 0x6d,",
          "2390:   0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x74, 0x72, 0x00,",
          "2391:   0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x00, 0x00,",
          "2392:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2393:   0x00, 0x01, 0x03, 0x94, 0x00, 0x00, 0x00, 0x7c,",
          "2394:   0x00, 0x00, 0xf3, 0x94, 0x00, 0x00, 0x00, 0x02,",
          "2395:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2396:   0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xa0,",
          "2397:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x64, 0x79,",
          "2398:   0x6c, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2399:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x44, 0x41,",
          "2400:   0x54, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2401:   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x10,",
          "2402:   0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0xf4, 0x10,",
          "2403:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,",
          "2404:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2405:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2406:   0x5f, 0x5f, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00,",
          "2407:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2408:   0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x00, 0x00,",
          "2409:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2410:   0x00, 0x01, 0x04, 0x2c, 0x00, 0x00, 0x04, 0x08,",
          "2411:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,",
          "2412:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2413:   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,",
          "2414:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x63, 0x6f,",
          "2415:   0x6d, 0x6d, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00,",
          "2416:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x44, 0x41,",
          "2417:   0x54, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2418:   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x40,",
          "2419:   0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00,",
          "2420:   0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,",
          "2421:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "2422:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2423:   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38,",
          "2424:   0x5f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,",
          "2425:   0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2426:   0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0xc0, 0x00,",
          "2427:   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xb3, 0xd0,",
          "2428:   0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01,",
          "2429:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,",
          "2430:   0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c,",
          "2431:   0x00, 0x00, 0x00, 0x0c, 0x2f, 0x75, 0x73, 0x72,",
          "2432:   0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x64, 0x79, 0x6c,",
          "2433:   0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,",
          "2434:   0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x18,",
          "2435:   0x42, 0x3a, 0x3b, 0x7c, 0x00, 0x47, 0x01, 0x01,",
          "2436:   0x00, 0x01, 0x00, 0x00, 0x2f, 0x75, 0x73, 0x72,",
          "2437:   0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6c, 0x69, 0x62,",
          "2438:   0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42,",
          "2439:   0x2e, 0x64, 0x79, 0x6c, 0x69, 0x62, 0x00, 0x00,",
          "2440:   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18,",
          "2441:   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3f,",
          "2442:   0x00, 0x01, 0x73, 0x48, 0x00, 0x00, 0x40, 0x88,",
          "2443:   0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x50,",
          "2444:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a,",
          "2445:   0x00, 0x00, 0x08, 0x7a, 0x00, 0x00, 0x00, 0x6f,",
          "2446:   0x00, 0x00, 0x08, 0xe9, 0x00, 0x00, 0x00, 0x56,",
          "2447:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2448:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2449:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2450:   0x00, 0x01, 0x70, 0x4c, 0x00, 0x00, 0x00, 0xbf,",
          "2451:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2452:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2453:   0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x10,",
          "2454:   0x00, 0x01, 0x6e, 0xf4, 0x00, 0x00, 0x00, 0x56,",
          "2455:   0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb0,",
          "2456:   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28,",
          "2457:   0x00, 0x00, 0x1e, 0xb8, 0x00, 0x00, 0x00, 0x00,",
          "2458:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2459:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2460:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2461:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2462:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2463:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2464:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2465:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2466:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2467:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2468:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2469:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2470:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2471:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2472:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2473:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2474:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2475:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2476:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2477:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2478:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2479:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2480:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2481:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2482:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2483:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2484:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2485:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2486:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2487:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2488:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2489:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2490:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2491:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2492:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2493:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2494:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2495:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2496:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2497:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2498:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2499:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2500:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2501:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2502:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2503:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2504:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2505:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2506:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2507:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2508:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2509:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2510:   0x00, 0x00, 0x00, 0x00",
          "2511: };",
          "2514: uint8_t MACHO_X86_OBJECT_FILE[] = {",
          "2515:   0xce, 0xfa, 0xed, 0xfe, 0x07, 0x00, 0x00, 0x00,",
          "2516:   0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2517:   0x03, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00,",
          "2518:   0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2519:   0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2520:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2521:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2522:   0x48, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,",
          "2523:   0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,",
          "2524:   0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2525:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x74, 0x65,",
          "2526:   0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2527:   0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x54, 0x45,",
          "2528:   0x58, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2529:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2530:   0x48, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,",
          "2531:   0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2532:   0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80,",
          "2533:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2534:   0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2535:   0x48, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2536:   0x54, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2537:   0x0b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,",
          "2538:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2539:   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2540:   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2541:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2542:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2543:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2544:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2545:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2546:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2547:   0x55, 0x89, 0xe5, 0x83, 0xec, 0x0c, 0x8b, 0x45,",
          "2548:   0x08, 0x89, 0x45, 0xfc, 0xc7, 0x45, 0xf4, 0x01,",
          "2549:   0x00, 0x00, 0x00, 0xc7, 0x45, 0xf8, 0x01, 0x00,",
          "2550:   0x00, 0x00, 0x8b, 0x45, 0xf8, 0x3b, 0x45, 0xfc,",
          "2551:   0x0f, 0x8f, 0x1a, 0x00, 0x00, 0x00, 0x8b, 0x45,",
          "2552:   0xf4, 0x0f, 0xaf, 0x45, 0xf8, 0x89, 0x45, 0xf4,",
          "2553:   0x8b, 0x45, 0xf8, 0x05, 0x01, 0x00, 0x00, 0x00,",
          "2554:   0x89, 0x45, 0xf8, 0xe9, 0xda, 0xff, 0xff, 0xff,",
          "2555:   0x8b, 0x45, 0xf4, 0x83, 0xc4, 0x0c, 0x5d, 0xc3,",
          "2556:   0x01, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00,",
          "2557:   0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x5a,",
          "2558:   0x39, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,",
          "2559:   0x61, 0x6c, 0x69, 0x00",
          "2560: };",
          "2563: uint8_t MACHO_X86_64_DYLIB_FILE[] = {",
          "2564:   0xcf, 0xfa, 0xed, 0xfe, 0x07, 0x00, 0x00, 0x01,",
          "2565:   0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,",
          "2566:   0x0d, 0x00, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00,",
          "2567:   0x85, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2568:   0x19, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,",
          "2569:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2570:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2571:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2572:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2573:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2574:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2575:   0x07, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,",
          "2576:   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2577:   0x5f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00,",
          "2578:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2579:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2580:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2581:   0x50, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2582:   0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2583:   0x50, 0x0f, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,",
          "2584:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2585:   0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,",
          "2586:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2587:   0x5f, 0x5f, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64,",
          "2588:   0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x00, 0x00,",
          "2589:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2590:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2591:   0x98, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2592:   0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2593:   0x98, 0x0f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2594:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2595:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2596:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2597:   0x5f, 0x5f, 0x65, 0x68, 0x5f, 0x66, 0x72, 0x61,",
          "2598:   0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2599:   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,",
          "2600:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2601:   0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2602:   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2603:   0xe0, 0x0f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,",
          "2604:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2605:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2606:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2607:   0x19, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,",
          "2608:   0x5f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,",
          "2609:   0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2610:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2611:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2612:   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2613:   0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2614:   0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2615:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2616:   0x0d, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,",
          "2617:   0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2618:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2619:   0x66, 0x61, 0x63, 0x74, 0x5f, 0x78, 0x38, 0x36,",
          "2620:   0x5f, 0x36, 0x34, 0x2e, 0x64, 0x79, 0x6c, 0x69,",
          "2621:   0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2622:   0x22, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00,",
          "2623:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2624:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2625:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2626:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2627:   0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2628:   0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2629:   0x38, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2630:   0x58, 0x10, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,",
          "2631:   0x0b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,",
          "2632:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2633:   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2634:   0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
          "2635:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2636:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2637:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2638:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2639:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2640:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2641:   0x1b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2642:   0x8c, 0x90, 0x46, 0x12, 0x62, 0x53, 0x3f, 0xa1,",
          "2643:   0xb8, 0xd2, 0xd5, 0x82, 0x98, 0x48, 0xa8, 0xfc,",
          "2644:   0x24, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2645:   0x00, 0x09, 0x0a, 0x00, 0x00, 0x0a, 0x0a, 0x00,",
          "2646:   0x2a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2647:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2648:   0x0c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,",
          "2649:   0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
          "2650:   0x00, 0x00, 0xbd, 0x04, 0x00, 0x00, 0x01, 0x00,",
          "2651:   0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x69, 0x62,",
          "2652:   0x2f, 0x6c, 0x69, 0x62, 0x53, 0x79, 0x73, 0x74,",
          "2653:   0x65, 0x6d, 0x2e, 0x42, 0x2e, 0x64, 0x79, 0x6c,",
          "2654:   0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2655:   0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2656:   0x18, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,",
          "2657:   0x29, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2658:   0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2659:   0x2b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,",
          "2660:   0x20, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,",
          "2661:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2662:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2663:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2664:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "2665:   0x00, 0x00, 0x00, 0x00",
          "2666: };",
          "",
          "---------------"
        ],
        "tests/test-macho.c||tests/test-macho.c": [
          "File: tests/test-macho.c -> tests/test-macho.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <yara.h>",
          "2: #include \"util.h\"",
          "3: #include \"blob.h\"",
          "5: int main(int argc, char** argv)",
          "6: {",
          "7:   yr_initialize();",
          "11:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "12:     macho.cputype == macho.CPU_TYPE_X86 }\", MACHO_X86_FILE);",
          "13:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "14:     macho.filetype == macho.MH_EXECUTE }\", MACHO_X86_FILE);",
          "15:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "16:     macho.flags & macho.MH_PIE }\", MACHO_X86_FILE);",
          "20:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "21:     macho.number_of_segments == 4 }\", MACHO_X86_FILE);",
          "22:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "23:     macho.segments[0].segname == \\\"__PAGEZERO\\\" and \\",
          "24:     macho.segments[1].segname == \\\"__TEXT\\\" and \\",
          "25:     macho.segments[2].segname == \\\"__DATA\\\" and \\",
          "26:     macho.segments[3].segname == \\\"__LINKEDIT\\\" }\", MACHO_X86_FILE);",
          "27:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "28:     macho.segments[0].vmaddr == 0 and \\",
          "29:     macho.segments[0].vmsize == 0x1000 and \\",
          "30:     macho.segments[2].nsects == 2 and \\",
          "31:     macho.segments[3].fsize == 0x118 }\", MACHO_X86_FILE);",
          "35:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "36:     macho.segments[1].sections[0].addr == 0x1e90 and \\",
          "37:     macho.segments[1].sections[0].size == 0xa6 and \\",
          "38:     macho.segments[1].sections[0].offset == 0x0e90 }\", MACHO_X86_FILE);",
          "39:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "40:     macho.segments[1].sections[0].sectname == \\\"__text\\\" and \\",
          "41:     macho.segments[1].sections[0].segname == \\\"__TEXT\\\" }\", MACHO_X86_FILE);",
          "42:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "43:     macho.segments[1].sections[1].sectname == \\\"__symbol_stub\\\" and \\",
          "44:     macho.segments[1].sections[2].sectname == \\\"__stub_helper\\\" and \\",
          "45:     macho.segments[1].sections[3].sectname == \\\"__cstring\\\" and \\",
          "46:     macho.segments[1].sections[4].sectname == \\\"__unwind_info\\\" and \\",
          "47:     macho.segments[2].sections[0].sectname == \\\"__nl_symbol_ptr\\\" and \\",
          "48:     macho.segments[2].sections[1].sectname == \\\"__la_symbol_ptr\\\" }\",",
          "49:     MACHO_X86_FILE);",
          "53:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "54:     macho.entry_point == 0xe90 }\", MACHO_X86_FILE);",
          "58:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "59:     macho.cputype == macho.CPU_TYPE_X86 }\", MACHO_X86_OBJECT_FILE);",
          "60:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "61:     macho.filetype == macho.MH_OBJECT }\", MACHO_X86_OBJECT_FILE);",
          "65:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "66:     macho.number_of_segments == 1 and macho.segments[0].segname == \\\"\\\" and \\",
          "67:     macho.segments[0].sections[0].sectname == \\\"__text\\\" and \\",
          "68:     macho.segments[0].sections[0].segname == \\\"__TEXT\\\" }\",",
          "69:     MACHO_X86_OBJECT_FILE);",
          "73:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "74:     macho.cputype == macho.CPU_TYPE_POWERPC }\", MACHO_PPC_FILE);",
          "75:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "76:     macho.filetype == macho.MH_EXECUTE }\", MACHO_PPC_FILE);",
          "80:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "81:     macho.number_of_segments == 4 and \\",
          "82:     macho.segments[0].segname == \\\"__PAGEZERO\\\" and \\",
          "83:     macho.segments[2].segname == \\\"__DATA\\\" and \\",
          "84:     macho.segments[2].nsects == 6 and \\",
          "85:     macho.segments[0].vmaddr == 0 and \\",
          "86:     macho.segments[0].vmsize == 0x1000 and \\",
          "87:     macho.segments[3].fileoff == 65536 and \\",
          "88:     macho.segments[3].fsize == 46032 }\", MACHO_PPC_FILE);",
          "92:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "93:     macho.entry_point == 0xeb8 }\", MACHO_PPC_FILE);",
          "97:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "98:     macho.cputype == macho.CPU_TYPE_X86_64 }\", MACHO_X86_64_DYLIB_FILE);",
          "99:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "100:     macho.filetype == macho.MH_DYLIB }\", MACHO_X86_64_DYLIB_FILE);",
          "101:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "102:     macho.flags & macho.MH_DYLDLINK and \\",
          "103:     macho.flags & macho.MH_NOUNDEFS and \\",
          "104:     macho.flags & macho.MH_NO_REEXPORTED_DYLIBS and \\",
          "105:     macho.flags & macho.MH_TWOLEVEL }\", MACHO_X86_64_DYLIB_FILE);",
          "109:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "110:     macho.number_of_segments == 2 }\", MACHO_X86_64_DYLIB_FILE);",
          "111:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "112:     macho.segments[0].segname == \\\"__TEXT\\\" and \\",
          "113:     macho.segments[1].segname == \\\"__LINKEDIT\\\" }\", MACHO_X86_64_DYLIB_FILE);",
          "114:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "115:     macho.segments[1].vmaddr == 0x0000000000001000 and \\",
          "116:     macho.segments[1].vmsize == 0x0000000000001000 and \\",
          "117:     macho.segments[1].nsects == 0 and \\",
          "118:     macho.segments[1].fsize == 128 }\", MACHO_X86_64_DYLIB_FILE);",
          "119:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "120:     macho.segments[0].sections[0].sectname == \\\"__text\\\" and \\",
          "121:     macho.segments[0].sections[0].segname == \\\"__TEXT\\\" }\",",
          "122:     MACHO_X86_64_DYLIB_FILE);",
          "123:   assert_true_rule_blob(\"import \\\"macho\\\" rule test { condition: \\",
          "124:     macho.segments[0].sections[1].addr == 0x0000000000000f98 and \\",
          "125:     macho.segments[0].sections[1].size == 0x0000000000000048 and \\",
          "126:     macho.segments[0].sections[1].offset == 3992 }\", MACHO_X86_64_DYLIB_FILE);",
          "130:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "131:     macho.fat_magic == macho.FAT_MAGIC and macho.nfat_arch == 2 }\",",
          "132:     \"tests/data/tiny-universal\");",
          "133:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "134:     macho.fat_arch[0].cputype == macho.CPU_TYPE_I386 and \\",
          "135:     macho.fat_arch[0].cpusubtype == macho.CPU_SUBTYPE_I386_ALL and \\",
          "136:     macho.fat_arch[0].offset == 4096 and \\",
          "137:     macho.fat_arch[1].cputype == macho.CPU_TYPE_X86_64 and \\",
          "138:     macho.fat_arch[1].cpusubtype == macho.CPU_SUBTYPE_X86_64_ALL | \\",
          "139:     macho.CPU_SUBTYPE_LIB64 and macho.fat_arch[1].align == 12 }\",",
          "140:     \"tests/data/tiny-universal\");",
          "141:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "142:     macho.file[0].cputype == macho.fat_arch[0].cputype and \\",
          "143:     macho.file[1].cputype == macho.fat_arch[1].cputype }\",",
          "144:     \"tests/data/tiny-universal\");",
          "148:   assert_true_rule_file(\"import \\\"macho\\\" rule test { \\",
          "149:     strings: $1 = { 55 89 e5 56 83 ec 34 } \\",
          "150:     condition: $1 at macho.file[0].entry_point + macho.fat_arch[0].offset }\",",
          "151:     \"tests/data/tiny-universal\");",
          "153:   assert_true_rule_file(\"import \\\"macho\\\" rule test { \\",
          "154:     strings: $1 = { 55 48 89 e5 48 83 ec 20 } \\",
          "155:     condition: $1 at macho.file[1].entry_point + macho.fat_arch[1].offset }\",",
          "156:     \"tests/data/tiny-universal\");",
          "160:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "161:     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_I386)].entry_point == \\",
          "162:     macho.file[0].entry_point }\", \"tests/data/tiny-universal\");",
          "163:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "164:     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_X86_64)].entry_point == \\",
          "165:     macho.file[1].entry_point }\", \"tests/data/tiny-universal\");",
          "167:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "168:     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_I386, \\",
          "169:                macho.CPU_SUBTYPE_I386_ALL)].entry_point == \\",
          "170:     macho.file[0].entry_point }\", \"tests/data/tiny-universal\");",
          "171:   assert_true_rule_file(\"import \\\"macho\\\" rule test { condition: \\",
          "172:     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_X86_64, \\",
          "173:                macho.CPU_SUBTYPE_X86_64_ALL | \\",
          "174:                macho.CPU_SUBTYPE_LIB64)].entry_point == \\",
          "175:     macho.file[1].entry_point }\", \"tests/data/tiny-universal\");",
          "179:   assert_true_rule_file(\"import \\\"macho\\\" rule test { \\",
          "180:     strings: $1 = { 55 89 e5 56 83 ec 34 } \\",
          "181:     condition: $1 at macho.entry_point_for_arch(macho.CPU_TYPE_I386, \\",
          "182:                                        macho.CPU_SUBTYPE_I386_ALL) }\",",
          "183:     \"tests/data/tiny-universal\");",
          "185:   assert_true_rule_file(\"import \\\"macho\\\" rule test { \\",
          "186:     strings: $1 = { 55 48 89 e5 48 83 ec 20 } \\",
          "187:     condition: $1 at macho.entry_point_for_arch(macho.CPU_TYPE_X86_64) }\",",
          "188:     \"tests/data/tiny-universal\");",
          "190:   yr_finalize();",
          "191: }",
          "",
          "---------------"
        ],
        "windows/vs2015/libyara/libyara.vcxproj||windows/vs2015/libyara/libyara.vcxproj": [
          "File: windows/vs2015/libyara/libyara.vcxproj -> windows/vs2015/libyara/libyara.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\elf.c\" />",
          "204:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\hash.c\" />",
          "205:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\math.c\" />",
          "206:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\pe.c\" />",
          "207:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\pe_utils.c\" />",
          "208:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\tests.c\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     <ClCompile Include=\"..\\..\\..\\libyara\\modules\\macho.c\" />",
          "",
          "---------------"
        ]
      }
    }
  ]
}