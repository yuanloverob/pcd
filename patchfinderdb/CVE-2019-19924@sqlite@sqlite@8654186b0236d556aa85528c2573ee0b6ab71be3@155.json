{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58b42ad1314348a2be094abda4239d2c0a6be926",
      "candidate_info": {
        "commit_hash": "58b42ad1314348a2be094abda4239d2c0a6be926",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58b42ad1314348a2be094abda4239d2c0a6be926",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Earlier detection of corruption while added to the freelist.\n\nFossilOrigin-Name: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcbe7d96df3c9515f679ccf671ca9ba89d081b53501495d4218eb5126196838b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6193:   assert( CORRUPT_DB || iPage>1 );",
          "6194:   assert( !pMemPage || pMemPage->pgno==iPage );",
          "6197:   if( pMemPage ){",
          "6198:     pPage = pMemPage;",
          "6199:     sqlite3PagerRef(pPage->pDbPage);",
          "",
          "[Removed Lines]",
          "6196:   if( iPage<2 ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "6196:   if( iPage<2 || iPage>pBt->nPage ){",
          "6197:     return SQLITE_CORRUPT_BKPT;",
          "6198:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
      "candidate_info": {
        "commit_hash": "b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b186a622ee3650dae46ab52f24e23fb91ef4e6c0",
        "files": [
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Disallow page-sizes smaller than 32 bytes in fts5. Also ensure the fts5 integrity-check works even when \"PRAGMA reverse_unordered_selects\" is true. Fix for [265e935b26].\n\nFossilOrigin-Name: 8ab0aebdb3c2d6fb3160b2c58ce6cc0495a6ddd960878a6395958c837f3d1b71",
        "before_after_code_files": [
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:     if( SQLITE_INTEGER==sqlite3_value_numeric_type(pVal) ){",
          "829:       pgsz = sqlite3_value_int(pVal);",
          "830:     }",
          "833:     }else{",
          "834:       pConfig->pgsz = pgsz;",
          "",
          "[Removed Lines]",
          "831:     if( pgsz<=0 || pgsz>FTS5_MAX_PAGE_SIZE ){",
          "",
          "[Added Lines]",
          "831:     if( pgsz<32 || pgsz>FTS5_MAX_PAGE_SIZE ){",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5890:   if( pSeg->pgnoFirst==0 ) return;",
          "5892:   fts5IndexPrepareStmt(p, &pStmt, sqlite3_mprintf(",
          "5894:       pConfig->zDb, pConfig->zName, pSeg->iSegid",
          "5895:   ));",
          "",
          "[Removed Lines]",
          "5893:       \"SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d\",",
          "",
          "[Added Lines]",
          "5893:       \"SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d \"",
          "5894:       \"ORDER BY 1, 2\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4484: do_catchsql_test 36.1 {",
          "4485:   INSERT INTO t1(b) VALUES(",
          "4486:       x'78de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6a');",
          "4489: #-------------------------------------------------------------------------",
          "4490: reset_db",
          "",
          "[Removed Lines]",
          "4487: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4487: } {0 {}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "107: }",
          "110: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #-------------------------------------------------------------------------",
          "110: reset_db",
          "111: do_execsql_test 3.0 {",
          "112:   CREATE VIRTUAL TABLE vt0 USING fts5(a);",
          "113:   PRAGMA reverse_unordered_selects = true;",
          "114:   INSERT INTO vt0 VALUES('365062398'), (0), (0);",
          "115:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '38');",
          "116: }",
          "117: do_execsql_test 3.1 {",
          "118:   UPDATE vt0 SET a = 399905135; -- unexpected: database disk image is malformed",
          "119: }",
          "120: do_execsql_test 3.2 {",
          "121:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "122: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d76dbc5b0584c15d7d59e5c079868f2077f32b865f406b40ec837b8ab6ef2e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
      "candidate_info": {
        "commit_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Disallow tables that have only virtual columns.\n\nFossilOrigin-Name: 591973217f1caf24cde91dc15b7edca2edda05dac8ae2b2cd8d71e7aa072f7d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2244:   if( p->tabFlags & TF_HasGenerated ){",
          "2246:     testcase( p->tabFlags & TF_HasVirtual );",
          "2247:     testcase( p->tabFlags & TF_HasStored );",
          "2248:     for(ii=0; ii<p->nCol; ii++){",
          "",
          "[Removed Lines]",
          "2245:     int ii;",
          "",
          "[Added Lines]",
          "2245:     int ii, nNV = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2253:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2254:                                     p->aCol[ii].pDflt, 0);",
          "2255:       }",
          "2256:     }",
          "2257:   }",
          "2258: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2256:       if( (colFlags & COLFLAG_VIRTUAL)==0 ) nNV++;",
          "2257:     }",
          "2258:     if( nNV==0 ){",
          "2259:       sqlite3ErrorMsg(pParse, \"must have at least one non-VIRTUAL column\");",
          "2260:       return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a082cd75a1625d5aa0f7aeb9384dbccb7a6a78ec",
      "candidate_info": {
        "commit_hash": "a082cd75a1625d5aa0f7aeb9384dbccb7a6a78ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a082cd75a1625d5aa0f7aeb9384dbccb7a6a78ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c",
          "test/releasetest.tcl"
        ],
        "message": "Fix a race condition that could occur in SQLITE_ENABLE_MEMORY_MANAGEMENT builds when two threads simultaneously open the first two database connections in the process.\n\nFossilOrigin-Name: 5ea3f6fc88cf66824128aa64f777a7abb4f6ed55f214d7a135f36e306a32487c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97a94446f3941c313c4c3a19d9f89f24d7ef06e842f79d66f0ad88810b872084",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     }else{",
          "779:       pGroup = &pcache1.grp;",
          "780:     }",
          "781:     if( pGroup->lru.isAnchor==0 ){",
          "782:       pGroup->lru.isAnchor = 1;",
          "783:       pGroup->lru.pLruPrev = pGroup->lru.pLruNext = &pGroup->lru;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:     pcache1EnterMutex(pGroup);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:     pCache->szExtra = szExtra;",
          "788:     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));",
          "789:     pCache->bPurgeable = (bPurgeable ? 1 : 0);",
          "791:     pcache1ResizeHash(pCache);",
          "792:     if( bPurgeable ){",
          "793:       pCache->nMin = 10;",
          "",
          "[Removed Lines]",
          "790:     pcache1EnterMutex(pGroup);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     \"User-Auth\"               tcltest",
          "282:     \"Update-Delete-Limit\"     test",
          "283:     \"Extra-Robustness\"        test",
          "285:     \"No-lookaside\"            test",
          "286:     \"Devkit\"                  test",
          "287:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "284:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "284:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8293a5bee4d064b29760da72c2aa9c17485d1a1",
      "candidate_info": {
        "commit_hash": "b8293a5bee4d064b29760da72c2aa9c17485d1a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8293a5bee4d064b29760da72c2aa9c17485d1a1",
        "files": [
          "ext/rbu/rbuexpr.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update RBU so that it supports indexes on expressions.\n\nFossilOrigin-Name: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
        "before_after_code_files": [
          "ext/rbu/rbuexpr.test||ext/rbu/rbuexpr.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuexpr.test||ext/rbu/rbuexpr.test": [
          "File: ext/rbu/rbuexpr.test -> ext/rbu/rbuexpr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 August 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbuexpr",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: sqlite3 db test.db",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a, b, c PRIMARY KEY);",
          "24:   CREATE INDEX i1 ON t1(a, null, b+1);",
          "25:   CREATE INDEX i2 ON t1(a+1, b+1, c+1);",
          "27:   INSERT INTO t1 VALUES(1, 2, 3);",
          "28:   INSERT INTO t1 VALUES(4, 5, 6);",
          "29:   INSERT INTO t1 VALUES(7, 8, 9);",
          "30:   INSERT INTO t1 VALUES(10, 11, 12);",
          "32:   PRAGMA integrity_check;",
          "33: } {ok}",
          "35: forcedelete rbu.db",
          "36: sqlite3 db2 rbu.db",
          "37: do_execsql_test -db db2 1.1 {",
          "38:   CREATE TABLE data_t1(a, b, c, rbu_control);",
          "39:   INSERT INTO data_t1 VALUES(13, 14, 15, 0);",
          "40:   INSERT INTO data_t1 VALUES(NULL, NULL, 6, 1);",
          "41:   INSERT INTO data_t1 VALUES(NULL, 'three', 3, '.x.');",
          "42: }",
          "43: db2 close",
          "44: db close",
          "46: do_test 1.2 {",
          "47:   run_rbu test.db rbu.db",
          "48: } {SQLITE_DONE}",
          "50: sqlite3 db test.db",
          "52: do_execsql_test 1.3 {",
          "53:   SELECT * FROM t1 WHERE a=4;",
          "54: }",
          "56: integrity_check 1.4",
          "58: #-------------------------------------------------------------------------",
          "59: #",
          "60: reset_db",
          "61: do_execsql_test 2.0 {",
          "62:   CREATE TABLE t1(c1, c2, c3, i INTEGER PRIMARY KEY);",
          "63:   INSERT INTO t1 VALUES('one', 'one', 'one', 1);",
          "64:   INSERT INTO t1 VALUES('two', 'two', 'two', 2);",
          "65:   INSERT INTO t1 VALUES('three', 'three', 'three', 3);",
          "66:   INSERT INTO t1 VALUES('four', 'four', 'four', 4);",
          "68:   CREATE INDEX i1 ON t1( substr(c1, 1, 2) );",
          "69:   CREATE INDEX i2 ON t1( c1 || c2 || c3 );",
          "70:   CREATE INDEX i3 ON t1( length(c1) + length(c2) - 1, c3||i );",
          "71: }",
          "73: forcedelete rbu.db",
          "74: sqlite3 db2 rbu.db",
          "75: do_execsql_test -db db2 2.1 {",
          "76:   CREATE TABLE data_t1(c1, c2, c3, i, rbu_control);",
          "77:   INSERT INTO data_t1 VALUES(NULL, NULL, NULL, 2, 1);",
          "78:   INSERT INTO data_t1 VALUES('thirty', NULL, NULL, 3, 'xx..');",
          "79:   INSERT INTO data_t1 VALUES('five', 'five', 'five', 5, 0);",
          "80: }",
          "81: db2 close",
          "83: db close",
          "85: do_test 2.2 {",
          "86:   run_rbu test.db rbu.db",
          "87: } {SQLITE_DONE}",
          "89: sqlite3 db test.db",
          "90: integrity_check 2.3",
          "92: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: typedef struct RbuFrame RbuFrame;",
          "183: typedef struct RbuObjIter RbuObjIter;",
          "184: typedef struct RbuState RbuState;",
          "185: typedef struct rbu_vfs rbu_vfs;",
          "186: typedef struct rbu_file rbu_file;",
          "187: typedef struct RbuUpdateStmt RbuUpdateStmt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: typedef struct RbuSpan RbuSpan;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   RbuUpdateStmt *pNext;",
          "227: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: struct RbuSpan {",
          "231:   const char *zSpan;",
          "232:   int nSpan;",
          "233: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:   RbuUpdateStmt *pRbuUpdate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:   int nIdxCol;",
          "285:   RbuSpan *aIdxCol;",
          "286:   char *zIdxSql;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "809:     sqlite3_free(pUp);",
          "810:     pUp = pTmp;",
          "811:   }",
          "813:   pIter->pSelect = 0;",
          "814:   pIter->pInsert = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:   sqlite3_free(pIter->aIdxCol);",
          "822:   sqlite3_free(pIter->zIdxSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "816:   pIter->pRbuUpdate = 0;",
          "817:   pIter->pTmpInsert = 0;",
          "818:   pIter->nCol = 0;",
          "819: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:   pIter->nIdxCol = 0;",
          "831:   pIter->aIdxCol = 0;",
          "832:   pIter->zIdxSql = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1089: static char *rbuStrndup(const char *zStr, int *pRc){",
          "1090:   char *zRet = 0;",
          "1100:     }",
          "1101:   }",
          "",
          "[Removed Lines]",
          "1092:   assert( *pRc==SQLITE_OK );",
          "1093:   if( zStr ){",
          "1094:     size_t nCopy = strlen(zStr) + 1;",
          "1095:     zRet = (char*)sqlite3_malloc64(nCopy);",
          "1096:     if( zRet ){",
          "1097:       memcpy(zRet, zStr, nCopy);",
          "1098:     }else{",
          "",
          "[Added Lines]",
          "1106:   if( *pRc==SQLITE_OK ){",
          "1107:     if( zStr ){",
          "1108:       size_t nCopy = strlen(zStr) + 1;",
          "1109:       zRet = (char*)sqlite3_malloc64(nCopy);",
          "1110:       if( zRet ){",
          "1111:         memcpy(zRet, zStr, nCopy);",
          "1112:       }else{",
          "1114:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1268:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1269:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1270:       if( iCid>=0 ) pIter->abIndexed[iCid] = 1;",
          "1271:     }",
          "1272:     rbuFinalize(p, pXInfo);",
          "1273:     bIndex = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:       if( iCid==-2 ){",
          "1287:         memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1288:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1682:     const char *zCol;",
          "1683:     const char *zType;",
          "1695:       }else{",
          "1697:       }",
          "1702:     }",
          "1705:     if( pIter->bUnique==0 || sqlite3_column_int(pXInfo, 5) ){",
          "1706:       const char *zOrder = (bDesc ? \" DESC\" : \"\");",
          "1707:       zImpPK = sqlite3_mprintf(\"%z%s\\\"rbu_imp_%d%w\\\"%s\",",
          "",
          "[Removed Lines]",
          "1685:     if( iCid<0 ){",
          "1688:       if( pIter->eType==RBU_PK_IPK ){",
          "1689:         int i;",
          "1690:         for(i=0; pIter->abTblPk[i]==0; i++);",
          "1691:         assert( i<pIter->nTblCol );",
          "1692:         zCol = pIter->azTblCol[i];",
          "1693:       }else if( rbuIsVacuum(p) ){",
          "1694:         zCol = \"_rowid_\";",
          "1696:         zCol = \"rbu_rowid\";",
          "1698:       zType = \"INTEGER\";",
          "1699:     }else{",
          "1700:       zCol = pIter->azTblCol[iCid];",
          "1701:       zType = pIter->azTblType[iCid];",
          "1704:     zRet = sqlite3_mprintf(\"%z%s\\\"%w\\\" COLLATE %Q\", zRet, zCom, zCol, zCollate);",
          "",
          "[Added Lines]",
          "1703:     if( iCid==-2 ){",
          "1704:       int iSeq = sqlite3_column_int(pXInfo, 0);",
          "1705:       zRet = sqlite3_mprintf(\"%z%s(%.*s) COLLATE %Q\", zRet, zCom,",
          "1706:           pIter->aIdxCol[iSeq].nSpan, pIter->aIdxCol[iSeq].zSpan, zCollate",
          "1707:       );",
          "1708:       zType = \"\";",
          "1709:     }else {",
          "1710:       if( iCid<0 ){",
          "1713:         if( pIter->eType==RBU_PK_IPK ){",
          "1714:           int i;",
          "1715:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1716:           assert( i<pIter->nTblCol );",
          "1717:           zCol = pIter->azTblCol[i];",
          "1718:         }else if( rbuIsVacuum(p) ){",
          "1719:           zCol = \"_rowid_\";",
          "1720:         }else{",
          "1721:           zCol = \"rbu_rowid\";",
          "1722:         }",
          "1723:         zType = \"INTEGER\";",
          "1725:         zCol = pIter->azTblCol[iCid];",
          "1726:         zType = pIter->azTblType[iCid];",
          "1728:       zRet = sqlite3_mprintf(\"%z%s\\\"%w\\\" COLLATE %Q\", zRet, zCom,zCol,zCollate);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2181:   int rc = p->rc;",
          "2182:   char *zRet = 0;",
          "2184:   if( rc==SQLITE_OK ){",
          "2185:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "2186:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2210:   assert( pIter->zIdxSql==0 && pIter->nIdxCol==0 && pIter->aIdxCol==0 );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2190:     int rc2;",
          "2191:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "2192:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "2194:       if( zSql ){",
          "2196:         int i;",
          "2197:         for(i=0; zSql[i]; i++){",
          "2198:           char c = zSql[i];",
          "2199:           if( c=='(' ){",
          "2200:             nParen++;",
          "2201:           }",
          "2202:           else if( c==')' ){",
          "2203:             nParen--;",
          "2204:             if( nParen==0 ){",
          "2205:               i++;",
          "2206:               break;",
          "2207:             }",
          "2208:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2209:             for(i++; 1; i++){",
          "2210:               if( zSql[i]==c ){",
          "",
          "[Removed Lines]",
          "2193:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Added Lines]",
          "2221:       char *zSql = (char*)sqlite3_column_text(pStmt, 0);",
          "2222:       if( zSql ){",
          "2223:         pIter->zIdxSql = zSql = rbuStrndup(zSql, &rc);",
          "2224:       }",
          "2228:         int iIdxCol = 0;",
          "2229:         int nIdxAlloc = 0;",
          "2234:           if( iIdxCol==nIdxAlloc ){",
          "2235:             RbuSpan *aIdxCol = (RbuSpan*)sqlite3_realloc(",
          "2236:                 pIter->aIdxCol, (nIdxAlloc+16)*sizeof(RbuSpan)",
          "2237:             );",
          "2238:             if( aIdxCol==0 ){",
          "2239:               rc = SQLITE_NOMEM;",
          "2240:               break;",
          "2241:             }",
          "2242:             pIter->aIdxCol = aIdxCol;",
          "2243:             nIdxAlloc += 16;",
          "2244:           }",
          "2247:             if( nParen==0 ){",
          "2248:               assert( iIdxCol==0 );",
          "2249:               pIter->aIdxCol[0].zSpan = &zSql[i+1];",
          "2250:             }",
          "2256:               int nSpan = &zSql[i] - pIter->aIdxCol[iIdxCol].zSpan;",
          "2257:               pIter->aIdxCol[iIdxCol++].nSpan = nSpan;",
          "2261:           }else if( c==',' && nParen==1 ){",
          "2262:             int nSpan = &zSql[i] - pIter->aIdxCol[iIdxCol].zSpan;",
          "2263:             pIter->aIdxCol[iIdxCol++].nSpan = nSpan;",
          "2264:             pIter->aIdxCol[iIdxCol].zSpan = &zSql[i+1];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2228:         if( zSql[i] ){",
          "2229:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2230:         }",
          "2231:       }",
          "2232:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2288:         pIter->nIdxCol = iIdxCol;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2272:       int nBind = 0;",
          "2274:       assert( pIter->eType!=RBU_PK_VTAB );",
          "2275:       zCollist = rbuObjIterGetIndexCols(",
          "2276:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "2277:       );",
          "2278:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "2282:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "2279:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "[Added Lines]",
          "2333:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1ccf211aa975a6688a27f7dc4cea80784ed8dcfe1950b2fa6eb0a3cb938838a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}