{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36c9301816ab0acb23db36517754f66295542e3b",
      "candidate_info": {
        "commit_hash": "36c9301816ab0acb23db36517754f66295542e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/36c9301816ab0acb23db36517754f66295542e3b",
        "files": [
          "ext/fts5/test/fts5corrupt4.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add new test file fts5corrupt4.test.\n\nFossilOrigin-Name: 5dfc4fe98a4821cbdbfd7dfddf221b00251b2a26bf58767a3956b64e9a4e92da",
        "before_after_code_files": [
          "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test": [
          "File: ext/fts5/test/fts5corrupt4.test -> ext/fts5/test/fts5corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 16",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: #",
          "14: source [file join [file dirname [info script]] fts5_common.tcl]",
          "15: set testprefix fts5corrupt4",
          "17: # If SQLITE_ENABLE_FTS5 is defined, omit this file.",
          "18: ifcapable !fts5 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "22: sqlite3_fts5_may_be_corrupt 1",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE ttt USING fts5(a, b);",
          "26:   INSERT INTO ttt",
          "27:      VALUES('e ee eee e ee eee e ee eee', 'eee ee e e e ee eee ee ee');",
          "28:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "29:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "30: }",
          "32: proc mutate {blob i} {",
          "33:   set o [expr {$i % [string length $blob]}]",
          "34:   set a [string range $blob 0 $o-1]",
          "35:   set b [string range $blob $o+1 end]",
          "36:   set v [expr int(rand()*255) - 127]",
          "37:   return \"$a[binary format c $v]$b\"",
          "38: }",
          "39: db func mutate mutate",
          "41: for {set j 1000} {$j <= 5000} {incr j 1000} {",
          "42:   do_test 1.$j {",
          "43:     for {set i 0} {$i < 1000} {incr i} {",
          "44:       execsql {",
          "45:         BEGIN;",
          "46:           UPDATE ttt_data SET block = mutate(block, $i) WHERE id>10;",
          "47:       }",
          "48:       foreach sql {",
          "49:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e*')}",
          "50:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e* NOT ee*')}",
          "51:       } {",
          "52:         catch { execsql $sql }",
          "53:       }",
          "54:       execsql ROLLBACK",
          "55:     }",
          "56:   } {}",
          "57: }",
          "59: sqlite3_fts5_may_be_corrupt 0",
          "60: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
      "candidate_info": {
        "commit_hash": "b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Reinitialize debugging information on registers of a trigger prior to each invocation of the trigger.  This prevents false-positives from the sqlite3VdbeMemAboutToChange() test logic.\n\nFossilOrigin-Name: 98b3b97573ccb3d986d1552f97f96e15088a598945923adcac77010c1e8b7fe4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ff220ad378d547538b4501e6b2201e835a2c66891e5e40856db377c101a50e5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6171:   p->nOp = pProgram->nOp;",
          "6172: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "6173:   p->anExec = 0;",
          "6174: #endif",
          "6175:   pOp = &aOp[-1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6174: #endif",
          "6175: #ifdef SQLITE_DEBUG",
          "6178:   {",
          "6179:     int i;",
          "6180:     for(i=0; i<p->nMem; i++){",
          "6183:     }",
          "6184:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f202c6cdcfdc96fb2959133903d3ed5026b733d2",
      "candidate_info": {
        "commit_hash": "f202c6cdcfdc96fb2959133903d3ed5026b733d2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f202c6cdcfdc96fb2959133903d3ed5026b733d2",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Relax the minimum size database file constraint on the dbtotxt utility program.\n\nFossilOrigin-Name: 97e723d746eeb2159f5bf1701532271ac6a4620879c82d496f4499c178b64479",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35f04235c477501390acea126d07a730d81d03cdf7abcd82d861e397b3f75b0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   fseek(in, 0, SEEK_END);",
          "94:   szFile = ftell(in);",
          "95:   rewind(in);",
          "98:     exit(1);",
          "99:   }",
          "100:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "",
          "[Removed Lines]",
          "96:   if( szFile<512 ){",
          "97:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "",
          "[Added Lines]",
          "96:   if( szFile<100 ){",
          "97:     fprintf(stderr, \"File too short. Minimum size is 100 bytes.\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
      "candidate_info": {
        "commit_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/sqliteInt.h"
        ],
        "message": "Honor key query parameters for SEE on the URI filename for ATTACH and VACUUM INTO.\n\nFossilOrigin-Name: 2e01096b8933a2315e3dffcd7d0de84c744c1b4be1d909388c61f0fd636ddb99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     assert( pVfs );",
          "156:     flags |= SQLITE_OPEN_MAIN_DB;",
          "157:     rc = sqlite3BtreeOpen(pVfs, zPath, db, &pNew->pBt, 0, flags);",
          "159:     db->nDb++;",
          "160:   }",
          "161:   db->noSharedCache = 0;",
          "162:   if( rc==SQLITE_CONSTRAINT ){",
          "",
          "[Removed Lines]",
          "158:     sqlite3_free( zPath );",
          "",
          "[Added Lines]",
          "159:     pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     sqlite3BtreeLeave(pNew->pBt);",
          "185:   }",
          "186:   pNew->safety_level = SQLITE_DEFAULT_SYNCHRONOUS+1;",
          "188:   if( rc==SQLITE_OK && pNew->zDbSName==0 ){",
          "189:     rc = SQLITE_NOMEM_BKPT;",
          "190:   }",
          "",
          "[Removed Lines]",
          "187:   if( !REOPEN_AS_MEMDB(db) ) pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:         break;",
          "214:       case SQLITE_NULL:",
          "219:         }",
          "220:         break;",
          "221:     }",
          "222:   }",
          "223: #endif",
          "",
          "[Removed Lines]",
          "216:         sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "217:         if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "218:           rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "",
          "[Added Lines]",
          "216:         if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){",
          "217:           sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "218:           if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "219:             rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "220:           }",
          "226:   sqlite3_free( zPath );",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2942:   return rc;",
          "2943: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2945: #if defined(SQLITE_HAS_CODEC)",
          "2951: int sqlite3CodecQueryParameters(",
          "2955: ){",
          "2956:   const char *zKey;",
          "2957:   if( (zKey = sqlite3_uri_parameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "2958:     u8 iByte;",
          "2959:     int i;",
          "2960:     char zDecoded[40];",
          "2961:     for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "2962:       iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "2963:       if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "2964:     }",
          "2965:     sqlite3_key_v2(db, zDb, zDecoded, i/2);",
          "2966:     return 1;",
          "2967:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"key\"))!=0 ){",
          "2968:     sqlite3_key_v2(db, zDb, zKey, sqlite3Strlen30(zKey));",
          "2969:     return 1;",
          "2970:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"textkey\"))!=0 ){",
          "2971:     sqlite3_key_v2(db, zDb, zKey, -1);",
          "2972:     return 1;",
          "2973:   }else{",
          "2974:     return 0;",
          "2975:   }",
          "2976: }",
          "2977: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3287:   }",
          "3288: #endif",
          "3289: #if defined(SQLITE_HAS_CODEC)",
          "3305: #endif",
          "3306:   sqlite3_free(zOpen);",
          "3307:   return rc & 0xff;",
          "3308: }",
          "",
          "[Removed Lines]",
          "3290:   if( rc==SQLITE_OK ){",
          "3291:     const char *zKey;",
          "3292:     if( (zKey = sqlite3_uri_parameter(zOpen, \"hexkey\"))!=0 && zKey[0] ){",
          "3293:       u8 iByte;",
          "3294:       int i;",
          "3295:       char zDecoded[40];",
          "3296:       for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "3297:         iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "3298:         if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "3299:       }",
          "3300:       sqlite3_key_v2(db, 0, zDecoded, i/2);",
          "3301:     }else if( (zKey = sqlite3_uri_parameter(zOpen, \"key\"))!=0 ){",
          "3302:       sqlite3_key_v2(db, 0, zKey, sqlite3Strlen30(zKey));",
          "3303:     }",
          "3304:   }",
          "",
          "[Added Lines]",
          "3324:   if( rc==SQLITE_OK ) sqlite3CodecQueryParameters(db, 0, zOpen);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3882: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3883: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3884:                     sqlite3_vfs**,char**,char **);",
          "3885: Btree *sqlite3DbNameToBtree(sqlite3*,const char*);",
          "3887: #ifdef SQLITE_UNTESTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3885: #ifdef SQLITE_HAS_CODEC",
          "3886:   int sqlite3CodecQueryParameters(sqlite3*,const char*,const char*);",
          "3887: #else",
          "3888: # define sqlite3CodecQueryParameters(A,B,C) 0",
          "3889: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "674a9b342551fa7e4be30010a8dd51b2538723bf",
      "candidate_info": {
        "commit_hash": "674a9b342551fa7e4be30010a8dd51b2538723bf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/674a9b342551fa7e4be30010a8dd51b2538723bf",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhance the RTREE extension so that it give correct query results even if the query uses non-numeric constraints.  Ticket [a55ab6d97d01ecbc]\n\nFossilOrigin-Name: f898d04cf272ef0130dcae146cb86d8630b10a6f19aecfc2fa70e97e082bd51c",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1244:   pCellData += 8 + 4*(p->iCoord&0xfe);",
          "1246:   assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE",
          "1249:   switch( p->op ){",
          "1250:     case RTREE_LE:",
          "1251:     case RTREE_LT:",
          "1252:     case RTREE_EQ:",
          "",
          "[Removed Lines]",
          "1247:       || p->op==RTREE_GT || p->op==RTREE_EQ );",
          "",
          "[Added Lines]",
          "1253:       || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_TRUE",
          "1254:       || p->op==RTREE_FALSE );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:   assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE",
          "1288:   pCellData += 8 + p->iCoord*4;",
          "1290:   RTREE_DECODE_COORD(eInt, pCellData, xN);",
          "1291:   switch( p->op ){",
          "1297:   }",
          "1299: }",
          "",
          "[Removed Lines]",
          "1287:       || p->op==RTREE_GT || p->op==RTREE_EQ );",
          "1292:     case RTREE_LE: if( xN <= p->u.rValue ) return;  break;",
          "1293:     case RTREE_LT: if( xN <  p->u.rValue ) return;  break;",
          "1294:     case RTREE_GE: if( xN >= p->u.rValue ) return;  break;",
          "1295:     case RTREE_GT: if( xN >  p->u.rValue ) return;  break;",
          "1296:     default:       if( xN == p->u.rValue ) return;  break;",
          "",
          "[Added Lines]",
          "1296:       || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_TRUE",
          "1297:       || p->op==RTREE_FALSE );",
          "1304:     case RTREE_LE:    if( xN <= p->u.rValue ) return;  break;",
          "1305:     case RTREE_LT:    if( xN <  p->u.rValue ) return;  break;",
          "1306:     case RTREE_GE:    if( xN >= p->u.rValue ) return;  break;",
          "1307:     case RTREE_GT:    if( xN >  p->u.rValue ) return;  break;",
          "1308:     default:          if( xN == p->u.rValue ) return;  break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1835:                 || (idxStr && (int)strlen(idxStr)==argc*2) );",
          "1836:         for(ii=0; ii<argc; ii++){",
          "1837:           RtreeConstraint *p = &pCsr->aConstraint[ii];",
          "1838:           p->op = idxStr[ii*2];",
          "1839:           p->iCoord = idxStr[ii*2+1]-'0';",
          "1840:           if( p->op>=RTREE_MATCH ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850:           int eType = sqlite3_value_type(argv[ii]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1849:             p->pInfo->nCoord = pRtree->nDim2;",
          "1850:             p->pInfo->anQueue = pCsr->anQueue;",
          "1851:             p->pInfo->mxLevel = pRtree->iDepth + 1;",
          "1853: #ifdef SQLITE_RTREE_INT_ONLY",
          "1854:             p->u.rValue = sqlite3_value_int64(argv[ii]);",
          "1855: #else",
          "1856:             p->u.rValue = sqlite3_value_double(argv[ii]);",
          "1857: #endif",
          "1858:           }",
          "1859:         }",
          "1860:       }",
          "",
          "[Removed Lines]",
          "1852:           }else{",
          "",
          "[Added Lines]",
          "1865:           }else if( eType==SQLITE_INTEGER || eType==SQLITE_FLOAT ){",
          "1871:           }else{",
          "1872:             p->u.rValue = RTREE_ZERO;",
          "1873:             if( eType==SQLITE_NULL ){",
          "1874:               p->op = RTREE_FALSE;",
          "1875:             }else if( p->op==RTREE_LT || p->op==RTREE_LE ){",
          "1876:               p->op = RTREE_TRUE;",
          "1877:             }else{",
          "1878:               p->op = RTREE_FALSE;",
          "1879:             }",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:     INSERT INTO t6 VALUES(2, 4, 6);",
          "375:   }",
          "376: } {}",
          "385: #----------------------------------------------------------------------------",
          "386: # Test cases rtree-9.*",
          "",
          "[Removed Lines]",
          "377: do_test rtree-8.1.2 { execsql { SELECT ii FROM t6 WHERE x1>2 } } {1 2}",
          "378: do_test rtree-8.1.3 { execsql { SELECT ii FROM t6 WHERE x1>3 } } {2}",
          "379: do_test rtree-8.1.4 { execsql { SELECT ii FROM t6 WHERE x1>4 } } {}",
          "380: do_test rtree-8.1.5 { execsql { SELECT ii FROM t6 WHERE x1>5 } } {}",
          "381: do_test rtree-8.1.6 { execsql { SELECT ii FROM t6 WHERE x1<3 } } {}",
          "382: do_test rtree-8.1.7 { execsql { SELECT ii FROM t6 WHERE x1<4 } } {1}",
          "383: do_test rtree-8.1.8 { execsql { SELECT ii FROM t6 WHERE x1<5 } } {1 2}",
          "",
          "[Added Lines]",
          "377: do_test rtree-8.1.2 { execsql { SELECT ii FROM t6 WHERE x1>2 } }   {1 2}",
          "378: do_test rtree-8.1.3 { execsql { SELECT ii FROM t6 WHERE x1>3 } }   {2}",
          "379: do_test rtree-8.1.4 { execsql { SELECT ii FROM t6 WHERE x1>4 } }   {}",
          "380: do_test rtree-8.1.5 { execsql { SELECT ii FROM t6 WHERE x1>5 } }   {}",
          "381: do_test rtree-8.1.6 { execsql { SELECT ii FROM t6 WHERE x1>''} }   {}",
          "382: do_test rtree-8.1.7 { execsql { SELECT ii FROM t6 WHERE x1>null}}  {}",
          "383: do_test rtree-8.2.2 { execsql { SELECT ii FROM t6 WHERE x1>=2 } }  {1 2}",
          "384: do_test rtree-8.2.3 { execsql { SELECT ii FROM t6 WHERE x1>=3 } }  {1 2}",
          "385: do_test rtree-8.2.4 { execsql { SELECT ii FROM t6 WHERE x1>=4 } }  {2}",
          "386: do_test rtree-8.2.5 { execsql { SELECT ii FROM t6 WHERE x1>=5 } }  {}",
          "387: do_test rtree-8.2.6 { execsql { SELECT ii FROM t6 WHERE x1>=''} }  {}",
          "388: do_test rtree-8.2.7 { execsql { SELECT ii FROM t6 WHERE x1>=null}} {}",
          "389: do_test rtree-8.3.2 { execsql { SELECT ii FROM t6 WHERE x1<2 } }   {}",
          "390: do_test rtree-8.3.3 { execsql { SELECT ii FROM t6 WHERE x1<3 } }   {}",
          "391: do_test rtree-8.3.4 { execsql { SELECT ii FROM t6 WHERE x1<4 } }   {1}",
          "392: do_test rtree-8.3.5 { execsql { SELECT ii FROM t6 WHERE x1<5 } }   {1 2}",
          "393: do_test rtree-8.3.6 { execsql { SELECT ii FROM t6 WHERE x1<''} }   {1 2}",
          "394: do_test rtree-8.3.7 { execsql { SELECT ii FROM t6 WHERE x1<null}}  {}",
          "395: do_test rtree-8.4.2 { execsql { SELECT ii FROM t6 WHERE x1<=2 } }  {}",
          "396: do_test rtree-8.4.3 { execsql { SELECT ii FROM t6 WHERE x1<=3 } }  {1}",
          "397: do_test rtree-8.4.4 { execsql { SELECT ii FROM t6 WHERE x1<=4 } }  {1 2}",
          "398: do_test rtree-8.4.5 { execsql { SELECT ii FROM t6 WHERE x1<=5 } }  {1 2}",
          "399: do_test rtree-8.4.6 { execsql { SELECT ii FROM t6 WHERE x1<=''} }  {1 2}",
          "400: do_test rtree-8.4.7 { execsql { SELECT ii FROM t6 WHERE x1<=null}} {}",
          "401: do_test rtree-8.5.2 { execsql { SELECT ii FROM t6 WHERE x1=2 } }   {}",
          "402: do_test rtree-8.5.3 { execsql { SELECT ii FROM t6 WHERE x1=3 } }   {1}",
          "403: do_test rtree-8.5.4 { execsql { SELECT ii FROM t6 WHERE x1=4 } }   {2}",
          "404: do_test rtree-8.5.5 { execsql { SELECT ii FROM t6 WHERE x1=5 } }   {}",
          "405: do_test rtree-8.5.6 { execsql { SELECT ii FROM t6 WHERE x1=''} }   {}",
          "406: do_test rtree-8.5.7 { execsql { SELECT ii FROM t6 WHERE x1=null}}  {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35f0b5a8c7921f7419eeb11be8201fd6988047042fcaeffa297fc322bc480c1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}