{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5a69238b42fff179af63a3d88ec8f3bf135543b",
      "candidate_info": {
        "commit_hash": "b5a69238b42fff179af63a3d88ec8f3bf135543b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b5a69238b42fff179af63a3d88ec8f3bf135543b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/join6.test"
        ],
        "message": "Fix a buffer overread found by OSSFuzz that could occur if a WITHOUT ROWID table with many columns was NATURAL JOINed against itself.\n\nFossilOrigin-Name: 3d35fa0be866213274fc09250225b345f6b08a9b4ec373d53d95e627e24512be",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/join6.test||test/join6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f5ed852f25515bbc0a7aaf236fdef40fa7e31805eee1249277fde4e68f95130",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1891:   int nByte;",
          "1892:   if( pIdx->nColumn>=N ) return SQLITE_OK;",
          "1893:   assert( pIdx->isResized==0 );",
          "1895:   zExtra = sqlite3DbMallocZero(db, nByte);",
          "1896:   if( zExtra==0 ) return SQLITE_NOMEM_BKPT;",
          "1897:   memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);",
          "1898:   pIdx->azColl = (const char**)zExtra;",
          "1899:   zExtra += sizeof(char*)*N;",
          "1900:   memcpy(zExtra, pIdx->aiColumn, sizeof(i16)*pIdx->nColumn);",
          "1901:   pIdx->aiColumn = (i16*)zExtra;",
          "1902:   zExtra += sizeof(i16)*N;",
          "",
          "[Removed Lines]",
          "1894:   nByte = (sizeof(char*) + sizeof(i16) + 1)*N;",
          "",
          "[Added Lines]",
          "1894:   nByte = (sizeof(char*) + sizeof(LogEst) + sizeof(i16) + 1)*N;",
          "1900:   memcpy(zExtra, pIdx->aiRowLogEst, sizeof(LogEst)*(pIdx->nKeyCol+1));",
          "1901:   pIdx->aiRowLogEst = (LogEst*)zExtra;",
          "1902:   zExtra += sizeof(LogEst)*N;",
          "",
          "---------------"
        ],
        "test/join6.test||test/join6.test": [
          "File: test/join6.test -> test/join6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   } {1 91 92 3 93 5}",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: do_execsql_test join6-5.1 {",
          "151:   CREATE TABLE tx(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o PRIMARY KEY)",
          "152:   WITHOUT ROWID;",
          "153:   INSERT INTO tx VALUES(",
          "154:     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
          "155:   );",
          "156: } {}",
          "157: do_execsql_test joint6-5.2 {",
          "158:   SELECT o FROM tx NATURAL JOIN tx;",
          "159: } {15}",
          "161: do_execsql_test join6-5.3 {",
          "162:   CREATE TABLE ty(a,\u00d1,x6,x7,x8,Q,I,v,x1,L,E,x2,x3,x4,x5,s,g PRIMARY KEY,b,c)",
          "163:   WITHOUT ROWID;",
          "164:   SELECT a FROM ty NATURAL JOIN ty;",
          "165: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9576802dbae4501cbec42947ce01286376d2fc10",
      "candidate_info": {
        "commit_hash": "9576802dbae4501cbec42947ce01286376d2fc10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9576802dbae4501cbec42947ce01286376d2fc10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove an incorrect ALWAYS() macro.\n\nFossilOrigin-Name: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53847f5c28bdecfbc7b08685d4dcd0565526f6191491b4827c3c966a4b8d4a85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:         Expr *pNext  = p->pRight;",
          "192:         assert( p->x.pList==0 || p->pRight==0 );",
          "196:         if( p->x.pList!=0",
          "197:          && !db->mallocFailed",
          "198:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "199:         ){",
          "200:           int i;",
          "202:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "203:               pNext = p->x.pList->a[i].pExpr;",
          "204:               break;",
          "",
          "[Removed Lines]",
          "201:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "",
          "[Added Lines]",
          "198:           for(i=0; i<p->x.pList->nExpr; i++){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7465787b97a0a09841e343630a07ba80f1399e4a",
      "candidate_info": {
        "commit_hash": "7465787b97a0a09841e343630a07ba80f1399e4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7465787b97a0a09841e343630a07ba80f1399e4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/upfrom2.test"
        ],
        "message": "Fix problems with UPDATE...FROM statements that modify rowid or primary-key values.\n\nFossilOrigin-Name: 623ab585d1aa1bdde2df17f1936aa4eec2d997b274acc5c7b291d9566a9ec2c5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/upfrom2.test||test/upfrom2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e4a18601e5093896e5b323c21aec986b07259353d2ef9455d0a81c6846f40282",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   int iRowidExpr = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:         if( j==pTab->iPKey ){",
          "431:           chngRowid = 1;",
          "432:           pRowidExpr = pChanges->a[i].pExpr;",
          "433:         }else if( pPk && (pTab->aCol[j].colFlags & COLFLAG_PRIMKEY)!=0 ){",
          "434:           chngPk = 1;",
          "435:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:           iRowidExpr = i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "452:         j = -1;",
          "453:         chngRowid = 1;",
          "454:         pRowidExpr = pChanges->a[i].pExpr;",
          "455:       }else{",
          "456:         sqlite3ErrorMsg(pParse, \"no such column: %s\", pChanges->a[i].zEName);",
          "457:         pParse->checkSchema = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:         iRowidExpr = i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "649:   if( nChangeFrom ){",
          "650:     sqlite3MultiWrite(pParse);",
          "651:     eOnePass = ONEPASS_OFF;",
          "652:   }else{",
          "653:     if( pUpsert ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655:     nKey = nPk;",
          "656:     regKey = iPk;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "811:   assert( chngKey || pTrigger || hasFK || regOldRowid==regNewRowid );",
          "812:   if( chngRowid ){",
          "814:     sqlite3VdbeAddOp1(v, OP_MustBeInt, regNewRowid); VdbeCoverage(v);",
          "815:   }",
          "",
          "[Removed Lines]",
          "813:     sqlite3ExprCode(pParse, pRowidExpr, regNewRowid);",
          "",
          "[Added Lines]",
          "818:     assert( iRowidExpr>=0 );",
          "819:     if( nChangeFrom==0 ){",
          "820:       sqlite3ExprCode(pParse, pRowidExpr, regNewRowid);",
          "821:     }else{",
          "822:       sqlite3VdbeAddOp3(v, OP_Column, iEph, iRowidExpr, regNewRowid);",
          "823:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911:       if( pPk ){",
          "921:         VdbeCoverage(v);",
          "922:       }else{",
          "923:         sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, labelContinue,regOldRowid);",
          "",
          "[Removed Lines]",
          "912:         int p3, p4;",
          "913:         if( nChangeFrom ){",
          "914:           p3 = iPk;",
          "915:           p4 = nPk;",
          "916:         }else{",
          "917:           p3 = regKey;",
          "918:           p4 = nKey;",
          "919:         }",
          "920:         sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, p3, p4);",
          "",
          "[Added Lines]",
          "922:         sqlite3VdbeAddOp4Int(v, OP_NotFound,iDataCur,labelContinue,regKey,nKey);",
          "",
          "---------------"
        ],
        "test/upfrom2.test||test/upfrom2.test": [
          "File: test/upfrom2.test -> test/upfrom2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   UPDATE t1 SET z=v FROM input WHERE x=k;",
          "316: }",
          "318: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: foreach {tn sql} {",
          "319:   2 {",
          "320:     CREATE TABLE x1(a INT PRIMARY KEY, b, c) WITHOUT ROWID;",
          "321:   }",
          "322:   1 {",
          "323:     CREATE TABLE x1(a INTEGER PRIMARY KEY, b, c);",
          "324:   }",
          "325:   3 {",
          "326:     CREATE TABLE x1(a INT PRIMARY KEY, b, c);",
          "327:   }",
          "328: } {",
          "330:   reset_db",
          "331:   execsql $sql",
          "333:   do_execsql_test 4.$tn.0 {",
          "334:     INSERT INTO x1 VALUES(1, 1, 1);",
          "335:     INSERT INTO x1 VALUES(2, 2, 2);",
          "336:     INSERT INTO x1 VALUES(3, 3, 3);",
          "337:     INSERT INTO x1 VALUES(4, 4, 4);",
          "338:     INSERT INTO x1 VALUES(5, 5, 5);",
          "339:     CREATE TABLE map(o, t);",
          "340:     INSERT INTO map VALUES(3, 30), (4, 40), (1, 10);",
          "341:   }",
          "343:   do_execsql_test 4.$tn.1 {",
          "344:     UPDATE x1 SET a=t FROM map WHERE a=o;",
          "345:     SELECT * FROM x1 ORDER BY a;",
          "346:   } {2 2 2   5 5 5   10 1 1  30 3 3  40 4 4}",
          "347: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "094afffaecac0731d1d7808dca398443dab59cb2",
      "candidate_info": {
        "commit_hash": "094afffaecac0731d1d7808dca398443dab59cb2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/094afffaecac0731d1d7808dca398443dab59cb2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexedby.test",
          "test/where9.test"
        ],
        "message": "Improve the query planner so that it is better able to find full index scan plan when there is an INDEXED BY clause.\n\nFossilOrigin-Name: d901837fea1ed54de43ad59eb47c02cbfd2eb215fc57317b5ea8c22a7df947c4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexedby.test||test/indexedby.test",
          "test/where9.test||test/where9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c6b7833ac7d9cc75cb45d5e8041367ebd6f197f776766e6143535c227fc72a20",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3057:       if( b",
          "3058:        || !HasRowid(pTab)",
          "3059:        || pProbe->pPartIdxWhere!=0",
          "3060:        || ( m==0",
          "3061:          && pProbe->bUnordered==0",
          "3062:          && (pProbe->szIdxRow<pTab->szTabRow)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3061:        || pSrc->fg.isIndexedBy",
          "",
          "---------------"
        ],
        "test/indexedby.test||test/indexedby.test": [
          "File: test/indexedby.test -> test/indexedby.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: # an error.",
          "96: do_test indexedby-2.4.1 {",
          "97:   catchsql { SELECT b FROM t1 INDEXED BY i1 WHERE b = 'two' }",
          "100: do_test indexedby-2.5 {",
          "101:   catchsql { SELECT * FROM t1 INDEXED BY i5 WHERE a = 'one' AND b = 'two'}",
          "",
          "[Removed Lines]",
          "98: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "98: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: } {SEARCH TABLE t1 USING INDEX i2 (b=?)}",
          "136: do_test indexedby-3.4 {",
          "137:   catchsql { SELECT * FROM t1 INDEXED BY i2 WHERE a = 'one' }",
          "139: do_test indexedby-3.5 {",
          "140:   catchsql { SELECT * FROM t1 INDEXED BY i2 ORDER BY a }",
          "142: do_test indexedby-3.6 {",
          "143:   catchsql { SELECT * FROM t1 INDEXED BY i1 WHERE a = 'one' }",
          "144: } {0 {}}",
          "",
          "[Removed Lines]",
          "138: } {1 {no query solution}}",
          "141: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "138: } {0 {}}",
          "141: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154: } {SEARCH TABLE t3 USING INDEX sqlite_autoindex_t3_1 (e=?)}",
          "155: do_test indexedby-3.10 {",
          "156:   catchsql { SELECT * FROM t3 INDEXED BY sqlite_autoindex_t3_1 WHERE f = 10 }",
          "158: do_test indexedby-3.11 {",
          "159:   catchsql { SELECT * FROM t3 INDEXED BY sqlite_autoindex_t3_2 WHERE f = 10 }",
          "160: } {1 {no such index: sqlite_autoindex_t3_2}}",
          "",
          "[Removed Lines]",
          "157: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "157: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:   SELECT * FROM t1 INDEXED BY i1, t2 WHERE a = c",
          "173: } {",
          "174:   QUERY PLAN",
          "177: }",
          "178: do_test indexedby-4.3 {",
          "179:   catchsql {",
          "180:     SELECT * FROM t1 INDEXED BY i1, t2 INDEXED BY i3 WHERE a=c",
          "181:   }",
          "183: do_test indexedby-4.4 {",
          "184:   catchsql {",
          "185:     SELECT * FROM t2 INDEXED BY i3, t1 INDEXED BY i1 WHERE a=c",
          "186:   }",
          "189: # Test embedding an INDEXED BY in a CREATE VIEW statement. This block",
          "190: # also tests that nothing bad happens if an index refered to by",
          "",
          "[Removed Lines]",
          "175:   |--SCAN TABLE t2",
          "176:   `--SEARCH TABLE t1 USING INDEX i1 (a=?)",
          "182: } {1 {no query solution}}",
          "187: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "175:   |--SCAN TABLE t1 USING INDEX i1",
          "176:   `--SEARCH TABLE t2 USING INDEX i3 (c=?)",
          "182: } {0 {}}",
          "187: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:   # Recreate index i1 in such a way as it cannot be used by the view query.",
          "206:   execsql { CREATE INDEX i1 ON t1(b) }",
          "207:   catchsql { SELECT * FROM v2 }",
          "209: do_test indexedby-5.5 {",
          "210:   # Drop and recreate index i1 again. This time, create it so that it can",
          "211:   # be used by the query.",
          "",
          "[Removed Lines]",
          "208: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "208: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245: } {SEARCH TABLE t1 USING INDEX i2 (b=?)}",
          "246: do_test indexedby-7.6 {",
          "247:   catchsql { DELETE FROM t1 INDEXED BY i2 WHERE a = 5}",
          "250: # Test that \"INDEXED BY\" can be used in an UPDATE statement.",
          "251: #",
          "",
          "[Removed Lines]",
          "248: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "248: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "266: } {SEARCH TABLE t1 USING INDEX i2 (b=?)}",
          "267: do_test indexedby-8.6 {",
          "268:   catchsql { UPDATE t1 INDEXED BY i2 SET rowid=rowid+1 WHERE a = 5}",
          "271: # Test that bug #3560 is fixed.",
          "272: #",
          "",
          "[Removed Lines]",
          "269: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "269: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284:     joinme as j indexed by joinme_id_text_idx",
          "285:     on ( m.id  = j.id_int)",
          "286:   }",
          "288: do_test indexedby-9.3 {",
          "289:   catchsql { select * from maintable, joinme INDEXED by joinme_id_text_idx }",
          "292: # Make sure we can still create tables, indices, and columns whose name",
          "293: # is \"indexed\".",
          "",
          "[Removed Lines]",
          "287: } {1 {no query solution}}",
          "290: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "287: } {0 {}}",
          "290: } {0 {}}",
          "",
          "---------------"
        ],
        "test/where9.test||test/where9.test": [
          "File: test/where9.test -> test/where9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:        AND (c=31031 OR d IS NULL)",
          "427:      ORDER BY +a",
          "428:   }",
          "430: do_test where9-4.6 {",
          "431:   count_steps {",
          "432:     SELECT a FROM t1 NOT INDEXED",
          "",
          "[Removed Lines]",
          "429: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "429: } {0 {92 93 97}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:        AND (c=31031 OR d IS NULL)",
          "443:      ORDER BY +a",
          "444:   }",
          "446: do_test where9-4.8 {",
          "447:   catchsql {",
          "448:     SELECT a FROM t1 INDEXED BY t1d",
          "",
          "[Removed Lines]",
          "445: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "445: } {0 {92 93 97}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "450:        AND (c=31031 OR d IS NULL)",
          "451:      ORDER BY +a",
          "452:   }",
          "455: # The (c=31031 OR d IS NULL) clause is preferred over b>1000 because",
          "456: # the former is an equality test which is expected to return fewer rows.",
          "",
          "[Removed Lines]",
          "453: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "453: } {0 {92 93 97}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "776:         OR (b NOT NULL AND c IS NULL AND d NOT NULL)",
          "777:         OR (b NOT NULL AND c NOT NULL AND d IS NULL)",
          "778:   }",
          "780: do_test where9-6.8.2 {",
          "781:   catchsql {",
          "782:     UPDATE t1 INDEXED BY t1b SET a=a+100",
          "",
          "[Removed Lines]",
          "779: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "779: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "784:         OR (b NOT NULL AND c IS NULL AND d NOT NULL)",
          "785:         OR (b NOT NULL AND c NOT NULL AND d IS NULL)",
          "786:   }",
          "789: set solution_possible 0",
          "790: ifcapable stat4 {",
          "",
          "[Removed Lines]",
          "787: } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "787: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "818:           OR (b NOT NULL AND c IS NULL AND d NOT NULL)",
          "819:           OR (b NOT NULL AND c NOT NULL AND d IS NULL)",
          "820:     }",
          "822:   do_test where9-6.8.4 {",
          "823:     catchsql {",
          "824:       DELETE FROM t1 INDEXED BY t1b",
          "",
          "[Removed Lines]",
          "821:   } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "821:   } {0 {}}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "826:           OR (b NOT NULL AND c IS NULL AND d NOT NULL)",
          "827:           OR (b NOT NULL AND c NOT NULL AND d IS NULL)",
          "828:     }",
          "830: }",
          "831: ############################################################################",
          "832: # Test cases where terms inside an OR series are combined with AND terms",
          "",
          "[Removed Lines]",
          "829:   } {1 {no query solution}}",
          "",
          "[Added Lines]",
          "829:   } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5f0e4057895bf48f78f5f1a43b561621fea76cf",
      "candidate_info": {
        "commit_hash": "b5f0e4057895bf48f78f5f1a43b561621fea76cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b5f0e4057895bf48f78f5f1a43b561621fea76cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/enc2.test"
        ],
        "message": "Do not allow the \"PRAGMA encoding\" statement to change the database encoding if TEMP content exists, or content in any other attached database.  Formerly, encoding changes were allowed if just the main database file was empty.  Ticket [a08879a4a476eea9].\n\nFossilOrigin-Name: 03b003c988d27f3aa1b1e44972ee5a3c7e44ad667ec7f2b8a31d0411c66583d3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/enc2.test||test/enc2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3d7434a9d85dae9135473d1c58c22ac01a282e654807aa10be9b39f127291594",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1831:         for(pEnc=&encnames[0]; pEnc->zName; pEnc++){",
          "1832:           if( 0==sqlite3StrICmp(zRight, pEnc->zName) ){",
          "1833:             SCHEMA_ENC(db) = ENC(db) =",
          "",
          "[Removed Lines]",
          "1827:       if(",
          "1828:         !(DbHasProperty(db, 0, DB_SchemaLoaded)) ||",
          "1829:         DbHasProperty(db, 0, DB_Empty)",
          "1830:       ){",
          "",
          "[Added Lines]",
          "1829:       for(i=0; i<db->nDb; i++){",
          "1830:         if( db->aDb[i].pBt!=0",
          "1831:          && DbHasProperty(db,i,DB_SchemaLoaded)",
          "1832:          && !DbHasProperty(db,i,DB_Empty)",
          "1833:         ){",
          "1834:           canChangeEnc = 0;",
          "1835:         }",
          "1836:       }",
          "1837:       if( canChangeEnc ){",
          "",
          "---------------"
        ],
        "test/enc2.test||test/enc2.test": [
          "File: test/enc2.test -> test/enc2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # various suported unicode encodings (UTF-8, UTF-16, UTF-16le and",
          "14: # UTF-16be).",
          "15: #",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "16: # $Id: enc2.test,v 1.29 2007/10/09 08:29:32 danielk1977 Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:   }",
          "553: } {t1 t2}",
          "555: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554: # 2020-01-15 ticket a08879a4a476eea9",
          "555: # Do not allow a database connection encoding change unless *all*",
          "556: # attached databases are empty.",
          "557: #",
          "558: reset_db",
          "559: do_execsql_test enc2-11.10 {",
          "560:   PRAGMA encoding=UTF8;",
          "561:   CREATE TEMP TABLE t1(x);",
          "562:   INSERT INTO t1 VALUES('this is a test');",
          "563:   PRAGMA encoding=UTF16;",
          "564:   SELECT * FROM t1;",
          "565: } {{this is a test}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}