{
  "cve_id": "CVE-2011-3638",
  "cve_desc": "fs/ext4/extents.c in the Linux kernel before 3.0 does not mark a modified extent as dirty in certain cases of extent splitting, which allows local users to cause a denial of service (system crash) via vectors involving ext4 umount and mount operations.",
  "repo": "torvalds/linux",
  "patch_hash": "667eff35a1f56fa74ce98a0c7c29a40adc1ba4e3",
  "patch_info": {
    "commit_hash": "667eff35a1f56fa74ce98a0c7c29a40adc1ba4e3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/667eff35a1f56fa74ce98a0c7c29a40adc1ba4e3",
    "files": [
      "fs/ext4/extents.c"
    ],
    "message": "ext4: reimplement convert and split_unwritten\n\nReimplement ext4_ext_convert_to_initialized() and\next4_split_unwritten_extents() using ext4_split_extent()\n\nSigned-off-by: Yongqiang Yang <xiaoqiangnk@gmail.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nTested-by: Allison Henderson <achender@linux.vnet.ibm.com>",
    "before_after_code_files": [
      "fs/ext4/extents.c||fs/ext4/extents.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/extents.c||fs/ext4/extents.c": [
      "File: fs/ext4/extents.c -> fs/ext4/extents.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2757:         struct ext4_map_blocks *map,",
      "2758:         struct ext4_ext_path *path)",
      "2759: {",
      "2765:  ext4_lblk_t ee_block, eof_block;",
      "2766:  unsigned int allocated, ee_len, depth;",
      "2768:  int err = 0;",
      "2772:  ext_debug(\"ext4_ext_convert_to_initialized: inode %lu, logical\"",
      "2773:   \"block %llu, max_blocks %u\\n\", inode->i_ino,",
      "",
      "[Removed Lines]",
      "2760:  struct ext4_extent *ex, newex, orig_ex;",
      "2761:  struct ext4_extent *ex1 = NULL;",
      "2762:  struct ext4_extent *ex2 = NULL;",
      "2763:  struct ext4_extent *ex3 = NULL;",
      "2764:  struct ext4_extent_header *eh;",
      "2767:  ext4_fsblk_t newblock;",
      "2769:  int ret = 0;",
      "2770:  int may_zeroout;",
      "",
      "[Added Lines]",
      "2760:  struct ext4_map_blocks split_map;",
      "2761:  struct ext4_extent zero_ex;",
      "2762:  struct ext4_extent *ex;",
      "2766:  int split_flag = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2779:   eof_block = map->m_lblk + map->m_len;",
      "2781:  depth = ext_depth(inode);",
      "2783:  ex = path[depth].p_ext;",
      "2784:  ee_block = le32_to_cpu(ex->ee_block);",
      "2785:  ee_len = ext4_ext_get_actual_len(ex);",
      "2786:  allocated = ee_len - (map->m_lblk - ee_block);",
      "2806:   if (err)",
      "2945:    goto out;",
      "2952:   err = ext4_ext_get_access(handle, inode, path + depth);",
      "2953:   if (err)",
      "2954:    goto out;",
      "3013:  }",
      "3023:    if (err)",
      "3024:     goto out;",
      "3025:   }",
      "3026:  }",
      "3045: out:",
      "3047:  return err ? err : allocated;",
      "3056: }",
      "",
      "[Removed Lines]",
      "2782:  eh = path[depth].p_hdr;",
      "2787:  newblock = map->m_lblk - ee_block + ext4_ext_pblock(ex);",
      "2789:  ex2 = ex;",
      "2790:  orig_ex.ee_block = ex->ee_block;",
      "2791:  orig_ex.ee_len   = cpu_to_le16(ee_len);",
      "2792:  ext4_ext_store_pblock(&orig_ex, ext4_ext_pblock(ex));",
      "2798:  may_zeroout = ee_block + ee_len <= eof_block;",
      "2800:  err = ext4_ext_get_access(handle, inode, path + depth);",
      "2801:  if (err)",
      "2802:   goto out;",
      "2804:  if (ee_len <= 2*EXT4_EXT_ZERO_LEN && may_zeroout) {",
      "2805:   err =  ext4_ext_zeroout(inode, &orig_ex);",
      "2807:    goto fix_extent_len;",
      "2809:   ex->ee_block = orig_ex.ee_block;",
      "2810:   ex->ee_len   = orig_ex.ee_len;",
      "2811:   ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "2812:   ext4_ext_dirty(handle, inode, path + depth);",
      "2814:   return allocated;",
      "2815:  }",
      "2818:  if (map->m_lblk > ee_block) {",
      "2819:   ex1 = ex;",
      "2820:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
      "2821:   ext4_ext_mark_uninitialized(ex1);",
      "2822:   ex2 = &newex;",
      "2823:  }",
      "2829:  if (!ex1 && allocated > map->m_len)",
      "2830:   ex2->ee_len = cpu_to_le16(map->m_len);",
      "2832:  if (allocated > map->m_len) {",
      "2833:   unsigned int newdepth;",
      "2835:   if (allocated <= EXT4_EXT_ZERO_LEN && may_zeroout) {",
      "2843:    ex->ee_block = orig_ex.ee_block;",
      "2844:    ex->ee_len   = cpu_to_le16(ee_len - allocated);",
      "2845:    ext4_ext_mark_uninitialized(ex);",
      "2846:    ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "2847:    ext4_ext_dirty(handle, inode, path + depth);",
      "2849:    ex3 = &newex;",
      "2850:    ex3->ee_block = cpu_to_le32(map->m_lblk);",
      "2851:    ext4_ext_store_pblock(ex3, newblock);",
      "2852:    ex3->ee_len = cpu_to_le16(allocated);",
      "2853:    err = ext4_ext_insert_extent(handle, inode, path,",
      "2854:        ex3, 0);",
      "2855:    if (err == -ENOSPC) {",
      "2856:     err =  ext4_ext_zeroout(inode, &orig_ex);",
      "2857:     if (err)",
      "2858:      goto fix_extent_len;",
      "2859:     ex->ee_block = orig_ex.ee_block;",
      "2860:     ex->ee_len   = orig_ex.ee_len;",
      "2861:     ext4_ext_store_pblock(ex,",
      "2862:      ext4_ext_pblock(&orig_ex));",
      "2863:     ext4_ext_dirty(handle, inode, path + depth);",
      "2865:     return allocated;",
      "2867:    } else if (err)",
      "2868:     goto fix_extent_len;",
      "2877:    err =  ext4_ext_zeroout(inode, ex3);",
      "2878:    if (err) {",
      "2884:     depth = ext_depth(inode);",
      "2885:     ext4_ext_drop_refs(path);",
      "2886:     path = ext4_ext_find_extent(inode, map->m_lblk,",
      "2887:            path);",
      "2888:     if (IS_ERR(path)) {",
      "2889:      err = PTR_ERR(path);",
      "2890:      return err;",
      "2891:     }",
      "2893:     ex = path[depth].p_ext;",
      "2894:     err = ext4_ext_get_access(handle, inode,",
      "2895:         path + depth);",
      "2896:     if (err)",
      "2897:      return err;",
      "2898:     ext4_ext_mark_uninitialized(ex);",
      "2899:     ext4_ext_dirty(handle, inode, path + depth);",
      "2900:     return err;",
      "2901:    }",
      "2904:    return allocated;",
      "2905:   }",
      "2906:   ex3 = &newex;",
      "2907:   ex3->ee_block = cpu_to_le32(map->m_lblk + map->m_len);",
      "2908:   ext4_ext_store_pblock(ex3, newblock + map->m_len);",
      "2909:   ex3->ee_len = cpu_to_le16(allocated - map->m_len);",
      "2910:   ext4_ext_mark_uninitialized(ex3);",
      "2911:   err = ext4_ext_insert_extent(handle, inode, path, ex3, 0);",
      "2912:   if (err == -ENOSPC && may_zeroout) {",
      "2913:    err =  ext4_ext_zeroout(inode, &orig_ex);",
      "2914:    if (err)",
      "2915:     goto fix_extent_len;",
      "2917:    ex->ee_block = orig_ex.ee_block;",
      "2918:    ex->ee_len   = orig_ex.ee_len;",
      "2919:    ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "2920:    ext4_ext_dirty(handle, inode, path + depth);",
      "2923:    return allocated;",
      "2925:   } else if (err)",
      "2926:    goto fix_extent_len;",
      "2931:   newdepth = ext_depth(inode);",
      "2936:   ee_len -= ext4_ext_get_actual_len(ex3);",
      "2937:   orig_ex.ee_len = cpu_to_le16(ee_len);",
      "2938:   may_zeroout = ee_block + ee_len <= eof_block;",
      "2940:   depth = newdepth;",
      "2941:   ext4_ext_drop_refs(path);",
      "2942:   path = ext4_ext_find_extent(inode, map->m_lblk, path);",
      "2943:   if (IS_ERR(path)) {",
      "2944:    err = PTR_ERR(path);",
      "2946:   }",
      "2947:   eh = path[depth].p_hdr;",
      "2948:   ex = path[depth].p_ext;",
      "2949:   if (ex2 != &newex)",
      "2950:    ex2 = ex;",
      "2956:   allocated = map->m_len;",
      "2962:   if (le16_to_cpu(orig_ex.ee_len) <= EXT4_EXT_ZERO_LEN &&",
      "2963:    map->m_lblk != ee_block && may_zeroout) {",
      "2964:    err =  ext4_ext_zeroout(inode, &orig_ex);",
      "2965:    if (err)",
      "2966:     goto fix_extent_len;",
      "2968:    ex->ee_block = orig_ex.ee_block;",
      "2969:    ex->ee_len   = orig_ex.ee_len;",
      "2970:    ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "2971:    ext4_ext_dirty(handle, inode, path + depth);",
      "2974:    return allocated;",
      "2975:   }",
      "2976:  }",
      "2982:  if (ex1 && ex1 != ex) {",
      "2983:   ex1 = ex;",
      "2984:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
      "2985:   ext4_ext_mark_uninitialized(ex1);",
      "2986:   ex2 = &newex;",
      "2987:  }",
      "2989:  ex2->ee_block = cpu_to_le32(map->m_lblk);",
      "2990:  ext4_ext_store_pblock(ex2, newblock);",
      "2991:  ex2->ee_len = cpu_to_le16(allocated);",
      "2992:  if (ex2 != ex)",
      "2993:   goto insert;",
      "3000:  if (ex2 > EXT_FIRST_EXTENT(eh)) {",
      "3005:   ret = ext4_ext_try_to_merge(inode, path, ex2 - 1);",
      "3006:   if (ret) {",
      "3007:    err = ext4_ext_correct_indexes(handle, inode, path);",
      "3008:    if (err)",
      "3009:     goto out;",
      "3010:    depth = ext_depth(inode);",
      "3011:    ex2--;",
      "3012:   }",
      "3019:  if (!ex3) {",
      "3020:   ret = ext4_ext_try_to_merge(inode, path, ex2);",
      "3021:   if (ret) {",
      "3022:    err = ext4_ext_correct_indexes(handle, inode, path);",
      "3028:  err = ext4_ext_dirty(handle, inode, path + depth);",
      "3029:  goto out;",
      "3030: insert:",
      "3031:  err = ext4_ext_insert_extent(handle, inode, path, &newex, 0);",
      "3032:  if (err == -ENOSPC && may_zeroout) {",
      "3033:   err =  ext4_ext_zeroout(inode, &orig_ex);",
      "3034:   if (err)",
      "3035:    goto fix_extent_len;",
      "3037:   ex->ee_block = orig_ex.ee_block;",
      "3038:   ex->ee_len   = orig_ex.ee_len;",
      "3039:   ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "3040:   ext4_ext_dirty(handle, inode, path + depth);",
      "3042:   return allocated;",
      "3043:  } else if (err)",
      "3044:   goto fix_extent_len;",
      "3046:  ext4_ext_show_leaf(inode, path);",
      "3049: fix_extent_len:",
      "3050:  ex->ee_block = orig_ex.ee_block;",
      "3051:  ex->ee_len   = orig_ex.ee_len;",
      "3052:  ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "3053:  ext4_ext_mark_uninitialized(ex);",
      "3054:  ext4_ext_dirty(handle, inode, path + depth);",
      "3055:  return err;",
      "",
      "[Added Lines]",
      "2783:  WARN_ON(map->m_lblk < ee_block);",
      "2788:  split_flag |= ee_block + ee_len <= eof_block ? EXT4_EXT_MAY_ZEROOUT : 0;",
      "2791:  if (ee_len <= 2*EXT4_EXT_ZERO_LEN &&",
      "2792:      (EXT4_EXT_MAY_ZEROOUT & split_flag)) {",
      "2793:   err = ext4_ext_zeroout(inode, ex);",
      "2800:   ext4_ext_mark_initialized(ex);",
      "2801:   ext4_ext_try_to_merge(inode, path, ex);",
      "2802:   err = ext4_ext_dirty(handle, inode, path + depth);",
      "2803:   goto out;",
      "2813:  split_map.m_lblk = map->m_lblk;",
      "2814:  split_map.m_len = map->m_len;",
      "2816:  if (allocated > map->m_len) {",
      "2817:   if (allocated <= EXT4_EXT_ZERO_LEN &&",
      "2818:       (EXT4_EXT_MAY_ZEROOUT & split_flag)) {",
      "2820:    zero_ex.ee_block =",
      "2821:       cpu_to_le32(map->m_lblk + map->m_len);",
      "2822:    zero_ex.ee_len = cpu_to_le16(allocated - map->m_len);",
      "2823:    ext4_ext_store_pblock(&zero_ex,",
      "2824:     ext4_ext_pblock(ex) + map->m_lblk - ee_block);",
      "2825:    err = ext4_ext_zeroout(inode, &zero_ex);",
      "2828:    split_map.m_lblk = map->m_lblk;",
      "2829:    split_map.m_len = allocated;",
      "2830:   } else if ((map->m_lblk - ee_block + map->m_len <",
      "2831:       EXT4_EXT_ZERO_LEN) &&",
      "2832:       (EXT4_EXT_MAY_ZEROOUT & split_flag)) {",
      "2834:    if (map->m_lblk != ee_block) {",
      "2835:     zero_ex.ee_block = ex->ee_block;",
      "2836:     zero_ex.ee_len = cpu_to_le16(map->m_lblk -",
      "2837:        ee_block);",
      "2838:     ext4_ext_store_pblock(&zero_ex,",
      "2839:             ext4_ext_pblock(ex));",
      "2840:     err = ext4_ext_zeroout(inode, &zero_ex);",
      "2841:     if (err)",
      "2842:      goto out;",
      "2843:    }",
      "2845:    allocated = map->m_lblk - ee_block + map->m_len;",
      "2847:    split_map.m_lblk = ee_block;",
      "2848:    split_map.m_len = allocated;",
      "2852:  allocated = ext4_split_extent(handle, inode, path,",
      "2853:            &split_map, split_flag, 0);",
      "2854:  if (allocated < 0)",
      "2855:   err = allocated;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3083:      struct ext4_ext_path *path,",
      "3084:      int flags)",
      "3085: {",
      "3096:  ext_debug(\"ext4_split_unwritten_extents: inode %lu, logical\"",
      "3097:   \"block %llu, max_blocks %u\\n\", inode->i_ino,",
      "",
      "[Removed Lines]",
      "3086:  struct ext4_extent *ex, newex, orig_ex;",
      "3087:  struct ext4_extent *ex1 = NULL;",
      "3088:  struct ext4_extent *ex2 = NULL;",
      "3089:  struct ext4_extent *ex3 = NULL;",
      "3090:  ext4_lblk_t ee_block, eof_block;",
      "3091:  unsigned int allocated, ee_len, depth;",
      "3092:  ext4_fsblk_t newblock;",
      "3093:  int err = 0;",
      "3094:  int may_zeroout;",
      "",
      "[Added Lines]",
      "2889:  ext4_lblk_t eof_block;",
      "2890:  ext4_lblk_t ee_block;",
      "2891:  struct ext4_extent *ex;",
      "2892:  unsigned int ee_len;",
      "2893:  int split_flag = 0, depth;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3101:   inode->i_sb->s_blocksize_bits;",
      "3102:  if (eof_block < map->m_lblk + map->m_len)",
      "3103:   eof_block = map->m_lblk + map->m_len;",
      "3253: }",
      "3255: static int ext4_convert_unwritten_extents_endio(handle_t *handle,",
      "",
      "[Removed Lines]",
      "3105:  depth = ext_depth(inode);",
      "3106:  ex = path[depth].p_ext;",
      "3107:  ee_block = le32_to_cpu(ex->ee_block);",
      "3108:  ee_len = ext4_ext_get_actual_len(ex);",
      "3109:  allocated = ee_len - (map->m_lblk - ee_block);",
      "3110:  newblock = map->m_lblk - ee_block + ext4_ext_pblock(ex);",
      "3112:  ex2 = ex;",
      "3113:  orig_ex.ee_block = ex->ee_block;",
      "3114:  orig_ex.ee_len   = cpu_to_le16(ee_len);",
      "3115:  ext4_ext_store_pblock(&orig_ex, ext4_ext_pblock(ex));",
      "3121:  may_zeroout = ee_block + ee_len <= eof_block;",
      "3128:  if ((map->m_lblk == ee_block) && (allocated <= map->m_len))",
      "3129:   return allocated;",
      "3131:  err = ext4_ext_get_access(handle, inode, path + depth);",
      "3132:  if (err)",
      "3133:   goto out;",
      "3135:  if (map->m_lblk > ee_block) {",
      "3136:   ex1 = ex;",
      "3137:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
      "3138:   ext4_ext_mark_uninitialized(ex1);",
      "3139:   ex2 = &newex;",
      "3140:  }",
      "3146:  if (!ex1 && allocated > map->m_len)",
      "3147:   ex2->ee_len = cpu_to_le16(map->m_len);",
      "3149:  if (allocated > map->m_len) {",
      "3150:   unsigned int newdepth;",
      "3151:   ex3 = &newex;",
      "3152:   ex3->ee_block = cpu_to_le32(map->m_lblk + map->m_len);",
      "3153:   ext4_ext_store_pblock(ex3, newblock + map->m_len);",
      "3154:   ex3->ee_len = cpu_to_le16(allocated - map->m_len);",
      "3155:   ext4_ext_mark_uninitialized(ex3);",
      "3156:   err = ext4_ext_insert_extent(handle, inode, path, ex3, flags);",
      "3157:   if (err == -ENOSPC && may_zeroout) {",
      "3158:    err =  ext4_ext_zeroout(inode, &orig_ex);",
      "3159:    if (err)",
      "3160:     goto fix_extent_len;",
      "3162:    ex->ee_block = orig_ex.ee_block;",
      "3163:    ex->ee_len   = orig_ex.ee_len;",
      "3164:    ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "3165:    ext4_ext_dirty(handle, inode, path + depth);",
      "3168:    return allocated;",
      "3170:   } else if (err)",
      "3171:    goto fix_extent_len;",
      "3176:   newdepth = ext_depth(inode);",
      "3181:   ee_len -= ext4_ext_get_actual_len(ex3);",
      "3182:   orig_ex.ee_len = cpu_to_le16(ee_len);",
      "3183:   may_zeroout = ee_block + ee_len <= eof_block;",
      "3185:   depth = newdepth;",
      "3186:   ext4_ext_drop_refs(path);",
      "3187:   path = ext4_ext_find_extent(inode, map->m_lblk, path);",
      "3188:   if (IS_ERR(path)) {",
      "3189:    err = PTR_ERR(path);",
      "3190:    goto out;",
      "3191:   }",
      "3192:   ex = path[depth].p_ext;",
      "3193:   if (ex2 != &newex)",
      "3194:    ex2 = ex;",
      "3196:   err = ext4_ext_get_access(handle, inode, path + depth);",
      "3197:   if (err)",
      "3198:    goto out;",
      "3200:   allocated = map->m_len;",
      "3201:  }",
      "3207:  if (ex1 && ex1 != ex) {",
      "3208:   ex1 = ex;",
      "3209:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
      "3210:   ext4_ext_mark_uninitialized(ex1);",
      "3211:   ex2 = &newex;",
      "3212:  }",
      "3217:  ex2->ee_block = cpu_to_le32(map->m_lblk);",
      "3218:  ext4_ext_store_pblock(ex2, newblock);",
      "3219:  ex2->ee_len = cpu_to_le16(allocated);",
      "3220:  ext4_ext_mark_uninitialized(ex2);",
      "3221:  if (ex2 != ex)",
      "3222:   goto insert;",
      "3224:  err = ext4_ext_dirty(handle, inode, path + depth);",
      "3225:  ext_debug(\"out here\\n\");",
      "3226:  goto out;",
      "3227: insert:",
      "3228:  err = ext4_ext_insert_extent(handle, inode, path, &newex, flags);",
      "3229:  if (err == -ENOSPC && may_zeroout) {",
      "3230:   err =  ext4_ext_zeroout(inode, &orig_ex);",
      "3231:   if (err)",
      "3232:    goto fix_extent_len;",
      "3234:   ex->ee_block = orig_ex.ee_block;",
      "3235:   ex->ee_len   = orig_ex.ee_len;",
      "3236:   ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "3237:   ext4_ext_dirty(handle, inode, path + depth);",
      "3239:   return allocated;",
      "3240:  } else if (err)",
      "3241:   goto fix_extent_len;",
      "3242: out:",
      "3243:  ext4_ext_show_leaf(inode, path);",
      "3244:  return err ? err : allocated;",
      "3246: fix_extent_len:",
      "3247:  ex->ee_block = orig_ex.ee_block;",
      "3248:  ex->ee_len   = orig_ex.ee_len;",
      "3249:  ext4_ext_store_pblock(ex, ext4_ext_pblock(&orig_ex));",
      "3250:  ext4_ext_mark_uninitialized(ex);",
      "3251:  ext4_ext_dirty(handle, inode, path + depth);",
      "3252:  return err;",
      "",
      "[Added Lines]",
      "2907:  depth = ext_depth(inode);",
      "2908:  ex = path[depth].p_ext;",
      "2909:  ee_block = le32_to_cpu(ex->ee_block);",
      "2910:  ee_len = ext4_ext_get_actual_len(ex);",
      "2912:  split_flag |= ee_block + ee_len <= eof_block ? EXT4_EXT_MAY_ZEROOUT : 0;",
      "2913:  split_flag |= EXT4_EXT_MARK_UNINIT2;",
      "2915:  flags |= EXT4_GET_BLOCKS_PRE_IO;",
      "2916:  return ext4_split_extent(handle, inode, path, map, split_flag, flags);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d002ebf1d8daa5a317645b1c4a3a0b7ea2abc9ac",
      "candidate_info": {
        "commit_hash": "d002ebf1d8daa5a317645b1c4a3a0b7ea2abc9ac",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d002ebf1d8daa5a317645b1c4a3a0b7ea2abc9ac",
        "files": [
          "fs/ext4/extents.c"
        ],
        "message": "ext4: don't pass entire map to check_eofblocks_fl\n\nSince check_eofblocks_fl() only uses the m_lblk portion of the map\nstructure, we may as well pass that directly, rather than passing the\nentire map, which IMHO obfuscates what parameters check_eofblocks_fl()\ncares about.  Not a big deal, but seems tidier and less confusing, to\nme.\n\nSigned-off-by: Eric Sandeen <sandeen@redhat.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3104: static int check_eofblocks_fl(handle_t *handle, struct inode *inode,",
          "3106:          struct ext4_ext_path *path,",
          "3107:          unsigned int len)",
          "3108: {",
          "",
          "[Removed Lines]",
          "3105:          struct ext4_map_blocks *map,",
          "",
          "[Added Lines]",
          "3105:          ext4_lblk_t lblk,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3136:      ext4_ext_get_actual_len(last_ex))",
          "3137:   return 0;",
          "",
          "[Removed Lines]",
          "3135:  if (map->m_lblk + len < le32_to_cpu(last_ex->ee_block) +",
          "",
          "[Added Lines]",
          "3135:  if (lblk + len < le32_to_cpu(last_ex->ee_block) +",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3188:        path);",
          "3189:   if (ret >= 0) {",
          "3190:    ext4_update_inode_fsync_trans(handle, inode, 1);",
          "3193:   } else",
          "3194:    err = ret;",
          "3195:   goto out2;",
          "",
          "[Removed Lines]",
          "3191:    err = check_eofblocks_fl(handle, inode, map, path,",
          "3192:        map->m_len);",
          "",
          "[Added Lines]",
          "3191:    err = check_eofblocks_fl(handle, inode, map->m_lblk,",
          "3192:        path, map->m_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3219:  ret = ext4_ext_convert_to_initialized(handle, inode, map, path);",
          "3220:  if (ret >= 0) {",
          "3221:   ext4_update_inode_fsync_trans(handle, inode, 1);",
          "3223:   if (err < 0)",
          "3224:    goto out2;",
          "3225:  }",
          "",
          "[Removed Lines]",
          "3222:   err = check_eofblocks_fl(handle, inode, map, path, map->m_len);",
          "",
          "[Added Lines]",
          "3222:   err = check_eofblocks_fl(handle, inode, map->m_lblk, path,",
          "3223:       map->m_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3472:    map->m_flags |= EXT4_MAP_UNINIT;",
          "3473:  }",
          "3476:  if (err)",
          "3477:   goto out2;",
          "",
          "[Removed Lines]",
          "3475:  err = check_eofblocks_fl(handle, inode, map, path, ar.len);",
          "",
          "[Added Lines]",
          "3476:  err = check_eofblocks_fl(handle, inode, map->m_lblk, path, ar.len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65922cb5ced76ba7182e955d4aada96f93446b1a",
      "candidate_info": {
        "commit_hash": "65922cb5ced76ba7182e955d4aada96f93446b1a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/65922cb5ced76ba7182e955d4aada96f93446b1a",
        "files": [
          "fs/ext4/extents.c"
        ],
        "message": "ext4: unused variables cleanup in fs/ext4/extents.c\n\next4 extents cleanup:\n\n  . remove unused `*ex' from check_eofblocks_fl\n  . remove unused `*eh' from ext4_ext_map_blocks\n\n\nSigned-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3112: {",
          "3113:  int i, depth;",
          "3114:  struct ext4_extent_header *eh;",
          "3117:  if (!ext4_test_inode_flag(inode, EXT4_INODE_EOFBLOCKS))",
          "3118:   return 0;",
          "3120:  depth = ext_depth(inode);",
          "3121:  eh = path[depth].p_hdr;",
          "3124:  if (unlikely(!eh->eh_entries)) {",
          "3125:   EXT4_ERROR_INODE(inode, \"eh->eh_entries == 0 and \"",
          "",
          "[Removed Lines]",
          "3115:  struct ext4_extent *ex, *last_ex;",
          "3122:  ex = path[depth].p_ext;",
          "",
          "[Added Lines]",
          "3115:  struct ext4_extent *last_ex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3299:    struct ext4_map_blocks *map, int flags)",
          "3300: {",
          "3301:  struct ext4_ext_path *path = NULL;",
          "3303:  struct ext4_extent newex, *ex;",
          "3304:  ext4_fsblk_t newblock = 0;",
          "3305:  int err = 0, depth, ret;",
          "",
          "[Removed Lines]",
          "3302:  struct ext4_extent_header *eh;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3357:   err = -EIO;",
          "3358:   goto out2;",
          "3359:  }",
          "3362:  ex = path[depth].p_ext;",
          "3363:  if (ex) {",
          "",
          "[Removed Lines]",
          "3360:  eh = path[depth].p_hdr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f70f362b4a6fe47c239dbfb3efc0cc2c10e4f09c",
      "candidate_info": {
        "commit_hash": "f70f362b4a6fe47c239dbfb3efc0cc2c10e4f09c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f70f362b4a6fe47c239dbfb3efc0cc2c10e4f09c",
        "files": [
          "fs/ext4/extents.c"
        ],
        "message": "ext4: Avoid crashing on NULL ptr dereference on a filesystem error\n\nIf the EOFBLOCK_FL flag is set when it should not be and the inode is\nzero length, then eh_entries is zero, and ex is NULL, so dereferencing\nex to print ex->ee_block causes a kernel OOPS in\next4_ext_map_blocks().\n\nOn top of that, the error message which is printed isn't very helpful.\nSo we fix this by printing something more explanatory which doesn't\ninvolve trying to print ex->ee_block.\n\nAddresses-Google-Bug: #2655740\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3371:  if (unlikely(path[depth].p_ext == NULL && depth != 0)) {",
          "3372:   EXT4_ERROR_INODE(inode, \"bad extent address \"",
          "3375:   err = -EIO;",
          "3376:   goto out2;",
          "3377:  }",
          "",
          "[Removed Lines]",
          "3373:      \"iblock: %d, depth: %d pblock %lld\",",
          "3374:      map->m_lblk, depth, path[depth].p_block);",
          "",
          "[Added Lines]",
          "3373:      \"lblock: %lu, depth: %d pblock %lld\",",
          "3374:      (unsigned long) map->m_lblk, depth,",
          "3375:      path[depth].p_block);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3501:  if (unlikely(ext4_test_inode_flag(inode, EXT4_INODE_EOFBLOCKS))) {",
          "3502:   if (unlikely(!eh->eh_entries)) {",
          "3503:    EXT4_ERROR_INODE(inode,",
          "3506:    err = -EIO;",
          "3507:    goto out2;",
          "3508:   }",
          "",
          "[Removed Lines]",
          "3504:       \"eh->eh_entries == 0 ee_block %d\",",
          "3505:       ex->ee_block);",
          "",
          "[Added Lines]",
          "3505:       \"eh->eh_entries == 0 and \"",
          "3506:       \"EOFBLOCKS_FL set\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd018fe8234e84e05ab05d4176525817c8779cd6",
      "candidate_info": {
        "commit_hash": "fd018fe8234e84e05ab05d4176525817c8779cd6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fd018fe8234e84e05ab05d4176525817c8779cd6",
        "files": [
          "fs/ext4/extents.c"
        ],
        "message": "ext4: fix comment typo uninitized\n\nSigned-off-by: Paul Bolle <pebolle@tiscali.nl>\nReviewed-by: Jesper Juhl <jj@chaosbits.net>\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c"
        ]
      }
    },
    {
      "candidate_hash": "b05e6ae58a13b56e3e11882c1fc71948c9b29760",
      "candidate_info": {
        "commit_hash": "b05e6ae58a13b56e3e11882c1fc71948c9b29760",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b05e6ae58a13b56e3e11882c1fc71948c9b29760",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/ext4_extents.h",
          "fs/ext4/extents.c"
        ],
        "message": "ext4: drop ec_type from the ext4_ext_cache structure\n\nWe can encode the ec_type information by using ee_len == 0 to denote\nEXT4_EXT_CACHE_NO, ee_start == 0 to denote EXT4_EXT_CACHE_GAP, and if\nneither is true, then the cache type must be EXT4_EXT_CACHE_EXTENT.\nThis allows us to reduce the size of ext4_ext_inode by another 8\nbytes.  (ec_type is 4 bytes, plus another 4 bytes of padding)\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/ext4_extents.h||fs/ext4/ext4_extents.h",
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "742: struct ext4_ext_cache {",
          "743:  ext4_fsblk_t ec_start;",
          "744:  ext4_lblk_t ec_block;",
          "747: };",
          "",
          "[Removed Lines]",
          "746:  __u32  ec_type;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/ext4/ext4_extents.h||fs/ext4/ext4_extents.h": [
          "File: fs/ext4/ext4_extents.h -> fs/ext4/ext4_extents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "122: #define EXT4_EXT_CACHE_NO 0",
          "123: #define EXT4_EXT_CACHE_GAP 1",
          "124: #define EXT4_EXT_CACHE_EXTENT 2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197: static inline void",
          "198: ext4_ext_invalidate_cache(struct inode *inode)",
          "199: {",
          "201: }",
          "203: static inline void ext4_ext_mark_uninitialized(struct ext4_extent *ext)",
          "",
          "[Removed Lines]",
          "200:  EXT4_I(inode)->i_cached_extent.ec_type = EXT4_EXT_CACHE_NO;",
          "",
          "[Added Lines]",
          "196:  EXT4_I(inode)->i_cached_extent.ec_len = 0;",
          "",
          "---------------"
        ],
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1894:    cbex.ec_block = start;",
          "1895:    cbex.ec_len = end - start;",
          "1896:    cbex.ec_start = 0;",
          "1898:   } else {",
          "1899:    cbex.ec_block = le32_to_cpu(ex->ee_block);",
          "1900:    cbex.ec_len = ext4_ext_get_actual_len(ex);",
          "1901:    cbex.ec_start = ext4_ext_pblock(ex);",
          "1903:   }",
          "1905:   if (unlikely(cbex.ec_len == 0)) {",
          "",
          "[Removed Lines]",
          "1897:    cbex.ec_type = EXT4_EXT_CACHE_GAP;",
          "1902:    cbex.ec_type = EXT4_EXT_CACHE_EXTENT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1940: static void",
          "1941: ext4_ext_put_in_cache(struct inode *inode, ext4_lblk_t block,",
          "1943: {",
          "1944:  struct ext4_ext_cache *cex;",
          "1945:  BUG_ON(len == 0);",
          "1946:  spin_lock(&EXT4_I(inode)->i_block_reservation_lock);",
          "1947:  cex = &EXT4_I(inode)->i_cached_extent;",
          "1949:  cex->ec_block = block;",
          "1950:  cex->ec_len = len;",
          "1951:  cex->ec_start = start;",
          "",
          "[Removed Lines]",
          "1942:    __u32 len, ext4_fsblk_t start, int type)",
          "1948:  cex->ec_type = type;",
          "",
          "[Added Lines]",
          "1940:    __u32 len, ext4_fsblk_t start)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1998:  }",
          "2000:  ext_debug(\" -> %u:%lu\\n\", lblock, len);",
          "2002: }",
          "2004: static int",
          "2005: ext4_ext_in_cache(struct inode *inode, ext4_lblk_t block,",
          "2006:    struct ext4_extent *ex)",
          "2007: {",
          "2008:  struct ext4_ext_cache *cex;",
          "",
          "[Removed Lines]",
          "2001:  ext4_ext_put_in_cache(inode, lblock, len, 0, EXT4_EXT_CACHE_GAP);",
          "2009:  int ret = EXT4_EXT_CACHE_NO;",
          "",
          "[Added Lines]",
          "1998:  ext4_ext_put_in_cache(inode, lblock, len, 0);",
          "2009:  int ret = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2015:  cex = &EXT4_I(inode)->i_cached_extent;",
          "2019:   goto errout;",
          "2023:  if (in_range(block, cex->ec_block, cex->ec_len)) {",
          "2024:   ex->ee_block = cpu_to_le32(cex->ec_block);",
          "2025:   ext4_ext_store_pblock(ex, cex->ec_start);",
          "",
          "[Removed Lines]",
          "2018:  if (cex->ec_type == EXT4_EXT_CACHE_NO)",
          "2021:  BUG_ON(cex->ec_type != EXT4_EXT_CACHE_GAP &&",
          "2022:    cex->ec_type != EXT4_EXT_CACHE_EXTENT);",
          "",
          "[Added Lines]",
          "2018:  if (cex->ec_len == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2027:   ext_debug(\"%u cached by %u:%u:%llu\\n\",",
          "2028:     block,",
          "2029:     cex->ec_block, cex->ec_len, cex->ec_start);",
          "2031:  }",
          "2032: errout:",
          "2033:  spin_unlock(&EXT4_I(inode)->i_block_reservation_lock);",
          "",
          "[Removed Lines]",
          "2030:   ret = cex->ec_type;",
          "",
          "[Added Lines]",
          "2028:   ret = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3298:  struct ext4_extent_header *eh;",
          "3299:  struct ext4_extent newex, *ex;",
          "3300:  ext4_fsblk_t newblock;",
          "3302:  unsigned int allocated = 0;",
          "3303:  struct ext4_allocation_request ar;",
          "3304:  ext4_io_end_t *io = EXT4_I(inode)->cur_aio_dio;",
          "",
          "[Removed Lines]",
          "3301:  int err = 0, depth, ret, cache_type;",
          "",
          "[Added Lines]",
          "3299:  int err = 0, depth, ret;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3307:     map->m_lblk, map->m_len, inode->i_ino);",
          "3313:    if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "",
          "[Removed Lines]",
          "3310:  cache_type = ext4_ext_in_cache(inode, map->m_lblk, &newex);",
          "3311:  if (cache_type) {",
          "3312:   if (cache_type == EXT4_EXT_CACHE_GAP) {",
          "",
          "[Added Lines]",
          "3308:  if (ext4_ext_in_cache(inode, map->m_lblk, &newex)) {",
          "3309:   if (!newex.ee_start_lo && !newex.ee_start_hi) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3318:     goto out2;",
          "3319:    }",
          "3323:    newblock = map->m_lblk",
          "3324:        - le32_to_cpu(newex.ee_block)",
          "",
          "[Removed Lines]",
          "3321:   } else if (cache_type == EXT4_EXT_CACHE_EXTENT) {",
          "",
          "[Added Lines]",
          "3318:   } else {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3327:    allocated = ext4_ext_get_actual_len(&newex) -",
          "3328:     (map->m_lblk - le32_to_cpu(newex.ee_block));",
          "3329:    goto out;",
          "3332:   }",
          "3333:  }",
          "",
          "[Removed Lines]",
          "3330:   } else {",
          "3331:    BUG();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3380:    if (!ext4_ext_is_uninitialized(ex)) {",
          "3381:     ext4_ext_put_in_cache(inode, ee_block,",
          "3384:     goto out;",
          "3385:    }",
          "3386:    ret = ext4_ext_handle_uninitialized_extents(handle,",
          "",
          "[Removed Lines]",
          "3382:        ee_len, ee_start,",
          "3383:        EXT4_EXT_CACHE_EXTENT);",
          "",
          "[Added Lines]",
          "3377:        ee_len, ee_start);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3514:  if ((flags & EXT4_GET_BLOCKS_UNINIT_EXT) == 0) {",
          "3517:   ext4_update_inode_fsync_trans(handle, inode, 1);",
          "3518:  } else",
          "3519:   ext4_update_inode_fsync_trans(handle, inode, 0);",
          "",
          "[Removed Lines]",
          "3515:   ext4_ext_put_in_cache(inode, map->m_lblk, allocated, newblock,",
          "3516:       EXT4_EXT_CACHE_EXTENT);",
          "",
          "[Added Lines]",
          "3509:   ext4_ext_put_in_cache(inode, map->m_lblk, allocated, newblock);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3790:  logical =  (__u64)newex->ec_block << blksize_bits;",
          "3793:   pgoff_t offset;",
          "3794:   struct page *page;",
          "3795:   struct buffer_head *bh = NULL;",
          "",
          "[Removed Lines]",
          "3792:  if (newex->ec_type == EXT4_EXT_CACHE_GAP) {",
          "",
          "[Added Lines]",
          "3785:  if (newex->ec_start == 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}