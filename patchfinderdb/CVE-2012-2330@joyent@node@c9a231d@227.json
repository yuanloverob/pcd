{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db3c4efd1d95e6c7fc47b9c07216beb7029cf7bc",
      "candidate_info": {
        "commit_hash": "db3c4efd1d95e6c7fc47b9c07216beb7029cf7bc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/db3c4efd1d95e6c7fc47b9c07216beb7029cf7bc",
        "files": [
          "lib/child_process.js",
          "lib/net.js",
          "src/node.js",
          "src/node_isolate.cc"
        ],
        "message": "support for sharing streams accross isolates",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "lib/net.js||linet.js",
          "src/node.js||src/node.js",
          "src/node_isolate.cc||src/node_isolate.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: function setupChannel(target, channel) {",
          "72:   target._channel = channel;",
          "74:   var jsonBuffer = '';",
          "88:   channel.buffering = false;",
          "89:   channel.onread = function(pool, offset, length, recvHandle) {",
          "95:     if (pool) {",
          "96:       jsonBuffer += pool.toString('ascii', offset, offset + length);",
          "",
          "[Removed Lines]",
          "71:   var isWindows = process.platform === 'win32';",
          "76:   if (isWindows) {",
          "77:     var setSimultaneousAccepts = function(handle) {",
          "78:       var simultaneousAccepts = (process.env.NODE_MANY_ACCEPTS &&",
          "79:               process.env.NODE_MANY_ACCEPTS != '0') ? true : false;",
          "81:       if (handle._simultaneousAccepts != simultaneousAccepts) {",
          "82:         handle.setSimultaneousAccepts(simultaneousAccepts);",
          "83:         handle._simultaneousAccepts = simultaneousAccepts;",
          "84:       }",
          "85:     }",
          "86:   }",
          "90:     if (recvHandle && setSimultaneousAccepts) {",
          "92:       setSimultaneousAccepts(recvHandle);",
          "93:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     var buffer = Buffer(JSON.stringify(message) + '\\n');",
          "148:     var writeReq = channel.write(buffer, 0, buffer.length, sendHandle);",
          "",
          "[Removed Lines]",
          "143:     if (sendHandle && setSimultaneousAccepts) {",
          "145:       setSimultaneousAccepts(sendHandle);",
          "146:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "582:   self._handle = isolates.create(options.args, options.options);",
          "583:   if (!self._handle) throw new Error('Cannot create isolate.');",
          "586:     msg = JSON.parse('' + msg);",
          "588:   };",
          "590:   self._handle.onexit = function() {",
          "",
          "[Removed Lines]",
          "585:   self._handle.onmessage = function(msg) {",
          "587:     self.emit('message', msg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "600: };",
          "604:   if (typeof msg === 'undefined') throw new TypeError('Bad argument.');",
          "605:   if (!this._handle) throw new Error('Isolate not running.');",
          "606:   msg = JSON.stringify(msg);",
          "607:   msg = new Buffer(msg);",
          "609: };",
          "",
          "[Removed Lines]",
          "603: Isolate.prototype.send = function(msg) {",
          "608:   return this._handle.send(msg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "942: exports.isIPv6 = function(input) {",
          "943:   return exports.isIP(input) === 6;",
          "944: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     if (process.tid === 1) return;",
          "128:       if (typeof msg === 'undefined') throw new TypeError('Bad argument.');",
          "129:       msg = JSON.stringify(msg);",
          "130:       msg = new Buffer(msg);",
          "132:     };",
          "135:       msg = JSON.parse('' + msg);",
          "137:     };",
          "139:     process.exit = process._exit;",
          "",
          "[Removed Lines]",
          "127:     process.send = function(msg) {",
          "131:       return process._send(msg);",
          "134:     process._onmessage = function(msg) {",
          "136:       process.emit('message', msg);",
          "",
          "[Added Lines]",
          "126:     var net = NativeModule.require('net');",
          "129:     process.send = function(msg, sendHandle) {",
          "135:       net._setSimultaneousAccepts(sendHandle);",
          "137:       return process._send(msg, sendHandle);",
          "140:     process._onmessage = function(msg, recvHandle) {",
          "144:       net._setSimultaneousAccepts(recvHandle);",
          "146:       process.emit('message', msg, recvHandle);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:       cp._forkChild();",
          "445:       assert(process.send);",
          "446:     }",
          "447:   }",
          "",
          "[Removed Lines]",
          "442:       process.binding('tcp_wrap')",
          "",
          "[Added Lines]",
          "452:       process.binding('tcp_wrap');",
          "456:     } else if (process.tid !== 1) {",
          "460:       process.binding('tcp_wrap');",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <node_isolate.h>",
          "27: #include <node_internals.h>",
          "28: #include <node_object_wrap.h>",
          "30: #include <stdlib.h>",
          "31: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <tcp_wrap.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #define isolate_debugger_constructor NODE_VAR(isolate_debugger_constructor)",
          "38: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #define ISOLATEMESSAGE_SHARED_STREAM    0x0001",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168: struct IsolateMessage {",
          "177:   }",
          "179:   ~IsolateMessage() {",
          "181:   }",
          "183:   static void Free(char* data, void* arg) {",
          "184:     IsolateMessage* msg = static_cast<IsolateMessage*>(arg);",
          "186:     delete msg;",
          "187:   }",
          "188: };",
          "",
          "[Removed Lines]",
          "169:   size_t size_;",
          "170:   char* data_;",
          "172:   IsolateMessage(const char* data, size_t size) {",
          "174:     size_ = size;",
          "175:     data_ = new char[size];",
          "176:     memcpy(data_, data, size);",
          "180:     delete[] data_;",
          "185:     assert(data == msg->data_);",
          "",
          "[Added Lines]",
          "172:   int flags;",
          "173:   struct {",
          "174:     size_t size_;",
          "175:     char* buffer_;",
          "176:   } data_;",
          "177:   uv_stream_info_t shared_stream_info_;",
          "179:   IsolateMessage(const char* buffer, size_t size,",
          "180:                  uv_stream_info_t* shared_stream_info) {",
          "181:     flags = 0;",
          "184:     data_.size_ = size;",
          "185:     data_.buffer_ = new char[size];",
          "186:     memcpy(data_.buffer_, buffer, size);",
          "188:     if (shared_stream_info) {",
          "189:       flags |= ISOLATEMESSAGE_SHARED_STREAM;",
          "190:       shared_stream_info_ = *shared_stream_info;",
          "191:     }",
          "195:     delete[] data_.buffer_;",
          "200:     assert(data == msg->data_.buffer_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:   const char* data = Buffer::Data(obj);",
          "209:   size_t size = Buffer::Length(obj);",
          "212:   isolate->send_channel_->Send(msg);",
          "214:   return Undefined();",
          "",
          "[Removed Lines]",
          "211:   IsolateMessage* msg = new IsolateMessage(data, size);",
          "",
          "[Added Lines]",
          "226:   IsolateMessage* msg;",
          "228:   if (args[1]->IsObject()) {",
          "229:     uv_stream_info_t stream_info;",
          "231:     Local<Object> send_stream_obj = args[1]->ToObject();",
          "232:     assert(send_stream_obj->InternalFieldCount() > 0);",
          "233:     StreamWrap* send_stream_wrap = static_cast<StreamWrap*>(",
          "234:         send_stream_obj->GetPointerFromInternalField(0));",
          "235:     uv_stream_t* send_stream = send_stream_wrap->GetStream();",
          "236:     int r = uv_export(send_stream, &stream_info);",
          "237:     assert(r == 0);",
          "238:     msg = new IsolateMessage(data, size, &stream_info);",
          "239:   } else {",
          "240:     msg = new IsolateMessage(data, size, NULL);",
          "241:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:   Isolate* self = static_cast<Isolate*>(arg);",
          "232:   NODE_ISOLATE_CHECK(self);",
          "237: }",
          "",
          "[Removed Lines]",
          "234:   Buffer* buf = Buffer::New(msg->data_, msg->size_, IsolateMessage::Free, msg);",
          "235:   Handle<Value> argv[] = { buf->handle_ };",
          "236:   MakeCallback(self->globals_.process, \"_onmessage\", ARRAY_SIZE(argv), argv);",
          "",
          "[Added Lines]",
          "265:   Buffer* buf = Buffer::New(msg->data_.buffer_, msg->data_.size_,",
          "266:     IsolateMessage::Free, msg);",
          "268:   int argc = 1;",
          "269:   Handle<Value> argv[2] = {",
          "270:     buf->handle_",
          "271:   };",
          "273:   if (msg->flags & ISOLATEMESSAGE_SHARED_STREAM) {",
          "275:     Local<Object> pending_obj = TCPWrap::Instantiate();",
          "278:     assert(pending_obj->InternalFieldCount() > 0);",
          "279:     TCPWrap* pending_wrap =",
          "280:         static_cast<TCPWrap*>(pending_obj->GetPointerFromInternalField(0));",
          "282:     int r = uv_import(pending_wrap->GetStream(), &msg->shared_stream_info_);",
          "283:     assert(r == 0);",
          "285:     argv[1] = pending_obj;",
          "286:     argc++;",
          "287:   }",
          "289:   MakeCallback(self->globals_.process, \"_onmessage\", argc, argv);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "442:     NODE_ISOLATE_CHECK(parent_isolate_);",
          "443:     HandleScope scope;",
          "444:     Buffer* buf = Buffer::New(",
          "448:   }",
          "",
          "[Removed Lines]",
          "445:         msg->data_, msg->size_, IsolateMessage::Free, msg);",
          "446:     Handle<Value> argv[] = { buf->handle_ };",
          "447:     MakeCallback(handle_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "",
          "[Added Lines]",
          "498:         msg->data_.buffer_, msg->data_.size_, IsolateMessage::Free, msg);",
          "500:     int argc = 1;",
          "501:     Handle<Value> argv[2] = {",
          "502:       buf->handle_",
          "503:     };",
          "505:     if (msg->flags & ISOLATEMESSAGE_SHARED_STREAM) {",
          "507:       Local<Object> pending_obj = TCPWrap::Instantiate();",
          "510:       assert(pending_obj->InternalFieldCount() > 0);",
          "511:       TCPWrap* pending_wrap =",
          "512:           static_cast<TCPWrap*>(pending_obj->GetPointerFromInternalField(0));",
          "514:       int r = uv_import(pending_wrap->GetStream(), &msg->shared_stream_info_);",
          "515:       assert(r == 0);",
          "517:       argv[1] = pending_obj;",
          "518:       argc++;",
          "519:     }",
          "521:     MakeCallback(handle_, \"onmessage\", argc, argv);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "457:     const char* data = Buffer::Data(obj);",
          "458:     size_t size = Buffer::Length(obj);",
          "463:     return Undefined();",
          "464:   }",
          "",
          "[Removed Lines]",
          "460:     IsolateMessage* msg = new IsolateMessage(data, size);",
          "461:     self->send_channel_->Send(msg);",
          "",
          "[Added Lines]",
          "534:     IsolateMessage* msg;",
          "536:     if (args[1]->IsObject()) {",
          "537:       uv_stream_info_t stream_info;",
          "539:       Local<Object> send_stream_obj = args[1]->ToObject();",
          "540:       assert(send_stream_obj->InternalFieldCount() > 0);",
          "541:       StreamWrap* send_stream_wrap = static_cast<StreamWrap*>(",
          "542:           send_stream_obj->GetPointerFromInternalField(0));",
          "543:       uv_stream_t* send_stream = send_stream_wrap->GetStream();",
          "544:       int r = uv_export(send_stream, &stream_info);",
          "545:       assert(r == 0);",
          "546:       msg = new IsolateMessage(data, size, &stream_info);",
          "547:     } else {",
          "548:       msg = new IsolateMessage(data, size, NULL);",
          "549:     }",
          "551:     self->send_channel_->Send(msg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b82b4f2993b5feaa51ce8edce60d945a34b88d26",
      "candidate_info": {
        "commit_hash": "b82b4f2993b5feaa51ce8edce60d945a34b88d26",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b82b4f2993b5feaa51ce8edce60d945a34b88d26",
        "files": [
          "src/node_buffer.cc",
          "src/node_buffer.h"
        ],
        "message": "buffer: fix signedness compiler warnings",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "src/node_buffer.h||src/node_buffer.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:   }",
          "408:   Local<Object> target = args[0]->ToObject();",
          "415:                                           : source->length_;",
          "417:   if (source_end < source_start) {",
          "",
          "[Removed Lines]",
          "409:   char *target_data = Buffer::Data(target);",
          "410:   ssize_t target_length = Buffer::Length(target);",
          "412:   ssize_t target_start = args[1]->Int32Value();",
          "413:   ssize_t source_start = args[2]->Int32Value();",
          "414:   ssize_t source_end = args[3]->IsInt32() ? args[3]->Int32Value()",
          "",
          "[Added Lines]",
          "409:   char* target_data = Buffer::Data(target);",
          "410:   size_t target_length = Buffer::Length(target);",
          "411:   size_t target_start = args[1]->Uint32Value();",
          "412:   size_t source_start = args[2]->Uint32Value();",
          "413:   size_t source_end = args[3]->IsUint32() ? args[3]->Uint32Value()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:     return scope.Close(Integer::New(0));",
          "425:   }",
          "428:     return ThrowException(Exception::Error(String::New(",
          "429:             \"targetStart out of bounds\")));",
          "430:   }",
          "433:     return ThrowException(Exception::Error(String::New(",
          "434:             \"sourceStart out of bounds\")));",
          "435:   }",
          "438:     return ThrowException(Exception::Error(String::New(",
          "439:             \"sourceEnd out of bounds\")));",
          "440:   }",
          "448:   memmove((void *)(target_data + target_start),",
          "",
          "[Removed Lines]",
          "427:   if (target_start < 0 || target_start >= target_length) {",
          "432:   if (source_start < 0 || source_start >= source->length_) {",
          "437:   if (source_end < 0 || source_end > source->length_) {",
          "442:   ssize_t to_copy = MIN(MIN(source_end - source_start,",
          "443:                             target_length - target_start),",
          "444:                             source->length_ - source_start);",
          "",
          "[Added Lines]",
          "426:   if (target_start >= target_length) {",
          "431:   if (source_start >= source->length_) {",
          "436:   if (source_end > source->length_) {",
          "441:   size_t to_copy = MIN(MIN(source_end - source_start,",
          "442:                            target_length - target_start),",
          "443:                            source->length_ - source_start);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:   }",
          "553:   Local<String> s = args[0]->ToString();",
          "555:   size_t offset = args[1]->Int32Value();",
          "558:     return ThrowException(Exception::TypeError(String::New(",
          "559:             \"Offset is out of bounds\")));",
          "560:   }",
          "562:   size_t max_length = args[2]->IsUndefined() ? buffer->length_ - offset",
          "563:                                              : args[2]->Uint32Value();",
          "566:   char *p = buffer->data_ + offset;",
          "",
          "[Removed Lines]",
          "557:   if (s->Length() > 0 && offset >= buffer->length_) {",
          "564:   max_length = MIN(s->Length(), MIN(buffer->length_ - offset, max_length));",
          "",
          "[Added Lines]",
          "552:   size_t length = s->Length();",
          "555:   if (length > 0 && offset >= buffer->length_) {",
          "562:   max_length = MIN(length, MIN(buffer->length_ - offset, max_length));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590:   }",
          "592:   String::AsciiValue s(args[0]);",
          "593:   size_t offset = args[1]->Int32Value();",
          "594:   size_t max_length = args[2]->IsUndefined() ? buffer->length_ - offset",
          "595:                                              : args[2]->Uint32Value();",
          "598:   if (max_length && offset >= buffer->length_) {",
          "599:     return ThrowException(Exception::TypeError(String::New(",
          "",
          "[Removed Lines]",
          "596:   max_length = MIN(s.length(), MIN(buffer->length_ - offset, max_length));",
          "",
          "[Added Lines]",
          "591:   size_t length = s.length();",
          "595:   max_length = MIN(length, MIN(buffer->length_ - offset, max_length));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "653:   }",
          "655:   Local<String> s = args[0]->ToString();",
          "657:   size_t offset = args[1]->Int32Value();",
          "659:   if (s->Length() > 0 && offset >= buffer->length_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655:   size_t length = s->Length();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "666:   size_t max_length = args[2]->IsUndefined() ? buffer->length_ - offset",
          "667:                                              : args[2]->Uint32Value();",
          "670:   int written = DecodeWrite(p, max_length, s, BINARY);",
          "",
          "[Removed Lines]",
          "668:   max_length = MIN(s->Length(), MIN(buffer->length_ - offset, max_length));",
          "",
          "[Added Lines]",
          "667:   max_length = MIN(length, MIN(buffer->length_ - offset, max_length));",
          "",
          "---------------"
        ],
        "src/node_buffer.h||src/node_buffer.h": [
          "File: src/node_buffer.h -> src/node_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: class NODE_EXTERN Buffer: public ObjectWrap {",
          "67:  public:",
          "71:   static v8::Persistent<v8::FunctionTemplate> constructor_template;",
          "",
          "[Removed Lines]",
          "69:   static const int kMaxLength = 0x3fffffff;",
          "",
          "[Added Lines]",
          "69:   static const unsigned int kMaxLength = 0x3fffffff;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90a625399f5ef6cb7d6dfd29f18095101ee4c77b",
      "candidate_info": {
        "commit_hash": "90a625399f5ef6cb7d6dfd29f18095101ee4c77b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/90a625399f5ef6cb7d6dfd29f18095101ee4c77b",
        "files": [
          "deps/openssl/config/k8/openssl/opensslconf-win32.h"
        ],
        "message": "openssl: fix the Windows x64 build",
        "before_after_code_files": [
          "deps/openssl/config/k8/openssl/opensslconf-win32.h||deps/openssl/config/k8/openssl/opensslconf-win32.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/openssl/config/k8/openssl/opensslconf-win32.h||deps/openssl/config/k8/openssl/opensslconf-win32.h": [
          "File: deps/openssl/config/k8/openssl/opensslconf-win32.h -> deps/openssl/config/k8/openssl/opensslconf-win32.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #ifndef OPENSSL_NO_SEED",
          "42: # define OPENSSL_NO_SEED",
          "43: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #ifndef OPENSSL_NO_ASM",
          "45: # define OPENSSL_NO_ASM",
          "46: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1255914df46ac367d289614464cc249c3a4bb6c",
      "candidate_info": {
        "commit_hash": "d1255914df46ac367d289614464cc249c3a4bb6c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d1255914df46ac367d289614464cc249c3a4bb6c",
        "files": [
          "src/platform_sunos.cc",
          "test/simple/test-memory-usage-emfile.js"
        ],
        "message": "sunos: fix EMFILE on process.memoryUsage()",
        "before_after_code_files": [
          "src/platform_sunos.cc||src/platform_sunos.cc",
          "test/simple/test-memory-usage-emfile.js||test/simple/test-memory-usage-emfile.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/platform_sunos.cc||src/platform_sunos.cc": [
          "File: src/platform_sunos.cc -> src/platform_sunos.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <net/if.h>",
          "37: #include <netinet/in.h>",
          "38: #include <arpa/inet.h>",
          "40: #ifdef SUNOS_HAVE_IFADDRS",
          "41: # include <ifaddrs.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: int Platform::GetMemory(size_t *rss) {",
          "88:   psinfo_t psinfo;",
          "94:     return -1;",
          "103:   return 0;",
          "104: }",
          "",
          "[Removed Lines]",
          "83:   pid_t pid = getpid();",
          "85:   char pidpath[1024];",
          "86:   sprintf(pidpath, \"/proc/%d/psinfo\", pid);",
          "89:   FILE *f = fopen(pidpath, \"r\");",
          "90:   if (!f) return -1;",
          "92:   if (fread(&psinfo, sizeof(psinfo_t), 1, f) != 1) {",
          "93:     fclose (f);",
          "95:   }",
          "101:   fclose (f);",
          "",
          "[Added Lines]",
          "85:   int fd;",
          "87:   if ((fd = open(\"/proc/self/psinfo\", O_RDONLY)) < 0)",
          "90:   if (read(fd, &psinfo, sizeof (psinfo_t)) != sizeof (psinfo_t)) {",
          "91:     (void) close(fd);",
          "92:     return -1;",
          "93:   }",
          "96:   (void) close(fd);",
          "",
          "---------------"
        ],
        "test/simple/test-memory-usage-emfile.js||test/simple/test-memory-usage-emfile.js": [
          "File: test/simple/test-memory-usage-emfile.js -> test/simple/test-memory-usage-emfile.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: var common = require('../common');",
          "26: var assert = require('assert');",
          "28: var fs = require('fs');",
          "30: var files = [];",
          "32: while (files.length < 256)",
          "33:   files.push(fs.openSync(__filename, 'r'));",
          "35: var r = process.memoryUsage();",
          "36: console.log(common.inspect(r));",
          "37: assert.equal(true, r['rss'] > 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70a5b53e03bfb77597d7183c311bfe4b30d3ac78",
      "candidate_info": {
        "commit_hash": "70a5b53e03bfb77597d7183c311bfe4b30d3ac78",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/70a5b53e03bfb77597d7183c311bfe4b30d3ac78",
        "files": [
          "common.gypi"
        ],
        "message": "Re-apply \"build: target OSX 10.5 when building on darwin\"\n\nThis reverts commit 93eca95aece9804d22b012cc89487f4b0064a86d.\n\nFixes #3072 (once again).",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:           'GCC_VERSION': '4.2',",
          "172:           'GCC_WARN_ABOUT_MISSING_NEWLINE': 'YES',  # -Wnewline-eof",
          "173:           'PREBINDING': 'NO',                       # No -Wl,-prebind",
          "174:           'USE_HEADERMAP': 'NO',",
          "175:           'OTHER_CFLAGS': [",
          "176:             '-fno-strict-aliasing',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:           'MACOSX_DEPLOYMENT_TARGET': '10.5',",
          "",
          "---------------"
        ]
      }
    }
  ]
}