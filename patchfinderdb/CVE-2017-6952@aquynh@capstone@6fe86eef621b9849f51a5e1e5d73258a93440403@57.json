{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c864409f3eb7885c6d027aceb6ffbb70783e322",
      "candidate_info": {
        "commit_hash": "0c864409f3eb7885c6d027aceb6ffbb70783e322",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0c864409f3eb7885c6d027aceb6ffbb70783e322",
        "files": [
          "cs.c"
        ],
        "message": "arm: only reset IT block for ARM",
        "before_after_code_files": [
          "cs.c||cs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:  handle->errnum = CS_ERR_OK;",
          "472: #ifdef CAPSTONE_USE_SYS_DYN_MEM",
          "473:  if (count > 0 && count <= INSN_CACHE_SIZE)",
          "",
          "[Removed Lines]",
          "470:  handle->ITBlock.size = 0;",
          "",
          "[Added Lines]",
          "470:  if (handle->arch == CS_ARCH_ARM)",
          "471:   handle->ITBlock.size = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45688690c3b8ccd7880f9d1babd370b3db2923fe",
      "candidate_info": {
        "commit_hash": "45688690c3b8ccd7880f9d1babd370b3db2923fe",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/45688690c3b8ccd7880f9d1babd370b3db2923fe",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: align assembly code for x86",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  uint64_t address = 0;",
          "115:  cs_insn *insn;",
          "116:  cs_err err;",
          "118:  if (argc != 3 && argc != 4) {",
          "119:   usage(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  bool x86_arch = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:  }",
          "184:  if (!strcmp(mode, \"x16\")) {",
          "185:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "186:  }",
          "188:  if (!strcmp(mode, \"x32\")) {",
          "189:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "190:  }",
          "192:  if (!strcmp(mode, \"x64\")) {",
          "193:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "194:  }",
          "196:  if (!strcmp(mode, \"x16att\")) {",
          "197:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "198:   if (!err) {",
          "199:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:   x86_arch = true;",
          "191:   x86_arch = true;",
          "196:   x86_arch = true;",
          "201:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  }",
          "203:  if (!strcmp(mode,\"x32att\")) {",
          "204:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "205:   if (!err) {",
          "206:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:  }",
          "210:  if (!strcmp(mode,\"x64att\")) {",
          "211:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "212:   if (!err) {",
          "213:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "244:  if (count > 0) {",
          "253:    }",
          "255:   }",
          "256:   cs_free(insn, count);",
          "257:  } else {",
          "",
          "[Removed Lines]",
          "245:   size_t j;",
          "246:   int i;",
          "248:   printf(\"\\n\");",
          "249:   for (j = 0; j < count; j++) {",
          "250:    printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "251:    for (i = 0; i < insn[j].size; i++) {",
          "252:     printf(\"%02x\", insn[j].bytes[i]);",
          "254:    printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "",
          "[Added Lines]",
          "252:   size_t i;",
          "254:   for (i = 0; i < count; i++) {",
          "255:    int j;",
          "256:    printf(\"%\"PRIx64\"  \", insn[i].address);",
          "257:    for (j = 0; j < insn[i].size; j++) {",
          "258:     printf(\"%02x\", insn[i].bytes[j]);",
          "259:    }",
          "262:    if (x86_arch) {",
          "263:     for (; j < 16; j++) {",
          "264:      printf(\"  \");",
          "265:     }",
          "267:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc954d0ac749b07e2cd03c2ebd6d79d1a8c10271",
      "candidate_info": {
        "commit_hash": "bc954d0ac749b07e2cd03c2ebd6d79d1a8c10271",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/bc954d0ac749b07e2cd03c2ebd6d79d1a8c10271",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "fix compile error with capstone_static_winkernel\n\nThe MSVC project capstone_static_winkernel uses __stdcall as a\ndefault calling convention to fit with environment for Windows driver\ndevelopment. This leads to a compile error in a use of qsort() with\nregs_cmp() since it is compiled as a __stdcall function while qsort()\nexpects a __cdelc function.\n\nThis fix adds explicit calling convention to regs_cmp() for MSVC.\n\nSigned-off-by: Satoshi Tanda <tanda.sat@gmail.com>",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2924: static struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "2927: {",
          "2928:  uint16_t l = ((struct insn_reg *)a)->insn;",
          "2929:  uint16_t r = ((struct insn_reg *)b)->insn;",
          "",
          "[Removed Lines]",
          "2926: static int regs_cmp(const void *a, const void *b)",
          "",
          "[Added Lines]",
          "2926: static int CAPSTONE_API regs_cmp(const void *a, const void *b)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c975795476db21aa6c42b803c96385b7cdb7ecc7",
      "candidate_info": {
        "commit_hash": "c975795476db21aa6c42b803c96385b7cdb7ecc7",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c975795476db21aa6c42b803c96385b7cdb7ecc7",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "add an auxilary array for x86 reg to greatly speedup X86_insn_reg_intel",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2751:  { X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },",
          "2752: };",
          "2757: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
          "2758: {",
          "2766:   }",
          "2767:  }",
          "",
          "[Removed Lines]",
          "2759:  unsigned int i;",
          "2761:  for (i = 0; i < ARR_SIZE(insn_regs_intel); i++) {",
          "2762:   if (insn_regs_intel[i].insn == id) {",
          "2763:    if (access)",
          "2765:    return insn_regs_intel[i].reg;",
          "",
          "[Added Lines]",
          "2754: struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "2756: static int partition_regs(struct insn_reg a[], int l, int r);",
          "2757: static void qsort_regs(struct insn_reg a[], int l, int r);",
          "2759: static void qsort_regs(struct insn_reg a[], int l, int r)",
          "2760: {",
          "2761:  int j;",
          "2762:  if (l < r) {",
          "2763:   j = partition_regs(a, l, r);",
          "2764:   qsort_regs(a, l, j-1);",
          "2765:   qsort_regs(a, j+1, r);",
          "2766:  }",
          "2767: }",
          "2769: static int partition_regs(struct insn_reg a[], int l, int r) {",
          "2770:  struct insn_reg pivot, t;",
          "2771:  int i, j;",
          "2772:  pivot = a[l];",
          "2773:  i = l;",
          "2774:  j = r+1;",
          "2775:  while(1) {",
          "2776:   do ++i; while(a[i].insn <= pivot.insn && i <= r);",
          "2777:   do --j; while(a[j].insn > pivot.insn);",
          "2778:   if (i >= j) {",
          "2779:    break;",
          "2780:   }",
          "2781:   t = a[i]; a[i] = a[j]; a[j] = t;",
          "2782:  }",
          "2783:  t = a[l];",
          "2784:  a[l] = a[j];",
          "2785:  a[j] = t;",
          "2786:  return j;",
          "2787: }",
          "2790: static bool intel_resgs_sorted = false;",
          "2796:  unsigned int first = 0;",
          "2797:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
          "2798:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
          "2800:  if (!intel_resgs_sorted) {",
          "2801:   memcpy (insn_regs_intel_sorted, insn_regs_intel,",
          "2802:     sizeof(insn_regs_intel_sorted));",
          "2803:   qsort_regs (insn_regs_intel_sorted, first, last);",
          "2804:   intel_resgs_sorted = true;",
          "2805:  }",
          "2807:  while (first <= last) {",
          "2808:   if (insn_regs_intel_sorted[mid].insn < id) {",
          "2809:    first = mid + 1;",
          "2810:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
          "2811:    if (access) {",
          "2813:    }",
          "2814:    return insn_regs_intel_sorted[mid].reg;",
          "2815:   } else {",
          "2816:    last = mid - 1;",
          "2818:   mid = (first + last) / 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "079d94d7f081a93c3465325819e0d6e030b9882a",
      "candidate_info": {
        "commit_hash": "079d94d7f081a93c3465325819e0d6e030b9882a",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/079d94d7f081a93c3465325819e0d6e030b9882a",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm: POP {reg} read/write SP register. this fixes #913",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:          MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_REG;",
          "589:          MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].reg = MCOperand_getReg(MCInst_getOperand(MI, 0));",
          "590:          MI->flat_insn->detail->arm.op_count++;",
          "591:         }",
          "592:         SStream_concat0(O, \"}\");",
          "593:         return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:                                     MI->flat_insn->detail->regs_read[MI->flat_insn->detail->regs_read_count] = ARM_REG_SP;",
          "593:                                     MI->flat_insn->detail->regs_read_count++;",
          "594:                                     MI->flat_insn->detail->regs_write[MI->flat_insn->detail->regs_write_count] = ARM_REG_SP;",
          "595:                                     MI->flat_insn->detail->regs_write_count++;",
          "",
          "---------------"
        ]
      }
    }
  ]
}