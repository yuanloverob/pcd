{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
      "candidate_info": {
        "commit_hash": "112e174020809d0b91249716fb9de4aa3ee7437d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/112e174020809d0b91249716fb9de4aa3ee7437d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/releasetest.tcl"
        ],
        "message": "Avoid a sanitizer error in test1.c. Have releasetest.tcl/wapptest.tcl create a file called \"makecommand.sh\" that can be used to rerun a test from the command line.\n\nFossilOrigin-Name: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee886600297c2a03d9d1d10db88d3d107b48e5d4de5e5d91b0ab16cc7c447ede",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:   }",
          "4273:   pzTail = objc>=5 ? &zTail : 0;",
          "4274:   rc = sqlite3_prepare_v2(db, zCopy, bytes, &pStmt, pzTail);",
          "4275:   free(zCopy);",
          "4278:   assert(rc==SQLITE_OK || pStmt==0);",
          "4279:   Tcl_ResetResult(interp);",
          "4280:   if( sqlite3TestErrCode(interp, db, rc) ) return TCL_ERROR;",
          "4282:     if( bytes>=0 ){",
          "4283:       bytes = bytes - (int)(zTail-zSql);",
          "4284:     }",
          "",
          "[Removed Lines]",
          "4276:   zTail = &zSql[(zTail - zCopy)];",
          "4281:   if( rc==SQLITE_OK && zTail && objc>=5 ){",
          "",
          "[Added Lines]",
          "4275:   if( objc>=5 ){",
          "4276:     zTail = &zSql[(zTail - zCopy)];",
          "4277:   }",
          "4283:   if( rc==SQLITE_OK && objc>=5 && zTail ){",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:       unset -nocomplain savedEnv(TCLSH_CMD)",
          "502:     }",
          "503:     set ::env(TCLSH_CMD) [file nativename [info nameofexecutable]]",
          "505:     if {[info exists savedEnv(TCLSH_CMD)]} {",
          "506:       set ::env(TCLSH_CMD) $savedEnv(TCLSH_CMD)",
          "507:     } else {",
          "",
          "[Removed Lines]",
          "504:     set rc [catch [makeCommand $testtarget $makeOpts $cflags $opts]]",
          "",
          "[Added Lines]",
          "505:     # Create a file called \"makecommand.sh\" containing the text of",
          "506:     # the make command line.",
          "507:     catch {",
          "508:       set cmd [makeCommand $testtarget $makeOpts $cflags $opts]",
          "509:       set fd [open makecommand.sh w]",
          "510:       foreach e $cmd {",
          "511:         if {[string first \" \" $e]>=0} {",
          "512:           puts -nonewline $fd \"\\\"$e\\\"\"",
          "513:         } else {",
          "514:           puts -nonewline $fd $e",
          "515:         }",
          "516:         puts -nonewline $fd \" \"",
          "517:       }",
          "518:       puts $fd \"\"",
          "519:       close $fd",
          "520:     } msg",
          "522:     # Run the make command.",
          "523:     set rc [catch {trace_cmd exec {*}$cmd >>& test.log} msg]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737: # specified targets, compiler flags, and options.",
          "738: #",
          "739: proc makeCommand { targets makeOpts cflags opts } {",
          "741:   if {$::MSVC} {",
          "742:     set nmakeDir [file nativename $::SRCDIR]",
          "743:     set nmakeFile [file nativename [file join $nmakeDir Makefile.msc]]",
          "",
          "[Removed Lines]",
          "740:   set result [list trace_cmd exec]",
          "",
          "[Added Lines]",
          "759:   set result [list]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:   foreach target $targets {",
          "759:     lappend result $target",
          "760:   }",
          "762: }",
          "764: # The following procedure prints its arguments if ::TRACE is true.",
          "",
          "[Removed Lines]",
          "761:   lappend result CFLAGS=$cflags OPTS=$opts >>& test.log",
          "",
          "[Added Lines]",
          "780:   lappend result CFLAGS=$cflags OPTS=$opts",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb5567123f13ff7f915069d2d4cdaf832ff0baa9",
      "candidate_info": {
        "commit_hash": "fb5567123f13ff7f915069d2d4cdaf832ff0baa9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb5567123f13ff7f915069d2d4cdaf832ff0baa9",
        "files": [
          "configure",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --limit N option to dbfuzz2.  Set the default callback limit to 250K.\n\nFossilOrigin-Name: b99f8512c06b9d47e48b028781265512ce8b812ae4e6af0a7139a093cf9a8f74",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80e951fce3e5aaa224c8dba6449832d2efabcdc24e86eb6b7833f85cf08ecc00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: static int progress_handler(void *pNotUsed){",
          "171:   nCb++;",
          "172:   if( nCb<mxCb ) return 0;",
          "173:   if( eVerbosity>=1 ){",
          "174:     printf(\"-- Progress limit of %d reached\\n\", mxCb);",
          "175:   }",
          "176:   return 1;",
          "177: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   if( bVdbeDebug ){",
          "190:     sqlite3_exec(db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "191:   }",
          "192:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "193:     if( eVerbosity>=1 ){",
          "194:       printf(\"%s\\n\", azSql[i]);",
          "195:       fflush(stdout);",
          "196:     }",
          "197:     zErr = 0;",
          "198:     rc = sqlite3_exec(db, azSql[i], 0, 0, &zErr);",
          "199:     if( rc && eVerbosity>=1 ){",
          "200:       printf(\"-- rc=%d zErr=%s\\n\", rc, zErr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "220:     nCb = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:         bVdbeDebug = 1;",
          "250:         continue;",
          "251:       }",
          "252:       if( strcmp(z,\"memtrace\")==0 ){",
          "253:         sqlite3MemTraceActivate(stdout);",
          "254:         continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:       if( strcmp(z,\"limit\")==0 ){",
          "276:         if( i+1==argc ){",
          "277:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "278:           exit(1);",
          "279:         }",
          "280:         mxCb = strtol(argv[++i], 0, 0);",
          "281:         continue;",
          "282:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
      "candidate_info": {
        "commit_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Allow compile-time options -DHAVE_GETHOSTUUID=0 and -DHAVE_GETHOSTUUID=1.\n\nFossilOrigin-Name: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 102ef64462cf0d78395ccc7ebb8e3bf6b7647c06b7657a037e051697bc08d6b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: # include <sys/param.h>",
          "115: #  endif",
          "116: #endif",
          "",
          "[Removed Lines]",
          "108: #if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "109:                            (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "110: #  if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "111:        && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "112: #    define HAVE_GETHOSTUUID 1",
          "113: #  else",
          "114: #    warning \"gethostuuid() is disabled.\"",
          "",
          "[Added Lines]",
          "120: #ifndef HAVE_GETHOSTUUID",
          "121: # define HAVE_GETHOSTUUID 0",
          "122: # if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "123:                             (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "124: #    if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "125:          && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "126: #      undef HAVE_GETHOSTUUID",
          "127: #      define HAVE_GETHOSTUUID 1",
          "128: #    else",
          "129: #      warning \"gethostuuid() is disabled.\"",
          "130: #    endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6934: extern int gethostuuid(uuid_t id, const struct timespec *wait);",
          "6935: #endif",
          "",
          "[Removed Lines]",
          "6932: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6948: #if HAVE_GETHOSTUUID",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6940: static int proxyGetHostID(unsigned char *pHostID, int *pError){",
          "6941:   assert(PROXY_HOSTIDLEN == sizeof(uuid_t));",
          "6942:   memset(pHostID, 0, PROXY_HOSTIDLEN);",
          "6944:   {",
          "6946:     if( gethostuuid(pHostID, &timeout) ){",
          "",
          "[Removed Lines]",
          "6943: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6959: #if HAVE_GETHOSTUUID",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
      "candidate_info": {
        "commit_hash": "9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another corruption related buffer overread in the sqlite_dbdata module.\n\nFossilOrigin-Name: 5cd728fb6b3a70f795306d4d6e12151a4de327f801733a8558139e3cd76fe66a",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   pCsr->iCell = 0;",
          "279:   pCsr->iField = 0;",
          "280:   pCsr->bOnePage = 0;",
          "281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:   sqlite3_free(pCsr->aPage);",
          "282:   sqlite3_free(pCsr->pRec);",
          "283:   pCsr->pRec = 0;",
          "284:   pCsr->aPage = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:   while( 1 ){",
          "460:     int rc;",
          "461:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "463:     if( pCsr->aPage==0 ){",
          "464:       while( 1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     int bNextPage = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:         int iHdr;",
          "496:         int U, X;",
          "497:         int nLocal;",
          "500:         switch( pCsr->aPage[iOff] ){",
          "501:           case 0x02:",
          "",
          "[Removed Lines]",
          "498:         int bNextPage = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:             pCsr->iField = (bHasRowid ? -1 : 0);",
          "604:           }",
          "605:         }",
          "614:       }else{",
          "615:         pCsr->iField++;",
          "616:         if( pCsr->iField>0 ){",
          "617:           sqlite3_int64 iType;",
          "620:         }",
          "621:       }",
          "625:       }",
          "632:     }",
          "633:   }",
          "",
          "[Removed Lines]",
          "607:         if( bNextPage ){",
          "608:           sqlite3_free(pCsr->aPage);",
          "609:           pCsr->aPage = 0;",
          "610:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "611:           pCsr->iPgno++;",
          "612:           continue;",
          "613:         }",
          "618:           pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "619:           pCsr->pPtr += dbdataValueBytes(iType);",
          "623:       if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "624:         return SQLITE_OK;",
          "629:       sqlite3_free(pCsr->pRec);",
          "630:       pCsr->pRec = 0;",
          "631:       pCsr->iCell++;",
          "",
          "[Added Lines]",
          "614:           if( pCsr->pHdrPtr>&pCsr->pRec[pCsr->nRec] ){",
          "615:             bNextPage = 1;",
          "616:           }else{",
          "617:             pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "618:             pCsr->pPtr += dbdataValueBytes(iType);",
          "619:           }",
          "623:       if( bNextPage ){",
          "624:         sqlite3_free(pCsr->aPage);",
          "625:         sqlite3_free(pCsr->pRec);",
          "626:         pCsr->aPage = 0;",
          "627:         pCsr->pRec = 0;",
          "628:         if( pCsr->bOnePage ) return SQLITE_OK;",
          "629:         pCsr->iPgno++;",
          "630:       }else{",
          "631:         if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "632:           return SQLITE_OK;",
          "633:         }",
          "637:         sqlite3_free(pCsr->pRec);",
          "638:         pCsr->pRec = 0;",
          "639:         pCsr->iCell++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737:           iOff += 8;",
          "738:         }else{",
          "739:           iOff += 12 + pCsr->iCell*2;",
          "740:           iOff = get_uint16(&pCsr->aPage[iOff]);",
          "741:         }",
          "743:         break;",
          "744:       }",
          "745:     }",
          "",
          "[Removed Lines]",
          "742:         sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "",
          "[Added Lines]",
          "749:           if( iOff>pCsr->nPage ) return SQLITE_OK;",
          "752:         if( iOff<=pCsr->nPage ){",
          "753:           sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "754:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dbc6a9f7f67256dea96d3245e7bec145ba65d64adf322e18f1f3ac9556b4e0b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
      "candidate_info": {
        "commit_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the obsolete \"fastfuzztest\" target from the makefiles.\n\nFossilOrigin-Name: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}