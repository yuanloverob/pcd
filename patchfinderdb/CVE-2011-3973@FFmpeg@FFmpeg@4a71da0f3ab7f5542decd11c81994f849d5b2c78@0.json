{
  "cve_id": "CVE-2011-3973",
  "cve_desc": "cavsdec.c in libavcodec in FFmpeg before 0.7.4 and 0.8.x before 0.8.3 allows remote attackers to cause a denial of service (incorrect write operation and application crash) via an invalid bitstream in a Chinese AVS video (aka CAVS) file, related to the decode_residual_block, check_for_slice, and cavs_decode_frame functions, a different vulnerability than CVE-2011-3362.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "4a71da0f3ab7f5542decd11c81994f849d5b2c78",
  "patch_info": {
    "commit_hash": "4a71da0f3ab7f5542decd11c81994f849d5b2c78",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4a71da0f3ab7f5542decd11c81994f849d5b2c78",
    "files": [
      "libavcodec/cavsdec.c"
    ],
    "message": "cavs: fix some crashes with invalid bitstreams\n\nThis removes all valgrind-reported invalid writes with one\nspecific test file.\n\nFixes http://www.ocert.org/advisories/ocert-2011-002.html\n\nSigned-off-by: Mans Rullgard <mans@mansr.com>",
    "before_after_code_files": [
      "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/cavsdec.c||libavcodec/cavsdec.c": [
      "File: libavcodec/cavsdec.c -> libavcodec/cavsdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:                 r++;",
      "131:             mask = -(level_code & 1);",
      "132:             level = (level^mask) - mask;",
      "134:             level = r->rltab[level_code][0];",
      "135:             if(!level) //end of block signal",
      "136:                 break;",
      "137:             run   = r->rltab[level_code][1];",
      "138:             r += r->rltab[level_code][2];",
      "139:         }",
      "140:         level_buf[i] = level;",
      "141:         run_buf[i] = run;",
      "",
      "[Removed Lines]",
      "133:         } else {",
      "",
      "[Added Lines]",
      "133:         } else if (level_code >= 0) {",
      "139:         } else {",
      "140:             break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "190: static int decode_mb_i(AVSContext *h, int cbp_code) {",
      "191:     GetBitContext *gb = &h->s.gb;",
      "193:     uint8_t top[18];",
      "194:     uint8_t *left = NULL;",
      "195:     uint8_t *d;",
      "",
      "[Removed Lines]",
      "192:     int block, pred_mode_uv;",
      "",
      "[Added Lines]",
      "194:     unsigned pred_mode_uv;",
      "195:     int block;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "445:     if((show_bits_long(gb,24+align) & 0xFFFFFF) == 0x000001) {",
      "446:         skip_bits_long(gb,24+align);",
      "447:         h->stc = get_bits(gb,8);",
      "448:         decode_slice_header(h,gb);",
      "449:         return 1;",
      "450:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "451:         if (h->stc >= h->mb_height)",
      "452:             return 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "659:     buf_end = buf + buf_size;",
      "660:     for(;;) {",
      "661:         buf_ptr = ff_find_start_code(buf_ptr,buf_end, &stc);",
      "663:             return FFMAX(0, buf_ptr - buf - s->parse_context.last_index);",
      "664:         input_size = (buf_end - buf_ptr)*8;",
      "665:         switch(stc) {",
      "",
      "[Removed Lines]",
      "662:         if(stc & 0xFFFFFE00)",
      "",
      "[Added Lines]",
      "667:         if((stc & 0xFFFFFE00) || buf_ptr == buf_end)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd968d260aef322fb32e254a3de0d2036c57bd56",
      "candidate_info": {
        "commit_hash": "bd968d260aef322fb32e254a3de0d2036c57bd56",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/bd968d260aef322fb32e254a3de0d2036c57bd56",
        "files": [
          "libavcodec/cavsdec.c"
        ],
        "message": "cavs: fix some crashes with invalid bitstreams\n\nThis removes all valgrind-reported invalid writes with one\nspecific test file.\n\nFixes http://www.ocert.org/advisories/ocert-2011-002.html\n\nSigned-off-by: Mans Rullgard <mans@mansr.com>\n(cherry picked from commit 4a71da0f3ab7f5542decd11c81994f849d5b2c78)",
        "before_after_code_files": [
          "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
          ],
          "candidate": [
            "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/cavsdec.c||libavcodec/cavsdec.c": [
          "File: libavcodec/cavsdec.c -> libavcodec/cavsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:                 r++;",
          "131:             mask = -(level_code & 1);",
          "132:             level = (level^mask) - mask;",
          "134:             level = r->rltab[level_code][0];",
          "135:             if(!level) //end of block signal",
          "136:                 break;",
          "137:             run   = r->rltab[level_code][1];",
          "138:             r += r->rltab[level_code][2];",
          "139:         }",
          "140:         level_buf[i] = level;",
          "141:         run_buf[i] = run;",
          "",
          "[Removed Lines]",
          "133:         } else {",
          "",
          "[Added Lines]",
          "133:         } else if (level_code >= 0) {",
          "139:         } else {",
          "140:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: static int decode_mb_i(AVSContext *h, int cbp_code) {",
          "191:     GetBitContext *gb = &h->s.gb;",
          "193:     uint8_t top[18];",
          "194:     uint8_t *left = NULL;",
          "195:     uint8_t *d;",
          "",
          "[Removed Lines]",
          "192:     int block, pred_mode_uv;",
          "",
          "[Added Lines]",
          "194:     unsigned pred_mode_uv;",
          "195:     int block;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:     if((show_bits_long(gb,24+align) & 0xFFFFFF) == 0x000001) {",
          "446:         skip_bits_long(gb,24+align);",
          "447:         h->stc = get_bits(gb,8);",
          "448:         decode_slice_header(h,gb);",
          "449:         return 1;",
          "450:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:         if (h->stc >= h->mb_height)",
          "452:             return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "659:     buf_end = buf + buf_size;",
          "660:     for(;;) {",
          "661:         buf_ptr = ff_find_start_code(buf_ptr,buf_end, &stc);",
          "663:             return FFMAX(0, buf_ptr - buf - s->parse_context.last_index);",
          "664:         input_size = (buf_end - buf_ptr)*8;",
          "665:         switch(stc) {",
          "",
          "[Removed Lines]",
          "662:         if(stc & 0xFFFFFE00)",
          "",
          "[Added Lines]",
          "667:         if((stc & 0xFFFFFE00) || buf_ptr == buf_end)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a6bba627d643ba9e9cc083f21475a0035b0f06f",
      "candidate_info": {
        "commit_hash": "7a6bba627d643ba9e9cc083f21475a0035b0f06f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/7a6bba627d643ba9e9cc083f21475a0035b0f06f",
        "files": [
          "libavcodec/cavsdec.c"
        ],
        "message": "cavs: fix some crashes with invalid bitstreams\n\nThis removes all valgrind-reported invalid writes with one\nspecific test file.\n\nFixes http://www.ocert.org/advisories/ocert-2011-002.html\n\nSigned-off-by: Mans Rullgard <mans@mansr.com>\n(cherry picked from commit 4a71da0f3ab7f5542decd11c81994f849d5b2c78)\n\nFixes CVE-2011-3362, CVE-2011-3973, CVE-2011-3974\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
          ],
          "candidate": [
            "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/cavsdec.c||libavcodec/cavsdec.c": [
          "File: libavcodec/cavsdec.c -> libavcodec/cavsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:                 r++;",
          "131:             mask = -(level_code & 1);",
          "132:             level = (level^mask) - mask;",
          "134:             level = r->rltab[level_code][0];",
          "135:             if(!level) //end of block signal",
          "136:                 break;",
          "137:             run   = r->rltab[level_code][1];",
          "138:             r += r->rltab[level_code][2];",
          "139:         }",
          "140:         level_buf[i] = level;",
          "141:         run_buf[i] = run;",
          "",
          "[Removed Lines]",
          "133:         } else {",
          "",
          "[Added Lines]",
          "133:         } else if (level_code >= 0) {",
          "139:         } else {",
          "140:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: static int decode_mb_i(AVSContext *h, int cbp_code) {",
          "191:     GetBitContext *gb = &h->s.gb;",
          "193:     uint8_t top[18];",
          "194:     uint8_t *left = NULL;",
          "195:     uint8_t *d;",
          "",
          "[Removed Lines]",
          "192:     int block, pred_mode_uv;",
          "",
          "[Added Lines]",
          "194:     unsigned pred_mode_uv;",
          "195:     int block;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:     if((show_bits_long(gb,24+align) & 0xFFFFFF) == 0x000001) {",
          "446:         skip_bits_long(gb,24+align);",
          "447:         h->stc = get_bits(gb,8);",
          "448:         decode_slice_header(h,gb);",
          "449:         return 1;",
          "450:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:         if (h->stc >= h->mb_height)",
          "452:             return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "659:     buf_end = buf + buf_size;",
          "660:     for(;;) {",
          "661:         buf_ptr = ff_find_start_code(buf_ptr,buf_end, &stc);",
          "663:             return FFMAX(0, buf_ptr - buf - s->parse_context.last_index);",
          "664:         input_size = (buf_end - buf_ptr)*8;",
          "665:         switch(stc) {",
          "",
          "[Removed Lines]",
          "662:         if(stc & 0xFFFFFE00)",
          "",
          "[Added Lines]",
          "667:         if((stc & 0xFFFFFE00) || buf_ptr == buf_end)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04888edef344b09daaabbc30b3fa5ab32d3bd866",
      "candidate_info": {
        "commit_hash": "04888edef344b09daaabbc30b3fa5ab32d3bd866",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/04888edef344b09daaabbc30b3fa5ab32d3bd866",
        "files": [
          "libavcodec/cavsdec.c"
        ],
        "message": "cavs: fix some crashes with invalid bitstreams\n\nThis removes all valgrind-reported invalid writes with one\nspecific test file.\n\nFixes http://www.ocert.org/advisories/ocert-2011-002.html\n\nSigned-off-by: Mans Rullgard <mans@mansr.com>\n(cherry picked from commit 4a71da0f3ab7f5542decd11c81994f849d5b2c78)\n\nFixes CVE-2011-3362, CVE-2011-3973, CVE-2011-3974\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
          ],
          "candidate": [
            "libavcodec/cavsdec.c||libavcodec/cavsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/cavsdec.c||libavcodec/cavsdec.c": [
          "File: libavcodec/cavsdec.c -> libavcodec/cavsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:                 r++;",
          "131:             mask = -(level_code & 1);",
          "132:             level = (level^mask) - mask;",
          "134:             level = r->rltab[level_code][0];",
          "135:             if(!level) //end of block signal",
          "136:                 break;",
          "137:             run   = r->rltab[level_code][1];",
          "138:             r += r->rltab[level_code][2];",
          "139:         }",
          "140:         level_buf[i] = level;",
          "141:         run_buf[i] = run;",
          "",
          "[Removed Lines]",
          "133:         } else {",
          "",
          "[Added Lines]",
          "133:         } else if (level_code >= 0) {",
          "139:         } else {",
          "140:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: static int decode_mb_i(AVSContext *h, int cbp_code) {",
          "191:     GetBitContext *gb = &h->s.gb;",
          "193:     uint8_t top[18];",
          "194:     uint8_t *left = NULL;",
          "195:     uint8_t *d;",
          "",
          "[Removed Lines]",
          "192:     int block, pred_mode_uv;",
          "",
          "[Added Lines]",
          "194:     unsigned pred_mode_uv;",
          "195:     int block;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:     if((show_bits_long(gb,24+align) & 0xFFFFFF) == 0x000001) {",
          "446:         skip_bits_long(gb,24+align);",
          "447:         h->stc = get_bits(gb,8);",
          "448:         decode_slice_header(h,gb);",
          "449:         return 1;",
          "450:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:         if (h->stc >= h->mb_height)",
          "452:             return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:     buf_end = buf + buf_size;",
          "649:     for(;;) {",
          "650:         buf_ptr = ff_find_start_code(buf_ptr,buf_end, &stc);",
          "652:             return FFMAX(0, buf_ptr - buf - s->parse_context.last_index);",
          "653:         input_size = (buf_end - buf_ptr)*8;",
          "654:         switch(stc) {",
          "",
          "[Removed Lines]",
          "651:         if(stc & 0xFFFFFE00)",
          "",
          "[Added Lines]",
          "656:         if((stc & 0xFFFFFE00) || buf_ptr == buf_end)",
          "",
          "---------------"
        ]
      }
    }
  ]
}