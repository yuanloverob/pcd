{
  "cve_id": "CVE-2021-37642",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions the implementation of `tf.raw_ops.ResourceScatterDiv` is vulnerable to a division by 0 error. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. We have patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "4aacb30888638da75023e6601149415b39763d76",
  "patch_info": {
    "commit_hash": "4aacb30888638da75023e6601149415b39763d76",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/4aacb30888638da75023e6601149415b39763d76",
    "files": [
      "tensorflow/core/kernels/resource_variable_ops.cc",
      "tensorflow/python/distribute/sharded_variable_test.py"
    ],
    "message": "Disallow division by zero FPE in `tf.raw_ops.ResourceScatterDiv`\n\nHad to update a test that was broken.\n\nPiperOrigin-RevId: 388516976\nChange-Id: Ic358e6bf0559e011539974d453fc7aa18b427e9c",
    "before_after_code_files": [
      "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc",
      "tensorflow/python/distribute/sharded_variable_test.py||tensorflow/python/distribute/sharded_variable_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
      "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "873: #undef REGISTER_GATHER_ND_ALL_INDICES",
      "874: #undef REGISTER_GATHER_ND_FULL",
      "876: template <typename Device, typename T, typename Index, scatter_op::UpdateOp op>",
      "877: class ResourceScatterUpdateOp : public OpKernel {",
      "878:  public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "876: namespace {",
      "878: template <typename Device>",
      "879: bool isCPUDevice() {",
      "880:   return false;",
      "881: }",
      "883: template <>",
      "884: bool isCPUDevice<CPUDevice>() {",
      "885:   return true;",
      "886: }",
      "888: template <typename T>",
      "889: bool ValidateInput(const Tensor& updates) {",
      "890:   const auto updates_flat = updates.flat<T>();",
      "891:   const T zero(0);",
      "892:   for (int i = 0; i < updates.NumElements(); i++) {",
      "893:     if (updates_flat(i) == zero) return false;",
      "894:   }",
      "895:   return true;",
      "896: }",
      "898: template <>",
      "899: bool ValidateInput<Variant>(const Tensor& updates) {",
      "900:   return true;",
      "901: }",
      "903: }  // namespace",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "939:                                 \" indexing: \", params->dim_size(0), \" > \",",
      "940:                                 std::numeric_limits<Index>::max()));",
      "942:     if (N > 0) {",
      "943:       auto indices_flat = indices.flat<Index>();",
      "944:       auto params_flat = params->flat_outer_dims<T>();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "972:     if (isCPUDevice<Device>() && op == tensorflow::scatter_op::UpdateOp::DIV) {",
      "973:       OP_REQUIRES(c, ValidateInput<T>(updates),",
      "974:                   errors::InvalidArgument(\"updates must not contain 0\"));",
      "975:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/distribute/sharded_variable_test.py||tensorflow/python/distribute/sharded_variable_test.py": [
      "File: tensorflow/python/distribute/sharded_variable_test.py -> tensorflow/python/distribute/sharded_variable_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:                             'scatter_update')",
      "176:   def test_scatter_ops_even_partition(self, op):",
      "177:     v = variables_lib.Variable(array_ops.zeros((30, 1)))",
      "178:     sparse_delta = ops.IndexedSlices(",
      "180:         indices=constant_op.constant([0, 10, 12, 21, 22]))",
      "182:     v0 = variables_lib.Variable(array_ops.zeros((10, 1)))",
      "",
      "[Removed Lines]",
      "179:         values=constant_op.constant([[0.], [1.], [2.], [3.], [4.]]),",
      "",
      "[Added Lines]",
      "178:     # Make sure values does not contain 0 due to testing `scatter_div`!",
      "180:         values=constant_op.constant([[1.], [2.], [3.], [4.], [5.]]),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80b06f047246c0584fc035653487562a79849775",
      "candidate_info": {
        "commit_hash": "80b06f047246c0584fc035653487562a79849775",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/80b06f047246c0584fc035653487562a79849775",
        "files": [
          "tensorflow/core/kernels/resource_variable_ops.cc"
        ],
        "message": "Disallow division by zero FPE in `tf.raw_ops.ResourceScatterDiv`\n\nHad to update a test that was broken.\n\nPiperOrigin-RevId: 388516976\nChange-Id: Ic358e6bf0559e011539974d453fc7aa18b427e9c",
        "before_after_code_files": [
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "868: #undef REGISTER_GATHER_ND_ALL_INDICES",
          "869: #undef REGISTER_GATHER_ND_FULL",
          "871: template <typename Device, typename T, typename Index, scatter_op::UpdateOp op>",
          "872: class ResourceScatterUpdateOp : public OpKernel {",
          "873:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "871: namespace {",
          "873: template <typename Device>",
          "874: bool isCPUDevice() {",
          "875:   return false;",
          "876: }",
          "878: template <>",
          "879: bool isCPUDevice<CPUDevice>() {",
          "880:   return true;",
          "881: }",
          "883: template <typename T>",
          "884: bool ValidateInput(const Tensor& updates) {",
          "885:   const auto updates_flat = updates.flat<T>();",
          "886:   const T zero(0);",
          "887:   for (int i = 0; i < updates.NumElements(); i++) {",
          "888:     if (updates_flat(i) == zero) return false;",
          "889:   }",
          "890:   return true;",
          "891: }",
          "893: template <>",
          "894: bool ValidateInput<Variant>(const Tensor& updates) {",
          "895:   return true;",
          "896: }",
          "898: }  // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "934:                                 \" indexing: \", params->dim_size(0), \" > \",",
          "935:                                 std::numeric_limits<Index>::max()));",
          "937:     if (N > 0) {",
          "938:       auto indices_flat = indices.flat<Index>();",
          "939:       auto params_flat = params->flat_outer_dims<T>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "967:     if (isCPUDevice<Device>() && op == tensorflow::scatter_op::UpdateOp::DIV) {",
          "968:       OP_REQUIRES(c, ValidateInput<T>(updates),",
          "969:                   errors::InvalidArgument(\"updates must not contain 0\"));",
          "970:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}