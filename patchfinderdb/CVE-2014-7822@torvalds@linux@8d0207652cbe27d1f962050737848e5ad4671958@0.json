{
  "cve_id": "CVE-2014-7822",
  "cve_desc": "The implementation of certain splice_write file operations in the Linux kernel before 3.16 does not enforce a restriction on the maximum size of a single file, which allows local users to cause a denial of service (system crash) or possibly have unspecified other impact via a crafted splice system call, as demonstrated by use of a file descriptor associated with an ext4 filesystem.",
  "repo": "torvalds/linux",
  "patch_hash": "8d0207652cbe27d1f962050737848e5ad4671958",
  "patch_info": {
    "commit_hash": "8d0207652cbe27d1f962050737848e5ad4671958",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8d0207652cbe27d1f962050737848e5ad4671958",
    "files": [
      "fs/block_dev.c",
      "fs/exofs/file.c",
      "fs/ext2/file.c",
      "fs/ext3/file.c",
      "fs/ext4/file.c",
      "fs/f2fs/file.c",
      "fs/gfs2/file.c",
      "fs/jfs/file.c",
      "fs/ramfs/file-mmu.c",
      "fs/ramfs/file-nommu.c",
      "fs/reiserfs/file.c",
      "fs/splice.c",
      "fs/ubifs/file.c",
      "fs/xfs/xfs_file.c",
      "fs/xfs/xfs_trace.h",
      "include/linux/fs.h"
    ],
    "message": "->splice_write() via ->write_iter()\n\niter_file_splice_write() - a ->splice_write() instance that gathers the\npipe buffers, builds a bio_vec-based iov_iter covering those and feeds\nit to ->write_iter().  A bunch of simple cases coverted to that...\n\n[AV: fixed the braino spotted by Cyrill]\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "before_after_code_files": [
      "fs/block_dev.c||fs/block_dev.c",
      "fs/exofs/file.c||fs/exofs/file.c",
      "fs/ext2/file.c||fs/ext2/file.c",
      "fs/ext3/file.c||fs/ext3/file.c",
      "fs/ext4/file.c||fs/ext4/file.c",
      "fs/f2fs/file.c||fs/f2fs/file.c",
      "fs/gfs2/file.c||fs/gfs2/file.c",
      "fs/jfs/file.c||fs/jfs/file.c",
      "fs/ramfs/file-mmu.c||fs/ramfs/file-mmu.c",
      "fs/ramfs/file-nommu.c||fs/ramfs/file-nommu.c",
      "fs/reiserfs/file.c||fs/reiserfs/file.c",
      "fs/splice.c||fs/splice.c",
      "fs/ubifs/file.c||fs/ubifs/file.c",
      "fs/xfs/xfs_file.c||fs/xfs/xfs_file.c",
      "fs/xfs/xfs_trace.h||fs/xfs/xfs_trace.h",
      "include/linux/fs.h||include/linux/fs.h"
    ]
  },
  "patch_diff": {
    "fs/block_dev.c||fs/block_dev.c": [
      "File: fs/block_dev.c -> fs/block_dev.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1583:  .compat_ioctl = compat_blkdev_ioctl,",
      "1584: #endif",
      "1585:  .splice_read = generic_file_splice_read,",
      "1587: };",
      "1589: int ioctl_by_bdev(struct block_device *bdev, unsigned cmd, unsigned long arg)",
      "",
      "[Removed Lines]",
      "1586:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "1586:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/exofs/file.c||fs/exofs/file.c": [
      "File: fs/exofs/file.c -> fs/exofs/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:  .fsync  = exofs_file_fsync,",
      "78:  .flush  = exofs_flush,",
      "79:  .splice_read = generic_file_splice_read,",
      "81: };",
      "83: const struct inode_operations exofs_file_inode_operations = {",
      "",
      "[Removed Lines]",
      "80:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "80:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/ext2/file.c||fs/ext2/file.c": [
      "File: fs/ext2/file.c -> fs/ext2/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:  .release = ext2_release_file,",
      "76:  .fsync  = ext2_fsync,",
      "77:  .splice_read = generic_file_splice_read,",
      "79: };",
      "81: #ifdef CONFIG_EXT2_FS_XIP",
      "",
      "[Removed Lines]",
      "78:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "78:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/ext3/file.c||fs/ext3/file.c": [
      "File: fs/ext3/file.c -> fs/ext3/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:  .release = ext3_release_file,",
      "64:  .fsync  = ext3_sync_file,",
      "65:  .splice_read = generic_file_splice_read,",
      "67: };",
      "69: const struct inode_operations ext3_file_inode_operations = {",
      "",
      "[Removed Lines]",
      "66:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "66:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/ext4/file.c||fs/ext4/file.c": [
      "File: fs/ext4/file.c -> fs/ext4/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "599:  .release = ext4_release_file,",
      "600:  .fsync  = ext4_sync_file,",
      "601:  .splice_read = generic_file_splice_read,",
      "603:  .fallocate = ext4_fallocate,",
      "604: };",
      "",
      "[Removed Lines]",
      "602:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "602:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/f2fs/file.c||fs/f2fs/file.c": [
      "File: fs/f2fs/file.c -> fs/f2fs/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "692:  .compat_ioctl = f2fs_compat_ioctl,",
      "693: #endif",
      "694:  .splice_read = generic_file_splice_read,",
      "696: };",
      "",
      "[Removed Lines]",
      "695:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "695:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/gfs2/file.c||fs/gfs2/file.c": [
      "File: fs/gfs2/file.c -> fs/gfs2/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1068:  .lock  = gfs2_lock,",
      "1069:  .flock  = gfs2_flock,",
      "1070:  .splice_read = generic_file_splice_read,",
      "1072:  .setlease = gfs2_setlease,",
      "1073:  .fallocate = gfs2_fallocate,",
      "1074: };",
      "",
      "[Removed Lines]",
      "1071:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "1071:  .splice_write = iter_file_splice_write,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1098:  .release = gfs2_release,",
      "1099:  .fsync  = gfs2_fsync,",
      "1100:  .splice_read = generic_file_splice_read,",
      "1102:  .setlease = generic_setlease,",
      "1103:  .fallocate = gfs2_fallocate,",
      "1104: };",
      "",
      "[Removed Lines]",
      "1101:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "1101:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/jfs/file.c||fs/jfs/file.c": [
      "File: fs/jfs/file.c -> fs/jfs/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:  .write_iter = generic_file_write_iter,",
      "158:  .mmap  = generic_file_mmap,",
      "159:  .splice_read = generic_file_splice_read,",
      "161:  .fsync  = jfs_fsync,",
      "162:  .release = jfs_release,",
      "163:  .unlocked_ioctl = jfs_ioctl,",
      "",
      "[Removed Lines]",
      "160:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "160:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/ramfs/file-mmu.c||fs/ramfs/file-mmu.c": [
      "File: fs/ramfs/file-mmu.c -> fs/ramfs/file-mmu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:  .mmap  = generic_file_mmap,",
      "39:  .fsync  = noop_fsync,",
      "40:  .splice_read = generic_file_splice_read,",
      "42:  .llseek  = generic_file_llseek,",
      "43: };",
      "",
      "[Removed Lines]",
      "41:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "41:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/ramfs/file-nommu.c||fs/ramfs/file-nommu.c": [
      "File: fs/ramfs/file-nommu.c -> fs/ramfs/file-nommu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:  .write_iter  = generic_file_write_iter,",
      "44:  .fsync   = noop_fsync,",
      "45:  .splice_read  = generic_file_splice_read,",
      "47:  .llseek   = generic_file_llseek,",
      "48: };",
      "",
      "[Removed Lines]",
      "46:  .splice_write  = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "46:  .splice_write  = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/reiserfs/file.c||fs/reiserfs/file.c": [
      "File: fs/reiserfs/file.c -> fs/reiserfs/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248:  .read_iter = generic_file_read_iter,",
      "249:  .write_iter = generic_file_write_iter,",
      "250:  .splice_read = generic_file_splice_read,",
      "252:  .llseek = generic_file_llseek,",
      "253: };",
      "",
      "[Removed Lines]",
      "251:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "251:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/splice.c||fs/splice.c": [
      "File: fs/splice.c -> fs/splice.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include <linux/gfp.h>",
      "33: #include <linux/socket.h>",
      "34: #include <linux/compat.h>",
      "35: #include \"internal.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #include <linux/aio.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1053: EXPORT_SYMBOL(generic_file_splice_write);",
      "1055: static int write_pipe_buf(struct pipe_inode_info *pipe, struct pipe_buffer *buf,",
      "1056:      struct splice_desc *sd)",
      "1057: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070: ssize_t",
      "1071: iter_file_splice_write(struct pipe_inode_info *pipe, struct file *out,",
      "1072:      loff_t *ppos, size_t len, unsigned int flags)",
      "1073: {",
      "1074:  struct splice_desc sd = {",
      "1075:   .total_len = len,",
      "1076:   .flags = flags,",
      "1077:   .pos = *ppos,",
      "1078:   .u.file = out,",
      "1079:  };",
      "1080:  int nbufs = pipe->buffers;",
      "1081:  struct bio_vec *array = kcalloc(nbufs, sizeof(struct bio_vec),",
      "1082:      GFP_KERNEL);",
      "1083:  ssize_t ret;",
      "1085:  if (unlikely(!array))",
      "1086:   return -ENOMEM;",
      "1088:  pipe_lock(pipe);",
      "1090:  splice_from_pipe_begin(&sd);",
      "1091:  while (sd.total_len) {",
      "1092:   struct iov_iter from;",
      "1093:   struct kiocb kiocb;",
      "1094:   size_t left;",
      "1095:   int n, idx;",
      "1097:   ret = splice_from_pipe_next(pipe, &sd);",
      "1098:   if (ret <= 0)",
      "1099:    break;",
      "1101:   if (unlikely(nbufs < pipe->buffers)) {",
      "1102:    kfree(array);",
      "1103:    nbufs = pipe->buffers;",
      "1104:    array = kcalloc(nbufs, sizeof(struct bio_vec),",
      "1105:      GFP_KERNEL);",
      "1106:    if (!array) {",
      "1107:     ret = -ENOMEM;",
      "1108:     break;",
      "1109:    }",
      "1110:   }",
      "1113:   left = sd.total_len;",
      "1114:   for (n = 0, idx = pipe->curbuf; left && n < pipe->nrbufs; n++, idx++) {",
      "1115:    struct pipe_buffer *buf = pipe->bufs + idx;",
      "1116:    size_t this_len = buf->len;",
      "1118:    if (this_len > left)",
      "1119:     this_len = left;",
      "1121:    if (idx == pipe->buffers - 1)",
      "1122:     idx = -1;",
      "1124:    ret = buf->ops->confirm(pipe, buf);",
      "1125:    if (unlikely(ret)) {",
      "1126:     if (ret == -ENODATA)",
      "1127:      ret = 0;",
      "1128:     goto done;",
      "1129:    }",
      "1131:    array[n].bv_page = buf->page;",
      "1132:    array[n].bv_len = this_len;",
      "1133:    array[n].bv_offset = buf->offset;",
      "1134:    left -= this_len;",
      "1135:   }",
      "1138:   from.type = ITER_BVEC | WRITE;",
      "1139:   from.bvec = array;",
      "1140:   from.nr_segs = n;",
      "1141:   from.count = sd.total_len - left;",
      "1142:   from.iov_offset = 0;",
      "1145:   init_sync_kiocb(&kiocb, out);",
      "1146:   kiocb.ki_pos = sd.pos;",
      "1147:   kiocb.ki_nbytes = sd.total_len - left;",
      "1150:   ret = out->f_op->write_iter(&kiocb, &from);",
      "1151:   if (-EIOCBQUEUED == ret)",
      "1152:    ret = wait_on_sync_kiocb(&kiocb);",
      "1154:   if (ret <= 0)",
      "1155:    break;",
      "1157:   sd.num_spliced += ret;",
      "1158:   sd.total_len -= ret;",
      "1162:   while (ret) {",
      "1163:    struct pipe_buffer *buf = pipe->bufs + pipe->curbuf;",
      "1164:    if (ret >= buf->len) {",
      "1165:     const struct pipe_buf_operations *ops = buf->ops;",
      "1166:     ret -= buf->len;",
      "1167:     buf->len = 0;",
      "1168:     buf->ops = NULL;",
      "1169:     ops->release(pipe, buf);",
      "1170:     pipe->curbuf = (pipe->curbuf + 1) & (pipe->buffers - 1);",
      "1171:     pipe->nrbufs--;",
      "1172:     if (pipe->files)",
      "1173:      sd.need_wakeup = true;",
      "1174:    } else {",
      "1175:     buf->offset += ret;",
      "1176:     buf->len -= ret;",
      "1177:     ret = 0;",
      "1178:    }",
      "1179:   }",
      "1180:  }",
      "1181: done:",
      "1182:  kfree(array);",
      "1183:  splice_from_pipe_end(pipe, &sd);",
      "1185:  pipe_unlock(pipe);",
      "1187:  if (sd.num_spliced)",
      "1188:   ret = sd.num_spliced;",
      "1190:  return ret;",
      "1191: }",
      "1193: EXPORT_SYMBOL(iter_file_splice_write);",
      "",
      "---------------"
    ],
    "fs/ubifs/file.c||fs/ubifs/file.c": [
      "File: fs/ubifs/file.c -> fs/ubifs/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1585:  .fsync          = ubifs_fsync,",
      "1586:  .unlocked_ioctl = ubifs_ioctl,",
      "1587:  .splice_read = generic_file_splice_read,",
      "1589: #ifdef CONFIG_COMPAT",
      "1590:  .compat_ioctl   = ubifs_compat_ioctl,",
      "1591: #endif",
      "",
      "[Removed Lines]",
      "1588:  .splice_write = generic_file_splice_write,",
      "",
      "[Added Lines]",
      "1588:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/xfs/xfs_file.c||fs/xfs/xfs_file.c": [
      "File: fs/xfs/xfs_file.c -> fs/xfs/xfs_file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "342:  return ret;",
      "343: }",
      "",
      "[Removed Lines]",
      "353: STATIC ssize_t",
      "354: xfs_file_splice_write(",
      "355:  struct pipe_inode_info *pipe,",
      "356:  struct file  *outfilp,",
      "357:  loff_t   *ppos,",
      "358:  size_t   count,",
      "359:  unsigned int  flags)",
      "360: {",
      "361:  struct inode  *inode = outfilp->f_mapping->host;",
      "362:  struct xfs_inode *ip = XFS_I(inode);",
      "363:  int   ioflags = 0;",
      "364:  ssize_t   ret;",
      "366:  XFS_STATS_INC(xs_write_calls);",
      "368:  if (outfilp->f_mode & FMODE_NOCMTIME)",
      "369:   ioflags |= IO_INVIS;",
      "371:  if (XFS_FORCED_SHUTDOWN(ip->i_mount))",
      "372:   return -EIO;",
      "374:  xfs_ilock(ip, XFS_IOLOCK_EXCL);",
      "376:  trace_xfs_file_splice_write(ip, count, *ppos, ioflags);",
      "378:  ret = generic_file_splice_write(pipe, outfilp, ppos, count, flags);",
      "379:  if (ret > 0)",
      "380:   XFS_STATS_ADD(xs_write_bytes, ret);",
      "382:  xfs_iunlock(ip, XFS_IOLOCK_EXCL);",
      "383:  return ret;",
      "384: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1442:  .read_iter = xfs_file_read_iter,",
      "1443:  .write_iter = xfs_file_write_iter,",
      "1444:  .splice_read = xfs_file_splice_read,",
      "1446:  .unlocked_ioctl = xfs_file_ioctl,",
      "1447: #ifdef CONFIG_COMPAT",
      "1448:  .compat_ioctl = xfs_file_compat_ioctl,",
      "",
      "[Removed Lines]",
      "1445:  .splice_write = xfs_file_splice_write,",
      "",
      "[Added Lines]",
      "1404:  .splice_write = iter_file_splice_write,",
      "",
      "---------------"
    ],
    "fs/xfs/xfs_trace.h||fs/xfs/xfs_trace.h": [
      "File: fs/xfs/xfs_trace.h -> fs/xfs/xfs_trace.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1060: DEFINE_RW_EVENT(xfs_file_buffered_write);",
      "1061: DEFINE_RW_EVENT(xfs_file_direct_write);",
      "1062: DEFINE_RW_EVENT(xfs_file_splice_read);",
      "1065: DECLARE_EVENT_CLASS(xfs_page_class,",
      "1066:  TP_PROTO(struct inode *inode, struct page *page, unsigned long off,",
      "",
      "[Removed Lines]",
      "1063: DEFINE_RW_EVENT(xfs_file_splice_write);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/linux/fs.h||include/linux/fs.h": [
      "File: include/linux/fs.h -> include/linux/fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2434:   struct pipe_inode_info *, size_t, unsigned int);",
      "2435: extern ssize_t generic_file_splice_write(struct pipe_inode_info *,",
      "2436:   struct file *, loff_t *, size_t, unsigned int);",
      "2437: extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,",
      "2438:   struct file *out, loff_t *, size_t len, unsigned int flags);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2437: extern ssize_t iter_file_splice_write(struct pipe_inode_info *,",
      "2438:   struct file *, loff_t *, size_t, unsigned int);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dbe4e192a234cd6133d86fffb965d0f032c12ccc",
      "candidate_info": {
        "commit_hash": "dbe4e192a234cd6133d86fffb965d0f032c12ccc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/dbe4e192a234cd6133d86fffb965d0f032c12ccc",
        "files": [
          "fs/read_write.c",
          "fs/splice.c",
          "include/linux/fs.h"
        ],
        "message": "fs: add vfs_iter_{read,write} helpers\n\nSimple helpers that pass an arbitrary iov_iter to filesystems.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
        "before_after_code_files": [
          "fs/read_write.c||fs/read_write.c",
          "fs/splice.c||fs/splice.c",
          "include/linux/fs.h||include/linux/fs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/splice.c||fs/splice.c",
            "include/linux/fs.h||include/linux/fs.h"
          ],
          "candidate": [
            "fs/splice.c||fs/splice.c",
            "include/linux/fs.h||include/linux/fs.h"
          ]
        }
      },
      "candidate_diff": {
        "fs/read_write.c||fs/read_write.c": [
          "File: fs/read_write.c -> fs/read_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333: }",
          "334: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos)",
          "337: {",
          "338:  struct kiocb kiocb;",
          "339:  ssize_t ret;",
          "341:  if (!file->f_op->read_iter)",
          "342:   return -EINVAL;",
          "344:  init_sync_kiocb(&kiocb, file);",
          "345:  kiocb.ki_pos = *ppos;",
          "346:  kiocb.ki_nbytes = iov_iter_count(iter);",
          "348:  iter->type |= READ;",
          "349:  ret = file->f_op->read_iter(&kiocb, iter);",
          "350:  if (ret == -EIOCBQUEUED)",
          "351:   ret = wait_on_sync_kiocb(&kiocb);",
          "353:  if (ret > 0)",
          "355:  return ret;",
          "356: }",
          "357: EXPORT_SYMBOL(vfs_iter_read);",
          "359: ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos)",
          "360: {",
          "361:  struct kiocb kiocb;",
          "362:  ssize_t ret;",
          "364:  if (!file->f_op->write_iter)",
          "365:   return -EINVAL;",
          "367:  init_sync_kiocb(&kiocb, file);",
          "368:  kiocb.ki_pos = *ppos;",
          "369:  kiocb.ki_nbytes = iov_iter_count(iter);",
          "371:  iter->type |= WRITE;",
          "372:  ret = file->f_op->write_iter(&kiocb, iter);",
          "373:  if (ret == -EIOCBQUEUED)",
          "374:   ret = wait_on_sync_kiocb(&kiocb);",
          "376:  if (ret > 0)",
          "378:  return ret;",
          "379: }",
          "380: EXPORT_SYMBOL(vfs_iter_write);",
          "",
          "---------------"
        ],
        "fs/splice.c||fs/splice.c": [
          "File: fs/splice.c -> fs/splice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "961:  splice_from_pipe_begin(&sd);",
          "962:  while (sd.total_len) {",
          "963:   struct iov_iter from;",
          "965:   size_t left;",
          "966:   int n, idx;",
          "",
          "[Removed Lines]",
          "964:   struct kiocb kiocb;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:    left -= this_len;",
          "1006:   }",
          "1009:   iov_iter_bvec(&from, ITER_BVEC | WRITE, array, n,",
          "1010:          sd.total_len - left);",
          "1022:   if (ret <= 0)",
          "1023:    break;",
          "1025:   sd.num_spliced += ret;",
          "1026:   sd.total_len -= ret;",
          "1030:   while (ret) {",
          "",
          "[Removed Lines]",
          "1013:   init_sync_kiocb(&kiocb, out);",
          "1014:   kiocb.ki_pos = sd.pos;",
          "1015:   kiocb.ki_nbytes = sd.total_len - left;",
          "1018:   ret = out->f_op->write_iter(&kiocb, &from);",
          "1019:   if (-EIOCBQUEUED == ret)",
          "1020:    ret = wait_on_sync_kiocb(&kiocb);",
          "",
          "[Added Lines]",
          "1009:   ret = vfs_iter_write(out, &from, &sd.pos);",
          "",
          "---------------"
        ],
        "include/linux/fs.h||include/linux/fs.h": [
          "File: include/linux/fs.h -> include/linux/fs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2494: extern ssize_t new_sync_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos);",
          "2495: extern ssize_t new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos);",
          "2498: extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);",
          "2499: extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2497: ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos);",
          "2498: ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f42a69fadc4b90b5d59c4672dcbe52dcd4b6a117",
      "candidate_info": {
        "commit_hash": "f42a69fadc4b90b5d59c4672dcbe52dcd4b6a117",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f42a69fadc4b90b5d59c4672dcbe52dcd4b6a117",
        "files": [
          "fs/gfs2/file.c"
        ],
        "message": "GFS2: Allocate reservation during splice_write\n\nThis patch adds a GFS2-specific function for splice_write which\nfirst calls function gfs2_rs_alloc to make sure a reservation\nstructure has been allocated before attempting to reserve blocks.\n\nSigned-off-by: Bob Peterson <rpeterso@redhat.com>\nAcked-by: Steven Whitehouse <swhiteho@redhat.com>",
        "before_after_code_files": [
          "fs/gfs2/file.c||fs/gfs2/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/gfs2/file.c||fs/gfs2/file.c"
          ],
          "candidate": [
            "fs/gfs2/file.c||fs/gfs2/file.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/gfs2/file.c||fs/gfs2/file.c": [
          "File: fs/gfs2/file.c -> fs/gfs2/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063:  }",
          "1064: }",
          "1066: const struct file_operations gfs2_file_fops = {",
          "1067:  .llseek  = gfs2_llseek,",
          "1068:  .read  = new_sync_read,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066: static ssize_t gfs2_file_splice_write(struct pipe_inode_info *pipe,",
          "1067:           struct file *out, loff_t *ppos,",
          "1068:           size_t len, unsigned int flags)",
          "1069: {",
          "1070:  int error;",
          "1071:  struct gfs2_inode *ip = GFS2_I(out->f_mapping->host);",
          "1073:  error = gfs2_rs_alloc(ip);",
          "1074:  if (error)",
          "1075:   return (ssize_t)error;",
          "1077:  gfs2_size_hint(out, *ppos, len);",
          "1079:  return iter_file_splice_write(pipe, out, ppos, len, flags);",
          "1080: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:  .lock  = gfs2_lock,",
          "1078:  .flock  = gfs2_flock,",
          "1079:  .splice_read = generic_file_splice_read,",
          "1081:  .setlease = simple_nosetlease,",
          "1082:  .fallocate = gfs2_fallocate,",
          "1083: };",
          "",
          "[Removed Lines]",
          "1080:  .splice_write = iter_file_splice_write,",
          "",
          "[Added Lines]",
          "1096:  .splice_write = gfs2_file_splice_write,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1107:  .release = gfs2_release,",
          "1108:  .fsync  = gfs2_fsync,",
          "1109:  .splice_read = generic_file_splice_read,",
          "1111:  .setlease = generic_setlease,",
          "1112:  .fallocate = gfs2_fallocate,",
          "1113: };",
          "",
          "[Removed Lines]",
          "1110:  .splice_write = iter_file_splice_write,",
          "",
          "[Added Lines]",
          "1126:  .splice_write = gfs2_file_splice_write,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05afcb77eb4713f46e7ebaa3cb54bc465c5d516e",
      "candidate_info": {
        "commit_hash": "05afcb77eb4713f46e7ebaa3cb54bc465c5d516e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/05afcb77eb4713f46e7ebaa3cb54bc465c5d516e",
        "files": [
          "fs/splice.c",
          "include/linux/uio.h",
          "mm/iov_iter.c",
          "mm/page_io.c"
        ],
        "message": "new helper: iov_iter_bvec()\n\nsimilar to iov_iter_kvec(), for ITER_BVEC ones\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
        "before_after_code_files": [
          "fs/splice.c||fs/splice.c",
          "include/linux/uio.h||include/linux/uio.h",
          "mm/iov_iter.c||mm/iov_iter.c",
          "mm/page_io.c||mm/page_io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/splice.c||fs/splice.c"
          ],
          "candidate": [
            "fs/splice.c||fs/splice.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/splice.c||fs/splice.c": [
          "File: fs/splice.c -> fs/splice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1006:   }",
          "1016:   init_sync_kiocb(&kiocb, out);",
          "",
          "[Removed Lines]",
          "1009:   from.type = ITER_BVEC | WRITE;",
          "1010:   from.bvec = array;",
          "1011:   from.nr_segs = n;",
          "1012:   from.count = sd.total_len - left;",
          "1013:   from.iov_offset = 0;",
          "",
          "[Added Lines]",
          "1009:   iov_iter_bvec(&from, ITER_BVEC | WRITE, array, n,",
          "1010:          sd.total_len - left);",
          "",
          "---------------"
        ],
        "include/linux/uio.h||include/linux/uio.h": [
          "File: include/linux/uio.h -> include/linux/uio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: unsigned long iov_iter_alignment(const struct iov_iter *i);",
          "89: void iov_iter_init(struct iov_iter *i, int direction, const struct iovec *iov,",
          "90:    unsigned long nr_segs, size_t count);",
          "92:    unsigned long nr_segs, size_t count);",
          "93: ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,",
          "94:    size_t maxsize, unsigned maxpages, size_t *start);",
          "",
          "[Removed Lines]",
          "91: void iov_iter_kvec(struct iov_iter *i, int direction, const struct kvec *iov,",
          "",
          "[Added Lines]",
          "91: void iov_iter_kvec(struct iov_iter *i, int direction, const struct kvec *kvec,",
          "92:    unsigned long nr_segs, size_t count);",
          "93: void iov_iter_bvec(struct iov_iter *i, int direction, const struct bio_vec *bvec,",
          "",
          "---------------"
        ],
        "mm/iov_iter.c||mm/iov_iter.c": [
          "File: mm/iov_iter.c -> mm/iov_iter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501: EXPORT_SYMBOL(iov_iter_single_seg_count);",
          "503: void iov_iter_kvec(struct iov_iter *i, int direction,",
          "505:    size_t count)",
          "506: {",
          "507:  BUG_ON(!(direction & ITER_KVEC));",
          "508:  i->type = direction;",
          "510:  i->nr_segs = nr_segs;",
          "511:  i->iov_offset = 0;",
          "512:  i->count = count;",
          "513: }",
          "514: EXPORT_SYMBOL(iov_iter_kvec);",
          "516: unsigned long iov_iter_alignment(const struct iov_iter *i)",
          "517: {",
          "518:  unsigned long res = 0;",
          "",
          "[Removed Lines]",
          "504:    const struct kvec *iov, unsigned long nr_segs,",
          "509:  i->kvec = (struct kvec *)iov;",
          "",
          "[Added Lines]",
          "504:    const struct kvec *kvec, unsigned long nr_segs,",
          "509:  i->kvec = kvec;",
          "516: void iov_iter_bvec(struct iov_iter *i, int direction,",
          "517:    const struct bio_vec *bvec, unsigned long nr_segs,",
          "518:    size_t count)",
          "519: {",
          "520:  BUG_ON(!(direction & ITER_BVEC));",
          "521:  i->type = direction;",
          "522:  i->bvec = bvec;",
          "523:  i->nr_segs = nr_segs;",
          "524:  i->iov_offset = 0;",
          "525:  i->count = count;",
          "526: }",
          "527: EXPORT_SYMBOL(iov_iter_bvec);",
          "",
          "---------------"
        ],
        "mm/page_io.c||mm/page_io.c": [
          "File: mm/page_io.c -> mm/page_io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:    .bv_len  = PAGE_SIZE,",
          "270:    .bv_offset = 0",
          "271:   };",
          "280:   init_sync_kiocb(&kiocb, swap_file);",
          "281:   kiocb.ki_pos = page_file_offset(page);",
          "282:   kiocb.ki_nbytes = PAGE_SIZE;",
          "",
          "[Removed Lines]",
          "272:   struct iov_iter from = {",
          "273:    .type = ITER_BVEC | WRITE,",
          "274:    .count = PAGE_SIZE,",
          "275:    .iov_offset = 0,",
          "276:    .nr_segs = 1,",
          "277:   };",
          "",
          "[Added Lines]",
          "272:   struct iov_iter from;",
          "274:   iov_iter_bvec(&from, ITER_BVEC | WRITE, &bv, 1, PAGE_SIZE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}