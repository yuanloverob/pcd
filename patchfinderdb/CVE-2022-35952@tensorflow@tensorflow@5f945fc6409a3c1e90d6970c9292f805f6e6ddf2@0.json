{
  "cve_id": "CVE-2022-35952",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The `UnbatchGradOp` function takes an argument `id` that is assumed to be a scalar. A nonscalar `id` can trigger a `CHECK` failure and crash the program. It also requires its argument `batch_index` to contain three times the number of elements as indicated in its `batch_index.dim_size(0)`. An incorrect `batch_index` can trigger a `CHECK` failure and crash the program. We have patched the issue in GitHub commit 5f945fc6409a3c1e90d6970c9292f805f6e6ddf2. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "5f945fc6409a3c1e90d6970c9292f805f6e6ddf2",
  "patch_info": {
    "commit_hash": "5f945fc6409a3c1e90d6970c9292f805f6e6ddf2",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/5f945fc6409a3c1e90d6970c9292f805f6e6ddf2",
    "files": [
      "tensorflow/core/kernels/batch_kernels.cc",
      "tensorflow/python/ops/batch_ops_test.py"
    ],
    "message": "Fix security vulnerability with UnbatchGradKernel\n\nPiperOrigin-RevId: 460992964",
    "before_after_code_files": [
      "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
      "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc": [
      "File: tensorflow/core/kernels/batch_kernels.cc -> tensorflow/core/kernels/batch_kernels.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "885:     const Tensor& data_t = context->input(0);",
      "886:     const Tensor& batch_index_t = context->input(1);",
      "887:     const Tensor& grad_t = context->input(2);",
      "889:     mutex_lock ml(mu_);",
      "891:     const int64_t batch_key = context->input(3).scalar<int64_t>()();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "888:     const Tensor& batch_key_t = context->input(3);",
      "891:     if (batch_key_t.NumElements() != 1) {",
      "892:       return errors::InvalidArgument(\"Expected `id` to be scalar. Received \",",
      "893:                                      batch_key_t.DebugString());",
      "894:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "902:             \"batch_index is empty while the tensor isn't.\");",
      "903:       }",
      "904:       std::unordered_set<int64_t> missing_tensors;",
      "905:       const auto batch_index =",
      "906:           batch_index_t.shaped<int64_t, 2>({batch_index_t.dim_size(0), 3});",
      "907:       for (int i = 0; i < batch_index_t.dim_size(0); ++i) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "910:       if (batch_index_t.NumElements() != batch_index_t.dim_size(0) * 3) {",
      "911:         return errors::InvalidArgument(",
      "912:             \"batch_index should contain \", batch_index_t.dim_size(0) * 3,",
      "913:             \" elements. Received \", batch_index_t.NumElements());",
      "914:       }",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py": [
      "File: tensorflow/python/ops/batch_ops_test.py -> tensorflow/python/ops/batch_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: from tensorflow.core.protobuf import config_pb2",
      "22: from tensorflow.python.eager import context",
      "23: from tensorflow.python.framework import dtypes",
      "24: from tensorflow.python.framework import function",
      "25: from tensorflow.python.framework import ops",
      "26: from tensorflow.python.framework import test_util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: from tensorflow.python.framework import constant_op",
      "25: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: from tensorflow.python.ops import gen_batch_ops",
      "31: from tensorflow.python.ops import gen_functional_ops",
      "32: from tensorflow.python.ops import math_ops",
      "33: from tensorflow.python.ops import resource_variable_ops",
      "34: from tensorflow.python.ops import script_ops",
      "35: from tensorflow.python.ops import variables",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: from tensorflow.python.ops import random_ops",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "557:       # The thread's call should hit the timeout, and thus get 0 results.",
      "558:       self.assertEqual(len(thread_results), 0)",
      "561: if __name__ == \"__main__\":",
      "562:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "563:   def testUnbatchGradInvalidId(self):",
      "564:     with self.assertRaises(errors.InvalidArgumentError):",
      "565:       self.evaluate(",
      "566:           gen_batch_ops.unbatch_grad(",
      "567:               original_input=constant_op.constant([1]),",
      "568:               batch_index=constant_op.constant([",
      "569:                   [0, 0, 0],",
      "570:               ], dtype=dtypes.int64),",
      "571:               grad=constant_op.constant([",
      "572:                   1,",
      "573:               ]),",
      "574:               id=constant_op.constant([",
      "575:                   1,",
      "576:                   1,",
      "577:               ], dtype=dtypes.int64)))",
      "579:   def testUnbatchGradInvalidBatchId(self):",
      "580:     with self.assertRaises(errors.InvalidArgumentError):",
      "581:       self.evaluate(",
      "582:           gen_batch_ops.unbatch_grad(",
      "583:               original_input=constant_op.constant([1]),",
      "584:               batch_index=constant_op.constant([",
      "585:                   [0, 0],",
      "586:               ], dtype=dtypes.int64),",
      "587:               grad=constant_op.constant([",
      "588:                   1,",
      "589:               ]),",
      "590:               id=constant_op.constant([",
      "591:                   1,",
      "592:               ], dtype=dtypes.int64)))",
      "594:   def testUnbatchGradInvalidArgs(self):",
      "595:     original_input = random_ops.random_uniform(",
      "596:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
      "597:     batch_index = random_ops.random_uniform(",
      "598:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
      "599:     grad = random_ops.random_uniform(",
      "600:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
      "601:     batch_id = random_ops.random_uniform(",
      "602:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
      "603:     with self.assertRaises(errors.InvalidArgumentError):",
      "604:       self.evaluate(",
      "605:           gen_batch_ops.unbatch_grad(",
      "606:               original_input=original_input,",
      "607:               batch_index=batch_index,",
      "608:               grad=grad,",
      "609:               id=batch_id,",
      "610:               container=\"\",",
      "611:               shared_name=\"\",",
      "612:               name=\"\"))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "67ea2f03d9185c63cc523a762dd818f1ce5bb595",
      "candidate_info": {
        "commit_hash": "67ea2f03d9185c63cc523a762dd818f1ce5bb595",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/67ea2f03d9185c63cc523a762dd818f1ce5bb595",
        "files": [
          "tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc",
          "tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/core/kernels/resource_ops_test.cc",
          "tensorflow/core/tpu/kernels/tpu_configuration_ops.cc",
          "tensorflow/dtensor/cc/dtensor_tpu_kernels.cc",
          "tensorflow/python/framework/test_ops.cc"
        ],
        "message": "Add OP_REQUIRES checks to inputs cast to scalars\n\nWhen casting constant inputs to scalars, we should check first if the tensor is\nan actual scalar, otherwise the cast will crash a CHECK_EQ in tensorflow/core/framework/tensor.cc in `void Tensor::CheckIsAlignedAndSingleElement`\n\nPiperOrigin-RevId: 480727777",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc||tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc",
          "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/core/kernels/resource_ops_test.cc||tensorflow/core/kernels/resource_ops_test.cc",
          "tensorflow/core/tpu/kernels/tpu_configuration_ops.cc||tensorflow/core/tpu/kernels/tpu_configuration_ops.cc",
          "tensorflow/dtensor/cc/dtensor_tpu_kernels.cc||tensorflow/dtensor/cc/dtensor_tpu_kernels.cc",
          "tensorflow/python/framework/test_ops.cc||tensorflow/python/framework/test_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc||tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc": [
          "File: tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc -> tensorflow/compiler/tf2xla/light_outside_compilation_kernels_for_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   void Compute(OpKernelContext* ctx) override {",
          "264:     const Tensor& input = ctx->input(0);",
          "266:     int constant_to_add = ctx->input(1).scalar<int>()();",
          "267:     size_t allocated_size = input.AllocatedBytes();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:     OP_REQUIRES(",
          "267:         ctx, TensorShapeUtils::IsScalar(ctx->input(1).shape()),",
          "268:         errors::InvalidArgument(\"Expected argument 0 to be a scalar. Received\",",
          "269:                                 ctx->input(1).DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc": [
          "File: tensorflow/core/kernels/batch_kernels.cc -> tensorflow/core/kernels/batch_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:     const Tensor& batch_key_t = context->input(3);",
          "897:     mutex_lock ml(mu_);",
          "899:       return errors::InvalidArgument(\"Expected `id` to be scalar. Received \",",
          "900:                                      batch_key_t.DebugString());",
          "901:     }",
          "",
          "[Removed Lines]",
          "898:     if (batch_key_t.NumElements() != 1) {",
          "",
          "[Added Lines]",
          "898:     if (!TensorShapeUtils::IsScalar(batch_key_t.shape())) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc": [
          "File: tensorflow/core/kernels/list_kernels.cc -> tensorflow/core/kernels/list_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:                                         DataTypeString(element_dtype_),",
          "452:                                         \" but list elements \",",
          "453:                                         DataTypeString(l->element_dtype)));",
          "454:     int32_t index = c->input(1).scalar<int32>()();",
          "455:     OP_REQUIRES(c, index < l->tensors().size(),",
          "456:                 errors::InvalidArgument(\"Trying to modify element \", index,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     OP_REQUIRES(",
          "455:         c, TensorShapeUtils::IsScalar(c->input(1).shape()),",
          "456:         errors::InvalidArgument(\"Expected argument 1 to be a scalar. Received\",",
          "457:                                 c->input(1).DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/resource_ops_test.cc||tensorflow/core/kernels/resource_ops_test.cc": [
          "File: tensorflow/core/kernels/resource_ops_test.cc -> tensorflow/core/kernels/resource_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:       : OpKernel(ctx) {}",
          "55:   void Compute(OpKernelContext* ctx) override {",
          "56:     bool* alive = reinterpret_cast<bool*>(ctx->input(0).scalar<int64_t>()());",
          "57:     int payload = ctx->input(1).scalar<int>()();",
          "58:     AllocatorAttributes attr;",
          "59:     Tensor handle_tensor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     OP_REQUIRES(",
          "57:         ctx, TensorShapeUtils::IsScalar(ctx->input(0).shape()),",
          "58:         errors::InvalidArgument(\"Expected argument 0 to be a scalar. Received\",",
          "59:                                 ctx->input(0).DebugString()));",
          "61:     OP_REQUIRES(",
          "62:         ctx, TensorShapeUtils::IsScalar(ctx->input(1).shape()),",
          "63:         errors::InvalidArgument(\"Expected argument 1 to be a scalar. Received\",",
          "64:                                 ctx->input(1).DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/core/tpu/kernels/tpu_configuration_ops.cc||tensorflow/core/tpu/kernels/tpu_configuration_ops.cc": [
          "File: tensorflow/core/tpu/kernels/tpu_configuration_ops.cc -> tensorflow/core/tpu/kernels/tpu_configuration_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   XLA_SCOPED_LOGGING_TIMER(\"InitializeHostForDistributedTpuOp\");",
          "277:   auto* rmgr = GetTPUConfigResourceMgr();",
          "278:   auto tpu_host_config = ctx->input(0).scalar<tstring>()();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(ctx->input(0).shape()),",
          "279:               errors::InvalidArgument(\"argument at 0 place must be a scalar\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:   VLOG(1) << \"SetGlobalTPUArrayOp\";",
          "445:   XLA_SCOPED_LOGGING_TIMER(\"SetGlobalTPUArrayOp\");",
          "447:   auto tpu_topology = ctx->input(0).scalar<tstring>()();",
          "448:   TF_Status* status = TF_NewStatus();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:   OP_REQUIRES(",
          "450:       ctx, TensorShapeUtils::IsScalar(ctx->input(0).shape()),",
          "451:       errors::InvalidArgument(\"Expected argument 0 to be a scalar. Received\",",
          "452:                               ctx->input(0).DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/dtensor/cc/dtensor_tpu_kernels.cc||tensorflow/dtensor/cc/dtensor_tpu_kernels.cc": [
          "File: tensorflow/dtensor/cc/dtensor_tpu_kernels.cc -> tensorflow/dtensor/cc/dtensor_tpu_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:       : OpKernel(ctx) {}",
          "286:   void Compute(OpKernelContext* ctx) override {",
          "287:     VLOG(1) << \"SetGlobalTPUArrayOpKernel op\";",
          "288:     auto tpu_topology = ctx->input(0).scalar<tstring>()();",
          "289:     TF_Status* status = TF_NewStatus();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:     OP_REQUIRES(",
          "289:         ctx, TensorShapeUtils::IsScalar(ctx->input(0).shape()),",
          "290:         errors::InvalidArgument(\"Expected argument 0 to be a scalar. Received\",",
          "291:                                 ctx->input(0).DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/framework/test_ops.cc||tensorflow/python/framework/test_ops.cc": [
          "File: tensorflow/python/framework/test_ops.cc -> tensorflow/python/framework/test_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   explicit SleepOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}",
          "213:   void Compute(OpKernelContext* ctx) override {",
          "214:     absl::SleepFor(absl::Seconds(ctx->input(0).scalar<int>()()));",
          "215:   }",
          "216: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     OP_REQUIRES(",
          "215:         ctx, TensorShapeUtils::IsScalar(ctx->input(0).shape()),",
          "216:         errors::InvalidArgument(\"Expected argument 0 to be a scalar. Received\",",
          "217:                                 ctx->input(0).DebugString()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   explicit SleepIdentityOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}",
          "224:   void Compute(OpKernelContext* ctx) override {",
          "225:     absl::SleepFor(absl::Seconds(ctx->input(0).scalar<int>()()));",
          "226:     ctx->set_output(0, ctx->input(1));",
          "227:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:     OP_REQUIRES(",
          "230:         ctx, TensorShapeUtils::IsScalar(ctx->input(0).shape()),",
          "231:         errors::InvalidArgument(\"Expected argument 0 to be a scalar. Received\",",
          "232:                                 ctx->input(0).DebugString()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c122773d9c32bbe7902d95650159e90d5457bf54",
      "candidate_info": {
        "commit_hash": "c122773d9c32bbe7902d95650159e90d5457bf54",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c122773d9c32bbe7902d95650159e90d5457bf54",
        "files": [
          "tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/python/ops/batch_ops_test.py"
        ],
        "message": "Fix security vulnerability with UnbatchGradKernel\n\nPiperOrigin-RevId: 460992964",
        "before_after_code_files": [
          "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
            "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
            "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc": [
          "File: tensorflow/core/kernels/batch_kernels.cc -> tensorflow/core/kernels/batch_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:     const Tensor& data_t = context->input(0);",
          "880:     const Tensor& batch_index_t = context->input(1);",
          "881:     const Tensor& grad_t = context->input(2);",
          "883:     mutex_lock ml(mu_);",
          "885:     const int64_t batch_key = context->input(3).scalar<int64_t>()();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:     const Tensor& batch_key_t = context->input(3);",
          "885:     if (batch_key_t.NumElements() != 1) {",
          "886:       return errors::InvalidArgument(\"Expected `id` to be scalar. Received \",",
          "887:                                      batch_key_t.DebugString());",
          "888:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:             \"batch_index is empty while the tensor isn't.\");",
          "897:       }",
          "898:       std::unordered_set<int64_t> missing_tensors;",
          "899:       const auto batch_index =",
          "900:           batch_index_t.shaped<int64_t, 2>({batch_index_t.dim_size(0), 3});",
          "901:       for (int i = 0; i < batch_index_t.dim_size(0); ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:       if (batch_index_t.NumElements() != batch_index_t.dim_size(0) * 3) {",
          "905:         return errors::InvalidArgument(",
          "906:             \"batch_index should contain \", batch_index_t.dim_size(0) * 3,",
          "907:             \" elements. Received \", batch_index_t.NumElements());",
          "908:       }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py": [
          "File: tensorflow/python/ops/batch_ops_test.py -> tensorflow/python/ops/batch_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.core.protobuf import config_pb2",
          "26: from tensorflow.python.eager import context",
          "27: from tensorflow.python.framework import dtypes",
          "28: from tensorflow.python.framework import function",
          "29: from tensorflow.python.framework import ops",
          "30: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: from tensorflow.python.ops import gen_batch_ops",
          "35: from tensorflow.python.ops import gen_functional_ops",
          "36: from tensorflow.python.ops import math_ops",
          "37: from tensorflow.python.ops import resource_variable_ops",
          "38: from tensorflow.python.ops import script_ops",
          "39: from tensorflow.python.ops import variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "561:       # The thread's call should hit the timeout, and thus get 0 results.",
          "562:       self.assertEqual(len(thread_results), 0)",
          "565: if __name__ == \"__main__\":",
          "566:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:   def testUnbatchGradInvalidId(self):",
          "568:     with self.assertRaises(errors.InvalidArgumentError):",
          "569:       self.evaluate(",
          "570:           gen_batch_ops.unbatch_grad(",
          "571:               original_input=constant_op.constant([1]),",
          "572:               batch_index=constant_op.constant([",
          "573:                   [0, 0, 0],",
          "574:               ], dtype=dtypes.int64),",
          "575:               grad=constant_op.constant([",
          "576:                   1,",
          "577:               ]),",
          "578:               id=constant_op.constant([",
          "579:                   1,",
          "580:                   1,",
          "581:               ], dtype=dtypes.int64)))",
          "583:   def testUnbatchGradInvalidBatchId(self):",
          "584:     with self.assertRaises(errors.InvalidArgumentError):",
          "585:       self.evaluate(",
          "586:           gen_batch_ops.unbatch_grad(",
          "587:               original_input=constant_op.constant([1]),",
          "588:               batch_index=constant_op.constant([",
          "589:                   [0, 0],",
          "590:               ], dtype=dtypes.int64),",
          "591:               grad=constant_op.constant([",
          "592:                   1,",
          "593:               ]),",
          "594:               id=constant_op.constant([",
          "595:                   1,",
          "596:               ], dtype=dtypes.int64)))",
          "598:   def testUnbatchGradInvalidArgs(self):",
          "599:     original_input = random_ops.random_uniform(",
          "600:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
          "601:     batch_index = random_ops.random_uniform(",
          "602:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
          "603:     grad = random_ops.random_uniform(",
          "604:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
          "605:     batch_id = random_ops.random_uniform(",
          "606:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
          "607:     with self.assertRaises(errors.InvalidArgumentError):",
          "608:       self.evaluate(",
          "609:           gen_batch_ops.unbatch_grad(",
          "610:               original_input=original_input,",
          "611:               batch_index=batch_index,",
          "612:               grad=grad,",
          "613:               id=batch_id,",
          "614:               container=\"\",",
          "615:               shared_name=\"\",",
          "616:               name=\"\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c0e172b293f19e6df8e669cccc4811bfe00125",
      "candidate_info": {
        "commit_hash": "b1c0e172b293f19e6df8e669cccc4811bfe00125",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b1c0e172b293f19e6df8e669cccc4811bfe00125",
        "files": [
          "tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/python/ops/batch_ops_test.py"
        ],
        "message": "Fix security vulnerability with UnbatchGradKernel\n\nPiperOrigin-RevId: 460992964",
        "before_after_code_files": [
          "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
            "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
            "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc": [
          "File: tensorflow/core/kernels/batch_kernels.cc -> tensorflow/core/kernels/batch_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:     const Tensor& data_t = context->input(0);",
          "886:     const Tensor& batch_index_t = context->input(1);",
          "887:     const Tensor& grad_t = context->input(2);",
          "889:     mutex_lock ml(mu_);",
          "891:     const int64_t batch_key = context->input(3).scalar<int64_t>()();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:     const Tensor& batch_key_t = context->input(3);",
          "891:     if (batch_key_t.NumElements() != 1) {",
          "892:       return errors::InvalidArgument(\"Expected `id` to be scalar. Received \",",
          "893:                                      batch_key_t.DebugString());",
          "894:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:             \"batch_index is empty while the tensor isn't.\");",
          "903:       }",
          "904:       std::unordered_set<int64_t> missing_tensors;",
          "905:       const auto batch_index =",
          "906:           batch_index_t.shaped<int64_t, 2>({batch_index_t.dim_size(0), 3});",
          "907:       for (int i = 0; i < batch_index_t.dim_size(0); ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910:       if (batch_index_t.NumElements() != batch_index_t.dim_size(0) * 3) {",
          "911:         return errors::InvalidArgument(",
          "912:             \"batch_index should contain \", batch_index_t.dim_size(0) * 3,",
          "913:             \" elements. Received \", batch_index_t.NumElements());",
          "914:       }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py": [
          "File: tensorflow/python/ops/batch_ops_test.py -> tensorflow/python/ops/batch_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from tensorflow.core.protobuf import config_pb2",
          "22: from tensorflow.python.eager import context",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import function",
          "25: from tensorflow.python.framework import ops",
          "26: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: from tensorflow.python.ops import gen_batch_ops",
          "31: from tensorflow.python.ops import gen_functional_ops",
          "32: from tensorflow.python.ops import math_ops",
          "33: from tensorflow.python.ops import resource_variable_ops",
          "34: from tensorflow.python.ops import script_ops",
          "35: from tensorflow.python.ops import variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:       # The thread's call should hit the timeout, and thus get 0 results.",
          "558:       self.assertEqual(len(thread_results), 0)",
          "561: if __name__ == \"__main__\":",
          "562:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   def testUnbatchGradInvalidId(self):",
          "564:     with self.assertRaises(errors.InvalidArgumentError):",
          "565:       self.evaluate(",
          "566:           gen_batch_ops.unbatch_grad(",
          "567:               original_input=constant_op.constant([1]),",
          "568:               batch_index=constant_op.constant([",
          "569:                   [0, 0, 0],",
          "570:               ], dtype=dtypes.int64),",
          "571:               grad=constant_op.constant([",
          "572:                   1,",
          "573:               ]),",
          "574:               id=constant_op.constant([",
          "575:                   1,",
          "576:                   1,",
          "577:               ], dtype=dtypes.int64)))",
          "579:   def testUnbatchGradInvalidBatchId(self):",
          "580:     with self.assertRaises(errors.InvalidArgumentError):",
          "581:       self.evaluate(",
          "582:           gen_batch_ops.unbatch_grad(",
          "583:               original_input=constant_op.constant([1]),",
          "584:               batch_index=constant_op.constant([",
          "585:                   [0, 0],",
          "586:               ], dtype=dtypes.int64),",
          "587:               grad=constant_op.constant([",
          "588:                   1,",
          "589:               ]),",
          "590:               id=constant_op.constant([",
          "591:                   1,",
          "592:               ], dtype=dtypes.int64)))",
          "594:   def testUnbatchGradInvalidArgs(self):",
          "595:     original_input = random_ops.random_uniform(",
          "596:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
          "597:     batch_index = random_ops.random_uniform(",
          "598:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
          "599:     grad = random_ops.random_uniform(",
          "600:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
          "601:     batch_id = random_ops.random_uniform(",
          "602:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
          "603:     with self.assertRaises(errors.InvalidArgumentError):",
          "604:       self.evaluate(",
          "605:           gen_batch_ops.unbatch_grad(",
          "606:               original_input=original_input,",
          "607:               batch_index=batch_index,",
          "608:               grad=grad,",
          "609:               id=batch_id,",
          "610:               container=\"\",",
          "611:               shared_name=\"\",",
          "612:               name=\"\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95f789f0cbc2c7a04ff0774f0cf946d89e1682f9",
      "candidate_info": {
        "commit_hash": "95f789f0cbc2c7a04ff0774f0cf946d89e1682f9",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/95f789f0cbc2c7a04ff0774f0cf946d89e1682f9",
        "files": [
          "tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/python/ops/batch_ops_test.py"
        ],
        "message": "Fix security vulnerability with UnbatchGradKernel\n\nPiperOrigin-RevId: 460992964",
        "before_after_code_files": [
          "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
          "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
            "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc",
            "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/batch_kernels.cc||tensorflow/core/kernels/batch_kernels.cc": [
          "File: tensorflow/core/kernels/batch_kernels.cc -> tensorflow/core/kernels/batch_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:     const Tensor& data_t = context->input(0);",
          "886:     const Tensor& batch_index_t = context->input(1);",
          "887:     const Tensor& grad_t = context->input(2);",
          "889:     mutex_lock ml(mu_);",
          "891:     const int64_t batch_key = context->input(3).scalar<int64_t>()();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:     const Tensor& batch_key_t = context->input(3);",
          "891:     if (batch_key_t.NumElements() != 1) {",
          "892:       return errors::InvalidArgument(\"Expected `id` to be scalar. Received \",",
          "893:                                      batch_key_t.DebugString());",
          "894:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:             \"batch_index is empty while the tensor isn't.\");",
          "903:       }",
          "904:       std::unordered_set<int64_t> missing_tensors;",
          "905:       const auto batch_index =",
          "906:           batch_index_t.shaped<int64_t, 2>({batch_index_t.dim_size(0), 3});",
          "907:       for (int i = 0; i < batch_index_t.dim_size(0); ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910:       if (batch_index_t.NumElements() != batch_index_t.dim_size(0) * 3) {",
          "911:         return errors::InvalidArgument(",
          "912:             \"batch_index should contain \", batch_index_t.dim_size(0) * 3,",
          "913:             \" elements. Received \", batch_index_t.NumElements());",
          "914:       }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/batch_ops_test.py||tensorflow/python/ops/batch_ops_test.py": [
          "File: tensorflow/python/ops/batch_ops_test.py -> tensorflow/python/ops/batch_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from tensorflow.core.protobuf import config_pb2",
          "22: from tensorflow.python.eager import context",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import function",
          "25: from tensorflow.python.framework import ops",
          "26: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: from tensorflow.python.ops import gen_batch_ops",
          "31: from tensorflow.python.ops import gen_functional_ops",
          "32: from tensorflow.python.ops import math_ops",
          "33: from tensorflow.python.ops import resource_variable_ops",
          "34: from tensorflow.python.ops import script_ops",
          "35: from tensorflow.python.ops import variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: from tensorflow.python.ops import random_ops",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:       # The thread's call should hit the timeout, and thus get 0 results.",
          "558:       self.assertEqual(len(thread_results), 0)",
          "561: if __name__ == \"__main__\":",
          "562:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   def testUnbatchGradInvalidId(self):",
          "564:     with self.assertRaises(errors.InvalidArgumentError):",
          "565:       self.evaluate(",
          "566:           gen_batch_ops.unbatch_grad(",
          "567:               original_input=constant_op.constant([1]),",
          "568:               batch_index=constant_op.constant([",
          "569:                   [0, 0, 0],",
          "570:               ], dtype=dtypes.int64),",
          "571:               grad=constant_op.constant([",
          "572:                   1,",
          "573:               ]),",
          "574:               id=constant_op.constant([",
          "575:                   1,",
          "576:                   1,",
          "577:               ], dtype=dtypes.int64)))",
          "579:   def testUnbatchGradInvalidBatchId(self):",
          "580:     with self.assertRaises(errors.InvalidArgumentError):",
          "581:       self.evaluate(",
          "582:           gen_batch_ops.unbatch_grad(",
          "583:               original_input=constant_op.constant([1]),",
          "584:               batch_index=constant_op.constant([",
          "585:                   [0, 0],",
          "586:               ], dtype=dtypes.int64),",
          "587:               grad=constant_op.constant([",
          "588:                   1,",
          "589:               ]),",
          "590:               id=constant_op.constant([",
          "591:                   1,",
          "592:               ], dtype=dtypes.int64)))",
          "594:   def testUnbatchGradInvalidArgs(self):",
          "595:     original_input = random_ops.random_uniform(",
          "596:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
          "597:     batch_index = random_ops.random_uniform(",
          "598:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
          "599:     grad = random_ops.random_uniform(",
          "600:         shape=(3, 1), dtype=dtypes.float64, maxval=None)",
          "601:     batch_id = random_ops.random_uniform(",
          "602:         shape=(3, 1), dtype=dtypes.int64, maxval=65536)",
          "603:     with self.assertRaises(errors.InvalidArgumentError):",
          "604:       self.evaluate(",
          "605:           gen_batch_ops.unbatch_grad(",
          "606:               original_input=original_input,",
          "607:               batch_index=batch_index,",
          "608:               grad=grad,",
          "609:               id=batch_id,",
          "610:               container=\"\",",
          "611:               shared_name=\"\",",
          "612:               name=\"\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}