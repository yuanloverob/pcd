{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be3a77bd428612dc7c8b6bd0f76e51ef277f4fb0",
      "candidate_info": {
        "commit_hash": "be3a77bd428612dc7c8b6bd0f76e51ef277f4fb0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/be3a77bd428612dc7c8b6bd0f76e51ef277f4fb0",
        "files": [
          "common.gypi"
        ],
        "message": "build: don't use \"-Wnewline-eof\" on OS X\n\nThis is the only thing preventing a manually compiled version of GCC\n(rather than Apple's provided llvm-gcc or heavily modified gcc 4.2)\nfrom working properly, so we might as well enable support for that.\n\nWith this patch I was able to compile node using a manually compiled\ngcc 4.7.1.\n\nCloses #3887.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:           'GCC_ENABLE_PASCAL_STRINGS': 'NO',        # No -mpascal-strings",
          "191:           'GCC_THREADSAFE_STATICS': 'NO',           # -fno-threadsafe-statics",
          "192:           'GCC_VERSION': '4.2',",
          "194:           'PREBINDING': 'NO',                       # No -Wl,-prebind",
          "195:           'MACOSX_DEPLOYMENT_TARGET': '10.5',       # -mmacosx-version-min=10.5",
          "196:           'USE_HEADERMAP': 'NO',",
          "",
          "[Removed Lines]",
          "193:           'GCC_WARN_ABOUT_MISSING_NEWLINE': 'YES',  # -Wnewline-eof",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c08357c32fd52c89a4f952ff9dd4ac0608adb88a",
      "candidate_info": {
        "commit_hash": "c08357c32fd52c89a4f952ff9dd4ac0608adb88a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c08357c32fd52c89a4f952ff9dd4ac0608adb88a",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Floating patches",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:             'cflags': [ '-I/usr/pkg/include' ],",
          "318:           }],",
          "319:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "321:                         '-Wnon-virtual-dtor', '-Woverloaded-virtual' ],",
          "322:           }],",
          "323:         ],",
          "",
          "[Removed Lines]",
          "320:             'cflags': [ '-Wall', '<(werror)', '-W', '-Wno-unused-parameter',",
          "",
          "[Added Lines]",
          "320:             'cflags': [ '-Wno-unused-parameter',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aa2fd3b2cf588196dbb12beef7ec242af5c0f2f",
      "candidate_info": {
        "commit_hash": "3aa2fd3b2cf588196dbb12beef7ec242af5c0f2f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3aa2fd3b2cf588196dbb12beef7ec242af5c0f2f",
        "files": [
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/kqueue.c"
        ],
        "message": "uv: upgrade to b3fe183",
        "before_after_code_files": [
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: void uv_close(uv_handle_t* handle, uv_close_cb close_cb) {",
          "67:   uv_udp_t* udp;",
          "68:   uv_async_t* async;",
          "70:   uv_stream_t* stream;",
          "71:   uv_process_t* process;",
          "",
          "[Removed Lines]",
          "69:   uv_timer_t* timer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:       break;",
          "125:     case UV_TIMER:",
          "131:       break;",
          "133:     case UV_PROCESS:",
          "",
          "[Removed Lines]",
          "126:       timer = (uv_timer_t*)handle;",
          "127:       if (ev_is_active(&timer->timer_watcher)) {",
          "128:         ev_ref(timer->loop->ev);",
          "129:       }",
          "130:       ev_timer_stop(timer->loop->ev, &timer->timer_watcher);",
          "",
          "[Added Lines]",
          "125:       uv_timer_stop((uv_timer_t*)handle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "524: }",
          "527: static void uv__timer_cb(EV_P_ ev_timer* w, int revents) {",
          "528:   uv_timer_t* timer = w->data;",
          "531:     ev_ref(EV_A);",
          "532:   }",
          "",
          "[Removed Lines]",
          "530:   if (!ev_is_active(w)) {",
          "",
          "[Added Lines]",
          "522: static int uv__timer_active(const uv_timer_t* timer) {",
          "523:   return timer->flags & UV_TIMER_ACTIVE;",
          "524: }",
          "527: static int uv__timer_repeating(const uv_timer_t* timer) {",
          "528:   return timer->flags & UV_TIMER_REPEAT;",
          "529: }",
          "535:   assert(uv__timer_active(timer));",
          "537:   if (!uv__timer_repeating(timer)) {",
          "538:     timer->flags &= ~UV_TIMER_ACTIVE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551: int uv_timer_start(uv_timer_t* timer, uv_timer_cb cb, int64_t timeout,",
          "552:     int64_t repeat) {",
          "554:     return -1;",
          "555:   }",
          "557:   timer->timer_cb = cb;",
          "558:   ev_timer_set(&timer->timer_watcher, timeout / 1000.0, repeat / 1000.0);",
          "559:   ev_timer_start(timer->loop->ev, &timer->timer_watcher);",
          "560:   ev_unref(timer->loop->ev);",
          "561:   return 0;",
          "562: }",
          "565: int uv_timer_stop(uv_timer_t* timer) {",
          "567:     ev_ref(timer->loop->ev);",
          "568:   }",
          "570:   ev_timer_stop(timer->loop->ev, &timer->timer_watcher);",
          "571:   return 0;",
          "572: }",
          "575: int uv_timer_again(uv_timer_t* timer) {",
          "577:     uv__set_sys_error(timer->loop, EINVAL);",
          "578:     return -1;",
          "579:   }",
          "581:   ev_timer_again(timer->loop->ev, &timer->timer_watcher);",
          "582:   return 0;",
          "583: }",
          "585: void uv_timer_set_repeat(uv_timer_t* timer, int64_t repeat) {",
          "586:   assert(timer->type == UV_TIMER);",
          "587:   timer->timer_watcher.repeat = repeat / 1000.0;",
          "588: }",
          "590: int64_t uv_timer_get_repeat(uv_timer_t* timer) {",
          "591:   assert(timer->type == UV_TIMER);",
          "592:   return (int64_t)(1000 * timer->timer_watcher.repeat);",
          "",
          "[Removed Lines]",
          "553:   if (ev_is_active(&timer->timer_watcher)) {",
          "566:   if (ev_is_active(&timer->timer_watcher)) {",
          "576:   if (!ev_is_active(&timer->timer_watcher)) {",
          "",
          "[Added Lines]",
          "561:   if (uv__timer_active(timer)) {",
          "566:   timer->flags |= UV_TIMER_ACTIVE;",
          "568:   if (repeat)",
          "569:     timer->flags |= UV_TIMER_REPEAT;",
          "570:   else",
          "571:     timer->flags &= ~UV_TIMER_REPEAT;",
          "582:   if (uv__timer_active(timer)) {",
          "586:   timer->flags &= ~(UV_TIMER_ACTIVE | UV_TIMER_REPEAT);",
          "594:   if (!uv__timer_active(timer)) {",
          "599:   assert(uv__timer_repeating(timer));",
          "609:   if (repeat)",
          "610:     timer->flags |= UV_TIMER_REPEAT;",
          "611:   else",
          "612:     timer->flags &= ~UV_TIMER_REPEAT;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c": [
          "File: deps/uv/src/unix/ev/ev.c -> deps/uv/src/unix/ev/ev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2554: ev_unref (EV_P)",
          "2555: {",
          "2556:   --activecnt;",
          "2557: }",
          "2559: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2557:   if (activecnt < 0) abort();",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: };",
          "157: size_t uv__strlcpy(char* dst, const char* src, size_t size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   UV_TIMER_ACTIVE  = 0x080,",
          "156:   UV_TIMER_REPEAT  = 0x100",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c": [
          "File: deps/uv/src/unix/kqueue.c -> deps/uv/src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   handle->cb(handle, NULL, events, 0);",
          "76: }",
          "",
          "[Removed Lines]",
          "71:   uv__fs_event_stop(handle);",
          "74:   if (handle->fd != -1)",
          "75:     uv__fs_event_start(handle);",
          "",
          "[Added Lines]",
          "71:   if (handle->fd == -1)",
          "72:     return;",
          "75:   uv__fs_event_stop(handle);",
          "76:   uv__fs_event_start(handle);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d38d7bea6c08ba9b1367ebd44f9ade1154e3d04d",
      "candidate_info": {
        "commit_hash": "d38d7bea6c08ba9b1367ebd44f9ade1154e3d04d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d38d7bea6c08ba9b1367ebd44f9ade1154e3d04d",
        "files": [
          "src/node_object_wrap.h"
        ],
        "message": "unix: don't explicitly instantiate v8::Persistent<x> templates\n\nThese explicit instantiations were added to make MSVC happy. It turns\nout that some older versions of gcc and llvm now complain about duplicate\nsymbols, so we instantiate these templates only when MSVC is used.",
        "before_after_code_files": [
          "src/node_object_wrap.h||src/node_object_wrap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_object_wrap.h||src/node_object_wrap.h": [
          "File: src/node_object_wrap.h -> src/node_object_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: namespace node {",
          "",
          "[Removed Lines]",
          "32: template class NODE_EXTERN v8::Persistent<v8::Object>;",
          "33: template class NODE_EXTERN v8::Persistent<v8::FunctionTemplate>;",
          "",
          "[Added Lines]",
          "32: #ifdef _MSC_VER",
          "33:   template class NODE_EXTERN v8::Persistent<v8::Object>;",
          "34:   template class NODE_EXTERN v8::Persistent<v8::FunctionTemplate>;",
          "35: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fc0c27d5cc3455ed37eccd748ffc2f90b45a635",
      "candidate_info": {
        "commit_hash": "5fc0c27d5cc3455ed37eccd748ffc2f90b45a635",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5fc0c27d5cc3455ed37eccd748ffc2f90b45a635",
        "files": [
          "src/node.cc",
          "src/node_extensions.h",
          "src/node_internals.h",
          "src/node_isolate.cc",
          "test/addons/shared-buffer/test.js",
          "test/simple/test-isolates.js"
        ],
        "message": "move isolate V8 functions out of node.cc",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_extensions.h||src/node_extensions.h",
          "src/node_internals.h||src/node_internals.h",
          "src/node_isolate.cc||src/node_isolate.cc",
          "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_isolate.h>",
          "25: #include <uv.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <node_internals.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: static void CheckStatus(uv_timer_t* watcher, int status);",
          "150: uv_loop_t* Loop() {",
          "151: #if defined(HAVE_ISOLATES) && HAVE_ISOLATES",
          "",
          "[Removed Lines]",
          "145: void StartThread(Isolate* isolate,",
          "146:                  int argc,",
          "147:                  char** argv);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1859: }",
          "1938: static Handle<Value> ProcessTitleGetter(Local<String> property,",
          "1939:                                         const AccessorInfo& info) {",
          "1940:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "1862: static void RunIsolate(void* arg) {",
          "1863:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "1864:   isolate->Enter();",
          "1865:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "1866:   isolate->Dispose();",
          "1867:   delete isolate;",
          "1868: }",
          "1871: static char magic_isolate_cookie_[] = \"magic isolate cookie\";",
          "1874: static Handle<Value> NewIsolate(const Arguments& args) {",
          "1875:   HandleScope scope;",
          "1877:   assert(args[0]->IsArray());",
          "1879:   Local<Array> argv = args[0].As<Array>();",
          "1880:   assert(argv->Length() >= 2);",
          "1884:   Isolate* isolate = new node::Isolate();",
          "1887:   isolate->argc_ = argv->Length();",
          "1888:   isolate->argv_ = new char*[isolate->argc_ + 1];",
          "1889:   for (int i = 0; i < isolate->argc_; ++i) {",
          "1890:     String::Utf8Value str(argv->Get(i));",
          "1891:     size_t size = 1 + strlen(*str);",
          "1892:     isolate->argv_[i] = new char[size];",
          "1893:     memcpy(isolate->argv_[i], *str, size);",
          "1894:   }",
          "1895:   isolate->argv_[isolate->argc_] = NULL;",
          "1897:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "1898:     delete isolate;",
          "1899:     return Null();",
          "1900:   }",
          "1902:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "1903:   tpl->SetInternalFieldCount(2);",
          "1905:   Local<Object> obj = tpl->NewInstance();",
          "1906:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1907:   obj->SetPointerInInternalField(1, isolate);",
          "1909:   return scope.Close(obj);",
          "1910: }",
          "1913: static Handle<Value> CountIsolate(const Arguments& args) {",
          "1914:   HandleScope scope;",
          "1915:   return scope.Close(Integer::New(Isolate::Count()));",
          "1916: }",
          "1919: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "1920:   HandleScope scope;",
          "1922:   assert(args[0]->IsObject());",
          "1924:   Local<Object> obj = args[0]->ToObject();",
          "1925:   assert(obj->InternalFieldCount() == 2);",
          "1926:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1928:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "1929:       obj->GetPointerFromInternalField(1));",
          "1931:   if (uv_thread_join(&ti->tid_))",
          "1932:     return False(); // error",
          "1933:   else",
          "1934:     return True();  // ok",
          "1935: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2207:   NODE_SET_METHOD(process, \"binding\", Binding);",
          "2213:   return process;",
          "2214: }",
          "",
          "[Removed Lines]",
          "2209:   NODE_SET_METHOD(process, \"_newIsolate\", NewIsolate);",
          "2210:   NODE_SET_METHOD(process, \"_countIsolate\", CountIsolate);",
          "2211:   NODE_SET_METHOD(process, \"_joinIsolate\", JoinIsolate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_extensions.h||src/node_extensions.h": [
          "File: src/node_extensions.h -> src/node_extensions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: NODE_EXT_LIST_ITEM(node_os)",
          "35: NODE_EXT_LIST_ITEM(node_zlib)",
          "38: NODE_EXT_LIST_ITEM(node_timer_wrap)",
          "39: NODE_EXT_LIST_ITEM(node_tcp_wrap)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #if defined(HAVE_ISOLATES) && HAVE_ISOLATES",
          "38: NODE_EXT_LIST_ITEM(node_isolates)",
          "39: #endif",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: namespace node {",
          "27: #ifndef offset_of",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: class Isolate;",
          "32: void StartThread(Isolate* isolate, int argc, char** argv);",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdlib.h>",
          "25: #include <string.h>",
          "26: #include <assert.h>",
          "30: namespace node {",
          "33: static volatile bool initialized;",
          "34: static volatile int id;",
          "",
          "[Removed Lines]",
          "22: #include \"node_isolate.h\"",
          "",
          "[Added Lines]",
          "22: #include <node.h>",
          "23: #include <node_isolate.h>",
          "24: #include <node_internals.h>",
          "25: #include <v8.h>",
          "34: using v8::Arguments;",
          "35: using v8::Array;",
          "36: using v8::False;",
          "37: using v8::Handle;",
          "38: using v8::HandleScope;",
          "39: using v8::Integer;",
          "40: using v8::Local;",
          "41: using v8::Null;",
          "42: using v8::Object;",
          "43: using v8::ObjectTemplate;",
          "44: using v8::String;",
          "45: using v8::True;",
          "46: using v8::Value;",
          "48: static char magic_isolate_cookie_[] = \"magic isolate cookie\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: }",
          "169: } // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: static void RunIsolate(void* arg) {",
          "188:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "189:   isolate->Enter();",
          "195:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "197:   isolate->Dispose();",
          "198:   delete isolate;",
          "199: }",
          "202: static Handle<Value> CreateIsolate(const Arguments& args) {",
          "203:   HandleScope scope;",
          "205:   assert(args[0]->IsArray());",
          "207:   Local<Array> argv = args[0].As<Array>();",
          "208:   assert(argv->Length() >= 2);",
          "212:   Isolate* isolate = new node::Isolate();",
          "215:   isolate->argc_ = argv->Length();",
          "216:   isolate->argv_ = new char*[isolate->argc_ + 1];",
          "217:   for (int i = 0; i < isolate->argc_; ++i) {",
          "218:     String::Utf8Value str(argv->Get(i));",
          "219:     size_t size = 1 + strlen(*str);",
          "220:     isolate->argv_[i] = new char[size];",
          "221:     memcpy(isolate->argv_[i], *str, size);",
          "222:   }",
          "223:   isolate->argv_[isolate->argc_] = NULL;",
          "225:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "226:     delete isolate;",
          "227:     return Null();",
          "228:   }",
          "231:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "232:   tpl->SetInternalFieldCount(2);",
          "234:   Local<Object> obj = tpl->NewInstance();",
          "235:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "236:   obj->SetPointerInInternalField(1, isolate);",
          "238:   return scope.Close(obj);",
          "239: }",
          "242: static Handle<Value> CountIsolate(const Arguments& args) {",
          "243:   HandleScope scope;",
          "244:   return scope.Close(Integer::New(Isolate::Count()));",
          "245: }",
          "248: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "249:   HandleScope scope;",
          "251:   assert(args[0]->IsObject());",
          "253:   Local<Object> obj = args[0]->ToObject();",
          "254:   assert(obj->InternalFieldCount() == 2);",
          "255:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "257:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "258:       obj->GetPointerFromInternalField(1));",
          "260:   if (uv_thread_join(&ti->tid_))",
          "261:     return False(); // error",
          "262:   else",
          "263:     return True();  // ok",
          "264: }",
          "267: void InitIsolates(Handle<Object> target) {",
          "268:   HandleScope scope;",
          "269:   NODE_SET_METHOD(target, \"create\", CreateIsolate);",
          "270:   NODE_SET_METHOD(target, \"count\", CountIsolate);",
          "271:   NODE_SET_METHOD(target, \"join\", JoinIsolate);",
          "272: }",
          "278: NODE_MODULE(node_isolates, node::InitIsolates)",
          "",
          "---------------"
        ],
        "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js": [
          "File: test/addons/shared-buffer/test.js -> test/addons/shared-buffer/test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var assert = require('assert');",
          "2: var binding = require('./out/Release/binding');",
          "4: console.log(\"binding.length =\", binding.length);",
          "6: if (process.tid === 1) {",
          "8:   for (var i = 0; i < binding.length; i++) {",
          "9:     console.log('parent',",
          "10:                 'binding.set(' + i + ', ' + i + ')',",
          "",
          "[Removed Lines]",
          "7:   var isolate = process._newIsolate(process.argv);",
          "",
          "[Added Lines]",
          "3: var isolates = process.binding('isolates');",
          "8:   var isolate = isolates.create(process.argv);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var fs = require('fs');",
          "2: var http = require('http');",
          "6: if (process.tid === 1) {",
          "9:   console.error(\"master\");",
          "10:   fs.stat(__dirname, function(err, stat) {",
          "",
          "[Removed Lines]",
          "4: console.log(\"count: %d\", process._countIsolate());",
          "7:   var isolate = process._newIsolate(process.argv);",
          "",
          "[Added Lines]",
          "3: var isolates = process.binding('isolates');",
          "5: console.log(\"count: %d\", isolates.count());",
          "8:   var isolate = isolates.create(process.argv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     });",
          "20:   }, 500);",
          "23: } else {",
          "24:   console.error(\"slave\");",
          "25:   fs.stat(__dirname, function(err, stat) {",
          "",
          "[Removed Lines]",
          "22:   console.log(\"thread 1 count: %d\", process._countIsolate());",
          "",
          "[Added Lines]",
          "23:   console.log(\"thread 1 count: %d\", isolates.count());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:     });",
          "35:   }, 500);",
          "38: }",
          "",
          "[Removed Lines]",
          "37:   console.error(\"thread 2 count: %d\", process._countIsolate());",
          "",
          "[Added Lines]",
          "38:   console.error(\"thread 2 count: %d\", isolates.count());",
          "",
          "---------------"
        ]
      }
    }
  ]
}