{
  "cve_id": "CVE-2014-8711",
  "cve_desc": "Multiple integer overflows in epan/dissectors/packet-amqp.c in the AMQP dissector in Wireshark 1.10.x before 1.10.11 and 1.12.x before 1.12.2 allow remote attackers to cause a denial of service (application crash) via a crafted amqp_0_10 PDU in a packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "8def8ef9c40189472a46d9b1ad95289780e09af5",
  "patch_info": {
    "commit_hash": "8def8ef9c40189472a46d9b1ad95289780e09af5",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/8def8ef9c40189472a46d9b1ad95289780e09af5",
    "files": [
      "epan/dissectors/packet-amqp.c"
    ],
    "message": "packet-amqp.c: Temporary/preliminary fix for Bug #10582 (crash)\n\nThis is a temporary/preliminary fix to prevent the buildbot fuzz-test\n failures seen when testing the capture file attached to Bug #10582.\n\nAs noted in the bug, a complete fix will require some reworking of\n  the amqp dissector.\n\nChange-Id: I2571f1eeb46a7eede04b8d809e87b95f1ff529df\nReviewed-on: https://code.wireshark.org/review/4835\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
      "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: #define AMQP_INCREMENT(offset, addend, bound) {\\",
      "58:     offset += (addend);\\",
      "59:     THROW_ON((offset > bound), ReportedBoundsError);  \\",
      "60: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: #if 0",
      "63: #define AMQP_INCREMENT(offset, addend, bound) {\\",
      "64:         THROW_ON( \\",
      "65:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
      "66:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
      "67:             , ReportedBoundsError);  \\",
      "68:     offset += (addend); \\",
      "69: }",
      "70: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4655270af94dcf45195cd0206b3e10a32861fa2a",
      "candidate_info": {
        "commit_hash": "4655270af94dcf45195cd0206b3e10a32861fa2a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4655270af94dcf45195cd0206b3e10a32861fa2a",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "packet-amqp.c: Temporary/preliminary fix for Bug #10582 (crash)\n\nThis is a temporary/preliminary fix to prevent the buildbot fuzz-test\n failures seen when testing the capture file attached to Bug #10582.\n\nAs noted in the bug, a complete fix will require some reworking of\n  the amqp dissector.\n\nChange-Id: I2571f1eeb46a7eede04b8d809e87b95f1ff529df\nReviewed-on: https://code.wireshark.org/review/4835\nReviewed-by: Bill Meier <wmeier@newsguy.com>\n(cherry picked from commit 8def8ef9c40189472a46d9b1ad95289780e09af5)\nReviewed-on: https://code.wireshark.org/review/4837\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "57:     offset += (addend);\\",
          "58:     THROW_ON((offset > bound), ReportedBoundsError);  \\",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #if 0",
          "62: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "63:         THROW_ON( \\",
          "64:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
          "65:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
          "66:             , ReportedBoundsError);  \\",
          "67:     offset += (addend); \\",
          "68: }",
          "69: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "531d2945a95f55d403bf1dcd3bb0e8bf105d4f05",
      "candidate_info": {
        "commit_hash": "531d2945a95f55d403bf1dcd3bb0e8bf105d4f05",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/531d2945a95f55d403bf1dcd3bb0e8bf105d4f05",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "packet-amqp.c: Temporary/preliminary fix for Bug #10582 (crash)\n\nThis is a temporary/preliminary fix to prevent the buildbot fuzz-test\n failures seen when testing the capture file attached to Bug #10582.\n\nAs noted in the bug, a complete fix will require some reworking of\n  the amqp dissector.\n\nChange-Id: I2571f1eeb46a7eede04b8d809e87b95f1ff529df\nReviewed-on: https://code.wireshark.org/review/4835\nReviewed-by: Bill Meier <wmeier@newsguy.com>\n(cherry picked from commit 8def8ef9c40189472a46d9b1ad95289780e09af5)\nReviewed-on: https://code.wireshark.org/review/4837\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 4655270af94dcf45195cd0206b3e10a32861fa2a)\nReviewed-on: https://code.wireshark.org/review/4838",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "54:     offset += (addend);\\",
          "55:     THROW_ON((offset > bound), ReportedBoundsError);  \\",
          "56: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #if 0",
          "59: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "60:         THROW_ON( \\",
          "61:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
          "62:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
          "63:             , ReportedBoundsError);  \\",
          "64:     offset += (addend); \\",
          "65: }",
          "66: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f18ced8f1da11e1760b85726b0890457223c768d",
      "candidate_info": {
        "commit_hash": "f18ced8f1da11e1760b85726b0890457223c768d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f18ced8f1da11e1760b85726b0890457223c768d",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "packet-amqp.c: Temporary/preliminary fix for Bug #10582 (crash)\n\nThis is a temporary/preliminary fix to prevent the buildbot fuzz-test\n failures seen when testing the capture file attached to Bug #10582.\n\nAs noted in the bug, a complete fix will require some reworking of\n  the amqp dissector.\n\nChange-Id: I2571f1eeb46a7eede04b8d809e87b95f1ff529df\nReviewed-on: https://code.wireshark.org/review/4835\nReviewed-by: Bill Meier <wmeier@newsguy.com>\n(cherry picked from commit 8def8ef9c40189472a46d9b1ad95289780e09af5)\nReviewed-on: https://code.wireshark.org/review/4837\nReviewed-by: Evan Huus <eapache@gmail.com>\nReviewed-on: https://code.wireshark.org/review/5356",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "57:     offset += (addend);\\",
          "58:     THROW_ON((offset > bound), ReportedBoundsError);  \\",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #if 0",
          "62: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "63:         THROW_ON( \\",
          "64:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
          "65:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
          "66:             , ReportedBoundsError);  \\",
          "67:     offset += (addend); \\",
          "68: }",
          "69: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69875bf282dbd72486da981595f745a76c1346bd",
      "candidate_info": {
        "commit_hash": "69875bf282dbd72486da981595f745a76c1346bd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/69875bf282dbd72486da981595f745a76c1346bd",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "packet-amqp.c: Temporary/preliminary fix for Bug #10582 (crash)\n\nThis is a temporary/preliminary fix to prevent the buildbot fuzz-test\n failures seen when testing the capture file attached to Bug #10582.\n\nAs noted in the bug, a complete fix will require some reworking of\n  the amqp dissector.\n\nChange-Id: I2571f1eeb46a7eede04b8d809e87b95f1ff529df\nReviewed-on: https://code.wireshark.org/review/4835\nReviewed-by: Bill Meier <wmeier@newsguy.com>\n(cherry picked from commit 8def8ef9c40189472a46d9b1ad95289780e09af5)\nReviewed-on: https://code.wireshark.org/review/4837\nReviewed-by: Evan Huus <eapache@gmail.com>\nReviewed-on: https://code.wireshark.org/review/5332\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "57:     offset += (addend);\\",
          "58:     THROW_ON((offset > bound), ReportedBoundsError);  \\",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #if 0",
          "62: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "63:         THROW_ON( \\",
          "64:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
          "65:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
          "66:             , ReportedBoundsError);  \\",
          "67:     offset += (addend); \\",
          "68: }",
          "69: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c44ff776c4d270a8ae1d2fea39eae8c0a14d9dd9",
      "candidate_info": {
        "commit_hash": "c44ff776c4d270a8ae1d2fea39eae8c0a14d9dd9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c44ff776c4d270a8ae1d2fea39eae8c0a14d9dd9",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "amqp: Misc changes;\n\n- amqp_1_0_dissectiom: Use MIN(32-bit-length, 0xFFFF) as the length to dissect;\n  The original code just used the low-order 16 bits of the 32-bit length\n  field  as the length to dissect.\n  Add an expert warning if the actual PDU length is > 65K.\n\n- tvb_length() --> tvb_reported_length()\n\nChange-Id: I3230600f460a8bd495eeec17fa6e704bf24de1a2\nReviewed-on: https://code.wireshark.org/review/5225\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "59:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
          "60:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
          "63: }",
          "",
          "[Removed Lines]",
          "58:         THROW_ON( \\",
          "61:             , ReportedBoundsError);  \\",
          "62:     offset += (addend); \\",
          "",
          "[Added Lines]",
          "58:         THROW_ON(                                                       \\",
          "61:             , ReportedBoundsError);                                     \\",
          "62:         offset += (addend);                                             \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2141: static expert_field ei_amqp_unknown_amqp_command = EI_INIT;",
          "2142: static expert_field ei_amqp_unknown_amqp_type = EI_INIT;",
          "2143: static expert_field ei_amqp_invalid_number_of_params = EI_INIT;",
          "2147: static const value_string amqp_1_0_SASL_code_value [] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2144: static expert_field ei_amqp_amqp_1_0_frame_length_exceeds_65K = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2898:     length = tvb_get_ntohl(tvb, offset + 3);",
          "2900:         length = 1048576;",
          "2901:     return length + 8;",
          "2902: }",
          "",
          "[Removed Lines]",
          "2899:     if (length > 1048576)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3049: static guint",
          "3050: amqp_0_10_get_32bit_size(tvbuff_t *tvb, int offset) {",
          "3051:     guint size = tvb_get_ntohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "3048: #define AMQP_0_10_SIZE_MAX(s) (((unsigned)(s) < (1U<<16)) ? (unsigned)s : (1U<<16))",
          "",
          "[Added Lines]",
          "3048: #define AMQP_0_10_SIZE_MAX(s) (((unsigned)(s) < (1U << 16)) ? (unsigned)s : (1U << 16))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7095:         proto_tree_add_item(amqp_tree, hf_amqp_channel,  tvb, 6, 2, ENC_BIG_ENDIAN);",
          "7096:     }",
          "7100:     frame_type = tvb_get_guint8(tvb, 5);",
          "7101:     THROW_ON((length < offset), ReportedBoundsError);",
          "",
          "[Removed Lines]",
          "7098:     length     = tvb_get_ntohl(tvb, 0);",
          "",
          "[Added Lines]",
          "7100:     {",
          "7101:         guint length32;",
          "7102:         length32 = tvb_get_ntohl(tvb, 0);",
          "7103:         length = (length32 < 0x10000U) ? length32 : 0xFFFFU;",
          "7104:         if (length32 > length) {",
          "7105:             expert_add_info(pinfo, ti, &ei_amqp_amqp_1_0_frame_length_exceeds_65K);",
          "7106:         }",
          "7107:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7117:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "7118:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "7119:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "7121: }",
          "7123: static int",
          "",
          "[Removed Lines]",
          "7120:     return tvb_length(tvb);",
          "",
          "[Added Lines]",
          "7130:     return tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7262:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %d\", frame_type);",
          "7263:     }",
          "7266: }",
          "",
          "[Removed Lines]",
          "7265:     return tvb_length(tvb);",
          "",
          "[Added Lines]",
          "7275:     return tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7906:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %u\", frame_type);",
          "7907:     }",
          "7910: }",
          "",
          "[Removed Lines]",
          "7909:     return tvb_length(tvb);",
          "",
          "[Added Lines]",
          "7919:     return tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "13506:         { &ei_amqp_unknown_amqp_command, { \"amqp.unknown.amqp_command\", PI_PROTOCOL, PI_ERROR, \"Unknown AMQP command\", EXPFILL }},",
          "13507:         { &ei_amqp_unknown_amqp_type,  { \"amqp.unknown.amqp_type\", PI_PROTOCOL, PI_ERROR, \"Unknown AMQP type\", EXPFILL }},",
          "13508:         { &ei_amqp_invalid_number_of_params, { \"amqp.invalid.params_number\", PI_PROTOCOL, PI_ERROR, \"Invalid number of parameters\", EXPFILL }},",
          "13509:     };",
          "13511:     expert_module_t* expert_amqp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13519:         { &ei_amqp_amqp_1_0_frame_length_exceeds_65K, {\"amqp.amqp_1_0_frame_length_exceeds_65K\", PI_PROTOCOL, PI_WARN, \"Frame length exceeds 65K; Dissection limited to 65K\", EXPFILL}},",
          "",
          "---------------"
        ]
      }
    }
  ]
}