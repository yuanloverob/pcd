{
  "cve_id": "CVE-2018-12435",
  "cve_desc": "Botan 2.5.0 through 2.6.0 before 2.7.0 allows a memory-cache side-channel attack on ECDSA signatures, aka the Return Of the Hidden Number Problem or ROHNP, related to dsa/dsa.cpp, ec_group/ec_group.cpp, and ecdsa/ecdsa.cpp. To discover an ECDSA key, the attacker needs access to either the local machine or a different virtual machine on the same physical host.",
  "repo": "randombit/botan",
  "patch_hash": "48fc8df51d99f9d8ba251219367b3d629cc848e3",
  "patch_info": {
    "commit_hash": "48fc8df51d99f9d8ba251219367b3d629cc848e3",
    "repo": "randombit/botan",
    "commit_url": "https://github.com/randombit/botan/commit/48fc8df51d99f9d8ba251219367b3d629cc848e3",
    "files": [
      "doc/security.rst",
      "src/lib/pubkey/dsa/dsa.cpp",
      "src/lib/pubkey/ec_group/ec_group.cpp",
      "src/lib/pubkey/ec_group/ec_group.h",
      "src/lib/pubkey/ecdsa/ecdsa.cpp"
    ],
    "message": "Address DSA/ECDSA side channel",
    "before_after_code_files": [
      "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp",
      "src/lib/pubkey/ec_group/ec_group.cpp||src/lib/pubkey/ec_group/ec_group.cpp",
      "src/lib/pubkey/ec_group/ec_group.h||src/lib/pubkey/ec_group/ec_group.h",
      "src/lib/pubkey/ecdsa/ecdsa.cpp||src/lib/pubkey/ecdsa/ecdsa.cpp"
    ]
  },
  "patch_diff": {
    "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp": [
      "File: src/lib/pubkey/dsa/dsa.cpp -> src/lib/pubkey/dsa/dsa.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "74: class DSA_Signature_Operation final : public PK_Ops::Signature_with_EMSA",
      "75:    {",
      "76:    public:",
      "78:          PK_Ops::Signature_with_EMSA(emsa),",
      "79:          m_group(dsa.get_group()),",
      "80:          m_x(dsa.get_x()),",
      "",
      "[Removed Lines]",
      "77:       DSA_Signature_Operation(const DSA_PrivateKey& dsa, const std::string& emsa) :",
      "",
      "[Added Lines]",
      "77:       DSA_Signature_Operation(const DSA_PrivateKey& dsa,",
      "78:                               const std::string& emsa,",
      "79:                               RandomNumberGenerator& rng) :",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83: #if defined(BOTAN_HAS_RFC6979_GENERATOR)",
      "84:          m_rfc6979_hash = hash_for_emsa(emsa);",
      "85: #endif",
      "86:          }",
      "88:       size_t max_input_bits() const override { return m_group.get_q().bits(); }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:          m_b = BigInt::random_integer(rng, 2, dsa.group_q());",
      "90:          m_b_inv = inverse_mod(m_b, dsa.group_q());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: #if defined(BOTAN_HAS_RFC6979_GENERATOR)",
      "97:       std::string m_rfc6979_hash;",
      "98: #endif",
      "99:    };",
      "101: secure_vector<uint8_t>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:       BigInt m_b, m_b_inv;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "104:    {",
      "105:    const BigInt& q = m_group.get_q();",
      "112: #if defined(BOTAN_HAS_RFC6979_GENERATOR)",
      "113:    BOTAN_UNUSED(rng);",
      "115: #else",
      "116:    const BigInt k = BigInt::random_integer(rng, 1, q);",
      "117: #endif",
      "120:    const BigInt r = m_mod_q.reduce(m_group.power_g_p(k));",
      "125:    if(r.is_zero() || s.is_zero())",
      "",
      "[Removed Lines]",
      "107:    BigInt i(msg, msg_len, q.bits());",
      "109:    while(i >= q)",
      "110:       i -= q;",
      "114:    const BigInt k = generate_rfc6979_nonce(m_x, q, i, m_rfc6979_hash);",
      "119:    BigInt s = inverse_mod(k, q);",
      "122:    s = m_mod_q.multiply(s, mul_add(m_x, r, i));",
      "",
      "[Added Lines]",
      "114:    BigInt m(msg, msg_len, q.bits());",
      "116:    while(m >= q)",
      "117:       m -= q;",
      "121:    const BigInt k = generate_rfc6979_nonce(m_x, q, m, m_rfc6979_hash);",
      "126:    const BigInt k_inv = inverse_mod(k, q);",
      "133:    m_b = m_mod_q.square(m_b);",
      "134:    m_b_inv = m_mod_q.square(m_b_inv);",
      "136:    m = m_mod_q.multiply(m_b, m);",
      "137:    const BigInt xr = m_mod_q.multiply(m_mod_q.multiply(m_x, m_b), r);",
      "139:    const BigInt s = m_mod_q.multiply(m_b_inv, m_mod_q.multiply(k_inv, xr + m));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "140:          m_group(dsa.get_group()),",
      "141:          m_y(dsa.get_y()),",
      "142:          m_mod_q(dsa.group_q())",
      "145:       size_t max_input_bits() const override { return m_group.get_q().bits(); }",
      "",
      "[Removed Lines]",
      "143:          {}",
      "",
      "[Added Lines]",
      "160:          {",
      "161:          }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "193:    }",
      "195: std::unique_ptr<PK_Ops::Signature>",
      "197:                                     const std::string& params,",
      "198:                                     const std::string& provider) const",
      "199:    {",
      "200:    if(provider == \"base\" || provider.empty())",
      "202:    throw Provider_Not_Found(algo_name(), provider);",
      "203:    }",
      "",
      "[Removed Lines]",
      "196: DSA_PrivateKey::create_signature_op(RandomNumberGenerator& /*rng*/,",
      "201:       return std::unique_ptr<PK_Ops::Signature>(new DSA_Signature_Operation(*this, params));",
      "",
      "[Added Lines]",
      "214: DSA_PrivateKey::create_signature_op(RandomNumberGenerator& rng,",
      "219:       return std::unique_ptr<PK_Ops::Signature>(new DSA_Signature_Operation(*this, params, rng));",
      "",
      "---------------"
    ],
    "src/lib/pubkey/ec_group/ec_group.cpp||src/lib/pubkey/ec_group/ec_group.cpp": [
      "File: src/lib/pubkey/ec_group/ec_group.cpp -> src/lib/pubkey/ec_group/ec_group.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:       BigInt mod_order(const BigInt& x) const { return m_mod_order.reduce(x); }",
      "87:       BigInt multiply_mod_order(const BigInt& x, const BigInt& y) const",
      "88:          {",
      "89:          return m_mod_order.multiply(x, y);",
      "90:          }",
      "92:       BigInt inverse_mod_order(const BigInt& x) const",
      "93:          {",
      "94:          return inverse_mod(x, m_order);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:       BigInt square_mod_order(const BigInt& x) const",
      "88:          {",
      "89:          return m_mod_order.square(x);",
      "90:          }",
      "97:       BigInt multiply_mod_order(const BigInt& x, const BigInt& y, const BigInt& z) const",
      "98:          {",
      "99:          return m_mod_order.multiply(m_mod_order.multiply(x, y), z);",
      "100:          }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477:    return data().mod_order(k);",
      "478:    }",
      "480: BigInt EC_Group::multiply_mod_order(const BigInt& x, const BigInt& y) const",
      "481:    {",
      "482:    return data().multiply_mod_order(x, y);",
      "483:    }",
      "485: BigInt EC_Group::inverse_mod_order(const BigInt& x) const",
      "486:    {",
      "487:    return data().inverse_mod_order(x);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: BigInt EC_Group::square_mod_order(const BigInt& x) const",
      "491:    {",
      "492:    return data().square_mod_order(x);",
      "493:    }",
      "500: BigInt EC_Group::multiply_mod_order(const BigInt& x, const BigInt& y, const BigInt& z) const",
      "501:    {",
      "502:    return data().multiply_mod_order(x, y, z);",
      "503:    }",
      "",
      "---------------"
    ],
    "src/lib/pubkey/ec_group/ec_group.h||src/lib/pubkey/ec_group/ec_group.h": [
      "File: src/lib/pubkey/ec_group/ec_group.h -> src/lib/pubkey/ec_group/ec_group.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:       BigInt inverse_mod_order(const BigInt& x) const;",
      "209:       BigInt multiply_mod_order(const BigInt& x, const BigInt& y) const;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:       BigInt square_mod_order(const BigInt& x) const;",
      "219:       BigInt multiply_mod_order(const BigInt& x, const BigInt& y, const BigInt& z) const;",
      "",
      "---------------"
    ],
    "src/lib/pubkey/ecdsa/ecdsa.cpp||src/lib/pubkey/ecdsa/ecdsa.cpp": [
      "File: src/lib/pubkey/ecdsa/ecdsa.cpp -> src/lib/pubkey/ecdsa/ecdsa.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:    public:",
      "53:       ECDSA_Signature_Operation(const ECDSA_PrivateKey& ecdsa,",
      "55:          PK_Ops::Signature_with_EMSA(emsa),",
      "56:          m_group(ecdsa.domain()),",
      "57:          m_x(ecdsa.private_value())",
      "",
      "[Removed Lines]",
      "54:                                 const std::string& emsa) :",
      "",
      "[Added Lines]",
      "54:                                 const std::string& emsa,",
      "55:                                 RandomNumberGenerator& rng) :",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59: #if defined(BOTAN_HAS_RFC6979_GENERATOR)",
      "60:          m_rfc6979_hash = hash_for_emsa(emsa);",
      "61: #endif",
      "62:          }",
      "64:       size_t max_input_bits() const override { return m_group.get_order_bits(); }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:          m_b = m_group.random_scalar(rng);",
      "65:          m_b_inv = m_group.inverse_mod_order(m_b);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75: #endif",
      "77:       std::vector<BigInt> m_ws;",
      "78:    };",
      "80: secure_vector<uint8_t>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83:       BigInt m_b, m_b_inv;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "89:    const BigInt k = m_group.random_scalar(rng);",
      "90: #endif",
      "93:    const BigInt r = m_group.mod_order(",
      "94:       m_group.blinded_base_point_multiply_x(k, rng, m_ws));",
      "100:    if(r.is_zero() || s.is_zero())",
      "",
      "[Removed Lines]",
      "92:    const BigInt k_inv = m_group.inverse_mod_order(k);",
      "96:    const BigInt xrm = m_group.mod_order(m_group.multiply_mod_order(m_x, r) + m);",
      "97:    const BigInt s = m_group.multiply_mod_order(k_inv, xrm);",
      "",
      "[Added Lines]",
      "101:    const BigInt k_inv = m_group.inverse_mod_order(k);",
      "106:    m_b = m_group.square_mod_order(m_b);",
      "107:    m_b_inv = m_group.square_mod_order(m_b_inv);",
      "109:    m = m_group.multiply_mod_order(m_b, m);",
      "110:    const BigInt xr = m_group.multiply_mod_order(m_x, m_b, r);",
      "112:    const BigInt s = m_group.multiply_mod_order(k_inv, xr + m, m_b_inv);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "145:    const BigInt w = m_group.inverse_mod_order(s);",
      "148:    const BigInt u2 = m_group.multiply_mod_order(r, w);",
      "149:    const PointGFp R = m_gy_mul.multi_exp(u1, u2);",
      "",
      "[Removed Lines]",
      "147:    const BigInt u1 = m_group.multiply_mod_order(e, w);",
      "",
      "[Added Lines]",
      "162:    const BigInt u1 = m_group.multiply_mod_order(m_group.mod_order(e), w);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "198:    }",
      "200: std::unique_ptr<PK_Ops::Signature>",
      "202:                                       const std::string& params,",
      "203:                                       const std::string& provider) const",
      "204:    {",
      "",
      "[Removed Lines]",
      "201: ECDSA_PrivateKey::create_signature_op(RandomNumberGenerator& /*rng*/,",
      "",
      "[Added Lines]",
      "216: ECDSA_PrivateKey::create_signature_op(RandomNumberGenerator& rng,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233: #endif",
      "235:    if(provider == \"base\" || provider.empty())",
      "238:    throw Provider_Not_Found(algo_name(), provider);",
      "239:    }",
      "",
      "[Removed Lines]",
      "236:       return std::unique_ptr<PK_Ops::Signature>(new ECDSA_Signature_Operation(*this, params));",
      "",
      "[Added Lines]",
      "251:       return std::unique_ptr<PK_Ops::Signature>(new ECDSA_Signature_Operation(*this, params, rng));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "358d288f7538f00e6b421a2cfb47655d7ed31f28",
      "candidate_info": {
        "commit_hash": "358d288f7538f00e6b421a2cfb47655d7ed31f28",
        "repo": "randombit/botan",
        "commit_url": "https://github.com/randombit/botan/commit/358d288f7538f00e6b421a2cfb47655d7ed31f28",
        "files": [
          "src/lib/math/numbertheory/reducer.cpp",
          "src/lib/pubkey/dl_group/dl_group.cpp",
          "src/lib/pubkey/dl_group/dl_group.h",
          "src/lib/pubkey/dsa/dsa.cpp"
        ],
        "message": "Move reduction mod q to DL_Group\n\nAvoids computing Barrett params many times and gives option for\nmore optimizations in future.",
        "before_after_code_files": [
          "src/lib/math/numbertheory/reducer.cpp||src/lib/math/numbertheory/reducer.cpp",
          "src/lib/pubkey/dl_group/dl_group.cpp||src/lib/pubkey/dl_group/dl_group.cpp",
          "src/lib/pubkey/dl_group/dl_group.h||src/lib/pubkey/dl_group/dl_group.h",
          "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp"
          ],
          "candidate": [
            "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/math/numbertheory/reducer.cpp||src/lib/math/numbertheory/reducer.cpp": [
          "File: src/lib/math/numbertheory/reducer.cpp -> src/lib/math/numbertheory/reducer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: Modular_Reducer::Modular_Reducer(const BigInt& mod)",
          "17:    {",
          "19:       throw Invalid_Argument(\"Modular_Reducer: modulus must be positive\");",
          "27:    }",
          "",
          "[Removed Lines]",
          "18:    if(mod <= 0)",
          "21:    m_modulus = mod;",
          "22:    m_mod_words = m_modulus.sig_words();",
          "24:    m_modulus_2 = Botan::square(m_modulus);",
          "26:    m_mu = BigInt::power_of_2(2 * BOTAN_MP_WORD_BITS * m_mod_words) / m_modulus;",
          "",
          "[Added Lines]",
          "18:    if(mod < 0)",
          "22:    m_mod_words = 0;",
          "24:    if(mod > 0)",
          "25:       {",
          "26:       m_modulus = mod;",
          "27:       m_mod_words = m_modulus.sig_words();",
          "29:       m_modulus_2 = Botan::square(m_modulus);",
          "31:       m_mu = BigInt::power_of_2(2 * BOTAN_MP_WORD_BITS * m_mod_words) / m_modulus;",
          "32:       }",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dl_group/dl_group.cpp||src/lib/pubkey/dl_group/dl_group.cpp": [
          "File: src/lib/pubkey/dl_group/dl_group.cpp -> src/lib/pubkey/dl_group/dl_group.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:       DL_Group_Data(const BigInt& p, const BigInt& q, const BigInt& g) :",
          "24:          m_p(p), m_q(q), m_g(g),",
          "25:          m_mod_p(p),",
          "26:          m_monty_params(std::make_shared<Montgomery_Params>(m_p, m_mod_p)),",
          "27:          m_monty(monty_precompute(m_monty_params, m_g, /*window bits=*/4)),",
          "28:          m_p_bits(p.bits()),",
          "29:          m_q_bits(q.bits()),",
          "30:          m_estimated_strength(dl_work_factor(m_p_bits)),",
          "31:          m_exponent_bits(dl_exponent_size(m_p_bits))",
          "34:       ~DL_Group_Data() = default;",
          "",
          "[Removed Lines]",
          "32:          {}",
          "",
          "[Added Lines]",
          "26:          m_mod_q(q),",
          "33:          {",
          "34:          }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:          return m_mod_p.multiply(x, y);",
          "48:          }",
          "50:       std::shared_ptr<const Montgomery_Params> monty_params_p() const",
          "51:          { return m_monty_params; }",
          "53:       size_t p_bits() const { return m_p_bits; }",
          "54:       size_t p_bytes() const { return (m_p_bits + 7) / 8; }",
          "63:       size_t estimated_strength() const { return m_estimated_strength; }",
          "65:       size_t exponent_bits() const { return m_exponent_bits; }",
          "",
          "[Removed Lines]",
          "56:       size_t q_bits() const",
          "57:          {",
          "58:          if(m_q_bits == 0)",
          "59:             throw Invalid_State(\"DL_Group::q_bits q value is unset on this group\");",
          "60:          return m_q_bits;",
          "61:          }",
          "",
          "[Added Lines]",
          "52:       BigInt mod_q(const BigInt& x) const { return m_mod_q.reduce(x); }",
          "54:       BigInt multiply_mod_q(const BigInt& x, const BigInt& y) const",
          "55:          {",
          "56:          return m_mod_q.multiply(x, y);",
          "57:          }",
          "59:       BigInt square_mod_q(const BigInt& x) const",
          "60:          {",
          "61:          return m_mod_q.square(x);",
          "62:          }",
          "68:       size_t q_bits() const { return m_q_bits; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:          return monty_execute(*m_monty, k, max_k_bits);",
          "70:          }",
          "72:    private:",
          "73:       BigInt m_p;",
          "74:       BigInt m_q;",
          "75:       BigInt m_g;",
          "76:       Modular_Reducer m_mod_p;",
          "77:       std::shared_ptr<const Montgomery_Params> m_monty_params;",
          "78:       std::shared_ptr<const Montgomery_Exponentation_State> m_monty;",
          "79:       size_t m_p_bits;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:       bool q_is_set() const { return m_q_bits > 0; }",
          "82:       void assert_q_is_set(const std::string& function) const",
          "83:          {",
          "84:          if(q_is_set() == false)",
          "85:             throw Invalid_State(\"DL_Group::\" + function + \" q is not set for this group\");",
          "86:          }",
          "93:       Modular_Reducer m_mod_q;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "428: size_t DL_Group::q_bits() const",
          "429:    {",
          "430:    return data().q_bits();",
          "431:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:    data().assert_q_is_set(\"q_bits\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:    return data().multiply_mod_p(x, y);",
          "457:    }",
          "459: BigInt DL_Group::multi_exponentiate(const BigInt& x, const BigInt& y, const BigInt& z) const",
          "460:    {",
          "461:    return monty_multi_exp(data().monty_params_p(), get_g(), x, y, z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477: BigInt DL_Group::inverse_mod_q(const BigInt& x) const",
          "478:    {",
          "479:    data().assert_q_is_set(\"inverse_mod_q\");",
          "481:    return inverse_mod(x, get_q());",
          "482:    }",
          "484: BigInt DL_Group::mod_q(const BigInt& x) const",
          "485:    {",
          "486:    data().assert_q_is_set(\"mod_q\");",
          "487:    return data().mod_q(x);",
          "488:    }",
          "490: BigInt DL_Group::multiply_mod_q(const BigInt& x, const BigInt& y) const",
          "491:    {",
          "492:    data().assert_q_is_set(\"multiply_mod_q\");",
          "493:    return data().multiply_mod_q(x, y);",
          "494:    }",
          "496: BigInt DL_Group::multiply_mod_q(const BigInt& x, const BigInt& y, const BigInt& z) const",
          "497:    {",
          "498:    data().assert_q_is_set(\"multiply_mod_q\");",
          "499:    return data().multiply_mod_q(data().multiply_mod_q(x, y), z);",
          "500:    }",
          "502: BigInt DL_Group::square_mod_q(const BigInt& x) const",
          "503:    {",
          "504:    data().assert_q_is_set(\"square_mod_q\");",
          "505:    return data().square_mod_q(x);",
          "506:    }",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dl_group/dl_group.h||src/lib/pubkey/dl_group/dl_group.h": [
          "File: src/lib/pubkey/dl_group/dl_group.h -> src/lib/pubkey/dl_group/dl_group.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:       BigInt multiply_mod_p(const BigInt& x, const BigInt& y) const;",
          "182:       BigInt inverse_mod_p(const BigInt& x) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:       BigInt mod_q(const BigInt& x) const;",
          "199:       BigInt multiply_mod_q(const BigInt& x, const BigInt& y) const;",
          "206:       BigInt multiply_mod_q(const BigInt& x, const BigInt& y, const BigInt& z) const;",
          "213:       BigInt square_mod_q(const BigInt& x) const;",
          "219:       BigInt inverse_mod_q(const BigInt& x) const;",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp": [
          "File: src/lib/pubkey/dsa/dsa.cpp -> src/lib/pubkey/dsa/dsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:                               RandomNumberGenerator& rng) :",
          "80:          PK_Ops::Signature_with_EMSA(emsa),",
          "81:          m_group(dsa.get_group()),",
          "84:          {",
          "85: #if defined(BOTAN_HAS_RFC6979_GENERATOR)",
          "86:          m_rfc6979_hash = hash_for_emsa(emsa);",
          "87: #endif",
          "89:          m_b = BigInt::random_integer(rng, 2, dsa.group_q());",
          "91:          }",
          "93:       size_t max_input_bits() const override { return m_group.get_q().bits(); }",
          "",
          "[Removed Lines]",
          "82:          m_x(dsa.get_x()),",
          "83:          m_mod_q(dsa.group_q())",
          "90:          m_b_inv = inverse_mod(m_b, dsa.group_q());",
          "",
          "[Added Lines]",
          "82:          m_x(dsa.get_x())",
          "89:          m_b_inv = m_group.inverse_mod_q(m_b);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:    private:",
          "98:       const DL_Group m_group;",
          "99:       const BigInt& m_x;",
          "101: #if defined(BOTAN_HAS_RFC6979_GENERATOR)",
          "102:       std::string m_rfc6979_hash;",
          "103: #endif",
          "",
          "[Removed Lines]",
          "100:       Modular_Reducer m_mod_q;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:    const BigInt k = BigInt::random_integer(rng, 1, q);",
          "124: #endif",
          "142:    if(r.is_zero() || s.is_zero())",
          "",
          "[Removed Lines]",
          "126:    const BigInt k_inv = inverse_mod(k, q);",
          "128:    const BigInt r = m_mod_q.reduce(m_group.power_g_p(k, m_group.q_bits()));",
          "133:    m_b = m_mod_q.square(m_b);",
          "134:    m_b_inv = m_mod_q.square(m_b_inv);",
          "136:    m = m_mod_q.multiply(m_b, m);",
          "137:    const BigInt xr = m_mod_q.multiply(m_mod_q.multiply(m_x, m_b), r);",
          "139:    const BigInt s = m_mod_q.multiply(m_b_inv, m_mod_q.multiply(k_inv, xr + m));",
          "",
          "[Added Lines]",
          "124:    const BigInt k_inv = m_group.inverse_mod_q(k);",
          "126:    const BigInt r = m_group.mod_q(m_group.power_g_p(k, m_group.q_bits()));",
          "131:    m_b = m_group.square_mod_q(m_b);",
          "132:    m_b_inv = m_group.square_mod_q(m_b_inv);",
          "134:    m = m_group.multiply_mod_q(m_b, m);",
          "135:    const BigInt xr = m_group.multiply_mod_q(m_b, m_x, r);",
          "137:    const BigInt s = m_group.multiply_mod_q(m_b_inv, k_inv, m_group.mod_q(xr+m));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:                                  const std::string& emsa) :",
          "156:          PK_Ops::Verification_with_EMSA(emsa),",
          "157:          m_group(dsa.get_group()),",
          "160:          {",
          "161:          }",
          "",
          "[Removed Lines]",
          "158:          m_y(dsa.get_y()),",
          "159:          m_mod_q(dsa.group_q())",
          "",
          "[Added Lines]",
          "156:          m_y(dsa.get_y())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:    private:",
          "170:       const DL_Group m_group;",
          "171:       const BigInt& m_y;",
          "174:    };",
          "176: bool DSA_Verification_Operation::verify(const uint8_t msg[], size_t msg_len,",
          "",
          "[Removed Lines]",
          "173:       Modular_Reducer m_mod_q;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "192:    s = inverse_mod(s, q);",
          "197:    s = m_group.multi_exponentiate(si, m_y, sr);",
          "200:    }",
          "202: }",
          "",
          "[Removed Lines]",
          "194:    const BigInt sr = m_mod_q.multiply(s, r);",
          "195:    const BigInt si = m_mod_q.multiply(s, i);",
          "199:    return (m_mod_q.reduce(s) == r);",
          "",
          "[Added Lines]",
          "189:    const BigInt sr = m_group.multiply_mod_q(s, r);",
          "190:    const BigInt si = m_group.multiply_mod_q(s, i);",
          "194:    return (m_group.mod_q(s) == r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6868990a0c854c33bc2daf0edd4135eab7fedc34",
      "candidate_info": {
        "commit_hash": "6868990a0c854c33bc2daf0edd4135eab7fedc34",
        "repo": "randombit/botan",
        "commit_url": "https://github.com/randombit/botan/commit/6868990a0c854c33bc2daf0edd4135eab7fedc34",
        "files": [
          "src/lib/pubkey/dsa/dsa.cpp",
          "src/tests/data/pubkey/dsa_verify.vec",
          "src/tests/test_dsa.cpp"
        ],
        "message": "Change DSA behavior similarly",
        "before_after_code_files": [
          "src/lib/pubkey/dsdsa.cpp||src/lipubkey/dsa/dsa.cpp",
          "src/tests/datpubkey/dsa_verify.vec||src/tests/data/pubkey/dsa_verify.vec",
          "src/tests/test_dsa.cpp||src/tests/test_dsa.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/pubkey/dsdsa.cpp||src/lipubkey/dsa/dsa.cpp": [
          "File: src/lib/pubkey/dsdsa.cpp -> src/lipubkey/dsa/dsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tests/datpubkey/dsa_verify.vec||src/tests/data/pubkey/dsa_verify.vec": [
          "File: src/tests/datpubkey/dsa_verify.vec -> src/tests/data/pubkey/dsa_verify.vec",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: # Generated by OpenSSL",
          "4: P = 0xE6793D8A212FE151FE077D76183388C201521FFFF76B966AEBA9F7FC94ADEEF752933897ED8E599C94C705AFD111BA33B36329FDC5090E918F28C59BA06943492A1381DE0A4D90603DFE705B6A89D6099CDD2E9581E82BF34957EB048C178E2468DF8B443E58081FE04B78DD2AB98E2BD939F3EC348D612D9622F6B8D9CD0C5F",
          "5: Q = 0xF8AF4EF46D9A0881BD01C70F969870B05580F499",
          "6: G = 0x9427DC62CBF9461FBF58D415D9A33974A15AA30114D93A54D5E06BEE6C34AF19D2E70FA763CA0A361B6F4F47A0E8773FF2624AC6D973A316ECC10DE18218AD7BBFFECBAF01A4840D40D42B59F6BDB5E722127597B24B495E93BC7E500497FDBC17319A8C8DBBFA711FA0898BCCAB3F83C3BCFCBDE5E18C23B9573D3DD24BFDB5",
          "7: Y = 0xCEA7C9120EB8D8BC17CBE015CAD32FC349140C7018AF2445C6686BBBB2E57205FE7412A40E196D57CF5AC924855AD25B79C6140CFE2DECE79B907C37CF9A74EAEF9597B73D55655B30843B9025C2EDD1531C11480971DD55B7462A23DE611CE0BE7A3FE82FD4B0C65FAA4445B894212406AC608ED05AD2B3C2986EFA1B8CD580",
          "8: Msg = FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E1DFDDDBD9",
          "9: Signature = 3DB343DC58ACDEBF815F85D0E55FBDEDA326BEA6107F10F3A2CB1FBFAFB3324B3FC6076FE298AC9E",
          "11: P = 0xB7F3ECDFCF8C3DB00C4F007CB59F7CA7B0083671D09D1CCAD7ACAACF0A5D6881AABA9686EEB879C5E8480441EBBFBCBAB4E0F4829C43938E06E954F988284187",
          "12: Q = 0xE10EC91ADBF217B6D7B3677ABB266A1E6D85CA17",
          "13: G = 0x24CC4D8AD70AE84ACD19181943C9EAB408CC9153E426F55CCCF6037A93E1B2B2A3BDE0516A1AF3186404D43C029374430AA4FE46520509904115A293E5A5193E",
          "14: Y = 0x259476F6FDC576ECDA5BDE2D4441030E52BC77F0121F74BDDD91EB4749D0E77DB34C249742DFCF80D097360BA19BB5801B1B6C83636E8B4B9AA8BF93FAAA53EF",
          "15: Msg = FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E1DFDDDBD9",
          "16: Signature = BA031AB679E9A96EA5D929C609C861702E658D0DD8247C0EF439DF3DF8126F0122F0D5AD6796E014",
          "",
          "---------------"
        ],
        "src/tests/test_dsa.cpp||src/tests/test_dsa.cpp": [
          "File: src/tests/test_dsa.cpp -> src/tests/test_dsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:          }",
          "56:    };",
          "58: class DSA_Keygen_Tests final : public PK_Key_Generation_Test",
          "59:    {",
          "60:    public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: class DSA_Verification_Tests final : public PK_Signature_Verification_Test",
          "59:    {",
          "60:    public:",
          "61:       DSA_Verification_Tests() : PK_Signature_Verification_Test(",
          "62:             \"DSA\",",
          "63:             \"pubkey/dsa_verify.vec\",",
          "64:             \"P,Q,G,Y,Msg,Signature\") {}",
          "66:       bool clear_between_callbacks() const override",
          "67:          {",
          "68:          return false;",
          "69:          }",
          "71:       std::unique_ptr<Botan::Public_Key> load_public_key(const VarMap& vars) override",
          "72:          {",
          "73:          const Botan::BigInt p = get_req_bn(vars, \"P\");",
          "74:          const Botan::BigInt q = get_req_bn(vars, \"Q\");",
          "75:          const Botan::BigInt g = get_req_bn(vars, \"G\");",
          "76:          const Botan::BigInt y = get_req_bn(vars, \"Y\");",
          "78:          const Botan::DL_Group grp(p, q, g);",
          "80:          std::unique_ptr<Botan::Public_Key> key(new Botan::DSA_PublicKey(grp, y));",
          "81:          return key;",
          "82:          }",
          "84:       std::string default_padding(const VarMap&) const override",
          "85:          {",
          "86:          return \"Raw\";",
          "87:          }",
          "88:    };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:    };",
          "71: BOTAN_REGISTER_TEST(\"dsa_sign\", DSA_KAT_Tests);",
          "72: BOTAN_REGISTER_TEST(\"dsa_keygen\", DSA_Keygen_Tests);",
          "74: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: BOTAN_REGISTER_TEST(\"dsa_verify\", DSA_Verification_Tests);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66b7c7e1fe6d979fdd9b879b2ec63fe06c1f6fd9",
      "candidate_info": {
        "commit_hash": "66b7c7e1fe6d979fdd9b879b2ec63fe06c1f6fd9",
        "repo": "randombit/botan",
        "commit_url": "https://github.com/randombit/botan/commit/66b7c7e1fe6d979fdd9b879b2ec63fe06c1f6fd9",
        "files": [
          "src/lib/pubkey/ecdsa/ecdsa.cpp"
        ],
        "message": "Ensure values are fully reduced during ECDSA signature\n\nIt was possible that the Barrett reduction code would fall back\nto standard division due to getting an input that was >= order^2.",
        "before_after_code_files": [
          "src/lib/pubkey/ecdsa/ecdsa.cpp||src/lib/pubkey/ecdsa/ecdsa.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/pubkey/ecdsa/ecdsa.cpp||src/lib/pubkey/ecdsa/ecdsa.cpp"
          ],
          "candidate": [
            "src/lib/pubkey/ecdsa/ecdsa.cpp||src/lib/pubkey/ecdsa/ecdsa.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/pubkey/ecdsa/ecdsa.cpp||src/lib/pubkey/ecdsa/ecdsa.cpp": [
          "File: src/lib/pubkey/ecdsa/ecdsa.cpp -> src/lib/pubkey/ecdsa/ecdsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:    m_b = m_group.square_mod_order(m_b);",
          "107:    m_b_inv = m_group.square_mod_order(m_b_inv);",
          "115:    if(r.is_zero() || s.is_zero())",
          "",
          "[Removed Lines]",
          "109:    m = m_group.multiply_mod_order(m_b, m);",
          "110:    const BigInt xr = m_group.multiply_mod_order(m_x, m_b, r);",
          "112:    const BigInt s = m_group.multiply_mod_order(k_inv, xr + m, m_b_inv);",
          "",
          "[Added Lines]",
          "109:    m = m_group.multiply_mod_order(m_b, m_group.mod_order(m));",
          "110:    const BigInt xr_m = m_group.mod_order(m_group.multiply_mod_order(m_x, m_b, r) + m);",
          "112:    const BigInt s = m_group.multiply_mod_order(k_inv, xr_m, m_b_inv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dcff1874ad430269bb7d75818b906b34331d919",
      "candidate_info": {
        "commit_hash": "4dcff1874ad430269bb7d75818b906b34331d919",
        "repo": "randombit/botan",
        "commit_url": "https://github.com/randombit/botan/commit/4dcff1874ad430269bb7d75818b906b34331d919",
        "files": [
          "src/lib/misc/srp6/srp6.cpp",
          "src/lib/pubkey/dh/dh.cpp",
          "src/lib/pubkey/dl_algo/dl_algo.h",
          "src/lib/pubkey/dsa/dsa.cpp",
          "src/lib/pubkey/elgamal/elgamal.cpp",
          "src/lib/pubkey/rsa/rsa.cpp"
        ],
        "message": "Use new DL_Group functions",
        "before_after_code_files": [
          "src/lib/misc/srp6/srp6.cpp||src/limisc/srp6/srp6.cpp",
          "src/lib/pubkey/dh/dh.cpp||src/lipubkey/dh/dh.cpp",
          "src/lib/pubkey/dl_algo/dl_algo.h||src/lipubkey/dl_algo/dl_algo.h",
          "src/lib/pubkey/dsdsa.cpp||src/lipubkey/dsa/dsa.cpp",
          "src/lib/pubkey/elgamal/elgamal.cpp||src/lipubkey/elgamal/elgamal.cpp",
          "src/lib/pubkey/rsrsa.cpp||src/lipubkey/rsa/rsa.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/misc/srp6/srp6.cpp||src/limisc/srp6/srp6.cpp": [
          "File: src/lib/misc/srp6/srp6.cpp -> src/limisc/srp6/srp6.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:    const BigInt& g = group.get_g();",
          "87:    const BigInt& p = group.get_p();",
          "91:    if(B <= 0 || B >= p)",
          "92:       throw Exception(\"Invalid SRP parameter from server\");",
          "102:    const BigInt x = compute_x(hash_id, identifier, password, salt);",
          "108:    return std::make_pair(A, Sk);",
          "109:    }",
          "",
          "[Removed Lines]",
          "89:    const size_t p_bytes = group.get_p().bytes();",
          "94:    BigInt k = hash_seq(hash_id, p_bytes, p, g);",
          "96:    BigInt a(rng, 256);",
          "98:    BigInt A = power_mod(g, a, p);",
          "100:    BigInt u = hash_seq(hash_id, p_bytes, A, B);",
          "104:    BigInt S = power_mod((B - (k * power_mod(g, x, p))) % p, (a + (u * x)), p);",
          "106:    SymmetricKey Sk(BigInt::encode_1363(S, p_bytes));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:    const BigInt k = hash_seq(hash_id, m_p_bytes, p, g);",
          "142:    return m_B;",
          "143:    }",
          "",
          "[Removed Lines]",
          "140:    m_B = (v*k + power_mod(g, m_b, p)) % p;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dh/dh.cpp||src/lipubkey/dh/dh.cpp": [
          "File: src/lib/pubkey/dh/dh.cpp -> src/lipubkey/dh/dh.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:       m_x = x_arg;",
          "50:       }",
          "53:       {",
          "55:       }",
          "56:    }",
          "",
          "[Removed Lines]",
          "52:    if(m_y == 0)",
          "54:       m_y = power_mod(group_g(), m_x, group_p());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:                              const secure_vector<uint8_t>& key_bits) :",
          "63:    DL_Scheme_PrivateKey(alg_id, key_bits, DL_Group::ANSI_X9_42)",
          "64:    {",
          "67:    }",
          "",
          "[Removed Lines]",
          "65:    if(m_y == 0)",
          "66:       m_y = power_mod(group_g(), m_x, group_p());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dl_algo/dl_algo.h||src/lipubkey/dl_algo/dl_algo.h": [
          "File: src/lib/pubkey/dl_algo/dl_algo.h -> src/lipubkey/dl_algo/dl_algo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:       const DL_Group& get_domain() const { return m_group; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                           const std::vector<uint8_t>& key_bits,",
          "74:                           DL_Group::Format group_format);",
          "76:       DL_Scheme_PublicKey& operator=(const DL_Scheme_PublicKey& other) = default;",
          "78:    protected:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dsdsa.cpp||src/lipubkey/dsa/dsa.cpp": [
          "File: src/lib/pubkey/dsdsa.cpp -> src/lipubkey/dsa/dsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/pubkey/elgamal/elgamal.cpp||src/lipubkey/elgamal/elgamal.cpp": [
          "File: src/lib/pubkey/elgamal/elgamal.cpp -> src/lipubkey/elgamal/elgamal.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:    {",
          "25:    }",
          "30: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng,",
          "33:    {",
          "38:       m_x.randomize(rng, dl_exponent_size(group_p().bits()));",
          "41:    }",
          "43: ElGamal_PrivateKey::ElGamal_PrivateKey(const AlgorithmIdentifier& alg_id,",
          "44:                                        const secure_vector<uint8_t>& key_bits) :",
          "45:    DL_Scheme_PrivateKey(alg_id, key_bits, DL_Group::ANSI_X9_42)",
          "46:    {",
          "48:    }",
          "",
          "[Removed Lines]",
          "21: ElGamal_PublicKey::ElGamal_PublicKey(const DL_Group& grp, const BigInt& y1)",
          "23:    m_group = grp;",
          "24:    m_y = y1;",
          "31:                                        const DL_Group& grp,",
          "32:                                        const BigInt& x_arg)",
          "34:    m_group = grp;",
          "35:    m_x = x_arg;",
          "37:    if(m_x == 0)",
          "40:    m_y = power_mod(group_g(), m_x, group_p());",
          "47:    m_y = power_mod(group_g(), m_x, group_p());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:    {",
          "72:    public:",
          "76:       ElGamal_Encryption_Operation(const ElGamal_PublicKey& key, const std::string& eme);",
          "",
          "[Removed Lines]",
          "74:       size_t max_raw_input_bits() const override { return m_mod_p.get_modulus().bits() - 1; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:                                       RandomNumberGenerator& rng) override;",
          "81:    private:",
          "84:    };",
          "86: ElGamal_Encryption_Operation::ElGamal_Encryption_Operation(const ElGamal_PublicKey& key,",
          "87:                                                            const std::string& eme) :",
          "89:    {",
          "95:    }",
          "97: secure_vector<uint8_t>",
          "98: ElGamal_Encryption_Operation::raw_encrypt(const uint8_t msg[], size_t msg_len,",
          "99:                                           RandomNumberGenerator& rng)",
          "100:    {",
          "103:    BigInt m(msg, msg_len);",
          "106:       throw Invalid_Argument(\"ElGamal encryption: Input is too large\");",
          "117:    }",
          "",
          "[Removed Lines]",
          "82:       Fixed_Base_Power_Mod m_powermod_g_p, m_powermod_y_p;",
          "83:       Modular_Reducer m_mod_p;",
          "88:    PK_Ops::Encryption_with_EME(eme)",
          "90:    const BigInt& p = key.group_p();",
          "92:    m_powermod_g_p = Fixed_Base_Power_Mod(key.group_g(), p);",
          "93:    m_powermod_y_p = Fixed_Base_Power_Mod(key.get_y(), p);",
          "94:    m_mod_p = Modular_Reducer(p);",
          "101:    const BigInt& p = m_mod_p.get_modulus();",
          "105:    if(m >= p)",
          "108:    BigInt k(rng, dl_exponent_size(p.bits()));",
          "110:    BigInt a = m_powermod_g_p(k);",
          "111:    BigInt b = m_mod_p.multiply(m, m_powermod_y_p(k));",
          "113:    secure_vector<uint8_t> output(2*p.bytes());",
          "114:    a.binary_encode(&output[p.bytes() - a.bytes()]);",
          "115:    b.binary_encode(&output[output.size() / 2 + (p.bytes() - b.bytes())]);",
          "116:    return output;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:    {",
          "124:    public:",
          "129:       ElGamal_Decryption_Operation(const ElGamal_PrivateKey& key,",
          "130:                                    const std::string& eme,",
          "",
          "[Removed Lines]",
          "126:       size_t max_raw_input_bits() const override",
          "127:          { return m_mod_p.get_modulus().bits() - 1; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:       secure_vector<uint8_t> raw_decrypt(const uint8_t msg[], size_t msg_len) override;",
          "134:    private:",
          "135:       Fixed_Exponent_Power_Mod m_powermod_x_p;",
          "137:       Blinder m_blinder;",
          "138:    };",
          "",
          "[Removed Lines]",
          "136:       Modular_Reducer m_mod_p;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:                                                            const std::string& eme,",
          "142:                                                            RandomNumberGenerator& rng) :",
          "143:    PK_Ops::Decryption_with_EME(eme),",
          "147:              rng,",
          "148:              [](const BigInt& k) { return k; },",
          "149:              [this](const BigInt& k) { return m_powermod_x_p(k); })",
          "",
          "[Removed Lines]",
          "144:    m_powermod_x_p(Fixed_Exponent_Power_Mod(key.get_x(), key.group_p())),",
          "145:    m_mod_p(Modular_Reducer(key.group_p())),",
          "146:    m_blinder(key.group_p(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153: secure_vector<uint8_t>",
          "154: ElGamal_Decryption_Operation::raw_decrypt(const uint8_t msg[], size_t msg_len)",
          "155:    {",
          "160:    if(msg_len != 2 * p_bytes)",
          "161:       throw Invalid_Argument(\"ElGamal decryption: Invalid message\");",
          "163:    BigInt a(msg, p_bytes);",
          "167:       throw Invalid_Argument(\"ElGamal decryption: Invalid message\");",
          "169:    a = m_blinder.blind(a);",
          "173:    return BigInt::encode_1363(m_blinder.unblind(r), p_bytes);",
          "174:    }",
          "",
          "[Removed Lines]",
          "156:    const BigInt& p = m_mod_p.get_modulus();",
          "158:    const size_t p_bytes = p.bytes();",
          "164:    BigInt b(msg + p_bytes, p_bytes);",
          "166:    if(a >= p || b >= p)",
          "171:    BigInt r = m_mod_p.multiply(b, inverse_mod(m_powermod_x_p(a), p));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/pubkey/rsrsa.cpp||src/lipubkey/rsa/rsa.cpp": [
          "File: src/lib/pubkey/rsrsa.cpp -> src/lipubkey/rsa/rsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8afec45c659c870a3930a8e1b9cf26d6f0760d5",
      "candidate_info": {
        "commit_hash": "f8afec45c659c870a3930a8e1b9cf26d6f0760d5",
        "repo": "randombit/botan",
        "commit_url": "https://github.com/randombit/botan/commit/f8afec45c659c870a3930a8e1b9cf26d6f0760d5",
        "files": [
          "src/lib/math/numbertheory/monty_exp.cpp",
          "src/lib/math/numbertheory/monty_exp.h",
          "src/lib/math/numbertheory/numthry.cpp",
          "src/lib/math/numbertheory/powm_mnt.cpp",
          "src/lib/misc/srp6/srp6.cpp",
          "src/lib/pubkey/dh/dh.cpp",
          "src/lib/pubkey/dl_group/dl_group.cpp",
          "src/lib/pubkey/dl_group/dl_group.h",
          "src/lib/pubkey/dsa/dsa.cpp",
          "src/lib/pubkey/elgamal/elgamal.cpp",
          "src/lib/pubkey/rsa/rsa.cpp"
        ],
        "message": "Avoid leaking size of exponent\n\nSee #1606 for discussion",
        "before_after_code_files": [
          "src/lib/math/numbertheory/monty_exp.cpp||src/lib/math/numbertheory/monty_exp.cpp",
          "src/lib/math/numbertheory/monty_exp.h||src/lib/math/numbertheory/monty_exp.h",
          "src/lib/math/numbertheory/numthry.cpp||src/lib/math/numbertheory/numthry.cpp",
          "src/lib/math/numbertheory/powm_mnt.cpp||src/lib/math/numbertheory/powm_mnt.cpp",
          "src/lib/misc/srp6/srp6.cpp||src/lib/misc/srp6/srp6.cpp",
          "src/lib/pubkey/dh/dh.cpp||src/lib/pubkey/dh/dh.cpp",
          "src/lib/pubkey/dl_group/dl_group.cpp||src/lib/pubkey/dl_group/dl_group.cpp",
          "src/lib/pubkey/dl_group/dl_group.h||src/lib/pubkey/dl_group/dl_group.h",
          "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp",
          "src/lib/pubkey/elgamal/elgamal.cpp||src/lib/pubkey/elgamal/elgamal.cpp",
          "src/lib/pubkey/rsa/rsa.cpp||src/lib/pubkey/rsa/rsa.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp"
          ],
          "candidate": [
            "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/math/numbertheory/monty_exp.cpp||src/lib/math/numbertheory/monty_exp.cpp": [
          "File: src/lib/math/numbertheory/monty_exp.cpp -> src/lib/math/numbertheory/monty_exp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:                                      size_t window_bits,",
          "24:                                      bool const_time);",
          "28:       BigInt exponentiation_vartime(const BigInt& k) const;",
          "29:    private:",
          "",
          "[Removed Lines]",
          "26:       BigInt exponentiation(const BigInt& k) const;",
          "",
          "[Added Lines]",
          "26:       BigInt exponentiation(const BigInt& k, size_t max_k_bits) const;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: namespace {",
          "73: void const_time_lookup(secure_vector<word>& output,",
          "76:    {",
          "77:    const size_t words = output.size();",
          "",
          "[Removed Lines]",
          "74:                         const std::vector<Montgomery_Int>& g,",
          "75:                         size_t nibble)",
          "",
          "[Added Lines]",
          "74:                        const std::vector<Montgomery_Int>& g,",
          "75:                        size_t nibble)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: }",
          "98:    {",
          "102:    Montgomery_Int x(m_params, m_params->R1(), false);",
          "",
          "[Removed Lines]",
          "97: BigInt Montgomery_Exponentation_State::exponentiation(const BigInt& scalar) const",
          "99:    const size_t exp_nibbles = (scalar.bits() + m_window_bits - 1) / m_window_bits;",
          "100:    CT::unpoison(exp_nibbles);",
          "",
          "[Added Lines]",
          "97: BigInt Montgomery_Exponentation_State::exponentiation(const BigInt& scalar, size_t max_k_bits) const",
          "99:    BOTAN_DEBUG_ASSERT(scalar.bits() <= max_k_bits);",
          "102:    const size_t exp_nibbles = (max_k_bits + m_window_bits - 1) / m_window_bits;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:    }",
          "161: BigInt monty_execute(const Montgomery_Exponentation_State& precomputed_state,",
          "163:    {",
          "165:    }",
          "167: BigInt monty_execute_vartime(const Montgomery_Exponentation_State& precomputed_state,",
          "",
          "[Removed Lines]",
          "162:                      const BigInt& k)",
          "164:    return precomputed_state.exponentiation(k);",
          "",
          "[Added Lines]",
          "164:                      const BigInt& k, size_t max_k_bits)",
          "166:    return precomputed_state.exponentiation(k, max_k_bits);",
          "",
          "---------------"
        ],
        "src/lib/math/numbertheory/monty_exp.h||src/lib/math/numbertheory/monty_exp.h": [
          "File: src/lib/math/numbertheory/monty_exp.h -> src/lib/math/numbertheory/monty_exp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:                  bool const_time = true);",
          "33: BigInt monty_execute(const Montgomery_Exponentation_State& precomputed_state,",
          "39: BigInt monty_execute_vartime(const Montgomery_Exponentation_State& precomputed_state,",
          "40:                              const BigInt& k);",
          "",
          "[Removed Lines]",
          "34:                      const BigInt& k);",
          "",
          "[Added Lines]",
          "34:                      const BigInt& k, size_t max_k_bits);",
          "",
          "---------------"
        ],
        "src/lib/math/numbertheory/numthry.cpp||src/lib/math/numbertheory/numthry.cpp": [
          "File: src/lib/math/numbertheory/numthry.cpp -> src/lib/math/numbertheory/numthry.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:    const BigInt n_minus_1 = n - 1;",
          "525:    const size_t s = low_zero_bits(n_minus_1);",
          "526:    const BigInt nm1_s = n_minus_1 >> s;",
          "528:    const Modular_Reducer mod_n(n);",
          "529:    auto monty_n = std::make_shared<Montgomery_Params>(n, mod_n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:    const size_t n_bits = n.bits();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "537:       auto powm_a_n = monty_precompute(monty_n, a, powm_window);",
          "541:       if(mr_witness(std::move(y), mod_n, n_minus_1, s))",
          "542:          return false;",
          "",
          "[Removed Lines]",
          "539:       BigInt y = monty_execute(*powm_a_n, nm1_s);",
          "",
          "[Added Lines]",
          "540:       BigInt y = monty_execute(*powm_a_n, nm1_s, n_bits);",
          "",
          "---------------"
        ],
        "src/lib/math/numbertheory/powm_mnt.cpp||src/lib/math/numbertheory/powm_mnt.cpp": [
          "File: src/lib/math/numbertheory/powm_mnt.cpp -> src/lib/math/numbertheory/powm_mnt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <botan/numthry.h>",
          "11: #include <botan/monty.h>",
          "12: #include <botan/internal/monty_exp.h>",
          "14: namespace Botan {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <botan/internal/rounding.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: BigInt Montgomery_Exponentiator::execute() const",
          "28:    {",
          "30:    }",
          "32: Montgomery_Exponentiator::Montgomery_Exponentiator(const BigInt& mod,",
          "",
          "[Removed Lines]",
          "29:    return monty_execute(*m_monty, m_e);",
          "",
          "[Added Lines]",
          "31:    This leaks size of e via loop iterations, not possible to fix without",
          "32:    breaking this API. Round up to avoid leaking fine details.",
          "34:    return monty_execute(*m_monty, m_e, round_up(m_e.bits(), 8));",
          "",
          "---------------"
        ],
        "src/lib/misc/srp6/srp6.cpp||src/lib/misc/srp6/srp6.cpp": [
          "File: src/lib/misc/srp6/srp6.cpp -> src/lib/misc/srp6/srp6.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                   const BigInt& B,",
          "83:                   RandomNumberGenerator& rng)",
          "84:    {",
          "85:    DL_Group group(group_id);",
          "86:    const BigInt& g = group.get_g();",
          "87:    const BigInt& p = group.get_p();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:    const size_t a_bits = 256;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:    const BigInt k = hash_seq(hash_id, p_bytes, p, g);",
          "100:    const BigInt u = hash_seq(hash_id, p_bytes, A, B);",
          "",
          "[Removed Lines]",
          "96:    const BigInt a(rng, 256);",
          "98:    const BigInt A = group.power_g_p(a);",
          "",
          "[Added Lines]",
          "98:    const BigInt a(rng, a_bits);",
          "100:    const BigInt A = group.power_g_p(a, a_bits);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:    const BigInt x = compute_x(hash_id, identifier, password, salt);",
          "119:    DL_Group group(group_id);",
          "121:    }",
          "123: BigInt SRP6_Server_Session::step1(const BigInt& v,",
          "",
          "[Removed Lines]",
          "120:    return group.power_g_p(x);",
          "",
          "[Added Lines]",
          "123:    return group.power_g_p(x, x.bits());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:                                   const std::string& hash_id,",
          "126:                                   RandomNumberGenerator& rng)",
          "127:    {",
          "128:    DL_Group group(group_id);",
          "129:    const BigInt& g = group.get_g();",
          "130:    const BigInt& p = group.get_p();",
          "132:    m_p_bytes = p.bytes();",
          "133:    m_v = v;",
          "135:    m_p = p;",
          "136:    m_hash_id = hash_id;",
          "138:    const BigInt k = hash_seq(hash_id, m_p_bytes, p, g);",
          "142:    return m_B;",
          "143:    }",
          "",
          "[Removed Lines]",
          "134:    m_b = BigInt(rng, 256);",
          "140:    m_B = group.mod_p(v*k + group.power_g_p(m_b));",
          "",
          "[Added Lines]",
          "131:    const size_t b_bits = 256;",
          "139:    m_b = BigInt(rng, b_bits);",
          "145:    m_B = group.mod_p(v*k + group.power_g_p(m_b, b_bits));",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dh/dh.cpp||src/lib/pubkey/dh/dh.cpp": [
          "File: src/lib/pubkey/dh/dh.cpp -> src/lib/pubkey/dh/dh.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:    if(x_arg == 0)",
          "42:       {",
          "44:       }",
          "45:    else",
          "46:       {",
          "47:       m_x = x_arg;",
          "53:       }",
          "54:    }",
          "",
          "[Removed Lines]",
          "43:       m_x.randomize(rng, grp.exponent_bits());",
          "48:       }",
          "50:    if(m_y.is_zero())",
          "51:       {",
          "52:       m_y = m_group.power_g_p(m_x);",
          "",
          "[Added Lines]",
          "43:       const size_t exp_bits = grp.exponent_bits();",
          "44:       m_x.randomize(rng, exp_bits);",
          "45:       m_y = m_group.power_g_p(m_x, exp_bits);",
          "51:       if(m_y == 0)",
          "52:          m_y = m_group.power_g_p(m_x, grp.p_bits());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:    {",
          "63:    if(m_y.is_zero())",
          "64:       {",
          "66:       }",
          "67:    }",
          "",
          "[Removed Lines]",
          "65:       m_y = m_group.power_g_p(m_x);",
          "",
          "[Added Lines]",
          "65:       m_y = m_group.power_g_p(m_x, m_group.p_bits());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104: secure_vector<uint8_t> DH_KA_Operation::raw_agree(const uint8_t w[], size_t w_len)",
          "105:    {",
          "109:       throw Invalid_Argument(\"DH agreement - invalid key provided\");",
          "116:    }",
          "118: }",
          "",
          "[Removed Lines]",
          "106:    BigInt x = BigInt::decode(w, w_len);",
          "108:    if(x <= 1 || x >= m_p - 1)",
          "111:    x = m_blinder.blind(x);",
          "112:    x = m_powermod_x_p(x);",
          "113:    x = m_blinder.unblind(x);",
          "115:    return BigInt::encode_1363(x, m_p.bytes());",
          "",
          "[Added Lines]",
          "106:    BigInt v = BigInt::decode(w, w_len);",
          "108:    if(v <= 1 || v >= m_p - 1)",
          "111:    v = m_blinder.blind(v);",
          "112:    v = m_powermod_x_p(v);",
          "113:    v = m_blinder.unblind(v);",
          "115:    return BigInt::encode_1363(v, m_p.bytes());",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dl_group/dl_group.cpp||src/lib/pubkey/dl_group/dl_group.cpp": [
          "File: src/lib/pubkey/dl_group/dl_group.cpp -> src/lib/pubkey/dl_group/dl_group.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:          m_monty_params(std::make_shared<Montgomery_Params>(m_p, m_mod_p)),",
          "27:          m_monty(monty_precompute(m_monty_params, m_g, /*window bits=*/4)),",
          "28:          m_p_bits(p.bits()),",
          "29:          m_estimated_strength(dl_work_factor(m_p_bits)),",
          "30:          m_exponent_bits(dl_exponent_size(m_p_bits))",
          "31:          {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:          m_q_bits(q.bits()),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:       size_t p_bits() const { return m_p_bits; }",
          "53:       size_t p_bytes() const { return (m_p_bits + 7) / 8; }",
          "55:       size_t estimated_strength() const { return m_estimated_strength; }",
          "57:       size_t exponent_bits() const { return m_exponent_bits; }",
          "61:    private:",
          "62:       BigInt m_p;",
          "",
          "[Removed Lines]",
          "59:       BigInt power_g_p(const BigInt& k) const { return monty_execute(*m_monty, k); }",
          "",
          "[Added Lines]",
          "56:       size_t q_bits() const",
          "57:          {",
          "58:          if(m_q_bits == 0)",
          "59:             throw Invalid_State(\"DL_Group::q_bits q value is unset on this group\");",
          "60:          return m_q_bits;",
          "61:          }",
          "67:       BigInt power_g_p(const BigInt& k, size_t max_k_bits) const",
          "68:          {",
          "69:          return monty_execute(*m_monty, k, max_k_bits);",
          "70:          }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:       std::shared_ptr<const Montgomery_Params> m_monty_params;",
          "67:       std::shared_ptr<const Montgomery_Exponentation_State> m_monty;",
          "68:       size_t m_p_bits;",
          "69:       size_t m_estimated_strength;",
          "70:       size_t m_exponent_bits;",
          "71:    };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:       size_t m_q_bits;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:    return data().p_bytes();",
          "414:    }",
          "416: size_t DL_Group::estimated_strength() const",
          "417:    {",
          "418:    return data().estimated_strength();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: size_t DL_Group::q_bits() const",
          "429:    {",
          "430:    return data().q_bits();",
          "431:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "447: BigInt DL_Group::power_g_p(const BigInt& x) const",
          "448:    {",
          "450:    }",
          "",
          "[Removed Lines]",
          "449:    return data().power_g_p(x);",
          "",
          "[Added Lines]",
          "466:    return data().power_g_p(x, x.bits());",
          "467:    }",
          "469: BigInt DL_Group::power_g_p(const BigInt& x, size_t max_x_bits) const",
          "470:    {",
          "471:    return data().power_g_p(x, max_x_bits);",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dl_group/dl_group.h||src/lib/pubkey/dl_group/dl_group.h": [
          "File: src/lib/pubkey/dl_group/dl_group.h -> src/lib/pubkey/dl_group/dl_group.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:       BigInt power_g_p(const BigInt& x) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:       BigInt power_g_p(const BigInt& x, size_t max_x_bits) const;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:       size_t p_bytes() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:       size_t q_bits() const;",
          "",
          "---------------"
        ],
        "src/lib/pubkey/dsa/dsa.cpp||src/lib/pubkey/dsa/dsa.cpp": [
          "File: src/lib/pubkey/dsa/dsa.cpp -> src/lib/pubkey/dsa/dsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:    else",
          "43:       m_x = x_arg;",
          "46:    }",
          "48: DSA_PrivateKey::DSA_PrivateKey(const AlgorithmIdentifier& alg_id,",
          "49:                                const secure_vector<uint8_t>& key_bits) :",
          "50:    DL_Scheme_PrivateKey(alg_id, key_bits, DL_Group::ANSI_X9_57)",
          "51:    {",
          "53:    }",
          "",
          "[Removed Lines]",
          "45:    m_y = m_group.power_g_p(m_x);",
          "52:    m_y = m_group.power_g_p(m_x);",
          "",
          "[Added Lines]",
          "45:    m_y = m_group.power_g_p(m_x, m_group.q_bits());",
          "52:    m_y = m_group.power_g_p(m_x, m_group.q_bits());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:    {",
          "112:    const BigInt& q = m_group.get_q();",
          "116:    while(m >= q)",
          "117:       m -= q;",
          "",
          "[Removed Lines]",
          "114:    BigInt m(msg, msg_len, q.bits());",
          "",
          "[Added Lines]",
          "114:    BigInt m(msg, msg_len, m_group.q_bits());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:    const BigInt k_inv = inverse_mod(k, q);",
          "",
          "[Removed Lines]",
          "128:    const BigInt r = m_mod_q.reduce(m_group.power_g_p(k));",
          "",
          "[Added Lines]",
          "128:    const BigInt r = m_mod_q.reduce(m_group.power_g_p(k, m_group.q_bits()));",
          "",
          "---------------"
        ],
        "src/lib/pubkey/elgamal/elgamal.cpp||src/lib/pubkey/elgamal/elgamal.cpp": [
          "File: src/lib/pubkey/elgamal/elgamal.cpp -> src/lib/pubkey/elgamal/elgamal.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:    if(m_x.is_zero())",
          "36:       {",
          "38:       }",
          "41:    }",
          "43: ElGamal_PrivateKey::ElGamal_PrivateKey(const AlgorithmIdentifier& alg_id,",
          "44:                                        const secure_vector<uint8_t>& key_bits) :",
          "45:    DL_Scheme_PrivateKey(alg_id, key_bits, DL_Group::ANSI_X9_42)",
          "46:    {",
          "48:    }",
          "",
          "[Removed Lines]",
          "37:       m_x.randomize(rng, group.exponent_bits());",
          "40:    m_y = m_group.power_g_p(m_x);",
          "47:    m_y = m_group.power_g_p(m_x);",
          "",
          "[Added Lines]",
          "37:       const size_t exp_bits = m_group.exponent_bits();",
          "38:       m_x.randomize(rng, exp_bits);",
          "39:       m_y = m_group.power_g_p(m_x, exp_bits);",
          "40:       }",
          "41:    else",
          "42:       {",
          "43:       m_y = m_group.power_g_p(m_x, m_group.p_bits());",
          "51:    m_y = m_group.power_g_p(m_x, m_group.p_bits());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:    const size_t k_bits = m_group.exponent_bits();",
          "104:    const BigInt k(rng, k_bits);",
          "107:    const BigInt b = m_group.multiply_mod_p(m, m_powermod_y_p(k));",
          "109:    return BigInt::encode_fixed_length_int_pair(a, b, m_group.p_bytes());",
          "",
          "[Removed Lines]",
          "106:    const BigInt a = m_group.power_g_p(k);",
          "",
          "[Added Lines]",
          "110:    const BigInt a = m_group.power_g_p(k, k_bits);",
          "",
          "---------------"
        ],
        "src/lib/pubkey/rsa/rsa.cpp||src/lib/pubkey/rsa/rsa.cpp": [
          "File: src/lib/pubkey/rsa/rsa.cpp -> src/lib/pubkey/rsa/rsa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:    protected:",
          "203:       size_t get_max_input_bits() const { return (m_mod_bits - 1); }",
          "205:       explicit RSA_Private_Operation(const RSA_PrivateKey& rsa, RandomNumberGenerator& rng) :",
          "206:          m_key(rsa),",
          "207:          m_mod_p(m_key.get_p()),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:       const size_t exp_blinding_bits = 64;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:                    rng,",
          "214:                    [this](const BigInt& k) { return m_powermod_e_n(k); },",
          "215:                    [this](const BigInt& k) { return inverse_mod(k, m_key.get_n()); }),",
          "216:          m_mod_bytes(m_key.get_n().bytes()),",
          "218:          {",
          "219:          }",
          "",
          "[Removed Lines]",
          "217:          m_mod_bits(m_key.get_n().bits())",
          "",
          "[Added Lines]",
          "218:          m_exp_blinding_bits(64),",
          "220:          m_mod_bits(m_key.get_n().bits()),",
          "221:          m_max_d1_bits(m_key.get_p().bits() + m_exp_blinding_bits),",
          "222:          m_max_d2_bits(m_key.get_q().bits() + m_exp_blinding_bits)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:       BigInt private_op(const BigInt& m) const",
          "230:          {",
          "231:          const size_t powm_window = 4;",
          "237:          const BigInt masked_d1 = m_key.get_d1() + (d1_mask * (m_key.get_p() - 1));",
          "238:          const BigInt masked_d2 = m_key.get_d2() + (d2_mask * (m_key.get_q() - 1));",
          "",
          "[Removed Lines]",
          "232:          const size_t exp_blinding_bits = 64;",
          "234:          const BigInt d1_mask(m_blinder.rng(), exp_blinding_bits);",
          "235:          const BigInt d2_mask(m_blinder.rng(), exp_blinding_bits);",
          "",
          "[Added Lines]",
          "238:          const BigInt d1_mask(m_blinder.rng(), m_exp_blinding_bits);",
          "239:          const BigInt d2_mask(m_blinder.rng(), m_exp_blinding_bits);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240: #if defined(BOTAN_TARGET_OS_HAS_THREADS)",
          "241:          auto future_j1 = std::async(std::launch::async, [this, &m, &masked_d1, powm_window]() {",
          "242:                auto powm_d1_p = monty_precompute(m_monty_p, m, powm_window);",
          "244:             });",
          "246:          auto powm_d2_q = monty_precompute(m_monty_q, m, powm_window);",
          "248:          BigInt j1 = future_j1.get();",
          "249: #else",
          "250:          auto powm_d1_p = monty_precompute(m_monty_p, m, powm_window);",
          "251:          auto powm_d2_q = monty_precompute(m_monty_q, m, powm_window);",
          "255: #endif",
          "257:          j1 = m_mod_p.reduce(sub_mul(j1, j2, m_key.get_c()));",
          "",
          "[Removed Lines]",
          "243:                return monty_execute(*powm_d1_p, masked_d1);",
          "247:          BigInt j2 = monty_execute(*powm_d2_q, masked_d2);",
          "253:          BigInt j1 = monty_execute(*powm_d1_p, masked_d1);",
          "254:          BigInt j2 = monty_execute(*powm_d2_q, masked_d2);",
          "",
          "[Added Lines]",
          "247:                return monty_execute(*powm_d1_p, masked_d1, m_max_d1_bits);",
          "251:          BigInt j2 = monty_execute(*powm_d2_q, masked_d2, m_max_d2_bits);",
          "257:          BigInt j1 = monty_execute(*powm_d1_p, masked_d1, m_max_d1_bits);",
          "258:          BigInt j2 = monty_execute(*powm_d2_q, masked_d2, m_max_d2_bits);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:       Fixed_Exponent_Power_Mod m_powermod_e_n;",
          "271:       Blinder m_blinder;",
          "274:    };",
          "276: class RSA_Signature_Operation final : public PK_Ops::Signature_with_EMSA,",
          "",
          "[Removed Lines]",
          "272:       size_t m_mod_bytes;",
          "273:       size_t m_mod_bits;",
          "",
          "[Added Lines]",
          "276:       const size_t m_exp_blinding_bits;",
          "277:       const size_t m_mod_bytes;",
          "278:       const size_t m_mod_bits;",
          "279:       const size_t m_max_d1_bits;",
          "280:       const size_t m_max_d2_bits;",
          "",
          "---------------"
        ]
      }
    }
  ]
}