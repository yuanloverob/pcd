{
  "cve_id": "CVE-2019-10154",
  "cve_desc": "A flaw was found in Moodle before versions 3.7, 3.6.4. A web service fetching messages was not restricted to the current user's conversations.",
  "repo": "moodle/moodle",
  "patch_hash": "2904a7f851da8e66be12f41d55068bf07817fbd6",
  "patch_info": {
    "commit_hash": "2904a7f851da8e66be12f41d55068bf07817fbd6",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/2904a7f851da8e66be12f41d55068bf07817fbd6",
    "files": [
      "message/externallib.php",
      "message/tests/externallib_test.php"
    ],
    "message": "MDL-65365 core_message: prevent users from viewing all conversations",
    "before_after_code_files": [
      "message/externallib.php||message/externallib.php",
      "message/tests/externallib_test.php||message/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "message/externallib.php||message/externallib.php": [
      "File: message/externallib.php -> message/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "2453:     public static function get_conversation_messages(int $currentuserid, int $convid, int $limitfrom = 0, int $limitnum = 0,",
      "2454:                                                          bool $newest = false, int $timefrom = 0) {",
      "2458:         if (empty($CFG->messaging)) {",
      "",
      "[Removed Lines]",
      "2455:         global $CFG, $PAGE, $USER;",
      "",
      "[Added Lines]",
      "2455:         global $CFG, $USER;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2476:             throw new moodle_exception('You do not have permission to perform this action.');",
      "2477:         }",
      "2479:         $sort = $newest ? 'timecreated DESC' : 'timecreated ASC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2480:         if (!\\core_message\\api::is_user_in_conversation($params['currentuserid'], $params['convid'])) {",
      "2481:             throw new moodle_exception('User is not part of conversation.');",
      "2482:         }",
      "",
      "---------------"
    ],
    "message/tests/externallib_test.php||message/tests/externallib_test.php": [
      "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "4148:         core_message_external::get_conversation_messages($user2->id, $conversation->id);",
      "4149:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4154:     public function test_get_conversation_messages_as_user_not_in_conversation() {",
      "4155:         $this->resetAfterTest(true);",
      "4158:         $user1 = self::getDataGenerator()->create_user();",
      "4159:         $user2 = self::getDataGenerator()->create_user();",
      "4160:         $user3 = self::getDataGenerator()->create_user(); // Not in group.",
      "4163:         $conversation = \\core_message\\api::create_conversation(",
      "4164:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
      "4165:             [$user1->id, $user2->id]",
      "4166:         );",
      "4169:         $this->setUser($user3);",
      "4172:         $this->expectExceptionMessage('User is not part of conversation.');",
      "4173:         core_message_external::get_conversation_messages($user3->id, $conversation->id);",
      "4174:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb04293bb1df2fdd3d93494b29c0151fe3937899",
      "candidate_info": {
        "commit_hash": "fb04293bb1df2fdd3d93494b29c0151fe3937899",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/fb04293bb1df2fdd3d93494b29c0151fe3937899",
        "files": [
          "lang/en/cache.php",
          "lib/db/caches.php",
          "lib/db/services.php",
          "lib/messagelib.php",
          "message/classes/api.php",
          "message/classes/helper.php",
          "message/classes/time_last_message_between_users.php",
          "message/externallib.php",
          "message/tests/api_test.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-63466 core_message: Add conversation support to get_messages\n\n- The get_conversation_messages has been added to the API and the WS\nwith the conversation identifier (convid) instead of the userto,\nto let get conversation messages and the members involved.\n- The cache has been also reviewed, to use the convid instead of the\n[userfrom, userto] keys.\n- The get_most_recent_conversation_messages has been added to the API\nto update the cache when needed.",
        "before_after_code_files": [
          "lang/en/cache.php||lang/en/cache.php",
          "lib/db/caches.php||lib/db/caches.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/messagelib.php||lib/messagelib.php",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/helper.php||message/classes/helper.php",
          "message/classes/time_last_message_between_users.php||message/classes/time_last_message_between_users.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "message/externallib.php||message/externallib.php",
            "message/tests/externallib_test.php||message/tests/externallib_test.php"
          ],
          "candidate": [
            "message/externallib.php||message/externallib.php",
            "message/tests/externallib_test.php||message/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/cache.php||lang/en/cache.php": [
          "File: lang/en/cache.php -> lang/en/cache.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: $string['cachedef_groupdata'] = 'Course group information';",
          "56: $string['cachedef_htmlpurifier'] = 'HTML Purifier - cleaned content';",
          "57: $string['cachedef_langmenu'] = 'List of available languages';",
          "59: $string['cachedef_locking'] = 'Locking';",
          "60: $string['cachedef_message_processors_enabled'] = \"Message processors enabled status\";",
          "61: $string['cachedef_contextwithinsights'] = 'Context with insights';",
          "",
          "[Removed Lines]",
          "58: $string['cachedef_message_time_last_message_between_users'] = 'Time created for most recent message between users';",
          "",
          "[Added Lines]",
          "58: $string['cachedef_message_time_last_message_between_users'] = 'Time created for most recent message in a conversation';",
          "",
          "---------------"
        ],
        "lib/db/caches.php||lib/db/caches.php": [
          "File: lib/db/caches.php -> lib/db/caches.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:         'staticaccelerationsize' => 3",
          "343:     ),",
          "346:     'message_time_last_message_between_users' => array(",
          "347:         'mode' => cache_store::MODE_APPLICATION,",
          "349:         'simplevalues' => true,",
          "350:         'datasource' => '\\core_message\\time_last_message_between_users',",
          "351:     ),",
          "",
          "[Removed Lines]",
          "348:         'simplekeys' => true, // The id of the sender and recipient is used.",
          "",
          "[Added Lines]",
          "348:         'simplekeys' => true, // The conversation id is used.",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:         'ajax' => true,",
          "1128:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1129:     ),",
          "1130:     'core_message_unblock_user' => array(",
          "1131:         'classname' => 'core_message_external',",
          "1132:         'methodname' => 'unblock_user',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130:     'core_message_get_conversation_messages' => array(",
          "1131:         'classname' => 'core_message_external',",
          "1132:         'methodname' => 'get_conversation_messages',",
          "1133:         'classpath' => 'message/externallib.php',",
          "1134:         'description' => 'Retrieve the conversation messages and relevant member information',",
          "1135:         'type' => 'read',",
          "1136:         'ajax' => true,",
          "1137:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1138:     ),",
          "",
          "---------------"
        ],
        "lib/messagelib.php||lib/messagelib.php": [
          "File: lib/messagelib.php -> lib/messagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:     if (!$eventdata->notification) {",
          "300:     }",
          "",
          "[Removed Lines]",
          "296:         $cache = cache::make('core', 'message_time_last_message_between_users');",
          "297:         $key = \\core_message\\helper::get_last_message_time_created_cache_key($eventdata->userfrom->id,",
          "298:             $eventdata->userto->id);",
          "299:         $cache->set($key, $tabledata->timecreated);",
          "",
          "[Added Lines]",
          "295:         if (!empty($eventdata->convid)) {",
          "297:             $cache = cache::make('core', 'message_time_last_message_between_users');",
          "298:             $key = \\core_message\\helper::get_last_message_time_created_cache_key($eventdata->convid);",
          "299:             $cache->set($key, $tabledata->timecreated);",
          "300:         }",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:         $sort = 'timecreated ASC', $timefrom = 0, $timeto = 0) {",
          "610:         if (!empty($timefrom)) {",
          "612:             $cache = \\cache::make('core', 'message_time_last_message_between_users');",
          "614:             $lastcreated = $cache->get($key);",
          "",
          "[Removed Lines]",
          "613:             $key = helper::get_last_message_time_created_cache_key($otheruserid, $userid);",
          "",
          "[Added Lines]",
          "612:             $userids = [$userid, $otheruserid];",
          "613:             if (!$conversationid = self::get_conversation_between_users($userids)) {",
          "615:                 $conversation = self::create_conversation(self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, $userids);",
          "616:                 $conversationid = $conversation->id;",
          "617:             }",
          "621:             $key = helper::get_last_message_time_created_cache_key($conversationid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:         $arrmessages = array();",
          "624:         if ($messages = helper::get_messages($userid, $otheruserid, 0, $limitfrom, $limitnum,",
          "625:                                              $sort, $timefrom, $timeto)) {",
          "627:             $arrmessages = helper::create_messages($userid, $messages);",
          "628:         }",
          "630:         return $arrmessages;",
          "631:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:     public static function get_conversation_messages(int $userid, int $convid, int $limitfrom = 0, int $limitnum = 0,",
          "653:         string $sort = 'timecreated ASC', int $timefrom = 0, int $timeto = 0) : array {",
          "655:         if (!empty($timefrom)) {",
          "657:             $cache = \\cache::make('core', 'message_time_last_message_between_users');",
          "658:             $key = helper::get_last_message_time_created_cache_key($convid);",
          "659:             $lastcreated = $cache->get($key);",
          "663:             if ($lastcreated && $lastcreated < $timefrom) {",
          "664:                 return [];",
          "665:             }",
          "666:         }",
          "668:         $arrmessages = array();",
          "669:         if ($messages = helper::get_conversation_messages($userid, $convid, 0, $limitfrom, $limitnum, $sort, $timefrom, $timeto)) {",
          "670:             $arrmessages = helper::format_conversation_messages($userid, $convid, $messages);",
          "671:         }",
          "673:         return $arrmessages;",
          "674:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "649:         return null;",
          "650:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "702:     public static function get_most_recent_conversation_message(int $convid, int $currentuserid = 0) {",
          "703:         global $USER;",
          "705:         if (empty($currentuserid)) {",
          "706:             $currentuserid = $USER->id;",
          "707:         }",
          "709:         if ($messages = helper::get_conversation_messages($currentuserid, $convid, 0, 0, 1, 'timecreated DESC')) {",
          "710:             $convmessages = helper::format_conversation_messages($currentuserid, $convid, $messages);",
          "711:             return array_pop($convmessages['messages']);",
          "712:         }",
          "714:         return null;",
          "715:     }",
          "",
          "---------------"
        ],
        "message/classes/helper.php||message/classes/helper.php": [
          "File: message/classes/helper.php -> message/classes/helper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         return $messages;",
          "109:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     public static function get_conversation_messages(int $userid, int $convid, int $timedeleted = 0, int $limitfrom = 0,",
          "125:                                                      int $limitnum = 0, string $sort = 'timecreated ASC', int $timefrom = 0,",
          "126:                                                      int $timeto = 0) : array {",
          "127:         global $DB;",
          "129:         $sql = \"SELECT m.id, m.useridfrom, m.subject, m.fullmessage, m.fullmessagehtml,",
          "130:                        m.fullmessageformat, m.smallmessage, m.timecreated, muaread.timecreated AS timeread",
          "131:                   FROM {message_conversations} mc",
          "132:             INNER JOIN {messages} m",
          "133:                     ON m.conversationid = mc.id",
          "134:              LEFT JOIN {message_user_actions} muaread",
          "135:                     ON (muaread.messageid = m.id",
          "136:                    AND muaread.userid = :userid1",
          "137:                    AND muaread.action = :readaction)\";",
          "138:         $params = ['userid1' => $userid, 'readaction' => api::MESSAGE_ACTION_READ, 'convid' => $convid];",
          "140:         if (empty($timedeleted)) {",
          "141:             $sql .= \" LEFT JOIN {message_user_actions} mua",
          "142:                              ON (mua.messageid = m.id",
          "143:                             AND mua.userid = :userid2",
          "144:                             AND mua.action = :deleteaction",
          "145:                             AND mua.timecreated is NOT NULL)\";",
          "146:         } else {",
          "147:             $sql .= \" INNER JOIN {message_user_actions} mua",
          "148:                               ON (mua.messageid = m.id",
          "149:                              AND mua.userid = :userid2",
          "150:                              AND mua.action = :deleteaction",
          "151:                              AND mua.timecreated = :timedeleted)\";",
          "152:             $params['timedeleted'] = $timedeleted;",
          "153:         }",
          "155:         $params['userid2'] = $userid;",
          "156:         $params['deleteaction'] = api::MESSAGE_ACTION_DELETED;",
          "158:         $sql .= \" WHERE mc.id = :convid\";",
          "160:         if (!empty($timefrom)) {",
          "161:             $sql .= \" AND m.timecreated >= :timefrom\";",
          "162:             $params['timefrom'] = $timefrom;",
          "163:         }",
          "165:         if (!empty($timeto)) {",
          "166:             $sql .= \" AND m.timecreated <= :timeto\";",
          "167:             $params['timeto'] = $timeto;",
          "168:         }",
          "170:         if (empty($timedeleted)) {",
          "171:             $sql .= \" AND mua.id is NULL\";",
          "172:         }",
          "174:         $sql .= \" ORDER BY m.$sort\";",
          "176:         $messages = $DB->get_records_sql($sql, $params, $limitfrom, $limitnum);",
          "178:         return $messages;",
          "179:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:     }",
          "383:     }",
          "",
          "[Removed Lines]",
          "379:     public static function get_last_message_time_created_cache_key($userid, $user2id) {",
          "380:         $ids = [$userid, $user2id];",
          "381:         sort($ids);",
          "382:         return implode('_', $ids);",
          "",
          "[Added Lines]",
          "448:     public static function get_last_message_time_created_cache_key(int $convid) {",
          "449:         return $convid;",
          "",
          "---------------"
        ],
        "message/classes/time_last_message_between_users.php||message/classes/time_last_message_between_users.php": [
          "File: message/classes/time_last_message_between_users.php -> message/classes/time_last_message_between_users.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     public function load_for_cache($key) {",
          "68:         if ($message) {",
          "69:             return $message->timecreated;",
          "",
          "[Removed Lines]",
          "64:         list($userid1, $userid2) = explode('_', $key);",
          "66:         $message = api::get_most_recent_message($userid1, $userid2);",
          "",
          "[Added Lines]",
          "64:         $message = api::get_most_recent_conversation_message($key);",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:         );",
          "869:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     private static function get_conversation_member_structure() {",
          "878:         return new external_single_structure(",
          "879:             array(",
          "880:                 'id' => new external_value(PARAM_INT, 'The user id'),",
          "881:                 'fullname' => new external_value(PARAM_NOTAGS, 'The user\\'s name'),",
          "882:                 'profileimageurl' => new external_value(PARAM_URL, 'User picture URL'),",
          "883:                 'profileimageurlsmall' => new external_value(PARAM_URL, 'Small user picture URL'),",
          "884:                 'isonline' => new external_value(PARAM_BOOL, 'The user\\'s online status'),",
          "885:                 'showonlinestatus' => new external_value(PARAM_BOOL, 'Show the user\\'s online status?'),",
          "886:                 'isblocked' => new external_value(PARAM_BOOL, 'If the user has been blocked'),",
          "887:                 'iscontact' => new external_value(PARAM_BOOL, 'Is the user a contact?')",
          "888:             )",
          "889:         );",
          "890:     }",
          "898:     private static function get_conversation_message_structure() {",
          "899:         return new external_single_structure(",
          "900:             array(",
          "901:                 'id' => new external_value(PARAM_INT, 'The id of the message'),",
          "902:                 'useridfrom' => new external_value(PARAM_INT, 'The id of the user who sent the message'),",
          "903:                 'text' => new external_value(PARAM_RAW, 'The text of the message'),",
          "904:                 'timecreated' => new external_value(PARAM_INT, 'The timecreated timestamp for the message'),",
          "905:             )",
          "906:         );",
          "907:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1373:         );",
          "1374:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:     public static function get_conversation_messages_parameters() {",
          "1421:         return new external_function_parameters(",
          "1422:             array(",
          "1423:                 'currentuserid' => new external_value(PARAM_INT, 'The current user\\'s id'),",
          "1424:                 'convid' => new external_value(PARAM_INT, 'The conversation id'),",
          "1425:                 'limitfrom' => new external_value(PARAM_INT, 'Limit from', VALUE_DEFAULT, 0),",
          "1426:                 'limitnum' => new external_value(PARAM_INT, 'Limit number', VALUE_DEFAULT, 0),",
          "1427:                 'newest' => new external_value(PARAM_BOOL, 'Newest first?', VALUE_DEFAULT, false),",
          "1428:                 'timefrom' => new external_value(PARAM_INT,",
          "1429:                     'The timestamp from which the messages were created', VALUE_DEFAULT, 0),",
          "1430:             )",
          "1431:         );",
          "1432:     }",
          "1447:     public static function get_conversation_messages(int $currentuserid, int $convid, int $limitfrom = 0, int $limitnum = 0,",
          "1448:                                                          bool $newest = false, int $timefrom = 0) {",
          "1449:         global $CFG, $PAGE, $USER;",
          "1452:         if (empty($CFG->messaging)) {",
          "1453:             throw new moodle_exception('disabled', 'message');",
          "1454:         }",
          "1456:         $systemcontext = context_system::instance();",
          "1458:         $params = array(",
          "1459:             'currentuserid' => $currentuserid,",
          "1460:             'convid' => $convid,",
          "1461:             'limitfrom' => $limitfrom,",
          "1462:             'limitnum' => $limitnum,",
          "1463:             'newest' => $newest,",
          "1464:             'timefrom' => $timefrom,",
          "1465:         );",
          "1466:         self::validate_parameters(self::get_conversation_messages_parameters(), $params);",
          "1467:         self::validate_context($systemcontext);",
          "1469:         if (($USER->id != $currentuserid) && !has_capability('moodle/site:readallmessages', $systemcontext)) {",
          "1470:             throw new moodle_exception('You do not have permission to perform this action.');",
          "1471:         }",
          "1473:         $sort = $newest ? 'timecreated DESC' : 'timecreated ASC';",
          "1483:         $timeto = empty($timefrom) ? 0 : time() - 1;",
          "1486:         if ($timefrom == time()) {",
          "1487:             $messages = [];",
          "1488:         } else {",
          "1489:             $messages = \\core_message\\api::get_conversation_messages($currentuserid, $convid, $limitfrom,",
          "1490:                                                         $limitnum, $sort, $timefrom, $timeto);",
          "1491:         }",
          "1493:         return $messages;",
          "1494:     }",
          "1502:     public static function get_conversation_messages_returns() {",
          "1503:         return new external_single_structure(",
          "1504:             array(",
          "1505:                 'id' => new external_value(PARAM_INT, 'The conversation id'),",
          "1506:                 'members' => new external_multiple_structure(",
          "1507:                     self::get_conversation_member_structure()",
          "1508:                 ),",
          "1509:                 'messages' => new external_multiple_structure(",
          "1510:                     self::get_conversation_message_structure()",
          "1511:                 ),",
          "1512:             )",
          "1513:         );",
          "1514:     }",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: require_once($CFG->dirroot . '/message/tests/messagelib_test.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: use \\core_message\\tests\\helper as testhelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1351:         $this->assertContains('Word.', $message4->text);",
          "1352:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1359:     public function test_get_conversation_messages() {",
          "1361:         $user1 = self::getDataGenerator()->create_user();",
          "1362:         $user2 = self::getDataGenerator()->create_user();",
          "1365:         $conversation = \\core_message\\api::create_conversation(",
          "1366:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1367:             [$user1->id, $user2->id]",
          "1368:         );",
          "1371:         $this->setUser($user1);",
          "1374:         $time = 1;",
          "1375:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Yo!', $time + 1);",
          "1376:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Sup mang?', $time + 2);",
          "1377:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Writing PHPUnit tests!', $time + 3);",
          "1378:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Word.', $time + 4);",
          "1381:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id);",
          "1384:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1387:         $messages = $convmessages['messages'];",
          "1388:         $this->assertEquals(4, count($messages));",
          "1389:         $message1 = $messages[0];",
          "1390:         $message2 = $messages[1];",
          "1391:         $message3 = $messages[2];",
          "1392:         $message4 = $messages[3];",
          "1394:         $this->assertEquals($user1->id, $message1->useridfrom);",
          "1395:         $this->assertContains('Yo!', $message1->text);",
          "1397:         $this->assertEquals($user2->id, $message2->useridfrom);",
          "1398:         $this->assertContains('Sup mang?', $message2->text);",
          "1400:         $this->assertEquals($user1->id, $message3->useridfrom);",
          "1401:         $this->assertContains('Writing PHPUnit tests!', $message3->text);",
          "1403:         $this->assertEquals($user1->id, $message4->useridfrom);",
          "1404:         $this->assertContains('Word.', $message4->text);",
          "1407:         $members = $convmessages['members'];",
          "1408:         $this->assertEquals(2, count($members));",
          "1409:     }",
          "1414:     public function test_get_group_conversation_messages() {",
          "1416:         $user1 = self::getDataGenerator()->create_user();",
          "1417:         $user2 = self::getDataGenerator()->create_user();",
          "1418:         $user3 = self::getDataGenerator()->create_user();",
          "1419:         $user4 = self::getDataGenerator()->create_user();",
          "1422:         $conversation = \\core_message\\api::create_conversation(",
          "1423:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1424:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "1425:         );",
          "1428:         $this->setUser($user1);",
          "1431:         $time = 1;",
          "1432:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Yo!', $time + 1);",
          "1433:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Sup mang?', $time + 2);",
          "1434:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Writing PHPUnit tests!', $time + 3);",
          "1435:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Word.', $time + 4);",
          "1436:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Yeah!', $time + 5);",
          "1439:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id);",
          "1442:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1445:         $messages = $convmessages['messages'];",
          "1446:         $this->assertEquals(5, count($messages));",
          "1448:         $message1 = $messages[0];",
          "1449:         $message2 = $messages[1];",
          "1450:         $message3 = $messages[2];",
          "1451:         $message4 = $messages[3];",
          "1452:         $message5 = $messages[4];",
          "1454:         $this->assertEquals($user1->id, $message1->useridfrom);",
          "1455:         $this->assertContains('Yo!', $message1->text);",
          "1457:         $this->assertEquals($user2->id, $message2->useridfrom);",
          "1458:         $this->assertContains('Sup mang?', $message2->text);",
          "1460:         $this->assertEquals($user3->id, $message3->useridfrom);",
          "1461:         $this->assertContains('Writing PHPUnit tests!', $message3->text);",
          "1463:         $this->assertEquals($user1->id, $message4->useridfrom);",
          "1464:         $this->assertContains('Word.', $message4->text);",
          "1466:         $this->assertEquals($user2->id, $message5->useridfrom);",
          "1467:         $this->assertContains('Yeah!', $message5->text);",
          "1470:         $members = $convmessages['members'];",
          "1471:         $this->assertEquals(3, count($members));",
          "1472:     }",
          "1477:     public function test_get_conversation_messages_time_from_only() {",
          "1479:         $user1 = self::getDataGenerator()->create_user();",
          "1480:         $user2 = self::getDataGenerator()->create_user();",
          "1481:         $user3 = self::getDataGenerator()->create_user();",
          "1482:         $user4 = self::getDataGenerator()->create_user();",
          "1485:         $conversation = \\core_message\\api::create_conversation(",
          "1486:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1487:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "1488:         );",
          "1491:         $this->setUser($user1);",
          "1494:         $time = 1;",
          "1495:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $time + 1);",
          "1496:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 2', $time + 2);",
          "1497:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 3', $time + 3);",
          "1498:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Message 4', $time + 4);",
          "1501:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 0, 0, 'timecreated ASC', $time);",
          "1504:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1507:         $messages = $convmessages['messages'];",
          "1508:         $this->assertEquals(4, count($messages));",
          "1510:         $message1 = $messages[0];",
          "1511:         $message2 = $messages[1];",
          "1512:         $message3 = $messages[2];",
          "1513:         $message4 = $messages[3];",
          "1515:         $this->assertContains('Message 1', $message1->text);",
          "1516:         $this->assertContains('Message 2', $message2->text);",
          "1517:         $this->assertContains('Message 3', $message3->text);",
          "1518:         $this->assertContains('Message 4', $message4->text);",
          "1521:         $members = $convmessages['members'];",
          "1522:         $this->assertEquals(3, count($members));",
          "1525:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 0, 0,",
          "1526:             'timecreated ASC', $time + 3);",
          "1529:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1532:         $messages = $convmessages['messages'];",
          "1533:         $this->assertEquals(2, count($messages));",
          "1535:         $message1 = $messages[0];",
          "1536:         $message2 = $messages[1];",
          "1538:         $this->assertContains('Message 3', $message1->text);",
          "1539:         $this->assertContains('Message 4', $message2->text);",
          "1542:         $members = $convmessages['members'];",
          "1543:         $this->assertEquals(2, count($members));",
          "1544:     }",
          "1549:     public function test_get_conversation_messages_time_to_only() {",
          "1551:         $user1 = self::getDataGenerator()->create_user();",
          "1552:         $user2 = self::getDataGenerator()->create_user();",
          "1553:         $user3 = self::getDataGenerator()->create_user();",
          "1554:         $user4 = self::getDataGenerator()->create_user();",
          "1557:         $conversation = \\core_message\\api::create_conversation(",
          "1558:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1559:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "1560:         );",
          "1563:         $this->setUser($user1);",
          "1566:         $time = 1;",
          "1567:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $time + 1);",
          "1568:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 2', $time + 2);",
          "1569:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 3', $time + 3);",
          "1570:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Message 4', $time + 4);",
          "1573:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 0, 0, 'timecreated ASC',",
          "1574:             0, $time + 4);",
          "1577:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1580:         $messages = $convmessages['messages'];",
          "1581:         $this->assertEquals(4, count($messages));",
          "1583:         $message1 = $messages[0];",
          "1584:         $message2 = $messages[1];",
          "1585:         $message3 = $messages[2];",
          "1586:         $message4 = $messages[3];",
          "1588:         $this->assertContains('Message 1', $message1->text);",
          "1589:         $this->assertContains('Message 2', $message2->text);",
          "1590:         $this->assertContains('Message 3', $message3->text);",
          "1591:         $this->assertContains('Message 4', $message4->text);",
          "1594:         $members = $convmessages['members'];",
          "1595:         $this->assertEquals(3, count($members));",
          "1598:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 0, 0, 'timecreated ASC',",
          "1599:             0, $time + 2);",
          "1602:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1605:         $messages = $convmessages['messages'];",
          "1606:         $this->assertEquals(2, count($messages));",
          "1608:         $message1 = $messages[0];",
          "1609:         $message2 = $messages[1];",
          "1611:         $this->assertContains('Message 1', $message1->text);",
          "1612:         $this->assertContains('Message 2', $message2->text);",
          "1615:         $members = $convmessages['members'];",
          "1616:         $this->assertEquals(2, count($members));",
          "1617:     }",
          "1622:     public function test_get_conversation_messages_time_from_and_to() {",
          "1624:         $user1 = self::getDataGenerator()->create_user();",
          "1625:         $user2 = self::getDataGenerator()->create_user();",
          "1626:         $user3 = self::getDataGenerator()->create_user();",
          "1627:         $user4 = self::getDataGenerator()->create_user();",
          "1630:         $conversation = \\core_message\\api::create_conversation(",
          "1631:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1632:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "1633:         );",
          "1636:         $this->setUser($user1);",
          "1639:         $time = 1;",
          "1640:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $time + 1);",
          "1641:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 2', $time + 2);",
          "1642:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 3', $time + 3);",
          "1643:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Message 4', $time + 4);",
          "1646:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 0, 0,",
          "1647:             'timecreated ASC', $time + 2, $time + 3);",
          "1650:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1653:         $messages = $convmessages['messages'];",
          "1654:         $this->assertEquals(2, count($messages));",
          "1656:         $message1 = $messages[0];",
          "1657:         $message2 = $messages[1];",
          "1659:         $this->assertContains('Message 2', $message1->text);",
          "1660:         $this->assertContains('Message 3', $message2->text);",
          "1663:         $members = $convmessages['members'];",
          "1664:         $this->assertEquals(2, count($members));",
          "1665:     }",
          "1671:     public function test_get_conversation_messages_limitfrom_only() {",
          "1673:         $user1 = self::getDataGenerator()->create_user();",
          "1674:         $user2 = self::getDataGenerator()->create_user();",
          "1675:         $user3 = self::getDataGenerator()->create_user();",
          "1676:         $user4 = self::getDataGenerator()->create_user();",
          "1679:         $conversation = \\core_message\\api::create_conversation(",
          "1680:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1681:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "1682:         );",
          "1685:         $this->setUser($user1);",
          "1688:         $time = 1;",
          "1689:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $time + 1);",
          "1690:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 2', $time + 2);",
          "1691:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 3', $time + 3);",
          "1692:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Message 4', $time + 4);",
          "1695:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 2);",
          "1698:         $messages = $convmessages['messages'];",
          "1699:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1702:         $this->assertEquals(2, count($messages));",
          "1704:         $message1 = $messages[0];",
          "1705:         $message2 = $messages[1];",
          "1707:         $this->assertContains('Message 3', $message1->text);",
          "1708:         $this->assertContains('Message 4', $message2->text);",
          "1711:         $members = $convmessages['members'];",
          "1712:         $this->assertEquals(2, count($members));",
          "1713:     }",
          "1718:     public function test_get_conversation_messages_limitnum() {",
          "1720:         $user1 = self::getDataGenerator()->create_user();",
          "1721:         $user2 = self::getDataGenerator()->create_user();",
          "1722:         $user3 = self::getDataGenerator()->create_user();",
          "1723:         $user4 = self::getDataGenerator()->create_user();",
          "1726:         $conversation = \\core_message\\api::create_conversation(",
          "1727:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1728:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "1729:         );",
          "1732:         $this->setUser($user1);",
          "1735:         $time = 1;",
          "1736:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $time + 1);",
          "1737:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 2', $time + 2);",
          "1738:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 3', $time + 3);",
          "1739:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Message 4', $time + 4);",
          "1742:         $convmessages = \\core_message\\api::get_conversation_messages($user1->id, $conversation->id, 2, 1);",
          "1745:         $messages = $convmessages['messages'];",
          "1746:         $this->assertEquals($conversation->id, $convmessages['id']);",
          "1749:         $messages = $convmessages['messages'];",
          "1750:         $this->assertEquals(1, count($messages));",
          "1752:         $message1 = $messages[0];",
          "1754:         $this->assertContains('Message 3', $message1->text);",
          "1757:         $members = $convmessages['members'];",
          "1758:         $this->assertEquals(1, count($members));",
          "1759:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1378:         $this->assertContains('Word.', $message->text);",
          "1379:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1791:     public function test_get_most_recent_conversation_message() {",
          "1793:         $user1 = self::getDataGenerator()->create_user();",
          "1794:         $user2 = self::getDataGenerator()->create_user();",
          "1795:         $user3 = self::getDataGenerator()->create_user();",
          "1798:         $conversation = \\core_message\\api::create_conversation(",
          "1799:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1800:             [$user1->id, $user2->id, $user3->id]",
          "1801:         );",
          "1804:         $this->setUser($user1);",
          "1807:         $time = 1;",
          "1808:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Yo!', $time + 1);",
          "1809:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Sup mang?', $time + 2);",
          "1810:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Writing PHPUnit tests!', $time + 3);",
          "1811:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Word.', $time + 4);",
          "1814:         $message = \\core_message\\api::get_most_recent_conversation_message($conversation->id, $user1->id);",
          "1817:         $this->assertEquals($user2->id, $message->useridfrom);",
          "1818:         $this->assertContains('Word.', $message->text);",
          "1819:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "31: require_once($CFG->dirroot . '/message/externallib.php');",
          "33: class core_message_externallib_testcase extends externallib_advanced_testcase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: use \\core_message\\tests\\helper as testhelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2971:         core_message_external::data_for_messagearea_messages($user1->id, $user2->id);",
          "2972:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2979:     public function test_get_conversation_messages() {",
          "2980:         $this->resetAfterTest(true);",
          "2983:         $user1 = self::getDataGenerator()->create_user();",
          "2984:         $user2 = self::getDataGenerator()->create_user();",
          "2985:         $user3 = self::getDataGenerator()->create_user();",
          "2986:         $user4 = self::getDataGenerator()->create_user();",
          "2987:         $user5 = self::getDataGenerator()->create_user();",
          "2990:         $conversation = \\core_message\\api::create_conversation(",
          "2991:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "2992:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "2993:         );",
          "2996:         $this->setUser($user1);",
          "2999:         $time = time();",
          "3000:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Yo!', $time);",
          "3001:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Sup mang?', $time + 1);",
          "3002:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Writing PHPUnit tests!', $time + 2);",
          "3003:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Word.', $time + 3);",
          "3006:         $result = core_message_external::get_conversation_messages($user1->id, $conversation->id);",
          "3009:         $result = external_api::clean_returnvalue(core_message_external::get_conversation_messages_returns(),",
          "3010:             $result);",
          "3013:         $this->assertEquals($conversation->id, $result['id']);",
          "3016:         $members = $result['members'];",
          "3017:         $this->assertCount(3, $members);",
          "3018:         $membersid = [$members[0]['id'], $members[1]['id'], $members[2]['id']];",
          "3019:         $this->assertContains($user1->id, $membersid);",
          "3020:         $this->assertContains($user2->id, $membersid);",
          "3021:         $this->assertContains($user3->id, $membersid);",
          "3022:         $this->assertNotContains($user4->id, $membersid);",
          "3023:         $this->assertNotContains($user5->id, $membersid);",
          "3024:         $membersfullnames = [$members[0]['fullname'], $members[1]['fullname'], $members[2]['fullname']];",
          "3025:         $this->assertContains(fullname($user1), $membersfullnames);",
          "3026:         $this->assertContains(fullname($user2), $membersfullnames);",
          "3027:         $this->assertContains(fullname($user3), $membersfullnames);",
          "3028:         $this->assertNotContains(fullname($user4), $membersfullnames);",
          "3029:         $this->assertNotContains(fullname($user5), $membersfullnames);",
          "3032:         $messages = $result['messages'];",
          "3033:         $this->assertCount(4, $messages);",
          "3035:         $message1 = $messages[0];",
          "3036:         $message2 = $messages[1];",
          "3037:         $message3 = $messages[2];",
          "3038:         $message4 = $messages[3];",
          "3040:         $this->assertEquals($user1->id, $message1['useridfrom']);",
          "3041:         $this->assertContains('Yo!', $message1['text']);",
          "3043:         $this->assertEquals($user3->id, $message2['useridfrom']);",
          "3044:         $this->assertContains('Sup mang?', $message2['text']);",
          "3046:         $this->assertEquals($user2->id, $message3['useridfrom']);",
          "3047:         $this->assertContains('Writing PHPUnit tests!', $message3['text']);",
          "3049:         $this->assertEquals($user1->id, $message4['useridfrom']);",
          "3050:         $this->assertContains('Word.', $message4['text']);",
          "3051:     }",
          "3056:     public function test_get_conversation_messages_timefrom() {",
          "3057:         $this->resetAfterTest(true);",
          "3060:         $user1 = self::getDataGenerator()->create_user();",
          "3061:         $user2 = self::getDataGenerator()->create_user();",
          "3062:         $user3 = self::getDataGenerator()->create_user();",
          "3063:         $user4 = self::getDataGenerator()->create_user();",
          "3066:         $conversation = \\core_message\\api::create_conversation(",
          "3067:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "3068:             [$user1->id, $user2->id, $user3->id]",
          "3069:         );",
          "3072:         $this->setUser($user1);",
          "3075:         $time = time();",
          "3076:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Message 1', $time - 4);",
          "3077:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 2', $time - 3);",
          "3078:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 3', $time - 2);",
          "3079:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Message 4', $time - 1);",
          "3082:         $result = core_message_external::get_conversation_messages($user1->id, $conversation->id, 0, 0, false, $time - 3);",
          "3085:         $result = external_api::clean_returnvalue(core_message_external::get_conversation_messages_returns(),",
          "3086:             $result);",
          "3089:         $this->assertEquals($conversation->id, $result['id']);",
          "3092:         $messages = $result['messages'];",
          "3093:         $this->assertCount(3, $messages);",
          "3095:         $message1 = $messages[0];",
          "3096:         $message2 = $messages[1];",
          "3097:         $message3 = $messages[2];",
          "3099:         $this->assertContains('Message 2', $message1['text']);",
          "3100:         $this->assertContains('Message 3', $message2['text']);",
          "3101:         $this->assertContains('Message 4', $message3['text']);",
          "3104:         $members = $result['members'];",
          "3105:         $this->assertCount(1, $members);",
          "3106:         $this->assertEquals($user2->id, $members[0]['id']);",
          "3107:     }",
          "3112:     public function test_get_conversation_messages_as_other_user() {",
          "3113:         $this->resetAfterTest(true);",
          "3116:         $this->setAdminUser();",
          "3119:         $user1 = self::getDataGenerator()->create_user();",
          "3120:         $user2 = self::getDataGenerator()->create_user();",
          "3121:         $user3 = self::getDataGenerator()->create_user();",
          "3122:         $user4 = self::getDataGenerator()->create_user();",
          "3125:         $conversation = \\core_message\\api::create_conversation(",
          "3126:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "3127:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "3128:         );",
          "3131:         $time = time();",
          "3132:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Yo!', $time);",
          "3133:         testhelper::send_fake_message_to_conversation($user3, $conversation->id, 'Sup mang?', $time + 1);",
          "3134:         testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'Writing PHPUnit tests!', $time + 2);",
          "3135:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Word.', $time + 3);",
          "3138:         $result = core_message_external::get_conversation_messages($user1->id, $conversation->id);",
          "3141:         $result = external_api::clean_returnvalue(core_message_external::get_conversation_messages_returns(),",
          "3142:             $result);",
          "3145:         $this->assertEquals($conversation->id, $result['id']);",
          "3148:         $members = $result['members'];",
          "3149:         $this->assertCount(3, $members);",
          "3150:         $membersid = [$members[0]['id'], $members[1]['id'], $members[2]['id']];",
          "3151:         $this->assertContains($user1->id, $membersid);",
          "3152:         $this->assertContains($user2->id, $membersid);",
          "3153:         $this->assertContains($user3->id, $membersid);",
          "3154:         $this->assertNotContains($user4->id, $membersid);",
          "3157:         $messages = $result['messages'];",
          "3158:         $this->assertCount(4, $messages);",
          "3160:         $message1 = $messages[0];",
          "3161:         $message2 = $messages[1];",
          "3162:         $message3 = $messages[2];",
          "3163:         $message4 = $messages[3];",
          "3165:         $this->assertEquals($user1->id, $message1['useridfrom']);",
          "3166:         $this->assertContains('Yo!', $message1['text']);",
          "3168:         $this->assertEquals($user3->id, $message2['useridfrom']);",
          "3169:         $this->assertContains('Sup mang?', $message2['text']);",
          "3171:         $this->assertEquals($user2->id, $message3['useridfrom']);",
          "3172:         $this->assertContains('Writing PHPUnit tests!', $message3['text']);",
          "3174:         $this->assertEquals($user1->id, $message4['useridfrom']);",
          "3175:         $this->assertContains('Word.', $message4['text']);",
          "3176:     }",
          "3181:     public function test_get_conversation_messages_as_other_user_without_cap() {",
          "3182:         $this->resetAfterTest(true);",
          "3185:         $user1 = self::getDataGenerator()->create_user();",
          "3186:         $user2 = self::getDataGenerator()->create_user();",
          "3187:         $user3 = self::getDataGenerator()->create_user();",
          "3188:         $user4 = self::getDataGenerator()->create_user();",
          "3191:         $conversation = \\core_message\\api::create_conversation(",
          "3192:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "3193:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "3194:         );",
          "3197:         $this->setUser($user1);",
          "3200:         $this->expectException('moodle_exception');",
          "3201:         core_message_external::get_conversation_messages($user2->id, $conversation->id);",
          "3202:     }",
          "3207:     public function test_get_conversation_messages_messaging_disabled() {",
          "3208:         $this->resetAfterTest(true);",
          "3211:         $user1 = self::getDataGenerator()->create_user();",
          "3212:         $user2 = self::getDataGenerator()->create_user();",
          "3213:         $user3 = self::getDataGenerator()->create_user();",
          "3214:         $user4 = self::getDataGenerator()->create_user();",
          "3217:         $conversation = \\core_message\\api::create_conversation(",
          "3218:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "3219:             [$user1->id, $user2->id, $user3->id, $user4->id]",
          "3220:         );",
          "3223:         $this->setUser($user1);",
          "3226:         set_config('messaging', 0);",
          "3229:         $this->expectException('moodle_exception');",
          "3230:         core_message_external::get_conversation_messages($user1->id, $conversation->id);",
          "3231:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018102300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018102300.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3d19efab4aff83c07db9f0ad34c8f0e1f29c64c",
      "candidate_info": {
        "commit_hash": "a3d19efab4aff83c07db9f0ad34c8f0e1f29c64c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a3d19efab4aff83c07db9f0ad34c8f0e1f29c64c",
        "files": [
          "message/externallib.php",
          "message/tests/externallib_test.php"
        ],
        "message": "MDL-65365 core_message: prevent users from viewing all conversations",
        "before_after_code_files": [
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "message/externallib.php||message/externallib.php",
            "message/tests/externallib_test.php||message/tests/externallib_test.php"
          ],
          "candidate": [
            "message/externallib.php||message/externallib.php",
            "message/tests/externallib_test.php||message/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2206:     public static function get_conversation_messages(int $currentuserid, int $convid, int $limitfrom = 0, int $limitnum = 0,",
          "2207:                                                          bool $newest = false, int $timefrom = 0) {",
          "2211:         if (empty($CFG->messaging)) {",
          "",
          "[Removed Lines]",
          "2208:         global $CFG, $PAGE, $USER;",
          "",
          "[Added Lines]",
          "2208:         global $CFG, $USER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2229:             throw new moodle_exception('You do not have permission to perform this action.');",
          "2230:         }",
          "2232:         $sort = $newest ? 'timecreated DESC' : 'timecreated ASC';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2233:         if (!\\core_message\\api::is_user_in_conversation($params['currentuserid'], $params['convid'])) {",
          "2234:             throw new moodle_exception('User is not part of conversation.');",
          "2235:         }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3945:         core_message_external::get_conversation_messages($user2->id, $conversation->id);",
          "3946:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3951:     public function test_get_conversation_messages_as_user_not_in_conversation() {",
          "3952:         $this->resetAfterTest(true);",
          "3955:         $user1 = self::getDataGenerator()->create_user();",
          "3956:         $user2 = self::getDataGenerator()->create_user();",
          "3957:         $user3 = self::getDataGenerator()->create_user(); // Not in group.",
          "3960:         $conversation = \\core_message\\api::create_conversation(",
          "3961:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "3962:             [$user1->id, $user2->id]",
          "3963:         );",
          "3966:         $this->setUser($user3);",
          "3969:         $this->expectExceptionMessage('User is not part of conversation.');",
          "3970:         core_message_external::get_conversation_messages($user3->id, $conversation->id);",
          "3971:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}