{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db504eba489528434dfb56257b0f202209741fe9",
      "candidate_info": {
        "commit_hash": "db504eba489528434dfb56257b0f202209741fe9",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/db504eba489528434dfb56257b0f202209741fe9",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "[CVE-2017-0141] ReverseHelper Heap Overflow",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5282:                 pArr->SetHasNoMissingValues(false);",
          "5283:             }",
          "5285:             SparseArraySegmentBase* seg = pArr->head;",
          "5286:             SparseArraySegmentBase *prevSeg = nullptr;",
          "5287:             SparseArraySegmentBase *nextSeg = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5288:             length = pArr->length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
      "candidate_info": {
        "commit_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/402f3d967c0a905ec5b9ca9c240783d3f2c15724",
        "files": [
          "lib/Parser/Parse.cpp",
          "test/es6/lambda-params-shadow.js"
        ],
        "message": "[CVE-2017-0028] Fix binding of 'async' identifier in the presence of async arrow function.",
        "before_after_code_files": [
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
          "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2863:     _Inout_opt_ charcount_t *plastRParen /*= nullptr*/)",
          "2864: {",
          "2865:     ParseNodePtr pnode = nullptr;",
          "2866:     charcount_t ichMin = 0;",
          "2867:     size_t iecpMin = 0;",
          "2868:     size_t iuMin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2866:     PidRefStack *savedTopAsyncRef = nullptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2915:                 isLambdaExpr = true;",
          "2916:                 goto LFunction;",
          "2917:             }",
          "2918:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2919:             else if (m_token.tk == tkLParen)",
          "2920:             {",
          "2924:                 savedTopAsyncRef = pid->GetTopRef();",
          "2925:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3270:     pnode = ParsePostfixOperators<buildAST>(pnode, fAllowCall, fInNew, isAsyncExpr, &fCanAssign, &term, pfIsDotOrIndex);",
          "3273:     if (pToken && term.tk == tkID)",
          "3274:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3280:     if (savedTopAsyncRef != nullptr &&",
          "3281:         this->m_token.tk == tkDArrow)",
          "3282:     {",
          "3285:         for (IdentPtr pid = wellKnownPropertyPids.async; pid->GetTopRef() != savedTopAsyncRef;)",
          "3286:         {",
          "3287:             Assert(pid->GetTopRef() != nullptr);",
          "3288:             pid->RemovePrevPidRef(nullptr);",
          "3289:         }",
          "3290:     }",
          "",
          "---------------"
        ],
        "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js": [
          "File: test/es6/lambda-params-shadow.js -> test/es6/lambda-params-shadow.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     }",
          "19: }",
          "20: let b = new B();",
          "22:     WScript.Echo('fail');",
          "23: }",
          "",
          "[Removed Lines]",
          "21: if (count !== 3) {",
          "",
          "[Added Lines]",
          "21: class async extends A {",
          "22:     constructor() {",
          "23:         super();",
          "24:         let Q = async A => { A };",
          "25:     }",
          "26: }",
          "27: let a = new async();",
          "28: if (count !== 4) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd6f65b326119d514443231b74965b035e78bfb5",
      "candidate_info": {
        "commit_hash": "cd6f65b326119d514443231b74965b035e78bfb5",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/cd6f65b326119d514443231b74965b035e78bfb5",
        "files": [
          "test/Array/array_conv_src.js"
        ],
        "message": "add copyright notice to new UT",
        "before_after_code_files": [
          "test/Array/array_conv_src.js||test/Array/array_conv_src.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/Array/array_conv_src.js||test/Array/array_conv_src.js": [
          "File: test/Array/array_conv_src.js -> test/Array/array_conv_src.js"
        ]
      }
    },
    {
      "candidate_hash": "f1a8c50ed66c169cb32b75cb5265a6ae7e76afc6",
      "candidate_info": {
        "commit_hash": "f1a8c50ed66c169cb32b75cb5265a6ae7e76afc6",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/f1a8c50ed66c169cb32b75cb5265a6ae7e76afc6",
        "files": [
          "lib/Runtime/Language/AsmJs.cpp"
        ],
        "message": "[CVE-2017-0010] asm.js return object with no properties should not validate",
        "before_after_code_files": [
          "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp": [
          "File: lib/Runtime/Language/AsmJs.cpp -> lib/Runtime/Language/AsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "965:         }",
          "967:         ParseNode* objectElement = ParserWrapper::GetUnaryNode(objNode);",
          "968:         while( objectElement )",
          "969:         {",
          "970:             ParseNode* member = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:         if (!objectElement)",
          "969:         {",
          "970:             return m.Fail(node, _u(\"Return object must not be empty\"));",
          "971:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70e23dc5de959cc2f9aed25f17187714af853fde",
      "candidate_info": {
        "commit_hash": "70e23dc5de959cc2f9aed25f17187714af853fde",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/70e23dc5de959cc2f9aed25f17187714af853fde",
        "files": [
          "lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/i386/LowererMDArch.cpp"
        ],
        "message": "fix bug in lowering of simd.js bound checks",
        "before_after_code_files": [
          "lib/Backend/amd64/LowererMDArch.cpp||lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/i386/LowererMDArch.cpp||lib/Backend/i386/LowererMDArch.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/amd64/LowererMDArch.cpp||lib/Backend/amd64/LowererMDArch.cpp": [
          "File: lib/Backend/amd64/LowererMDArch.cpp -> lib/Backend/amd64/LowererMDArch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178:             Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1183:             lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1180:             Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1180:             Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1182:             Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1254:             Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1259:             lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1256:             Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1258:             Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1260:             Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------"
        ],
        "lib/Backend/i386/LowererMDArch.cpp||lib/Backend/i386/LowererMDArch.cpp": [
          "File: lib/Backend/i386/LowererMDArch.cpp -> lib/Backend/i386/LowererMDArch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:         Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1033:         lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1030:         Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1030:         Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1032:         Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1088:         Lowerer::InsertMove(tmp, cmpOpnd, helperLabel);",
          "1093:         lowererMD->m_lowerer->InsertCompareBranch(tmp, instr->UnlinkSrc2(), Js::OpCode::BrGt_A, true, helperLabel, helperLabel);",
          "",
          "[Removed Lines]",
          "1090:         Lowerer::InsertAdd(false, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "",
          "[Added Lines]",
          "1092:         Lowerer::InsertAdd(true, tmp, tmp, IR::IntConstOpnd::New((uint32)dataWidth, tmp->GetType(), m_func, true), helperLabel);",
          "1094:         Lowerer::InsertBranch(Js::OpCode::JB, helperLabel, helperLabel);",
          "",
          "---------------"
        ]
      }
    }
  ]
}