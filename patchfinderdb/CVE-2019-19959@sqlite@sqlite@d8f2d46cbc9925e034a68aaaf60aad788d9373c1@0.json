{
  "cve_id": "CVE-2019-19959",
  "cve_desc": "ext/misc/zipfile.c in SQLite 3.30.1 mishandles certain uses of INSERT INTO in situations involving embedded '\\0' characters in filenames, leading to a memory-management error that can be detected by (for example) valgrind.",
  "repo": "sqlite/sqlite",
  "patch_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
  "patch_info": {
    "commit_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Fix the zipfile() function in the zipfile extension so that it is able to deal with goofy filenames that contain embedded zeros.\n\nFossilOrigin-Name: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1632:         zFree = sqlite3_mprintf(\"%s/\", zPath);",
      "1633:         if( zFree==0 ){ rc = SQLITE_NOMEM; }",
      "1634:         zPath = (const char*)zFree;",
      "1636:       }",
      "1637:     }",
      "",
      "[Removed Lines]",
      "1635:         nPath++;",
      "",
      "[Added Lines]",
      "1635:         nPath = (int)strlen(zPath);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2033:   }else{",
      "2034:     if( zName[nName-1]!='/' ){",
      "2035:       zName = zFree = sqlite3_mprintf(\"%s/\", zName);",
      "2037:       if( zName==0 ){",
      "2038:         rc = SQLITE_NOMEM;",
      "2039:         goto zipfile_step_out;",
      "2040:       }",
      "2041:     }else{",
      "2042:       while( nName>1 && zName[nName-2]=='/' ) nName--;",
      "2043:     }",
      "",
      "[Removed Lines]",
      "2036:       nName++;",
      "",
      "[Added Lines]",
      "2040:       nName = (int)strlen(zName);",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d24a53125ab15f2d80ff4c64a2b65ed9d9ff44b",
      "candidate_info": {
        "commit_hash": "1d24a53125ab15f2d80ff4c64a2b65ed9d9ff44b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d24a53125ab15f2d80ff4c64a2b65ed9d9ff44b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join2.test",
          "test/window1.test"
        ],
        "message": "Fix a case in which SQLite could fail to identify \"x BETWEEN ? AND ?\" being true as implying that x is not null. Ticket [dfd66334].\n\nFossilOrigin-Name: 2f17974912ec5e99089dc0da803e7ff1bf033377a49762d2689a812c005f2641",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join2.test||test/join2.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b1dbd60f5db3abe2097dbc0b6de9671685ca5eaf7d3fc8e3f87ff5065a9d114",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5297:       return WRC_Prune;",
          "5299:     case TK_BETWEEN:",
          "5301:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "5300:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "",
          "[Added Lines]",
          "5300:       if( sqlite3WalkExpr(pWalker, pExpr->pLeft)==WRC_Abort ){",
          "5301:         assert( pWalker->eCode );",
          "5302:         return WRC_Abort;",
          "5303:       }",
          "",
          "---------------"
        ],
        "test/join2.test||test/join2.test": [
          "File: test/join2.test -> test/join2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:   SELECT * FROM test;",
          "280: } {3 4 {} {} {} x 5 6 {} {} {} x}",
          "283: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282: #-------------------------------------------------------------------------",
          "283: # Ticket [dfd66334].",
          "284: #",
          "285: reset_db",
          "286: do_execsql_test 8.0 {",
          "287:   CREATE TABLE t0(c0);",
          "288:   CREATE TABLE t1(c0);",
          "289: }",
          "291: do_execsql_test 8.1 {",
          "292:   SELECT * FROM t0 LEFT JOIN t1",
          "293:   WHERE (t1.c0 BETWEEN 0 AND 0) > ('' AND t0.c0);",
          "294: }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1357: do_execsql_test 39.3 {",
          "1358:   SELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0);",
          "1359: }",
          "1361: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1360: do_execsql_test 39.4 {",
          "1361:   SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0);",
          "1362: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2d50283dbb176c6fd5853a3d821f1ace2ef008b",
      "candidate_info": {
        "commit_hash": "a2d50283dbb176c6fd5853a3d821f1ace2ef008b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2d50283dbb176c6fd5853a3d821f1ace2ef008b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/sqliteInt.h"
        ],
        "message": "Early detection of database corruption in balance_deeper().\n\nFossilOrigin-Name: 61c2233654158e65a3d3baeea947903a919a569fcc4a5b342b2e9a68cec1b6f3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2f17974912ec5e99089dc0da803e7ff1bf033377a49762d2689a812c005f2641",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5724:   if( idx>=pPage->nCell ){",
          "5725:     if( !pPage->leaf ){",
          "",
          "[Removed Lines]",
          "5722:   testcase( idx>pPage->nCell );",
          "",
          "[Added Lines]",
          "5725:   harmless( idx>pPage->nCell );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8308:   return SQLITE_OK;",
          "8309: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8325: static int anotherValidCursor(BtCursor *pCur){",
          "8326:   BtCursor *pOther;",
          "8327:   for(pOther=pCur->pBt->pCursor; pOther; pOther=pOther->pNext){",
          "8328:     if( pOther!=pCur",
          "8329:      && pOther->eState==CURSOR_VALID",
          "8330:      && pOther->pPage==pCur->pPage",
          "8331:     ){",
          "8332:       return SQLITE_CORRUPT_BKPT;",
          "8333:     }",
          "8334:   }",
          "8335:   return SQLITE_OK;",
          "8336: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8335:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "8337:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "[Removed Lines]",
          "8338:       if( pPage->nOverflow ){",
          "",
          "[Added Lines]",
          "8365:       if( pPage->nOverflow && (rc = anotherValidCursor(pCur))==SQLITE_OK ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "446: # define NEVER(X)       (X)",
          "447: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: #ifdef SQLITE_DEBUG",
          "464: # define harmless(X)  assert(!(X));",
          "465: #else",
          "466: # define harmless(X)",
          "467: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c1c85ca483154aafa41883253a941f196fa6d03",
      "candidate_info": {
        "commit_hash": "6c1c85ca483154aafa41883253a941f196fa6d03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c1c85ca483154aafa41883253a941f196fa6d03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Fix to the optimization of check-in [a47efb7c8520a011] that reads the values of expressions used in an index-on-expression directly from the index rather than recomputing the value.  If the expression has a top-level COLLATE or unlikely() operator, be sure to clear the corresponding flags prior to converting it into a TK_COLUMN expression.  Failure to do this is most likely harmless in production, but might cause an assertion fault in debugging builds. Ticket [b0cb8aff561a6dcd].  Test cases in TH3.\n\nFossilOrigin-Name: 56539e1c132632c075efc217ad5951a35e4459605ac128914aec3a7be1e25718",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddb17d92df194337a103c561ef46ced00db5e67e4551e82de7cb5ad7f457dd5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1145:     pExpr->iTable = pX->iIdxCur;",
          "1146:     pExpr->iColumn = pX->iIdxCol;",
          "1147:     pExpr->y.pTab = 0;",
          "1148:     return WRC_Prune;",
          "1149:   }else{",
          "1150:     return WRC_Continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:     testcase( ExprHasProperty(pExpr, EP_Skip) );",
          "1149:     testcase( ExprHasProperty(pExpr, EP_Unlikely) );",
          "1150:     ExprClearProperty(pExpr, EP_Skip|EP_Unlikely);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db1954be0a639168403ec69639b19e955fc2204d",
      "candidate_info": {
        "commit_hash": "db1954be0a639168403ec69639b19e955fc2204d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db1954be0a639168403ec69639b19e955fc2204d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Back out the asserts of check-ins [a500893b6f64aced] and [d9c9fe9f5ad3fc91] as ticket [1b06916e01c82b66] demonstrates a case that refutes them.\n\nFossilOrigin-Name: ddb17d92df194337a103c561ef46ced00db5e67e4551e82de7cb5ad7f457dd5f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a982e6434cd66bfbe94d455f538bcbc4360b91572062d92acae6b77e9560e65d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2037:           flags3 = pIn3->flags;",
          "2038:         }",
          "2039:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7edce5ecc0aa8dc146ffe07fb2bdbe814f125790",
      "candidate_info": {
        "commit_hash": "7edce5ecc0aa8dc146ffe07fb2bdbe814f125790",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7edce5ecc0aa8dc146ffe07fb2bdbe814f125790",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a shift-overflow problem in yesterday's check-in [36fdeb4f0a66970a] that OSSFuzz helpfully discovered overnight.  Thanks Google.\n\nFossilOrigin-Name: bff38e2b5318ed032aaf1d350903c3494b4531f2dc59a6997144ec8e23defef4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f347744e0d576f0250c29259cca755e57afded8956224114c01603c1bca5b3a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7734:   pMem = &aMem[pOp->p1];",
          "7735:   constMask = pOp->p3;",
          "7736:   for(i=0; i<pOp->p2; i++, pMem++){",
          "7738:       pMem->pScopyFrom = 0;",
          "7740:     }",
          "",
          "[Removed Lines]",
          "7737:     if( (constMask & MASKBIT32(i))==0 ){",
          "",
          "[Added Lines]",
          "7737:     if( i>=32 || (constMask & MASKBIT32(i))==0 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}