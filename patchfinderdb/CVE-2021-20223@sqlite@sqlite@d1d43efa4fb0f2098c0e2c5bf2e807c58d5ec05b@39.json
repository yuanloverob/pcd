{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff1032e5c24c56a108715033dcca5e1efd507bd9",
      "candidate_info": {
        "commit_hash": "ff1032e5c24c56a108715033dcca5e1efd507bd9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff1032e5c24c56a108715033dcca5e1efd507bd9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "When a virtual table reports orderByConsumed, that tells us nothing about whether or not the SQLITE_DISTINCTBY constraint is met. Fix for ticket [7e59041f9c4e5102]. Test cases in TH3.\n\nFossilOrigin-Name: b59f94e4da9b1653f2004b214407a50340dd476b27e6ec7e29e501a95db9c963",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34f64f11ca481996b1ff1686bdc5e278946635b6856cd1fe2355fce8e298e0f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3696:       pLoop = pLast;",
          "3697:     }",
          "3698:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3700:       break;",
          "3701:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3702:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "[Removed Lines]",
          "3699:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "",
          "[Added Lines]",
          "3699:       if( pLoop->u.vtab.isOrdered && (wctrlFlags & WHERE_DISTINCTBY)==0 ){",
          "3700:         obSat = obDone;",
          "3701:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb39ac7773ccc238b7de0094b9c9dab7d9fba40f",
      "candidate_info": {
        "commit_hash": "bb39ac7773ccc238b7de0094b9c9dab7d9fba40f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bb39ac7773ccc238b7de0094b9c9dab7d9fba40f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Most test cases now passing.\n\nFossilOrigin-Name: 92e2ab38930c76811dbf5abfe6b9ea9e12562a4bb4bb06cdb0cf49ac30da0bc3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ce1710aad43cebe5ad50859c7685fb83e40cdd4a60913bd2b7e659bc59942fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     assert( db->init.busy );",
          "117:     db->init.iDb = iDb;",
          "119:     db->init.orphanTrigger = 0;",
          "120:     db->init.azInit = argv;",
          "121:     pStmt = 0;",
          "",
          "[Removed Lines]",
          "118:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "",
          "[Added Lines]",
          "118:     sqlite3GetUInt32(argv[3], &db->init.newTnum);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f3e6faddebff51ecdde1212e03f9485532fc671",
      "candidate_info": {
        "commit_hash": "9f3e6faddebff51ecdde1212e03f9485532fc671",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f3e6faddebff51ecdde1212e03f9485532fc671",
        "files": [
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/cast.test"
        ],
        "message": "Handle blobs that are the return values of functions being cast to text in utf16 databases in the same way as blobs read directly from the database. Fix for [771fe617].\n\nFossilOrigin-Name: e782096aa06fcf410c3a0a6ee26a9e4f44333da39b28b2efe675814a8652911a",
        "before_after_code_files": [
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:   INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2);",
          "256: }",
          "258: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #-------------------------------------------------------------------------",
          "259: # Ticket [771fe617]",
          "260: #",
          "261: reset_db",
          "262: do_execsql_test 9.0 {",
          "263:   PRAGMA encoding = 'UTF16';",
          "264:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "265: }",
          "267: #explain_i { SELECT quote(SUBSTR(x'37', 0)); }",
          "268: #execsql { PRAGMA vdbe_trace = 1 }",
          "269: do_execsql_test 9.1.1 {",
          "270:   SELECT quote(SUBSTR(x'37', 0));",
          "271: } {X'37'}",
          "272: do_execsql_test 9.1.2 {",
          "273:   SELECT quote(x'37');",
          "274: } {X'37'}",
          "276: breakpoint",
          "277: do_execsql_test 9.2 {",
          "278:   INSERT INTO vt0 VALUES (SUBSTR(x'37', 0));",
          "279: --  INSERT INTO vt0 VALUES (x'37');",
          "280: }",
          "281: do_execsql_test 9.3 {",
          "282:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "283: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5377add4b8af8c52d0a32f5273835ac6bdc42cfb2a95ffcb335b987437a91aa6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:   pMem->n = nByte;",
          "1131:   pMem->flags = flags;",
          "1134: #ifndef SQLITE_OMIT_UTF16",
          "1136:     return SQLITE_NOMEM_BKPT;",
          "1137:   }",
          "1138: #endif",
          "",
          "[Removed Lines]",
          "1132:   pMem->enc = (enc==0 ? SQLITE_UTF8 : enc);",
          "1135:   if( pMem->enc!=SQLITE_UTF8 && sqlite3VdbeMemHandleBom(pMem) ){",
          "",
          "[Added Lines]",
          "1132:   if( enc ){",
          "1133:     pMem->enc = enc;",
          "1134:   }else if( pMem->db ){",
          "1135:     pMem->enc = ENC(pMem->db);",
          "1136:   }else{",
          "1137:     pMem->enc = SQLITE_UTF8;",
          "1138:   }",
          "1142:   if( enc>SQLITE_UTF8 && sqlite3VdbeMemHandleBom(pMem) ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:   SELECT CAST('-1.0' AS numeric);",
          "462: } -1",
          "466: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464: ifcapable utf16 {",
          "465:   reset_db",
          "466:   execsql { PRAGMA encoding='utf16' }",
          "468:   do_execsql_test cast-8.1 {",
          "469:     SELECT quote(X'310032003300')==quote(substr(X'310032003300', 1))",
          "470:   } 1",
          "471:   do_execsql_test cast-8.2 {",
          "472:     SELECT CAST(X'310032003300' AS TEXT)",
          "473:          ==CAST(substr(X'310032003300', 1) AS TEXT)",
          "474:   } 1",
          "475: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db9cb17dc7db1b51b4f1c80b25bcd1083a5caf08",
      "candidate_info": {
        "commit_hash": "db9cb17dc7db1b51b4f1c80b25bcd1083a5caf08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db9cb17dc7db1b51b4f1c80b25bcd1083a5caf08",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid a redundant NULL check\n\nFossilOrigin-Name: 25dc53f6608dd9b8b4e8d8ee22e194a6d41d15811781752797cb42fc22ee1317",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 895bd20b29e223496e1585483c6ce3335ae9050f2e5de4d6b69d0e40df396862",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "612: static int btreeGetHasContent(BtShared *pBt, Pgno pgno){",
          "613:   Bitvec *p = pBt->pHasContent;",
          "615: }",
          "",
          "[Removed Lines]",
          "614:   return (p && (pgno>sqlite3BitvecSize(p) || sqlite3BitvecTest(p, pgno)));",
          "",
          "[Added Lines]",
          "614:   return p && (pgno>sqlite3BitvecSize(p) || sqlite3BitvecTestNotNull(p, pgno));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b76c45a7fdfe80a13f8fec1d05afb008d79fc26",
      "candidate_info": {
        "commit_hash": "3b76c45a7fdfe80a13f8fec1d05afb008d79fc26",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b76c45a7fdfe80a13f8fec1d05afb008d79fc26",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Add NEVER macros to error-detection branches that were made unreachable (as far as I can tell) by check-in [ceacc28b03580334].\n\nFossilOrigin-Name: 7b62555e285f32d354df7746ef8dce16856c6d9d53a02d895b74ba02362d2968",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 523e09bd228750fb7be1d4e68d18f6c1bf9db19293d66fbf30b86409321e9814",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1449:         int sz2 = 0;",
          "1450:         int sz = get2byte(&data[iFree+2]);",
          "1451:         int top = get2byte(&data[hdr+5]);",
          "1453:           return SQLITE_CORRUPT_PAGE(pPage);",
          "1454:         }",
          "1455:         if( iFree2 ){",
          "",
          "[Removed Lines]",
          "1452:         if( top>=iFree ){",
          "",
          "[Added Lines]",
          "1452:         if( NEVER(top>=iFree) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1458:           if( iFree2+sz2 > usableSize ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1459:           memmove(&data[iFree+sz+sz2], &data[iFree+sz], iFree2-(iFree+sz));",
          "1460:           sz += sz2;",
          "1462:           return SQLITE_CORRUPT_PAGE(pPage);",
          "1463:         }",
          "",
          "[Removed Lines]",
          "1461:         }else if( iFree+sz>usableSize ){",
          "",
          "[Added Lines]",
          "1461:         }else if( NEVER(iFree+sz>usableSize) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1650:   if( (data[hdr+2] || data[hdr+1]) && gap+2<=top ){",
          "1651:     u8 *pSpace = pageFindSlot(pPage, nByte, &rc);",
          "1652:     if( pSpace ){",
          "1653:       assert( pSpace+nByte<=data+pPage->pBt->usableSize );",
          "1655:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1656:       }else{",
          "1657:         return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1654:       if( (*pIdx = (int)(pSpace-data))<=gap ){",
          "",
          "[Added Lines]",
          "1653:       int g2;",
          "1656:       if( NEVER(g2<=gap) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1729:   }else{",
          "1730:     while( (iFreeBlk = get2byte(&data[iPtr]))<iStart ){",
          "1731:       if( iFreeBlk<iPtr+4 ){",
          "1733:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1734:       }",
          "1735:       iPtr = iFreeBlk;",
          "1736:     }",
          "1738:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1739:     }",
          "1740:     assert( iFreeBlk>iPtr || iFreeBlk==0 );",
          "",
          "[Removed Lines]",
          "1732:         if( iFreeBlk==0 ) break;",
          "1737:     if( iFreeBlk>pPage->pBt->usableSize-4 ){",
          "",
          "[Added Lines]",
          "1734:         if( ALWAYS(iFreeBlk==0) ) break;",
          "1739:     if( NEVER(iFreeBlk>pPage->pBt->usableSize-4) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1749:       nFrag = iFreeBlk - iEnd;",
          "1750:       if( iEnd>iFreeBlk ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1751:       iEnd = iFreeBlk + get2byte(&data[iFreeBlk+2]);",
          "1753:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1754:       }",
          "1755:       iSize = iEnd - iStart;",
          "",
          "[Removed Lines]",
          "1752:       if( iEnd > pPage->pBt->usableSize ){",
          "",
          "[Added Lines]",
          "1754:       if( NEVER(iEnd > pPage->pBt->usableSize) ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1781:     put2byte(&data[hdr+1], iFreeBlk);",
          "1782:     put2byte(&data[hdr+5], iEnd);",
          "1783:   }else{",
          "",
          "[Removed Lines]",
          "1780:     if( iStart<x || iPtr!=hdr+1 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Added Lines]",
          "1782:     if( iStart<x ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1783:     if( NEVER(iPtr!=hdr+1) ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6937:   assert( i<iEnd );",
          "6938:   j = get2byte(&aData[hdr+5]);",
          "6940:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6942:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6939:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "[Added Lines]",
          "6942:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6948:     u16 sz = pCArray->szCell[i];",
          "6949:     assert( sz>0 );",
          "6950:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6952:       pCell = &pTmp[pCell - aData];",
          "6953:     }else if( (uptr)(pCell+sz)>(uptr)pSrcEnd",
          "6954:            && (uptr)(pCell)<(uptr)pSrcEnd",
          "",
          "[Removed Lines]",
          "6951:       if( ((uptr)(pCell+sz))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "6954:       if( NEVER(((uptr)(pCell+sz))>(uptr)pEnd) ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6959:     pData -= sz;",
          "6960:     put2byte(pCellptr, (pData - aData));",
          "6961:     pCellptr += 2;",
          "6963:     memcpy(pData, pCell, sz);",
          "6966:     i++;",
          "6967:     if( i>=iEnd ) break;",
          "6968:     if( pCArray->ixNx[k]<=i ){",
          "",
          "[Removed Lines]",
          "6962:     if( pData < pCellptr ) return SQLITE_CORRUPT_BKPT;",
          "6964:     assert( sz==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6965:     testcase( sz!=pPg->xCellSize(pPg,pCell) );",
          "",
          "[Added Lines]",
          "6965:     if( NEVER(pData < pCellptr) ) return SQLITE_CORRUPT_BKPT;",
          "6967:     assert( sz==pPg->xCellSize(pPg, pCell) );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7101:         }",
          "7102:         pFree = pCell;",
          "7103:         szFree = sz;",
          "7105:       }else{",
          "7106:         pFree = pCell;",
          "7107:         szFree += sz;",
          "",
          "[Removed Lines]",
          "7104:         if( pFree+sz>pEnd ) return 0;",
          "",
          "[Added Lines]",
          "7106:         if( NEVER(pFree+sz>pEnd) ) return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}