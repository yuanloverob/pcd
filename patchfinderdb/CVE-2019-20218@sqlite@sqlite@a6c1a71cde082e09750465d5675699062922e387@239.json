{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
      "candidate_info": {
        "commit_hash": "6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c"
        ],
        "message": "This is part of the previous check-in that didn't get committed for some reason - probably because I failed to press the \"Save\" button on the text editor.\n\nFossilOrigin-Name: 51d32173ff1f610b5d75a50f20fa1e0e4e22046299869e3b82e0bb446dba890c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30392985612c51d4583a905f8fe766f08cd31b86d0e30a977adc6a6705649e00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:           zNew[iTo++] = zNew[iFrom];",
          "263:         }",
          "264:         zNew[iTo] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:         assert( iTo>0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "[Added Lines]",
          "282:          || zNew[iTo-1]=='0'-1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c1c85ca483154aafa41883253a941f196fa6d03",
      "candidate_info": {
        "commit_hash": "6c1c85ca483154aafa41883253a941f196fa6d03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c1c85ca483154aafa41883253a941f196fa6d03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Fix to the optimization of check-in [a47efb7c8520a011] that reads the values of expressions used in an index-on-expression directly from the index rather than recomputing the value.  If the expression has a top-level COLLATE or unlikely() operator, be sure to clear the corresponding flags prior to converting it into a TK_COLUMN expression.  Failure to do this is most likely harmless in production, but might cause an assertion fault in debugging builds. Ticket [b0cb8aff561a6dcd].  Test cases in TH3.\n\nFossilOrigin-Name: 56539e1c132632c075efc217ad5951a35e4459605ac128914aec3a7be1e25718",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddb17d92df194337a103c561ef46ced00db5e67e4551e82de7cb5ad7f457dd5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1145:     pExpr->iTable = pX->iIdxCur;",
          "1146:     pExpr->iColumn = pX->iIdxCol;",
          "1147:     pExpr->y.pTab = 0;",
          "1148:     return WRC_Prune;",
          "1149:   }else{",
          "1150:     return WRC_Continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:     testcase( ExprHasProperty(pExpr, EP_Skip) );",
          "1149:     testcase( ExprHasProperty(pExpr, EP_Unlikely) );",
          "1150:     ExprClearProperty(pExpr, EP_Skip|EP_Unlikely);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b12613a006a69d05f4db3efd5c4190ef6a7bee9",
      "candidate_info": {
        "commit_hash": "0b12613a006a69d05f4db3efd5c4190ef6a7bee9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b12613a006a69d05f4db3efd5c4190ef6a7bee9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an FTS3 test case that depends on the ICU extension so that it only runs if SQLite is compiled with ICU.\n\nFossilOrigin-Name: 19c6240bdbb022b2af463e59d873280d0f2385bf30e22b9aad5fc9677a99f251",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a17b29f08c888301911c35096899f10d24192c8ecec467cddde5401b6bd1903f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5770: #-------------------------------------------------------------------------",
          "5771: #",
          "5782: #-------------------------------------------------------------------------",
          "5783: #",
          "",
          "[Removed Lines]",
          "5772: reset_db",
          "5773: do_catchsql_test 33.0 {",
          "5774:   CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5775:   CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5776:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5777:   INSERT INTO f VALUES (1, '1234');",
          "5778:   INSERT INTO f_stat VALUES (1,x'0000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003bc502fffffffffb8b2afbfb6565f0740100650000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003b8b00c5c5c5c5c5bfc5');",
          "5779:   INSERT INTO f(f) VALUES ('merge=198,49');",
          "5780: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5772: ifcapable icu {",
          "5773:   reset_db",
          "5774:   do_catchsql_test 33.0 {",
          "5775:     CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5776:     CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5777:     CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5778:     INSERT INTO f VALUES (1, '1234');",
          "5779:     INSERT INTO f_stat VALUES (1,x'0000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003bc502fffffffffb8b2afbfb6565f0740100650000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003b8b00c5c5c5c5c5bfc5');",
          "5780:     INSERT INTO f(f) VALUES ('merge=198,49');",
          "5781:   } {1 {database disk image is malformed}}",
          "5782: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2478dfa439d1dee0be7d26ebaf546313c4a2786",
      "candidate_info": {
        "commit_hash": "e2478dfa439d1dee0be7d26ebaf546313c4a2786",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2478dfa439d1dee0be7d26ebaf546313c4a2786",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Do an early close of virtual table cursors to avoid unnecessary cursor contention in UPDATE for some virtual table implementations. Ticket [56a74875be799b85]\n\nFossilOrigin-Name: eb95dac7f6482c36853a23234c5ce7af37c7beed8e3675d6a49c4d3a8307e076",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61c2233654158e65a3d3baeea947903a919a569fcc4a5b342b2e9a68cec1b6f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5340:       continue;",
          "5341:     }",
          "5343: #ifdef SQLITE_ENABLE_EARLY_CURSOR_CLOSE",
          "5350:      && pTab->pSelect==0",
          "5351:      && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0",
          "5352:     ){",
          "",
          "[Removed Lines]",
          "5349:     if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "[Added Lines]",
          "5343:     if( IsVirtual(pTab) ){",
          "5344:       sqlite3VdbeAddOp1(v, OP_Close, pTabItem->iCursor);",
          "5345:     }",
          "5352:     else if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
      "candidate_info": {
        "commit_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c904885b1ab038346a6a47752c3b88deefba2b4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "In the SQLITE_OPEN_NOFOLLOW processing, distinguish between an I/O error on the xAccess() call and an actual symlink encounter.\n\nFossilOrigin-Name: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4790:     const char *z;",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4798:     }",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "",
          "[Removed Lines]",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "",
          "[Added Lines]",
          "4793:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4794:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4795:       if( rc ) return rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}