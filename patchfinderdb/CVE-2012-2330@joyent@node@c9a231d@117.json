{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72bc4dcda4cfa99ed064419e40d104bd1b2e0e25",
      "candidate_info": {
        "commit_hash": "72bc4dcda4cfa99ed064419e40d104bd1b2e0e25",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/72bc4dcda4cfa99ed064419e40d104bd1b2e0e25",
        "files": [
          "lib/assert.js",
          "test/simple/test-assert.js"
        ],
        "message": "assert: fix throws() throws an error without message property\n\nFixes #2893.",
        "before_after_code_files": [
          "lib/assert.js||liassert.js",
          "test/simple/test-assert.js||test/simple/test-assert.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/assert.js||liassert.js": [
          "File: lib/assert.js -> liassert.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:             (message ? ' ' + message : '.');",
          "308:   if (shouldThrow && !actual) {",
          "310:   }",
          "312:   if (!shouldThrow && expectedException(actual, expected)) {",
          "314:   }",
          "316:   if ((shouldThrow && actual && expected &&",
          "",
          "[Removed Lines]",
          "309:     fail('Missing expected exception' + message);",
          "313:     fail('Got unwanted exception' + message);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-assert.js||test/simple/test-assert.js": [
          "File: test/simple/test-assert.js -> test/simple/test-assert.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "283: testAssertionMessage({a: NaN, b: Infinity, c: -Infinity},",
          "284:     '{\"a\":\"NaN\",\"b\":\"Infinity\",\"c\":\"-Infinity\"}');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: try {",
          "288:   assert.throws(function () {",
          "289:     assert.ifError(null);",
          "290:   });",
          "291: } catch (e) {",
          "292:   threw = true;",
          "293:   assert.equal(e.message, 'Missing expected exception..');",
          "294: }",
          "295: assert.ok(threw);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "884f689efecee487788d0b2d1289018735f2841c",
      "candidate_info": {
        "commit_hash": "884f689efecee487788d0b2d1289018735f2841c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/884f689efecee487788d0b2d1289018735f2841c",
        "files": [
          "test/simple/test-fs-watch.js"
        ],
        "message": "test: add #2293 regression test\n\nCreating a file event watcher with fs.watch({persistent:false}) should not block\nthe event loop.",
        "before_after_code_files": [
          "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js": [
          "File: test/simple/test-fs-watch.js -> test/simple/test-fs-watch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   var fd = fs.openSync(filepathThree, 'w');",
          "142:   fs.closeSync(fd);",
          "143: }, 1000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: fs.watch(__filename, {persistent: false}, function() {",
          "148:   assert(0);",
          "149: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c2982b94f46765d85b71a0efe3b832d3caff35f",
      "candidate_info": {
        "commit_hash": "1c2982b94f46765d85b71a0efe3b832d3caff35f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1c2982b94f46765d85b71a0efe3b832d3caff35f",
        "files": [
          "doc/api/process.markdown",
          "test/simple/test-fs-watch.js"
        ],
        "message": "Update doc and test for sunos/solaris switch",
        "before_after_code_files": [
          "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-fs-watch.js||test/simple/test-fs-watch.js": [
          "File: test/simple/test-fs-watch.js -> test/simple/test-fs-watch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: assert.doesNotThrow(",
          "109:     function() {",
          "110:       var watcher = fs.watch(testsubdir, function(event, filename) {",
          "112:         assert.equal(renameEv, event);",
          "113:         if (expectFilePath) {",
          "114:           assert.equal('newfile.txt', filename);",
          "",
          "[Removed Lines]",
          "111:         var renameEv = process.platform === 'solaris' ? 'change' : 'rename';",
          "",
          "[Added Lines]",
          "111:         var renameEv = process.platform === 'sunos' ? 'change' : 'rename';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "928ea564d16da47e615ddac627e0b4d4a40d8196",
      "candidate_info": {
        "commit_hash": "928ea564d16da47e615ddac627e0b4d4a40d8196",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/928ea564d16da47e615ddac627e0b4d4a40d8196",
        "files": [
          "lib/events.js",
          "test/simple/test-event-emitter-remove-listeners.js"
        ],
        "message": "events: don't delete the listeners array in removeListener()",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-remove-listeners.js||test/simple/test-event-emitter-remove-listeners.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:     if (position < 0) return this;",
          "188:     list.splice(position, 1);",
          "191:   } else if (list === listener ||",
          "192:              (list.listener && list.listener === listener))",
          "193:   {",
          "",
          "[Removed Lines]",
          "189:     if (list.length == 0)",
          "190:       delete this._events[type];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-remove-listeners.js||test/simple/test-event-emitter-remove-listeners.js": [
          "File: test/simple/test-event-emitter-remove-listeners.js -> test/simple/test-event-emitter-remove-listeners.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: }",
          "44: var e1 = new events.EventEmitter();",
          "45: e1.on('hello', listener1);",
          "46: e1.removeListener('hello', listener1);",
          "47: assert.deepEqual([], e1.listeners('hello'));",
          "49: var e2 = new events.EventEmitter();",
          "50: e2.on('hello', listener1);",
          "51: e2.removeListener('hello', listener2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: var e1listeners = e1.listeners('hello');",
          "47: assert.equal(e1listeners.length, 1);",
          "52: assert.equal(e1listeners, e1.listeners('hello'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: var e3 = new events.EventEmitter();",
          "55: e3.on('hello', listener1);",
          "56: e3.on('hello', listener2);",
          "57: e3.removeListener('hello', listener1);",
          "58: assert.deepEqual([listener2], e3.listeners('hello'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: var e3listeners = e3.listeners('hello');",
          "63: assert.equal(e3listeners.length, 2)",
          "65: assert.equal(e3listeners.length, 1)",
          "68: assert.equal(e3listeners, e3.listeners('hello'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1a63a9e905f90684c3c22eae59cbe12fced661c",
      "candidate_info": {
        "commit_hash": "c1a63a9e905f90684c3c22eae59cbe12fced661c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c1a63a9e905f90684c3c22eae59cbe12fced661c",
        "files": [
          "doc/api/tls.markdown",
          "lib/tls.js",
          "test/simple/test-tls-connect-given-socket.js"
        ],
        "message": "tls: Allow establishing secure connection on the existing socket\n\nThis is necessary to use SSL over HTTP tunnels.\n\nRefs #2259, #2474.\nFixes #2489.",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "test/simple/test-tls-connect-given-socket.js||test/simple/test-tls-connect-given-socket.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:     cb = arguments[arguments.length - 1];",
          "1039:   }",
          "1043:   var sslcontext = crypto.createCredentials(options);",
          "",
          "[Removed Lines]",
          "1041:   var socket = new net.Stream();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:     cleartext.on('secureConnect', cb);",
          "1060:   }",
          "1064:   pair.on('secure', function() {",
          "1065:     var verifyError = pair.ssl.verifyError();",
          "",
          "[Removed Lines]",
          "1062:   socket.connect(options.port, options.host);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-connect-given-socket.js||test/simple/test-tls-connect-given-socket.js": [
          "File: test/simple/test-tls-connect-given-socket.js -> test/simple/test-tls-connect-given-socket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var tls = require('tls');",
          "25: var net = require('net');",
          "26: var fs = require('fs');",
          "27: var path = require('path');",
          "29: var serverConnected = false;",
          "30: var clientConnected = false;",
          "32: var options = {",
          "33:   key: fs.readFileSync(path.join(common.fixturesDir, 'test_key.pem')),",
          "34:   cert: fs.readFileSync(path.join(common.fixturesDir, 'test_cert.pem'))",
          "35: };",
          "37: var server = tls.createServer(options, function(socket) {",
          "38:   serverConnected = true;",
          "39:   socket.end('Hello');",
          "40: }).listen(common.PORT, function() {",
          "41:   var socket = net.connect(common.PORT, function() {",
          "42:     var client = tls.connect({socket: socket}, function() {",
          "43:       clientConnected = true;",
          "44:       var data = '';",
          "45:       client.on('data', function(chunk) {",
          "46:         data += chunk.toString();",
          "47:       });",
          "48:       client.on('end', function() {",
          "49:         assert.equal(data, 'Hello');",
          "50:         server.close();",
          "51:       });",
          "52:     });",
          "53:   });",
          "54: });",
          "56: process.on('exit', function() {",
          "57:   assert(serverConnected);",
          "58:   assert(clientConnected);",
          "59: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}