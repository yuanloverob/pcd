{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
      "candidate_info": {
        "commit_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the new \"bind_fallback\" method to the \"sqlite3\" object in the TCL interface.\n\nFossilOrigin-Name: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:   if( pDb->zProfile ){",
          "550:     Tcl_Free(pDb->zProfile);",
          "551:   }",
          "552:   if( pDb->zAuth ){",
          "553:     Tcl_Free(pDb->zAuth);",
          "554:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   if( pDb->zBindFallback ){",
          "554:     Tcl_Free(pDb->zBindFallback);",
          "555:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1388:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "1389:     if( zVar!=0 && (zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ){",
          "1390:       Tcl_Obj *pVar = Tcl_GetVar2Ex(interp, &zVar[1], 0, 0);",
          "1391:       if( pVar ){",
          "1392:         int n;",
          "1393:         u8 *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1397:       if( pVar==0 && pDb->zBindFallback!=0 ){",
          "1398:         Tcl_Obj *pCmd;",
          "1399:         int rx;",
          "1400:         pCmd = Tcl_NewStringObj(pDb->zBindFallback, -1);",
          "1401:         Tcl_IncrRefCount(pCmd);",
          "1402:         Tcl_ListObjAppendElement(interp, pCmd, Tcl_NewStringObj(zVar,-1));",
          "1403:         if( needResultReset ) Tcl_ResetResult(interp);",
          "1404:         needResultReset = 1;",
          "1405:         rx = Tcl_EvalObjEx(interp, pCmd, TCL_EVAL_DIRECT);",
          "1406:         Tcl_DecrRefCount(pCmd);",
          "1407:         if( rx==TCL_OK ){",
          "1408:           pVar = Tcl_GetObjResult(interp);",
          "1409:         }else if( rx==TCL_ERROR ){",
          "1410:           rc = TCL_ERROR;",
          "1411:           break;",
          "1412:         }else{",
          "1413:           pVar = 0;",
          "1414:         }",
          "1415:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1423:       }else{",
          "1424:         sqlite3_bind_null(pStmt, i);",
          "1425:       }",
          "1426:     }",
          "1427:   }",
          "1428:   pPreStmt->nParm = iParm;",
          "1432: }",
          "",
          "[Removed Lines]",
          "1431:   return TCL_OK;",
          "",
          "[Added Lines]",
          "1451:       if( needResultReset ) Tcl_ResetResult(pDb->interp);",
          "1456:   if( needResultReset && rc==TCL_OK ) Tcl_ResetResult(pDb->interp);",
          "1458:   return rc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1887:   int choice;",
          "1888:   int rc = TCL_OK;",
          "1889:   static const char *DB_strs[] = {",
          "1904:   };",
          "1905:   enum DB_enum {",
          "1919:   };",
          "",
          "[Removed Lines]",
          "1890:     \"authorizer\",             \"backup\",                \"busy\",",
          "1891:     \"cache\",                  \"changes\",               \"close\",",
          "1892:     \"collate\",                \"collation_needed\",      \"commit_hook\",",
          "1893:     \"complete\",               \"copy\",                  \"deserialize\",",
          "1894:     \"enable_load_extension\",  \"errorcode\",             \"eval\",",
          "1895:     \"exists\",                 \"function\",              \"incrblob\",",
          "1896:     \"interrupt\",              \"last_insert_rowid\",     \"nullvalue\",",
          "1897:     \"onecolumn\",              \"preupdate\",             \"profile\",",
          "1898:     \"progress\",               \"rekey\",                 \"restore\",",
          "1899:     \"rollback_hook\",          \"serialize\",             \"status\",",
          "1900:     \"timeout\",                \"total_changes\",         \"trace\",",
          "1901:     \"trace_v2\",               \"transaction\",           \"unlock_notify\",",
          "1902:     \"update_hook\",            \"version\",               \"wal_hook\",",
          "1903:     0",
          "1906:     DB_AUTHORIZER,            DB_BACKUP,               DB_BUSY,",
          "1907:     DB_CACHE,                 DB_CHANGES,              DB_CLOSE,",
          "1908:     DB_COLLATE,               DB_COLLATION_NEEDED,     DB_COMMIT_HOOK,",
          "1909:     DB_COMPLETE,              DB_COPY,                 DB_DESERIALIZE,",
          "1910:     DB_ENABLE_LOAD_EXTENSION, DB_ERRORCODE,            DB_EVAL,",
          "1911:     DB_EXISTS,                DB_FUNCTION,             DB_INCRBLOB,",
          "1912:     DB_INTERRUPT,             DB_LAST_INSERT_ROWID,    DB_NULLVALUE,",
          "1913:     DB_ONECOLUMN,             DB_PREUPDATE,            DB_PROFILE,",
          "1914:     DB_PROGRESS,              DB_REKEY,                DB_RESTORE,",
          "1915:     DB_ROLLBACK_HOOK,         DB_SERIALIZE,            DB_STATUS,",
          "1916:     DB_TIMEOUT,               DB_TOTAL_CHANGES,        DB_TRACE,",
          "1917:     DB_TRACE_V2,              DB_TRANSACTION,          DB_UNLOCK_NOTIFY,",
          "1918:     DB_UPDATE_HOOK,           DB_VERSION,              DB_WAL_HOOK",
          "",
          "[Added Lines]",
          "1917:     \"authorizer\",             \"backup\",                \"bind_fallback\",",
          "1918:     \"busy\",                   \"cache\",                 \"changes\",",
          "1919:     \"close\",                  \"collate\",               \"collation_needed\",",
          "1920:     \"commit_hook\",            \"complete\",              \"copy\",",
          "1921:     \"deserialize\",            \"enable_load_extension\", \"errorcode\",",
          "1922:     \"eval\",                   \"exists\",                \"function\",",
          "1923:     \"incrblob\",               \"interrupt\",             \"last_insert_rowid\",",
          "1924:     \"nullvalue\",              \"onecolumn\",             \"preupdate\",",
          "1925:     \"profile\",                \"progress\",              \"rekey\",",
          "1926:     \"restore\",                \"rollback_hook\",         \"serialize\",",
          "1927:     \"status\",                 \"timeout\",               \"total_changes\",",
          "1928:     \"trace\",                  \"trace_v2\",              \"transaction\",",
          "1929:     \"unlock_notify\",          \"update_hook\",           \"version\",",
          "1930:     \"wal_hook\",               0",
          "1933:     DB_AUTHORIZER,            DB_BACKUP,               DB_BIND_FALLBACK,",
          "1934:     DB_BUSY,                  DB_CACHE,                DB_CHANGES,",
          "1935:     DB_CLOSE,                 DB_COLLATE,              DB_COLLATION_NEEDED,",
          "1936:     DB_COMMIT_HOOK,           DB_COMPLETE,             DB_COPY,",
          "1937:     DB_DESERIALIZE,           DB_ENABLE_LOAD_EXTENSION,DB_ERRORCODE,",
          "1938:     DB_EVAL,                  DB_EXISTS,               DB_FUNCTION,",
          "1939:     DB_INCRBLOB,              DB_INTERRUPT,            DB_LAST_INSERT_ROWID,",
          "1940:     DB_NULLVALUE,             DB_ONECOLUMN,            DB_PREUPDATE,",
          "1941:     DB_PROFILE,               DB_PROGRESS,             DB_REKEY,",
          "1942:     DB_RESTORE,               DB_ROLLBACK_HOOK,        DB_SERIALIZE,",
          "1943:     DB_STATUS,                DB_TIMEOUT,              DB_TOTAL_CHANGES,",
          "1944:     DB_TRACE,                 DB_TRACE_V2,             DB_TRANSACTION,",
          "1945:     DB_UNLOCK_NOTIFY,         DB_UPDATE_HOOK,          DB_VERSION,",
          "1946:     DB_WAL_HOOK",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2037:     break;",
          "2038:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2086:   case DB_BIND_FALLBACK: {",
          "2087:     if( objc>3 ){",
          "2088:       Tcl_WrongNumArgs(interp, 2, objv, \"?CALLBACK?\");",
          "2089:       return TCL_ERROR;",
          "2090:     }else if( objc==2 ){",
          "2091:       if( pDb->zBindFallback ){",
          "2092:         Tcl_AppendResult(interp, pDb->zBindFallback, (char*)0);",
          "2093:       }",
          "2094:     }else{",
          "2095:       char *zCallback;",
          "2096:       int len;",
          "2097:       if( pDb->zBindFallback ){",
          "2098:         Tcl_Free(pDb->zBindFallback);",
          "2099:       }",
          "2100:       zCallback = Tcl_GetStringFromObj(objv[2], &len);",
          "2101:       if( zCallback && len>0 ){",
          "2102:         pDb->zBindFallback = Tcl_Alloc( len + 1 );",
          "2103:         memcpy(pDb->zBindFallback, zCallback, len+1);",
          "2104:       }else{",
          "2105:         pDb->zBindFallback = 0;",
          "2106:       }",
          "2107:     }",
          "2108:     break;",
          "2109:   }",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: do_test tcl-1.2 {",
          "43:   set v [catch {db bogus} msg]",
          "44:   lappend v $msg",
          "46: do_test tcl-1.2.1 {",
          "47:   set v [catch {db cache bogus} msg]",
          "48:   lappend v $msg",
          "",
          "[Removed Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "[Added Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, bind_fallback, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Removed Lines]",
          "794: finish_test",
          "",
          "[Added Lines]",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "796: do_test 18.100 {",
          "797:   unset -nocomplain bindings abc def ghi jkl mno e01 e02",
          "798:   set bindings(abc) [expr {1+2}]",
          "799:   set bindings(def) {hello}",
          "800:   set bindings(ghi) [expr {3.1415926*1.0}]",
          "801:   proc bind_callback {nm} {",
          "802:     global bindings",
          "803:     set n2 [string range $nm 1 end]",
          "804:     if {[info exists bindings($n2)]} {",
          "805:       return $bindings($n2)",
          "806:     }",
          "807:     if {[string match e* $n2]} {",
          "808:       error \"no such variable: $nm\"",
          "809:     }",
          "810:     return -code return {}",
          "811:   }",
          "812:   db bind_fallback bind_callback",
          "813:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "814: } {3 integer hello text 3.1415926 real}",
          "815: do_test 18.110 {",
          "816:   db eval {SELECT quote(@def), typeof(@def)}",
          "817: } {X'68656C6C6F' blob}",
          "818: do_execsql_test 18.120 {",
          "819:   SELECT typeof($mno);",
          "820: } {null}",
          "821: do_catchsql_test 18.130 {",
          "822:   SELECT $e01;",
          "823: } {1 {no such variable: $e01}}",
          "824: do_test 18.140 {",
          "825:   db bind_fallback",
          "826: } {bind_callback}",
          "827: do_test 18.200 {",
          "828:   db bind_fallback {}",
          "829:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "830: } {{} null {} null {} null}",
          "831: do_test 18.300 {",
          "832:   unset -nocomplain bindings",
          "833:   proc bind_callback {nm} {lappend ::bindings $nm}",
          "834:   db bind_fallback bind_callback",
          "835:   db eval {SELECT $abc, @def, $ghi(123), :mno}",
          "836:   set bindings",
          "837: } {{$abc} @def {$ghi(123)} :mno}",
          "838: do_test 18.900 {",
          "839:   set rc [catch {db bind_fallback a b} msg]",
          "840:   lappend rc $msg",
          "841: } {1 {wrong # args: should be \"db bind_fallback ?CALLBACK?\"}}",
          "842: do_test 18.910 {",
          "843:   db bind_fallback bind_fallback_does_not_exist",
          "844: } {}",
          "845: do_catchsql_test 19.911 {",
          "846:   SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi);",
          "847: } {1 {invalid command name \"bind_fallback_does_not_exist\"}}",
          "848: db bind_fallback {}",
          "850: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
      "candidate_info": {
        "commit_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bce667015ebf61438a009ef19db0d06842ed07",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use 64-bit APIs in the fileio.c extension.\n\nFossilOrigin-Name: b49d56a0faf012978c50fb8662125ea21bdf5054fddf5975644cbc941c153e70",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     fclose(in);",
          "153:     return;",
          "154:   }",
          "156:   if( pBuf==0 ){",
          "157:     sqlite3_result_error_nomem(ctx);",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "161:   if( 1==fread(pBuf, nIn, 1, in) ){",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "165:     sqlite3_free(pBuf);",
          "",
          "[Removed Lines]",
          "155:   pBuf = sqlite3_malloc( nIn );",
          "162:     sqlite3_result_blob(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "[Added Lines]",
          "155:   pBuf = sqlite3_malloc64( nIn );",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d7b1d1d41ff69d5465fcb861420816ecb066c25a9015eefdab5fae15a2e1c9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ca8067af3a0d3550eb339b06cac8bd47f010fa",
      "candidate_info": {
        "commit_hash": "87ca8067af3a0d3550eb339b06cac8bd47f010fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87ca8067af3a0d3550eb339b06cac8bd47f010fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "Fix the new ability to unregister virtual table modules so that it works for the automatic PRAGMA virtual tables.\n\nFossilOrigin-Name: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 43e8b14314d876178d487c3b519296ac1de065fdcaa70768e40d684015bceb9d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:       sqlite3DbFree(db, pDel);",
          "73:       pMod = 0;",
          "74:     }else{",
          "75:       sqlite3VtabModuleUnref(db, pDel);",
          "76:     }",
          "77:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:       sqlite3VtabEponymousTableClear(db, pDel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
      "candidate_info": {
        "commit_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/705e73344ed81ea306ea6df8b94fc6b623319def",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Omit the check for conflicting shared-cache locks in sqlite3Prepare() if the database connection uses no shared cache.  We might be able to go back and remove this code completely, due to the newer Schema.iGeneration logic, but that will take more analysis.  This check-in gives the speed benefit but not the reduction in code size.\n\nFossilOrigin-Name: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc8d45086dc2bcb9bce756088e99e63cbeedf9129139fb0e6a48b43c4f502180",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:       }",
          "615:     }",
          "616:   }",
          "",
          "[Removed Lines]",
          "604:   for(i=0; i<db->nDb; i++) {",
          "605:     Btree *pBt = db->aDb[i].pBt;",
          "606:     if( pBt ){",
          "607:       assert( sqlite3BtreeHoldsMutex(pBt) );",
          "608:       rc = sqlite3BtreeSchemaLocked(pBt);",
          "609:       if( rc ){",
          "610:         const char *zDb = db->aDb[i].zDbSName;",
          "611:         sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "612:         testcase( db->flags & SQLITE_ReadUncommit );",
          "613:         goto end_prepare;",
          "",
          "[Added Lines]",
          "604:   if( !db->noSharedCache ){",
          "605:     for(i=0; i<db->nDb; i++) {",
          "606:       Btree *pBt = db->aDb[i].pBt;",
          "607:       if( pBt ){",
          "608:         assert( sqlite3BtreeHoldsMutex(pBt) );",
          "609:         rc = sqlite3BtreeSchemaLocked(pBt);",
          "610:         if( rc ){",
          "611:           const char *zDb = db->aDb[i].zDbSName;",
          "612:           sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "613:           testcase( db->flags & SQLITE_ReadUncommit );",
          "614:           goto end_prepare;",
          "615:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bc5cf9ae93aea1a77f52432dc949f3b4a38ee32",
      "candidate_info": {
        "commit_hash": "2bc5cf9ae93aea1a77f52432dc949f3b4a38ee32",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2bc5cf9ae93aea1a77f52432dc949f3b4a38ee32",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Add a NEVER() to the ALTER TABLE fix in check-in [1d2e53a39b87e364]\n\nFossilOrigin-Name: c7309ed3c7588c7e51e09418bf5cfd4611539b44c39cef9ed4ae0e385bae7625",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed28aaa4851202111a502f883ca06359d89b25bba4055c29d7bce2b501cfcc68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:   Parse *pParse = pWalker->pParse;",
          "761:   int i;",
          "762:   if( pParse->nErr ) return WRC_Abort;",
          "764:   if( ALWAYS(p->pEList) ){",
          "765:     ExprList *pList = p->pEList;",
          "766:     for(i=0; i<pList->nExpr; i++){",
          "",
          "[Removed Lines]",
          "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
          "",
          "[Added Lines]",
          "763:   if( NEVER(p->selFlags & SF_View) ) return WRC_Prune;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
          "505: }",
          "508: do_catchsql_test 22.4 {",
          "509:   ALTER TABLE t1 RENAME TO t4;",
          "510: } {1 {error in view v2: view v2 is circularly defined}}",
          "",
          "[Removed Lines]",
          "507: breakpoint",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}